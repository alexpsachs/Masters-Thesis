{
    "myint": "I have a workaround for this problem (myint/autopep8@7b41e3a304ab311c1ad60c8cd64391d75c3f10c1). It makes autopep8 only fix one line at a time.\n. Thanks.\n. By the way, here is the pep8 output:\n$ pep8 file.py\nfile.py:1:1: W293 blank line contains whitespace\nfile.py:7:1: E303 too many blank lines (4)\n. Thanks.\n. clach04, I wonder if the hanging pep8 is due to my recent change. (I removed shell=True in the Popen call since the shell shouldn't be necessary since we aren't using any shell features. http://docs.python.org/library/subprocess.html#popen-constuctor) I'm not on Windows, so can you try replacing the existing Popen call with the following.\ndiff\n- p = Popen(cmd, stdout=PIPE)\n+ p = Popen(' '.join(cmd), stdout=PIPE, shell=True)\n. Oh, I see. I parsed your message incorrectly. I accidentally read it as being about a bug in the current version.\nBy the way, it looks like hhatto started work on a branch with unit tests.\n. Fixed in e0f12fc49951b899bbca554746575954ef2a7d17.\nThanks\n. By the way, I fixed my incorrect comment in 59b8177304115c20557397defd08a77fd68037b9. (I probably shouldn't make commits after just waking up.)\n. I can't seem to reproduce your crash (see test_e224_and_e225() in the unit test file). What output do you get when you run pep8 directly on your file (instead of autopep8)?\n. bec4e89cb3 should fix your problem. Thanks for the report.\n. Are you sure it ever changed tabbed-indentation to spaces? I just tried autopep8 version 0.5.2 and it doesn't fix it at all.\npython\ndef foo():\n    print('5')\n    if True:\n        print(7)\nresults in\n$ autopep8 --verbose blah.py\n'fix_w191' is not defined.\nblah.py:2:1:W191 indentation contains tabs\n'fix_w191' is not defined.\nblah.py:3:1:W191 indentation contains tabs\n'fix_w191' is not defined.\nblah.py:4:1:W191 indentation contains tabs\ndef foo():\n    print('5')\n    if True:\n        print(7)\nYou might want to start a new issue to request this feature.\n. Sure, I'll try it on a separate branch.\n. I've implemented it on the \"reindenter\" branch. Let me know what you think.\n. I've merged it into master. I just noticed your Jenkins pages. Very useful!\nBy the way, I added a script \"test/acid.py\". It runs autopep8 on all Python files in \"sys.path\". I've made fixes so that autopep8 can run without crashing on all Python files distributed with Python 2.7. (I didn't try with Python 3 yet.)\n. You should probably contact pep8's developers. autopep8 basically assumes pep8's reports to be correct (for the most part).\nThough, personally, I prefer to just remove all trailing whitespace in my code.\n. You probably already know this, but you can set autopep8 to ignore those errors (globally) for now.\n$ autopep8 --ignore=W191,W101,W291\n. I just realized you weren't talking about trailing whitespace. (I thought the <tab> and <space> were in their actual location at the end of the lines. That would violate one of the PEP 8 rules.) In that case, I do agree. pep8 could probably mark the multi-line string lines before running the normal checks.\n. eb47d250c779e9de697c777b1c255327b529ae28 is a partial solution.\n. Fixed with 594b73b8b9ee75ae159a24ebf1201d50a4acbe7e. Let me know if I missed any cases.\n. Thanks.\n. Thanks.\n. Shouldn't you be running pep8 rather than autopep8? pep8 is for checking code, while autopep8 is for modifying code.\n. I think you need post this at pep8's issue list.\n. I must not have read this carefully. This would be a useful feature.\n. This is closed by 0ff157790aa51b5a76b796776e537f25df7c491e.\n. What version of pep8 do you have installed? Also what do you get when you run\n$ pep8 --repeat table.py\nThanks\n. Never mind, I was just able to reproduce it. (The problem was not showing up in the latest revision in git.) I'll take a look.\n. It looks like I fixed the underlying bug previously in e9ab933c110cab60b96d0d5e121f1cfc40778875. We just need to bump the version on PyPi. Until then, please install the latest version of autopep8 from github.\n. Hi, I already have this implemented in branch e502. (I've been tracking some of the new checkers you've been adding to pep8.) But thanks anyway.\nI haven't done any work at all on writing fixers for your new indentation checks. So if you write a fixer for that, I'll certainly welcome it. Thanks.\n. Thanks for reporting the issue to the Travis guys.\n. Cool. I look forward to using this feature once complete.\nYou probably already noticed this, but just in case not; currently,\npython\nfoo(1, 2, 3,\n4, 5, 6)\nproduces\npython\nfoo(1, 2, 3,\n     4, 5, 6)\nNot directly related, but do you know why pep8 doesn't find anything wrong with\npython\nfoo(1, 2, 3,\n       4, 5, 6\n. This one is also specific to the version on PyPi. I previously fixed it by adding a conditional in the pep8.Checker-derived class.\n. I've confirm your findings about 0.6.3.\nI made some stylistic improvements to the line shortening algorithm. But I don't recall fixing anything. I'll compare with 0.6.3 to see what exactly changed.\n. It looks like I did fix it.  The code previously didn't fully check for syntax problems before breaking the line. We need to upgrade the version on PyPi.\n@hhatto, could you bump the version? Thanks.\n. Yes, that would be helpful as we aren't developing on Windows ourselves. I imagine somewhere in the code, a '\\n' is used rather than self.newline. Try passing self.newline into _shorten_line() and see if that fixes the problem.\nThanks\n. Thanks.\n. Fixed in commit 99c5855622086594fd76cb59c95fbd24e7ccf837.\n. @jayrod, it seems to work for me. Could you provide the relevant commands you used and the traceback you are getting?\n```\n$ wget https://pypi.python.org/packages/source/a/autopep8/autopep8-1.2.1.tar.gz#md5=4167555f521ddd69b66f13819604f3db\n$ tar xf autopep8-1.2.1.tar.gz\n$ cd autopep8-1.2.1/\n$ python test/test_autopep8.py\nRan 457 tests in 16.968s\nOK (skipped=2)\n. Thanks for the heads up.\n. This is fixed in commit 9eb95e2ce3bdbebeb75f85e1871e5589b78f043f.\n. Your autopep8 is probably running in compatibility mode (where it runs pep8 as a subprocess rather than importing it as a module). Upgrading to the latest pep8 (1.3), should fix this.\n. Actually, my above statement might not be true. But could you try upgrading to the latest autopep8 and pep8? Thanks.\n. Correct, you'll need to upgrade to the latest autopep8 (0.7).\n.\n$ autopep8 --in-place --recursive .\n```\n. It should format only Python files, no matter the extension. (It looks at the shebang line to determine if they contain Python code.) If it is formatting non-Python code, please let me know.\nIn Unix:\n$ find . -name '*.py' -exec autopep8 --in-place '{}' \\;\n. Whoops, I just noticed I didn't merge your stuff in correctly due to conflict. (The tests were missing.) Let me try this again.\n. Okay, finally merged it correctly into the \"e12\" branch. I was initially trying to merge in \"master\" rather than \"long-lines\".\n. @samv, I found a case that breaks build_tokens_logical(). See test/break_build_tokens_logical.py.\n. I worked around this (in @f2012e53d9180676d18cace36fb91c65b6a82ee3) by running the E12 fixes independently from the other fixes. Let me know if you find a better way of doing this.\n. I found a case that doesn't get fixed properly.\npython\nif True:\n    x = {\n            }\nThe fixer transforms it into,\npython\nif True:\n    x = {\n}\nwhich is dedented one level too much.\n. Thanks.\n. I fixed a bug in fix_702() by using get_logical(). It was needed to get the proper indentation. But I noticed that get_logical() assumes E702-clean input. (Chicken and egg.) Any thoughts?\n. I left this unimplemented since changing the == to is might not always be the best solution. Sometimes it is better to do if not spam. (Though the latter is not something we should change to automatically as it might change the behavior of the program.)\nI'll add this (simple) fix_e711 method and make it ignored by default for now.\n. Good idea. I'll do that.\n. Resolved in b2f813cd1eb9d14196b38f164a3919113b0cec81.\n. The correct indentation (to distinguish the parameters from the function body), would be:\npython\ndef long_function_name(\n        var_one, var_two, var_three,\n        var_four):\n    print(var_one)\nThe reason we end up with current output is due to pep8. It doesn't complain about the output you are getting.\n. By the way, I added this to the pep8 issue list.\n. See the issue on pep8's issue list.\n. No, I think the culprit is --select=E122. If you want to only fix alignment issues, try --select=E12.\n. I'm going to close this since we are doing to correct thing given pep8's output. If pep8 eventually changes to mark this case as incorrect, then autopep8 will automatically fix it.\n. Resolved in 5ab9f92cf46bbcff343dfd1e2f3fb0c60a4bdb13.\n. That is somewhat expected given that E12 (line indentation alignment) fixes are going on there. The E12 fixer requires many iterations. I'm sure it could be improved.\nRight now we basically have two techniques to fix E12. One is slow and more thorough. The other is more of a shortcut that is used if the former fails. I should probably do things in the opposite order. The shortcut should be tried first. That should improve performance considerably.\n. 157a8291749bfa06b41fb11ea233b50d1ddc4433 speeds things up by a few fractions of a second.\n. The main bottleneck is pep8 right now. To optimize this, we have to decrease the number of pep8 checks we run. (In the case of sphinx/environment.py we are calling pep8 20 times.) The other bottleneck is our FixPEP8.find_logical() method, which calls tokenize a lot.\n```\n     9514046 function calls (9083741 primitive calls) in 9.861 seconds\n\nOrdered by: internal time\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n   413064    1.643    0.000    4.229    0.000 tokenize.py:379(_tokenize)\n   691176    1.033    0.000    1.830    0.000 pep8.py:1212(run_check)\n   470321    0.996    0.000    0.996    0.000 {method 'match' of '_sre.SRE_Pattern' objects}\n    22818    0.613    0.000    3.971    0.000 pep8.py:1268(check_logical)\n    22818    0.414    0.000    0.535    0.000 pep8.py:1234(build_tokens_line)\n       20    0.375    0.019    7.362    0.368 pep8.py:1312(check_all)\n       16    0.341    0.021    1.636    0.102 autopep8.py:243(find_logical)\n  2022069    0.299    0.000    0.299    0.000 {method 'append' of 'list' objects}\n    22848    0.207    0.000    0.207    0.000 pep8.py:653(missing_whitespace_around_operator)\n  1221100    0.204    0.000    0.204    0.000 {built-in method getattr}\n    10913    0.200    0.000    0.514    0.000 parse.py:113(addtoken)\n   433320    0.188    0.000    0.188    0.000 {built-in method new of type object at 0x1001757c0}\n    22818    0.154    0.000    0.178    0.000 pep8.py:876(explicit_line_join)\n    22818    0.145    0.000    0.169    0.000 pep8.py:354(whitespace_around_keywords)\n    35333    0.145    0.000    1.024    0.000 pep8.py:1221(check_physical)\n    22818    0.134    0.000    0.137    0.000 pep8.py:378(missing_whitespace)\n    22818    0.121    0.000    0.125    0.000 pep8.py:590(whitespace_before_parameters)\n    22818    0.115    0.000    0.148    0.000 pep8.py:626(whitespace_around_operator)\n    91272    0.102    0.000    0.102    0.000 {method 'finditer' of '_sre.SRE_Pattern' objects}\n    22967    0.101    0.000    0.106    0.000 pep8.py:430(continuation_line_indentation)\n    35333    0.095    0.000    0.132    0.000 pep8.py:167(tabs_or_spaces)\n    22830    0.090    0.000    0.091    0.000 pep8.py:789(whitespace_before_inline_comment)\n   282062    0.090    0.000    0.090    0.000 {method 'rstrip' of 'str' objects}\n   231195    0.090    0.000    2.971    0.000 pep8.py:1295(generate_tokens)\n    22818    0.087    0.000    0.087    0.000 pep8.py:752(whitespace_around_named_parameter_equals)\n    45638    0.080    0.000    0.080    0.000 {method 'search' of '_sre.SRE_Pattern' objects}\n   371252    0.074    0.000    0.074    0.000 {method 'span' of '_sre.SRE_Match' objects}\n624739/624500    0.070    0.000    0.070    0.000 {built-in method len}\n    46385    0.068    0.000    0.158    0.000 parse.py:191(pop)\n    22818    0.066    0.000    0.101    0.000 pep8.py:321(extraneous_whitespace)\n    57069    0.065    0.000    0.141    0.000 pytree.py:429(convert)\n   114772    0.053    0.000    0.053    0.000 {method 'find' of 'str' objects}\n171860/16040    0.050    0.000    0.052    0.000 pytree.py:301(pre_order)\n171870/16050    0.049    0.000    0.051    0.000 pytree.py:294(post_order)\n    11740    0.046    0.000    0.086    0.000 tokenize.py:345(generate_tokens)\n    35333    0.045    0.000    0.088    0.000 pep8.py:200(trailing_whitespace)\n    22818    0.045    0.000    0.070    0.000 pep8.py:730(whitespace_around_comma)\n    35353    0.043    0.000    0.049    0.000 pep8.py:1193(readline)\n   299888    0.041    0.000    0.041    0.000 {method 'isidentifier' of 'str' objects}\n    35353    0.041    0.000    1.114    0.000 pep8.py:1202(readline_check_physical)\n    46383    0.040    0.000    0.045    0.000 parse.py:184(push)\n    35333    0.040    0.000    0.095    0.000 pep8.py:187(tabs_obsolete)\n    72756    0.039    0.000    0.039    0.000 {method 'startswith' of 'str' objects}\n```\n. There are many cases like this. Long lines are only shortened in obvious (and safe) cases. In this case, you have a single long string. There isn't much we can do there in an automated fashion. We could break the sentence into separate strings, but that seems like something a human should do.\nThough, if anyone has a patch that safely and consistently breaks long strings, I'd consider it.\n. It seems like there would be edge cases one would have to consider. For example, this would corrupt raw strings.\nThe thing that worries me about modifying strings automatically is that we may accidentally modify its contents. And this corruption may be hard to detect.\n. @njharman, I agree. Safer is better. I'll keep the current behavior.\nBy the way, how did you find your way to autopep8? I'm curious because I noticed that over the last week or so, the number of watchers of autopep8 more than doubled. (I have my guesses based on what I've found via web searches, but I'm not sure.)\n. @Stals, thanks.\n. It looks like it doesn't happen in Python 3. I'll debug this with Python 2 when I get a chance. Thanks for pointing this out.\n. I found that, lib2to3 on Python 2 raises a unicode exception when passed your example. (lib2to3 is what we use to fix W601.) d1aaff89163c1d80e85a5f242915dfb3d77fdd94 catches this exception. As a result, the W601 code fix doesn't happen. This may be the best that I can do given that there seems to be some limitation in lib2to3 with respect to unicode (in Python 2).\n. @StephaneBunel, it looks like @hhatto does.\n. I had to break this one to fix issue #43. We'll need to look at this again.\n. This should be fine now on all supported Python versions. Python >= 2.6.4 is fine. Python 2.6.1 has a problem. A diff reveals that Python 2.6.4's lib2to3 seems to have improved Unicode support.\n. By failed, do you mean a stack trace is produced? Or do you mean that the code isn't getting formatted? Could you post a code example that causes failure?\n. That is expected for now. autopep8 currently only shortens simple cases. It is mostly limited to shortening expressions.\n. I've added a todo note in f6e7f096836dfffa39828fa1a287a4db6e7a29a2. With the recent addition of logical line parsing, I don't think it would be too hard to add support for shortening the lines in statements like the above.\n. I've done some experimenting on the shorten branch.\nThe result isn't too pretty, but it does more shortening than previously. This is enabled using the --aggressive option.\nbash\n$ ./autopep8.py blah.py --aggressive  --diff\ndiff\n--- original/blah.py\n+++ fixed/blah.py\n@@ -1,15 +1,22 @@\n models = {\n     'auth.group': {\n         'Meta': {'object_name': 'Group'},\n-        'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n-        'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),\n-        'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n+        'id': (\n+            'django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n+        'name': ('django.db.models.fields.CharField', [], {\n+                 'unique': 'True', 'max_length': '80'}),\n+        'permissions': ('django.db.models.fields.related.ManyToManyField',\n+                        [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n     },\n     'auth.permission': {\n-        'Meta': {'ordering': \"('content_type__app_label', 'content_type__model', 'codename')\", 'unique_together': \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},\n-        'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n-        'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),\n-        'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n+        'Meta': {'ordering': \"('content_type__app_label', 'content_type__model', 'codename')\", 'unique_together':\n+                 \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},\n+        'codename': ('django.db.models.fields.CharField', [], {\n+                     'max_length': '100'}),\n+        'content_type': ('django.db.models.fields.related.ForeignKey',\n+                         [], {'to': \"orm['contenttypes.ContentType']\"}),\n+        'id': (\n+            'django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n         'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})\n     },\n }\n. I may try putting newlines after every comma operator. At least for this case, it should look neater.\n. I plan to do something like that. Also, the E12 fixers will automatically fix any badly aligned indentation.\n. See f3855c67dfa02bca589b8a63ee91bf03b6535c0d for the aforementioned newline-after-each-comma strategy.\n. A command-line option could be okay. I don't currently have a use for this type of feature so I probably won't be implementing this any time soon. But I would consider a patch.\n. Hi @stefanmohl, for docstrings, I wrote docformatter. It might be worth a try.\n. Does it still fail to parse if you use # -*- coding: utf-8 -*- instead? (Note the asterisk symbols.)\n. Can you post a code example?\nThanks\n. I get the error too on Python 2.7.\n$ python2.7 ./autopep8.py french.py\n./autopep8.py:1488: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n  if fixed_source == tmp_source:\n'ascii' codec can't decode byte 0xc3 in position 53: ordinal not in range(128)\n@kryskool, the AttributeError shouldn't matter. On Python 2, we aren't using the result of detect_encoding(). See open_with_encoding(), where only Python 3 supports the encoding attribute. I'm not sure what is causing Python 2 to not detect the encoding of your example properly. I'll take a look at this later.\nI'm guessing that we may need to use codecs.open() on Python 2.\n. I've fixed this issue. Let me know how it works for you guys.\n. How about this?\n``` python\n-- coding: utf-8 --\nprint '\u4e2d\u56fd'\n```\n. Yeah, I tried, but couldn't reproduce it. I've tested against Python 2.6, 2.7, and 3.3.\n``` bash\n$ python2.6 autopep8.py sample.py \n-- coding: utf-8 --\nprint '\u4e2d\u56fd'\n$ python2.7 autopep8.py sample.py \n-- coding: utf-8 --\nprint '\u4e2d\u56fd'\n$ python3.3 autopep8.py sample.py \n-- coding: utf-8 --\nprint '\u4e2d\u56fd'\n```\nWhat does the following give you?\nbash\n$ file sample.py\n. Do you have the latest version of autopep8 from GitHub?\nbash\n$ md5sum /home/reorx/Envs/Python/virtualenvs/PLAY/lib/python2.7/site-packages/autopep8.py\nbash\n$ md5 autopep8.py\nMD5 (autopep8.py) = 57f5c86bb2edffd68b1ca59f3f1ffb05\n. Also, what is your preferred encoding?\nbash\n$ python -c 'import locale; print(locale.getpreferredencoding())'\n. Here is another one.\nbash\npython -c 'import autopep8; print(autopep8.detect_encoding(\"sample.py\"))'\n. No problem.\n. I can't reproduce this. Could you provide a full example with command-line arguments? Also, please provide the output of autopep8 ---version, pep8 --version, and python --version.\nbash\n$ cat blah.py \nsetup(\n      name = 'sympy', version = sympy.__version__,\n      description = 'Computer algebra system (CAS) in Python',\n)\n$ ./autopep8.py -d blah.py \n--- original/blah.py\n+++ fixed/blah.py\n@@ -1,4 +1,4 @@\n setup(\n-      name = 'sympy', version = sympy.__version__,\n-      description = 'Computer algebra system (CAS) in Python',\n+    name='sympy', version=sympy.__version__,\n+    description='Computer algebra system (CAS) in Python',\n )\n. Thanks. FIxed in 33b26bc4a87917b9c56240cdf24c1ad4c3b1e85c.\n. The line shortening algorithm is fairly conservative. There are many cases it won't shorten for safety reasons. I have a note about it here. Currently, other than a few special cases, autopep8 will not shorten multi-line statements.\n. I'm going to close this as a duplicate of issue #41.\n. This one isn't automated because the (correct) fix changes the semantics of the program. Below is the relevant section out of PEP 8.\nYes:   if greeting:\nNo:    if greeting == True:\nWorse: if greeting is True:\nAutomatically converting if greeting == True: to if greeting: changes the meaning of the program. If we set greeting to 15 for example, the block inside the if will now be evaluated whereas previously it would not.\nThis would be okay if we add some sort of flag to make the user's intent explicit, such as --change-semantics.\n. It looks like you haven't pushed your local branch to your fork yet. So try,\nshell\ncd autopep8\ngit push origin <branch_name>\nThen your branch should show up on the GitHub webpage, where you can do a pull request.\n. Actually, I was referring to changing if greeting == True: to if greeting: rather than the opposite. It is a good change, but not suited for automation (due to semantic changes). Either the person intended to say if greeting: or if greeting is True:. That is a decision that has to be made with the semantics in mind.\nI'll close this for now. If someone wants to add some command-line option to clarify whether the user wants the former or latter form, they can re-poen this with a pull request.\n. I see what you mean. But I'd prefer autopep8 to make code simpler rather than more complex. Your suggestion will silence the pep8 utility's complaint, but it doesn't really follow the spirit of the PEP 8 style guide.\nI think that when this sort of ambiguous problem shows up, the user should do some code review rather than automate it. If we automatically silence these pep8 complaints, we get rid of this opportunity for code review.\n. Yeah, that is supported with a verbose flag. :)\nshell\n$ autopep8 -vvv\n-v prints the current progress. -vv also prints when autopep8 gives up. -vvv also prints when autopep8 does not implement a particular fix.\n. I've merged in a modified version of this. It wasn't actually working since --max-line-length was being interpreted as a string.\nThanks\n. What version of Python is this on (python --version)?\n. Can you try again with the latest source code from git?\nThanks\n. Could you upload your example somewhere? I'd like to experiment with it.\n. I've only tested this using Wine so far. I should probably try this in real Windows at some point. (Using Wine, I was only able to install Portable Python rather than the regular Python from python.org.)\nThe following works fine.\nshell\nwine windows/Portable\\ Python\\ 2.7.3.1/App/python.exe autopep8.py -vvv -i for_autopep8.txt\n[file:for_autopep8.txt]\n--->  27 issue(s) to fix {'E221': set([35]), 'E301': set([8, 10, 19]), u'E231': set([19, 17, 18, 3]), 'E302': set([16, 2]), 'E701': set([39]), 'E225': set([34, 4, 5, 6, 7, 20])}\n--->  17 issue(s) to fix {u'E231': set([24, 5, 22, 23]), 'E225': set([6, 39, 8, 9, 7, 25]), 'E301': set([24])}\n--->  7 issue(s) to fix {u'E231': set([5, 22, 23]), 'E301': set([24])}\n--->  3 issue(s) to fix {u'E231': set([5, 22, 23])}\n--->  0 issue(s) to fix {}\nfor_autopep8.txt gets modified to\n``` python\ninitialize data to be stored in files, pickles, shelves\nclass Person():\n    def init(self, name, age, pay=0, job=None):\n        self.name = name\n        self.age = age\n        self.pay = pay\n        self.job = job\n.\n.\n.\n```\nCould you run it with the -vvv verbose option. I'd like to see if your run is different from mine?\n. The following is for reference.\nBefore:\nshell\n$ md5 for_autopep8.txt \nMD5 (for_autopep8.txt) = 2b521f5260cf25c860b148fd2c2f912b\n$ file for_autopep8.txt \nfor_autopep8.txt: C++ source, UTF-8 Unicode text, with CRLF line terminators\nAfter:\nshell\n$ md5 for_autopep8.txt \nMD5 (for_autopep8.txt) = 41e72c271acd0e0d16f467dc437e5510\n$ file for_autopep8.txt \nfor_autopep8.txt: C++ source, UTF-8 Unicode text, with CRLF line terminators\n. Could you try with the -i option? This will write the changes into the file. I think this should work. I think the problem happens only if you redirect standard out using >.\nshell\n$ cp \"c:\\Python27\\Lib\\site-packages\\31.py\" test.py\n$ python.exe \"c:\\Python27\\Lib\\site-packages\\autopep8.py\" -i test.py\nPlease post test.py after running the above.\n. Try again with fd4e1660935b76f1320577b08c4cc7988ce4176f.\n. This should be fixed now.\n. This sometimes happens when pep8 is given code with mixed line endings. See my issue on the pep8 issue list.\nI suppose we could fix the line endings to be uniform before passing to pep8.\n. I explored bytecode comparison when I first wrote the acid tests. I gave up on it once I found that things like has_key() and in didn't collapse into the same bytecode. But since autopep8 is now doing things a bit more complicated like shortening lines, it might be worth doing what you suggest. I suppose we would need to disable everything except whitespace, indentation, and line length changes.\nBy the way, the idiomatic changes I mention are basically the things 2to3 -f idioms fixes.\n. See 8631ecb9e0a8c6f1ffd8c630567fb221a19c9ff9.\n. I should probably do a recursive comparison of the code object rather than using dis. My current implementation with dis is basically just checking the top-level bytecode.\n. For the most part, this works well. But sometimes the same code section generates different, but equivalent, bytecode representations. For example\n16 LOAD_CONST             338 ((('catalogue', '0001_initial'), ('customer', '0001_initial'), ('partner', '0001_initial'), ('address', '0001_initial')))\nversus\n16 LOAD_CONST               1 ('catalogue')\n19 LOAD_CONST               2 ('0001_initial')\n22 BUILD_TUPLE              2\n25 LOAD_CONST               3 ('customer')\n28 LOAD_CONST               2 ('0001_initial')\n31 BUILD_TUPLE              2\n34 LOAD_CONST               4 ('partner')\n37 LOAD_CONST               2 ('0001_initial')\n40 BUILD_TUPLE              2\n43 LOAD_CONST               5 ('address')\n46 LOAD_CONST               2 ('0001_initial')\n49 BUILD_TUPLE              2\n52 BUILD_TUPLE              4\n. Comparing the AST works better.\n. Thanks.\n. See d89a41ec7db412c78a933b9b3583697d76922545.\n. Fixed in ada282520a5f54f0b77c7003ea40698d467fbf89. Thanks.\n. Here is what I get currently.\n$ autopep8 -d blah.py\ndiff\n--- original/blah.py\n+++ fixed/blah.py\n@@ -1 +1,2 @@\n-some_func(stuff=lambda some, more, *arguments, **keywords: some_expressions and some_other_way_longer_expression) \n+some_func(stuff=lambda some, more, *arguments, **keywords:\n+          some_expressions and some_other_way_longer_expression)\n. Could you post the specific example file? Usually if autopep8 refuses to fix the indentation, it indicates that the file has syntax errors.\n. I'll need something specific to resolve this issue. You listed your command line arguments, but I don't have access to your personal scripts.\n. Fixed in ea99c8cb2ef4f53a60808802183924eaf8f8fc56.\n. I simplified things in 63a04288ff7dcf883d9a62ecc03d9959578005aa. Your use of --select will now behave as one would expect.\n. Could you post an example file that triggers this?\nThanks\n. Never mind, I found it. It is an empty file that triggers it.\n. Works fine for me:\n$ autopep8 --diff --aggressive foo.py\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,2 +1,3 @@\n-def test(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, longlongtmp12356):\n+def test(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7,\n+         tmp8, tmp9, tmp10, longlongtmp12356):\n     pass\nNote the use of --aggressive, which relaxes some of the per-line syntax checks.\n. It looks like those  2642 E231 are correct. The file has that many commas with missing whitespace.\nI followed your procedure, but the tests work fine on my end. I've tried with both Python 2.7 and Python 3.3. On Python 2.7, I get 11 skips no failures both before and after autopep8 of ja.py. On Python 3.3, I get 41 errors before and and after.\nCould you confirm that ja.py is the only file that needs to be modified to reproduce this problem?\nshell\n$ md5 ja.py\nMD5 (ja.py) = 8ed04b16814f264b0ce87c9524aa8d7c\n$ autopep8 -iv -p 2000 ja.py\n$ md5 ja.py\nMD5 (ja.py) = 16210f2d60f7f41b4a15121ed632aa9d\nThanks\n. This is actually already fixed with the latest version of pep8 from their repository.\nThe problem was isolated to test_autodoc.py itself. It was due to the inline comments. For example,\npython\nca2 = 'b'  #: Doc comment for InstAttCls.ca2. One line only.\nOlder versions of pep8 instructed autopep8 to put a space between the hash and the colon. But this would be incorrect since sphinx treats #: as a special comment.\n. By the way, thanks for reporting this. This sort of thing is a good test of autopep8.\n. I have a few requests, before merging. Instead of \"-s\", this should use the standard Unix convention of \"-\" for standard in.\nshell\n$ echo \"print(1)\" | autopep8 -\nAlso, I don't think the Emacs wrapper belongs here. It would be better in some separate repository. (I wouldn't even know how to maintain it.)\nAnd lastly, the code doesn't seem to be cleaning up after itself. It looks like it will leave a temporary file lying around.\nThanks\n. Oh, right. (I got used to always forcing the temporary file to not delete automatically.)\n. Thanks\n. Thanks. fix_file() was getting quite messy. This definitely cleans things quite nicely.\n. Note that I've modified fix_string() to take an actual string as argument (rather than a list of strings). If you want the old behavior, use fix_lines(). See the readme.\n. Thanks for pointing this out. We should probably just get rid of the compatibility mode. I'll do that in a bit.\n. I agree. This needs fixing.\n. The best solution for your above example I suppose would be:\npython\nraise MultiProjectException(\n    \"Ambiguous workspace: %s=%s, %s\" %\n    (varname, varname_path, os.path.abspath(config_filename)))\nWith my recent modifications, something like the above is one of the generated candidates in --aggressive mode. And with a bit of tuning of line_shortening_rank(), something like the above can probably get chosen. The only problem is that the indentation isn't quite right. (We currently are relying on pep8 to detect badly aligned indentation, but pep8 isn't always comprehensive.) We'll need to improve _shorten_line_at_tokens(), such that it produces better indented output. (Or at least good enough such that pep8 can correct it.\n. Okay, I've fixed the issue you pointed out. Though I'm sure there will be other ugliness we'll need to improve.\nI've added an option to print out the candidates.\nautopep8 -vvvv --aggressive\nThis will print out the candidates sorted by preference. Let me know if you see a situation where the candidates are sorted badly or a good candidate is missing from the list altogether. Thanks.\n. I would suggest using --ignore=W601. Could you provide an example that illustrates how it is breaking things?\n. I think there is probably nothing we can do about this case. We can't really distinguish this from the normal {}.has_key('') case. So I think you'll have to just use --ignore=W601.\nNote that we use lib2to3 to do this transformation. 2to3 has the same behavior:\n```\n$ 2to3 blah.py\n--- blah.py (original)\n+++ blah.py (refactored)\n@@ -3,6 +3,6 @@\n soup = BeautifulSoup('</div')\n div = soup.select('div')\n-print div[0].has_key('class')\n-print 'class' in div[0]\n-print div[0].has_attr('class')\n+print('class' in div[0])\n+print('class' in div[0])\n+print(div[0].has_attr('class'))\n```\nThanks for reporting this.\n. It looks like this is related.\n. Yeah, it is 2to3. It works at the AST level. It does not actually execute the code, so it can't know that div[0] is not a dictionary. It just translates all has_key() calls.\n. Note that I've disabled all W6 fixes (including this one) by default now. They can be enabled via --aggressive.\n. I'm not sure what this means. Please provide a specific code example, command-line parameters, expected output, and actual output.\n. Thanks.\n. That could be useful. Though the Python logging library looks quite ugly.\n. Also, I'm not sure if that is useful here. All of autopep8's verbose messages are \"info\" messages. Errors and warnings are dealt with immediately. At the very least, I guess I should encapsulate the verbose printing (with or without the logging module). The current repetitive if verbose conditionals create a bit of a mess.\n. It just looks strange. The rest of Python uses underscores, but logging uses camel case for some reason.\n. Does the logging module fix the problem on your machine? (I don't get this problem on my machine. I've even tried Python 2.7.) I wouldn't mind switching to it for the verbose messages if it actually fixes something.\n. Okay, then the fix is to use codecs.getwriter() like we do for standard out. And then use that everywhere instead of sys.stderr.\n. Could you check out the error branch and let me know if it fixes the error? Thanks.\n. I think we may be able to just get rid of it and run until completion. We used to sometimes run into a cycle of fixes which would result in an infinite loop (solution 1 -> solution 2 -> solution 3 -> solution 1). Now what we do is keep a hash of all previous results and stop if we run into a cycle.\n. Thanks for pointing this out.\n. Right, it isn't completely formatted. The cycles are rare. But in the normal (non-cycle) cases, autopep8 often doesn't fix all errors anyway. If the user wants to know about this, they can run with --verbose. I prefer the default behavior to be as quiet as possible.\n. Works fine for me. Could you be more specific?\n. I think the pep8 module (which we use) made some changes recently. You should report this bug there.\nIn the mean time, you can use the official release of pep8 from PyPI.\nbash\n$ pip uninstall pep8\n$ pip install pep8\n. By the way, I can reproduce the issue too when I install the git version of pep8 (on Python 2.7).\n. This is the relevant code: jcrocholl/pep8@00aff36914\n. This is fixed by jcrocholl/pep8@fe692e30ba1a37796f65ec99120ba7ebd47b999c.\n. I think you were using an old version of autopep8. The current (git) version, only makes whitespace changes by default. Older versions fixed deprecated code (as reported by pep8). In your case tag.has_key(\"style\") was translated to \"style\" in tag. Apparently BeautifulSoup doesn't like that.\nNewer versions of autopep8 only do this sort of change when explicitly enabled by the user (for example via --aggressive). This was actually fixed two months ago. @hhatto, could you upload a new version (either 0.9 or 1.0) to PyPI?\n. With this new version, it should be ignored by default now. But if you want to enable everything except this fix, you can just disable W6 to prevent the has_key() syntax upgrade (--ignore=W6).\n. For more details, see the \"More advanced usage\" section of the readme.\n. Thanks, I added W6 to the fixer description list.\n. Please post PreClean2.py here. When I run autopep8.py on PreClean.py I see no \\xff character in the output.\n``` diff\ndiff --git a/PreClean.py b/PreClean.py\nindex a92d127..7c07d30 100644\n--- a/PreClean.py\n+++ b/PreClean.py\n@@ -3,7 +3,12 @@\n Takes \"Filtered HTML\" output from Word 2010 and pre-cleans\n it to prepare for use by BookBuilder.py\n \"\"\"\n-import re, glob, string, itertools, collections, bs4\n+import re\n+import glob\n+import string\n+import itertools\n+import collections\n+import bs4\n from bs4 import BeautifulSoup, UnicodeDammit\n from pprint import pprint, pformat\n import sys\n@@ -14,14 +19,14 @@ if name == \"main\":\n     soup = BeautifulSoup(book, from_encoding=\"windows-1252\")\n     for tag in soup.findAll('span'):\n         if tag.br and tag.br.has_key(\"style\") and \\\n-            \"page-break-before:always\" in tag.br[\"style\"]:\n+                \"page-break-before:always\" in tag.br[\"style\"]:\n             tag.extract()\n for tag in soup.findAll('br'):\n     if tag.has_key(\"style\") and \"page-break-before:always\" in tag[\"style\"]:\n         tag.extract()\n\n\nfor tag in soup.findAll('p'): # Remove all empty paragraphs\nfor tag in soup.findAll('p'):  # Remove all empty paragraphs\n         if not tag.text.strip():\n             tag.extract()\n\n```\n. I don't think GitHub issues will accept email attachments. You can just post it directly here inside triple backticks. (I just want to confirm that the output I'm getting from autopep8 is the same as yours.)\n. Yeah, that is what I get too. You are probably right about the HTML editor stripping out the offending character. You could post the file as a gist.\nBy the way, does the problem go away if you use autopep8 --in-place instead of redirecting the output?\n. That makes sense. WIth --in-place autopep8 preserves the original encoding.\nI have an idea of how to preserve encoding on redirect too. I'll probably try implementing that a bit later.\n. @BruceEckel, encoding should now (136efa4ef9b578c43e32edc12cd20519729ae82c) be preserved even when redirecting output. Let me know if this fixes the problem for you.\nThanks\n. Seems to work fine for me:\ndiff\n$ autopep8 --diff foo.py \n--- original/foo.py\n+++ fixed/foo.py\n@@ -1 +1 @@\n-np.around( a, ndig - int( np.ceil( np.log10( np.abs( a ) + 1e-4 ) ) ) )\n+np.around(a, ndig - int(np.ceil(np.log10(np.abs(a) + 1e-4))))\nPlease provide the output of the following:\n$ autopep8 --version\n$ pep8 --version\n$ python --version\nThanks\n. Okay, please also provide:\n$ echo 'np.around( a, ndig - int( np.ceil( np.log10( np.abs( a ) + 1e-4 ) ) ) )' | pep8 -\n$ echo 'np.around( a, ndig - int( np.ceil( np.log10( np.abs( a ) + 1e-4 ) ) ) )' | autopep8 -\n. Fixed with jcrocholl/pep8@03242a7e8d1a59a2431fa5577481cd4cfebfe4bd by @florentx.\n. I've seen this sort of thing before. I'm not sure if restricting it to ^ +# would work since it would cause autopep8 to ignore real comments at the module level.\nIt is certainly possible to (heuristically) detect that these are commented-out code and not real comments. (I do this sort of heuristic check in eradicate to remove commented-out code.)\n. @okcompute, you can use --ignore=E26.\nRunning autopep8 with the --verbose option will give an indication of what error codes are getting triggered.\n. Works fine for me.\nbash\n$ ./autopep8.py -\nraise Exception(threadResult[1],threadResult[2])\nraise Exception(threadResult[1], threadResult[2])\nI guess the real code example has some indentation? Could you provide the actual example that produces the ugly output? Also, please put it in triple backticks. And use the latest version of autopep8 (pip install --upgrade git+https://github.com/hhatto/autopep8).\nThanks\n. That works fine for me too. Are you sure you've upgraded to the latest version (as I mentioned above)?\nfoo.py:\npython\nif True:\n    if True:\n        if True:\n            if True:\n                if True:\n                    if True:\n                        if True:\n                            if True:\n                                raise Exception(threadResult[1],threadResult[2])\n$ ./autopep8.py --diff foo.py\ndiff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -6,4 +6,5 @@\n                     if True:\n                         if True:\n                             if True:\n-                                raise Exception(threadResult[1],threadResult[2])\n+                                raise Exception(\n+                                    threadResult[1], threadResult[2])\n. You can upload files onto Gist.\n. I think GitHub drops email attachments. (The email I get sent has no attachment.)\n. My email address can be found here.\n. Email from @picca: \"Yes I was using the 0.9 official version and not the git one\"\n. I can't test on Windows, but I just got rid of the need for the temporary file altogether. (It is the better solution for all platforms anyway.) Let me know if 80e6e664e19a2df2420967cfce60d7109f2b204c works for you.\nThanks\n. Great. Thanks for the Windows testing.\n. If this is implemented, we could start off by using the pep8 test suite files as input. I'm guessing that would be less tedious that picking out relevant tests from test_autopep8.py.\n. This happens because the default --ignore is E24,W6. If you override it, then those originally ignored items get enabled.\nIn any case, I'll disable the im_class-related code. Thanks for reporting this.\n. Yes, this is intended behavior. See PEP 257:\n\"Insert a blank line before and after all docstrings (one-line or multi-line) that document a class -- generally speaking, the class's methods are separated from each other by a single blank line, and the docstring needs to be offset from the first method by a blank line; for symmetry, put a blank line between the class header and the docstring. Docstrings documenting functions or methods generally don't have this requirement, unless the function or method's body is written as a number of blank-line separated sections -- in this case, treat the docstring as another section, and precede it with a blank line.\"\n. Correct. Though, it wasn't obvious how to detect this case using the pep8 library. So I'm just ignoring this case for now.\n. I'm going to close this for now since I don't see a simple way of handling this case with pep8. I'll accept a pull request if anyone wants to handle this case.\n. Thanks for reporting this. Unfortunately, the best I can do is disable this \"fix\" since it is a bug in lib2to3, which autopep8 uses.\n. Good point. I'll fix this later this week by leaving lines with such keywords alone. Let me know if there are other similar keywords I should look out for.\n. In addition to the above, I should limit this fix to --aggressive mode.\n. I think for this case, I would suggest either disabling this fix, via --disable=W6, or not using --aggressive.\nPEP 8:\nYes:   if greeting:\nNo:    if greeting == True:\nWorse: if greeting is True:\n. And the == False case doesn't get touched because it can get complicated since it would require parsing code. The == True case is easy to fix by just removing that string.\n. I would prefer not to merge this. Though it is a bit more broad, users can already use --disable=E701. I think if we add new options for everyones small preference variations, we'll end up with overly complicated code in autopep8.\n. I see. Though, I'm not sure autopep8 is the place to do this. autopep8 basically just fixes whatever pep8 says is wrong. It seems to me that the pull request should be to pep8.\nIn any case, I'll look into this further when I have time.\nThanks\n. Adding new error codes makes sense to me. The new error codes can then be mapped to the existing fixer functions in FixPEP8's __init__(). Maybe we should use numbers closer to E309 in case pep8 adds more to categories in the future.\n. By the way, the reason those fixes are there are for PEP 257.\n\"Insert a blank line before and after all docstrings (one-line or multi-line) that document a class -- generally speaking, the class's methods are separated from each other by a single blank line, and the docstring needs to be offset from the first method by a blank line; for symmetry, put a blank line between the class header and the docstring. Docstrings documenting functions or methods generally don't have this requirement, unless the function or method's body is written as a number of blank-line separated sections -- in this case, treat the docstring as another section, and precede it with a blank line.\"\n. Looks good to me. My only comment would be to keep lines within 79 columns. (We are called autopep8 after all :)).\n. Send a pull request and I'll merge it. Thanks!\n. Thanks for the report.\n. I don't think this is correct as filename doesn't have to be a directory. --recursive just traverses directory contents if filename happens to be a directory. For example,\n$ autopep8 -r file1 directory1 directory2\nIf more explanation is needed, something like the following might make sense.\n-r, --recursive       run recursively; must be used with --in-place or\n                        --diff; allows filename to be a directory\n. At least on Unix shells, *.py will be expanded by the shell (before it even gets to autopep8). So using autopep8 -r -i *.py in a directory with a.py and b.py is essentially the same as using autopep8 -r -i a.py b.py.\n. I agree, we should add this feature. I think this would match pep8's --exclude behavior better too.\nI tried your above code, but it breaks existing use cases. For example, --exclude=a* will no longer filter out ./a.py. Note that this works properly in pep8. So you might want to look at their code as an example.\nI'll accept a pull request that fixes this, otherwise I might look into it in a week or so.\n. Ah, I see what you meant by \"separately\" now :). I think that may be beyond the scope of autopep8. See my python-modernize fork for selectively doing (Python 2 compatible) 2to3 fixes.\nActually, I should probably undo my previous commit. I just realized that it causes a mismatch between pep8 and autopep8 error codes.\n. Looks promising. Could you document the function you added so that the tests pass? All fix_*() functions require docstrings.\n. Also, since you are mutating lines other lines, you need to return a list of line numbers that were modified. Otherwise, autopep8 won't know what changed and will allow other fixers to clobber the change.\n. Thanks.\n. I think @florian-wagner is running in aggressive mode.\n. Great. I guess this got fixed while I was improving the ranking function.\n. Can you describe the use case? detect_encoding() comes with batteries-included Python. And I'm not sure I understand the second change.\n. I'm unlikely to merge the first change as it adds another dependencies for something that should already be built in. We already test under Python 2.6, so I don't think any change is necessary. I might be of more help if you provide this information. Also pep8 --version and uname -a would be helpful.\n. I'm closing this since I can't reproduce the error. Please reopen this if you have more details.\n. There is a dependency on pep8 >= 1.4.6 in the setup.py. I think it should automatically complain during installation.\n. This is a bug in a very old version of Python 2.7. I think any recent version should fix it.\n. For future reference, I want to eventually switch to argparse instead of optparse. Python 2.6 users can use the third-party version of argparse.\n. This seems like it might need some corresponding changes to the pep8 module, which autopep8 uses. See jcrocholl/pep8#206. Currently, pep8 detects non-four space indentation and reports E111. This is purely a guess, but it could be that there is back and forth fighting between the standard four spaces and the indentation that you are choosing.\nBy the way, if you put your diff text within triple backticks, then GitHub will render it more legibly.\n. An alternative to making changes to pep8 would be to disable all the relevant pep8 error codes whenever non-standard indentation is used. I think the conflicting error codes are E111 and E121.\n. True. I'll probably work on integrating this in a few days. I prefer four space indentation, but I kind of like not seeing those hard-coded values (4) in the code.\n. I've added a --indent-size. I avoided overriding pep8's checks since that required conditional mutation of pep8 based on user input. Note that this disables the E12 fixes. We might be able to just disable E121, but I'll leave that for later.\n. Yeah, I've seen similar cases before. We can extend break_multiline() (probably in aggressive mode only) to handle this case. Or we can make the E501 fixer take logical lines rather than physical lines as input. The former is slower due to the way autopep8 handles them.\n. I'm going to give the logical line solution a shot. I think I will get rid of break_multiline() and make use of the logical line information for all multiline cases.\n. Note that I'm probably going to have to improve line_shortening_rank() since in logical mode we are modifying many more lines than before. We now join long logical lines then re-split them into multiple lines.\n. Very nice. Thanks!\n. Good catch. I think you are right. I'll take a look.\n. This should be fixed in the latest version (1.0a3). Let me know if you find other faulty cases. Thanks.\n. Thanks.\n. @gwelymernans, thanks.\n. @thezoggy, the coveralls thing shows the current code coverage. I'm not sure why coveralls implemented it as pull requests comments rather than commit comments.\n. I guess the optimal form would be,\npython\ndef f(self):\n    self._xxxxxxxx(aaaaaa, bbbbbbbbb, cccccccccccccccccc,\n                   [('mmmmmmmmmm', self.yyyyyyyyyy.zzzzzzz / _DDDDD)],\n                   eee, 'ff')\nBut that will never come up as one of the candidates with autopep8's current strategy of splitting at zero, one, or all commas.\n. Looks interesting. I'll merge it later this week when I get a chance to try it out more. Thanks.\n. I'm noticing some strange behavior where it seems like ( gets turned into [.\nNote that I'm currently testing things on the gw branch.\nIf I run autopep8.py -aaa on example_with_reduce.py, I get invalid syntax. I've narrowed down the problem a bit below.\npython\ndef foo():\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1,len(nodelist),2)])\ngets turned into\npython\ndef foo():\n    return functools.reduce[\n        operator.and_, (cls.interpret[nodelist[i]),\n                        for i in range(1, len(nodelist), 2)])\nIf I look at the list of candidates, it looks like only two are broken.\n$ ./autopep8.py -daaaavvvvv foo.py\n[file:foo.py]\n--->  Applying global fix for E269\n--->  Applying global fix for W602\n--->  3 issue(s) to fix {'E501': {2}, 'E231': {2}}\n--->  1 issue(s) to fix {'E501': {2}}\n-------------------------------------------------------------------------------\n    return functools.reduce[\n        operator.and_, (cls.interpret[nodelist[ i]),\n        for i in range(1, len(nodelist), 2)] )\n-------------------------------------------------------------------------------\n    return functools.reduce(\n        operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(\n        nodelist[i]) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [\n                            cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i])\n                            for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(\n        1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce[operator.and_, (cls.interpret[nodelist[ i]),\n                            for i in range(1, len(nodelist), 2)] )\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_,\n                            [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[\n                            i]) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(\n        nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]\n                            ) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1,\n                            len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)]\n                            )\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)\n                            ])\n-------------------------------------------------------------------------------\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist),\n                            2)])\n-------------------------------------------------------------------------------\n. It looks like the one I mention above is fixed, but it seems that there are other errors in test/example_with_reduce.py.\n```\n$ python -m py_compile test/example_with_reduce.py\n$ ./autopep8.py -v -aaa test/example_with_reduce.py > new_broken.py\n$ python -m py_compile new_broken.py\n  File \"new_broken.py\", line 2680\n    tuple([(op, parsed), for parsed, trans, op, ver in index]),\n                           ^\nSyntaxError: invalid syntax\n```\nIt looks like somehow a comma got introduced.\n. This looks great. Thanks.\nBy the way, is there any reason why the candidates aren't syntax checked with check_syntax()? Is _reflow_lines() smart enough such that checking is unneeded?\n. Right, I forgot that pep8 already split up the error code (E226) for this case. You can ignores these cases by running with --ignore=E226.\n$ cat > foo.py\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n$ autopep8 --ignore=E226 foo.py\nhypot2 = x*x + y*y\nc = (a+b) * (a-b)\n. @Nodd, autopep8 can support it if pep8 adds a check for it. I guess it would involve splitting up E226 into two separate error codes.\n. Thanks.\n. This is fixed by #114.\n. Thanks.\n. Cool, thanks.\n. Thanks. Looks like the Python 3 issue is fixed now. I think there was some Python 3 compatibility code in the main autopep8.py.\n. Sounds good to me. The sample I've been using to calibrate ranking has been fairly small (basically the test cases).\n. Thanks.\n. This will break too much Python 2 code. In autopep8, I only enable a small subset of the fixes for safety. For more fixes, see python-modernize. And for even more fixes, just use 2to3 directly.\n. autopep8 by default avoids modifying the semantics of the program. Thus, it leaves the contents of multiline strings untouched. If you are willing to change the meaning of your program (and you have good unit tests), then use --aggressive (like you did above).\n. python\na = '# Get the feature-values into a numpy arrays of floats but with the extra feature (all ones) and\\n'\nautopep8.shorten_comment(a, 10, last_comment=True)\n'# Get the\\n# feature-values\\n# into a\\n# numpy\\n# arrays\\n# of\\n# floats\\n# but with\\n# the\\n# extra\\n# feature\\n# (all\\n# ones)\\n# and\\n'\n. Use --ignore=W690.\n. Sounds useful. I don't have a use for it personally, but if anyone wants to submit a pull request for it, I'll merge it in.\n. This looks like a pip issue. Try updating to the latest version of pip. Also, see\nhttps://github.com/pypa/pip/issues/1291\n. @gcq, could you try installing via python setup.py install and see if it crashes there too?\n$ git clone https://github.com/hhatto/autopep8\n$ cd autopep8/\n$ python setup.py install\nIf it only crashes with pip, I think this needs to be reported there.\nThanks\n. It looks like distutils on Windows is using the system default encoding to read some file. That file happens not to be encoded in cp1252, which I guess is Windows' default encoding. The question is, which file is it trying to read. I don't have access to a Windows machine, so I can't try probing this myself.\nCould you try finding out what file is being read? I think you can either use a debugger or you can cut things out of autopep8's MANIFEST.in, until python setup.py install succeeds.\nThanks\n. Also, it may be just failing when reading MANIFEST.in itself. MANIFEST.in is encoded in UTF-8. Try seeing what happens if you remove the lines that contain \u00e9 (lines 9 and 10).\n. This is fixed in master. Once we release the next version to PyPI, you guys should be able to do:\n$ pip install --upgrade autopep8\nUntil then, you can do:\n$ pip install --upgrade git+https://github.com/hhatto/autopep8\n. @CoDEmanX, this looks unrelated to the problem reported by @gcq and @zsong. Could you try installing via python setup.py install as mentioned here and see what happens?\nBy the way, your problem might be related to pypa/pip#1674.\n. This is fixed by pypa/pip#1745.\n. It looks like the UTF-8 filename may somehow be affecting OS X's default Python too (at least when using sudo pip install to install packages that depend on autopep8).\nhttps://travis-ci.org/myint-test-org/test-osx/jobs/23869605\n@hhatto, could you release the next patch version of autopep8 on PyPI? Thanks. (Edit: Actually, please wait until b31ac638578ffb9da193bbb71d2092ad66928cc0 is fixed and the Travis CI tests pass again.)\n. I think you are right. autopep8 runs multiple passes of pep8. If lines get expanded during the first pass, the range values will no longer be valid during the second.\nI'm open to pull requests to fix this.\n1. Perhaps we just disable the fixers that modify the line count if --range is used. I'm leaning toward this one since it wouldn't require much change to autopep8.\n2. Or we can track the lines as they get modified. This seems like it might be invasive toward the code and I would prefer to avoid it.\n3. Or we can just get rid of the option completely. I initially added it to try it out in Vim, but I never really used the feature.\n. Good idea about mutating the range. Thanks!\n. Right, the E1 indentation fixer is a global fixer and thus doesn't make sense when the user specifies a line range. See the call to apply_global_fixes().\n. In what context is this about? If this is about the indentation fixer, I don't think it is possible to do it in a range-based manner. For example, if the user tries to fix the indentation in the middle of the block, it could break the syntax.\n. I see, you plan to fix a subset of the specified range that is fixable. Sounds kind of hairy given how complicatedly nested the Reindenter code is already.\n. There is _find_logical() and _get_logical(), if that is what you are referring to. \n. Thanks. I've added --range to the acid tests (in a61f5b3c95fc55f09312099b165fd8bada6dc3e1). You can try running random ranges and check syntax.\n$ ./test/acid.py --range x y\nYou can also compare bytecode, but this sometimes has false positives due to bytecode optimization.\n$ ./test/acid.py --range x y --compare-bytecode\n. No, it does not modify things in place (and that would corrupt all files on the system).\nI don't think you really need to look at the output. At least if you run with --compare-bytecode, the acid test will detect bytecode differences and will exit with a non-zero status.\nAnd if you just want to see diffs, you can just run autopep8 in recursive diff mode against /.\n. Things seems to be okay with my minimal testing. I did some minimal modifications in https://github.com/hhatto/autopep8/tree/local_indenting.\nI have a few requests before merging, which I'll comment on in the diff.\nThanks\n. I think I found a possible bug.\n$ ./acid.py --compare-bytecode --range 100 1000 example_with_reduce.py\n...\n--- /Users/myint/projects/autopep8/test/example_with_reduce.py\n+++ /var/folders/yl/dlrlbmgx2nqcwn6qfrrkf7440000gn/T/tmp_966iz3r.py\n@@ -10509,29 +10509,32 @@\n                                              \"Can't extract file(s) to \"\n                                              'egg cache\\n'\n                                              '\\n'\n-                                             'The following error '\n-                                             'occurred while trying to '\n-                                             'extract file(s) to the '\n-                                             'Python egg\\n'\n-                                             'cache:\\n'\n+                                             '        The following '\n+                                             'error occurred while '\n+                                             'trying to extract file(s) '\n+                                             'to the Python egg\\n'\n+                                             '        cache:\\n'\n...\nContents of strings should not be mutated.\nNote that it seems to be okay if --range is not used.\n$ ./acid.py --compare-bytecode example_with_reduce.py\n. Note that I explicitly skip multiline strings in a few places in the code.\n. Looks good to me. I have another Travis test going now with your changes. I'll merge once that passes. Thanks.\n. It looks like pep8 just got released with some bugs. I'll look at those first.\n. Both styles look good to me. I'll accept a pull request to add such an option.\nBy the way, some time ago, I used to regularly test autopep8 against Jython 2.7 (I think). I didn't even know there was a 2.2 until now. :)\n. As an overview, what autopep8 does, when reformatting long lines, is generate various reformatted line candidates. It then ranks them and selects the best candidate. @gwelymernans is working on an experimental line formatter that produces better looking candidates that are thrown into the mix (when --experimental is enabled).\n. Thanks. And I changed lastest to pypi. :)\n. I'll wait a few days for things to settle. Then I'll ask hhatto to make a release as I don't have PyPI access for autopep8.\n. @hhatto, could you push version 1.0.1 to PyPI?\nThanks\n. Try uninstalling both first:\n```\n$ pip uninstall autopep8 pep8\n$ pip install --upgrade autopep8\n``\n. Maybe it is a permission error. I've never usedpipundersudo` before. Does the following work?\n$ sudo autopep8\nOne last thing you could try is hack the requires.txt to remove the pep8 dependency.\n```\n$ rm /Library/Python/2.7/site-packages/autopep8-1.0.1-py2.7.egg-info/requires.txt\n$ touch /Library/Python/2.7/site-packages/autopep8-1.0.1-py2.7.egg-info/requires.txt\n$ autopep8\n``\n. It looks like I can reproduce this on Travis when installing usingsudo`. I perhaps could have done the same on my own machine, but I don't like to clutter the system directories.\nhttps://travis-ci.org/myint-test-org/test-osx/builds/23866573\nIt is kind of interesting that this has never been reported before.\n. I found the workaround. Try uninstalling the autopep8 and pep8 again. Then install using the following command.\n$ sudo pip install --no-use-wheel autopep8\nhttps://travis-ci.org/myint-test-org/test-osx/jobs/23867467\n. See 9d29b43bc31dde58b80ea6b5adf585d7087b1afe.\n. This is related to currently unresolved issue pypa/pip#1480.\n. Fixed in 4a02947c1983f1d129eb748823ce829c7a946357.\n. Thanks for the report.\n```\n$ echo \"print 'Izidor Matu\u0161ov'\" | python3.3 autopep8.py -\nprint 'Izidor Matu\u0161ov'\n$ echo \"print 'Izidor Matu\u0161ov'\" | python2.7 autopep8.py -\nTraceback (most recent call last):\n  File \"autopep8.py\", line 3662, in \n    sys.exit(main())\n  File \"autopep8.py\", line 3622, in main\n    sys.stdout.write(fix_code(sys.stdin.read(), args))\n  File \"autopep8.py\", line 2820, in fix_code\n    source = source.decode(locale.getpreferredencoding(False))\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xc5 in position 18: ordinal not in range(128)\n``\n.python3.3`:\n``` python\n\n\n\nimport locale\nlocale.getpreferredencoding(False)\n'UTF-8'\nlocale.getpreferredencoding()\n'UTF-8'\n```\n\n\n\npython2.7:\n``` python\n\n\n\nimport locale\nlocale.getpreferredencoding(False)\n'US-ASCII'\nlocale.getpreferredencoding()\n'UTF-8'\n```\n. Could you post the original input file?\n\n\n\nThanks\n. I can reproduce this under -aa. I think at the very least, we should do nothing in the cases where havoc is wreaked.\n(I suspect this may be fixed once we replace the old long line fixers with the --experimental fixer. Right now, both fixers run under --experimental mode.)\n. @maikhoepfel, @gwelymernans's yapf seems to do a better job at this.\n``` diff\n--- 0001_initial.py (original)\n+++ 0001_initial.py (reformatted)\n@@ -7,45 +7,63 @@\nclass Migration(SchemaMigration):\n-    depends_on = (\n-        ('offer', '0001_initial'),\n-        ('order', '0001_initial'),\n-    )\n+    depends_on = (('offer', '0001_initial'), ('order', '0001_initial'),)\n def forwards(self, orm):\n     # Adding model 'Voucher'\n\n\ndb.create_table('voucher_voucher', (\n('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),\n('name', self.gf('django.db.models.fields.CharField')(max_length=128)),\n('code', self.gf('django.db.models.fields.CharField')(unique=True, max_length=128, db_index=True)),\n('usage', self.gf('django.db.models.fields.CharField')(default='Multi-use', max_length=128)),\n('start_date', self.gf('django.db.models.fields.DateField')()),\n('end_date', self.gf('django.db.models.fields.DateField')()),\n('num_basket_additions', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),\n('num_orders', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),\n('total_discount', self.gf('django.db.models.fields.DecimalField')(default='0.00', max_digits=12, decimal_places=2)),\n('date_created', self.gf('django.db.models.fields.DateField')(auto_now_add=True, blank=True)),\n))\ndb.create_table('voucher_voucher', ((\n'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)\n), ('name',\nself.gf('django.db.models.fields.CharField')(max_length=128)), (\n'code', self.gf('django.db.models.fields.CharField')(unique=True,\nmax_length=128,\ndb_index=True)\n), ('usage',\nself.gf('django.db.models.fields.CharField')(default='Multi-use',\nmax_length=128)), (\n'start_date', self.gf('django.db.models.fields.DateField')()\n), ('end_date', self.gf('django.db.models.fields.DateField')()), (\n'num_basket_additions',\nself.gf('django.db.models.fields.PositiveIntegerField')(default=0)\n), ('num_orders', self.gf(\n'django.db.models.fields.PositiveIntegerField')(default=0)), (\n'total_discount',\nself.gf('django.db.models.fields.DecimalField')(default='0.00',\nmax_digits=12,\ndecimal_places=2)\n), ('date_created',\nself.gf('django.db.models.fields.DateField')(auto_now_add=True,\n\nblank=True)),))\n         db.send_create_signal('voucher', ['Voucher'])\n # Adding M2M table for field offers on 'Voucher'\n\n\ndb.create_table('voucher_voucher_offers', (\n('id', models.AutoField(verbose_name='ID', primary_key=True, auto_created=True)),\n('voucher', models.ForeignKey(orm['voucher.voucher'], null=False)),\n('conditionaloffer', models.ForeignKey(orm['offer.conditionaloffer'], null=False))\n))\ndb.create_unique('voucher_voucher_offers', ['voucher_id', 'conditionaloffer_id'])\ndb.create_table('voucher_voucher_offers',\n(('id', models.AutoField(verbose_name='ID',\nprimary_key=True,\nauto_created=True)),\n('voucher', models.ForeignKey(orm['voucher.voucher'],\nnull=False)),\n('conditionaloffer',\nmodels.ForeignKey(orm['offer.conditionaloffer'],\nnull=False))))\ndb.create_unique('voucher_voucher_offers', ['voucher_id',\n\n'conditionaloffer_id'])\n# Adding model 'VoucherApplication'\n-        db.create_table('voucher_voucherapplication', (\n-            ('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),\n-            ('voucher', self.gf('django.db.models.fields.related.ForeignKey')(related_name='applications', to=orm['voucher.Voucher'])),\n-            ('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm[AUTH_USER_MODEL], null=True, blank=True)),\n-            ('order', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['order.Order'])),\n-            ('date_created', self.gf('django.db.models.fields.DateField')(auto_now_add=True, blank=True)),\n-        ))\n+        db.create_table('voucher_voucherapplication', ((\n+            'id', self.gf('django.db.models.fields.AutoField')(primary_key=True)\n+        ), ('voucher', self.gf('django.db.models.fields.related.ForeignKey')(\n+            related_name='applications',\n+            to=orm['voucher.Voucher'])\n+            ), ('user', self.gf('django.db.models.fields.related.ForeignKey')(\n+            to=orm[AUTH_USER_MODEL],\n+            null=True,\n+            blank=True)), ('order', self.gf(\n+            'django.db.models.fields.related.ForeignKey')(to=orm['order.Order'])\n+            ), ('date_created',\n+                self.gf('django.db.models.fields.DateField')(auto_now_add=True,\n+                                                             blank=True)),))\n db.send_create_signal('voucher', ['VoucherApplication'])\n-\n\n\ndef backwards(self, orm):\n\n\n@@ -58,285 +76,754 @@\n         # Deleting model 'VoucherApplication'\n         db.delete_table('voucher_voucherapplication')\n-\n     models = {\n         'address.country': {\n-            'Meta': {'ordering': \"('-is_highlighted', 'name')\", 'object_name': 'Country'},\n-            'is_highlighted': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),\n-            'is_shipping_country': ('django.db.models.fields.BooleanField', [], {'default': 'False', 'db_index': 'True'}),\n-            'iso_3166_1_a2': ('django.db.models.fields.CharField', [], {'max_length': '2', 'primary_key': 'True'}),\n-            'iso_3166_1_a3': ('django.db.models.fields.CharField', [], {'max_length': '3', 'null': 'True', 'db_index': 'True'}),\n-            'iso_3166_1_numeric': ('django.db.models.fields.PositiveSmallIntegerField', [], {'null': 'True', 'db_index': 'True'}),\n-            'name': ('django.db.models.fields.CharField', [], {'max_length': '128'}),\n-            'printable_name': ('django.db.models.fields.CharField', [], {'max_length': '128'})\n+            'Meta': {\n+                'ordering': \"('-is_highlighted', 'name')\",\n+                'object_name': 'Country'\n+            },\n+            'is_highlighted': ('django.db.models.fields.BooleanField', [],\n+                               {'default': 'False',\n+                                'db_index': 'True'}),\n+            'is_shipping_country': ('django.db.models.fields.BooleanField', [],\n+                                    {'default': 'False',\n+                                     'db_index': 'True'}),\n+            'iso_3166_1_a2': ('django.db.models.fields.CharField', [],\n+                              {'max_length': '2',\n+                               'primary_key': 'True'}),\n+            'iso_3166_1_a3': ('django.db.models.fields.CharField',\n+                              [\n+], {'max_length': '3',\n+    'null': 'True',\n+    'db_index': 'True'}),\n+            'iso_3166_1_numeric': (\n+                'django.db.models.fields.PositiveSmallIntegerField', [],\n+                {'null': 'True',\n+                 'db_index': 'True'}),\n+            'name': ('django.db.models.fields.CharField', [],\n+                     {'max_length': '128'}),\n+            'printable_name': ('django.db.models.fields.CharField', [],\n+                               {'max_length': '128'})\n...\n``\n. Below is the fixed output.autopep8` will leave most of it alone now.\n``` diff\n--- original/0001_initial.py\n+++ fixed/0001_initial.py\n@@ -14,18 +14,43 @@\n def forwards(self, orm):\n     # Adding model 'Voucher'\n\n\ndb.create_table('voucher_voucher', (\n('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),\n('name', self.gf('django.db.models.fields.CharField')(max_length=128)),\n('code', self.gf('django.db.models.fields.CharField')(unique=True, max_length=128, db_index=True)),\n('usage', self.gf('django.db.models.fields.CharField')(default='Multi-use', max_length=128)),\n('start_date', self.gf('django.db.models.fields.DateField')()),\n('end_date', self.gf('django.db.models.fields.DateField')()),\n('num_basket_additions', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),\n('num_orders', self.gf('django.db.models.fields.PositiveIntegerField')(default=0)),\n('total_discount', self.gf('django.db.models.fields.DecimalField')(default='0.00', max_digits=12, decimal_places=2)),\n('date_created', self.gf('django.db.models.fields.DateField')(auto_now_add=True, blank=True)),\n))\ndb.create_table(\n'voucher_voucher',\n(('id',\nself.gf('django.db.models.fields.AutoField')(\nprimary_key=True)),\n('name',\nself.gf('django.db.models.fields.CharField')(\nmax_length=128)),\n('code',\nself.gf('django.db.models.fields.CharField')(\nunique=True,\nmax_length=128,\ndb_index=True)),\n('usage',\nself.gf('django.db.models.fields.CharField')(\ndefault='Multi-use',\nmax_length=128)),\n('start_date',\nself.gf('django.db.models.fields.DateField')()),\n('end_date',\nself.gf('django.db.models.fields.DateField')()),\n('num_basket_additions',\nself.gf('django.db.models.fields.PositiveIntegerField')(\ndefault=0)),\n('num_orders',\nself.gf('django.db.models.fields.PositiveIntegerField')(\ndefault=0)),\n('total_discount',\nself.gf('django.db.models.fields.DecimalField')(\ndefault='0.00',\nmax_digits=12,\ndecimal_places=2)),\n('date_created',\nself.gf('django.db.models.fields.DateField')(\nauto_now_add=True,\nblank=True)),\n\n))\n         db.send_create_signal('voucher', ['Voucher'])\n # Adding M2M table for field offers on 'Voucher'\n\n@@ -34,18 +59,34 @@\n         ('voucher', models.ForeignKey(orm['voucher.voucher'], null=False)),\n         ('conditionaloffer', models.ForeignKey(orm['offer.conditionaloffer'], null=False))\n     ))\n-        db.create_unique('voucher_voucher_offers', ['voucher_id', 'conditionaloffer_id'])\n+        db.create_unique(\n+            'voucher_voucher_offers', [\n+                'voucher_id', 'conditionaloffer_id'])\n # Adding model 'VoucherApplication'\n\n\ndb.create_table('voucher_voucherapplication', (\n('id', self.gf('django.db.models.fields.AutoField')(primary_key=True)),\n('voucher', self.gf('django.db.models.fields.related.ForeignKey')(related_name='applications', to=orm['voucher.Voucher'])),\n('user', self.gf('django.db.models.fields.related.ForeignKey')(to=orm[AUTH_USER_MODEL], null=True, blank=True)),\n('order', self.gf('django.db.models.fields.related.ForeignKey')(to=orm['order.Order'])),\n('date_created', self.gf('django.db.models.fields.DateField')(auto_now_add=True, blank=True)),\n))\ndb.create_table(\n'voucher_voucherapplication',\n(('id',\nself.gf('django.db.models.fields.AutoField')(\nprimary_key=True)),\n('voucher',\nself.gf('django.db.models.fields.related.ForeignKey')(\nrelated_name='applications',\nto=orm['voucher.Voucher'])),\n('user',\nself.gf('django.db.models.fields.related.ForeignKey')(\nto=orm[AUTH_USER_MODEL],\nnull=True,\nblank=True)),\n('order',\nself.gf('django.db.models.fields.related.ForeignKey')(\nto=orm['order.Order'])),\n('date_created',\nself.gf('django.db.models.fields.DateField')(\nauto_now_add=True,\nblank=True)),\n))\n     db.send_create_signal('voucher', ['VoucherApplication'])\n-\n\ndef backwards(self, orm):\n\n\n@@ -57,7 +98,6 @@\n     # Deleting model 'VoucherApplication'\n     db.delete_table('voucher_voucherapplication')\n\n-\n models = {\n     'address.country': {\n\n``\n. Thanks!\n.autopep8is a tool to fix things reported by thepep8tool rather than fix PEP 8 issues in general. So I think it make sense thatE401` is the only one mentioned.\nhttps://pep8.readthedocs.org/en/latest/intro.html#error-codes\nAs far as merging, I prefer the Unix philosophy of having tools do one thing well. So I'd prefer not to add more complexity to autopep8.\n. I see your point. But in any case, I do not want to add any additional third-party dependencies to autopep8.\n. Confirmed:\npython\nif True:\n    if True:\n        if True:\n            if True:\n                if True:\n                    if True:\n                        if True:\n                            if True:\n                                if k_left in ('any', k_curr) and k_right in ('any', k_curr):\n                                    pass\n$ autopep8 --diff --experimental foo.py\n--- original/foo.py\n+++ fixed/foo.py\n@@ -6,5 +6,7 @@\n                     if True:\n                         if True:\n                             if True:\n-                                if k_left in ('any', k_curr) and k_right in ('any', k_curr):\n+                                if k_left in(\n+                                        'any', k_curr) and k_right in(\n+                                        'any', k_curr):\n                                     pass\n. I counted, but do not see over 79 characters.\ndef gradient(colors, blend):\n    factor = 1 / hi\n    return between(colors[a], colors[a + 1], (blend - (a * factor)) / factor)\n.............................................................................\n. In a similar case with a longer last line, it does not get shortened due to the return statement. The aggressive flag is needed to relax some syntax checks.\nFor example, return 1 will not pass syntax checking alone. During line shortening, if aggressive mode is enabled, we do some normalization of return lines to relax the check.\n. Right.\nhttps://github.com/hhatto/autopep8#troubleshooting\n. @stuaxo, I think we'll need more information than that to be of any help. For example, useful things might be the output of which autopep8, which python, python --version, stack traces, etc..\n. @stuaxo, correct me if I am wrong, but I think the troubleshooting link I pointed to earlier covers it. In your problematic virtualenv, the setuptools is version distribute 0.6.14, which doesn't support wheels. But in your working virtualenv, you are using setuptools 12.2, which is much newer and supports wheels. Thus the former fails to load pep8, while the latter is fine.\n. Try adding some debug prints to /usr/local/lib/python2.7/site-packages/autopep8.py.\nFor example, right before the problematic line 3631, add:\npython\nprint('sys.stdin.encoding:', sys.stdin.encoding, file=sys.stderr)\nprint('locale.getpreferredencoding()', locale.getpreferredencoding(), file=sys.stderr)\nTry the above out manually in the terminal and in Vim.\n. And in Vim, what is the value of fileencoding (:set fileencoding?).\n. When running :set fileencoding?, did you make sure to have the relevant Python file open?\n. I actually misread the stack trace earlier today. The problem happens at sys.stdout.write() rather than anything having to do with sys.stdin. I think I see the proper fix for this.\n. Let me know if a8e9f482f4af6e09a8cdf2981b7312113935b884 fixes it. Otherwise, please feel free to reopen the issue.\nThanks\n. I fixed this in a slightly different way since I prefer to avoid side effects if possible. See c5146f0e5b402b801a836b5ff1a0b69dab6341fb.\nThanks\n. Thanks.\n. Any benefits over this sort of thing?\n``` bash\n!/bin/bash\nautopep8 \"$@\" | cdiff\n```\n(I'd prefer not to add unnecessary complexity to autopep8.)\n. I think I will close this as I try to avoid extra dependencies and complexity when possible. I think this sort of behavior can be placed in an autopep8-wrapper. Either a shell script or a Python script would work.\n. Thanks for reporting this. I've fixed the ones that were explicitly mentioned in ec311fe1023b9f69438544343fdcf7abf514ff2e and 98c89030d936792a3b8b19d9edec5848ee251d09.\nAdding better --select tests sounds like it might be a good idea. I would welcome such a pull request.\n. Can you expand on why the hook needs to know this?\nAlso, how do hooks for other code formatters handle this case? For example, how do people use hooks with gofmt or astyle. Doesn't git itself tell you if changes were made (git status)?\nI ask because I'm quite reluctant to add any more complexity to autopep8. For non-common use cases, it might make better sense to use autopep8 as a Python module.\nThanks\n. Not sure if this is at all relevant, but there is also pep8radius, which uses autopep8.\n. Can you describe the use case? The pep8 tool itself already checks for conformance and returns the appropriate return code.\nNever mind, I just noticed #154.\nThanks\n. I'm going to have to think about this.\nAt the very least, this should be non-default behavior. To me, non-zero means something went wrong with autopep8. For example, it couldn't write to a file due to a permission error.\n. The return code approach definitely makes sense for pylint, pyflakes, and the rest of the linters. But autopep8 is not a linter. It formats code as opposed to a linter, which informs users of problems (via return code and some message). Unless there is some precedent for code formatters (like gofmt or clang-format) to do this sort of return code manipulation, I think this may be out of scope.\nI'm not too familiar with git hooks, but it seems to me that checking whether files are changed is best accomplished by running git status or something like it rather than modifying the autopep8 code base. The tool-modification approach seems to me would lead to having to modify all code formatters that you will adopt in the future (gofmt, clang-format, perltidy, etc.).\n. I would be willing to merge in a small change to fix_multiple_files() to return a boolean indicating whether files have changed. (I probably will end up doing that in any case since it seems like a good idea.) This would allow a Python-based git hook to import autopep8 and call autopep8. fix_multiple_files() and get an indication of whether things have changed.\nUnfortunately, I think I'll have to decline the command-line-visible changes as they seem out of scope for the tool.\n. Call autopep8.parse_args(). To set it up with the default options, use autopep8.parse_args(['']).\nAn alternate approach is to create a class with the options as attributes. See python-mode's usage of autopep8 as an example.\n. I think the following simplified version should work.\npython\nautopep8.fix_multiple_files([filename], autopep8.parse_args(['']]))\nThough I agree that the whole option thing is kind of awkward. It is something that evolved from autopep8 starting as a purely command-line tool.\n. I reported this upstream in jcrocholl/pep8#321. Once that is fixed, autopep8 will automatically do the right thing.\nThanks\n. autopep8 follows what pep8 tells it so this comment is relevant.\n. I think this is a pep8 issue. I've reported it upstream in jcrocholl/pep8#323. Once that is fixed, autopep8 will do the right thing automatically.\nThanks\n. I'd prefer not to merge this as it is, given that it mutates a global constant.\nI may in the distant future look at properly passing in variables to avoid mutating the module-level DEFAULT_INDENT_SIZE constant. I've never felt it worth the effort in the past, given that --indent-size goes against PEP 8 anyway.\n. I've fixed this in 99f154fbc357ea26be76f9f26b7b6ab9109167d9. Thanks for the report.\n. No, pep8 does not report this correctly. autopep8 merely takes what pep8 says about where to add blank lines and does so. In this case, pep8 says to add a blank line at line 4 so autopep8 did exactly that. Below is a modified example following pep8's original advice:\n``` python\n!/usr/bin/env python\nA class description\nclass A(object):\n    pass\n```\n$ pep8 --show-source foo.py\nfoo.py:5:1: E302 expected 2 blank lines, found 1\nclass A(object):\n^\n. I've removed this since it creates bad syntax. It turns:\n``` python\ndef repeatable_expr():      return [bracketed_choice, simple_match, rule_ref],\\\n                                    Optional(repeat_operator)\ndef match():                return [simple_match , mixin_rule_match] TODO\ndef simple_match():         return [str_match, re_match]\n```\ninto:\n``` python\ndef repeatable_expr():\n    return [bracketed_choice, simple_match, rule_ref],\\\n    Optional(repeat_operator)\n\ndef match():                return [simple_match , mixin_rule_match] TODO\ndef simple_match():\n    return [str_match, re_match]\n```\nAs far as I can tell, this does not belong in autopep8. pep8 is the one reporting E302 seemingly incorrectly. Please send the appropriate pull request to pep8.\n. Where is the check for --config=False? Also, what happens if the user wants to point to a file named False?\nThanks\n. Oh, I see it is assuming a file called False does not exist. Might be better to just remove the mention of False. It seems like it would just cause problems for people who have files with that name in their directory.\nOut of curiosity, how does the behavior you've coded up compare with that of pep8?\n. I'll merge this some time next week. This should give a bit of time for people from #129 to state their preferences.\n. Note that I deleted some of my comments as they were mistakenly applied to an old commit.\n. I'm not sure I like the custom parsing of command line arguments. I see you have check for --g. But that will start causing problems if we ever add another option that starts with --g. And for --ignore-local-config, a --i will already conflict with --in-place.\nIt looks like pep8 has a --config option without resorting to manual parsing of the command-line arguments.\n. Looks good (outside of that one small thing I mentioned about the pragmas). I'll try this out and merge this soon. Thanks for the patch!\n. Actually, it is easy enough for me to just put back the pragmas myself. I'll try this out now.\n. I've merged it. I noticed that the local configuration testing may cause a race condition when testing autopep8 with nose's parallel test feature. Also, it will screw things up if the user has his own .pep8 in there.\nWe should really do that in a safer manner. But I guess I'll worry about that later.\n. I think the fix might involve something like putting the fake local config in some subdirectory like test/fake_config and then doing a change of working directory in setUp() and tearDown() for the relevant tests.\n. I think this is an upstream issue. In --aggressive mode, we use Python's standard lib2to3 fixer to modernize imports. Maybe we just get rid of the import fixer.\n. Thanks for finding this and looking into it.\n. It seems like pep8 ought to flag that, but it considers it valid for some reason. Thus autopep8 leaves it alone.\n. I think the closest thing is commented_out_code_lines(), but it is purposely finding a specific kind of comment.\nIf pep8 is not flagging something that it ought to, it seems reasonable to me to just fix the problem there.\n. foo.py:\npython\nif True:\n    if True:\n            # bah\n        pass\n$ pep8 foo.py\n. I'm not sure. It seems like trying to \"fix\" things like that risks screwing up valid hanging indentation. I'm fine with leaving well enough alone.\npython\nif True:  # This is\n          # fine.\n    pass\n. Thanks for reporting this. It looks like for some reason, the pass keeps getting pushed one indentation level to the right each time.\n```\n$ printf \"\ndef tmp(g):\n    g(4)))\nif not True:\n    pass\" | ./autopep8.py -vvvvv -p 7 -\n\n--->  Applying global fix for W602\n--->  Applying global fix for E265\n--->  3 issue(s) to fix {'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\n--->  4 issue(s) to fix {'E126': {6}, 'E701': {5}, 'E122': {5}, 'E901': {7}}\n--->  'fix_e901' is not defined.\n--->  :7:1:E901 TokenError: EOF in multi-line statement\ndef tmp(g):\n    g(4)))\nif not True:\n                                                                    pass\n\n```\n. I would recommend just not commenting out code.\nhttp://nedbatchelder.com/text/deleting-code.html\nBut I would consider a pull request if it involved minimal changes to autopep8.\n. I'm closing this for the aforementioned reason. Feel free to send a pull request.\nThanks\n. Will this still be necessary if the not-flagging problem gets fixed in pep8?\n. I started looking into this a bit. It turns out that, pep8 is probably irrelevant here. I had forgotten that autopep8 now uses its own version of pep8's continued_indentation() function because it needs to pull out the desired indent levels. See this. So I think the fix would be to modify that abomination.\n. I was referring to the original topic (about the comments not being indented properly). You mentioned that this workaround is not needed if apply_global_fixes() is fixed. So my thinking is that all the changes in this pull request are unneeded as long as continued_indentation() is fixed to properly flags the comments for indentation.\n. Thanks.\n. @hayd, I'm not sure if it was caused by this specific pull request, but there is a bug that seems possibly related. Note that filename = getfile(object) gets incorrectly indented.\n$ /Users/myint/projects/autopep8/autopep8.py --max-line-length=79 --ignore= /opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/inspect.py --aggressive --aggressive --aggressive --aggressive --range 550 610 -d\n``` diff\n--- original//opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/inspect.py\n+++ fixed//opt/local/Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/inspect.py\n@@ -547,56 +547,63 @@\n     filename = os.path.basename(path)\n     suffixes = [(-len(suffix), suffix, mode, mtype)\n                     for suffix, mode, mtype in imp.get_suffixes()]\n-    suffixes.sort() # try longest suffixes first, in case they overlap\n+    suffixes.sort()  # try longest suffixes first, in case they overlap\n     for neglen, suffix, mode, mtype in suffixes:\n         if filename[neglen:] == suffix:\n             return ModuleInfo(filename[:neglen], suffix, mode, mtype)\n+\ndef getmodulename(path):\n     \"\"\"Return the module name for a given file, or None.\"\"\"\n     fname = os.path.basename(path)\n     # Check for paths that look like an actual module file\n-    suffixes = [(-len(suffix), suffix)\n-                    for suffix in importlib.machinery.all_suffixes()]\n-    suffixes.sort() # try longest suffixes first, in case they overlap\n+    suffixes = sorted([(-len(suffix), suffix)\n+                       for suffix in importlib.machinery.all_suffixes()])\n     for neglen, suffix in suffixes:\n         if fname.endswith(suffix):\n             return fname[:neglen]\n     return None\n+\n def getsourcefile(object):\n     \"\"\"Return the filename that can be used to locate an object's source.\n     Return None if no way can be identified to get the source.\n-    \"\"\"\n-    filename = getfile(object)\n+        \"\"\"\n+        filename = getfile(object)\n     all_bytecode_suffixes = importlib.machinery.DEBUG_BYTECODE_SUFFIXES[:]\n     all_bytecode_suffixes += importlib.machinery.OPTIMIZED_BYTECODE_SUFFIXES[:]\n     if any(filename.endswith(s) for s in all_bytecode_suffixes):\n         filename = (os.path.splitext(filename)[0] +\n                     importlib.machinery.SOURCE_SUFFIXES[0])\n-    elif any(filename.endswith(s) for s in\n+        elif any(filename.endswith(s) for s in\n                  importlib.machinery.EXTENSION_SUFFIXES):\n-        return None\n+            return None\n     if os.path.exists(filename):\n         return filename\n     # only return a non-existent filename if the module has a PEP 302 loader\n-    if getattr(getmodule(object, filename), 'loader', None) is not None:\n+        if getattr(\n+                getmodule(\n+                    object,\n+                    filename),\n+                'loader',\n+                None) is not None:\n         return filename\n     # or it is in the linecache\n-    if filename in linecache.cache:\n+        if filename in linecache.cache:\n         return filename\n+\ndef getabsfile(object, _filename=None):\n     \"\"\"Return an absolute path to the source or compiled file for an object.\n The idea is for each object to have a unique origin, so this routine\n\n\nnormalizes the result as much as possible.\"\"\"\nif _filename is None:\n_filename = getsourcefile(object) or getfile(object)\nnormalizes the result as much as possible.\"\"\"\nif _filename is None:\n_filename = getsourcefile(object) or getfile(object)\n     return os.path.normcase(os.path.abspath(_filename))\n-\n-modulesbyfile = {}\nlesbyfile = {}\n _filesbymodname = {}\n+\n\ndef getmodule(object, _filename=None):\n     \"\"\"Return the module an object was defined in, or None if not found.\"\"\"\n```\n. Please fix this in the pep8 repository instead. autopep8 tries to just fix things as reported by pep8.\nThanks\n. The sorted change is due to the lib2to3 based fixer, which is valid. But in any case, it looks like the --range code fails possibly due to the three-line sort()-related lines being changed into two lines. Maybe the code does not handle cases where the number of lines gets reduced?\nI'm disabling these buggy cases for now. Please feel free to revisit this with a pull request that fixes the issue and re-enables the --range code for the inspect.py case.\n. ~~I think the first argument to parse_args() (sys.argv) would be the program name.~~ I think it needs a last argument, which is the filename.\nBut in any case, I prefer the command line:\n$ ./autopep8.py --range 550 610 test/inspect_example.py -d -a\n. Here is a smaller example:\npython\na = []\na.sort()\nif True:\n    a = []\n    a.sort()\nelse:\n    pass\nWithout my workaround:\n$ ./autopep8.py -d foo.py -a --range 1 5\ndiff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,7 +1,6 @@\n-a = []\n-a.sort()\n+a = sorted([])\n if True:\n     a = []\n     a.sort()\n-else:\n+    :\n     pass\nNote the loss of the else. (This works fine without the --range.)\nI don't quite follow about the edge case you refer to. Could you expand? (My reasoning with the length check is that something about the code that comes afterwards goes haywire if those two length are not equal. I'm thinking that the actual contents don't actually matter. I may very well could be wrong though as I didn't write the code.)\nThanks\n. What version of autopep8 are you using? And are you sure, you don't have my workaround enabled (grep 'Avoid buggy case' autopep8.py)?\nAlso, you might want to double check the range numbers you are using as I updated my comment a few minutes after initially submitting it.\n. ~~By the way, my workaround works fine for the case you show above.~~\nBy the way, your example works fine with or without my workaround:\n$  ./autopep8.py -d bar.py -a --range 1 11\nI don't get any loss like I do when the numbers of lines goes down. So I think the workaround is correct in checking for equality of number of lines and ignoring content.\n. Memo to myself: I should run ./acid.py --random-range -a against any proposed fix before removing the workaround permanently.\n. I don't think that would be a good solution. The sorted() fix is happening in lib2to3. And there are fixers in autopep8 whose whole purpose is to remove lines.\n. I actually found an example that breaks even without aggressive:\n$ python2.7 test/acid.py --line-range 289 925 test/vectors_example.py\n. It seems to fail even if all fixers are disabled.\n$ python2.7 test/acid.py --line-range 289 925 test/vectors_example.py -vvvv --ignore=E,W\n--->  0 issue(s) to fix {}\nautopep8 broke /Users/myint/projects/autopep8/test/vectors_example.py\nunexpected indent (<string>, line 818)\nIt looks like it is indenting things for some reason:\n``` diff\n--- original//Users/myint/projects/autopep8/test/vectors_example.py\n+++ fixed//Users/myint/projects/autopep8/test/vectors_example.py\n@@ -297,8 +297,8 @@\n def magnitude(self, value=None):\n     '''Find the magnitude (spatial length) of this vector.\n\n\nWith a value, return a vector with same direction but of given length.\n'''\nWith a value, return a vector with same direction but of given length.\n'''\n         mag = self.__mag()\n         if value is None: return mag\n         if zero(mag):\n@@ -459,9 +459,9 @@\n             sx,sy,sz,sw = self._v\n             ox,oy,oz,ow = other._v\n             self._v = [ swox + sxow + syoz - szoy,\nswoy + syow + szox - sxoz,\nswoz + szow + sxoy - syox,\nswow - sxox - syoy - szoz ]\nswoy + syow + szox - sxoz,\nswoz + szow + sxoy - syox,\n\nswow - sxox - syoy - szoz ]\n         else:\n             V.imul(self, other)\n         return self\n@@ -483,10 +483,10 @@\ndef init(self, args):\n     '''Constructs a new 4x4 matrix.\n-        If no arguments are given, an identity matrix is constructed.\n-        Any combination of V vectors, tuples, lists or scalars may be given,\n-        but taken together in order, they must have 16 number values total.\n-        '''\n+            If no arguments are given, an identity matrix is constructed.\n+            Any combination of V vectors, tuples, lists or scalars may be given,\n+            but taken together in order, they must have 16 number values total.\n+            '''\n     # no args gives identity matrix\n     # 16 scalars collapsed from any combination of lists, tuples, vectors\n     if not args:\n@@ -509,21 +509,21 @@\n         if axis in ('x','X'):\n             c = math.cos(theta) ; s = math.sin(theta)\n             return cls( [  1,  0,  0,  0,\n-                               0,  c, -s,  0,\n-                               0,  s,  c,  0,\n-                               0,  0,  0,  1 ] )\n+                                   0,  c, -s,  0,\n+                                   0,  s,  c,  0,\n+                                   0,  0,  0,  1 ] )\n         if axis in ('y','Y'):\n             c = math.cos(theta) ; s = math.sin(theta)\n             return cls( [  c,  0,  s,  0,\n-                               0,  1,  0,  0,\n-                              -s,  0,  c,  0,\n-                               0,  0,  0,  1 ] )\n+                                   0,  1,  0,  0,\n+                                  -s,  0,  c,  0,\n+                                   0,  0,  0,  1 ] )\n         if axis in ('z','Z'):\n             c = math.cos(theta) ; s = math.sin(theta)\n             return cls( [  c, -s,  0,  0,\n-                               s,  c,  0,  0,\n-                               0,  0,  1,  0,\n-                               0,  0,  0,  1 ] )\n+                                   s,  c,  0,  0,\n+                                   0,  0,  1,  0,\n+                                   0,  0,  0,  1 ] )\n     if isinstance(axis, V):\n         axis = Q.rotate(axis, theta)\n     if isinstance(axis, Q):\n@@ -541,9 +541,9 @@\n     e =     2(xy + zw) ; f = 1 - 2(xx + zz) ; g =     2(yz - xw)\n     i =     2(xz - yw) ; j =     2(yz + xw) ; k = 1 - 2*(xx + yy)\n     return cls( [ a, b, c, 0,\n-                      e, f, g, 0,\n-                      i, j, k, 0,\n-                      0, 0, 0, 1 ] )\n+                          e, f, g, 0,\n+                          i, j, k, 0,\n+                          0, 0, 0, 1 ] )\n@classmethod\n def scale(cls, factor):\n@@ -568,9 +568,9 @@\n     (x,y,z,w) = normal.normalize()._v\n     (n2x,n2y,n2z) = (-2x, -2y, -2z)\n     return cls( [ 1+n2xx,   n2xy,   n2xz, 0,\n-                        n2yx, 1+n2yy,   n2yz, 0,\n-                        n2zx,   n2zy, 1+n2zz, 0,\n-                          dx,     dy,     dy, 1  ] )\n+                            n2yx, 1+n2yy,   n2yz, 0,\n+                            n2zx,   n2zy, 1+n2zz, 0,\n+                              dx,     dy,     dy, 1  ] )\n@classmethod\n def shear(cls, amount):\n@@ -584,9 +584,9 @@\n def frustrum(cls, l, r, b, t, n, f):\n     rl = 1/(r-l) ; tb = 1/(t-b) ; fn = 1/(f-n)\n     return cls( [  2nrl,  0,       (r+l)rl,  0,\n-                       0,       2ntb,  0,         0,\n-                       0,       0,      -(f+n)fn, -2fnfn,\n-                       0,       0,      -1,         0         ] )\n+                           0,       2ntb,  0,         0,\n+                           0,       0,      -(f+n)fn, -2fn*fn,\n+                           0,       0,      -1,         0         ] )\n@classmethod\n def perspective(cls, yfov, aspect, n, f):\n@@ -609,17 +609,17 @@\ndef getitem(self, rc):\n     '''Returns a single element of the matrix.\n-        May index 0-15, or with tuples of (row,column) 0-3 each.\n-        Indexing goes across first, so m[3] is m[0,3] and m[7] is m[1,3].\n-        '''\n+            May index 0-15, or with tuples of (row,column) 0-3 each.\n+            Indexing goes across first, so m[3] is m[0,3] and m[7] is m[1,3].\n+            '''\n     if not isinstance(rc, tuple): return V.getitem(self, rc)\n     return self._v[rc[0]*4+rc[1]]\ndef setitem(self, rc, value):\n     '''Injects a single element into the matrix.\n-        May index 0-15, or with tuples of (row,column) 0-3 each.\n-        Indexing goes across first, so m[3] is m[0,3] and m[7] is m[1,3].\n-        '''\n+            May index 0-15, or with tuples of (row,column) 0-3 each.\n+            Indexing goes across first, so m[3] is m[0,3] and m[7] is m[1,3].\n+            '''\n     if not isinstance(rc, tuple): return V.getitem(self, rc)\n     self._v[rc[0]*4+rc[1]] = float(value)\n\n\n@@ -628,8 +628,8 @@\n def row(self, r, v=None):\n     '''Returns or replaces a vector representing a row of the matrix.\n\n\nRows are counted 0-3. If given, new vector must be four numbers.\n'''\nRows are counted 0-3. If given, new vector must be four numbers.\n\n'''\n         if r < 0 or r > 3: raise IndexError, 'row index out of range'\n         if v is None: return V(self._v[r4:(r+1)4])\n         e = v\n@@ -640,8 +640,8 @@\ndef col(self, c, v=None):\n     '''Returns or replaces a vector representing a column of the matrix.\n-        Columns are counted 0-3. If given, new vector must be four numbers.\n-        '''\n+            Columns are counted 0-3. If given, new vector must be four numbers.\n+            '''\n     if c < 0 or c > 3: raise IndexError, 'column index out of range'\n     if v is None: return V([ self._v[c+4*i] for i in range(4) ])\n     e = v\n@@ -653,17 +653,17 @@\n def translation(self):\n     '''Extracts the translation component from this matrix.'''\n     (a,b,c,d,\n-         e,f,g,h,\n-         i,j,k,l,\n-         m,n,o,p) = self._v\n+             e,f,g,h,\n+             i,j,k,l,\n+             m,n,o,p) = self._v\n     return V(m,n,o)\ndef rotation(self):\n     '''Extracts Euler angles of rotation from this matrix.\n-        This attempts to find alternate rotations in case of gimbal lock,\n-        but all of the usual problems with Euler angles apply here.\n-        All Euler angles are in radians.\n-        '''\n+            This attempts to find alternate rotations in case of gimbal lock,\n+            but all of the usual problems with Euler angles apply here.\n+            All Euler angles are in radians.\n+            '''\n     (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) = self._v\n     rotY = D = math.asin(c)\n     C = math.cos(rotY)\n@@ -724,15 +724,15 @@\n     dr = 1.0 / (ad00 - bd01 + cd02 - dd03)\n     # inverse\n     return self.class( [  d00dr, -d10dr,  d20dr, -d30dr,\n-                                 -d01dr,  d11dr, -d21dr,  d31dr,\n-                                  d02dr, -d12dr,  d22dr, -d32dr,\n-                                 -d03dr,  d13dr, -d23dr,  d33dr ] )\n+                                     -d01dr,  d11dr, -d21dr,  d31dr,\n+                                      d02dr, -d12dr,  d22dr, -d32dr,\n+                                     -d03dr,  d13dr, -d23dr,  d33dr ] )\ndef transpose(self):\n     return M( [ self._v[i] for i in [ 0, 4,  8, 12,\n-                                          1, 5,  9, 13,\n-                                          2, 6, 10, 14,\n-                                          3, 7, 11, 15 ] ] )\n+                                              1, 5,  9, 13,\n+                                              2, 6, 10, 14,\n+                                              3, 7, 11, 15 ] ] )\ndef mul(self, other):\n     # called in case of m m, m * v, m * s\n@@ -744,9 +744,9 @@\n             a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p = self._v\n             X,Y,Z,W = other._v\n             return V( aX + bY + cZ + dW,\n-                          eX + fY + gZ + hW,\n-                          iX + jY + kZ + lW,\n-                          mX + nY + oZ + pW )\n+                              eX + fY + gZ + hW,\n+                              iX + jY + kZ + lW,\n+                              mX + nY + oZ + p*W )\n     return self.class(self).imul(other)\ndef rmul(self, other):\n@@ -759,9 +759,9 @@\n             A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P = self._v\n             x,y,z,w = other._v\n             return V( xA + yE + zI + wM,\n-                          xB + yF + zJ + wN,\n-                          xC + yG + zK + wO,\n-                          xD + yH + zL + wP )\n+                              xB + yF + zJ + wN,\n+                              xC + yG + zK + wO,\n+                              xD + yH + zL + wP )\n     return self.class(self).imul(other)\ndef imul(self, other):\n@@ -774,21 +774,21 @@\n         s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sA,sB,sC,sD,sE,sF = self._v\n         o0,o1,o2,o3,o4,o5,o6,o7,o8,o9,oA,oB,oC,oD,oE,oF = other._v\n         self._v = [ o0s0 + o1s4 + o2s8 + o3sC, #\n-                        o0s1 + o1s5 + o2s9 + o3sD,\n-                        o0s2 + o1s6 + o2sA + o3sE,\n-                        o0s3 + o1s7 + o2sB + o3sF,\n-                        o4s0 + o5s4 + o6s8 + o7sC, #\n-                        o4s1 + o5s5 + o6s9 + o7sD,\n-                        o4s2 + o5s6 + o6sA + o7sE,\n-                        o4s3 + o5s7 + o6sB + o7sF,\n-                        o8s0 + o9s4 + oAs8 + oBsC, #\n-                        o8s1 + o9s5 + oAs9 + oBsD,\n-                        o8s2 + o9s6 + oAsA + oBsE,\n-                        o8s3 + o9s7 + oAsB + oBsF,\n-                        oCs0 + oDs4 + oEs8 + oFsC, #\n-                        oCs1 + oDs5 + oEs9 + oFsD,\n-                        oCs2 + oDs6 + oEsA + oFsE,\n-                        oCs3 + oDs7 + oEsB + oFsF ]\n+                            o0s1 + o1s5 + o2s9 + o3sD,\n+                            o0s2 + o1s6 + o2sA + o3sE,\n+                            o0s3 + o1s7 + o2sB + o3sF,\n+                            o4s0 + o5s4 + o6s8 + o7sC, #\n+                            o4s1 + o5s5 + o6s9 + o7sD,\n+                            o4s2 + o5s6 + o6sA + o7sE,\n+                            o4s3 + o5s7 + o6sB + o7sF,\n+                            o8s0 + o9s4 + oAs8 + oBsC, #\n+                            o8s1 + o9s5 + oAs9 + oBsD,\n+                            o8s2 + o9s6 + oAsA + oBsE,\n+                            o8s3 + o9s7 + oAsB + oBsF,\n+                            oCs0 + oDs4 + oEs8 + oFsC, #\n+                            oCs1 + oDs5 + oEs9 + oFsD,\n+                            oCs2 + oDs6 + oEsA + oFsE,\n+                            oCs3 + oDs7 + oEsB + oFsF ]\n     else:\n         raise ValueError, 'multiply by 4d matrix or 4d vector or scalar'\n     return self\n@@ -815,7 +815,7 @@\n t = math.atan2(v[1], v[0])\n if t < 0:\nreturn t + 2.*math.pi\n-    return t\n+      return t\n\n\ndef quangle(a, b):\n     '''Find a quaternion that rotates one 3d vector to parallel another.'''\n```\n. Whoops, I thought activity on this had died. (And I didn't like the low coverage :).) t should have pinged. Feel free to undo it in the fix pull request.\nThanks\n. We already handle E265 in the existing fix_e265(). And I cannot merge this unless rationale is given for removal of existing features. We avoided touching obviously commented-out code since the user should remove such lines rather than blinding making it \"follow\" PEP 8.\n. Please use --ignore=E309.\n. Thanks!\n. Fixed with --experimental.\n. Thanks.\n. I don't think it has anything to with the initial indentation. It looks like removing the indentation in your case seems to fix the issue because doing so results in all lines being less than 80 characters.\nPull requests are welcome for enhancing the long-line reindenting/shortening scheme.\n. This is fixed by fe3737cc57e805c68deea445f18d0159c2c86dda.\n. In answer to your side question, --ignore=E309.\n. pep8 does not report a blank line being needed. Since autopep8 relies on pep8 when determining what to change, this issue probably should be reported there.\n. You're correct, there is no such mechanism currently. But pull requests are welcome.\n. Thanks for the detailed report. Could you try the latest (026961903b17025865a94b9662ba4a29fb65c8d1) on the master branch?\n$ pip install --upgrade git+https://github.com/hhatto/autopep8\n. @hhatto, No, autoflake does not support that. I think that requires some kind of autocompletion-like tool.\n. This is fixed in fe3737cc57e805c68deea445f18d0159c2c86dda. At least, it will not make things worse.  --expermental will modify it to be within 79 columns.\n. So #173 caused this? Are we getting any benefits from wheel that make it worth the bugginess?\nThanks\n. Yeah, let's remove E309. Feel free to submit a pull requests. Otherwise, maybe I'll get to this during the weekend.\n. Thanks.\n. I guess I pressed close instead of merge.\n. See this for an example of how to enable this.\n. Sure. The vim_autopep8.py that I referred to above is for example only. If possible, I think it would make sense for you to modify one of the autopep8 Vim plugins you mention to make use of --range as shown in the example. If that isn't possible wtih gc, perhaps you could write a program that extends autopep8 to take in \"fragments\". I think this sort of functionality would be too specific and brittle to put directly into autopep8 itself. (I don't personally use autopep8 inside Vim. I basically use autopep8 in batch mode to clean up old code bases before starting to work on them.)\n. This is purely an implementation detail, which I would prefer not to expose. We used to do indentation changes as a local fix as well. And things might change back if the implementation changes.\nA better approach would be to just disable the fixes you don't want via --ignore. For example, if you want to disable all indentation-related fixes, use --ignore=E1. (--ignore takes a comma-separated list of error codes.)\n. I think it makes sense to allow fix_code() to optionally take in a dictionary. (I never really liked the way it is now, but kept it for compatibility.) Another option is to create a module-level Namespace object with the default options that the user could override. That would avoid using strings, which is kind of nice.\n. I'm closing this since -aa outputs the last option you mentioned.\n$ ~/projects/autopep8/autopep8.py -d foo.py -aa\ndiff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,5 +1,6 @@\n if True:\n     if True:\n         if widget_js_attributes is not None:\n-            raise PendingDeprecationWarning('widget_js_attributes are '\n-                    'deprecated in favor of widget_attrs')\n+            raise PendingDeprecationWarning(\n+                'widget_js_attributes are '\n+                'deprecated in favor of widget_attrs')\n. $ ~/projects/autopep8/autopep8.py -d foo.py -aa\ndiff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,3 +1,8 @@\n-__all__ = ['FieldBase', 'ChoiceField', 'MultipleChoiceField',\n-           'ModelChoiceField', 'ModelMultipleChoiceField', 'GenericModelChoiceField',\n-           'GenericModelMultipleChoiceField']\n+__all__ = [\n+    'FieldBase',\n+    'ChoiceField',\n+    'MultipleChoiceField',\n+    'ModelChoiceField',\n+    'ModelMultipleChoiceField',\n+    'GenericModelChoiceField',\n+    'GenericModelMultipleChoiceField']\n$ ~/projects/autopep8/autopep8.py -d foo.py --experimental\ndiff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,3 +1,3 @@\n __all__ = ['FieldBase', 'ChoiceField', 'MultipleChoiceField',\n-           'ModelChoiceField', 'ModelMultipleChoiceField', 'GenericModelChoiceField',\n-           'GenericModelMultipleChoiceField']\n+           'ModelChoiceField', 'ModelMultipleChoiceField',\n+           'GenericModelChoiceField', 'GenericModelMultipleChoiceField']\n. The algorithm used in -aa does not reflow the lines and simply tries to break the lines up at certain tokens. The --experimental mode on the other hand does things a bit more intelligently.\n. The way the default line splitter works is that it splits the line at one location only. In effect, the aggressive mode splits at multiple locations. There is also the --experimental mode, which tends to wrap things more intelligently. It reflows lines and breaks that at more optimal locations:\n['Ava firstscher', 'Bob White', 'Chris Rich', 'Danielle Porter', 'Gordon Pike',\n 'Hannah Beauregard', 'Matt Hoyle', 'Ross Harrison', 'Sasha Ricci',\n 'Xavier Adams']\n. Not sure. I think I need more information.\n. I think your version of pep8 is too old. The latest version is 1.6.2. It looks like your autopep8 is too old too. The latest is 1.1.1.\n. Yes, please see https://github.com/hhatto/autopep8#installation.\n. Try --ignore=W191,E101,E111.\n. If you want to get the diff in Python, I think it will be best if you just use the standard difflib module.\n. Yeah, this is expected. autopep8 only handles the trivial case.\nhttps://github.com/hhatto/autopep8/blob/16ce532e03a2787e14380b642688efac1d19d642/autopep8.py#L975\n. This seems dangerous to me. I would rather not merge it.\nFor example, the following gets scrambled. (I'm sure there are more examples.)\npython\nif not x in foo and y not in zoo:\n    pass\ndiff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,2 +1,2 @@\n-if not x in foo and y not in zoo:\n+if x in foo and y not not in zoo:\n     pass\n. I think I would rather play it safe and leave things as is. I don't want to risk quietly changing the meaning of people's code. I think the AST (as used in lib2to3 and python-modernize) is needed to safely handle more complex cases.\n. Or maybe add some kind of caveat to the documentation. (Actually, many of the fixes have such caveats. For example, if a long line is composed of just a single long string, autopep8 will not touch it.)\n. I've applied a variation of this in 98a1fe019f412f06e922549cf8b26a6f97a29c54.\nThanks\n. You might want to take a look at yapf for formatting to non-PEP8 styles. I think the --indent-size in autopep8 was introduced as an afterthought.\n. I think it would probably be best to keep this as a separate script/project as you have now. Changing the names of functions is probably something users should be doing very explicitly. So I think it would best if the user invoked it as a separate script rather than autopep8 mutating people's code in unexpected ways.\n. I think my previous comment still stands. Even when ignored by default, this is dangerous. It is best if this is done in a separate project. Thus if the user wants to do some one-time-only migration, then they just do autopep8-naming or whatever it would be called.\n. Yes, there is a way. Please see --recursive in --help.\n. Thanks for pointing this out. It should be fixed with 73d131e519fd5163993accbaad6b36f7583395f3.\n@hhatto, could you upload this to PyPI? Thanks.\n. Aren't the tests already included?\n```\n$ wget https://pypi.python.org/packages/source/a/autopep8/autopep8-1.2.1.tar.gz#md5=4167555f521ddd69b66f13819604f3db\n$ tar xf autopep8-1.2.1.tar.gz\n$ cd autopep8-1.2.1/\n$ ./setup.py test\nRan 457 tests in 16.968s\nOK (skipped=2)\n```\n. Could you provide a test case?\nThanks\n. Does pep8 flag that? (If not, this needs to be brought up in their issue tracker.)\n. I don't seem to see that problem. autopep8 -aaa gives me:\npython\na = tackle(sample, 'test1',\n           {\n               'a': sample,\n               'b': testing\n           }\n           )\nPlease see the following link.\nhttps://github.com/hhatto/autopep8/blob/master/CONTRIBUTING.rst#issues\n. I think it is dependent on what pep8 supports. pep8 supports noqa for some error codes, I think.\n. If you want to preserve line endings, it might be best to use the --in-place option. (You can copy the file beforehand if you want to keep the original file too.)\n. Are you running Python under -OO which removes docstrings?\n$ python -OO autopep8.py\nTraceback (most recent call last):\n  File \"autopep8.py\", line 3667, in <module>\n    sys.exit(main())\n  File \"autopep8.py\", line 3611, in main\n    args = parse_args(argv[1:], apply_config=apply_config)\n  File \"autopep8.py\", line 3131, in parse_args\n    parser = create_parser()\n  File \"autopep8.py\", line 3066, in create_parser\n    parser = argparse.ArgumentParser(description=docstring_summary(__doc__),\n  File \"autopep8.py\", line 3283, in docstring_summary\n    return docstring.split('\\n')[0]\nAttributeError: 'NoneType' object has no attribute 'split'\n. I think we will need more information than that. Please see the following link.\nhttps://github.com/hhatto/autopep8/blob/master/CONTRIBUTING.rst#issues\n. Sorry, but that just is not enough information. At least provide what the output from running the following commands. Please copy and paste the results from the whole session.\nautopep8 --version\nwhich autopep8\npep8 --version\nwhich pep8\npython --version\nwhich python\nuname -a\n. As far as I know, it works fine on Windows (which I'm guessing you are using).\nIn any case, I think this problem is caused by your installation rather than autopep8 itself. Please see the following links.\n- https://duckduckgo.com/?q=!stackoverflow+\"failed to create process\"\n  \n- https://stackoverflow.com/questions/27627492/autopep8-failing-with-failed-to-create-process\n- https://stackoverflow.com/questions/17373265/pip-easy-install-failure-failed-to-create-process\n. @TarasRoshko is this a autopep8-specific issue or is the problem due to pip? For example, if you install pep8 using pip, does the resulting pep8 executable work okay?\n. One difference in pep8 is that it uploads wheels to PyPI. I've done the same thing here now. Please try doing the pip install again and let me know if it works.\n. I suppose that might work. I have no idea if all of autopep8's fixers respect columns though. There may or may not be fixers that fix the whole line.\nBy the way, I'm not sure how the title of this issue \"Show error along with creating diff\" relates to the contents of the issue.\n. Does multiprocessing work in general on CPython 2.7.11 on Windows? (If not, maybe this ought to be reported upstream in CPython's bug tracker.)\n. What is the input? And does the lib2to3 tool itself work okay on this platform?\n. Thanks!\n. That error is not from autopep8. Please run autopep8 from the command line to confirm. Something like:\n$ autopep8 --aggressive a.py\n. I think that is intended. Pull requests with better behavior are welcome. Or try --experimental or yapf.\n. Yes, it is safe (without --aggressive). In the normal mode it will only modify whitespace.\nWe regularly test that this is the case in our acid test, which runs autopep8 against suites of files and verifies that the resulting syntax is correct and that the program stays the same. The latter is checked by checking that the compiled bytecode remains identical.\nhttps://github.com/hhatto/autopep8#testing\n. Thanks for pointing this out!\n. Could this be like #226?\n. I think I disabled this on purpose. The indentation corrections were sometimes buggy with --line-range. I think this may be a duplicate of https://github.com/hhatto/autopep8/issues/175#issuecomment-87096771.\n. --max-line-length should be what you are looking for.\n. I can't seem to reproduce this behavior. Could you provide an example?\nThanks\n. I think I originally meant for --exclude to be used with --recursive only. But I see how this might be unintuitive. In any case, pep8/pycodestyle does things the way you and the Stack Overflow question expects. So I think it would make sense to fix this. At the very least, this would make our tools match in behavior.\nThanks\n. In terms of checking PEP 257, there is pycodestyle. For formatting, there is docformatter.\n. I think it is a pylint problem.\nhttps://github.com/PyCQA/pylint/issues/638\n. This might be worth doing for version 2.0.\n. For my own usage, I think that alignment is more important than fitting within 79 characters. I find badly aligned code hard to read, while code with a few characters over 79 is not. But I welcome a pull request to add an option to do otherwise.\nBy the way, the example you provided is well within the 79-character limit.\n. This is intentional. Several people asked us to ignore commented-out code in the past. (In my opinion, it is probably better to just delete those lines.)\nhttps://github.com/hhatto/autopep8#features\n\nE265, which refers to spacing after comment hash, is ignored if the comment looks like code. autopep8 avoids modifying these since they are not real comments. If you really want to get rid of the pycodestyle warning, consider just removing the commented-out code. (This can be automated via eradicate.)\n. Did you intend to write lambda i, n instead?\n\nIf you really want a tuple (i, n), then the reason it is converted to i_n is to support Python 3.\nhttp://www.diveintopython3.net/porting-code-to-python-3-with-2to3.html#tuple_params\nThe conversion is done by lib2to3. autopep8 doesn't itself contain the code to do this.\n. I think you should check if pycodestyle detects this. autopep8 uses pycodestyle to detect problems. So if it doesn't detect it, autopep8 probably won't fix it.\nThis applies to #256 and #257 as well.\n. I just noticed your issue in the pycodestyle repository. So I guess you already figured it out before I commented.\n. See #255.\n. I'm not sure if it is still maintained, but there is pep8radius. It looks like the unit tests are failing.\n. Thanks.\n. I had to revert this. It seems to be causing test failures. If you open a new pull request with the tests fixed, I can merge it in.\n. https://travis-ci.org/hhatto/autopep8/jobs/173794811#L214\nhttps://travis-ci.org/hhatto/autopep8/jobs/173794811#L1663\n. Yes, they are caused by that commit. It looks like you need to update the expected test output.\n. @spaceone, pypy is not why the tests are failing. It looks like pycodestyle has a new warning about l being ambiguous and warning that it could be interpreted as the number 1. I've fixed this is 084e18dccaed82ba1630bffc3baa08b3213dd4c4.\n. Thanks.\n. Thanks!. I'm not familiar with VS Code, but I think you would need to report this to whoever maintains the autopep8 plugin for VS Code. This repository is unrelated to VS Code.. Good to hear!. See #214.. Could you resolve the merge conflict? Thanks.. I haven't been heavily involved in autopep8 development recently (mainly due to not needing to frequently reformat large amounts of legacy Python code anymore). I don't have enough interest to come up with an interesting project for a student.\nI'm willing to help review code and guide the student if someone else like @hhatto decides to come up with a project for the student.. ```\n$ echo -n 'import x' > foo.py\n$ file foo.py\nfoo.py: ASCII text, with no line terminators\n$ ./autopep8.py --diff foo.py\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1 +1 @@\n-import x\n\\ No newline at end of file\n+import x\n$ ./autopep8.py -i foo.py\n$ file foo.py\nfoo.py: ASCII text\n``. I thinkpycodestyle` does this properly:\nhttps://github.com/PyCQA/pycodestyle/blob/ca5350195031c8e29c50292404eaec848bbb073b/pycodestyle.py#L2208. I don't think this is necessarily better.\n\nIt assumes that the text is meant to be centered. The user could have intentionally meant for the text to be left justified ### This is text #############################.\nThe code does not work as it is right now. It is doing floating-point division and then trying to use that as an integer, which results in an exception: TypeError: can't multiply sequence by non-int of type 'float'.\nIt uses a except Exception to ignores all exceptions, including the above.\n\nI think a more appropriate action would to be to just remove this text-cutting-off functionality from autopep8.. I think it fixes this specific issue of mangling the code. Feel free to open a new issue as @jayvdb suggested.. I think this may have been introduced in commit 0d28a5bbb5f00d344a4d6a8ecfb5c452d652a91a.. This is probably the lib2to3-based fixer, which I think is in W690.. That would make sense. I'm not sure why it doesn't.. Thanks!. Thanks for the report!\nhttps://pypi.python.org/packages/0a/fc/c541b2fa1b244e0484216076b95468dc011ae90016b8f37333a24a11e468/autopep8-1.3.2.tar.gz#md5=5aa2ab9ff4ac0f9ac143229f7c3fed7b. Thanks for the report!. I guess they switched this at some point.. I can confirm. This is due to the workaround in ca02ec6ed6e00d0ac32157304c6063e5c2ff948c.. I think that should be max_line_length per argparse's normalization.. A code example would be helpful us. Thanks!. I can't reproduce the IndexError with @pikacic's example. Though, there is indeed something wrong there that could be related. The comment is getting mangled.\n$ ./autopep8.py foo.py  -aaavd\n[file:foo.py]\n--->  Applying global fix for E265\n--->  Applying global fix for W602\n--->  2 issue(s) to fix {'E501': {4}, 'E305': {5}}\n--->  0 issue(s) to fix {}\n```diff\n--- original/foo.py\n+++ fixed/foo.py\n@@ -1,5 +1,8 @@\n def something():\n     pass\n-# a quick brown fox jumps over the lazy dog, again, again, again, again, again..\n+\n+#  # a quick brown fox jumps over the lazy dog, again, again, again,\n+\n+# again, again..\n something_else = 123\n``. I've actually looked for a reStructuredText formatter in the past. I didn't find one. But if there is one, it seems like it wouldn't be too difficult to have it callautopep8` on the Python code blocks.. Yeah, see:\nhttps://github.com/hayd/pep8radius. I think I agree with this. Though, it looks like E711 and E712 are already disabled by default. The --aggressive option enables it.\nhttps://github.com/hhatto/autopep8/blob/81d90c3dbb307a5c0c649c41f1bb1ada3c874f4e/autopep8.py#L1607.  @PabTorre The input to autopep8 is meant to be Python code. It isn't meant to format generic text files (requirements.txt).. It should already ignore non-Python files during recursive mode. See @hhatto's comment above with . as the argument.\nBut if the user explicitly passes in an arbitrary fie as an argument, autopep8 does what the user asks.. Why is the check for line_index >= 0 needed? It seems quite suspicious. Maybe an assert would be better. (This just makes me worried that it could somehow accidentally go all the way to the top of the file and indent everything by one level.)\n. I'd prefer if the variables conformed to PEP 8's lower-case only convention.\n. I think docstrings should conform to PEP 257. You can merge https://github.com/hhatto/autopep8/tree/local_indenting to pull in the relevant changes.\n. I think full sentences in comments would be clearer (with capital letters at the beginnings and punctuation at the ends).\nhttp://nedbatchelder.com/blog/201401/comments_should_be_sentences.html\n. Could you break this up into separate functions? This could get difficult to test if I need to debug things in the future. If they were separate functions, I could do the following for each individual case.\n$ python -m unittest test_autopep8.UnitTests.test_foo_bar_should_do_this\nIf necessary, maybe put them in a test separate class.\n. What's this for?\n. Any reason for the pragma: no cover?\n. I don't quite understand this. Is this assuming that the user always uses ['--global-config=foo'] rather than ['--global-config', 'foo']?\nAlso, I don't think this will work with --global-c, --global-co, and the like, which argparse supports. And it will incorrectly accept --global-config-wrong.\n. I think it should be fine to just change the behavior of main(). Do you know of somewhere where we are testing by calling main()? And if there is such a case, I think that test can just pass in the appropriate command-line options to ignore the configuration.\n. Yeah, I understand the purpose of pragma: no cover in general. But I'm not sure what the purpose of it is in this case. We test on both Python 2 and Python 3 and combine the results on coveralls.io.\n. Please leave the pragma: no covers that were already there. My comment was about the newly added pragmas that assumed Python 2 only testing. Thanks.\n. Cool.\n. It seems like this would cause docstrings to get mutated.\n. Could you use multiline strings rather than putting inline \\n characters in there? This is kind of making it hard to read the indentation. See any of the other autopep8 test cases for examples.\nThanks\n. The two empty lines should go before the comment.\n. ",
    "hhatto": "Thanks!!\n. Thanks!!\n. Hi,\nThanks for reporting.\nfixed by 780951a7093bd8dc9b6bf73f43c0c61685903aa7\n. implemented in version0.6.3 .\nCould you try once.\nThanks.\n. Hi.\nThat's nice idea.\nCloud you try on another branch?\n. Great!!\nI try that runs test/acid.py with Python 3.2, as a result of run without crashing. \n. version 0.6.4 has been released.\n. This bug is fixed in e34540c81093c49b972e2249f595dd6eb989bb1a.\nThanks.\n. update now. version0.8.3 has been released.\n. Hi.\ndirty hack.\n``` diff\ndiff --git a/autopep8.py b/autopep8.py\nindex e478c52..e772311 100755\n--- a/autopep8.py\n+++ b/autopep8.py\n@@ -970,6 +970,12 @@ def shorten_line(tokens, source, indentation, indent_word, newline,\n if aggressive:\n     for key_token_strings in SHORTEN_OPERATOR_GROUPS:\n\n\n_tmp = source\nis_more_aggressive = False\nif _tmp.strip()[-1] == ':':\n_tmp = source\nis_more_aggressive = True\nsource = indentation.join([source, \"    print(2)\"])\n             shortened = _shorten_line_at_tokens(\n                 tokens=tokens,\n                 source=source,\n@@ -979,6 +985,9 @@ def shorten_line(tokens, source, indentation, indent_word, newline,\n                 key_token_strings=key_token_strings)     if shortened is not None and shortened != source:\n\n\nif is_more_aggressive:\nsource = _tmp\nshortened = shortened[:(len(\"    print(2)\") + len(indentation)) * -1]\n             yield shortened\n\n\n\ndiff --git a/test/test_autopep8.py b/test/test_autopep8.py\nindex 03805f3..de13343 100755\n--- a/test/test_autopep8.py\n+++ b/test/test_autopep8.py\n@@ -1747,6 +1747,19 @@ raise MultiProjectException(\n         with autopep8_context(line, options=['--aggressive']) as result:\n             self.assertEqual(fixed, result)\n\ndef test_e501_with_if_statement(self):\nline = \"\"\"\\\n+if condition_foo and something_long_object_name(plus, its, many, arguments, here):\npass\n+\"\"\"\nfixed = \"\"\"\\\n+if condition_foo and something_long_object_name(\nplus, its, many, arguments, here):\npass\n+\"\"\"\nwith autopep8_context(line, options=['--aggressive', '--max-line-length=79']) as result:\nself.assertEqual(fixed, result)\n+\n     def test_e502(self):\n         line = \"print('abc'\\\\n      'def')\\n\"\n         fixed = \"print('abc'\\n      'def')\\n\"\n\n```\n$ autopep8.py --aggressive w79.py\nif condition_foo and something_long_object_name(\n        plus, its, many, arguments, here):\n    pass\nThanks.\n. released version 0.9.\nCould you try once again?\n. @myint \nsorry about the delay, version 1.0.1 has been released.\nThanks\n. Thank you for contibution.\ntest failed in this changeset.\ntest_e501_experimental_decorator (__main__.ExperimentalSystemTests) is not returned.\n$ python test_autopep8.py -v\ntest_diff (__main__.CommandLineTests) ... ok\ntest_diff_with_empty_file (__main__.CommandLineTests) ... ok\ntest_diff_with_nonexistent_file (__main__.CommandLineTests) ... ok\ntest_diff_with_standard_in (__main__.CommandLineTests) ... ok\ntest_exclude (__main__.CommandLineTests) ... ok\ntest_fixpep8_class_constructor (__main__.CommandLineTests) ... ok\ntest_help (__main__.CommandLineTests) ... ok\ntest_in_place (__main__.CommandLineTests) ... ok\ntest_in_place_and_diff (__main__.CommandLineTests) ... ok\ntest_in_place_with_empty_file (__main__.CommandLineTests) ... ok\ntest_inplace_with_multi_files (__main__.CommandLineTests) ... ok\ntest_invalid_option_combinations (__main__.CommandLineTests) ... ok\ntest_list_fixes (__main__.CommandLineTests) ... ok\ntest_parallel_jobs (__main__.CommandLineTests) ... ok\ntest_parallel_jobs_with_automatic_cpu_count (__main__.CommandLineTests) ... ok\ntest_pep8_ignore (__main__.CommandLineTests) ... ok\ntest_pep8_ignore_should_handle_trailing_comma_gracefully (__main__.CommandLineTests) ... ok\ntest_pep8_passes (__main__.CommandLineTests) ... ok\ntest_recursive (__main__.CommandLineTests) ... ok\ntest_recursive_should_ignore_hidden (__main__.CommandLineTests) ... ok\ntest_recursive_should_not_crash_on_unicode_filename (__main__.CommandLineTests) ... ok\ntest_standard_in (__main__.CommandLineTests) ... ok\ntest_standard_out_should_use_native_line_ending (__main__.CommandLineTests) ... ok\ntest_standard_out_should_use_native_line_ending_with_cr_input (__main__.CommandLineTests) ... ok\ntest_verbose (__main__.CommandLineTests) ... ok\ntest_verbose_diff (__main__.CommandLineTests) ... ok\ntest_e501_experimental_alone_with_indentation (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_alone_with_tuple (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_and_import (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_and_multiple_logical_lines (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_and_multiple_logical_lines_with_math (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_arithmetic_operator_with_indent (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_avoid_breaking_at_empty_parentheses_if_possible (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_basic (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_basic_should_prefer_balanced_brackets (__main__.ExperimentalSystemTests) ... ok\ntest_e501_experimental_decorator (__main__.ExperimentalSystemTests) ...\n. LGTM\nThanks.\n. Thanks!!\n. Thanks.\n. fix latest master.\nCould you try once again?\nThanks.. memo\nstill not working in autopep8 1.1.\n. Could you be more specific?\n- Python version\n- platform (Linux, Mac, Windows...)\n- autopep8 version\n- autopep8 options\nDid not occur in my environment :\n$ cat t.py\nif (0)/0):\n    break\n$ autopep8 --version\nautopep8 1.1\n$ autopep8 t.py\nif (0) / 0):\n    break\n$ autopep8 -d t.py\n--- original/t.py\n+++ fixed/t.py\n@@ -1,2 +1,2 @@\n-if (0)/0):\n+if (0) / 0):\n     break\n. :+1: \n. @myint \nDo you support in autoflake?\nhttps://github.com/myint/autoflake\n. @douglarek \nSorry for late replay.\nThere are no plans to support for now.\nIf if pep8 is to support, I will support any autopep8.\n. version 1.2.1 has been released.\nThanks\n. see also #249 \n. Thanks for suggestion.. @felixonmars \nsorry, git push --tags just now.\nThanks\n. Unnm, I think so, this change is not a function of autopep8.\n. fix in latest master.\nIt is scheduled to be released in version 1.3.. fix in 0ede8c68f089f7cfd980d876c23aecb2fa0aaa23.\nWhether other cases exist?\n@spaceone \n. fix in efe4aa3c4258281adae0a058cae79917a2634cba\n. Thanks for reporting.\nGoog catch.\nfix in e9a1e4e542837fcaae2d0791668b3581e03b9d79\n. use with --ignore=W690 option.\n$ autopep8 -aaa --ignore=W690 mi.py\nfrom sys import maxint\nmaxint\n. please review\n. Thanks!! \ud83d\ude04 \n. fix in 0d28a5bbb5f00d344a4d6a8ecfb5c452d652a91a\nThanks for reporting.\n. this is not occured in my envirment.\n$ autopep8 --version\n2.0a0\n. ``` console\n$ git log --oneline -n 1\ne3afcc9 update\n$ pycodestyle --version\n2.0.0\n$ python autopep8.py ~/e301.py | pycodestyle -\n$ python autopep8.py ~/e301_another.py  | pycodestyle -\n$ cat ~/e301.py\nclass BaseMailClient(object):\ndef check_permissions(self, owner_user, mailbox, permission, dovecot):\n    permissions = {\n        'lookup': 'l',\n    }\n    def lookup_OK(permission):\n        return set(permissions.get('lookup')).issubset(permission)\n\n$ cat ~/e301_another.py\nclass Simple(base):\n    def _ldap_object_classes(self, ml):\n        m = univention.admin.modules.get(self.module)\n        def lowerset(vals): return set(x.lower() for x in vals)\n    ocs = lowerset(_MergedAttributes(self, ml).get_attribute('objectClass'))\n\n(py2712)(1:21) hattori@miyanoura on ~/work/autopep8\n$ python autopep8.py ~/e301_another.py -d\n--- original//Users/hattori/e301_another.py\n+++ fixed//Users/hattori/e301_another.py\n@@ -1,6 +1,9 @@\n class Simple(base):\n-   def _ldap_object_classes(self, ml):\n-       m = univention.admin.modules.get(self.module)\n-       def lowerset(vals): return set(x.lower() for x in vals)\n\nocs = lowerset(_MergedAttributes(self, ml).get_attribute('objectClass'))\ndef _ldap_object_classes(self, ml):\nm = univention.admin.modules.get(self.module)\n+\ndef lowerset(vals): return set(x.lower() for x in vals)\n+\nocs = lowerset(_MergedAttributes(\nself, ml).get_attribute('objectClass'))\n(py2712)(1:21) hattori@miyanoura on ~/work/autopep8\n$ python autopep8.py ~/e301.py -d\n--- original//Users/hattori/e301.py\n+++ fixed//Users/hattori/e301.py\n@@ -4,5 +4,6 @@\n         permissions = {\n             'lookup': 'l',\n         }\n+\n         def lookup_OK(permission):\n             return set(permissions.get('lookup')).issubset(permission)\n.\n$ git log --oneline -n 1\n5c4ca67 Fixed line wrapping in CHANGELOG\n$ python autopep8.py ~/e301.py | ./pycodestyle.py -\n$ python autopep8.py ~/e704.py | ./pycodestyle.py -\nstdin:6:9: E704 multiple statements on one line (def)\n```\n\nwon't fix, now.\n. Thanks for reporting.\nfix in latest master c380e2e40ff807b066832e32d09be05839e75a72. Thank you for reporting.\nfix in latest master.\nIt is scheduled to be released in version 1.3.. Thanks for reporting.\nfix in version 1.3.. I see, patches are welcome.. fix in latest master (ba30b1ff900d5834790fc0fef1b00236517a4deb)\nThanks.. fix #309 . \nIt is scheduled to be released in version 1.3.. Sorry for late reply.\nThis feature suggestion is nice.\nI made a review comment so I will merge if you can fix it.\n. Thank you.. support fix e722 with aggressive option.. @evhub \nThanks for feedback.\nThat's right. I should have used BaseException.\nfix in latest master.\n. fix in ce1de73cccce73c5784bfb4a411066d2f76a447c. I'm planning to release version 1.3 containing several bug fixes next week.. fix in latest master.\nIt is scheduled to be released in version 1.3.. @sils \nThis proposal is interesting, but it is not likely to cooperate. I can not have enough time for this project, and English communication is very difficult for me :-|\nSorry, I couldn't help you.\nPatches are always welcome:-). Is it insufficient with the following description?\n\nhttps://github.com/hhatto/autopep8/blame/master/README.rst#L181\nhttps://github.com/hhatto/autopep8/blame/master/README.rst#L241-L242\n\nIf it is insufficient, please pull-request. Thanks :-)\n. fix in latest master.\nIt is scheduled to be released in version 1.3. (next week). Thanks for suggestion.\nBut we will not change the name, now.. Thank you for reporting.\nfix in 43f5eeb.. refs: https://github.com/hhatto/autopep8/issues/223#issuecomment-153044749\n\nI think it is dependent on what pep8 supports. pep8 supports noqa for some error codes, I think.\n\nI am also in this policy.\nhttp://pycodestyle.pycqa.org/en/latest/intro.html#error-codes\n\n(^) These checks can be disabled at the line level using the # noqa special comment. This possibility should be reserved for special cases.\n. Thank you for feature suggestion.\n\nBut I think that this feature is not necessary for autopep8.\n. pycodestyle execution time is long, now.\n$ time pycodestyle -r test_autopep8_long_line.py\ntest_autopep8_long_line.py:7:80: E501 line too long (138397 > 79 characters)\ntest_autopep8_long_line.py:8:1: W391 blank line at end of file\npycodestyle -r test_autopep8_long_line.py  116.25s user 1.01s system 96% cpu 2:02.09 total. Thank you for reporting bug.\nfix in latest master 3ad6751182bff5105fd07151f399b856ddaaa140. @benf-wspdigital \nThanks for reporting \ud83d\udc4d \nfix in #376.. $ cat ~/ins.py\na = \"a\"\nfoo = 1\ntype(a) == foo\n$ 2to3 -f all -f idioms ins.py\nRefactoringTool: Skipping implicit fixer: buffer\nRefactoringTool: Skipping implicit fixer: set_literal\nRefactoringTool: Skipping implicit fixer: ws_comma\nRefactoringTool: Refactored ins.py\n--- ins.py  (original)\n+++ ins.py  (refactored)\n@@ -1,3 +1,3 @@\n a = \"a\"\n foo = 1\n-type(a) == foo\n+isinstance(a, foo)\nRefactoringTool: Files that need to be modified:\nRefactoringTool: ins.py\nE721 is global fixer with lib2to3.\nhttps://github.com/hhatto/autopep8/blob/master/autopep8.py#L103. Thank you for reporting.\nfix in latest master (3b9945e3ed03e9cfc81336f1deb0412a03df8a9d). @tsaizehua \nThanks for reporting.\nfixed by #355, closing. Feel free to reopen if needed.. thank you for reporting.\nfix in #390.\nautopep8 version 1.3.5 has been released.\nThanks.. @fpuga \nautopep8 version 1.3.3 has been released.\nCan you try it as it has been fixed in the latest version?. E133 fixed method is implemented in 4c10e91219e8c6f617afe14678d778fcbb382777.\nusage:\n$ autopep8 --hang-closing TARGET.py\nThanks. It is not recommended in PEP 8.\nhttps://www.python.org/dev/peps/pep-0008/#other-recommendations\n\nWhen combining an argument annotation with a default value, use spaces around the = sign (but only for those arguments that have both an annotation and a default).\nYes:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\nNo:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit = 1000): ...\n\npycodestyle does not point it out as well.. I think that there is no need therefore can be replaced by --exclude option.. @fcastilloec \nautopep8 version 1.3.3 has been released.\nCan you try it as it has been fixed in the latest version?. @danquack \nCould you please describe the information a little more?\nAre you using pythonVSCode?. Could you ask a question in Visual Studio Code community?\nhttps://code.visualstudio.com/community/. Thank you for using autopep8.\nBut, this is not autopep8's issue.. Thank you for bug reporting.\nfix in #352 \nCan you try it as it has been fixed in the latest version?\n$ pip install --upgrade git+https://github.com/hhatto/autopep8\nBy the way, the output will be similar in the following cases now:\nraise ValueError, \"error\"\nraise (ValueError\n          if var else TypeError)\n$ python autopep8.py -a -d invalid.py\n--- original/invalid.py\n+++ fixed/invalid.py\n@@ -1,3 +1,2 @@\n-raise ValueError, \"error\"\n-raise (ValueError\n-          if var else TypeError)\n+raise ValueError(\"error\")\n+raise ValueError\nThanks.. plan to release it in version 1.3.4 or 1.4. Thank you for bug reporting.\nfix in 8c0dbc1e33cd9d971c881118153667e03a9192fa\nCould you try once again with latest master?. please provide the following:\n* autopep8 --version\nAs far as this result is, it seems to have to modify the pointed out E501.\nthe result in my environment:\n```\n$ python -V\nPython 2.7.14\n$ autopep8 --version\nautopep8 1.3.3 (pycodestyle: 2.3.1)\n$ cat bar.py\ndef sync_ca_rh(self, partenaire):\n    infos_d = {}\n    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n$ autopep8 -d --ignore E711 bar.py\n--- original/bar.py\n+++ fixed/bar.py\n@@ -1,3 +1,4 @@\n def sync_ca_rh(self, partenaire):\n     infos_d = {}\n-    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n+    # type: List[PartenaireBusinessInfo]\n+    business_infos = partenaire.business_infos\n$ autopep8 -d bar.py\n--- original/bar.py\n+++ fixed/bar.py\n@@ -1,3 +1,4 @@\n def sync_ca_rh(self, partenaire):\n     infos_d = {}\n-    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n+    # type: List[PartenaireBusinessInfo]\n+    business_infos = partenaire.business_infos\n```. please provide following information:\n\nexecution result of autopep8 -v -d bar.py and autopep8 -v -d --ignore E711 bar.py\nCould you attach a bar.py file or URL? . Hmm, It did not reproduce in my environment.\n\nDo you have people that reproduces in the other? \ud83d\udc42 \u270b . This is fixed with E501(line too long).\nwon't fix.. Thank you for using autopep8.\nBut, this is not autopep8's issue.\nThanks.. Thanks for reporting.\nfor i in range(3):\n    if i == 1: print i\n        continue\n    print i\nthis is invalid python code.\nAs one of the suggested solutions to not fix if there is E701 and E702 on same line.. see also https://github.com/PyCQA/pycodestyle/issues/682. This problem no longer occurs from version 1.4.1.\nfix in 95832804e361588cb8e15d848a20089fbd8d9029.\n\nupdate requirement, pycodestyle 2.4.0 and higher version\n. thank you for reporting.\n\nfix it in latest master.. implemented by #397 . #423. It will be available in the next release. Thank you for using autopep8.\nBut, this is not autopep8's issue.\nThanks.. Thanks for contribution!!. .flake8 file can now be used as a configuration file in latest master.\nIt will be released in the next version. (1.4.1 or 1.5)\nThanks. @Hnasar \ngood catch.\nThanks!!. thank you for reporting.\nfix in #390.\nautopep8 version 1.3.5 has been released.\nThanks.. Thank you for bug reporting \ud83d\udc4d \nfix in latest master. 4d8ae4a . Thank you for reporting.\nIs this PR #386 the same case?. (We are planning to release version 1.3.6 this week.. Would you please share the repository URL or source code where the error occurred?. waited for a reply and so I will close it.\nIf there is an update, it will reopen.. fix in latest master (fffb20b0e5c35a788cad93ae8f2d333f848423ef)\nThanks.. @gmbnomis \nThanks for your contribution.\nLGTM. Good catch \ud83d\udc4d \nThanks.. use with --ignore=E701 option.\n$ cat x.py\nif True: res += 1\n$ pycodestyle x.py\nx.py:1:8: E701 multiple statements on one line (colon)\n$ autopep8 x.py -d\n--- original/x.py\n+++ fixed/x.py\n@@ -1 +1,2 @@\n-if True: res += 1\n+if True:\n+    res += 1\n$ autopep8 x.py -d --ignore=E701\n$\nThanks.. @bje- \nneed -aa option. Could you give me some additional information?\n input files or repository url\n Python version\n autopep8 version\n OS environment. fixed in latest master branch.\nThanks. This code not been pointed out in pycodestyle:\ndef test_method(\n        param1: int,\n        param2: int,\n        param3: int,\n) -> int:\n    return param1 + param2 + param3\n$ pycodestyle --select=E n.py\nAs pointed out by pycodestyle it will be fixed in autopep8:\ndef test_method(\n            param1: int,\n            param2: int,\n            param3: int,\n) -> int:\n    return param1 + param2 + param3\n$ pycodestyle --select=E f.py\nf.py:12:13: E126 continuation line over-indented for hanging indent. Thanks for reporting.\nIt will be fixed this PR(PyCQA/pycodestyle/pull/747) is released.. https://github.com/hhatto/autopep8/blob/master/README.rst#id3\nupdate usage sction for default ignore in README.. @AlexArcPy \nfix in version 1.4.\nPlease version up autopep8.\nv1.3.5:\n$ python autopep8.py --version\nautopep8 1.3.5 (pycodestyle: 2.4.0)\n$ python autopep8.py -d -aa example.py\n--- original/example.py\n+++ fixed/example.py\n@@ -1 +1 @@\n-def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\n+def example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True};\nv1.4:\n$ python autopep8.py --version\nautopep8 1.4 (pycodestyle: 2.4.0)\n$ python autopep8.py -d -aa example.py\n--- original/example.py\n+++ fixed/example.py\n@@ -1 +1 @@\n-def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));\n+def example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True}\nThanks. It is pointed out even in pycodestyle.\n$ cat requirements.txt\nmore-itertools\n$ pycodestyle --select=E,W requirements.txt\nrequirements.txt:1:5: E226 missing whitespace around arithmetic operator\n$ autopep8 -a -a -r -d requirements.txt\n--- original/requirements.txt\n+++ fixed/requirements.txt\n@@ -1 +1 @@\n-more-itertools\n+more - itertools\nignore with -r (recursive mode) in this case.\n$ autopep8 -a -a -r -d .\n$\nThanks.. @tony \nSorry for late reply.\nConfiguration section in latest master.\nCould you look at this once?\n(can use setup.cfg. use pep8, pycodestyle and flake8 for section.). I also think that it would be better to use autopep8 as a section.\nI will also make autopep8 usable as a section name, so please wait a little more \ud83d\ude4f . @martemyev \nfix in the latest master branch. a9b49c4eb5c6e9a89d1420cd6042df44adf0f2e6\nThank you!!. Thanks for feedback.\nfixed in latest master branch. (72821e765cf80e7ea4b8a4f17668ada702a38369). Thanks!!. Thanks for reporting.\nI can't reproduce.\nCould you please provide a minimal script that reproduces your issue?\nAnd please provide more information.\n\nautopep8 version\nPyhton version\nOS (Linux, Windows, macOS, etc...)\n\n```\n$ cat example.py\nimport re\nco = re.compile(\n            \"(\")\n$ autopep8 -d example.py\n--- original//Users/hattori/ddd.py\n+++ fixed//Users/hattori/ddd.py\n@@ -1,4 +1,4 @@\n import re\nco = re.compile(\n-            \"(\")\n+    \"(\")\n.\n$ cat > x.py << EOF\n(\n\"(\")\nEOF\nautopep8 -a -a -a --experimental x.py\n```\nUmm, I can't reproduce with Python3.5.5, 3.6.6, 3.7.0.. Sorry, I'm mistake.\nThis is same as #403.\nChanged not to raise an exception in 303439802dc194cd1948af33391d59468770acf9.\nIt will be fixed this PR(PyCQA/pycodestyle/pull/747) is released.. fixed in latest master (e830499d6bdf967a0a795ce9d02b36bb13d55338) .\nThanks for your feedback!!. Cool \ud83d\udc4d \nThanks!!. This case is E226.\n$ cat 225.py\nb = 2\na = b+1\n$ pycodestyle --select=E,W\n225.py:2:6: E226 missing whitespace around arithmetic operator\nand E226 is in default ignore.\nSo you can specify it by specifying --select=E,W option.\n$ autopep8 -d ~/gox.py --select=E,W\n--- original//Users/hattori-h/gox.py\n+++ fixed//Users/hattori-h/gox.py\n@@ -1,2 +1,2 @@\n b = 2\n-a = b+1\n+a = b + 1. Thanks for contribution.\nCould you tell us more detailed information on the environment?\n OS (detail of Windows version, etc...)\n Python Version. Hi,\nNow how do you specify options and if you change, for example, what options should I have?. autopep8 is correcting according to pycodestyle's error codes. \nCurrently there are some to fix with lib2to3.\n\nall of the features where autopep8 goes beyond what pycodestyle requires.\n\nSpecifically, what kind of correction is it?\nI would appreciate it if you have code examples.. FYI:\nreturn zero commands\n\nblack --diff\nautoflake\ndocformatter\ngofmt -d\ngit diff\n\nreturn non-zero commands\n\nyapf -d\ndiff\ngit diff --exit-code\n. It is scheduled to be released in version 1.4.1 or 1.5.. @dlintw \nCould you try to add encoding parameter in fix_code?\n\n198         new_contents = autopep8.fix_code(org_contents, options={'jobs': 0})\nfix this:\n198         new_contents = autopep8.fix_code(org_contents, options={'jobs': 0}, encoding='YOUR-ENCODING'). re-open if there is new information.. unused-import is annotation of pyflakes.\nuse pyflakes and autoflake.\nThanks.. This pull-request is for #432.\nWhat about in such a change? @sonots. @rameshrvr \nThis is duplication of #403, #414.\nIt will release version 1.4.1 in a few days.\nThanks. v1.4.1 released\nhttps://pypi.org/project/autopep8/1.4.1/. duplication of #438 . @ATRAN2 \nfix in latest master.\nversion 1.4.2 just released.\nhttps://pypi.org/project/autopep8/1.4.2/\nCould you try once again with version 1.4.2?\nThanks.. fix in latest master.\nversion 1.4.2 just released.\nhttps://pypi.org/project/autopep8/1.4.2/\nThanks.. fix in latest master.\nversion 1.4.2 just released.\nhttps://pypi.org/project/autopep8/1.4.2/\nThanks.. Thanks for bug report.\nfix in latest master https://github.com/hhatto/autopep8/commit/0e3303180ec39a1374862ddc3f2d3f44140cf294\nWe are planning to release version 1.4.3.. version 1.4.3 released\nhttps://pypi.org/project/autopep8/1.4.3/. Thanks for bug report.\nfix in latest master https://github.com/hhatto/autopep8/commit/4343c41ca3d52e75af5e95f6b86a6053bcbd9a57\nWe are planning to release version 1.4.3.\nIf you do not want to apply the fix of E402 after sys.path.insert(... line please add NOQA: E402 comment.\nfor example:\n```\n  :\nsys.path.insert(0, P.abspath(P.join(P.dirname(file), \"../job/\")))\nfrom configuration import Configuration  # NOQA: E402\nfrom personLabNetworkFunctions import get_personlab  # NOQA: E402\nfrom helper import (\n    add_circle_to_matrix,\n    circle_of_digits,\n    circle_of_x_offsets,\n    circle_of_y_offsets,\n    circle_of_mid_range_x_offsets,\n    circle_of_mid_range_y_offsets,\n    transform,\n    display_mid_range_offsets,\n    display_short_range_offsets,\n    display_heatmaps,\n    show_computed_heatmaps,\n)  # NOQA: E402\nfrom constants import (\n    KEYPOINTS,\n    EDGES,\n    IM_WIDTH,\n    IM_HEIGHT,\n    IN_WIDTH,\n    IN_HEIGHT,\n    RADIUS,\n    PEAK_THRESH,\n    DATA_DIR,\n    NUM_EDGES,\n    NUM_KP,\n)  # NOQA: E402\n```. version 1.4.3 released\nhttps://pypi.org/project/autopep8/1.4.3/. Thanks for reporting.\nIt will be fixed when this PR(PyCQA/pycodestyle/pull/747) is released.\nsee also #403 . planning to release version 1.4.3.. version 1.4.3 released\nhttps://pypi.org/project/autopep8/1.4.3/. @bigredengineer \nThanks!!\nLooks good to me.. Thaks for your bug reporting.\nfix in latest master branch (40bcf6f126f11f6957f7b2c31d880245843b2242)\n. LGTM\nThanks :+1: . Thanks!!. Since I could not catch this problem, I decided to check the code for the test with pycodestyle.\nPlease see the following commit hash:\nca76620f8bbeadd36d331763fc651414bcd65759. It is resolved in this issue:\n- [x] Change the import statement that it does not moved above the module document by E402 (Thanks @Hanaasagi )\n- [x] Change the import statement that it does not moved above the from __future__ import XX by E402 ( Thanks @Hanaasagi ). @Hanaasagi \nThanks for your contribution!!\nLGTM \ud83d\udc4d . @GTValentine \nThanks for your bug reporting.\nThis problem fix in #442 .\nIt is scheduled to be released in version 1.4.4 or 1.5.. @bagerard \ngood catch!!\nLGTM. sorry to reply late.\nLGTM \ud83d\udc4d . Cool!!\nLGTM \ud83d\udc4d . Thanks!!. @sazad44 \nCould you show me specific code?\nAlso, is the code linted with pycodestyle?. @cansarigol \nCan you indicate the specific code?\nAlso, is the code linted with pycodestyle?. Oh, OK.\nCurrently you need to specify with the -aaa option.\nWe plan to change it to work even without the -aaa option.\nThanks.. version info:\n```\n(py372) hattorihideo@k2-3 ~\n\npycodestyle --version\n2.5.0\n(py372) hattorihideo@k2-3 ~\nautopep8 --version\nautopep8 1.4.3 (pycodestyle: 2.5.0)\n ```\n\ntarget file:\n```\n(py372) hattorihideo@k2-3 ~\n\ncat -n aa.py\n     1  x = 1\n     2  if x == False:\n     3      print(x)\n```\n\nexecute pycodestyle & autopep8:\n```\n(py372) hattorihideo@k2-3 ~\n\npycodestyle aa.py\naa.py:2:6: E712 comparison to False should be 'if cond is False:' or 'if not cond:'\n(py372) hattorihideo@k2-3 ~\nautopep8 -aaa -d aa.py\n--- original/aa.py\n+++ fixed/aa.py\n@@ -1,3 +1,3 @@\n x = 1\n-if x == False:\n+if not x:\n     print(x)\n(py372) hattorihideo@k2-3 ~\nautopep8 -aaa -i aa.py\n(py372) hattorihideo@k2-3 ~\npycodestyle aa.py\n(py372) hattorihideo@k2-3 ~\ncat -n aa.py\n     1  x = 1\n     2  if not x:\n     3      print(x)\n```. @spitfireCH \nHave you specified the target files for autopep8?\n\nfor example:\n$ autopep8 --max-line-length=120 TARGET.py\nThanks. fix indentation. Is limit[0] and limit[1] typo of limits?. Is limit[0] typo of limits?. Could you add to code  in parse_args() method, that mutually exclusive control of --line-range option. (same as --diff and --in-place). And, disable global fixes in fix_lines() method.\nfor example: \n```diff\ndiff --git a/autopep8.py b/autopep8.py\nindex c1f70eb..64890c7 100755\n--- a/autopep8.py\n+++ b/autopep8.py\n@@ -3089,7 +3089,7 @@ def fix_lines(source_lines, options, filename=''):\n     # Keep a history to break out of cycles.\n     previous_hashes = set()\n\nif options.line_range:\nif options.line_range or options.line_ranges:\n         # Disable \"apply_local_fixes()\" for now due to issue #175.\n         fixed_source = tmp_source\n     else:\n```. \n",
    "clach04": "I've not yet seen any hangs, autopep does not yet work under Windows with the code in git. I can mail you a version that (sorta') works if you want to see what it looks like, but I hacked it up a lot and it is not suitable for committing!\nI'd prefer to feed in proper changes gradually that are more robust.\nThe merge request for the file close is needed for both Jython and Windows, without this change the file(s) won't be closed. One of the problems under Windows is that files are implicitly locked, which causes the file delete calls to fail.\n. I've added a few more changes, these remove the need to use subprocess and temporary files. I'll test Windows tomorrow as these should be enough to start Windows support (it may even be enough to provide Windows support).\n. Just confirmed my current changes work under Jython and CPython under Windows. Please pull :-)\n. ",
    "neoascetic": "+1\n. ",
    "hartwork": "I have pep8 1.0.1 here if that matters.\n. Thanks for your quick reaction!\npep8 alone does not seem to crash:\n```\npep8 autopep-crash.py\nautopep-crash.py:2:1: W191 indentation contains tabs\nautopep-crash.py:3:1: W191 indentation contains tabs\nautopep-crash.py:3:4: E225 missing whitespace around operator\nautopep-crash.py:3:6: E224 tab after operator\n```\nIt seems the leading tabs do have their share, too. If you git-am this patch, the test should fail (at least it now does for me): http://hartwork.org/public/autopep8-fix-test-for-issue-10.patch\n. While autopep8 indead doesn't crash anymore (excellent!) it does not fix indentation to use spaces anymore either.\nThe output of\n```\n./autopep8.py issue10-original.py --ignore=W191\n./autopep8.py issue10-original.py\n```\nseem identical but latter should produce four-spaces indentation and only latter.\nPlease re-open this issue, I lack permissions to.\n. Okay, nevermind then. Thanks for the fix!\n. Okay, nevermind then. Thanks for the fix!\n. Okay, nevermind then. Thanks for the fix!\n. Okay, nevermind then. Thanks for the fix!\n. Okay, nevermind then. Thanks for the fix!\n. PS: 0.5.2 is not affected\n. > You should probably contact pep8's developers\nThere is a related bug report for pep8: https://github.com/jcrocholl/pep8/issues/45\n\nYou probably already know this, but you can set autopep8 to ignore those errors (globally) for now.\n\nUnfortunately, that's less than a workaround. For one because the code does not have pep8 errors and two because I then miss other fixes for related issues that I might be interested in.\n. Version 0.7 seems as fast as 0.6.2 was. Good work. Closing.\n. Nice! Confirming 0.7 to work, updating title, closing.\n. ",
    "nmandery": "pep8 is version 1.1, installed via pip from Pypi.\nshell\nnico@lenovo4 /tmp \u00bb pep8 --version\n1.1\nThe output of pep8 --repeat table.py is\nshell\nnico@lenovo4 /tmp \u00bb pep8 --repeat table.py\ntable.py:2:1: E302 expected 2 blank lines, found 1\ntable.py:3:3: E111 indentation is not a multiple of four\ntable.py:11:3: E111 indentation is not a multiple of four\ntable.py:14:3: E111 indentation is not a multiple of four\ntable.py:17:3: E111 indentation is not a multiple of four\ntable.py:20:7: E111 indentation is not a multiple of four\ntable.py:21:7: E111 indentation is not a multiple of four\ntable.py:21:22: E261 at least two spaces before inline comment\ntable.py:22:7: E111 indentation is not a multiple of four\ntable.py:24:3: E111 indentation is not a multiple of four\ntable.py:25:3: E111 indentation is not a multiple of four\ntable.py:28:3: E111 indentation is not a multiple of four\ntable.py:29:3: E111 indentation is not a multiple of four\ntable.py:35:3: E111 indentation is not a multiple of four\ntable.py:42:3: E111 indentation is not a multiple of four\ntable.py:43:3: E111 indentation is not a multiple of four\ntable.py:46:80: E501 line too long (122 characters)\ntable.py:46:59: E225 missing whitespace around operator\nthank you\n. ",
    "samv": "I have a strategy for that ... look out for it :-)\n. Sure, it turns out to be buggier than my runs last night promised.  I got to the bottom of the strange situation you found: see https://github.com/jcrocholl/pep8/pull/74\n. ",
    "dellis23": "Odd.  My version shows I have 0.6.3 installed, but I just tried cloning from github and doing the following:\npython autopep8/autopep8.py over_80_char.py\nNow the output gives the following valid:\npython\nmydict['longkey']['key2'][\n    'longkey3'] = 'my long string goes here that goes well past line 80'\nMy other issue of ignores not working seems to be solved when cloning and calling directly as well, so it seems that there is some sort of dichotomy here that has either been solved between the official release and github, or some difference between the command line version and when calling directly.\n. Okay, trying to narrow this down further, I ran the commands from the autopep8.py file in my site-packages directory and am still getting the same issue.\n. This appears to simply be an issue with the version in pip being broken versus the current state of the code in the repo.  I'm not really familiar with how updating packages in pip works, as well as who should close an issue and when, so I will leave this open.\nIf anyone could enlighten me on how these two processes generally function I'd appreciate it.  I'd like to contribute to open source more, and I think it would be helpful to know how these things are best done.\n. I see that this is indeed supposed to be detected, so I will try to narrow down exactly what is causing this and attempt to fix it.\n. I've just determined that it uses the proper newline for comments, but not other lines.\n. I've got a fix, I'll fork and do a pull request.\n. ",
    "jayrod": "I'm still seeing this error. I've pulled from the latest zip file and does not seem to be working. Thoughts?\n. ",
    "florentx": "Sample uses:\nhttps://github.com/jcrocholl/pep8/issues/35#issuecomment-6268109\n. did you try to update pip before ?\npip install -U pip\n. lastest smells like a typo ;-)\n. ",
    "YAmikep": "Hello,\nI'm not sure whether I use it right but using: autopep8 --in-place --recursive *.py will NOT format all the .py files from every folders and subfolders.\nIt just formats the file from the current directory.\nIs there a way to make it work with all the files under a directory (and its subdirectories etc) ?\nThanks.\n. I think I tried that but it formatted all my files, not only .py files..\n. Ok thank you.\nSo python code in .rst files should not be formatted right?\n. ",
    "WoLpH": "I agree that == to is is not always the best solution, but it is definately a better solution.\nPerhaps it would be a good idea to give a warning when replacing with a suggestion to change to not spam?\n. Awesome!\nI love the tool btw, I have written something similar with a bunch of regexes, but this is definately a lot nicer :)\n. ",
    "leoliu": "Thank you for looking into this.\n. I am happy to test it. Thanks.\n. I got autopep8 installed from git and here is the new results:\nreal    0m6.095s\nuser    0m5.852s\nsys 0m0.050s\n. With autopep8 0.8.2:\n```\n[python/sphinx/sphinx]$ time autopep8 -d environment.py > /dev/null\nreal    0m10.131s\nuser    0m9.985s\nsys 0m0.145s\n```\n. ",
    "smichr": "Is this only indenting the 2nd continued line for the same reason?\n$ pep8 --version\n1.3.3\n$ ../autopep8/autopep8.py --version\nautopep8: 0.8.1\n$ ../autopep8/autopep8.py -r --select=E122 --diff sympy/solvers/ode.py\n--- original/sympy/solvers/ode.py\n+++ fixed/sympy/solvers/ode.py\n@@ -1533,7 +1533,7 @@\n                     for o in other:\n                         b, e = o.as_base_exp()\n                         if b.is_Add and \\\n-                        all(a.args_cnc(cset=True, warn=False)[0] & \\\n+                            all(a.args_cnc(cset=True, warn=False)[0] & \\\n                         con_set for a in b.args):\n                             expr = sign(Mul(*num))*Mul._from_args(other)\n                             break\n. The text I gave was the diff after running autopep8. BUT...after upgrading pep8, I no longer get the error, either, so it must have just been an old pep8 problem. Closing.\n. Although I am active with another git repo (sympy) I'm not sure how to get set up here to be able to make a pull request. Do you have a wiki page for this or some brief instructions? I have a local clone of autopep8 and I forked autopep8 but I don't know how to push my branch to it. I have a pull request that will make autopep8 process 712 for True or False.\n. I think you are misinterpreting what is worse. Changing if greeting to if greeting is True is bad but 712 flags the situation where one writes if greeting == True; they should have written if greeting is True  Ahh, but there is this problem:\n```\n\n\n\n1 == True\nTrue\n```\n\n\n\nSo if they had x == True that means (x is True or x == 1) to python; and x == False means (if x is False or x == 0).\nThanks for the git tip. When I wrote git@github.com:smichr/autopep8.git for origin it worked. But I think this should be closed as a WontFix or else re-write as above. If the person had in mind the x is True case the or will return quickly.\n. if x == True has the same semantics (to Python) as if x is True or x == 1. \n```\n\n\n\nx = 1.0\nif x is True or x == 1: print 1\n... \n1\nif x == True: print 1\n... \n1\n```\n\n\n\nI agree that changing it to if x would have much different semantics since then it is true if x = range(3) whereas this would have failed the x == True syntax. Should the syntactically-equivalent change be made automatically and let the user worry about whether the 1 was intended or not?\n. OK. I see now that the README tells what errors are handled. I wonder if it would be worthwhile to emit what errors in a pep8 run are being ignored, perhaps with a verbose flag.\n. sigh...I even looked at the help screen but didn't see it. I should have searched for verbose. Move along...nothing to see here. :-)\n. ",
    "nilakhya": "[root@localhost guest]# python PythonTidy-1.23.python  testpyt.py > testpyt3.py\n[root@localhost guest]# pep8 testpyt3.py \ntestpyt3.py:5:80: E501 line too long (188 > 79 characters)\na similar tool also faults.\nif a string can be extended to more than one line using \"\\\" and continuing the string to next line why cant we automate it ?\n. ok lets close this thanks all of u guys ! \n. ",
    "njharman": "+1 not making changes (e.g. breaking strings) that are prone to\nbreaking/changing code behavior.\nA tool like autopep8 is awesome.  It doesn't have to be 100% awesome.  If\nit automates 98% or even 80% of the work that is phenomenal boon.  But, if\nit breaks code (or worse, injects subtle bugs not discovered immediately)\nthen it has failed and people won't use it.\nAnd btw, thanks for autopep8, it's awesome.\n. ",
    "Stals": "@myint Link to the autopep8 was in \"Pycoder's Weekly\" on 7 September so mb it spread from there.\n. ",
    "irving-ssk": "Folks, awesome tool doesn't have to be 100% awesome, but it better be close to 100% functional.\nFor example, if the size length is reached within a comment, breaking a comment in any place is better than doing nothing. Breaking at the last space before the margin (if it close enough) is better, but even the first alternative is better than nothing. No risk, no code broken.. I understand that sometimes long strings cannot be fixed because there is\nno straightforward way to do it that would satisfy everybody.\nBut here we have a plain comment, an English sentence where the words are\ndivided by spaces. It can be broken at any space just before the line size\nlimit. This shouldn't be hard at least to make a fair attempt.\nI am working on huge inherited codebase, so I am surprised that relatively\neasy fix has not been implemented.\nOf course I can write a python script to easily handle the whole codebase.\nOn Mon, Mar 12, 2018 at 8:39 AM, Tommy Carpenter notifications@github.com\nwrote:\n\nI believe this was a won't fix, unless this has changed: #39\nhttps://github.com/hhatto/autopep8/issues/39\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/hhatto/autopep8/issues/383#issuecomment-372354647,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/Aifsa_SFUxHDqRuUC5n2jdh4R-vco2u4ks5tdpazgaJpZM4SjD-R\n.\n\n\n-- \nIrving Rabin, Software Guy Say Say K, Inc https://www.saysayk.com/\nirvingrabin@saysayk.com 408-242-1299\n. Folks, looking back - it is a very unfortunate decision by developers.\nFirst, pep8 and pycodestyle report all the errors.\nSecond, autopep8 is not expected to produce ideal solution for all cases. Having git showing all the changes one may simply run autopep8 to fix all code, making it immediately compliant and equivalent to the source, then come back and fix whatever is done in sub-optimal way.\nDefinitely long comments could be broken in just any place to make code compliant and equivalent.\nA little more intelligence - find a space closest to the boundary and if it is within, say, 10-15 characters from the border, break right there.\nWe often inherit legacy codebases where nobody cares much about most of old comments, so having autopep8 being really AUTO would definitely make a difference - with negligible risks.. ",
    "ddmee": "You could work out whether the string is a comment. For docstrings in python, we normally use triple quotes to surround the docstring. You know it's a docstring because the string isn't assigned to a variable and no operation is performed on the string.\nSo the solution is to:\n1) Notice that the string is not operated on/not assigned to a variable. Therefore, it's a docstring or at least a string that no logic is performed on. Then just autostyle this to the line limit length.\n2) IF it is a string to a variable or operated on, then use pythons implied continuation of strings. Break the string at the line limit and put the rest of the string the next line. python will automatically connect the two together. E.g.\nThis code is\npython\ny = \"this is a super long sentence to test the character limit of defining a variable that exceeds atleast 80 characters and see if this is taken care of autopep8 and what changes it does\"\nEquivalent to this code\npython\ny = \"this is a super long sentence to test the character limit of defining a variable\"\n    \"that exceeds atleast 80 characters and see if this is taken care of autopep8\"\n    \" and what changes it does\". ",
    "StephaneBunel": "Thx for the workaround. But as Python2 is yet largely deployed, do you plan any better solution ?\n. ",
    "joroy": "Bugfix work fine. Just need an update on pypi server now.\n. ",
    "rubik": "What does that mean? Can you elaborate a bit more?\n. See #39.\n. I tried and autopep8 finishes without errors. Could it be that I have cloned the repository and I have the last revision?\n. > I have the same problem,\nWhat same problem? Here it works.\n. That's weird. I'm on 2.7 too and I'm not getting the error! \n. ",
    "jkeesh": "django app south (which is really commonly used to manage migrations http://south.readthedocs.org/en/latest/about.html ) automatically generates python files to describe the migrations. however, these are not pep8 compliant (lines too long), and i wanted to try using autopep8 on them.\n. By failed, I mean not getting formatted. Here is a section of an example:\nBefore and After\n\nmodels = {\n    'auth.group': {\n        'Meta': {'object_name': 'Group'},\n        'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n        'name': ('django.db.models.fields.CharField', [], {'unique': 'True', 'max_length': '80'}),\n        'permissions': ('django.db.models.fields.related.ManyToManyField', [], {'to': \"orm['auth.Permission']\", 'symmetrical': 'False', 'blank': 'True'})\n    },\n    'auth.permission': {\n        'Meta': {'ordering': \"('content_type__app_label', 'content_type__model', 'codename')\", 'unique_together': \"(('content_type', 'codename'),)\", 'object_name': 'Permission'},\n        'codename': ('django.db.models.fields.CharField', [], {'max_length': '100'}),\n        'content_type': ('django.db.models.fields.related.ForeignKey', [], {'to': \"orm['contenttypes.ContentType']\"}),\n        'id': ('django.db.models.fields.AutoField', [], {'primary_key': 'True'}),\n        'name': ('django.db.models.fields.CharField', [], {'max_length': '50'})\n    },\n. ah i see. however, it seems like the discussion there is that people are worried that an automatic fix  might actually change the functionality of the code. it seems to be a common request... maybe something that you can consider as a command line option instead of part of the basic functionality. \n. ",
    "nomadali": "+1\n. I think your solution would help as long as it sets the indentation of the new line equal to the one that it is breaking from. Would it though ? \n. ",
    "stefanmohl": "I have a good use case: Documentation strings. They are a bother to clean up and re-format manually when you change them.\n. Great! Now I have simply pipelined docformatter after autopep8, and my problem is solved! Thanks!\n. ",
    "kryskool": "Hi\nI had pdb.set_trace() in function detect_encoding()\n\n/home/alncchau/tmp/autopep8/autopep8.py(75)detect_encoding()\n-> try:\n(Pdb) n\n/home/alncchau/tmp/autopep8/autopep8.py(77)detect_encoding()\n-> try:\n(Pdb) n\n/home/alncchau/tmp/autopep8/autopep8.py(78)detect_encoding()\n-> with open(filename, 'rb') as input_file:\n(Pdb) n\n/home/alncchau/tmp/autopep8/autopep8.py(79)detect_encoding()\n-> encoding = tokenize.detect_encoding(input_file.readline)0 n\nAttributeError: \"'module' object has no attribute 'detect_encoding'\"\n/home/alncchau/tmp/autopep8/autopep8.py(79)detect_encoding()\n-> encoding = tokenize.detect_encoding(input_file.readline)0 n\n/home/alncchau/tmp/autopep8/autopep8.py(88)detect_encoding()\n-> except (SyntaxError, LookupError, UnicodeDecodeError):\n(Pdb) n\n/home/alncchau/tmp/autopep8/autopep8.py(90)detect_encoding()\n-> except AttributeError:\n(Pdb) n\n\nThe problem seem \nAttributeError: \"'module' object has no attribute 'detect_encoding'\"\npython --version\nPython 2.6.5\nRegards,\n. And yes i have coding utf8 in the first line\n. See http://pastebin.com/jEMFL8Jh\nRegards,\n. Yes i the last revision (i create a fork on my account https://github.com/kryskool/autopep8 )\nI create a virtualenv (python 2.6.5) and execute python setup.py install\nI have the same problem, \nI see the function detect_encoding doesn't exist in tokenize, and the exeption return 'latin-1', maybe the problem \n. Hi Dimitri\nThanks for the answer, i check with file command\nfile test/french_accent.py \ntest/french_accent.py: UTF-8 Unicode Java program text\nFile is detect as UTF-8, but as Java program :(\nIf i use hexdump \u00e7 and \u00e9 take 2 bytes \n```\nhexdump -C test/french_accent.py \n00000000  23 20 2d 2a 2d 20 63 6f  64 69 6e 67 3a 20 75 74  |# -- coding: ut|\n00000010  66 2d 38 20 2d 2a 2d 0a  23 20 46 72 65 6e 63 68  |f-8 --.# French|\n00000020  20 63 6f 6d 6d 65 6e 74  20 77 69 74 68 20 61 63  | comment with ac|\n00000030  63 65 6e 74 20 c3 a9 0a  23 20 55 6e 20 63 6f 6d  |cent ...# Un com|\n00000040  6d 65 6e 74 61 69 72 65  20 65 6e 20 66 72 61 6e  |mentaire en fran|\n00000050  c3 a7 61 69 73 20 61 76  65 63 20 75 6e 20 61 63  |..ais avec un ac|\n00000060  63 65 6e 74 20 c3 a9 0a  0a 0a 69 6d 70 6f 72 74  |cent .....import|\n00000070  20 74 69 6d 65 0a 0a 70  72 69 6e 74 20 74 69 6d  | time..print tim|\n00000080  65 2e 73 74 72 66 74 69  6d 65 28 27 25 64 2d 25  |e.strftime('%d-%|\n00000090  6d 2d 25 59 27 29 0a                              |m-%Y').|\n00000097\n```\nRegards,\n. Hi\nThanks, i just test and it's works correctly\nRegards,\n. ",
    "salimane": "I just got the same error for one of my files so found this issue. I've also tried http://pastebin.com/jEMFL8Jh with the same results (): \n```\n python --version\n Python 2.7.3          \nautopep8 --version\n autopep8: 0.8.1\nautopep8.py french.py\n /usr/local/lib/python2.7/dist-packages/autopep8.py:1488: UnicodeWarning: Unicode equal comparison failed to  convert both arguments to Unicode - interpreting them as being unequal\n if fixed_source == tmp_source:\n 'ascii' codec can't decode byte 0xc3 in position 53: ordinal not in range(128)                                                                          \n```\n. ",
    "dimitri": "Using Emacs when I type \u00e9 in unicode, here's what I get from C-u C-x =:\ncharacter: \u00e9 (displayed as \u00e9) (codepoint 233, #o351, #xe9)\n    preferred charset: unicode (Unicode (ISO10646))\ncode point in charset: 0xE9\n               syntax: w    which means: word\n             category: .:Base, L:Left-to-right (strong), c:Chinese, j:Japanese, l:Latin, v:Viet\n             to input: type \"e'\" with french-dim-postfix\n          buffer code: #xC3 #xA9\n            file code: #xC3 #xA9 (encoded by coding system nil)\nI think your file actually contains latin1 rather than unicode here, but maybe I should finish warming up.\n. Aha, I said I needed to warm up :) So your error message talks about ansi codec and 0xc3 which is the first unicode byte. Time to import codecs maybe?\n. ",
    "wrygiel": "BTW, I have the same problem with Polish characters (\u0105\u0107\u0119\u0142\u0144\u00f3\u015b\u017a\u017c\u0104\u0106\u0118\u0141\u0143\u00d3\u015a\u0179\u017b - didn't check which one causes the errors). After running autopep8.py -r --in-place some of my files end up empty and I get similar warnings. All files start with # -*- coding: utf-8 -*- line.\n. I just noticed that I seem to get these errors only when I use --in-place.\n. No more warnings. Works fine :) Thank you!\n. ",
    "reorx": "@myint Yes, there was the same encoding declaration in my code, have you tried and got different result ?\n. @myint It gives me this:\nbash\n$ file sample.py\nsample.py: UTF-8 Unicode text\nMy code is:\n``` python\n-- coding: utf-8 --\nprint '\u4e2d\u56fd'\n```\nMy environment:\n``` bash\n$ python --version\nPython 2.7.3\n$ autopep8 sample.py \n/home/reorx/Envs/Python/virtualenvs/PLAY/lib/python2.7/site-packages/autopep8.py:1488: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal\n  if fixed_source == tmp_source:\n'ascii' codec can't decode byte 0xe4 in position 32: ordinal not in range(128)\n```\n. Well, I have got the answer.\nI actually used a version that equal or higher than commit 5c51a79 version bump and lower than commit 2cc2bb0 Open file with proper encoding on Python 2.\nCommit 2cc2bb0 is a milestone because it make important changes on string encoding.\nBefore 2cc2bb0, in about line 1478 of autopep8.py:\npython\n    for _ in range(opts.pep8_passes):\n        if fixed_source == tmp_source:\nSince tmp_source is unicode and fixed_source is str, the comparison between them cause a problem similar to this one\nBut this issue had been fixed in commit 2cc2bb0, both fixed_source and tmp_source are unicode before they compare.\nSo what I encountered is a might be revealed issue which was caused by the out-dated pypi package (I install it through pip install autopep8).\nThanks for resolving and your queries taught me to give detailed information as much as problem when reporting an issue :)\n. ",
    "andras-tim": "Thank you for merge, and sorry for my mistake (what you fixed in 5786d5ecd0a4c77fb95f76e371e66901c3fc7f1e )\n. ",
    "pymen": "i will be only if i change output to some file except sys.output\n. version 2.7 , i tried to ouput by \nc:\\Python27\\python.exe c:\\Python27\\Lib\\site-packages\\pep8.py \"D:\\test\\6.00\\ProblemSet5\\test_exit.py\" > \"C:\\output.txt\", and also changing output in file autopep.py\n. I took code from here https://raw.github.com/hhatto/autopep8/master/autopep8.py\nbut nothing changed in output , it adds additional lines\n```\ndef init(self, name, age, pay=0, job=None):\nself.name = name\n\nself.age = age\n\nself.pay = pay\n\nself.job = job\n\n```\n. here it is\nhttp://pastebin.com/ZuwKgc1X\ni used it like this: python.exe c:\\Python27\\Lib\\site-packages\\autopep8.py \"c:\\Python27\\Lib\\site-packages\\31.py\" > \"c:\\Python27\\Lib\\site-packages\\32.py\"\n. python.exe -v c:\\Python27\\Lib\\site-packages\\autopep8.py \"c:\\Python27\\Lib\\site-packages\\31.py\" > \"c:\\Python27\\Lib\\site-packages\\32.py\"\nhere is result: http://pastebin.com/Pqkgtrut\n. C:\\Python27>python.exe c:\\Python27\\Lib\\site-packages\\autopep8.py -vvv \"c:\\Python\n27\\Lib\\site-packages\\31.py\"  1>\"c:\\Python27\\Lib\\site-packages\\32.py\"\n[file:c:\\Python27\\Lib\\site-packages\\31.py]\n--->  27 issue(s) to fix {'E221': set([35]), 'E301': set([8, 10, 19]), u'E231':\nset([19, 17, 18, 3]), 'E302': set([16, 2]), 'E701': set([39]), 'E225': set([34,\n4, 5, 6, 7, 20])}\n--->  17 issue(s) to fix {u'E231': set([24, 5, 22, 23]), 'E225': set([6, 39, 8,\n9, 7, 25]), 'E301': set([24])}\n--->  7 issue(s) to fix {u'E231': set([5, 22, 23]), 'E301': set([24])}\n--->  3 issue(s) to fix {u'E231': set([5, 22, 23])}\n--->  0 issue(s) to fix {}\nC:\\Python27>pause\n\u0414\u043b\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u043d\u0430\u0436\u043c\u0438\u0442\u0435 \u043b\u044e\u0431\u0443\u044e \u043a\u043b\u0430\u0432\u0438\u0448\u0443 . . .\n. Yes, with -i option everything is ok! \n. Hi! What you mean by original code? This is part of code (minimized) that i tried to use with autopep8. \nI have installed autopep8 using pip install. \n\nautopep8 --version\nautopep8 1.0.2\n\nautopep8 doesn't do anything to it.\nyes, is this expected or not?\n. \n\n",
    "lxneng": "Cool!~  can you release a new version to PyPI?\nThanks!\n. Thanks!\n. ",
    "ionelmc": "Wow, I feel kinda silly now (maybe the editor didn't reload me the code and I got confused) ... sorry for wasting your time.\n. ",
    "markusbaden": "Thanks for the quick reaction. I like the second commit a lot, because as you say now if I select a specific issue only this issue get's fixed. For completeness being able to select the non pep8 fixes would be cool as well. Maybe this could be done by giving them fake error codes\n. ",
    "thisch": "Here is an example which still does not get fixed by autopep8\n``` py\n!/usr/bin/env python\ndef test(tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, tmp8, tmp9, tmp10, longlongtmp12356):\n    pass\n```\n. any idea why it did not return ?\n. It has to do with the check for a line containing a decorator. This somehow causes an infinite loop... I'll try to push a fix asap.\n. ",
    "hayd": "You're right, this doesn't occur when fixing only ja.py, sorry about that. (What I said about autopep8 -r -iv sphinx/ passing nosetests appears to be incorrect, it doesn't.)\nThis occurs when fixing the entire directory.\nautopep8 -r -iv -p 2000 sphinx/\n(My md5sum for ja.py becomes 491c47a0dba823828b2cc9e85d03890e.)\n(This also fails when not passing 2000 times)\nUsing python 2.7.\n. So the \"standard\" would be in project: tox.ini, setup.cfg (or depreciated .pep8), or user setting from .config/pep8 (system dep)? That's the logic that pep8 uses: https://github.com/jcrocholl/pep8/blob/master/pep8.py#L69\nNot sure if we would just add autopep8 specific things under [pep8] or do they need to be in sep subsection.\nWas thinking about this on pep8radius: https://github.com/hayd/pep8radius/issues/30, i think it would be really nice.\n. I just had a crack at implementing this for pep8radius: https://github.com/hayd/pep8radius/pull/71, seems to work, and I think the same solution should basically paste here.\nIt would be great if anyone could try it out/take a look and see if I'm doing the right thing (if it is happy to put a PR for here) i.e. behaviour-wise. See this issue: https://github.com/hayd/pep8radius/issues/72\n. I think that pep8 does the following (which is slightly different):\n- if you pass --config it uses the global DEFAULT_CONFIG file or one you pass - actually it's not clear to me if that's what it does since (config parser) doesn't raises if you pass it junk.\n- in all cases it then updates with local config (regardless of if global was used)\nThat is, even if you pass it a config file it updates with your local config file (which seems wrong to me)...\nWe can use same machinery to find the root/local config: https://github.com/jcrocholl/pep8/blob/4c5bf00cb613be617c7f48d3b2b82a1c7b895ac1/pep8.py#L1838-L1845.\n. Please do check out the PR, and see if this works for you. :)\n. I'd really like to keep it - it's the key ingredient in pep8radius! :)\nI'll have a poke around for 2 (hopefully it doesn't need to be invasive)... if I see a neat solution I will PR.\n. The good news is that line_range is mutable, so potentially this can just be incremented when the lines increment or where they are stuck back together... not quite sure where yet. I think that should mean recursing ought to  work.\n. Pretty sure I have a fix for this, I don't think it's invasive.\nWill see what other things I come across. :) Thanks for autopep8!\n. Ah thanks for the pointer! I have a few tricks up my sleeve here... meaning we can partially apply some of these global fixes.\n. @myint am I correct in saying that the only lines which can possibly cause \"secondary continuation\" are elif, else, except?\nThis is a little fiddlier than I anticipated, maybe I'm thinking about it the wrong way...\n. @myint I think it's possible, but definitely the tricky part... you need to look ahead at the next indentation and reason about it. I have a partial solution.\n(Basically lookahead, and if reindenting would break syntax/change semantics, then don't do it (maybe print a warning?)... the game is to fix as much as you can which is independent and in the range.)\nSo the question was, can the middle/last block only be elif, else or except: answer I had forgotten: finally http://docs.python.org/3/reference/compound_stmts.html.\nThis should allow a solution, again there is some hoop jumping with line numbers...\n. When I was working on this yesterday I was sure that there was an existing function to get the source to form where lines are separated by \"meaning\", but I can't find it now:\nif True:\n  (1, \n    2)\n  3\nwould become: ['if True:', '(  1\\n     2)', '  3']. Hopefully will find it and I wasn't making it up.\nIf I have that, I have a solution that just pass off to Reindenter if it won't break syntax; it's actually is not too hairy.\n. Great! these simplify things somewhat, have a fix for this, just to add a few tests. PR in the next couple of days.\n. @myint Thanks, I've rebased my commits on top of that.\nQuite a few say autopep8 did not completely fix (as expected). ~~Had just one indentation issue potentially on email.__init__ (for range 1-10)... Hmmm.... Does acid make changes to these files in place? (if not then it could be that my local version of email.__init__ was just garbage... it doesn't look like valid python.)~~\nIs there a way to get less noise from the output (so that I can leave it running on some ranges and see what's failed (if anything)?\n. Thanks!\n~~Wowza, this is a real test failure, it seems that an entire line is removed in that file (def message_from_string(s, *args, **kws))... this is due to my assumption that reindent did not change the number of lines, apparently in this case - reindent removes a line! I'm also shocked that python does not raise when slicing like this. :s~~ fixed\n. ~~There is an edge case (which I began a fix for, but is tricky so haven't fixed yet) where the last line is continued over several lines... The problem is that global fixes can add and remove lines, so that you lose track of where you're last_line is (I have started a fix but it a little tricky).~~ fixed.\nSeems to pass acid tests with some random numbers as the range.\n. @myint This now passes tests and is ready for review. If you wouldn't mind taking a look!\nI've tried random passes of acid and it doesn't seem to break any code (it did before the last set of fixes, I added tests to reflect these cases)...\n. Thanks for the comments, I'll merge your branch into this one. and address the points you bring up.\nHmmm, good spot re the bug above, that sucks. Will have a think about this...\n. The issue is that I'm just \"re\"indenting all the lines in the (partial) range (when I only indented the start_lines), I think that reindenting all the lines except strings is the correct behaviour.\nSo it's \"just\" a case of determining if a given \"middle\"-line is part of a string... Possible this could just be done by counting \"\"\", ''', ', \" pairs (keeping track of current string start)... with annoying \\ considerations.\nI wonder if there's something already existing in the codebase I ought to be using, maybe ~~ReformattedLines~~ the continued_indentation function (not sure how to use it though)? I could be that I can apply back indentation only to start lines then reapply this function...?\n. That's great, thanks! I think this gets me all the way there!\nI think I've addressed your other comments (pushed a commit), more comments are welcome!\n. (travis is erroring, not sure why, tests pass locally.)\n. (I guess that answers my next question, which was: when are you planning the next point release - presumably v. soon!)\nPerhaps it's worth installing a travis build against pep8's master...\n. thanks for your help reviewing this!\n. Are you planning a point release soon?\n. small ping to ask if things are settled? :)\n. Awesome, thanks!\n. Hmmm... that's a neat trick! :)\nI guess not really, but this is such nice behaviour it would be great to have by default... (though I'm not sure whether cdiff supports windows actually.) I was hoping it would just be a simple call when/instead of printing the diff (but I can't see any obvious way to do it).\n. This is actually relatively easy (I do it in pep8radius), the trick is to make sure you apply the fix over reverse sorted line numbers i.e. up the document.\n. Actually doing this within autopep8 would be worthwhile if it could mean parsing/doing the splitline and pep8 for the document only once. I think the tricky part of this is updating _fix_source to pick up on updates in line_ranges i.e. must increment if new line added (fixing apply_local_fixes is straightforward).\nUpdate: As I say, I don't think it's worth being in autopep8 proper until it can be done more efficiently... but until then a light-weight wrapper for this is pep8radius.fix_code or pep8radius.fix_file (from 0.9.1). see https://github.com/hayd/pep8radius#as-a-module. You can also pass a diff see pep8radius.Radius.from_diff or pipe diff using CLI.\n. > what happens if the user wants to point to a file named False?\nIf they have a file named False it'll read that (there is no test for False). Happy to change with your edit!\nOk, I think what pep8 does (I hadn't actually got it before, and tbh still not 100%):\n- if you pass config file (as user_config)\n- else you don't pass config (then user_config=DEFAULT_CONFIG)\n- if user_config is a file then it updates parser with user_file\n- updates parser with local configs (same parent logic I have here)\n- updates with passed in arguments\nIt is different... personally I think this is a bit confusing and should be some way to not use local configs...\nCompares to this PR:\n- If you pass in config file (as user_config), update parser with that.\n- Elif you have local configs, update parser with that.\n- Elif you have DEFAULT_CONFIG, update parser with that.\n- Else, just use defaults.\n. Trivial to tweak behaviour, just need to decide what's best :)\n. Thanks!\nNow I think about it, perhaps the pep8 way is the right way (even though there's no way to ignore local configs, I think that you almost always want to use the locals - although this could hide behind a flag e.g. --ignore-local-config). In fact, since this means the path is always to your \"global config\" file so perhaps --global-config is better arg name! ...\nSooo this would be (instead of --config), and I've updated PR with this:\n- if --global-config use this path as global_config\n- else set global_config to DEFAULT_CONFIG (often ~/.config/pep8 but dependent on system)\n- update parser with global_config (if file is missing this does nothing)\n- unless --ignore-local-config passed then update parser with local config (found with parent-tail)\n- update with passed in arguments\nAlthough different API to pep8 (and pep8radius, although I will update to match autopep8), I think this has the benefit of being much more explicit in what it does.\nAgain, happy to hear what people think.\nAlso, worth mentioning this is an API change, so not sure what you think about that re release.\n. I'm going to go ahead and push the commit with the behaviour described above here as I think this best covers @acdha's original issue... and I think it makes it the API a lot clearer.\nEdit: This commit passed cleanly a couple of days ago, looks like something's broken from pep8 git.\n. @myint any thoughts on merging?\n. Thanks very much for the comments!\n. > But that will start causing problems if we ever add another option that starts with --g. \nThese will immediately be caught in the tests, and trivially updated, so is actually a non-issue. (--ignore-local-config should be --ig... no conflict.)\nI understand your concerns however will have another look at pep8...\n. @myint H'ok, looks like what pep8 does is just parse_args twice (I think I knew that but had used the other approach). Updated, there's no manual args passing now.\n. I removed _main and was surprised to find this only led to a single test failure, which I changed to use --global-config=/dev/null. I also removed all the pragma: no covers (as discussed above).\nPlease let me know what you think! Thanks!\n. Fab! Sorry just went ahead and removed all the pragmas (apologies for the misunderstanding), too trigger happy!\n. Thanks for merging!\nIf user has their own .pep8 in autopep8 it'll be removed...\nGood point about parallel testing, unclear from the docs if/how the ParseArgsTests class can be marked to mean it runs by itself and not in parallel. Note: another issue with running in parallel is that the test I modified should also use --ignore-local-config flag. :s\n. @myint Thanks for your big clean up effort after this!\n. @myint is this a bug (should this indentation be fixed by autopep8?):\n```\nIn [11]: t = 'if True:\\n    if True:\\n            # bah\\n        pass\\n'\nIn [12]: print autopep8.fix_code(t)\nif True:\n    if True:\n            # bah\n        pass\n```\n(fixing this would fix this issue... in a kindof silly way)\n. @myint  Do you know if there is a way to get the comment lines? (analogous to multiline_string_lines)\nIMO you always want comments to indentation of the succeeding line... :s\n. Isn't it raising E122?\nIn [20]: pep8.Checker('', lines=t).check_all()\n:2:1: E122 4\n:3:1: E122 4\nOut[20]: 2\n. @myint I posted on pep8, not sure if there is anything in the PEP itself about comment indentation (though IMO comment lines should match the subsequent non-empty line).\nI have a patch that fixes this at least for the above, which I think is the most common usecase, for the line range case (hmmm patch is a little hacky... in fact it's so hacky that pyflakes fails it!) \n. Thanks for merging!\nDo you think the example without range should be sep issue? (could it be something solveable with continued indentation?)\n```\nIn [11]: t = 'if True:\\n    if True:\\n            # bah\\n        pass\\n'\nIn [12]: print autopep8.fix_code(t)\nif True:\n    if True:\n            # bah\n        pass\n```\n. > Will this still be necessary if the not-flagging problem gets fixed in pep8?\n~~No, at least I don't think so, once/if it's fixed in apply_global_fixes.~~ Edit: Actually I think yes.\n. Are you suggesting autopep8 should fix the example I gave above? By making up E... \"underindented docstring\" and providing a fix?\nActually I've just thought that this wouldn't solve the range case, I think we do need to unindent the whole docstring (as in this PR), for example this valid docstring:\npython\ndef f():\n  \"\"\"\"A docstring\n  with something\n      purposely over indented 4 additional spaces\n  \"\"\"\nIf relying on E... then the 4 additionally indented line will not be reindented,\npython\ndef f():\n    \"\"\"\"A docstring\n    with something\n      purposely over indented 4 additional spaces\n    \"\"\"\nwhich is incorrect. ?\n. @myint I think I have to take back that claim, this workaround is essentially required due to the unfixable example above.\n. Definitely some crazy indentation stuff going on here, thanks for finding! (if/elifs too)\nI confirm result of this test (on master and range_comments branch), though without aggressive this example it looks like it works correctly. I confess to not having tested anything with aggressive. Will look into this later in the week.\n. @myint one thing that's strange is the sorted replacement above. I can't see that when not using range at all! Any tips on debugging this (on where this could be coming from)?\nNot sure yet if these aggressive fixes are in the first sweep, or the second (which uses line numbers)... strange they act differently.\n. I put it up as a gist.\nSo you can test with:\n```\nfrom autopep8 import fix_code, parse_args\nimport requests\ncode = requests.get(\"https://gist.githubusercontent.com/hayd/2d4a22e1854683c9c72d/raw/1641824237cba91fa6b6232786f77b7a98a93c6c/inspect.py\").text\nargs = parse_args([''])\u00a0# I'm not sure what you're suppose to here, I often get SystemError\nargs.line_range=[550, 610]\nfix_code(code, args)\nyou can see the diff with\nfrom pep8radius.diff import get_diff, print_diff\nargs.line_range=[550, 610]\nprint_diff(get_diff(a, autopep8.fix_code(a, args), \"inspect\"))\n```\n\nAside: I thought this used to work:\nIn [11]: autopep8.parse_args(['--range 1 10'])\nOut[11]: Namespace(aggressive=0, diff=False, exclude=[], experimental=False, files=[u'--range 1 10'], global_config=u'/Users/andy/.config/pep8', ignore=set([u'E24']), ignore_local_config=False, in_place=False, indent_size=4, jobs=1, line_range=None, list_fixes=False, max_line_length=79, pep8_passes=-1, recursive=False, select=u'', verbose=0)\n. Should things like the following reduce the number of lines?\n```\nautopep8.fix_code(\"\"\"\nA = [1, 2,\n3, 4]\"\"\")\n```\nI struggle to find examples where the lines are reduced.\nI'm kinda surprised that this would be an issue as the lines are being iterated in reverse (IIRC), and that there isn't a smaller example to show this error. I'm not sure a good way to debug this right now.\nThe len()==.. does not solve it as you can get an edge case where these would be equal (where some lines are also added). That is not a fix.\n. Excellent! Thanks for the example, will check it out! (Hmmm weirdly I can't reproduce this!!)\nRE the line numbers if you have something like:\nif False:\n    pass\na = []\na.sort()\nif True:\n    # 2343\n    a = []\n    a.sort()\nelse:\n    # 2343\n    'something really really really really really really really long' + 'something or other'\n    pass\nThat is, the returned subsource and original subsource will be the same length (even though it hits the criteria we think may trigger this). Like I say, I can't reproduce! :(\n. Just running verbose I see it has an E112 (comment is not indented correctly)... but there are no comments!! I don't see how but it looks like fix_e112 removes the left space which then bubbles up to deindenting (as the deindent code assumes the indent to be the same - which it should be at that stage!!!).\n% ./autopep8.py --diff ~/autopep8/foo.py -aaaa --range 1 5 -vvv\n[file:/Users/andy/autopep8/foo.py]\n--->  Applying local fix for E265\n--->  Applying local fix for W602\n--->  Applying local fix for E265\n--->  Applying local fix for W602\n--->  1 issue(s) to fix {'E112': set([6])}\n--- original//Users/andy/autopep8/foo.py\n+++ fixed//Users/andy/autopep8/foo.py\n@@ -1,7 +1,6 @@\n-a = []\n-a.sort()\n+a = sorted([])\n if True:\n     a = []\n     a.sort()\n-else:\n+    :\n     pass\nI haven't a fix yet... but hopefully I can get one.\nIt's very finicky, the fact you can add a couple of lines at the end and it completely changes the behaviour (no e112 is found) is weird. Just because I can't come up with an example doesn't mean there isn;t one though!!\n. @myint do you know what function/where this sorted replacement is happening? An alternative soln, which would fix this particular case, would be to replace it with a blank:\n['', 'sorted([])\\n', ...]\n(so the length of source remains the same with the replacement).\n. I'm pretty sure this is a logic bug from assuming there are no line changes when doing lib2to3, what I think you can do is immediately end the pass if the line changes after lib2to3 (rather than completely abort).... alternatively it may be possible to fix up the borked numbers which cause this.\n. @myint Why's this closed and the tests deleted?? I'm still hoping to fix this up before autopep8 release!\n. The reason it's slow is that each pass can only add one space (one e225 fix) at a time.\nI wonder if the solution is to group e225s as a list of columns (and maybe sort them column-wise) so as to fix them in a single pass. However this feels very special casey.\n. fantastic! thanks\n. @myint this also could be a typo (the superfluous pep8).\n. This isn't tested as user may have this non-empty, I can do this and skip the test if DEFAULT_CONFIG is present. (which works.)\n. if we wanted to match pep8 behaviour (I think, IIC pep8) we need only remove this if/else block and change this to config.read(config_file or DEFAULT_CONFIG).\n. This is so that when testing apply_config is not used, as that calls main, but when using autope8 from the command line it is. Happy to do something different if you have a cleaner solution!\nEDIT that is (if this makes any sense) for this line: https://github.com/hayd/autopep8/blob/a7b08cced302e7384e8575a9108c4efe21865d27/setup.py#L60\n. Usually with lines like this you don't want this to affect your coverage (as you know that it's not going to be hit by python 2). I see you don't have a .coverage file with this so this doesn't actually do anything. Happy to remove.\n. Dang, good catch.\nThe issue is that this needs to be caught before hitting the parser: in an earlier implementation on pep8radius I just used a dummy parser to grab just this arg, the issue was that this takes over e.g. autopep8 --help will only explain the dummy parser (as it parses first).\n. Actually --global-config-wrong will be caught in the next stage (when the arguments are actually parsed).\nI had not realised that even --g foo works... is this too inelegant for you?\nfor i, arg in enumerate(arguments):\n        if arg.startswith('--g'):\n            if '=' in arg:\n                config_file = arg.split('=', 1)[1]\n            elif i + 1 < len(arguments):    # NOTE I EDITED THIS\n                config_file = arguments[i + 1]\n            else:\n                config_file = ''\n            return os.path.expanduser(config_file)\nNote: currently --g is the minimum argparse requires to complete to --global-config, this could change if a new arg (beginning with g) was added, however if this happens it will be caught in the tests.\n. Interestingly this isn't the only pragma: no cover in the code base, we should probably add a .coveragerc file and do the same for the few other imports like this (at least IMO).\n. Ah, I didn't realise the results over coveralls were combined.\n. will add a test case, maybe should be include_docstrings=True !\n. The problem is that docstrings must be mutated. Since autopep8 doesn't fix things like this:\npython\ndef f():\n  \"\"\"docstring\ncontinued with less/no indent\"\"\"\n    pass\nObviously in autopep8 proper you instead want to use docformatter to fix that, BUT when removing the indent on start_lines (in line-range) you end up in state like the above (even though the original source had properly indented docstrings). I put in a test and a fix, but annoyingly it requires another mutli_string_lines call.\n. @myint ^autopep8 doesn't fix the docstring correctly, it makes it (indenting the second line by the difference):\npython\ndef f():\n    \"\"\"docstring\n  continued with less/no indent\"\"\"\n    pass\nwhich I think is fine (fixing a malformed docstring is the role of docformatter).\nHowever, we need to be able to fix something like the following (test case) on a range:\npython\ndef f():\n  \"\"\"docstring\n  continued\"\"\"\n  pass\nas it is correctly indented when using autopep8 proper.\nHope that makes sense (I've pushed an update + test)!\n. Yeah sure (I had copied the test cases structure from elsewhere in test_autopep8, possibly from the range test cases I wrote).\n. I expanded the larger one, there are many many tests in that area of test_autopep8 that could be expanded (the --range tests were copied from the tests above), I'd like to fix that in a sep PR.\n. ",
    "tomscytale": "now uses '-' instead of --stdin\nit doesn't leave a temporary file behind - if you check the [tmpfile docs][http://docs.python.org/2/library/tempfile.html#tempfile.TemporaryFile] you'll see that \"It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected).\" Thus the file is destroyed during the final GC run at exit() - i've checked this. \nas for the emacs wrapper - i've removed it , sadly. I do think it's a good fit - since it enhances the usefulness for autopep8 for a large body of developers. It's not really big enough to warrant it's own repo - i may just put it in a gist. I would point out that in the age of github no one would expect you to maintain it yourself - that's what git pull is for :-)\n. ",
    "peritus": ":kissing_cat: \n. By \"looks\", do you mean the API or the output ? Output is highly configurable.\n. most likely log4j-porting never made pythonic ;)\n. No, I don't think using the logging module fixes this problem per se. However, on my machine\nhttps://github.com/hhatto/autopep8/blob/master/autopep8.py#L718\nif self.options.verbose >= 4:\n            print(('-' * 79 + '\\n').join([''] + candidates + ['']),\n                  file=sys.stderr)\nfails if candidates contains UTF-8 characters that are tried to be encoded as ASCII (as should be in the file in Django's tree above)\nI'm on autopep8 0.8.7 and Ubuntu 12.04.\n. thanks for fixing this so quickly!\nwhat happens in the (solution 1 -> solution 2 -> solution 3 -> solution 1) case ? the file isn't completely formatted, then, right ? should the user know about that case instead ?\n. You're right: At least it's deterministic, that's all I care about ;)\nhttp://www.faqs.org/docs/artu/ch11s09.html\n. Works:\n$ bin/pep8 --version\n1.4.6a0\n$ bin/autopep8 --version\nautopep8: 0.8.7\n$ cat nested.py\ndictonary = {\n    \"is\": {\n    \"nested\": yes(),\n    },\n}\n$ bin/autopep8 nested.py\ndictonary = {\n    \"is\": {\n        \"nested\": yes(),\n    },\n}\n. @okcompute you can use three backticks (as in ```) to get the formatting right (see https://help.github.com/articles/github-flavored-markdown).\n. ",
    "tkruse": "Also: \n$ echo 'raise MultiProjectException(\"Ambiguous workspace: %s=%s, %s\" % ( varname, varname_path, os.path.abspath(config_filename)))' | autopep8 -\nraise MultiProjectException(\"Ambiguous workspace: %s=%s, %s\" % (\n    varname, varname_path, os.path.abspath(config_filename)))\nI think I'd prefer the open brackets after the formatting operator % to be on the next line here, but others might disagree.\nBTW: Nice tool.\n. ",
    "ymattw": "Thanks, output looks better than I expected.\n. ",
    "xhacker": "I wrote a snippet to demonstrate this.\n``` python\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup('</div')\ndiv = soup.select('div')\nprint div[0].has_key('class')\nprint 'class' in div[0]\nprint div[0].has_attr('class')\n```\nhas_attr() is newly added as a replacement of has_key().\n. Thanks a lot, I understand now.\nSo this is a 2to3 issue? If something is not a dictionary, it shouldn't do such a transformation.\n. Confirmed. I tried this snippet:\n``` python\nclass Person():\n    def has_key(self, room):\n        return 'He has the key.'\njohn = Person()\nprint john.has_key('bathroom')\n```\nAnyway, it's not a autopep8 issue.\nThanks for your help. :)\n. ",
    "pokidovea": "Oh, sorry. It is not for you. It is for ST2 plugin, that uses your library. \n. ",
    "coveralls": "\nCoverage remained the same when pulling c8c1a5791915f0e86207646074fba919055ebeac on iguananaut:sigpipe-win32 into c9a99fd07523e890ef9ecdba796418a3c21ba4bb on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 40d4463f7f23bd90f9c95995a25dd88254ea791d on chrismedrela:issue88 into 58b8855edb02118c371b94f7337d49b47c27268e on hhatto:master.\n. \nCoverage decreased (-0.04%) when pulling 3506b8ab9fd9f47264a1e4c38dec20b25833e789 on agroszer:master into ad09bdb79529e4282d60e25a5abb90b61e76feae on hhatto:master.\n. \nCoverage decreased (-0.17%) when pulling 69ed45cb05215b1c9abde2b3eef11d6b753e93d2 on gwelymernans:master into 8778d2821a4ac38cbc140fcc3b0aa9c8a257b74f on hhatto:master.\n. \nCoverage decreased (-0.03%) when pulling 242b264446cc300dd3ef0c408140cd5478179961 on cache_generate_tokens into e188a7089af6b125282ee9121991fe75380d4c04 on master.\n. \nCoverage remained the same when pulling e900ab21dd2dc1d912e93766446157c636a4da94 on gwelymernans:master into 334e64c7a3d8d13a543b134c8d16219f719abbbb on hhatto:master.\n. \nCoverage remained the same when pulling 9e1499b7eaa9af55c24f87b88e5ee5a46be3f36e on gwelymernans:master into 42793f90957e6525fe1cc1f4eff0856a94c222c7 on hhatto:master.\n. \nCoverage decreased (-7.28%) to 92.68% when pulling 4e3503294108ed6e293918c3094c1b4c417db57a on gwelymernans:master into 72e87d9b7ba1ff67f75c5028d4bc0d18ad85f6ce on hhatto:master.\n. \nCoverage decreased (-0.15%) when pulling 9e27719ce899d76a97a3a983cd3b4be084d562c3 on gwelymernans:master into 0442042043bc1b019bf61f58434eacecb291c517 on hhatto:master.\n. \nCoverage remained the same when pulling 591f84cbbfeedc4e72c34e346437ac1260831479 on gwelymernans:master into 36f70cc3307f8283c722ce37a41bd214a6d6e512 on hhatto:master.\n. \nCoverage decreased (-0.15%) when pulling e105739a5c0289196b693c8b565fe42249b6a2d4 on gwelymernans:master into 36f70cc3307f8283c722ce37a41bd214a6d6e512 on hhatto:master.\n. \nCoverage decreased (-0.15%) when pulling e105739a5c0289196b693c8b565fe42249b6a2d4 on gwelymernans:master into 36f70cc3307f8283c722ce37a41bd214a6d6e512 on hhatto:master.\n. \nCoverage remained the same when pulling cbe05351a5e8e767d9603fe5109ebc2d1a6e3e58 on gwelymernans:master into 36f70cc3307f8283c722ce37a41bd214a6d6e512 on hhatto:master.\n. \nCoverage increased (+0.06%) when pulling 522f34698008541bc3de3ffb48e6b2dffdf7f1ee on gwelymernans:master into efce6135b9c1cf0aa3a929d4bdc3fde03b77924f on hhatto:master.\n. \nCoverage remained the same when pulling b7280feb041e90caecc16aa37449196decaded3c on gwelymernans:master into efce6135b9c1cf0aa3a929d4bdc3fde03b77924f on hhatto:master.\n. \nCoverage remained the same when pulling 796095f2aa8e9634b94e75f7b6a6d54ab207e009 on gwelymernans:master into 12577536d4438cadfdb20ca203fd5629eaf93776 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 796095f2aa8e9634b94e75f7b6a6d54ab207e009 on gwelymernans:master into 12577536d4438cadfdb20ca203fd5629eaf93776 on hhatto:master.\n. \nCoverage increased (+0.03%) when pulling c76c564d005406604aa5f0a4fa4facee0bb66313 on gwelymernans:master into ede0a00ef8f15d51a26bfa1526029e22e395e28d on hhatto:master.\n. \nCoverage remained the same when pulling bd427ea1aa84a482eb80c88c79f256f4e971d5ba on gwelymernans:master into e0dcd1905576547341d6b1d2f55d3ca857ed04d9 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 06eb70089e94ae699faf54665fcf236e7fcb4072 on 321cyb:master into ce186aadd6e0ecfe0dfc7445237d08d39ed36595 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling bf4e03eb8660a6008c0ce4d700d31e2ceb07aeec on asottile:return_code into 48eb6260b6e70eb69a56f9ef3b19d13e679b104c on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 5e8185235ced4274280a2ce9378f858595a2fec1 on asottile:return_code into 48eb6260b6e70eb69a56f9ef3b19d13e679b104c on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 26978a690685a5e1aed35ee4dafb96b8e567accb on houbysoft:master into 98c89030d936792a3b8b19d9edec5848ee251d09 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling dfd418f4707cef761488c7aa3735dbb3b570437d on fix_semicolon_and_inline_comment into 4f1b61c9a0c11405b431497bc4697698f30c0f71 on master.\n. \nCoverage increased (+0.0%) when pulling b0f73357af0678b103d6d001bca5eff37c393f24 on fix_145 into 63079ef221463b9832f55ba9ef7e51fce0c19bd4 on master.\n. \nCoverage decreased (-0.07%) when pulling c3ccc25e8ae9733a2e69154206a4b62fd80c73c8 on thisch:ext302 into 83ae9dcee860d09c5d17071587d828b3e5ad9058 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 8f0bda930109846994a3d2d589985c0923e3de96 on thisch:improve_e302 into bb206d69d6e2eb2571fc3e31dddfbd7e032b4be3 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 8f0bda930109846994a3d2d589985c0923e3de96 on thisch:improve_e302 into bb206d69d6e2eb2571fc3e31dddfbd7e032b4be3 on hhatto:master.\n. \nCoverage decreased (-0.02%) when pulling 622d10169d44ac40512bc139ce810b7b43a99227 on hayd:config into 7cb8afb15063de7cc79c487a69f3d282b683b597 on hhatto:master.\n. \nCoverage decreased (-0.04%) when pulling 622d10169d44ac40512bc139ce810b7b43a99227 on hayd:config into 7cb8afb15063de7cc79c487a69f3d282b683b597 on hhatto:master.\n. \nCoverage decreased (-0.04%) when pulling 2f01bbc9c87e83a37c9f1c6bab63c7bded34c7d0 on hayd:config into 7cb8afb15063de7cc79c487a69f3d282b683b597 on hhatto:master.\n. \nCoverage decreased (-0.04%) when pulling d44c1e9dba49d9c6f3f5ce68e9121024733ae74d on hayd:config into 7cb8afb15063de7cc79c487a69f3d282b683b597 on hhatto:master.\n. \nCoverage decreased (-0.16%) when pulling 7cacf2146738de1ff88556eed7070dcfec62007d on hayd:config into 7cb8afb15063de7cc79c487a69f3d282b683b597 on hhatto:master.\n. \nCoverage decreased (-0.09%) when pulling 37b2bc31b1a0fb25b1265254e7ba6bddcbe91657 on hayd:range_comments into ea2cdf70419ec1556fd472eeccdf9e588403729f on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 57d09a202ac75f95a10c81128e3663dc199c81de on dongweiming:fix-comment into 4112f14a12e3b31aad50d23c929faa267524efd0 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 5edb790ee5555e42992cb38885c9c72ad70a5918 on schlamar:fix-find-files into 760a70b4d29c330e08771901737016678781b9b3 on hhatto:master.\n. \nCoverage increased (+0.0%) when pulling 5edb790ee5555e42992cb38885c9c72ad70a5918 on schlamar:fix-find-files into 760a70b4d29c330e08771901737016678781b9b3 on hhatto:master.\n. \nCoverage remained the same at 99.67% when pulling 53ede4f77d48c3e5af6207f7147fa9058d1d60d0 on fabioz:patch-1 into c9ac18aad1c46b25105efb6d517f8eb4a64ff6ec on hhatto:master.\n. \nCoverage decreased (-0.07%) to 99.58% when pulling 9d9ff2de1c9137dc519de25b9fb1bad3e4c26381 on hayd:gh175_2 into daa6332ee47ad6486548474f9e7ae0c92bd4bc64 on hhatto:master.\n. \nCoverage decreased (-0.07%) to 99.58% when pulling 9d9ff2de1c9137dc519de25b9fb1bad3e4c26381 on hayd:gh175_2 into daa6332ee47ad6486548474f9e7ae0c92bd4bc64 on hhatto:master.\n. \nCoverage remained the same at 99.485% when pulling a421f93f135b09dc8093d1ac3104b879405cbbe4 on cclauss:patch-1 into 152dcbcba066848c3c6dd333821f66a05ab60b95 on hhatto:master.\n. \nCoverage increased (+0.004%) to 99.489% when pulling 0abb3978e23ea80b399b9b5506246febd17363f6 on feature-e713-and-e714 into 7576ddecffaa1c8aafe4b566faf410f8ff836b8d on master.\n. \n\nCoverage decreased (-57.9%) to 41.586% when pulling 857f7c90227ae97807630c915cdcef0febd7b1e6 on feature-e713-and-e714 into 7576ddecffaa1c8aafe4b566faf410f8ff836b8d on master.\n. \nCoverage decreased (-0.1%) to 99.366% when pulling 95afa9c810e6def0676d924d66c88b4a91404a43 on feature-e731 into 7576ddecffaa1c8aafe4b566faf410f8ff836b8d on master.\n. \nCoverage decreased (-0.1%) to 99.366% when pulling 95afa9c810e6def0676d924d66c88b4a91404a43 on feature-e731 into 7576ddecffaa1c8aafe4b566faf410f8ff836b8d on master.\n. \nCoverage decreased (-0.1%) to 99.366% when pulling 95afa9c810e6def0676d924d66c88b4a91404a43 on feature-e731 into 7576ddecffaa1c8aafe4b566faf410f8ff836b8d on master.\n. \nCoverage increased (+0.002%) to 99.488% when pulling 95afa9c810e6def0676d924d66c88b4a91404a43 on feature-e731 into 7576ddecffaa1c8aafe4b566faf410f8ff836b8d on master.\n. \nCoverage increased (+0.002%) to 99.491% when pulling ee89cd634ae3e74f90f1fc74dfaee68ce4ace3e7 on feature-e731 into 3a9e3e3da3249dce970ad813c924e278a5d33a6b on master.\n. \nCoverage increased (+0.002%) to 99.491% when pulling ee89cd634ae3e74f90f1fc74dfaee68ce4ace3e7 on feature-e731 into 3a9e3e3da3249dce970ad813c924e278a5d33a6b on master.\n. \n\nCoverage decreased (-0.05%) to 99.356% when pulling b9704f21df15a5c7384ff75fb6c0ef3c3d42653e on evenicoulddoit:support-pycodestyle into c87c5f00c3e39653ebdc9899c1bfecce97fca198 on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 99.286% when pulling bdbfce0a106d6ab8f1a1092489351555ce25e60c on khairihafsham:remove-e309 into f42bf8e1f4399fe77b67a3c287edec14deeba73e on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 99.286% when pulling bdbfce0a106d6ab8f1a1092489351555ce25e60c on khairihafsham:remove-e309 into f42bf8e1f4399fe77b67a3c287edec14deeba73e on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 54ea220af013c74f230c98fb4d6824ea7197e60c on khairihafsham:add-e306 into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 54ea220af013c74f230c98fb4d6824ea7197e60c on khairihafsham:add-e306 into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 54ea220af013c74f230c98fb4d6824ea7197e60c on khairihafsham:add-e306 into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 54ea220af013c74f230c98fb4d6824ea7197e60c on khairihafsham:add-e306 into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 54ea220af013c74f230c98fb4d6824ea7197e60c on khairihafsham:add-e306 into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 54ea220af013c74f230c98fb4d6824ea7197e60c on khairihafsham:add-e306 into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 86c6bcf5b9e87d3009223728e17eeec0ad763b11 on khairihafsham:add-e306 into aa92f3b7e30c5c2b3ec62989995610294a1504e2 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 86c6bcf5b9e87d3009223728e17eeec0ad763b11 on khairihafsham:add-e306 into aa92f3b7e30c5c2b3ec62989995610294a1504e2 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 86c6bcf5b9e87d3009223728e17eeec0ad763b11 on khairihafsham:add-e306 into aa92f3b7e30c5c2b3ec62989995610294a1504e2 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 86c6bcf5b9e87d3009223728e17eeec0ad763b11 on khairihafsham:add-e306 into aa92f3b7e30c5c2b3ec62989995610294a1504e2 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 99.311% when pulling 86c6bcf5b9e87d3009223728e17eeec0ad763b11 on khairihafsham:add-e306 into aa92f3b7e30c5c2b3ec62989995610294a1504e2 on hhatto:master.\n. \n\nCoverage remained the same at 99.31% when pulling c5dbba0a6157c88b698f197fc6e564af0ee27c0a on khairihafsham:remove-309-readme into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage remained the same at 99.31% when pulling c5dbba0a6157c88b698f197fc6e564af0ee27c0a on khairihafsham:remove-309-readme into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage remained the same at 99.31% when pulling c5dbba0a6157c88b698f197fc6e564af0ee27c0a on khairihafsham:remove-309-readme into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage remained the same at 99.31% when pulling c5dbba0a6157c88b698f197fc6e564af0ee27c0a on khairihafsham:remove-309-readme into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage remained the same at 99.31% when pulling c5dbba0a6157c88b698f197fc6e564af0ee27c0a on khairihafsham:remove-309-readme into 9a311bfa556def845c3851961a3537b68823ef08 on hhatto:master.\n. \n\nCoverage increased (+0.03%) to 99.273% when pulling 3cc4fb7c5619061f55e61344864e4fcd5e64d15c on fix-issue-280 into 4460020e3572fc4d8649b9f1c6d2e1ee87bb316b on master.\n. \n\nCoverage increased (+0.003%) to 99.277% when pulling 9a2bcf5bc02a076bfef842a8ef255a932b6467d4 on support-e131-fix-method into ba5eb087e9bb234d2f27de795494539e10a02748 on master.\n. \n\nCoverage increased (+0.003%) to 99.277% when pulling 9a2bcf5bc02a076bfef842a8ef255a932b6467d4 on support-e131-fix-method into ba5eb087e9bb234d2f27de795494539e10a02748 on master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 4c012c24f14c4a4b67d68371ac6d8d73d8eea8a2 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 99.162% when pulling 2947b32f3187124cfdfe50edf87dff4e8acc8c18 on gpotter2:master into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on hhatto:master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.278% when pulling 2d590972061fdf267edfc4669bc2b95bf680712b on fix-issue-278 into 0f6eb87703310ea8f26dd783b1e9d19b15a7e19d on master.\n. \n\nCoverage increased (+0.0008%) to 99.279% when pulling b3010c4db262f0955b87b795fbfb1668856c161b on fix-issue-279 into f412a47dd6083be4d3ebee21b9121941936ee371 on master.\n. \n\nCoverage increased (+0.0008%) to 99.279% when pulling b3010c4db262f0955b87b795fbfb1668856c161b on fix-issue-279 into f412a47dd6083be4d3ebee21b9121941936ee371 on master.\n. \n\nCoverage increased (+0.0008%) to 99.279% when pulling b3010c4db262f0955b87b795fbfb1668856c161b on fix-issue-279 into f412a47dd6083be4d3ebee21b9121941936ee371 on master.\n. \n\nCoverage increased (+0.0008%) to 99.279% when pulling b3010c4db262f0955b87b795fbfb1668856c161b on fix-issue-279 into f412a47dd6083be4d3ebee21b9121941936ee371 on master.\n. \n\nCoverage increased (+0.003%) to 99.282% when pulling 9b60f853d28675ae27406a326ba6697c08094b53 on improve-performance-when-check-verylongline into 41345a4ac0ded0acac2fa8eebb43a74cd0368f7e on master.\n. \n\nCoverage increased (+0.003%) to 99.282% when pulling 9b60f853d28675ae27406a326ba6697c08094b53 on improve-performance-when-check-verylongline into 41345a4ac0ded0acac2fa8eebb43a74cd0368f7e on master.\n. \n\nCoverage increased (+0.003%) to 99.282% when pulling 9b60f853d28675ae27406a326ba6697c08094b53 on improve-performance-when-check-verylongline into 41345a4ac0ded0acac2fa8eebb43a74cd0368f7e on master.\n. \n\nCoverage increased (+0.003%) to 99.282% when pulling 9b60f853d28675ae27406a326ba6697c08094b53 on improve-performance-when-check-verylongline into 41345a4ac0ded0acac2fa8eebb43a74cd0368f7e on master.\n. \n\nCoverage increased (+0.003%) to 99.282% when pulling 9b60f853d28675ae27406a326ba6697c08094b53 on improve-performance-when-check-verylongline into 41345a4ac0ded0acac2fa8eebb43a74cd0368f7e on master.\n. \n\nCoverage increased (+0.003%) to 99.282% when pulling 9b60f853d28675ae27406a326ba6697c08094b53 on improve-performance-when-check-verylongline into 41345a4ac0ded0acac2fa8eebb43a74cd0368f7e on master.\n. \n\nCoverage decreased (-0.3%) to 98.936% when pulling 57731f9bcdb34ac37be29f92398bb1b1fd963c79 on fix-e722-with-if-else-stmt into c5b11804e87e195760aba94978b378388331738d on master.\n. \n\nCoverage increased (+0.2%) to 99.283% when pulling 7da729173b5bc7a40a89033303091ddf9989e31b on neilsh:patch-1 into 3ad6751182bff5105fd07151f399b856ddaaa140 on hhatto:master.\n. \n\nCoverage increased (+0.2%) to 99.283% when pulling 31eef01169f638d81e7028328c2a8dbe9d693962 on neilsh:patch-1 into 3ad6751182bff5105fd07151f399b856ddaaa140 on hhatto:master.\n. \n\nCoverage increased (+0.2%) to 99.283% when pulling 31eef01169f638d81e7028328c2a8dbe9d693962 on neilsh:patch-1 into 3ad6751182bff5105fd07151f399b856ddaaa140 on hhatto:master.\n. \n\nCoverage increased (+0.2%) to 99.283% when pulling 1e0d48103305ecd03d19ae00ad83487f5500dc0d on neilsh:travis-pypy3-fix into 3ad6751182bff5105fd07151f399b856ddaaa140 on hhatto:master.\n. \n\nCoverage increased (+0.2%) to 99.283% when pulling 1e0d48103305ecd03d19ae00ad83487f5500dc0d on neilsh:travis-pypy3-fix into 3ad6751182bff5105fd07151f399b856ddaaa140 on hhatto:master.\n. \n\nCoverage increased (+0.2%) to 99.283% when pulling 1e0d48103305ecd03d19ae00ad83487f5500dc0d on neilsh:travis-pypy3-fix into 3ad6751182bff5105fd07151f399b856ddaaa140 on hhatto:master.\n. \n\nCoverage decreased (-0.02%) to 99.265% when pulling 9f19a2a7d69c49a77cb7cedb134dfcea9ca8eed2 on fix-issue323 into 1e91d9939c21bb290d07e5c99ada920a17a5fefc on master.\n. \n\nCoverage decreased (-0.02%) to 99.265% when pulling 9f19a2a7d69c49a77cb7cedb134dfcea9ca8eed2 on fix-issue323 into 1e91d9939c21bb290d07e5c99ada920a17a5fefc on master.\n. \n\nCoverage decreased (-0.04%) to 99.245% when pulling 2f77f084cbd88dfec228abb1a53f41508a822e0b on fix-issue323 into 1e91d9939c21bb290d07e5c99ada920a17a5fefc on master.\n. \n\nCoverage decreased (-0.04%) to 99.245% when pulling 2f77f084cbd88dfec228abb1a53f41508a822e0b on fix-issue323 into 1e91d9939c21bb290d07e5c99ada920a17a5fefc on master.\n. \n\nCoverage increased (+0.005%) to 99.25% when pulling 9d2817f7ff6197d7cbbbb432e0095d125cf9617c on fix-issue-276-e713-regression into ce4c6333a7bc3a7a83ef4e65591082e67d82a180 on master.\n. \n\nCoverage increased (+0.0002%) to 99.25% when pulling b93701f58f55acb5f605f2bd4725d7cc1147fe16 on fix-e305 into c380e2e40ff807b066832e32d09be05839e75a72 on master.\n. \n\nCoverage increased (+0.0002%) to 99.25% when pulling b93701f58f55acb5f605f2bd4725d7cc1147fe16 on fix-e305 into c380e2e40ff807b066832e32d09be05839e75a72 on master.\n. \n\nCoverage increased (+0.0009%) to 99.251% when pulling 2e411b0b4546d2a3ca08cf44e7716c011a0ae555 on fix-issue-338 into c13cf86c55de5656ad1f7a3db1413573308c75c5 on master.\n. \n\nCoverage increased (+0.0009%) to 99.251% when pulling 2e411b0b4546d2a3ca08cf44e7716c011a0ae555 on fix-issue-338 into c13cf86c55de5656ad1f7a3db1413573308c75c5 on master.\n. \n\nCoverage increased (+0.0009%) to 99.251% when pulling 2e411b0b4546d2a3ca08cf44e7716c011a0ae555 on fix-issue-338 into c13cf86c55de5656ad1f7a3db1413573308c75c5 on master.\n. \n\nCoverage decreased (-0.1%) to 99.119% when pulling e290836545335d1db8a72047511dd79227a9f4ca on fix-issue-351 into d8d47aa88eba946ad7d4fb92db6fd77e8668943e on master.\n. \n\nCoverage decreased (-0.02%) to 99.098% when pulling 5c0c39e45593a8d3a6618dc83f38314022fdce79 on fix-issue-353 into 633abc48353f9864d13e14b41ddc9538c3107d6d on master.\n. \n\nCoverage remained the same at 99.098% when pulling 79078ea4354a43f667350df03c7f5f4ade256949 on fix-issue-331 into 8c0dbc1e33cd9d971c881118153667e03a9192fa on master.\n. \n\nCoverage decreased (-0.2%) to 98.919% when pulling 2449679b78e773df557c162f2978443ac9a8bc2c on fix-issue-331 into 8c0dbc1e33cd9d971c881118153667e03a9192fa on master.\n. \n\nCoverage increased (+0.001%) to 99.099% when pulling f008cc651efb9970050d23062af94d0fe2649850 on fix-issue-331 into 8c0dbc1e33cd9d971c881118153667e03a9192fa on master.\n. \n\nCoverage remained the same at 99.099% when pulling 576ebc2b222399f1cfe4d33b765559ffcebd53e3 on fix-issue-330 into d9c1b6df44d92b5692e025b067bbc8c2b6117de1 on master.\n. \n\nCoverage increased (+0.003%) to 99.102% when pulling 1f9cf42ac53adfc94b754224c92bb0a673fb8648 on e133-fixed-method into 3b9945e3ed03e9cfc81336f1deb0412a03df8a9d on master.\n. \n\nCoverage increased (+0.003%) to 99.102% when pulling 1f9cf42ac53adfc94b754224c92bb0a673fb8648 on e133-fixed-method into 3b9945e3ed03e9cfc81336f1deb0412a03df8a9d on master.\n. \n\nCoverage increased (+0.001%) to 99.058% when pulling 19a2578453a682b906330532b676abfc9dd526b1 on fix-issue-368 into 4c6a018b7d17b8414155db51abe21adc7e38d496 on master.\n. \n\nCoverage remained the same at 99.058% when pulling bd3547570d3babf5342ac6ed292aa2e850b88668 on read-flake8-config into 33f330d54020078dedef49a8c69f36bbbec7d560 on master.\n. \n\nCoverage increased (+0.004%) to 98.917% when pulling 5a53e921c584d9df15c3a5e71d2c59f6e74668cb on gmbnomis:add_fix_e252 into e23d1e03400cca5ff6258a120deb389cd6c76642 on hhatto:master.\n. \n\nCoverage remained the same at 98.913% when pulling 56e22186de0f8aa5bc5cbdb59ff2c9c8c97d33b6 on gmbnomis:fix_e225_testcase into e23d1e03400cca5ff6258a120deb389cd6c76642 on hhatto:master.\n. \n\nCoverage increased (+0.006%) to 98.923% when pulling 0fc306cf4075421dad0199c85fafab85fa7aba15 on implement-w605-fixed-method into eeb0ec07c274db82a19fc2f95f5053407f2ad47d on master.\n. \n\nCoverage remained the same at 98.923% when pulling 127a3bb38990e5cf3f2e12e770d8de55d9c368d6 on slel:patch-1 into ffbe6625d942b332176a8e38026e4bbfb6fecadc on hhatto:master.\n. \n\nCoverage decreased (-0.02%) to 98.903% when pulling e3dd7683d581c3c1794079accc75660438a41d01 on fix-e113 into 2e7e3ba985bfa7e090a10c6450454ff4b87f9475 on master.\n. \n\nCoverage remained the same at 98.903% when pulling 7fee48fdce6df1fea40af072eefb965840f4d945 on cclauss:patch-2 into 159bb88843e298534e46914da242e680a1c8c47d on hhatto:master.\n. \n\nCoverage increased (+0.004%) to 98.907% when pulling 74acb57180a779014c25af1f46bba19f0e2c47e8 on fix-e305-not-modify into 0ef89032b610218f6b8369eb7ac5064f891bccde on master.\n. \n\nCoverage increased (+0.004%) to 98.907% when pulling 74acb57180a779014c25af1f46bba19f0e2c47e8 on fix-e305-not-modify into 0ef89032b610218f6b8369eb7ac5064f891bccde on master.\n. \n\nCoverage increased (+0.001%) to 98.908% when pulling 3803880d7f7d4668314f6619ac3d2e9f39fad2e9 on fix-exception-with-not-pointing-out-w503 into d6cc49bb6a4afaf67e19a460b6f4b157cd897ea1 on master.\n. \n\nCoverage decreased (-0.3%) to 98.642% when pulling 986469d0f4776efdd3810673eb35d619d73890d9 on impl-w504 into 465c0da24f75247f405737095cd445e3964f412f on master.\n. \n\nCoverage increased (+0.05%) to 98.689% when pulling 4d53a3deba5e1a53334bf51fb1503e26201a7235 on fix-w503-and-w504-into-comments into c6ab6b4d75f490d541784f404ec7c828aa108875 on master.\n. \n\nCoverage increased (+0.004%) to 98.693% when pulling 14442a65df9e55f2e75256dd97ba3bcbde1fbf44 on EmbolismSoil:master into 72821e765cf80e7ea4b8a4f17668ada702a38369 on hhatto:master.\n. \n\nCoverage increased (+0.004%) to 98.693% when pulling 14442a65df9e55f2e75256dd97ba3bcbde1fbf44 on EmbolismSoil:master into 72821e765cf80e7ea4b8a4f17668ada702a38369 on hhatto:master.\n. \n\nCoverage decreased (-0.1%) to 98.577% when pulling 5d21af7364e006e0154d748217ae200644ac97df on add-e402-fixed-method into 72821e765cf80e7ea4b8a4f17668ada702a38369 on master.\n. \n\nCoverage remained the same at 98.577% when pulling c1a9c4f77809800fdeb9c734941986065540691d on change-read-configs into 7c376c8457d8f2f9f202a32dd64de38d8a69bdc9 on master.\n. \n\nCoverage increased (+0.01%) to 98.592% when pulling 0a8a989a07b1bf2e31c615ec231a5cfa36f8c2d6 on change-status-code-with-diff-mode into a9e0683d4cb34a63e3598f91656d670f5887d42e on master.\n. \n\nCoverage increased (+0.2%) to 98.595% when pulling 457ae6d7af3df49ebe1f15b622db189c65499083 on fix-w504 into 541b3f6259021bde50deca53986d1062f2b2fa24 on master.\n. \n\nCoverage increased (+0.2%) to 98.595% when pulling 457ae6d7af3df49ebe1f15b622db189c65499083 on fix-w504 into 541b3f6259021bde50deca53986d1062f2b2fa24 on master.\n. \n\nCoverage increased (+0.2%) to 98.595% when pulling 457ae6d7af3df49ebe1f15b622db189c65499083 on fix-w504 into 541b3f6259021bde50deca53986d1062f2b2fa24 on master.\n. \n\nCoverage increased (+0.2%) to 98.595% when pulling 457ae6d7af3df49ebe1f15b622db189c65499083 on fix-w504 into 541b3f6259021bde50deca53986d1062f2b2fa24 on master.\n. \n\nCoverage increased (+0.2%) to 98.595% when pulling 457ae6d7af3df49ebe1f15b622db189c65499083 on fix-w504 into 541b3f6259021bde50deca53986d1062f2b2fa24 on master.\n. \n\nCoverage increased (+0.02%) to 98.619% when pulling 0fd9c35495cee813e28d2522e1504bf9d28f96e2 on fix-w503 into 3b3d5ff587d4077fc75eff90af597dc004052783 on master.\n. \n\nCoverage increased (+0.02%) to 98.619% when pulling 0fd9c35495cee813e28d2522e1504bf9d28f96e2 on fix-w503 into 3b3d5ff587d4077fc75eff90af597dc004052783 on master.\n. \n\nCoverage increased (+0.004%) to 98.587% when pulling 8c5f4d0d54f06a235b12986c9d75f650fe96c0b0 on bigredengineer:fix-w605-identical-token into 4343c41ca3d52e75af5e95f6b86a6053bcbd9a57 on hhatto:master.\n. \n\nCoverage increased (+0.004%) to 98.587% when pulling 8c5f4d0d54f06a235b12986c9d75f650fe96c0b0 on bigredengineer:fix-w605-identical-token into 4343c41ca3d52e75af5e95f6b86a6053bcbd9a57 on hhatto:master.\n. \n\nCoverage increased (+0.004%) to 98.587% when pulling 8c5f4d0d54f06a235b12986c9d75f650fe96c0b0 on bigredengineer:fix-w605-identical-token into 4343c41ca3d52e75af5e95f6b86a6053bcbd9a57 on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 98.555% when pulling 003f3e1ac07e7a19fa187bc9bb85d6780d5923ec on CLiu13:column-range into 65359bcb033418aa3ff7ab5945f0d3f54350f018 on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 98.555% when pulling 003f3e1ac07e7a19fa187bc9bb85d6780d5923ec on CLiu13:column-range into 65359bcb033418aa3ff7ab5945f0d3f54350f018 on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 98.555% when pulling 003f3e1ac07e7a19fa187bc9bb85d6780d5923ec on CLiu13:column-range into 65359bcb033418aa3ff7ab5945f0d3f54350f018 on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 98.555% when pulling 003f3e1ac07e7a19fa187bc9bb85d6780d5923ec on CLiu13:column-range into 65359bcb033418aa3ff7ab5945f0d3f54350f018 on hhatto:master.\n. \n\nCoverage decreased (-0.03%) to 98.555% when pulling 003f3e1ac07e7a19fa187bc9bb85d6780d5923ec on CLiu13:column-range into 65359bcb033418aa3ff7ab5945f0d3f54350f018 on hhatto:master.\n. \n\nCoverage increased (+0.01%) to 98.597% when pulling a2b4266a1b90916aa638d556bcf2e5bef9cb3e37 on CLiu13:column-range into 65359bcb033418aa3ff7ab5945f0d3f54350f018 on hhatto:master.\n. \n\nCoverage remained the same at 98.587% when pulling 2108351b78bae0c9d04b9871db92f209ac25f75f on kx-chen:describe-experimental into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.589% when pulling fce5e18f3e3a19011ee0a528df690ad9eab574d6 on asottile:dont_write_unless_changes into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.589% when pulling fce5e18f3e3a19011ee0a528df690ad9eab574d6 on asottile:dont_write_unless_changes into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.589% when pulling fce5e18f3e3a19011ee0a528df690ad9eab574d6 on asottile:dont_write_unless_changes into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.589% when pulling fce5e18f3e3a19011ee0a528df690ad9eab574d6 on asottile:dont_write_unless_changes into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage remained the same at 98.587% when pulling 6241029eb16ff4683d87afadda4d2f0ac03b93e1 on asottile:fix_escape_sequences into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage remained the same at 98.587% when pulling 6241029eb16ff4683d87afadda4d2f0ac03b93e1 on asottile:fix_escape_sequences into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage remained the same at 98.587% when pulling 6241029eb16ff4683d87afadda4d2f0ac03b93e1 on asottile:fix_escape_sequences into 48662f6ab39c646cb31db1c7f95c67281b5be0a3 on hhatto:master.\n. \n\nCoverage increased (+0.02%) to 98.617% when pulling 9cd6ad5f91eaa664d032ac90f0825e00453e73c8 on Hanaasagi:fix-import-moved-above-future-import into 40bcf6f126f11f6957f7b2c31d880245843b2242 on hhatto:master.\n. \n\nCoverage increased (+0.02%) to 98.617% when pulling 9cd6ad5f91eaa664d032ac90f0825e00453e73c8 on Hanaasagi:fix-import-moved-above-future-import into 40bcf6f126f11f6957f7b2c31d880245843b2242 on hhatto:master.\n. \n\nCoverage increased (+0.07%) to 98.659% when pulling 171aa6ef4ead4c151dfdc743eceec3ff749a8df1 on bagerard:bugfix_W504_comment_syntaxerror into 40bcf6f126f11f6957f7b2c31d880245843b2242 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.685% when pulling 9f4b8c9a7670fc7390ba11dbe0d08224fe17025f on asottile:ignore_conflict into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.685% when pulling 9f4b8c9a7670fc7390ba11dbe0d08224fe17025f on asottile:ignore_conflict into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.685% when pulling 9f4b8c9a7670fc7390ba11dbe0d08224fe17025f on asottile:ignore_conflict into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.685% when pulling 9f4b8c9a7670fc7390ba11dbe0d08224fe17025f on asottile:ignore_conflict into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage increased (+0.002%) to 98.685% when pulling 9f4b8c9a7670fc7390ba11dbe0d08224fe17025f on asottile:ignore_conflict into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage decreased (-0.01%) to 98.67% when pulling 59318cb80cd9f29ee53a2fda25b23bff38fb5856 on Hanaasagi:fix/import-statement-moved-above-docstring-by-E402 into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage decreased (-0.01%) to 98.67% when pulling 59318cb80cd9f29ee53a2fda25b23bff38fb5856 on Hanaasagi:fix/import-statement-moved-above-docstring-by-E402 into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage decreased (-0.01%) to 98.67% when pulling 59318cb80cd9f29ee53a2fda25b23bff38fb5856 on Hanaasagi:fix/import-statement-moved-above-docstring-by-E402 into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage remained the same at 98.683% when pulling 03f0c03916042e89e45fd077835d29d50459f060 on Hanaasagi:add-py37-in-tox-env into 89886b439f35778ac1edefbc93ad9aa411d889d1 on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 98.673% when pulling 06be525425fe9e851922b18280d934a32962c788 on jakuub:e704-indent into 462069ef65448ac7dcb46d58b079c769587ec0fa on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 98.673% when pulling 06be525425fe9e851922b18280d934a32962c788 on jakuub:e704-indent into 462069ef65448ac7dcb46d58b079c769587ec0fa on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 98.673% when pulling 06be525425fe9e851922b18280d934a32962c788 on jakuub:e704-indent into 462069ef65448ac7dcb46d58b079c769587ec0fa on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 98.673% when pulling 06be525425fe9e851922b18280d934a32962c788 on jakuub:e704-indent into 462069ef65448ac7dcb46d58b079c769587ec0fa on hhatto:master.\n. \n\nCoverage increased (+0.001%) to 98.673% when pulling 06be525425fe9e851922b18280d934a32962c788 on jakuub:e704-indent into 462069ef65448ac7dcb46d58b079c769587ec0fa on hhatto:master.\n. \n\nCoverage remained the same at 98.672% when pulling c2ac1fa39f6c05f9c750fd951eaa76f8e1337934 on Ch00k:fix-pycodestyle-path into 462069ef65448ac7dcb46d58b079c769587ec0fa on hhatto:master.\n. ",
    "cpcloud": "Here's the tb:\n\n. Yep, that's the issue. Will raise over at pep8 git.\n. ",
    "BruceEckel": "I have 0.8.7 which came via pip install. I'll try to install a more recent version, thanks (as of this message, pip install --upgrade autopep8 didn't fix it).\nReally like the intent of the tool -- we've needed this for a long time! Thanks.\n. Which \"E\" flag would I exclude to keep it from modifying tag.has_key(\"style\") ?\n. OK, when you go to THIS site (github) and download the zip package, you also get version 0.8.7. \n. Yes, now pip install --upgrade autopep8 produced version 0.9, thanks! Which \"E\" flag would I exclude to keep it from modifying tag.has_key(\"style\") ?\n. OK, now I've installed version 0.9. Fetch PreClean.py from https://github.com/BruceEckel/Atomizer.git\nBefore running autopep8, it completes without errors. After running autopep8 0.9 (no flags), I get the message:\nFile \"C:\\Users\\Bruce\\SkyDrive\\Atomizer\\autopep8-experiment\\PreClean2.py\", line 1\nSyntaxError: Non-ASCII character '\\xff' in file C:\\Users\\Bruce\\SkyDrive\\Atomizer\\autopep8-experiment\\PreClean2.py on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details\n[Finished in 0.1s with exit code 1]\n. With this new version, it should be ignored by default now. But if you want to enable everything except this fix, you can just disable W6 to prevent the has_key() syntax upgrade (--ignore=W6). For more details, see the \"More advanced usage\" section of the readme.\nPlease note that although there are numerous references to W6 in the readme, there is no actual description of what W6 does.\n. Exactly -- I couldn't see an '\\xff' either, but that's the output I got when I ran the program. Could this be a windows line-ending issue, or perhaps encoding?\nHere's what produced PreClean2.py:\n```PS C:\\Users\\Bruce\\SkyDrive\\Atomizer> autopep8 .\\PreClean.py > .\\PreClean2.py\nPS C:\\Users\\Bruce\\SkyDrive\\Atomizer> python .\\PreClean2.py\nFile \".\\PreClean2.py\", line 1\nSyntaxError: Non-ASCII character '\\xff' in file .\\PreClean2.py on line 1,\nbut non.org/peps/pep-0263.html for details\nPS C:\\Users\\Bruce\\SkyDrive\\Atomizer>''```\n(Replying to the message with an attached file didn't work, and I wonder if the HTML editor might not strip out the offending characters)\n. ```\n-- coding: windows-1252 --\n\"\"\"\nTakes \"Filtered HTML\" output from Word 2010 and pre-cleans\nit to prepare for use by BookBuilder.py\n\"\"\"\nimport re\nimport glob\nimport string\nimport itertools\nimport collections\nimport bs4\nfrom bs4 import BeautifulSoup, UnicodeDammit\nfrom pprint import pprint, pformat\nimport sys\nsys.stdout = file(\"AtomicScalaCleaned.html\", 'w')\nif name == \"main\":\n    book = open(glob.glob(\"AtomicScala*.htm\")[0], \"rU\").read()\n    soup = BeautifulSoup(book, from_encoding=\"windows-1252\")\n    for tag in soup.findAll('span'):\n        if tag.br and tag.br.has_key(\"style\") and \\\n                \"page-break-before:always\" in tag.br[\"style\"]:\n            tag.extract()\nfor tag in soup.findAll('br'):\n    if tag.has_key(\"style\") and \"page-break-before:always\" in tag[\"style\"]:\n        tag.extract()\n\nfor tag in soup.findAll('p'):  # Remove all empty paragraphs\n    if not tag.text.strip():\n        tag.extract()\n\nprint soup.encode(\"windows-1252\")\n\n```\n. The problem does go away with --in-place!\nPS C:\\Users\\Bruce\\SkyDrive\\Atomizer> cp .\\PreClean.py .\\PreClean2.py\nPS C:\\Users\\Bruce\\SkyDrive\\Atomizer> autopep8 --in-place .\\PreClean2.py\nPS C:\\Users\\Bruce\\SkyDrive\\Atomizer> python .\\PreClean2.py\nPS C:\\Users\\Bruce\\SkyDrive\\Atomizer>\n. Thank you! I really like what you're doing here -- we've needed this for a\nlong time!\n-- Bruce Eckel\nwww.AtomicScala.com\nwww.Reinventing-Business.com\nwww.MindviewInc.com\nOn Fri, May 10, 2013 at 8:27 PM, Steven Myint notifications@github.comwrote:\n\n@BruceEckel https://github.com/BruceEckel, encoding should nowhttp://136efa4ef9b578c43e32edc12cd20519729ae82cbe preserved even when redirecting output.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/hhatto/autopep8/issues/75#issuecomment-17752904\n.\n. \n",
    "florian-wagner": "autopep8 0.9\npep 8 1.4.5\nPython 2.7.3\n. hm now it works, I must have done something wrong. Sorry for the inconvenience!\n. Indeed I was, but with v9.5.6 I get the expected output even with aggressive mode. Thanks a lot.\n. Appendix:\npython\n+++ fixed/test.py\n@@ -1 +1,4 @@\n-                return griddata(data[:,:2], data[:,2], cell_mids, fill_value=0, method=method)\n+                return (\n+                    griddata(data[:, :2], data[:, 2],\n+                             cell_mids, fill_value=0, method=method)\n+                )\n. ",
    "okcompute": "I have some sort of problem related to this. We are using doxygen to document our code and the latest version of autopep8 break the comments.\nThis is something doxygen understand:\n```\n\nMy comments ....\ndef my_function():\n   pass\n```\nbut after running autopep8, this become\n```\n\nMy comments ...\ndef my_function():\n    pass\n```\nthis, doxygen does not understand! It needs the double ##.\nI'm trying to figure out which errors to ignore but I can't find the one :(\n. @peritus thx :)\n. That is fixing my problem. Thank you very much! \n. ",
    "picca": "before\npython\n                               raise Exception(threadResult[1],threadResult[2])\nafter\npython\n                                raise Exception(threadResult[\n                                                1], threadResult[2])\n. Yes I am using 0.9 version\npicca@mordor:~/Projets/pymca-code/PyMca$ autopep8 --version\nautopep8 0.9\nhow can I attach the .py file ?\n. Here I attached the file using email\n. Sorry about that, this github is really a pain.\nplain email is easier for me than using different interfaces for each projects..\nsourceforge, gitbug, bitbucket, ... what else\nas Debian Developper I need to deal with plenty of project and this is really time consuming...\nsorry to bother you once again with this.\ndo you have a real email so I can send it directly to you.\nthanks\nFrederic\nPS; I like a lot this autopep8, and I would like to see it use  everywhere .py file is generated :)\n. ",
    "Julian-O": "That was fast! Yes, that patch works fine on Windows.\nGiven you can't test on Windows, I also ran (with Python 2.7.2) test_autopep8.py.\nAll tests passed except 5, and they were all minor mismatching linefeed problems - \"\\n\" versus \"\\r\\n\"\n. ",
    "gsemet": "Hello\nThanks for your answer. I see you point.\nHowever, this extra space is not added after the doc string for class:\nclass TheClass(object):\n  '''docstring'''\n  variable = False\nshould becomes:\nclass TheClass(object):\n'''docstring'''\nvariable = False\nno?\n\nGaetan\n2013/9/9 Steven Myint notifications@github.com\n\nYes, this is intended behavior. See PEP 257http://www.python.org/dev/peps/pep-0257/\n:\n\"Insert a blank line before and after all docstrings (one-line or\nmulti-line) that document a class -- generally speaking, the class's\nmethods are separated from each other by a single blank line, and the\ndocstring needs to be offset from the first method by a blank line; for\nsymmetry, put a blank line between the class header and the docstring.\nDocstrings documenting functions or methods generally don't have this\nrequirement, unless the function or method's body is written as a number of\nblank-line separated sections -- in this case, treat the docstring as\nanother section, and precede it with a blank line.\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/hhatto/autopep8/issues/83#issuecomment-24079756\n.\n. wrong project sorry. \n",
    "r-owen": "Is there a way to disable this behavior? It does not match our own standards and I'd like to turn it off.\n. ",
    "Mark-E-Hamilton": "Thanks for your reply. I realize it's not your arena, but although True, 2, and 'true' are all true, I would argue that they are subtly different, and in our case that was how we were using them. Still, I think we can work around it.\nMark E. Hamilton\n. ",
    "chrismedrela": "I'm contributing Django and I fed up seeing thousand of different styles while switching files. That's why I tried autopep8. I was really surprised when I found autopep8 and discovered that only few kinds of errors (i.e. E701) alter code in sometimes undesired way. My objective is to make few small changes to autopep8 so no manual corrections are required.\nI see your point about danger of introducing thousands of options. However, I think that there is another solution which is a good trade-off. We can avoid introducing new options by altering the current behaviour. A compound class/def statement will be split only if the definition is not in the group of other class/def definitions, so this code:\n```\nAlone class definition\nclass SomeException(Exception): pass\n```\nwill be split into two lines, but a bunch of classes:\nclass CustomException(Exception): pass\nclass AnotherException(Exception): pass\nclass YetAnotherException(Exception): pass\nwill stay intact.\nI've updated this PR so you can see the new draft. As you can see, the code didn't become too complicated, it avoids introducing new options and is smart enough so no further manual corrections are required.\nPS Note, that one-line class definitions are not a PEP8 preference variation, it's actually implicitly encouraged by PEP8:\nBlank lines may be omitted between a bunch of related one-liners (e.g. a set of dummy implementations).\nIt implies that typing one-liners (like class CustomException(Exception): pass) is fine.\n. Hmm, you're probably right that pep8 is a better place. Thanks for advice!\n. What about this draft?\n. OK, code kept within 79 columns.\n. Cannot reproduce -- the master version gives me the correct output.\n. Well, I cannot imagine any situation when that would happen. line_index >= 0 is an additional guard, just to be on the safe side. If line_index were negative, autopep8 would not blow up (even if the result -- indenting everything by one level -- would be wrong). But now I think it's better to end up with an OutOfBound exception -- users are more likely to report a bug if they see a traceback rather than an inappropriate result; so I've removed this assertion.\n@edit: Actually, I've not updated the branch due to network issues, I will do it soon.\n@edit: Updated.\n. ",
    "agroszer": "Well I bumped on that autopep8 -r -i *.py did not want to recurse.\nI had to look at the source to find out that I need to pass a directory.\n. ",
    "tardyp": "thanks for quick fix! however, there maybe some useful fixes in 2to3 that does not break older python\n. I see.. I think the only way unfortunatly will be for me to disable\nagressive mode.\nthanks for your work anyway.. This save us a lot of time..\nPierre\nOn Sat, Oct 26, 2013 at 11:18 PM, Steven Myint notifications@github.comwrote:\n\nAh, I see what you meant by \"separately\" now :). I think that may be\nbeyond the scope of autopep8. See my python-modernizehttps://github.com/myint/python-modernizefork for selectively doing (Python 2 compatible) 2to3 fixes.\nActually, I should probably undo my previous commit. I just realized that\nit causes a mismatch between pep8 and autopep8 error codes.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/hhatto/autopep8/issues/93#issuecomment-27156051\n.\n. \n",
    "arlsr": "Both of these changes were required to correct the exceptions caught in the code in order to get it to work with python 2.6, tested with a single python file as the only argument.\nencoding = lib2to3_tokenize.detect_encoding(input_file.readline)[0]\nAttributeError: 'module' object has no attribute 'detect_encoding'\nThe second change was required because non-string arguments to Checker() also caused an exception under those same conditions.\n. ",
    "blink1073": "Sorry, I should have looked before I leaped on that one.  I was using an old version of pep8 in the environment I was working in, which must support pep8 >= 0.6.0.\n. ",
    "guettli": "In my environment I can't change the python version. But I could install argparse in my virtualenv.\nI guess you won't switch to argparse during the next days. That's why I think it would be nice, if you could apply the above patch. Thank you. \n. ",
    "gwelymernans": "It should be possible to add a pre-check to the normal pep8 indentation check. Though it does reuse the E111 error code, which may not be completely acceptable. Something like this:\n```\ndef two_space_Indentation(logical_line, previous_logical, indent_char,\n                indent_level, previous_indent_level):\n  \"\"\"Use 2 spaces per indentation level.\nOkay: a = 1\n  Okay: if a == 0:\\n  a = 1\n  E111:     a = 1\n  \"\"\"\n  if indent_char == ' ':\n    indent_change = previous_indent_level - indent_level\n    if indent_level % 2 or indent_change not in {-2, 0, 2}:\n      yield 0, 'E111 indentation is not two spaces'\ndel pep8._checks['logical_line'][pep8.indentation]\npep8.register_check(two_space_Indentation)\npep8.register_check(pep8.indentation)\n``\n. Great! Thank you. :-)\n. When I was thinking about this, I thought of working around the \"physical line\" limitation and mainly try to create a logical line out of it. That was because I couldn't think of a way to getbreak_multiline()` to work correctly in all cases (though that's probably just a function of me not understanding the code well enough). So I may try the logical line approach. If you're able to come up with a patch first, I can test it out for you. :-)\n. Great! Thank you for the quick turnaround. :-)\n. Yeah. Though at that point it gets more towards a personal style. I may try to get the more optimal form later on. It's sure to come up again. :-)\n. This is an experimental version of the formatter. However, some of the formats it generates are better than the current formatter. Because it's experimental, I hid it behind the aggressive >= 3 flag. Let me know if you have any questions about it.\nAnd I'm sorry about the size of the patch.\n. Sure thing! I ran the testcases in test_autopep8.py through it. It was able to handle all of them. Some of the output looked nicer. Only a handful looked worse. So there are definite improvements to be made. But I hope it's in the right direction. :-)\n. I'd seen this before, but thought I'd fixed it. I was baffled by it. I'll take a look and try to come up with a patch. Thanks for the testcase!\n. That should be fixed here:\nTo https://github.com/gwelymernans/autopep8.git\nc3f2704..25b8658  master -> master\n\u200b-bw\u200b\nOn Thu, Jan 9, 2014 at 7:22 AM, Steven Myint notifications@github.comwrote:\n\nI'm noticing some strange behavior where it seems like ( gets turned into\n[.\nNote that I'm currently testing things on the gwhttps://github.com/hhatto/autopep8/tree/gwbranch.\nIf I run autopep8.py -aaa on example_with_reduce.pyhttps://github.com/hhatto/autopep8/blob/gw/test/example_with_reduce.py,\nI get invalid syntax. I've narrowed down the problem a bit below.\ndef foo():\n    return functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1,len(nodelist),2)])\ngets turned into\ndef foo():\n    return functools.reduce[\n        operator.and_, (cls.interpret[nodelist[i]),\n                        for i in range(1, len(nodelist), 2)])\nIf I look at the list of candidates, it looks like only two are broken.\n$ ./autopep8.py -daaaavvvvv foo.py\n[file:foo.py]\n--->  Applying global fix for E269\n--->  Applying global fix for W602\n--->  3 issue(s) to fix {'E501': {2}, 'E231': {2}}\n--->  1 issue(s) to fix {'E501': {2}}\nreturn functools.reduce[\n    operator.and_, (cls.interpret[nodelist[ i]),\n    for i in range(1, len(nodelist), 2)] )\n\nreturn functools.reduce(\n    operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(\n    nodelist[i]) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [\n                        cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i])\n                        for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(\n    1, len(nodelist), 2)])\n\nreturn functools.reduce[operator.and_, (cls.interpret[nodelist[ i]),\n                        for i in range(1, len(nodelist), 2)] )\n\nreturn functools.reduce(operator.and_,\n                        [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[\n                        i]) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(\n    nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]\n                        ) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1,\n                        len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)]\n                        )\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist), 2)\n                        ])\n\nreturn functools.reduce(operator.and_, [cls.interpret(nodelist[i]) for i in range(1, len(nodelist),\n                        2)])\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/hhatto/autopep8/pull/108#issuecomment-31941583\n.\n. Okay. I created a new fix that I hope solves this for you. I think it works at least. Please give it a shot!\n. That was an oversight. I'll create a followup patch to have it run check_syntax(). Thanks!\n. @myint Sorry about that. I put it back.\n\nI didn't know I broke Python 3 support. What's failing?\n. Ah! Okay. I'll make sure that it's compatible from now on. :-)\n. Great! I modified it here: 128e929..8b91547  master -> master\n. That's ++ungood. I'll take a look at it.\n. Fixed here:\n  8b91547..1a4ec72  master -> master\n. Hi pymen,\nIs this the original code? autopep8 doesn't do anything to it. Also, are you using the 'experimental' branch, or '--experimental' on master?\n. ",
    "thezoggy": "wtf is this coveralls spam \n. ",
    "Nodd": "I would be interested in having the code automatically formatted with whitespaces around low priority operators only, instead of completely disabling all checks for operators. But this may be too specific to be included in autopep8.\n. That was really fast, thanks !\n. pep8 would be more like:\nmyDict = {\n    'kg' : 1,\n    'tonnes' : tonne,\n    't/y' : tonne / year,\n    'Mt/y' : 1e6 * tonne / year\n}\n. ",
    "tobiasherp": "I'd like this feature as well. IMO, autopep8 should \"know\" what are pep8 settings, and additions should be put in a new autopep8 section. If a key makes it to the pep8 settings, there could be a fallback mechanism for this special case.\n. ",
    "pierreant-p": "yes, that would be awesome :) +1\n. ",
    "ChillarAnand": "Can provide an option for this when using autopep8 as module?\n. ```\n$ cat test.py\nx = 'foo'[0:  2]\n$ autopep8 test.py \nx = 'foo'[0:  2]\n```\n. Nope, I have opened issue there. Thanks @myint \n. ",
    "gcq": "Having the same issue under Python 3.4 and pip 1.5.4 (log).\nIs it still a pip problem?\n. Still crashes using setup.py directly, but the character it fails on is different?\nC:\\Users\\Gcq\\Documents\\GitHub\\autopep8>python setup.py install\nrunning install\nrunning bdist_egg\nrunning egg_info\ncreating autopep8.egg-info\nwriting entry points to autopep8.egg-info\\entry_points.txt\nwriting dependency_links to autopep8.egg-info\\dependency_links.txt\nwriting requirements to autopep8.egg-info\\requires.txt\nwriting autopep8.egg-info\\PKG-INFO\nwriting top-level names to autopep8.egg-info\\top_level.txt\nwriting manifest file 'autopep8.egg-info\\SOURCES.txt'\nreading manifest file 'autopep8.egg-info\\SOURCES.txt'\nreading manifest template 'MANIFEST.in'\nTraceback (most recent call last):\n  File \"setup.py\", line 59, in <module>\n    entry_points={'console_scripts': ['autopep8 = autopep8:main']},\n  File \"C:\\Python34\\lib\\distutils\\core.py\", line 149, in setup\n    dist.run_commands()\n  File \"C:\\Python34\\lib\\distutils\\dist.py\", line 955, in run_commands\n    self.run_command(cmd)\n  File \"C:\\Python34\\lib\\distutils\\dist.py\", line 974, in run_command\n    cmd_obj.run()\n  File \"C:\\Python34\\lib\\site-packages\\setuptools\\command\\install.py\", line 74, in run\n    self.do_egg_install()\n  File \"C:\\Python34\\lib\\site-packages\\setuptools\\command\\install.py\", line 89, in do_egg_install\n    self.run_command('bdist_egg')\n  File \"C:\\Python34\\lib\\distutils\\cmd.py\", line 313, in run_command\n    self.distribution.run_command(command)\n  File \"C:\\Python34\\lib\\distutils\\dist.py\", line 974, in run_command\n    cmd_obj.run()\n  File \"C:\\Python34\\lib\\site-packages\\setuptools\\command\\bdist_egg.py\", line 177, in run\n    self.run_command(\"egg_info\")\n  File \"C:\\Python34\\lib\\distutils\\cmd.py\", line 313, in run_command\n    self.distribution.run_command(command)\n  File \"C:\\Python34\\lib\\distutils\\dist.py\", line 974, in run_command\n    cmd_obj.run()\n  File \"C:\\Python34\\lib\\site-packages\\setuptools\\command\\egg_info.py\", line 163, in run\n    self.find_sources()\n  File \"C:\\Python34\\lib\\site-packages\\setuptools\\command\\egg_info.py\", line 186, in find_sources\n    mm.run()\n  File \"C:\\Python34\\lib\\site-packages\\setuptools\\command\\egg_info.py\", line 248, in run\n    self.read_template()\n  File \"C:\\Python34\\lib\\distutils\\command\\sdist.py\", line 309, in read_template\n    line = template.readline()\n  File \"C:\\Python34\\lib\\distutils\\text_file.py\", line 174, in readline\n    line = self.file.readline()\n  File \"C:\\Python34\\lib\\encodings\\cp1252.py\", line 23, in decode\n    return codecs.charmap_decode(input,self.errors,decoding_table)[0]\nUnicodeDecodeError: 'charmap' codec can't decode byte 0x81 in position 220: character maps to <undefined>\n. Hmmm... Opened MANIFEST.in in Sublime 3 and it showed those lines like this:\ninclude test/example/e\u00b4.py\ninclude test/example/e\u00b4.txt\nRewritten to what it should be and it works. Hope this helps. Thanks!\n. ",
    "zsong": "@gcq @myint  Sorry I forgot to mention. It crashes on Windows only. It works on Mac.\n. Good job guys!\n. ",
    "CoDEmanX": "It doesn't work for me on Windows 7 and Python 3.4:\nhttp://www.pasteall.org/51139\nNote that I'm running an elevated command prompt (administrator rights).\n. You're right, it started with the errors reported here, and continued with OTHER errors using pip and the github repo. setup.py worked however, thanks!\n. ",
    "benjaoming": "It's shipped with PyDev.. at least I think it's Jython 2.2 because the CLI prompt says so. I have no idea how to make PyDev execute Jython with the external environment (2.5.2 is provided in Ubuntu 13.10). I tried replacing PyDev's Jython but that broke PyDev.\nThanks. I'll give it a go.. it's just a little hard to quickly understand what's going on in this rather long script :)\n. ",
    "CreamyCookie": "I hope this get added. (for function calls, lists, sets, ..) I'd like this as well. (The comma after the last item also makes it easy to add new elements.)\n. @ncolton Press Ctrl + F and search for \"Notifications\" and click the \"Subscribe\"-button.\n. > As far as merging, I prefer the Unix philosophy of having tools do one thing well.\nI respect the Unix philosophy, but do one thing is not well defined. (Hmm, is this one thing?)\n\nautopep8 is a tool to fix things reported by the pep8 tool rather than fix PEP 8 issues in general.\n\nWell if that is the case, you should quickly change your description, which is A tool that automatically formats Python code to conform to the PEP 8 style guide. :smile:\n. ",
    "ncolton": "Also hoping for this (and I can't figure out how to get notifications for this w/o adding a comment, it seems).\n. ",
    "spaceone": "Please implement this, then I really love autopep8.\n. Downgrading to autopep8 0.9.1 seems to respect tabs (when ignoring E501,E101,W191,E126,E128).\n. https://github.com/hhatto/autopep8/pull/287/commits\n. Hmm, it seems pep8 detects the 3 tabs as \"E126 continuation line over-indented for hanging indent\".\nBut autopep8 reformats it very very ugly (with 5 spaces instead if 3 tabs).\n. What is wrong with \"lambda (i, n)\" which gets replaced with lambda i_n: ?\n. Yes, I tried to fix it myself but the lines weren't ever reached so I saw that it uses pep8 to check the errors. This issue is not caused by pep8 as you can see in:\n$ printf 'foo =  \"\"\"bar\\nbaz\"\"\"\\n' | pep8 -\nstdin:1:6: E222 multiple spaces after operator\n. cur.execute(\"\"\"\n        INSERT OR REPLACE INTO '%s' (key,value)\n            VALUES (  ?, ?\n        );\"\"\" % section , [option, value] )\n. E203 \"\"\" % {'urls' : urls,\n. Another broken example:\ne713-2.py\n. And another one:\n\"\\t\\t\\tif not isinstance(self.interfaces[name], Ethernet) or not name in PHYSICAL_INTERFACES:\"\n. After your last fixes there is still this one:\n$ printf \"if not 'DC IP' in info:\\n\" | ~/autopep8.py  -aaa --select E713,E714 - | ~/pycodestyle.py --select E713,E714 -\nstdin:1:4: E713 test for membership should be 'not in'\n. I see, yes this makes sense!\n. Also E211 is not detected\n$ printf 'if len (self) > 0 \\\\\\n\\tand bar:\\n\\t\\t\\tpass' | autopep8 - | pep8 -\nstdin:1:7: E211 whitespace before '('\n. E271 multiple spaces after keyword\nreturn  foo() or\\\n. @hhatto Sorry, but did you look exactly at the issue? The autopep8-code makes the code broken if maxint is imported from sys. Everything is fine when always using sys.maxint. Autopep8 should not replace \"from sys import maxint\" (or alternatively replace all maxint references).\n. Thanks! Looks good so far :)\n. who do you want to review? me?\n. type(types.ListType())\nu''\n. Hmm, the check would also need to check if the builtin type was overridden.\n. Thanks, this works great.\n. Btw. this introduces some issues in your own code :)\nautopep8.py:1041:17: E126 continuation line over-indented for hanging indent\nautopep8.py:1041:37: E226 missing whitespace around arithmetic operator\nautopep8.py:1042:49: E226 missing whitespace around arithmetic operator\nautopep8.py:1043:45: E226 missing whitespace around arithmetic operator\nautopep8.py:1045:31: E226 missing whitespace around arithmetic operator\nautopep8.py:1046:17: E126 continuation line over-indented for hanging indent\n. Oh, this is a duplicate of Issue #264 (with a different error code) which I created some days before.\n. This occurrs with the current git HEAD: https://raw.githubusercontent.com/hhatto/autopep8/master/autopep8.py\nautopep8 2.0a0\nPython 2.7.9\n. Another one: e301.txt\n. I have a newer pycodestyle version:\n~/pycodestyle.py --version\n2.1.0.dev0\n. Okay, with pycodestyle 2.0.0 this works.\n. The reason is that this is now detected as E306 and not as E301:\nE306 expected 1 blank line before a nested definition, found 0\n. FYI: https://github.com/PyCQA/pycodestyle/issues/573 \u2192 it seems pycodestyle 2.1 gets released soon. Then this bug will occur. I guess self.fix_e306 = self.fix_e301 will work.\n. Also E301.\nThe output I get is e.g.:\ne301.txt\n. foo = lambda key, default=None: bar.get('%s/%s' % (prefix, key), default)\n. I think you didn't fix the default argument thing, did you?:\nfoo = lambda key, default=None: bar.get('%s/%s' % (prefix, key), default). In my opinion the output should be:\nGYakymOSMc = GYakymOSMW(\n    GYakymOSMJ,\n    GYakymOSMA,\n    GYakymOSMr,\n    GYakymOSMw['abc'],\n    GYakymOSMU,\n    GYakymOSMq,\n    GYakymOSMH,\n    GYakymOSMl,\n    svygreNveyvarf=GYakymOSME\n)\n. @tobixx Ah really? Too bad, that I didn't knew this a week ago. I autopep8'ed about 30000 files.\n. @tobixx I don't get the option with aggressive/experimental to work:\n```\n\n\n\nprint autopep8.fix_code(\"\"\"res = ldap_machine_read.search(base=ldap_position.getDn(),\\n\\tfilter=filter,\\n\\tattr=['cn', 'associatedDomain'])\\n\"\"\", options={'aggressive': 9, 'experimental': True})\n```\n\n\n\nproduces\nres = ldap_machine_read.search(base=ldap_position.getDn(),\n                               filter=filter,\n                               attr=['cn', 'associatedDomain'])\nWhat I want is:\nres = ldap_machine_read.search(\n    base=ldap_position.getDn(),\n    filter=filter,\n    attr=['cn', 'associatedDomain']\n)\nDo you think there is a chance to get this output?\n. Can you please tell me which failures? I can only see https://travis-ci.org/hhatto/autopep8/jobs/174259232. \n```\nThe command \"eval git fetch origin +refs/pull/286/merge:\" failed. Retrying, 2 of 3.\nfatal: Couldn't find remote ref refs/pull/286/merge\n```\nThis might be caused because I removed my branch after you merged this.\n. And these fixed are caused by that commit? Or are they because of further API changes of pycodestyle?\n. The tests are failing because https://github.com/tobixx/autopep8/blob/e501_open_bracket/autopep8.py#L516 \nprint(\n                            '--->  Not fixing {f} on line {l}'.format(\n                                f=result['id'], l=result['line']),\nfile=sys.stderr)\nl is detected as variable on pypy.\n```\n$ if [ \"$TRAVIS_PYTHON_VERSION\" != \"pypy\"* ]; then pycodestyle autopep8.py; fi\nautopep8.py:184:1: E305 expected 2 blank lines after class or function definition, found 0\nautopep8.py:371:1: E305 expected 2 blank lines after class or function definition, found 0\nautopep8.py:516:49: E741 ambiguous variable name 'l'\nautopep8.py:1537:1: E305 expected 2 blank lines after class or function definition, found 1\nautopep8.py:3732:1: E305 expected 2 blank lines after class or function definition, found 1\nThe command \"if [ \"$TRAVIS_PYTHON_VERSION\" != \"pypy\"* ]; then pycodestyle autopep8.py; fi\" exited with 1.\n```\nSo you can ignore this. It's a bug in pycodestyle on pypy.\n. You can pass the files as arguments. On the linux CLI tool you can for example use:\nautopep8 -i -- $(find -name '*keyword*.py'). See also https://github.com/PyCQA/pep8-naming/issues/33. This is https://github.com/hhatto/autopep8/issues/277 and https://github.com/hhatto/autopep8/issues/279 and https://github.com/hhatto/autopep8/issues/278. Can you provide an example please?. Reproducer (bash):\nautopep8 - <<EOF\nfoo(\n    description=\"Easily download, build, install, upgrade, and uninstall \"\n       \"Python packages\",\n      method='asdf'\n)\nEOF. You can use 3 backticks for the styling here.\ndef one_liner_with_several_commands(arg): do_summat(arg); summat_else(arg)\nOutput:\ndef one_liner_with_several_commands(arg): do_summat(arg)\nsummat_else(arg). @myint You didn't fix this but only added a workaround that this bug doesn't happen. Autopep8 should form this properly into the new line.. See also https://github.com/hhatto/autopep8/issues/276. ",
    "marius92mc": "Is this implemented?. ",
    "imdadahad": "Has this been added?. ",
    "golubitsky": "Confirming that the original issue is still relevant as of the following version:\n$ autopep8 --version\nautopep8 1.4.3 (pycodestyle: 2.4.0). ",
    "qiweiye": "still not work.\nqwy-macbp:~ qiweiye$ sudo pip uninstall autopep8 pep8\nUninstalling autopep8:\n  /Library/Python/2.7/site-packages/autopep8-1.0.1-py2.7.egg-info\n  /Library/Python/2.7/site-packages/autopep8.py\n  /Library/Python/2.7/site-packages/autopep8.pyc\n  /usr/local/bin/autopep8\nProceed (y/n)? Y\n  Successfully uninstalled autopep8\nUninstalling pep8:\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/DESCRIPTION.rst\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/METADATA\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/RECORD\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/WHEEL\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/entry_points.txt\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/namespace_packages.txt\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/pydist.json\n  /Library/Python/2.7/site-packages/pep8-1.5.6.dist-info/top_level.txt\n  /Library/Python/2.7/site-packages/pep8.py\n  /Library/Python/2.7/site-packages/pep8.pyc\n  /usr/local/bin/pep8\nProceed (y/n)? Y\n  Successfully uninstalled pep8\nqwy-macbp:~ qiweiye$ sudo pip install --upgrade autopep8\nDownloading/unpacking autopep8\n  Downloading autopep8-1.0.1.tar.gz (103kB): 103kB downloaded\n  Running setup.py (path:/private/tmp/pip_build_root/autopep8/setup.py) egg_info for package autopep8\nwarning: no files found matching 'test/example'\nwarning: no previously-included files matching '*.py' found under directory 'test/suite'\nwarning: no previously-included files matching '*.py' found under directory 'test/suite/out'\nwarning: no previously-included files found matching '.travis.yml'\nwarning: no previously-included files found matching 'CONTRIBUTING.rst'\nwarning: no previously-included files found matching 'Makefile'\nwarning: no previously-included files found matching 'coveralls.bash'\nwarning: no previously-included files found matching 'hooks'\nwarning: no previously-included files found matching 'hooks/pre-push'\nwarning: no previously-included files found matching 'install_hooks.bash'\nwarning: no previously-included files found matching 'test/.gitignore'\nwarning: no previously-included files found matching 'test/acid.py'\nwarning: no previously-included files found matching 'test/acid_github.py'\nwarning: no previously-included files found matching 'test/acid_pypi.py'\nwarning: no previously-included files found matching 'test/suite'\nwarning: no previously-included files found matching 'test/suite/out'\nwarning: no previously-included files found matching 'test/vim_autopep8.py'\nwarning: no previously-included files found matching 'tox.ini'\nwarning: no previously-included files found matching 'update_readme.py'\nDownloading/unpacking pep8>=1.5.5 (from autopep8)\n  Downloading pep8-1.5.6-py2.py3-none-any.whl\nInstalling collected packages: autopep8, pep8\n  Running setup.py install for autopep8\nwarning: no files found matching 'test/example'\nwarning: no previously-included files matching '*.py' found under directory 'test/suite'\nwarning: no previously-included files matching '*.py' found under directory 'test/suite/out'\nwarning: no previously-included files found matching '.travis.yml'\nwarning: no previously-included files found matching 'CONTRIBUTING.rst'\nwarning: no previously-included files found matching 'Makefile'\nwarning: no previously-included files found matching 'coveralls.bash'\nwarning: no previously-included files found matching 'hooks'\nwarning: no previously-included files found matching 'hooks/pre-push'\nwarning: no previously-included files found matching 'install_hooks.bash'\nwarning: no previously-included files found matching 'test/.gitignore'\nwarning: no previously-included files found matching 'test/acid.py'\nwarning: no previously-included files found matching 'test/acid_github.py'\nwarning: no previously-included files found matching 'test/acid_pypi.py'\nwarning: no previously-included files found matching 'test/suite'\nwarning: no previously-included files found matching 'test/suite/out'\nwarning: no previously-included files found matching 'test/vim_autopep8.py'\nwarning: no previously-included files found matching 'tox.ini'\nwarning: no previously-included files found matching 'update_readme.py'\nInstalling autopep8 script to /usr/local/bin\nSuccessfully installed autopep8 pep8\nCleaning up...\nqwy-macbp:~ qiweiye$ auto\nautoautotest   autodiskmount  automator      automount      autopep8       autotest\nqwy-macbp:~ qiweiye$ autopep8 /tmp/1.py \nTraceback (most recent call last):\n  File \"/usr/local/bin/autopep8\", line 5, in \n    from pkg_resources import load_entry_point\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py\", line 2603, in \n    working_set.require(requires)\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py\", line 666, in require\n    needed = self.resolve(parse_requirements(requirements))\n  File \"/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py\", line 565, in resolve\n    raise DistributionNotFound(req)  # XXX put more info here\npkg_resources.DistributionNotFound: pep8>=1.5.5\nqwy-macbp:~ qiweiye$ \n. ",
    "collinanderson": "I agree this is not working correctly. autopep8 isn't splitting multiple arguments onto different lines.\n. ",
    "maikhoepfel": "Sure, I think it was this one: https://github.com/django-oscar/django-oscar/blob/9bf17ce609e8bb857f59b819dafa87df0b4272d0/oscar/apps/voucher/migrations/0001_initial.py But it failed with loads (if not all) of the migration files.\n. ",
    "dmwelch": "I'm seeing this behavior using the Emacs py-autopep8 mode for Nipype code: https://github.com/BRAINSia/rs-fMRI-pilot/blob/master/preprocessing.py\n. ",
    "wernerfb": "Forget it, just had another look at PEP8 and I see it is because I have an argument on the first line.\n. ",
    "stuaxo": "Hi,\n   Just hit this in Ubuntu 64 bit, working in a virtualenv - I've tried everything in the troubleshooting (except sudo - as that would be outside the virtualenv).\nS\n. installing autopep8\n$ \ue0b0pip install autopep8\nCollecting autopep8\n  Using cached autopep8-1.2.tar.gz\nCollecting pep8>=1.5.7 (from autopep8)\n  Using cached pep8-1.6.2-py2.py3-none-any.whl\nInstalling collected packages: pep8, autopep8\n  Running setup.py install for autopep8\nSuccessfully installed autopep8-1.2 pep8-1.6.2\nversions:\n$ python --version\nPython 2.7.9\n$ which pep8\n/mnt/data/home/stu/.virtualenvs/3d/bin/pep8\n$ which autopep8\n/mnt/data/home/stu/.virtualenvs/3d/bin/autopep8\noutput of autopep8\n$ autopep8\nTraceback (most recent call last):\n  File \"/mnt/data/home/stu/.virtualenvs/3d/bin/autopep8\", line 5, in <module>\n    from pkg_resources import load_entry_point\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 2671, in <module>\n    working_set.require(__requires__)\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 654, in require\n    needed = self.resolve(parse_requirements(requirements))\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 552, in resolve\n    raise DistributionNotFound(req)\npkg_resources.DistributionNotFound: pep8>=1.5.7\nLooking inside the autopep8 script:\n```\n!/mnt/data/home/stu/.virtualenvs/3d/bin/python\nEASY-INSTALL-ENTRY-SCRIPT: 'autopep8==1.2','console_scripts','autopep8'\nrequires = 'autopep8==1.2'\nimport sys\nfrom pkg_resources import load_entry_point\nif name == 'main':\n    sys.exit(\n        load_entry_point('autopep8==1.2', 'console_scripts', 'autopep8')()\n    )\n```\nDoing some tracing ...\n```\n$ \ue0b0python\nPython 2.7.9 (default, Apr  2 2015, 15:33:21) \n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nfrom pkg_resources import load_entry_point\nload_entry_point('autopep8==1.2', 'console_scripts', 'autopep8')\nTraceback (most recent call last):\n  File \"\", line 1, in \n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 305, in load_entry_point\n    return get_distribution(dist).load_entry_point(group, name)\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 2244, in load_entry_point\n    return ep.load()\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 1953, in load\n    if require: self.require(env, installer)\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 1966, in require\n    working_set.resolve(self.dist.requires(self.extras),env,installer))\n  File \"/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.py\", line 552, in resolve\n    raise DistributionNotFound(req)\npkg_resources.DistributionNotFound: pep8>=1.5.7\n```\n\n\n\nThis is interesting:\nIn [8]: pkg_resources.require(\"setuptools\")\nOut[8]: [distribute 0.6.14 (/mnt/data/home/stu/.virtualenvs/3d/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg)]\nBut no pep8 !\n```\n----> 1 pkg_resources.require(\"pep8\")\n/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.pyc in require(self, *requirements)\n    652         \"\"\"\n    653 \n--> 654         needed = self.resolve(parse_requirements(requirements))\n    655 \n    656         for dist in needed:\n/mnt/data/home/stu/.virtualenvs/3d/local/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg/pkg_resources.pyc in resolve(self, requirements, env, installer, replacement)\n    550                         # unfortunately, zc.buildout uses a str(err)\n    551                         # to get the name of the distribution here..\n--> 552                         raise DistributionNotFound(req)\n    553                 to_activate.append(dist)\n    554             if dist not in req:\nDistributionNotFound: pep8\n```\nTrying with a fresh virtualenv, new pip and setuptools and it works ..\n```\n$ mkvirtualenv newenv\nRunning virtualenv with interpreter /mnt/data/home/stu/.virtualenvs/3d/bin/python2\nUsing real prefix '/usr'\nNew python executable in newenv/bin/python2\nAlso creating executable in newenv/bin/python\nInstalling setuptools, pip...done.\n$ pip install -U setuptools pip\nDownloading/unpacking setuptools from https://pypi.python.org/packages/3.4/s/setuptools/setuptools-18.1-py2.py3-none-any.whl#md5=b6c8eae6b3636dd952e71135805ee156\n  Downloading setuptools-18.1-py2.py3-none-any.whl (461kB): 461kB downloaded\nDownloading/unpacking pip from https://pypi.python.org/packages/py2.py3/p/pip/pip-7.1.0-py2.py3-none-any.whl#md5=b108384a762825ec20345bb9b5b7209f\n  Downloading pip-7.1.0-py2.py3-none-any.whl (1.1MB): 1.1MB downloaded\nInstalling collected packages: setuptools, pip\n  Found existing installation: setuptools 12.2\n    Uninstalling setuptools:\n      Successfully uninstalled setuptools\n  Found existing installation: pip 1.5.6\n    Uninstalling pip:\n      Successfully uninstalled pip\nSuccessfully installed setuptools pip\nCleaning up...\n newenv $ \n```\nThen I tried with a fresh virtualenv without updating pip and setuptools ..  and it works again ..   hmmm.\nI've kept the misbehaving venv around, can try and dig into this further if it's helpful.\n. You're right, and I ended up fixing it ... but it was a bit weird:\npip install -I -U setuptools\nCollecting setuptools\n  Using cached setuptools-18.1-py2.py3-none-any.whl\nInstalling collected packages: setuptools\nSuccessfully installed setuptools-18.1\nversion is still wrong though...\n```\npython\nPython 2.7.9 (default, Apr  2 2015, 15:33:21) \n[GCC 4.9.2] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\n\nimport pkg_resources\npkg_resources.require(\"setuptools\")\n[distribute 0.6.14 (/mnt/data/home/stu/.virtualenvs/3d/lib/python2.7/site-packages/distribute-0.6.14-py2.7.egg)]\n```\n\n\n\non a whim I tried using easy_install ... which tried to install the wrong version:\n```\neasy_install -U setuptools\ninstall_dir /mnt/data/home/stu/.virtualenvs/3d/lib/python2.7/site-packages/\nSearching for distribute\nReading http://pypi.python.org/simple/distribute/\nBest match: distribute 0.7.3\nDownloading https://pypi.python.org/packages/source/d/distribute/distribute-0.7.3.zip#md5=c6c59594a7b180af57af8a0cc0cf5b4a\nProcessing distribute-0.7.3.zip\nRunning distribute-0.7.3/setup.py -q bdist_egg --dist-dir /tmp/easy_install-5lZTLw/distribute-0.7.3/egg-dist-tmp-taX3Z1\nwarning: install_lib: 'build/lib.linux-x86_64-2.7' does not exist -- no Python modules to install\nRemoving distribute 0.6.14 from easy-install.pth file\nAdding distribute 0.7.3 to easy-install.pth file\nInstalled /mnt/data/home/stu/.virtualenvs/3d/lib/python2.7/site-packages/distribute-0.7.3-py2.7.egg\nProcessing dependencies for distribute\nFinished processing dependencies for distribute\n```\n...then I reran the upgrade with pip again (now in the randomly-trying-things-phase):\npip install -I -U setuptools\nCollecting setuptools\n  Using cached setuptools-18.1-py2.py3-none-any.whl\nInstalling collected packages: setuptools\nSuccessfully installed setuptools-18.1\nchecked the version and it is correct!\npython -c \"import pkg_resources; print pkg_resources.require('setuptools')\"\n[setuptools 18.1 (/mnt/data/home/stu/.virtualenvs/3d/lib/python2.7/site-packages)]\nand autopep8 works\nautopep8\nusage: autopep8 [-h] [--version] [-v] [-d] [-i] [--global-config filename]\n                [--ignore-local-config] [-r] [-j n] [-p n] [-a]\n                [--experimental] [--exclude globs] [--list-fixes]\n                [--ignore errors] [--select errors] [--max-line-length n]\n                [--line-range line line] [--indent-size n]\n                [files [files ...]]\nautopep8: error: incorrect number of arguments\nBah, I should've backed up the virtualenv so this would be diagnosable, not sure what the blockage was but it seems to work now.\n. ",
    "tiantianquan": "@stuaxo it works, thanks\n. ",
    "nbari": "After adding the lines this is the output:\nsys.stdin.encoding: None                                                                                                                                                                \nlocale.getpreferredencoding() UTF-8                                                                                                                                                     \nTraceback (most recent call last):                                                                                                                                                      \nFile \"/usr/local/bin/autopep8\", line 9, in <module>                                                                                                                                   \n    load_entry_point('autopep8==1.0.4a0', 'console_scripts', 'autopep8')()                                                                                                              \nFile \"/usr/local/lib/python2.7/site-packages/autopep8.py\", line 3633, in main                                                                                                         \n    encoding=sys.stdin.encoding))                                                                                                                                                       \nUnicodeEncodeError: 'ascii' codec can't encode characters in position 357-358: ordinal not in range(128)\nthe output of set fileencoding is emtpy: \nfileencoding=\nOn vim if setting:\nset encoding=utf-8\nset fileencoding=utf-8\nStill get the same problem\nRunning directly from the terminal it works:\ncat b.py | autopep8 - --aggressive --aggressive --indent-size 4\nsys.stdin.encoding: None\nlocale.getpreferredencoding() UTF-8\n. within python:\n```\n\npython\nPython 2.7.6 (default, Mar  1 2014, 16:02:50) \n[GCC 4.2.1 Compatible FreeBSD Clang 3.3 (tags/RELEASE_33/final 183502)] on freebsd10\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n\n\nimport sys;print sys.stdin.encoding\nUTF-8\n```\n\n\n\nFrom stdin:\n```\n\necho 'import sys;print sys.stdin.encoding' | python                                                                                                                                 \nNone\n```\n. setting PYTHONIOENCODING to utf-8 solves the problem \n\nsetenv PYTHONIOENCODING utf-8\n. It works :+1:  many thanks .-)\n. ",
    "asottile": "urgh, I need to rework the \"acid\" tests.  Hold on before reviewing :)\n. Should be good now :D\n. I'm writing a pre-commit framework and would like to get autopep8 working with it.  The tool provides a framework for including projects and running them at commit time given that the tool can provide a different returncode when it either fails linting or performs a fix on the files.  Yelp is already using this with the following tools which use returncode to indicate this (pylint, pyflakes, flake8, scss-lint, jshint, rubylint, as well as some other hooks we've written internally).  It'd be super awesome if we could add this really useful tool to that list :)\n(I'll post a link to it once we make it public. eta next wednesday).\nGiven that I'd be willing to compromise and take the precedent from git status and provide an --exit-code option.\n. git status is pretty heavy weight (and especially expensive on merge conflict commits) which is why we have taken the returncode approach.\n. mk I'll take a crack at doing that then.\n. Started doing that, it's a bit awkward to construct the object needed for options though :/ any suggestions?\n. I find myself doing this a bunch:\nret = autopep8.fix_multiple_files(\n                [filename],\n                autopep8.parse_args([filename]),\n            )\nSeems a little awkward to pass filenames in twice?  Is there a better way?\n. Actually don't review what I just pushed.  If we're not going to do the return value in autopep8 I think it really only makes sense to fix fix_file(...) to return the modified source.  Since the interface there is a little less awkward:\nopts = parse_args(...)\nfor filename in opts.files:\n    # ...\nAlso: fix_multiple_files doesn't reparse opts so the above code doesn't work :(\n. Actually I'll just write a wrapper with fix_code which seems to be the closest to the interface I'd want.\nSorry for wasting your time with this PR!\n. I believe this got fixed in pycodestyle and can be closed:\n```console\n$ autopep8 t.py \nclass Foo:\n    classification: int\n    definition: int\n    _def: int\n    _class: int\n```. I don't think autopep8 will do this on its own, but I've combined autopep8 with add-trailing-comma to accomplish this. hah nice! I asked for this way back in 2014, good to see it is finally implemented: https://github.com/hhatto/autopep8/issues/154. #441 may be the same thing, though on a whole different level. Apparently the configuration here is important.\nini\n[pep8]\nignore=E265\nis the minimum to reproduce. A git bisect:\n```bash\n!/usr/bin/env bash\nset -euxo pipefail\nout=\"$(cd .. && autopep8 --diff t.py 2>&1 || true)\"\nif grep -q Error: <<< \"${out}\"; then\n    exit 125\nfi\nif grep -q '^+' <<< \"${out}\"; then\n    exit 1\nelse\n    exit 0\nfi\n```\nbash\ngit bisect start && git bisect good v1.4 && git bisect bad v1.4.1 && git bisect run ./test.sh\nEnds with:\nThere are only 'skip'ped commits left to test.\nThe first bad commit could be any of:\n6ae797e98a422cc6e1d18dd3c30f250bca1e594b\n6a681352fd268da8e6316ea324f3248c09698cde\nda9c62a86ba7c7a1c88fccf85418b2ec11f04e95\n986469d0f4776efdd3810673eb35d619d73890d9\nWe cannot bisect more!\nbisect run cannot continue any more\nThose commits were skipped because they stacktraced:\nrunning ./test.sh\n++ cd ..\n++ autopep8 --diff t.py\n++ true\n+ out='Traceback (most recent call last):\n  File \"/tmp/autopep8/venv/bin/autopep8\", line 11, in <module>\n    load_entry_point('\\''autopep8'\\'', '\\''console_scripts'\\'', '\\''autopep8'\\'')()\n  File \"/tmp/autopep8/autopep8.py\", line 4044, in main\n    fix_multiple_files(args.files, args, sys.stdout)\n  File \"/tmp/autopep8/autopep8.py\", line 3956, in fix_multiple_files\n    _fix_file((name, options, output))\n  File \"/tmp/autopep8/autopep8.py\", line 3937, in _fix_file\n    fix_file(*parameters)\n  File \"/tmp/autopep8/autopep8.py\", line 3326, in fix_file\n    fixed_source = fix_lines(fixed_source, options, filename=filename)\n  File \"/tmp/autopep8/autopep8.py\", line 3306, in fix_lines\n    fixed_source = fix.fix()\n  File \"/tmp/autopep8/autopep8.py\", line 571, in fix\n    aggressive=self.options.aggressive))\n  File \"/tmp/autopep8/autopep8.py\", line 513, in _fix_source\n    modified_lines = fix(result)\n  File \"/tmp/autopep8/autopep8.py\", line 1266, in fix_w504\n    target_operator = target[operator_position[0]:operator_position[1]]\nTypeError: '\\''NoneType'\\'' object is not subscriptable'\n+ grep -q Error:\n+ exit 125. seems to work, thanks for the fix!. If you're looking for another tool in the meantime (which doesn't depend on pycodestyle) to fix these, pyupgrade has a fixer for this. just checked, this also happens with 1.4.3. seems an ignore setting is required to trigger this as well now that I'm debugging it. this one is quite interesting!\n```\n$ .tox/py36/bin/autopep8 noop.py  --ignore=E501 --verbose\n[file:t.py]\n--->  Applying global fix for E265\n--->  1 issue(s) to fix {'W504': {6}}\n--->  1 issue(s) to fix {'W503': {7}}\nq = 1\ndef x(y, z):\n    if (\n            y and\n            z\n    ):\n        pass\n```\n```\n$ .tox/py36/bin/autopep8 t.py  --ignore=E501 --verbose\n[file:t.py]\n--->  Applying global fix for E265\n--->  2 issue(s) to fix {'E303': {5}, 'W504': {7}}\n--->  1 issue(s) to fix {'W503': {7}}\n--->  1 issue(s) to fix {'W504': {6}}\nq = 1\ndef x(y, z):\n    if (\n            y\n            and z\n    ):\n        pass\n```\nI suspect the \"fix\" here is that if the ignore does not handle the conflicting options, autopep8 should ignore the conflicting options. heh, I noticed autopep8 also has this functionality -- wonder why it didn't fix it?. no problem! any idea why autopep8 didn't catch/fix these?. you probably want apt install python3-setuptools or to use python3 -m pip install --user setuptools. that's a different error, that's black failing to install because you're running python3.5 probably?\nmint is ubuntu based right? you might have some luck with deadsnakes if you need a newer version of python. looks like you're building python from source -- you'll need at least libffi-dev libssl-dev libreadline-dev (looks like the one it's erroring on is libffi-dev specifically)\nIf you want to just use binary packages you can set up deadsnakes via:\nbash\nsudo add-apt-repository ppa:deadsnakes\nsudo apt update\nsudo apt install python3.6\n(or something similar). ",
    "houbysoft": "Yeah makes sense, I just needed it to work quickly and didn't bother with\nchanging it to passing variables properly. I might go back to change it to\ndo that at some point.\nOn Wednesday, September 3, 2014, Steven Myint notifications@github.com\nwrote:\n\nI'd prefer not to merge this as it is, given that it mutates a global\nconstant.\nI may in the distance future look at properly passing in variables to\navoid mutating the module-level DEFAULT_INDENT_SIZE constant. I've never\nfelt it worth the effort in the past given that --indent-size goes\nagainst PEP 8 anyway.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/hhatto/autopep8/pull/159#issuecomment-54392272.\n. \n",
    "welbornprod": "I found a minimal case that will reproduce this, thanks to an Issue submitted to SublimeAutoPEP8 (I had contacted the repo at BitBucket, and then found this one).\nExample (in BASH terminal):\n```\nprintf \"\ndef tmp(g):\n    g(4)))\nif not True:\n    pass\" | autopep8 -\n\n```\nThis will also cause autopep8 to freeze.\n. Glad I could help, and thanks for fixing it so fast. I'm gonna try to get this fix into Python PEP8 Autoformat one way or another (probably just replacing their autopep8.pyc with the fixed one until they update.)\n. ",
    "Kos": "I'm mostly running autopep8 on code I don't own and I prefer to keep the changes minimal when clearing PEP8 violations. But point taken, and thanks for looking at it!\n. ",
    "SmileyChris": "What's E309 anyway? It's not referenced in the pep8 docs, and (looking at code) seems just plain incorrect to include docstrings as one of the definitive conditions of this.\n. ",
    "yvan-sraka": "OS X Yosemite 10.10.1 (14B25)\nPython 2.7.8 (default, Oct 17 2014, 23:49:37) \nPython 3.4.2 (default, Oct 17 2014, 23:56:12) \n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.51)] on darwin\n$ cat t.py\nif (0)/0):\n    break\n$ autopep8 --version\nautopep8 1.0.4\n$ autopep8 t.py\n. Sorry, it's work with version 1.1\n$ cat t.py\nif (0)/0):\n    break\n$ autopep8 --version\nautopep8 1.1\n$ autopep8 t.py\nif (0) / 0):\n    break\n. ",
    "lvh": "(This is valid Python, apparently, but I don't think it should do that)\n. ",
    "mario-grgic": "When I run this script from MacVim \n```\n!/usr/bin/python\nimport sys\nimport locale\nprint sys.stdin.encoding\nprint locale.getpreferredencoding()\nprint sys.getdefaultencoding()\nprint sys.getfilesystemencoding()\n```\nI get the following output:\nNone\nascii\nutf-8\n. This fixes it. Thank you. \n. ",
    "schlamar": "Could be this one: https://github.com/pypa/pip/issues/1891\n. Ah, this is the same exception than in #229\n. This is a pretty weird upstream bug: http://bugs.python.org/issue25918\n. ",
    "PiDelport": "Thanks!\n. ",
    "jheld": "I suggest there is a 3rd (and maybe is the same) issue:\nAs an example:\nOriginally: \nbar = foo.EatPlane(opt0=anOpt['opt0'], opt1=anOpt['opt1'], opt2=anOpt['opt2'], opt3=anOpt['opt3'], aField='someRandomValue', anotherRandom='anotherRandomValue')\nBecomes:\nbar = foo.EatPlane(opt0=anOpt['opt0'], opt1=anOpt['opt1'], opt2=anOpt['opt2'], opt3=anOpt[\n'opt3'], aField='someRandomValue', anotherRandom='anotherRandomValue')\nPlease excuse my lack of \"_\"'d variable and method names. This is purely an example.\nautopep8 version: 1.1\n. Nevermind, at least for my example, seems this is fixable via the -a argument for \"aggressive\" non-whitespace changes. I still don't like having to specify the extra command, but at the very least the code is capable of handling it.\n. ",
    "StanczakDominik": "Given 4a02947 seems to have solved at least some of this, could this perhaps be closed?. ",
    "kiryph": "Thank you for pointing this out. However, the proposed mapping <C-I> is unfortunate (overrides important default mapping) and the usage of this mapping is from my point of view not vimish (cannot be combined with motions and textobjects). I think the gq functionality is precisely meant for this.\nUsage of visual mode should only be optional not mandatory to apply autopep8 to a code fragment.\nI have found another suggestion on stackoverflow to disable indenting. I can live with this because vim has beside gq (formatprg) the = (equalprg) mapping for reindentation.\nJust for reference a list of relevant vim plugins, which however also do not setup gq properly:\nhttps://github.com/tell-k/vim-autopep8\nhttps://github.com/klen/python-mode\nhttps://github.com/Chiel92/vim-autoformat (uses gq only for visual mode)\nTo fix indentation the python source code itself contains a script reindent.py:\nhttp://svn.python.org/view/python/trunk/Tools/scripts/reindent.py?revision=66903&view=markup\n. Another 2 cents: having the same command gq working for different languages is much more user friendly. Consistency should always be preferred.\n. I understand your concern.\nIf I can disable just the reindentation, I happy with it. Thank you for helping me out.\nBTW: The pep8 tool has changed some of the error codes you are referencing in your README.md https://github.com/hhatto/autopep8#features and accept as parameters to --ignore.\nI don't know whether you want to stay in sync. If so, an update would be required.\n\nA little motivation why I really care about this:\nIn principle distinguishing local changes from those which need full context could allow user to get a better understanding of the different autocorrections performed by autopep8. All changes at once can become overwhelming. Applying autopep8 only to small fragments of code is much more tracktable. Applying autopep8 to the whole file will often lead to doing it blindly.\nI'd prefer to write/change code and adapt it to pep8 standard as far as possible. More complex changes regarding pep8 compliance which can only applied to the full file, happen at  a different stage of code writing similar to commiting. But autopep8 changes should never become a commit on their own.\n\nAnother solution I would like to use but don't know how to do it:\nI like your --range option. However I have no idea, how I can automatically retrieve from vim the appropriate range lines when I use gqq (line), gqap (paragraph), gqii (custom indent-object by michaeljsmith), gqac (custom class/function text object by Nat Wiliams).\nAnyhow, thanks for listening and your tool to conveniently adapt code for pep8.\n. ",
    "blueyed": "I see, so the point is to use -aa for this then.\nHowever, it should not put them all on a single line, but use up to max-line-length for it, shouldn't it?\n. ",
    "DavidSnider": "Ah, I apologize.\n$ autopep8 --version\nautopep8 0.9.1\n$ pep8 --version\n1.4.6\n$ python --version\nPython 2.7.6\n$ uname -a\nLinux me 3.13.0-49-generic #83-Ubuntu SMP Fri Apr 10 20:11:33 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\nFor reference, I installed autopep8 and pep8 today through \nsudo apt-get install ...\n. Ah I see that. By any chance do you know if it's possible to upgrade to those versions on ubuntu? \nIf not, feel free to close. Thanks!\n. ",
    "fAntel": "Thank you. With this options autopep8 swap spaces only in multiline lists and it easy to fix.\n. ",
    "jaraco": "This issue persists, as it's still converting tabs to spaces in multiline lists as reported above.\n```\n$ git diff \ndiff --git a/docs/conf.py b/docs/conf.py\nindex 8bc8298..f85a3be 100644\n--- a/docs/conf.py\n+++ b/docs/conf.py\n@@ -10,23 +10,23 @@ extensions = [\n master_doc = 'index'\nlink_files = {\n-       '../CHANGES.rst': dict(\n-               using=dict(\n-                       GH='https://github.com',\n-               ),\n-               replace=[\n-                       dict(\n-                               pattern=r'(Issue )?#(?P\\d+)',\n-                               url='{package_url}/issues/{issue}',\n-                       ),\n-                       dict(\n-                               pattern=r'^(?m)((?Pv?\\d+(.\\d+){1,2}))\\n[-=]+\\n',\n-                               with_scm='{text}\\n{rev[timestamp]:%d %b %Y}\\n',\n-                       ),\n-                       dict(\n-                               pattern=r'PEP- ',\n-                               url='https://www.python.org/dev/peps/pep-{pep_number:0>4}/',\n-                       ),\n-               ],\n-       ),\n+    '../CHANGES.rst': dict(\n+        using=dict(\n+            GH='https://github.com',\n+        ),\n+        replace=[\n+            dict(\n+                pattern=r'(Issue )?#(?P\\d+)',\n+                url='{package_url}/issues/{issue}',\n+            ),\n+            dict(\n+                pattern=r'^(?m)((?Pv?\\d+(.\\d+){1,2}))\\n[-=]+\\n',\n+                with_scm='{text}\\n{rev[timestamp]:%d %b %Y}\\n',\n+            ),\n+            dict(\n+                pattern=r'PEP- ',\n+                url='https://www.python.org/dev/peps/pep-{pep_number:0>4}/',\n+            ),\n+        ],\n+    ),\n }\n```\nAlthough for fAntel, that was easy to fix, it's obnoxious on code bases that have more than a few multiline lists.\nautopep8 should honor an option not to convert tabs to spaces.. > I think that alignment is more important than fitting\n\nothers likely prefer proper line length over proper alignment.\nwhere one of two issues is inevitable\n\nI find this conflict all the time, but I don't think that one of two issues is inevitable. In every case I've encountered, even in heavily nested dictionaries, it's possible to reindent to satisfy both.\nIn the example given, based on other output I've seen from autopep8, I'd expect to see this in the output:\nquery_this_month = query.phorms(\n            start, end, qoeivtjdidje[spid_start:spid_end])\n        bait_last_years = (\n            bringee_and_deploy(\n                query_last_month,\n                db=testtest.NEWERSS_DB)).kkoikfme()\nIt satisfies both E128 and E501, presumably satisfies the intention of the authors of PEP 8, and meets the goals of autopep8 (whitespace-only changes).\nI'd also be satisfied with other complaint validations.\nI think it's worthwhile postponing any 'conflict prioritization' and focusing first on addressing these slightly harder yet not inevitable conflicts.. ",
    "dbogatov": "Could we reopen the issue?\nWe need to have option to use tabs natively - not in a hacky way, like disabling errors.. ",
    "mbanders": "I could change the \"if re.match\" to only match if there is one \" in \" and not match if there are more.\n. I suppose, perhaps also autopep8 shouldn't include E713 in the list of things it can fix.\n. ",
    "PLPeeters": "Is there anything planned regarding this? It really prevents me from using AutoPEP8 as I have to go over the code again to reindent all dictionaries, lists and tuples correctly. If this wasn't necessary, I'd use it as a Git pre-commit hook, which would be truly awesome.\nAgain, I'd happily submit a pull request for this if someone could tell me which part of the code handles this. I've tried reading through it multiple times but couldn't figure it out.\n. Having an indent-size option is already non-PEP8, since PEP8 clearly states lines should be indented by 4 spaces. As such, since there's an option to increase the indent size already, I believe it should apply to everything, including dictionaries, etc. No editor is going to convert a tab to n spaces if it's in front of a normal line and to n/2 spaces if it's in front of a dictionary/tuple/list indent, which is why I am suggesting this.\n. I will check out yapf, though :)\n. I really don't, but for some reason that's what they use at work because Vim is configured with 8 spaces as indention by default...\n. ",
    "moylop260": "I got it\nThank you for reply\n. @hhatto and @myint \nWhat do you think about last comments?\n. ",
    "lmignon": "@myint It would be nice to have it in autopep8 but ignored by default. This kink of option ease the migration of legacy code.\n. ",
    "pedrobaeza": "I agree it can be an option to activate via an argument flag\n. ",
    "voarsh": "Ah! Sorry about that! I just saw that a few minutes ago!\nThanks, it works wonderfully. :)  ^^\n. ",
    "AnilRedshift": "autopep8==1.2\n. Looks like this is fixed by https://github.com/hhatto/autopep8/pull/197 but that hasn't been released as an image yet. Since 3.5 is officially out now, can you please rev autopep8 to 1.3?\n. ",
    "gomyar": "Howdy folks. The following code also suffers from the same behaviour:\n```\nclass Migration(migrations.Migration):\ndependencies = [\n]\n\noperations = [\n    migrations.CreateModel(\n        name='AdvancedOddComparison',\n        fields=[\n            ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),\n            ('named_name', models.CharField(max_length=64)),\n            ('parameter', models.CharField(max_length=64)),\n            ('operand', models.CharField(max_length=10)),\n            ('advanced_operand', models.CharField(max_length=10)),\n            ('number_of_years', models.IntegerField(null=True, blank=True)),\n            ('output', models.CharField(max_length=512, blank=True)),\n        ],\n        options={\n            'db_table': 'dbtable_text_comparison',\n            'managed': True,\n        },\n    ),\n]\n\n```\nand after autopep8 -i appears like this:\n```\nclass Migration(migrations.Migration):\ndependencies = [\n]\n\noperations = [\n    migrations.CreateModel(\n        name='AdvancedOddComparison',\n        fields=[\n            ('id', models.AutoField(verbose_name='ID',\n                                    serialize=False, auto_created=True, primary_key=True)),\n            ('named_name', models.CharField(max_length=64)),\n            ('parameter', models.CharField(max_length=64)),\n            ('operand', models.CharField(max_length=10)),\n            ('advanced_operand', models.CharField(max_length=10)),\n            ('number_of_years', models.IntegerField(null=True, blank=True)),\n            ('output', models.CharField(max_length=512, blank=True)),\n        ],\n        options={\n            'db_table': 'dbtable_text_comparison',\n            'managed': True,\n        },\n    ),\n]\n\n```\nThis being a django migration would benefit greatly I believe if this worked.\nAm using:\nautopep8 (1.2.1)\npep8 (1.7.0)\nAnd have no custom pep8 config\nHope this helps,\nthanks.\n. ",
    "balasankarc": "I am extremely sorry. It was an issue with autopep8 version I was using. I purged the old version and it works fine now. Sorry for the inconvenience caused.\n. ",
    "xliiv": "I made this line (for test purpose):\n```\nsome_var = 3  #noqa\n```\nThen i ran autopep8 and the result was:\n```\nsome_var = 3  #noqa\n```\nI'd expect this line won't be touched, instead of that it was corrected.\n. ",
    "Javacym": "run autopep8 --version   failed to create process\n. so i means this package only work in linux-like system?\nautopep8 --version  result:failed to create process.\nwhich autopep8\npep8 --version result:1.6.2\nwhich pep8\npython --version  result:Python 3.5.0\nwhich python\nuname -a\n. Thanks a lot!!!  I change this file C:\\Program Files\\Python 3.5\\Scripts\\autopep8-script.py \nbefore\n! c:\\program files\\python 3.5\\python.exe\nafter\n! \"c:\\program files\\python 3.5\\python.exe\"\nthen i work ,but  i do not know why\n. ",
    "troshko111": "I don't quite understand why the issue was closed, It seems like a bug, steps to repro:\n- Install latest Python 3.x (x64) for Windows using regular installer into default location (C:\\Program Files\\Python35\n- Install autopep8 using pip\nautopep8 is broken and won't start because it's missing quotes in \"C:\\Program Files\\Python35\\Scripts\\autopep8-script.py\" on line 1 which is:\n#!c:\\program files\\python35\\python.exe\nSo If you have python installed in the location with spaces (which is the default for Windows Installer), autopep8 won't start\n@myint can you consider reopening?\n. @myint Just did a clean repro to double check:\n- Set up clean Windows VM (2012 R2, but this should not make any difference)\n- Downloaded official Python installer for x64\n- Installed specifying For All Users (checking this sets Python installation dir to C:\\Program Files\\Python35)\n- pip install pep8\nC:\\Users\\localadmin>pep8 --version\n1.7.0\n- pip install --upgrade autopep8\nC:\\Users\\localadmin>autopep8 --version\nfailed to create process.\nC:\\Users\\localadmin>pep8 --version\n1.7.0\nSo it seems to be autopep8 related (not handling paths with spaces)\n. ",
    "zcy921716": "Yes I still have this issues at the moment when I want to use python-autopep8 or auto-beauty plugin on atom. I used pip to install the autopep8 and then failed to use it whatever directly using in command window or with plugins. Then I added the \" \" issue was solved. I think it should be a bug needed to repair it which related to autopep8. ",
    "linrongbin16": "I solved my \"failed to create process\" issue ! Here's the explanation and solution.\nThe core reason is I uninstalled and reinstalled python 3.7.2 and autopep8 on different location on my windows 10.\nFirst position is C:\\Python37, second is C:\\data\\Python37.\nFirst time after install python in C:\\Python37, I installed autopep8 with administrator:\npip install autopep8.\nSecond time, I uninstalled and reinstalled python37 in C:\\data\\Python37, I also reinstalled autopep8 with typing pip install autopep8 with administrator. While pip already found the old autopep8, said requirement already satisfied, then skipped installation.\nSo I got this error with autopep8 --version:\nfailed to create process\nActually, this autopep8 is the old one, it's in %USERPROFILE%\\AppData\\Roaming\\Python\\Python37\\Scripts, In this folder I found that autopep8-script.py first line is something like:\n```\n!c:\\python37\\python.exe\n```\nObviously this autopep8 is related to the old python, autopep8-script.py cannot find the right position of the new python.\nSo I removed whole directory %USERPROFILE%\\AppData\\Roaming\\Python and reinstalled with pip, everything goes well again !. ",
    "jayvdb": "Note that in https://github.com/hhatto/autopep8/commit/73837064845802307e7d31e29e3ebc34626dd00f --range was given new name --line-range to be more correct.  I guess --range is implicitly deprecated.. Create a new issue for reformatting multi-statement lines?\nMy guess is that lambda's make a proper fix quite non-trivial.. With https://github.com/PyCQA/pycodestyle/issues/692 fixed and released, presumably this enhancement to autopep8 can now be done.. > I downloaded the package straight from VS Studio marketplace\nWhich package?\nThis repo doesnt publish anything into the VS Studio marketplace, so it is likely that you are downloading an addon created by someone else.. You can probably solve the problem by adding C:\\Users\\MyNameHere\\AppData\\Local\\Programs\\Python\\Python36-32\\Scripts do your PATH environment variable.\nAdding this to the PATH automatically is an option in the Python3.6 installer, and perhaps it wasnt enabled when you did the Python3.6 install.\n\nWhy is all this stuff in unpredictable places?\n\nWindows dictates C:\\Users\\MyNameHere\\AppData\\Local\\ is where many types of files should go, especially if they were installed by the user instead of being installed by a MSI.  That is part of why pip installs into that area.. Sounds like a problem with how pycharm is configured to use autopep8.  Maybe there is a literal project path in the command line which needs to be replaced with a variable provided by pycharm.. /home/haijun/.local/bin is probably not in your PATH.. ",
    "shadowwalkersb": "Seems to have attracted a lot of attention! Closing to avoid unnecessary clutter.\n. ",
    "eyeonus": "So, this still isn't fixed, then? That's unfortunate.. ",
    "Gabriel-p": "This is What AutoPEP8 does to the line (after several seconds):\nx = (49.201005025125632, 51.412060301507537, 50.527638190954775, 42.125628140703519, 43.452261306532662, 50.527638190954775, 40.356783919597994, 48.316582914572869, 54.065326633165832, 44.336683417085432, 48.316582914572869, 50.085427135678394, 51.412060301507537, 50.085427135678394, 47.874371859296488, 44.336683417085432, 49.643216080402013, 47.4321608040201, 50.527638190954775, 39.472361809045232, 47.874371859296488, 50.969849246231156, 39.472361809045232, 50.969849246231156, 50.527638190954775, 50.527638190954775, 44.336683417085432, 49.201005025125632, 50.969849246231156, 49.201005025125632, 46.989949748743719, 50.969849246231156, 51.854271356783926, 51.854271356783926, 42.125628140703519, 50.527638190954775, 55.391959798994975, 54.949748743718594, 47.874371859296488, 45.221105527638194, 42.5678391959799, 50.527638190954775, 46.989949748743719, 49.201005025125632, 49.643216080402013, 44.778894472361813, 45.221105527638194, 47.4321608040201, 50.527638190954775, 43.452261306532662, 57.603015075376888, 42.5678391959799, 46.989949748743719, 50.085427135678394, 54.507537688442213, 44.336683417085432, 50.969849246231156, 54.949748743718594, 47.4321608040201, 48.316582914572869, 46.105527638190956, 46.105527638190956, 45.221105527638194, 49.201005025125632, 43.452261306532662, 48.758793969849251, 50.527638190954775, 49.643216080402013, 39.472361809045232, 44.778894472361813, 49.201005025125632, 47.4321608040201, 42.5678391959799, 46.547738693467338, 47.874371859296488, 49.643216080402013, 49.643216080402013, 48.316582914572869, 53.180904522613069, 49.201005025125632, 48.758793969849251, 42.5678391959799, 52.296482412060307, 48.316582914572869, 50.527638190954775, 51.854271356783926, 43.452261306532662, 48.758793969849251, 50.085427135678394, 56.718592964824126, 42.125628140703519, 42.125628140703519, 42.5678391959799, 42.5678391959799, 50.527638190954775, 48.316582914572869, 47.874371859296488, 50.085427135678394, 50.969849246231156, 51.854271356783926, 50.969849246231156, 48.316582914572869, 49.201005025125632, 48.316582914572869, 44.336683417085432, 42.5678391959799, 50.969849246231156, 42.5678391959799, 45.663316582914575, 42.125628140703519, 43.452261306532662, 44.778894472361813, 45.663316582914575, 50.969849246231156, 53.62311557788945, 46.989949748743719, 43.452261306532662, 43.452261306532662, 50.527638190954775, 46.547738693467338, 49.643216080402013, 47.874371859296488, 46.105527638190956, 48.758793969849251, 48.316582914572869, 50.969849246231156, 44.778894472361813, 50.085427135678394, 49.643216080402013, 41.683417085427138, 47.4321608040201, 48.758793969849251, 42.5678391959799, 49.643216080402013, 47.874371859296488, 49.643216080402013, 46.547738693467338, 44.336683417085432, 44.336683417085432, 46.547738693467338, 58.045226130653269, 49.201005025125632, 44.778894472361813, 46.547738693467338, 45.221105527638194, 46.989949748743719, 46.105527638190956, 53.180904522613069, 50.969849246231156, 54.507537688442213, 46.105527638190956, 43.010050251256281, 46.547738693467338, 49.643216080402013, 37.7035175879397, 48.316582914572869, 51.854271356783926, 47.874371859296488, 49.643216080402013, 54.949748743718594, 42.5678391959799, 49.643216080402013, 46.547738693467338, 47.4321608040201, 52.296482412060307, 50.527638190954775, 39.030150753768844, 54.949748743718594, 48.316582914572869, 42.5678391959799, 49.643216080402013, 46.105527638190956, 50.527638190954775, 43.010050251256281, 47.4321608040201, 51.412060301507537, 43.452261306532662, 50.969849246231156, 42.5678391959799, 48.316582914572869, 47.4321608040201, 47.4321608040201, 54.065326633165832, 39.472361809045232, 50.969849246231156, 49.643216080402013, 49.643216080402013, 45.221105527638194, 50.969849246231156, 50.969849246231156, 47.4321608040201, 40.798994974874375, 51.412060301507537, 43.452261306532662, 49.201005025125632, 50.085427135678394, 41.683417085427138, 57.603015075376888, 50.527638190954775, 52.296482412060307, 50.527638190954775, 47.874371859296488, 46.989949748743719, 47.874371859296488, 46.105527638190956, 46.105527638190956, 50.527638190954775, 46.547738693467338, 51.854271356783926, 52.296482412060307, 50.969849246231156, 53.62311557788945, 48.316582914572869, 46.989949748743719, 40.798994974874375, 47.874371859296488, 50.085427135678394, 46.105527638190956, 57.160804020100507, 49.643216080402013, 43.010050251256281, 50.969849246231156, 46.989949748743719, 50.085427135678394, 50.085427135678394, 44.778894472361813, 51.412060301507537, 49.201005025125632, 41.241206030150757, 49.201005025125632, 47.4321608040201, 51.412060301507537, 49.643216080402013, 52.738693467336688, 45.221105527638194, 50.085427135678394, 49.643216080402013, 49.643216080402013, 43.452261306532662, 48.316582914572869, 46.547738693467338, 48.316582914572869, 51.412060301507537, 52.296482412060307, 53.180904522613069, 45.663316582914575, 41.241206030150757, 45.221105527638194, 46.105527638190956, 50.527638190954775, 47.4321608040201, 50.527638190954775, 47.4321608040201, 48.316582914572869, 46.989949748743719, 44.336683417085432, 51.854271356783926, 48.316582914572869, 49.201005025125632, 46.105527638190956, 51.854271356783926, 41.683417085427138, 50.527638190954775, 51.412060301507537, 50.969849246231156, 46.105527638190956, 54.949748743718594, 48.758793969849251, 49.643216080402013, 43.894472361809051, 43.894472361809051, 45.221105527638194, 43.452261306532662, 44.778894472361813, 46.105527638190956, 50.085427135678394, 45.663316582914575, 44.778894472361813, 52.296482412060307, 41.241206030150757, 49.643216080402013, 44.778894472361813, 49.201005025125632, 45.221105527638194, 49.643216080402013, 40.798994974874375, 46.547738693467338, 51.412060301507537, 51.412060301507537, 43.452261306532662, 47.4321608040201, 51.854271356783926, 48.758793969849251, 51.854271356783926, 39.030150753768844, 43.010050251256281, 50.969849246231156, 46.547738693467338, 52.296482412060307, 39.472361809045232, 49.201005025125632, 47.874371859296488, 48.316582914572869, 48.316582914572869, 47.4321608040201, 47.874371859296488, 46.547738693467338, 50.969849246231156, 53.62311557788945, 48.758793969849251, 43.452261306532662, 50.527638190954775, 51.854271356783926, 50.527638190954775, 48.316582914572869, 49.201005025125632, 43.452261306532662, 45.663316582914575, 49.643216080402013, 46.547738693467338, 53.62311557788945, 52.296482412060307, 49.201005025125632, 45.221105527638194, 49.643216080402013, 37.261306532663319, 43.452261306532662, 50.085427135678394, 42.125628140703519, 43.894472361809051, 47.874371859296488, 51.412060301507537, 38.587939698492463, 50.969849246231156, 55.834170854271363, 42.5678391959799, 49.201005025125632, 42.125628140703519, 49.643216080402013, 46.105527638190956, 51.412060301507537, 51.854271356783926, 45.221105527638194, 46.105527638190956, 43.010050251256281, 54.065326633165832, 47.4321608040201, 48.316582914572869, 44.778894472361813, 47.4321608040201, 54.065326633165832, 51.412060301507537, 40.798994974874375, 45.663316582914575, 51.854271356783926, 43.010050251256281, 45.663316582914575, 51.854271356783926, 44.778894472361813, 53.180904522613069, 51.854271356783926, 47.874371859296488, 50.527638190954775, 49.201005025125632, 42.5678391959799, 49.201005025125632, 44.336683417085432, 39.914572864321613, 51.412060301507537, 39.914572864321613, 39.914572864321613, 40.798994974874375, 49.643216080402013, 45.663316582914575, 44.336683417085432, 46.547738693467338, 42.5678391959799, 49.201005025125632, 54.065326633165832, 48.758793969849251, 51.854271356783926, 50.085427135678394, 47.874371859296488, 50.527638190954775, 51.854271356783926, 52.296482412060307, 45.221105527638194, 44.778894472361813, 44.336683417085432, 45.663316582914575, 46.989949748743719, 46.105527638190956, 48.316582914572869, 40.798994974874375, 46.105527638190956, 48.758793969849251, 43.010050251256281, 48.758793969849251, 51.412060301507537, 46.989949748743719, 50.085427135678394, 41.683417085427138, 49.643216080402013, 49.201005025125632, 46.989949748743719, 46.989949748743719, 44.778894472361813, 40.356783919597994, 45.221105527638194, 48.316582914572869, 39.030150753768844, 43.452261306532662, 46.547738693467338, 53.62311557788945, 44.336683417085432, 50.969849246231156, 49.643216080402013, 50.969849246231156, 48.758793969849251, 43.894472361809051, 43.010050251256281, 49.201005025125632, 50.969849246231156, 44.778894472361813, 57.160804020100507, 49.201005025125632, 53.180904522613069, 50.969849246231156, 45.663316582914575, 50.969849246231156, 45.663316582914575, 50.527638190954775, 48.758793969849251, 51.412060301507537, 52.738693467336688, 50.085427135678394, 49.643216080402013, 45.221105527638194, 56.276381909547744, 44.778894472361813, 51.412060301507537, 52.738693467336688, 46.989949748743719, 49.201005025125632, 45.663316582914575, 52.738693467336688, 49.643216080402013, 49.643216080402013, 48.316582914572869, 45.663316582914575, 55.834170854271363, 51.854271356783926, 45.221105527638194, 42.125628140703519, 50.527638190954775, 50.085427135678394, 57.603015075376888, 47.874371859296488, 49.201005025125632, 47.874371859296488, 51.412060301507537, 52.296482412060307, 52.738693467336688, 47.4321608040201, 51.412060301507537, 47.4321608040201, 50.085427135678394, 44.778894472361813, 51.854271356783926, 43.894472361809051, 53.180904522613069, 51.412060301507537, 53.180904522613069, 40.798994974874375, 48.316582914572869, 50.085427135678394, 48.758793969849251, 48.758793969849251, 42.5678391959799, 50.085427135678394, 46.547738693467338, 48.758793969849251, 49.201005025125632, 48.316582914572869, 42.125628140703519, 47.874371859296488, 48.758793969849251, 46.547738693467338, 55.391959798994975, 50.969849246231156, 49.643216080402013, 49.643216080402013, 51.412060301507537, 52.296482412060307, 46.105527638190956, 50.969849246231156, 46.547738693467338, 43.452261306532662, 50.969849246231156, 52.738693467336688, 46.989949748743719, 46.989949748743719, 50.085427135678394, 47.874371859296488, 44.778894472361813, 44.778894472361813, 50.527638190954775, 43.010050251256281, 42.125628140703519, 44.778894472361813, 47.4321608040201, 43.010050251256281, 43.452261306532662, 51.412060301507537, 44.336683417085432, 47.4321608040201, 45.221105527638194, 42.5678391959799, 48.758793969849251, 48.316582914572869, 43.010050251256281, 50.527638190954775, 49.643216080402013, 46.547738693467338, 52.296482412060307, 49.201005025125632, 51.412060301507537, 46.547738693467338, 50.527638190954775, 47.874371859296488, 49.643216080402013, 45.221105527638194, 52.738693467336688, 51.854271356783926, 50.527638190954775, 49.201005025125632, 49.643216080402013, 46.105527638190956, 49.201005025125632, 55.834170854271363, 50.085427135678394, 50.085427135678394, 41.241206030150757, 46.989949748743719, 47.874371859296488, 46.547738693467338, 50.527638190954775, 49.643216080402013, 44.336683417085432, 50.085427135678394, 47.874371859296488, 43.452261306532662, 47.874371859296488, 43.894472361809051, 51.412060301507537, 48.758793969849251, 44.778894472361813, 49.643216080402013, 43.452261306532662, 50.527638190954775, 44.336683417085432, 46.989949748743719, 47.4321608040201, 51.412060301507537, 42.5678391959799, 50.085427135678394, 42.5678391959799, 52.296482412060307, 53.62311557788945, 43.894472361809051, 51.412060301507537, 48.316582914572869, 48.758793969849251, 51.412060301507537, 54.065326633165832, 46.547738693467338, 51.854271356783926, 50.527638190954775, 50.527638190954775, 50.085427135678394, 56.276381909547744, 50.527638190954775, 44.778894472361813, 47.874371859296488, 42.125628140703519, 46.105527638190956, 44.778894472361813, 54.949748743718594, 48.758793969849251, 44.336683417085432, 50.969849246231156, 54.949748743718594, 53.180904522613069, 50.085427135678394, 49.201005025125632, 49.643216080402013, 43.894472361809051, 50.085427135678394, 46.989949748743719, 50.085427135678394, 50.527638190954775, 41.241206030150757, 48.316582914572869, 44.778894472361813, 40.798994974874375, 43.010050251256281, 48.316582914572869, 52.296482412060307, 40.798994974874375, 45.663316582914575, 44.336683417085432, 45.221105527638194, 47.4321608040201, 47.874371859296488, 47.4321608040201, 43.010050251256281, 50.527638190954775, 50.085427135678394, 45.663316582914575, 47.4321608040201, 52.296482412060307, 50.969849246231156, 54.507537688442213, 51.854271356783926, 44.336683417085432, 42.5678391959799, 50.527638190954775, 41.683417085427138, 50.527638190954775, 46.547738693467338, 56.276381909547744, 41.683417085427138, 45.221105527638194, 43.452261306532662, 54.949748743718594, 49.643216080402013, 50.085427135678394, 46.989949748743719, 55.391959798994975, 48.316582914572869, 50.527638190954775, 48.758793969849251, 47.874371859296488, 43.010050251256281, 51.412060301507537, 50.969849246231156, 46.547738693467338, 50.969849246231156, 43.452261306532662, 43.894472361809051, 50.527638190954775, 46.105527638190956, 48.758793969849251, 56.276381909547744, 42.5678391959799, 45.663316582914575, 54.065326633165832, 46.989949748743719, 45.663316582914575, 48.316582914572869, 54.065326633165832, 48.758793969849251, 48.758793969849251, 43.452261306532662, 51.854271356783926, 43.894472361809051, 41.683417085427138, 45.663316582914575, 47.874371859296488, 50.085427135678394, 50.527638190954775, 41.241206030150757, 39.914572864321613, 44.778894472361813, 50.527638190954775, 58.045226130653269, 56.276381909547744, 52.296482412060307, 50.527638190954775, 49.643216080402013, 49.643216080402013, 48.758793969849251, 46.989949748743719, 52.296482412060307, 50.527638190954775, 47.4321608040201, 40.356783919597994, 47.874371859296488, 46.105527638190956, 49.201005025125632, 51.412060301507537, 46.105527638190956, 44.778894472361813, 43.452261306532662, 44.336683417085432, 46.989949748743719, 53.62311557788945, 50.085427135678394, 49.201005025125632, 47.4321608040201, 48.758793969849251, 49.201005025125632, 47.4321608040201, 47.874371859296488, 50.969849246231156, 46.105527638190956, 40.356783919597994, 50.527638190954775, 52.738693467336688, 47.874371859296488, 48.316582914572869, 53.62311557788945, 48.758793969849251, 48.316582914572869, 41.241206030150757, 50.085427135678394, 41.683417085427138, 44.336683417085432, 47.4321608040201, 51.412060301507537, 46.989949748743719, 48.316582914572869, 45.221105527638194, 46.989949748743719, 46.989949748743719, 47.874371859296488, 53.62311557788945, 48.758793969849251, 48.316582914572869, 45.663316582914575, 54.507537688442213, 48.758793969849251, 50.085427135678394, 43.452261306532662, 46.989949748743719, 43.452261306532662, 51.412060301507537, 54.065326633165832, 44.778894472361813, 49.643216080402013, 40.798994974874375, 48.758793969849251, 51.412060301507537, 54.949748743718594, 53.62311557788945, 50.085427135678394, 42.5678391959799, 47.874371859296488, 50.969849246231156, 52.296482412060307, 49.643216080402013, 46.989949748743719, 53.62311557788945, 44.778894472361813, 56.718592964824126, 43.894472361809051, 48.316582914572869, 43.894472361809051, 51.854271356783926, 55.834170854271363, 46.547738693467338, 43.010050251256281, 44.336683417085432, 47.4321608040201, 49.643216080402013, 51.854271356783926, 43.010050251256281, 50.969849246231156, 43.010050251256281, 50.527638190954775, 47.874371859296488, 46.105527638190956, 49.201005025125632, 43.452261306532662, 47.874371859296488, 50.527638190954775, 49.643216080402013, 41.683417085427138, 42.125628140703519, 46.989949748743719, 43.010050251256281, 49.643216080402013, 51.854271356783926, 55.391959798994975, 51.854271356783926, 45.221105527638194, 48.316582914572869, 46.989949748743719, 48.316582914572869, 46.989949748743719, 45.663316582914575, 52.738693467336688, 52.738693467336688, 50.085427135678394, 48.758793969849251, 42.125628140703519, 49.643216080402013, 54.507537688442213, 49.643216080402013, 41.683417085427138, 44.778894472361813, 49.201005025125632, 48.758793969849251, 47.874371859296488, 42.5678391959799, 48.316582914572869, 49.643216080402013, 42.5678391959799, 48.758793969849251, 42.125628140703519, 48.316582914572869, 41.683417085427138, 47.874371859296488, 46.105527638190956, 46.547738693467338, 46.989949748743719, 53.180904522613069, 44.778894472361813, 48.758793969849251, 44.336683417085432, 47.4321608040201, 50.527638190954775, 50.527638190954775, 50.527638190954775, 38.587939698492463, 45.663316582914575, 48.758793969849251, 47.4321608040201, 51.854271356783926, 54.507537688442213, 46.989949748743719, 47.874371859296488, 46.105527638190956, 47.874371859296488, 47.874371859296488, 39.914572864321613, 47.4321608040201, 46.989949748743719, 46.105527638190956, 43.452261306532662, 48.316582914572869, 44.778894472361813, 40.798994974874375, 47.4321608040201, 45.663316582914575, 43.894472361809051, 43.894472361809051, 45.221105527638194, 47.4321608040201, 48.758793969849251, 51.412060301507537, 43.452261306532662, 55.391959798994975, 53.62311557788945, 42.125628140703519, 45.663316582914575, 45.663316582914575, 52.296482412060307, 56.276381909547744, 47.4321608040201, 40.798994974874375, 51.854271356783926, 48.316582914572869, 54.065326633165832, 51.412060301507537, 46.547738693467338, 53.180904522613069, 43.452261306532662, 45.221105527638194, 49.643216080402013, 44.336683417085432, 51.412060301507537, 48.316582914572869, 49.643216080402013, 47.4321608040201, 46.547738693467338, 48.316582914572869, 41.241206030150757, 53.62311557788945, 44.778894472361813, 49.201005025125632, 47.4321608040201, 56.276381909547744, 52.296482412060307, 49.201005025125632, 50.085427135678394, 42.5678391959799, 50.527638190954775, 44.336683417085432, 44.778894472361813, 45.221105527638194, 53.62311557788945, 54.507537688442213, 51.854271356783926, 45.663316582914575, 49.201005025125632, 52.296482412060307, 46.105527638190956, 54.065326633165832, 46.105527638190956, 43.010050251256281, 48.758793969849251, 50.969849246231156, 49.643216080402013, 45.663316582914575, 40.798994974874375, 41.683417085427138, 52.738693467336688, 48.316582914572869, 56.276381909547744, 47.4321608040201, 47.874371859296488, 47.4321608040201, 50.085427135678394, 49.201005025125632, 46.547738693467338, 42.5678391959799, 43.010050251256281, 50.085427135678394, 46.547738693467338, 53.180904522613069, 47.4321608040201, 52.296482412060307, 46.989949748743719, 50.085427135678394, 39.472361809045232, 49.201005025125632, 45.663316582914575, 46.989949748743719, 52.296482412060307, 47.874371859296488, 46.989949748743719, 46.547738693467338, 49.643216080402013, 50.085427135678394, 53.62311557788945, 54.507537688442213, 51.412060301507537, 47.4321608040201, 41.241206030150757, 46.989949748743719, 53.180904522613069, 43.010050251256281, 55.391959798994975, 51.854271356783926, 43.010050251256281, 47.4321608040201, 45.221105527638194, 45.663316582914575, 56.276381909547744, 54.065326633165832, 49.201005025125632, 54.507537688442213, 40.798994974874375, 50.527638190954775, 51.412060301507537, 46.105527638190956, 40.356783919597994, 45.663316582914575, 53.62311557788945, 47.4321608040201, 50.527638190954775, 47.874371859296488, 47.4321608040201, 48.758793969849251, 53.62311557788945, 49.643216080402013, 50.085427135678394, 42.125628140703519, 48.758793969849251, 48.316582914572869, 48.758793969849251, 40.356783919597994, 46.547738693467338, 50.969849246231156, 57.160804020100507, 50.085427135678394, 47.874371859296488, 43.452261306532662, 43.894472361809051, 54.507537688442213, 47.874371859296488, 56.276381909547744, 44.778894472361813, 50.085427135678394, 43.894472361809051, 46.547738693467338, 53.180904522613069, 42.5678391959799, 50.969849246231156, 43.452261306532662, 52.738693467336688, 47.4321608040201, 48.758793969849251, 53.62311557788945, 44.336683417085432, 50.527638190954775, 47.4321608040201, 46.105527638190956, 44.336683417085432, 48.758793969849251,\n     49.201005025125632, 50.085427135678394, 50.527638190954775, 44.336683417085432, 46.105527638190956, 46.989949748743719, 46.989949748743719, 50.969849246231156, 47.4321608040201, 48.758793969849251, 55.391959798994975, 43.452261306532662, 56.718592964824126, 47.4321608040201, 41.241206030150757, 48.758793969849251, 50.085427135678394, 51.412060301507537, 46.547738693467338, 50.969849246231156, 48.316582914572869, 42.125628140703519, 50.085427135678394, 46.105527638190956, 45.221105527638194, 50.527638190954775, 45.663316582914575, 44.336683417085432, 50.969849246231156, 45.221105527638194, 42.5678391959799, 51.412060301507537, 53.180904522613069, 48.316582914572869, 42.5678391959799, 47.4321608040201, 46.105527638190956, 44.778894472361813, 45.663316582914575, 49.201005025125632, 52.296482412060307, 45.663316582914575, 49.643216080402013, 47.4321608040201, 46.989949748743719, 49.201005025125632, 49.201005025125632, 46.105527638190956, 49.643216080402013, 44.778894472361813, 50.527638190954775, 51.854271356783926, 51.854271356783926, 42.5678391959799, 43.452261306532662, 50.969849246231156, 42.5678391959799, 57.603015075376888, 51.854271356783926, 49.201005025125632, 42.125628140703519, 45.663316582914575, 52.296482412060307, 50.085427135678394, 51.854271356783926, 50.527638190954775, 42.5678391959799, 55.391959798994975, 51.854271356783926, 45.663316582914575, 48.316582914572869, 50.085427135678394, 47.4321608040201, 46.547738693467338, 43.010050251256281, 48.758793969849251, 46.105527638190956, 43.010050251256281, 48.316582914572869, 48.316582914572869, 48.758793969849251, 52.738693467336688, 50.527638190954775, 46.105527638190956, 44.336683417085432, 46.105527638190956, 44.336683417085432, 50.527638190954775, 50.969849246231156, 50.527638190954775, 51.854271356783926, 54.507537688442213, 45.221105527638194, 46.547738693467338, 45.663316582914575, 50.527638190954775, 51.412060301507537, 53.62311557788945, 52.296482412060307, 53.62311557788945, 47.4321608040201, 46.989949748743719, 47.4321608040201, 46.989949748743719, 43.010050251256281, 52.296482412060307, 50.527638190954775, 49.201005025125632, 50.969849246231156, 47.874371859296488, 47.4321608040201, 48.758793969849251, 46.105527638190956, 46.105527638190956, 49.201005025125632, 44.336683417085432, 48.758793969849251, 47.4321608040201, 52.296482412060307, 46.547738693467338, 43.010050251256281, 47.4321608040201, 50.527638190954775, 51.854271356783926, 50.969849246231156, 46.989949748743719, 53.180904522613069, 50.527638190954775, 43.010050251256281, 47.874371859296488, 47.874371859296488, 50.969849246231156, 54.065326633165832, 46.547738693467338, 50.527638190954775, 41.241206030150757, 49.643216080402013, 54.065326633165832, 54.065326633165832, 48.758793969849251, 43.452261306532662, 52.296482412060307, 50.527638190954775, 43.894472361809051, 48.316582914572869, 41.683417085427138, 54.065326633165832, 44.336683417085432, 52.296482412060307, 52.738693467336688, 43.010050251256281, 45.221105527638194, 47.4321608040201, 50.969849246231156, 50.085427135678394, 43.894472361809051, 45.663316582914575, 45.221105527638194, 42.125628140703519, 45.663316582914575, 53.62311557788945, 54.507537688442213, 47.4321608040201, 50.969849246231156, 46.547738693467338, 50.969849246231156, 46.105527638190956, 47.874371859296488, 48.316582914572869, 44.336683417085432, 53.180904522613069, 46.105527638190956, 53.180904522613069, 46.989949748743719, 50.527638190954775, 45.221105527638194, 43.894472361809051, 46.105527638190956, 46.989949748743719, 42.5678391959799, 50.085427135678394, 48.758793969849251, 46.105527638190956, 43.894472361809051, 50.969849246231156, 54.065326633165832, 47.4321608040201, 40.356783919597994, 47.4321608040201, 46.105527638190956, 54.065326633165832, 43.452261306532662, 46.547738693467338, 46.989949748743719, 43.894472361809051, 50.527638190954775, 52.296482412060307, 47.874371859296488, 45.221105527638194, 49.643216080402013, 44.778894472361813, 51.412060301507537, 57.160804020100507, 55.391959798994975, 50.527638190954775, 45.221105527638194, 52.296482412060307, 44.336683417085432, 49.201005025125632, 40.798994974874375, 55.391959798994975, 49.201005025125632, 48.316582914572869, 51.412060301507537, 46.989949748743719, 50.969849246231156, 55.391959798994975, 44.778894472361813, 47.4321608040201, 42.125628140703519, 40.798994974874375, 45.663316582914575, 48.758793969849251, 49.643216080402013, 44.336683417085432, 54.949748743718594, 46.547738693467338, 45.663316582914575, 43.452261306532662, 55.834170854271363, 46.989949748743719, 54.065326633165832, 50.969849246231156, 43.010050251256281, 45.221105527638194, 44.336683417085432, 54.507537688442213, 54.507537688442213, 54.065326633165832, 49.643216080402013, 49.643216080402013, 40.356783919597994, 50.969849246231156, 49.643216080402013, 48.758793969849251, 43.894472361809051, 49.201005025125632, 46.547738693467338, 51.412060301507537, 54.065326633165832, 49.201005025125632, 47.4321608040201, 45.663316582914575, 47.874371859296488, 47.874371859296488, 44.778894472361813, 46.547738693467338, 51.854271356783926, 54.949748743718594, 47.874371859296488, 51.412060301507537, 47.4321608040201, 47.4321608040201, 47.4321608040201, 41.241206030150757, 45.663316582914575, 46.989949748743719, 45.221105527638194, 53.180904522613069, 43.894472361809051, 48.316582914572869, 53.180904522613069, 51.412060301507537, 44.336683417085432, 46.105527638190956, 49.643216080402013, 50.527638190954775, 50.969849246231156, 50.527638190954775, 43.010050251256281, 51.412060301507537, 49.643216080402013, 48.316582914572869, 48.316582914572869, 49.201005025125632, 44.336683417085432, 46.547738693467338, 48.758793969849251, 48.758793969849251, 46.547738693467338, 52.738693467336688, 39.472361809045232, 45.663316582914575, 44.336683417085432, 53.180904522613069, 42.125628140703519, 50.085427135678394, 40.798994974874375, 50.085427135678394, 47.4321608040201, 49.643216080402013, 46.989949748743719, 46.547738693467338, 53.62311557788945, 48.316582914572869, 50.085427135678394, 48.316582914572869, 48.758793969849251, 39.472361809045232, 47.4321608040201, 49.201005025125632, 48.758793969849251, 50.527638190954775, 47.874371859296488, 46.547738693467338, 54.507537688442213, 49.643216080402013, 55.391959798994975, 42.5678391959799, 47.874371859296488, 53.180904522613069, 45.663316582914575, 48.758793969849251, 50.527638190954775, 51.412060301507537, 43.452261306532662, 44.336683417085432, 40.356783919597994, 52.738693467336688, 42.5678391959799, 46.547738693467338, 48.316582914572869, 44.336683417085432, 53.62311557788945, 46.989949748743719, 49.643216080402013, 49.201005025125632, 49.201005025125632, 45.663316582914575, 43.452261306532662, 45.663316582914575, 47.874371859296488, 39.472361809045232, 48.758793969849251, 51.854271356783926, 48.758793969849251, 50.527638190954775, 47.874371859296488, 39.472361809045232, 47.874371859296488, 49.201005025125632, 47.874371859296488, 49.201005025125632, 44.336683417085432, 48.316582914572869, 47.874371859296488, 42.125628140703519, 48.758793969849251, 44.778894472361813, 47.874371859296488, 44.778894472361813, 52.296482412060307, 51.854271356783926, 52.296482412060307, 44.336683417085432, 46.547738693467338, 49.643216080402013, 54.949748743718594, 51.412060301507537, 49.201005025125632, 48.758793969849251, 43.452261306532662, 46.105527638190956, 48.758793969849251, 51.412060301507537, 46.105527638190956, 50.527638190954775, 52.296482412060307, 48.758793969849251, 47.874371859296488, 47.4321608040201, 57.603015075376888, 42.125628140703519, 45.663316582914575, 50.969849246231156, 51.412060301507537, 44.778894472361813, 47.4321608040201, 47.874371859296488, 43.452261306532662, 39.472361809045232, 50.969849246231156, 48.316582914572869, 46.105527638190956, 46.547738693467338, 43.894472361809051, 46.547738693467338, 44.778894472361813, 45.221105527638194, 49.643216080402013, 51.854271356783926, 48.758793969849251, 46.547738693467338, 52.296482412060307, 43.894472361809051, 42.125628140703519, 50.969849246231156, 47.874371859296488, 52.738693467336688, 50.969849246231156, 53.180904522613069, 46.547738693467338, 46.989949748743719, 51.854271356783926, 50.085427135678394, 49.643216080402013, 54.065326633165832, 43.452261306532662, 40.798994974874375, 55.391959798994975, 47.874371859296488, 36.376884422110557, 50.527638190954775, 45.663316582914575, 43.894472361809051, 43.452261306532662, 53.62311557788945, 51.412060301507537, 48.316582914572869, 48.758793969849251, 55.834170854271363, 53.180904522613069, 48.758793969849251, 54.507537688442213, 48.758793969849251, 44.778894472361813, 43.894472361809051, 45.663316582914575, 51.854271356783926, 53.62311557788945, 51.854271356783926, 51.412060301507537, 50.527638190954775, 47.4321608040201, 43.894472361809051, 46.547738693467338, 49.201005025125632, 48.758793969849251, 46.989949748743719, 52.738693467336688, 43.010050251256281, 41.241206030150757, 47.4321608040201, 52.296482412060307, 47.4321608040201, 45.221105527638194, 44.336683417085432, 50.085427135678394, 46.105527638190956, 50.085427135678394, 49.643216080402013, 42.125628140703519, 43.452261306532662, 51.854271356783926, 49.201005025125632, 46.989949748743719, 44.778894472361813, 44.778894472361813, 49.201005025125632, 43.452261306532662, 48.316582914572869, 43.894472361809051, 48.758793969849251, 52.738693467336688, 48.758793969849251, 50.969849246231156, 49.643216080402013, 48.758793969849251, 48.316582914572869, 44.336683417085432, 50.527638190954775, 55.391959798994975, 55.391959798994975, 57.603015075376888, 48.316582914572869, 49.201005025125632, 50.085427135678394, 42.5678391959799, 50.085427135678394, 41.683417085427138, 58.045226130653269, 42.5678391959799, 55.391959798994975, 45.663316582914575, 43.894472361809051, 43.452261306532662, 43.010050251256281, 43.894472361809051, 48.758793969849251, 46.989949748743719, 48.316582914572869, 46.547738693467338, 50.969849246231156, 47.874371859296488, 53.180904522613069, 46.547738693467338, 46.547738693467338, 50.969849246231156, 51.412060301507537, 42.5678391959799, 41.241206030150757, 50.527638190954775, 50.085427135678394, 39.914572864321613, 47.874371859296488, 50.527638190954775, 46.105527638190956, 41.683417085427138, 50.085427135678394, 44.778894472361813, 44.336683417085432, 52.738693467336688, 49.643216080402013, 46.105527638190956, 48.316582914572869, 49.201005025125632, 42.125628140703519, 40.798994974874375, 46.105527638190956, 42.125628140703519, 50.969849246231156, 47.4321608040201, 47.4321608040201, 50.085427135678394, 54.949748743718594, 44.778894472361813, 51.412060301507537, 50.527638190954775, 47.4321608040201, 49.201005025125632, 46.547738693467338, 47.4321608040201, 48.316582914572869, 45.663316582914575, 45.221105527638194, 52.738693467336688, 44.778894472361813, 47.4321608040201, 47.4321608040201, 46.105527638190956, 48.316582914572869, 46.989949748743719, 49.201005025125632, 43.010050251256281, 50.969849246231156, 53.180904522613069, 43.894472361809051, 52.738693467336688, 49.201005025125632, 54.507537688442213, 46.989949748743719, 45.221105527638194, 54.065326633165832, 44.778894472361813, 51.412060301507537, 52.296482412060307, 48.758793969849251, 54.507537688442213, 45.663316582914575, 39.472361809045232, 48.316582914572869, 46.989949748743719, 50.085427135678394, 49.643216080402013, 50.527638190954775, 54.949748743718594, 44.778894472361813, 44.778894472361813, 54.949748743718594, 46.989949748743719, 48.758793969849251, 48.316582914572869, 46.547738693467338, 52.296482412060307, 53.62311557788945, 47.874371859296488, 46.105527638190956, 49.643216080402013, 50.085427135678394, 51.412060301507537, 54.065326633165832, 50.527638190954775, 48.316582914572869, 54.949748743718594, 48.316582914572869, 54.949748743718594, 46.105527638190956, 43.894472361809051, 49.643216080402013, 43.452261306532662, 48.316582914572869, 48.316582914572869, 47.4321608040201, 47.874371859296488, 53.180904522613069, 46.989949748743719, 50.969849246231156, 50.969849246231156, 45.221105527638194, 52.738693467336688, 49.201005025125632, 53.62311557788945, 44.778894472361813, 47.874371859296488, 43.894472361809051, 46.989949748743719, 48.758793969849251, 49.643216080402013, 45.221105527638194, 48.758793969849251, 45.221105527638194, 44.778894472361813, 54.065326633165832, 50.527638190954775, 47.874371859296488, 54.065326633165832, 52.296482412060307, 56.276381909547744, 47.4321608040201, 51.412060301507537, 50.527638190954775, 45.221105527638194, 53.62311557788945, 46.105527638190956, 50.969849246231156, 41.241206030150757, 43.452261306532662, 49.201005025125632, 53.62311557788945, 50.527638190954775, 49.201005025125632, 41.241206030150757, 43.010050251256281, 49.201005025125632, 42.5678391959799, 50.969849246231156, 54.949748743718594, 40.356783919597994, 46.547738693467338, 50.527638190954775, 54.949748743718594, 51.854271356783926, 48.758793969849251, 39.472361809045232, 42.125628140703519, 50.085427135678394, 51.854271356783926, 45.663316582914575, 36.819095477386938, 56.718592964824126, 46.547738693467338, 51.854271356783926, 49.643216080402013, 48.316582914572869, 51.412060301507537, 58.045226130653269, 48.758793969849251, 49.201005025125632, 49.643216080402013, 47.4321608040201, 46.105527638190956, 48.758793969849251, 52.296482412060307, 43.894472361809051, 49.643216080402013, 52.738693467336688, 49.201005025125632, 51.412060301507537, 51.412060301507537, 45.663316582914575, 50.527638190954775, 42.125628140703519, 40.356783919597994, 52.296482412060307, 50.527638190954775, 49.643216080402013, 48.758793969849251, 50.527638190954775, 48.758793969849251, 51.412060301507537, 46.105527638190956, 50.969849246231156, 47.874371859296488, 45.221105527638194, 44.778894472361813, 46.989949748743719, 43.452261306532662, 48.316582914572869, 42.125628140703519, 47.4321608040201, 50.527638190954775, 42.125628140703519, 44.778894472361813, 46.105527638190956, 47.4321608040201, 49.643216080402013, 50.085427135678394, 50.969849246231156, 50.085427135678394, 56.276381909547744, 54.949748743718594, 40.798994974874375, 56.276381909547744, 50.527638190954775, 45.221105527638194, 39.030150753768844, 46.989949748743719, 49.643216080402013, 48.758793969849251, 50.969849246231156, 52.738693467336688, 48.316582914572869, 50.085427135678394, 41.241206030150757, 48.316582914572869, 53.180904522613069, 47.874371859296488, 52.296482412060307, 48.758793969849251, 51.412060301507537, 43.010050251256281, 47.4321608040201, 52.296482412060307, 49.643216080402013, 54.065326633165832, 50.085427135678394, 44.336683417085432, 43.010050251256281, 45.663316582914575, 44.778894472361813, 50.085427135678394, 44.778894472361813, 44.336683417085432, 50.527638190954775, 49.643216080402013, 47.4321608040201, 43.894472361809051, 49.643216080402013, 54.065326633165832, 50.085427135678394, 50.085427135678394, 46.105527638190956, 47.4321608040201, 45.663316582914575, 45.663316582914575, 51.854271356783926, 44.336683417085432, 44.778894472361813, 46.105527638190956, 46.989949748743719, 43.010050251256281, 47.874371859296488, 44.336683417085432, 42.125628140703519, 54.949748743718594, 49.643216080402013, 48.316582914572869, 47.874371859296488, 42.5678391959799, 43.894472361809051, 50.085427135678394, 50.969849246231156, 50.527638190954775, 48.316582914572869, 49.643216080402013, 45.663316582914575, 43.452261306532662, 46.105527638190956, 58.48743718592965, 47.4321608040201, 53.62311557788945, 41.241206030150757, 49.201005025125632, 43.894472361809051, 50.969849246231156, 41.241206030150757, 46.547738693467338, 45.663316582914575, 49.643216080402013, 48.758793969849251, 45.221105527638194, 51.854271356783926, 49.643216080402013, 49.201005025125632, 45.663316582914575, 43.894472361809051, 49.201005025125632, 51.412060301507537, 48.758793969849251, 41.683417085427138, 52.296482412060307, 46.105527638190956, 44.336683417085432, 46.989949748743719, 49.643216080402013, 46.105527638190956, 50.527638190954775, 50.969849246231156, 49.643216080402013, 51.854271356783926, 49.643216080402013, 43.010050251256281, 46.547738693467338, 50.085427135678394, 54.065326633165832, 43.894472361809051, 53.180904522613069, 46.105527638190956, 47.874371859296488, 46.105527638190956, 49.643216080402013, 41.683417085427138, 48.316582914572869, 48.316582914572869, 45.221105527638194, 53.180904522613069, 51.412060301507537, 45.221105527638194, 52.738693467336688, 44.336683417085432, 42.125628140703519, 46.989949748743719, 53.62311557788945, 45.663316582914575, 43.452261306532662, 43.010050251256281, 52.738693467336688, 54.065326633165832, 47.874371859296488, 43.894472361809051, 52.296482412060307, 50.527638190954775, 51.412060301507537, 57.160804020100507, 49.643216080402013, 46.989949748743719, 47.874371859296488, 47.4321608040201, 50.085427135678394, 46.989949748743719, 52.296482412060307, 51.412060301507537, 46.105527638190956, 48.316582914572869, 46.105527638190956, 47.4321608040201, 48.316582914572869, 50.527638190954775, 50.527638190954775, 49.201005025125632, 48.758793969849251, 39.472361809045232, 51.412060301507537, 49.643216080402013, 46.547738693467338, 51.854271356783926, 49.201005025125632, 47.4321608040201, 48.316582914572869, 52.296482412060307, 45.663316582914575, 48.758793969849251, 42.125628140703519, 54.949748743718594, 47.4321608040201, 43.010050251256281, 50.969849246231156, 49.201005025125632, 49.643216080402013, 42.125628140703519, 45.221105527638194, 42.125628140703519, 42.125628140703519, 49.643216080402013, 45.221105527638194, 45.663316582914575, 47.874371859296488, 46.105527638190956, 48.316582914572869, 46.547738693467338, 41.683417085427138, 51.412060301507537, 40.356783919597994, 46.105527638190956, 50.527638190954775, 47.874371859296488, 54.065326633165832, 45.221105527638194, 50.969849246231156, 46.989949748743719, 54.065326633165832, 40.798994974874375, 43.894472361809051, 45.221105527638194, 54.065326633165832, 53.62311557788945, 48.758793969849251, 50.969849246231156, 50.969849246231156, 54.507537688442213, 45.221105527638194, 44.778894472361813, 50.527638190954775, 51.412060301507537, 49.201005025125632, 44.778894472361813, 50.969849246231156, 51.412060301507537, 56.718592964824126, 43.452261306532662, 45.663316582914575, 56.718592964824126, 45.663316582914575, 43.894472361809051, 51.854271356783926, 44.336683417085432, 53.180904522613069, 46.989949748743719, 54.949748743718594, 46.547738693467338, 47.874371859296488, 44.778894472361813, 42.125628140703519, 48.316582914572869, 43.010050251256281, 46.547738693467338, 47.874371859296488, 46.547738693467338, 50.527638190954775, 46.989949748743719, 45.663316582914575, 47.874371859296488, 48.316582914572869, 50.527638190954775, 45.221105527638194, 42.5678391959799, 46.547738693467338, 49.201005025125632, 45.221105527638194, 48.758793969849251, 56.718592964824126, 52.296482412060307, 50.527638190954775, 53.180904522613069, 44.778894472361813, 52.738693467336688, 43.010050251256281, 43.894472361809051, 42.125628140703519, 46.989949748743719, 45.221105527638194, 45.221105527638194, 44.778894472361813, 42.5678391959799, 54.065326633165832, 50.085427135678394, 51.854271356783926, 53.180904522613069, 55.391959798994975, 46.547738693467338, 48.758793969849251, 51.412060301507537, 43.010050251256281, 53.180904522613069, 50.085427135678394, 50.969849246231156, 50.969849246231156, 49.643216080402013, 50.969849246231156, 39.914572864321613, 49.643216080402013, 45.221105527638194, 49.201005025125632, 44.336683417085432, 51.412060301507537, 47.874371859296488, 42.5678391959799, 45.663316582914575, 48.758793969849251, 42.5678391959799, 48.758793969849251, 48.758793969849251, 56.276381909547744, 51.412060301507537, 43.894472361809051, 45.663316582914575, 47.4321608040201, 42.5678391959799, 48.316582914572869)\nand this is what the console shows:\nSublimeAutoPep8: some issue(s) were not fixed:\nFile \"/home/gabriel/Descargas/del.py\", line 2: not fixed E501\nFile \"/home/gabriel/Descargas/del.py\", line 3: not fixed E501\n. Using \"aggressive\": 1 in the settings, each float is put in a single row, which is ridiculous.\nBTW, I'm using: \"max-line-length\": 79.\n. ",
    "ZzAntares": "Wow, thanks! I'll go ahead and setup autopep8 on my build now.\nThanks!\n. ",
    "eddowh": "Works flawlessly, thanks for addressing the bug!\n. ",
    "plattrap": "Unfortunately I am still getting out of memory exceptions with this update. Will investigate further.\n. The fault comes in detect_encoding(filename) where the whole file is read in @ test_file.read() which attempts to read the whole file.\nOptions:\n1. Check filesize and do not process source files bigger than 1 Mbyte?\n2. Read the file in chunks?\n```\nCheck for correctness of encoding\nwith open_with_encoding(filename, encoding) as test_file:\n    while True:\n        if not test_file.read(MAX_PYTHON_FILE_DETECTION_BYTES*100):\n            break\n```\n. ",
    "Chiel92": "Dammit, yes. Wasn't able to find it through google easily. Solution posted there works.\n. What about the second case?\nOn Jul 8, 2016 7:36 PM, \"Steven Myint\" notifications@github.com wrote:\n\nI think it is a pylint problem.\nPyCQA/pylint#638 https://github.com/PyCQA/pylint/issues/638\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/hhatto/autopep8/issues/248#issuecomment-231423316,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AA-7MbSlBZw3dG6luRGkqPnCSh-j7OrRks5qToqmgaJpZM4JGRL2\n.\n. \n",
    "Digenis": "Not a bug; this is exactly what autopep8 is supposed to do here.\nPython3 requires octal representations to be written that way.\nhttps://www.python.org/dev/peps/pep-3127/#removal-of-old-octal-syntax\n. ",
    "bagerard": "Alright, in my case \"01\"  was a typo and I thought it would be changed to \"1\" but I understand now.\nThanks!\n. ",
    "ghost": "@spaceone i on opposite want it not to respect tabs, but W191 fix doesn't work.. it fixes --select=E101\n. Oh, sorry.. @spaceone setuptools/setup.py:90:9: E131 continuation line unaligned for hanging indent\npy\n description=\"Easily download, build, install, upgrade, and uninstall \"\n        \"Python packages\", <=== this line\n    author=\"Python Packaging Authority\",\nBut by the look of this i think it's shouldn't be fixed at all.. ",
    "hackthehackerman": "Ooops sorry I did not intend to open an issue on this repo. \n. ",
    "GMNGeoffrey": "Ok I think I know what the issue was. I was using autopep8 -ivr * instead of autopep8 -ivr .\nThe latter does what I want. So I guess autopep8 does format a file if you specifically give it that file, which I suppose makes sense :-) I think I would make the default to ignore non-python files anyway and have a flag to not do that check, but nbd.\n. ",
    "tedmiston": "Thanks so much for the clarification.  Admittedly an edge case, but I appreciate taking the time to address it.  Thank you!\n. ",
    "fpuga": "I fall into this case also. Just for the record, to launch the tool only against .py files I execute the tool two times in this way:\nautopep8 --diff --recursive **/*.py\nautopep8 --diff --recursive *.py. I think that the error is happening when checking if it's a [compount stmt](https://github.com/hhatto/autopep8/blob/master/autopep8.py#L940). @hhatto it works like a charm. Sorry for the late answer I didn't review my notifications..\n",
    "jreinstra": "Yeah, I see your point.  However, I (and I suspect others) likely prefer proper line length over proper alignment.  It would be nice to be able to either specify which issues to prioritize when running into cases where one of two issues is inevitable or to find a way for autopep8 to resolve line length issues while keeping proper alignment.\n. ",
    "graipher": "OK, thanks for the feedback. I guess I can live without those spaces.\n. ",
    "tobixx": "@spaceone you can have it even now with more aggressive settings and/or experimental - so your option is already there.\n. @spaceone yes - one additionaly '-a' is already enough. (just tried it)\n. After looked into 139 test for the E501 : ignore all my nice to have wishes ^^\n. @spaceone At least not in the place I modified it. There only a rank is determined where to break a long line, but in your case there is really nothing to fix (in terms of pep8) anything at all  - because you don't even hit the trigger - your line is already short enough. Even if it would kick in for your example, there is nowhere your most liked solution calculated as a candidate. The nearest solution would also break up the list in it - which is probably not the thing you want. This would be probably fixable, but in the end we again talk about a style according to an personal opinion instead of only fixing pep8 stuff. Well, I also want it, but this seems to be absolutely overkill for this tool - at least the name then does not cover it anymore ;-)\n. Thanks @spaceone - that's what I wanted to hear ;-)\n. ",
    "khairihafsham": "Hi,\nIt seems this issue has been dormant for over 2 months now. Is there anything I could help to move things forward?\nOne thing I've noticed is that, if we split the issues (E306, E305) into separate task, it may help out things a bit, because E306 is more straight forward and does not introduce any breaking changes (I've tested with Python 2.7.10 and 3.5.1). Done \ud83d\ude04 . ",
    "snakescott": "I'm aware of --verbose but find the above example more readable than autopep8's verbose output, which when I run, looks like\n--->  Applying global fix for E265\n--->  Applying global fix for W602\n--->  44 issue(s) to fix {u'E121': set([106, 13]), 'E261': set([24]), 'E501': set([131, 138, 139, 13, 143, 145, 146, 160, 176, 34, 36, 39, 40, 42, 171, 178, 48, 50, 180, 201, 58, 60, 61, 63, 192, 195, 199, 72, 73, 77, 78, 85, 88, 89, 92, 186, 167, 108, 114, 122, 170])}\n--->  25 issue(s) to fix {u'E127': set([97]), u'E128': set([93]), u'E121': set([118]), 'E501': set([13, 152, 158, 34, 92, 42, 45, 177, 51, 184, 187, 62, 64, 65, 194, 67, 199, 83, 212, 220, 102, 119])}\n--->  22 issue(s) to fix {u'E121': set([120]), 'E501': set([64, 65, 34, 67, 195, 200, 188, 42, 83, 13, 45, 178, 51, 213, 185, 120, 153, 92, 221, 62, 159])}\n--->  21 issue(s) to fix {'E501': set([64, 65, 34, 67, 195, 200, 188, 42, 83, 13, 45, 178, 51, 213, 185, 120, 153, 92, 221, 62, 159])}. ",
    "antonioj-mattos": "@spaceone that will suffice for now. \nI will try to figure it out how to configure to work directly with the editor settings. I use VSCode with a configuration similar to:\njson\n    \"python.formatting.provider\": \"autopep8\",\n    \"python.formatting.autopep8Args\": [\n        \"--max-line-length=119\"\n    ],\n    \"python.formatting.formatOnSave\": true\nIn this case, it is more a matter to deal with the vscode plugin.\nThank you.. ",
    "ANTGOMEZ": "Figured it out. The vscode autopep plugin doesn't install autopep. had to install autopep separately through pip.. ",
    "evhub": "@hhatto except: and except Exception: are not equivalent, and having autopep8 change one into to other has the potential to cause some serious issues, like raising errors that should be caught. I just ran into some such errors caused by this change myself. I would suggest changing except: into except BaseException: instead, since those are in fact equivalent.. ",
    "orenbenkiki": "Awesome! So I guess in https://pypi.python.org/pypi/autopep8 in 1.2.5 it will be marked as compatible with 3.6 (assuming the next version going to be 1.2.5)?. Great news - thanks!\nOn Thu, Feb 23, 2017 at 7:25 AM, Hideo Hattori notifications@github.com\nwrote:\n\nI'm planning to release version 1.3 containing several bug fixes next week.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/hhatto/autopep8/issues/299#issuecomment-281898301,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAEKXmeyQ2cianVYKicmzkVlq_vUa9pfks5rfRhkgaJpZM4LlcGh\n.\n. \n",
    "sils": "Oh CC @sims1253 and @jayvdb from coala. So one idea about a project for autopep8 would be to preserve the information which change is associated with which errors/warnings (see https://github.com/hhatto/autopep8/issues/289), a lot of coala users complain about our PEP8Bear (that is scheduled for being renamed to AutoPEP8Bear) that it only fixes the issues but doesn't tell them for every issue, what it actually is about.\nI would imagine a JSON output like:\njson\n{\n    \"error\": \"E251\",\n    \"message\": \"Remove whitespace around '=' sign.\",\n    \"diff\": [\n         {\"line\": 4, \"new_content\": \"a = function(test='a')\"}\n    ]\n}\nor anything like that allowing the users to see the reason for every single change.\nYour own ideas are very much possible as well of course,this is just one thing we thought about.. ",
    "ickedude": "You are right, my example was not complete. Sorry for that. I also test Windows line ending and it is working.\nbash\n$ printf 'example\\nexample2' | unix2dos | pep8 -\nstdin:2:9: W292 no newline at end of file\n$ printf 'example\\nexample2' | unix2dos | autopep8 - | hexdump -C\n00000000  65 78 61 6d 70 6c 65 0d  0a 65 78 61 6d 70 6c 65  |example..example|\n00000010  32 0d 0a                                          |2..|\n00000013\n$ printf 'example\\nexample2' | unix2dos | autopep8 - | pep8 -\nSo maybe the feature list can be extended to also list W292?. ",
    "peterjc": "Thanks. ",
    "ealfie": "+1. ",
    "gpotter2": "@hhatto Hello,\nI do disagree with that: I'm not adding a new function, I'm just making one better.\nCroping the comments like it's done makes the file disgusting. We cannot use files where all decorator comments have been cropped and need to manually fix them.\nI do find that very useful.\nLet me show you with an example:\n\nFile without autopep8\n\n```\n########################################## That is text\nVery nice concent indeed\n\n...\n- after current autopep8\n########################################## That is text\nVery nice concent indeed\n\n...\n```\nThis is really ugly.\n\nafter autopep8 with this PR:\n```\n\n#################### That is text\nVery nice concent indeed\n\n...\n```\n. > I think a more appropriate action would to be to just remove this text-cutting-off functionality from autopep8.\nVery true. Or maybe it could become an aggressive feature.\nThanks for your help !. ",
    "tholom": "Fixed description. Thanks! The broken-off stub actually ends up below two blank lines.. ",
    "davtoh": "Indeed the execution is long for pycodestyle. I tested again with the pypi and master versions.\nBefore, autopep8 Version: 1.3.1 (notice that i had to finish it):\n$ time autopep8 test_autopep8_long_line.py \n^C\nreal    31m59.445s\nuser    28m17.664s\nsys 3m40.772s\nAfter, Version: 2.0a2:\ntime autopep8 test_autopep8_long_line.py \n^C\nreal    36m3.652s\nuser    31m49.256s\nsys 4m13.136s\nI guess that either way the line is really very long, perhaps a warning could be issued... As soon as i have the time i will try at least debugging...  I take it is using autopep8.fix_code() right?. ",
    "eli-b": "Thanks.\nShouldn't -vvvvv at least say that it's running a lib2to3 fixer for W690?. When not using -a, the tool revealed that it wants to fix issue E721 on that line. So it's unrelated to lib2to3.. According to the pycodestyle docs, the relevant check is E721, and it can be disabled at the line level using # noqa. This is good enough for me.. Now I just have to wait for https://github.com/hhatto/autopep8/issues/307. ",
    "SoapGentoo": "@myint thanks, could you maybe tag a new release + PyPI so I could add it to Gentoo?. ",
    "webjunkie": "For me it doesn't do anything, though I would like it to change it to have spaces in every occurrence.. ",
    "DamnedScholar": "That ran successfully, thanks.\nThe other side of this issue is that the options for fix_code() should be listed in the README, so I'm leaving this open until they are. I had the thought to make the change myself, but they're not available from the source or docstring of fix_code(), either.. ",
    "jamasi": "I can confirm this with autopep8 0.9.1.\n```python\ntest = [xmod.yfunction(SomeModule.SomeClass, kwarg_1=\"cheese\", kwarg_2=fish[\"sea.huge\"], shop_closed = True),\n        xmod.yfunction(SomeModule.AnotherClassWithSomeLongName,  kwarg_1=\"cheese\", kwarg_2=fish[\"lake.too_small_to_keep_fishing\"], shop_closed = True)]\n```\n$ autopep8 -a /tmp/test.py \npython\ntest = [xmod.yfunction(\n    SomeModule.SomeClass, kwarg_1=\"cheese\", kwarg_2=fish[\"sea.huge\"], shop_closed=True),\n    xmod.yfunction(SomeModule.AnotherClassWithSomeLongName, kwarg_1=\"cheese\", kwarg_2=fish[\"lake.too_small_to_keep_fishing\"], shop_closed=True)]\nI would expect code formatted like this:\npython\ntest = [\n    xmod.yfunction(SomeModule.SomeClass,\n        kwarg_1=\"cheese\",\n        kwarg_2=fish[\"sea.huge\"],\n        shop_closed=True),\n    xmod.yfunction(SomeModule.AnotherClassWithSomeLongName,\n        kwarg_1=\"cheese\",\n        kwarg_2=fish[\"lake.too_small_to_keep_fishing\"],\n        shop_closed=True)\n    ]\nor even nicer:\npython\ntest = [\n    xmod.yfunction(\n        SomeModule.SomeClass,\n        kwarg_1=\"cheese\",\n        kwarg_2=fish[\"sea.huge\"],\n        shop_closed=True),\n    xmod.yfunction(\n        SomeModule.AnotherClassWithSomeLongName,\n        kwarg_1=\"cheese\",\n        kwarg_2=fish[\"lake.too_small_to_keep_fishing\"],\n        shop_closed=True)\n    ]\n. ",
    "christarazi": "I managed to fix this issue. Somewhat of a stopgap solution, because I did not look too deep into why this was occurring (also because I am unsure if rank should be returned in its current state). Maybe the maintainers will have a better idea on how to avoid this. The patch is below (from git format-patch):\n```diff\nFrom 7f25de9b5eae80d8ce7cb5df8af233e17bb60775 Mon Sep 17 00:00:00 2001\nFrom: Chris Tarazi tarazichris@gmail.com\nDate: Mon, 18 Sep 2017 11:55:23 -0700\nSubject: [PATCH 1/1] Fix issue #346: avoid IndexError on empty line\n\nautopep8.py | 4 ++++\n 1 file changed, 4 insertions(+)\ndiff --git a/autopep8.py b/autopep8.py\nindex 918af2d..f79ad71 100755\n--- a/autopep8.py\n+++ b/autopep8.py\n@@ -3520,6 +3520,10 @@ def line_shortening_rank(candidate, indent_word, max_line_length,\n     rank = 0\n     lines = candidate.rstrip().split('\\n')\n\n\nAvoid IndexError -- first line may be empty.\n\nif not lines[0].rstrip():\nreturn rank\n+\n     offset = 0\n     if (\n         not lines[0].lstrip().startswith('#') and\n-- \n2.14.1\n```. Can confirm @pikacic example triggers the problem. Seems like a very long comment that comes after a line that requires indentation is what causes it.. \n",
    "pikacic": "I have the same problem with this chunk of code:\n~~~python\ndef something:\n    pass\na quick brown fox jumps over the lazy dog, again, again, again, again, again..\nsomething_else = 123\n~~~\nThe comment is the line that triggers the problem.. ",
    "fcastilloec": "@hhatto I just updated to v1.3.3 and I don't see the error anymore! Thanks so much!. ",
    "danquack": "I am not using pythonVSCode. I downloaded the package straight from VS Studio marketplace. Then I tried pip installation. When I make a manual entry into the config for autopep8 and then do a >format nothing happens. . Opened up a stack, but I think this is related to autopep8 itself. Link to stack: https://stackoverflow.com/questions/46679151/how-do-you-format-python-code-in-visual-studio-code. ",
    "Sybrand": "brew install autopep8\nFixed it for me.. ",
    "mirkocoric": "Now it works as expected!. ",
    "sfermigier": "I'm using version 1.3.3:\n\u279c  tmp cat bar.py\ndef sync_ca_rh(self, partenaire):\n    infos_d = {}\n    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n\u279c  tmp pip2 install autopep8\nCollecting autopep8\nCollecting pycodestyle>=2.3 (from autopep8)\n  Using cached pycodestyle-2.3.1-py2.py3-none-any.whl\nInstalling collected packages: pycodestyle, autopep8\nSuccessfully installed autopep8-1.3.3 pycodestyle-2.3.1\n\u279c  tmp autopep8 -d bar.py\n\u279c  tmp autopep8 -d --ignore E711 bar.py\n--- original/bar.py\n+++ fixed/bar.py\n@@ -1,3 +1,4 @@\n def sync_ca_rh(self, partenaire):\n     infos_d = {}\n-    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n+    # type: List[PartenaireBusinessInfo]\n+    business_infos = partenaire.business_infos\n\u279c  tmp autopep8 -d --ignore XXXX bar.py\n--- original/bar.py\n+++ fixed/bar.py\n@@ -1,3 +1,4 @@\n def sync_ca_rh(self, partenaire):\n     infos_d = {}\n-    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n+    # type: List[PartenaireBusinessInfo]\n+    business_infos = partenaire.business_infos\n\u279c  tmp\nSo just adding --ignore <whatever> triggers the annoying behaviour.. \u279c  tmp autopep8 -v -d bar.py\n[file:bar.py]\n--->  Applying global fix for E265\n--->  Applying global fix for W602\n--->  0 issue(s) to fix {}\n\u279c  tmp autopep8 -v -d --ignore E711 bar.py\n[file:bar.py]\n--->  Applying global fix for E265\n--->  Applying global fix for W602\n--->  1 issue(s) to fix {'E501': set([3])}\n--->  0 issue(s) to fix {}\n--- original/bar.py\n+++ fixed/bar.py\n@@ -1,3 +1,4 @@\n def sync_ca_rh(self, partenaire):\n     infos_d = {}\n-    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n+    # type: List[PartenaireBusinessInfo]\n+    business_infos = partenaire.business_infos\n\u279c  tmp cat bar.py\ndef sync_ca_rh(self, partenaire):\n    infos_d = {}\n    business_infos = partenaire.business_infos  # type: List[PartenaireBusinessInfo]\n. (I had to add the .txt extension to be able to upload the file).\nbar.py.txt\n. ",
    "CMLivingston": "After exploring autopep8.py with pdb, I found that the else statement on line 298 and the subsequent setting of error treats continuation indents of size < 4 to be an under-indent and classifies this as a violation of E121. It may make sense to implement a condition for preventing classifying this case as a violation to assist orgs that use 2 spaces in their Python code. I'm going to leave this ticket up for feedback before I close or remove it. My workaround is to pass --ignore E121 to autopep8. . ",
    "toddfh": "'pip install --upgrade autopep8' fixed it for me.. ",
    "ErikBjare": "Just happened for me with a variable named classes.. ",
    "abendebury": "Try moving .flake8 to setup.cfg and using the pycodestyle configuration.\nhttps://pycodestyle.readthedocs.io/en/latest/intro.html#configuration. ",
    "DollarAkshay": "@michaelfresco Just replace [flake8] with [pep8]\n. ",
    "psavery": "I was having a little bit of trouble with this as well.... ",
    "dangom": "There is an interesting thread in SO discussing the issue.\n. ",
    "mossberg": "ah right, our fault. thanks!. ",
    "tommyjcarpenter": "I believe this was a won't fix, unless this has changed: https://github.com/hhatto/autopep8/issues/39. ",
    "wlaoh": "Most recent release I believe added this. https://github.com/hhatto/autopep8/releases/tag/v1.3.5. ",
    "patvdleer": "Quite possibly, but strangely enough, I can run it with python2.7.\nWorks:\npython2.7 -m autopep8 -r --in-place source/*\nBreaks:\npython3.6 -m autopep8 -r --in-place source/*. I will on monday morning. ",
    "sanjeethboddi": "@jayvdb can i be assigned to this one\n. ",
    "mamunozgonzalez": "This is also failing from me. It does not work when passed as part of the options in a python call.. ",
    "bje-": "Nope, that didn't help.. Unable to reproduce.. ",
    "varalgit": "Ah, you can do that by using the --ignore flag, which overrides the default ignores, this works:\nautopep8 --ignore E24 filename\n. ",
    "brupelo": "It seems the issue is because the default options with autopep8 1.3.5 are --ignore errors       do not fix these errors/warnings (default: E226,E24,W503)\nThey're different options to the one shown in the landing page btw.\nAlso, I don't see E24  explained anywhere in the docs, how so?. ",
    "PabTorre": "@myint  Should autopep8 ignore non python files  (like .txt ones) when running recursive? . ",
    "tony": "@hhatto Looking\nIs this true as of flake8 3.5.0?\nFor consistency with what other projects are using: I think it could make sense to use 'autopep8' as a section name since these are configuring autopep8 (unless you have another arrangement with PyCQA).\nAt least in my current situation (hopefully I understand correctly), I try to keep linting rules (flake8) and formatting (autopep8, black, yapf) configs separate. Does that make sense?. > At least in my current situation (hopefully I understand correctly), I try to keep linting rules (flake8) and formatting (autopep8, black, yapf) configs separate. Does that make sense?\nAlso, I may be wrong! This is just what I (think?) I'm accustomed to.. ",
    "matthewgrossman": "I also vote for an autopep8 section. In the same project, we are using flake8 and autopep8. However, there are some errors we want autopep8 to ignore but not for flake8 to ignore (specifically, E502). This is because we don't like the way autopep8 formats long lines. It would be great to allow for a set of overrides in the autopep8 section of the setup.cfg. ",
    "delandtj": "raised as bugreport https://bugs.python.org/issue34428. further investigation shows that generate_tokens is being called with single-lines of text.  this affects the state engine behind tokenize.generate_tokens, preventing it from properly detecting line breaks.\nif yield were utilised such that the tokenize.generate_tokens could continue with multiple lines it would probably be ok.\n. cat > x.py << EOF\n(\n\"(\")\nEOF\nautopep8 -a -a -a --experimental x.py\ngenerate_tokens is receiving text LINE by LINE.\ntherefore the state machine inside tokenize.py LOSES STATE.\n. demonstration of when object is only 3 characters long:\na.f((comma123123123hello1, fredblogshello2, hello3, hello4, hello5, hello1, hello2, hello3, hello4, hello5)\nautopep8 -a -a -a --experimental x.py\n--->  Applying global fix for E265\n--->  Applying global fix for E231\n--->  Applying global fix for E721\n--->  Applying global fix for W601\n--->  Applying global fix for W603\n--->  Applying global fix for W604\n--->  Applying global fix for W690\n--->  1 issue(s) to fix {'E501': {1}}\n--->  1 issue(s) to fix {'E128': {2}}\n--->  0 issue(s) to fix {}\na.f((comma123123123hello1, fredblogshello2, hello3, hello4,\n     hello5, hello1, hello2, hello3, hello4, hello5))\nthis is the desired behaviour.... except it is ONLY possible to achieve if len(\"object.functionname\") is less than 4.. even a long function name is somehow managing to do the correct thing:\nlongfunctionnamelikethis((comma123123123hello1, fredblogshello2, hello3, hello4, hello5, hello1, hello2, hello3, hello4, hello5))\nis turned into:\nlongfunctionnamelikethis(\n    (comma123123123hello1, fredblogshello2, hello3, hello4, hello5, hello1,\n     hello2, hello3, hello4, hello5))\nwith a 4-space indentation.\nit is SPECIFICALLY an object (Container) that goes wrong.. ",
    "cclauss": "Does same happen on Python 3.7?  3.5?. ",
    "hnykda": "We bumped into this as well with these few simple lines of code:\nRENAME_MAP = {\n    'q21858\\_38': 'q21858__38',\n}\nit is a valid Python, but following line:\nautopep8 --in-place --max-line-length 120 --aggressive <file_with_above_content>\nfails with autopep8==1.4. \nThis went through fine:\nRENAME_MAP = {\n    'q21858\\_38': 'q21858__38',\n}. ",
    "martemyev": "Hi, do you have an example that reproduces the unexpected behaviour?. I have older versions: autopep8, pycodestyle 2.3.1, but that's what I have\n```\n$ autopep8.py test.py -v\n--->  Applying global fix for E265\n--->  Applying global fix for W602\n--->  3 issue(s) to fix {'E302': set([3]), 'E225': set([1, 5])}\n--->  0 issue(s) to fix {}\na = 2\ndef someFn():\n    print('hello there')\n    print(a == 3)\n```\nCould you check that pycodestyle reports W191 warnings for your example?. So, this is what happens:\n\nautopep8 reindents all lines globally https://github.com/hhatto/autopep8/blob/159bb88843e298534e46914da242e680a1c8c47d/autopep8.py#L3322\nrunning pycodestyle after that doesn't reveal any W191 warnings\nsince autopep8 doesn't know anything about W191, you can't ignore it\n\nOne solution is to prevent autopep8 from reindenting all lines globally:\n```\n$ autopep8.py test.py --ignore=E101,E111 -v\n--->  Applying global fix for E265\n--->  Applying global fix for W602\n--->  5 issue(s) to fix {'W191': set([4, 5]), 'E302': set([3]), 'E225': set([1, 5])}\n--->  2 issue(s) to fix {'W191': set([5, 6])}\na = 2\ndef someFn():\n        print('hello there')\n        print(a == 3)\n```\nIdeally --ignore=E101 should've been enough, but I think this piece of code is broken: https://github.com/hhatto/autopep8/blob/159bb88843e298534e46914da242e680a1c8c47d/autopep8.py#L3320\ntherefore you need both -ignore=E101,E111. Please check the links to the source code from the previous message. It shows that you can avoid running global 'reindent' function (that replaces tabs and fixes indentation globally) only if both E101 and E111 are ignored.. I'm afraid you couldn't avoid looking at the code in this case.. Hi Taewon,\nThe message will go away if you don't run autopep8 in the 'verbose' mode, i.e. you need to remove '--verbose' from the command line options.. ",
    "caballerofelipe": "Sure, here's my initial code:\n```\na=2\ndef someFn():\n    print('hello there')\n    print(a==3)\n```\nAfter running ./autopep8 ~/sampleCode.py, I get the following which is what I would expect to get (a=2 changed to a = 2, lines after a = 2, tabs changed for spaces, a==3 changed to a == 3).\n```\na = 2\ndef someFn():\n    print('hello there')\n    print(a == 3)\n```\nNow, running ./autopep8 --ignore=W191,E225 ~/sampleCode.py, I get the described behavior in the title but the E225 ignoring does work. Also notice that when the output is in the terminal directly (not saving to a file (...> filename.py) I get a white space in the first line, weird, I hadn't noticed this behavior.\n```\na=2\ndef someFn():\n    print('hello there')\n    print(a==3)\n```\nJust to be sure I did:\n$ ./autopep8 --version\nautopep8 1.3.5 (pycodestyle: 2.4.0). When running your code I get:\n```\n$ ./autopep8 ~/sampleCode.py -v\n[file:[path]/sampleCode.py]\n--->  Applying global fix for E265\n--->  3 issue(s) to fix {'E225': {1, 5}, 'E302': {3}}\n--->  0 issue(s) to fix {}\na = 2\ndef someFn():\n    print('hello there')\n    print(a == 3)\n```\nAnd when running pycodestyle I get:\n$ ./pycodestyle ~/sampleCode.py\n[path]/sampleCode.py:1:2: E225 missing whitespace around operator\n[path]/sampleCode.py:3:1: E302 expected 2 blank lines, found 1\n[path]/sampleCode.py:4:1: W191 indentation contains tabs\n[path]/sampleCode.py:5:1: W191 indentation contains tabs\n[path]/sampleCode.py:5:9: E225 missing whitespace around operator\nsampleCode.py.txt. Thanks! That works!\nHow did you come by with E101 and E111? Is it because of previous knowledge or did you see some output from one of the commands?. Ok but I meant without looking at code would I have been able to find a solution? Perhaps at looking at pycodestyle?. ",
    "bigredengineer": "\ud83d\udc4d The best thing about the -a, -aa, etc options was that you can control several classes of operations easily.  If the --select and --ignore contain some kind of grouping mechanism I would like the proposed change.  As part of this, the documentation would need to be updated to better showcase how the operations are grouped together.  Honestly, the documentation needs this anyway so it would be a good reason to dig into it.  . ",
    "liyingliu": "same question here :). ",
    "EmbolismSoil": "\nThanks for contribution.\nCould you tell us more detailed information on the environment?\n\nOS (detail of Windows version, etc...)\nPython Version\n\n\nWindows-7-6.1.7601-SP1 64-bit\nPython 3.6.6 64-bit. ",
    "benjaminjkraft": "For my purposes any of the following would work great:\n- a special commandline flag, say --pycodestyle-only, that says to only do things that pycodestyle requires.\n- separate error codes for these extra errors, so that I could ignore them using the usual mechanisms (e.g. --ignore which is what I am doing as a workaround, or better add them to the repo's .flake8 -- this is how other options are specified in this repo)\n- convincing pycodestyle to upstream the added checks, although that's perhaps a slower process.. The corrections I refer to are the ones here: https://github.com/hhatto/autopep8/blob/master/autopep8.py#L187 which are using the same error code as pycodestyle but making different changes.\nHere's a sample file:\n```\ntest.py\nclass Foo:\n    \"\"\"docstring\"\"\"\n    def bar(self):\n        pass\nRunning `flake8 test.py` returns no warnings, but `autopep8` still tries to make changes:\n$ autopep8 -d test.py\n--- original/test.py\n+++ fixed/test.py\n@@ -1,5 +1,6 @@\n # test.py\n class Foo:\n     \"\"\"docstring\"\"\"\n+\n     def bar(self):\n         pass\n```. ",
    "sonots": "git diff --exit-code approach also looks fine for me.. Thanks! looks good spec for me.. ",
    "dlintw": "thanks, it works,. ",
    "AlexArcPy": "Oh great, thanks a ton!. autopep8 --aggressive --aggressive foo.py --max-line-length=90 with double aggressive does not help either. ",
    "ATRAN2": "Updated to 1.4.2 and it works just fine now, thanks!. ",
    "samirbr": "Thanks.. ",
    "belugame": "Relevant information may be found here https://github.com/PyCQA/pycodestyle/issues/755. ",
    "chinh-trieutien": "re-install autopep8 with pip fixed.. ",
    "Tadaboody": "@hhatto Imports are also moved above __future__ imports. This creates a syntax error. . @Hanaasagi Will it fix the case of turning\npy\nfrom __future__ import print_function\nprint(3)\nimport functools\nprint(4)\ninto\npy\nimport functools\nfrom __future__ import print_function\nprint(3)\nprint(4)\nThus creating a syntax error by using autopep8?. ",
    "Hanaasagi": "@Tadaboody. emm, I meet the same problem. Maybe this patch can solve that imports are moved above from __future__ import \n```Python\ndef get_module_imports_on_top_of_file(source, import_line_index):\n    \"\"\"return import or from keyword position\nexample:\n  > 0: import sys\n    1: import os\n    2:\n    3: def function():\n\"\"\"\ndef is_string_literal(line):\n    if line[0] in 'uUbB':\n        line = line[1:]\n    if line and line[0] in 'rR':\n        line = line[1:]\n    return line and (line[0] == '\"' or line[0] == \"'\")\n\ndef is_future_import(line):\n    nodes = ast.parse(line)\n    for node in nodes.body:\n        if isinstance(node, ast.ImportFrom) and node.module == '__future__':\n            return True\n    return False\n\nallowed_try_keywords = ('try', 'except', 'else', 'finally')\nfor cnt, line in enumerate(source):\n    if not line.rstrip():\n        continue\n    elif line.startswith('#'):\n        continue\n    if line.startswith('import ') or line.startswith('from '):\n        if cnt == import_line_index or is_future_import(line):\n            continue\n        return cnt\n    elif pycodestyle.DUNDER_REGEX.match(line):\n        continue\n    elif any(line.startswith(kw) for kw in allowed_try_keywords):\n        continue\n    elif is_string_literal(line):\n        return cnt\n    else:\n        return cnt\nreturn 0\n\n```\nIt adapts to following situation\nPython\nimport math\na = 1\nimport collections\nfrom __future__ import print_function\nimport functools\nBut it can't solve that\nPython\nimport collections\nfrom __future__ import print_function\na = 1\nBecause, the above code will pass the check of pycodestyle. It only checks E402(Module level import not at top of file), but pyflakes contains additional check  F404(from __future__ imports must occur at the beginning of the file)\nBy the way, I think PEP8 is just code style, not a lint. It considers that the problem is not caused by autopep8, actually it's not a tool to fix SyntaxError.\nReference Flake8Rules. I think so. autopep8 depends on pycodestyle, above code will report that\nt.py:3:1: E402 module level import not at top of file\nAnd this patch using ast module to check whether the target line contains a __future__ import. if has, it will insert to next suitable position.. I'd like to resolve the remianing issue.. #467 . --aggressive will make non-whitespace changes. type(a) != A is not suggested in E721. \nMaybe you can try --ignore=E721. PEP 8 recommends this behavior.\n```\nWhen combining an argument annotation with a default value, however, do use spaces around the = sign:\nYes:\ndef munge(sep: AnyStr = None): ...\ndef munge(input: AnyStr, sep: AnyStr = None, limit=1000): ...\nNo:\ndef munge(input: AnyStr=None): ...\ndef munge(input: AnyStr, limit = 1000): ...\n```\nhttps://www.python.org/dev/peps/pep-0008/#other-recommendations\nIf I misunderstood your point, please correct me : ). ",
    "waspinator": "imports are also moved above sys.path.insert(), which breaks the import statement. . ",
    "tomshelley": "Thanks for your reply! Both commands went through without problems, but when i try to run the Autopep8 installation again i still get exactly the same error:\nIs there anything else I can try?\n/usr/bin/python3 -m pip install -U black --user\nCollecting black\n  Using cached https://files.pythonhosted.org/packages/e8/5f/0f79fcd943ba465cbd4bf303c9794970c13a95e5456630de9f72e7f37ad4/black-18.9b0.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"\", line 1, in \n      File \"/tmp/pip-build-6vqaoy91/black/setup.py\", line 7, in \n        assert sys.version_info >= (3, 6, 0), \"black requires Python 3.6+\"\n    AssertionError: black requires Python 3.6+\n----------------------------------------\n\nCommand \"python setup.py egg_info\" failed with error code 1 in /tmp/pip-build-6vqaoy91/black/\nYou are using pip version 8.1.1, however version 18.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.. Thanks so much again! I really appreciate it.\nGot most of that working, but at the 'make' stage I got this at the end:\nchecking whether build environment is sane... configure: error: unsafe\nsrcdir value: '/home/tom/Downloads/python3.6-ubuntu-xenial\n(2)/Modules/_ctypes/libffi'\nFailed to configure _ctypes module\n WARNING: renaming \"ctypes\" since importing it failed:\nbuild/lib.linux-x86_64-3.6/_ctypes.cpython-36m-x86_64-linux-gnu.so: cannot\nopen shared object file: No such file or directory\nerror: [Errno 2] No such file or directory: 'build/lib.linux-x86_64-3.6/\nctypes.cpython-36m-x86_64-linux-gnu.so' -> 'build/lib.linux-x86_64-3.6/_\nctypes.cpython-36m-x86_64-linux-gnu_failed.so'\nMakefile:603: recipe for target 'sharedmods' failed\nmake:  [sharedmods] Error 1\nand for 'make test':\nmake test\n CC='gcc -pthread' LDSHARED='gcc -pthread -shared    ' OPT='-DNDEBUG -g\n-fwrapv -O3 -Wall' _TCLTK_INCLUDES='' _TCLTK_LIBS='' ./python -E\n./setup.py  build\nrunning build\nrunning build_ext\nINFO: Can't locate Tcl/Tk libs and/or headers\nwarning: building with the bundled copy of libffi is deprecated on this\nplatform.  It will not be distributed with Python 3.7\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking target system type... x86_64-unknown-linux-gnu\nchecking for gsed... sed\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... configure: error: unsafe\nsrcdir value: '/home/tom/Downloads/python3.6-ubuntu-xenial\n(2)/Modules/_ctypes/libffi'\nFailed to configure _ctypes module\n WARNING: renaming \"ctypes\" since importing it failed:\nbuild/lib.linux-x86_64-3.6/_ctypes.cpython-36m-x86_64-linux-gnu.so: cannot\nopen shared object file: No such file or directory\nerror: [Errno 2] No such file or directory: 'build/lib.linux-x86_64-3.6/\nctypes.cpython-36m-x86_64-linux-gnu.so' -> 'build/lib.linux-x86_64-3.6/_\nctypes.cpython-36m-x86_64-linux-gnu_failed.so'\nMakefile:603: recipe for target 'sharedmods' failed\nmake:  [sharedmods] Error 1\nAm I missing CGC or something? Not completely sure what that is.....sorry\nOn Mon, Jan 14, 2019 at 9:37 PM Anthony Sottile notifications@github.com\nwrote:\n\nthat's a different error, that's black failing to install because you're\nrunning python3.5 probably?\nmint is ubuntu based right? you might have some luck with deadsnakes\nhttps://launchpad.net/~deadsnakes/+archive/ubuntu/ppa if you need a\nnewer version of python\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/hhatto/autopep8/issues/465#issuecomment-454170767,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AsdC_g1Agl10husflh0AcD3SpiJoVdQYks5vDPiCgaJpZM4Z8Wgo\n.\n. \n",
    "mxr": "I'm having this issue too -- this patch fixes it for me as well. ",
    "sazad44": "I tested it and with --in-place and one --aggressive flag it will change type(obj) != class to not isinstance(obj, class). They are not equivalent.. ",
    "cansarigol": "I've dealt a project that contains some code like this 'if x == False:'. When i checked the code with flake8, l  got this E712 error.. By the way, the problem is when I try to fix with autopep8 --in-place --aggressive, nothing happens. But except this other problems are fixed.. autopep8 1.4.3 (pycodestyle: 2.5.0)\n```\n\nautopep8 --in-place --aggressive -v -views.py\nenable config: section=flake8, key=exclude, value=_bin, .git,.tox,venv,migrations\nenable config: section=flake8, key=ignore, value=W504,W601\nenable config: section=flake8, key=max-line-length, value=119\n[file:views.py]\n--->  Applying global fix for E265\n--->  Applying global fix for E231\n--->  Applying global fix for E721\n--->  Applying global fix for W603\n--->  Applying global fix for W604\n--->  Applying global fix for W690\n--->  1 issue(s) to fix {'E712': {62}}\n```\n\nE712 code line like that:\nif okul.site_aktif == False:\n     pass. if i add another issue and run autopep8, the result is;\n--->  2 issue(s) to fix {'E712': {62}, 'E222': {65}}\n--->  1 issue(s) to fix {'E712': {62}}\nnot\n--->  0 issue(s) to fix {}. > > Oh, OK.\n\n\nCurrently you need to specify with the -aaa option.\nWe plan to change it to work even without the -aaa option.\nThanks.\n\nsorry I missed this message. I will use it like this. Thanks\n\n. ",
    "spitfireCH": "Hi hhatto\nthanks for your help! Apparently, I misunderstood the idea of this command. I thought I could change the option in Visual Studio Code that way, which uses autopep8 to format the code. \nYour example works, but doesn't quite do what I was hoping for. Is there a way to change max-line-length as default option to be used by Visual Studio Code? \nThanks and best regards. "
}