{
    "andrewdeandrade": "Before we can accept any pull requests, we need to have a Contributor License Agreement on file, can you please send me an email (andrew@famo.us) referencing this ticket so that I can send you a link to our CLA which you can sign online.\n. @jesstelford We received your CLA. Calling @dmvaldman and @marklu to merge this pull request. \n. We meant to have the docs section of the site available without having to login, but ran up against a deadline (some of us haven't slept in a few days). There are some docs in the famous/guides repo and the entire source code is JSdoc-ed. We'll be make the docs available without having to login shortly. Sorry for the inconvenience.\n. This repo is available now. We've prepared a readme for the repo that will be published shortly.\n. Oops. I just realized that I could see this repo because I'm part of the organization. Doh. We'll make this available asap. Sorry about the inconvenience. \n. Okay, examples are live:\nhttps://github.com/famous/examples\n. When several projects that began as private internal projects have been made public, it is not uncommon for a repo to be squashed before publishing the repo publicly. For example, Angular, Meteor and React all have initial commits that were derived from an existing codebase.\nhttps://github.com/meteor/meteor/commit/d69c2d1f198ab08a26a2b3bad07ccfa6f31d37da\nhttps://github.com/facebook/react/commit/75897c2dcd1dd3a6ca46284dd37e13d22b4b16b4\nhttps://github.com/angular/angular.js/commit/c9c176a53b1632ca2b1c6ed27382ab72ac21d45d\nHas the missing history from these three projects proven problematic for a reason of which we are not aware?\nThe original repo had dozens upon dozens of personal branches on it that we did not want to publish, each for a variety of different reasons. Furthermore, at this point with 150 public forks and many more clones out in the wild, I'm not even certain it is possible to put the history back onto this repo since this is a fresh start. \nThat being said we are listening and interested in hearing more. Is there something in particular you all are specifically interested in seeing? We're more than happy to answer any specific questions you may have about the code and why it is the way it is. Insofar as the commit history is concerned, I can't promise anything since there are discussions we need to have on this issue. However, if we do decide to retro-actively publish some of the history, can those who are intimately familiar with git suggest how this may be accomplished given all the clones and forks out there in the wild?\n. Unless anyone has any objections. I'm going to close this for now.\n. @tbranyen I totally hear ya on this. For future internal projects we release, we'll investigate the complexity of trying out a condensed history approach. Do you have any examples or suggestions on how one might go about doing this or what constitutes a good condensed history?\nOne of the more difficult things we had to reconcile was licensing issues. For example, we ended up going with the MPL license, but in a few cases people erroneously applied a license to the copy when copying and pasting stuff and we didn't want some previous version to be available under a different license via the git history. For example, if you create a node.js module, the default license is ISC. if you go through and decide that isn't the license you want when you release then what do you do about the entire history of the package.json file? AFAIK, there isn't really a way to rewrite the entire history of a file to selectively remove a few lines. Is there? \nThere were a few more issues than just this. One example I can think of from my own work is a copy-paste job of a loader library from TJ Holowaychuk's component.io in one file. That library is MIT-licensed, but I never made any effort to cite it beyond a quick 2-3 line comment at the top stating where the code was extracted from because it was always meant to just stub out the functionality and I never intended to keep that loader library in my code. In fact, I'm replacing it with something completely different that shares nothing in common (code, design or interface) with the copy pasted code that was originally there*. In a case like this, when all this work was private and always intended to be temporary scaffolding that wouldn't be there anymore at launch, the history, when made public, ends up running afoul of the right way to document from where you borrowed things. It's not like there's an easy way to go back and give credit to that code in the past that no longer exists in the future.\nAnyways, I'm a fan of your work and we've spoken a couple of times back on #backbonejs on freenode since before 0.3.3. Let me know if we can help any and feel free to join us on #famous . Are you still in the Boston area? If you're in the Bay Area ever, feel free to visit us. My email is andrew@famo.us.\n- FWIW The original code was a simple CommonJS loader. I'm using AST manipulation and code generation to explicitly link things together in the correct order.\n. Pull request that fixes this is pending:\nhttps://github.com/Famous/famous/pull/20\n. Before we can accept any pull requests, we need to have a Contributor License Agreement on file, can you please send me an email (andrew@famo.us) referencing this ticket so that I can send you a link to our CLA which you can sign online.\n. Olivier, did you receive the CLA we sent to the email you used for this pull request?\n. No, thats fine. I'll check the docusign system again.\n. Pull request that fixes this is pending:\nhttps://github.com/Famous/famous/pull/20\n. Yes, the license is compatible with the GPL since it is the vanilla MPL without the copyleft exclusions. We debated whether or not to include those exclusions and decided against it so people could mix famous in with GPL code. \nWe do however encourage those who want to use famous with GPL code to also publish any changes they make to famous separate from the GPL code they mix it with and to make in known in the famous source code files that those files are also available in MPL form elsewhere. \ni.e.\n1. Fork famous as a separate repo\n2. Make modifications and improvements to that repo without adding any GPL code to that repo.\n3. Include the code from your MPL fork in your GPLed code with a modified header that lets people know that they can get an MPL copy of the source by going to the MPL-licensed fork of yours. \nor\n1. If you don't need to make a fork since you aren't modifying famous, just be sure to modify headers to let people know where MPL-licensed code can be found so they can use that license if they prefer. \nIf mixing in GPL-licensed code with MPL-licensed code is unavoidable (in the case where the only way to accomplish something is to copy and paste GPL-licensed code into the famous MPL-licensed code, please be careful to clearly mark that that specific file is only GPL and don't include it in your MPL-licensed fork)\n@ziodave thanks for that information. It will be fixed shortly.\nLet me know if you have any of you have any additional questions\n. We'll add this information to a FAQ on the site for people who have this question later.\n. Can you please post the contents of this file: c:\\Users\\myname\\famousProject\\package.json?\nAlso, judging by a lot of the paths with multiple \\ in them, it looks like someone didn't correctly code the node.js javascript paths in a cross-platform way. Almost all path forming needs to be handled with the core path module.  This honestly shouldn't cause the problem you're seeing (unless windows handles multiple successive \\ diffferently from *nix). However, the fact that it's forming paths like that on windows is likely an issue with npm (but not the issue you're trying to resolve here).\n. try creating the following file in the c:\\Users\\myname\\famousProject\\ folder:\nvar pkg = require(\"./package.json\");\nconsole.log(pkg);\n... call it \"test.js\" and execute it with the following command:\n```\n\nc:\\Program Files (x86)\\nodejs\\node.exe test.js\n```\n\nif that errors out, try changing the file contents to the following:\n```\nvar fs = require(\"fs\");\nvar path = require(\"path\");\nfs.readFile(path.join(__dirname, \"test.js\", \"utf-8\", function(err, data) {\n    if (err) { return console.error(\"fs err:\", err); };\n    console.log(data);\n    try {\n      var json = JSON.parse(data);\n      console.log(json);\n    } catch (e) {\n      console.error(\"catch(e):\", e);\n    }\n});\n```\nand run that command again. you can also email me that file at andrew@famo.us and I'll inspect it myself (since github doesn't allow posting of textfiles here I don't think, and I want to see the exact file and not a simple gist of it.\n. Ok, so we figured out the cause of this. You need to make sure you have git installed on your computer and in the PATH. Since you're on windows, make sure you install git from the official installer instead of the version on cygwin.\nUse this link here: http://git-scm.com/downloads\n. attn: @timjchin\n. We'll fix this as soon as we have a web-form based CLA. For the time being CLA requests are being sent out via docusign. We sent you a CLA request using the email on your pull request. Did you receive it?\n. attn: @shupac \n. So this is the result of half-pixels. Fixing this is possible and planned, but it's probably not trivial since we need to make sure our solution doesn't end up causing the \"dubstep effect\" where pixel snapping occurring on every frame causes flickering. We'll fix this at some point via pixel snapping that only occurs on the termination of a transition/animation. \nhttp://martinkool.com/post/27618832225/beware-of-half-pixels-in-css\nhttp://www.paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/\n. Calling @dmvaldman and @marklu to merge this pull request. \n. Not yet. The design firm ThomasStreet is building the angular integration and I believe they are going to be releasing their angular integration code in a month or so. In the meantime, you may want to contact them for further clarification:\nhttp://thomasstreet.net/\n. @jdiaz5513 Let me know how browserify-ftw could be modified (beyond your instructions above) to get it working out of the box with no modifications. If it is reasonable, I can submit another pull request to browserify-ftw since I'm already familiar with that repo (since I made most of the changes that allow it to work nicely with famous code). I'm particularly interested in knowing the reason why those changes you made were necessary. i.e. what side effects did you observe without them that were undesirable? (FWIW I used browserify-ftw as a library and not as a CLI tool, so I'm not familiar with its CLI behavior).\nTo make things easier for others and to make this repeatable in other repos, add the following script to ~/bin and chmod +x it. \n```\n!/bin/sh\nset -eu\ncommand -v browserify-ftw >/dev/null 2>&1 || { npm install -f browserify-ftw; }\nDIR=pwd\nREQUIRE=$DIR/require.js; ENTRY=$DIR/entry.js; CONFIG=$DIR/config.js\nFILES=( $REQUIRE $ENTRY $CONFIG )\nfor i in \"${FILES[@]}\"\ndo\n  [ -f $i ] && { echo \"${i} already exists. aborting\"; exit 1; }\ndone\necho \"require.config({ paths: {} });\" > $REQUIRE\necho \"define([],function(){});\" > $ENTRY\necho \"module.exports = { indent: 0, dryrun: false };\" > $CONFIG\nbrowserify-ftw -r $REQUIRE -c $CONFIG -e $ENTRY\nrm $REQUIRE $ENTRY $CONFIG\n```\n. AFAIK none. I would check with Mark.\n. @jdiaz5513 We have no plans to support coffee-script. Support for compile-to-js languages is an exercise we plan on leaving up to the community to solve. With that in mind, feel free to create your own generator for coffee-script. \nFurthermore, once we start curating and promoting re-usable modules within the community, we will probably not curate or promote compile-to-JS modules, examples or tutorials, unless they offer significant benefits in terms of what is possible in vanilla JS (e.g. some projects like clojurescript core.async and swanodette/mori are examples of exceptional projects). If something is meant to be shared with the community and can be written in vanilla-JS, it should be. Some homogeneity on bikeshed issues in a community is valuable since makes it much easier for developers to jump into someone else's code and contribute, and increases compatibility among and inbetween projects. The PEP-8 style guide in python, testing and documentation standardization in the perl community (CPAN) and the decision to standardize around callbacks and how callbacks are implemented in NodeJS are stellar examples of a developer community not being it's own worst enemy.. \n\"Il semble que la perfection soit atteinte non quand il n'y a plus rien \u00e0 ajouter, \nmais quand il n'y a plus rien \u00e0 retrancher.\" --Antoine de Saint Exup\u00e9ry\nThat all being said, feel free to code your own projects up in coffee-script or whatever compile-to-JS language you want. \n. @gadicc Totally agree that you shouldn't have to use our website serving tools/code, and currently you don't have to since everything is still require.js based. That being said, we're building out an optional toolchain that you can choose to not use (if something like meteor meets your needs and there is a meteor module that can work with famous modules) or that you can use with meteor via a meteor module that executes our toolchain via API calls. \nMeteor is but one back-end out there and we're building out a toolchain that works with npm and bower that will eventually offer API access through SDKs for developers using other backends. For example, if you have a go or python or ruby or scala back end, you may not have a javascript toolchain already set up, so it would be useful to have a javascript toolchain that your server could hook into. \nFurthermore, famous is not just a vanilla framework. It may look like one now, given the way its currently packaged, but its actually a series of inter-dependent utilities that can be re-arranged and used in different ways the same way unix utilities work. You're eventually going to see tooling that helps you bring in new modules created by us or by members of the community into your project. Once that happens, the famous toolchain will help you get these modules into your project and hooked up correctly. Since we're taking an npm/bower like approach, it's likely that meteor will eventually need an interop layer similar to the one used to interop with npm.\nAnyways, I wouldn't worry too much. We're not going to stop you from using coffeescript in your own code and we're not going to force you to use our toolchain (however they will make your life easier). You're free to take the famous front-end code and organize it the way you want in your project. \n. @jdiaz5513 Exactly, basically long term we're going to be pushing tools that support common conventions in the famous community. The more similar code is between members of the community on bikesheddy issues (syntax, style, docs, tests, etc), the easier it is for every to parachute into unfamiliar code and change and improve things. Fixing bugs and improving APIs is preferable to monkey-patching 3rd party code because the friction of dropping into it and changing it is too high.\n@gadicc Obviously, if you have a product you're building and you've got a team with your own shared conventions that differ from those we're establishing, you should not only be free to follow your conventions, but supported in doing so. It's only when piece of reusable code becomes a shared artifact in the famous community that we're going to push for a common way of doing things. This is the general idea behind shirky's essay \"A group is its own worst enemy\" that I linked to above. If you've never read it, you should. It's very much worth it.\nhttp://www.shirky.com/writings/group_enemy.html\n. @Vertice @gadicc @jdiaz5513 Furthermore, we have some future tools that are going to necessitate everyone working with vanilla javascript insofar as shared community artifacts are concerned. Stay tuned...\n. @reem what platform are you running Chrome on? Is this Chrome on Windows?\n. @kof What's up? Just chiming in here to give you a better mental map of how everything works together, so you can figure out what each component does and why things were designed the way they were. I'm going to start at a low level and work my way up.\nFirst, famous is designed around the notion of retain-mode graphics and a scene graph (which we currently call a render tree). Basically, retain-mode (versus immediate mode) is a way of handling scene graph modifications in memory and then deploying them to the screen on a fixed interval. DOM is natively immediate mode. When I set a property, that change happens instantly over the next few clock cycles. This is bad for the perception of visual performance because there is no intelligent control over what happens and when it happens. The burden is 100% on the developer to program things to the best of their capacity. Retain-mode affords developers the ability to declaratively state what transformations they'd like (which changes the model in memory) and then the famous \"engine\" (specifically engine, specparser and other primitives) are responsible for deploying those changes to the DOM. These low level components make sure that the minimum number of DOM mutations are necessary and that these DOM mutations are performed in the order that is fastest and causes the fewest performance harming side effects.\nWith those low level components described, let's move on to some of the higher level components addressed above. First let's start with the idea of a scroller. In famous, the core scroller component is really very primitive and intentionally so. The core scroller effectively acts as a controller that accepts a linked list of renderable objects (i.e. a mathematical set), maintains a cursor to the current position in that set (the first item by default until the internal state changes). Furthermore, the core scroller supports the notion of a \"master output function\" which is basically a function that accepts a renderable (with an internal state in the form of a transform and size) as the input and them mutates the state of that renderable based on the position of that renderable relative to the current cursor position). \nWith this in mind, you can use a SequenceView to build up a linked list of renderables (anything from simply surfaces all the way up to a complex view with many surfaces), that can be of the same view/widget type (like a list of tweets) or all different (like all the different types of stories in a facebook feed).\nNow let's briefly address limitations relative to the quantity of surfaces that Famous can performantly manipulate in the current crop of modern browsers. On a decent desktop or laptop, I've seen some stress tests get up to 400 surfaces being manipulated simultaneously and all being in the viewport. This is more than enough for all but the most demanding cases. Why? Because the likelihood that you have (1) 400 items in your scene graph, and (2) in your viewport, and (3) all moving at once is really really slim. Even 50 to 100 is unlikely except on large screens. \nHow does all this relate to the scrollview? I can create a scroller to display an infinite list, I would use a controller that feeds them into a controller that exposes a ViewSequence-like API (i.e. \"link\" them all together and expose an API with get next and prev that the scroller knows how to move through) and then give that sequencing object to a scroller and display that scroller in a context and have it work performantly. So long as I don't set up the scroller properties relative to the viewport in a way that more than 200-400 surfaces are visible at a time it should work. If I only have 10 surfaces visible at a time relative to the viewport, then the engine really only does the work of manipulating a little more than 10 surfaces.\nNow, this rule applies to simple surfaces, where those surfaces are basically static (they can contain complex DOM, but that DOM is basically unchanging). Now you ask \"What if I want something more complex than a static surface?\". Well then you have a multiplicative effect. If you have 10 views visible in a view and each of those have 3 dynamic parts, then you are deal with ~30 dynamic components in the viewport. If each has 20 items, things get hairy since we get back up to the 200 simultaneously manipulated surfaces, which starts to become problematic.\nSo, given these concepts, how should one go about working with the scroller with complex objects and not lose their mind? First, always think about things in famous in terms of objects/elements that can be independently changed (i.e. affine transform and opacity). If I have two DOM elements that buzz around the screen each according to their own movement function, then those should be allocated as two views. If however, I have a post it note with a title and body copy and those always move together and are shown or hidden together, they should go together on the same surface. By putting them on the same surface, you make the Famous engine only perform the work (calculations and manipulations) on one node in the scene graph.\nIf I got things right, the issue you're mainly concerned with is the work of deploying and redeploying view objects in your scroller. The current interface for a surface is very naive and intentionally so. It let's you pass in a string representation of the DOM you want. When scrolling fast enough on view sequence items that have a reasonably complex HTMLDocumentFragment to be rendered, you're likely to encounter some performance issues. This isn't an issue or limitation with the scroller or the view sequencer or surface itself. Instead this is suggestive that there is yet another place where there is room for additional optimizations that what we've yet had the opportunity to build into the framework. How are people likely to solve this problem now?\n(a) they could try to solve it with famous, but continuously partitioning their views into more and more surfaces. This naive approach is not desirable because it's bad for performance (more visible nodes in the scene graph being manipulated) and because its unnecessary. If these further partitions result in visible elements that move together (i.e. same affine transform operations) or \"opacitate\" together (i.e. all have the same opacity at any point in time), there is no value to putting them in the scene graph. \n(b) The other naive alternative is simply regenerating an HTMLDocumentFragment string using a well known client-side templating solution like handlebars or ejs. This will get the job done, but is less than desirable since it causes the browser to do a lot of work, since it needs to take a string, parse it into an XML representation in memory, used that XML object to construct the document fragment and all its children and parse the properties of each XML node to set IDs and classes, cascade CSS properties to style it, etc. This is an awful lot of work to do every time you deploy a surface. \nThe smart approach, which we're investigating is creating a templating solution that can be modified at the DOM node and property level. i.e. we construct the DOM fragment once and any changes to the model that backs that object propagates to only changing the minimum nodes on the DOM necessary as opposed to fully recreating that entire fragment for the sake of changing one or two of the leaf nodes. We do not yet have our own solution for this, but some solutions out there may already work out of the box. Two that I am aware of (but have yet to try out myself) are Meteor's Blaze templating engine and Ember.js' HTMLBars templating engine. IIRC, both of these attempt to address the performance implications of recreating larger chunks of the DOM for the sake of one or two elements. Furthermore, I wouldn't be surprised if React.js were also usable in this intra-surface context for diffing DOM efficiently. As someone who has maintained a templating engine for HTML yourself, I'm sure you'll appreciate the nuance here between what Famous does well and HTML templating system with atomic updates that will complement us well. \nAll in all this is not broken by design, and the design is very much intentional. This is something we've been aware of for a long time and we've been keeping strongly to small composable parts that have single responsibilities. The issues you point out are responsibilities that need to be handled, but they should be handled by specific components that handle those problems well instead of overloading components like Surface with that functionality.\nWe're not avoiding a fix here because these components aren't broken. Famous is beta and already mature for many use cases. For some use cases, like yours, we're working on our own additional components that solve your use case, but if your impatient, you can take the components we have and use them for what they do well and couple them with other solutions out there that address the problems we have yet to address. The only difference between those solutions and what we're going to build largely will come down to API consistency and ease of use. Under the hood, the solutions are going to have a lot in common. API-wise, once we have our own primitives for solving these problems, we'll make it so you don't have to actively spend your brain juice on choosing when to use a surface or a view or a templating engine with the ability to perform atomic DOM mutations. \nAnyways, I hope this helps clarify things. Let me know if you have any further questions. If you do decide to explore Blaze, HTMLBars, React or your own solution for intra-surface atomic updates, please report back. We'd love to hear what you discover. \n. @dcsan Totally understand your concerns with \"all or nothing\". There is some truth to that statement, but I think that overtime, this will become less of an issue over time, and for the specific case outlined above is not exactly the case.\nWe (royal \"we\" as in all web devs) have been abusing the DOM for years. First, we used tables to achieve complex layouts, then there was the backlash against tables that pushed us to use DIVs instead of tables because they are semantically less meaningful and thus a better blank slate object to work from. Whether it was table hell or div hell, we've been producing frameworks for the better half of the web's 25 year existence whose job is simplifying the management of this hell. Given the shear quantity of these solutions and the number of libraries that bundle div hell management as a core piece, it's understandable that our radical departure from these approaches lacks compatibility with many libraries out there. On the other hand, now that this solution is here and here to stay, you'll find that although famous doesn't play nicely with libraries from the past, it will play nicely with libraries being created today and that will be made in the future.\nCase in point: React.js. ReactJS shares a lot of things in common with Famo.us. In fact, we've been talking to the core react people for a long time now. @petehunt (a core author/committer) paid a visit to our offices and was able to cook up a na\u00efve integration between Famo.us and React together with @dmvaldman. They can correct me if I'm wrong, but I think it took them a 1-3 hours and 100-200 lines of code to do most of the integration. Over time there will be more and more libraries that adopt some of the same techniques as us and for the most part they should play nicely with a little work.\nFWIW, we're now actively devoting time and effort to integrations with other popular modern javascript libraries and frameworks out there (react, angular, ember, d3, backbone, etc). We're also looking into how to reduce the \"all or nothing\" perception and reality. Let us now how we can improve this. If there is something specific, we're all ears. If you've got a proof of concept, even better. So long as these solutions don't comprimise some long term goals we have, we're open to making famous more compatible with what is out there.\nLastly, with regards to the issue in this thread specifically, Handlebars and EJS work just fine. I don't see any technical reason off the top of my head as to why something like Blaze, HTMLBars or ReactJS could not be leveraged to solve the problem described above so long as the mutations being made are not affine matrix or opacity mutations.\n. @kof No problem.\nWe're working on documentation. If you feel that there is something specific where you think the documentation is lacking, please by all means open up a git issue asking for someone on the team to dive in and clarify things. We're here to multiply the effectiveness of each other and members of the community like yourself. If you're not effective because docs are missing, let us know. We'll address that. \nWhat would be most useful would be to go through the source and put comments in. One approach is to fork the repo in question and then, in your personal fork, comment directly on the source code using \"@\" mention with the handle someone on the team to get them in on that discussion.\nRegarding the DOM diffing approach, we'd actually like to take things one step further. First, we want to get developers away from modifying HTML at all for anything dynamic. HTML content is always either static or always \"instantiated\" once with some JavaScript interface for updating the content. Until the browsers provides a perfomant alternative (which may not be possible due to path dependency), touching the DOM directly is usually death to performance. Instead we should let JavaScript handle the applications of all mutations for us. It is in that interop layer that we can program everything to be efficient and fast. The way we see it, HTML is valuable to help people structure semantic content (per the original intent of hypertext) and that from that HTML we can generate JavaScript objects that give us the interface we need. Better than strings of HTML is just using POJOs (plain old javascript objects) that either describe the values to be updated in the DOM or function as references to other POJOs and the corresponding template objects. These DOM managers can be recursively defined and the developer need not worry about implementation details of how DOM nodes are mutated or how DOM children are attached, removed or otherwise manipulated.\nI am by no means the lead architect on the famous framework, so don't be surprised if @dmvaldman  @marklu @ftripier @michaelobriena, etc, correct me above. Hopefully they will add more to the discussion here, either addressing your need or suggesting an alternative.\n. @kof Can you provide more details on your specific case? For example, what is the event you're listening to and what are you trying to calculate on that event?\n. So you only want to forward the event along to the object if it is visible, correct? since the object should only do something with the event if it itself is visible, right?\nIf that is the case, it sounds like you may be heading down a path where there is a more general solution to consider. DeviceOrientation or changes in window sizes are examples of constraints that can be applied to your application. Other constraints that are possible might be available input methods (is touch supported? how about general keyboard input?). If your constraints change, you want your application to respond to those constraints, such as changing to a landscape or portrait design or maybe just resizing. \nBefore I continue, am I correct in my assumptions?\nAlso, just to clarify what I'm trying to do here. When someone asks for a new feature or how to access some internal detail, it's important to figure out what they are trying to accomplish since a solution might already be on the roadmap, or there may be a better way to solve the problem. \n. @redwoodfavorite How did you accomplish the occlusion culling in that recent demo of yours? Is that going to be released as a module that can be used to check what is visible?\n. @kof At the moment @marklu is quite busy on some low level stuff, but I'm pretty sure he's going to have to chime in here. I'll speak with him tomorrow (time permitting) and try to see if I can get some sort of visibility on this.\nIn the meantime, I'll add a little bit of speculation (but again this is beyond my area of expertise so take this with a grain of salt).\nPreviously, in the guide docs, we've discussed the possibility of moving from the term \"render tree\" to \"scene graph\", because at the end of the day any modern 3D layout system implements additional edges in a scene graph than famo.us has implemented thus far. (See this issue for this naming discussion: https://github.com/Famous/guides/issues/24 ).\nOur current scene graph only implements one type of edge, the user-defined edge. This is the basic building block edge of scene graphs. A user (like yourself) adds a surface to the tree and it gets rendered. Using some of the current scene graph primitives, you can add nodes that allow you, the developer, do determine which branches of the tree are followed. Our current scene graph only tells you where isVisible is true or false, where visibility This current approach leaves enough room to get to 200-400 simultaneous surfaces on modern browsers. \nThe experiments that @redwoodfavorite favorite is doing is an exploration of how to determine what surfaces are in the viewport. His approach is just one strategy of many that can be used to add other edges to the scene graph, which can be followed on each tick to mark the nodes on the graph as exposed or not. If you're familiar with another rendering/layout/windowing technology like qt, this is the basis of the other useful piece of information you're looking for, \"exposure\".\nWith all this in mind, the presence of an API features such as an isExposed method and the firing of an expose with a true or false value whenever a surface becomes exposed or gets covered is something we're exploring now.\nThat being said, this contributes to but is not the entire solution to the use cases mentioned. For example, your facebook-like feed with images scenario requires a more specialized solution implemented at an entirely different part of the app stack. A solution for that problem would probably need to be implemented as two parts, one as an extension to the scroller that takes information like speed and direction and emits the likelihood that a surface will become exposed and for those surfaces that are likely to be exposed, the likelyhood that it will remain in view as opposed to fly by. The second half of the solution would be implemented wherever you perform image loading. If you use an image tag, then it would be at the view layer, but if you load an image using the javascript new Image() constructor, it could occur at the data or controller layers. Implementation of this lazy loading is something we will likely explore in the future, but it currently outside the scope of our near term plans. \nFor the second use case in the immediately preceding comment, I reckon you have other better ways to solve that problem. The most obvious one to me is to toss out the idea of a spinner entirely, which average user perceives as downtime, and replace it with transitions. I'll use one of my favorite examples of this approach: maps loading. \nWhen a user loads a map, they are given a default starting location that is loaded quickly or likely cached from previous visits. For map users in the US, this is the Mercatur projection of the United States (European users like yourself might see Europe or your specific country). From there, when a user types in a location and clicks \"Go\". The map isn't immediately replaced with the location of choice, where they then sit and wait for the map tiles to load. Instead, the loading of those tiles happens is kicked off immediately, but the user interface transitions to that location on the map via a parabolic are with disney animation principles like anticipation, followthrough, slow in and slow out. See http://www.ui-transitions.com/#motion for a demonstration of each of those principles. This transition and the additional effects buy you, the developer, enough time to go ahead and have much of the map loaded by the time the transition ends and your user is at your destination. You can take these animation principles and apply to your interface as an alternative to any scenario where you might be considering a spinner. \nI hope this all helps, and we'll keep you posted on progress and plans here.\nFurther Reading:\nHidden Surface Determination\nVisibility and Windowing System Exposure in QT\nA Characterization of 10 Hidden Surface Algorithms\n. The immutable data structure approach has other benefits like being able to stream serialize diffs to the render tree for playback, rewinding, etc. That being said, the global render queue approach @kof suggested is probably the fastest way to do things. The current dirty checking approach is probably one of the more composable approaches since it's a shared nothing approach.  I'm wondering if there is room for a hybrid approach that gets you the best of all worlds.\n. @michaelobriena @DnMllr @ftripier You three are best qualified to comment here. What say you all?\n. @marklu \n(1) The eslint annotations here are purely temporary and would be removed on the next minor release since we are pre 1.x.x (e.g. 0.2.x -> 0.3.x). The goal here is simply to provide an inline deprecation warning via console.log. The only alternatives to the inline eslint directive, is to add an inline directive to the top of the file to disable the no-console-log rule for the file or to turn off the no-console.log rule in the .eslintrc file. Turning off rules for the whole file or whole project is not desirable, lest we allow people to introduce console.log statements elsewhere by accident. The presence of this directive may be bothersome, but this is temporary and deprecation warnings are an important part of pro-social software development. It lets people know \"Hey, you should change this ASAP, cuz there's no guarantee that this will be in the next version\"\n(2) Yes, performance.now() is slower, but marginally so (not quite a half order of magnitude slower from my tests). However, I'm working on another pull request to introduce a clock/chronometer class for caching time calls. This class would expose a now() function that returns a cached time value unless you want it to poll performance.now() or Date.now() for a new value. For the most part 99% of the time, only the Engine loop should ever really need to get a non-cached value (which updates the cached value). From my testing, this cached approach is an order of magnitude faster than Date.now(). Furthermore, this approach consolidates all time checks to one single class, which can easily be replaced by a test double or by a class that allows controls to manually update the time value (which would all for the scrubbing of time, forwards and backwards). Ideally no module should ever be calling Date.now() since it represents state that introduces side effects. By polling a single class responsible for encapsulating this side effect, you get a lot in return.\n(3) The quantity parameter is there for testing and development purposes. It allows you to specifically step the engine forward in tests to make sure callbacks happen at the right time. It can also be controlled in a Bret Victor-esque approach. i.e. step forward 600 frames (i.e. 10 seconds under ideal conditions). I need to double check, but I reckon this could be removed in favor of just a simple \"step one frame at a time function\" and then it is the responsibility of the testing and development tools to determine how many times step needs to be called for a certain purpose. \n. ",
    "dmvaldman": "The readme has since gone significant change. This request is no longer valid. Please keep contributing to other parts of the platform! Now that we've got our act together, we'll be able to merge in much faster.\n. This file has since had significant change. This request is no longer valid. Please keep contributing to other parts of the platform! Now that we've got our act together (finally, right?), we'll be able to merge in much faster.\n. @yosun we're definitely working on it internally. There are a lot of edge cases as you can imagine, as the comparison is not quite one-to-one. Thanks for bringing it to our attention. If you have opinions about how other libraries have addressed the issue, we'd love to hear it.\n. This is not so straightforward, as both mouse and touch can be supported on the same device, and there are subtle differences between the two, such as their target\n. We are rolling out these features to 500 people a day as we're testing them out. We'll be quickly ramping up that number soon. Thanks for your patience!\n. just ran\ngit clone https://github.com/Famous/core.git\nand it worked for me. What are the potential risks?\n. If you set {size : [true, true]} the size will use the DOMs computer size, otherwise the size must be set in Famo.us rather than in CSS. The default is [undefined, undefined] which means \"expand to parent size\", giving you the behavior you're observing\n. The value is actually updated only when the appropriate getter is called. If you report .get() on each frame, you'll have the updated value.\n. @jperl do you have a perspective defined, or are you in a containerSurface?\n. you may need to set a perspective on the containerSurface as well, unfortunately we don't expose as API for this yet. Can you try myContainerSurface.context.setPerspective(1000)?\n. This should be fixed on the most recent release (0.1.2). Would love a confirmation!\n. Thanks, this has recently been fixed. In the future, kindly provide an issue in the appropriate GitHub repo, in this case famous/core\n. Adding two surfaces without directly translating one in front of the other with a Modifier results in a \"conflict\". We resolve the conflict not in the order that the surfaces were added, but actually when the surfaces were created. \nUnderstandably, this is an anti-pattern, but would require a significant refactor to reimplement. The accepted pattern is to use a Modifier with a {transfrom : Transform.inFront} option, or Transform.behind.\n. We are working on having Famo.us Surfaces target existing DOM nodes in a future release. This will widely open up Famo.us integration with existing projects. For now, as @gadicc said, you can call .setContent on a Surface with either an HTML string, HTML, or a documentFragment. A template can render this for you (using whatever tool you like, Handlerbars, Moustache, etc), and you just have to pass it to the Surface.\n. @gadicc the stackoverflow gives the currently the supported way. We will be making more widgetry in future releases to aid the process.\n. This is a known issue with Ace. We're looking at other options. Thanks for pointing this out. It's been a real point of frustration internally as well :-(\n. Thanks @DenisGorbachev! Before we take your pull request, we'll need you to fill out our Contributor License Agreement (here: https://famo.us/cla/individual). A simple formality to make sure you don't put a trojan virus in our code :-). Pleas reply when you've done that, thanks!\n. I'm sorry, can you be more specific?\n. You're the best. Thanks.\n. Currently there is no out-of-the-box carousel. You can play with a horizontal scrollview in Views. We'll be adding more higher level widgets as we go, and leaning on our community to make more.\nIn the future, this is the place to report bugs an contribute to the code. If you'd like to ask questions, please do so in our IRC channel (http://webchat.freenode.net/?channels=famous)\n. Hey @gadicc, we always love community initiative :-) We're also looking forward to your Meteor integration! Let us know how we can help.\nIn terms of this wiki, you've pointed to a definite need. We should have a supported frameworks page. Right now, as the ground is shifting quickly, we're going to hold off until we can feel more confident putting our name behind a supported approach. I hope you don't mind, but we'll be taking down this current wiki, but offering our own soon.\n@fettermania \n. We don't have out-of-the-box support for this, but I think using an existing solution would be compatible with the rest of Famo.us.\nPlease address questions like this in our IRC channel :-)\nhttp://webchat.freenode.net/?channels=famous\n. Have you pulled from v0.1.2 which was cut last night? We have a fix! (this was the reason for the close)\nchangelog: https://github.com/Famous/famous/blob/master/CHANGELOG.md\n. Can you check if the CSS applied to the element has rounded pixel values (note, we take into account pixel density, so if you have a retina screen (density 2) it will be rounded to the nearest .5)\n. The thing to look for is that the -webkit-transform matrix is all integers, which it appears to be. The blurry font is caused by anti-aliasing, where a black pixel is located in between two physical pixels on your monitor, and grays out, for example. We'll be looking into this more on our end. Thanks for brining it up.\n. Fixed\n. To my knowledge, no one has done a direct integration. This is one of the things we've been waiting for from our community to step up and do :-)\nFamo.us offers a CanvasSurface, which gives access to a <canvas> element, from there you can interact with it just like you would the native element. We don't offer any help here, but the idea is you can integrate whatever you want in Three.js directly in, without jumping through any Famo.us specific APIs.\nIn the future we see mixed mode as a huge deal, and being able to model something in Three.js, import it into a Famo.us CanvasSurface and seamlessly have it interact with an existing site with DOM/canvas/SVG etc.\n. The key to all this is a consistent 3D space that the entire site shares, GL and DOM.\n. Looking forward to what you come up with! Some philosophical thoughts regarding data binding:\nThere are two main approaches to updating and passing around state\n- 1) Event-based with dirty flags (Backbone et al). This would be a push-based system, as changes are propagated forward to things listening to them. \n- 2) Expose an API via setters and getters. This would be a pull-based system, as .get() would be called at the time the up-to-date value is requested downstream. In Famo.us this is why we have APIs like .transformFrom.\nWhen it comes to continuously changing data, like the position of a Surface that's animating, we prefer method 2. When it comes to discretely changing data, like updating the innerHTML of a Surface from a template, we prefer method 1. \nWe're working to making this architecture more clear throughout the framework. You can see that we're still trying to figure it out (just look at the difference between Modifier and StateModifier).\nThe approaches, like Facebook's React.js, are intriguing because they have very sophisticated diff tools, which would be great to incorporate into our Render Tree. \nLots of interesting places to start here. Good luck!\n. @timjchin \n. Believe these have been fixed.\n. Please do submit a PR! It seems we don't propagate the scale option to this sync, which we should :-)\n. This will be in the next scrollview release\n. Thanks! We'll fix. Next time, please put this issue on the guide repo: https://github.com/famous/guides\n. Hi @rakar this is a great point, and we'd like to provide this functionality in the future. As you may imagine, it's not straightforward, as one needs to compute bounding boxes and such. In a future release this will likely be a flag to set, so we can streamline the math if you don't need it.\n. Cool no problemo!\n. Have you tried putting a scrollview inside a scrollview, like `\nscrollview.sequenceFrom([innerScroll1, innersScroll2])\nOr did you mean native scrolling, which is also possible.\n. We got this one covered. Thanks!\n. This should now be fixed.\n. We'll be doing this, thanks!\n. Agreed! We're working on this.\n. Could you provide a gist?\n. Possible bug, thanks! We'll fix.\n. These have been taken off the site, but we will be redoing all the examples soon\n. JS allows for private functions, which should be inaccessible from outside the module, and thus not attached to the prototype. It's protected functions that JS has no convention for, hence we resort to using _protected. \nWhy would you suggest putting private functions in the prototype, and where do you see _private as a standard convention?\n. Physics bug. Will be resolved shortly.\n. To clarify viewSequence is a combination of a linked list and stream data structure. It's lazy in the sense of a stream with tail and head where what tail is at any given time is ambiguous. In viewSequence we have previous and next, but the backing array is ambiguous, which allows for lazy loading.\n@kof you are correct that it is a current weakness in our platform that we recreate inner DOM nodes on deploy, and that these are not \"stored\" somewhere (either in a document fragment, or in the DOM itself). As you and @petehunt are well aware, this is a tricky problem. I'd love to hear ideas for solving it. I think React especially has great ideas here. \n. @kof Sorry, would including that a Document Fragment is an acceptable input into .setContent resolve your issue?\n. Great, will be in the coming release.\n. We'll be giving better documentation/examples for using Scrollview for a website shortly. Your content hasn't actually disappeared, it's just that the red background surfaces are shown over it. The is because ordering of Surfaces is not preserved in Famo.us yet as Surfaces are recycled (which Scrollview does a lot for performance). If you use CSS zIndex to layer things that will solve your problem. Layer the content at 1 and the background at 0.\n. Hotness. We will definitely be doing a better job in this area.\n. Great question. Currently the only test we have is our linter :-/ to use, in the submodule run:\nnpm install\nnpm test\nWe will be rolling out more tests, which will follow the same format. \n. We're very excited here for a React.js integration, but have only dipped out toes into it. If you want to approach it we would be excited to see where you get!\n. Lots of discussion ;-)\n. It's only scrollable with a trackpad or mouse with scrollwheel. We're fixing this very soon.\n. This should now be fixed.\n. Thanks for the feedback. We're working on a way to add proportional sizing. Stay tuned!\n. Thanks for pointing this out. We'll fix.\n. This has been fixed on our end. I thought it a little strange to take an external contribution for our changelog, so I did it myself. Thanks for pointing out the error!\n. true sizing does not yet work with Scrollview, we're working on having true sizing support across all our widgets. In the future, please leave an issue in the relevant Famo.us module. For Scrollview specific questions, please leave an issue in Famous/views.\n. Thanks, we recently went through a drastic web re-architecturing. We'll add the CLA link back soon. \n. This is intentional behavior. You cannot add the same renderable to different parts of the Render Tree, you will need to create a new renderable.\n. Thanks for your feedback. Famo.us University will be going under a lot of improvements soon. In general, GitHub Issues is a place to file bugs. Please direct such questions to suggestions@famo.us.\n. I've reproduced, thanks for letting us know! We'll fix shortly.\n. I'm on Chrome 35, OSX and I cannot reproduce. Scrolling works fine for me.\n. agreed. this is a place for filing bugs and discussing the code. we'll have a mailing list soon.\n. Few things:\n- thanks for the details -> detail, that will be fixed\n- look at DesktopEmulationMode.js to kill mouse events when both touch and mouse are used\n- we'll look into FastClick comparing coordinates instead of targets, that's an interesting idea\n- we'll look into creating a tap event, but keep in mind there is no native tap event\n. This is a stylistic choice, but I'm in your camp. I think we should allow the option to do this.\n. You're correct. One of the big things we're working on is a caching system to stop render/commits from being called unless they are \"dirty\".\nThis is a bottom-up check, where if a node is dirty, nodes below it are unaffected, but nodes above it will need to be updated. Our current rendering process is top down, so we are considering a large refactor to our rendering process in order to account for optimal caching.\n. Too early to tell. We're in the researching process right now. We're particularly looking into using promises for our render/commit refactor.\n. With the latter, you can do much better. The data structure behind Famo.us' rendering is a tree, and a being dirty flows up it. If a node isn't dirty, you can immediately say no node under it is dirty, and save on a lot of computation.\n. That lesson is not about the  tag, but rather user input (mouse, touch, etc).\n. https://github.com/Famous/examples/blob/master/src/examples/surfaces/InputSurface/example.js\n. You can also put arbitrary HTML into a Famo.us Surface\nnew Surface({\n    content : '<input type=\"submit\">press</input>'\n});\n. @TheAlphaNerd \n. As a fellow grammar zealot, I thank you. Bringing this to the attention of @shupac, the provost of Famous University.\n. Thanks for being on top of it @shupac \n. Piping to an event \"modifier\" where you change the type and/or data seems like a good solution to me. It better fits into the stream-like nature of events by having a modifying node. I hesitate on modifying the type with an opinionated \"prefix:\", and would rather leave this choice to the developer. Personally I would modify the data with a source attribute as opposed to change the type name.\n. EventFilter should kill a subset of events. EventModifier should modify the type or data without killing.\n. Thanks for the spelling fix!\n. this is expected as a specific size is given. to have the size of the surface scale with its content, pass in [true, true] to the size.\n. we'll need a closer look on the specifics. is there a github repo you're working on? typically problems like these are not due to leaks, but due to overloading the allowable memory on the graphics card. it would be a memory leak if you noticed that the app closes when you leave it running for a while.\n. @wgester Could you take a look? This may be a bug in Lightbox.\n. ",
    "MylesBorins": "Hey - the JSDocs are behind the wall now just as a detail, though the content is available in the source itself.\nThe more interesting docs are available at https://github.com/Famous/guides  \nWe are working on getting something more interactive available (such as a docset), but hopefully this will do for now\nOn Apr 9, 2014, at 7:35 PM, Bill Katz notifications@github.com wrote:\n\nIt makes sense of you want to limit the # of people accessing servers at Famo.us University, but why limit the documents describing the API, etc? Hope this is just a bug and not a plan to also trickle in people to see documentation.\n\u2014\nReply to this email directly or view it on GitHub.\n. The link to our docs on github has been added to the readme.   Thanks for bringing this to our attention!\n. Check out https://github.com/Famous/guides\n\nSorry the process is convoluted, we are fixing the docs tomorrow!\nOn Apr 10, 2014 12:38 AM, \"Aitor Oses\" notifications@github.com wrote:\n\n75mil.... WTF?\n\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/3#issuecomment-40050971\n.\n. Closing as pull request will fix problem\n. Closing this as pending pull request will fix problem\n. Do you have git installed? It is a hard dependency.\nOn Apr 10, 2014 6:26 AM, \"sun2rise\" notifications@github.com wrote:\ni got errors when i try to 'yo famous', this is the log:\n0 info it worked if it ends with ok\n1 verbose cli [ 'c:\\Program Files (x86)\\nodejs\\node.exe',\n1 verbose cli 'c:\\Program Files\n(x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',\n1 verbose cli 'install' ]\n2 info using npm@1.4.3\n3 info using node@v0.10.26\n4 verbose node symlink c:\\Program Files (x86)\\nodejs\\node.exe\n5 error install Couldn't read dependencies\n6 error Failed to parse json\n6 error Unexpected token g\n7 error File: c:\\Users\\a.annini\\famousProject\\package.json\n8 error Failed to parse package.json data.\n8 error package.json must be actual JSON, not just JavaScript.\n8 error\n8 error This is not a bug in npm.\n8 error Tell the package author to fix their package.json file. JSON.parse\n9 error System Windows_NT 6.2.9200\n10 error command \"c:\\Program Files (x86)\\nodejs\\node.exe\" \"c:\\Program\nFiles (x86)\\nodejs\\node_modules\\npm\\bin\\npm-cli.js\" \"install\"\n11 error cwd c:\\Users\\a.annini\\famousProject\n12 error node -v v0.10.26\n13 error npm -v 1.4.3\n14 error file c:\\Users\\a.annini\\famousProject\\package.json\n15 error code EJSONPARSE\n16 verbose exit [ 1, true ]\n...what this can be?\n\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/10\n.\n. Glad you got it working.  We also added a check to make sure you have git installed, that will give a more sane error if you are missing it.  Happy coding!\n. Hey Guys,\n\nIn future if you find errors with with yeoman please file bugs in Famous/generator-famous\nThat being said thanks for finding this bug!  Someone has actually already fixed it and sent in a pull request, how awesome is that?  We should be able to have the fix pulled in later this afternoon after I get to the office :D\nOn Apr 10, 2014, at 9:52 AM, Aitor Oses notifications@github.com wrote:\n\nSame happened to me..\ntry to clone --recursive this repo:\nhttps://github.com/aitoroses/Famous-seed\nIt's the same but actually has all the libraries in. just npm install\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you working on windows?  Do you have git installed?\n\nTry hopping on the #famous irc channel which you can find on irc and I can help you 1 on 1\nOn Apr 11, 2014, at 12:07 AM, teejayhh notifications@github.com wrote:\n\nHello, I am trying to create sample project with toolbelt yo program. It runs well until it wants to access the git repo of famous which gives me the following errormessage\nbower famous#v0_1_1 ECMDERR Failed to execute \"git ls-remote --tags --heads git@github.com:Famous/famous.git\", exit code of #128\nDid anyone manage to to install the whole package ??\nCant wait to play with famous but right now I am really frustrated.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ahhhh yes\u2026 this problem is due to you not having ssh keys setup on your machine.  We have a pull request that will fix this that I am hoping to get out tomorrow!\n\nOn Apr 11, 2014, at 12:11 AM, John Hurliman notifications@github.com wrote:\n\nI ran into this same problem (OSX 10.9.2, node.js 0.10.24, bower 1.3.2) and fixed it by replacing the two git@github.com:Famous/... URLs with https:// URLs.\n\u2014\nReply to this email directly or view it on GitHub.\n. this is fixed in latest version being push in the next hour\n. As we no longer offer this starter kit I am closing this issue. \n. Closing as pull request exists to fix issue\n. @j-feld Do you have any thoughts on copy for this?\n. The description tends to be a shorter statement,  think something tweetable\nOn Apr 17, 2014 10:23 AM, \"Paul Sokolovsky\" notifications@github.com\nwrote:\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/22#issuecomment-40739374\n.\n. Hey @raix \nDo you think we could move this conversation over to the google group and reference the issue?\n\nhttps://groups.google.com/forum/#!forum/famous\n. Amazing thanks!\n. This has been updated... thanks for reporting!\n. For what it is worth you can change the name space in the requirejs config\nwhich is bundled with the yo scaffolded base project.   You could also\nconsider looking at the project browserify-ftw which is used to convert\nrequire to common.\nI personally have not played with either but I know @andredeandarade has.\nOn Apr 15, 2014 9:54 AM, \"jodyheavener\" notifications@github.com wrote:\n\nI'd also be interested in seeing support for not needing require.js.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/27#issuecomment-40506067\n.\n. I'm closing this for right now.  Please feel free to reopen if you do not feel like you found the necessary answers in here\n. There do not appear to be any changes in this pull request so I am closing it.  Please feel free to reopen if this is a mistake\n. @ftripier is it safe to close this issue as it is fixed on internal, or should we leave it open until a more permanent solution is found?\n. Marc. If you take a look at our yeoman generator you will see that we use a\nrequire js config to put all required vendor code I'm a specific file.   We\nalso use a grunt task to automatically add paths to any bower installed\nvendor libs\nOn Apr 20, 2014 4:10 AM, \"Marc van der Meulen\" notifications@github.com\nwrote:\nafter allot of searching online i found that you can set the path to\nfamous in the require config. so this actually fixes my problem.\nrequire.config({\n    paths: {\n        famous: './vendor/famous'\n    }});\nBut maybe it's still better for dependencies to load relatively from the\nfile that is requiring the dependency\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/35#issuecomment-40892708\n.\n. @marcvdm  I'm going to close this issue for right now but feel free to keep the discussion happening.\n\nPart of the architectural decision here regarding non relative paths is that the library is going to eventually be modularized and deployed via a custom package manager.  I highly suggest taking a look at the yeoman generator as a way to start famous projects, although I completely understand if you think that tool chain is not for you.\n. @ftripier @michaelobriena Have you guys seen this thread?\n. @lucasepp \nDo you think we could move this conversation over to the google group and reference the issue?\nhttps://groups.google.com/forum/#!forum/famous\n. @Vertice Do you think this chat should be archived and moved to the mail list?\n. @malandrew Did this get fixed in latest pass at docs?\n. Hey @substack \nThis is something we are currently discussing in house about the best way to approach.  We want to support a variety of forms of module loading.  With the current way we are using require it is actually fairly trivial to convert to common, and we are investigating the best ways to automate this process (something like browserify-ftw looks like overkill though).\n. I have something cooking up right now\u2026 a proper and working common port may be very very close :D\nOn May 30, 2014, at 6:30 AM, aelr notifications@github.com wrote:\n\nOf all of those tools (webpack, browserify, commonjs-everywhere), I could only get browserify to work on Windows with watching. It's what I'm using now.\n\u2014\nReply to this email directly or view it on GitHub.\n. @aelr\n\nFwiw you do not need to change any of the references to relative paths, this is tested and verified.\nOn May 30, 2014, at 9:07 AM, Tony Alves notifications@github.com wrote:\n\n@TheAlphaNerd that will come in handy \n\u2014\nReply to this email directly or view it on GitHub.\n. npm install famous now works as expected\n\nHooray!!!\n. @Theshaft06 could you file an issue over at Famous/generator-famous\nThis is a super odd bug.  I think it is most likely something going on with shell.js \nI wrote a super simple repo that tests the lib call we are using\nTheAlphaNerd/check-shell\nCan you try running that and tell me the output you are getting?  I suspect this might be a bug in shell.\n. Hey all...\nCan we please move discussion of this issue over to famous/generator-famous\nThis issue has been closed\nOn May 13, 2014 10:06 AM, \"ch4se\" notifications@github.com wrote:\n\nTry a spotlight search for it\nOn Mon, May 12, 2014 at 10:39 PM, Scott Robert Lawrence\nnotifications@github.com wrote:\n\nosx Definitely has git shell, in fact it's mentioned in the xcode docs.\nOn Mon, May 12, 2014 at 10:04 PM, ch4se notifications@github.com\nwrote:\n\nOh that's unfortunate, I was having the same issue as you on my windows\nPC\nand using the git command prompt worked it out for me. Anyways, good\nluck!\nOn Mon, May 12, 2014 at 9:29 PM, Matt Tucker notifications@github.com\nwrote:\n\nI'm fairly certain there is not a git command prompt in mac. I could\ndownload a git gui, but I don't believe this wouldn't solve the issue.\nSince I am able to access git from my terminal for everything else.\nSeems\nmore to be an issue with shell.js\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/51#issuecomment-42915981\n\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/Famous/famous/issues/51#issuecomment-42917417>\n.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/51#issuecomment-42919043\n\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/51#issuecomment-42983098\n.\n. Change can be found in https://github.com/Famous/famous/tree/wip/dmvaldman/scrollview\n. @wgester since you are the current scroll view master in residence I think you should take the lead on this.\n. I believe this fix landed as part of the scrollview fixes in The 0.3.0 alpha\n. @quanghoc did you ever figure out what the problem was?\n. @SebastianMH you think you could chase this one down?\n. The scrollview branch has now landed in 0.3.0-alpha\n. Is this with the current website? We are currently using native scroll.\nOn Jun 25, 2014 9:21 AM, \"Dominic Tarr\" notifications@github.com wrote:\nconfirmed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/61#issuecomment-47124726.\n. @timjchin can you look into this?\n. Looks like Felix has this under control\n. Fixed by a1a27f20eb5cc41d932b55bf3ebdbb7dc63f9829\n. @shupac can you take a look into this?\n. Hey Guys\n\nFeel free to add information to the wiki!\nhttps://github.com/Famous/famous/wiki/Supported-Frameworks\n. Hey @fschade \nDo you think we could move this conversation over to the google group and reference the issue?\nhttps://groups.google.com/forum/#!forum/famous\n. I'm going to close this for now... please feel free to start the conversation again over at the google group\n. @arkadyp can you look into this?\n. @Vertice @mvanlonden can this be closed?\n. Thanks @Vertice \n. @marklu thoughts on this?\n. The new website is only using native scroll. While it is not impossible\nthat slowdown could be caused by famous it is somewhat unlikely due to the\nminimal amount of famous on the new website.   Have you tried the site with\njs turned off?\nOn Jun 14, 2014 5:15 AM, \"Oleg Slobodskoi\" notifications@github.com wrote:\n\nShould I create a separate issue?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/72#issuecomment-46086283.\n. Ahhhh, my bad.\nOn Jun 14, 2014 9:07 AM, \"Oleg Slobodskoi\" notifications@github.com wrote:\n@TheAlphaNerd https://github.com/TheAlphaNerd sorry I was not talking\nabout the famo.us website.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/72#issuecomment-46091937.\n. @wgester do you want to take the lead on this thread?\n. @JonnyBGod are you able to provide example code?\n. I'm going to close this @TDonselaar feel free to reopen if you have more questions\n. pssst\n\nhttps://github.com/petehunt/famous-react/\n. This is now being worked on by the fractal team and can be found at http://github.com/famous/famous-react\n. hey @redwoodfavorite can you take the lead on this?\n. Fixed by 5b6e5df4614bee21d59d77635514552044928a0c\n. I'm going to close this issue for right now.  I think this topic would be great to be brought up on the google group \nhttps://groups.google.com/forum/#!forum/famous\n. @marklu did you have anything else to add?\n. I'm on this...  Will be done in 30 to 40 when I get home :-)\nOn May 31, 2014 1:04 AM, \"Zack Brown\" notifications@github.com wrote:\n\n@dmvaldman https://github.com/dmvaldman is 0.2.1 good to go? if so,\ncould you please push a tag when you get a chance? it's useful especially\nfor bower.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/86.\n. All done!\n. @marklu thoughts?\n. We have closed the pull request but the issue is still open for discussion\n. @wgester could you give some insight here?\n. @timjchin is this something you might like to try and take the lead on?\n. landed as 131ea41\n. Looks like bower install was not run.  This bug can happen if you first installed bower right before running the generator.\n\nOn Jun 4, 2014, at 8:22 PM, becush notifications@github.com wrote:\n\nFailed to load resource: the server responded with a status of 404 (Not Found) http://localhost:1337/lib/famous/core/famous.css\nFailed to load resource: the server responded with a status of 404 (Not Found) http://localhost:1337/lib/famous-polyfills/functionPrototypeBind.js\nFailed to load resource: the server responded with a status of 404 (Not Found) http://localhost:1337/lib/famous-polyfills/classList.js\nFailed to load resource: the server responded with a status of 404 (Not Found) http://localhost:1337/lib/requirejs/require.js\nFailed to load resource: the server responded with a status of 404 (Not Found) http://localhost:1337/lib/famous-polyfills/requestAnimationFrame.js\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed by 765082bad7c02c6501\n. @DnMllr can you help answer this question?\n. I believe that you can simply provide a selector when creating a context\n. @DnMllr Can you take lead on this issue\n. @DnMllr any progress?\n. @wgester can you take lead on this?\n. @AdamCmiel can you deal with this mobile related issue?\n. This has been fixed, thanks for bringing it up!\n. @shupac could you fix this?\n. Ahhhh! We are aware of the scrolling issue on University. We have been\nunable to find the source of the bug unfortunately.\n\nThat being said,  we are in the midst of a major refactor of University\nwhich should solve that, and a number of other bugs on University.\nThe current way to get rid of the problem is to refresh the page, oddly\nenough.\nOn Jun 25, 2014 7:16 PM, \"Sam Seidenbereg\" notifications@github.com wrote:\n\nI also experienced this problem in Chrome on Mac OSX. You can scroll by\nusing the arrow keys or clicking and dragging the sidebar, but not with\nthe\nstandard two-finger swipe on the mousepad.\nOn Wed, Jun 25, 2014 at 10:07 PM, David Valdman notifications@github.com\nwrote:\n\nI'm on Chrome 35, OSX and I cannot reproduce. Scrolling works fine for\nme.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/106#issuecomment-47180713.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/106#issuecomment-47181113.\n. This bug was finally found and squashed today!!! The site will be redeployed before end of day\n. This looks fixed to me!\n. Now https://github.com/Famous/famous/pull/156\n. Closing issue for now @kof feel free to reopen if you want to revisit the pull request\n. @timjchin you think you could implement this?\n. fixed by f1017ba400c22549cb76cbee2e365d110ebb799c\n. @dmvaldman @ftripier @michaelobriena\n\nOn Jun 30, 2014, at 9:30 AM, Oleg Slobodskoi notifications@github.com wrote:\n\nToday I have started to investigate where my application spend cpu cycles. It turns out .commit methods in all classes is the biggest issue.\nA simple screen of 6 surfaces and flexible layout takes 5% cpu on iphone 5 based on xcode graph.\nIt turns out on every animation frame tick engine calls all .commit methods.\nThis is seriously broken by design! You can't run all the calculations on every frame and this is even without any user interactions.\n\u2014\nReply to this email directly or view it on GitHub.\n. @DnMllr thoughts?\n. Closing... check out http://github.com/famous/engine\n. I had a chance to speak with Lexxic yesterday. . They were using disk to\nget. A copy of famous.css\n\nI let them know it can be found in core, and all is well in the world\nI personally do not think dist should be included with bower.\nThoughts?\nOn Jul 1, 2014 9:55 AM, \"David Valdman\" notifications@github.com wrote:\n\n@TheAlphaNerd https://github.com/TheAlphaNerd\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/113#issuecomment-47681626.\n. Closing\n. @shupac \n. @marklu thoughts?\n. @redwoodfavorite would you like to investigate this?\n. I'm going to close this issue.  If you would like to discuss more about it I suggestion opening up a thread on the google group\n\nhttps://groups.google.com/forum/#!forum/famous\n. @AdamCmiel want to take the lead on this?\n. @AdamCmiel did this patch ever come in as a pr?\n. closing for now awaiting fix in spartan browser. Please reopen if you like.\n. Don't forget about eslint !\nOn Jul 8, 2014 3:43 AM, \"Hein Rutjes\" notifications@github.com wrote:\n\nWas a bit eager there.. I found and installed the JSCS extension for\nBrackets, and it solved all my problems. It now uses the .jscsrc\nconfig-file and disables jslint. The output-window in brackets now shows\nthe exact same output as when running grunt.\nSo: Brackets + JSCS-extension = awesome for famo.us\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/121#issuecomment-48321180.\n. I personally use text mate.  I know quite a few members of the team swear by sublime.  Another subsection, including @dmvaldman swear by web storm, a more extensive IDE.  Don\u2019t forget vim / emacs!\n\nAt the end of the day I think it is always best to go with tools that amplify your development process.  There is no right or wrong answer, just what feels right!  (Although emacs fans may say otherwise).\nOn Jul 8, 2014, at 11:58 PM, Hein Rutjes notifications@github.com wrote:\n\nThanks for the heads up. There doesn't seem to be an ESLint-extension for brackets yet.\nJust wondering, what editor do you guys use?\n\u2014\nReply to this email directly or view it on GitHub.\n. relevant xkcd\n. hey @michaelobriena can you take the lead on managing this issue?\n. This landed as part of the scrollview branch merge that can be found in 0.3.0-alpha\n. @Carlosriverae any update?\n. @shupac \n. This has been re-escalated.  Sorry it hasn't been dealt with yet.\n. We've done a spelling and grammar pass on the tutorial and fixed the reported issues!\n\nDeeper content and organizational issues are underway but will take a bit more time before they land.\nPlease keep reporting University issues and we will keep closing them!\n. Closing issue\n. Closing\n. Hey @craftjk thanks for the pull requests!  Before we pull your changes in we are going to need you to sign our CLA.\nYou can find it at http://famo.us/cla\n. Merged!\n. Merged!\n. @marklu\nOn Jul 21, 2014 1:21 AM, \"Hein Rutjes\" notifications@github.com wrote:\n\nHi, I'm trying to adopt the same coding & linting rules as famous in my\nprojects. So far so good, but I found an issue with the default .eslintrc\nconfiguration.\nCurly braces are set to \"curly\": [1, \"multi\"]. This enforces that\nsingle-statements cannot have curly braces. It produces a warning for this\ncode:\n[image: image]\nhttps://cloud.githubusercontent.com/assets/6184593/3641076/13407222-10ae-11e4-9eff-f85aff23b0e2.png\nTo fix the warning I have to remove the curly-braces, but this breaks the\ncode as the else-statement is now part of the second if-statement:\nfunction _updatePlaceholder() {\n    if (this.getCount())\n        if (this._placeholderVisible) {\n          this._renderController.show(this.scrollContainer, this.options.hidePlaceholderTransition);\n          this._placeholderVisible = false;\n        }\n    else\n        if (!this._placeholderVisible) {\n          this._renderController.show(this.placeholder, this.options.showPlaceholderTransition);\n          this._placeholderVisible = true;\n        }\n}\nIn my opinion, this is a very dangerous setting, and in this case it is\npreventing me from writing correct code (I have many of these cases in\nmy code). It would suggest requiring curly-braces which is considered\ngood-practise. If you want to write a one-liner, you can still use: if\n(true) { doSomething(); }\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/132.\n. @IjzerenHein does the linter throw if you compact those multiple if statements into one?\n\nfunction _updatePlaceholder() {\n        if (this.getCount() && this._placeholderVisible) {\n              this._renderController.show(this.scrollContainer, this.options.hidePlaceholderTransition);\n              this._placeholderVisible = false;\n        }\n        else if (!this._placeholderVisible) (\n              this._renderController.show(this.placeholder, this.options.showPlaceholderTransition);\n              this._placeholderVisible = true;\n         }\n    }\nSeems like the linter might be throwing errors about the if statement due to the logic being able to be folded down.\n. @DnMllr want to add your two cents?\n. @trusktr do you think it would make sense to move this conversation to the google group?\n. I am closing this issue, please feel free to reopen or start the conversation on the google group\n. @marklu thoughts?\n. Fixed by 5b6e5df4614bee21d59d77635514552044928a0c\n. Hey @trusktr thanks for the pull requests!  Before we pull your changes in we are going to need you to sign our CLA.\nYou can find it at http://famo.us/cla\n. @michaelobriena \n. @DnMllr @marklu \n. merged!\n. @marklu thoughts?\n. This is fixed by upcoming scroll view fix.  Check the 0.3.0 branch\n. @marklu thoughts?\n. @michaelobriena do you think it is safe to close this issue?\n. I am going to close this issue for now, please reopen if it has not been fixed\n. closing\n. Do you have thoughts regarding this larger scale change?\n. Closing issue for now, feel free to re-open\n. Hey @MajorBreakfast thanks for the pull requests!  Before we pull your changes in we are going to need you to sign our CLA.\nYou can find it at http://famo.us/cla\n. @michaelobriena \n. @DnMllr @marklu \n. Merged!\n. Hey @raix thanks for the pull requests!  Before we pull your changes in we are going to need you to sign our CLA.\nYou can find it at http://famo.us/cla\n. @michaelobriena \n. Hey @raix can you resubmit this pull-request please\n. I accidentally pulled it before the code was approved by the core team.\nOn Aug 1, 2014 2:58 PM, \"Morten N.O. N\u00f8rgaard Henriksen\" \nnotifications@github.com wrote:\n\nIts resubmitted - what went wrong since it got reverted?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/142#issuecomment-50939461.\n. I\u2019ll escalate this.  I\u2019m really sorry about this happening.\n\nCheers,\nMyles\nOn Aug 1, 2014, at 3:44 PM, Morten N.O. N\u00f8rgaard Henriksen notifications@github.com wrote:\n\nBugger I guess I'll have to revert my update on meteor talk and reopen the famono issue - it breaks integration at the moment.\n\u2014\nReply to this email directly or view it on GitHub.\n. @travis5555 can you add the above mentioned code into timer and submit a pull request?\n\nWe will need you to sign a cla before we can merge the commit.  You can find it at https://famo.us/cla\nIf you don't have time to do this please let me know and I'll assign it to someone internally.  It is also possibly that this could be implemented as a shim\n. @travis5555 let us know if you want to take over, @redwoodfavorite is going to be pretty busy the next couple days :D\n. @redwoodfavorite don't worry about implementing this anymore, @travis5555 has submitted a fix\n. @michaelobriena \n. Thanks for looking into this Mike!\nOn Aug 4, 2014 9:35 AM, \"michaelobriena\" notifications@github.com wrote:\n\nWe need this to be on the famous-root class as Famous can be targeted to a\nprecomposing DOM element and does not need to be in control of the whole\nbody. I agree that the initialization should not fail on the absence of the\nbody and will investigate what happened to the code that used to account\nfor this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/144#issuecomment-51083852.\n. No problem at all.  The good news is that blame should still work.\nOn Aug 4, 2014 9:38 AM, \"michaelobriena\" notifications@github.com wrote:\n@TheAlphaNerd https://github.com/TheAlphaNerd I will be on IRC today\nand can we take a look through the history to see where and when this came\nfrom. It seems like it broke some prior functionality we had. The\nflattening has confused my notion of what the true history is.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/144#issuecomment-51084224.\n. @michaelobriena what's is the prognoses on this?\n. @raix did loading things with appMode: false work?\n. @michaelobriena status?\n. This is an issue that we are going to fix for 0.3.0 but this is not the way we are going to be doing it.  Expect to see a fix land very soon.\n. @wgester want to take the lead on this?\n. This has landed in 0.3.0-alpha\n. @wgester moar scrollview stuffs\n. fix has landed in 0.3.0-alpha\n. @AdamCmiel can you check this out?\n. @michaelobriena \n. @DnMllr @michaelobriena \n. Merged\n. hey tim... it would make sense to submit that second commit as a seperate pull!!!\n\nWho can code review the first one?\n. Tim, I cherry-picked that commit and applied it to master.  Could you roll back that commit in this pull request and rebase off master?\n. @DnMllr  @marklu \n. @marklu do you think it would be worth Tim putting time into an example for this?\n. @marklu @michaelobriena what is the status on this?\n. @marklu in the sense that it was mislabeled or that the issue should be closed?\n. landed as 3b7f2d912606e850535bb614dd9ca2a97f23f2a5\n. hey @pilwon thanks for the pull requests!  Before we pull your changes in we are going to need you to sign our CLA.\nYou can find it at http://famo.us/cla\n. As well you will notice that your pull request is failing the CI, the code is not linting :(\nTry running the linter in your local project npm install && npm test to see what the problem is.\n. Problems are fine... errors are actually what to look out for.  It actually appears that we had some linting error in the framework itself prior to your pull request\nWould you be able to rebase you branch against our master and push again?\n. @michaelobriena thoughts?\n. @DnMllr @marklu \n. @marklu is this something we could perf test or should @pilwon try and put something together?\n. Closing for now.  If it can be shown there is a clean benefit to this change we can reopen, until then moving code around is a bit unnecessary.\n. Hey Tim,\nCan you rebase this off of master to get the updated changes to get things linting correctly.  Also who would be appropriate to code review this?\n. @michaelobriena thoughts?\n. @marklu can you code review?\n. @DnMllr can you summarize your thoughts on this pr?\n@speigg can you please sign our CLA at http://famo.us/cla\n. oopsies!  Thanks for fixing that!\n. thanks @speigg feel free to close this issue if you want, although we can leave it open and keep the conversation going.\nThanks for signing the cla... we'll be able to pull any commits moving forward :D\n. @DnMllr should we close this?\n. Pull request closed @speigg thank you so much for taking a first crack at this.  Let's keep the conversation going in #42 and try to get a good solution figured out!\n. @michaelobriena \n. @DnMllr @marklu \n. @marklu being the second time that this has come up I think it would be a good idea to execute and simply remove FastClick.  I'm going to open a new issue and assign it to you :P\n. @marklu should this be closed un merged?\n. We have yet to see FastClick removed... I think it is worth exploring making it better.\n@DnMllr what are your thoughts?\n. @kof do you think this could be broken into a number of smaller fixes so we can evaluate each one on its own merit?\n. @kof I just went through the code and commented where I think it could quickly be split up.  I can understand if you are frustrated.  This should have been dealt with a while ago.\nIf you would like I could split the commit up and create the pull requests keeping you as the author of the commits.\n. @kof I helped write the guidelines, and I really don't understand why you feel the need to attack me.  That guideline is stating that a commit should be squashed applied to a single pull request.  I am suggesting you break this into three different feature branches and three different pull requests where they can be considered indepently\n. If FastClick is taken out, it will only be moved to polyfills\n. @michaelobriena \n. Hey @dai-shi could I get you to sign the cla found at http://famo.us/cla ?\n. @DnMllr @marklu \n. Is it safe to close this?\n. Landed as 3ef2cc680fd8a08af6b1c918c9f62754ea6ffd9f\n. @marklu @DnMllr \n. @marklu do you have a response?\nI back the use of inline eslint comments for logging deprecation, can you think of a better way to keep the linter from throwing?\nAs for the use of performance.now I get concerned due to things like #143, but at least it shims in Date\nI do know that these changes are necessary for stuff like Adanan's developer tooling\nAre there specific changes Andrew can make to get this pulled?\n. @marklu is that implying that this pull request should be shelved, put on hold, or split into smaller parts?\n. @malandrew can you split this up accordingly?\n@marklu I think the current rule is set to error on console.log not warning.  Perhaps a more appropriate rule change would be to set console.log to warn at the top of the file\n. placing this issue on the backlog, to be further examined in the future\n. @DnMllr @ftripier \n. Merged!\n. @ftripier \n. @michaelobriena thoughts?\n. Clsoing as this is no longer an issue with 0.3.0\n. Merged\n. @marklu what are your thoughts on this?\n. How do you think we can best test for perf increase?\n. @michaelobriena is there movement on this?\n. landed as ebf3415\n. @marklu thoughts?\n. @michaelobriena do we want to make this change for 0.3.0?\n. for now this will probably not land.  Closing\n. Merged!\n. this is an open call to the famous community (internal and external)... I would love to see this get made!!!\n. Do you guys think this would be appropriate to move over to the google group?\n. Closing the issue for now, feel free to reopen.  That being said I think it would be a great discussion for the google group\n. Hey @PEM-- could i get you to sign the CLA at http://famo.us/cla before I merge this.  I apologize if you already have, we are in the process of migrating data and I want to get this pulled asap :D\n. ping @PEM-- \n. Merged\n. @SebastianMH can you help with this?\n. @marklu should we assign this fix to @SebastianMH ?\n. This will be fixed by #230 \n. landed as 8797c55\n. @DnMllr \n. @AdamCmiel did you have any findings?\n. @michaelobriena @AdamCmiel thoughts?\n. @michaelobriena should we close this pr?\n. @DnMllr @marklu \n. Fix has been merged\n. @DnMllr @marklu \n. @antmanler could you please sign the cla found at http://famo.us/cla so that we are able to merge this once it has been code reviewed!\n. Merged!\n. @marklu the ball is in your court :D\n. doubt this will happen. Closing\n. @DnMllr Thoughts on this?\n. merged\n. Hello-famous is no longer a part of university, so I am closing this issue.\n. We like you too though!\nOn Aug 6, 2014 9:47 AM, \"michaelglenadams\" notifications@github.com wrote:\n\nI think you meant this for michaelobriena\nhttps://github.com/michaelobriena\nOn Wed, Aug 6, 2014 at 8:50 AM, michaelobriena notifications@github.com\nwrote:\n\nThe context in commit is the parent context, not the Context created by\nthe Engine.\nAlso, this._size should never be NaN unless it was wrongly set by the\nuser, as is in the example you included.\nI am not understanding the FlexibleLayout case. If the user sets all of\nthe ratios to 0 then there is no way to figure out how large to be. On a\nreset of the ratios, the Flexiblelayout will reflow.\nI don't see anything wrong with our current logic.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/180#issuecomment-51354142.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/180#issuecomment-51362679.\n. I'm closing this issue for now.  Reopen if the issue has not been properly fixed\n. There might still be an issue... @michaelobriena is going to look into this. Added to the 0.3.0 milestone\n. @ftripier can you ask @michaelobriena what the status is on this one?\n. @michaelobriena are we safe to close this issue with 9c9c8c02ed8774404708e287f24496ae9453d47a having landed?\n. Hey @antmanler would you be able to squash these commits into a single commit message?\n. @DnMllr thoughts?\n. Done didit\n. Uhoh!!!! Things are not linting.  Will merge in when you get the linter passing :D\n. @wgester is this ready for production or are there still more tweaks?\n\n@michaelobriena let me know when you get a chance to review it\n. Merging into custom wip branch.  Another pull request will need to be made in order to merge into master\n. This branch has been merged in already in its entirety to v0.3.0-alpha ... please make an issue abotu any broken / missing functionality\n. @antmanler ping :D\n. This fix as it is currently written will not be merged.  The issue will be addressed by @michaelobriena .  We have reopened #180 \n. @wgester has this been fixed in the latest scrollview work?\n. The scroll view fixes have landed into 0.3.0-alpha\n. If you can share me a copy of your browserify project I can help you get it\nworking\nOn Sep 16, 2014 10:14 PM, \"Alonso Holmes\" notifications@github.com wrote:\n\n@awanosik https://github.com/awanosik thanks a million! Do you mind\nsharing the command you used to build? I was trying to use browserify, but\ncouldn't get it working properly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/185#issuecomment-55849592.\n. That doesn't sound right at all... You should need to symlink out of node\nmodules. . Can you please share your project?\nOn Sep 17, 2014 2:53 PM, \"Alonso Holmes\" notifications@github.com wrote:\nThanks @TheAlphaNerd https://github.com/TheAlphaNerd and @awanosik\nhttps://github.com/awanosik! My problem was that require statements\nwith non-relative paths weren't working (../core/Surface worked, but\nfamous/core/Surface didn't), but I fixed it by symlinking\nnode_modules/famous to the project root. Feels kinda dirty, but it was one\nof the methods suggested here\nhttps://github.com/substack/browserify-handbook#avoiding-.\nAfter that, I was able to just browserify build.js -o famous-global.js\nand everything worked fine.\nAlso, in case anyone else comes across this, here's a gist of build.js\nfor 0.3.0-alpha https://gist.github.com/holmesal/eb21762b2df00338dcde\nwith the new modules added.\nalso @awanosik https://github.com/awanosik - I think you might still be\nbuilding from master - for example, if you look at the top of\ncore/Context.js around line 17 you should have var _zeroZero\n(0.3.0-alpha) instead of var _originZeroZero (0.2.2).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/185#issuecomment-55966206.\n. @michaelobriena thoughts?\n. @marklu thoughts?\n. Merged\n. Approved!\n. @michaelobriena can you give some thoughts on this\n. Closing for now as it is some what out of scope, please feel free to re-open if you think the discussion should continue\n. @AdamCmiel is this something you could investigate?\n. Closing this issue in lieu of duplicate\n. @michaelobriena this seems like an obvious fix... thoughts?\n. merged\n. Hey @pkiers thanks so much for submitting this pull request.  Before we are able to merge this into famo.us we are going to need you to sign our CLA which can be found at http://famo.us/cla/\n\nThe team really appreciates you taking the time to try and improve famo.us, and we look forward to seeing the other ways you will contribute moving forward.\n. @michaelobriena can you test this out?\n. @michaelobriena \n. @marklu thoughts?\n. Hey Alex... Let's follow up with this today.  Things have gotten a bit\ncrazy leading up to the meet up, and I've been out of town.\nThat being said, we should be able to get this pulled if we can have\nsomeone approve it!\nOn Aug 13, 2014 10:29 AM, \"Alexander Gugel\" notifications@github.com\nwrote:\n\nAny updates on that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/192#issuecomment-52081539.\n. merged\n. @pkiers we will be able to merge this once you have signed the cla (as mentioned in the other thread), and once a core member has code reviewed it.\n\n@michaelobriena what are your thoughts on this?\n. merged\n. @michaelobriena thoughts?\n. landed as e2725b1\n. @michaelobriena thoughts?\n. scrollview has moved quite a bit since this PR and this cannot be easily merged.  If you would like to revisit and submit another PR please do!\n. @michaelobriena thoughts?\n@wgester does overlap with any of your current work?\n. merged\n. @SebastianMH want to take a look into this?\n. Fixed by https://github.com/Famous/famous/commit/d7138845a68c1fdfb8622830521757df1f3d9e10\n. merged\n. Hey @OlenDavis, thanks for bringing this issue up.  Currently we have require.js as a hard dependency as it allows individuals to use a module loading pattern without requiring a build step, while keeping the amount of boiler plate to a minimal.\nWe currently publish a common.js version of the framework to npm, but as Adrian mentioned, if you use webpack as a build tool (or browserify with amdify) you can easily work with require in a non require environment.\n. Hey Olen \nThere is a version of the framework attached to the window object available on our can. I am on my phone right now, but will return with a link in the near future. \nThe idea is that we will have a repo available to work off of that exposes famous as a global. This should be dropping with our next major release \n. Awesome! The module loader the framework depends on is something that is\ncurrently under debate\n. While I see your point, you might win more arguments when you don't refer\nto the alternative as idiocy. There are a number requirements we need to\nsupport that Umd does not necessarily solve.\nAre you able to do per file loading in your implementation?\nOn Aug 13, 2014 3:47 PM, \"OlenDavis\" notifications@github.com wrote:\n\nWell hopefully I can help sway the debaters in the direction of least\nidiocy (which is most interoperability).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/204#issuecomment-52122382.\n. d318d5298a778d5bdd2dae8afdc0662df72cc80b has introduced the deamdify transform as a dependency to the repo.  You should now be able to work off the head using browserify, webpack, or requirejs / almond / almaeda. \n. @visheshd thanks for pointing this out.  I will close the issue when we merge the latest scrollview code\n. The scrollview code has landed in 0.3.0-alpha\n. @SebastianMH would you be able to update these docs?\n. No rush :D\nOn Aug 12, 2014, at 2:08 PM, Sebastian Miller-Hack notifications@github.com wrote:\nIts in queue but I am working with Adnan on the demo on wednesday. \nOn Tue, Aug 12, 2014 at 1:51 PM, Myles Borins notifications@github.com \nwrote: \n\n@SebastianMH https://github.com/SebastianMH would you be able to update \nthese docs? \n\u2014 \nReply to this email directly or view it on GitHub \nhttps://github.com/Famous/famous/issues/207#issuecomment-51975277. \n\u2014\nReply to this email directly or view it on GitHub.\n. fixed by https://github.com/Famous/famous/commit/d7138845a68c1fdfb8622830521757df1f3d9e10\n. @pkiers would you be able to squash these into a single commit?\n@michaelobriena thoughts?\n. I ran into this problem and moved the famous src to the end of the body\u2026\n\n\nIs there a specific reason we put it in the head?\nOn Aug 20, 2014, at 1:10 AM, Peter Kiers notifications@github.com wrote:\n\n@michaelobriena Problem is that DOMContentLoaded hasn't fired yet, else you wont initialize.\n\u2014\nReply to this email directly or view it on GitHub.\n. @pkiers would you be able to squash this into a single commit?\n@michaelobriena thoughts?\n. So mark has suggested that we perhaps move FastClick form famous/famous to famous-polyfills. \n\nThoughts?\nOn Aug 19, 2014, at 10:41 AM, michaelobriena notifications@github.com wrote:\n\nI would rather defer to Mark on this as I have spent little time with FastClick and figuring out the best way to polyfill this.\n@marklu if you could comment on this that would be great.\n\u2014\nReply to this email directly or view it on GitHub.\n. @pkiers  let me talk to mark today\n. @arkadyp thoughts?\n. @michaelobriena thoughts?\n. Closing as it appears to have been solved by current api.  Please re-open if i am mistaken\n. reopening\n. @michaelobriena should we close this?\n. @wgester thoughts?\n. @contra This reverts half of #186   Feel free to come talk to the team today if you want to discuss why\n. @contra @wgester @michaelobriena \n\nCan we all sit down in the next hour and hash this out?\n. Merged\n. Merged!\n. Merged!\n. Duplicate of bug that was fixed by commits\n0eca6c3ea816d463b517818d11531e29bc8896ff\n3ef2cc680fd8a08af6b1c918c9f62754ea6ffd9f\n. @DnMllr @ftripier @wgester Can you guys chime in?\n. Clsoing\n. @shupac can you chime in here?\n. \n. The new university has come.  Closing the issue. Please re-open if there is a regression\n. merged\n. @AdrianRossouw \nThe examples are in a less than ideal state right now.  this is something that want to see fixed asap\n. Examples are not live, but they can all be found within the repo now.\nClosing\n. @AdrianRossouw \nAgain another one we need to get moving.  The new site should be released in the near future, at which time a better doc strategy will be developed\n. I am currently labelling this as a won't fix.  We recently released our doc generator http://github.com/famoustool/famous-doc-generator This project makes it very easy to generate your own docs locally from any version of famous.\n. Hey @AdrianRossouw thanks for bringing this up.  We have some ideas internally about how to do testing.  We are currently exploring using tape for basic tests and trying to figure out the best way to automate testing across many browsers.\n. I've been playing more and more with testing options... we have started exploring prova internally and been enjoying it.   I'll take some time this week and look into working that as an example into the browserify seed. \n. There are currently a handful of bugs in University, thanks for pointing this one out.  We are hoping to launch a refactored university very soon!\n@shupac care to chime in?\n. This is no longer the case with the latest university!!!\n. After consideration I don't think that we can currently maintain an official change log to university.\nExpect to find information in our newsletter and on our blog about large changes to the platform.\n. Will can you respond to this?\n. I'm going to close this for now.  I doubt that we are going to make api changes like this  Please feel free to re open if you like\n. merged\n. @michaelobriena With that being the case I think I am going to advise keeping this PR on ice until we are ready to cut.  I have added the ready to pull tag, which will make it easy to find just before we cut 0.3.0\nThoughts/\n. landed as 8797c55b710ce81424b4fe20ddabf3262ee1b8c6\n. working on it\n. New site is coming up very soon\u2026 although I\u2019m not sure docs will be moving to the title bar.  More to come.\nOn Aug 25, 2014, at 9:10 PM, Adrian Rossouw notifications@github.com wrote:\n\nping?\nwas just confronted with this again. it's really counter-intuitive.\n\u2014\nReply to this email directly or view it on GitHub.\n. This is not going to be changed in the current site.  Expect to see a new site soon with a new approach to help / docs!\n. I can also highly suggest http://nodeschool.io/#git-it to learn using git + github\n\nOn Aug 19, 2014, at 10:09 AM, michaelobriena notifications@github.com wrote:\n\nClosed #232.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hey @ftripier this is failing due to missing EOL in a number a files... can you fix this, squash commits, and force push?  Can you also suggest someone from the team to code review\n. @michaelobriena is this good to merge?\n. merged\n. WAhooo!\n. @wgester feel free to have the guy sign the CLA http://famo.us/cla and merge the requests.  once he says he has signed it I will verify.\n\nOn Aug 20, 2014, at 11:39 AM, michaelobriena notifications@github.com wrote:\n\nCan you look into this pull request on your repo @wgester? It looks like an issue.\nwgester#1\n\u2014\nReply to this email directly or view it on GitHub.\n. @wgester can you respond to dapetcu21?\n. @wgester this can no longer be merged without conflict, can you please rebase against master and fix the conflicts?\n. Landed as way too many commits to count...\n. @michaelobriena does this fix any open issues?\n. @wgester is this ready?\n. landed as 131ea411d9ad6483482e544f5607cc14ba611515\n. Landed as commits\ndf96f7f068143215f130472724ed0d363d2d713c\n5bbdf56a9cd22d46a82cf7b546c222bb61dca8ef\n6d173fcee0f78a42151c81ecff407f03a34f1c87\n. @larryrobinson can you help out @kanbekotori \n. Closing as this source is unavailable, the code is quite old and not compatible with current famous\n. You should send it as a pull request!\nOn Nov 25, 2014 12:41 AM, \"Penn Su\" notifications@github.com wrote:\napp mode works, but angular integration doesn't have the means to set the\noptions, so I made a fork to fix that.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/238#issuecomment-64326143.\n. @michaelobriena status?\n. Landed as 46072bce8e665\n. @michaelobriena @wgester I'll wait for your decision on line 108 before merging\n. @wgester @michaelobriena is this good to merge?\n. Landed as commits\n\n8fc60733017072115a28369f15a94a29e874e13a\nf72d754e11e90b012d1afdf164ae1d0a01386a61\nb4365265f9ff7af58b003b42d09781ea0068e8fa\n4cde0ee24015e1011ff75df197fffa89dc401d47\n. @michaelobriena should we close this for now awaiting a proper discussion in mixed mode?\n. @ftripier @wgester  @michaelobriena @DnMllr\n. @michaelobriena @DnMllr @ftripier @wgester @marklu \n. @AdamCmiel thoughts?\n. Closing issue as it is now fixed in master\n. This has been fixed in the latest scroll view changes found in v0.3.0-alpha\n. This has now been fixed!\n. Closing as above code fixes problem. @StephanBijzitter anything to add?\n. reopening\n. @ftripier thoughts?\n. I've been out of office. I get back tomorrow. I'll escalate this when I get\nin.\nOn Sep 2, 2014 5:30 PM, \"Alexander Gugel\" notifications@github.com wrote:\n\n@TheAlphaNerd https://github.com/TheAlphaNerd\nI introduced this bug with my last pull request.\nAny updates on that?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/253#issuecomment-54220739.\n. @ftripier do you have thoughts on this?\n. Landed as 7e0ab4fc6ce41963fbdd5bc832ac9298126ecbde\n. don't think this is going to happen for now... closing\n. @DnMllr can you give this a quick review?\n\n@michaelobriena can you squash to a single commit?\n. landed as 8283cced1efb6e79\n. @StephanBijzitter does this solve your problem?\n. @michaelobriena did any of the latest changes to 0.3.0a fix this?\n. @wgester @michaelobriena @marklu @ftripier @DnMllr \n. This is a dupe of something already in scrollview fix.  Sorry Adam :(\n. merging\n. landed as 0ddb837b454e1918e8b7012f9022c1a5f17d7518 09d72a20d92c2ed9a8946794da6c81be2200a2ed and 850b32d27516f361d2431fb4c38ee4e81ac37119\n. Landed as commits\ndf96f7f\n5bbdf56\n6d173fc\n. Closing for now.  Please re-open if more discussion is needed\n. @wgester can you take a peak at this\n. @marklu, can you confirm that this change works?\n. I'll ask around a see what the status is\n. this will not be happening on the current platform.  Closing for now\n. @michaelobriena can I get you to sign off on this last change?\n. Ok I'm going to merge this :D\n. landed as 28f2153bd979edb26c07c31b608754c349a2ebdc and d168bb02117f7eec68cff1120252ff3a26be19cf\n. Commit has landed in the 0.3.0-alpha branch\n. @wgester  do you have any thoughts on this?\n. @StephanBijzitter do you think this thread might be better suited for the google group?\n. Closing for now, we should definitely get this discussion up on the google group @StephanBijzitter \n. @StephanBijzitter The changes to the default html can definitely be considered, could you submit that as a pull request to the generator itself?  We could potentially see that spread to all the seeds and the zip!\nAs far as the post build html... the missing tags have been removed by the minifier... believe it or not the code is still semantic!\n. Hey @ftripier can you peak this?\n. landed as 48592ac\n. Hey @redwoodfavorite can you look into this and update the documentation accordingly.\n. Fix landed as 0a8f0da22bc0021eb807651819dd58bcd099ddbf\n. There were some edge cases we have been trying to work out.  We are hoping  to release very soon!\n. Thanks for being patient!!!\n. Closing for now. \n. @ftripier can you please take a look at this\n. landed as af5b09cafab156a2f30a974b51753554ba640af8\n. Closing as it is a duplicate issue\n. This is definitely something we are aware of, expect a solution soon.  Unfortunately this cannot be fixed until we release 0.3.0\n. Hey @trusktr thanks for submitting the pull request.  Unfortunately we can't start a code review until it passes the linter.  You will notice from the travis warnings that there were a couple issues including console statements and inconsistent quotes.  Trying running npm install and then npm test inside your copy of famous if you want to run the linter locally.\n. closing for now.. we can reopen at any time if it is in a non failing state\n. Hey guys.  Thanks for reporting!\nIt seems like some things have moved around and the slide show lesson is in a bad place. \nAlso, expect to see a very different starter kit in the near future with the release of 0.3.0!\n. The project is no longer in the starter kit.  University has been updated and is now working!!!\n. @michaelobriena can you take a peak at this?\n. 290 has landed\n. Hey @bguiz thanks for submitting.  Sorry to not get back to you sooner.\nWe are in the midst of pushing through some fairly huge fixes into the 0.3.0-alpha milestone.  I've escalated this to @michaelobriena to see if this should be worked into the sprint.\nThanks for putting in the time.\n. landed as bc7e8c2\n. Landed as 0a8f0da22bc0021eb807651819dd58bcd099ddbf\n. @nigelpegg do you think this is something we should work into a sprint?\n. @timjchin is the current doc generator doing this?\n. This has been fixed\n. Thanks @AdrianRossouw, @michaelobriena is on it\n. landed as 7971a089554e11b0ecc907e69e02361e2487be30\n. @wgester can you look into this?\n. Closing\n. @redwoodfavorite can you please advise\n. not going to be fixed here. Please take a look at the new transitionables in mixed mode\n. @wgester can you advise?\n. Done did it\n. landed as 4f7b60b7944ee\n. landed as 9c9c8c02ed8774404708e287f24496ae9453d47a and 9a4b78242d34df4aad399fe5c640cc30f3d35e6c\n. @michaelobriena can this all be squashed to one commit?\n. landed as 6f3201345bfa5060ca8f743b66e519df74ac2451\n. can you file each alpha issue separately please?  we would love to fix them asap :D\nOn Sep 19, 2014, at 12:54 AM, Stephan Bijzitter notifications@github.com wrote:\n\nO I forgot to add that I tested this on the 0.3.0 alpha branch, oops!\nWhile I'm on that... I discovered some several issues with the alpha:\nWhen calling splice:\nTypeError: this._ is undefined\nif (this..trackSize) this..sizeDirty = true; (line 141)\nSecondly, with horizontal scrolling, my browsers do not work as mouse gestures are triggered instead! In my IDE, horizontal scrolling does work as expected because it does not have mouse gestures enabled.\nEither way, @tripodsan you can add new items by using:\nViewSequence.splice(index, 0, item a, item b, item c) just like Array.splice!\n\u2014\nReply to this email directly or view it on GitHub.\n. Here on github, just make each individual issue it\u2019s own thread\n\nOn Sep 19, 2014, at 12:56 AM, Stephan Bijzitter notifications@github.com wrote:\n\nWould love to, any designated place for that?\n\u2014\nReply to this email directly or view it on GitHub.\n. Closing issue as it has been fixed\n. Closing issue for now :D\n. landed as ba54af763b9c77c2b7e721f128024484e5228c52\n. Hey tony, thanks for adding.  We are going to currently pass on this though.  We will not be bumping the package.json until at the very least beta, but very likely not until RC.  If you take a look at the versions currently published to npm you will notice the correct bump in the package.json.  This is to avoid polluting the commits with package.json bumps\n. @StephanBijzitter can you please remove the Eclipse IDE project git ignore commit from this pr.\n. Sorry about closing this... I don't think that was intentional\n. I think what makes the most sense here is to take all the commits that are related and have them submitted as a single pr.\n\nWith that being said there is a chance that all of these could land, in which case we may as well keep them in one issue for simplicity.  In the future though it is probably a best practice to submit them individually\n. Merged!\nLanded as : 8ceb16188e40dde90809f2b90ca1ee065319a6b2 a270b18842c5b5eb6cebdbb3d84dd82971eed7b8 19db406a7f68f27e7a2fed6ac7632e1db0defa2b f755fa06f742264e850bb78df4498372dee945d6 bf7a9d86d4bd8d0b58b7a21771433fc95b6c0727 bb28511f97660b3dfb26b1f1d002ea280c9eaf1f 9ac46a5a5a0ed49bccd669ab68e3e84c032a5a9f 9ac46a5a5a0ed49bccd669ab68e3e84c032a5a9f\n. @Nytrm Thanks for submitting but this fix has already been applied to the alpha as commit 4f7b60b7944ee53829713b02b818a9a384c2e351\n. You may want to switch development to be off the alpha branch\nhttps://github.com/Famous/famous/tree/v0.3.0-alpha\n. Are you running off of the v0.3.0 alpha branch?\nOn Sep 18, 2014, at 2:53 PM, jaandrews notifications@github.com wrote:\n\nI've encountered an issue in the Surface class when I update the render spec to show different views. Below is the error message I receive.\nUncaught TypeError: Cannot read property 'hasChildNodes' of null Surface.js:384\nrecall Surface.js:384\ncleanup Surface.js:334\ncommit RenderNode.js:132 update Context.js:135\ncommit ContainerSurface.js:110\n_applyCommit RenderNode.js:112\n_applyCommit RenderNode.js:113\ncommit RenderNode.js:138\nupdate Context.js:135 step Engine.js:90\nloop Engine.js:98\nThe problem is that this._currentTarget is null during cleanup after the switch and I haven't been able to figure out why. I've tried to create a simplified case, but haven't had any luck so far. You can see a live example of the problem at http://bonsaisherpa.azurewebsites.net. To see it, you need to resize the browser from something small to something large or vice versa. This triggers the media query that switches out the nodes to be rendered.\nAlso, here is a list of the relevant javascript files at that url, going from child to parent in the render spec.\nResponsiveView -> BioView -> WorldScrollView -> WorldScroll -> main\n\u2014\nReply to this email directly or view it on GitHub.\n. closing.  Please feel free to re-open if this is not fixed for you\n. closing this issue\n. @StephanBijzitter I was under the impression the Transitionables were not supposed to be able to handle arrays anymore after the conversation I had with @michaelobriena and @wgester.  I'm going to email them this thread to chime in\n. Hey @Nytrm, we are going to need you to sign our cla before we can start the code review process.\n\nThanks for taking the time to contribute!\n. @Furqankhanzada thanks for letting us know!  We will look into this and see what we can do.\n. this is an alpha tag.. closing \nThanks for the sharp eye\n. @michaelobriena where are we on this?\n. @michaelobriena looks like something still on the docket\n. Closing\n. closing for now.  Please re open if problems presist\n. There are quite a number of issues with the current implementation of fast click... sorry you are having so much trouble.  Thanks for making the issue, hopefully we can get to fixing it asasp\n. @michaelobriena did you find anything out about this?\n. @michaelobriena what are the next steps?\n. @AdamCmiel  can you comment on this?\n. moving to backlog\n. @mellors are you working off the v0.3.0-alpha branch?  We are playing around with adding a native scrollview, you can see the work at https://github.com/redwoodfavorite/famous/blob/native-scrollview/views/NativeScrollview.js\n. closing for now. please feel free to reopen\n. @michaelobriena who else should take a quick peek at this?\n. merged as 3c6117ad98617227502c862ae9edbb970fcf2119\n. @AdamCmiel can you give this a quick sign off as well'?\n. landed as c3c964cce6e1eec5ec193a4bff262213bbbc1f5a\n. @AdamCmiel can you rebase this against the current RC so it can merge cleanly\n@ftripier how do you feel about these changes?\n. @AdamCmiel this now need to be rebased again develop : D\n. landed as 7a3029c\n. Expect some changes in 0.3.0\nYou will notice many js projects omit a src directory from production though. \n. Closing this as it appears to have been fixed by @StephanBijzitter 's pr.  If any of the individual issues are still kicking around please refile each as their own issue.\nThanks so much for taking the time to file this bug report!\n. landed as 449cff770d602f36a35cc25dd541d0ae8e89b894 and 8b05c032192ac26d3a849fc9aad4c0ed0bb34264\n. fixed!\n. If you take a look at the Readme you will notice that there are links to three different seed projects showing you how to get started.  There is a global object, requirejs, and browserify seed.\nIf you are looking for a minimal tooling stack I advise trying out the global object version.\nOn Oct 3, 2014, at 9:36 AM, TT TY notifications@github.com wrote:\n\nI've downloaded the bower version, now what? I don't want the yeoman-famous generator. Which files do I need?\n\u2014\nReply to this email directly or view it on GitHub.\n. Check out the 0.3.0rc branch\nOn Oct 3, 2014 4:27 PM, \"TT TY\" notifications@github.com wrote:\nI only see this:\nInstallation\nSimple Installation (Famo.us Starter Kit)\nTo get up and running quickly, download our starter kit. We've loaded it\nwith examples, demos, reference documentation, and higher-level guides.\nAdvanced Installation (Grunt Toolbelt)\nIf you would like to scaffold an app with Famo.us from the command line,\ninstall our yeoman generator via npm.\nnpm install -g yo grunt-cli bower generator-famous\nmkdir newProject\ncd newProject\nyo famous\ngrunt serve\nPreparing your project for distribution is then as simple as:\ngrunt\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/343#issuecomment-57880310.\n. We had looked at a number of projects and not seen that much of a\ndifference in approach.\n\nFwiw we are solving a slightly different problem offering support for the\nmany ways users might want to work with the framework.\nWith that being said, we're always open to new ideas if you can present\none. As far as I could tell most projects do not include the seed in the\nprimary repo. As each of the seeds require completely different tolling\nstacks (or none at all for the global seed), it struck me as odd to have\nthem all in a single place. Perhaps including the name of the framework in\nthe projects would be helpful, although it could be considered redundant\nwhen combined with the org name.\nAgain, if you can think of a better way to handle this, or can point us in\nthe direction of another project doing a better job we can definitely keep\nthe discussion going!\nOn Oct 4, 2014 2:04 AM, \"TT TY\" notifications@github.com wrote:\n\nOMG... You should not create 3 extra repo for each seed... Take a look how\nother libs handles that problem.. Is also very confusing to have those\nnames...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/343#issuecomment-57899095.\n. The tagged versions of the repo (which is what bower uses to install) include a dist folder with the global build, and a single file version of the require.js build.\n\nThe current way we write the repo, using the anonymous define, allows for easy conversion to common js.  In fact, we having included a deamdify transform in the repo, which allows you to simply npm install and hit the ground running.  The only edge case is the inclusion of a src directory, which changes the require statements from Engine = require('famous/core/Engine) to Engine = require('famous/src/core/Engine).   This is why I have written the famousify transform which when included in a project allows users to write their require statements without src in the path.\nI highly suggest you take another look at the seed projects, I think there might be a bit of a misunderstanding.  None of the seed projects include the source for famous, rather they show ways of setting up a Famous project.\nThe global seed points at a global build of famous available on a CDN and requires no tooling.  The requirejs seed uses bower to install famous and has quite a bit of tooling.  The browserify seed uses npm to install famous and require much less tooling.\n. Closing\n. Hi @lonormaly,  \nas of right now we don't officially support offline rendering of the scene graph.  There are a number of factors that will need to be taken into account to get an app rendering on the server (a.k.a phantomjs support).\nThis has been added to the backlog and is something that we will explore once the framework has stabilized a bit more.\n. There is a solution offered here as well https://github.com/ariya/phantomjs/issues/10522#issuecomment-38503277\n```\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function (oThis) {\n    if (typeof this !== \"function\") {\n      // closest thing possible to the ECMAScript 5 internal IsCallable function\n      throw new TypeError(\"Function.prototype.bind - what is trying to be bound is not callable\");\n    }\nvar aArgs = Array.prototype.slice.call(arguments, 1), \n    fToBind = this, \n    fNOP = function () {},\n    fBound = function () {\n      return fToBind.apply(this instanceof fNOP && oThis\n                             ? this\n                             : oThis,\n                           aArgs.concat(Array.prototype.slice.call(arguments)));\n    };\n\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n\nreturn fBound;\n\n};\n}\n```\nIt looks like the head of phantom.js might be fixing this, but only time will tell.\n. This already works try\nbower install famous#0.3.0-rc\n. The current demos on the website are running off of an older build of famous and will be deprecated when we launch a new website.\nThanks for pointing out.\n. hey @redwoodfavorite can you look into this?\n. This has landed in the new docs\n. Can you give an example?  Are you multiplying the value by time?  If only giving theta you will not have any change over time.  Check the example in the seed projects to see how this is implemented\n. It looks to me like that route should exist, and is a bug that it shows at all\n@zackbrown can we do something about routes that don't resolve?\n. landed as 7b1c732\n. landed as bee3ad4\n. landed as ce2a228\n. landed as 02e34e2\n. Fixed by #364 \n. @trusktr can you please squash these to one commit please?\n. This demo was by a french advertising agency for a private client.  I highly doubt that the code will ever be made public due to this being a private contract for an advertising campaign.  I am going to close this issue for now due to the fact I doubt the source will ever be available.  Please feel free to keep the discussion going though!\n. I am not sure how this ended up being closed... very strange.  Sorry about that\n. landed as f093688\n. @michaelobriena do you think we can put together some working examples and file proper bugs with the browser vendors?\n. Awesome job Mike!!!  I emailed a buddy of mine on the chrome team to see if this can be excalated\n. I think 501f5778106126bed238139827d2dc7d2846b85a might have fixed it.\n. Closing for now, please reopen if issue is not solved\n. I'm going to close this issue for right now. I think it would be a good idea to move the discussion over to the angular integration or to the mail list.\n. landed as 501f577\n. Signed off by mark\n. landed as a2f63c7\n. landed as 10d21de\n. @StephanBijzitter does @MajorBreakfast 's suggestion work?\n. I'm going to close this issue for now.  Please feel free to reopen it.\n. @mamrehn Thanks for the submisssion.  Would you be able to squash these two commits for us?\nAlso we will need you to sign our CLA before we can merge anything http://famo.us/cla\n. We are discussing in house right now if it makes sense to add these attributes.  We recently added the ability to add arbitrary attributes to any surface.  We are going to test and see if this works.  If so we may actually take this in the opposite direction and remove autoplay as a default option.\nThanks for the PR and opening this issue for us to discuss\n. @mamrehn we are going to come up with a way to get setAttributes called at the appropriate time.  There is no need to have all the attributes inside of the options if we can fix this.\nOnce we figure out how to get this to work you should definitely submit a PR to remove autoplay from the VideoSurface\n. I'm going to close this for now as we are not taking feature requests. Please feel free to reopen though\n. Hey @allenfantasy would you be able to sign our cla so we can pull this in?\nhttp://famo.us/cla\n. landed as 82e5cc9\n. Hey @irwansyahwii you will notice that your pr did not pass the travis CI linter.  Would you be able to fix this commit to pass (I think it is just a missing semi colon).  Please squash this change so that there is still only a single commit.  We will then need you to sign our cla found at http://famo.us/cla\nOnce that has been done I'll get this forwarded to someone for code review.\n. Hey @sabithpocker unfortunately this pr did not pass travis due to trailing white space.  Would you be able to get a passing build (you can test locally with npm test) and squash the modification so this pr is still a single commit?\nWe will then need you to sign the cla found at http://famo.us/cla\nAfter both of those steps are done we can move forward with the pr.\n. @sabithpocker a quick ping to see if you can fix the problems with this commit.\n. I fixed the white space myself... landed as 6eb8882b873e37c2c48dba59eae3ef88eb90525a\n. @Sing-Li would you be able to sign our cla found at http://famo.us/cla\nThanks!\n. landed as 49768a7\n. This is a great idea... I'll look into doing this today.  We were concerned about maintaining legacy guides, let's start a discussion in here about the pro's and cons.\nWhat do you think @michaelobriena ?\n. Sounds good to me\u2026 let\u2019s move the guide in this afternoon.\nOn Oct 9, 2014, at 10:55 AM, michaelobriena notifications@github.com wrote:\n\nI personally am a fan of it. The more places to share that information the better. Not really a question for me though.\n\u2014\nReply to this email directly or view it on GitHub.\n. @michaelobriena is this the intended functionality?\n. Changed the title of the issue to be about the opacity hack\n. Hey Joseph,\n\nLooks like the package.json you provided is not valid, you can tell by\nlooking at the broken Travis tests.\nCan you please fix this, squash the change, and force push?\nOn Oct 9, 2014 1:29 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\nhttp://jspm.io\nPut this in package.json and you're good to go with jspm.\nYou can merge this Pull Request by running\ngit pull https://github.com/trusktr/famous master\nOr view, comment on, or merge it at:\nhttps://github.com/Famous/famous/pull/378\nCommit Summary\n- Support for jspm.io\nFile Changes\n- M package.json\n  https://github.com/Famous/famous/pull/378/files#diff-0 (16)\nPatch Links:\n- https://github.com/Famous/famous/pull/378.patch\n- https://github.com/Famous/famous/pull/378.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/378.\n. @trusktr does installing with jspm work without this extra meta data?  I'm not entirely sure that I want to bloat the package.json with data that we might not support long term\n. Would you be willing to take the mantle on jspm support through the override?  I think I like keeping the solution on their end for right now.\n\nOn Oct 9, 2014, at 3:31 PM, Joseph Orbegoso Pea notifications@github.com wrote:\n\n@TheAlphaNerd It's possible to just have the override in the jspm registry (the jspm section is called an override in jspm land), which I've already done: https://github.com/jspm/registry/blob/master/package-overrides/github/Famous/famous%400.3.0.json\nWithout the override, installing with jspm won't work, but it doesn't necessarily have to be in package.json, though it'd be nice to support jspm. Jspm implements the the full ES6 module spec, so when ES6 comes out, projects that currently use ES6 Modules, AMD, CJS, or any mix of those three, will continue to just work, only the internals of jspm will change. It's quite beautiful.\nIf you decide to have Famo.us in the jspm registry without modifying package.json, it just means that someone will have to maintain the Famo.us entry in the jspm registry instead of here in package.json when things like file structure or dependencies of Famo.us change.\n\u2014\nReply to this email directly or view it on GitHub.\n. Amazing!!! thanks so much\n. landed as a5b78f1\n. @michaelobriena how does this look to you?\n. @wgester thoughts on this?\n. I am closing this for now as we are not taking feature requests. Please feel free to reopen or submit a PR\n. @AdamCmiel can you take a look into this?\n@dinopetrone can you put together an example to show us this happening?\n. Fixed!!!\n. These fixes look good to me, merging\n. landed as 6abb3f1951fb00a95d78cf88dfc7401eb58714b3\n. @netaisllc \n\nThanks for submitting this PR.  Before we can merge anything we need you to sign our CLA available at http://famo.us/cla\n. I just noticed you have a second pull request up right now for edits to a different file.  Can you please merge these into a single PR and a single commit.\n. Closing in lieu of #410 \n. @netaisllc we are going to need you to sign the cla before anything can be merge\nhttp://famo.us/cla\nI would also like you to respond to the notes I have left inline, there are quite a number of changes in here, and I don't agree with all of them.  After you do another iteration I will have a second employee take a look at the proposed changes and we will see if we can sign off on them.\nAlso, could you please merge #386 into this pr... we will be squashing all of your style fixes into a single commit.\n. you can get your branch with git pull https://github.com/netaisllc/famous.git patch-2\n. Also you sent your pull request again against the release candidate.  Can you please make the pull request against the develop branch\n@matthewtoast can you chime in here about the changes?\n. @netaisllc just follow what @matthewtoast suggested and I'll give a once over and merge : D\n. Closing in lieu of #410 \n. landed as 19f5211cdff188b66aed3d461ecdcd3fbbdcec01\n. landed as 25a7f97\n. @redwoodfavorite would you be able to update this copy?\n. Awesome!!!\n. Did you mean to make an issue rather than a pull request?\nClosing this, please migrate to issues\n. Closing for now. Please reopen if you have a test case\n. closing for now\n. @tato123 We currently link to the src folder as it is effectively our \"primary acting files\".\nWhen using require.js (which our framework is written in), you are best off in development using the folder with a collection of files to be used in the name space as opposed to a built reseource (such as famous.js or famous-global.js).  As the project is published as an AMD module, I feel it is appropriate to be pointing to the src folder, improving the ability to debug and develop, rather than build files.\nIf you take a look at grunt-bower-requirejs you will see that including the src directory will allow people building with require to automagically wire everything up following up a bower install.\nIn fact, the dist folder is only included in the bower published version as they provide an in point for projects that need to consume famo.us in a very specific way (such as famo.us angular).\nI understand this must be frustrating considering that wiredep is assuming that you are working off the global object instead of using a module loader, perhaps there can be a custom key that can be added to bower.json for wiredep to hook into.\nI'm closing this issue for right now, although please feel free to respond and keep the conversation going.\n. The global build of famo.us is in fact built with browserify.  It is a standalone and can work with AMD, Common, or global.\nAfter having thought through this quite a bit I think that the only solution here is to remove the main from the bower altogether.  It would be better for nothing to happen than the wrong thing to happen.  While the platform is written in AMD, it is consumed in many different ways.  As such it is unfair to support one and not the other.\n. @matthewtoast can you look into this?\n. The starter kit now includes the tutorials!\n. Hey @extempl thanks for the PR.  Before we can do anything we are going to need you to sign our CLA which can be found at http://famo.us/cla\nThanks!\n. landed as a465abd\n. Hey all I'm going to close this, if you want to keep the conversation going please feel free to keep chatting here or start a thread on the google group!\n. landed as dcee5ca\n. Hey @alex-mcleod thanks for submitting this pr.  Can you please sign our CLA before we get started on a code review?\nThanks!\n. landed as a1e5e89\n. hey will can you please take a look at this?\n. @StephanBijzitter you know how much we appreciate all the hard work you have put in to famous and the community.\nI truly hope i do not offend you by closing this PR unmerged. We are no longer maintaining this repo and cannot afford to put resources on merging outstanding technical PR's.\nThe team is super excited to see what you do with http://famous.org/engine\n. OOPS\nhttp://github.com/famous/engine\nwomp womp\n. landed as 852b7bd\n. Can you share a demo so we can see this?  Should be able to work if you just give us the options as well.\n. all changes have landed as 39e9fbd\nI took a few liberties with your changes to the README\n. You might need to add the famousify transform\nOn Oct 18, 2014, at 3:19 PM, Avi Haiat notifications@github.com wrote:\n\nI'm not sure where i should post the issue as it is cross related to famous-angular.\nAs of yesterday I was using successfully the following config for working with browserify and famous-angular wit the following versions:\nfamous: version 0.2.2\nfamous-angular: version 0.4.0 Extract of package.json\n\"browser\": {\n    \"angular\": \"./bower_components/angular/angular.min.js\",\n    \"angular-mocks\": \"./bower_components/angular-mocks/angular-mocks.js\",\n    \"angular-ui-router\": \"./bower_components/angular-ui-router/release/angular-ui-router.min.js\",\n    \"angular-animate\": \"./bower_components/angular-animate/angular-animate.min.js\",\n    \"angular-sanitize\": \"./bower_components/angular-sanitize/angular-sanitize.min.js\",\n    \"famous\": \"./bower_components/famous/famous-global.min.js\",\n    \"famous-angular\": \"./bower_components/famous-angular/dist/famous-angular.min.js\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"html2js-browserify\",\n      \"browserify-shim\"\n    ]\n  },\n  \"browserify-shim\": {\n    \"angular\": {\n      \"exports\": \"angular\"\n    },\n    \"angular-mocks\": {\n      \"exports\": \"angular\",\n      \"depends\": [\n        \"angular\"\n      ]\n    },\n    \"angular-ui-router\": {\n      \"depends\": [\n        \"angular\"\n      ]\n    },\n    \"famous\": {\n      \"exports\": \"famous\"\n    },\n    \"famous-angular\": {\n      \"depends\": [\n        \"famous-polyfills\",\n        \"famous\",\n        \"angular\",\n        \"angular-animate\",\n        \"angular-sanitize\",\n        \"angular-ui-router\"\n      ]\n    }\nToday i upgraded to :\nfamous : version 0.3.0\nfamous-angular: version 0.5.0\nI changed the location for the famous-global.js to \"./bower_components/famous/dist/famous-global.js\", but i couldn't build the bundle, browserify would complain that './core' does not exist.\nI should not have to use famousify as famous-global.js is self contained.\nSo I compared the 2 versions of famous-gobal.js and noticed the 2 following changes:\nfirst line is different (it passes now require as a parameter instead of previously dereq)\nscript uses require instead of previously dereq\nReplacing manually require with dereq solves my issue.\nI also noticed that famous-global.min.js is no longer minified.\nI believe this is related to the repo : famous-dist-generator.\n\u2014\nReply to this email directly or view it on GitHub.\n. Fixed in dist builder https://github.com/FamousTools/famous-dist-generator/commit/0b3c663efec20caef498396f262d237f400550a1\n\nHotfix applied to 0.3.0 tag as well as the starter-kit!\nThanks for the keen eye\n. @michaelobriena should we execute on this?\n. Hey @pefi1011 you are going to want to make an attributes object inside your options... I will respond with code to your stack overflow question.  You can see the source in Surface where it calls to options.attributes \nhttps://github.com/Famous/famous/blob/master/src/core/Surface.js#L229\n. Can you please share your new code?\nOn Oct 20, 2014 6:06 PM, \"pefi1011\" notifications@github.com wrote:\n\nthanks for the fast answer..unfortunately it didn't work, nothing changed\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/415#issuecomment-59864857.\n. look at the code on stack overflow\n\nhttps://github.com/pefi1011/Flyer/blob/master/FylerViewInput/src/views/FlyerViewInput.js#L187\nChange options to attributes\nOn Oct 20, 2014, at 6:08 PM, pefi1011 notifications@github.com wrote:\n\nof course..row 180\nhttps://github.com/pefi1011/Flyer/blob/master/FylerViewInput/src/views/FlyerViewInput.js\n\u2014\nReply to this email directly or view it on GitHub.\n. sorry... I totally wrote the wrong thing on stack overflow, have fixed it\n. !!!\n. @ftripier looks like you failed travis :sob: \n\nIn engine:\n  364:12 error Expected a function declaration func-style\n  366:30 error Expected '!==' and instead saw '!=' eqeqeq\n. @wgester @michaelobriena thoughts?\n. merged as 404ab7c\n. fixes #417 \n. @visheshd can you please sign the cla found at http://famo.us/cla before we can look into this.\nAlso you will notice that this build failed the linter, specifically due to having a mix of tabs and spaces.  Can you please fix your changes to pass the linter! (you can run it locally with npm test, you will have to run `npm install once to get the tools installed in the project)\n. @matthewtoast \n. Closing for now... feel free to reopen \n. @nihilence saw the PR... thanks for submitting.  I'm not 100% it can land exactly as it is, but we can find a way to make it work!\n. @IjzerenHein can you please sign the cla found at http://famo.us/cla before we can look into this.\n. landed as 36493cf\n. @IjzerenHein can you please sign the cla found at http://famo.us/cla before we can look into this.\n. landed as 4cb5f5e\n. Should this bug be files with famous/angular ?\n. landed as 182b5ee\n. I am going to close this assuming we are not going to implement this.  Please feel free to re open or submit a PR\n. @wgester what would need to change for this to land?\n. landed as 80a4b9c\n. landed as 97438ac and a54b4b4c818ac3485de0ab584e3e9fc8252971ea\n. @michaelobriena are we keeping this pr open?\nshould we consider breaking some of those changes into individual pr's as enhancements?\n. @gadicc we are closing this for now.  there is a test suite on the next branch, please feel free to send pr's against that\n. landed as dd44905816318a88ea2a522c599ed84c7637242b\n. @AdamCmiel @wgester \n. fixed by #451\n. could you also squash to a single commit, rebase against develop, and send the pr against develop not master :D\n. landed as 20f1685\n. landed as 649b3b4\n. closing\n. closing for now. Please feel free to re open\n. landed as e2725b1\n. landed as 0fccc50\n. Closing for now, please feel free to re open\n. @ImtiazMajeed unfortunately your PR did not pass the travis linter.  It appears you have some trailing commas.  Can you fix this, squash the changes to a single commit, and force push.\n. landed as efb64d2\n. @wgester thoughts?\n. landed as 43d12ae\n. @michaelobriena are we going to merge for 0.3.2 or hold off until 0.4.0?\n. landed as e03838d\n. Thanks for pointing this out!\nIt has been fixed my #467 and will be updated on the website soon!\n. @marklu can you comment on this?\n. Is this still happening?\n. please try mixed mode\nhttp://github.com/famous/engine\n. I think this question might be better to ask on the famous angular repo :D\n. I'm going to close this for now.  Please feel free to re-open\n. This will be better supported in our MixedMode release.\n. please feel free to keep the conversation going\n. closing for now... if problem is persisting please re open\n. landed as a57e7cf\n. landed as 59084f220e4d4acc38a91f615e3115f9142b0669\n. Was this new with 0.3.1 or has it been around since 0.3.0?\n. was this in 0.3.0 or is it new in 0.3.1\n. /cc @michaelobriena \n. is this still happening?\n. please try mixed mode\nhttp://github.com/famous/engine\n. /cc @michaelobriena @wgester \n. @matthewtoast \n. Really interesting addition!\nWe'll need you to sign the cla in order to merge anything.\nhttp://famo.us/cla\n. landed as ca2837c1e9cb3d48df7f1a10bc1489d8a7afae24\n. You should use the github api to create a pull request and sign the cla\nfound at http://famo.us/cla and we'll start the code review process!\nOn Nov 20, 2014 5:24 PM, \"jd-carroll\" notifications@github.com wrote:\n\n@michaelobriena https://github.com/michaelobriena I've forked the\nfamous repository and created a new branch (Bug_GenericSync) with the\nchange.\nJD\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/486#issuecomment-63910786.\n. fixed by 729b975\n. landed as 019718d\n. @michaelobriena is this good to go?\n. landed as 4856b57\n. Hey @pencilcheck thanks for pointing this out.  Our new website is right around the corner (no data yet, but very soon) and as such we will not be making major changes to the websites styles.\n\nI apologize that you are having so much trouble, is it safe to assume it is primarily with the docs?  if that is the case you can generate docs in the famous repo with npm run build-docs (Assuming you have already run npm install).  The docs built in the repo (the same as included in the starter kit) are actually even better than the ones on our current site!\n. closing for now as we are not going to implement low priority enhancements.  Please feel free to file a PR though\n. closing for now. \n. Is this happening in all browsers, or only a specific vendor?\n. Have you tried launching famous with app-mode: false?\n. I would make an issue on famous angular... you might have better luck there\n@zackbrown \n. Closing\n. please try mixed mode\nhttp://github.com/famous/engine\n. Famo.us is indeed still in beta as is the Famous + Angular integration\n. Please feel free to keep asking questions in here!\n. @michaelobriena cleared for merging?  Should we keep this one on standby until 0.4.0 since it might break stuff?\n. landed as 00f7c85\n. landed as 1588385\n. /cc @matthewtoast \n. @matthewtoast would you be able to update this content?\n. @wgester can you comment?\n. We are no longer actively maintaining this repo and as such we will not be fixing this bug.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. This is a brand new bug being introduced in firefox 34+ (just witnessed it in firefox 35 developer edition.\nThank you @Skalkaz for pointing this out\n/cc @marklu @michaelobriena \n. Closing for now... I have updated the global seed to point at a png rather than an svg.  It appears the problems are due to firefox doing weird things with svg's right now :(\n. @matthewtoast \n. We are no longer actively maintaining this repo and as such we will not be fixing this bug.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. /cc @michaelobriena @marklu \n. It seems that this fix does not work... it appears that the issue is with loading images from external paths... that being said this fix should probably still land.\n. @michaelobriena should I resubmit this bug as an enhancement and slightly different commit message?\n. Are we still going to merge this fix as a different commit?\n. No worries, it is my jerb :P\n. Closing a FF 35 has landed!\n. to reproduce simply clone browserify seed an try to view the build in firefox\n. We are no longer actively maintaining this repo and as such we will not be fixing this bug.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. @StephanBijzitter we unfortunately did not get around to testing it internally before cutting the release.  There was a fairly large bug that we caught that was blocking the famous-angular integration, that required a release to go out.\n. --> https://github.com/Famous/famous/pull/407#issuecomment-104585863\n. @StephanBijzitter this will come in 0.4.0.  Generally it is best practice to not merge things into a patch release that changes api or potentially breaks stuff.\nFor this particular PR we need to do a bit more research into the effects on the platform\n/cc @michaelobriena \n. /cc @michaelobriena can this potentially land in 0.4?\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. We should escalate this.  It appears this bug is stopping us from bumping famo.us in the angular integration\n/cc @zackbrown @michaelobriena @ftripier \n. Closing\n. Closing\n. /cc @michaelobriena @DnMllr @ftripier \n. We are no longer actively maintaining this repo and as such we will not be fixing this bug.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Closing\nThanks @StephanBijzitter for being so on top of things!\n. @raxan thanks for checking in.  Currently support is shifting as vendors change things in their implementation.  A regression was recently introduced into firefox that broke SVG support.  \nWe are hoping to introduce a better way of keeping track of support, most likely through a testing suite.\n. dupe of #470 closing\n. GREAT NEWS, it looks like this also fixed #487 allowing us to throw away #514 \n/cc @ftripier \n. @zackbrown thought you might like to know that this fixes the https://github.com/famous/famous-angular testing suite\n@michaelobriena want to aim to have this land before the end of the week on cut 0.3.2 early next week? \n. landed as 729b975\n. MIXED MODE IS HERE\nhttp://github.com/famous/engine\n. What browser and os?\nOn Dec 12, 2014 7:59 PM, \"jd-carroll\" notifications@github.com wrote:\n\n@StephanBijzitter https://github.com/StephanBijzitter I am not able to\nreproduce the screenshot you have listed, the \"+\" doesn't add anything to\nthe page.\nCan you give a little more context? Are you using a lightbox at all\n(doesn't look like you are) ?\nJD\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/522#issuecomment-66857837.\n. We are no longer actively maintaining this repo and as such we will not be fixing this bug.\n\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. First of all... OMG OMG OMG I want a docset so bad so lets make this work.\n@jskrzypek it is worth mentioning that we are indeed using yuidoc, not jsdoc.  There is a doc-builder util that we created for building the website.  That being said it probably would not be useful for creating the DB that you need for a docset.\nhttps://github.com/FamousTools/famous-doc-generator\nWhat type of output do you need to make the sqlite database?  Would some sort of JSON work?  We could definitely add a flag to outuput only the JSON that the website is generated with.\nYou want to hop on irc at some point and ping me in #famous to sort this out?\n. It is also worth mentioning that we could perhaps just add a flag to the doc-generator itself to build the docset!  Perhaps it might make sense to toss things right into that repo.\n. @aintnorest thanks for pointing this out.  Once you have a fiddle ready I'll get this forwarded to the right people.\n. We are no longer actively maintaining this repo and as such we will not be fixing this bug.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. landed as 6ed681c\n. reverted by 9832f855ffa33522cc60e19e0d133a34b6640dc0\n. ping @AdamCmiel \n. landed as a87aed8\n. landed as fc0a878\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. /cc @michaelobriena \n. fixed by 13a0298\n. /cc @michaelobriena \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. /cc @michaelobriena \n. landed as 048bcda\n. /cc @michaelobriena \n. landed as 121c2f3\n. /cc @michaelobriena \n. landed as f4028b9\n. /cc @michaelobriena \n. fixed :smile: \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. /cc @michaelobriena \n. landed as 164be17\n. /cc @michaelobriena \n. landed as 524e8f0\n. reverted by 9832f855ffa33522cc60e19e0d133a34b6640dc0\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Hey markuz.  Currently our module does not expose an index, thus var famous = require('famous') will not work.\nWhat you should be doing is requiring in the individual parts of the framework.  such as\njs\nvar Engine = require('famous/core/Engine');\nAlthough to use the above syntax you will need to include the famousify transform in your project.\nI highly suggest taking a look at our browserify-seed to get an idea of how to wire up famo.us into a browserify or webpack stack\n. De-amdify is already included in the platform itself, you should never have to call it on your end.  Famousify is just sugar so you don\u2019t have to call var Engine = require(\u2018Famous/src/core/Engine\u2019); \nIf you would like to use a common js build of the framework you can use our dist builder to create a common only port.  That being said we are currently not planning to publish the common only port to npm.\n. If you are using watchify then you will have quite a large bit of caching happening while your code is building.  We have fairly large projects in the office built with the framework that still maintain sub-second build, even with the de-amdify transform.\nThe decision to keep the npm published version in AMD rather than common was due to a number of reasons.\n- We do not officially support running famous on the server\n- Publishing a common port of the framework creates an alternative universe that is different from the mainline, making jumping between the master branch and the published branch unnecessarily complicated.\n- Browserify offers first class support for embedding transforms in the package.json, and we have not experienced any major slow down due to the platform using de-amdify.\nIf you would like to maintain your fork of the project to simplify your workflow I whole heartily support you.  I highly suggest checking out a tool I wrote https://github.com/thealphanerd/index-finger you can use it to easily generate your indexes.  You can also feel free to use another tool https://github.com/thealphanerd/common-ground to strip off the amd.  \nAs you can see we already have the infrastructure in place to very easily automate the process of generating common-js, and publishing as such.  We have opted not to in order to avoid unnecessary workflow for people who are jumping between the npm published version of the framework and the current master / develop branches.\nI apologize that this has been frustrating for you, I hope you can respect how we came to this decision.=\n. Hey markuz-brasil,\nWanted to quickly revisit this thread.  I have just finished completely rewriting the dist builder, so things finally work as expected again.  Further I want you to know that version of Famo.us published to npm will be in the commonJS pattern from now on\n. @dcsan try running npm run build-docs in the repo, there is a slightly different docs that are build than what is on the website\n. closing for now.  Let me know if you are still having issues\n. dupe of #224\n. Hey @gdi2290 can you please sign the cla so we can merge this?\nhttp://famo.us/cla/\n. landed as 6a40086\n. I am closing this for now.  Expect more information about our widgets in the near future\n. closing for now.  please feel free to reopen.\n. I just disabled it.  the only content wasn't even written by us\n. closing for now. Vendor Bug\n. This has been updated\n. /cc @michaelobriena \n. fixed by 0057eaa\n. Thanks @alexanderGugel for getting those PR's in!\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. landed as 0ce6783\n. Nope. We never require famous from within the framework, it is all relative\npathing.\nUnfortunately there is no way to hijack require statements in parents\nAFAIK. If we could do that then famousify would not need to exist in the\nseed\nTldr nope\nOn Jan 3, 2015 4:39 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\nHi @TheAlphaNerd https://github.com/TheAlphaNerd, would putting\nfamousify in package.json's browserify.transforms property make sense? I\nsaw it in the browserify-seed, but would it also work here?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556.\n. If you have famousify in the package json of your intermediary project you\nshould not get any errors.\n\nShare me a link and I'll take a peak when I'm by my computer\nOn Jan 3, 2015 5:00 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\n@TheAlphaNerd https://github.com/TheAlphaNerd Oh ok, I see. Yeah, it'd\nbe nice if a package could specify which browserify transforms it needs.\nI'm in the scenario that I've made a package that depends on famous, then I\nhave a project that depends on the package, but not directly on famous, so\nbrowserify was erroring out requiring f.e. 'famous/core/Surface'. Adding\nfamousify to the project doesn't seem to help, but adding famousify to the\npackage that directly depends on famous makes it all work. I guess this\ngood enough!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68616242.\n. Again nope. Browserify transforms work when the code is required in. Not as\na batch.\nOn Jan 3, 2015 6:10 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n@TheAlphaNerd https://github.com/TheAlphaNerd What about having\nfamousify move contents out of src into to the root of the famous package\nfolder? Could that work?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68617803.\n. There was a previous thread about a similar topic, I can dig it up later to\nshare (I'm in the car at the moment)\n\nThe short answer is no. We want to have code in dev the same as code in\nproduction.\nIf we relied on pre publish magic for this we would be in a weird place if\nyou needed to run off the head.\nIf you have famousify included in the transforms section of your\nintermediary project things should just work in the top level repo\nOn Jan 3, 2015 6:29 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\n@TheAlphaNerd https://github.com/TheAlphaNerd Idea: it would be\npossible to add a postinstall script to package.json scripts that moves\nthe files into the root, then famousify wouldn't be needed at all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68618197.\n. Prod as in what is published to npm.\nOn Jan 3, 2015 6:47 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n@TheAlphaNerd https://github.com/TheAlphaNerd Why does the file\nstructure need to be the same in dev as in prod? In production everything\nwill be minified and bundled into a single file right? I can live with\nhaving to add famousify to a project just to make it compatible with\nbrowserify, but I'd prefer not to if it was possible. Hmmm...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68618562.\n. Indeed... Although you don't necessarily want to load the entire framework\nin build.\nOn Jan 3, 2015 7:03 PM, \"Alexander Gugel\" notifications@github.com wrote:\nWouldn't var famous = require('famous'); var Engine = famous.core.Engine;\ninstead of require('famous/core/Engine') solve most of these problems\n(just like in the global-seed)?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68618911.\n. You should in theory be able to do dead code elimination the get rid of\nstuff... But it isn't guaranteed.\n\nThis actually becomes a bigger issue regarding what the canonical way to\nuse the framework is.\nYou could also make the required famous a glorified module loader itself.\nCan't give code example right now because I'm on a phone.\nSimply put, a larger syntax change like this is not trivial, and requires\nchanging documentation and education materials.\nThat is not a reason to not do it, but rather make sure it is definitely\nthe change we want\nOn Jan 3, 2015 7:05 PM, \"Myles Borins\" myles@famo.us wrote:\n\nIndeed... Although you don't necessarily want to load the entire framework\nin build.\nOn Jan 3, 2015 7:03 PM, \"Alexander Gugel\" notifications@github.com\nwrote:\n\nWouldn't var famous = require('famous'); var Engine = famous.core.Engine;\ninstead of require('famous/core/Engine') solve most of these problems\n(just like in the global-seed)?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68618911.\n. There is a bunch of complexity this creates.\n\n\nI'm not going to be able to reply to this anymore for now... Going for\ndinner.\nOn Jan 3, 2015 7:19 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\nSimply putting everything in the root for production and keeping require\ncalls the same sounds easier.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68619274.\n. /cc @michaelobriena I think we should escalate this\n. Here is some copy pasta for you alex\n\nThank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. landed as 0057eaa\n. merged as 13a0298\n. Closing for now.  Please feel free to reopen if you have more questions\n. You can toss es6to5ify as a transform in the browserify seed\nOn Jan 8, 2015 6:36 PM, \"speigg\" notifications@github.com wrote:\n\nUse webpack, I find it to be much more powerful (and performant) than\nbrowserify. Also, I've started using 6to5 instead of Traceur... 6to5\nimplements much more of the es6 spec and generates much cleaner code and\nsimpler code.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/563#issuecomment-69285391.\n. Woops.  Good catch\nOn Jan 9, 2015 12:12 AM, \"Alexander Gugel\" notifications@github.com wrote:\n@TheAlphaNerd https://github.com/TheAlphaNerd Seems like it's called\n6to5ify https://www.npmjs.com/package/6to5ify, not es6to5ify\nhttps://www.npmjs.com/package/es6to5ify.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/563#issuecomment-69305012.\n. There is no reason you can't just use es6 and import things as you would like.  We are starting to experiment internally, expect an es6 seed in the very near future.\n\nI'm closing this issue for right now. Feel free to reopen if you have more questions\n. @arkadyp looks to me like you volunteered to update the dates :P\n. landed as 03dd313\n. landed as 7dc17c8\n. This was published prior to getting the name. No way to unpublish\nOn Jan 6, 2015 10:56 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\nThe title of the public/index.html file is OPA!. xD\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/566#issuecomment-68985737.\n. Hmm\nthat did work.  My bad!\n. You should check the docs... options are now there!\n. hey @jordanpapaleo I just notice the addition of .idea to the .gitignore\n\nIs that a webstorm file?  I think it might make sense to avoid vendor specific files, lest it become unruly.  Do you think that is something better left to a global gitignore?  I'm open to being persuaded on this.\n. landed as 4a884a0d7b5bda9f753527d1e231e6bf1303778c\n. Hey @SuPenguin thanks for making this PR.  It appears that your code is not linting right now (you can tell from the red x above).  It looks like it is a fairly trivial issue, specifically regarding some extra spaces.  Could you fix this and rebase?\nThanks!!!\n. closing for now.  Expect an official date on mixed mode soon\n. @MrNice I'd double check that.  0.3.4 was published to npm 24 days ago.\n. Ahhh\u2026 yeah I set that up a bit back to make sure projects wouldn\u2019t automatically upgrade.  While we are fairly vigilant at stopping api changes from propagating, sometimes there are unforeseen weird changes between cuts\nI highly suggest the tool \u201cdavid\u201d to manage dependencies.  You can use it via the cli, or peek the badges in the repo (if you change the references in the read me)=\n. @leestar there was a fix that landed but it caused a very odd regression.  Due to people being out of the office on holidays we needed to revert the fix and re-evaluate the approach.  We hope to see an official fix land very soon.\n. Fix should be landing soon!\n. Closing as I think a fix has landed. Please reopen if neccessary\n. landed as bfbe2db\n. /cc @michaelobriena \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. is that documented in the official jsdoc / yuidoc guide?\nWe are evaluating replacing our doc-generator with something closer to vanilla jsdoc.\n. ahh... good call.  Must be some jank in our end.  This should not be merged then. Thanks for the keen eye @StephanBijzitter \n. /cc @redwoodfavorite \n. /cc @michaelobriena \n. @michaelobriena should this be something we send to mozilla?\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. /cc @michaelobriena \n. closing.  Please re open if you need to\n. landed as fcbfbaf\n. Hey Marc,\nCheck this out \u2014> https://github.com/Famous/requirejs-seed\nBasically all you want to do is patch famous to ../libs/famous/src and everything will work :D\nOn Jan 20, 2015, at 6:00 PM, Marc Godard notifications@github.com wrote:\n\nI know this isn't the right place for this, but the site kinda sucks at explaining stuff, and couldn't really think of a better place to ask. I am also 100% new to famo.us and 80% with requireJS. I am pretty sure this is a stupid requireJS question... but again where to ask when learning 100% on your own.\nI have this...\nrequire.config({\n    paths: {\n        ...\n        famous: '../libs/famous/dist/famous'\n    }\n});\nwhich works with ALL my other libraries that I use.\nthen I want to use famo.us in a module so I do this... but wait... requireJS is missing stuff??? lol\ndefine(['app', '...', 'famous'], function(app, ..., famous) {\n```\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\nvar mainContext = Engine.createContext();\nvar firstSurface = new Surface({\n  content: \"Hi!...\",\n  size: [200, 200],\n  properties: {\n    backgroundColor: 'rgb(240, 238, 233)',\n    textAlign: 'center',\n    padding: '5px',\n    border: '2px solid rgb(210, 208, 203)',\n    marginTop: '50px',\n    marginLeft: '50px'\n  }\n});\nmainContext.add(firstSurface);\n```\n});\nIt looks like the famous/core/Surface is to use the source files... but I want to use the famous.js file only because I don't want to over complicate anything.\nI must really recommend better documentation or an example using the requirejs stuff that doesn't assume you have the source files. (Yes I looked at the requireJS seed and it was the same, also looked at the examples in the starter kit)\nI also have another basic question that I couldn't find an answer to... Can you mix famo.us with html? I mean what if I just wanted one div animated?\n\u2014\nReply to this email directly or view it on GitHub.\n. Also for what it is worth... sourcing via path and the dist should still work absolutely fine!  You can use Famous as a global object with dot notation (if you add the dist script and then just call to famous), although our docs for the most point do not use that syntax.\n. @michaelobriena can we escalate this???\n. landed as f515e63213723ea7b1eda90340a1b8917047b47a\n. closing for now.  Please feel free to continue the discussion\n. oh my glob\n. I'm not seeing the update to prova in the package.json... have you force pushed to updates?\n. /cc @michaelobriena \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\n\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. can you rebase against next :smile: \n. landed as 23219b74d1b4fa8ce75aad6efe536d1dc4286c1f\n. closing for now.  please feel free to reopen if your problem was not solved\n. you can also set attributes on a surface when it is created \n. closing for now.  Please re open if you are still having trouble\n. landed as d4efa43\n. looks to me like testling is attempting to launch firefox with testling rather than phantomjs\n. I think it has to do with the default testling is using\u2026 not sure why=\n. @alexanderGugel can you rebase against next please\n. OMG OMG OMG OMG\nLANDED!!!!!\n:tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon: \n:fireworks:  :fireworks:   :fireworks:   :fireworks:   :fireworks: \n:tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon: \nd3e85881bd22bb9ef55af388c725b514c9e9b2b7\n:tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon: \n:fireworks:  :fireworks:   :fireworks:   :fireworks:   :fireworks: \n:tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon:  :tada: :balloon: \n. ruhroh trailing spaces\n. landed as 26a173d\n. landed as 3d292d5907e37fdbd69bb5e2aa4fc73615eb4302\n. /cc @redwoodfavorite \n. landed as 1100ee4\n. same as before\nwe really could use your energy over at http://famous.org/engine \nI really mean it!\n. landed as 535e9ff\n. hey jd\nsame sentiment as before... hope you understand. Please feel free to reach out to me if you have any questions or concerns\n. Closing for now.  I am assuming Robust mode will never be enabled.  There is a complete rewrite of the physics system in mixedmode.\n. /cc @wgester \n. fix landed as c31a991a11aeafde08f7291dcf0ffbf9d89b9f4c\n. landed as 2a5e1c1\n. I'm going to close this for now.  At the moment we have no intention of switching on CORS for our CDN.\n. @thebigredgeek that is a great idea.   We will be putting together a blog post and a video to support this!\n. closing for now.\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. super odd.  I'll take a look at this really soon.\n. This should be working now. We got rid of the sec folder in the published\nversion\nOn Feb 9, 2015 8:28 PM, \"Jarrod Payne\" notifications@github.com wrote:\n\nSame issue here. Can't quite figure out what's going on. Too new to jspm\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/617#issuecomment-73642621.\n. @thebigredgeek it looks to me like jspm is not set up properly.  Curious as to why you are installing famo.us via jspm vs via npm\n. closing for now. Published version to npm in common, should not be causing a problem\n. landed as 57e7d792f521025d382799004f84edb965c80176\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\n\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. landed as 0d20b92\n. hey @typ90 would you be able to sign our CLA found at http://famo.us/cla\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. @michaelobriena any movement on this?\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. double dip\n. closing for now as it seems that @talves has solved the mystery.\nIf I am mistaken please reopen\n. @wgester thoughts?\n. closing for now.  Please re open if you have an example\n. I cannot seem to reproduce on my machine... Looks like famo.us angular\nneeds a bump to me\nOn Feb 8, 2015 3:25 PM, \"michaelobriena\" notifications@github.com wrote:\n\n@TheAlphaNerd https://github.com/TheAlphaNerd @matthewtoast\nhttps://github.com/matthewtoast @zackbrown\nhttps://github.com/zackbrown\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/629#issuecomment-73439076.\n. This is not the first time I have heard about this bug\u2026 and I am still get the null bug.  I believe that the landing page is a different app than university itself.\n\n@Urigo can you try this link (directly to lesson)\n--> http://famo.us/university/lessons/#/famous-101/displaying/1\n. @jordanpapaleo can you take a look at this asap??? /cc @zackbrown \n. Closing for now, this is inconsistent and we won't be fixing before the next version of university\n. /cc @wgester \n. Closing assuming the fix landed. Please reopen if i am mistaken\n. Hey @rrrene this looks EXTREMELY interesting. Still need to figure out a thing or two with CI, but this is very promising\n. closing for now\n. lgtm\n. /cc @michaelobriena \n. Hey @omasri I'm not able to reproduce this.  We had some weirdness with university today, but it seems to be fixed on our end.  Can you do me a favor and try to reset your cache and post a screen shot if you still have the error?\nshift + cmd (or control) + r\n. Also could you please provide a link to the page causing issues\n. hey @wendyleung would you be able to sign our CLA? It is found at http://famo.us/cla\n. Thanks Wendy!\n. closing for now.  Please keep the conversation going if you are still having trouble.\n. University is not supported on mobile.  Sorry you are having trouble.  Our next version should have some degree of mobile support for reference documentation.\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive an  spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. famous.js is a concatenated version of the AMD build of famo.us (as it is written) built with r.js.  famous-global.js is a UMD wrapped version of the platform built with browserify\n. /cc @wgester \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Hey All,\nMyles here, I am a famo.us employee and the release manager of this repo.  A bit of clarity.\nThe project is most definitely not dead.  We have had most of our staff working diligently on the problem of dealing with Dom + GL in a single context, most of you know this project as \"MixedMode\".\nJust this week we have begun an internal alpha with two partnering companies who are testing out the API and seeing how things work.  We are also in the process of revamping all of our documentation and university to support the new platform.\nThe problem with treating Dom + GL in a single context has required a different approach to API, and as such you can expect to see some fairly radical changes in the next version.  We will be releasing it publicly in June at the jQuerySF conference.\nWe are in the process of designing a graceful end of life to the current api.  If you take a look at the [next branch[(https://github.com/famous/famous/tree/next) you will see that the last commit (UNIT TESTS!!!!) landed just a week ago.\nThe biggest problem we have had is that we rapidly hired quite a few engineers to support the MixedMode project, and did not have many individuals who were able to support the older version of the platform.  @michaelobriena has been pivotal in keeping 0.3.x alive, but he is also the Lead Platform Engineer on MixedMode, and balancing both projects can be very difficult.\nAs for myself, I am the release manager, and have had quite a few other responsibilities dropped on my plate such as curating jQuerySF and running famo.us labs, which has made it difficult to give the platform the same attention I had in prior months.\nI do think it is worth mentioning that we have been fairly consistent in releasing a cut of the platform around once a month, although I definitely see how that pace is frustrating.\nSo what do you have to be excited about?  In the coming months a brand new, more powerful, version of the platform will be available publicly.  We will have a decently sized engineering team that has been working at it non stop for the last 6 months, and are ready to fully support it.  The new platform is not only faster, but it is modular!!!  This is completely different from our 0.1 / 0.2 days when \"modular\" meant git modules with leaky peer / circular dependencies.  The new platform is comprised of modules that are individually unit tested, and could very well be consumed outside of the platform if you so desired (GL primitives / math!!!).\nI apologize that things have felt dark.  It is my job as head of community / developer relations to make sure that the community knows what is going on, and knows that Famo.us has their backs.  I have had so many things to do in the last few months that I have not fulfilled that obligation, and for that I am truly sorry.\nWhat I can promise you is that I spend every day in this office working for our developers.  I will personally make sure that no one is left hanging.  If you have any concerns please email me and I will find time to chat via irc / google hangouts / famo.us demo day / whatever works best. My email address is myles [at] famo.us\nI will be speaking tonight at the LA Famo.us meetup, and talking to quite a few of these concerns.  I am not sure if it is being live streamed, but I do believe it is being filmed.  I will do my best to make sure you all get a chance to see this recording, hopefully it will answer more questions\n. I can't say too much. But there is a chance this will all be sorted much\nsooner than later\nOn Mar 8, 2015 3:08 PM, \"Tony Alves\" notifications@github.com wrote:\n\n@trusktr https://github.com/trusktr @andrewreedy\nhttps://github.com/andrewreedy having another chat would just be\nanother place that Famo.us has no time to contribute in my opinion.\nAlthough, I do like the idea of Gitter.\nAnother issue is that I would rather spend my time discussing the REAL\nrelease of Famo.us (\"Mixed Mode\"). I spent a lot of time helping out on IRC\nand that ended up being a boon now that the current version will have an\nend of life. We have no access to the current mixed mode that will be\nintegrated with jQuery. Famo.us is not really developed as open source at\nthis point, so what would we discuss?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/642#issuecomment-77768147.\n. closing for now.  Expect some newsletters in the near future explaining everything, followed by a clearer more transparent road map.\n. /cc @wgester \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\n\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. @michaelobriena \n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Unfortunately I do not believe this is currently possible.  If I recall correctly undefined relies on the underlying default layout.  If you wanted to force proportionality you might want to implement a proportionalSurface that has the desired behaviour.\n/cc @michaelobriena \n. It does not exist. I was more implying that one could be implemented.\nOn Mar 3, 2015 1:51 PM, \"Aleksandar Djindjic\" notifications@github.com\nwrote:\n\nCould you allow or is there any way to ensure that surface modified by\nproportions attribute will always be square and not rectangle?\nSomething like:\nproportions: [undefined, 0.5]\nor\nproportions: [0.5, undefined]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/646.\n. That is SUPER WEIRD... we don't have one of these devices to test on AFAIK.  @michaelobriena have you heard of this ever happening before?\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\n\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. @michaelobriena ?\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. This is a great idea. I think the conversation might be better suited for the google group. Closing for now.\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Hey @kxprim can you fill out our CLA at http://famo.us/cla so we can merge this?\n. same as before... once cla is sign we can merge\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\nPlease feel free to see if we need that same easing curve over there!\n. We have not created a famous angular component for the light box in that code pen example.  In fact the example is so old it doesn't even work with the latest version of the platform.  Indeed building larger applications are difficult, and that is a problem that we are hard at work on solving internally.\nFor now though there is no silver bullet we can give you to solve your technical problem.  If you are inspired by the lightbox, we highly suggest you channel that inspiration and attempt to implement something similar.\nPlease feel free to ask any more questions you might have.\n. hey @idiotslowdown can you sign our cla at http://famo.us/cla so we can merge this?\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. Famo.us is not supported in older phone browsers.  As such we suggest using crosswalk to build for earlier models using a plugable webview.\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. The reference docs should be sitting behind our CDN layer.  I\u2019m going to check with ops on this.\nBest,\nMyles Borins\nHead of Labs and Developer Advocacy\nOn Mar 28, 2015, at 4:14 PM, Ronen Babayoff notifications@github.com wrote:\n\nhttp://famo.us/docs/reference/\n. This is due to the github DDOS... should return to normal eventually.  Sorry for the frustration.\n. This is unfortunately a won't fix for the time being.  Expect an entirely new documentation site in the future which will solve all of these problems.\n. Please sign our CLA so that we can merge this --> https://famo.us/cla\n\nAlso you will notice that this did not pass travis, please fix all style errors.\n. As well, I'm not 100% sure that this will land.  It seems odd to modify the api of flipper simply for IOS.\nthoughts @michaelobriena \n. It is super awesome that you are contributing! The style errors are pretty straight forward to fix \nsrc/views/Flipper.js\n  15:49  error  Missing semicolon            semi\n  61:1   error  Trailing spaces not allowed  no-trailing-spaces\n  64:27  error  Missing semicolon            semi\n  65:1   error  Trailing spaces not allowed  no-trailing-spaces\nBasically add two semi colons and remove some spaces.\nWhat might be harder to merge in is a fix relying on setTimeout that is platform specific.  BUT you have uncovered exactly what the problem is.  I have a feeling like @michaelobriena @marklu or @alexanderGugel would have some thoughts on this.\nNo matter the outcome please keep contributing, we wouldn't know about these problems otherwise!\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. @michaelobriena which milestone?\n. @michaelobriena can you close this?\n. Have you tried using crosswalk?  For older devices you want to use a pluggable webview\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Hey @hlandao thanks for submitting this PR!!!\nUnfortunately you didn't pass travis :(\ncan you please fix the style error --> https://travis-ci.org/Famous/famous/builds/58574752\nWe will also need you to sign the cla before we can merge anything --> http://famo.us/cla/\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. Those demos are no longer available as they were build on version 0.1 of the platform.\n. There will be a new set of examples that will  come out with MixedMode\nWe are still working towards also having larger demos, but at the moment I cannot make any promises of a timeline on that\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. Hye @omasri currently we do not have any tools for creating the render tree, perhaps that could be a fun project to work on.\n. Hey Brad,\nThanks for submitting the PR!!!\nCan you please fill out our CLA so we can start the review process\n--> http://famo.us/cla/\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. Hey @dx9 thanks for submitting this!\nWould you be able to fill out our CLA before we start the review process?\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. Are you using fastclick? Have you tried building with crosswalk?\n. @mutazmq the public version is not currently actively developed. Our resources have been put towards MixedMode a new version of the platform that will be released in conjunction with jQuerySF\n. did you do a build with crosswalk though? \n. Hey all, I'm closing this issue.  If you would like to continue the discussion please come to teh famous community-slack\nhttp://slack.famous.org\nyou can signuup at http://slack.famous.org/signup\n. hey @dcsan I'm sorry that things have not been so transparent lately, we have been heads down and not been great with letting the community know what's up.\nWe have almost all of our internal resources working full time on MixedMode so we can get it out the door. In the past I had been spending quite a bit of time keeping this version of the platform moving, albeit slowly. After taking on the responsibility of curating jQuerySF I have just not had the time to dedicate.\nI genuinely apologize for not being better at keeping this target moving. It is a very hard to decide where to put time and resources. I take the responsibility of maintaining a project like this very seriously, and want you to know that we would not have gone dark in the way we have if it wasn't necessary for us to move forward.\n. Oh.. mixed mode is out.\nhttp://github.com/famous/engine\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. please try mixed mode\nhttp://github.com/famous/engine\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. jd... just a quick note that is personally written in a sea of copy pasta.\nThank you so much for all he hard work. I am sorry that so many of your PR's are being orphaned. I only hope that you still have the motivation and inspiration to help us make mixed mode top notch.\n. The current release is definitely usable. MixedMode will be released at the jQuerySF event.\nhttp://jquerysf.com\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. We are no longer actively maintaining this repo and as such we will not be fixing this.\nThanks you for taking the time to discuss the issue, we hope you will bring the same drive and spirit to the famous engine, which can be found at --> http://github.com/famous/engine\n. please try mixed mode\nhttp://github.com/famous/engine\n. please try mixed mode\nhttp://github.com/famous/engine\n. hey all. We are closing this isssue as this repo is no longer being worked on. It might make sense to continue the discussion in the famous community slack\nhttp://slack.famous.org\nsignup --> http://slack.famous.org/signup\n. Thank you for sending this PR. We are genuinely sorry it did not make it into the repo. Getting mixed mode out the door involved moving all of our resources off of this project. As such we will not be merging any sort of enhancement or major bug fix.\nWe would love to have you join us over at the famous engine, to test the edges in a environment where we can assure you prompt response to PR's and a constant development cycle\n. http://deprecated.famous.org\n. @extempl we are no longer maintaining this repo. I highly suggest patching this file and including the replacement directly in your project.\n. Either infers a choice between two options... it is not appropriate in this instance\n. can be is appropriate here... as they can be used in other ways as well.\n. is there any change here?\n. I do not agree with this change, the space between the title and the descriptions helps readability imho\n. this seems like an unnecessary change.\n. This is incorrect, we are specifically referring to the scene graph\n. location is more specific\n. Oops... guess I missed the word either in the initial source... my bad!\n. this doesn't need to be duplicated in both devDep's and Deps\n. I have an implementation using testling that we might want to explore.  It is headless and has better stack traces\n. please leave relative path's.  This is done due to allow path resolving to be done explicitly.\n. ",
    "macsupport": "Link takes me to famous site, I login and...what does 16255 in line mean? I have to wait for that many people before I can read your documentation? What's up with that???? \n. @TheAlphaNerd , you give us a link to a page that when we click on that link it takes us to a page with:\n{\"error\":\"Not authorized\"}\nConvoluted is not the word, I'd say the process is F'd up. As part of the \"team\" I would think you would at least check the link you referred to to make sure it actually works!\n. @bastiandantilus Sorry, but signed into Github and famo.us and still can't access except I get to a page with position number. Seriously, how hard is it to put some docs online. \n. ",
    "constantx": "this queue just for documentation is super silly :)\n. ",
    "madlotus": "30 guys per hour, come on team! i can't wait 3 months wtf!\n. +1\n. +1\n. ",
    "deepakdhawan": "Cant get more ridiculous than this...feels like you are getting entry into some supersecret ' i can tell you but then i have to kill'  AREA51 kinda thing.... This is anything but opensource..\n. ",
    "ocombe": "Well.. be glade it's only 16255 @macsupport .. I registered one hour later and I'm at position 74363...\nI'm hoping that someone with access will just copy the doc and upload them somewhere accessible so we can start working right away :)\n. Yes and I signed it.\nDo you want a copy of the pdf by mail ?\n. ",
    "bondarewicz": "73992 here, this is ...\n. :+1: \n. ",
    "aitoroses": "75mil.... WTF?\n. \u0f3c \u00ba\u0644\u035f\u00ba \u0f3d\n. Same happened to me..\ntry to clone --recursive this repo:\n https://github.com/aitoroses/Famous-seed\nIt's the same but actually has all the libraries in. just npm install\n. ",
    "manuelbua": "Why i have to register to read the docs??\n. :+1:\n. Duplicate of issue #6 \n. ",
    "iabdulin": "I waited for this launch for more than a year, now I have to wait to read docs....\n. +1\n. oh yeah!!!\n. +1\n. ",
    "bastiandantilus": "https://github.com/Famous/guides works if you are signed in to github.\nOn Thu, Apr 10, 2014 at 8:26 AM, iabdulin notifications@github.com wrote:\n\nI waited for this launch for more than a year, now I have to wait to read\ndocs....\n\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/3#issuecomment-40099332\n.\n. @macsupport I said you can access the guides branch of the repo if you are signed in to github. If you check the dev folder, there are several markdown docs with guide information. There are no position counters on the github page. \n\n\n(enjoy the insight into my other hobbies)\n. osx Definitely has git shell, in fact it's mentioned in the xcode docs.\nOn Mon, May 12, 2014 at 10:04 PM, ch4se notifications@github.com wrote:\n\nOh that's unfortunate, I was having the same issue as you on my windows PC\nand using the git command prompt worked it out for me. Anyways, good luck!\nOn Mon, May 12, 2014 at 9:29 PM, Matt Tucker notifications@github.com\nwrote:\n\nI'm fairly certain there is not a git command prompt in mac. I could\ndownload a git gui, but I don't believe this wouldn't solve the issue.\nSince I am able to access git from my terminal for everything else. Seems\nmore to be an issue with shell.js\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/51#issuecomment-42915981\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/51#issuecomment-42917417\n.\n. \n",
    "weisjohn": "Such a bummer. Open the docs.\n. ",
    "KevinHoward": "I can understand the queue for the university, but the docs should live on github with the code. \nAlso, providing an arbitrary line number means nothing to the user. How about providing an ETA? We have no idea how fast the line is moving, so users are continuously hitting your server when you could just have given them a date and time.\n. https://github.com/Famous/famous/issues/18\nNot sure why the issue was closed, but here is an issue discussing the same problem.\n. ",
    "michaelobriena": "The documentation on the website is just a stylized version of the documentation in the code.  Until we get the documentation up on the site for everyone, check out the code for any particular doc related questions.\n. missclick'd\n. There is an open pull request for this. See https://github.com/Famous/views/pull/2.  This will be merged in soon.\n. @jodyheavener, if you check out  the Taasky demo on the demos section of the website, that has Backbone integration.\n. Mapping over the actual DOM events is something we do not want to do since they are different and developers may want to treat them differently.  If you need standardization, check out GenericSync which can been seen in this example.  https://github.com/Famous/examples/blob/master/src/examples/inputs/GenericSync/example.js\n. Is this still an issue using the newest version of Famo.us?\n. Closing.\n. @rakar This is still on our radar and something we think is incredibly useful.  The current abstractions of Famo.us make this a difficult problem but as we explore mixed mode rendering it seems that we should be able to provide a solution to this.\n. We will be releasing a new version of scrollview soon that will fix this.  Leaving open until we merge.\n. @okossa right now we are not able to do webgl rendering.  This is a feature that will be coming down the road.\n. @kof, Hopefully this will clear things up a bit.\n1) Every surface manages it's own DOM element. We manage a pool of DOM elements so that we only create new DOM elements if we don't have any free'd up ones in our pool.  The idea is that creating DOM elements is a non trivially expensive operation so we save performance by reusing the DOM elements of Surfaces that are no longer being rendered.  Check out the ElementAllocator if you are interested in seeing the details and hopefully the next answer will clear some of it up.\n2) This already occurs.  The margin property defines the area in which the renderables the Scrollview manages are actually part of the DOM.  When you have renderables, outside of the margin, they are cleaned up automatically and the DOM elements that were used are freed up for reuse.  For apps where you must scroll quickly, having a larger margin will ensure that the DOM elements are in the DOM and painted when they come into the view-port and for apps with slower scrolling or larger sized renderables, you can reduce the margin.\n3) Offset is already part of Scrollview.  We are coming out with a version of Scrollview with a friendlier API to add features such as finding the absolute position of the Scrollview.  We hope to release a new version of Scrollview soon.\nLet me know if this helps and if you have any further questions. Thanks!\n. Yea, the sequenceFrom function of the scrollview can take in an array of any type of renderables.  Your array can be Surfaces, ImageSurfaces, Views (that have a size), RenderNodes,  ContainerSurfaces, etc.\n. Kind of, but you don't need a ContainerSurface for this.  If you were to have a Scrollview with a ContainerSurface that has many Surfaces inside of it, we can't reuse those Surfaces until the entire ContainerSurface is outside the Scrollviews margin.  Just have the Scrollview sequence over the collection of Surfaces.\nThe margin property of the Scrollview is what determines when the DOM elements assigned to the various Surfaces are freed up for reuse.  When a renderable is outside of the margin, we free up that DOM element and it is reused.\nWhen it comes back into the viewport, we see if we have any free DOM nodes to use, if we do we use it, if not we make a new one.  We then set the innerHTML (or appendChild) to that DOM node with the Surfaces associated content.\nAll in all, we get to reuse the DOM nodes the different types of Surfaces manages but can't reuse the inner content.\nSorry if that was overly confusing.\n. Not every time it is rendered but every time it goes from not being rendered to being rendered.  But yes, only the DOM elements the Surface (of any type) manages is part of the reusable pool, not the content.\n. Yup, correct.\nThe only thing worth noting is that having too many Surfaces is bad since we have to reset the matrix3D property on all Surfaces and overuse can hurt performance.  Anything that does not animate independently should usually be a single Surface.  The performance loss of setting the innerHTML with a large amount of content at deploy time is much much less than overusing Surfaces.\nTo your second question, try taking a look at the \"setOutputFunction\" for Scrollview that essentially changes how the Scrollview lays out it's collection of renderables.\n. Closing as this is stale.\n. Looking into this.\n. @JonnyBGod I have been unable to reproduce this bug.  Can you throw the code into a gist or somewhere public so I can see?\n. Closing as it does not seem to be an issue.\n. So this is by design.  The Surface will be garbage collected if all references are removed in your code but the DOM element that is created gets pooled for reuse.  This greatly reduces the amount of DOM element creations we have to do.\nI will leave this open for a bit but this is not a bug.\n. That would mean you are still holding a reference in your implementation.  Entity is just a datastore for DOM nodes.\n. Could you post a gist or repo I could look at?\n. @TDonselaar If you use RenderController you should get the surface reuse for free instead of having to manage the unregistering yourself.\nThe other way you could do this is manage a pool yourself and just be doing setContent and setOptions on Surfaces when you need to reuse them.\n. I think everything to be said has been said on the topic.  As Mark mentioned, there is work in place where surfaces will have the final transform and thus will be able to understand whether they are on the screen or not.\nClosing.\n. @jacksenechal development on this repository stopped many months ago.  If you go to github.com/Famous/engine you can see the newer rendering engine.\nThat said, this is not a feature we implemented because we feel the use cases are really small and there are better uses of our time.\n. @speigg We are in the process of deprecating parts of the eventing system.  Sorry this is still an issue but we are focusing on other areas of the platform for now.\n. I have this on a branch already.  Will issue a pull request with it. \n. Corresponding pull request https://github.com/Famous/famous/pull/235\n. It is possible to slurp DOM nodes and set them as the content of a Surface.  There is no direct conversion to Scrollview or other higher order views but this is a matter of implementation instead of feasibility.  Let us know if you have any questions and we can try and point you to some examples.  Thanks!\nClosing.\n. This is an implementation issue, not a bug.  I believe I have worked with him on this to get passed the issue.\n. It looks like newer versions of chrome have fixed this. Closing.\n. @shupac \n. There are optimizations on the way that will account for this.\n. @kof I agree, I should not have closed this issue in particular.  I apologize.  This is still an issue with the design of the platform.\n. We are working on this in mixed mode.  This is essentially gutting our entire core composition & layout layers.\nThings that get killed:\nEntity\nSpec Parser\nThings that will either change a lot or have its functionality and purpose moved to other modules:\nContext\nRenderNode\nSurface\nrender/commit\n& more\nBecause this is such a huge overhaul, we need to take the time to investigate how we can use our changes to improve the API.  We are really trying to codify our patterns and remove the bad habits we started of subclassing our base classes, overuse of eventing, and solving every problem through extra state.\n. @StephanBijzitter I think having blog posts is a really good idea.\nHopefully some pieces will start rolling over into the current platform so some of the intent will become clear.  We really do value the community's work on the project so far and don't want to keep you in the dark.\n. This is not something we want in the platform as the String concatenation / parsing can get expensive.\n. This was fixed in sha 9947c40aba26af3aa8ed4196d13ab682587b6b23.\n. Coming very soon.\n. This should fix the issue.  https://github.com/Famous/famous/pull/202\n. Closing since we have not been able to get in contact with @Carlosriverae for over a month.  @Carlosriverae please comment with a link to your code if you still are having issues and we can try and help you through these.  Thanks!\n. @wgester @dmvaldman I would think this is probably the deallocation flicker.\n. Closing.\n. I think that it clouds the purpose of the Modifier.  The Modifier is not the scene graph builder but essentially the transform, size, opacity controller.\nWhile I definitely want the API to be as digestible as possible, I still want the components to only be responsible for their designed behavior.  Breaking that rule leads to cases where everything becomes heavier and design intention is hard to figure out from the source.\nI will leave this open for a bit as I would love to hear other people's opinions.  Just wanted to throw mine in as well.  Thanks for the suggestions, we always like hearing the pain points of using the platform.\n. I agree that using \"new\" everywhere in the framework is a turn off and that we can be using Backbone-y concepts to extend core components.  There will probably be more of this as the framework matures.\nThis however is somewhat tangential from the idea of adding directly to Modifiers.  I think that fact that we obfuscate the interactions with RenderNode has lead to confusion but it does not get around the fact the Modifiers are not scene graph building tools.\n@trusktr Thanks for the suggestion but I think there are better ways of clearing up the concepts of RenderNode instead of trying to give Modifiers functionality it should not have.  Thanks!\n. Great call.  Let me know if you want dibs on pull request or if we should start working on this.\n. @rhalff We actually tackled this issue in this pull request, https://github.com/Famous/famous/pull/228,  by overriding the functionality of Surface and copying over only that which was needed.\nWe toyed with the idea of doing \n```\nVideoSurface.prototype.setVideoOptions = function setVideoOptions(options) {\n   if (options.autoplay) this.options.autoplay = options.autoplay;\nSurface.prototype.setOptions.call(this, options);\n};\n```\nBut because VideoSurface does not have use for options.content, we decided against it.  I do like that pattern more but it felt strange leaving in logic we knew served no purpose.\nThoughts on this?\n. @trusktr I think that this is is spot on in terms of where we come short but I think we are coming up short on purpose if that makes any sense.\nScene is designed as a way to design a scene graph, not write an entire application declaratively.  As an organization I think that we have made a conscious decision to favor the imperative over the declarative and this notion is pretty prevalent throughout the platform.\nI think that what you proposed is indeed a great asset to something like famous-angular but may not be the style that we are trying to endorse in the core platform.\n@marklu, @DnMllr  care to comment on the matter as this seems to be a philosophical matter over a technical one.\n. @trusktr Good question.  We are looking for pull requests to be made to Famous/famous.  The other repositories are in the process of being deprecated but will remain around for a bit so we don't break peoples projects.\n. I think that we need to tackle these apart from famous-angular.  While we maintain a close relationship with the maintainers of famous-angular I think we both (Famous & Thomas Street) would agree that Famous should not be tailoring its development for integration purposes with another framework.  That being said, there can be forks that can be maintained to keep the marriage stable but I do not see us abandoning something such as our taste for imperative coding vs declarative for integration sake.\n. Good call.  Definitely a bug, will get fixed in the coming release(s).\n. @redwoodfavorite can you look into this.\n. @redwoodfavorite please implement this as it seems to be a very useful feature.\n@travis5555 thanks for the idea!\n. We need this to be on the famous-root class as Famous can be targeted to a precomposing DOM element and does not need to be in control of the whole body.  I agree that the initialization should not fail on the absence of  the body and will investigate what happened to the code that used to account for this.\n. @TheAlphaNerd I will be on IRC today and can we take a look through the history to see where and when this came from.  It seems like it broke some prior functionality we had.  The flattening has confused my notion of what the true history is.\n. I think you can solve your issue by turning appMode off.\nvar Engine = require('famous/core/Engine');\nEngine.setOptions({appMode: false});\nLet me know if this works for you.\nI will talk to Mark when he gets in today.\n. @speigg we should have a fix in the next day or two.\n. @Dnmllr is looking into this.\n. Just to note, @wgester 's pull request has this functionality.\n. @wgester's version of scrollview handles this.\n. @AdamCmiel please look into this.\n. @MajorBreakfast  Can you provide an example repository with the bug?  Thanks!\n. This was a performance hack to help browser layer compositing but this looks like it now is causing issues so I think this should be merged.  Thanks @marklu @ftripier for the discussions and @MajorBreakfast for bringing this issue up.\n@TheAlphaNerd merge.\n. @marklu I agree that developers could theoretically handle this themselves but is there really much of a downside in including this functionality?\n@timjchin could you maybe provide a concrete example where having this functionality would save a developer some hassle?\n. @timjchin I think Will's scrollview changes introduced size change broadcasting.\n. Overriding the render function essentially means there is no API, it is just rewriting the component.  I think that requiring people to understand the rendering pipeline well enough to where they feel comfortable overriding key functions is a huge turn off for users.\nWe have seen time and time again people want to remove things from the scene graph and when are taught to build custom render functions, are always confused as to why this is not systemized.  I think this may be an area where a serious boost to usability/adoptability outweighs abstraction purity or at the very least means we need to revisit the abstraction.\n. @alexanderGugel DrClick references that flag in the custom render function so he stops the Engine from writing to it every frame, which is the optimization he is looking for.\n. After talking with Tim we are going to close this.\n. This is still a large issue as our EventMapper and Arbiter essentially broken.  This issue should be kept open but in regards to this pull request I think the fix will be deeper than this.\n. @marklu\n. I don't think this is something that we want to support in the base GridLayout class as it clutters the reflow logic and makes many more checks every commit.  I think it is a really useful feature but am hesitant about including it as it seems very particular to application logic.  @DnMllr thoughts?\n. Right now we don't have great support for useful subclasses of our existing base.  We like to keep our core components as lean as possible so that other developers don't incur any unneeded operations.  Something like what you wrote up is great and very useful, but it does not fall in line with the most basic notion of \"What is a grid?\".  I think that this is a fork that you should continue to maintain and hopefully we can find avenues to support/publicize community members that have made progress in regards to functionality. \n. I don't consider this to be an issue.  While I think that is a useful idea for many developers I don't think that it is something we want in the base GridLayout class.  For that I encourage you to maintain this in your fork of Famous but I do not believe it is something we want to include at this time.\nClosing for now.\n. This seems like a good idea but I would like to figure out the status of https://github.com/Famous/famous/pull/144 before truly investigating since it will probably shape our opinion on the matter.  Thanks for bringing this up!\n. @DnMllr  is looking into the script in head issues but I am pretty sure he is on board with this fix.  I will let him take it from here.\n. @alexanderGugel Great idea, thanks for the pull request!  @TheAlphaNerd I think this can be pulled in.\n. That being said @alexanderGugel your function name is still \"removeClass\".  Can you change that to toggleClass before we merge?\n. I like the idea of having the support for multiple forces but if you passed in a single body then you should apply the force and return, not put it into an array and hit the for loop with it.  Also, there is no need for line 46, just have targets[i].applyForce(this.force).  Other than those small suggestions I think this is a great idea.  Thanks @dai-shi.\nCan you explain where exactly the bug comes into play?  It seems as though you are doing the exact same logic but just allowing for multiple bodies.  Sorry, I have limited experience with the physics codebase.\nThanks again.\n. @AdamCmiel can you take this over as it is physics related?\n. This seems like a good idea.  I will try and perf this today.\n. This looked fine when I looked a few weeks ago.  We are getting ready to release 0.3.0 and would like to wait on merging this until that lands.\n. I can get on board with this.\n. This is to provide backwards compatibility.  Align and origin used to be wrapped up together under the guise of origin.  When we introduced align, in order to not break code so early on for people, we decided that if no align was specified to just have the align inherit the same value as origin.\nI think that we have sufficiently satisfied a window for people to work with the new concept of align and is probably time for align to have a default of [0, 0] regardless of origin.  @marklu what are your thoughts?\n. @dai-shi you misspelled \"from\" on line 110 so this will not work.\nAlso, can you provide an example as to where this has become and issue for you?  Thanks!\n. Cool, thanks for the explanation.  I am a bit out of practice with the physics engine myself so would have struggled with finding a useful test case.   @AdamCmiel do you have time to look into this while I am out of the office?\n. Will has a fix in his new Scrollview branch\n. specific commit 530397fc50be83a24807edf36e2f2f3cbb982cba\n. I don't think moving actionQueue out of Transitionable really has much tangible benefit.\nI think what Tim said is pretty stop on, there is no reason to make people manage the actionQueue for you when you can have the behavior for free.\n. I think this is great personally.  @DnMllr check it out please.\n@timjchin  can you also make sure that this applies to the toggleClass function that was just included in pull request earlier today?\n. I am on board with this. @DnMllr please take a look today if you can.\n. @shupac Can you take a look?\n. Can you provide an example where this is not taken care of for you?  I think that we cover most cases but please let us know if we made a mistake.  Thanks!\n. The context in commit is the parent context, not the Context created by the Engine.\nAlso, this._size should never be NaN unless it was wrongly set by the user, as is in the example you included.\nI am not understanding the FlexibleLayout case.  If the user sets all of the ratios to 0 then there is no way to figure out how large to be.  On a reset of the ratios, the Flexiblelayout will reflow.\nI don't see anything wrong with our current logic.\n. This code works with the reverted commit.\n. @antmanler How about this?\nhttps://github.com/michaelobriena/famous/tree/bug-surfaceSizeAlignAdjustedMatrix\n. Yes\n. Closing\n. AHHHH, gimme a day or two to read all of this.  This is a big one.\n. There are even newer changes on this.  Better eventing, bug fixes, and most importantly, a notion of absolute position.\n. Transform is an independent concept from size.  Transform is for rotation, scale, skew, and translation in 3D space and size is the two dimensional plane that the Surface represents.  @antmanler why do you need this?\n. Can you provide an example?  I don't think that this is an issue.\n. We are looking into this.  I think you are right that this is an issue but this pull request would be invalidating the transform every frame when the parent size is not equal to the defined size.  Thanks for bringing this up!\n. this.size is defined size and this._size is rendered size so they will very likely not be the same.  Can you provide an example that demonstrates your issue?\n. Yup, good to go.  Thanks @travis5555!\n. @pkiers Any chance you have a demo ready for testing?\n. @pkiers This is a good change.  Thanks.\n. @marklu do you mind taking a look at this again since you recommended specific changes.\n. @TheAlphaNerd I think this is all set.\n. @TheAlphaNerd merge this.  Thanks @pkiers \n. At first glance it looks like a good idea.  @pkiers Do you happen to have a demo I can use to test?\n. In terms of functionality this looks great.  A few things I want to bring up.\nDo we need this for touch events also or just mouse?\nCan you export a function or singleton that allows the user to programmatically change the clickThreshold?\n@timjchin Do you see any potential problems with this?\n. @wgester Can you look at this?  I like the idea but want to make sure this is the implementation we want.\n. @wgester can you submit your fix as a new pull request?\n. I will test but this looks like it is a good idea.  Thanks @pkiers!\n. @wgester is this something you can account for in your version of scrollview?\n. This is a good idea.  I am very for this.  I see nothing wrong with merging this as is.\n. If the CLA was signed.\n. This is true.  Nice catch.\n. Why is the only for height?\n. Glad you found the issue.  I will go over everything tomorrow with you.\n. Hope to have a pull request in with the full fix by end of day today.\n. Small point but there is no need to initialize usePrefix to true on line 17.  Just instantiate it.   @DnMllr can you confirm that this is the fix we want for ElementOutput.\n. This seems to be a bit deeper on second look.  I think we should have an initialization function that sets the _setMatrix and _setOrigin functions on DOMContentLoaded.\n. I would rather defer to Mark on this as I have spent little time with FastClick and figuring out the best way to polyfill this.\n@marklu if you could comment on this that would be great.\n. @marklu @TheAlphaNerd this is more of a product question than a technical one.  Will defer to you guys on this.\n. I agree.  This is silly and wrong.\nHow about something along the lines of?\n```\n/\n * Look up value by key\n * @method get\n \n * @param {string} key key\n * @return {Object} associated object\n /\nOptionsManager.prototype.get = function get(key) {\n    return key ? this._value[key] || this._value;\n};\n/*\n * Alias for get\n * @method getOptions\n /\nOptionsManager.prototype.getOptions = OptionsManager.prototype.get;\n```\nAnd totally removing value.\n. I don't think that getOptions is currently implemented that way.  Consider the example below.\n```\nvar test = new OptionsManager({\n    a: true,\n    b: {\n        c: false\n    }\n});\nconsole.log(test.getOptions()); // undefined \nconsole.log(test.value()); //Object {a: true, b: Object}\n```\nBecause nothing was passed into get options it is looking up the key \"undefined\" and therefore not finding anything.\nI am a fan of having both the singular option and all options be a single function instead of two separate functions where the existence of the param decides which to return.  While I agree that semantically it makes sense, in implementation it saves you from conditionally calling functions based on param values which I think is a pretty useful feature.  Additionally it is one less function to understand the difference of.  Willing to be convinced otherwise though.\n. Writing up a pull request now @speigg.\n. @speigg https://github.com/Famous/famous/pull/258\n. I decided to leave out a setOptionsManager mixin for now.  But am going to keep working to see what that would feel like working with.  I have the sense I will like it but wanted to make sure this was in line with what other people were thinking.\n. The only thing I can see against it is when you have subviews and you need to parse options in order to figure out which options to pass downwards ie Scrollview.  That would require an overwrite of getOptions and would then promote two different ways of handling getOptions in the framework.  Worth checking out though.\n. We wanted Scrollviews to respond the same as normal pages which is why MouseSync is not a default in Scrollview.  I think the click / drag issue has been solved but feel free to reopen if that is not the case.\n. Yes, definitely a better default.  @TheAlphaNerd merge whenever.  Thanks @mmbfreitas!\n. There is no case in which we want people getting all of the entities.\n. I think for now this is what we want.  It keeps the entities private and give the flexibility to add the garbage collection, entity grouping, and other features we may want to add without changes to the API.\n. Hey, thanks for filing this.  I think this may be along the same lines as https://github.com/Famous/famous/pull/144.  Can you see if this fixes your issue?\nvar Engine = require('famous/core/Engine');\nEngine.setOptions({appMode: false});\n. @mmbfreitas  If this is the same issue, can we close this and move all discussion to that thread?\n. @timjchin will look on monday.\n. @timjchin, thanks for talking about this issue with me this morning.  Based on our talk we can either\n- Defaultly include them in TweenTransition as the other curves are.  Pros: you don't have to require anything in.  Cons: you have allocated memory for stuff you may never use.\n- Leave as a separate file that performs the mass registration.  Pros and cons flip flopped and negated from above.\nI would love to get some other peoples opinions on the matter since this is pretty much just a usability issue.\n. I have come around and think I agree with @contra.  While this is a convenience, it seems to be pretty minimal benefit for complicating the registration.\nI think convenience features like this should have a home on our Github but I don't know if that it is in this repo.\n@wgester what are your thoughts?\n. Thanks! These are needed.  @TheAlphaNerd I don't know if he has the CLA signed but this can be merged as soon as we have that.\n. This is coming in the next release.\n. This looks good.  @ftripier can you take a look?\n. I think thats a merge @TheAlphaNerd .\n. Yup, they are fairly similar.  \nWhile it is actually pretty powerful, I think we want to put more effort into designing a real data layer before saying we have a solution since this code was really only designed for options patching.\n. How do you suggest we educate people it is more than just for options.\n. I do think that making OptionsManager is in need with some changes and will probably be getting a rename down the line.  It is named to reflect what our initial use case was for it.  We plan on building out the data side of the platform at some point so expect to see something when that effort is underway.\n. @wgester thanks for submitting this.  After talking about this with you yesterday I think this is all of the changes we need to make but let's make some good examples to make sure this is the case.\n. @redwoodfavorite @arkadyp I have tested this and it works but since this is a breaking change I would like more eyes on this.  Thanks.\n. @TheAlphaNerd Note this is a breaking API change.\n. The link was moved to a section in the \"Help\" section.  Sorry for the inconvenience, this may get reverted.\n. @StephanBijzitter thanks for the suggestion.  I am going to close this as it is already filed here:\nhttps://github.com/Famous/famous/issues/89\nI have a fix that I will submit a pull request with this week.\n. For github learning maybe try, https://try.github.io/levels/1/challenges/1.\nThanks!\n. @ftripier do you have your test cases somewhere I can pull down?\n. @TheAlphaNerd looks good.\n. Can you look into this pull request on your repo @wgester?  It looks like an issue.\nhttps://github.com/wgester/famous/pull/1\n. FlexibleLayout will only call getSize on true sized elements.  This introduces events on true size changes so once merged we can update FlexibleLayout to respond to these events and reflow itself.\n. @wgester nice work on this, a definite improvement.  I think we can go forward with this once we get other set of eyes on this.  I know @ftripier already reviewed this so if @DnMllr can sign off I think we go ahead.\n. - Calculate size needs to handle true size better\n- scroll container event input bugged\n- we don't need have groupscroll pipes every setOptions\n  - use optionsManager events to do the piping\n- possibly get rid of sizeForDir\n- delete normalizeState\n- make index change even when touch down\n- add setPosition with a transition\n. I agree, throwing an error is probably the best thing to do.  Will update in a bit.\n. @wgester.  I added the error.  Take a look when you can.\n. @ftripier @DnMllr @wgester Can one of you please take a look?  Thanks.\n. Just resubmitted with linting fixes.  Let's see.\n. @TheAlphaNerd Note this is API breaking.\n. The suggestions are now reflected in the latest commit.\n. Yes\n. I have a fix for this somewhere.  I will post it when I find it.\n. I cannot find it.\n. This is definitely possible though without any changes.\n. This is a bug with Safari on ipad.  I guess windows phone shares a similar bug.\nhttp://stackoverflow.com/questions/19012135/ios-7-ipad-safari-landscape-innerheight-outerheight-layout-issue\n. Quite a bummer they don't have the correct size of their own screen.\n. It might be something we can fix but we are probably not going to get to this for a bit.  Sorry.\n. For sure. \nElementOutput does not and should not have logic for this.size as it is strictly a construct of Surface. If you need something other than Surface you should be extending ElementOutput and implementing the sizing API that you desire. The fact that you can make a Surface 100x100 by options or setSize is the abstraction that Surface affords you.\nI think this is a really grey line and until more things inherit from ElementOutput, the breaking apart of the logic seems overkill. There is definite room for improvement but I think overall each of their roles are what the should be for the time being.\nI do think there is a way (and really want) to move all DOM touches to ElementOutput, we just need to figure out a way for children of ElementOutput to have their APIs translate input to usable data in ElementOutput's commit that is as generic as possible.\nThanks for being patient with us @contra.  I know this is pretty blocking for you and we appreciate the ideas you are throwing out there.\n. Understood.  I think my main point is that the size API for Surface is beyond the responsibility of ElementOutput.  Because of this there is no way for ElementOutput to write the correct size to the DOM and means that Surface needs to do this.  ElementOutput's commit could be written to be passed the size as part of the expected spec but that is dirty.\n. The lines you mentioned moving from Surface to ElementOutput, https://github.com/Famous/famous/blob/master/core/Surface.js#L306-L307 , would cause any subclass besides Surface to break because ElementOutput does not have a .size property.  Also, again, it means that ElementOutput now has an understanding of what \"true\" size means, something that it should have no idea about.\nWhat is stopping you from subclassing ElementOutput the same way Surface does?\n@marklu Feel free to drop your opinion in here as you created ElementOutput and I may be off the mark with my understanding of your intentions.\n. @contra Is this still an issue?  I am not seeing this anymore.  The code below keeps the Surface at a defined size.\n```\nvar mainContext = Engine.createContext();\nvar surface = new Surface({\n  properties: {\n    backgroundColor: 'black'\n  }\n});\nmainContext.add(surface);\n```\n. @contra.  I just tests this and it looks like it is not an issue for me either.  Tim and I went over this after we talked last week and could only reproduce when it was in a SequentialLayout but not in the context alone.  I will keep playing around to see if I can find a case.  Thanks!\n. @timjchin Do you have a case where this breaks outside of the SequentialLayout example we made?\n. No it was not moved.  ElementOutput does not and should not have logic for this.size as it is strictly a construct of Surface.  If you need something other than Surface you should be extending ElementOutput and implementing the sizing API that you desire.  The fact that you can make a Surface 100x100 by options or setSize is the abstraction that Surface affords you.\nI think this is a really grey line and until more things inherit from ElementOutput, the breaking apart of the logic seems overkill.  There is definite room for improvement but I think overall each of their roles are what the should be for the time being.\nI am closing this as this is no longer about the infinite expanding bug that it was opened for.  Feel free to open a new issue if you wish to continue the discussion on the responsibilities of Surface/ElementOutput.\n. The issue for this discussion continues here: https://github.com/Famous/famous/issues/247\n. @shupac \n. Closing as DesktopEmulation should solve this.  Will reopen if needed.\n. @TheAlphaNerd While the final states are not ever used I think this is a good feature that makes sense with the idea of halting.  I am onboard with merging this.  @timjchin Thoughts?\n. The Transitionable is passed in as the first argument to the functions used for the corresponding Modifier. It is the progress represented 0 - 1.\n``` js\nvar rc = new RenderController();\nrc.inTransformFrom(function(progress) {\n    console.log(progress);\n});\nrc.show(new Surface(), {\n    duration: 5000,\n    curve: 'linear'\n});\nmainContext.add(rc);\n```\nClosing this as it is best suited to have this work without the extra eventing overhead and left to the Transitionables.\n. I agree.  This is a must add feature.\n. @AdamCmiel can you take a look?\n. @marklu @ftripier @DnMllr @wgester @timjchin \nMind voicing some opinions?\n. Pull request made in response to https://github.com/Famous/famous/issues/210\n. @timjchin what you don't like that?\n. There is a \"get\" alias so that is available if you want the plurality of the code to be correct.\n. @janober This is working fine for me in the following browsers\nChromium: 39.0.2137.0\nChrome:  36.0.1985.143\nChrome Canary: 39.0.2136.0\nSafari:  7.0.3 \nFirefox: 31.0\nFirefox Nightly: 34.0a1\nCan someone else spot check this?  Sorry I can't be of more help.\n. @janober I am on osx 10.9.2\n. @talves Moving the count to 40 expected the results I wanted.  @janober if you run into this again feel free to reopen.  Thanks!\n. This should really be for @wgester since he redid the scrollview.\n. No issues from me.\n. commit da96d5a5b4da5bf973d29718beed0f6832d1b183\n. I like this change, should provide better consistency in velocity numbers.  I am going to play around with it but at first glance I am down.\n. This issue has to do with positive and negative zero in Javascript for floating point arithmetic.\nhttp://stackoverflow.com/questions/7223359/are-0-and-0-the-same\n. Good call.  Will make a pass to fix all of these.  Sorry!\n. fixed https://github.com/Famous/famous/pull/299/files\n. I think that the blurry text at rest is a more serious issue than a performance degradation.  Until non whole numbers can render crisp text I think we need this.\n. @arkadyp This looks good to me.\n@ftripier @wgester @DnMllr can one of you take a look at this also?\n. I like it.  Thanks @arkadyp!\n. We are exploring native scrollview as well.  Check out https://github.com/redwoodfavorite/famous/tree/native-scrollview.\nI think there are things native scrolling has that we can never touch, mostly on the accessibility side but I would disagree that there is not room for improvement or at the very least exploration.\nIs there a specific issue we would like to address in this thread?\n. Great idea.\n. Looking into this.\n. Conversation is thriving in the pull request.  https://github.com/Famous/famous/pull/290\n. Hope to get to this tomorrow or Wednesday.\n. @bguiz definitely a bug, thanks for finding this.  Including @wgester on this as he made changes to ViewSequence for the new release of scrollview.  These can't merge automatically so he is looking into taking your idea and making it work with out 0.3 release candidate.\n. @bguiz Will you have time to get to this today?  We are trying to release tomorrow and if you can't get to this we can pull in what you have and then commit Will's fix in after.\n. Yup.  Merge.\n. Looking into this.\n. Fixed in this commit https://github.com/Famous/famous/pull/304\n. I like the idea of this a lot.  I would need to play around for a bit to see the best way to do it but it seems pretty doable given the way Transitionables are currently implemented.  Let's talk tomorrow @redwoodfavorite.\n. @TheAlphaNerd This is needed.  Merge this.\n. @raix This is expected behavior.  When Famo.us first launched, we conflated the idea of origin and align into origin only.  When we separated it into two concepts, we provided the following rule to the framework to provide temporary backwards compatibility.\nIf no align is provided but origin was, use the origin's value as the aligns value.\nNow that we have had align for 3+ months and we are removing the confusing default behavior.\nFor reference, align is where on my parent does my origin lie and origin is where on myself is my origin.\n. Closing as this is intended.\n. js\ncontext.add(new Modifier({\n        origin: [.5, .5],\n        align: [.5, .5]\n    })).add(renderController);\n. Merge.\n. @TheAlphaNerd merge\n. @timjchin take a look please.\n. @TheAlphaNerd merge\n. Yup\n. Can you provide an example where splice is broken?\n. This is coming in 0.3.  Try using https://github.com/famous/famous/tree/v0.3.0-alpha to have that work.\n. @timjchin can you take a look?\n. @hwd91c can you file a separate issue for this.\n. @StephanBijzitter \nViewSequence changes look good.  Can you remove the tags <tt>-1</tt> from the comment?\nCachedMap looks god except \"memoized\" is the word we want, not memorized.\nNot a fan of the Transitionable changes\nLightbox changes are good\nI need to think a bit more about if that is what we want the defaults for x-direction scrollviews to be\n. @TheAlphaNerd care to comment on the commit structure?\nIn terms of code, thanks for making the changes!  I agree with you on Scrollview and I think that I have come around on the Transitionable changes you had made (sorry).  Feel free to put that back in or file a separate pull request for it.\n. I am happy with this. @wgester can you take a look?\n. @TheAlphaNerd Merge\n. If you are ok with the commit structure\n. Have you pulled recently?  We caught this and fixed it.  It should be merged into the v0.3.0-alpha branch.  Let me know if this is still an issue.\n. The issue was the getEnergy functions for springs, snap, wall was changed in the physics engine to only accept arrays.  We had to change the transitions to account for this API change.\n. Commit e77447c08bec403fc94eda286f01b7185eec3744\n. @matthewtoast can you take a look?\n. @TheAlphaNerd merge.  Thanks for doing this.\n. @AdamCmiel Please take a look.\n. Noting the fix looks good\n. Nevermind, I was very wrong, misread your code, sorry.  Looking into this.\n. @kof This might be a stale feature.  I will ask around.  Thanks for the heads up.\n. Yes after talking with Felix this hack seems to not matter anymore.\n. Hotfix at some point.\n. This now matters because of the Safari ios8 implementation.\n. It will stop rendering things that are only partially occluded.\n. @StephanBijzitter Looking into this.\n. This would indeed be a great feature.  We are working on some more immediate stuff right now but hope to get to features like this sooner rather than later.\n. @suprMax Development on this repository has stopped.  All work is being done over on https://github.com/Famous/engine.\nOur DOMElement supports any tag type so you can create an SVG element if you would like.  If you would want more features to make it easier feel free to file an issue and we can take a look at how to implement the features you would need.\n. The Flexible Layout will reflow if:\n- The parent size in the direction the layout is flowing changes\n- The ratios were changed\n- The ratios are in the process of changing\n- The direction of the layout changed\n- Any renderable whose corresponding ratio is \"true\", has changed size in the direction the layout is flowing\nIf your FelixibleLayout is inheriting the window size then you will get reflowed.\n. I was referring to FlexibleLayout since that is the pull request you mentioned.  If you are talking about Scrollview reflowing, then you are right as Surface does not cache parent size.  We have a fix but are looking into whether or not this will be in the release (tomorrow we hope) or a hotfix after.\n. Anyone really.  @marklu any comments on this?\nThe only issue is what is shown on this site http://www.quirksmode.org/mobile/tableViewport_desktop.html .  In IE 8-10, they don't have a way to get the size that includes padding and border so offsetWidth and height are just mapped to client width and height, which is just completely wrong.  So, if people are using padding/border on a true sized element and that size is important for layout (ie Scrollvie, SequentialLayout, FlexibleLayout) then you will get different results on those browsers.  I think this is fine as not respecting padding and border in current browsers is a much more serious problem.  This is not something that we could shim either without a performance hit.\n. This looks good for the most part.  Just want to make sure that in repulsion you have to use a \"for in\" loop.  That is the only thing that caught my eye otherwise if it has been tested I am cool merging.\nThanks @wgester.\n. @ftripier can you take a look?\n. Caching Transforms is one of the features we are looking forward to incorporate the most.  I think the current massive SpecParser approach prohibits such a feature from being implemented elegantly.  As WebGL support comes into the platform this will be at the forefront of our design decisions.\n. Video Surface is a change I like.\nSequentialLayout needs to be changed a bit, what you have would prevent SequentialLayout from being subclassed with different DEFAULT_OPTIONS.  I think it should be what View.js has.\njs\nthis.options = Utility.clone(this.constructor.DEFAULT_OPTIONS || SequentialLayout.DEFAULT_OPTIONS);\n. @StephanBijzitter Thanks for the help.\n. @StephanBijzitter looks good thanks.  @TheAlphaNerd merge if the commit structure is ok.\n. Nice catch.  We will look into this and let you know how we want to proceed.\n. Rotation animation is accomplished via Transitionables or outside state.\njs\nvar transitionable = new Transitionable(0);\nvar modifier = new Modifier({\n  transform: transitionable\n});\ntransitionable.set(Math.PI * 2, {duration: 2000, curve: linear});\n. Closing as this is not a bug.  We believe that Modifiers are the processors of state and not the managers of it.\n. @PEM-- thanks for this, I think I skipped over the math folder by mistake.  Thanks.\n@TheAlphaNerd merge.\n. @PEM-- Thanks.  @TheAlphaNerd merge if he has signed the CLA.\n. @PEM-- Thanks.  @TheAlphaNerd Merge.\n. @PEM-- That is true.  This is much more clear without looking at the code.  @TheAlphaNerd merge if CLA signed.\n. @timjchin can you please comment on this?\n. @timjchin is this still something we want to consider?\n. @trusktr thanks for the PR.  I get the intention of this but I think it is of marginal utility for a lot of extra api surface area.  Some of the mixed mode stuff will eliminate the need for this so I think closing this for now is appropriate.  Thanks again for the PR.\n. Unfortunately that is a demo from an external company.  I will ask around to see if it is open source but if I remember correctly, they are not.\n. Thanks for filing this.  Just a matter of personal taste but I would probably prefer \njs\ncontent: {\n  on: '',\n  off: ''\n}\nThoughts?  @StephanBijzitter thanks for working on this.\n. @trobbertze This is sad to hear as we thought that this had been fixed in webkit.  Some version of webkit stop respecting preserve3d once you get 4 DOM layers deep (normally happens when you use ContainerSurfaces).  Unfortunately there is nothing we can do about this but will most likely we fixed in browser patches.\n. Yes, writing up a smaller example now that doesn't use famous at all for clarity.\n. https://code.google.com/p/chromium/issues/detail?id=421946&thanks=421946&ts=1412875379\n. thanks @shupac!  Looks good. @TheAlphaNerd merge.\n. @sabithpocker. Woops, nice catch.  You mispelled \"front\" but otherwise this is a good improvement.  Thanks!\nCan you sign the CLA also so I can get this merged in?  http://famo.us/cla/\n. @AdamCmiel mind taking a look?\n. @wgester \n. This is a good fix.\n. I personally am a fan of it.  The more places to share that information the better.  Not really a question for me though.\n. The issue is that your code is basing it's size around the context which is a div that get flexibly larger and smaller depending on the presence of the keyboard.\nYou need to have the window size be read at the beginning and then use that static value as the size.  It would look something like this.\n```\nvar mainContext = Engine.createContext();\nvar layout = new HeaderFooterLayout({\n    headerSize: 100,\n    footerSize: 50\n});\nlayout.header.add(new Surface({\n    size: [undefined, 100],\n    content: \"Header\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"100px\",\n        textAlign: \"center\"\n    }\n}));\nlayout.content.add(new Surface({\n    size: [undefined, undefined],\n    content: \"Content \",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: window.innerHeight - 150 + 'px',\n        textAlign: \"center\"\n    }\n}));\nlayout.footer.add(new Surface({\n    size: [undefined, 50],\n    content: \"Footer\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"50px\",\n        textAlign: \"center\"\n    }\n}));\nmainContext.add(new Modifier({size: [window.innerWidth, window.innerHeight]})).add(layout);\n```\njs\nnew Modifier({size: [window.innerWidth, window.innerHeight]})\nhas the size calculated once so you shouldn't be getting these issues with flexibility.\nLet me know how this works for you.\n. Are you working on ios8?  There is a pretty substantial bug on ios8 safari with their layer compositing.  I am in the process of creating a bug report for it.\nWe have a fix in the works to force the blending and that should land in a hotfix shortly.\nTry adding \ncss\nopacity: .999999\nto  the class \"famous-root\" in the famous.css.\n. Closing as @talves I think solved this one.  Reopen if needed.\n. Do you see this bugging out anywhere with the framework code.  Any place that has a this.size should have the accompanying getSize it needs?  Thanks.\n. @hugecannon can you produce an example of where you hit this issue?\n. Closing since we do not have a use case where this bug occurs.  Please reopen if we can repro.\n. @timjchin  can you take a look?\n. Good call. @TheAlphaNerd merge.\n. Once we add inAlign and outAlign to the renderController this should be solveable for you.  Sorry this didn't already happen.\n. @TheAlphaNerd \n. Can you provide an example of the bug you are fixing?  @extempl Thanks for the pull request!\n. Will look into this today.\n. Good change.  Thanks @extempl.\n. @TheAlphaNerd do you want these commits squashed?\n. @wgester Can you take a look?\n. @alex-mcleod I like this change. Thanks.\n@wgester thoughts?\n. @wgester please look into this.\n. Any luck with @talgleichger 's changes?\n. To me, this is what addClass/removeClass is for.  Will leave open for another day or two for comments but as of now I am not in favor of this change.  Thanks for taking the time to submit this though @extempl!\n. Closing this.  @extempl thanks again for the PR.  We try and keep our API's as clean as possible at the expense of having to write more code.   I am a fan of having to have the conditional check.\n. We have seen webkit break preserve-3d a few times now.  Unfortunately it is not something we control.\n. Now that we allow attribute setting I think that we can remove the special cases from our different surfaces.\n. Good fix. Thanks @ftripier \n. We have a few pull requests with fixes.  We are considering those or going with a more supported fast click implementation.\n. @MajorBreakfast the idea is that using each of these syncs serves a different purpose.  When using Touch, you want to know the distance a finger traveled between frames.  When using Scale, that pixel information is of little value and what I want to know is the percentage change of the distance between your two fingers based on where you initially placed them.\n. Try lowering the margin property on the scrollview.  This decreases the amount of surfaces that are written to on a given frame.  1000 is a lot.\n. Glad to hear.  Closing.\n. @GuillaumeNachury You could also add a blank surface or DOM element layered on top to catch all events.\n. @AdamCmiel Can you take a look at this?\n. I forget the exact reasoning behind the rails.  To either of you have any words of wisdom? @wgester @ftripier \n. Looking into this.\n. @IjzerenHein Great great catch.  Thanks.  @wgester can you double check to make sure this works.  I have a test\n``` js\n// create the main context\nvar mainContext = Engine.createContext();\nwindow.width = 500;\nvar myMod = new Modifier({\n    size: function() {\n        return [width, 500];\n    }\n})\nmainContext.add(myMod).add(new Surface({\n    size: [undefined, true],\n    content: 'adkljhflakjd',\n    properties: {\n        backgroundColor: 'yellow'\n    }\n}));\n```\nMess with width in the console to see his fix in action.\n. linear is already registered so you can reference by String name.\njs\n$scope.heroSize = $timeline([\n    [0,[undefined, 500],  'linear'],\n    [1,[undefined, 100]]\n]);\nshould work.\n. The Easing library is full of extras that we have dubbed not as essential and therefore is not included by default.\n. @lindseymysse can you file an issue there?  Closing this but feel free to comment if it is indeed an issue here also.\n. You will need to have inAlign and outAlign defined as well.\n. @talves Pretty sure they are in Lightbox.\n. @talves o dear....  You are correct.\n. @redwoodfavorite do you mind taking this over?  Should be a pretty straightforward addition.\n. We have updated the code in github (master branch), on the CDN (\"http://code.famo.us/famous/0.3/famous-global.min.js\"), and in the npm registry (tagged as version 0.3.1).  So if you are using any of those you should be fine.  Let me know if you are still having issues and I can reopen if need be.\nClosing since this has been merged into the platform.\n. @PEM-- Thanks!\n. There is a getCurrentIndex function that will tell you what node you are on and a getPosition function to find out how far through you are.  This should be enough information to implement these effects.\n. Can you provide a gist with a bit more context?\n. Thanks @StephanBijzitter!\n. @extempl this is definitely an issue.  I was thinking that the best distribution would be to alternate between floor and ceil so that the smoothing occurs across the entire row / column.  Feel free to make a PR for this as I think this is low priority for us.\n. @talgleichger Thanks for this.  @wgester can you take a look at this?\n. I will try looking into this a bit today.\n. This is because of the appmode feature of Famous.  By default, we turn of default touchmove so that you dont get the affect of the bouncing webpages that current browsers added.\nTry\njs\nEngine.setOptions({appMode: false});\nat the beginning of your app. \n. @xiamike Thanks! \n. @matthewtoast \n. Looking into this when I have some time this week.  Thanks for the PR @gadicc!\n. hey @gadicc!  Can you see if using this pull request solves your issues?\nhttps://github.com/Famous/famous/pull/432\nI think your pull request solves some issues but I think getting rid of lines 356 would cause issues and also adding the \njs\nthis._sizeDirty = false;\nassignment would cause issues.  The commit function of ElementOutput actually reassigns that value to false.  The reason for letting it stay true until then is that size changes need to trigger recalculations of transforms because of the origin property.\nI will take a deeper look if the currently filed PR does not already solve your issues.\n. We have talked about padding internally before and have come the conclusion that it is not core enough to the platform to include it on Modifiers.  The idea being that the way the rendering pipeline is currently implemented, we would have to check for padding in every spec leading to unneeded logic in majority of cases.  Padding can instead be implemented as an extension of a ContexualView (essentially the bones of GridLayout, FlexibleLayout, etc), where it uses parent information to modify the parent size and transform that it receives in the commit method.  I think I may have an old padding implementation somewhere that you can use as a jumping off point.  I will post back here if I find it.\n. @AdamCmiel can you take a look?\n. @wgester Can you add the @returns YUIDoc option?   Otherwise this looks spot on.  Thanks.\n. @wgester Thanks.\n. @AdamCmiel \n. @xiamike can you post an explanation of the PR?  Thanks!\n. true size is only for Surfaces since their content is defines what it's size is.  The comment you mentioned about not changing when the window changes is a bug that we currently have a pull request filed for that fixes this issue.\nhttps://github.com/Famous/famous/pull/432.\n. This looks great.  Thanks @wgester.  The only suggestion I would make is that I think undefined is a better representation for no clickThreshold than false is.  Super petty but just an idea.  Either way I am happy merging this.  Thanks again.\n. Thanks @redwoodfavorite.  @TheAlphaNerd ready to merge.\n. @timjchin still think this is a good fix.  Sorry this didn't get merged in earlier.  Can you rebase against develop and see if this is still working as intended?\n. @ImtiazMajeed Thanks for working on this.  Small point, but can we go for consistency between the variable name and the API?  I do not like both having \"frozen\" and \"immunity\".\n. Perfect, thanks @Imti.\n. I am ok with this.  @wgester @AdamCmiel thoughts?\n. Ready to merge.\n. I think this is breaking enough to be a reason for 0.4\n. I don't think we can merge it without a minor version bump.\n. This is a bug in Transitionable.  We are looking into this.\n. It seems I was wrong.  Transitionable with arrays seems to be working.\nThere was a sizing bug that was patched in 0.3.1, have you tried with this version that was released yesterday?\n. Hey @StephanBijzitter, let us know if this is still an issue for you and we can work on getting a fix in for you.\n. Looking into this.\n. You cannot transition from \"true\" to a numerical value or vice versa.  The example in the repo is working for me.  Ratios can indeed be of value 0.\n. @StephanBijzitter without knowing the rest of your code, it looks like you can have a mismatch between the number of renderables and the ratios\njs\nvar _ratios = ratios || (components.length < 4 ? components.length < 2 ? [1] : [1, 2, 1] : [1, 1, 1, 1]);\n. OOOO.  options.transition has a really bad default value.  It should technically be undefined.\noptions.transition can be a transition object, {duration: 5000, curve: 'easeInOut'}, which defines the transition to use if you set the ratios.\n``` js\ndefine(function(require, exports, module) {\n    var Engine = require('famous/core/Engine');\n    var Surface = require('famous/core/Surface');\n    var Modifier = require('famous/core/Modifier');\n    var FlexibleLayout = require('famous/views/FlexibleLayout');\nvar mainContext = Engine.createContext();\n\nvar colors = [\n    'rgba(256, 0, 0, .7)',\n    'rgba(0, 256, 0, .7)',\n    'rgba(0, 0, 256, .7)',\n    'rgba(256, 0, 0, .7)',\n    'rgba(0, 256, 0, .7)',\n    'rgba(0, 0, 256, .7)',\n    'rgba(256, 0, 0, .7)',\n    'rgba(0, 256, 0, .7)',\n    'rgba(0, 0, 256, .7)'\n];\n\nvar initialRatios = [1, true, 1, true, 1, true, 1, true];\n\nvar flex = new FlexibleLayout({\n    ratios : initialRatios\n});\n\nvar surfaces = [];\nfor (var i = 1; i <= 8; i++) {\n    size = (i % 2 === 0) ? [10, undefined] : [undefined, undefined]\n    surfaces.push(new Surface({\n        size: size,\n        properties: {\n            backgroundColor: colors[i-1]\n        }\n    }));\n}\n\nflex.sequenceFrom(surfaces);\n\nvar finalRatios = [4, true, 1, true, 0, true, 7, true];\nvar toggle = false;\nEngine.on('click', function(){\n    var ratios = toggle ? initialRatios : finalRatios;\n    flex.setRatios(ratios, {curve : 'easeOut', duration : 500});\n    toggle = !toggle;\n});\n\nmainContext.add(flex);\n\n});\n```\nis the same as\n``` js\ndefine(function(require, exports, module) {\n    var Engine = require('famous/core/Engine');\n    var Surface = require('famous/core/Surface');\n    var Modifier = require('famous/core/Modifier');\n    var FlexibleLayout = require('famous/views/FlexibleLayout');\nvar mainContext = Engine.createContext();\nvar colors = [\n    'rgba(256, 0, 0, .7)',\n    'rgba(0, 256, 0, .7)',\n    'rgba(0, 0, 256, .7)',\n    'rgba(256, 0, 0, .7)',\n    'rgba(0, 256, 0, .7)',\n    'rgba(0, 0, 256, .7)',\n    'rgba(256, 0, 0, .7)',\n    'rgba(0, 256, 0, .7)',\n    'rgba(0, 0, 256, .7)'\n];\n\nvar initialRatios = [1, true, 1, true, 1, true, 1, true];\n\nvar flex = new FlexibleLayout({\n    ratios : initialRatios,\n    transition:  {curve : 'easeOut', duration : 500}\n});\n\nvar surfaces = [];\nfor (var i = 1; i <= 8; i++) {\n    size = (i % 2 === 0) ? [10, undefined] : [undefined, undefined]\n    surfaces.push(new Surface({\n        size: size,\n        properties: {\n            backgroundColor: colors[i-1]\n        }\n    }));\n}\n\nflex.sequenceFrom(surfaces);\n\nvar finalRatios = [4, true, 1, true, 0, true, 7, true];\nvar toggle = false;\nEngine.on('click', function(){\n    var ratios = toggle ? initialRatios : finalRatios;\n    flex.setRatios(ratios);\n    toggle = !toggle;\n});\n\nmainContext.add(flex);\n\n});\n```\nSorry about the confusion.\n. True can be a ratio but there is no support for making a true sized element go to a ratio based size.  It doesn't make much sense to go from top down sizing to bottom up sizing so we decided this feature was not worth worrying about.\n. Yup.  Closing as this was just miscommunication / poor documentation.\n. The issue is because of the way layering works in the browser coupled with the fact that we reuse DOM nodes to minimize the performance hit of adding and removing from the DOM.\nThe layering of Surfaces is dependent on three things, translation along the z-axis, css z-index and DOM ordering.  Translation along the z-axis is the highest order of priority.  If something is translated forward in z, then that Surface will appear in front of something that was not translated.  This make sense as it is would things look in the physical world.  It gets interesting when two or more Surfaces have the exact same translation in Z.  When this occurs, the Surface with the higher CSS z-index property gets drawn on top.  If these Surfaces have the exact same CSS z-index property, then the order in which they are represented in the DOM is what determines the layering.\nWhen you change the render spec, you are essentially switching what DOM node you are drawing your Surface to and because there are no differences in translation or CSS z-index, the layering is completely determined by existence in the DOM, which is incredibly unreliable.  Having a CSS z-index scheme for your renderables will solve this for you.\n. Looking into this.\n. This is working as intended.  The element is the full width of the screen because no size was defined in that direction and therefore all of the other elements are off to the right, invisible to the user.  You can see the transforms are correct in the inspector.\n. @Lauricio Sorry about that, you are completely right.  Will look into getting this sorted today.\n. @Lauricio can you see if this Pull Request solves all of your issues.\nhttps://github.com/Famous/famous/pull/484\n. Great.  Sorry for the issue with that.\n. Closing since https://github.com/Famous/famous/pull/484 was merged.\n. Those are demos that are using Famo.us 0.1 and were written by members of the community which is why we are not distributing the code for them anymore.\n. Sorry!\n. Closing in favor of https://github.com/Famous/famous/issues/367.\n. I am seeing ImageSurfaces running fine in a Scrollview.  In the code you posted, when you instantiate the ImageSurface, there is no this.options.imageUrl and also, content is not the api to set the image source.\nTry this.\njs\nvar img = new ImageSurface({\n    size: [undefined, 200]\n});\nimg.setContent(<imageURL>);\n. I agree that ImageSurface can use a API overhaul for consistency.  I also think that you should be able to define it in the constructor.  For some reason we don't let you...\n. @adamelk It looks like there is a bug in your code because you did not bind the View prototype to the subclass.  This code works.\n``` js\nvar Engine = require('famous/core/Engine');\nvar View = require('famous/core/View');\nvar Scrollview = require('famous/views/Scrollview');\nvar ImageSurface = require('famous/surfaces/ImageSurface');\n// create the main context\nvar mainContext = Engine.createContext();\nfunction TestView(options) {\n    View.apply(this, options);\nvar scrollview = new Scrollview();\nvar surfaces = [];\nscrollview.sequenceFrom(surfaces);\n\nfor (var i = 0; i < 10; i++) {\n    var temp = new TempView({size:[undefined,500]});\n    temp.image.pipe(scrollview);\n    surfaces.push(temp);\n}\n\nthis.add(scrollview);\n\n}\nTestView.prototype = Object.create(View.prototype);\nfunction TempView(options) {\n    View.apply(this, options);\nthis.image = new ImageSurface({\n    size: [250,250],\n    content: \"http://cdn.evbuc.com/images/3618759/81800181927/1/logo.png\"\n});\n\nthis.add(this.image);\n\n}\nTempView.prototype = Object.create(View.prototype);\nmainContext.add(new TestView());\n```\n. @adamelk I am going to close this but let me know if you are still having issues.\n. Currently there is no supported implementation.  I think there have been members of the community trying to integrate Famo.us into Ember but do not know.  I will leave this open in case someone can point to a usable seed. \n. @TheAlphaNerd, merge.\n. Thanks for this @jd-carroll!  Do you want to file it as a pull request or have us just put it in?\n. Fixed https://github.com/Famous/famous/pull/489\n. Can you provide a reproducable example?  I can't seem to duplicate the issue.  Sorry about this, we will try and sort it out ASAP.\n. @ftripier can you look into this since it seems to be the nextTickQueue that is causing the issue?\n. https://github.com/Famous/famous/pull/520\n. I don't think this solves the issue as this would only get run if you have a callback specified.  If we want this to happen, it needs to happen regardless of the existence of a callback.  @AdamCmiel thoughts?\n. Thanks @jd-carroll, this is great!  @timjchin can you also review this change?\n. I think that restricting Famo.us to a particular element with overflow hidden is the default behavior we are looking for.  As you mentioned, it is possible to override if that is what you chose.\nTo me, this does not break Scrollview.  Scrollview is behaving exactly as intended if you remove overflow hidden.\n@marklu feel free to share your opinions here as well.\n. Can you provide test cases?  This is something we see break often as browsers roll out new versions.\n. Fantastic tests.  Thanks for sending these.\n. Can you send me your browser versions?  THanks!\n. I am not sure if I misread your comment 2 hours ago but I am seeing no issues on Safari and Firefox.  This seems to be only a Chrome issue for me.\nMy version of your tests \nhttps://github.com/michaelobriena/famous-zindex\nScreenshots:\nChrome 38.0.2125.122:\n\nChrome Canary 41.0.2229.1 canary (64-bit)\n\nSafari  7.0.3\n\nFirefox 33.1.1\n\nFirefox Nightly 36.0a1\n\n. Wrong Safari Screenshot. Edited above.\n. That is just the bottom right overlapping the top right which is not an issue.  The four quadrants are technically at the same z depth as far as the browsers are concerned which means it is just left to DOM order.  If you rearrange your code to have the each quadrant render in a different order you will see different results.\n. When outside of the ContainerSurface, essentially think of them as flattening out and existing as a single Surface.  The depths of things inside the ContainerSurface does not matter across ContainerSurfaces.\n. Exactly.\n. Sorry, I actually just cleaned that up Friday!\n. This has been fixed in Chrome\n. @IjzerenHein Unfortunately all I have for you is sometime between today and Nov 24th 2014\n. This is a decision we decided to make for defaults since on normal websites you cannot click and drag a page so we wanted to emulate that behavior.\nI like the idea of having the syncs as a set of options that you can set with Touch and Scroll being the defaults.  I will bring that up and see what people think.\nFor now, if you take the scrollview elements, pipe it to a mouseSync, and pipe that to the Scrollview's sync then it should work.  Or just override and add MouseSync to the defaults for Scrollview.\n@mcbain thanks for the suggestion!\n. Closing as this is expected behavior.\n. I may be wrong but I think we took out splice in.  We should probably revisit this...\n. @TheAlphaNerd Good change.  Thanks @alexanderGugel.\n. I think this change is fine.  @wgester have any thoughts on this?\n. I agree with merging these changes in and that getFinal should not be part of the API.\nI actually think it may be a good time to consider deprecating StateModifier.  As we move to more reactive patterns, having a StateModifier that understands its properties is enforcing the wrong design patterns.  Everything should be kept in outside state and be expressed through a Modifier.\n. Firefox is aware of this as we caught it in Nightly a few weeks ago.  I will reach back out to them to find how far along they are to finding/fixing the issue.\n. @Skalkaz thanks for filing this to let us know it landed in the Firefox.\n. @StephanBijzitter Thanks for the extensive write up.  We share a lot of the same feelings you do about Scrollview and hope to solve a lot of these in do time.  That said, balancing functionality and performance is a very hard problem.\nSpeaking to some points in particular:\n\nanything added to a Scrollview is not automatically piping to it\n\nThere is an option on Scrollview called groupScroll that will pipe everything in the Scrollview's collection to it's GenericSync.  If an item in the collection is a GridLayout for instance, then each of the renderables that the GridLayout manages has to also be routed through the output handler for the GridLayout.  We cannot do this for you as layouts may have inconsistent API's.\n\nThe next annoyance was with the layout limitations, as the Scrollview is essentially a 1-column table. \n\nThis is actually by design.  Scrollview is for scrolling some stuff and anything beyond that is not in the cards for Scrollview.  That said, Table can inherit from Scrollview and include this behavior.  Scrollview is designed to be as light weight as possible while still being usable.  Having these features in the default component will be bloat for many users that do not need this functionality.\n\nSo that's the third issue... it's as good as stateless because barely any events are emitted and those that are emitted are not always emitted.\n\nThis definitely an issue.  Our eventing is broken and we need to fix that. \n\nSpeaking of managing content, that's the next issue. When removing and adding items to a Scrollview, unexpected things happen.\n\nAgain, bugs.\n\nScrollview should contain the following functions:\nsetPosition(position, transition)\ngetPosition() -> position\n\nA lot of the reason this does not exist is the origin of Scrollview.  Scrollview initially was an attempt to build an infinite scrollable list that was controlled by physics.  Because of this, we have always had a part of us that views Scrollview as the thing that gives the ability to scroll without the management of that state.  What does position or progress mean when you have a never ending list of content?  We understand the need for more functionality to the Scrollview API which is why new features such as \n- setPosition\n- getPosition\n- getAbsolutePosition\n- goToPage\n- getCurrentIndex\n- \"pageChange\" events\nwere added.  These introduced a lot of state to the Scrollview which was something we initially wanted on a more fully featured version, a la ios TableViewController.  I think that we can clean this up a bit but we run into a lot of issues when you don't draw everything. \n\nWhen the renderable sequence is modified, the position object must be updated:\n\nFor instance, if I have a \"true\" sized Surface that is above the rendered portion of the Scrollview and it's content changes, how can I reflect this change in the numbers?  Right now, I can't do anything until it is drawn on the screen because I actually don't know how tall it now is.  So where does that leave us?  We can have scrollview listen to the resize event of the Surface, recognize it is not in the viewport, draw it with \"display none\", and recalc the positions.  That might work but right now we have other issues that we are prioritizing over diving into that.\n\nThese two functions should handle ALL movement within the Scrollview. The position object will contain the following keys:\nScrollview should emit events even when handling them:\n\nI agree with all of this except for the percentage ones.  It can have an API for the percent but I don't see the need for percent change events.  Would the not get fired 1 for 1 with position change?\n\nTo provide layout functionality, Scrollview must adopt SequentialLayout's behaviour\n\nAgreed.\n@StephanBijzitter thanks for all of feedback on what you need from the platform.  Sorry that we fall short on some areas but we are definitely always interested in feedback and hope that we can solve these in due time.  We are spending a lot of time exploring GL and improving some core design flaws that are taking a lot of time from the individual components of the framework and while that is probably frustrating for the community, I think that in the end it is the way to get to the best platform we can make the fastest.\n. # Noting that this is actually a bug with SVG.\n. Nah, no worries.  If people find the closed pull request they will see my comment (I added emphasis).\n. Misunderstood your comment.  I think we can get rid of this but would want to do some fact checking first.   Keeping this in there for a bit is not a huge deal.  Sorry for the misunderstanding.\n. Thanks for the help on this @TheAlphaNerd \n. https://bugzilla.mozilla.org/show_bug.cgi?id=1106602\n. To note.  A fix has landed in Firefox Nightly.\n. Spending today on this.\n. https://github.com/Famous/famous/pull/520\n. The issue was that we were expecting body to be there on the second frame, which was not always the case for firefox.\n. Fix was merged in. https://github.com/Famous/famous/pull/520\nClosing.\n. @StephanBijzitter This looks good to me.  Thanks!\n@wgester can you review this as well.\n. Looking into this.\n. This was fixed and merged into 0.3.2\nhttps://github.com/Famous/famous/pull/484\n. No worries.  Feel free to reopen if this is still issue for you.\n. Looking into this.\n. https://github.com/Famous/famous/pull/520\n. Yes, we are actually very big fans of having the platform move in this direction.  The two big things that we need to consider are:\n1) Functions are expensive in JavaScript\n2) A lot of JavaScript developers are unfamiliar with some of the functional patterns so creating an API with the power of FRP but easier hooks (a la React) is incredibly important.\nThis should solve a lot of our battery consumption issues.  If nothing changes, nothing happens.\n. @wgester \n. The issue was that we were expecting body to be there on the second frame, which was not always the case for firefox.\n. Works for me\n. @jd-carroll, Thanks for bringing this up and sharing your opinion on the matter.\nThis is definitely our opinion as well.  A performant core design is the single most important part of the platform and we will not sacrifice performance for ease of use.\nWe think that Famo.us currently has a lot of really great ideas but also a few issues with API that we want to tackle at this time.  For instance, the \"transformFrom\", \"sizeFrom\", etc, properties on Modifiers are very powerful functional patterns but don't fit well into the rest of the platform.  Why can't Views have renderSpecFrom? Or Surfaces have borderRadiusFrom?  Its these mismatches of design that we want to tackle.\nWe want the changes to the API help unify the intent of our ideas.\n. > but the engine has no way to tell when a Surface should have its styling changed and thus the styling >functions would have to be called every single tick, while most of the time they probably won't (and >shouldn't...) change.\nThat's the thing, is there any reason a transform needs to be prioritized over a borderRadius?  Why can't any changes to renderables cause them recalc their specs, smartly diff, and queue themselves in a draw queue if there are changes.  Then all the scheduler needs to do is flush the list of things that said they need to be drawn.\nThis is a small example and don't want to dwell on it too much.  Just wanted to bring up the kind of things we are talking about.\n. Thanks for bringing this up.  I am not sure what the point of the asterisk is either but it may be something special with YUIDoc which we based our structure around.\n@TheAlphaNerd any insight?\n. @timjchin This is great, thanks.\n. @timjchin This is a good change.  We will have to make a change that will continue the force based on the shape and position of the bodies.\n@AdamCmiel I know you had input on the solution but can you sign off on this before we merge?\n. @TheAlphaNerd \n. Thanks @xiamike. Merge.\n. I agree that since transforms are in 3 dimensions, then size should be as well.  The way I see it is that origin and align are special case shortcomings of the platforms current inability to give you parent information at all points in time (anything other than commit).\nIdeally, we should have all parent information all of the time and thus origin and align are just baked into the transform and not just magic based on parent information you do not know.\n. Agreed.\n. https://github.com/Famous/famous/pull/561\n. We do not want to touch the DOM at this point in time.  It should mark it and get done during the commit phase.\nThis should actually be removed as an API and everything can be accounted for in the setAttributes property so the the API is standardized across tagTypes.\n. @speigg, you are correct that there is no easy way to do this, especially for the grouping cases you have.  Also, Modifiers are the only parts that hold Transform data in memory meaning that Surfaces that have their Transform defined by a spec, as is the case with most of the layouts, have no notion of their Transform.  It is just written to css immediately.\nYou technically could query the Surface for it's matrix3D property, parse it into an array, and then\njs\nTransform.multiply(containSurfaceModifier.getFinalTransform(), myParsedSurfaceTransform)\nbut that is is probably not the best idea.\nCurious as to what kind of component you are working on where this is useful information.\n. Gotcha.  \nI think this is a really interesting use case but would love suggestions on how to implement this performantly.  From what I gather, this would be a very expensive operation because you would have to interpret the transform matrix all of the time.  I may not understand the full use case, but if you are using state to control the \"transformFrom\" property, can you not use that state to figure out how to respond appropriately?\nAlso, that sounds like really interesting work!\n. Thanks @alexanderGugel. Merge.\n. @alexanderGugel Good changes.  Thanks.\nMerge.\n. @alexanderGugel I agree with you on this case.  I don't see the reason for undefined as part of the API.  It makes the vector entirely useless.\n. @jd-carroll gotcha.\nI think this is a good change.  Merging.\n. @alexanderGugel I would rather not have the instance of check in something as expensive as the matrix multiplication.\n. Closing but feel free to comment if you feel strongly.\n. Doc fix would be better here.  The type check would just happen super often which is an issue.\n. Agreed.  Can you add the \"@chainable\" tag also?\nThanks @alexanderGugel.\n. Thanks @alexanderGugel. \n. @alexanderGugel Thanks.  I agree with this.  Merge\n. Does not fix all of the bugs.  Revisiting.\n. Looking into this.\n. I am ok with this.  I would say we don't need the extras that @alexanderGugel links since we don't have dependencies on some of the tools they are accounting for.\n. This is because back2's eventInput is not piped to it's eventOutput.\n. Agreed.  Will talk to Jeanne about this.\n. Thanks for pointing this out.  This may be somewhat out of our control but I'll start digging through some of the chromium bug reports to see if this has already been filed.\n. We will be updating our docs since right now they leave a bit to be desired.\n. Great call.  Thanks @quentinburley \n. Will be merged in 0.3.5 release.\n. Fixes https://github.com/Famous/famous/issues/553\n. https://github.com/Famous/famous/issues/530\n. Hi @der-ede,\nI am not a lawyer either and cannot give you legal advice but here are some useful resources.\nhttps://www.mozilla.org/MPL/2.0/\nhttps://tldrlegal.com/license/mozilla-public-license-2.0-(mpl-2)\nhttp://opensource.org/licenses/MPL-2.0\nThe examples fall in a weird spot so feel free to ping me at mike@famo.us and I can give you some better answers after talking with our lawyer.\n. Some linting issues but if you fix those this seems fine to me.  The only question should be should we just replace ContextualView with this.\n. @browles can you take a look at this?\n. @browles Thanks.\n. Thanks @jordanpapaleo. Will merge in next patch.\n. This will have issues if the arrays are of different lengths.\n. We currently redo all of our matrix math every frame.  We are working on better systems so if nothing is actually animating nothing is done.  This will greatly improve performance.\n. @bardu, Unfortunately I cannot give you an exact release date but we are working hard on it and hope to get it ready as quickly as possible\n. Nice call.\n. @xiamike  Thanks for the heads up.  We will look into this.\n. @browles \n. We surpress window touchmove events.\n. https://github.com/Famous/famous/blob/develop/src/core/Engine.js#L137\n. If you get rid of that you should be good.\n. thanks @alexanderGugel!\n. Feel free to merge.  THanks @jordanpapaleo \n. Hi @groupsvkg!  A Surface size will grow with the content if you use what we call \"true\" sizing.  In you example, you have size defined as 100px tall (line 8).  If you change that 100 to true then everything should work as you expect it.\n. It should work yes.  I do not know what version of Famo.us, Famo.us Angular is using so cannot comment.  This was however fixed in the main platform.\n. Is it inside of something that has overflow: hidden;\n. @Qvatra I'm sorry but I cannot see any external stylesheets you may have to affect your code so please understand I am trying to help.  There is a known bug that chrome breaks z translations when they occur inside of an element for overflow hidden so I was trying to figure out if that is the case you were running into.\nIE does not have preserve3d implemented correctly which makes Famo.us not work.\nI will look more into this today when I get into the office.\n. you are 100% right that this is a bug newly introduced in chrome.  It looks like chrome tries to fast path rendering when everything starts at 0 z depth.  I will be filing a chromium bug for this.  For now, adding this should solve your issue.\njs\nmainContext\n    .add(new StateModifier({\n        transform: Transform.translate(0, 0, 100000000),\n        size: [1, 1]\n    })).add(new Surface({\n        properties: {backgroundColor: 'chromeHack'}\n    }));\n. It looks like this is only an issue if everything starts at 0 z.\n. From what I can tell, yes.\n. Closing in favor of https://github.com/Famous/famous/issues/621\n. Looks good.\n. @alexanderGugel can you look into the travis error?\n. line 174.\n. Good change\n. Right not there is no better way.  The only other thing would be to manually create a getSize function on the grid layout.\n. I don't know how I feel about this.  Curious why you need this functionality.\n. As we work on mixed mode we are working on a better physics engine.  Our current offering is a bit hacked so I am a bit hesitant to make this change.\n. We have had some issues touching this code too often so we are going to fully test this before merging.\n. Framework integration is something we are not really looking to support at this time.  We are really focused on integrating GL, improving performance, improving our physics offering, improving the API, and reducing bugs.\nI think React is a great tool and something I see us having very little trouble integrating with down the road but for the time being this will have to be a community lead project.\n. Famo.us currently makes a ton of memory every frame because of the spec we use to construct our 3D transform tree.  We are working on a more optimized version that should drastically cut down the per frame memory usage.\nFor the time being, I would try shrinking the margins on your scrollview so that you stop calculating the transforms for stuff that is incredibly far away from the viewport.\n. Agreed, we should definitely have more resources on the topic.  Maybe a blogpost on this would be a good resource.\n. We have some resources on that problem.  Looking for them today.\n. So, after looking through out stuff, it looks like every browser except firefox has this issue.  There is no good way around this problem right now aside from just not scaling text.  You can use perspective to bring it closer to the camera but that is about it.\n. I think it is worth a try.  For what it is worth, when I had an initial scale of the intended final scale, then scaled down, then scaled back up, the result still was pixelated even though the font rendered properly with that scale at page load.\n. This is a bug.  The size of the underlying ImageSurface is not correct which is causing the issues.  The alignment is working, just need to firing a DOM hit to grab the size on load of an imageSurface.\n. There is a view called ScrollContainer that does just that.  It wraps it in an extra div so overflow hidden can be used.\n. Interested to see where this goes.  Let me know when you are happy with the implementation you want and we can look this over.\n. This was intended behavior but has only confused most of our users.\nThe thinking was around preserving the maximum amount of consumability.  If you can affect how the View behaves to \"click\" events it receives, then you have changed the implementation of that View.  This means we could both have the same CustomView in our application that does wildly different things when it receives the click ever.  \".on\" at the View level, is actually when the View emits a click event.\n. Hi @vplifer,\nNot sure if I completely understand the question but most of the time, having a custom View that controls the modifiers for subviews/Surfaces is the best approach.   The premade layouts are great at easily defining some simple layouts but handrolling stuff is generally the best approach.  You can then use the sync library to turn mouse/touch data into dragging.\n. Do you have an example we can look at?\n. What browsers are you seeing this on?\n. This looks to not be an origin bug.  I think there are two bugs at play, one our our end in ImageSurface and one on Firefox's end.\nIn your example, if you swapped the ImageSurface with\njs\nvar img = new Surface({\n    size: [true, undefined],\n    content: 'adfadf',\n    properties: {\n        backgroundColor: 'yellow'\n    }\n});\neverything will work as expected.  We will look into the issues with ImageSurface\nIf you load your example in firefox, the first time you load the app, it behaves differently then every other time.  It looks like they are doing some strange stuff but we will look into this once we solve to bug in ImageSurface to ensure it is not our fault.\n. I have not had time to really look into this fully.  You can try\njs\nvar img = new Surface({\n    size: [true, undefined],\n    content: '<img src=' + myImgSourceURL + /'>',\n});\nWhich may work.  The other thing you can try is\n``` js\nvar myImgEl = document.createElement('img');\nmyImgEl.onload = function() {\n  mySurface.setContent(myImgEl)\n};\nmyImgEl.src = \n```\n. No issues, we just don't want to release the product until it is completely ready.\n. The only way to get around the blurry text is to understand your place in the animation and toggle the font size accordingly.\nAs @speigg mentioned, this might have to do with the repainting the browser has to do.\n. @TheAlphaNerd @matthewtoast @zackbrown \n. It looks fine on my side also.\n. This is expected behavior.  We are just defining the size of that outer Surface.  From there, you either would need to have the HTML/CSS responsible for the inner Surface styling or add another node to your scene graph that has the size changing part as a parent and it has and origin/align of [.5, .5].\n. As far as I know it is impossible to delete a pull request completely.  If you would like I could rewrite all of the comments?\n. Can you elaborate on this?  Not sure the exact breaking condition.\n. Thanks for the test case.  This makes sense.  @TheAlphaNerd This is mergable.\n. Hey @whatisor This repository is no longer being worked on.  Sorry for any confusion.  If you check out github.com/Famous/engine, you can see where development on the new rendering engine is taking place.\n. @kkirsche Thanks for the PR.  Unfortunately this repository has been deprecated and all current development is being done at https://github.com/Famous/engine.\nAgain, thanks for the PR!\n. ",
    "continuata": "according to Steve Newcomb there is a bug in the invite system and it will be fixed soon ... so the wait shouldn't be as long as it seems.\n. I put a fix in on this thread that works https://github.com/Famous/generator-famous/pull/6 ... you just need to edit the 2 lines in bower.json then run\nbower install\nnpm install\n. actually looks like it isn't famous at all ... I replaced the Scrollview with an ng-repeat of divs inside one surface instead and it still used the same memory. Naughty Angular!\n. ",
    "ethanwillis": "This launch rivals diablo 3's two crows launch.\n. +1 Still broken, just set to public.\n. +1\n. It's like thread bumping, sort of.\n. ",
    "albinekb": "This is not truly open source. Why the heck do i need to wait in line to get the documentation for this project?\n. ",
    "ftripier": "Actually mike, the correct term is \"missclicked\".\nOn Thursday, April 10, 2014, michaelobriena notifications@github.com\nwrote:\n\nmissclick'd\n\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/3#issuecomment-40156992\n.\n. This one's a gecko problem I'm afraid. Bug filed, however:\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=998502\nIn the meantime, I submitted a pull request for a hotfix into our internal repo that would apply a zindex equal to the the specified z translation on every surface.\n. The final matrices applied to the surface should correctly represent the depth- they get multiplied internally by the browsers rendering engine against the containing elements projection matrix. Our scene graph isn't naive- a rotation matrix multiplied against a translation matrix will produce an output with consistent translation, and vice versa.\nTo clarify: we'd be mapping from the final matrix before we actually write it to the Surface's html element's internal styles, not as a sum of all z translations applied.\n. I'd like to leave the issue open in case Charles and/or the community have input down the line. This is a tricky problem, and my current solution is at best a hack.\n. If you really need to, you can call Entity.unregister on the surface's id\n(which you can either get through surface.id or surface.render()), but as\nMike said, you shouldn't be in a situation where you're creating this many\nsurfaces in the first place. Additionally, instead of removing surfaces,\ntry hiding and showing them in a renderController instead.\nOn Fri, May 30, 2014 at 4:52 AM, Tim Donselaar notifications@github.com\nwrote:\n\nHi,\nThe project that i'm working on is private for now so i can't so that code.\nI did make a sample code that shows how i use famo.us.\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\nvar Transform = require('famous/core/Transform');\nvar StateModifier = require('famous/modifiers/StateModifier');\nvar Timer = require('famous/utilities/Timer');\nvar mainContext = Engine.createContext();\nvar RenderList = [];\n//cool function for creating a surface and stateModifier for cool animation\nvar create = function(){\n    var CurrentSurface = new Surface({\n      size: [100, 100],\n      properties: {\n        color: 'white',\n        textAlign: 'center',\n        backgroundColor: '#FA5C4F'\n      }\n    });\n```\nvar CurrentStateModifier = new StateModifier();\nCurrentStateModifier.remove = false;\nvar RenderSettings = {\n  state:\"pending\",\n  CurrentSurface: CurrentSurface,\n  CurrentStateModifier: CurrentStateModifier,\n  AnimationCallBack: function (){\n     //remove after the animation ened\n     RenderSettings.CurrentSurface.render = function(){  return null; }\n     RenderSettings.CurrentStateModifier.remove = true;\n     RenderSettings.state = \"unlink\";\n  }\n  }\nRenderList.push(RenderSettings);\n```\n}\n//a simple loop to handle the states\nTimer.setInterval(function(){\n  for(var i = 0; i < RenderList.length; i++) {\n    //pending state we add the statemodifier and surface to the context and start the animation\n    if(RenderList[i].state == \"pending\"){\n       RenderList[i].state = \"render\";\n       //add to the context\n       mainContext.add(RenderList[i].CurrentStateModifier).add(RenderList[i].CurrentSurface);\n       //add a cool animation\n       RenderList[i].CurrentStateModifier.setTransform(\n          Transform.translate(100, 300, 0),\n          { duration : 1000, curve: 'easeInOut' },RenderList[i].AnimationCallBack);\n```\n}else if(RenderList[i].state == \"unlink\"){\n  //find and remove stuff from the famo.us render tree to free up memory\n  if(mainContext._node._hasMultipleChildren){\n    for (index = 0; index < mainContext._node._child.length; ++index) {\n        if(mainContext._node._child[index]._object.remove){\n           //remove Statemodifier plus surface from render tree\n           mainContext._node._child.splice(index, 1);\n           mainContext._node._childResult.splice(index, 1);\n       //remove the rest\n       RenderList.splice(i, 1);\n       //load new item\n       create();\n       break;\n    }\n\n}\n  }else{\n    if(mainContext._node._child._object.remove){\n           //remove Statemodifier plus surface from render tree\n           mainContext._node._child = null;\n       //remove the rest\n       RenderList.splice(i, 1);\n       //load new item\n       create();\n}\n\n}\n}\n```\n}\n},1000);\ncreate();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/81#issuecomment-44642671.\n. Wait! Surface already has a 'deploy' event that occurs whenever we bring it\nback into DOM, or when you change its content. All you need to do really is\npipe your surface to an eventhandler with a listener for it.\n\nOn Wed, Jun 11, 2014 at 3:50 PM, mvanlonden notifications@github.com\nwrote:\n\nClosed #95 https://github.com/Famous/famous/issues/95.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/95#event-130491012.\n. Batched registrations seems like a good idea. This is similar in principle to linking libraries, so maybe we could borrow some ideas from common implementation patterns in that sector.\n. Hot sauce.\n. Should be good now.\n. this.size can have non-number values (true and undefined) and so is unsuitable for layout purposes. The fix should be in flexible layout.\n. Looks good to me! Just gotta get travis passing I guess.\n. Good call dan. While we're at it, if we could instantiate those variables with types, that would help performance.\n. Specifically I think:\n\nvar item;\nvar itemSize;\nvar output;\nvar result = [];\nShould be like:\nvar item        = 0;\nvar itemSize = 0;\nvar output     = 0;\nvar result      = [];\nfor JIT magic.\nAlso, I'm backing Will's suggestion.\n. Doesn't DesktopEmulationMode.js in inputs fix this?\n. Does requiring in DesktopEmulationMode from inputs solve your problem? It's a global fix that stops all mouse events from propagating if it detects the availability of touch events.\n. This is fine.\n. @michaelobriena @DnMllr @wgester \n. Currently untested. Additionally, I believe some core modules still rely on 'patch' based change events.\n. TabBar seems to be the only module that relies on a json-level change event.\n. The event is still there, only now it's only emitted on a primitive data type change (in the 'set' method which is usually invoked as a subroutine of patch).\n. Actually, I see now that having a patch dispersed event is a useful convenience in the event of having a sub-component with it's own setOptions method. Nevermind.\n. Hot sauce.\n. I do agree that this configurability seems helpful, but is the typical use case for suppressing events really on a per-call basis, or do you think it would be sufficient to have it as an option living on the instance itself?\ne.g.\ntoggleButton.setOptions({ suppressEvent: true});\n. I see. Then this seems great to me!\n. Myles, we can merge as is, @michaelobriena signed off as well.\n. This will require a change in documentation @matthewtoast.\n. Good fix!\n. One thing though is that we may want to completely differentiate array and 'object' cloning for performance reasons. Using a 'for in' comprehension on an array can have poor performance, and in general, less dynamic variables can lead to a faster path in the interpreter.\ne.g.\n```\nif (typeof b === 'object' && !(b instanceof Array)) {\n    //object logic\n}\nelse if (b instanceof Array) {\n    //array logic\n}\n```\nSo while this fix does solve the problem, there may be a faster path we can refactor to that's even better!\n. Looks good!\n. Looks fine to me.\n. deferQueue seems to be fine. I've linked my fix to this issue.\n. Would the fix be as simple as eliminating this check, or are there side effects I'm not considering? @timjchin \n. Just force pushed.\n. So on an input class, rails will ensure that only the dimension impacted the most will be affected that frame, e.g. on a touchSync if the difference between the x position of your touch is greater than the difference of the y position of your touch, than the packet received on update will be a two-value array with the frames' x-difference and zero for the y-difference.\nThe rails option on a scrollview delegates to its generic sync's rails option, which in turn delegates to its registered sync classes' options.\nHowever, the primary restriction of scrolling on scrollview is controlled by the direction option, which will choose which value of the sync's returned array scrollview uses as the master \"difference\" float to control its position.\n. Sure thing. I think halfninja's spot on.\n. ",
    "fettermania": "This error is corrected.  http://famo.us/ has docs and guides available without login now.  I will take down the external guides.git repository.\n. Nevermind, this is fixed on the github end.  I prefer we have the lessons refer to famo.us/guides.  That change is opened on the internal list.\n. Thanks.  I will leave the install page instructions generic, but we will get on the famous-starter strangeness.\n. We require proper application of preserve-3d, which is currently in development at Microsoft:\nhttp://status.modern.ie/csstransformspreserve3d\n. Not to be the teaching assistant here, but the logic in here is getting pretty complicated and there's nothing in the way of comments explaining what is going on.  I would recommend being the change.\n. Can we get a resolution here, even if this is to move FastClick behavior into a separate \"external\" polyfill?\n. ",
    "thinklinux": "Don't take down the external guides.git repository. It broke all the links on famous university where that repo is referred. You can see one example in that issue #15 but there is more.\n. +1\n. ",
    "jperl": ":+1: \n. Chrome also has issues sometimes.\n. @dmvaldman Yes and yes.\n. @dmvaldman I upgraded famo.us and tried setting the perspective on the containerSurface -- I still need to create the container afterwards for it to be overlaid. However when I try to reproduce this outside of our app I cannot :(. I wonder if it is because I am using meteor to render the div used in the surface. Interestingly it works on firefox and safari.\n. @zgardner Here is something for the meantime http://jsfiddle.net/jperl/7wEWU/\n. ",
    "kannanfa": "s\n. ",
    "nathanleclaire": "+1\n. ",
    "grigio": "+1\n. ",
    "kbrainwave": "+1\n. ",
    "avelis": "+1 to this. I am not sure if it is possible at this point but the biggest asset any version controlled code base will have is its versioned history. Much can shared be by it.\n. :sunglasses: :thumbsup: \n. ",
    "LeonFedotov": ":+1: \n. ",
    "nitinhayaran": ":+1:\n. ",
    "unruthless": ":+1:\n. ",
    "ghost": "Nothing specific, it would just be interesting to see how the project was developed. Understand the need to squash the repository though.\n. Nice speigg. Thanks.\n. I too am interested in this \n. Ok very good thanks!\n. Linear ease is missing from the famo.us easing object, so I think it belongs here. Let me know if you still think I should open it over there, though.\n. So, this must be a fangular issue, because sending a string gives me:\nUncaught TypeError: string is not a function famous-angular.js:924\n. @michaelobriena any release date for the redo?\nIf there is an early access release I would be happy to give it a shot.\n. ",
    "tbranyen": "@malandrew ya it's fine to close.  I was about to write a reply yesterday, but don't really have any justification other than being a little religious when it comes to Git.  Seeing the history missing was a red flag.  IMO it would have been nice to see condensed history at major landmarks.\nI still plan on trying out Famous for a project and contributing if possible.\n. ",
    "AdrianRossouw": "ping: @tbranyen @avelis @LeonFedotov @nitinhayaran @unruthless @cameronwilby\nI just wanted to point out that famous have changed their policies on this, and the entire commit history is now available in a new single merged repository (no submodules). They have also been moving to a bazaar style of development, where changes are being made in the open.\nIf this was one of the issues stopping you from using famo.us before, it might be a good time to re-evaluate that decision.\n. I personally have a rule of thumb that it's not ok to write anything in coffeescript that ever needs to be require()'d by anyone else's code. This is really something that can be handled by the community too.\nI actually built something using the seed repo from this article :\nhttp://pem-musing.blogspot.com/2014/04/famous-with-gulpjs-and-browerify-in.html\n. Backbone doesn't really have dirty flags per se, but rather a simple event emitter that the Model.get and Model.set explicitly trigger events over. Part of the reason it's so boiler-platey, is that there's no way to propagate events down through these chains, because there's no real concept of there being an actual tree.\nAngular uses actual dirty checking, through the scope mechanism. When you enter the directive it gives you a new scope with the prototype of the parent, and when you exit the digest() method runs and does a diff between the two. Anything that has subscribed to it will be notified and can re-draw.\nI have considered the getters and setters too, but there still has to be something that needs to tell this thing to redraw. I suppose in animation means the render loop can trigger it, but at that level it's also just something pointing at the right scope (which is what angular hands to the surface/directive, layered through prototypes.. as i currently understand it, of course).\nDo you filter the changes that are given to the browser on each cycle to only have the surfaces that changed, or do you have all the coords of all the surfaces passed through all the time? Would it not be possible to attach a reference or getter to a data object onto the surface/container/whatever, that can be checked in a similar way? That's just a thought, though.\nI don't know enough about how react.js works yet, but for diff tools: what comes to mind immediately is share.js. It's an operational transform layer developed by one of the creators of google wave, with the help of the derbyjs people. It can do diffs of json objects and merge concurrent changes over realtime communication channels.\nwarning: this is the point it gets really philosophical\nOne of the most difficult problems I see coming out of all of this, is addressability. I dont know enough about the internals yet, but I think you are using references to surfaces to drive it. You will need some form of way to map a change that comes in over the transform layer, onto a surface/whatever.\nSince you aren't getting a reference in, you will need  some form of string representation of the path, which means id attributes that are incremented/randomly generated if not specified, which means you will need some form of mapping the scene graph to a hash, and maintaining that hash as things are added/removed.\nAnd once you get there the next intuitive leap is to have some way to address a subset of surfaces/containers... either through a higher level .filter or .map on the hash, or through some form of selector string (which could just be a curried filter() constructor...).\nand you've now managed to re-invent both CSS and the DOM. A simpler and more functional (fp and real world) version of course, but this is the same line of thinking that probably made it head off in it's current direction.\n\nThere are many many interesting problems here, that could have some really fun solutions too. The overlap between famous and the existing libraries is kind of big (on a deeper data structure, not surface api level), which means that keeping those in sync is going to be a source of lots of non-trivial bugs.\nI think the trick is going to be trying to do less. \n. Famo.us does one very specific thing. It doesn't have to do everything, but rather can play nicely with most things. I have heard it works pretty well with React, but I don't know if that has been released.\nMy personal opinion is that data-binding all the things by default (especially 2-way) is a pretty intense assumption to be making for everything. Have you tried getting by without it?\n. I don't know. but it's a fair question. Have you checked the FAQ ( part1, part2 )?\n. The event system is completely capable of doing everything backbone can do, for what it's worth. So at a base level, you can build everything that you could build with that, if you just did some binding manually.\nLike I said, personally, I don't care much for the whole automatic data-binding library angle, and I don't really find that I need to use one very often.\nI guess I just have a high tolerance for boilerplate.\n. I tend to not do much data binding at all. I use the models and then aggregate events as needed.\nViews have events that trigger changes in the state, Views are signed up to events generated by model changes. Changes are propagated via that chain.\nSo I guess I still do binding, but it's more of a per-case manual process.\n. we can close this. i will bring it up again when the time is right =)\n. hear hear. \n. well, it's from the initScaleModifier, I think.\nvar initScaleModifier = new Modifier({\n    transform: Transform.translate(0, 0, 300)\n});\nNow imagine this on a 3d plane. Your mouse is moving around on x, y, 0.\nWhen the surface is on that level there is a 1:1 match in movement.\nWhen it is 0, 0, 300. The surface floats 300 pixels up towards the camera.\nThe movement of the mouse is therefor going to be amplified around the\nperspective.\nSo unless you can figure out a way to make the mouse movement be\namplified by the same amount, I think this is the expected behaviour.\n. The perspective is how many pixels higher than z=0 your camera is.\nSince your perspective is 600, that would mean the surface is floating around halfway between you and the origin.\nAs for the calculation, I honestly don't know what it would be. Suspect it involves trig though. Maybe there's something in here for you : https://github.com/Famous/math/blob/master/Vector.js\n. I was just providing some support, I don't know if there was an actual bug involved, or if it should be a feature request.\nI'd venture you can close it and we can deal with it if it comes up again. There are no next steps here.\n. What is the worst outcome of just not doing any of that to begin with?\n\nI prefer making monkey-patching extra ugly (forcing people to think of more clean solutions that fit in the framework), than to sacrifice code quality and usability.\n\nYou don't have direct control over the quality of your user's code, but by choosing to use protected methods you are actually making it more likely for them to end up with broken results.\nThis is also something you are doing extra with the intention of stopping people from doing things. Your code would be simpler if it didn't try to do something you have no way of enforcing (and IMO, no real reason to).\n. just to clarify: i pinged @kof on irc about this because I knew it was important to him.\nwe were discussing it when I pulled that last link out of stackoverflow to find existing examples of conventions in the javascript community.\n. Only the layout and some parts of the front page seem to be running with famous, but the content itself is just standard css positioning.\nI'm pretty sure the scroll view is one of their highest priorities to fix, and I suspect the site being updated is the precursor to a new release.\nRolling a special version is a bit of a misnomer, as I think they are just using their unreleased master branch on the site.\n. That project is out of date, but has a pull-request from @TheAlphaNerd that updates it to 0.2.2.\nI have a fork that has it applied here - https://github.com/Vertice/famous-react\nThere is also an index.js in there that has an example, iirc.\n. iirc, it only showed up for me on the second lesson i take.\nso first lesson after reload is fine, but when i complete, or go back to the university listing\nand choose another one, the scrolling is broken.\nmaybe the surfaces/handlers aren't being cleaned up properly on transition?\n. I actually had somewhere this would have been really useful. Well, as long as you make the .on method chainable too.\nexample :\nMyView.prototype.getProfileIcon = function(uid) {\n    var icon = this.getIcon('profile', '/profile-scale/' + uid);\n    icon.setSize([32, 32]);\n    icon.on('click', _.partial(redirect, site + uid));\n    return icon;\n};\ncould have been : \nMyView.prototype.getProfileIcon = function(uid) {\n    return this.getIcon('profile', '/profile-scale/'+uid)\n        .on('click', _.partial(redirect, site + uid)\n        .setSize([32, 32]);\n};\nThe sorting lines in descending length thing is probably part of my\nparticular form of programmer's OCD.\n. @malandrew had some interesting ideas around an immutable data structure like mori. where it has streaming checksums it calculates all the way down the tree, so you can can just see those to know that anything down the line has been changed.\nactually, there's probably dozens of algorithms that do this.\n. any progress on this? it seems kind of important.\n. So a couple of times it's felt to me like I really wish I could just use different behaviours like mixins.\nWhen creating a view say, what's stopping you from mixing in RenderNode or EventEmitter or whatever. I'm thinking in terms of backbone-land, where I spent a lot of time living.\nvar MyView = View.extend(RenderNode, Modifier, {\n        initialize: function() { }\n};\n. I think the famous-react stuff will also get pretty close to this, once you have jsx involved.\nthey also have lots of cool tools for live editing.\n. oh and btw. something like this can comfortably live in user-land.\nso why not just build it out and see if it works for you?\n. It also allows for one of my favorite types of sugar : partial application.\nThe implication here is also that the scene graph is no longer serialisable, but I think that it just mirrors the reality better now.\n. This imperative/declarative distinction is probably why stuff like famous-angular and famous-react is even really possible/practical\nI have had to stop myself from using imperative/declarative in quite the way I meant this before though. It's more of a distinction that the base API isn't a DSL, but rather something you can build a DSL on top of.\nTrying to build your base API using a non-turing complete structure eventually ends up with you re-inventing a real programming language inside the host language, using your config structure. It's called the Inner-platform effect, and having fallen down that hole before, i can promise it's not fun.\nThat said, I don't think there is anything stopping you from being able to build a 'declarative' layer on top of the 'imperative' one. I just don't think something like that is something that necessarily even has to be part of the core api.\n. speaking of. it's kind of annoying to have to put in a modifier everytime you want to ensure something is layered correctly. perhaps a little bit of sugar is appropriate here? (similar to the size: property)\n. I think leaving it up to the browser is kind of non-deterministic, prone to change between browsers and versions, and is not going to be applicable to different renderers etc.\nWe ended up building a config.js that returns json object with all our hardcoded values, and then having explicit modifier for everything we wanted to move around.\nmodule.exports = {\n    // z-index values.\n    layers: {\n      frame: 100,  note: 200,  overlay: 300,\n      menu: 400,  globalNav: 500,  welcomeBar: 600,\n      modal: 1000,  eventCatcher: 1000,\n    }\n };\nSo it is definitely something you can fix by just adding some sugar.\nThe biggest pain point here is having to define the whole translate\nset in the transform, and it being generally awkward to build multiple\ntransforms into single modifier.  \nIt would have been better to be able to chain calls to transform like this :\nvar menu = {\n  surface: new Surface(),\n  modifier: new Modifier()\n};\nmenu.modifier.transform\n  .translateZ(config.layer.menu) // don't be forced to set the whole thing\n  .translate(watchTransitionFn);\nI'm also not sure if the layer popped beneath it's container on some redraws,\nbut i suspect that might be one of the reasons we switched to ContainerSurfaces\nearly on. That should definitely be fixed if it is broken.\n@pilwon @TheAlphaNerd @talves \n. but it works fine! ... on osx.\nuntil you deploy.\n=|\n. >  Especially, since we asked Famo.us for the email list. In my opinion, this just creates more work for the core development team\nThis is a documentation issue, and I have brought this up on the mailing list before. \nLet's keep the discussion here slowly about the issue at hand.\nTo illustrate one of the ways a project can leverage a mailing list in addition to an issue queue, I have taken the meta-discussion onto the list about how the community should interact with the project.\n. nice. what's cool about chaining on methods is that it gives you a pretty expressive way to wire up things, that doesn't involve huge declarative structures.\nvar surface = new Surface();\n surface\n     .on('click', redirect('site.com'))\n     .on('mouseenter', this.throb, this)\n     .on('mouseleave', this.halt, this);\n. is this the latest version of the scrollfix, as was in @dmvaldman's scrollview branch?\n. so i was using dvaldman's branch in development, and I switched to this one now.\nI am not sure I can tell the difference tbh, but I think part of that is because I don't know what changed and thus don't know what to look out for.\nperhaps the changelog should be updated?\n. I had a great chat with wgester, and i've been using this branch for the whole day now.\nit's really lovely, and i haven't had any problem from the related changes.\nI think this needs to be committed and have subsequent issues resolves. We need to make progress on the 'i knew it was famo.us because scrolling was broken' front, if we want to help this project achieve it's full potential.\nWe should also all remember that version control means you can relax.\n. well. this is embarrassing, i was using the famous version of this, thus not the latest code.\ni'm testing it now, and although I ran into a small issue with images that i didn't specify the size of, it seems to work well.\n. what would really help here is a very simplified test case. I guess it could be in a jsfiddle or something similar.... for now... while we figure out how to test this stuff automatically.\n. I don't know if energy should be spent on an engine that has officially been discontinued.\nIt's market share will bleed, as the people who own those devices replace them with new ones.\nIt's just not a growth opportunity, imo.\n. disclaimer: i am not affiliated with famo.us at all. opinions are my own.\nI think there is a distinction here about Famo.us users' (the development community) and the users of the applications developed using famo.us. Famo.us wouldn't be telling your users to do anything with their devices.\nAs someone developing applications, it is up to you to choose technologies that are able to reach your target audience. Presto is not a supported platform, and due to it's status it is unlikely to become one (imo).\nI think it is a fair assumption that you should not be building an application with famo.us if you are intending to reach an audience that is largely confined to Presto, without at least the option of using a different browser.\nYou aren't powerless in this situation though. Famo.us is an open source project, and I can promise you that famo.us (the company) hasn't gone out of their way to break support for presto. I'm certain that they will happily accept patches that improve support.\nPresto is actually pretty great about standards, so it shouldn't be too hard to get things running at least.\n. Just use webpack.- it makes it so it's completely irrelevant-\nhttps://github.com/markmarijnissen/famous-webpack-seed\n. @OlenDavis this is about keeping the tone of the conversation civil and respectful, to ensure that everybody is comfortable contributing to the project without fear of being criticised.\nPlease keep that in mind when posting on the issue queues.\n. @StephanBijzitter your hashmap implementation doesn't have the event emitter / pipe functionality, which is actually super super useful. It should allow you to use the optionsmanager as a replacement to backbone models (sans the rest-ey bits), by setting up event relations.\n. wouldn't it be possible to do this by hand using the options manager?\nfunction AppView() {\n  View.apply(this, arguments);\n  this.transitions = new OptionsManager();\n  this.transitions.set('sometransition', require('famous/transitions/Spring');\n}\n. @tgsuarez could you provide us with a list of browsers you tried it on, and the exact pages and section you were trying to scroll that did not work.\n. what pointing device were you using? mouse (+touch) or touchpad?\n. oh, and which os?\n. sighs. you don't have a scroll wheel, or a touch device, do you ?\n@TheAlphaNerd there are still no keyboard bindings, or a scrollbar on the university.\nyou can't even select text and drag without those.\n. ...must.resist.gay.subculture.reference...\nAnyway. let's just keep this open and tag it to be re-evaluated when the site launches.\nwhich reminds me ... #226\n. This is actually something I think the community could help with. We have a whole mess of jsfiddles and stuff between us.\nIf the latest examples were around, and we had some kind of checklist / process to follow, i'm sure we could get some of these things filled in.\n. Yeah. I just meant we could curate some of that stuff to help fill in the gaps.\n. @TheAlphaNerd was this fixed with the new uni?\n. so how about sharing those ideas with the list?\n. zuul seems kind of nice for frictionless client side testing. Also supports travisci integration.\nI've run into at least 5 bugs in the last week that would never have happened with even the most basic tests in place.\nthe codebase is small, let's just make tests a community focus for the next release?\n. Maybe call it StateManager and just do this.options = new StateManager?\nAnd then make the documentation slightly more general?\n. +1 for reverting it.\n. ping?\nwas just confronted with this again. it's really counter-intuitive.\n. @dcsan could you give us a patch / snippet / gist for posterity ?\n. I actually ran into this the other day.\nif this was fixed you would be able to just do require('famous') and be done with it.\n. umm. do you have any idea how many mice there are in the world?\nanyway, i didn't exactly notice too much off about it, but i've since switched to a wacom tablet, so i don't even know anymore.\n. @marklu @TheAlphaNerd @michaelobriena any news on this ?\nit'd be kind of sad that this didn't make it into 0.3.0, and if it is now delaying the react integration from being able to support this release.\n. You should check out this branch if you have any questions about scrollviews -\nhttps://github.com/Famous/famous/pull/234\nIt has a vastly improved api, and generally works a lot better.\n. isn't this what transitionables are for?\n. I'm actually experiencing some text issues when using this branch, with an added wrinkle that I was using famous/core/famous.css, and not famous/dist/famous.css.\nThe performance is definitely much increased though, I'd love if there was a way to prove that with numbers.\n@marklu can you explain a bit more about what might trigger the fuzzy text? \n. This demo has no relation to the codebase of today, so is not going to be available.\nThey mentioned rebuilding it a few months ago, but we haven't seen the new version yet.\nhttps://github.com/Famous/famous/issues/128\nhttps://github.com/Famous/famous/issues/237\n. ping @TheAlphaNerd. any update?\n. It would be cool if you guys were to open the source earlier, like you did with the famous-react code, so that we can see how it evolves and possibly help out where need be.\n. so basically the render tree should be a virtual dom?\n. ",
    "komocode": "+1\n. ",
    "SuhasYS": "+1\n. ",
    "okossa": "+1\n. thanks for your reply\n. ",
    "chrisribe": "+1\n. ",
    "snewcomb": "What's this?see below. \n\nSteve Newcomb\n(415) 290-0787\nsteve.e.newcomb@gmail.com\n@stevenewcomb\nwww.blognewcomb.com\nOn Apr 10, 2014, at 7:01 PM, ChrisRibe notifications@github.com wrote:\n\n+1\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ziodave": "PS: I tried e-mailing license@famo.us, but I got the following error, '550-5.1.1 The email account that you tried to reach does not exist'\n. That's great, thanks @malandrew\n. ",
    "rezen": "Great question!  Reading about it  more about MPL it's compatible with GPL by default. http://en.wikipedia.org/wiki/Mozilla_Public_License\n. ",
    "sun2rise": "ok, i had GIT installed but nothing was added to my PATH environmental variable!\nnow everything works!\nthanks a lot!\n. the material on famousco.de is the material of the community and for the community, available every time if the jsFiddle user does not delete the fiddle... but i have a copy of most of them just in the case\n. Hi guys, any news about this one?\nthank you!\n. ",
    "plainspace": "Reproducing this fyi.\n. Not sure I understand. I have access and I'm logged in.\n. ",
    "jhurliman": "I ran into this same problem (OSX 10.9.2, node.js 0.10.24, bower 1.3.2) and fixed it by replacing the two git@github.com:Famous/... URLs with https:// URLs.\n. @zgardner That's exactly what I did. Created a pool that allocated one Modifier and one Surface per allocation. It's not finished, but take a look at https://gist.github.com/jhurliman/10964644\n. ",
    "teejayhh": "Sweet that sounds great :)  thx guys. \n. for everyone with the same problem please follow these instructions ! https://help.github.com/articles/generating-ssh-keys. Generating the keys fixed it for me. \n. ",
    "BurcaCiprian": "Actually is still not working, I have updated the keys a couple of times:\n[image: Inline image 1]\nNot sure if this is right but if I run from the gith bash the following\ncommand:\n$ git ls-remote --tags --heads git@github.com:Famous/famous.git\neverything looks ok:\n[image: Inline image 2]\nOn Fri, Apr 11, 2014 at 10:29 AM, teejayhh notifications@github.com wrote:\n\nfor everyone with the same problem please follow these instructions !\nhttps://help.github.com/articles/generating-ssh-keys. Generating the keys\nfixed it for me.\n\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/13#issuecomment-40177461\n.\n. \n",
    "antont": "yes and i signed it too, thanks for info.\nOn Fri, Apr 11, 2014 at 9:05 PM, Andrew de Andrade <notifications@github.com\n\nwrote:\nWe'll fix this as soon as we have a web-form based CLA. For the time being\nCLA requests are being sent out via docusign. We sent you a CLA request\nusing the email on your pull request. Did you receive it?\n\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/14#issuecomment-40235987\n.\n. \n",
    "DrClick": "Transitionable is passive and is designed for the value to be asked for. Every time you ask for its value, it recalculates based on the time you ask for it. So, in your case, the callback function is executed the first time you ask for the transitionable value after the duration you specified. Here is an example of how to use it:\n```\ndefine(function(require, exports, module) {\n    \"use strict\";\n    //includes Famous\n    var Engine      = require(\"famous/core/Engine\");\n    var Transitionable = require(\"famous/transitions/Transitionable\");\nvar state = new Transitionable(0);\nstate.set(100, {duration : 500}, function(){ \n    console.log(\"Hey\"); \n});\n\n\nEngine.on(\"prerender\", function(){\n    state.get();\n});\n\n});\n'''\n```\n. InkaBinka is built using famous it's in the App Store. Full disclosure, I am the lead developer.\nSent from my iPhone\n\nOn Jul 6, 2014, at 7:22 AM, \"Eslam A. Hefnawy\" notifications@github.com wrote:\nI doubt there's much apps out there that are built with famo.us yet (if any). You best chances are the demos in the website. Famo.us is still young.\n\u2014\nReply to this email directly or view it on GitHub.\n. Using Cordova. It's relatively straight forward but does take some learning if you are not accustomed to authoring apps.\n\nSent from my iPhone\n\nOn Jul 6, 2014, at 7:25 AM, \"Eslam A. Hefnawy\" notifications@github.com wrote:\n@DrClick wow! how did you get it up on the app store?!\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah!!!! It's coming! I saw it when I was at famous last week!\n\nSent from my iPhone\n\nOn Jul 25, 2014, at 10:52 PM, quanghoc notifications@github.com wrote:\n@DrClick thanks for the nice work although I still have problem with scrolling not too smooth\n\u2014\nReply to this email directly or view it on GitHub.\n. I set a visible property on views and surfaces and override the render method to check for visible and if not, just return undefined. This has worked really well for me.\n\n-Thomas\nOn Aug 11, 2014, at 1:04 PM, Mark Lu notifications@github.com wrote:\n\nThere should definitely be a layer that allows for removal of RenderNodes, but that layer should be at a separate layer of abstraction.\nThe thing with RenderNode is that it makes something as non-trivial as overriding a key function, such as render, seem trivial when it's actually conceptually complicated.\nI find that when most people want to mutate RenderNodes, what they should be using instead is a combination of some sort of collection (i.e. ViewSequence) and collection view (i.e. FlexibleLayout).\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "afroradiohead": "thanks\n. ",
    "raoyv": "Windows Registry editing fixed the font thickness issue for me completely, we can tune the font thickness/darkness by calibrating  FONTSMOOTHINGGAMMA  value to between 150 and 190 hexadecimal( 336 to 400 decimal )\n-     START  ->  RUN  ->  REGEDIT\n-     search for  FONTSMOOTHINGGAMMA   by  keying  \" Ctrl F \"  ( will automatically take us to  CurrentUser\\ControlPanel\\Desktop  path)\n-     double-click mouse on  FONTSMOOTHINGGAMMA    enter anything between 150 and 190 hexadecimal.(the Lower the value, the thicker the fonts.)\n-     close the REGEDIT tool\n-     LOGOFF and then LOGON\nNow all the fonts are very thick & very dark in Chrome Browser.\nBut we must make sure that ClearType smoothing is enabled in Windows( controlPanel  ->  personalization  ->  appearance  ->   Effects   ->      ClearType smooth check [ ticked box ] )\n```\n                     OR  alternately in RegEdit ...\n     FONTSMOOTHING=2\n     FONTSMOOTHINGTYPE=2\n     FONTSMOOTHINGORIENTATION=1  for LCD-screen,  0 for CRT-screen\n\n```\n. ",
    "j-feld": "If you want early access to the Angular/Famo.us integration, you can also participate in our onsite beta program, Famo.us Labs. More info and an application here: \nhttps://docs.google.com/a/famo.us/forms/d/1-Zq5Bit9E_1vlQtSNl_Ef6t6NkEpg3sPnc2rS28g10Q/viewform\n. @TheAlphaNerd How about this:\nFamo.us is a powerful JavaScript framework designed to build rich, interactive web applications. It is the only framework that provides an open source 3D layout engine fully integrated with a 3D physics-based animation engine that can render to DOM, Canvas, or WebGL. Famo.us is currently in public beta.\n. ",
    "maggialejandro": "thank you guys !\n. Hi Michael! \nIs there a repository for those demos? I can not log into the website, when I try the response is \"Error! undefined\"\n. ",
    "gabrielstuff": "It is all here. As for references : https://famo.us/integrations/angular/ and there : https://github.com/Famous/famous-angular\n. ",
    "pfalcon": "Thanks!\n. ",
    "jodyheavener": "Looks great! Would love to see this with Backbone as well :)\n. Oh beautiful. Thank you!\n. I'd also be interested in seeing a version that doesn't use require.js.\n. ",
    "TonyHsieh": "Hi -\u00a0\nAssuming you are not still on the waitlist still...\u00a0 Try a different browser to log into http://famo.us.\nInternet Explorer gave me a similar error. \u00a0Chrome didn't.\nThanks,\n\u00a0 -- Tony\n\nFrom: Alejandro notifications@github.com\nTo: Famous/famous famous@noreply.github.com \nSent: Tuesday, April 15, 2014 11:40 AM\nSubject: Re: [famous] Meteor.js + Famo.us (#23)\nHi Michael! \nIs there a repository for those demos? I can not log into the website, when I try the response is \"Error! undefined\"\n\u2014\nReply to this email directly or view it on GitHub.\n. ",
    "gadicc": "Ooh, almost missed this.\nFamono is awesome to get Famous into a Meteor project (big props to raix!).  But the story doesn't end there.  Coding Famous directly with lots of JavaScript is very un-Meteor like.  I've been working on an integration library, that tightly couples Famous with Blaze Components:\nhttps://atmospherejs.com/package/famous-components\nYou get to do stuff like this:\n``` html\n    {{#Scrollview size=\"[undefined,undefined]\" items=items}}\n        {{#Surface size=\"[undefined,80]\" class=\"margin10\"}}\n            Scrollview Demo\nScroll to bottom to see source\n        {{/Surface}}\n    {{#famousEach items}}\n        {{>Surface template='listItem'}}\n    {{/famousEach}}\n\n    {{>Surface template='Scrollview_source' size=\"[undefined,280]\"}}\n{{/Scrollview}}\n\n```\nAnd the only JavaScript you need is Template.Scrollview.items = function() { return Items.find();.  More examples in the README.  All fully reactive.  Works out the box with iron-router.  Views and modifiers with their options can be set as component attributes.  And Famous objects are accessible for manipulation from Template.rendered and Template.events callbacks as one would expect.\nLive demo with code snippets:\nhttps://famous-components.meteor.com/\n. Yeah, I don't think a purely front-end framework should be responsible for serving stuff.  What about using Meteor?  It has great CoffeScript support (including source maps), with live reload on file change.  It's also very modular so if you don't want the full stack you could remove e.g. the templating and database code.  So it's install; create project; add famous; remove superfluous modules.  4 lines to type :>\n. @malandrew, awesome, thanks for the detailed explanation.  Indeed, I hadn't realized any of that and it's great to get a clearer picture of where things are headed.\n. I don't know how it works in Angular, but you can set the content of a surface to a DOM element.  So you could also record relevant parameters from that DOM element (size, position, etc), detach it from the DOM, and then have Famous reinsert it for you as part of a Surface.\n. Not sure about context's, but as for modifiers/views/surfaces, I asked this on stackoverflow and the answer was very helpful:\nhttp://stackoverflow.com/questions/23087980/how-to-remove-nodes-from-the-render-tree\nWhat worked perfectly for my use case was to create a mini \"View\" from which all descending children can be detached and then cleaned up by the GC.\n. Sure, no worries at all.  And, very cool that you guys are keeping an eye out on what's happening in the wild :>    Appreciate the attitude and offer of assistance.\n. np :)  i felt a lot less comfortable than usual submitting this one, i mean, everything works and it fixes the problematic behaviour, but there were a few places where I wasn't so sure why things were being done a certain way.  i'll get more familiar with famo.us thinking and practices in time, but until then, won't be offended in the least if this can't be accepted as is.\n. Hey!  Sorry for the late reply.. thanks for looking into this and for the explanations, which are appreciated as I find my feet here :)\nMost importantly, yes, that PR fixes the main issue here, and is the same fix that I used.  Seems it squeezed past my searches for setSize and true, my bad :>  So yeah, I'll be very happy to see that committed, and am happy to consider this one closed.\nSome other things from this PR that you still might want to look at, but that don't cause any problems and are not urgent:\n1. In that loop (for each axis), the inner conditional checks if this._size exists before using it, but the outer containing conditional doesn't :)  Since that never actually seems to throw an error, I guess you didn't need the inner check either :>  And possibly the same elsewhere, that's what led me to change the logic/order a little.\n2. In that same section, I'm still not sure why it's important to set size AND _size + _sizeDirty where just below in if (_xyNotEquals(this._size, size)), _size and sizeDirty will in any case be set if any difference exists.\nAnyways, like I said, not really an issue, but, always nice to clean out superfluous code :>\n. I'll jump in here... I'm happy for this to be closed.  Just take a quick peak about what I was talking about so you're aware of it.  But it doesn't fix anything and won't have a major impact.  I think we can save optimizations for after we have a test suite to avoid regressions.  Any word on that? :)\n. p.s. crosshairs on page 7 too :)\n. ",
    "raix": "Great work @gadicc :+1: \n. Sure Myles, could do - \"Meteor and Famo.us integration\" at https://groups.google.com/forum/#!topic/famous/ZCFWW_E1s28\n. Should be signed/ok now\n. Its resubmitted - what went wrong since it got reverted?\n. Bugger I guess I'll have to revert my update on meteor talk and reopen the famono issue - it breaks integration at the moment.\n. no prop, just extra work for me :) Ive created a famono branch on my fork merging #160 + #162 \nFor now famono will just use this instead of the official famous repo - cuts down need for trivial support.\nMorten\n. Sounds good guys, let me know if i Can be of any help\n. Why isn't polyfills in the flattened repo?\nsimply have a dist with/without\n. I feel like I'm missing out on the concepts (feeling a bit stupid at the moment, trying to follow)\nSo context.add(new famous.core.Modifier({align: [.5, .5]})).add(renderController); = context.add(renderController).add(new famous.core.Modifier({origin: [.5, .5]}));?\ncontext.add(new famous.core.Modifier({align: [.5, .5]})).add(renderController);:\n\ncontext.add(renderController).add(new famous.core.Modifier({origin: [.5, .5]}));\n\nAll in all, I'm just trying to recreate having the box dead center on the screen :)\n. Thanks @michaelobriena I'll check it out\n. ",
    "rajnathani": "That wouldn't be great design :)\nThe currently disabled options are enabled for developers who have access rolled out to them.\n. Oh. Now that I see the navigation on my login, I notice the problem.\nThere is clearly a problem.\nOn the Docs the 3 currently disabled links need to be updated to be enabled!\n+1!\n. ",
    "jpcamara": "Have you tried using https://github.com/jaredhanson/deamdify?\n. ",
    "mizchi": "Oops, closing and reopen  are my faults.\nI tried deamdify now.  Thanks to @jpcamara .\nI need to rename to famous/ to ../ for example require('famous/core/Engine') to require('../core/Engine')\ndirs\nfamous/\nmain.js\nAnd exec browserify -t deamdify main.js -o bundle.js makes bundle.js. yeah!\nmain.js is here.\nvar Engine = require('./famous/core/Engine');\nIt works but need many procedures. (and need to merge manually after that)\nI tried aliasify but looks not active to AMD.\nAnyway, if this way are refined, common.js users can use famo.us easily but only common.js users. Almost develpper can't choose their own building system under constructuring.\nMy point of view is current using way is only for requirejs. I think providing all included file are easy to use if famous can.\n. @aelr Great!  And I created global namespace version by use your modules.\nhttps://github.com/mizchi/famous-bundled\nWhat I want is this repository's famous.min.js. It is fork so I can't maintaine.\n. :+1:\n. ",
    "jdiaz5513": "browserify-ftw worked wonders for me; you only need a minimal config to get it working.\nMake sure there's nothing else in your working directory besides the famous folder before you do this, or browserify-ftw might mess with them too! Create these three files in the directory containing the main famous folder:\nrequire.js\nrequire.config({\n  paths: {}\n});\nentry.js\ndefine([],function(){});\nconfig.js\nmodule.exports = {\n  indent: 0,\n  dryrun: false\n};\nThen run browserify-ftw -r require.js -c config.js -e entry.js.\nIt'll transform all the files in place (and create a few extra files outside of the famous folder). You can delete all the extra files when you're done. \nWhile this works, it sure as hell is clunky so I might start working on forking a brunch skeleton for Famous that uses the CommonJS format.\n. The indent behavior for me was odd.\nI was expecting {indent: 2} to refactor all the code to an indent spacing of two, but instead what it (appears) to do is leave the require statements at indent level 0, and then everything below it got an indent of 2. I don't really see how that is useful at all?\nThe browserify-ftw command-line would be super useful if it had an option to just target a specific folder in \"library mode\", with the above config implied. No main entrypoint, do not generate browserify bundle build files, and add a flag to disable dryrun so you don't need a refactor config file either.\nIt should be as simple as this: browserify-ftw --library --folder famous/ --dryrun false\nI'll have to look into using browserify-ftw as a library, maybe that'll be illuminating (I was assuming it was just a CLI tool).\n. I agree wholeheartedly with the current approach to modularity.\nI was considering writing up a style guide type example of how to subclass a View using CoffeeScript's class syntax (which, btw, was pretty easy to do), but am deciding against it because I think it is ultimately detrimental.\nPart of the beauty of the modular approach is that you can just drop in someone else's View code and start using it (assuming they didn't drag in dependencies outside of Famous).\nDespite being a CoffeeScript afficionado I've been writing all my Famous code in vanilla JS for this reason. Anyone worth their salt in CoffeeScript should know how to write good JS, anyway. :)\n. I disagree that this is an internal issue.\nYou should, where it matters, be passing around the sender in the event data. Additionally, I usually namespace my events with colons when the name of the event could be ambiguous. All \"click\" events should be expected to have the same payload, for example.\nThat means your emit calls should look like this:\njavascript\nthis._eventOutput.emit('video:playbackStatus', {sender: this, playing: true});\n. ",
    "aelr": "@mizchi  @jdiaz5513 I put together a port of Famo.us to CommonJS  here: https://github.com/aelr/famous-commonjs\n. @substack Do you have any ideas of how a CommonJS port could be used through npm where:\n1. Only the Famo.us modules in use are loaded\n2. You don't end up with relative require calls into node_modules (e.g., require('../node_modules/famous/core/Surface')?\nAs far as I'm aware it's not doable.  But it would be great if the require calls could be the same as what is currently used for RequireJS (e.g., require('famous/core/Surface')).\nUntil a better solution is found, I'm maintaining a CommonJS port and using it through Bower.  As @TheAlphaNerd said, it was pretty trivial to convert.  My require calls look like: require('../lib/famous-commonjs/core/Surface').\n. @substack Amazing.  I'd not yet seen a module that utilizes that functionality, so didn't know it worked that way.  So then, a CommonJS port of Famo.us makes much more sense than I thought and could be used via NPM or Component in the same way as the Require.JS implementation.\n. Of all of those tools (webpack, browserify, commonjs-everywhere), I could only get browserify to work on Windows with watching.  It's what I'm using now.\n. For now, you could add this to your package.json file:\n\"famous\": \"git://github.com/aelr/famous-commonjs.git\"\n. ",
    "qrg": ":+1:\n. ",
    "CharlesVoita": "You also have to keep in mind that if the containing element has preserve-3d and is rotated, you must account for rotation; therefore you'd have to calculate based on a surface's distance from a global world point which would require some math. This isn't really an issue now for anyone interested in supporting IE, but may bubble up in the future.\n. Apologies!\n. ",
    "marcvdm": "after allot of searching online i found that you can set the path to famous in the require config. so this actually fixes my problem.\njs\nrequire.config({\n    paths: {\n        famous: './vendor/famous'\n    }\n});\nBut maybe it's still better for dependencies to load relatively from the file that is requiring the dependency\n. i mean something like NativeView/WebView where you can put ordinary html/javascript in.\nThen the NativeView/WebView would have scrolling like a native browser would have.\nCurrently you cannot touchmove a div with overflow: scroll because in the Engine.js it prevents the touchmove event.\n. ",
    "hinablue": "Do this way maybe can solve your problem,\n``` js\n    var background = new Surface({\n      content: 'hello second',\n      properties: {\n        color: 'white',\n        textAlign: 'center',\n        backgroundColor: '#FA5C4F'\n      }\n    });\n    mainContext.add(background);\nvar foreground = new Surface({\n  content: 'hello first',\n  properties: {\n    color: 'white',\n    textAlign: 'center',\n    backgroundColor: '#FA5C4F'\n  }\n});\nmainContext.add(foreground);\n\n```\nIn the source code of the Context, the RenderNode is an array to save your Context you added. So, if we use the add in the very last of the process, the Context will be pushed into the RenderNode by random, I guess.\nIn the JavaScript runtime process, I do not know how it allocated the variables or array in the memory, so I think that's randomly to push your Context into the RenderNode.\nHope it can help you.\n. Or you can use SequentialLayout, like this,\n``` js\n  var Engine = require('famous/core/Engine');\n  var Surface = require('famous/core/Surface');\n  var Utility = require('famous/utilities/Utility');\n  var SequentialLayout = require('famous/views/SequentialLayout');\nvar surf, surfs = [];\nsurf = new Surface({\n    size: [100, undefined],\n    content: 'background'\n  });\nsurfs.push(surf);\nsurf = new Surface({\n    size: [100, undefined],\n    content: 'frontend'\n  });\nsurfs.push(surf);\nvar senquentialLayout = new SequentialLayout({\n    direction: Utility.Direction.Y\n  });\nsenquentialLayout.sequenceFrom(surfs);\n  mainContext.add(senquentialLayout);\n```\n. ",
    "zgardner": "@dmvaldman That means my idea of a SurfacePool in https://github.com/Famous/core/issues/7 will not work. I would have to have a SurfaceModifierPool that adds a modifier along with a surface to keep the algorithm in sync.\nI haven't implemented anything yet, just thinking through it.\n. ",
    "tvararu": "I'm interested in this as well. Or rather, destroying a context.\nI did discover by digging into the source that surfaces get pushed into the private entities singleton, but since it's private there is no way of interacting with it afterwards.\n. That's fair, I'll just use Chrome for now. Thanks!\n. iOS8 now has WebGL enabled by default. I remember reading a question in the second FAQ that mentioned how you are \"waiting on Safari [iOS]\" to switch gears to WebGL.\nIs there any internal work done on this? A proof of concept branch, or something that the community can pick up and improve upon? More importantly, should we bother starting up a Famo.us + WebGL implementation from scratch or will you guys be announcing something in that respect anytime soon?\n. ",
    "felske": "What about with using a scrollview? If I'm scrolling through a large data set and continuing to load in more and more views & surfaces how do I stop it from hitting the ceiling / limits?  What the best way to remove and add smoothly within a scrollview?  Thanks!\n. ",
    "DenisGorbachev": "Did that)\n. ",
    "reem": "Just updated generator-famous and made a brand new project:\n\n:(\n. I'm not 100% sure what to check, but it appears that everything is a round pixel value. Here's everything just in case:\n-webkit-backface-visibility: hidden;\n-webkit-font-smoothing: antialiased;\n-webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n-webkit-transform: matrix(1, 0, 0, 1, 0, 0);\n-webkit-transform-origin: 0px 0px;\n-webkit-transform-style: flat;\nbackground-color: rgb(255, 164, 87);\nbox-sizing: border-box;\ncolor: rgb(0, 0, 0);\ndisplay: block;\nheight: 50px;\nopacity: 0.9999989867210388;\npointer-events: auto;\nposition: absolute;\nwidth: 300px;\n. Nope. Latest chrome on OS X 10.9.\nOn Tue, Jun  3, 2014 at 11:46 AM, Andrew de Andradenotifications@github.com, wrote:\n@reem what platform are you running Chrome on? Is this Chrome on Windows?\n\u2014\nReply to this email directly or view it on GitHub.\n. Nope. Here's a gist with the minimum code necessary to reproduce this in chrome: https://gist.github.com/reem/11406427\n. ",
    "lunardog": "Are you using HeaderFooterLayout by any chance? \n. Surface.js source says DOM element is fine and even internally used. If you pass a string initially, the Engine will pass a DOM object when the surface is recreated.\n. See Surface.prototype.deploy. It checks if this.content instanceof Node. \n. That's possible. I can see how they may rewrite it to enforce strings on setContent and use another _setContent for DOM objects internally.\n. I would use a loop: \n```\nvar transforms = [\n  Transform.translate(50, 50, 0),\n  Transform.translate(100, 100, 0),\n  Transform.translate(150, 150, 0),\n  Transform.translate(100, 100, 0),\n  Transform.translate(100, 100, 0)\n]\nfor (var i =0; i<5; i++) {\nvar mySurface = new Surface({\n    size: [100, 100],\n    content: '',\n    properties: {\n      color: 'white',\n      lineHeight: '200%',\n      textAlign: 'center',\n      fontSize: '36px',\n      cursor: 'pointer'\n   }\n  });\nvar moveModifier = new StateModifier({\n    transform: transforms[i]\n  });\nmainContext.add(moveModifier).add(mySurface);\n}\n```\n. +1\n. No dist in bower works fine - as long as used with require.js\n. Here's a leak:\nhttp://disrupt.famo.us/periodic402/\nThe demos in the Famo.us starter kit are much better for learning though.\n. The hack I used is toggle a class on the surface.\nTriggering / emitting \"resize\" did nothing for me.\n. ",
    "Mike-EEE": "I might be have misunderstood, but based off a video that I saw published from Famo.us back in February, it seemed as if Famo.us was poised to offer its own view-management system, having to replace the need for Angular or other libraries.  Again, I might have misunderstood, but I do not see any guidance/examples of databinding and the like in the starter-kit.  Can someone point me in the right direction in showing how Famo.us manages complex views and extensive content?  Any assistance would be greatly appreciated!\n. Did you just ask me if I have tried getting by developing a legitimate application without the use of data-binding? ;)  Just yanking your chain.  Actually, I am still in analysis and putting all the pieces together here.  If you check out this video around the 06:30 mark, you will hear what I am talking about:\nhttps://www.youtube.com/watch?v=2usBtfg4Q1I\nSo, my understanding is that the \"MVC\" was supposed to be released with the \"MVP\"... but he clearly says that this was coming after the launch.  So, shame on me for misunderstanding.  \nNow, the question is (as this was back in February) if this is still the case (that Famo.us is going to launch their own MVC), or if the guidance now is to use Backbone/Angular for a MV* solution...\n. Thank you for the link.  I am familiar with the Angular integration.  However, if I have yet to learn Angular (which I haven't), and Famo.us is still planning to create their own MV* solution, then it makes more sense for me to wait until they do that.  Again, the question is (for my own edification, that is)... are they still planning on doing this?\n. I did see the first one, but not the 2nd, thank you.  I just read it.  There is only one mention of data-binding, soooo... to be continued, it appears.\n. Wow, so are you saying that you do all your databinding on the server side?  You'll have to forgive me as this is all new to me... I am with a MSFT-background, having spent many years in Silverlight (when that was supposed to be a \"cross-platform\" solution).  So, when you say you \"structured my code in such a way as to allow the largest amount of code reuse between the frontend and the backend\" ... that really resonates with me.  Unfortunately, that is completely impossible now with the MSFT stack, hence why I am here. :P\n. ",
    "meheller": "http://www.infoworld.com/t/mobile-development/famous-framework-gets-angularjs-integration-242782\nMartin Heller\n+1-978-464-1831 (Google Voice)\nOn Sat, May 24, 2014 at 5:26 PM, MichaelD! notifications@github.com wrote:\n\nDid you just ask me if I have tried getting by developing a legitimate\napplication without the use of data-binding? ;) Just yanking your chain.\nActually, I am still in analysis and putting all the pieces together here.\nIf you check out this video around the 06:30 mark, you will hear what I am\ntalking about:\nhttps://www.youtube.com/watch?v=2usBtfg4Q1I\nSo, my understanding is that the \"MVC\" was supposed to be released with\nthe \"MVP\"... but he clearly says that this was coming after the launch.\nSo, shame on me for misunderstanding.\nNow, the question is (as this was back in February) if this is still the\ncase (that Famo.us is going to launch their own MVC), or if the guidance\nnow is to use Backbone/Angular for a MV* solution...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/48#issuecomment-44100157\n.\n. It's just you. :(\n\nMartin Heller\n+1-978-464-1831 (Google Voice)\nOn Sun, Jun 1, 2014 at 4:36 PM, Luwen notifications@github.com wrote:\n\nIs it just me, or is the actual site itself not scrollable (Chrome,\nFirefox and Safari)? I've tried everything -- the unclickable scrollbar,\nup/down arrows, etc. How do people get to the docs or any of the content?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/87.\n. \n",
    "edgar-humberto": "@malandrew thanks for looking into this. \n. +1 Mac Yosemite Chrome 39.0.2171.71\nhere's the gist https://gist.github.com/thiswildorchid/1447ab6838cb6341e427\n. ",
    "mpj": "I'd love this, too. I really, really don't want to drag bower into my project just for this. \nAt Spotify, we use npm+browserify for everything and it's amazingly good. I had to do quite a bit of welding to get it into a browserify project. If releasing to npm was part of your release process, this would be solved once instead of us all inventing different solutions to get it to work. \nRight now, here is how I hack around it, for anyone interested:\ninstall_famous.sh\n``` bash\n!/bin/bash\nTemporary hack until Famo.us comes to their senses\nand publishes on npm.\nrm -rf amd-modules/famous\ngit clone https://git@github.com/Famous/famous.git amd-modules/famous\ncd amd-modules/famous\ngit fetch --tags\ngit checkout 0.1.2\n```\nAdded to package.json\njavascript\n  \"browserify\": {\n    \"transform\": [\n      \"deamdify\"\n    ]\n  },\n  \"devDependencies\": {\n    \"deamdify\": \"~0.1.1\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"postinstall\": \"./install_famous.sh ; gulp\"\n  },\nIn code\njavascript\nvar Surface = require('../amd-modules/famous/core/Surface')\n. ",
    "speigg": "Try webpack + bower. Webpack works out of the box with AMD and Commonjs, just have to add the bower-components to your webpack.config. Webpack also builds my project an order of magnitude faster than browserify. Here is an example webpack.config similar to the one I use: \n``` javascript\nmodule.exports = {\n  context: __dirname + \"/src\",\n  entry: {\n    main: \"./main\",\n  },\n  output: {\n    path: __dirname + \"/dist\",\n    filename: \"[name].js\",\n  },\n  resolve: {\n    root: __dirname + \"/src\",\n    modulesDirectories: [\"bower_components\", \"web_modules\", \"node_modules\"]\n  },\n  devtool: \"inline-source-map\"\n}\n```\nThis allows you to use var Surface = require('famous/core/Surface') in your CommonJS or AMD code (after installing famous as a bower dependency). \n. @aelr or just use webpack :)\n. This is what I mean by the expected pipe behavior:\njavascript\nvar A = new EventHandler()\nvar B = new EventHandler()\nvar C = new EventHandler()\nA.pipe(B).pipe(C).pipe(function(type, event) {\n  console.log(type + ' ' + event)\n})\nA.emit('Hello', 'World') // does not print 'Hello World' in console\nIn the above code, the event never prints to the console... instead, the Hello event never gets past the first pipe (unless I set the subscribe method on each handler to null, so that the pipe method actually pipes): \njavascript\nvar A = new EventHandler(); A.subscribe = null; \nvar B = new EventHandler(); B.subscribe = null\nvar C = new EventHandler(); C.subscribe = null\nA.pipe(B).pipe(C).pipe(function(type, event) {\n  console.log(type + ' ' + event)\n})\nA.emit('Hello', 'World') // does print 'Hello World' in console\nNow it works... but setting subscribe to null just so that the pipe method doens't call subscribe seems wrong (would also have to set unsubscribe to null if I wanted to be able to unpipe)... or is that how we are expected to (actually) pipe events? \n. IMHO, EventHandler#pipe would better match the semantics of \"piping\" (and the documented behavior) if the following lines were removed from EventHandler#pipe / EventHandler#unpipe:\nEventHandler.js#L105\nEventHandler.js#L127\nThis way, the actual piping or subscribing behavior is always explicit. \n. The current pipe implementation also makes the EventMapper much less useful. The EventMapper example, for instance, breaks just by adding an additional EventHandler between eventHandlerA and the EventMapper\n. For reference, past discussion on this issue is at https://github.com/Famous/core/pull/42 (in the old core repo)\n. Here is a simple use-case which demonstrates the bug (copied here from the old thread, for convenience): \nThe following code prints 'type:hi' successfully:\n``` javascript\nvar x = new EventHandler()\nvar y = new EventMapper(function(type, event) {\n  console.log('type:' + type)\n  return someEventHandler\n})\nx.pipe(y)\nx.trigger('hi')\n```\nThe following code does not. \n``` javascript\nvar x = new EventHandler()\nvar y = new EventHandler()\nvar z = new EventMapper(function(type, event) {\n  console.log('type:' + type)\n  return someEventHandler\n})\nx.pipe(y)\ny.pipe(z)\nx.trigger('hi')\n```\n. @michaelobriena Interesting. Which parts?\n. @michaelobriena Are you guys still planning on deprecating part of the eventing system? I'm wondering which parts you are planning on deprecating, because the problem would still be present if the EventMapper and/or EventFilter were deprecated. The problem is in the piping/subscribing mechanism itself. For example (I probably should have started with this example):\n``` javascript\nvar x = new EventHandler()\nvar y = new EventHandler()\nvar z = new EventHandler() \nx.pipe(y)\ny.pipe(z)\nz.on('hello', function() {\n    console.log('hello world') \n})\nx.trigger('hello')  // never outputs 'hello world'\n``\n. So here are my thoughts at a solution:\n- Each event hander's upstream list needs to be changed to a reference counting system\n- Any time event handler A subscribes to event handler B, A increases its reference count to B, and to each handler in B's upstream, and then subscribes to any handlers that previously had a reference count of zero. \n- Whenever B subscribes to a new event handler, A needs to be notified (so it can also subscribe). \n  - Simplest way to do this is if each event handler maintains a list of its subscribers, and callssubscribe` on them directly when it's upstream list changes\n  - Alternatively, each event handler can emit events when it's upstream list changes\n- When A unsubscribes from B, A decreases its reference to B and all of B's upstream handlers, and unsubscribe from the ones that reach zero.\nDoes this sound like it would work? \nWould it help (as far as getting this fixed sooner rather than later) if I were to give this a try and submit a pull request?\n. I just tried with appMode: false, still doesn't work, but the problem isn't with Engine.js, the problem is with ElementOutput.js. The following pullrequest would fix the problem: https://github.com/Famous/famous/pull/162\n. To see the problem, simply require ElementOutput.js before the body exists.\n. @michaelobriena awesome. \n. I just signed the CLA, but from the past discussion on this issue, this PR doesn't seem to be a good a long-term solution. \n. No problem @TheAlphaNerd. Btw, the correct issue is #88 (42 is unrelated in this repo). \n. Also see the related discussion here: https://github.com/Famous/core/issues/53\nSummary: some OptionsManager method implementations are unintuitive, as proven by their inconsistent usage within the famo.us library.\nFor example: \nOptionsManager.getOptions\n- expected behavior:  returns the entire options dictionary\n- actual behavior: returns the option value for specified id\nEngine.getOptions\n- expected behavior: returns the entire options dictionary. \n- actual behavior: calls OptionsManager.getOptions. This makes sense on one hand, however even OptionsManager.getOptions does not do the intuitive thing here (return the entire options dictionary) \nView.getOptions\n- expected behavior: returns the entire options dictionary. \n- actual behavior: calls OptionsManager.value. Matches expected behavior, but why is getOptions in this case bound to OptionManager.value? This suggests that OptionsManager.getOptions should be an alias for OptionsManager.value. \n. My proposed solution: \n- Change OptionsManager.prototype.getOptions alias from:\njavascript\n    /**\n     * Alias for get\n     * @method getOptions\n     */\n    OptionsManager.prototype.getOptions = OptionsManager.prototype.get;\nTo:\njavascript\n    /**\n     * Alias for value\n     * @method getOptions\n     */\n    OptionsManager.prototype.getOptions = OptionsManager.prototype.value;\n- Implement OptionsManager.setOptionsManager as described\n- Use OptionsManager.setOptionsManager throughout famous to ensure consistency\n. That's how OptionsManager.prototype.getOptions is currently implemented. I think, semantically, it makes more sense for getOptions to return the entire options dictionary, and get to return a specific option.\n. What I mean is, it's already implmented as you suggest:\n``` javascript\n/*\n * Alias for get\n * @method getOptions\n /\nOptionsManager.prototype.getOptions = OptionsManager.prototype.get;\n``\n. Oh I see how you changedgetnow. Nevermind. Yeah, that's a nice way to do it too. (Although it is a little confusing to have so many aliases that do the same thing). I think it would be a very clean API if all we had to know about weresetandget(implemented as you suggested), and that's all. \n. @thealphanerd nothing relevant to this issue has been solved in the latest commits as far as I can see\n. Yeah, I've been using my own implementation ofsetOptionsManagerin my own code. It's convenient. Mine also takes care of creating the_optionsproperty and attaching it to the provided object. \n. You could also parse options in thechange` event\n. :+1: \n. +1 Very annoying problem... doing it the other way around though: the first (intended) click causes the surface to move out of the way, and then a second (incorrect) click is received by the surface that was beneath the other one. \n. FYI, it's easier to see the bug if you make the repulsion force smaller (-1.1 or -1.2) in your example (in addition to commenting out line 49)\n. This is broken for me as well. \n. So actually, I only see problems when trying to transition a ratio with true sizing. \nFor example: \njavascript\nlayout.setRatios([0, 1 true])\nlayout.setRatios([true, 1, true], {curve:'easeIn', duration: 350})\nWhen doing this, the transition is broken, but after the transition everything is placed as it should be. \n. I found another (better?) way to do what I was trying to do. Basically, I just used a state modifier to transition the size of a surface with true sizing used in the FlexibleLayout ratios. \n. Really? Where do you see this definition? Because I have used both true and 0 with FlexibleLayout successfully, not to mention there is also an example in the Famous University FlexibleLayout lesson that uses true. \n\nOn Dec 3, 2014, at 3:25 PM, Stephan Bijzitter notifications@github.com wrote:\nratios cannot be true nor 0 by definition, @speigg https://github.com/speigg so that would be expected ;p\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Famous/famous/issues/474#issuecomment-65483684.\n. @StephanBijzitter Like I said, there is an example in famous university that uses \"true\" as a ratio: http://famo.us/university/lessons/#/layout/flexible-layout/6\nhttp://famo.us/university/lessons/#/layout/flexible-layout/7\n\nAll it has to do internally is subtract the actual size of each \"true\" ratio item from the total size, and then calculate the rest of the sizes as you said. \n. @michaelobriena Yes I eventually figured out I can just use state modifiers to transition the size of any views with a true ratio.\n. ViewSequence.unshift resets _.firstIndex but not _.firstNode... could that be the problem?\n. +1\n. @mcbain not necessarily. The commit method only gives you the \"final\" values relative to its commit context. Any RenderNode that creates a new Context, such as a Scrollview/Scroller (via its internal Group) or a ContainerSurface, will change the commit context for its children. (Please correct me if I'm wrong). \n. So in practice your solution only works for a Surface that has no Group, Scroller, or ContainerSurface ancestor RenderNodes.\n. @michaelobriena I'm working on components for Augmented Reality interfaces / content. Consider responsive design, such that individual views and surfaces respond to the spatial relationships between themselves and the user/camera, transitioning to various representations as the user moves about in 3 dimensions. This requires knowing the exact transform of such a view relative to the user. Being able to calculate transforms between arbitrary RenderNodes in the Render Tree would make it much simpler. The other use case is for LOD... swapping out views/surfaces with lower resolution representations (scaled up) when viewed from far away can vastly increase the amount of surfaces that can be displayed at once (in my experience)... And such a technique can also be combined with semantic LOD and other types of responsive design choices.\n. Well, yes, state that is passed into the \"transformFrom\" property could be directly used for responsive/adaptive behavior, but it does seem somewhat limiting; it only works for nodes at the root of the scene. Imagine an arbitrarily nested view (let's say one of it's ancestor nodes is a scrollview, for example) which I want to rotate towards the user when the user is within a certain proximity of that view (or it can do anything else really, just making this up, still exploring this design space). With the current structure of things, I don't think its really feasible to implement something like that. \nIt's true that the (final) transform matrix would have to be interpreted a lot, but exactly how frequently really depends on the particular adaptive behavior... continuous adaptations may require an interpretation for every frame (unless the object is far from the user), while discrete adaptations (based on breakpoints) can probably get a way with a much lower frequency. \nI don't understand enough yet about how famous works internally to know what would be a performant solution, but it seems to me like any solution would require storing the final state of each RenderNode somewhere (within a RenderNode?). Or maybe passing along the final state (relative to the root context), within the context object passed to each commit function, so that it need not be held in memory if it's not used? \n. Hmm... narrowed it down a little more. This bug is somehow related to FastClick, with a different manifestation based on which FastClick library is used. \nThe bug, as described above, only happens when using the https://github.com/ftlabs/fastclick library (I tried using famous/inputs/FastClick at first, but switched https://github.com/ftlabs/fastclick because I was getting duplicate clicks)\nWhen using the builtin famous FastClick, instead of settling at index 1, the scrollview noticeably pauses at index 1 before (usually... but not always) continuing to index 0. \nEverything works perfect when not using any FastClick library (except for the annoying 300ms delay of course)\n. Also, one more important piece of information. Regardless of ANY of the above factors (famous FastClick vs 3rd party FastClick vs piping to scrollview) goToPage(0) ALWAYS works correctly when starting from the last index in the Scrollview... scrolling smoothly to index 0 without stopping or pausing at index 1. Pagination does not seem to be a factor. \n. Using a timer in a click handler seems to scroll correctly in every case mentioned above:\njavascirpt\nTimer.setTimeout( function() {\n    scrollview.goToPage(0)\n}, 50)\nSo this is the workaround I'm using for now.\n. the 'pageChange' event works, for the most part. The scrollview does not emit a pageChange event if the page changes as a result of a goToPreviousPage/goToNextPage/gotToPage call. But if the page changes due to user interaction, then it emits. Just use \njavascript\nscrollview.on('pageChange', function(e) { console.log(e) })\nAlso, FYI, getCurrentIndex() does not always return the same index as reported in the pageChange event. This doesn't make much sense to me, and I think it's a bug in how the scrollview keeps track of it's current index. \n. Use webpack, I find it to be much more powerful (and performant) than browserify. Also, I've started using 6to5 instead of Traceur... 6to5 implements much more of the es6 spec and generates much cleaner code and simpler code.\n. This demonstrates the issue (open the console to see the error): http://jsfiddle.net/fs8rfz1e/\nbasketjs is just making a GET request to the famous-global.min.js file, and that's what fails, so that's all I put in the jsfiddle. \n. It's probably just an oversight. Script tags don't require CORS, and that's what is used in most cases. \n. Transitioning the size is actually really bad for performance. It causes the surface to be redrawn every frame. \n. ",
    "substack": "@aelr You never ever do this: require('../node_modules/famous/core/Surface')\nI'm not sure where you're getting that from? You just do require('famous/core/Surface') which traverses up the parent directories looking for matching subdirectories inside of node_modules. https://github.com/substack/browserify-handbook#how-node_modules-works\n. ",
    "talves": "@TheAlphaNerd that will come in handy :+1: \n. :+1: \n. @petehunt Sad :disappointed: \n. @ranmacar Here is some working code with a couple changes :)\nJsFiddle\nRunning Gist\nGist Code\n. @ranmacar you should close the issue ;)\n. @TheAlphaNerd I agree 100%\n. @ricoder I believe it was caused by your inTransition duration being too short.\nI made it the same as the outTransition and no more overlap http://jsfiddle.net/talves/beh9z/5/\n. @dmvaldman @michaelobriena chrome upgraded itself to 36.0 and I do not see the flicker any longer! Browser fix?\n. @TheAlphaNerd @marklu @DnMllr I am just curious. Are you saying we should always manage the z-index of the transform, so we do not have the issues above?  In the current default de-allocation of an element ends up changing the order of an element in the DOM when an element is re-used.  I know there are a lot of moving parts when asking this question, but I think we need a best practices solution for this item.\nHypothetical Proposal\nFamo.us would manage a recycled elements z-index for performance purposes. Unless the developer overrides a flag saying to ignore and let the code manage.\n@pilwon @AdrianRossouw \n. @TheAlphaNerd that link does not work atm Cannot GET /clas :P\nHere is the correct link http://famo.us/cla\n. @Vertice don't you think we should reserve issues for development here in the repo now that we have an email group for discussion?  Especially, since we asked Famo.us for the email list.  In my opinion, this just creates more work for the core development team.  Of course, if the core team wants to manage these types of requests out of here then maybe have them put it here as a todo or in a new repo.  I personally thought all the issues here for the famo.us site should have been driven in a repo for the site, not in the this repo.\n@TheAlphaNerd and @dmvaldman do you have an opinion (requirement).  Maybe start moving the issues that are requests to the email list for discussion and keep the issues here for development.\n. @TheAlphaNerd :+1: \n. @LeXXik (Alex) I think this is implied behavior the way it is.  It inherits the align from the origin when not set.\nI am not sure what the correct default should be for align,  but it is consistent now.\n- [0, 0]\n- [1, 0]\n- [1, 1]\n- [0, 1]\n- [0.5, 0.5]\n. @LeXXik I remember it always working this way, but not sure.  For me it is not a problem how it works, because I usually include it for clarity. :)\n. @janober I am more curious to what you are trying to do here?\n- multiple surfaces layered with a position of [0, 0] \n- each surface has a width and height of the StateModifier which is by default the size of the main context (window)\n- each surface creates the number of empty lines prior the id, so eventually the surface has overflow\nI am not saying this is not a bug, but from this gist everything works when the state modifier has a correct size and position is set relative to the prior element.\n@michaelobriena even without overflow as you can see from this version if you change the count to 40 there is an error when not sizing the modifier.\n. @StephanBijzitter It seems to be working correctly in this jsFiddle example\n. @StephanBijzitter Yeah, sorry I did not make it clear enough.  I was also pointing out that the get Size should reference the container surface also. :)\nbanner.getSize = function getSize() { //is used\n        return banner.options.container.size;\n    };\n. @TheAlphaNerd isn't this pull request #236 already?\n. @TheAlphaNerd cla signed :)\n. No problem Myles... I will just bump in my fork only and link to it.\nNot sure why there would be more than one bump though, but not my call.\n. @totty90 whether this is a bug or not is up for discussion, but there is some explanation needed of what rotateZ is accomplishing first:\nSee this StackOverflow post\nIn my opinion, it is not really an error when you consider that the rotateZ method is returning a matrix translation of the theta radians.  Maybe it would have been better to have called the method rotatePositionZ.\n. Just remember that Transform.rotateZ is not the rotation command method, it is the translation of the rotation position.   At this time there is not a transform to accomplish this elegantly, so you need to create it.\n. @StephanBijzitter naming both controllers the same name?  I am not an angular developer, have you tried with unique controller names?\n```\n//app.js\n(function() {\n    var app = angular.module('test', []);\napp.controller('TestController', function() {\n    this.output = 'Hello World!';\n});\napp.controller('TestController2', function() {\n    this.output = 'Another Hello World!';\n});\n\n})();\n//part of index.html\n\n\n\n\n{{Test.output}}\n\n```\n. Maybe post this question on the Famous/Famous-Angular repo issues.\n. @michaelobriena , @TheAlphaNerd at first it did not work but here is a working simple jsBin\nI only vetted a little bit, but it looks like as long as you set the attributes after the deploy, you are good.  Otherwise, we would need a solution for later timing.\n. +1 :+1:  This is an awesome idea and should be a milestone item on every breaking version !\n. @bilalahmed70 Are you sure you did not do something like this before?  origin is being returned on custom events still.\njs\nsurface.on('click', function(obj) {\n    this.emit('customClick', { });\n});\nsurface.on('customClick', function(obj) {\n    console.log(obj.origin.getProperties());\n});\n. @StephanBijzitter I believe scrollview.getCurrentIndex() is a zero based index of the created ViewSequence.  Correct me, if I am wrong.\nHere is a jsBin I was playing with the other day\n. The scrollview.getCurrentIndex() returns the index of the ViewSequence.  It does not return the page number.  That does not seem wrong to me.  What we do need in your use case is a scrollview.getCurrentPage() function method.\n@StephanBijzitter I see, you mean the scrollview itself is passing in the value 0 to the goToPage ?\nJust to clarify what I was trying to say earlier.  The goToPage(index) is an absolute page index not a 0 based index like the getCurrentIndex() and you would need to add 1 to know what page you are on.\n. I am not sure this is a bug.  I made some changes to the example code @StephanBijzitter posted above and  it seems to work as expected.\nExample Here\nIf I un-comment the size line in the mainContent surface, the index does not page.  I consider this to be expected, because the scrollview is supposed to only scroll when the page is full.\n. @StephanBijzitter I think I went down the rabbit hole, because I was getting caught up on the naming of the function.  I agree with you now that it should match the index of the ViewSequence array.\n. Hold on this PR until I do some testing. There are a lot of assumptions here that I did not take into consideration.\n. @TheAlphaNerd @michaelobriena and @wgester ok, I tested my assumptions based on my understanding of the goToPage function.  \nNow I see that it is really a go to Node function as @kabriel had suggested in #383 \nThis PR does fix an issue of being able to jump from node index 1 to node index 0, but does go to the absolute position node (based on node count), not a page as suggested by the name.\nIf there was only one node per page and we are defining a page as the context view, then we could clearly call it the absolute page position (starting index=1).\nMy Question to you: Is the index for goToPage(index) supposed to start at 1 or start at 0?  That will determine how we fix this issue.\n. @TheAlphaNerd , @michaelobriena \nI am closing this pull request.  After closely looking at the assumptions I was making and and further testing, I do not see an issue with how the goToPage works.  I think we are just getting into semantics here.  If I want to emulate starting at a base index, I can always design my app that way.\n. @IjzerenHein you have to make a pull request to the develop branch. It is a change on the Contribute.md that has not been published to master :ok_hand:\n. It is too bad it was not changed on the master branch yet. You would have had to see it on the develop branch. :disappointed: It is not clear yet.\n. @PEM-- you have to make a pull request to the develop branch. It is a change on the Contribute.md that has not been published to master :ok_hand:\n. You are very welcome.  I had a lot of fun figuring it out.  I need to spend some time refactoring the demo for 0.3.0 and making the bounding box the context and having it change on resize :grey_exclamation: \n. @michaelobriena aren't inAlign and outAlign options in the Lightbox ? :fearful:\n@amitchoubey when working with beta releases, you have to dig a little into the source rather than depend on the docs to be absolutely complete. You may want to switch to Lightbox in your case.\n. @michaelobriena yeah, I was saying they are in Lightbox not in RenderController right?\n. Duplicate: See #451 \n. +1\n. @istvanskeri You could just use a temporary surface for the back \nflipper.setBack(tempBackSurface);\nUntil the ajax is finished then\nflipper.setBack(ajaxSurface);\n. @michaelobriena I ~~always~~ typically put an initial Transform.translate on my modifiers.  Do we need this hack if at least one of the modifiers on the page has a z depth other than 0?\n. @marklu :+1: CORS knowledge needs to be a requirement for developers.\n. @michaelobriena if you see in the codepen, @Qvatra is transitioning the StateModifier that resizes the surface and using the setSize on the surface at the same time. That is the reason for the tremble on the surface. I explained this on a StackOverflow question also.\n. @trusktr @andrewreedy  having another chat would just be another place that Famo.us has no time to contribute in my opinion.  Although, I do like the idea of Gitter.  \nAnother issue is that I would rather spend my time discussing the REAL release of Famo.us (\"Mixed Mode\").  I spent a lot of time helping out on IRC and that ended up being a boon now that the current version will have an end of life.  We have no access to the current mixed mode that will be integrated with jQuery. Famo.us is not really developed as open source at this point, so what would we discuss?\n. :heart_eyes: @TheAlphaNerd Sooner than June? :tada: \n. @srazzaque I played with this a bit and made some changes for fun.\nThe performance is definitely dependent on the number of Elements you are animating at a time. \n100 columns x 60 rows = 6000 DOM elements on the page.  That  is a lot of items being transitioned at a time.  Although changing opacity is a fairly cheap animation, doing it on many elements at the same time will still cause a performance hit.\nI believe \"MixedMode\" will help with making the performance a lot better when it is released.\nHere is one iteration of my changes.\nHere are some of the items I changed that had a change on performance:\n- Only set content of each surface at the beginning, not prior to each animation start\n- Brought opacity to zero (0) on final transition\n. You can set it to null if you want to clear the value. (ugly, but works).\nsetValue(null);\nIf you need a quick fix while they decide what to do with this issue.\nvar textareaSurface = new TextareaSurface();\n  textareaSurface.on('deploy', function(){\n    if (this._currentTarget.value !== this._value) this._currentTarget.value = this._value;\n  });\nOr, you can monkey patch it in your code:\nTextareaSurface.prototype.deploy = function deploy(target) {\n    if (this._placeholder !== '') target.placeholder = this._placeholder;\n    target.value = this._value;\n    if (this._name !== '') target.name = this._name;\n    if (this._wrap !== '') target.wrap = this._wrap;\n    if (this._cols !== '') target.cols = this._cols;\n    if (this._rows !== '') target.rows = this._rows;\n  };\n. Change to ImageSurface\n```\nvar faceup = function(suit, number){\n  return new ImageSurface({\n    content: '/assets/images/cards/'+suit+number+'.jpeg'\n  });\n}\nvar facedown = function() {\n  return  new ImageSurface({\n    content: ''\n  });\n}\n```\nAlso change your Modifier's around and make sure you have an initial size.\n```\nvar Mod = new Modifier({\n  origin: [0.5,0.5],\n  align: [0.5,0.5],\n});\nvar sizeMod = new Modifier({\n  size: [180, 300],\n  origin: [0.5,0.5],\n  align: [0.5,0.5],\n  proportions: [1,1]\n});\nmainContext.add(sizeMod).add(Mod).add(flipper)\n``\n. [Not seeing that problem, but have not tested fully.](http://jsbin.com/bavimo/1/edit?js,output)\n. I would close, because there will probably be better handling in theMixedMode` release of Famo.us.\nMaybe give the devs a chance to chime in and let them decide :wink: \n. ```\ndefine(function(require, exports, module) {\n  var SlideData = {\n    picasaUrl: 'https://picasaweb.google.com/data/feed/api/all',\n    queryParams: '?kind=photo&q=kittens&max-results=10&imgmax=720&alt=json'\n  };\nSlideData.getUrl = function() {\n    return SlideData.picasaUrl + SlideData.queryParams;\n   };\nSlideData.parse = function(data) {\n    var urls = [];\n    data = JSON.parse(data);\n    var entries = data.feed.entry;\n    for (var i = 0; i < entries.length; i++) {\n        var media = entries[i].media$group;\n        urls.push(media.media$content[0].url);\n    }\n    return urls;\n  };\nmodule.exports = SlideData;\n});\n```\n. @dcsan I tweeted about a webcast. Steve makes a crazy announcement about Open Source License for Mixed Mode!\n. @TheAlphaNerd :+1: for putting time into getting MixedMode out the door and into the wild as possible.\n. @ShawnOceanHu been following him since launch.  Is there news that I missed?\n. @jmeiss https://github.com/Famous/famous/issues/692#issuecomment-98848980\n. ",
    "adnan-wahab": "I believe this is currently fixed. https://www.npmjs.org/package/famous\nMyles is my hero. \n. +1\n. ",
    "dcsan": "This isn't fixing the actual problem,  but you could try installing git\nwith homebrew rather than using the apple os version\n. related https://github.com/Famous/views/issues/45\n. related https://github.com/Famous/core/issues/14\n. you're talking about chrome touch events for horizontal scroll? or vertical normal mouse movements?\nrelated and similar issues are reported in other places. \nhttps://github.com/Famous/core/issues/14\nIMHO this is a huge issue and prevents famous from being used with any existing web code bases.\n. the famous list of demos http://famo.us/demos  had this very jerky behavior. perhaps because there are some big graphics but its still very ugly (at least on android last time i looked)\n. > The new website is only using native scroll\nbut is this still a problem for anyone else using famous?\nhttps://github.com/Famous/core/issues/14\nis there a way now to use a native scrollview or did you guys have to roll a special version of famous to get it to be usable for your own site?\n(it still seems odd that you guys would make a working scrollview so hard to do/ replace with something unusable)\n. nice explanation. one small point\n\nif your impatient, you can take the components we have and use them for what they do well and couple them with other solutions out there that\n\nfamous makes it pretty hard to mix and match other components. issues like breaking the native scroll seem like the design is to be all or nothing:\nhttps://github.com/Famous/core/issues/14\nperhaps when you have your own wrapper some of those decisions may become clearer?\n. famous scroll is broken in current release for the desktop. it kind of works on mobile tho the physics is pretty janky. rather vigorous discussion recently on hacker news :)\n(tho this issue hasn't been labelled as a bug as noted above its acknowledged)\n. you may want to add this on the views subrepo\nhttps://github.com/Famous/views/issues?state=open\neveryone loves git submodules!\n. famo.us team - \nref above... the github repo is the defacto / only two-way place to discuss famous, doesn't seem ideal.\nsomeone did start a google group but its unused. maybe you could link to it from your famo.us U site?\nor even blow $20/month of a discourse forum?\n. famous doesn't know the size of surfaces when you set everything up, as it hasn't rendered yet.\none way around this might be to do a second pass, ie using a setTimeout, and setting again the size of the surfaces.\nhere's another workaround:\nhttp://stackoverflow.com/questions/24463465/how-to-make-famo-us-recalculate-sizes/24463603?noredirect=1#comment37875183_24463603\napparently this was a high priority but it's also a pretty deep issue.\n. maybe with coffeescript you can get close to that with code rather than markup? \nor write a javascript pre-processor that's optimized for FMS.\nbtw there's a famous google group it maybe good to have these kind of discussions on:\nhttps://groups.google.com/forum/#!forum/famous\n. but noone ships coffee to production? thats all gulp'ed or grunted build process before deployment?\nhaving code is nice because you can have actual variables/loops etc. but it can be verbose, which is where coffeescript etc can help really cut down the line-noise.\nyou might want to compare with VRML\n. bump! I'm manually patching famous to include this fix in order to work with meteor.js\n. yep, I also have it working. I was changing the body tag css, but its also set as a property of \"html\". must be some browser compatibility issue...\n. @pencilcheck i gave up on famous so don't have a snippet handy. \nit's months later so they must have fixed this by now? or does it still break everything?\n. ok so months later, all the related threads have been deleted but it still seems there's no clear way to mix famous and a normal web app.\n@TheAlphaNerd  can you point to any docs how to use appMode flag so the default is to NOT break everything else?\nfrom https://github.com/Famous/famous/issues/495\n\nHave you tried launching famous with app-mode: false?\n\nI'm using famous via meteor/famono so hacking the guts of famous as I had to do last time, is really undesirable. For whatever reason it seems  Engine.createContext() doesn't take any options.\nthe thing that was talked about sometime forever back in the past was giving a simple DIV tag to the famous engine and saying \"render into this\". \nrelated\nPR for angular-famous \nhttps://github.com/Famous/famous-angular/pull/278\n. thanks for the tip. I'm getting some fairly cryptic errors on that branch. in order to get famous require system to work with with meteor.js, I have the famono package in the middle. \ni also tried to merge that branch with famous/master but got various conflicts, so not really sure what to cherry pick/reject. i guess that's why the working scrollview hasn't been merged into master.\nthere was another commit needed to get famous to work with meteor, which was added then bounced out again. \nharrumph for now.\nFamono: Could not load module \"famous/core/ElementOutput\", TypeError: Cannot read property 'style' of null\n    at Object.f (http://localhost:3000/lib/famous/core/ElementOutput.js?048383ee2224a031337e230ec8f0c4987940bfb2:16:34)\n    at Object.Famono.require (http://localhost:3000/packages/famono.js?ddb58e62ccc47bb5406997eca6cb49535771c0db:107:42)\n    at http://localhost:3000/lib/global-definitions.js?60337ee2aa36ac4d01a45e0f3e59a0e0a0defc0c:26:36\nFamRender.new\nFamRender.init\nFamous options undefined\nopts \nObject\n2\ntrans\nTemplate.splash.rendered\nSplashView.new\nException from Deps afterFlush function function: TypeError: undefined is not a function\n    at new Surface (http://localhost:3000/lib/famous/core/Surface.js?a8674d2273999fd8cd3a58953c64da7f36183894:30:23)\n    at Surface.Group (http://localhost:3000/lib/famous/core/Group.js?30d7671827a5f47c3dd1c0b87a1d00f96e52d0a5:29:17)\n    at new Scroller (http://localhost:3000/lib/famous/views/Scroller.js?904e185fd59658f486516850ec9d82be74676b81:44:22)\n    at new Scrollview (http://localhost:3000/lib/famous/views/Scrollview.js?c3d4ce8b48b5e8849b460d0a14f67ccc19379ebc:84:26)\n    at SplashView.addCarousel (http://localhost:3000/packages/splash.js?6be071ebfb1327a21b06291247409c61b7ac00f4:286:23)\n    at new SplashView (http://localhost:3000/packages/splash.js?6be071ebfb1327a21b06291247409c61b7ac00f4:201:12)\n    at Object.Template.splash.rendered (http://localhost:3000/packages/splash.js?6be071ebfb1327a21b06291247409c61b7ac00f4:553:14)\n    at null.<anonymous> (http://localhost:3000/packages/templating.js?e2c0d3bbe4292a0b20c3083eaf4fcd0f5f91bb52:171:25)\n    at fireCallbacks (http://localhost:3000/packages/blaze.js?309c2a3b573dca998c07c493ba4953d451b2c963:1818:16)\n    at Object.Deps.nonreactive (http://localhost:3000/packages/deps.js?d9b2b2601bdab0f57291b38e7974a7190b8aac01:382:12)\n. OK I can confirm the scrollview is a lot better in Will's branch. The index works correctly.\nhowever, sometimes the scrollview content just vanishes, and i haven't figured out a pattern why.\nI also saw some conflicts with famous/master in the scrollview itself, so someone needs to do a careful merge :)\nalso this PR/fix is required for meteor to function\nhttps://github.com/Famous/famous/pull/144\n. @wgester I was in at famous Labs today, hopefully i can catch you next time.\n- [ ] vanishing content\n  I think i solved this by wrapping the contents in a container surface that had an overflow: hidden\n  It also seems to be to do with the way that Famous takes a render loop to know the content size.\n- [ ] conflicts. I think the reason is cos you added a new goToPage method, so you moved around the goToPrevious etc. which confused the auto-merge. Gits unusable automerge mess is here\nAnyway I just took your branch and it seems to work standalone.\ntho i had to merge this fix for meteor and another to allow mix of famous + normal scrollviews.\n. a few posts around september and then nothing?\n. \"near future\" in famo.us speak is a bit of an abstract concept. by sept 5th next year seems possible?\n. > getCurrentIndex() does not always return the same index as reported in the pageChange event. This doesn't make much sense to me, and I think it's a bug in how the scrollview keeps track of it's current index.\nyes i think i encountered this before, so probably best to leave this open?\n. the problems you mention above have been around since the first public release. \n. @mutazmq how does that view work just in the chrome browser, ie not a cordova app? chrome the browser is definitely using a \"chrome webview\". \nyou could also try to get a stock AOSP browser to see if it's a browser rendering engine issue or a famous problem.\n\nI also tried scrolling on Chrome browser installed on my device. There is some performance gain but it is still noticeably lagging.\n\nright. so it's a problem with famous\nin my experience too even on the latest samsung devices the famous scrollview is jerky and unusable and probably responsible for turning lots of people off famous. \nhopefully mixed mode will deliver something better.\n. better to make a quick layout diagram with google drawings and embed it here.\nalso check out famous-flex https://github.com/IjzerenHein/famous-flex\n. OK I got this basically working here\nhttp://moflow.meteor.com/story/12\nthis view nests a normal native scrolling html content inside a famous app\n\nit also uses famous-flex for the other type of famous views.\nIt's a basic framework for creating usable famous apps and working around the problems with their scrollviews.\nwith @sayawan we may add some other components to this.  repo is here:\nhttps://github.com/dcsan/moflow\nI invite people to check it out - smooth even on an android device.\nhttp://moflow.meteor.com/story/12\n. ",
    "Theshaft06": "Let me give that a shot. A work around right now would be okay.\n. Attempted that work around with no success.\nStarted by renaming original git directory to git-org\n- cd /usr/bin\n- sudo mv git git-org\nInstalled git with homebrew and ran brew doctor with no errors.\nStill have the same issue.\nNow \"git --version\" returns\n- git version 1.9.2\nwhich git returns\n- /usr/local/bin/git\n. Okay I will look into that solution further. The only thing I find odd is that git works as intended for everything else except famo.us. \n. Alright I'm still not having any luck with this. I uninstalled and re-installed git. Only third option that I could find was to set up the environment variables. Which I had done before, but went ahead and stepped through that process again.\nI opened up my ~/bash.profile and added this line \"export PATH=/usr/local/git/bin:$PATH\"\n- open ~/.bash_profile\nAfter saving, I output the contents of ~/.bash_profile to double check it saved:\n- cat ~/.bash_profile\nTo double check that it was actually using that .bash_profile I ran:\n- source ~/.bash_profile\nFinally I  ran yo famous inside an empty directory (documents/famous/testApp), but still received the same error\n- (ERROR) It looks like you do not have git installed, please install it and try again.\nAny more suggestions ?\n. Couldn't find anything wrong with the file permissions. Decided I'm getting tired of trying to find sensible solutions. So I  opened up generator-famous/app/index.js  file and commented out the pesky block of code throwing the error. Ran \"yo famous\" with out any issues so far. Going to leave this open for now to see if someone else comes up with a more elegant solution.\n. Ya, I realized I filed this in the wrong place. Doh! I'll do that now.\nAlso, the link for the script leads to a broken github link.\n(EDIT) Never mind. The link isn't broken. It's just getting prepended with current url.\n. I'm fairly certain there is not a git command prompt in mac. I could download a git gui, but I don't believe this wouldn't solve the issue. Since I am able to access git from my terminal for everything else. Seems more to be an issue with shell.js\n. ",
    "cnewmango": "My buddy sivehc had the same problem on his Apple. He ended up Googling enough to find that he  had to choose the right option that sets the environmental variables when installing git. Due to the fact that I'm a MS user, I hope this helps.\n. This is verbatim from sivehc:\n \"The dangerous looking option with the red text.  Choice number three. I'd have to install it again to get the details.\"\n. I believe it is how it communicates with node,js and grunt.\n. ",
    "sirlantzalot": "I don't have access to famo.us yet(hopefully soon) but I have had a problem like this when setting up node.js. During install something gets messed up in OSX with permissions of the folders and git can't see them. Check the sharing & permissions for (Me) to have read/write access to the famous folders. Hope this helps.\n. ",
    "ch4se": "open the git command prompt and type yo famous \n. Oh that's unfortunate, I was having the same issue as you on my windows PC and using the git command prompt worked it out for me. Anyways, good luck!\nOn Mon, May 12, 2014 at 9:29 PM, Matt Tucker notifications@github.com\nwrote:\n\nI'm fairly certain there is not a git command prompt in mac. I could download a git gui, but I don't believe this wouldn't solve the issue. Since I am able to access git from my terminal for everything else. Seems more to be an issue with shell.js\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/51#issuecomment-42915981\n. Try a spotlight search for it\n\nOn Mon, May 12, 2014 at 10:39 PM, Scott Robert Lawrence\nnotifications@github.com wrote:\n\nosx Definitely has git shell, in fact it's mentioned in the xcode docs.\nOn Mon, May 12, 2014 at 10:04 PM, ch4se notifications@github.com wrote:\n\nOh that's unfortunate, I was having the same issue as you on my windows PC\nand using the git command prompt worked it out for me. Anyways, good luck!\nOn Mon, May 12, 2014 at 9:29 PM, Matt Tucker notifications@github.com\nwrote:\n\nI'm fairly certain there is not a git command prompt in mac. I could\ndownload a git gui, but I don't believe this wouldn't solve the issue.\nSince I am able to access git from my terminal for everything else. Seems\nmore to be an issue with shell.js\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/51#issuecomment-42915981\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/51#issuecomment-42917417\n.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/51#issuecomment-42919043\n. \n\n",
    "ArEnSc": "mistake on my end \n. ",
    "wgester": "There's a potential fix in the works. If you clone down current famous and comment out the following in the initialize function inside of Engine.js\nwindow.addEventListener('touchmove', function(event) {\n    event.preventDefault();\n}, true);\nand replace this.eventForwarder in ElementOutput.js with the following function\nthis.eventForwarder = function eventForwarder(event) {\n    this._eventOutput.emit(event.type, event);\n    event.preventDefault();\n}.bind(this);\nyou should be able to scroll overflow: scroll surfaces without any side effects. Let me know if this fixes your issue.\n. You can access the branch here: https://github.com/famous/famous/tree/wip/wgester/scrollview\n. There's a fix in the works: https://github.com/Famous/famous/pull/228\n. No, some of the forces take arrays, but the base force class still takes a particle. We should standardize all the forces so they can take arrays or particles.\n. @michaelobriena @DnMllr \nPlease review\n. @TheAlphaNerd It's production ready. @AdrianRossouw So long as you weren't using the pageChange event, there shouldn't be any breaking changes in this update, just some new API hooks and bugfixes. We definitely need to put out a changelog and that's something we're working on.\n. @TheAlphaNerd Yeah, this is already fixed. Waiting on code review.\n. https://github.com/wgester/famous/tree/wip/wgester/scrollview\n. @andrewreedy it will work for a sequence of true sized surfaces.\n. It's a great idea, I'd rather see it implemented as an add on to mouseSync, @pkiers if you want the pull request, would you mind refactoring and resubmitting? I attached an example of how this could be implemented.\nhttps://github.com/wgester/famous-test-cases/commit/6845e4663b3b0b4d90d67ed8960b72a275ffef41\n@michaelobriena thoughts?\n. @michaelobriena  https://github.com/Famous/famous/pull/455\n. The checks come sequentially, and the flag is for both checks so if both the width and the height are true sized, both clientWidth and clientHeight need to be queried. So the flag only gets turned off for width iff height is not true sized and doesn't need to be queried.\n. Yes, this is good to pull in. Context size and size should not be checked for equality.\n. @michaelobriena @TheAlphaNerd \n. And issue: https://github.com/Famous/famous/issues/207\n. Yes, this issue: https://github.com/Famous/famous/issues/89\n. This looks good to me as far as setting attributes goes. Do we want to consider preventing the overwriting of famous style or class?\n. This is ready to merge, @ftripier @DnMllr?\n. Looks good to me. On line 108, we should decide whether we want clarity in flipping the value and use a conditional or just start using xor ( x ^ 1 ) for performance.\n. Looks good.\n. You can currently pipe your own y-direction sync in to scrollview and that will work. In the future we're considering the idea of being able to pass in a custom sync.\n. @dscan: That sounds worrying, any chance you could point me to an example repo or code?\n. Looks good \n. You should be able to set classes on the container in scrollContainer, but not things that are overwritten in content and you currently can't set classes on a scrollview as it's a layout. This will set a class in a scrollContainer's container: \nvar scrollContainer = new ScrollContainer({\n    container : {\n        classes: ['niceBackground']\n    }\n});\n. Yeah, this seems fine.\n. @arkadyp This looks good, but it would probably be better to modify it to accept a touch limit in the options of touchSync.\n. @bguiz good catch if you could reformat your pull request to cache the length, check it and return null if it's 0 and then submit it to the v0.3.0-alpha branch then we can go ahead and merge it in. Example of what I'm talking about: \nvar length = this._.array.length;\nif (!length) return null;\nif (this.index === this._.firstIndex + length - 1) {\n.......\n. The original demos are here, but they're using deprecated code and custom views. If you have any questions as to implementation feel free to email me at will@ famo.us. Repos:\nhttps://github.com/wgester/shine\nhttps://github.com/wgester/peek\n. Looks good to me.\n. I'm good with this. Signing off.\n. Good catch on the paginated 'pageChange'! There's already a fix for it in the works. The 'settle' event is firing, it just contains no event data.\n. @michaelobriena can you look this over?\n. Good catch, no reason for that to be there.\n. Tested on examples repo.\n. This looks good, do the other transitions need similar fixes?\n. @StephanBijzitter We probably don't want that behavior as that would default item size in scrollview to the window size. Flippers, and other compound widgets don't currently have a getSize as it's potentially ambiguous. Possible fixes would be having a setSize function for flipper, having it take on the size of the largest x and y from the two nodes, or returning the visible node's size. There may be a prebaked idea of size in flipper in the future, but, for now, we recommend adding a getSize function to flipper.\n. This should only occur if you're altering the array backing of a viewsequence directly instead of using the viewsequence api. Viewsequence isn't designed to handle the modification of the array it's passed currently, but we can look into implementing that functionality.\n. I'll add it to the feature list, but for now if you want to implement it, I would suggest a writing a function something like this:\njs\nScrollview.prototype.scrollTo = function(position, transition) {\n    var transition = new Transitionable(0);\n    this._scroller.positionFrom(transition);\n    transition.set(position, transition, function() {\n        this.setPosition(transition.get());\n        this._scroller.positionFrom(this.getPosition.bind(this))\n    }.bind(this));\n}\n. This might be part of a sizing bug, can you give us a working test case?\n. @alex-mcleod Same, good change. On line 81, could you change the writing to length to a reassignment? From:\nif (!handler) listener.length = 0;\nto this: \nif (!handler) listener = [];\nIt's a faster way to 'clear' an array.\n. This looks good @TheAlphaNerd \n. @IjzerenHein Great catch again, this looks good, @TheAlphaNerd, @michaelobriena can we hotfix this?\n. Good catch of the FA implementation, but this fix is guarding a case that shouldn't happen. This should only occur if you're altering the array backing of a viewsequence directly instead of using the viewsequence api. Can you try using the viewsequence api and see if the problem persists?\n. Yeah, this looks good. \n. @michaelobriena Thanks for the catch, definitely agree. Updated.\n. @richardscarrott, have you tried modifying the speedLimit option?\n. This looks good @TheAlphaNerd \n. I agree, good change. Physics components shouldn't modify origin.\n. This is definitely more user friendly and a good change, I'm ok with merging this in as is. @michaelobriena @TheAlphaNerd \n. I think line 121 should be \nelse if (this.index === this._.firstIndex)\nso that we loop on the first index. Apologies on my previous comment, it was probably unclear, but I was referencing the getNext method.\n. ",
    "jacksenechal": "@TheAlphaNerd can you elaborate on the fix that you referenced for scrollview? I don't see the overflow: scroll fix suggested above in the 0.3.x code so I assume it's got to do with true sizing on surfaces in scrollview or some such thing?\n. A year later, just wondering what became of the work in progress on this? Are surfaces able to understand whether they are on the screen or not? If so, is it available in the 0.3 library, or just the new engine?\n. Try adding \"initial-scale=1\" to your meta tag:\nname=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\"\nWe had this problem and initially fixed it by placing \"overflow: hidden\" on the main famous container. However this introduced a bug where we were no longer able to specify the order of overlapping surfaces using z translations. So far \"initial-scale=1\" seems to be working correctly without any ill side-effects.\n. ",
    "twysto": "This should fix this issue.\nWhen Scrollview is paginated, if more than one element at a time scroll, it could be set with the speedLimit property.\n. ",
    "quanghoc": "I tried\nvar scrollview = new Scrollview({\n    direction: 0,\n    speedLimit: 1,\n    paginated: true\n});\nand it's still but just harder to reproduce. It's there...\n. Yeah I have the same problem\n. @DrClick thanks for the nice work although I still have problem with scrolling not too smooth\n. This is a complicated problem with browser rendering of font. See my question here \nhttp://stackoverflow.com/questions/27559914/font-pixelate-when-using-matrix3d-scale-and-backface-visibility\nEventually sometime it's pixelate if scale being used as well.\nOne person suggested to empty the surface content and insert it back in to fix.\n. ",
    "SebastianMH": "I am on the case!\n. This issue will be fixed with a larger update to ScrollView that is in progress. The branch is wip/wgester/scrollview .\n. Its in queue but I am working with Adnan on the demo on wednesday.\nOn Tue, Aug 12, 2014 at 1:51 PM, Myles Borins notifications@github.com\nwrote:\n\n@SebastianMH https://github.com/SebastianMH would you be able to update\nthese docs?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/207#issuecomment-51975277.\n. atm\n\nOn Tue, Aug 12, 2014 at 2:08 PM, Sebastian Mil sebastiantheeng@gmail.com\nwrote:\n\nIts in queue but I am working with Adnan on the demo on wednesday.\nOn Tue, Aug 12, 2014 at 1:51 PM, Myles Borins notifications@github.com\nwrote:\n\n@SebastianMH https://github.com/SebastianMH would you be able to\nupdate these docs?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/207#issuecomment-51975277.\n. Thank you @TheAlphaNerd \n. \n\n",
    "shupac": "We thought about this issue and have been re-evaluating how we're handling our module dependencies. In the meantime we'll go back and make sure everything's required in properly.\nThanks!\n. corrected. thanks!\n. on it. will be fixed in the new FU\n. thanks @zoneblaze \n@michaelobriena Can you assign to me?\n. @aendrew Thanks so much man for taking the time to help us out. Grammar fixes have been updated!\n. thanks @SamSeidenberg for the careful eye! Fixed!\n. hi guys, the current University home page (famo.us/university) was built using our scrollview and we didn't implement the scrollbar in that version. As for scrolling, it should work but we know there are some bugs. The good news is that the home page has been redesigned and is being built as of this moment in Famo.us/Angular. The lesson tool itself has been rebuilt as well. I'm finishing a final refactor right now actually. Both the new home page and the new lesson tool should be deployed by the end of this week.\nBear with us guys?\nThanks for your patience!\n. and thanks for helping out @AdrianRossouw !\n. lol. grr\n. good idea @AdrianRossouw. We have version control of the content internally but even then could do a better job of documenting changes.\n. Hey @StephanBijzitter, my config was the other way around. The outer scrollview is paginated and the inner ones are not.\n. How long has AppMode been an option in Engine and what's the benefit?\n. ",
    "dominictarr": "confirmed.\n. ",
    "tgsuarez": "I am having the same problem of not being able to scroll.\n. Ok, it's the http://famo.us/university that does not scroll. The main website is fine.\n. Thanks for the quick email:\nThe exact page that i tried was: http://famo.us/university\nThe version of Google Chrome as 36.0.1985.143\nThe version of Safari was 7.0.5\nHope this helps, Tom Suarez\nOn Aug 16, 2014, at 7:18 PM, Adrian Rossouw notifications@github.com wrote:\n\n@tgsuarez could you provide us with a list of browsers you tried it on, and the exact pages and section you were trying to scroll that did not work.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "onceatime": "Here some samples: http://purpled.de/\n. thx for this article. the repro can be found here https://github.com/s4dc/hafem\n. Not for now. The implementation doesnt feel natural at the moment. I Already started with the real integration and rework. The current version was just a poc if it's possible in general.\n. any news on this?\n. ",
    "drenovac": "hello Floriant - I've recently committed to Ember and have been waiting on Ember for 2 years like everyone else. I saw an article yesterday which intimates that famo.us Indistries themselves will work to integrate to Ember : http://www.infoworld.com/t/mobile-development/famous-framework-gets-angularjs-integration-242782\nMeanwhile, whilst rather raw, I'd happily help in any way that I can\n. ",
    "zackbrown": "+1, would be great to have a concatenated file available from bower installs\n. Thanks @TheAlphaNerd!\n. Also, there was a bug pushed out in that /#/animations example in famous-angular-examples, @DallanQ \u2014 a generic sync that was piped from Engine was capturing all input events, and effectively disabling that text input.  As @dmvaldman mentions, <input>s are fully supported in Famo.us (as is Angular's two-way data-binding in Famo.us/Angular)\nSorry for the bug there!  If you pull down master on famous-angular-examples, that example should work for you now.\n. Famo.us/Angular takes a similar approach to both your proposed FMS and\nVRML: http://github.com/Famous/famous-angular\nBy making use of Angular's HTML-vocabulary-extending directives,\nFamo.us/Angular lets you use HTML to declare your tree. This comes with the\nadvantage of using existing tools (HTML and Angular's compiler) rather than\nhaving to write those pieces from scratch. What's more, it makes it really\neasy to integrate Famo.us with normal HTML/other web apps.\nAlso, if you want to write your views in jade it actually looks extremely\nsimilar to your proposal for FMS (example:\nhttps://github.com/thomasstreet/famous-angular-starter/blob/master/app/partials/jade.jade\n)\nFamo.us and Angular end up making a really elegant pairing: even if you\nhaven't checked out Angular much before, if you're interested in Famo.us\nand would like to be able to use an MVC including declarative views,\nFamo.us/Angular is the best solution that I'm aware of so far. (disclaimer:\nI'm a contributor)\nOn Jul 24, 2014 12:47 AM, \"dc\" notifications@github.com wrote:\n\nbut noone ships coffee to production? thats all gulp'ed or grunted build\nprocess before deployment?\nhaving code is nice because you can have actual variables/loops etc. but\nit can be verbose, which is where coffeescript etc can help really cut down\nthe line-noise.\nyou might want to compare with VRML\nhttp://graphcomp.com/info/specs/sgi/vrml/spec/part1/concepts.html#SyntaxBasics\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/134#issuecomment-49977196.\n. Hey @totty90 \u2014 out of curiosity, where did you find the link http://famo.us/university/lessons/#/layout/ ?  There is no lesson at that URL, which is why you're getting a blank page.  That behavior would be the same if you go to any other non-existent link, e.g. http://famo.us/university/lessons/#/some/lesson/that/has/never/existed .  To my knowledge there are no links pointing to the provided URL on the University home page, but please let me know if you've run into any as that's definitely something we should fix.\n\nI went ahead and patched some redirect logic into the lesson-viewer application so that it will kick users back to the home page when a malformed/invalid URL is provided [unideal UX but better than status quo.]  I also opened every single lesson linked from the home page to ensure that they all load.  Thomas Street and Famo.us are working together on an overhaul of University as we speak and we're expecting some major improvements when we roll that out.\n@TheAlphaNerd \u2014 should be good to close this.\n. Hey @StephanBijzitter \u2014 the short answer is that simply adding an ng-controller attribute (or any other Angular logic, including curly-brace databinding) to a DOM node is not enough to 'add Angular' to the application.  Angular requires a DOM compilation step in order to make sense of those tags/attributes.  The initial bootstrap takes care of this in a simple, run-of-the-mill, ng-app-triggered Angular app, but the case you're describing requires manual compilation.\nYou could try telling Angular to manually $compile that Famo.us Surface after you've added the ng-controller attribute.  That could be something like $compile(mySurface._currTarget)($rootScope).  This may work\u2014at first, and in very simple cases.  Famo.us makes no guarantees about the lifecycles of that _currTarget DOM node (note the prefixed underscore, denoting internal API,) which can lead to some very unpredictable behavior with Angular when Famo.us manipulates that DOM node behind the scenes.  Is all you really want here easy data-binding?  Or do you want to go full-Angular?  In the latter case, I really expect you'd end up wanting more than a single ng-controller on a single Surface, and I don't think that approach will extend well.\nHave you already checked out Famo.us/Angular?  Our core mission has been to enable building real-world, medium-large+ scale applications with Famo.us by making it as easy as possible to bring these two libraries together.  Seven months and something like 2000 human-hours into it, I feel like we've fulfilled the core of that mission.  Famo.us/Angular fully supports vanilla Famo.us (via fa-render-node) and vanilla AngularJS (outside of Famo.us and in the contents of Surfaces, as you're trying to do here.)  Is there any reason you wouldn't just want to make use of that library, which does exactly what you're looking for?\nHappy to take this conversation up at Famous/Famous-Angular or you can reach me by email at zack@thomasstreet.com\n. I believe Chrome fixed this at one point a few months ago and then regressed.\nThe bug appears to occur specifically when both transform-style: preserve-3d and overflow: hidden are on the same element. A solution that has worked in the past for Chrome is to use two containers:  an outer container with overflow: hidden and an inner container, a child of the former, with transform-style: preserve-3d.\nFor example, @jordangarside in the example you linked, if you use to chrome inspector to remove the overflow: hidden property from #mainCtx, (since that element's parent, .famous-root also has overflow: hidden and since #mainCtx has transform-style: preserve-3d) z-translation works as expected. \n. +1!\n. I'm unable to reproduce this on OSX 10.10.1, Chrome 39, Chrome 40, Safari 8.0, or Firefox 35.  Have you tried disabling extensions?  From your screenshot it looks like you may have an ad blocker installed, which could (?) be interfering with asset downloads.  Are any of the asset downloads failing for you? (via the Chrome dev tools \"Network\" tab or any sort of console exposed by your ad blocker.)\n. ",
    "DnMllr": "@talves \nRegarding Scrollview:\n    There are two things of note here. The first is that the intended behavior is that when an element doesn't have a .getSize method we default to the size of the scrollviews context. If you know that that will be the case, then you can plan accordingly in your views. Providing a .getSize means that you want your view to be a particular size when it's in a scrollview, otherwise it is the size of the scrollview itself.\nThe second thing to note with scrollview is that scrollview is currently designed around allowing the possibility of the infinite case, where there are an infinite number of elements in the scrollview. Naturally this would mean that we cannot check whether each node has a .getSize method as there may be an infinite number of elements to check.\nFor these reasons it is unlikely that we will check for .getSize within scrollview.\nregarding fatal errors in general:\n   Famous' philosophy regarding errors has been that, for performance reasons, we do not check for user error conditions except in certain isolated cases. It is likely that this policy will change very soon though, there are far more cases where we can throw informative errors without a performance penalty than there are cases where performance would prevent us from doing so.\nI will be closing the issue but feel free to contact me with additional thoughts, if you want.\n. @onceatime \nYou can turn an existing dom node into a famo.us context by passing the node itself to Engine.createContext(), but you cannot turn an existing dom node into a famous element such as a surface or a scroll view. It is fairly important to maintain a wall of separation between the dom that famo.us controls and the dom outside of our control because we maintain a contract with existing dom content.\nThe problem becomes clear if we allow an arbitrary dom node to become a surface. If we manage it by making it position absolute and applying a matrix3d property to it, then it will no longer block content on the page and could mess with the way in which surrounding elements flow or are sized. Furthermore, we need to apply the preserve 3d tag to its containing element and also potentially apply perspective. Because these changes need to happen to the parent, we would be altering dom content that we weren't given explicit permission to alter. It's safer for everyone if we just make the context the clear divide between famous and non-famous.\nHowever, for most use cases, establishing the context is usually sufficient for properly applying famous to a preexisting page. If you are trying to do something for which this is insufficient, feel free to hit me up with your more specific example.\n. Thank you for bringing this to our attention, @LeXXik, I'll look into it and get back to you.\n. So I've been looking into this and unfortunately it seems like there isn't much that can be easily done from the famo.us side. It seems like there are a number of problems with touch events in Android's web view. Some people have been suggesting passing options to the web view on instantiation, while others have had luck with calling preventDefault on all touch events.\nIf you have better luck coming up with a good solution please let me know.\n. I do think that this is confusing. I agree with @michaelobriena that Modifier is not the scene graph builder, RenderNodes are. Perhaps we can find a way to make this more apparent in our API going forward.\n. We will be fixing this, but as Mike said, it's going to be a big issue and we will probably not be merging in this pull request. I believe that this pull request is ok to close.\n. Yes, I don't think we should make commits any more expensive than necessary on base classes. This is a great idea and should be made into a subclass of GridView.\n. Yes, this is all good, @TheAlphaNerd this can be merged.\n. @alexanderGugel\nWhile the native javascript array has a number of features that make it useful in a wide variety of circumstances, we have found that there are cases where it does not adequately meet our needs.\nThis is one of those cases, as we have the ability to guarantee a certain degree of memory safety by storing the array itself in closure and only allowing access to it through approved methods. And I feel good about this, because preventing things from going wrong decreases the chances that things will go wrong.\n. This looks like a good change. While I personally prefer to write my variable declarations as a single expression, it doesn't match the pattern in the rest of the platform. I'd suggest making lines 108 - 114 conform to the normal pattern.\n. Oh sorry, I see your linting changes that just came in fix what I just said... I think it's good. Seems to have greatly simplified the logic here.\n. \bLooks good.\n. Looks good!\n. calling getSize() twice is probably unnecessary:\njavascript\nvar nodeSize = this.array[i].getSize() ? this.array[i].getSize() : this.array[i].size;\nto\njavascript\nvar nodeSize = this.array[i].getSize ? this.array[i].getSize() : this.array[i].size;\n. This is going to necessitate discussion.\n. ",
    "mvanlonden": "Here it is. Thanks for the response\nhttps://gist.github.com/mvanlonden/828173cee6f287595bee\n. Is this just an inherent property of famous or is there another way to configure it? Here is a jsfiddle to make it a bit easier to check out.\nhttp://jsfiddle.net/mvanlonden/7wEWU/54/\n. Ah so this only applies to a surface that has been translated along the z-axis within a perspective view, not just any surface with a perspective view. \nI will try and work out the calculation to compensate for z-axis translation. So when setting perspective you set a number in pixels. What does this number signify?\nSomehow f(perspective, z-translation, x-translation, y-translation) = [adj-x-translation, adj-y-translation]\n. Great thank you! This is exactly what I was looking for.\n. ",
    "lifeinchords": "+1 to @tvararu's comment\n. ",
    "kof": "\nJS allows for private functions, which should be inaccessible from outside the module, and thus not attached to the prototype.\n\nyes it does\n\nWhy would you suggest putting private functions in the prototype, \n\nAs I already said, for monkey patching. You are building a library and you want it to be used by lots of developers. Your library is not perfect and will never be so. Monkey patching gives developers the power to fix something without to create an own version of the library, which is much worse than just overwriting some function temporary, even if it is a private one and probably will change.\n\nwhere do you see _private as a standard convention\n\ndo I really need to put together all the popular libraries from the web to show that this is almost standard? \nThe other option is not to prefix them at all, but make a @private and @protected comment. I am fine with this solution too ... and probably its even a better way.\n. I don't need to mention that the difference between a framework and some tool is huge. We build stuff on top of framework and need it as flexible as possible.\n. >  When I used private functions in my own code, I can't see the comments anymore. For me, they are an important indicator of stability in my code. \nYou should care about stability when you use some api. When you read it afterwards its already done. Also its just one click away from the original function. Its not necessary to see all the time \"_\" while reading the code: \"ooo this code is using a private method, bad, bad code!!!\"\nCode is always broken and is always in change. Making it look good is making us feel less bad. \n\nMonkey-patching is still possible - it's only a little more effort.\n\nSometimes you need to fix something quickly and probably temporary. Its ok to do so in user code.\nForking and maintaining an own copy is way more heavy task.\nWhatever you decide:\n1.  \"_protectedMethod\" is a new concept, it was private method before\n2. not exposing all the private methods doesn't make your live easier, but makes our live harder\n3. named function vs. function expression. function _myUglyFunction() {} is prefixed FUNCTION NAME, MyClass.prototype._myUglyFunction = function() {} is prefixed PROPERTY_NAME which is a huge difference.\n. bonus from exposing _private methods is you can unit test them directly.\nYou can still use real privately scoped functions for small functional things you need.\n. http://stackoverflow.com/questions/4484424/underscore-prefix-for-property-and-method-names-in-javascript\n. @marklu you might want to use a separate comment tag for api privacy status. Right now you use @private @protected @public tags which describe where to use methods/properties internally AND externally. However there is a big difference between a method which is public for that class, but should not be used by the user. It could get \"@api private\" tag additionally. Based on this tag you can generate documentation by only considering \"@api public\" stuff.\n. @marklu what you say is what we have right now.\nI don't want to access underscored methods when subclassing. It feels like accessing private stuff.\nYou can use any \"ugly\" conventions internally and disagree on every argument on this thread. But don't force me to use this._eventOutput in my code, please.\n. So you require to patch the lib. ok.\n. In this case yes, but this requires to do this f.e. in all views. And also it was just an example, if this convention remains, there will be lots of others different cases. \nSo I don't see any other way for me as to maintain patches.\n. its even reproducible on all the famous documentation pages ...\n. I don't think its because of graphics ... its also on pages with no graphics and also on desktop chrome.\n. Its not that jerky any more but still there is some stuttering on iphone 5 with relatively simple contents. There must be one more issue there.\n. Stuttering happens during slowing down after scroll.\n. Should I create a separate issue?\n. @TheAlphaNerd sorry I was not talking about the famo.us website.\n. I am using released version 0.2.1\n. Questions 1 and 3 are perfectly explained now :)\nRegarding question 2:\n1. I believe the array passed to .sequenceFrom wouldn't constantly grow in size if you remove surfaces from  it, the length property says its growing? Do you replace values by null or undefined?\n2. If you remove the surfaces from the array, on scrolling back you need to get them again from the user. How does this happen right now?\n. @marklu yeah this is one of obvious missing parts for truly infinite scroll ...\n. So if I put a ContainerSurface which contains a bunch of other surfaces into sequenceFrom array, all dom nodes will be reused. If I put just one surface with content string which contains all the other elements - all the inner elements will be recreated for every item, right?\n. It is a bit confusing, let me sum up this:\nIt doesn't matter if I pass ContainerSurface with surfaces inside or Surface with html inside. The only element which gets reused is that one passed to sequenceFrom, all the inner elements will be recreated every time the sequenced surface is rendered. Correct?\n. Ok lets say on deploy :) So can I create view for every list item, add all the surfaces into the view and sequenceFrom views list and make it reuse all the dom nodes?\n. Do I need to use Group to get the scroll transform applied on all list item surfaces?\n. All in all it sounds like its not ready. \n1. One surface and content with html string in case of f.e. 10 dom elements means on scroll it will be dozens of dom nodes created via innerHTML which is not really fast\n2. ContainerSurface - same like previous + javascript overhead for creating all the inner surfaces\n3. View with Surfaces - we get a node reuse but at cost of setting matrix3D for every surface, which is higher than in case 1\nIt really sounds like its broken by design.\n. It should really be possible to have the case 1 or 2 with nodes reuse. I got it even in iscroll.\n. Not fixing this means the whole strategy for dom reuse is a shit, because 1 list will cause more created dom nodes than the whole application.\n. @malandrew thank you for this explanation.\nI think the biggest problem at famous is the lack of documentation of low lever stuff like this.\nI know exactly what you mean by DOM diffing, I have started an experimental lib for this https://github.com/kof/diff-renderer it is not ready because of lack of time, but I have a concept how to make dom diffing independent of template engines and being able to change attributes, remove nodes and resort nodes fully automatically and out of the box.\nDOM diffing would be a more developer friendly solution, one needs just to pass the new html string.\nBut it also has its cost.\nA way more effective for this high performance use case would be to update all the inner nodes of a surface manually when it is in the viewport or within margins.\nWhat I miss is:\n1. How to hook in when a surface is in viewport or within margins.\n2. How do I know which position in the global sequencedFrom list it has. Knowing this I can maintain my own nodes pull update them and inject them into the surface manually.\n. In short: we need an event which fires every time when a list item gets rendered and passes its renderable instance. So I can grab the item id and set the content using a documentFragment.\n. Wait, I believe I know how I can do it right now:\n'recall' event is fired when a surface is cleaned up. In that moment I can release my documentFragment and set state occupied = false so it can be used on the next surface with new data inside. I build an own fragment/elements allocator which will give me a new fragment with my elements inside if there is no free one.\nPlease correct me if I am wrong.\n. I can actually perfectly make use of ElementAllocator class for this.\n. @malandrew yeah, you will probably end up in Surfaces which can be diffed to their SurfaceContainer. What I have in my diff-renderer is additionally a hyper fast html parser (not the robust and forgiving one) which allows compatibility to all templating solutions. After html is parsed and a json tree is generated its exactly the same what you would implement. Diffing 2 json tries and applying changes.\n. @petehunt have you tried to compare applying diff on a documentFragment with lets say 10 elements (changing textContent and attributes only) using react vs. pure dom. How big is the overhead?\nThis would answer the question if using react within high performance infinite scroll on mobile devices is a good idea. My feeling says there will be some milliseconds too much ...\n. @petehunt We are talking in context of famous Scrollview, which renders only stuff within viewport + margin independent of the rendering solution. The only thing which counts now is the overhead of applying changes.\n. I saw this react explanation already, its all fine for react in general. Here we have a very specific high performance case.\n. yep.\nI would love to see a pure bench of pure dom vs react on same number of elements with same changes. Probably without resort and node creation, just textContent and attributes.\n. you give it renderables (surfaces, views etc.) ...\n. Here is a working example for infinite list on top of Scrollview https://github.com/JonnyBGod/famous-infinitescroll\n. @petehunt yeah didn't got it too first time. You can push to the sequenceArray after Scroller is created.\n. about truly infinite there are still some open questions https://github.com/Famous/famous/issues/73 :)\n. @petehunt its not mine :) ... this is what I don't understand too and asked in #73 I believe famous will release a truly infinite scroller with all that points tackled later.\n. Regarding bench for the overhead rendering diff within a surface with react. I just found one bench which compares react diff vs. innerHTML. innerHTML parses xml creates all the nodes etc etc. it should be WAY slower than maintaining nodes pool manually, but still its 70% faster then reacts diff http://jsperf.com/react-vs-pure-js/9\n. @leszekr Oh I am so stupid, I read Surface code multiple times and never found a mention that content can be  a dom object. Please point me to that place in  code.\n. Yes ... but its a private method, no mention about that in .setContent or constructor documentation ... it looks like its an internal feature no user should use because its a topic of change.\n. @dmvaldman yeah, Node and DocumentFragment\n. thanks\n. sure, its deviceorientation event on window object, which I forward to my application context. Within the view I listen to this event to create some visual effects. I use data passed by the event.\n. For that case triggering event only if a view is visible would be a good approach.\n. But also just asking if I am visible within a view is an option.\n. Another very good usecase:\nImagine you have facebook like feed where items contain images. Now in terms of ui performance and network optimizations you might want to load images only if user stops scrolling or scrolling speed is low.\n1. I need to know if scrolling speed is low enough, update event is everything I need.\n2. I need to know if view is visible.\n. @redwoodfavorite just took a quick look at your implementation, I believe you assume that surface is always fullscreen ... and thats wrong \n. Also I believe developer has to get power to decide if surface needs to be updated outside of viewport or not. That might be also sort of optimization prerendering stuff before it comes into the viewport to avoid rendering artifacts and delays.\n. Another usecase:\nYou have a screen which could be opened as a first screen. It requires loading stuff from the server. It shows loading spinner.\nNow user starts an application directly from another screen. During this screen is shown I want to prepare the first one. When this screen gets closed I want to show the first screen immediately.\nNow If first screen is preparing and rendering out of viewport, I don't need to show loading indicator and spend cpu performance on it.\n. Thanks.\nTo sum up, we need 2 different methods and corresponding events for different use cases:\n1. isRendered method and 'render' event which results true when the node behind surface is inserted to the dom. This one should be easy to implement.\n2. isExposed method and 'expose' event which says that a node is visible by  a user in terms of positioning. This one is harder to implement.\nIf you are able to add the first one quickly that would be wonderful.\n. >  The second half of the solution would be implemented wherever you perform image loading. If you use an image tag, then it would be at the view layer, but if you load an image using the javascript new Image() constructor, it could occur at the data or controller layers. Implementation of this lazy loading is something we will likely explore in the future, but it currently outside the scope of our near term plans.\nJust remembered I have done some research on this https://github.com/kof/images-loader\nGoal of this implementation is to get the size of the image before render it. It reuses Image instances, defines a pool of them.\nI needed this because depending on the image size, I take different display size. F.e. if image fits my container I use original size, if its much bigger, I use contain or cover.\n. @marklu 'deploy' event doesn't guarantee that the node is in the render tree after that. In fact it is not, it is there after nextTick ... and I don't know if this is reliable.\n. I fully agree with @speigg I have the same issue as I tried to implement EventProxy https://github.com/Famous/famous/issues/116  I tried to set subscribe to null, but then it didn't work for some reason in other situation, I wanted to discuss it but didn't get enough responses on EventProxy basic idea to go forward with implementation details.\n. Just a side related issue: \nvar clickEvt = new window.CustomEvent('click', {\n                'bubbles': true,\n                'details': touch\n            });\n'details' is wrong, it should be 'detail' ... so currenntly touch object is not accessible from the event handler for that event.\n. Another question, why not to use 'tap' ... this way we woudn't need to do any retriggering of click and preventing the native click.\n. And also question, why not to create a tap event without to involve DOM events at all.\n. Reacting on both, mouse and touch events is correct. You never know which kind of device it is. Potentially it could have mouse, touch and gloves at the same time. Unifying all of them to something more generic is absolutely the way to go.\n\nI agree that the way FastClick works seems to be broken, on that note also GenericSync with registered both MouseSync and TouchSync fires both events on touch enabled devices, which I'm not sure should be the case.\n\u2014\nReply to this email directly or view it on GitHub.\n. I sent you a pull request for FastClick https://github.com/Famous/inputs/pull/13\n\nI was testing it multiple days and it works for me now.\nDesktopEmulationMode doesn't solve the ghost click issue.\n. On a screen with slightly more surfaces, scrollview ... it takes 15% cpu . Instantly. Without user Interactions.\n. I am not sure its exactly .commit methods, probably there are more places.\n. Is it something we can expect within the next month?\n. first of all an isDirty check would solve the perf issue already. \nFrom design perspective I imagine something like a global render queue, Every node puts itself into the global queue if it knows that it needs to be rerendered.\n. Related to rendering also to consider: rendering should fit into frame rate. Iterator over rendering tasks should always check the time spent for each task and request a separate animation frame if needed. \n. This issue is the most blocking one for me now. It takes 30-40% performance on my ios7 ip5 on relatively simple view at the moment no interactions run.\nCan I help somehow to resolve this faster? Are there any hidden ongoing discussions about this?\n. Here is a profile screenshort from safari's developer tool connected to the ip 5.\nI have about 20 surfaces on the screen and 20% cpu load without interactions and no fluent scrolling.\nI have implemented a render queue in my other project you might want to look into (I am free for chat). The only thing I check on every frame is the length of the queue.\nhttps://github.com/kof/diff-renderer\n\n. Have you done some tests, how much time is spent on dirty checking on every frame for X surfaces?\n. Where can I take a look on the changes for this?\n. @michaelobriena  Why are you actually closing issues without to resolve them in some direction? How should people follow the issue ....\n. I do already exactly this. However I believe non dom events should be always prefixed like this.\n. Actually I am not trying to push some solution, much more to see if others stumbled over the issue.\nI believe I have seen already famous event \"update\" messed up somewhere in the pipe chain. Will post it if I see it again.\n. So basically you suggest, that I need to be aware of ALL events used by EVERY component in the pipe line and manually ensure that they don't mess up.\n. At least it requires a way to easily prefix all events during piping, f.e. source.pipe(target, 'my-prefix:')\nOr a way to subscribe all event names and then reemit them:\nsource.on('*', function(name, event) { target.emit('myprefix:' + name, event) })\n. Oh, right, EventFilter ... still its unpredictable if some component in between interpret or emit the same event ... one needs to really know every event inbetween.\n. I believe I know how I messed up the \"update\" event. I piped events from Surface A into View A, then I used view A inside of view B, in view B there is a surface B. Surface B is piped into View B and then views A and B are used within view C and both views are piped into output of C .... That means that surfaces A and B emit the same event but with different data at some point.\n. Probably its worth to declare an array of used event names per each instance which emit something? First of all for manually quick checking which events are used and also its not hard to write  a tool then for development which alerts me if different components piped the same event into one, once we  have the events list.\n. Just tried to do the renaming ... there is actually no well suited component for this, EventFilter is to filter events, EventMapper is to change targets dynamically. We are missing EventPrefixer.\nWould you accept a pull request for EventPrefixer?\n. I suggest the following api:\nvar myPrefixer = new EventPrefixer('myprefix:')\neventHandlerA.pipe(myPrefixer).pipe(eventHandlerB)\n. alternativley EventRenamer\nvar myRenamer = new EventRenamer(function(name, event) {\n    return 'myprefix:' + name\n})\neventHandlerA.pipe(myRenamer).pipe(eventHandlerB)\n. or even better EventProxy\n```\nvar myProxy = new EventProxy(function(name, event, emit) {\n    event.something = true\n    emit('myPrefix' + name, event)\n})\neventHandlerA.pipe(myProxy).pipe(eventHandlerB)  \n```\n. another  solution could be to have a setProxy method on EventHandler\neventHandlerA.setProxy(function(type, data) {\n    data.changed = true\n    this.emit('myprefix:' + type, data)\n}).pipe(eventHandlerB)\n. At the end I found EventProxy api  the best and using it already. \n```\nvar myProxy = new EventProxy(function(name, event, emit) {\n    event.something = true\n    emit('myPrefix' + name, event)\n})\neventHandlerA.pipe(myProxy).pipe(eventHandlerB)\n```\nI would love to hear your feedback on this and also if this could land in framework ... \n. ping\n. > Personally I would modify the data with a source attribute as opposed to change the type name.\nHow do you mean that?\n. > Piping to an event \"modifier\" where you change the type and/or data seems like a good solution to me. \nalso it would actually replace EventFilter or any other sorts of manipulation.\n. Well I mean EventProxy which can kill or modify. \n```\nvar myProxy = new EventProxy(function(name, event, emit) {\n    event.something = true\n    emit('myPrefix' + name, event)\n})\neventHandlerA.pipe(myProxy).pipe(eventHandlerB)\n```\n. The same is actually for 'scroll' event and ideally also 'scrollStart'\n. as discussed with @michaelobriena we miss a state aware component (probably it is ScrollContainer) which needs to maintain scrollTop and stuff.\n. matrix3d is supported since IE10\n. you mean if mixing css z-index and z value in matrix3d? I believe its a different issue you might want to open and show an example.\n. > (i.e. drag scrollview past end and click on a button in different part of screen).\nsounds like an additional enhancement, this can still be done.\n. Wow complete removal?\nWhat is the replacement for the issues it solves?\n. @TheAlphaNerd do you have issues with any of this fixes? You realize how much time I already put to fix it?\n. @TheAlphaNerd I had all this parts in separate commits, but I read your developer guidelines. Did you? https://github.com/Famous/famous/blob/master/CONTRIBUTING.md#development-process\n. My biggest problem in contributing:\n1. there are no tests, I can't ensure to not to break anything\n2. There is no full visibility in development. Looks like something is in work here and there, but where are those issues .... where is the issue which is a replacement solution for FastClick?\n. @TheAlphaNerd don't take it personal. Its an attack on the process.\n. Anyways if FastClick is on removal way, I am not really interested to invest more time in it. Sorry.\n. The element which causes the issue is a Surface div, its not created manually.\n. Scope variables, copied out of chrome dev tools:\n<exception>: TypeError\nelement: div\nnodeStore: undefined\nnodeType: \"div\"\nthis: ElementAllocator\ncontainer: div.famous-group\ndetachedNodes: Object\nnodeCount: 0\n__proto__: ElementAllocator\n. Found the reason. Hard one. It happened because I occasionally used a surface which has been used in a different context before. \n. Yeah, it should be in Transitionable and then piped to places like RenderController where you have no access to the transitionable directly.\n. I also tried to trigger repaint by changing opacity from 0.5 > 1 vs. 0.5 > 0.999, in both cases, when transform is set correctly, repaint doesn't happen, only composition, at least most of the time. It still happens the first time and sometimes occasionally for some reason. But there si no difference if using 1 vs. 0.999\n. Yep. I am actually working on a an architectural framework which will connect loosely coupled components and will help to define hierarchies. Investigating how to go streams right now without to bloat this up with huge libs like rxjs or bacon.\n. Also I think the whole events handling of famous implemented with streams would lead to an even better logic and api.\n. ",
    "markmarijnissen": "For readability, I am against @private and @protected comments. When I used private functions in my own code, I can't see the comments anymore. For me, they are an important indicator of stability in my code. (Of course, I could write comments, but this is not necessary with the _ convention).\nMonkey-patching is still possible - it's only a little more effort.\n- Instead of modifying a private function directly, you have to modify the protected/public function. In the worst-case scenario, you have to copy both public and private functions in your monkey-patch. \n- You can also copy and modify the entire file, and use RequireJS alias or Browserify-Shim to swap default implementation with the modified one.\n- Or you can just fork famo.us, or modify the file locally. (Unpreferred, as this will cause maintenance overhead and forking-fragmentation)\nI prefer making monkey-patching extra ugly (forcing people to think of more clean solutions that fit in the framework), than to sacrifice code quality and usability.\nThat being said, it should be carefully considered whether functions are really private or when they are protected. For example, the Scroller has an _innerRender function which could be very important to override when subclassing your own Scroller.\n. @dmvaldman: wait, isn't the content stored now in a DocumentFragment? \n. I suppose you have fixed this in the upcoming new engine release. Care to open-source the decisions you'e made on this?\n. Did anybody compare performance using the new wkwebview?\n. What if Surfaces never returned true when getSize is called? This way, layouts would actually have a size to work with. \nUnfortunately, for some reason this breaks modifying Surface size? \nCheck out fiddle\nCheck out redefined getSize function:\nreturn this._size || this.size;\nOr perhaps layouts should simply not call getSize() but getSize(true) instead?\n. The answer is YES, it is really useful.\nAnd yes, you should use Crosswalk. I can google that for you. It allows you to bundle the latest & newest chrome browser with your app for fast performance. Because even when the browser is only a few versions behind, it'll make huge difference in performance. \n. ",
    "marklu": "Let's keep it simple -- if a function is public for the class but is intended for component developers only, it should be marked as public but documented as intended for component developers.\nIn general, I see the following:\n- public -- should work when used externally\n- private -- implementation detail; safe to add/remove/change even for patch releases\n- protected -- should only be used by subclasses with extreme care to implementation details; expect breakage if used by a separate class (hence the _ prefix)\n. You can call it something else in your code.\n. You don't have to patch the lib. To add an event output to your object, do the following:\nvar myOutputEventHandler = new EventHandler();\nEventHandler.setOutputHandler(this, myOutputEventHandler);\nThis will get you the interface necessary.\n. This is indeed an unreleased master. There's a few kinks to be worked out before it's ready.\n. The cleanup on ViewSequence only applies to what's actually in on-screen DOM but not to the data backing (i.e. Surface objects, ViewSequence nodes). There are plans for doing cleanup on the ViewSequence nodes in the future, but that is currently not implemented.\nSo, short answer: Surfaces are removed from display but not actually destroyed.\nBeing able to actually garbage-collect real data requires that the data be serializable. The intent is custom data-specific ViewSequence implementations for this scenario.\n. 1. Take a look at the 'deploy' event; this may be what you want for 'render'\n2. isRendered/isExposed is inconsistent with the tiered layering. It should be a higher-level controller that decides whether or not an object is visible / to be displayed.\nThere are currently plans to have more information about whether or not an object is visible passed down via the same interfaces that the final transform matrices are passed down to the Surfaces.\n. The commit function has been optimized for flexibility. For values that don't change too much (i.e. calculated from pure functions), you can use CachedMap on the inputs for significant performance boosts.\nAs for recalculations on every frame: this will require some deeper changes in core. Stay tuned.\n. The event names are intentionally generic: this allows you to have the structure of your app route, rewrite, and respond to events without needing to hardcode those events for app-specific things.\nAfter all, if you have access to the individual components, you have access to the references to listen to those components directly.\nIn short:\n1.) Don't pipe your events to one place if it's important to distinguish where those events originally came from.\n2.) Those events should be renamed (and even selectively exposed) if it is important to distinguish where they come from.\n. There is already a way to do the on '*' -- pipe.\n. Ignore the linter.\n. I apologize if my previous response may have been quite curt.\nThe issue is that no linter we're aware of is currently able to check for the actual conditions:\n- If the code is a one-liner, it should be on one line\n- Curly braces always begin a new block and thus introduce new lines\nThis is so that trivial statements don't take up an unreasonable amount of lines:\nif (conditionA) this.foo();\nelse this.bar();\nas opposed to:\nif (conditionA) {\n    this.foo();\n}\nelse {\n    this.bar();\n}\nHowever, if you nest statements, they are still technically a single statement. Those then cause the single-line issue. Furthermore, when coupled with some broken indent checking, the example you posted above passes through the linter when it should not have.\nIn short, the linters available are imperfect and have a significant amount of both false-positives and false-negatives. This is what the warnings are for as opposed to errors; if there's an unintentional single statement in a curly, that should be flagged for attention, but the developer should be allowed to ignore. It's the errors that are the real flags.\nThus, eslint can only be used as a guideline instead of as a rule.\n. +1 -- Scene.js was written before functions can be used for defining transforms, so this will be a nice \"feature-parity\" enhancement\n. +1\n. getSize should return the actual size of the DOM element; if the size was set by the user, there is no reason for the user to call getSize\n. There is a one-frame delay because there is no size until it's drawn. In this scenario, getSize shall return null.\nDispatching an event on DOM-based resize is potentially risky, but shouldn't pose too much of a problem across the board.\n. I don't consider this a bug.\n. This should probably be performance-tested. When the code was originally written, the state of browsers was that it was actually slower to move around reallocated elements in DOM vs just updating the transform matrix.\nFurthermore, there is no notion of order in Famous, so if there is an order, either the browser has a bug of not handling CSS3D z-values correctly or the app is not ordering the items correctly (i.e. ambiguously). When two items have the same z-value with the same z-index, the order is indeterminate and should be optimized for performance and implementation elegance.\n. Once we remove the z-index hack, this can be offset to CSS z-index.\n. 1.) RenderNodes should not hold a reference to their parent\n2.) Nodes that mutate should be handled at a lower level API, in a render function as opposed to dealing with the RenderNode directly (which encodes structure)\n3.) It's an abstraction violation to be able to reach into a RenderNode: a RenderNode represents an encapsulated renderable object\n. There should definitely be a layer that allows for removal of RenderNodes, but that layer should be at a separate layer of abstraction.\nThe thing with RenderNode is that it makes something as non-trivial as overriding a key function, such as render, seem trivial when it's actually conceptually complicated.\nI find that when most people want to mutate RenderNodes, what they should be using instead is a combination of some sort of collection (i.e. ViewSequence) and collection view (i.e. FlexibleLayout).\n. -1 (No)\nThis layer introduces a load of architectural inconsistencies, uncalled-for complexity, and worse introduces a breaking change into one of the core APIs: the RenderNode constructor. Furthermore, this makes it problematic to build portable components using RenderNode due to a required reference to its parent.\nWhen a component is packaged as a renderable, the consumer should treat the component as a monolithic piece. Reaching into that component means that implementation details are exposed and need to be supported. This removes the possibility of certain classes of layout widgets or optimizations.\nThe change in the RenderNode interface itself is also a no-go in the sense that every dependency will have to be updated with the new constructor. Layout views become impossible to instantiate until they're added to a context. Such a major change, even if appropriate, will require a carefully planned major release.\nLastly, the \"search\" classes are extraneous and do not have a clear purpose. Such functionality should be rolled into RenderNode if desired. This is especially clear with how many private variables they are trying to access.\n. I like some of the fixes, but this breaks the scenario under which a user is dragging an object while tapping on a different object (i.e. drag scrollview past end and click on a button in different part of screen).\nThat said, all things considered, I think we should move FastClick out of this repo and into a separate shim.\n. Closing this request unmerged. FastClick is on track for removal.\n. This is a great tweak in a critical code path, but few things:\n1.) Stylistically: eslint annotations should not be in the code, else statement should begin on a separate line\n2.) For most users, performance.now() tends to be slower than Date.now()\n3.) The quantity parameter is a bit weird and unnecessary IMO\n. Let's not let too much bloat get into the Engine. One thing at a time.\n. This commit should be split up.\n- requestAnimationFrame and cancelAnimationFrame mechanism for managing the loop\n- Engine.enable() / Engine.disable() should be Engine.enableLoop() / Engine.disableLoop()\n- Quantity parameter should go in a separate commit (it's a separate concept)\n- We can assign a clock/chronometer class, but there's no reason to switch over. We should use the assigned variable as opposed to straight Date.now() though.\n- The eslint warnings serve as a reminder to write a deprecation module. We can console.log for now, but it'd be incorrect to do anything to turn off the warning messages.\n. If this results in a significant performance increase, let's do this change, but with a comment referencing that the child will be removed if it's already in the document.\n. I agree. One 0.x release is enough for developers to get used to align, and removing the fallback should make functionality easier to reason about.\n. No. This functionality unnecessarily bloats the API and should go on a separate layer.\n. This should happen at a different layer.\nIn my opinion, opacityTrans.delay(50) should not work: we should remove delay. It's a duplicate API that could just as literally be handled as \"wait 50ms then transition\". \nThe reason is that several things actually need a delay, and there's no reason to have specific logic in the transitions or physics API. An event loop triggered setTimeout equivalent would be more appropriate instead.\n. Action queues and their invalidations are best served in a separate generic module.\nThe reason halt is necessary is because it's the cancellation of an action queue. However, delay is simply a timing mechanism. If halt is used as a cancel handler, the action queue can be much more robust and even potentially be suitable for a portable animation timeline.\n. +1 Good find\n. Maybe a deprecation warning first?\n. This looks like a good fix.\nElementOutput is supposed to be just an output driver, and therefore should not track its own size; that feature belongs in Surface.\n. Love this fix. However, a few changes:\n1.) In set(), the this._final should be set to the specified matrix instead of a rebuilt version. Otherwise, errors will be introduced and start accumulating.\n2.) Interpret should always return all the components, so there's no need to do any defaults.\n3.) Let's clean up the commit history; should be one commit.\n. +1 Looks good\n. FastClick functionality should be in its own polyfill completely separate from famous. It'll be much more universal and usable then.\n. The original intention was future plans of garbage collection and expiration. What actually happened is that the entity IDs used for \"render() once use anywhere\" is actually problematic abstraction anyways.\n. Was the intention the following?\n- ('webkitTransform' in document.documentElement.style)\n- ('webkitPerspective' in document.documentElement.style)\nOther than that, +1\n. 1. setSize should be removed from ElementOutput; the element can handle its own size\n2. There should be a set of flags on ElementOutput to determine whether or not each dimension should expand to context; this interface can be provided via setSize\nAs for perspective and perspective-origin: I agree these should be handled in ElementOutput. The reason why it's not is really a figment of legacy.\n. The core of this is the ambiguity in how size is defined for ElementOutput. There's two conflicting ways:\n1.) Using the element's implicit size\n2.) Using the context size (expand to parent)\nIn Surface, the arbiter between these two methods is whether or not size is defined. However, the size property is inapplicable to ElementOutput.\nWhat needs to happen is a flag for ElementOutput: something like useContextSize or liquid, which determines whether implicit size or context size is utilized.\n. From an abstraction standpoint, getOptions should return the set of all options. Otherwise, wouldn't getOption be more accurate?\nLet's move things in the direction of being correct instead of reinforcing an unusual edge case.\n. Looks like a low-risk shim while we get this on the deprecation path; +1\n. +1 when the physics changes come in\n. This is actually an overall performance issue on all browsers that affects Firefox more noticeably than others.\n+1, but with the caveat that odd-sized dimensions on either the element or context in combination with centering may result in blurry text due to lack of pixel alignment. The correct long-term solution is to only snap when to pixels when the item is not moving.\n. The fuzzy text is due to lack of alignment.\nThe fonts are rendered with the assumption that they'll be directly drawn to pixels on the display. More so, the default behavior is to use subpixel antialiasing to take advantage of the layout of the RGB to display features smaller than physical pixels. In any case, when this layer of post-processing happens and the end result is not pixel-aligned, the pixels have to be resampled again, and the original antialiasing (or worse, subpixel antialiasing) is lost: they are blurred with adjacent pixels. This may look correct and even be desired when items are moving, but when they are flat, you want to pixel-align these as to not lose the carefully-tuned effects.\nIn short: when an item is at rest, make sure it is pixel-aligned at the end. Otherwise, the crispness of fonts will be ruined when they are resampled and artifacts appear.\n. This does in fact cause memory leaks, but significant architectural changes will be required to address this case.\nThe main difference is that entity IDs currently persist across all frames but it'd be more appropriate to assign them per-frame. A system of destructors then becomes necessary to avoid some serious overhead.\nThe proposal of returning this for render has been tried in the past, but this makes the scene graph non-serializable while inducing noticeable overhead during per-frame parsing.\n. Whenever possible, you'll want to load JS via the script tag. The browser already has a mechanism for caching and it's typically not a good idea to interfere with that. The script is loaded once from the CDN and the same copy can work for multiple sites.\nIf you really want to splice the scripts around and implement caching client-side as with basketjs, you'll want to control the JS. This means not using the CDN.\n. ",
    "pezskwerl": "Are you by chance using pagination?\nOn May 27, 2014 7:15 PM, \"quanghoc\" notifications@github.com wrote:\n\nYeah I have the same problem\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/72#issuecomment-44347455\n.\n. It could be related to this https://github.com/Famous/physics/issues/10\nOn May 27, 2014 8:07 PM, \"Oleg Slobodskoi\" notifications@github.com wrote:\nI don't think its because of graphics ... its also on pages with no\ngraphics and also on desktop chrome.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Famous/famous/issues/72#issuecomment-44351114\n.\n. \n",
    "mutazmq": "As the user scrolls down, I need an event to be triggered to tell me that the ScrollView has almost reach an end and I need to add a new set of surfaces. Currently, I don't see any event or handler that helps me to do so. What is the best way to implement it?\n. When I use FastClick and register a click event on a surface, I get both events: CustomEvent and MouseEvent . How can I stop this behavior? \n. I have created a ScrollView with 10 plain surfaces (no content in them) and scrolling is lagging. Scrolling velocity is choppy and not proportional to the touch velocity on my Android device, while it is great on my PC. Am I missing anything?\nThis is the code I'm using with Cordova. \n```\n    var scrollview = new Scrollview();\n    var views = [];\n    scrollview.sequenceFrom(views);\nfor(var i=0; i< 10; i++){\n    var background = new Surface({\n        content: '<h1>' + i + '</h1>',\n        size: [undefined, 200],\n        properties: {\n            backgroundColor: 'blue'\n        }\n    });\n    views.push(background);\n    background.pipe(scrollview);\n}\nthis.layout.content.add(scrollview);\n\n```\n. I am using fastclick. There is some performance gain when I commented it out, but still in Cordova it is lagging. \nAbout crosswalk, I used latest version of Chrome on my device instead. Performance still bad (with fastclick commented out). \n. Do you think I can get over this issue? \nAnother question, is Famous actively developed? I don't see any activity recently.\nThanks\n. @dcsan I guess that the webview Chrome uses is an updated version than my android one. I'm not sure though. I just visually noticed a performance gain.\nAnyway, I stopped playing with famous and awaiting mixed mode. Back to native for now!!\n. ",
    "petehunt": "What @malandrew describes is exactly what React is: a way to take an immediate-mode view hierarchy of components composed together and render them to a retained or immediate backend. If you want to go with this approach it's probably best to start with famous-react (way incomplete but a good proof of concept) since we already figured all of the main edge cases with this approach and built the heuristics needed to performant.\n. This is an enormous topic, but the approach naturally lends itself to windowing (only rendering what's in the viewport) and DOM node recycling. This means that there's overhead relative to manual management, but it buys you a lot. And it's much much more performant from a memory and often CPU perspective than an observable approach.\nA good discussion is here: http://calendar.perfplanet.com/2013/diff/\n. You just pass it a bunch of Surfaces and it takes care of the windowing for you, right?\n. I think I need to understand the API of the scroller. Do you give it surfaces or a callback that lets the scroller ask for your surfaces?\n. @kof I don't understand how that can be truly infinite if you need to pass a viewSequence that isn't lazy\n. @kof so your sequence array would grow infinitely unless you windowed it, which is what the scroller is already doing for DOM nodes. Seems redundant :)\nI would imagine emulating the UITableView API would make sense here, since that is a retained-mode infinite scroller.\n. React is quite active: https://github.com/facebook/react/pulse\nfamous-react has always been maintained by Famous -- Facebook never had any official involvement outside of a little guidance by me. The React team has never maintained an official integration with anything other than build tools.\n. ",
    "bunnyhero": "@malandrew: thank you for the informative comment! it would be nice if this information were in the documentation somewhere, maybe in the guides, or in a wiki or something.\ni'm brand new to famous and looking at the reference docs as is, i'm still not sure exactly how Scroller,  ScrollView, and ScrollContainer relate, or how to best use or customize them.\nthanks!\n. ",
    "davidpfahler": "@michaelobriena Is there a solution to this problem, yet? This seems to be THE barrier for web apps at the moment.\n. ",
    "benitogf": "Thanks that worked :+1: \n. ",
    "jmeiss": "So there's no way to get it working on Windows Phone?\nMaybe some methods that I should try to avoid?\n. ah ah I would love to!\nSo there is no solution yet for IE support?\n. FYI I've been tweeted by David Storey from Microsoft to tell me that preserve-3d landed in IE tech preview few days ago.\nhttps://twitter.com/dstorey/status/532822219874115584\n. Following Steve announcement, do you have any information about upgrading from famo.us 0.3 to 0.4?\n. ",
    "chadfurman": "hehe some methods or some phones... j/k\n. ",
    "ming-codes": "IE's documentation hinted possible work around for this problem.\n\nYou can work around this by manually applying the parent element's transform to each of the child elements in addition to the child element's normal transform.\n. Looks like the status has changed. preserve-3d is now in IE preview release. It won't be long now.\n. \n",
    "jonathanmarvens": "@dmvaldman As per @TheAlphaNerd's suggestion in Famous/core#47, can we reopen this issue to keep track of the progress on getting some tests into Famous?\nThanks!\n- Jonathan\nP.S. I'd love to help out if I possible!\n. @bingomanatee I think your reply was meant for another issue :smile:.\n- Jonathan\n. ",
    "bingomanatee": "There's a lot of good machine vision resources out there that would come in handy here. \n. There are more than one situation where this is ambiguous; in the scroll\nview for example if you pass it 100 surfaces, there is no property or\nfunction on each panel to tell whether it is visible in a particular\nscrollView at any given time, as far as I know. You can find out by hacking\ninto the scrollView itself but there is no reflective property on each\nindividual surfaces, and for instance, it is not at all transparent to find\nout the surfaces' apparent position within the scrollview if in fact it\ndoes exist.\nFor this reason creating scrollViews like the iOS' iPhone widget for\nscrolling through and selecting options from a  list  where the act\nof having a surface as the first visible item in the widget is very\ndifficult to accomplish.\nOn Fri, May 30, 2014 at 3:54 PM, Oleg Slobodskoi notifications@github.com\nwrote:\n\nBut also just asking if I am visible within a view is an option.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/85#issuecomment-44708194.\n\n\n\nI delete messages containing 'Urg ent' in them. If you have an 'Urg ent'\nproblem, consult your thesaurus\n. On a similar vein if one wants to resize a surface/containerSurface/view's contents based on the parent's size how does one do that? I have tried listening to the \"deploy\" or \"commit\" messages of the view, and of the surface, and in both cases the _currTarget does not seem to exist yet. \nIs there an event hook you can listen for and be guaranteed that (eventually) a surface or view will have a _curTarget (with a size you can use in your sizing computations)?\n. Good really save a lot of boilerplate code honestly I think just being able to interpret percent based values inside of the size definition is the API your audience is really going to relate to\nSent from my iPhone\n\nOn Jun 25, 2014, at 11:14 AM, David Valdman notifications@github.com wrote:\nThanks for the feedback. We're working on a way to add proportional sizing. Stay tuned!\n\u2014\nReply to this email directly or view it on GitHub.\n. JsLINT (as opposed to JsHINT which is slightly better) is a very unfriendly window. You can in your particular use case fix the problem by transporting the nested blocks into functions but having to change your code to please your parser is a chore. \n. +++++++++++++++++ 100000\n. If direct awareness is verboten couldnt every object just emit a remove event with self as its property through the event engine and have things listen for that event?\n. \n",
    "TDonselaar": "You are right, this is not a bug if you are using famo.us for what it is\nattended for.\nBut it will be a bug when removing the surface from the render tree. By\nreturning null on the render function and deleting all references in my own\ncode. Famo.us still holds on to the reference in the entry index thus\nstopping chrome from reclaiming the memory of that surface object. I used\nchrome memory profile to find who was holding reference to the surface\nobject.\n Op 29 mei 2014 23:57 schreef \"michaelobriena\" notifications@github.com:\n\nSo this is by design. The Surface will be garbage collected if all\nreferences are removed in your code but the DOM element that is created\ngets pooled for reuse. This greatly reduces the amount of DOM element\ncreations we have to do.\nI will leave this open for a bit but this is not a bug.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/81#issuecomment-44590748.\n. Hi, \nThe project that i'm working on is private for now so i can't show that code.\nI did make a sample code that shows how i use famo.us.\n\n```\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\nvar Transform = require('famous/core/Transform');\nvar StateModifier = require('famous/modifiers/StateModifier');\nvar Timer = require('famous/utilities/Timer');\nvar mainContext = Engine.createContext();\nvar RenderList = [];\n//cool function for creating a surface and stateModifier for cool animation\nvar create = function(){\n    var CurrentSurface = new Surface({\n      size: [100, 100],\n      properties: {\n        color: 'white',\n        textAlign: 'center',\n        backgroundColor: '#FA5C4F'\n      }\n    });\nvar CurrentStateModifier = new StateModifier();\n\nCurrentStateModifier.remove = false;\n\nvar RenderSettings = { \n  state:\"pending\", \n  CurrentSurface: CurrentSurface, \n  CurrentStateModifier: CurrentStateModifier,\n  AnimationCallBack: function (){  \n     //remove after the animation ened\n     RenderSettings.CurrentSurface.render = function(){  return null; }\n     RenderSettings.CurrentStateModifier.remove = true;\n     RenderSettings.state = \"unlink\";  \n  }\n  }\n\nRenderList.push(RenderSettings);\n\n}\n//a simple loop to handle the states\nTimer.setInterval(function(){\n  for(var i = 0; i < RenderList.length; i++) {\n    //pending state we add the statemodifier and surface to the context and start the animation\n    if(RenderList[i].state == \"pending\"){ \n       RenderList[i].state = \"render\";\n       //add to the context\n       mainContext.add(RenderList[i].CurrentStateModifier).add(RenderList[i].CurrentSurface);\n       //add a cool animation\n       RenderList[i].CurrentStateModifier.setTransform(\n          Transform.translate(100, 300, 0),\n          { duration : 1000, curve: 'easeInOut' },RenderList[i].AnimationCallBack);\n}else if(RenderList[i].state == \"unlink\"){\n  //find and remove stuff from the famo.us render tree to free up memory\n  if(mainContext._node._hasMultipleChildren){\n    for (index = 0; index < mainContext._node._child.length; ++index) {\n        if(mainContext._node._child[index]._object.remove){\n           //remove Statemodifier plus surface from render tree\n           mainContext._node._child.splice(index, 1);\n           mainContext._node._childResult.splice(index, 1);\n\n           //remove the rest\n           RenderList.splice(i, 1);\n           //load new item\n           create();\n           break;\n        }\n   }\n  }else{ \n    if(mainContext._node._child._object.remove){\n           //remove Statemodifier plus surface from render tree\n           mainContext._node._child = null;\n\n           //remove the rest\n           RenderList.splice(i, 1);\n           //load new item\n           create();\n    }\n  }\n}\n\n}\n},1000);\ncreate();\n```\n. Yes, reusing a surfaces is the intended way of doing it.\nIn my case where i do need to add and remove surfaces, i added the\nEntity.unregister at the end of the cleanup function in core/surface.\nThis ticket can be closed ;)\nOp 30 mei 2014 21:50 schreef \"Felix Tripier\" notifications@github.com:\n\nIf you really need to, you can call Entity.unregister on the surface's\nid\n(which you can either get through surface.id or surface.render()), but as\nMike said, you shouldn't be in a situation where you're creating this many\nsurfaces in the first place. Additionally, instead of removing surfaces,\ntry hiding and showing them in a renderController instead.\nOn Fri, May 30, 2014 at 4:52 AM, Tim Donselaar notifications@github.com\nwrote:\n\nHi,\nThe project that i'm working on is private for now so i can't so that\ncode.\nI did make a sample code that shows how i use famo.us.\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\nvar Transform = require('famous/core/Transform');\nvar StateModifier = require('famous/modifiers/StateModifier');\nvar Timer = require('famous/utilities/Timer');\nvar mainContext = Engine.createContext();\nvar RenderList = [];\n//cool function for creating a surface and stateModifier for cool\nanimation\nvar create = function(){\nvar CurrentSurface = new Surface({\nsize: [100, 100],\nproperties: {\ncolor: 'white',\ntextAlign: 'center',\nbackgroundColor: '#FA5C4F'\n}\n});\nvar CurrentStateModifier = new StateModifier();\nCurrentStateModifier.remove = false;\nvar RenderSettings = {\nstate:\"pending\",\nCurrentSurface: CurrentSurface,\nCurrentStateModifier: CurrentStateModifier,\nAnimationCallBack: function (){\n//remove after the animation ened\nRenderSettings.CurrentSurface.render = function(){ return null; }\nRenderSettings.CurrentStateModifier.remove = true;\nRenderSettings.state = \"unlink\";\n}\n}\nRenderList.push(RenderSettings);\n}\n//a simple loop to handle the states\nTimer.setInterval(function(){\nfor(var i = 0; i < RenderList.length; i++) {\n//pending state we add the statemodifier and surface to the context and\nstart the animation\nif(RenderList[i].state == \"pending\"){\nRenderList[i].state = \"render\";\n//add to the context\nmainContext.add(RenderList[i].CurrentStateModifier).add(RenderList[i].CurrentSurface);\n//add a cool animation\nRenderList[i].CurrentStateModifier.setTransform(\nTransform.translate(100, 300, 0),\n{ duration : 1000, curve: 'easeInOut'\n},RenderList[i].AnimationCallBack);\n}else if(RenderList[i].state == \"unlink\"){\n//find and remove stuff from the famo.us render tree to free up memory\nif(mainContext._node._hasMultipleChildren){\nfor (index = 0; index < mainContext._node._child.length; ++index) {\nif(mainContext._node._child[index]._object.remove){\n//remove Statemodifier plus surface from render tree\nmainContext._node._child.splice(index, 1);\nmainContext._node._childResult.splice(index, 1);\n//remove the rest\nRenderList.splice(i, 1);\n//load new item\ncreate();\nbreak;\n}\n}\n}else{\nif(mainContext._node._child._object.remove){\n//remove Statemodifier plus surface from render tree\nmainContext._node._child = null;\n//remove the rest\nRenderList.splice(i, 1);\n//load new item\ncreate();\n}\n}\n}\n}\n},1000);\ncreate();\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/81#issuecomment-44642671.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/81#issuecomment-44692251.\n. \n",
    "jbremmer": "So what's sort of thinking follows this excitement ? Is it something along the lines of project from Pete?\n. ",
    "peacechen": "The famous-react repo hasn't been updated in over a month.  It's disappointing that Facebook isn't taking this more seriously and taking the lead on integration. Seems like all the companies out there are moving forward with Angular because it has Google behind it.  I guess few take Facebook's projects seriously which is a shame. It makes it difficult for me to really push it when it's not clear what FB's long-term development plans are.\n. ",
    "jiyinyiyong": "Do @petehunt and @zpao have ideas on this issue? \n. @Kinnardian check this repo for updates: https://github.com/pilwon/react-famous/graphs/contributors\n. ",
    "Kinnardian": ":((\n. ",
    "steveblue": "@TDonselaar  Why don't you set size with a modifier? Seems to work for me.\n. Seeing this same issue with any MouseSync. We had declared a MouseSync in a global scope to scroll some of our custom layouts where the Scrollview wasn't quite working. The MouseSync prevented all inputs from getting focus on click. We had to programmatically achieve focus on click for each input to have both the MouseSync and focus() work in the same layout. Not a deal breaker, but definitely caused a headache for one of our developers trying to diagnose the issue. It makes sense to me why the inputs were losing focus, but would like it if the input events could just bubble up.\n. ",
    "redwoodfavorite": "In my surface culling example I used the transform matrix retrieved in the commit function to skip the rest of the commit function if the surface was determined to be offscreen.\nhttps://github.com/redwoodfavorite/culledSurface/blob/master/culledSurface.js\nLook to the '_isOffscreen' method on this variation of a famous surface.  \nNOTE: This is just a hack at the moment (the perspective is hard coded to 1000 for example) but hopefully it should give you an idea on how to do this calculation.\nTo implement this to check whether a surface was within a view you would take the x y and z from the matrices of the surface and the view and determine whether the surface was within the view based on their respective sizes.\nI don't think there are any plans to add this a module right now but it's worth talking about because I've heard quite a few requests for this type of thing.  @ftripier might have a better idea about whether this should be a module or a core addition.\nHope this helps!\n. @kof I'm sorry I probably should have provided an example with that code.  I updated the repo with a working example.\nhttps://github.com/redwoodfavorite/culledSurface\nI agree there are many applications for visibility testing.  I've heard numerous requests for it so I'll make sure to bring it up again.\n. Hey @travis5555 thanks for reporting this.  What browser are you using on your Samsung Galaxy Nexus?\nAlso @AdamCmiel might have some thoughts on this.\n. Thanks for the heads up Denis.  Should be updated soon.\nhttps://github.com/Famous/famous/pull/291\n. @michaelobriena \n. Hey zoneblaze,\nYou are right that there is currently no built in way to pause / resume a transitionable.  I do like the idea though.  Maybe we could add these methods to transitionable @michaelobriena what do you think?\nIn the meantime, however, I can give you an idea of what a very basic implementation of this would look like as a custom transitionable class.\nhttps://gist.github.com/redwoodfavorite/3eeee3b61090e24e92b7\nNote that this implementation uses halt when pausing so it does not retain queued up transitions on pause.\n. https://github.com/Famous/examples/pull/52\n. https://github.com/Famous/famous/pull/456\n. Example I used -> https://gist.github.com/redwoodfavorite/28c6ac175845447f1508#file-gistfile1-js\n. Hey @istvanskeri, gridLayout will create modifiers with sizes for its children based on its own size. \nYou could instead use a sequential layout, which is sized by its children.  I know it's a bit late, but here's a Valentine's day themed example -> https://gist.github.com/redwoodfavorite/c3cd4e8f87490480ee6c\n. Closing this now, but feel free to comment here or reopen this issue if you've still got unanswered questions!\n. Hey @spraetz, it's true that this is the case.  I can tell you that we are currently working on a new physics engine, and 3d box collisions will be a part of that (along with a lot of other cool stuff)!\n. Naughty naughty!\n. Hey ivelfan, do you think you could put together a codepen demo or something? I can't seem to recreate the issue on my own.\n:+1: \n. Thanks for pointing out this issue, it has to do with the how springs are attached and detached at the end of the scrollview.  We should have a fix in shortly.\n. @FarhadG \n. ",
    "luwen-huang": "OH. That explains it -- I always have my trackpad scrolling disabled. Just enabled it and indeed it can scroll now. Hope the fix is quick before someone else comes along and feels idiotic too. \n. ",
    "realyze": "BTW, I can scroll (magic mouse) but I cannot scroll to the very bottom to the footer. It bounces back and scroll stays above the it.\n. ",
    "jgamedev": "Guys, even with a trackpad I cannot scroll, running the latest Chrome and Firefox. Hardware: Samsung  ultrabook. \n. It is for me!! Go famo.us go!\n. ",
    "LeXXik": "Here is one way I use:\n```\nvar width = window.innerWidth * 0.6;\nvar height = window.innerHeight * 0.2;\nvar surface = new Surface({\n    size: [width, height]\n});\n```\n. My app is now targeting Android 4.4+, which seems to be free from this issue. I can see it is fixed in 4.1+. I suppose, if this is an Android native webview issue (Android 4.0-), then Famo.us has little to do with it. Let's close it, as this bug does not belong here.\n. You can extend a Surface to trigger an event upon it's addition. Here is an example on SO:\nhttp://stackoverflow.com/questions/23313829/surface-render-events-in-famo-us\n. @talves hmm, I always considered the top left corner as a default, so that if I do not manually override the defaults for align or origin, they'd fall back to [0, 0]. Is this a new behavior?\n. ",
    "becush": "Reinstalled bower separately then ran the generator.  Success.  thanks!\nOn Wed, Jun 4, 2014 at 11:24 PM, Myles Borins notifications@github.com\nwrote:\n\nLooks like bower install was not run. This bug can happen if you\nfirst installed bower right before running the generator.\nOn Jun 4, 2014, at 8:22 PM, becush notifications@github.com wrote:\n\nFailed to load resource: the server responded with a status of 404 (Not\nFound) http://localhost:1337/lib/famous/core/famous.css\nFailed to load resource: the server responded with a status of 404 (Not\nFound) http://localhost:1337/lib/famous-polyfills/functionPrototypeBind.js\nFailed to load resource: the server responded with a status of 404 (Not\nFound) http://localhost:1337/lib/famous-polyfills/classList.js\nFailed to load resource: the server responded with a status of 404 (Not\nFound) http://localhost:1337/lib/requirejs/require.js\nFailed to load resource: the server responded with a status of 404 (Not\nFound) http://localhost:1337/lib/famous-polyfills/requestAnimationFrame.js\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/90#issuecomment-45177346.\n. \n",
    "PEM--": "+1\n. I've submitted a PR on the Core so that the removal of the prerender does not break the Timer.debounce function.\n. Thanks @michaelobriena. You've pointed me in the right direction.\nJust for helping guys who would check this thread, the complete way of doing it is \nvar transitionable = new Transitionable(0);\nvar modifier = new Modifier({\n  transform: function() {\n    return Transform.rotateY(transitionable.get());\n  }\n});\ntransitionable.set(Math.PI * 2, {duration: 2000, curve: 'linear'});\n. @michaelglenadams My pleasure, always glad to help. After all, this is what the community is for :smile: \n. @michaelobriena I confirm. I've signed the CLA twice :wink: One time before the flattening and one time after.\n. Hi @talves, My bad. I'm closing this and check out the dev sources.\n. Done in the develop branch.\nBy the way, thank you for your demo on the physic engine few months ago. It was this demo which gives me enough hints to get into it. I've reused it on live coding sessions to introduce the physic engine to other developpers. Very nice :clap: \n. Thanks @speigg. At least, it confirms the bug. If basic forces cannot be achieved, we are stuck trying to create a presentation engine relying on physic.\n. @AdamCmiel What?\nMass of both particles is 1. The initial velocity is not altered in space: no friction, therefore it will stay constant. The velocity vector applied has a normal below 1. Just set the gravity above -10 (an attraction of 10N) and the particle in movement will simply go through the fixed particle. It should be re attracted back by the attraction force which is greater than the product of the mass and the normal of the initial velocity.\nEven simpler. Comment out your line 51: no initial velocity at all. The particle in movement should be attracted to the fixed particle.\nActually, it is even worst than that, both particles should move towards each other.\nPS: You are talking about escape velocity aka the slingshot effect. This could not be the case. There is no velocity nor mass difference for that.\n. Hi @TDSFugal. Indeed, it is either a division by zero or Number limit reached within the particle and force calculations.\nYou're talking about usage error in my reproduction scenario. Well, maybe. What is wrong with it?\nNote that it's a reproduction scenario. The real case is not to launch a sattelite using famo.us. I'm just launching web apps leveraging the physic engine for display as a constraint solver :smile:\nFor the use case, I don't need a better physical approach. I'm just using 2 particles: one is the upper left corner of a surface and the second is the lower right corner. And yes, width and heigth of the surface may be 0 at given time.\n. It works on my Windows but not on my Mac. I've tried multiple browsers to be sure that it was not a bad behavior of a plugin.\nI'm puzzled. I need to dig this deeper to better help out Famo.us's team on the reproduction scenario.\n. Thanks. So we got:\n- Windows\n  - Chrome : OK\n- Ubuntu\n  - Chrome : OK\n- OSX Yosemite\n  - Chrome : KO\n  - Safari : KO\n. Bug confirmed... Dawn, I would have prefer that it was my programming skills. I've lost 2 hours on this.\n. - OSX Yosemite\n  - Opera 26 (the current release, as of writing) : KO\nWell, it really doesn't looks good either for the majority of Opera users.\n. Nice for Opera users on OSX.\n- OSX Yosemite\n  - Firefox 34.05 (the current release): KO.\nWell for 99% of Mac users, it's not a good sign.\n. Still appearing. You can check out the Pen: Pen for reproduction. \n. Will do :wink: and thanks for the good stuff :+1: \n. You can check this Pen: http://codepen.io/PEM--/pen/ygCAc?editors=001\nI use collision on walls.\n. Indeed, walls are constraints but are not collisions. Though, collisions inherit from constraints. Here's another one tutorial. This time with explicit use of collisions: http://meetupfamousslides.meteor.com/\nThere are links to the source code as well as a demo in the last slide. Hope that it will help you demystifying their uses.\nHappy coding :smile: \n. ",
    "IjzerenHein": "Are you using overflow: hidden, cause this seems to break the z-translation?\nhttps://github.com/IjzerenHein/famous-zindex\nRegards, Hein\n. Was a bit eager there.. I found and installed the JSCS extension for Brackets, and it solved all my problems. It now uses the .jscsrc config-file and disables jslint. The output-window in brackets now shows the exact same output as when running grunt.\nSo: Brackets + JSCS-extension = awesome for famo.us\n. Thanks for the heads up. There doesn't seem to be an ESLint-extension for brackets yet.\nJust wondering, what editor do you guys use?\n. That's awesome, great to see what the experts are using, thanks!\n. Lol :)\n. Soz, duplicate of #101 \n. ...\n. Thanks Mark, that's a great answer! It clearly is an imperfect world, especially in linting..\nI guess it's a tradeoff for now between compact style and code-checks.\nPersonally I find the code-checks more important and prefer to have 0 errors/warnings in code. Especially when you write new code, you will be prompted to address the issue, whereas if the code already has 14 warnings, you are likely to ignore it.. I know it's also about personal preferences, but I've come to em-brace (pun intended) the multi-line required brace style, as it is also easier to use with git (easier to view diffs and reduces the changes of conflicts when merging).\nCheers!\n. @TheAlphaNerd \nThanks for the suggestion Myles!\nThat would definitely solve the linting issue, but it would also break my code. When getCount returns > 0, it would now constantly toggle between the two states.\n. You might also want to have a look at scenes:\nhttps://github.com/Famous/examples/blob/master/src/examples/core/Scene/example.js\nhttps://famo.us/docs/core/Scene\n. Hi, this seems to be related to using overflow: hidden, which breaks the z-translate.\nTest project: https://github.com/IjzerenHein/famous-zindex\nThis one is really annoying and perhaps there should be a mention in the FAQ about it.\nRegards, Hein\n. Agreed, very annoying bug, in my opinion all the properties except for placeholder should be settable to an empty string:\njavascript\n/**\n * Place the document element this component manages into the document.\n *\n * @private\n * @method deploy\n * @param {Node} target document parent of this container\n */\nTextareaSurface.prototype.deploy = function deploy(target) {\n    if (this._placeholder !== '') target.placeholder = this._placeholder;\n    target.value = this._value;\n    target.name = this._name;\n    target.wrap = this._wrap;\n    target.cols = this._cols;\n    target.rows = this._rows;\n};\n. Oh, I should have re-read the contribution document. Thanks, I'll do that!\n. I just signed it Myles.\nCheers\n. I was running into this problem as well. It is fixed after adding:\ncss\nbody {\n    position: absolute;\n}\nSimple test project: https://github.com/IjzerenHein/famous-test-positionabsolute\n. Z-ordering issues inside the ContainerSurface seem to happen on Chrome. Z-ordering conflicts outside the ContainerSurface on safari and Firefox, haven't tested with IE though\n. I created a test project for it:\nhttps://rawgit.com/IjzerenHein/famous-zindex/master/dist/index.html\nhttps://github.com/IjzerenHein/famous-zindex\n. Chrome Version 38.0.2125.122\nAnd the problem also occurs on cordova builds using crosswalk 8.\n. Michael,\nIn my version I had deliberately placed the 4 tests close to each other to see whether there would be any overlapping issues. This screenshot was taken on Safari 8 but looks the same on Firefox.\n\nThe surface inside the ContainerSurface at z-translate -50 overlaps the surfaces at z-translate 0 of the top two tests. I'm not sure if this is intended behaviour by the browser, but it looks incorrect to me.\nCheers, Hein\n. Mike,\nI'm not so sure about that, the surfaces with the darkest color are all at z-translate -50 and should not overlap the lighter surfaces at z-translate 0 and 50. I have modified the example and removed overflow: hidden on the left-bottom ContainerSurface and then it looks like this:\n\nLive demo: http://gloey.nl/apps/zindex2/\nWhen using overflow: hidden, the divs inside the ContainerSurface seem to overlap the divs outside on all major browsers, not respecting the z-translation. This behaviour occurs on Safari and Firefox, so it almost seems by design. Quite strange really.\nCheers\n. Right, I see. So in that case the z-index of the ContainerSurface itself would be used, is that correct?\n. Awesome! Which version was that?\n. Alright, well thanks for sharing that Michael!\n. I'm inclined to say, create a surface with size: [undefined, true] and add it to a ScrollView. This way you will be able to scroll the text vertically\n. Hi, I'll provide a test case, so you can see the problem in action. It will probably make sense then.\nBut I agree completely with your sentiment, introducing unnecessary conditions should be avoided at all cost.\n. I'll provide you with a test case which shows the problem in action.\n. Hi, I've created a demo for this, which demonstrates the problem:\nhttp://gloey.nl/apps/setContent/\nTo reproduce, press the \"Trigger bug: Set Content, Hide and show after 2 secs\" button.\nThis button executes two actions at once:\n- setContent(copy value from right-top input to the content surface)\n- hide (a SequentialLayout is used to remove the surface from the render-tree the next render cycle: sequenceFrom([]).\nAfter 2 seconds, the surface is re-shown, and you would expect that the content that was set using 'setContent' be shown in the surface. But that is not the case and instead the content is shown that was last in the DOM.\nInteresting note:\nI tried reproducing this problem first with a RenderController, but was unable to. After some investigation I noticed that the RenderController still shows the content for at least 1 render-cycle after .hide({duration: 0}) was executed on the render-controller and thus causes this bug not to be triggered.\n. ",
    "ranmacar": "Thanks! I knew it was something stupid.. but just the rounds? And the context refresh :)\n:+1: \n. ",
    "rndmbuoy": "\n. ",
    "kshalle": "Follow up -- an alternative would be to include the university code in the downloaded sample code..  I didn't seem to find it in what came in the download bundle.  However, it is still nice to be able to jump to the university page and play with the sample code, to get a good handle on how famous works, and then copy-paste over to my project.\nThanks again, great job,\nSean\n. ",
    "Nytrm": "Done :-) https://github.com/Famous/views/issues/68\n. @pkiers thoughts on this?\n. What is the status of this pull request ?\n. Hmm thought i had already, Signed it again :-)\n. ",
    "SamSeidenberg": "I also experienced this problem in Chrome on Mac OSX. You can scroll by\nusing the arrow keys or clicking and dragging the sidebar, but not with the\nstandard two-finger swipe on the mousepad.\nOn Wed, Jun 25, 2014 at 10:07 PM, David Valdman notifications@github.com\nwrote:\n\nI'm on Chrome 35, OSX and I cannot reproduce. Scrolling works fine for me.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/106#issuecomment-47180713.\n. \n",
    "IgorRubinovich": "A workaround is to copy the url and open the page in a completely new tab/window.  Frankly somewhat ironic but I'm sure will be sorted  out soon. Good luck to this project, it's a great piece of the magic puzzle :)\n. ",
    "carlfahl": "I have had similar issues in Safari on Mac OS X.  Scroll works in the coding area.  But instruction area does not.  If I remove cookies and clear cache of the Famous University from browser and reload, scrolling works again.  This works until I load a new lesson.\n. ",
    "pplewa": "I agree that the way FastClick works seems to be broken, on that note also GenericSync with registered both MouseSync and TouchSync fires both events on touch enabled devices, which I'm not sure should be the case.\n. ",
    "andrewreedy": ":+1: \n. @wgester is this supposed to work with a sequence of true sized surfaces or just one?\n. :+1: \n.  :+1: for poor mobile scroll performance\n. @KerimG It's definitely not dead. They just raised around 25 mill in this last round, so I imagine they are going through a rapid growth period. However, they shouldn't leave their early adopters hanging for so long.\n. @KerimG http://venturebeat.com/2014/08/13/famo-us-raises-25m-to-double-down-on-javascript-app-development-framework/\n. Hey Myles, I'm sure everyone really appreciates this update!! I kept checking the Famo.us blog, hoping for some sort of update and it just never came, so this is definitely reassuring! Scaling a team that quickly and switching gears to a new product at the same time must be quite the undertaking so no worries on the past few months. I hope going forward we have more frequent updates on development progress and maybe sneak peaks into some of the API's we can look forward to. Some of us have apps that use Famo.us in production so updates like this is crucial to making the decision of whether to stick with the platform or not.  I'm excited to hear more from your talk tonight (I won't be able to make it up to LA but I'll check the recording). Keep up the momentum!! A modular platform with tests sounds much better :+1:. I'm excited to see the performance of the new platform! \n. Alongside a Tello or some type of public roadmap, a gitter might be nice! You can paste a link at the top of your readme. It seems to be catching on with other open source frameworks.\n. ",
    "trusktr": "My phone gets hot with not much happening. Looking forward to this. :D EDIT: warm, not hot. I imagine the loop being entirely stopped if no animations are happening would be nice. Calls to Transitionable.set, etc, with durations longer than 0 would start it up again.\n. @michaelobriena @ftripier @dmvaldman Idea: http://gitter.im\nPersistent searchable chat for all.\nHave development discussions there. That would be amazing for the community, in my humble opinion.\n. Are web workers coming into play?\n. Simple untested idea: Make two loops, an rAF loop, and an Engine loop inside an inline worker. The Engine loop can run freely, limited only by the thread speed. The rAF loop can send element sizes to the worker, and the rAF loop can query the worker for the RenderTree's current matrix3d transforms (a simple array!) at 60fps. \nAlready have any plans like this?\n. After having gotten more experience, I know that I have to use RenderNodes to be able to add things, but it's cryptic to people who are newer to web development and/or JavaScript.\nBasic intuition would say that if you have a Modifier, you should be able to simply .add() things to it without having to worry about how to get this obscure thing (whatever it is).\nMaybe we can add a Modifier.add method that proxies to the RenderNode.add of the RenderNode containing the Modifier? Or perhaps we can make Modifiers and Surfaces subclasses of RenderNode? Think in terms of making the API as easy and intuitive as possible.\n. @michaelobriena No prob. Glad to share ideas!\n. Sweet, I joined! Thanks @dcsan.\nHmmmm.. Thinking about how CoffeeScript works (it compiles to JavaScript), compiling FMS to JavaScript would be nice so as to avoid time spent parsing it in production.\n. @dcsan Once a scene is defined in that FMS, then you could of course modify it and apply logic with JavaScript. With some data binding, you could repeat it, etc.\n``` javascript\n// -- context.fms\nContext {\n    Modifier {\n        size: [200, 200];\n    Surface {\n        repeat: thing in this.things; // associate the data somehow, from in the JavaScript, possibly in the call to createContext.\n        // createContext('context.fms', myObject)?\n        // I'm sure we can come up with something.\n        // size: [50, 50],\n        content: thing.content;\n        properties: {\n            color: thing.color;\n            textAlign: 'center';\n            backgroundColor: thing.bg;\n        }\n    }\n}\n\n}\n```\n@IjzerenHein That's indeed better than the flat way of doing it if you're looking to have indented structure. JSON has the downside that there can't be duplicate property names as I have in my examples. Having duplicate names (i.e. declaring multiple Modifiers inside the same set of braces) lends to being more readable and understandable.\nIt's an idea for the future... :D\n. @zackbrown I've actually used Angular a whole lot. It's very nice. I still think that this FMS (QML-inspired) markup is easier to read than either HTML or Jade. Having properties inside of the curly braces (in my humble opion) is cleaner than using HTML tag attributes, especially if there are quite a few (nested) properties. Having curly braces (as opposed to Jade) also provides a greater sense of encapsulation.\nWhat about performance? Does using Famous-Angular mean that one will generate a DOM (the Angular directives) in order to create another DOM (the Famous scene graph nodes), two DOMs total, one only to be hidden/destroyed?\n. Here's the Scene() version of my above example:\n``` javascript\nvar node; // used to reference nodes in the tree to .add() things.\nvar Engine        = require('famous/core/Engine');\nvar Surface       = require('famous/core/Surface');\nvar Surface       = require('famous/core/Scene');\nvar mainContext = Engine.createContext();\nvar theSameSceneAsAbove = new Scene({\n    id: \"mainView\",\n    size: [200,200],\n    target: [\n        {\n            id: \"hello\"\n        },\n        {\n            align: [0.5,0.5], // doesn't work. :(\n            target: { id: \"awesome\" },\n        }\n    ],\n});\ntheSameSceneAsAbove.id[\"hello\"].add(new Surface({\n    //size: [50, 50],\n    content: 'hello',\n    properties: {\n        color: 'orange',\n        textAlign: 'center',\n        backgroundColor: 'black',\n    },\n}));\ntheSameSceneAsAbove.id[\"awesome\"].add(new Surface({\n    size: [true, true],\n    content: 'Awesomeness.',\n    properties: {\n        color: 'white',\n        textAlign: 'center',\n        backgroundColor: '#FA5C4F',\n    },\n}));\nmainContext.add(theSameSceneAsAbove);\n```\nIt's no entirely declarative as the surfaces are declared outside of the scene definition. Modifying Scene to do the following would be nice:\njavascript\nvar theSameSceneAsAbove = new Scene({\n    id: \"mainView\",\n    size: [200,200],\n    target: [ {\n        id: \"hello\",\n        render: new Surface({\n            //size: [50, 50],\n            content: 'hello',\n            properties: {\n                color: 'orange',\n                textAlign: 'center',\n                backgroundColor: 'black',\n            },\n        }),\n    }, {\n        align: [0.5,0.5], // doesn't work. :(\n        target: {\n            id: \"awesome\",\n            render: new Surface({\n                size: [true, true],\n                content: 'Awesomeness.',\n                properties: {\n                    color: 'white',\n                    textAlign: 'center',\n                    backgroundColor: '#FA5C4F',\n                },\n            }),\n        },\n    } ],\n});\n. @TheAlphaNerd Yeah, let's continue discussion after my TBYB. :D\n. Thanks @TheAlphaNerd! I've signed the CLA.\n. @michaelobriena Sweet. Got it.\n@TheAlphaNerd ^\n. Hmmmm, you're right that there's no source in the starter kit. The HTML files rely on an internet connection to get the source from http://code.famo.us. It might be a good idea to ship a copy in there.\n. Please don't close this guys. I'll be back later to fix this up. :D\n. @TheAlphaNerd I finished this and pushed to my repo. Can we re-open the PR?\n. Using transformFrom instead of setTransform solves the problem:\njavascript\nvar rotation = new Transitionable(0);\nmyModifier.transformFrom(function() {\n     return Transform.rotateY(rotation.get());\n});\nsetInterval(function() {\n    rotation.set(rotation.get()+Math.PI, { duration: 2000, curve: Easing.outExpo });\n}, 4000);\nNote to self: don't use deprecated functions.\n. @TheAlphaNerd Cool. I'm looking forward to see it. :D\n. @TheAlphaNerd Created a new PR here in lieu of https://github.com/Famous/famous/pull/287.\n. @TheAlphaNerd There we go.\n. @michaelobriena @timjchin Hey Mike, we chatted on the couch about what Tim suggested and what we agreed would be cleaner: passing an object like {x: 500, z: 500} as the first argument to the set* methods. In that example, the y-axis would not be animated because it's not defined in the object. Can I go ahead and change my PR to implement this method (though it breaks API)?\n. @timjchin Thanks for pointing out the callbacks, I missed that.\n. @timjchin Alright, how's that? In commit b728089 I changed to for loops instead of hard coding each array index. It looks nicer but might be a tiny bit less performant. Let me know if I should change back. I'll squash all together after.\nOn a side note, do you think performance could be improved using a minimal number of Transitionables? For example, if nothing's being animated when you call set(), then detect that every axis of every transform component will have the same transition, just one Transitionable with an array for all the values to transition?\n. @michaelobriena @timjchin Hi guys. If you get a chance, please let me know if there are any implications I might've missed. \n. @michaelobriena No prob! I'll use my fork until I can see how Mixed Mode handles this, since @marklu said TransitionableTransform might possible be removed. I'd like to hang around more next week. I have something small to demo, but then would like to start on a bigger project with Mixed Mode in mind. :D\n. @TheAlphaNerd Oops, there we go. Thank goodness for a linter. (:\n. @TheAlphaNerd It's possible to just have the override in the jspm registry (the jspm section is called an override in jspm land), which I've already done: https://github.com/jspm/registry/blob/master/package-overrides/github/Famous/famous%400.3.0.json\nWithout the override, installing with jspm won't work, but it doesn't necessarily have to be in package.json, though it'd be nice to support jspm. Jspm implements the the full ES6 module spec, so when ES6 comes out, projects that currently use ES6 Modules, AMD, CJS, or any mix of those three, will continue to just work, only the internals of jspm will change. It's quite beautiful.\nIf you decide to have Famo.us in the jspm registry without modifying package.json, it just means that someone will have to maintain the Famo.us entry in the jspm registry instead of here in package.json when things like file structure or dependencies of Famo.us change.\n. @TheAlphaNerd No prob, I'll put on this cloak of magic on since I'm using the very magic itself. xD\n. No prob!\n. There's the second commit. The W3C specifies only skewX and skewY, while this PR specifies a full set of 3D skew methods, so I figure that since Famo.us is defining what's not defined by the W3C, it can be opinionated and have the skew rotations occur in the same directions as rotate transforms, which is more intuitive IMHO (you'll notice W3C skewX rotation happens in the opposite direction of regular rotation around Z).\nLet me know which way you guys prefer, and I'll squash it to one commit. @marklu @michaelglenadams @DnMllr @ftripier @timjchin @TheAlphaNerd \n. Don't merge this. I realized this complicates things a bit. This works nicely when you set the result of this new Transform.skew method as the transform of a Modifier, but Transform.interpret isn't able to interpret the skew values so if you try to use a TransitionableTransform for the transform property of a Modifier then you get problems when you apply skew to it.\nIdea: The easy solution for this to work would be to make Transform instantiable so each Transform object keeps track of its components like what TransitionableTransform currently does, then remove that book keeping from TransitionableTransform and make it rely on Transform. Transform can keep track of components, TransitionableTransform can encapsulate a Transform and animate it. The overhead would roughly the same if you already use TransitionableTransform. This might eliminate the need for all that math in Transform.interpret, which is basically a way to get all the transform components from a matrix array, but if Transform objects are keeping track of components, then there's no need to interpret them and thus no need to worry about a method like Transform.interpret not working with perspective transforms, or these new skew methods.\n. Here's a sample of it already working with embedded ScrollViews, thanks to @IjzerenHein: https://github.com/IjzerenHein/famous-flex/blob/master/tutorials/FlexScrollView.md#embedded-scrollview-linking\n. @michaelobriena Try this demo: https://trusktr.io/scrollViewTest. I've got two contexts, each one in it's own div instead of on body, so I've put overflow:hidden on those divs to clip the content. If you inspect element and uncheck the overflow:hidden of .famous-root, the ScrollView no longer scrolls and you'll see the footers of the HeaderFooterLayouts become visible on top of the scroll view's elements. If you remove the famous-root class from both body and html, then the scroll views work normally except that now the body will scroll at the same time while you scroll the scroll views.\nThe main problem with this is that if I want multiple contexts, and for the body to be scrollable, it's not easy to do out of the box. ScrollViews either work with .famous-root classes in place but body isn't scrollable, or they work but the body also scrolls while you scroll ScrollViews.\nYou can imagine that adding Famo.us contexts to a traditional layout will introduce this problem. Can you reproduce what I'm describing? \nSorry for being vague by saying \"ScrollView breaks very badly\" in my first comment.\n. @michaelobriena Can you post your version with the quadrants separated?\n. I made a bug for it in the Chromium bug tracker, https://code.google.com/p/chromium/issues/detail?id=456601&thanks=456601&ts=1423425515\n. No prob. hehe\n. Looks like they've confirmed it is a bug on their side: https://code.google.com/p/chromium/issues/detail?id=456601#c2\n. Update: The chromium devs have found the version that caused the break, and are looking to fix it.\n. @jordangarside What's the expected behavior? What should I see vs what we're actually seeing?\n. @TheAlphaNerd Oh ok, I see. Yeah, it'd be nice if a package could specify which browserify transforms it needs. I'm in the scenario that I've made a package that depends on famous, then I have a project that depends on the package, but not directly on famous, so browserify was erroring out requiring f.e. 'famous/core/Surface'. Adding famousify to the project doesn't seem to help, but adding famousify to the package that directly depends on famous makes it all work. I guess this good enough!\n. @TheAlphaNerd Yeah, it worked in the intermediary project. :) I made a new issue at https://github.com/substack/node-browserify/issues/1050 to suggest the idea of the child package being able to specify it's transforms. I honestly think that'd make sense and reduce friction for people trying to use some package that needs transforms.\n. @alexanderGugel quoting @TheAlphaNerd \n\nThe src folder in famous is not going anywhere for the time being, it was necessary as the main folder was becoming very crowded and it wasn't clear which folders were source code versus support material.\n\nI like that. It reduces clutter.\n. @TheAlphaNerd What about having famousify move contents out of src into to the root of the famous package folder? Could that work?\n. @TheAlphaNerd Idea: it would be possible to add a postinstall script to famous' package.json scripts object that moves the contents of src into the root, then famousify wouldn't be needed, and requirejs would work like it used to before the move to src.\n. Wait nvm, postinstall would also mess things up during development. hmm.\n. Or not! We develop from github, not npmjs. So perhaps a postinstall script would actually work, that way if you clone the famous repo for development, everything is nice and organized int the src folder, but when you install with npm, then you get everything at the root level. I think that might work. Any downsides?\n. @TheAlphaNerd Why does the file structure need to be the same in dev as in prod? In production everything will be minified and bundled into a single file right? I can live with having to add famousify to a project just to make it compatible with browserify, but I'd prefer not to if it was possible. Hmmm...\n. @alexanderGugel The thing with that is that then the whole famo.us library is required, but with package managers like webpack, browserify, and jspm, you can build a bundle that only includes the classes you actually use, so the file is as small as possible when it reaches the browser.\n. Simply putting everything in the root for production and keeping require calls the same sounds easier, not needing to change docs, university, etc.\n. Have fun! :)\n_/#!/_JoePea\nOn Sat, Jan 3, 2015 at 7:21 PM, Myles Borins notifications@github.com\nwrote:\n\nThere is a bunch of complexity this creates.\nI'm not going to be able to reply to this anymore for now... Going for\ndinner.\nOn Jan 3, 2015 7:19 PM, \"Joseph Orbegoso Pea\" notifications@github.com\nwrote:\n\nSimply putting everything in the root for production and keeping require\ncalls the same sounds easier.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68619274.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/556#issuecomment-68619315.\n. Closing, then re-opening if I can reproduce what I thought I was seeing.\n. @michaelobriena Did/does this problem exist?\n. The title of the public/index.html file is OPA!. xD\n\nI happened to notice it because when I install a package with jspm it looks for and installs the highest version, unless otherwise specified.\n. @TheAlphaNerd Have you tried npm unpublish famous@11.18.0? It didn't work?\n. Sweet, all seems well. jspm is installing 0.3.4 now.\n. if (Gitter) {\n  @TheAlphaNerd .awesome = true;\n}\n. @dcworldwide I have a feeling check back on Thursday.\n. Entirely open development is beneficial for a community around a project because if all development were to happen in a public repo instead of a private one, speed of development for the project would be faster due to people knowing what the latest code changes are and thus having the ability to make informed and meaningful PRs. I have a feeling that, currently, people (i.e. me) may not want to make PRs based on code that is outdated because making those PRs will be a waste of precious time. Plus, who knows, people in the community might have great ideas that the Famo.us team hasn't thought of yet.\n@marklu @michaelobriena \n. ",
    "StephanBijzitter": "My Windows Phone gets hot, but that is to be expected as it's the 520 (cheapest on offer) and isn't even supported with its epic Trident engine.\nMy budget Android phone gets warm, but it's a nice comfortable warmth here during the winter. However, I also notice significant performance loss over native (native as in, browser defined) scrolling. Animations are much smoother with Famous, but scrolling seems to be less performant.\n. @michaelobriena any chance we can get more frequent updates on that? I know wer (or most of us) are not affiliated with Famo.us but we all love the project and right now we can't do much to help out.\nBeing able to be part of a discussion (perhaps a weekly blog on this topic) would allow us better to prepare and would keep us engaged.\n. I confirm this, it reduces speed VERY slowly until it either hits the end (or beginning) or the user taps on the screen. In my opinion, that is actually pretty cool but it doesn't give the user the same experience as - say - android users\n. @AdamCmiel Android phones (the larger amount of them) slow down in velocity noticeably quicker than iOS and Windows Phone slows down even faster, although for the latter I cannot be sure as IE11 is not supported (matrix3d is pretty much a requirement for Famo.us) and the model I have is the Lumia 520, which is the cheapest on the shelf, so it might just be in the case of my WP that the hardware is simply throttling the app.\n. But layering (z translations) cannot be trusted in IE11, the different elements will take unexplainable positions in front or behind each other often in a way you don't want them to =-/\nSo while it might be supported, it is pretty much broken.\n. Say you have two surfaces that stack as cards on top of each other, both are added like this:\ncontext.add(modifier2).add(surface2);\ncontext.add(modifier1).add(surface1);\nWhere modifier1 has a transform of Transform.translate(0, 0, 1) and modifier2 has a transform of .translate(0, 0, 2). If surface 1 is larger than surface 2 (let's pretend it is), you'd see surface 1 and surface 2 on top of it, right? Well... in IE that is a gamble unless you set the css z-index property.\nhttp://status.modern.ie/csstransformspreserve3d we'd need this to get working asap <3\n. Bumping this a bit, perhaps we could make an alias for now until people get used to the change.\n. \"I think that we have sufficiently satisfied a window for people to work with the new concept of align and is probably time for align to have a default of [0, 0] regardless of origin. @marklu what are your thoughts?\"\nPlease :-)\n. Example of a simple app trying to be ran on Presto: http://puu.sh/aQumv.png\n. A fair point, but you're thinking of users as sensible human beings and that is wrong. Users are ignorant tools that need a firm hand to guide them. Therefore, Famo.us wouldn't need to optimise for Presto, but should support Presto and guide users to downloading more performant solutions. Stomping the user into the dirt (by telling them to stop using Presto) is not going to make the user update/upgrade their devices: it will simply make them non-users.\n. I agree, partially. In my opinion it should be fully re-done as the entire structure is just a mess right now.\nCurrently it is rather confusing and I resorted to my own good-old HashMap implementations for the sake of consistency. I personally love the simplicity of something like this: http://paste.strictfp.com/40740\n. But that would become a real drag if you have to do that for each surface you add a the scrollview's sequence. It would be much better if the scrollview (optionally) filtered the events based on the behaviour you described above. As this behaviour should not have anything to do with the content of a scrollview, but the scrollview itself.\n. function get(id) {\n        return id !== undefined ? entities[id] : entities;\n    }\nFor the sake of at least over-engineering it properly ;p\n. Agreed\n. #210 \n. The help section seems highly inappropriate in my opinion. I personally only check help pages when I am in need to contact someone or when something has gone terribly wrong and I am looking for a solution.\n. I'd also love to see the source haha\n. Of course, but that does not matter.\nThere's two kind of scroll outputs a mouse can give: continuous or stepwise.\nMouse scrollwheels do not give continuos output and therefore make the page hop the delta, as there is no velocity. At one point in time it might be at y=50, the next at y=55 while a continous scrollwheel will emit events inbetween, making the scrolling smooth. It should not be too difficult to detect what kind of scroll is being used and smooth the scrolling whenever needed\n. Window Phone 8 is also reporting incorrect window.innerWidth values (actual size is 10px less in width), but as far as I know this has nothing to do with Famo.us! I personally just try to detect the devices that I know report wrong values and adjust them manually.\n. The following fixes the behaviour and makes sure that if touch events are used, ONLY touch events are allowed: https://gist.github.com/StephanBijzitter/21b1e3ab6c84b5f9878c\njavascript\n            var touch = !!data.touch;\n            this.touch = touch || this.touch;\n            if (touch !== this.touch) {\n                return;\n            }\n. @TheAlphaNerd, it provides inconsistent behaviour so it would be best if a global fix was applied. I am sure a lot of developers will stumble upon this issue and not realise what is happening. The idea behind the generic sync is for it to combine multiple syncs into one sync, but right now it behaves as either one or two syncs, depending on the device and/or browser. \n. I have debugged a bit more on iOS 7 and found out the following:\nWhen the user briefly taps the element: both mouse and touch events are sent in this order:\ntouch start, touch end, mouse start, mouse end\nWhen the user holds the element for a little while, the following is emitted:\ntouch start, touch end\nA visual logger:\nhttp://puu.sh/bjr9v.png\nThe code (shortened):\n``` javascript\n    function MenuButton() {\n        View.apply(this, arguments);\n    this.touch = false;\n\n    var sync = new GenericSync({\n        'mouse' : {},\n        'touch' : {}\n    });\n\n    var debug = new Surface({\n        content : 'Debug',\n        size : [undefined, undefined],\n        properties : {\n            color : 'green',\n            backgroundColor : 'black'\n        }\n    });\n\n    sync.on('start', function(data) {\n        debug.setContent(debug.getContent() + '<br />' + new Date().toTimeString() + '[S] Touch: ' + (data.touch\n                ? 'Yes'\n                : 'No'));\n\n        var touch = !!data.touch;\n        this.touch = touch || this.touch;\n        if (touch !== this.touch) {\n            debug.setContent(debug.getContent() + ' IGNORED');\n            return;\n        }\n    }.bind(this));\n\n    sync.on('end', function(data) {\n        debug.setContent(debug.getContent() + '<br />' + new Date().toTimeString() + '[E] Touch: ' + (data.touch\n                ? 'Yes'\n                : 'No'));\n\n        var touch = !!data.touch;\n        this.touch = touch || this.touch;\n        if (touch !== this.touch) {\n            debug.setContent(debug.getContent() + ' IGNORED');\n            return;\n        }\n\n    }.bind(this));\n}\n\n```\n. Seems like an easy task, detect which browser is used and provide the correct prefix.\nThis is a great tool and has not failed me yet. But if it does fail to detect a (probably rare) device, does it really matter? You can still fall-back on the non-prefixed version.\nhttps://github.com/WhichBrowser/WhichBrowser\nOutputting ALL prefixes seems like unnecessary clutter to me. Simply output the vendor prefix if you can identify the browser; otherwise leave it be.\n. I am using Opera Next (24, latest beta) which is webkit based on a Mac OS X (mavericks) and it shows just fine\n. Ah, I must've overlooked that! Yeah that's exactly what I was looking for, thanks!\nI was simply doing the following and assumed it would work:\nvar scrollContainer = new ScrollContainer({\n        classes: ['niceBackground']\n});\n. I'm going to re-open this as sadly container.classes does work to apply classes, but container.size does not. Seeing the container is essentially a surface, I would expect it to be able to have a size, too.\nI require this component to have a size because the banner is part of a parent scroll container.\njavascript\n        var banner = new ScrollContainer({\n            container : {\n                size : [undefined, 200], //is ignored\n                classes : ['banner']\n            },\n            scrollview : {\n                direction : 0\n            }\n        });\n        banner.getSize = function getSize() { //is used\n            return [undefined, 200];\n        };\n. @talves That works because of the getSize method:\nhttp://jsfiddle.net/3ydckmnw/3/ (does not work, although you would expect it would)\nhttp://jsfiddle.net/3ydckmnw/5/ (does work)\n. Okay, yeah, nevermind. I just noticed the typo 'transfrom'.\n. In that case wouldn't it be better to give a TouchSync a parameter to track only events for X amount of fingers? That way you can even allow even a three-finger TouchSync for God knows why.\nBy setting it default to 1, the result will be the same of this patch.\n. It's a bit of a tough decision really, because so many things 20 years ago were not broken yet were improved. When mobile (cell) phones were first released, almost all people said something along the lines of \"Why would I need that? I have a phone at home!\" or \"Are you crazy? I'd never have time for myself anymore!\".\nScrolling in desktop browsers in my opinion is the same. Sure, what we now have works and does the job, but does that mean we should not try to improve it? I personally find appeal in using a scrollwheel and a slight disgust in it, too. On one hand I like one tick of the scrollwheel making the page go up or down by X pixels instantly, but on the other hand: it doesn't allow for (lazy) motion.\nWhen on any website (say Facebook) and I scroll using my touch pad, the page flows nicely... but using a mouse makes it scroll in steps. So what we need is at least the option to use either of the two: convert touch scroll events into stepwise scrolling and/or turn stepwise scrolling into flow-based scrolling.\nThen there's the next issue... who should implement this? Is the website developer responsible? Or perhaps the browser manufacturers, or even the people that wrote the driver for your mouse?\nFamo.us is in a position to change the current behaviour and by all means they should try just that, while leaving the option open for the current style of scrolling widely accepted by others.\nAs the scrolling becomes more advanced (say by limited the amount of pixels travelled per second, or by limiting the (negative) acceleration), it will provoke others to try to improve on it further and I think that that's a beautiful thing. \n. Firefox on OS X is smoother than Chrome, you're right. However like you also mentioned, a mouse does not give the page momentum (velocity) while a touch pad does.\nI agree and yet disagree with you. I completely agree when you say that users are expecting a certain behaviour and giving them a different behaviour (like the famous scrolling), is wrong. However, Famo.us is not just for websites: it is also for apps on tablets and mobile devices. These devices all give pages momentum and touch-enabled desktops also give pages momentum. Why should a mouse be different?\nPersonally, I like momentum in pages as I can just perform a quick yet short stroke over my screen with quite a bit of velocity and sit back for a few seconds and press my finger against the screen again to stop the scrolling. Lovely! With a mouse this could also be accomplished and I believe it should be done.\nHowever, a mouse does provide much more precision in most cases. When I first visited Famo.us (the website) (before I got a job that required Famo.us) I was also surprised by the way it scrolled in both a positive and negative way: I liked the feel of it but it felt alienating at the same time. But when I visited the website on an ultrabook with touchscreen, it felt so much better than anything else, even though the website itself is barely impressive.\nBut it should not mimic native OS behaviour, no. It should just create an entirely new behaviour and allow the framework to use either that, or default scrolling. I don't like the bounce either, I would much rather have the velocity of the page drastically decrease when it's near the bottom to snap smoothly to the bottom, without overshooting. Perhaps a nice logarithmic curve can be used to reduce velocity not just based on duration and a set resistance, but additionally by a resistance multiplier. \n. Basically. It would be more complex but it would allow the developer or user to choose. By mimicking behaviour of iOS and OS X (which is basically what's going on) you're creating expectations. Users will expect that everything will be the same and if that's not the case, they will get confused. By creating a scroller with an entirely new feel (behaviourally) you won't create the illusion of being something you're not, which is native scrolling.\nHaving a flag that can easily be toggled would be great to allow the developer to choose between famous scrolling or default browser scrolling (an do so based on device), but it would also be great if this option could be changed at runtime (switching between scrolls) which can be really useful for websites with registered users that can not just set their preferred language and date/time format but also their preferred method of scrolling!\n. Probably\n. Pull request made https://github.com/Famous/generator-famous/pull/41\n. Combining those two ideas... you could set an instance option that is used by programmatical (yes, that is a word) triggering and an override option on the trigger function.\ntoggleButton.setOptions({ suppressEvent: true});\nWould then suppress the event by default when calling select() or deselect() but NOT if the user triggers the (de)selecting. You could then call (de)select(true | false | undefined) and the function would act accordingly by either suppressing the event regardless of the instance option, broadcasting the event regardless of instance option or simply fall back on the instance option when called with no parameters (undefined).\nessentially:\n```\ntoggleButton.setOptions({ suppressEvent: true}); //suppress by default\ntoggleButton.select(); //suppressed\ntoggleButton.select(truthy); //suppressed\ntoggleButton.select(falsy); //broadcasted\ntoggleButton.setOptions({ suppressEvent: false}); //broadcast by default\ntoggleButton.select(); //broadcasted\ntoggleButton.select(truthy); //suppressed\ntoggleButton.select(falsy); //broadcasted\nfunction select(suppressEvent) {\n   suppressEvent = !!(suppressEvent !== undefined ? suppressEvent : this.options.suppressEvent);\n   ...rest of code\n}\n```\nThis seems more useful when you often (de)select the button with one of the two options and only rarely need to use the other. It is then much cleaner to add a default and only override it if needed!\n. If you wish to suppress it once you don't need to set instance options, you can just call select(true) and that's it. So I don't understand why you said three statements.\nAs for your second point, that's correct and might indeed be an issue.\n. https://github.com/Famous/generator-famous/pull/41\n. Perhaps distribute two versions? A distribution version and a source version. Relying on an internet connection is indeed a bit iffy\n. Pretty sure you could just create a parser and have the vars and their default values retrieved from the code, that way you won't forget to update them either; all needed to be done manually is a description.\nWill surely take some time to initiate, but once done it will be so much easier.\n. ^--- which should again be optional\n. Just tried it with different code and modifying the sequence indeed causes a frame to go blank. UNLESS you do this during pre-render:\njavascript\n            t.set(0, 300, function() {\n                surfaces[idx].on('prerender', function() {\n                    surfaces.splice(idx, 1);\n                });\n            });\n. I also tested this by using an actual ViewSequence instead of an array that is processed into a ViewSequence (by passing it as parameter to Scrollview.sequenceFrom) and @TheAlphaNerd it seems that ViewSequence.splice is bugged and does not properly work. It does not induce the flickering but it does not always manage to actually remove the surface with specified index.\n. O I forgot to add that I tested this on the 0.3.0 alpha branch, oops!\nWhile I'm on that... I discovered some several issues with the alpha:\nWhen calling splice:\nTypeError: this. is undefined\nif (this..trackSize) this._.sizeDirty = true; (line 141)\nSecondly, with horizontal scrolling, my browsers do not work as mouse gestures are triggered instead! In my IDE, horizontal scrolling does work as expected because it does not have mouse gestures enabled.\nEither way, @tripodsan you can easily remove or add new items to a ViewSequence!\n``` javascript\n//removing, just like Array.splice:\nyourSequenceHere.splice(index, 1); //remove the item at index\nyourSequenceHere.splice(index, 2); //remove the item at index and the item after it\nyourSequenceHere.splice(-1, 1); //remove the last item\n//adding, just like Array.splice:\nyourSequenceHere.splice(index, 0, a, b, c); //add a, b and c at the specified index (index of a is index, b is index+1, etc)\n//or both at the same time:\nyourSequenceHere.splice(index, 1, a); //replace the item at index by a\n```\nIt would be nice to have a function to get the index of an item at runtime, though (as by removing items, indices change). I have added it to my pull request for 0.3.0 alpha. Right now, you can get the index of an item with version 0.2.2 like this:\njavascript\nvar index = yourSequenceHere._.array.indexOf(item);\n. Would love to, any designated place for that?\n. The flickering was already fixed in 0.3.0, the splice method (or rather the reindex method) has now also been fixed in my branch :)\n. @TheAlphaNerd never done that before, but I think everything went well!\n. Regarding indexOf: https://github.com/Famous/famous/issues/302\n. @michaelobriena \n- Sorry, Javadoc habit\n- I just learned a new word!\n- It does add a few kilobytes with no new features indeed, but as it is present in GenericSync, it only makes sense to be present in Transitionable as well:\n``` javascript\n    Transitionable.registerMethod('snap', require('famous/transitions/SnapTransition'));\n    Transitionable.registerMethod('spring', require('famous/transitions/SpringTransition'));\n    Transitionable.registerMethod('wall', require('famous/transitions/WallTransition'));\nGenericSync.register({\n    'mouse' : require('famous/inputs/MouseSync'),\n    'scroll' : require('famous/inputs/ScrollSync'),\n    'touch' : require('famous/inputs/TouchSync')\n});\n\n```\nto:\n``` javascript\n    Transitionable.register({\n        'snap' : require('famous/transitions/SnapTransition'),\n        'spring' : require('famous/transitions/SpringTransition'),\n        'wall' : require('famous/transitions/WallTransition')\n    });\nGenericSync.register({\n    'mouse' : require('famous/inputs/MouseSync'),\n    'scroll' : require('famous/inputs/ScrollSync'),\n    'touch' : require('famous/inputs/TouchSync')\n});\n\n```\n- roger\n- as for the default behaviour of input defaults for x scrollviews, I do not think there's much of a choice at this stage as the current state of the 0.3 alpha requires the default events to be blocked or it simply won't work. Rest assured that this commit does not limit the user, as they can still tell the scrollview what to do by setting the option either true or false, but if they don't care to set the option, it will default to true but only if the scrollview is horizontal.\nI'll make some changes\n. I have a feeling that I got my branch up to date in a way that is not the usual way haha!\nI rebased on the upstream v0.3.0-alpha, isn't that what I'm supposed to do?\n. @michaelobriena It seems that I was a few days behind when creating this issue, but I just got my stuff up to date and the commit had no impact in my case, as the transition still does not occur.\nAs you mentioned the changing of parameters with regards to arrays, it seems that changing my transitionable from [undefined-50]-[undefined-0] to 50-0 (single integer parameters instead of arrays), did solve the issue.\nthis._transition = new Transitionable(50); //instead of [undefined, 50]\n        modifier.sizeFrom(function() { //instead of this._transition\n            return [undefined, this._transition.get()];\n        }.bind(this));\n. I think that's a bit premature mate, as the issue might have been solved by using an integer parameter, but an array still causes it. Unless Transitionables are not supposed to be able to handle arrays anymore, this is still an issue! @TheAlphaNerd \n. Fixed in https://github.com/Famous/famous/pull/306\n. If you're using a scrollcontainer, do NOT do the following: scrollcontainer.pipe(scrollcontainer.scrollview)\nDoing that can have a decent reason, as spacing between items (using a custom scroller output) does not trigger scroll events, but it also KILLS performance.\nAs for your page, it seems you're using a (grid/sequential/flow/...)layout. If that is the case, you should create a layout for each row if you want to remain performant. When rows exit the viewport, the engine stops rendering them which saves a lot of resources, but if your scrollview only has one component and that component is a layout with both rows and columns, the entire thing is rendered at all times.\nYou can try to use Scroller's outputFrom function, but it lacks some features at this moment and for some reason at the start of every prerender it is called with an undefined node, so you'll have to be careful. I am trying to modify it myself too, but it's a a bit tricky so far!\nOn a sidenote though, I like the website!\n. Hmm I have scrolled over 600 images at one point and it was still good-enough-not-to-crash with a similar structure. Are you sure you didn't add a lengthy (timewise) function to scrollview.on('update') ?\nMaybe it's just the Angular implementation that is slowing Famo.us down, I guess you could quickly create just the scrolling part in pure Famo.us and see if the performance differs a lot. It'd also be a nice benchmark :)\n. I've got two apps published (iOS and Android) and they both scroll absolutely fine. I do not know if it's 60 fps, but it feels seamless to me.\nWhat I have noticed, though, is that box-shadows absolutely wreck the performance when scrolling, so try not to use them in scrollable content (as would be conform with Google's material design).\nI've been using the latest Famo.us (0.3.1) and latest vanilla Cordova (4.0). The devices tested on are iPhones 4 through 6 and an Acer with a model name I forgot, but it's a budget one (150ish USD) running Android 4.4\n. Hmm @mellors are you images actual image elements or css backgrounds? Mine are set as backgrounds. I don't think it should make a difference, but can't hurt to try right.\n. When expecting the image, the code is as follows:\nhtml\n<img class=\"famous-surface backfaceVisibility\" src=\"/content/images/famous_logo.png\" style=\"opacity: 0.999999; -webkit-transform-origin: 50% 50%; -webkit-transform: matrix3d(-0.422330722651756, 0, -0.906441813192907, 0, 0, 1, 0, 0, 0.906441813192907, 0, -0.422330722651756, 0, 504.5, 88, 0, 1); width: 200px; height: 200px;\">\nThe only thing that is needed to be changed is:\nhtml\nsrc=\"/content/images/famous_logo.png\"\nto\nsrc=\"content/images/famous_logo.png\"\n. O, I just noticed it's not grunt doing this but the example source was just wrong.\nMy bad, should've checked, going to submit a match.\n. Probably not important, but the argument for Lightbox.show is a view instance with the following structure\njavascript\n        this.add(new Modifier({\n            align : [0.5, 0.0],\n            origin : [0.5, 0.0],\n            size : function() {\n                return [window.innerWidth - 16, undefined]\n            }\n        })).add(this._container); //ScrollContainer\n. With the current release it works.\n. css\n.chapter {\n    padding: 4px;\n    padding-bottom: 8px;\n    transition: 0.4s padding ease-out;\n    -moz-transition: 0.4s padding ease-out;\n    -webkit-transition: 0.4s padding ease-out;\n}\nIsolated the problem to CSS, probably not related to Famo.us.\nThe padding itself is not the issue here, but the transitions are. The transition was added for a small test (which I forgot to clean up) and the padding is not even changing anymore, but apparently when scrolling, the transitions are executed and confuse Famo.us. Removing the transitions did solve the issue.\n. Reflowing would also fix issues when a div is deployed with the default font before the custom font is done loading. Currently it will load, notice it's loaded, calculate the sizes, then the font is done loading, size changes, but famo.us does not know know and pretends nothing changed.\nBelow a screenshot of Open Sans: http://puu.sh/bTU2d.png\nThe red lines are created by the css outline property for each div as debug:\ncss\ndiv {\n    outline: 1px dotted red;\n}\n. Basically I was looking for a bit of both FlexibleLayout and Scrollview, they're both used frequently! It's good to hear Scrollview is also going to receive an update for reflowing and the list you created above is more extensive than I could've hoped for!\n. Just tested the second issue and you're right the order of operation is wrong.\nFixed in: #341\n. You're right, I didn't think of that as I prefer not to touch vars that are essentially declared static final, perhaps some Java habit. Changed it according to your feedback :-)\nNot sure if this commit structure is what you're looking for, though.\n. The behaviour right now is quite annoying, indeed.\nWithout looking at code you can state that the current rotation is always between 0 and 360 degrees or 0 and 2\u03c0 as result of perhaps the following: rotation %= 2\u03c0.\nWhat this means is that there is no difference between 2\u03c0 (1 rotation) and 12\u03c0 (6 rotations), as both equate to 0 and thus, without change, the component will not rotate either.\nHowever, as this is how a sine works (which is what Matrix3D in this case operates on), it might be difficult to counter this as it would require Famo.us to process this in chunks. Where setTransfrom is not setting a transform, but a target transform to transform to (in other words, a different function would be better) and have the engine re-evaluate this every tick and move closer to its target every step.\nIt should be changed, but I doubt finding an elegant solution would be easy.\n. @michaelobriena you're completely right, but the naming of the function does imply that it actually rotates the Z, a setRotateZ (and X and Y) alias would be more semantic. You can then deprecate rotateX|Y|Z and remove them later on.\n. Yeah a lot of them are glitchy... the new site really needs to be prioritised haha\n. You can add it yourself, actually!\nBut agreed, this should be defaulted.\nyourFlipper.getSize = function getSize() { return [undefined, undefined]; };\n@TheAlphaNerd can we not make scrollview check for element.getSize and use [undefined, undefined] if it does not exist? That'd make sure that any element in its sequence (even if not displayable) has at least a fallback size.\n. @michaelobriena Since you guys are working on a new website anyway, are there any plans to include an index featuring both open and 'closed' source webapps? It'd be free promotion for small startups (that might attract developer attention this way) and larger companies can show off like they always do! :8ball: Add some requirements to the submission of webapps to enforce a quality standard and you can use this index to convince other companies to start using Famo.us! \n. @michaelobriena That would introduce two keys that a developer has to remember. Surely, these two are not difficult ones, but what if we want to expand the togglebutton to be able to toggle between three, four or x states? An array then would make much more sense.\nAlthough I do also agree, as why should the 0th index be on and the 1st index be off? Thinking binary that doesn't make sense at all! Perhaps we should update it with an unlimited amount of surfaces (but at least 1) and have a getSelectedIndex function. This would provide most flexibility and in case of a two-state button the function can be used as truthy or falsy\n. Hmm, I hadn't thought of that, but that would mean that removing the single-line div from my html file (and thus making sure the controller is only used once), would make the famous surface output Hello World. Sadly, it didn't. It seems Angular isn't watching DOM changes (which is quite reasonable I guess) and thus not processing the surface =-/\n. Tried to replicate it, but for me the following isn't logging anything at all (the callback isn't called):\n(updated my yo famous generated project with bower update and it fetched 0.3.0 and did all the magic for me)\n``` javascript\n    var Transitionable = require('famous/transitions/Transitionable');\n    var transition = new Transitionable(0);\ntransition.set(1, {\n    method : 'snap',\n    period : 300\n}, function() {\n    console.log(transition.get());\n});\n\n```\n. Makes sense, if the transition isn't being used, why even process it.\nSo I figured out that a larger number of small numbers (that wordplay) triggers this unexpected behaviour. I have tested numbers 1 through 34 (dem automated testing) and they all show this behaviour, but 35 (and onwards) don't.\n. @bmatto, it's a bit (okay... a huge) of a hack, but consider the following:\n(completely untested and written in in this comment box)\n``` javascript\nvar target = surface._target; //the dom element\ntarget.style.transition = 'width 0.0s, height 0.0s'; //turn transitions off, or they'll interfere\nsetSize([width, height], animation, function(surface, target) {\n    target.style.transition = 'width 0.4s, height 0.4s'; //turn transitions back on\n    surface.setSize([width, height]); //animate through css transitions to the correct size\n}.bind(window, surface, target));\n```\nCould probably not do this with all methods, but yeah\n. @bmatto well it depends what is causing the jump really, but for anything that can be transitioned with css it should make it a lot smoother at the end.\nOn a sidenote though, I see you're scaling from 1 to 1.3, which seems alright, but I'd go the other way round.\nExample requirements:\n- when the page loads, the pizza boxes should be 100 by 100 pixels.\n- when a pizza box is clicked on, it should grow to 130 by 130 pixels.\nYour way:\n- The size is set to 100 by 100 and the scale is set to 1.0, this means 10000 pixels worth of data.\n- When clicked, the scale is set to 1.3, it covers 16900 pixels, but only has 10000 pixels worth of data.\nAnother way:\n- The size is set to 130 by 130 and the scale is set to 0.77, this means 16900 pixels worth of data while covering 10000 pixels.\n- When clicked, the scale is set to 1.0, it covers 16900 pixels, matching the amount of data.\nYou see, when using your way you lose 6900 pixels worth of data. Scaling down is (most often) better than scaling up! :+1: \n. Hmm it'd be better to set a transition on a Scrollview much like you can set a default transition on Lightbox. Then, with all other functions, you could either fall back on the default or specify your own.\n. I confirm @jfizz 's findings as I have noticed these too by creating a similar function. In our case it was not important however, as our views did not pipe to the scrollview (and thus manual scrolling wasn't an issue).\n. It is, that's why it's wrong.\ncreate scrollview\nadd two elements to the sequence\nuse goToPage to show the last element at index 1\nuse goToPage to show the first element at index 0 <-- doesn't work, it thinks it already is at index 0\n. Okay so it might just be a language barrier but I'm quite confused now.\ncalling goToPage(1) goes to the second element in the view sequence (with index 1), so why would goToPage(0) (being called after gtp1) not go to the first element (with index 0)?\n``` javascript\ndefine(function(require, exports, module) {\n    'use strict';\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\nvar Scrollview = require('famous/views/Scrollview');\n\nvar context = Engine.createContext();\nvar scrollview = new Scrollview({\n    direction : 0,\n    paginated : true,\n    preventDefault : true\n});\n\nvar content = new Surface();\nvar menu = new Surface({\n    size : [200, undefined],\n    properties : {\n        backgroundColor : 'red'\n    }\n});\n\ncontext.add(scrollview);\n\n// set the menu to the left of the content\nscrollview.sequenceFrom([menu, content]);\n\n// show only the content by paginating to it\nscrollview.goToPage(1);\n\n// Simulate a menu button click\nwindow.setTimeout(function() {\n    /*\n     * turns 1 into 0 and turns 0 into 1.\n     *\n     * As I used goToPage(1), I expect the index to be 1.\n     * thus, this call would be goToPage(0), revealing the menu,\n     * but that does not happen. Instead, it calls goToPage(1).\n     */\n    scrollview.goToPage(scrollview.getCurrentIndex() ^ 1);\n}, 2000);\n\n});\n``\n. Now the funny thing is, when I pipe the surfaces to the scrollview (allowing scrolling to happen, which is unwanted), every time I paginate using a scroll and then click the menu button, the button works once. This leads me to believe thatgoToPage` does not cause the index to update.\n. @talves That is quite odd, the link you posted indeed works (as it should).\nI have made some progress with our app and my code (which is essentially the same as the code your link shows) now works... most of the times. I am unsure what is causing the glitch, though.\nSo what we do by simulating a menu button click might be wrong, and my manual clicking might at one point interfere... I will close this issue until I find out what's really the cause.\n. Okay so, something must be wrong, I just cannot figure out what it is.\nI currently have a horizontal scroll container contain three views (menu, content and search)\nMenu is 200px wide, the others are undefined wide. All heights are undefined.\n``` html\n\n\n\n```\nYou can notice that the content and search have different widths, this is because content has a proportions modifier of 0.9 in width. This however should not matter, as 1080+2*60=1200, just like the search width. Disabling the proportions had no effect.\nUsing goToPage with 0 and 1 works fine, 0 goes to the menu and 1 goes to the content. This is expected. However, when calling goToPage(2) (regardless of the current page), the scrollview sets the display property to none and the viewport is blank.\nSo I added some logs:\n``` javascript\n    Scrollview.prototype.goToPage = function goToPage(index) {\n        var currentIndex = this.getCurrentIndex();\n        var i;\n    console.log('Going to page ' + index + ' from page ' + currentIndex);\n    if (currentIndex > index) {\n        for (i = 0; i < currentIndex - index; i++) {\n            console.log('Going to previous page...');\n            this.goToPreviousPage();\n        }\n    }\n\n    if (currentIndex < index) {\n        for (i = 0; i < index - currentIndex; i++) {\n            console.log('Going to next page...');\n            this.goToNextPage();\n        }\n    }\n};\n\n```\nThe output:\n```\nGoing to page 1 from page 0 Scrollview.js:570\nGoing to next page... Scrollview.js:580\nGoing to page 0 from page 1 Scrollview.js:570\nGoing to previous page... Scrollview.js:573\nGoing to page 2 from page 0 Scrollview.js:570\nGoing to next page... Scrollview.js:580\nGoing to next page... Scrollview.js:580\n```\nThis seems to be correct; all page numbers are what they should be. But the result is a page that is not usable anymore. Any subsequent calls to goToPage log correctly, but have no actual effect.\nThe most logical explanation is that the search view is failing to render and is causing issues. But using setPosition I can force the scrollview to show the search and it displays just fine.\n. Alright I just isolated the problem!\ngoToPage is not broken.\ngoToPreviousPage is broken.\ngoToNextPage is broken.\nTo explain the flaw, let me first explain how goToPreviousPage works for everyone.\nWhen you call goToPreviousPage, the function determines the size of the previous page and adjusts the viewport by subtracting that size.\nIn my case, when showing the content view and trying to open the menu view, the viewport coordinate/pixel went from 200 to 200-200=0. This works.\ngoToNextPage works in the same manner. However, this did not work for me when going to my search, while going to my content did work. Weird? NO! Here is what went on behind the scenes:\ngoToNextPage is called\nthe current node size is determined\nthe current node size is added to the viewport coordinate\nthe next node is now shown\nAnd that's where it all went wrong, because the width of my content view is undefined, unlike the menu view which had a width of 200. So the current viewport was at 200 (if displaying the content view) and undefined was being added, which would result in (Tada!) NaN!\n. give the surfaces a size of [undefined, undefined] to make it match its modifier's size. Giving a surface a pre-defined size (such as [undefined, 200], will force it to be 200 pixels tall, even if the modifier tells it to be 100 pixels.\n. So aside from what the Famo.us team wants with the numbering and naming... I am just wondering why we're making it that difficult?\nAs far as I am concerned a scrollview is a collection/list/array of elements and each element has its own index where the first element has an index of zero, like with all arrays.\nYou'd have a getIndex(partial) method which returns the index of the first either partially visible or fully visible element (top if vertical, left if horizontal), a setIndex(index, transition, callback) method which simply progresses to a specified index and previous and next to do what they do right now.\nSetting options.paginated to true means that each element is snapped to the bounds of the scrollview, and thus a page is merely an alias to element or node and in that regard the indices must be the same.\nBut that's just my opinion :+1: \n. http://famousco.de\nhttps://hackpad.com/Famo.us-links-kPsHMaDFboE\n. Didn't knop there was a loop param in the first place, but tried it out.\nThe following creates an error: Uncaught TypeError: Cannot read property 'firstIndex' of null\njavascript\nvar sequence = new ViewSequence({\n            loop : true\n        });\nThis is the fix:\njavascript\nvar sequence = new ViewSequence({\n            loop : true,\n            array : []\n        });\nUpon further investigating, the constructor breaks at all times unless the array parameter is supplied. I will submit a pull request in a few minutes to fix this.\n@whatisor, change the following lines in ViewSequence.js:\nFind:\njavascript\n        if (options.array) this._ = new (this.constructor.Backing)(options.array);\n        else if (options._) this._ = options._;\nReplace with:\njavascript\n        if (options._) this._ = options._;\n        else this._ = new (this.constructor.Backing)(options.array || []);\n. What is the error you are getting in your browser's web console?\nhttps://developer.mozilla.org/en-US/docs/Tools/Web_Console\n. @TheAlphaNerd @wgester still an issue with 0.3.1 \n. @TheAlphaNerd No worries, but the link you provided 404s haha\n. Somewhere within the next few days, sure.\n. @michaelobriena @talgleichger #441 makes it a LOT better! Scrolling can still be a bit smoother, but at least the abrupt stopping is no longer an issue. I suggest this PR to be included asap <3\n.  I prefer to use images as css background, as it provides more flexible options and in case an image fails to load, does not show an ugly error icon. In your case, it would also make the surface fully clickable again. Although, you could also set a CSS property pointer-events: none to your SVG (but not the surface containing the svg)\n. Yeah it is indeed very hard (or timeconsuming at least) to figure out which events can be fired when and why.\n. (Just noting that this is an old issue and is not related to the release of 0.3 specifically)\n. https://github.com/Famous/famous/releases/tag/0.3.0\nBreaking Changes\nFamous/core\nAlign defaults to [0, 0] no matter what the origin was set as\nYou'd have to set align yourself now, as it no longer copies origin.\n. Well that's a bitch.\nWon't be hard to modify the source though, just copy/paste the origin equivalents and rename them (and their documentation). :)\n. Could call it regex instead and automatically require it to match if set.\nSeeing we're going to need that in our app later on anyway, I'll get this done tomorrow! :+1: \nLittle status update: gonna take a bit longer due to circumstances, few days!\n. Probably related to: #409 \n. - OSX Yosemite\n  - Opera Developer : OK\n. It's weird how Chrome does not work on Yosemite while Opera does. Since they both are built on Chromium\n. Oh, that well at least Opera seems to have fixed it for their future releases then\n. I confirm that this also happens within Cordova 4.0 builds on Android 4.4 with Famo.us 0.3.\nI have not tested any other versions.\n. In our app, the issue was resolved by making sure there's content on every pixel of the viewport (viewport being 0, 0, window.innerWidth, window.innerHeight). The input fields now correctly move with the keyboard. The basic structure in our case would be:\nheader: [0, 0, window.innerWidth, header_height]\ncontent: [0, header_height, window.innerWidth, window.innerHeight - header_height - footer_height]\nfooter: [0, window.innerHeight - header_height, window.innerWidth, footer_height]\n. @michaelobriena This is 0.3.0, I will update to 0.3.1 when I get to the office and check whether it's still an issue.\n. @michaelobriena Going to check right now, will edit this within the next two hours.\nThe following code broke with 0.3.0 if options.transition===true, but worked if it was false (default).\nWith 0.3.1, the transition is not used regardless of its value and content reflow is instant:\n``` javascript\n    Footer.setContent = function setContent(ratios, components) {\n        if (!ratios && !components) {\n            return Footer.setVisible(false);\n        } else if (ratios && !(ratios instanceof Array)) {\n            components = Array.prototype.slice.call(arguments, 0);\n            ratios = undefined;\n        } else if (!components) {\n            components = ratios;\n            ratios = undefined;\n        }\n    for (var i = 0; i < components.length; i++) {\n        if (!components[i]) {\n            components[i] = new View();\n        } else if (!components[i].prototype\n                || !components[i].prototype.constructor) {\n            components[i] = Factory.create(components[i]);\n        }\n    }\n\n    var _ratios = ratios\n            || (components.length < 4 ? components.length < 2 ? [1] : [1,\n                    2, 1] : [1, 1, 1, 1]);\n    var sequence = undefined;\n\n    if (ratios || components.length === 1) {\n        sequence = components;\n    } else if (components.length === 2) {\n        sequence = [components[0], new View(), components[1]];\n    } else {\n        sequence = components;\n    }\n\n    layout.sequenceFrom(sequence);\n    layout.setRatios(_ratios);\n};\n\n``\n. ratios cannot be true nor 0 by definition, @speigg so that would be expected ;p\n.The quantitative relation between two amounts showing the number of times one value contains or is contained within the other`\nIn this exact case meaning you device a width or height in an amount of parts, and assign parts to different components.\nThe total of all ratios has to equal the amount of parts, as that's considered 100%. Having ratios [1, 3, 1] means you divide the width or height by 5, and give the first and last component 1 part and the 3 remaining parts to the middle component. Resulting in the middle component being thrice the size of the first or last component. Essentially being [20%, 60%, 20%].\nSince true is not numerical, it cannot be a ratio for you could not add up to the total amount of parts and although 0 is a number, it would not show the component. Of course, if the component is to be shown later (by giving it at least 1 part), it would be fine to have it in the sequence, but for all other purposes it would be useless.\n. @michaelobriena The length of the ratio sequence would equal the length of the components' sequence in this example. The length is either 1, 3 or 4.\nI wil do some more debugging\n. @TheAlphaNerd  This is 0.3.0, I will update to 0.3.1 when I get to the office and check whether it's still an issue.\n. @TheAlphaNerd still an issue with 0.3.1, no event is emitted if using a function to scroll. Manual scrolling does emit the event correctly.\n. This issue looks similar (but definitely not the same) to an issue i had with 0.3.0\nhttps://github.com/StephanBijzitter/famous/commit/f1e4b4fb907f4b6155b6851f315d301d0330ef55\n. The height of TempView is 500, but the actual content of TempView (the image) spreads from y{125, 375}, leaving 125 pixels of padding above and below the image. Is that intended?\nWhat if you add a modifier to the scrollview? Give it an explicit size, it might simply be [0, 0] at this point! If the width is listed as 0, it probably means the scrollview thinks the content is out of the rendering bounds which either means it actually is, or the bounds are not as expected.\n. @michaelobriena I've never really though about it, but it is quite inconsistent.\nSurface:\ncontent : 'something'\nsetContent('something')\nImageSurface:\nimageUrl : 'something'\nsetContent('something')\nThis actually seems like it's mixing up two behaviours: one of the <img> tag (imageUrl) and one of the <div> tag (setContent).\nIf I create an image and give it an image url through a variable and then call setContent, I expect the image to be a background image with the content rendered on top of it, as if it were (and is) a div. I would not expect the image to be updated by the calling of setContent.\n. your screen/viewport resolution is too small, it also happens to me when I resize my window.\nit's a known issue that's being resolved as they're working on an entirely new website.\n. That'd be nice, yeah!\n. ## Things that would need to be discussed: Now that there are setters, should there also be getters. If so, should the getters return the final or current state of the transition? Or both?\nHave an optional boolean parameter:\njavascript\nfunction getWhatever(final) {\n    return final ? finalWhatever : currentWhatever;\n}\nCurrent should be default, as when I ask you for your age I expect your current age as your answer, and not the age you will become.\n. @alexanderflodin the getFinal function returns the final transform as a whole, what if you just want the final rotation?\n. I don't agree on that regard, as a transitionable transitions towards a final state and already knows the final state. It would make sense to ask the transitionable what it is transitioning towards. A transitionle transform in the same way knows what the result will be and thus it should provide access to the result.\n. That I do agree with.\n. This is not a bug, but a change in the way modifiers work with origin and align since version 0.3\nThe result of the code is actually what the result should be, it is just an unwanted result in this case.\nBefore 0.3, align would be automatically set to whatever origin's value was, but as you noticed that is no longer the case.\nThe tutorial would just need to be updated! :)\n. @michaelobriena I want to know the position, percentage and all that kind of information because our web API is paginated. While scrolling I want to append content over and over again, but obviously I'd need to know when's appropriate to start sending the requests to do this.\nSeeing the current layout of the Scrollview is essentially a SequentialLayout, I think we should abstract this out of Scrollview. Have Scrollview.options.layout default to SequentialLayout and allow the user to override it. This would allow the user to specify any layout (even custom ones by overriding SequentialLayout's output function) easily while maintaining Scrollview's lightweight design.\nAs for Scrollview.options.groupScroll... why that name? I had always wondered what it was for and turning it on or off didn't make any difference (seeing I piped everything manually anyway). I guess this solves the automatic piping then, but it would indicate that the documentation can be a bit better haha!\nSo I tried it out and came to witness a bug as groupScroll seems to ignore boundaries. I could scroll further than supposed to resulting in a blanc page (as all content was scrolled offscreen). I could file a separate issue for each of these little bugs, if wanted.\nRight now, to create a 2x2 grid in my scrollview, I use the following wrapper. Please keep in mind that some of the code has been left out as it may be sensitive or irrelevant.\n``` javascript\ndefine(function(require, exports, module) {\nvar Objects = require('---/utilities/Objects');\n\nvar View = require('famous/core/View');\nvar Engine = require('famous/core/Engine');\nvar Modifier = require('famous/core/Modifier');\nvar ViewSequence = require('famous/core/ViewSequence');\n\nvar Scrollview = require('famous/views/Scrollview');\nvar GridLayout = require('famous/views/GridLayout');\n\n/**\n * Adds grid functionality to the Famo.us Scrollview.\n *\n * @constructor\n * @class ScrollView\n * @param [options.provider=undefined]\n *            {Request} The provider to populate the ScrollView with.\n * @param [options.sequence=[]]\n *            {Array.Renderable} The initial sequence used to populate the\n *            ScrollView. **Discarted after first use - no reference is\n *            kept!**\n * @param [options.direction=\"y\"]\n *            {Number|String} The scrolling direction for the ScrollView.\n * @param [options.grid=[1,\n *            1]] {Array.Number} The grid used to display content. The\n *            default value mimics the default Famo.us Scrollview behaviour.\n * @param [options.autoPipe=true]\n *            {Boolean} Automatically pipe pushed components if\n *            <tt>true</tt>.\n */\nfunction ScrollView(options) {\n    View.apply(this);\n\n    this.queue = [];\n    this.sequence = [];\n    this.viewSequence = new ViewSequence();\n    this.options = Objects.merge(ScrollView.DEFAULT_OPTIONS, options);\n\n    var direction = this.options.direction;\n    if (typeof direction === 'string') {\n        this.options.direction = ['x', 'y']\n                .indexOf(direction.toLowerCase());\n    }\n\n    this.scroller = new Scrollview({\n        direction : this.options.direction,\n        preventDefault : true,\n        groupScroll : false,\n        rails : true\n    });\n\n    for (var i = 0; i < this.options.sequence.length; i++) {\n        this.push(this.options.sequence[i]);\n    }\n    this.options.sequence = undefined;\n\n    this.setProvider(this.options.provider);\n    this.scroller.sequenceFrom(this.viewSequence);\n    this.add(this.scroller);\n\n    var lastPosition = undefined;\n    var prerender = function prerender() {\n        var provider = this.options.provider;\n        if (!provider) {\n            return;\n        }\n        ;\n\n        var position = Math.round(this.scroller.getAbsolutePosition());\n        if (position === lastPosition) {\n            return;\n        }\n        lastPosition = position;\n\n        var height = this.scroller.getSize(true)[+this.options.isVerticalScroll];\n        var rowHeight = height * this.options.proportions;\n        var rows = this.viewSequence._.array.length;\n        var totalHeight = rows * rowHeight - height;\n        var percentage = Math.round(100 * position / totalHeight);\n        var threshold = totalHeight - height;\n\n        /*\n        console.log({\n            heigth : height,\n            rowHeight : rowHeight,\n            rows : rows,\n            totalHeight : totalHeight,\n            percentage : percentage,\n            threshold : threshold\n        });\n         */\n\n        /*\n         * not entirely optimal, pretty much eyeballed by watching our\n         * collegues use the app, perhaps create a curve based on scrolling\n         * speed and adjust the percentage and threshold requirements based\n         * on that?\n         */\n        if (percentage > 90 || threshold <= position) {\n            if (provider.isReady() && provider.paginate()) {\n                provider.execute();\n            }\n        }\n    }.bind(this);\n\n    Engine.on('prerender', prerender);\n}\n\nScrollView.DEFAULT_OPTIONS = {\n    direction : 1,\n    sequence : [],\n    grid : [1, 1],\n    autoPipe : true\n};\n\nScrollView.prototype = Object.create(View.prototype);\nScrollView.prototype.constructor = ScrollView;\nmodule.exports = ScrollView;\n\n/**\n * Push a component into the queue to be prepared for display. Automatically\n * empties the queue into the display sequence once its full.\n *\n * @method push\n * @param component\n *            {Renderable} Anything that's renderable.\n * @chainable\n */\nScrollView.prototype.push = function push(component) {\n    this.queue.push(component);\n\n    if (component.setSize) {\n        component.setSize([undefined, undefined]);\n    }\n\n    if (component.pipe) {\n        component.pipe(this.scroller);\n    }\n\n    var queueLimit;\n    var alternateLimit;\n    var proportions;\n    var dimensions;\n\n    this.options.isVerticalScroll = !!this.options.direction;\n    var horizontalGrid = this.options.grid[0];\n    var verticalGrid = this.options.grid[1];\n\n    if (this.options.isVerticalScroll) {\n        queueLimit = horizontalGrid;\n        alternateLimit = verticalGrid;\n        proportions = [1.0, 1.0 / alternateLimit];\n        dimensions = [queueLimit, 1];\n        this.options.proportions = proportions[1];\n    } else {\n        queueLimit = verticalGrid;\n        alternateLimit = horizontalGrid;\n        proportions = [1.0 / alternateLimit, 1.0];\n        dimensions = [1, queueLimit];\n        this.options.proportions = proportions[0];\n    }\n\n    while (this.queue.length >= queueLimit) {\n        var view = new View();\n\n        var modifier = new Modifier({\n            proportions : proportions\n        });\n\n        var grid = new GridLayout({\n            dimensions : dimensions\n        });\n\n        var components = this.queue.splice(0, queueLimit);\n\n        grid.sequenceFrom(components);\n        view.add(modifier).add(grid);\n\n        this.sequence.push.apply(this.sequence, components);\n        this.viewSequence.push(view);\n    }\n\n    return this;\n};\n\n/**\n * Joins the currently displayed and queued components and then splices\n * them.\n *\n * @method slice\n * @chainable\n */\nScrollView.prototype.splice = function splice() {\n    var components = this.sequence.concat(this.queue);\n    components.splice.apply(components, arguments);\n    return this.rebuild(components);\n};\n\n/**\n * Completely empties this ScrollView including its queue and leaves nothing\n * to display.\n *\n * @method empty\n * @chainable\n */\nScrollView.prototype.empty = function empty() {\n    return this.rebuild([]);\n};\n\n/**\n * Sets the grid dimensions for this ScrollView.\n *\n * @method setGrid\n * @param grid\n *            {Array.Number} An array with horizontal and vertical counts.\n *            The number must be larger than 1 and must be an integer.\n * @chainable\n */\nScrollView.prototype.setGrid = function setGrid(grid) {\n    this.options.grid = grid;\n    return this.rebuild();\n};\n\n/**\n * Sets the provider for the ScrollView, clearing out current content and\n * restoring old (cached) content if possible.\n *\n * @method setProvider\n * @param provider\n *            {Request}\n * @chainable\n */\nScrollView.prototype.setProvider = function setProvider(provider) {\n    if (!provider.isProvider) {\n        throw new Error(provider + ' is not a valid provider!');\n    }\n\n    var cache = provider.getJSON();\n    var provide = provider.settings.callbacks.provide;\n\n    var success = function success(data) {\n        if (!data.json) {\n            return;\n        }\n\n        for (var i = 0; i < data.json.length; i++) {\n            var component = provide(data.json[i]);\n            if (component) {\n                this.push(component);\n            }\n        }\n    }.bind(this);\n\n    this.empty();\n    if (cache.length) {\n        success({\n            json : cache\n        });\n    }\n\n    provider.settings.callbacks.success = success;\n    this.options.provider = provider;\n    return this.requestData();\n};\n\n/**\n * Requests data using the set provider. Called automatically while\n * scrolling.\n *\n * @method requestData\n * @chainable\n */\nScrollView.prototype.requestData = function requestData() {\n    if (!this.options.provider) {\n        return this;\n    }\n\n    this.options.provider.execute();\n    return this;\n};\n\n/**\n * Rebuilds the entire ScrollView. This is only needed when manually\n * modifying the content of the ScrollView.\n *\n * @method rebuild\n * @param components {}\n * @chainable\n */\nScrollView.prototype.rebuild = function rebuild(components) {\n    components = components || this.sequence.concat(this.queue);\n\n    this.viewSequence.splice(0, this.viewSequence._.array.length);\n    this.sequence = [];\n    this.queue = [];\n\n    for (var i = 0; i < components.length; i++) {\n        this.push(components[i]);\n    }\n\n    return this;\n};\n\n});\n```\n``` javascript\n    var Factory = require('---/utilities/Factory');\n    var Card = require('---/wrappers/Card');\n    var Request = require('---/wrappers/Request');\n    var ScrollView = require('---/wrappers/ScrollView');\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\n\nvar cardProvider = new Request({\n    url : '---/17/---',\n    on : {\n        provide : function(json) {\n            var card = new Card(json);\n            var component = Factory.create({\n                image : card.getImage()\n            });\n            component.on('click', function() {\n                scroller.setProvider(alternateProvider);\n            });\n            return component;\n        }\n    }\n});\n\nvar alternateProvider = new Request({\n    url : '---/18/---',\n    on : {\n        provide : function(json) {\n            var card = new Card(json);\n            return Factory.create({\n                image : card.getImage()\n            });\n        }\n    }\n});\n\nvar scroller = new ScrollView({\n    grid : [2, 2],\n    provider : cardProvider\n});\n\nvar context = Engine.createContext();\ncontext.add(scroller);\n\n```\nExample output:\nhttp://puu.sh/ddSKa.png\n\nIt's a bit of a bummer to have to write a wrapper as large as that to be able to easily maintain a simple grid in a scrollview, and even this grid is made up of a lot of unnecessary modifiers and views, which would be solved/heavily improved by implementing a SequentialLayout-like output function.\nDo not get me wrong, I LOVE Famo.us! The Scrollview is great, but it can be so much greater! If I had had better understanding of the core I would've attempted to fully rework it myself, but this wrapper is all that's going to be for now. For those wanting to implement it, you'd also need this:\n```\n    /\n     * Merges multiple objects into one new object. Each next object overrides\n     * the previous objects in case of colliding keys.\n     \n     * @method merge\n     * @param arguments\n     *                {Array.Object} An array of objects to be merged.\n     * @return {Object} A new object with the keys of all objects, with their\n     *         values.\n     * @static\n     /\n    Objects.merge = function merge() {\n        var result = {};\n    for (var i = 0; i < arguments.length; i++) {\n        jQuery.extend(true, result, arguments[i]);\n    }\n\n    return result;\n};\n\n```\n. @IjzerenHein's Famous Flex is a big leap into the right direction, in my opinion.\nhttps://github.com/IjzerenHein/famous-flex\n. I would also like to see the scale to be a curve. This would mean that (as example), the scale could start at 0.5 and increase towards 2.0 based on the travelled distance. This would make it extremely easy to mimic Tinder's swiping too!\nNext to that (for dragging out a menu), it would be very useful to have the Draggable differentiate between the first snap and other snaps. For example, setting snapX to 20 would only allow the added views or surfaces to translate 20 pixels left or right at a time... but I would not want the snap to repeat in this case! As soon as the distance is larger than 20 pixels, it should not snap anymore! This means that any distance from 0-19 is ignored (and nothing moves), and from 20 on the surface or view will be dragged smoothly, without snapping.\n. I have just created a PR to handle a few things: #512 \n. I would've expected this to be in 0.3.2, what happened?\n. Will fix linting with next update (somehow my npm test isn't co-operating)\n. Alright so about the options.autocomplete parameter, it works for my purposes and does exactly what I want it to do. Currently it works one-way, which is beneficial to me, but it can easily be extended to work both ways. Perhaps I will do that later.\nMy menu now partially opens when the user drags 50 pixels or more to the left and fully opens when the user drags 100 pixels or more to the left and fully closes once the user drags 1 pixel or more to the right by using the following options:\njavascript\n    var draggable = new Draggable({\n        threshold : [50, 0], //do not do anything until the user has dragged at least 50 on the horizontal axis\n        range : [[-200, 0], [0, 0]], //allow the content to be dragged 200 pixels to the left\n        autocomplete : [0.5, 1.0], //autocomplete to -200 when user has dragged at least 100 to the left\n        transition : {\n            duration : 200\n        }\n    });\nLive example:\nhttp://skelware.com/famo.us/draggable/example/2\n. @michaelobriena @TheAlphaNerd  Ready to review!\n. Above commit MAY break stuff, but is essential to fix .setOptions as providing a value for options.projection otherwise throws undefined function errors.\n. Oops, wordpress pretty links broke my examples, will be fixed tomorrow!\nEdit: fixed\n. I would've expected this to be in 0.3.2, what happened?\n. \"Generally it is best practice to not merge things into a patch release that changes api or potentially breaks stuff.\"\nTrue, but this is a beta. Honestly a bi-weekly release schedule wouldn't harm to keep development quick. Let internal Famo.us developers work on the big features while the community provides small patches (like these) as frequently as possible :)\nRight now dependency management in a group project is a bit of a bitch because of the irregular releases.\n. Issue 1: the engine is not aware of the transitionable because it isn't added to any context, this is wanted behaviour.\nIssue 2: If you do not want a duration (and thus an instant change), specify it: options.duration : 0\n. instead of:\nView.apply(this, arguments);\ndo:\nView.call(this, SlideView.DEFAULT_OPTIONS);\n. Because View is not aware of the existence of SlideView.DEFAULT_OPTIONS. When you extend a class in Java it would, but not in Javascript as you in fact are not extending the class but creating a copy of it's constructor and building on top of that.\n. Hmmm I had a paginated horizontal scrollview (in other words: a banner slider) inside a vertical scrollview and everything worked, but the last time i ran that was with 0.3.0. I'll update that project and see if it also occurs.\n. I agree.\nPeople should not expect backwards compatibility from Famo.us until it hits version 1.0.0 and the entire point is to create performant web-based app(lication)s.\nBUT there needs to be proper documentation well before the big change occurs to allow us (the community) to get to know the new API and to provide feedback (that is then actually used)!\nAs for the doThatFrom @michaelobriena speaks of... I don't know honestly. The engine can tell when a Surface resizes and call every function that relates to size and position, but the engine has no way to tell when a Surface should have its styling changed and thus the styling functions would have to be called every single tick, while most of the time they probably won't (and shouldn't...) change.\nIf implemented, the app should be able to provide conditions for the engine to re-evaluate that Surface. If for example I want the styling of my Surface to change depending on the current time I should be able to provide a top-level function that tells the engine to re-evaluate the styling or keep the current by returning false or an object, which is then passed to all styling-related functions. Why? Well, currently in my modifiers I often use the size as base for my calculations, and in every function inside the modifier, (sizeFrom, transformFrom, opacityFrom, whatever) I retrieve the size and re-do the same calculations over and over again. If I could let the top-level function return an object with all the variables I need pre-calculated it'd save quite a bit I can imagine.\nThe entire naming scheme of doThatFrom is also a bit strange, as one could easily make surface.options.opacity a function: no need for a setter, simply use setOptions.\n. @jd-carroll  I'll remove the key and use sample data, hang on!\n@TheAlphaNerd OS X Yosemite with Opera Developer (nightly).\nGoogle Chrome (public release) does the same thing, but not Safari.\nI'll also try on Windows 10 with a few different browsers in a minute once I update demo 3 with sample data.\nEdit: demo updated with sample data\nEdit 2: didn't get to try it on windows 10 due to stuff \n. @jd-carroll the why is easy, the background is now transparant and thus the elements that lay underneath appear, but they're still not on top as they should be :p \nSo setting the color to an alpha value indeed shows the underlying elements, with a glow over them as they shine through the background.\nScreenshot with semi transparant pink: http://puu.sh/dwRfn.png\n\n. @TheAlphaNerd This seems to be an issue with the Blink engine.\n- OSX Yosemite\n  - Opera :-1: \n  - Google Chrome :-1: \n  - Safari :+1: \n  - Firefox: :+1: \n- Windows 7\n  - Opera :-1: \n  - Google Chrome :-1: \n  - Safari :+1: \n  - Firefox :+1: \n  - Internet Explorer :-1: (unable to even click the button lmao)\nAll browsers are up to date stable releases.\n. @michaelobriena found you when creating a bug report haha\nhttps://code.google.com/p/chromium/issues/detail?id=421946\n493 is related to this, as using the demo without a container (and thus no overflow: hidden) shows all components correctly in the z axis. (However obviously creates significant performance issues with 200 divs being rendered while scrolling all at once, each having a box-shadow)\n. Yeah I noticed with Lightbox if you translate the z axis and translate either x or y, the x or y is nicely transitioned but the z value jumps at the end, making z translations as good as useless in this specific case.\n. Any chance is also happens on Opera (latest public release)?\n. No, it means it is specific to Blink (a fork of Webkit). Unless it also happens on Safari, in which case it actually is an issue with Webkit that is inherently present in Blink :+1: \n. Should just create a bug report on a physical piece of paper and send it to Apple HQ to finally have that horrible file removed entirely lmao\n. It has not yet been released\nas for the discussion place, https://groups.google.com/forum/#!forum/famous is probably the best place to go\n. My app suffers the same issue, inside the play store.\nContent is blurred until scrolled out of view and back in.\n. @quanghoc you're right, it was the scaling of a surface causing the blur (scaling from 0.001 to identity)\n. With the (lack of) complexity of the examples, you're probably going to completely overhaul them for your finished product, and thus you could say you fully created your product. In which case, as the MPL 2.0 states, you're allowed to sell your application.\nThe only thing you (in this specific case) should watch out for is that copyright infringement is still a thing, if you sell the tutorials then that's a big no-no, but selling software based on the tutorials (like a boilerplate) would be a-okay.\nAll this is provided the University also uses the MPL 2.0, even though I cannot find any license statement on the website. If it's released as-is, it's basically the same story, but if it's got a more restrictive license (which should have been stated), then my entire story would've been a waste of time :D\nPlease do note that I am not affiliated with Famo.us, though.\n. Yeah so this was fixed 1.5 months ago\nhttps://github.com/Famous/famous/pull/512\n. Famo.us defenitely likes power haha, my own Android phone gets warm too, but still at comfortable levels.\n. I feel like this is not a fix but a workaround, though. The square braces are used to indicate the parameter is optional =-/\n. With yuidoc it is, don't know about jsdoc http://yui.github.io/yuidoc/syntax/ (search for *param)\n. yeah and how do i make sure that I don't get both mouse and touch events when input is received?\n. ",
    "ledil": "Is there a status from famous ? Have you fixed this issue ?\n. ",
    "DallanQ": "The fact remains that I haven't been able to get any of the provided examples to support the input tag on a surface, including the famous-angular-examples. Is the input tag as a sub-element of a surface not supported in famo.us?\n. Awesome - thank you! Works perfectly.\n. ",
    "aendrew": "Awesome, thanks! :+1: Confirming it's fixed, closing issue. :shipit:\n. ",
    "eahefnawy": "I doubt there's much apps out there that are built with famo.us yet (if any). You best chances are the demos in the website. Famo.us is still young.\n. @DrClick wow! how did you get it up on the app store?! \n. oh yes, didn't think of that. I'll try it next time. thanks ;)\n. ",
    "qlqllu": "@DrClick Is there an Android version? I search in play.google.com, but don't find it. I think it should be very easy to make it run on android.\n. ",
    "AdamCmiel": "Pointer events are not supported as of yet. I've been working on integrating them but I haven't been able to capture event payload (the object handed to the callback) for mspointer and pointer events (for IE 10 and 11, respectively). Without these, we will not be able to integrate pointer events into TouchSync.\n. We've gotten pointermove events tracking in windows phone 8.1. Surface can listen to 'pointermove' events to do draggable for instance. A patch to touchsync should be coming soon.\n. No we aren't able to debug the Windows phone to the extent that we can test these events.  I'd love more input as to how to address implementing  MS pointer events.\n. It looks like performance and performance.now are recent additions to HTML5 browsers, and I wouldn't expect the ancient Galaxy Nexus browser to implement it.  See support here:  https://developer.mozilla.org/en-US/docs/Web/API/Performance.now()\n@travis5555 To develop for now you have a few options:\n1). Test your app on a modern version of Chrome, downloaded from the Play Store.  Our wrapper service  (coming soon) builds a modern version of chromium into your app, so you can depend on most modern chrome APIs.\n2). Submit your changes above as a pull request, and we should as well include that in polyfills if we haven't yet.\n@TheAlphaNerd\n. The reason for the continuous updating is that the physics engine continues to calculate the Particle's position until the spring of the energy reaches a threshold small value.  Part of the planned refactor of the physics engine will consider including resting on repetition of pixel values rather than calculation of an arbitrary energy value.  It is very interesting that we see more calculation on iPhone.\n. @StephanBijzitter what is different for Android?\n. @DnMllr @michaelobriena do we see timing differences in IE(11)?  Can we support IE11 for layouts and z-layering?\n. @wgester was this patched for 0.3.0?\n. This is addressed with a more thorough revision of the physics API in #334 \n. I'll take a look.\n. I've looked it over and it seems like once the agents are removed from the physicsEngine that the keys on the agent object don't match their respective agents, or their positions in the _agents pseudo-array.  I'll propose a more elegant solution, but thanks for pointing this out.\n. We've gotten pointermove events tracking in windows phone 8.1.  Surface can listen to 'pointermove' events to do draggable for instance.  A patch to touchsync should be coming soon.\n. duplicate of #120  Follow the conversation there for updates\n. fixed in v0.3.0-alpha RC\n. It looks like the issue is in the drift option in Wall.js, which you would just have to change in the DEFAULT_OPTIONS member for now as these options aren't accessible programmatically it seems.  A value at 0 gives a stable bounce.\n. I've submitted a fix in #335 \n. Thanks for checking this out @StephanBijzitter!  We've also looked internally at windows phone performance and were pretty dissapointed.  Windows phone and trident (IE 10) don't properly support css3 3d transforms, or preserve-3d.  For these reasons famo.us will not adequately perform on these devices.  This is even in development on the modern ie status page.  We are working with microsoft and IE to try and improve performance but for now I believe developing famo.us for Windows phone is next to impossible.\n. @michaelobriena can you comment on the css changes?\n@aintnorest I've always found the different mobile browsers to handle window resize events differently, and I would expect different behavior between versions as well.  Today we are seeing implementation differences between iOS7 and iOS 8, (UIWebView vs. WKWebView).  That said, we are glad to help. Was this ionic plugin able to resolve the window resize issue?\n. We're planning a refactor of the physics engine, and this is one of the architecture changes that will come in that refactor, that Particle and its descendants will have no reference to the Physics' engine and the step of that engine will be directly tied into the main engine loop instead.\n. Yep. These are just style changes.  Approved.\n. Wall is the only constraint that includes drift\n. Because physics transitions are based on the decay of the interaction, the particle will sleep at a value close to the ending value (actually to within a tolerance set on the PhysicsEngine).  For now, to get the desired behavior, on the callback to the transition you can manually make up the difference by setting the transitionable directly, \njs\nt.set(value, {\n    method: 'snap', \n    period: 100, \n    dampingRatio: 0.4\n}, function() { \n    t.set(value); \n     //...\n});\nThis is a good enough reason to update those transitions, to make this behavior the default.  I'll write up a patch, @MajorBreakfast thanks for opening the issue.\n. @DUQE are you seeing the doubleclick in the fiddle itself? I'm not able to reproduce the behavior described on iOS (6, 7,  && 8) safari. \n. Fixed in #451 \n. Addressed in #451 \n. The code looks good.  @wgester is the one who knows this engine best.  Will, what do you think?\n. This is good.\n. It looks like without collisions, when the two particles become close together, the second gets a velocity applied greater than the escape velocity of the vector field.  This seems to be the implementation, not the library.\nHere's an updated pen: http://codepen.io/anon/pen/KwPxOQ \n. @wgester, any thoughts?\n. Thanks for pointing this out, addressed in #462 \n. written for #459 \n. Duplicate #367\n. That's right.  I'll look into it again.  Thanks @michaelobriena \n. added option to the transition object to allow convergence of the physics transition\nthe larger the tolerance key, the quicker the animation will finish, the smaller it is, the longer it will take, but if it is too small, the animation will end prematurely and the specified end value will not be reached.\n``` js\nvar Transitionable = require('famous/transitions/Transitionable');\nvar SpringTransition = require('famous/transitions/SpringTransition');\nTransitionable.registerMethod('spring', SpringTransition);\nvar spring = new Transitionable(0);\nvar endState = 1;\nvar tolerance = 1e-6;\nspring.set(endState, {\n        method: 'spring',\n        period: 600,\n        dampingRatio: 0.4,\n        tolerance: tolerance\n}, function() {\n        console.log(spring.get());\n});\n```\n. some more exploration should yield good default values if not base values that could be rolled back into the object for a default value.\n. This was the fix that enabled Newton's cradle and Mike Xia's sphere collisions. Will be useful to patch the public release with this change.\n. good\n. ",
    "jaandrews": "Glad to hear it.\n. Apologies for the slow reply. I'm no longer running into the issue, though I wasn't able to identify the cause. It might have had something to do with a wonky render spec I was using earlier. I had some renderables in a container surface that were also included alongside that container in a render spec for animation purposes. Definitely wasn't best practice, so I cleared that out.\nGoing to chock this up to user error for now. I'll post an update if I encounter it again.\n. Also, this project is using v0.2.2 of famous. I looked at the changelog for 0.3.0 and didn't see anything that addressed this issue. I'm trying to avoid upgrading if possible, since some of the changes will cause the views I've set up to not render correctly.\n. Thanks for the quick response. That does resolve the scrolling issue, but I have noticed that the Engine doesn't support changing the appMode after the context is created. I need to toggle the app mode when the nav is opened and closed. I can create a fix on my end without too much trouble though. I'll create a pull request once I have it working.\n. ",
    "gingermusketeer": "Zed and atom are recent additions to the text editor scene. I have found atom a good replacement for sublime (open source etc)\n. ",
    "leogoro": "Can you leave an example of your brackets config file so that I can try on my end. \n. ",
    "thekemkid": "Is there any hope of an estimation of time on how soon is soon? I can understand if you don't want to say though :)\n. https://www.youtube.com/watch?v=9B08JlmLQOg \nOther issues in the famo.us timbre app. Didn't know where to post this, I feel it belongs with this, the sidebar doesn't show up for me.\n. ",
    "JosephClay": "-1 on getSize(true)\n. ",
    "ritcoder": "Hi @talves, thanks. It works when the duration is the same.\n. ",
    "viliwonka": "I third this..\nTimbre tutorial is very very buggy, I can't go through it without fixing tons of shit... I noticed atleast 4 errors, there are mising bits, or wrong bits...\n. ",
    "deinerson1": "Thank you - fun stuff for the Summer weekends. Be well.\nDave\nOn 07/16/2014 12:12 AM, Leszek Rybicki wrote:\n\nHere's a leak:\nhttp://disrupt.famo.us/periodic402/\nThe demos in the Famo.us starter kit are much better for learning though.\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Famous/famous/issues/128#issuecomment-49127230.\n. \n",
    "craftjk": "No problem!  The CLA has been signed.\n- Kyle Craft\nOn Thu, Jul 31, 2014 at 5:50 PM, Myles Borins notifications@github.com\nwrote:\n\nHey @craftjk https://github.com/craftjk thanks for the pull requests!\nBefore we pull your changes in we are going to need you to sign our CLA.\nYou can find it at http://famo.us/cla\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/130#issuecomment-50837573.\n. \n",
    "rhalff": "I could modify and do a pull request, but I'm not sure that will be beneficial.\nI do not spot any tests and I'm not sure when I fix this, code further down the road knows how to handle unconfigured surfaces.\nSince nobody reported this I guess nobody uses these surfaces without specifying any options.\nHowever the methods suggest that all options can also be set delayed, being refreshed on the next render.\nIn my case I want to set them in a delayed manner, but this also means the receiver of this node\nwill first receive a rather undefined surface, which will be updated on the next redraw.\nAttached first, and set properties later, It would be great if that worked, but not sure if it will.\nI see Surface itself has a setOptions method, to set it's own relevant options:\nhttps://github.com/Famous/famous/blob/master/core/Surface.js#L45\nhttps://github.com/Famous/famous/blob/master/core/Surface.js#L167\nMaybe each surface should have it's own similar setOptions method?\nThe VideoSurface seems to do this already:\nhttps://github.com/Famous/famous/blob/master/surfaces/VideoSurface.js#L33\nhttps://github.com/Famous/famous/blob/master/surfaces/VideoSurface.js#L55\nHowever, by overriding this method it also bypasses the Surface.setOptions method. The setOptions of VideoSurface is called twice there, once during init of Surface and once during init of VideoSurface, which is an additional bug.\n. Ok, this is more of an observation then me actually having a problem, but \nSurface does this:\njavascript\n     function Surface(options) {\n       ....\n       this.options = {};\n        ......\n        if (options) this.setOptions(options);\nAnd VideoSurface does this:\n``` javascript\n   function VideoSurface(options) {\n     ....\n      this.options = Object.create(VideoSurface.DEFAULT_OPTIONS);\n      ....\n        if (options) this.setOptions(options);\n    Surface.apply(this, arguments);\n\n```\nWhich means setOptions is called twice, the call to setOptions could be removed from VideoSurface.\nI also think this.options does not survive, because of the re-assignment within the constructor of Surface.\n. ",
    "MajorBreakfast": "Did that.\n. I'm getting display errors on Android with -webkit-transform-style set to preserve-3d (Probably caused by z-fighting). Maybe both should be set to flat, then. Anyway, I'd like to have consistent behaviour. The real problem is that it looks different depending on whether the browser supports the unprefixed property.\n. @michaelobriena Sure. Here's a Codepen for you. http://codepen.io/anon/pen/xsvuz\nChrome 36: context.setPerspective(1000) affects the orange Surface nested in the ContainerSurface because transform-style: preserve-3d is set.\nSafari 7: context.setPerspective(1000) does not affect the orange Surface nested in the ContainerSurface because -webkit-transform-style: flat is set.\nAs a consequence we get different results depending on whether the browser supports the unprefixed property.\n. BTW yesterday I thought about this issue again and it came to me that maybe choosing flat is the correct way as IE doesn't support preserve-3d. Also the main use case for ContainerSurface is probably to cut thing off via overflow: hidden. For this flat also makes sense.\n. I just opened a new PR for this. Didn't check beforehand.\nhttps://github.com/Famous/famous/pull/268\nImplementation differences are:\n- I use a much bigger tolerance for the position. I use 35px. This value seems to work quite well in practice. (My testings showed that 5px are far too tiny)\n- I don't check the target. If the target has moved from one end of the screen to the other then I'd say it's more likely that the click event is the real deal => cancel click events by their proximity to touch points alone\nTwo notes:\n- I encourage you guys to merge a PR for this problem. Might have saved me some time ;)\n- This is technically NO polyfill :)\n. Less complicated: We should consider simply canceling all clicks within 400ms after a FastClick. That's super simple and perhaps the most robust solution.\nAlso the feature should only be enabled on old android devices and iOS, in other words: where it's needed (http://updates.html5rocks.com/2013/12/300ms-tap-delay-gone-away)\n. @michaelobriena I've this issue on my iPhone\nMaybe famous could create another polyffill that addresses this.\n. Minimal ui isn't supported iOS 8. For that reason I'm closing this now. iOS 7.1 won't be around for much longer.\n. Thanks for investigating this. BTW what I'm mostly interested in is case 3. That would enable me to animate things out of view and have it look like a spring attached to the edge of the screen drags the item out.\n. I also found this solution unreliable sometimes. Now I roll with an even simpler method - Only on iOS: Cancel all clicks within 1s after a touchend event.\nhttps://github.com/MajorBreakfast/no-click-delay\n. @StephanBijzitter You need to call get(). For example every frame in render() or commit(). https://github.com/Famous/famous/blob/master/src/transitions/Transitionable.js#L25-L28\n. > [...] to make this behavior the default\n@AdamCmiel Perfect! That makes using them a bit easier :)\n. @marklu Please note that the proposed approach still assigns a unique id to every object. Efficient matching can be done using that. I'm not sure what you mean with a destructors system becoming necessary.\nThe main idea is to not persist the object reference globally for an extended period of time. The reference is only needed for triggering cleanup in order to reuse html elements and therefore has only to be remembered for the current and previous frame until it was determined which views should release their elements since the reference is only needed to trigger said cleanup.\nBTW I really like how you solved this problem in the physics engine. No global mechanism there (as far as I was able to tell :). Of course the physics engine works differently but that property is very neat and minimalistic.\n. @halfninja Cool. Thanks for pointing out the concrete problem!\n. ",
    "cmelion": "Safari does not support performance.now either.\nOn Tue, Jul 29, 2014 at 2:49 PM, Adam Cmiel notifications@github.com\nwrote:\n\nIt looks like performance and performance.now are recent additions to\nHTML5 browsers, and I wouldn't expect the ancient Galaxy Nexus browser to\nimplement it. See support here:\nhttps://developer.mozilla.org/en-US/docs/Web/API/Performance.now()\n@travis5555 https://github.com/travis5555 To develop for now you have a\nfew options:\n1). Test your app on a modern version of Chrome, downloaded from the Play\nStore. Our wrapper service (coming soon) builds a modern version of\nchromium into your app, so you can depend on most modern chrome APIs.\n2). Submit your changes above as a pull request, and we should as well\ninclude that in polyfills if we haven't yet.\n@TheAlphaNerd https://github.com/TheAlphaNerd\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/143#issuecomment-50520698.\n. \n",
    "travis5555": "Thanks guys...I was testing in a web view via Cordova. @redwoodfavorite the web view user agent is \"Mozilla/5.0 (Linux; U; Android 4.2.2; en-us; Galaxy Nexus Build/JDQ39) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30\"\n. @TheAlphaNerd - happy to help! Since I'm doing this while @ work, I forwarded the CLA to our legal folks and will sign it and submit the pull request as soon as they have a chance to review it. I'll give you a heads up if it's looking like it will take too long so someone else can jump in and knock it out.\n. Our legal approved and CLA is signed. @TheAlphaNerd - pull request coming soon to include the tiny fix mentioned above. please let me know if there is anything else I can do to help.\n. Is this already in the new Scrollview code? A link to that version or a branch that has this fix would be much appreciated...\n. +1 for this - having the exact same issue (mobile Safari iOS 8). I also tried to switch to Ftlabs' Fastclick after having used it in the past, but it jacked up all sorts of stuff. any thoughts on a workaround aside from the obvious delaying of moving the second surface into place or not overlaying them at all? \nalso does anyone else find click events in general on iOS 8 to be more difficult than before? I find myself having to tap on things twice and even three times before anything happens...have my fingers just gotten fatter in the past week?\n. this has not been tested across all browsers, but I have been able to work around this issue in a lot of cases with the following. Of course you could always put the properties in a CSS class and just apply that class to the ContainerSurface so it can be reused more easily.\nvar perspective = 1500,\n      container = new ContainerSurface({\n          properties : {\n              \"-webkit-perspective\" : perspective + \"px\",\n              \"perspective\" : perspective + \"px\",\n              \"-webkit-transform-origin\" : \"center center\",\n              \"overflow\" : \"hidden\"\n          }\n      });\n. ",
    "mbrgm": "I confirm the perceived difference in velocity slow down on Android. iOS feels ok, but Android feels different from native.\nEdit: Is there a way, e.g. by setting parameters, to get \"native\" scroll feeling with ScrollView on both iOS and Android (different set of parameters, of course)?\n. Answering my own question: I set friction to 0.003 (default is 0.005), which brought me closest to the desired scroll feeling.\n. +1 on this, as it offers a way for assigning ids to rendered elements, which allows to drive interfaces via UI automation/testing frameworks.\n. Found #236, which should solve this problem.\n. ",
    "contra": "Any update on this?\n. Any updates on this?\n. It seems like the concerns for what should be modifying the element are spread out among a few classes. For example: only a surface will set the height/width of an element when given a size. I vote to move that logic to ElementOutput which is already responsible for the transforms and origins.\nChanges needed:\n- Next to _setOrigin\njs\nvar _setSize = function(element, size) {\n  var width = '';\n  var height = '';\n  if (size) {\n    width = (size[0] === true) ? element.clientWidth : size[0] + 'px';\n    height = (size[1] === true) ? element.clientHeight : size[1] + 'px';\n  }\n  element.style.width = width;\n  element.style.height = height;\n};\n- In the _sizeDirty check\njs\n_setSize(target, this._size);\n. @michaelobriena Where is this.size being set? If that wasn't a typo then something else must be setting it. There's still the issue of _sizeDirty not being computed on commit\n. My comment in https://github.com/Famous/famous/pull/218 would solve this bug - it detects the need for prefixing without needing any elements to exist (like body)\n. Breaks committing a size into an ElementOutput\n. I think the prefixing is a little off right now - even on a browser that supports non-prefixed transform rules I still end up with -webkit prefixed styles. Shouldn't a more standard approach to detecting prefixes be taken?\nHere is how most libraries (like modernizr) approach this:\njs\nvar usePrefix = ('webkitTransform' in document.documentElement);\nThis would work if the body exists or not - the PR would always return false if there is no body which isn't accurate.\n. I think the second example looks totally fine. IMO having an internal registry at all for transitions seems like overkill and introduces a lot of complexity regarding conflicts\n. #218 #208 #162\n. @marklu Corrected that - nice catch. Also adjusted the checks slightly to make them better. In browsers that support prefixed and non-prefixed (chrome or moz) it was picking prefixes over non-prefixed.\n. @michaelobriena Can you repost what you said in the other issue (#248)? I think it applies here\n. @michaelobriena Just to be clear this issue is about moving all DOM touching to ElementOutput - I don't want to conflate this with moving auto-sizing logic out of Surface.\n. @michaelobriena I guess I'm not understanding the response I've received - do you think this is a valid complaint or is there an overall architecture this clashes with that I'm unaware of? What seems dirty to me is the seemingly random allocation of responsibilities between ElementOutput, Surface, and Context.\nI'm not proposing that the size API from Surface be moved to ElementOutput - this issue can be fully resolved by a few small additions to the ElementOutput commit function.\nI'm proposing that the existing way of doing things\nhttps://github.com/Famous/famous/blob/master/core/ElementOutput.js#L216\nhttps://github.com/Famous/famous/blob/master/core/ElementOutput.js#L209\nhttps://github.com/Famous/famous/blob/master/core/ElementOutput.js#L263\nhttps://github.com/Famous/famous/blob/master/core/ElementOutput.js#L184\nbe fully finished to include\nhttps://github.com/Famous/famous/blob/master/core/Surface.js#L306-L307 here https://github.com/Famous/famous/blob/master/core/ElementOutput.js#L270\nand add https://github.com/Famous/famous/blob/master/core/Context.js#L129 the same way that origin is implemented (https://github.com/Famous/famous/blob/master/core/ElementOutput.js#L274-L283)\nThis will ensure that lower level implementors/tinkerers have a working entry point (ElementOutput) to famous\n. Sorry if I seem frank, but this problem has been blocking us for over a month (which is how long this issue has been open) and would be easily solved by some minor changes that seem to agree with the architecture that @marklu explained to me\n. Closing this - I'm going to rewrite ElementOutput for our own use since it seems like I can't establish a consensus\n. semi-related to #247\n. @michaelobriena The problem was this IIRC\n``` js\nvar surface = new Surface({\n  size: [undefined, undefined],\n  properties: {\n    backgroundColor: 'black'\n  }\n});\n```\n. @timjchin Got a link to that line?\n. @timjchin @michaelobriena Was the code for moving the size output logic from surface to element output ever published? That's a huge blocker on our end, I have a fork currently with that logic moved that I'd like to ditch\n. @StephanBijzitter That's exactly what I'm proposing - detect the prefix and use it if needed, otherwise use non-prefixed.\n. ",
    "timjchin": "The second commit fixes linting errors previously present on famous/master. If desired, this could be recreated as a second pull request.\n@TheAlphaNerd \n. This is a pain point we hit quite frequently. Waiting to read the size from the DOM forces a one frame delay before a value can be returned. Either users need to take into consideration the frame delay, or getSize could return values that we know will be true. This delay is not currently documented.\nA possibly unexpected behavior that this commit would introduce: returning this.size when a Surface's size is set to [true, true], before the commit getSize will return [true, true]. And, if you're performing calculations using getSize, true * someNumber == someNumber. In this case, null is a safer value. \nAnother possible solution would be to dispatch an event when a size switches from true or null to a size with values, allowing developers to react to the accurate sizes.\n. @marklu What layer would it exist at? Without the delay exposed on transitionableTransform, It's not consistent with the API exposed for Modifiers that rely on Transitionables for size, origin, align or opacity. \n``` js\nvar opacityTrans = new Transitionable(0);\nvar trans = new TransitionableTransform();\nvar mod = new Modifier({ \n  opacity: opacityTrans,\n  transform: trans\n})\nopacityTrans.delay(50); // works\ntrans.delay(50); // should work\n```\nI hope you'll reconsider your opinion, because delay is one of the most useful animation tools in our toolbelt, and having to reach inside a transitionableTransform to access the delay calls isn't right either. \nAs an aside, I do think that the callback firing on this pull request should be changed to the counter pattern that exists elsewhere in the framework. \n. Setting a timeout is not the same as a delay. Delay respects halting, which\nis why it is so useful. It should exist, because without it developers\nwould be required to implement an invalidation of an action queue each time\na delay is desired.\nHalting plays extremely well with user input interrupting animations, to\nremove this functionality would be a huge loss.\nOn Wednesday, August 27, 2014, Mark Lu notifications@github.com wrote:\n\nThis should happen at a different layer.\nIn my opinion, opacityTrans.delay(50) should not work: we should remove\ndelay. It's a duplicate API that could just as literally be handled as\n\"wait 50ms then transition\".\nThe reason is that several things actually need a delay, and there's no\nreason to have specific logic in the transitions or physics API. An event\nloop triggered setTimeout equivalent would be more appropriate instead.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/174#issuecomment-53673671.\n. Updated to include toggle class.\n\n@TheAlphaNerd \n@michaelobriena \n. This bug affects Carousel. We had to go one step further than this, and also edit Surface's setup function, adding target.style.opacity = '', and resetting this._opacity to null, allowing the surface to get it's new opacity on the next commit.\n@michaelobriena \n. Awesome! We'll do some testing to confirm this solves the issue. \nThank you @pkiers. \n. @antmanler I can confirm that the example that you linked in #180 does work with this merge.\n\n. @contra Can you please describe your use case more in depth? \nThe context's size is the bounding box of the parent, allowing for origin and alignment calculations. \n. Not that I know of, it was pretty clear that it was the line we found in SequentialLayout. I'll look at a few test cases and see if we can reproduce it. \n. @contra \nThe line is here. But, commenting this out stops SequentialLayout from positioning items. \nMike has a PR up that cleans up a lot of the logic in SequentialLayout, and I just confirmed that it works with Surfaces of undefined size.\nhttps://github.com/Famous/famous/pull/241\n. The final states are used in buildFinal here, this looks like it would make the getFinal work as expected. :+1: \n. :+1: \nMinus the npm-debug.log :smile: \n. This change event is useful, and I would be reluctant to see it go. Listening to options changes are already guarded behind an if statement, so the user has already requested to listen to an event on the options manager. As such, they should be willing to take any minimal performance impacts of having a single event listener.\nIf anything, keep the event and change the event key to: change:optionsKey\njs\nif (this.eventOutput) this.eventOutput.emit('change:' + k, this.key(k).value());\nThis emits a much more useful event on the receiving side. \nMost use cases revolve around wanting to listen to a single options change on a view. In it's current format, \nyou're required to listen to all change events on the options manager. \njs\nmyView._optionsManager.on('change', function(e){ \n  if (e.key == 'desiredKey') { \n    doSomething()\n  }\n});\nInstead of:\njs\nmyView._optionsManager.on('change:desiredKey', function(e) {\n    doSomething()\n});\n. This looks great. Thank you @michaelobriena! \n. :+1: \nA note for people supporting IE10, offsetWidth & offsetHeight is equal to clientWidth /  clientHeight.\nAlso a really clear diagram of the options. \n. From a first glance, it looks like if you called setTranslate(50, 50, 50, callback), the callback would be called 3 times. The same goes for skew, scale, and rotate. In other places in TransitionableTransform, we've used a Timer.after(number) (https://github.com/trusktr/famous/blob/trusktr/transitions/TransitionableTransform.js#L200) and counted all of the callbacks so the user defined callback is only called once. This pattern would need to be implemented for this functionality to work correctly. Also, the set method is incorrectly counting how many callbacks would be called. \nAs far as breaking things down to this level of granularity, it does give the user more flexibility, but the flexibility isn't fully exposed in this pull request. If we're going down this path, TransitionableTransform should expose a rotateY, rotateX, rotateZ, etc. method, to avoid requiring developers to reach into this class to take advantage of the individual Transitionables.\n. @dinopetrone Thank you again for putting together the test example.\nPull request is here:  https://github.com/Famous/famous/pull/457\n. :+1: \n@michaelobriena \n@wgester \nCould either of you review this? Thank you!\n. @michaelobriena I rebased against develop, but this PR is pointed towards master. I can't seem to change the current target of this PR to develop, should I close this and create a new one for develop? \n. Can we also add a method to set this value? There used to be: particle.setImmunity(true / false).  Something similar here would be really useful. \n. To add some context about this solution. If you have a Transitionable, and you call: \njs\nvar trans = new Transitionable(1)\ntrans.set(0, { duration: 500 });\ntrans.delay(500);\ntrans.set(1, { duration: 500 });\nYou would expect that the Transitionable starts at one, animates to 0, waits 500 ms and animates to 1. The current delay does not take into account future actions, so the Transitionable would animate to 0, is instantly set to 1 (because the .get() returned is the state when delay was called), waits 500 ms, and animates to 1 -- which does nothing, since it is already at 1.\nThis pull request changes delay to take into account the pending action queue. \n. ",
    "pilwon": "@TheAlphaNerd Signed the CLA. I only added and removed just a single line of code each, yet it says X 240 problems. Isn't there some problem with the linter settings? Please advise how I could fix this properly.\n. @TheAlphaNerd It now shows the green light.\n. @TheAlphaNerd @marklu Could we reopen this issue? The problem is still unsolved and we are awaiting your official response to this issue.\n. @nihilence Great, please open a PR to share your fix with the community :+1: \n. @TheAlphaNerd Is the recording of LA meetup available anywhere?\n:heart_eyes: Gitter :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1: :+1:\n. ",
    "vkammerer": "Would love to see a remove method land in Famous!\n. ",
    "alexanderGugel": "@DrClick This doesn't seem to actually remove the RenderNode, but instead sets the \"display\"-property of the underlying DOM element to \"none\". I don't know if that's what you want...\n. Ahh.. ok.\n. Yes, sure. Sorry about that.\n. Now it doesn't recalculate the matrix on every get(). This should be as efficient as the previous implementation, but it actually works now.\n. 1.) Done\n2.) Done\n3.) Done\n. Any updates on that?\n. Any updates on this?\n. @TheAlphaNerd \nI introduced this bug with my last pull request.\nAny updates on that?\n. :+1: But not sure it that's consistent. E.g. TT has a getFinal() method.\nWhy can't we get rid of all these getters and use defineProperty? Even IE9 supports it (http://kangax.github.io/compat-table/es5/#Object.defineProperties).\nThen we could have a .finalRotation and .rotation.\n. @StephanBijzitter This would require access to e.g. _finalTranslate (https://github.com/Famous/famous/blob/master/src/transitions/TransitionableTransform.js#L27). I can't think of a scenario in which access to final states of the Transitionables is required.\nI'm not sure why getFinal is still in there (maybe it should be deprecated?). Anyhow, I agree that the API is inconsistent in this regard. AFAIK, getFinal is never being used, nor declared as private. Its primary purpose is to prevent the TT from re-building the transformation matrix on every Engine tick.\nIf you really need to, you have access to _finalTranslate, _finalRotate etc. (discouraged).\nI propose deprecating getFinal because\n1. it is inconsistent in regard to the missing option for public access to _finalRotate, _finalTranslate, _finalSkew and _finalScale\n2. it is inconsistent in regard to the API provided by the Transitionable: The Transitionable doesn't provide an API for accessing final states.\nNevertheless, I'm still of the opinion that _final* should stay in there, in order to cache the transform when nothing changed.\nBackground:\nWhen I refactored the TT the first time (#192), it didn't build the final transformation matrix correctly. Instead of modifying the transform matrix directly (https://github.com/Famous/famous/pull/192/files#diff-004c5728305b3f0ee6973b207e56dcaaL79), I decided to introduce _final*. I still think that that's the right way to do it, since modifying the matrix in the TT would break the abstraction of the Transform.js.\nTL;DR as I'm writing this, I think that the user should have no access at all to _final*, since Transitionables don't provide this functionality either.\n. It would make sense if Transitionables would have a getFinal() method, but they don't. I think whatever API is being exposed by Transitionables should be consistent with the TT. That's why I think TT shouldn't provide access to final states as long as Transitionables don't provide this functionality.\n. @aintnorest I actually think that's the only reason. I remember having a similar problem. I might be wrong on that, but I think the only place where the surfaces you're talking about are still being referenced is in the Entity.\nI edited your JSFiddle to demonstrate this behavior by counting the consecutive ids of entities in Entity:\nhttp://jsfiddle.net/527kwv8f/3/ (click button multiple times).\nIn order to verify that that's the only place where Famous leaks, unregistering the Surfaces from Entity \"manually\" should work (the unregister method of Entity is never being called).\nI'm going to try this out later, but I'm pretty sure that's the problem.\n@TheAlphaNerd Thoughts on this?\n. @jd-carroll Could you explain how you see the idea of a Vector having no state implemented in the current version of Vector? Even if I explicitly create a vector having \"no state\" using new Vector(undefined, undefined, undefined), x, y and z default to 0, so the vector will always have a state.\nI don't really see a specific use case for a vector having no state - can you give an example? I don't think that the current behavior is expected, since the default states depend on the way Vector is being initialized (with an object/ Vector or explicit arguments).\nI might be missing something, but I currently don't see a use case for a \"undefined, undefined, undefined\" state.\n. @TheAlphaNerd I'm pretty sure this is a bug, not an enhancement.\n. Beautiful. Thanks.\n. According to the doc, Matrix.multiply accepts a Matrix, which is not the case. It accepts an array. The way it's currently documented/ implemented is therefore incorrect. It does not adhere to the spec.\nThis is not a feature, but a bug fix. Either way, the docs need to be fixed or a safety check needs to be added.\n. Accepting an array here would be inconsistent I guess. What's wrong with accepting a Matrix and calling .get()? There doesn't seem to be a lot of code depending on this.....\n. @michaelobriena Done.\n. @jd-carroll .setFPSCap(undefined) might also be an option.\nIf you have the ability to set a FPSCap, you should also be able to remove it.\n. Just started writing tests a few days ago. Still pretty early stage, but we're getting there.\nIf you're curious, check out my fork:\nhttps://github.com/alexanderGugel/famous/tree/tests\n. :+1: But I think it might be a good idea to just use one of the standard .gitignore's out there.\nSomething like that.\nThere are a couple of cases that would be covered by that, e.g. the npm-debug.log would also be excluded.\n. #555 and #558 would solve this by exposing an enable and disable method. For the time being, requiring a DesktopEmulationMode and FastClick is not side-effect free. This would require a breaking API change.\n. Update This doesn't break the existing API anymore.\n. @TheAlphaNerd What's the advantage of putting everything into /src?\n. Wouldn't var famous = require('famous'); var Engine = famous.core.Engine; instead of require('famous/core/Engine') solve most of these problems (just like in the global-seed)?\n. Update This doesn't break the existing API anymore.\n. @TheAlphaNerd Can you have a look at this?\n. I agree. Ideally, polyfills should not mutate the global scope. Anyways, I think being able to essentially reverse the FastClick is fine for now and doesn't break the API. It might be worth discussing whether or not the polyfill should actually be in the framework itself (something like this).\n. I don't think this is a good idea anymore, because of a couple of reasons:\n1. I guess _handleStart, _handleMove, _handleEnd were actually intended as protected methods, not private. Therefore, I guess that merging this in might break stuff.\n2. Since e.g. PinchSync uses TwoFingerSync, all syncs inheriting from it should be able to override this method or even remove the listener entirely.\nSorry for the confusion.\n. Should be possible. The easiest way to get started would probably be to use the browserify-seed and add es6ify as a transform. Unfortunately, it seems like defining transforms in the package.json or as command line options is currently not supported in es6ify (see https://github.com/thlorenz/es6ify/pull/65).\nThat's the reason why you would have to write a custom build script for that. Something like that:\nbuild.js\n``` javascript\nvar fs = require('fs');\nvar famousify = require('famousify');\nvar es6ify = require('es6ify');\nvar cssify = require('cssify');\nvar brfs = require('brfs');\nvar browserify = require('browserify');\nbrowserify({ debug: true })\n    .add(es6ify.runtime)\n    .transform(es6ify)\n    .transform(famousify)\n    .transform(cssify)\n    .transform(brfs)\n    .require(require.resolve('./src/index.js'), { entry: true })\n    .bundle()\n    .pipe(fs.createWriteStream('./public/bundle.js'));\n```\nSame with watchify. Otherwise, you'll have to run node build.js every time you make a change.\nI created a simple proof of concept and got it to the point where it's actually rendering something:\nInheriting from View via extend seems to work. Code is here: https://github.com/alexanderGugel/browserify-seed/tree/es6ify\nI spent like 30 minutes on it, so bear with me, but should be a good proof of concept.\n- Clone down https://github.com/alexanderGugel/browserify-seed/tree/es6ify\n- npm i && npm build\nHave fun!\n. @TheAlphaNerd Seems like it's called 6to5ify, not es6to5ify.\n. @TheAlphaNerd Done #582\n. Can't imagine a scenario in which this would be the case. Added quick fix. Will rewrite tomorrow.\n. When enabled, appMode prevents scrolling via browser by killing all touchmove events:\n``` javascript\n    function initialize() {\n        // prevent scrolling via browser\n        window.addEventListener('touchmove', function(event) {\n            event.preventDefault();\n        }, true);\n    addRootClasses();\n}\n\n```\nSource\nappMode is set to true by default.\nTo set the appMode option, Engine.setOptions({ appMode: {Boolean} }) can be used.\n. Removed Prova, please don't merge yet - I'm factoring out the bug fixes into separate PRs.\n. Before merging this in, the following PRs are required (otherwise the tests would fail): \nAccumulator fix: #570\nMatrix fix: #536\nDesktopEmulationMode rewrite (no longer breaking): #555\nQuaternion fix: #590\nMultipleTransition fix:  #594 \n. Sorry, one second.\n. Closing because of #595\n. Hmmmm. Strange. According to http://docs.travis-ci.com/user/gui-and-headless-browsers/, PhantomJS should be pre-installed.\n. Ok, Travis build succeeds now.\nTravis uses Firefox 17.0 by default. I had to update to 35.0 since there seems to be some bugs in older versions of Firefox concerning dispatching custom events and having false-positives for infinite recursion.\n. http://www.nooooooooooooooo.com/\n. Interestingly, the jQuery CDN doesn't seem to enable CORS either: http://jsfiddle.net/fs8rfz1e/2/\nI don't really understand why.\n. Hey Adriano,\nno. There is no extend method. We use Object.create in order to set up the prototype chain directly throughout the framework. If you prefer using extend, you could simply use Underscore or lodash.\nExample 1 using Object.create\n``` javascript\nfunction MyView() {\n    View.call(this);\n}\nMyView.prototype = Object.create(View.prototype);\nMyView.prototype.constructor = MyView;\n...\n```\nExample 2 using extend\n``` javascript\nfunction MyView() {\n    View.call(this);\n}\n_.extend(MyView.prototype, View.prototype);\n```\nThe extend method does not exist on the View prototype, therefore View.extend({}) won't work.\nThere is also an example on how to use Views: https://github.com/Famous/famous/blob/develop/examples/core/View/example.js\n. I don't think helper utilities for setting up the prototype chain belong in famous. That being said, I totally agree that View.extend() is much more intuitive than manually setting up the prototype chain. If you prefer having an extend method on Views, just add it!\n``` javascript\n  // Helpers\n  // -------\n// Helper function to correctly set up the prototype chain, for subclasses.\n  // Similar to goog.inherits, but uses a hash of prototype properties and\n  // class properties to be extended.\n  var extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n// The constructor function for the new subclass is either defined by you\n// (the \"constructor\" property in your `extend` definition), or defaulted\n// by us to simply call the parent's constructor.\nif (protoProps && _.has(protoProps, 'constructor')) {\n  child = protoProps.constructor;\n} else {\n  child = function(){ return parent.apply(this, arguments); };\n}\n\n// Add static properties to the constructor function, if supplied.\n_.extend(child, parent, staticProps);\n\n// Set the prototype chain to inherit from `parent`, without calling\n// `parent`'s constructor function.\nvar Surrogate = function(){ this.constructor = child; };\nSurrogate.prototype = parent.prototype;\nchild.prototype = new Surrogate;\n\n// Add prototype properties (instance properties) to the subclass,\n// if supplied.\nif (protoProps) _.extend(child.prototype, protoProps);\n\n// Set a convenience property in case the parent's prototype is needed\n// later.\nchild.__super__ = parent.prototype;\n\nreturn child;\n\n};\nView.extend = extend;\n```\n(Stolen from Backbone)\nThis implementation relies on Underscores extend method, but you could also simply use your own extend method (actually, you don't even need to be able to extend by multiple objects):\n``` javascript\nvar _  = {};\n_.extend = function extend(obj) {\n    Array.prototype.slice.call(arguments, 1).forEach(function(source) {\n        if (source) {\n            for (var prop in source) {\n                obj[prop] = source[prop];\n            }\n        }\n    });\nreturn obj;\n\n};\n```\nI didn't try this out, but it should work.\n. You need to invoke the super constructor (View) within your constructor using super(...)\n. If your transpiler (e.g. Babel) supports static properties, set it as a static property. Otherwise, simply do ColumnView.DEFAULT_OPTIONS = {}; after you defined your class. Not in the constructor.\nExample:\n``` javascript\nexport class ColumnView extends View {\n  constructor() {\n    let background = new Surface({\n      properties: {\n        backgroundColor: 'gray',\n      },\n    });\nlet backModifier = new StateModifier({\n  transform: Transform.behind\n});\n\nlet scaleModifier = new Modifier({\n    size: [undefined, undefined],\n    proportions: [0.1, 0.4],\n});\n\nthis.add(backModifier).add(scaleModifier).add(background);\n\n}\n  static DEFAULT_OPTIONS = {}\n}\n```\nor\n``` javascript\nexport class ColumnView extends View {\n  constructor() {\n    let background = new Surface({\n      properties: {\n        backgroundColor: 'gray',\n      },\n    });\nlet backModifier = new StateModifier({\n  transform: Transform.behind\n});\n\nlet scaleModifier = new Modifier({\n    size: [undefined, undefined],\n    proportions: [0.1, 0.4],\n});\n\nthis.add(backModifier).add(scaleModifier).add(background);\n\n}\n}\nColumnView.DEFAULT_OPTIONS = {};v\n``\n. This won't work on Windows. You would have to use [readline's](https://nodejs.org/api/readline.html#readline_event_sigint)SIGINT` event if you really want to do this.\nUpdate Sorry, just saw this has been closed.\nUpdate 2 This is also probably not the repo you're looking for. The new seed project, including the dev.js file is in Famous/engine-seed.\n. ",
    "dai-shi": "Could you elaborate a little more about your idea of the subclass? Any existing reference?\n2014/08/06 4:03 Daniel Miller notifications@github.com \n\nYes, I don't think we should make commits any more expensive than necessary on base classes. This is a great idea and should be made into a subclass of GridView.\n\u0081\\\nReply to this email directly or view it on GitHub.\n. Thanks for your explanation. I really want this feature either in famo.us library or application code (but without reinventing the whole GirdLayout). The idea of subclasses sounds nice, and once basic design is ready, I could contribute to it.\nI personally would like to keep this issue open until then, or create a new relevant issue.\n. I understand. Could I ask one more? Would you have any hints to implement this feature in application logic with the current Famous library? Forking is one way, but I want to consider the alternatives if any.\n. Thanks for reviewing. Although, I'm not sure the impact of caching. If you refer Spring.applyForce, there's the same pattern.\n. Please note that it is a bug. You can never attach \"Force\" without this fix.\n\nref: https://github.com/Famous/famous-angular/issues/103#issuecomment-50951125\n. Thanks for the review.\nAbout line 44, this is to keep the backward compatibility. However, if you look at other forces for example Spring, they always expect array of bodies. So it's probably nicer if we can follow the same pattern.\nI'll provide an example to show the case that PhysicsEngine calls applyForce with array of bodies.\n. @michaelobriena Here you go:\nhttps://gist.github.com/dai-shi/8730a68ca0beca046c9e\n. @michaelobriena My shame for the misspelling. I have noticed this when I tested the code, but somehow it failed to be fixed.\nAbout the example, I am willing to provide one, but it takes sometime just because I will be out of the town for a week.\nBasically it's fundamental. If you create several bodies added to the physicsEngine with some constraints (in my case, collisions) and try to remove some of the bodies, the second removal will fail.\n. @michaelobriena @AdamCmiel Here's the example to reproduce the problem.\nhttps://gist.github.com/dai-shi/07a4ffb621fbc9ce6619\n. Thanks.\n. @michaelobriena Sorry to bother you again, but I'm still having an error. Could you please take a look?\nhttps://gist.github.com/dai-shi/07a4ffb621fbc9ce6619\n. I've written another test as follows.\nhttps://gist.github.com/dai-shi/6e3e56edb906807b4a1b\nThis reveals another issue, which is actually related my original patch in #173.\nI will open it as a new issue as it is not going to be a tiny fix.\n. ",
    "PerryBirch": "We like ScrollView as well. It comes up pretty regularly.\n. ",
    "sabithpocker": "Please include one login form in the project :) I am fed up trying to catch sumbit event from a FormContainerSurface\n. Engine.on('resize', function(){\n    window.scrollTo(0, 0);\n});\nTaken from above SO question, this code worked fine for me with minimalui mode, If this works for others it will be better not to include patch code into famo.us core.\nNote: There is some issue if you quickly rotate phone 180 degrees while in landscape mode. I guess the resize event is not firing in that case.\n. @michaelobriena  Hey I have signed the CLA. Also corrected the spellings and added a reference to flip() function.\n. @TheAlphaNerd  Sorry, I was traveling for some days just came back today. Will remember to LINT my future pull requests.\n. ",
    "sectore": "FYI: https://github.com/sectore/todomvc-famous \nMore infos about it will be added here at the google group ...\n-Jens\n. ",
    "antmanler": "I think I find the problem\non line 208 in file Surface.js\nthe setup function, there set all things dirty but transform\nwhen runs to function commit(), all dirty things are marked as false, so in ElementOutput's commit, there is no chance to update the right transform matrix. \n. @TheAlphaNerd I've signed cla :)\n. hey @michaelglenadams \nI think you are right, it is not necessary to do so in most of cases, but there are some uncommon situations that we should take into consideration.\nIf I don't misunderstand, most of time the origin of context in Surface's commit method is [0, 0], unless user explicitly set in main context, \nso the aaMatrix computation (in ElementOutput.js):\njs\n[-this._size[0]*origin[0], -this._size[1]*origin[1], 0]\nequals [0, 0] in most of case, even if surface's size changed, aaMatrix stay same.\nBut, what if origin is not zero, or _size is NaN? \nfor example:\n1.  user may create a dynamic sized surface, init with a careless NaN, so when he gets the correct size and set to surface it won't take effect to element, since aaMatrix was invalid and set when surface in NaN sized.\n``` js\n   var wrongSize = [NaN, NaN];\nvar badSurface =new Surface({\n         size: wrongSize,\n   });\nsetTimeout(function(){\n       // set correct size\n       wrongSize = [100, 100];\n   }, 2000);\n   ```\nalthough this can be avoid by put surface under a modifier(event if size is NaN, since modify is applied in each rendering frame, when size is not NaN surface will display normally), it may be a trap for newbies\n2. in FlexibleLayout, there is a division operation to calculate the length in reflow\njs\n   length = (typeof ratio === 'number')\n               ? flexLength * ratio / ratioSum\n               : node.getSize()[direction];\nif user set ratio to a list of zero (may be at app start time, data is not ready), will also caused aaMatrix be invalid, and after ratioSum is not zero, surface size changed, the correct aaMatrix will never be recomputed\n. I think this has been solved by #186\n\n@michaelobriena @TheAlphaNerd @marklu \nUpdate: sorry, maybe pr #186  was not correct, but I am agree with @contra , sizeDirty should be checked.\nI think size and transform handing in Surface.js and ElementOutput.js is messy :(\n\nUpdate: broken example:\n``` js\ndefine(function(require, exports, module) {\n    // import dependencies\n    var Engine = require('famous/core/Engine');\n    var Surface = require('famous/core/Surface');\n    var Modifier = require('famous/core/Modifier');\n    var RenderNode = require('famous/core/RenderNode');\n    var Transform = require('famous/core/Transform');\n    var ContainerSurface = require('famous/surfaces/ContainerSurface');\n    var Utility = require('famous/utilities/Utility');\n    var SequentialLayout = require('famous/views/SequentialLayout');\n// create the main context\nvar mainContext = Engine.createContext();\n\nvar background = new Surface({\n  classes: ['grid'],\n  size: [400, 400],\n  properties: {\n    backgroundColor: \"black\"\n  }\n});\n\nvar centerModifier = new Modifier({\n    size:[400, 400],\n    origin: [0.5, 0.5],\n});\n\nvar node = mainContext.add(centerModifier);\nnode.add(background);\n\nvar layout = new SequentialLayout({\n  // if set [undefined, undefined], will cause another issue, see link2\n  defaultItemSize: [undefined, 1],\n  direction: Utility.Direction.Y\n});\nnode.add(layout);\n\nvar items = [];\nlayout.sequenceFrom(items);\n\nvar orangeSurface = new Surface({\n  size:[undefined, 50],\n  properties: {\n    backgroundColor: \"hsl(45, 100%, 50%)\",\n  }\n});\nitems.push(orangeSurface)\n\nvar greenSurface = new Surface({\n  size: [undefined, 80],\n  properties: {\n    backgroundColor: \"hsl(90, 100%, 50%)\"\n  }\n});\nitems.push(greenSurface)\n\n});\n```\nlive:\nusing latest code\nlink1, link2\nusing code before pr #186 acd92515a8\nlink3\nLink3 display correct, but, as I mentioned before, the following snippet will only hit once after setup(because, this._transformDirty is true ), since \nthis._transformDirty, this._originDirty, this._sizeDirty are always false when executing Element's commit after Surface's commit\n``` js\nif (this._transformDirty || this._originDirty || this._sizeDirty) {\n            if (this._sizeDirty) {\n                if (!this._size) this._size = [0, 0];\n                this._size[0] = size[0];\n                this._size[1] = size[1];\n                this._sizeDirty = false;\n            }\n        if (this._originDirty) {\n            if (origin) {\n                if (!this._origin) this._origin = [0, 0];\n                this._origin[0] = origin[0];\n                this._origin[1] = origin[1];\n            }\n            else this._origin = null;\n            _setOrigin(target, this._origin);\n            this._originDirty = false;\n        }\n\n        if (!matrix) matrix = Transform.identity;\n        this._matrix = matrix;\n        var aaMatrix = this._size ? Transform.thenMove(matrix, [-this._size[0]*origin[0], -this._size[1]*origin[1], 0]) : matrix;\n        _setMatrix(target, aaMatrix);\n        this._transformDirty = false;\n    }\n\n```\nin Surface's commit shown below,  this._originDirty, this._sizeDirty always set false at last\n``` js\n       if (_xyNotEquals(this._size, size)) {\n            if (!this._size) this._size = [0, 0];\n            this._size[0] = size[0];\n            this._size[1] = size[1];\n            this._sizeDirty = true;\n        }\n    if (this._sizeDirty) {\n        if (this._size) {\n            target.style.width = (this.size && this.size[0] === true) ? '' : this._size[0] + 'px';\n            target.style.height = (this.size && this.size[1] === true) ?  '' : this._size[1] + 'px';\n        }\n        this._sizeDirty = false;\n    }\n\n    if (this._contentDirty) {\n        this.deploy(target);\n        this._eventOutput.emit('deploy');\n        this._contentDirty = false;\n    }\n\n``\n. I try to fix this issue based on @contra pr #186 in my [branch](https://github.com/antmanler/famous/commit/940caa7809453de5e7824e4429676ce14e3ec003), I removed _size modification code in Surface.js, just mark _sizeDirty, and set the correct size of thencontextthat will pass to ElementOutput'scommit` .\nPlz, review the code and make sure everything is ok (btw, I've test on my own project and it seems fine) before I can submit this pr\n. Hey @TheAlphaNerd, I've created new pr here for #180 with single commit message, may be you can close this one :)\n. Hi, @michaelobriena \n1. during ElementOutput committing, _transformDirty need to be true in order to update target's transform using aaMatrix,\n2. if Surface's size is not undefined, the aaMatrix depends on this._size,  here is the code, on line 287\njs\nvar aaMatrix = this.size ? Transform.thenMove(matrix, [-this._size[0]*origin[0], -this._size[1]*origin[1], 0]) : matrix;\nBut, when size changed, the _sizeDirty will be set true (L286, in Surface.js) when executing Surface's commit method, and there is no chance to passing the following check to update aaMatrix.\njs\nif (this._transformDirty || this._originDirty || this._sizeDirty) {\n//...\n}\nso, when size changed, and this.size,  the _transformDirty may should be set\n. @michaelobriena I agree that should not invalidate transform so frequently, I've also commit a patch to my branch @ 940caa78, this based on pr 186(which has been reverted)\nIn this commit, I removed the code of setting _size from Surface, and put this routine to ElementOutput, I thought manipulating _size is ElementOutput's duty.\nCould you plz review my code to see if it would help with this issue :)\n. Maybe related to issue #180 ?\n. Is this related to issue #180, caused by pr #186?\u00a0\nI've post a comment on #180 here\n\u2014\nSent from Mailbox for iPhone\nOn Fri, Aug 15, 2014 at 1:38 AM, Myles Borins notifications@github.com\nwrote:\n\n@contra This reverts half of #186   Feel free to come talk to the guys today if you want to discuss why\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/pull/213#issuecomment-52216078\n. \n",
    "adams": "I think you meant this for michaelobriena\nhttps://github.com/michaelobriena\nOn Wed, Aug 6, 2014 at 8:50 AM, michaelobriena notifications@github.com\nwrote:\n\nThe context in commit is the parent context, not the Context created by\nthe Engine.\nAlso, this._size should never be NaN unless it was wrongly set by the\nuser, as is in the example you included.\nI am not understanding the FlexibleLayout case. If the user sets all of\nthe ratios to 0 then there is no way to figure out how large to be. On a\nreset of the ratios, the Flexiblelayout will reflow.\nI don't see anything wrong with our current logic.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/180#issuecomment-51354142.\n. :)\n\nOn Wed, Aug 6, 2014 at 9:50 AM, Myles Borins notifications@github.com\nwrote:\n\nWe like you too though!\nOn Aug 6, 2014 9:47 AM, \"michaelglenadams\" notifications@github.com\nwrote:\n\nI think you meant this for michaelobriena\nhttps://github.com/michaelobriena\nOn Wed, Aug 6, 2014 at 8:50 AM, michaelobriena notifications@github.com\nwrote:\n\nThe context in commit is the parent context, not the Context created\nby\nthe Engine.\nAlso, this._size should never be NaN unless it was wrongly set by the\nuser, as is in the example you included.\nI am not understanding the FlexibleLayout case. If the user sets all\nof\nthe ratios to 0 then there is no way to figure out how large to be. On\na\nreset of the ratios, the Flexiblelayout will reflow.\nI don't see anything wrong with our current logic.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/180#issuecomment-51354142.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/180#issuecomment-51362679.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/180#issuecomment-51363032.\n. \n",
    "trobbertze": "I see the Famous:wip/wgester/scrollview branch is not available any more, are there any plans to move this into v3-beta?  The paginated view events are still fundamentally broken on v3-beta.\n. The changes proposed by @hwd91c solves the problem 100% and we have not experienced any other side effects from that change.\n. Its the 3rd comment in this conversation.\nBasically you have to revert the css back to version 0.2.2.\n. I tested this when it was still in Famous:wip/wgester/scrollview and it was working as expected.\nI think something went wrong in the merge to v3-beta branch.  The \"pageChange\" event hardly ever fires and the \"settle\" event never fires.\nIf you run the fiddle with console open you will see what I mean.\n. The problem seems to have been on my side.\nMy apologies, the events fire as expected.\n. That happens with the following meta tag in the index file:\nname=\"viewport\" content=\"width=device-width, maximum-scale=1, user-scalable=no\"\n. ",
    "awanosik": "@TheAlphaNerd Any chance there will be an famous-global build based off the 0.3.0-alpha release?\n. @homesal I was able to create a famous global build - I tested it with Angular.\nhttps://github.com/awanosik/Famous-Global-0.3.0-alpha\n. @holmesal I updated the repo to provide instructions on how I did it.\n. Whoops - I guess I did pull the wrong version when setting this up; thanks for the heads up.\n. ",
    "holmesal": "+1, would be awesome to have a 0.3.0-alpha global build!\n. @awanosik thanks a million! Do you mind sharing the command you used to build? I was trying to use browserify, but couldn't get it working properly.\n. Thanks @TheAlphaNerd and @awanosik! My problem was that require statements with non-relative paths weren't working (../core/Surface worked, but famous/core/Surface didn't), but I fixed it by symlinking node_modules/famous to the project root. Feels kinda dirty, but it was one of the methods suggested here.\nAfter that, I was able to just browserify build.js -o famous-global.js and everything worked fine.\nAlso, in case anyone else comes across this, here's a gist of build.js for 0.3.0-alpha with the new modules added.\nalso @awanosik - I think you might still be building from master - for example, if you look at the top of core/Context.js around line 17 you should have var _zeroZero (0.3.0-alpha) instead of var _originZeroZero (0.2.2).\n. Sure, I just cloned famous/famous and added build.js - project here: https://github.com/holmesal/famous-global-build.\nI'm running browserify build.js -o famous-global.js\n. +1 - was still broken in the starterkit I downloaded last night. \nEnded up using http://thecatapi.com/api/images/get on every slide, which was amazing.\n. Ahoy! This tripped me up as well.\n@TheAlphaNerd - I think that the location of the \"primary acting files\" differs based on your use case. If you're developing or using requireJS, src/ makes sense. I think @tato123 and I are coming from another angle - expecting to pull down a bower package and have something that can be used by a build process. If you're bower installing to a project generated by yeoman, your \"primary acting files\" are the built js and css. The current behavior of pointing to nested directories is unexpected.\nI was curious about how common this is, so I picked the most popular bower packages and looked at how the main property was used. bootstrap, angular, jquery, d3, and fontawesome all use it to point to a file (or an array of files), not to a root directory. The crowd isn't always right, but I think it's fair to say that pointing to files is the expected behavior with many common bower packages.\nThere's not a lot of overlap between these use-cases. Have you given any thought to moving (or copying) dist/ to it's own repo and bower package? Angular has a nice pattern for this - you can bower install angular-latest if you're working on angular itself, but most people (and generators) just bower-install angular, which is a built, stable version of what's on master.\nThis would make it a lot easier to use famous with generators (and frameworks like angular). I'm currently adding famous-angular to the angular gulp generator, but not having a valid main property (for my use case) is making it inelegant.\nAny thoughts?\n. ",
    "erny100": "I test  reference-examples/inputs/GenericSync/example  in windows mobile application webView  and don't works.\n. great :)\n. ",
    "pkiers": "The CLA is signed, will walk by today for question a question :)\n. @michaelobriena \nDemo: https://github.com/pkiers/famous-test-cases/tree/inputs-fastclick-clicktolerance\nFor the demo to work you need to emulate touch in Chrome, for better testing I changed clickTolerance variable to 50px. (normal 5px)\n. @michaelobriena \nDemo: https://github.com/pkiers/famous-test-cases/tree/inputs-clickfix-test\nJust remove the require ClickFix line to see difference.\n. @michaelobriena Touch event doesn't have this issue. It could be made a singleton, just made it the way FastClick worked, there you couldn't change the settings either.\n. @wgester Will do\n. @wgester The problem is that MouseSync can be instantated several times, while this fix is only needed once. Any thoughts?\n. @michaelobriena  It's signed.\n. @timjchin I added that also now to the pull request\n. @michaelobriena Problem is that DOMContentLoaded could be fired already and then you wont initialize. \nif (document.readyState == \"complete\" || document.readyState == \"loaded\") {\n     // DOMContentLoaded has fired\n}\n. @TheAlphaNerd We moved it also to the behind the body, but at the moment the yeoman seed version of Famo.us itself has it in head :)\n. @contra @TheAlphaNerd @michaelobriena Closing this one, better solution #240 \n. @TheAlphaNerd I agree it belongs there, should I make PR there with an updated version of FastClick (including #209 and #191)?\n. @MajorBreakfast The improvement for moving targets I had in separate PR #191 \n. @michaelobriena It's not the same, but i made PR for it also before: https://github.com/Famous/famous/pull/208\nHas to do that the script is executed in head so document.body is null so ElementOutput.js gives error.\n. nice :+1: \n. ",
    "OlenDavis": "I hope I'm not out of line wanting to be able to use it without any particular external AMD or frontend pre-processor (whether I use Grunt or Gulp or Browserify or RequireJS or Webpack or any other newer entry) as a standalone library. If you would take a look at what I've done with it purely demonstratively in the last three commits here: https://github.com/OlenDavis/famous you'll see I've only polluted the global scope insofar as it takes to claim a window.famous property with all require-able components assigned to it in sub-objects that match up to the paths a developer would have to require. So require'ing 'famous/core/Entity' is done by simply referencing famous.core.Entity directly.\nThis way, I can easily fold it into other projects that already have their own highly optimized front end asset handling process in place. You could even extend my provided Gruntfile.coffee very simply to generate different r.js \"optimized\" files that contain only relevant subsets of the Famous project - i.e. just the views or just the widgets, etc.\n. Actually, I go a step further and see what I can do along the lines of Kris Kowal's excellent UMD (universal module definition) approach with his equally excellent q.js library. (Btw, I see this is a very long-standing request: https://github.com/Famous/famous/issues/204) And here's Kowal's UMD implementation: https://github.com/kriskowal/q/blob/v1/q.js#L30\n. I already noticed that here in the famous-angular-examples bower.json: https://github.com/thomasstreet/famous-angular-examples/blob/master/bower.json#L14\nI'm almost done though with my fork that implements a nice UMD for Famous as part of the repo itself for your consideration (and my immediate usage) in the meantime!\n. Well hopefully I can help sway the debaters in the direction of least idiocy (which is most interoperability).\n. Yep. And about alternatives being idiotic, life's too short to be literal and serious all the time, so please forgive my blunt sarcasm. Rest assured I have no intention beyond finding the best solution, nor any doubt that your team does either!\n. Will do. Back to business though: check out the current state of my fork and try a Grunt build on it to see what it outputs, or you can see directly from github as I didn't ignore the dist folder: https://github.com/OlenDavis/famous/commit/1b258b86230f10b686b59bd90ad7c33e33b66df4\n. You'll notice the little umd function is actually inlined on all the individually built files, intended to be require'd from the dist folder's famous folder (by saving that dist folder zip'd and gzip'd as the project's github release). Meanwhile, for the concatenated and minified versions of the project, you have one declaration of the umd function at the beginning of the concatenation and merely a reference to it for each of the concatenated files in it.\nThe only real drawback to this approach is having to manage the bookkeeping of the order of the files in the project explicitly. However, as you can see from the famous-files.coffee, the reasons for putting one file before another are either straight-forward as is for the majority of files (as indicated by any sequence of files that are merely alphabetical), or highly unlikely to change in the future (outside of some other earth-shattering refactor, which I think you guys would agree is highly unlikely - again, this is a spectacular project). Anecdotally, one such spot where the TransitionableTransform file was in the middle of the core files rather than largely before with the rest of the transitions subfolder's files, TransitionableTransform is already on its way to being deprecated anyway (re: https://github.com/Famous/famous/blob/master/core/Modifier.js#L13).\n. Here, you can see clearly the pattern of refactoring all files to this UMD process: https://github.com/OlenDavis/famous/commit/4f41d6574fe695d9c5960efafb60138cbcff9030\n. I'm going to rely on AlmondJS while you guys hash out your answer to the UMD question. I look forward to what you come up with!\n. ",
    "visheshd": "Looks like there is fix already in the works here 597c262e58e5832abac9cac2e4c3c4d0ec658e80\n. @philcruz Are you using Cordova with its keyboard plugin? Because I just stumbled up on a similar bug. I had to use the Ionic version of the plugin to get this resolved.\n. I just recall this used to happen when the input field is below the first half vertically. So the content needs to be moved when the keyboard comes up. Cordova does have similar bug https://github.com/apache/cordova-plugins/pull/1. But this might be famo.us as well since our app now doesn't have any input field below the first half\n. @philcruz No it is not used by default. Could you try moving the text box closer to the top and verify that it is indeed an issue with the placement of the textfield?\n. These threshold values could be configurable.\n. @TheAlphaNerd signed the CLA, fixed the indent issues. The build passes but the npm test fails locally. Errors and warning not in the file I am contributing to. This might be because of a difference in linter configuration or version. \n\n\nsrc/core/ElementAllocator.js\n  41:8   warning  Unnecessary { after 'if' condition     curly\n  41:8   warning  Unnecessary { after 'else'             curly\n  45:12  warning  Unnecessary { after 'while' condition  curly\n  67:8   warning  Unnecessary { after 'if' condition     curly\nsrc/core/ElementOutput.js\n  165:8   warning  Unnecessary { after 'for' condition  curly\n  185:4   warning  Unnecessary { after 'if' condition   curly\n  191:9   warning  Unnecessary { after 'if' condition   curly\n  191:9   warning  Unnecessary { after 'else'           curly\n  244:12  warning  size is defined but never used       no-unused-vars\nsrc/core/Engine.js\n   86:8   warning  Unnecessary { after 'while' condition  curly\n  112:8   warning  Unnecessary { after 'for' condition    curly\n  177:12  warning  Unnecessary { after 'if' condition     curly\n  177:12  warning  Unnecessary { after 'else'             curly\n  294:8   warning  Unnecessary { after 'if' condition     curly\n  370:13  warning  Unnecessary { after 'if' condition     curly\nsrc/core/EventEmitter.js\n  34:8   warning  Unnecessary { after 'if' condition   curly\n  35:12  warning  Unnecessary { after 'for' condition  curly\nsrc/core/EventHandler.js\n   81:8   warning  Unnecessary { after 'for' condition  curly\n   84:8   warning  Unnecessary { after 'for' condition  curly\n  154:12  warning  Unnecessary { after 'for' condition  curly\nsrc/core/Modifier.js\n  188:12  warning  Unnecessary { after 'if' condition  curly\n  211:12  warning  Unnecessary { after 'if' condition  curly\n  235:12  warning  Unnecessary { after 'if' condition  curly\n  260:12  warning  Unnecessary { after 'if' condition  curly\n  282:12  warning  Unnecessary { after 'if' condition  curly\n  304:12  warning  Unnecessary { after 'if' condition  curly\nsrc/core/RenderNode.js\n  157:12  warning  Unnecessary { after 'for' condition  curly\nsrc/core/Scene.js\n   76:8   warning  Unnecessary { after 'if' condition     curly\n   77:12  warning  Unnecessary { after 'if' condition     curly\n   77:12  warning  Unnecessary { after 'else'             curly\n   81:16  warning  Unnecessary { after 'for' condition    curly\n   86:13  warning  Unnecessary { after 'if' condition     curly\n   89:13  warning  Unnecessary { after 'if' condition     curly\n  106:22  warning  _parse was used before it was defined  no-use-before-define\n  116:8   warning  Unnecessary { after 'if' condition     curly\n  121:12  warning  Unnecessary { after 'if' condition     curly\nsrc/core/SpecParser.js\n  116:13  warning  Unnecessary { after 'if' condition   curly\n  119:13  warning  Unnecessary { after 'if' condition   curly\n  120:12  warning  Unnecessary { after 'for' condition  curly\nsrc/core/Surface.js\n  155:8   warning  Unnecessary { after 'else'                                            curly\n  155:8   warning  Unnecessary { after 'if' condition                                    curly\n  157:15  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  172:8   warning  Unnecessary { after 'for' condition                                   curly\n  286:8   warning  Unnecessary { after 'if' condition                                    curly\n  287:12  warning  Unnecessary { after 'if' condition                                    curly\n  287:12  warning  Unnecessary { after 'else'                                            curly\n  288:16  warning  Unnecessary { after 'for' condition                                   curly\n  349:16  warning  Unnecessary { after 'else'                                            curly\n  356:23  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  359:16  warning  Unnecessary { after 'else'                                            curly\n  366:23  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  384:38  error    Multiple spaces found around '?'                                      no-multi-spaces\n  423:8   warning  Unnecessary { after 'if' condition                                    curly\n  424:12  warning  Unnecessary { after 'if' condition                                    curly\n  424:12  warning  Unnecessary { after 'else'                                            curly\n  425:16  warning  Unnecessary { after 'for' condition                                   curly\nsrc/core/Transform.js\n  467:8  warning  Unnecessary { after 'if' condition  curly\n  475:8  error    Multiple spaces found around '='    no-multi-spaces\n  476:8  error    Multiple spaces found around '='    no-multi-spaces\n  503:8  error    Multiple spaces found around '='    no-multi-spaces\nsrc/core/View.js\n  103:8  warning  Unnecessary { after 'if' condition  curly\nsrc/core/ViewSequence.js\n   86:12  warning  Unnecessary { after 'if' condition                           curly\n   90:12  warning  Unnecessary { after 'if' condition                           curly\n  152:8   warning  Unnecessary { after 'if' condition                           curly\n  155:13  warning  Unnecessary { after 'if' condition                           curly\n  156:12  warning  Unnecessary { after 'else'                                   curly\n  157:56  warning  A constructor name should not start with a lowercase letter  new-cap\n  165:33  warning  A constructor name should not start with a lowercase letter  new-cap\n  179:8   warning  Unnecessary { after 'if' condition                           curly\n  182:13  warning  Unnecessary { after 'if' condition                           curly\n  183:12  warning  Unnecessary { after 'else'                                   curly\n  184:53  warning  A constructor name should not start with a lowercase letter  new-cap\n  192:29  warning  A constructor name should not start with a lowercase letter  new-cap\nsrc/inputs/Accumulator.js\n  25:39  warning  _handleUpdate was used before it was defined  no-use-before-define\nsrc/inputs/FastClick.js\n  67:16  warning  Unnecessary { after 'if' condition  curly\nsrc/inputs/GenericSync.js\n  58:12  warning  Unnecessary { after 'if' condition  curly\nsrc/inputs/MouseSync.js\n   42:8   error    Multiple spaces found around '='             no-multi-spaces\n   53:41  warning  _handleStart was used before it was defined  no-use-before-define\n   54:41  warning  _handleMove was used before it was defined   no-use-before-define\n   55:39  warning  _handleEnd was used before it was defined    no-use-before-define\n   57:70  warning  _handleLeave was used before it was defined  no-use-before-define\n   58:47  warning  _handleEnd was used before it was defined    no-use-before-define\n   61:12  error    Extra space after key \"delta\"                key-spacing\n   62:12  error    Extra space after key \"position\"             key-spacing\n   63:12  error    Extra space after key \"velocity\"             key-spacing\n   64:12  error    Extra space after key \"clientX\"              key-spacing\n   65:12  error    Extra space after key \"clientY\"              key-spacing\n   66:12  error    Extra space after key \"offsetX\"              key-spacing\n   67:12  error    Extra space after key \"offsetY\"              key-spacing\n  151:12  warning  prevTime is defined but never used           no-unused-vars\n  161:8   warning  Unnecessary { after 'if' condition           curly\n  193:8   error    Multiple spaces found around '='             no-multi-spaces\n  196:8   error    Multiple spaces found around '='             no-multi-spaces\n  197:8   error    Multiple spaces found around '='             no-multi-spaces\n  198:8   error    Multiple spaces found around '='             no-multi-spaces\n  199:8   error    Multiple spaces found around '='             no-multi-spaces\n  201:8   warning  Unnecessary { after 'if' condition           curly\nsrc/inputs/PinchSync.js\n  39:8   error  Extra space after key \"scale\"  key-spacing\n  66:12  error  Extra space after key \"delta\"  key-spacing\nsrc/inputs/RotateSync.js\n  39:8   error  Extra space after key \"scale\"  key-spacing\n  66:12  error  Extra space after key \"delta\"  key-spacing\nsrc/inputs/ScaleSync.js\n  33:36  warning  _reset was used before it was defined  no-use-before-define\n  40:8   error    Extra space after key \"scale\"          key-spacing\n  72:12  error    Extra space after key \"delta\"          key-spacing\n  76:12  error    Extra space after key \"center\"         key-spacing\nsrc/inputs/ScrollSync.js\n   40:12  error    Extra space after key \"delta\"               key-spacing\n   41:12  error    Extra space after key \"position\"            key-spacing\n   42:12  error    Extra space after key \"velocity\"            key-spacing\n   43:12  error    Extra space after key \"slip\"                key-spacing\n   52:69  error    A space is required after ','               comma-spacing\n   55:42  warning  _handleMove was used before it was defined  no-use-before-define\n   56:37  warning  _handleMove was used before it was defined  no-use-before-define\n  100:73  error    A space is required after ','               comma-spacing\n  101:12  warning  payload was used before it was defined      no-use-before-define\n  102:12  warning  payload was used before it was defined      no-use-before-define\n  103:12  warning  payload was used before it was defined      no-use-before-define\n  104:12  warning  payload was used before it was defined      no-use-before-define\n  105:12  warning  payload was used before it was defined      no-use-before-define\n  106:12  warning  payload was used before it was defined      no-use-before-define\n  107:12  warning  payload was used before it was defined      no-use-before-define\n  108:44  warning  payload was used before it was defined      no-use-before-define\n  126:8   warning  Unnecessary { after 'if' condition          curly\n  158:8   error    Multiple spaces found around '='            no-multi-spaces\n  161:8   error    Multiple spaces found around '='            no-multi-spaces\nsrc/inputs/TouchSync.js\n   43:8   error    Multiple spaces found around '='             no-multi-spaces\n   55:44  warning  _handleStart was used before it was defined  no-use-before-define\n   56:43  warning  _handleMove was used before it was defined   no-use-before-define\n   57:42  warning  _handleEnd was used before it was defined    no-use-before-define\n   60:12  error    Extra space after key \"delta\"                key-spacing\n   61:12  error    Extra space after key \"position\"             key-spacing\n   62:12  error    Extra space after key \"velocity\"             key-spacing\n   63:12  error    Extra space after key \"clientX\"              key-spacing\n   64:12  error    Extra space after key \"clientY\"              key-spacing\n   65:12  error    Extra space after key \"count\"                key-spacing\n   66:12  error    Extra space after key \"touch\"                key-spacing\n  175:8   error    Multiple spaces found around '='             no-multi-spaces\n  178:8   error    Multiple spaces found around '='             no-multi-spaces\n  179:8   error    Multiple spaces found around '='             no-multi-spaces\n  180:8   error    Multiple spaces found around '='             no-multi-spaces\n  181:8   error    Multiple spaces found around '='             no-multi-spaces\nsrc/inputs/TouchTracker.js\n  18:12  error  Extra space after key \"identifier\"  key-spacing\nsrc/inputs/TwoFingerSync.js\n  107:16  warning  Unnecessary { after 'if' condition  curly\n  109:24  error    Extra space after key \"touches\"     key-spacing\n  110:24  error    Extra space after key \"angle\"       key-spacing\nsrc/math/Matrix.js\n   24:19  error    A space is required after ','        comma-spacing\n   24:21  error    A space is required after ','        comma-spacing\n   25:19  error    A space is required after ','        comma-spacing\n   25:21  error    A space is required after ','        comma-spacing\n   26:19  error    A space is required after ','        comma-spacing\n   26:21  error    A space is required after ','        comma-spacing\n  111:16  warning  Unnecessary { after 'for' condition  curly\n  132:8   warning  Unnecessary { after 'for' condition  curly\n  133:12  warning  Unnecessary { after 'for' condition  curly\nsrc/math/Quaternion.js\n   22:26  error  A space is required after ','     comma-spacing\n   22:28  error  A space is required after ','     comma-spacing\n   22:30  error  A space is required after ','     comma-spacing\n  190:12  error  Multiple spaces found around '='  no-multi-spaces\n  192:12  error  Multiple spaces found around '='  no-multi-spaces\n  210:54  error  A space is required after ','     comma-spacing\n  210:56  error  A space is required after ','     comma-spacing\n  210:58  error  A space is required after ','     comma-spacing\n  418:12  error  Multiple spaces found around '='  no-multi-spaces\n  419:12  error  Multiple spaces found around '='  no-multi-spaces\n  420:12  error  Multiple spaces found around '='  no-multi-spaces\n  421:12  error  Multiple spaces found around '='  no-multi-spaces\n  424:12  error  Multiple spaces found around '='  no-multi-spaces\n  425:12  error  Multiple spaces found around '='  no-multi-spaces\nsrc/math/Random.js\n  14:30  error    A space is required after ','                                                                  comma-spacing\n  15:21  warning  A function with a name starting with an uppercase letter should only be used as a constructor  new-cap\n  18:32  error    A space is required after ','                                                                  comma-spacing\n  19:22  warning  A function with a name starting with an uppercase letter should only be used as a constructor  new-cap\n  41:42  error    A space is required after ','                                                                  comma-spacing\n  41:46  error    A space is required after ','                                                                  comma-spacing\n  63:38  error    A space is required after ','                                                                  comma-spacing\n  63:42  error    A space is required after ','                                                                  comma-spacing\n  84:16  warning  A function with a name starting with an uppercase letter should only be used as a constructor  new-cap\n  97:15  warning  A function with a name starting with an uppercase letter should only be used as a constructor  new-cap\nsrc/math/Utilities.js\n  40:8  warning  Unnecessary { after 'for' condition  curly\nsrc/math/Vector.js\n   22:22  error    A space is required after ','                  comma-spacing\n   22:24  error    A space is required after ','                  comma-spacing\n   43:15  warning  _setXYZ was used before it was defined         no-use-before-define\n   59:15  warning  _setXYZ was used before it was defined         no-use-before-define\n   76:15  warning  _setXYZ was used before it was defined         no-use-before-define\n  112:15  warning  _setXYZ was used before it was defined         no-use-before-define\n  144:15  warning  _setXYZ was used before it was defined         no-use-before-define\n  166:15  warning  _setXYZ was used before it was defined         no-use-before-define\n  188:15  warning  _setXYZ was used before it was defined         no-use-before-define\n  236:32  warning  _setFromVector was used before it was defined  no-use-before-define\n  237:20  warning  _setXYZ was used before it was defined         no-use-before-define\n  262:23  error    A space is required after ','                  comma-spacing\n  262:25  error    A space is required after ','                  comma-spacing\n  294:41  error    A space is required after ','                  comma-spacing\n  294:43  error    A space is required after ','                  comma-spacing\nsrc/modifiers/Draggable.js\n   40:52  error    A space is required after ','               comma-spacing\n   41:8   error    Multiple spaces found around '='            no-multi-spaces\n   41:33  error    A space is required after ','               comma-spacing\n   44:57  error    Extra space after key \"scale\"               key-spacing\n   49:8   warning  _bindEvents was used before it was defined  no-use-before-define\n   54:8   error    Extra space after key \"x\"                   key-spacing\n   55:8   error    Extra space after key \"y\"                   key-spacing\n   64:8   error    Extra space after key \"projection\"          key-spacing\n   65:8   error    Extra space after key \"scale\"               key-spacing\n   66:8   error    Extra space after key \"xRange\"              key-spacing\n   67:8   error    Extra space after key \"yRange\"              key-spacing\n   68:8   error    Extra space after key \"snapX\"               key-spacing\n   69:8   error    Extra space after key \"snapY\"               key-spacing\n   70:8   error    Extra space after key \"transition\"          key-spacing\n   70:23  error    Extra space after key \"duration\"            key-spacing\n   74:12  error    Multiple spaces found around '='            no-multi-spaces\n   75:12  error    Multiple spaces found around '='            no-multi-spaces\n   76:12  error    Multiple spaces found around '='            no-multi-spaces\n   77:12  error    Multiple spaces found around '='            no-multi-spaces\n   93:40  error    Extra space after key \"position\"            key-spacing\n  124:41  error    Extra space after key \"position\"            key-spacing\n  129:38  error    Extra space after key \"position\"            key-spacing\n  154:12  error    Multiple spaces found around '!=='          no-multi-spaces\n  155:12  error    Multiple spaces found around '='            no-multi-spaces\n  162:12  error    Multiple spaces found around '!=='          no-multi-spaces\n  162:42  error    Multiple spaces found around '='            no-multi-spaces\n  163:12  error    Multiple spaces found around '!=='          no-multi-spaces\n  163:42  error    Multiple spaces found around '='            no-multi-spaces\nsrc/modifiers/ModifierChain.js\n  61:12  error    Multiple spaces found around '='     no-multi-spaces\n  63:8   warning  Unnecessary { after 'for' condition  curly\nsrc/physics/PhysicsEngine.js\n   29:8   error    Multiple spaces found around '='              no-multi-spaces\n   30:8   error    Multiple spaces found around '='              no-multi-spaces\n   31:8   error    Multiple spaces found around '='              no-multi-spaces\n   32:8   error    Multiple spaces found around '='              no-multi-spaces\n   33:8   error    Multiple spaces found around '='              no-multi-spaces\n   35:8   error    Multiple spaces found around '='              no-multi-spaces\n   36:8   error    Multiple spaces found around '='              no-multi-spaces\n   36:31  warning  now was used before it was defined            no-use-before-define\n   37:8   error    Multiple spaces found around '='              no-multi-spaces\n   38:8   error    Multiple spaces found around '='              no-multi-spaces\n   39:8   error    Multiple spaces found around '='              no-multi-spaces\n   40:8   error    Multiple spaces found around '='              no-multi-spaces\n   41:8   error    Multiple spaces found around '='              no-multi-spaces\n   53:8   error    Extra space after key \"start\"                 key-spacing\n   54:8   error    Extra space after key \"update\"                key-spacing\n   55:8   error    Extra space after key \"end\"                   key-spacing\n   71:8   error    Extra space after key \"constraintSteps\"       key-spacing\n   78:8   error    Extra space after key \"sleepTolerance\"        key-spacing\n   86:8   error    Extra space after key \"velocityCap\"           key-spacing\n   94:8   error    Extra space after key \"angularVelocityCap\"    key-spacing\n  157:12  error    Extra space after key \"agent\"                 key-spacing\n  158:12  error    Extra space after key \"id\"                    key-spacing\n  159:12  error    Extra space after key \"targets\"               key-spacing\n  160:12  error    Extra space after key \"source\"                key-spacing\n  197:8   warning  _getAgentData was used before it was defined  no-use-before-define\n  226:25  warning  _getAgentData was used before it was defined  no-use-before-define\n  242:8   error    Multiple spaces found around '='              no-multi-spaces\n  243:8   error    Multiple spaces found around '='              no-multi-spaces\n  244:8   error    Multiple spaces found around '='              no-multi-spaces\n  245:8   error    Multiple spaces found around '='              no-multi-spaces\nsrc/physics/bodies/Body.js\n   32:8   error  Multiple spaces found around '='  no-multi-spaces\n   35:8   error  Multiple spaces found around '='  no-multi-spaces\n  119:36  error  A space is required after ','     comma-spacing\n  119:38  error  A space is required after ','     comma-spacing\n  119:40  error  A space is required after ','     comma-spacing\n  120:40  error  A space is required after ','     comma-spacing\n  120:42  error  A space is required after ','     comma-spacing\nsrc/physics/bodies/Particle.js\n   55:43  error  A space is required after ','      comma-spacing\n   55:45  error  A space is required after ','      comma-spacing\n   61:12  error  Extra space after key \"size\"       key-spacing\n   62:12  error  Extra space after key \"target\"     key-spacing\n   63:16  error  Extra space after key \"transform\"  key-spacing\n   64:16  error  Extra space after key \"origin\"     key-spacing\n   65:16  error  Extra space after key \"target\"     key-spacing\n   71:8   error  Extra space after key \"position\"   key-spacing\n   72:8   error  Extra space after key \"velocity\"   key-spacing\n   73:8   error  Extra space after key \"mass\"       key-spacing\n   78:8   error  Extra space after key \"start\"      key-spacing\n   79:8   error  Extra space after key \"update\"     key-spacing\n   80:8   error  Extra space after key \"end\"        key-spacing\n  252:40  error  A space is required after ','      comma-spacing\n  252:42  error  A space is required after ','      comma-spacing\n  253:40  error  A space is required after ','      comma-spacing\n  253:42  error  A space is required after ','      comma-spacing\nsrc/physics/bodies/Rectangle.js\n  24:39  error  A space is required after ','  comma-spacing\nsrc/physics/constraints/Collision.js\n   31:8   error    Multiple spaces found around '='           no-multi-spaces\n   32:8   error    Multiple spaces found around '='           no-multi-spaces\n   33:8   error    Multiple spaces found around '='           no-multi-spaces\n   44:8   error    Extra space after key \"restitution\"        key-spacing\n   45:8   error    Extra space after key \"drift\"              key-spacing\n   46:8   error    Extra space after key \"slop\"               key-spacing\n   49:13  warning  _normalVelocity is defined but never used  no-unused-vars\n   84:12  error    Multiple spaces found around '='           no-multi-spaces\n  103:16  error    Multiple spaces found around '='           no-multi-spaces\n  106:16  error    Multiple spaces found around '='           no-multi-spaces\n  114:24  error    Extra space after key \"target\"             key-spacing\n  115:24  error    Extra space after key \"source\"             key-spacing\n  116:24  error    Extra space after key \"overlap\"            key-spacing\n  117:24  error    Extra space after key \"normal\"             key-spacing\nsrc/physics/constraints/Curve.js\n   48:8   error  Extra space after key \"equation\"      key-spacing\n   48:31  error  A space is required after ','         comma-spacing\n   48:33  error  A space is required after ','         comma-spacing\n   51:8   error  Extra space after key \"plane\"         key-spacing\n   51:27  error  A space is required after ','         comma-spacing\n   51:29  error  A space is required after ','         comma-spacing\n   54:8   error  Extra space after key \"period\"        key-spacing\n   55:8   error  Extra space after key \"dampingRatio\"  key-spacing\n  105:16  error  Multiple spaces found around '='      no-multi-spaces\n  112:16  error  Multiple spaces found around '='      no-multi-spaces\n  117:16  error  Multiple spaces found around '='      no-multi-spaces\nsrc/physics/constraints/Distance.js\n   35:8   error    Multiple spaces found around '='      no-multi-spaces\n   36:8   error    Multiple spaces found around '='      no-multi-spaces\n   37:8   error    Multiple spaces found around '='      no-multi-spaces\n   38:8   error    Multiple spaces found around '='      no-multi-spaces\n   47:8   error    Extra space after key \"anchor\"        key-spacing\n   48:8   error    Extra space after key \"length\"        key-spacing\n   49:8   error    Extra space after key \"minLength\"     key-spacing\n   50:8   error    Extra space after key \"period\"        key-spacing\n   51:8   error    Extra space after key \"dampingRatio\"  key-spacing\n   74:13  warning  _calcError is defined but never used  no-unused-vars\n   98:12  error    Multiple spaces found around '='      no-multi-spaces\n   99:12  error    Multiple spaces found around '='      no-multi-spaces\n  100:12  error    Multiple spaces found around '='      no-multi-spaces\n  101:12  error    Multiple spaces found around '='      no-multi-spaces\n  102:12  error    Multiple spaces found around '='      no-multi-spaces\n  105:12  error    Multiple spaces found around '='      no-multi-spaces\n  106:12  error    Multiple spaces found around '='      no-multi-spaces\n  147:16  error    Multiple spaces found around '='      no-multi-spaces\n  154:16  error    Multiple spaces found around '='      no-multi-spaces\n  158:16  error    Multiple spaces found around '='      no-multi-spaces\nsrc/physics/constraints/Snap.js\n   38:8   error  Multiple spaces found around '='      no-multi-spaces\n   39:8   error  Multiple spaces found around '='      no-multi-spaces\n   48:8   error  Extra space after key \"period\"        key-spacing\n   49:8   error  Extra space after key \"dampingRatio\"  key-spacing\n   50:8   error  Extra space after key \"length\"        key-spacing\n   51:8   error  Extra space after key \"anchor\"        key-spacing\n   83:12  error  Multiple spaces found around '='      no-multi-spaces\n   84:12  error  Multiple spaces found around '='      no-multi-spaces\n   85:12  error  Multiple spaces found around '='      no-multi-spaces\n   86:12  error  Multiple spaces found around '='      no-multi-spaces\n  106:12  error  Multiple spaces found around '='      no-multi-spaces\n  107:12  error  Multiple spaces found around '='      no-multi-spaces\n  108:12  error  Multiple spaces found around '='      no-multi-spaces\n  109:12  error  Multiple spaces found around '='      no-multi-spaces\n  110:12  error  Multiple spaces found around '='      no-multi-spaces\n  111:12  error  Multiple spaces found around '='      no-multi-spaces\n  112:12  error  Multiple spaces found around '='      no-multi-spaces\n  113:12  error  Multiple spaces found around '='      no-multi-spaces\n  150:16  error  Multiple spaces found around '='      no-multi-spaces\nsrc/physics/constraints/Surface.js\n   31:8   error  Multiple spaces found around '='      no-multi-spaces\n   40:8   error  Extra space after key \"equation\"      key-spacing\n   41:8   error  Extra space after key \"period\"        key-spacing\n   42:8   error  Extra space after key \"dampingRatio\"  key-spacing\n   68:12  error  Multiple spaces found around '='      no-multi-spaces\n   94:16  error  Multiple spaces found around '='      no-multi-spaces\n  101:16  error  Multiple spaces found around '='      no-multi-spaces\nsrc/physics/constraints/Wall.js\n   70:8   error    Extra space after key \"REFLECT\"      key-spacing\n   76:8   error    Extra space after key \"SILENT\"       key-spacing\n   80:8   error    Extra space after key \"restitution\"  key-spacing\n   81:8   error    Extra space after key \"drift\"        key-spacing\n   82:8   error    Extra space after key \"slop\"         key-spacing\n   83:8   error    Extra space after key \"normal\"       key-spacing\n   84:8   error    Extra space after key \"distance\"     key-spacing\n   85:8   error    Extra space after key \"onContact\"    key-spacing\n  130:24  error    Extra space after key \"particle\"     key-spacing\n  130:45  error    Extra space after key \"wall\"         key-spacing\n  130:58  error    Extra space after key \"overlap\"      key-spacing\n  130:77  error    Extra space after key \"normal\"       key-spacing\n  155:8   warning  Unnecessary { after 'if' condition   curly\n  180:12  warning  Unnecessary { after 'if' condition   curly\nsrc/physics/constraints/Walls.js\n   36:8   warning  _createComponents was used before it was defined   no-use-before-define\n   62:8   error    Extra space after key \"LEFT\"                       key-spacing\n   63:8   error    Extra space after key \"RIGHT\"                      key-spacing\n   64:8   error    Extra space after key \"TOP\"                        key-spacing\n   65:8   error    Extra space after key \"BOTTOM\"                     key-spacing\n   66:8   error    Extra space after key \"FRONT\"                      key-spacing\n   67:8   error    Extra space after key \"BACK\"                       key-spacing\n   68:8   error    Extra space after key \"TWO_DIMENSIONAL\"            key-spacing\n   69:8   error    Extra space after key \"THREE_DIMENSIONAL\"          key-spacing\n   73:8   error    Extra space after key \"sides\"                      key-spacing\n   74:8   error    Extra space after key \"size\"                       key-spacing\n   75:8   error    Extra space after key \"origin\"                     key-spacing\n   76:8   error    Extra space after key \"drift\"                      key-spacing\n   77:8   error    Extra space after key \"slop\"                       key-spacing\n   78:8   error    Extra space after key \"restitution\"                key-spacing\n   79:8   error    Extra space after key \"onContact\"                  key-spacing\n   83:8   error    Extra space after key \"0\"                          key-spacing\n   84:8   error    Extra space after key \"1\"                          key-spacing\n   85:8   error    Extra space after key \"2\"                          key-spacing\n   86:8   error    Extra space after key \"3\"                          key-spacing\n   87:8   error    Extra space after key \"4\"                          key-spacing\n   88:8   error    Extra space after key \"5\"                          key-spacing\n  125:47  warning  _setOptionsForEach was used before it was defined  no-use-before-define\n  125:78  error    Extra space after key \"restitution\"                key-spacing\n  126:41  warning  _setOptionsForEach was used before it was defined  no-use-before-define\n  126:72  error    Extra space after key \"drift\"                      key-spacing\n  127:40  warning  _setOptionsForEach was used before it was defined  no-use-before-define\n  127:71  error    Extra space after key \"slop\"                       key-spacing\n  128:45  warning  _setOptionsForEach was used before it was defined  no-use-before-define\n  128:76  error    Extra space after key \"onContact\"                  key-spacing\n  142:16  error    Extra space after key \"normal\"                     key-spacing\n  143:16  error    Extra space after key \"distance\"                   key-spacing\n  160:29  error    Extra space after key \"distance\"                   key-spacing\n  163:8   error    Multiple spaces found around '='                   no-multi-spaces\nsrc/physics/forces/Drag.js\n  47:8   error  Extra space after key \"LINEAR\"         key-spacing\n  58:8   error  Extra space after key \"QUADRATIC\"      key-spacing\n  78:8   error  Extra space after key \"strength\"       key-spacing\n  85:8   error  Extra space after key \"forceFunction\"  key-spacing\n  95:12  error  Multiple spaces found around '='       no-multi-spaces\n  96:12  error  Multiple spaces found around '='       no-multi-spaces\n  97:12  error  Multiple spaces found around '='       no-multi-spaces\nsrc/physics/forces/Force.js\n  45:8  warning  Unnecessary { after 'while' condition  curly\nsrc/physics/forces/Repulsion.js\n   28:8   error  Multiple spaces found around '='       no-multi-spaces\n   50:8   error  Extra space after key \"LINEAR\"         key-spacing\n   61:8   error  Extra space after key \"MORSE\"          key-spacing\n   74:8   error  Extra space after key \"INVERSE\"        key-spacing\n   85:8   error  Extra space after key \"GRAVITY\"        key-spacing\n  105:8   error  Extra space after key \"strength\"       key-spacing\n  115:8   error  Extra space after key \"anchor\"         key-spacing\n  123:8   error  Extra space after key \"range\"          key-spacing\n  131:8   error  Extra space after key \"cutoff\"         key-spacing\n  140:8   error  Extra space after key \"cap\"            key-spacing\n  147:8   error  Extra space after key \"decayFunction\"  key-spacing\n  173:12  error  Multiple spaces found around '='       no-multi-spaces\n  174:12  error  Multiple spaces found around '='       no-multi-spaces\n  175:12  error  Multiple spaces found around '='       no-multi-spaces\n  177:12  error  Multiple spaces found around '='       no-multi-spaces\n  178:12  error  Multiple spaces found around '='       no-multi-spaces\n  179:12  error  Multiple spaces found around '='       no-multi-spaces\n  180:12  error  Multiple spaces found around '='       no-multi-spaces\n  181:12  error  Multiple spaces found around '='       no-multi-spaces\n  182:12  error  Multiple spaces found around '='       no-multi-spaces\n  183:12  error  Multiple spaces found around '='       no-multi-spaces\nsrc/physics/forces/RotationalDrag.js\n  47:8   error  Extra space after key \"LINEAR\"     key-spacing\n  58:8   error  Extra space after key \"QUADRATIC\"  key-spacing\n  70:12  error  Multiple spaces found around '='   no-multi-spaces\n  71:12  error  Multiple spaces found around '='   no-multi-spaces\n  72:12  error  Multiple spaces found around '='   no-multi-spaces\nsrc/physics/forces/RotationalSpring.js\n   64:8   warning  Unnecessary { after 'if' condition  curly\n  109:12  error    Multiple spaces found around '='    no-multi-spaces\n  111:12  error    Multiple spaces found around '*='   no-multi-spaces\n  128:12  error    Multiple spaces found around '='    no-multi-spaces\n  129:12  error    Multiple spaces found around '='    no-multi-spaces\n  130:12  error    Multiple spaces found around '='    no-multi-spaces\n  131:12  error    Multiple spaces found around '='    no-multi-spaces\nsrc/physics/forces/Spring.js\n   34:8   warning  _init was used before it was defined   no-use-before-define\n   61:8   error    Extra space after key \"FENE\"           key-spacing\n   75:8   error    Extra space after key \"HOOK\"           key-spacing\n   96:8   error    Extra space after key \"period\"         key-spacing\n  107:8   error    Extra space after key \"dampingRatio\"   key-spacing\n  116:8   error    Extra space after key \"length\"         key-spacing\n  125:8   error    Extra space after key \"maxLength\"      key-spacing\n  134:8   error    Extra space after key \"anchor\"         key-spacing\n  141:8   error    Extra space after key \"forceFunction\"  key-spacing\n  228:12  error    Multiple spaces found around '='       no-multi-spaces\n  230:12  error    Multiple spaces found around '*='      no-multi-spaces\n  252:12  error    Multiple spaces found around '='       no-multi-spaces\n  253:12  error    Multiple spaces found around '='       no-multi-spaces\n  254:12  error    Multiple spaces found around '='       no-multi-spaces\n  255:12  error    Multiple spaces found around '='       no-multi-spaces\nsrc/physics/forces/VectorField.js\n   52:8   error    Extra space after key \"CONSTANT\"                 key-spacing\n   63:8   error    Extra space after key \"LINEAR\"                   key-spacing\n   74:8   error    Extra space after key \"RADIAL\"                   key-spacing\n   87:8   error    Extra space after key \"POINT_ATTRACTOR\"          key-spacing\n  107:8   error    Extra space after key \"strength\"                 key-spacing\n  115:8   error    Extra space after key \"field\"                    key-spacing\n  128:12  warning  _setFieldOptions was used before it was defined  no-use-before-define\nsrc/surfaces/CanvasSurface.js\n  77:12  warning  size is defined but never used  no-unused-vars\nsrc/surfaces/ImageSurface.js\n  68:8   warning  Unnecessary { after 'if' condition                                    curly\n  69:12  warning  Unnecessary { after 'else'                                            curly\n  73:19  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  79:8   warning  Unnecessary { after 'else'                                            curly\nsrc/surfaces/InputSurface.js\n   27:8  error    Multiple spaces found around '='    no-multi-spaces\n   28:8  error    Multiple spaces found around '='    no-multi-spaces\n   29:8  error    Multiple spaces found around '='    no-multi-spaces\n  114:8  warning  Unnecessary { after 'if' condition  curly\n  114:8  warning  Unnecessary { after 'else'          curly\nsrc/surfaces/TextareaSurface.js\n   30:8  error    Multiple spaces found around '='    no-multi-spaces\n   31:8  error    Multiple spaces found around '='    no-multi-spaces\n   32:8  error    Multiple spaces found around '='    no-multi-spaces\n   33:8  error    Multiple spaces found around '='    no-multi-spaces\n   34:8  error    Multiple spaces found around '='    no-multi-spaces\n  101:8  warning  Unnecessary { after 'if' condition  curly\n  101:8  warning  Unnecessary { after 'else'          curly\nsrc/transitions/Easing.js\n   40:12  warning  Unexpected constant condition                                         no-constant-condition\n   65:12  warning  Unexpected constant condition                                         no-constant-condition\n   90:12  warning  Unexpected constant condition                                         no-constant-condition\n  115:12  warning  Unexpected constant condition                                         no-constant-condition\n  166:12  warning  Unexpected constant condition                                         no-constant-condition\n  191:12  warning  Unexpected constant condition                                         no-constant-condition\n  223:36  warning  Unexpected constant condition                                         no-constant-condition\n  253:12  warning  Unexpected constant condition                                         no-constant-condition\n  270:12  warning  Unnecessary { after 'if' condition                                    curly\n  272:19  warning  Unnecessary { after 'if' condition                                    curly\n  274:19  warning  Unnecessary { after 'if' condition                                    curly\n  274:19  warning  Unnecessary { after 'else'                                            curly\n  276:19  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\nsrc/transitions/MultipleTransition.js\n  39:8   warning  Unnecessary { after 'for' condition                          curly\n  57:58  warning  A constructor name should not start with a lowercase letter  new-cap\n  71:58  warning  A constructor name should not start with a lowercase letter  new-cap\nsrc/transitions/SnapTransition.js\n   29:8   error  Multiple spaces found around '='      no-multi-spaces\n   32:8   error  Multiple spaces found around '='      no-multi-spaces\n   33:8   error  Multiple spaces found around '='      no-multi-spaces\n   35:8   error  Multiple spaces found around '='      no-multi-spaces\n   37:8   error  Multiple spaces found around '='      no-multi-spaces\n   39:8   error  Multiple spaces found around '='      no-multi-spaces\n   39:36  error  Extra space after key \"anchor\"        key-spacing\n   64:8   error  Extra space after key \"period\"        key-spacing\n   74:8   error  Extra space after key \"dampingRatio\"  key-spacing\n   83:8   error  Extra space after key \"velocity\"      key-spacing\n  136:51  error  Multiple spaces found around '='      no-multi-spaces\n  138:51  error  Multiple spaces found around '='      no-multi-spaces\n  142:12  error  Extra space after key \"period\"        key-spacing\n  143:12  error  Extra space after key \"dampingRatio\"  key-spacing\n  162:47  error  A space is required after ','         comma-spacing\n  162:49  error  A space is required after ','         comma-spacing\nsrc/transitions/SpringTransition.js\n   30:8   error  Multiple spaces found around '='      no-multi-spaces\n   33:8   error  Multiple spaces found around '='      no-multi-spaces\n   34:8   error  Multiple spaces found around '='      no-multi-spaces\n   36:8   error  Multiple spaces found around '='      no-multi-spaces\n   38:8   error  Multiple spaces found around '='      no-multi-spaces\n   39:8   error  Multiple spaces found around '='      no-multi-spaces\n   39:36  error  Extra space after key \"anchor\"        key-spacing\n   65:8   error  Extra space after key \"period\"        key-spacing\n   77:8   error  Extra space after key \"dampingRatio\"  key-spacing\n   86:8   error  Extra space after key \"velocity\"      key-spacing\n  137:47  error  A space is required after ','         comma-spacing\n  137:49  error  A space is required after ','         comma-spacing\n  146:51  error  Multiple spaces found around '='      no-multi-spaces\n  148:51  error  Multiple spaces found around '='      no-multi-spaces\n  157:12  error  Extra space after key \"period\"        key-spacing\n  158:12  error  Extra space after key \"dampingRatio\"  key-spacing\nsrc/transitions/Transitionable.js\n   92:8   warning  Unnecessary { after 'else'                                   curly\n  101:12  warning  Unnecessary { after 'if' condition                           curly\n  101:12  warning  Unnecessary { after 'else'                                   curly\n  102:39  warning  A constructor name should not start with a lowercase letter  new-cap\nsrc/transitions/TransitionableTransform.js\n  181:8  warning  Unnecessary { after 'if' condition  curly\nsrc/transitions/TweenTransition.js\n  103:8   warning  Unnecessary { after 'else'           curly\n  124:8   warning  Unnecessary { after 'else'           curly\n  173:8   warning  Unnecessary { after 'if' condition   curly\n  240:12  warning  Unnecessary { after 'else'           curly\n  320:12  warning  Unnecessary { after 'for' condition  curly\n  336:12  warning  Unnecessary { after 'for' condition  curly\nsrc/transitions/WallTransition.js\n   31:8   error  Multiple spaces found around '='      no-multi-spaces\n   34:34  error  Extra space after key \"anchor\"        key-spacing\n   35:8   error  Multiple spaces found around '='      no-multi-spaces\n   68:8   error  Extra space after key \"period\"        key-spacing\n   80:8   error  Extra space after key \"dampingRatio\"  key-spacing\n   89:8   error  Extra space after key \"velocity\"      key-spacing\n   98:8   error  Extra space after key \"restitution\"   key-spacing\n  126:12  error  Extra space after key \"distance\"      key-spacing\n  127:12  error  Extra space after key \"normal\"        key-spacing\n  172:47  error  A space is required after ','         comma-spacing\n  172:49  error  A space is required after ','         comma-spacing\n  185:12  error  Extra space after key \"period\"        key-spacing\n  186:12  error  Extra space after key \"dampingRatio\"  key-spacing\n  191:12  error  Extra space after key \"restitution\"   key-spacing\nsrc/utilities/KeyCodes.js\n  19:8  error  Extra space after key \"0\"      key-spacing\n  20:8  error  Extra space after key \"1\"      key-spacing\n  21:8  error  Extra space after key \"2\"      key-spacing\n  22:8  error  Extra space after key \"3\"      key-spacing\n  23:8  error  Extra space after key \"4\"      key-spacing\n  24:8  error  Extra space after key \"5\"      key-spacing\n  25:8  error  Extra space after key \"6\"      key-spacing\n  26:8  error  Extra space after key \"7\"      key-spacing\n  27:8  error  Extra space after key \"8\"      key-spacing\n  28:8  error  Extra space after key \"9\"      key-spacing\n  29:8  error  Extra space after key \"a\"      key-spacing\n  30:8  error  Extra space after key \"b\"      key-spacing\n  31:8  error  Extra space after key \"c\"      key-spacing\n  32:8  error  Extra space after key \"d\"      key-spacing\n  33:8  error  Extra space after key \"e\"      key-spacing\n  34:8  error  Extra space after key \"f\"      key-spacing\n  35:8  error  Extra space after key \"g\"      key-spacing\n  36:8  error  Extra space after key \"h\"      key-spacing\n  37:8  error  Extra space after key \"i\"      key-spacing\n  38:8  error  Extra space after key \"j\"      key-spacing\n  39:8  error  Extra space after key \"k\"      key-spacing\n  40:8  error  Extra space after key \"l\"      key-spacing\n  41:8  error  Extra space after key \"m\"      key-spacing\n  42:8  error  Extra space after key \"n\"      key-spacing\n  43:8  error  Extra space after key \"o\"      key-spacing\n  44:8  error  Extra space after key \"p\"      key-spacing\n  45:8  error  Extra space after key \"q\"      key-spacing\n  46:8  error  Extra space after key \"r\"      key-spacing\n  47:8  error  Extra space after key \"s\"      key-spacing\n  48:8  error  Extra space after key \"t\"      key-spacing\n  49:8  error  Extra space after key \"u\"      key-spacing\n  50:8  error  Extra space after key \"v\"      key-spacing\n  51:8  error  Extra space after key \"w\"      key-spacing\n  52:8  error  Extra space after key \"x\"      key-spacing\n  53:8  error  Extra space after key \"y\"      key-spacing\n  54:8  error  Extra space after key \"z\"      key-spacing\n  55:8  error  Extra space after key \"A\"      key-spacing\n  56:8  error  Extra space after key \"B\"      key-spacing\n  57:8  error  Extra space after key \"C\"      key-spacing\n  58:8  error  Extra space after key \"D\"      key-spacing\n  59:8  error  Extra space after key \"E\"      key-spacing\n  60:8  error  Extra space after key \"F\"      key-spacing\n  61:8  error  Extra space after key \"G\"      key-spacing\n  62:8  error  Extra space after key \"H\"      key-spacing\n  63:8  error  Extra space after key \"I\"      key-spacing\n  64:8  error  Extra space after key \"J\"      key-spacing\n  65:8  error  Extra space after key \"K\"      key-spacing\n  66:8  error  Extra space after key \"L\"      key-spacing\n  67:8  error  Extra space after key \"M\"      key-spacing\n  68:8  error  Extra space after key \"N\"      key-spacing\n  69:8  error  Extra space after key \"O\"      key-spacing\n  70:8  error  Extra space after key \"P\"      key-spacing\n  71:8  error  Extra space after key \"Q\"      key-spacing\n  72:8  error  Extra space after key \"R\"      key-spacing\n  73:8  error  Extra space after key \"S\"      key-spacing\n  74:8  error  Extra space after key \"T\"      key-spacing\n  75:8  error  Extra space after key \"U\"      key-spacing\n  76:8  error  Extra space after key \"V\"      key-spacing\n  77:8  error  Extra space after key \"W\"      key-spacing\n  78:8  error  Extra space after key \"X\"      key-spacing\n  79:8  error  Extra space after key \"Y\"      key-spacing\n  80:8  error  Extra space after key \"Z\"      key-spacing\n  81:8  error  Extra space after key \"ENTER\"  key-spacing\nsrc/utilities/Timer.js\n   24:8   error    Multiple spaces found around '='                                      no-multi-spaces\n  113:16  warning  clear was used before it was defined                                  no-use-before-define\n  179:16  warning  Unnecessary { after 'if' condition                                    curly\n  181:23  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  195:8   error    Extra space after key \"setTimeout\"                                    key-spacing\n  196:8   error    Extra space after key \"setInterval\"                                   key-spacing\n  197:8   error    Extra space after key \"debounce\"                                      key-spacing\n  198:8   error    Extra space after key \"after\"                                         key-spacing\n  199:8   error    Extra space after key \"every\"                                         key-spacing\n  200:8   error    Extra space after key \"clear\"                                         key-spacing\nsrc/utilities/Utility.js\n   63:12  warning  Unnecessary { after 'if' condition   curly\n   95:8   warning  Unnecessary { after 'else'           curly\n   98:16  warning  Unnecessary { after 'if' condition   curly\n   98:16  warning  Unnecessary { after 'else'           curly\n   99:20  warning  Unnecessary { after 'else'           curly\n  101:24  warning  Unnecessary { after 'for' condition  curly\nsrc/views/ContextualView.js\n  12:8  warning  Transform is defined but never used  no-unused-vars\nsrc/views/Deck.js\n  42:24  warning  _getState was used before it was defined  no-use-before-define\n  84:20  warning  _getState was used before it was defined  no-use-before-define\nsrc/views/DrawerLayout.js\n   46:26  warning  _getDirectionFromSide was used before it was defined    no-use-before-define\n   47:28  warning  _getOrientationFromSide was used before it was defined  no-use-before-define\n   59:38  warning  _handleUpdate was used before it was defined            no-use-before-define\n   60:35  warning  _handleEnd was used before it was defined               no-use-before-define\n   67:8   error    Extra space after key \"LEFT\"                            key-spacing\n   68:8   error    Extra space after key \"TOP\"                             key-spacing\n   69:8   error    Extra space after key \"RIGHT\"                           key-spacing\n   70:8   error    Extra space after key \"BOTTOM\"                          key-spacing\n   75:8   error    Extra space after key \"drawerLength\"                    key-spacing\n   76:8   error    Extra space after key \"velocityThreshold\"               key-spacing\n   77:8   error    Extra space after key \"positionThreshold\"               key-spacing\n   78:8   error    Extra space after key \"transition\"                      key-spacing\n  301:16  error    Extra space after key \"transform\"                       key-spacing\nsrc/views/EdgeSwapper.js\n  30:58  warning  _transformMap was used before it was defined  no-use-before-define\n  31:59  warning  _transformMap was used before it was defined  no-use-before-define\nsrc/views/FlexibleLayout.js\n   54:8   error    Extra space after key \"ratios\"       key-spacing\n   99:8   warning  Unnecessary { after 'for' condition  curly\n  100:12  warning  Unnecessary { after 'if' condition   curly\n  211:16  error    Extra space after key \"transform\"    key-spacing\n  213:16  error    Extra space after key \"target\"       key-spacing\nsrc/views/Flipper.js\n   13:8  warning  RenderNode is defined but never used  no-unused-vars\n  131:8  warning  Unnecessary { after 'if' condition    curly\n  138:8  warning  Unnecessary { after 'if' condition    curly\nsrc/views/GridLayout.js\n   12:8   warning  RenderNode is defined but never used             no-unused-vars\n   66:16  warning  Unnecessary { after 'if' condition               curly\n   66:16  warning  Unnecessary { after 'else'                       curly\n   67:20  warning  _createModifier was used before it was defined   no-use-before-define\n   70:20  warning  _animateModifier was used before it was defined  no-use-before-define\n   85:70  warning  _animateModifier was used before it was defined  no-use-before-define\n  182:8   warning  Unnecessary { after 'if' condition               curly\n  196:12  warning  Unnecessary { after 'if' condition               curly\nsrc/views/Lightbox.js\n   95:8   warning  Unnecessary { after 'if' condition   curly\n  104:8   warning  Unnecessary { after 'if' condition   curly\n  105:12  warning  Unnecessary { after 'else'           curly\n  182:8   warning  Unnecessary { after 'for' condition  curly\nsrc/views/RenderController.js\n  179:8   warning  Unnecessary { after 'if' condition            curly\n  188:8   warning  Unnecessary { after 'if' condition            curly\n  191:16  warning  Unnecessary { after 'if' condition            curly\n  272:20  error    index is already declared in the upper scope  no-shadow\n  295:8   warning  Unnecessary { after 'for' condition           curly\nsrc/views/ScrollContainer.js\n  14:8   warning  Utility is defined but never used  no-unused-vars\n  53:25  error    Extra space after key \"overflow\"   key-spacing\nsrc/views/Scroller.js\n   44:32  warning  _innerRender was used before it was defined                           no-use-before-define\n   81:8   warning  Unnecessary { after 'if' condition                                    curly\n   81:8   warning  Unnecessary { after 'else'                                            curly\n   83:15  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  104:8   warning  Unnecessary { after 'if' condition                                    curly\n  266:8   warning  Unnecessary { after 'if' condition                                    curly\n  274:13  warning  Unnecessary { after 'if' condition                                    curly\n  274:13  warning  Unnecessary { after 'else'                                            curly\nsrc/views/Scrollview.js\n   25:26  error    Extra space after key \"scroll\"                                        key-spacing\n   25:47  error    Extra space after key \"touch\"                                         key-spacing\n   28:8   warning  TOLERANCE is defined but never used                                   no-unused-vars\n   39:15  error    Extra space before value for key \"TOP\"                                key-spacing\n   40:16  error    Extra space before value for key \"NONE\"                               key-spacing\n   88:16  error    Extra space after key \"direction\"                                     key-spacing\n   89:16  error    Extra space after key \"scale\"                                         key-spacing\n  142:8   warning  _bindEvents was used before it was defined                            no-use-before-define\n  171:8   warning  _detachAgents was used before it was defined                          no-use-before-define\n  182:8   warning  Unnecessary { after 'if' condition                                    curly\n  183:12  warning  Unnecessary { after 'if' condition                                    curly\n  185:20  warning  _handleEnd was used before it was defined                             no-use-before-define\n  189:17  warning  Unnecessary { after 'if' condition                                    curly\n  211:53  warning  _normalizeState was used before it was defined                        no-use-before-define\n  217:12  warning  _detachAgents was used before it was defined                          no-use-before-define\n  218:50  warning  _setSpring was used before it was defined                             no-use-before-define\n  219:12  warning  _attachAgents was used before it was defined                          no-use-before-define\n  243:12  warning  _handleEdge was used before it was defined                            no-use-before-define\n  254:57  warning  _normalizeState was used before it was defined                        no-use-before-define\n  284:8   warning  Unnecessary { after 'if' condition                                    curly\n  285:12  warning  _setSpring was used before it was defined                             no-use-before-define\n  308:12  warning  positionPrev is defined but never used                                no-unused-vars\n  315:8   warning  Unnecessary { after 'if' condition                                    curly\n  318:13  warning  Unnecessary { after 'if' condition                                    curly\n  321:13  warning  _setSpring was used before it was defined                             no-use-before-define\n  380:20  warning  _shiftOrigin was used before it was defined                           no-use-before-define\n  382:8   warning  Unnecessary { after 'if' condition                                    curly\n  383:12  warning  Unnecessary { after 'else'                                            curly\n  383:12  warning  Unnecessary { after 'if' condition                                    curly\n  388:19  warning  Closing curly brace appears on the same line as the subsequent block  brace-style\n  403:8   warning  Unnecessary { after 'if' condition                                    curly\n  406:13  warning  Unnecessary { after 'if' condition                                    curly\n  476:8   warning  Unnecessary { after 'if' condition                                    curly\n  481:8   warning  Unnecessary { after 'if' condition                                    curly\n  578:8   warning  Unnecessary { after 'if' condition                                    curly\n  583:8   warning  Unnecessary { after 'if' condition                                    curly\n  601:8   warning  Unnecessary { after 'if' condition                                    curly\n  609:8   warning  Unnecessary { after 'if' condition                                    curly\nsrc/views/SequentialLayout.js\n  108:12  error  Multiple spaces found around '='  no-multi-spaces\n  110:12  error  Multiple spaces found around '='  no-multi-spaces\n  111:12  error  Multiple spaces found around '='  no-multi-spaces\n  112:12  error  Multiple spaces found around '='  no-multi-spaces\n  113:12  error  Multiple spaces found around '='  no-multi-spaces\n  114:12  error  Multiple spaces found around '='  no-multi-spaces\n  115:12  error  Multiple spaces found around '='  no-multi-spaces\nsrc/widgets/NavigationBar.js\n   92:17  warning  Unnecessary { after 'if' condition  curly\n   95:17  warning  Unnecessary { after 'if' condition  curly\n  103:17  warning  Unnecessary { after 'if' condition  curly\n  106:17  warning  Unnecessary { after 'if' condition  curly\n  109:17  warning  Unnecessary { after 'if' condition  curly\nsrc/widgets/Slider.js\n   23:8   error    Extra space after key \"mouse\"                key-spacing\n   24:8   error    Extra space after key \"touch\"                key-spacing\n   35:12  error    Extra space after key \"classes\"              key-spacing\n   41:12  error    Extra space after key \"properties\"           key-spacing\n   41:26  error    Extra space after key \"pointerEvents\"        key-spacing\n   55:16  error    Extra space after key \"scale\"                key-spacing\n   56:16  error    Extra space after key \"direction\"            key-spacing\n   68:8   warning  _updateLabel was used before it was defined  no-use-before-define\n  109:8   warning  Unnecessary { after 'if' condition           curly\nsrc/widgets/TabBar.js\n   37:42  warning  _updateOptions was used before it was defined                no-use-before-define\n   64:8   warning  Unnecessary { after 'if' condition                           curly\n   65:48  warning  _resolveGridDimensions was used before it was defined        no-use-before-define\n   67:13  warning  Unnecessary { after 'if' condition                           curly\n   72:13  warning  Unnecessary { after 'if' condition                           curly\n  111:21  warning  A constructor name should not start with a lowercase letter  new-cap\n  138:8   warning  Unnecessary { after 'if' condition                           curly\n  141:13  warning  Unnecessary { after 'if' condition                           curly\n  145:8   warning  Unnecessary { after 'for' condition                          curly\nsrc/widgets/ToggleButton.js\n  53:12  error  Extra space after key \"overlap\"  key-spaci\n\n\n. ",
    "mmbfreitas": "Hey guys someone have any idea of when this bug will be fixed??\n. @michaelobriena it's the same of #208 like @pkiers said, do you have any idea of when it will be merged?\n. ",
    "bart-jansen": "The difference between a mouse-drag and mouse-click is that a mousemove event is triggered during a drag, and during a click there isn't. \nThus, adding the following events should distinguish between the two and result in your expected behavior:\n```\nvar clicked;\nsurface.on('mousedown', function() {\n    clicked = true;\n});\nsurface.on('mousemove', function() {\n    clicked = false;\n});\nsurface.on('mouseup', function () {\n    if(clicked) {\n        //clicked\n    }\n    else {\n        //dragged\n    }\n});\n```\n. ",
    "arkadyp": "@TheAlphaNerd This change looks good.\n. I tested this change by adding surfaces and modifiers to a Famo.us Context as well as to a GridView and everything worked as expected.\n. @michaelobriena\n. Fixed the linting issues, my bad for forgetting to run 'npm run test' before submitting the pull request.\nI think that replacing ContextualView would be a good idea.\n. I just updated this pull request to update the documentation inside of ContextualView to mark it as deprecated.\n@michaelobriena @TheAlphaNerd In putting together this pull request, I noticed that some of our Views do not have the proper MPL license comment (e.g., Scroller.js, Lightbox.js) and it seems like all of the comments need to be updated so that they reflect the new year as they now all say \"@copyright Famous Industries, Inc. 2014\".\n. Thanks @alexanderGugel \n. ",
    "mcbain": "+1 what about the original code ?\ndocument.createElement('div').style.webkitTransform !== undefined;\n. When using the commit() method you get access to the final transform matrix of your parent, size, etc.\nExample: https://github.com/Famous/famous/blob/master/src/views/GridLayout.js#L184\n. +1\n. ",
    "austentalbot": "Just filled out the CLA.\n. ",
    "dapetcu21": "This breaks FlexibleLayout, since FlexibleLayout calls getSize() on its surfaces before their ._size gets to be set the first time and is returned null. I propose:\njavascript\nSurface.prototype.getSize = function getSize() {\n    return this._size || this.size;\n};\n. ",
    "alex-mcleod": "I've actually just come up against this issue myself and have figured out a temporary way to get things working. If you have the latest master installed (with the appMode option) and have set appMode to false, then you need to also change the CSS file the comes with it (in dist/famous.css). The styling on the html and body elements which is included in that file prevents native scrolling. To fix the issue, I combined the CSS for the html and body elements into a famous-root class which I then applied to the div I'm using as the base for my famous context. Native scrolling is now working, as is the famous Scrollview. That is, our backbone.js app now has famous views and regular backbone views working seamlessly together. \nIt is also worth mentioning that the Scrollview in the current master performs even worse than 0.2.2 Scrollview, so I ended up just using 0.2.2 and copying the Engine.js file from the current master and my new CSS file into 0.2.2 and using that. Bit of a hack but everything works well for now. \n. Ok, no worries, I've pushed that change up.\n. ",
    "pencilcheck": "Yes, please I would like to have a snippet of the workaround.\n. app mode works, but angular integration doesn't have the means to set the options, so I made a fork to fix that. Submitting a pull request, please support \nhttps://github.com/Famous/famous-angular/pull/278\n. Thanks. I was just making sure this is noticed and a fix is on the way. Now I can't wait for the new website!\n. No I haven't, but I am using famous/angular integration.\nfa-app doesn't seems to allow passing options when initializing the context though.\nI don't have direct access to the context.\n. ok thanks, so app-mode will stops it from attaching the event listener?\n--edit--\nnvm I see\n. ",
    "jd-carroll": "@dcsan Engine.createContext() takes exactly one argument and that is html node to use as the top of the context: Engine.js\nIf a node is not provided, the engine will use the only node guaranteed to exist, the body.\n. Is this what you are looking for #600 ?\n. IF anything is done, we should bower'ify the global-seed project and move the current contents into an examples directory.  As for why not the core Famo.us dist, please refer to the response from @TheAlphaNerd.\n. I'll throw it up into my git tonight and then you can file a pull request. Do you want me to create a separate branch for it?\nJD\nSent from my iPhone\n\nOn Nov 20, 2014, at 1:52 PM, michaelobriena notifications@github.com wrote:\nThanks for this @jd-carroll! Do you want to file it as a pull request or have us just put it in?\n\u2014\nReply to this email directly or view it on GitHub.\n. @michaelobriena I've forked the famous repository and created a new branch (Bug_GenericSync) with the change.\n\nJD\n. Definitely couldn't have said it better myself, I was actually just searching the issues to write something similar.  What I would add:\nThe Scroller does not consistently publish onEdge event, nor does the Scroller set the initial onEdge state correctly. What I mean by that is its not possible to determine which edge is on when you are in the middle of scroll.  What I would rather see is on edge events only for the leading edge, so in the case of Direction.X, onEdge events would only be published when the left edge is \"onEdge\".  Then have a separate \"lastEdge\" event when you arrive at the end.\nWhen sequencing a Scrollview from an array of views, if the views have more than one child surface managing size becomes very awkward for pagination.\nRenderNode.prototype.getSize = function getSize() {\n        var result = null;\n        var target = this.get();\n        if (target && target.getSize) result = target.getSize();\n        if (!result && this._child && this._child.getSize) result = this._child.getSize();\n        return result;\n    };\nThe above snippet will always return null if there is more than on child, because at that point the child is an array and not a simple object.  And since there is no \"setSize\" on the View prototype, it is required that you \"override\" the getView on any View that is used in a Scrollview.\n(Core java guy just learning js, so excuse the \"override\").\nI'm not sure what the answer is for this, I think what I will try next is sequencing from a StateModifier instead of the View directly; though this seems really backwards. (thoughts?)\nJD\n. @StephanBijzitter  I am not able to reproduce the screenshot you have listed, the \"+\" doesn't add anything to the page.\nCan you give a little more context?  Are you using a lightbox at all (doesn't look like you are) ?\nJD\nEdit: Looks like the YouTube call is failing\n{\n \"error\": {\n...\n    \"message\": \"Access Not Configured. The API is not enabled for your project, ...\n...\n}\n. @StephanBijzitter I found a solution, but its not an ideal solution.  I was able to get all of the content to appear by removing:\n.skelware-paper {\n/* background-color: #fff; */\n}\nIf you either remove the CSS property or have it set to any color other than #fff or #ffffff all of your content will display as expected.\nI have no idea why and would be very interested in finding out, but that's what I was able to come up with.\n. -1 : If desired, \"undefined undefined undefined\" should be a valid state\nI think it is important to draw a distinction between the '0' state and \"no\" state.  That said, we should also ensure that it is never possible to get to a null/undefined state without explicitly setting such a value.\n. You're right, having a null dimension wouldn't make much sense. The case I\nwas thinking of was composing multiple input velocities that may or may not\nreceive inputs from all (x, y, z) dimensions. The simple example being a\nperpetual scroll like a stock ticker where you are able to swipe to speed\nup the scroll.\nBut in this example it would be better to remove the perpetual force and\napply that through a Transitionable or something similar.\nOn Friday, December 19, 2014, michaelobriena notifications@github.com\nwrote:\n\n@alexanderGugel https://github.com/alexanderGugel I agree with you on\nthis case. I don't see the reason for undefined as part of the API. It\nmakes the vector entirely useless.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/535#issuecomment-67718591.\n. I'm not exactly sure under what circumstance you would want to remove the frame rate cap..\n\nBut in any case, I don't think adding more API is the answer.  If we want to support removing the frame rate cap, we should change the current setFPSCap() to accept undefined.\n. IMO, we should be careful about what we are adding directly to the window (i.e. avoid doing it at all).  In environments where Famous must coexist, this type of reaching out of the context becomes a real problem.  \nMy suggestion would be add an optional parameter to the enable/disable that is the \"container\" for the FastClick.  If a container is provided, then that container is used, otherwise it defaults to window.\nFor more on this type of reaching: #616\n. I would disagree and say that it is very intuitive, and this is exactly the desired behavior.  IMO, I would avoid using the ModifierChain unless you have a very specific purpose you are using it for.\nThe code:\nvar modifierChain = new ModifierChain();\nmodifierChain.addModifier(modifierOne);\nmodifierChain.addModifier(modifierTwo);\nmainContext.add(modifierChain).add(surface);\nIs equivalent to: [EDIT]\n~~mainContext~~\n    ~~.add(modifierOne)~~\n    ~~.add(modifierTwo)~~\n    ~~.add(surface);~~\nmainContext\n    .add(modifierTwo)\n    .add(modifierOne)\n    .add(surface);\nThe later is a much more descriptive representation of the graph leading to the surface.\n. Actually, that is exactly correct.. The modifiers are traversed down to the leaf element (surface) but they are only applied on the way back out.\nSo yes, the correct equivalent would be:\nmainContext\n    .add(modifierTwo)\n    .add(modifierOne)\n    .add(surface);\n. I'm not overly familiar with tabIndex, but maybe this is something best left to an option set on the individual surface.  Something like:\nif (this.options.tabIndex !== undefined) {\n  target.tabIndex = this.options.tabIndex;\n}\n. @michaelobriena Just to clarify, the workaround is to have any DOM element (surface) in a z-plane other than 0 (regardless of any properties).\n. I am using Famous within an Angular app that cannot be fa-app'd.  We are essentially using Famous only for the PhysicsEngine and did not want to touch any of our other code.  The PhysicsEngine is used to control scrolling on a large Pivot Table (very very large <table>).\nThe problem is that when you navigate away from the table, the Engine and all associated resources still exist.  So when you go back to the table I will have to clean-up/destroy all of the existing Entities/Surfaces before create the new.  Right now I walk the context tree from the root, this would just be a quicker/easier way.\n. This was never meant to be merged, merely a prop for #604.\n. Maybe I should learn to npm run-script lint locally... \n. So there are a couple of assumptions that I should make clear...\nThe optimization assumes:\n- Engine.nextTickQueue is empty 98% of the time (empty for every 59/60 frames on average)\n- Engine.deferQueue is empty 98% of the time (empty for every 59/60 frame on average)\n- No other resources (PhysicsEngine etc.) has direct access to the queues\n- The queues are only read from a single location (method) and that access (method invocation) constitutes a unique frame\nShould any of these assumptions break down or if they are in general invalid then we should rethink the optimization (specifically the destruction of the queue).\n. @speigg I'm not familiar with basketjs at all, is it possible to put together a codepen that demonstrates this issue?\n. Is there is a related Chromium bug?\nlabel: vendor bug\n. You are almost better off taking a look at stackoverflow.  Not that I am trying to drive traffic away from famo.us, but some of the answers there are really pretty extensive.\nBut, to respond to your problem, which site specifically are you having problems with?  (Or what documentation?)\n. Could you create a PR example for one such hash link?\n. So I'm a little confused by this... Why would you ever want to prevent a Surface from being recalled?  It shouldn't matter if the surface is dirty or not, it is being recalled.  \nCan you please provide a little more context behind this.  I think placing any conditions on the recall will introduce more problems than it could potentially solve.  (But maybe I'm wrong)\n. I'm with @michaelobriena, please see my comment: https://github.com/Famous/famous/issues/673#issuecomment-89352486\n. Are we certain that the surface will be recalled successfully after\npreventing the initial recall?\nOn Wed, Apr 8, 2015 at 2:37 AM, Myles Borins notifications@github.com\nwrote:\n\n@michaelobriena https://github.com/michaelobriena which milestone?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/674#issuecomment-90820521.\n. @browles Could you take a look at this and share your thoughts.  Do you see any disadvantage of storing the particle deltas?\n. Can you please upload the global build file you generated. The global build should generate without any issues if you remove FastClick.js and run:\n\nnpm run-script build-global\nThis works for me. \n. This closure maintains a hard reference to the original container.\n. I am unsettled with passing the appMode flag as a parameter, but I didn't want to create a circular dependency between Engine and Context so...\n. ",
    "lugotm": "@dcsan I was able to mix famous with a web app. The only problem I have is destroying/removing Famous after clearing/removing the:\n<div id=\"famous-app\" style=\"overflow:hidden;\">\ntag from the DOM.\n. ",
    "hchoong": "Is there any suggestion to replace the itemSpacing option in SequentialLayout?\nThis option seems to be useful on laying surfaces with margin. \n. Duplicate on #269 \n. I am hitting an issue on the Lightbox's rendering with usual different curves other than linear. It only happens on small screen. The entire screen is shift to the left, but after a click on the screen, the rendering backs to normal as usual.\nthis.renderController = new Lightbox({\n            inOpacity: 1,\n            outOpacity: 0,\n            inTransition: { duration: 500, curve: 'easeIn' },\n            outTransition: { duration: 500, curve: 'easeIn' },\n            overlap: false\n        });\n        this.animation = {\n            slideLeft: {\n                inTransform: Transform.translate(window.innerWidth,0,0),\n                outTransform: Transform.translate(window.innerWidth*-1,0,0)\n            },\n            slideRight: {\n                inTransform: Transform.translate(window.innerWidth*-1,0,0),\n                outTransform: Transform.translate(window.innerWidth,0,0)\n            }\n        };\nthis.renderController.setOptions(this.animation.slideLeft);\n. at the point on merging the submodules to one main git module, the core/famous.css is modified and can't find the history changes. On the v0.3.0-alpha version, the css for html and body is removed and merge to the .famous-root\nv0.2.2\n```\nhtml {\n    width: 100%;\n    height: 100%;\n    margin: 0px;\n    padding: 0px;\n    overflow: hidden;\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n}\nbody {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    margin: 0px;\n    padding: 0px;\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    -webkit-font-smoothing: antialiased;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-perspective: 0;\n    perspective: none;\n    overflow: hidden;\n}\n```\nv0.3.0-alpha\n.famous-root {\n    width: 100%;\n    height: 100%;\n    margin: 0px;\n    padding: 0px;\n    overflow: hidden;\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n}\nand in the core/Engine.js line 132-133\ndocument.body.classList.add('famous-root');\n        document.documentElement.classList.add('famous-root');\nThe following setting on meta tag to prevent input focus zooming doesn't help to solve this issue on all mobile browser:\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1\">\nIs there a reason behind these changes? Seems like the browser on mobile device will override the body css on input focus when no position type is set. The position:absolute; on body tag seems to resolve the input focus out of mobile device's viewport.\n. The hack for Chrome doesn't seem to be work for chrome v44 anymore.\nAfter I changed all the z coordinate value to whole number instead of decimal, the render on chrome browser seems to be correct with respect to the z coordinate.\n. ",
    "RamIdeas": "Having watched numerous demo day videos, I fear this has been labelled \"low priority\" because you all use macbooks.\nAnyone with a click wheel that fires events in larger steps will find this behaviour extremely irritating. Especially when you get to an edge and the bounce animation still kicks in. So you get this weird discrete, but sometimes continuous, scrolling experience.\n. ",
    "JrSchild": "Any updates on the status of this issue?\n. ",
    "janober": "Thanks for checking! What OS are you using? Maybe mainly the combination ubuntu/chrome and not chrome itself is then the issue.\n. hi,\nthanks for looking into it! Came along that when I was prototyping a node-network. At that point I had simply a canvas per node which I could simply wipe clean each time the connected node moved (needed one each because I did just want to repaint the edges that were connected to the node that got moved, else it would have been incredible slow). Also did they all have to be exactly on top of each other because a node can get moved anywhere.\nThat all worked fine till I started to add dynamically more nodes and so also edges. At some point, for each one I added, an earlier one disappeared. Which I thought was quite strange.\nThe numbers with the line breaks was a very simple way to show what is exactly is happening to me.\nDo not use html5 canvases any more, have now simple surfaces styled with css that scale and rotate accordingly. Which is much faster and easer but does obviosly not allow any more nice bezier curves. But should do it for me.\nSo hope that explains that. The issue can be closed, like I said I do not have any problems with that anymore. Just wanted to log it in the case somebody else has the same problem and to give back at least a little bit ;-)\nblue skies\n. ",
    "aintnorest": "Try deleting the mouse sync in the draggable. Not that that is a good solution but if it works with just the touch sync I'll explain why I think it's doing it and how you might fix it.\n. You can use a cordova plugin to stop the screen from \"auto scrolling\"  and just scroll the view manually. This stops the screen from being pushed up and sometimes not coming back down.\nhttps://github.com/driftyco/ionic-plugins-keyboard\nI haven't found a solution to stop the screen from being scrolled without the plugin. I also haven't dug into it to find out if their solution is javascript based or a ios webview hook.\n. Yea for me iconic plugin did the job. The down side was that I needed to manually scroll the input's into view / out from underneath the scrollview.\nWill gave me this to make the scrollview scroll:\nScrollview.prototype.scrollTo = function(position, transition) {\n        var transition = new Transitionable(0);\n        this._scroller.positionFrom(transition);\n        transition.set(position, transition, function() {\n            this.setPosition(transition.get());\n            this._scroller.positionFrom(this.getPosition.bind(this))\n        }.bind(this));\n    };\nIt only works to scroll down but if your trying to scroll up it jitters and if your on the bottom it bounces back to the bottom after the transition. I built my own scrollview with a transitionable and a touch sync its not a work around i like but it works well enough. I've been lucky, so far I've only built ios / android apps which make using iconic plugin an okay solution.\nI don't think it's a resize issue i think it's a screen scroll issue. \n. Where are those changes? I loved to use them. That projects days from being done but I'd go rip out my fixes if theres better.\n. I completely ignored it because I had guessed it was wrong since I had this problem when I was using the old version. It's one of the reason I upgraded hoping it would fix the problem. I'll try it again but with not much hope.\n. I've experienced the double click  in 7 and 8 but don't see it in the fiddle.\nI can assume from the angular famous code those developers see it as well. Heres a clip from their input directive pay attention to the comment on the line second from the bottom:\nangular.module('famous.angular')\n.config(['$provide', function  ($provide) {\n$provide.decorator('ngClickDirective', ['$delegate', '$famousDecorator', '$parse', '$rootElement', '$famous', '$timeout', function ($delegate, $famousDecorator, $parse, $rootElement, $famous, $timeout) {\n    var directive = $delegate[0];\n```\nvar compile = directive.compile;\nvar TAP_DURATION = 750; // Shorter than 750ms is a tap, longer is a taphold or drag.\nvar MOVE_TOLERANCE = 12; // 12px seems to work in most mobile browsers.\nvar PREVENT_DURATION = 2500; // 2.5 seconds maximum from preventGhostClick call to click\nvar CLICKBUSTER_THRESHOLD = 25; // 25 pixels in any dimension is the limit for busting clicks.\n```\nThere are work arounds but not good ones. My first attempt I did what they did and just put logic to stop clicks from happening too close together. I think it has something to do with event propagation. \n. http://jsfiddle.net/cjalatorre/527kwv8f/2/\nIs a fiddle but it doesn't work as well as an empty project with just famous and the code. That way your not seeing the fiddle's as well.\nIn chrome in an empty project I've noticed specifically that while the dom elements get reused when a surface gets cleaned up. The Surface object itself , sticks around. Bouncing between show and hide you can see the Surface count going up and not getting collected.\nI don't think this is the only problem that's causing the stack to increase noticeably  in larger projects.\n. @alexanderGugel When you unregister the Surface and retry does your heap size no longer increase after render controller transitions?\n. @alexanderGugel Tried adding Entity.unregister(this.id); under Surface.prototype.cleanup at the end of the function Found two problem first if you switch back and forth fast enough it doesn't work. Not sure why but the stacks count of surfaces increases. In a similar vain if you spam the switch fast enough it errors out: var commitResult = childNode.commit(commitParams); that line with: cannot read property 'commit' of null inside RenderNode _applyCommit. I might have just put it in the wrong place. \n. Chrome emulator is annoying it will fire both touch and mouse events when using it's touch emulation. At first I tried in conjunction with a touch library I was working with:\nfunction typeControl(callback){\n        var timer = 0;\n        var timerON = false;\n        var typeOFdata;\n        var Callback = callback;\n        //\n        var timerCheck = function(tod){\n            if(timerON){\n                var time = timer - Date.now();\n                if(time > 2500) typeOFdata = tod;\n            } else {\n                timerON = true;\n                typeOFdata = tod\n            }\n            timer = Date.now();\n        };\n        var passThrough = function(type,data){\n            timerCheck(type);\n            if(timerON && typeOFdata === type) Callback(data);\n        };\n        var typeChecker = function(data){\n            ('touch' in data)? passThrough('touch',data) : passThrough('mouse',data);\n        };\n        //\n        return function(data){\n            typeChecker(data);\n        };\nIt basically just checks whats been fired recently and only lets that type through. I didn't like that and was also building an app with a lot of tables that needed click events. So I created a delegation library that made it so that I didn't need to worry about adding all those event listeners or removing them. I listen for:\ndocument.addEventListener('touchstart',eventSystem('pointerdown'));\n        document.addEventListener('mousedown',eventSystem('pointerdown'));\n        document.addEventListener('touchend',eventSystem('pointerup'));\n        document.addEventListener('mouseup',eventSystem('pointerup'));\n        document.addEventListener('touchcancel',eventSystem('pointercancel'));\nIf it finds the event on the element or any of it's parents it passes it the event then calls:\nevent.stopPropagation();\n     event.preventDefault();\nSeems to stop a second event of the other type.\n. ",
    "okhobb": "blur() and focus() are broken for the same reason. Surface defines _currentTarget but subclasses refer to _currTarget.\n. ",
    "zoomclub": "Well, the June 23rd \"Coming Soon\" Newsletter from Famo.us said this:\n\"We are rebuilding the classic periodic table demo for the current code base and will be open sourcing it soon.\"\nIt is now September 3rd, whats up!?\n. ",
    "fabiowitt": "Any updates?\n. ",
    "stephen-puiszis": "+1 Any updates?\n. ",
    "Qvatra": "also would like to see the source. thx\n. so what is the solution? As you can see in my code I didn't set any overflow: hidden... \nBTW this code shows black screen in IE which is the second bug\n. so it is browser related issue and not famo.us? Is it possible to fix this issue by the following algorithm?:\n1. translate container closer to the front (so the projection would be bigger and text would be blurred)\n2. at the same time scale the container (make it smaller) so projection size will remain the same is initial (so text still will be not blurred). This will result in actual transition without blurring but also without changing the size of projection.\n3. next step is to scale the container (make it bigger) and at the same time make bigger the font size inside this container using transitionables.\nIn theory if you will do this transforms at the same time it should mimic z-transition without blurred text. Am I right?\nIs that a solution? Would it be possible to implement this 'workaround' in famo.us so people would be able to use z-transitions of surfaces with text.\n. I have tried to implement my idea about workaround and here is the result:\nhttps://ozinchenko.wordpress.com/2015/02/04/how-to-avoid-blurring-of-the-text-in-famo-us-during-transition-in-z-direction/ \nThe only problem is that it seems like concurrent transitions are async for some reason so we have some trimming... But the font is not blurred anymore.\nWhy I have the trimming effect here?\n. would wait for a bugfix. please reply/close this post after this bug would be fixed.\n. on Crome....\nIE and firefox give also wrong results: image not in a center even before i start modifying.. \n. well this could be a workaround only if you already know your img size. In my case imgs are loaded dynamically so your align: [0.88, 0.5]  would be every time different. Try other images that are commented.\nHowever I think your code could be modified to using align: [0.5, 0.88] if imgW>imgH. I will try\nUPDATE: here codepen version: http://codepen.io/Qvatra/pen/LEeejK?editors=001\nIt can not be used as general workaround as it also dependent on container proportion in this case it's 200 / 200 = 1 \n. ",
    "pdhoward": "same here\n. ",
    "Joel-Kornbluh": "+1 For open sourcing the periodic table demo.\n. ",
    "benag": "+1\n. ",
    "ricardogarcia": "+1\n. ",
    "miquael": "+11:11\nyes, please.  i'd eat plutonium for an open demo ...\n. Hey there Farhad,\nThanks for the tip.  We are using the The7 theme, and are working from a child of that theme.  \nWhat JS dependencies go into that child theme, and how?  Happen to have an example?\n. ",
    "felixcriv": "Hello Harry,\nIt seems it is a violation of the terms of service but you can always use the public feed on SlideData.js instead.\nI could it make it to work with:\n``` javascript\nvar SlideData = {\n        picasaUrl: 'https://picasaweb.google.com/data/feed/api/all',\n        queryParams: '?kind=photo&q=puppy&max-results=5&imgmax=720&alt=json',\n        defaultImage: 'https://lh4.googleusercontent.com/-HbYp2q1BZfQ/U3LXxmWoy7I/AAAAAAAAAJk/VqI5bGooDaA/s1178-no/1.jpg'\n    };\nSlideData.getUrl = function() {\n    return SlideData.picasaUrl + SlideData.queryParams;\n};\n\n```\nNote that you can change the params query as you want.\n. ",
    "harryhurry": "Hi Felix,\nit works, great.\nThanks (both for the solution and the quick response)!\nHave fun,\nHarry\n. ",
    "adamgins": "BTW, I hit this too when trying to run the tutorial. So it's broken if you try and follow the instructions here http://famo.us/university/famous-101/starter-kit/1/ \n@felixcriv  thanks for the fix\n. ",
    "heldrida": "I had the same issue! Sent an email but since it's been awhile ago, tried to figure out if someone else reported and found about this! Can you guys change this to use Lorem Images Kittens or Lorem Samuel Jackson images or something ? Really interested in learning famo.us, so if you guys could keep things simple would help on the learning process. For example, I'm an ubuntu user and picasaweb redirects me to google photos and also displays Picasa is not currently available for your operating system. So, picasa is not a good idea at all, sorry! Thanks for sharing famo.us!\n. ",
    "nickw": "+1\nFor instance, the scrolling on this post is hilariously flawed: http://famous-views.meteor.com/examples/events (it scrolls about twice as fast it should, the bouncy scroll on OS X becomes unpredictable, it occasionally gets stuck at the bottom, etc). This scrolling issue is the only thing keeping me from seriously considering Famous.\nOther frameworks in the past have tried to replicate the OS/browser's native scrolling without success (Cappuccino, I'm looking at you). IMO it's always best to leverage native scrolling rather than try to replace it.\n. ",
    "Prinzhorn": "Thanks for answering. Is this your opinion or are you talking for the whole famous team and the direction it's taking? If you want to change the world that's fine, but that makes famous unsuitable for my projects.\n\nbut using a mouse makes it scroll in steps [...] who should implement this? [...] perhaps the browser manufacturers\n\nI'm using Firefox everyday. Firefox does not jump in steps, it does some really nice smooth scrolling. I'm used to it. If someone uses Chrome all day, she's used to scrolling in steps. The number one priority in UX is to not mess with things users know, but that's what you do. If I use famous in Firefox it does some weird smooth scrolling which is terrible compared to what Firefox does natively. And it's also bouncing when I reach the edge...since I don't use a Mac, it completely surprised and puzzled me why on earth it would do that. Especially since the mouse is not a device which gives the scrolling content velocity, but simply translates it. Where does the energy come from to let it bounce? It just feels like it's bugging around until I (as a software engineer) realized that it must be some failed attempt at mimicking native behavior of a device and OS I'm not using. For \"normal people\" (read: the users) all that's left is \"it's bugging around\".\nIf you or famous are on a personal mission to destroy the mouse in which you find \"a slight disgust in\" then that's fine, but this means famous is not a software to use in production, but more like a (highly funded) research project and should be labeled as such.\nBut please don't get me wrong. I think it's important what you're doing and we need people who push the boundaries and try to think outside of the box.\n. > It should just create an entirely new behaviour and allow the framework to use either that, or default scrolling.\nSo, do you say what I describe in my initial post is something that could be enabled behind an option/flag (which would give us the best of both worlds, with more complexity as a trade-off)?  Or what do you mean by that?\n. > We are exploring native scrollview as well. Check out https://github.com/redwoodfavorite/famous/tree/native-scrollview.\nThe fact that you're exploring this basically answers my questions and makes this thread obsolete.\n\nIs there a specific issue we would like to address in this thread?\n\nIs there a thread dedicated to the above exploration-branch?\n. ",
    "bguiz": "any updates on this?\n. @ftripier That might fit some needs, but not all. In any case, since famo.us is relatively low-level, I think it would be best to maximise flexibility offered.\nThe use case here is that when the toggle button is clicked/ tapped by the user, its event should be emitted as per normal. However, when some Javascript programmatically wants to toggle the button on/ off by calling the select() and deselect() methods, you want the event to be suppressed for just this one call. Hence the need to do it on a per call basis.\n. @StephanBijzitter I have to disagree. \n- In the simple use case where you just wish to suppress the event once, you would now require three statements. In addition, you will need to query the state of the suppressEvent flag\n-  Also, if an UI fires an event in between toggleButton.setOptions({ suppressEvent: true}); and toggleButton.setOptions({ suppressEvent: false});, you have a race condition to deal with.\nSetting a suppressEvent flag on a per call basis is the easier to understand, and the cannot result in unintended side effects.\n. Gave it a shot anyway, on a works-for-me premise. Here's the patch: https://github.com/Famous/famous/pull/290\n. any word on this?\n. @TheAlphaNerd Hope that you squeeze it into the sprint.., Looking forward to the new release!\n. :ok_hand:\n. Copying the commit comment below for convenience: \nAs suggested by @wgester #290 (comment)\nHowever, instead of a short cut using return null; I think we should set this._nextNode and this._previousNode respectively, as these cached properties are accessed elsewhere. \nThe performance difference should be negligible, since a minifier can optimise that into one statement, e.g.: if(!len)return this._nextNode=null; should it seem the optimisation necessary.\nReturning null without setting this._nextNode and this._previousNode to null could lead to potential memory leaks, such as when sequenceFrom() is called with a non-empty array, and at least one render is performed, and subsequently, sequenceFrom() is called with an empty array, and at least one render is performed.\n... come to think of it, someone should write a test case for that - this is just postulation on my part, have not actually tested it.\n. > @bguiz Will you have time to get to this today? We are trying to release\n\ntomorrow and if you can't get to this we can pull in what you have and then\ncommit Will's fix in after\n\nNo problem, will do shortly\n. Could be related to https://github.com/Famous/views/issues/61 but not able to ascertain.\n. ",
    "matthewtoast": "Docs update in https://github.com/Famous/famous/pull/426\n. @TheAlphaNerd, @netaisllc -- my picks, item by item, would be:\n- \"either\" - OK.\n- \"can be\" - Tough ... Let's skip this for now. While I agree with @netaisllc's point that stronger language is better for learners, this highlights an endemic issue that we (Famo.us) need to work out: the question of accuracy vs. initial comprehension, and being clear about the audience for each piece of copy. Glad the point was raised, in any case.\n- newline - OK.\n- newline - OK.\n- \"and so on\" - OK.\n- \"that occur\" - OK to merge @netaisllc's second proposal, which is clearest.\n- \"facet\" - I would just sidestep this debate with: \"What if we want to align it by its center?\"\n\nAs an aside, thanks to @netaisllc for this. I would love to start accepting more copy edits like these, but I'm wondering whether a pull-request is the best venue. It feels \"heavy\" for what should be a quick process, and it's not very well-suited to ping-pong. Open to suggestions.\n. cc @arayi \n. For the issue @D-Ogi reported:\nLooks like the breaker is a couple of extra characters that have found their way into the famous-angular build.\nvar animationHandlers = {\n  enabled: $delegate.enabled\u00c3\u0178\n};\nNo such characters in the latest famous-angular build in master. We can probably just upgrade.\n. Agreed on all counts: Our documentation needs improvement, too often does one need to go code-spelunking to figure out how something in Famo.us works, and ExtJS's docs are indeed excellent.\nA nicer documentation-browsing experience is in progress -- but, to a degree, I think the main need is just more muscle behind doc writing. This is a top priority of mine for the next version of Famo.us.\n@garytaylor Pull requests for documentation changes are welcomed. I will be happy to review any suggestions or additions you have.\n. Looks like we missed an origin/align update when we upgraded University to Famo.us 0.3.0.\nIn the example, lines 14 through 17 should read:\nvar bottomModifier = new StateModifier({\n  origin: [0, 1],\n  align: [0, 1] // This line is missing in the example currently live\n});\nWill get a fix up to the lesson ASAP.\n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. :+1: \n. ",
    "HynesIP": "Cool.\n. ",
    "vdvornyk": "+1 Try do University and its not works. Please fix.\n. ",
    "zoneblaze": "@redwoodfavorite thanks for the tip. Yep, pause/unpause animations is definitely a useful feature to have. Would also be nice to build some easing feature into it. So when a user pauses an animation, it doesn't come to an abrupt halt.\n. Hi there, I was wondering if any updates on such a pause option as it is going to be imperative on the project I am working on. In that same context I think it would be useful if the Timer utility could be paused too.\n. Had a look, looking good, thank you.\n. ",
    "shahzadns": "+1 \n. +1 for this.. famous has this issue on their own website.\n. ",
    "amitchoubey": "earlier when famo was launched demo for Accordion Menu was available but now on, I can't find it on famo's site..so pls do help me to find that demo\n. Thanks @wgester & @TheAlphaNerd !\nI am trying to achieve what I want, If I face any difficulties or problem then surely I will contact with u . \n. I understand that, but some where I want animation depends on Origin.\nLike in render controller I want page should be in & out from left & right origin.\nI tried with version 2.0 with that below linked example was working properly but now with latest version its not working properly,\nplease look into the below mentioned url & click in rectangular area.\nhttp://jsfiddle.net/t2z4Q/46/\n. but inAlign and outAlign are not defined in famo.us render controller docs.\nhttp://famo.us/docs/views/RenderController\n. @TheAlphaNerd can you please share little Idea about \"crosswalk\" & \"pluggable webview\" with me.\nAnd issue is not only related to lover devices, also not working in Samsung Galaxy 5 or Android version Kitkat. basically its works smoothly only in that mobile where chrome is default browser not android browser.\n. @markmarijnissen & @TheAlphaNerd Thank's for the reply I will try & test.\n. @particle4dev I was tried to add crosswalk in eclipse but some crosswalk error was occurring so for time being issue I skipped  it for some time but I will try & tell you the result soon.\n. @particle4dev Finally got a result for famo.us with crosswalk & now 3d animations are working properly not that much smooth in mobile devices if we compare with desktop chrome browser.\nBut if we reduce animation frames then hopefully works fine in mobile devices also.\n@TheAlphaNerd  & @markmarijnissen thank's to both of you that you guys shared idea about crosswalk.\n. @particle4dev You can try Intel XDK which is very easier to build crosswalk mobile app.\nI am sharing some links with you so that you can download & read also.\nhttps://software.intel.com/en-us/intel-xdk\nhttps://software.intel.com/en-us/xdk/docs/crosswalk-application-runtime-overview\nhttp://code.tutsplus.com/articles/getting-started-with-intel-xdk--cms-22205\n. @TheAlphaNerd can you please make any example of application with crosswalk & cordova or phonegap using famo.us and can you please share it with us.\n. ",
    "tripodsan": "hmm, I don't get the 'prerender' event and the surface is never removed. but even when I remove the surface way later, it flickers.\n. ok, I think I got it: when removing items directly from the underlaying array of the ViewSequence, the index in the nodes is not correct anymore. when I call BackingStore.reindex() after removing the surface, the flickering works:\nself.scrollview._scroller._node._.reindex(idx, 1, 0);\nI would like to use the ViewSequence directly, but for that it is missing some methods. currently it is not possible to remove 1 item from it easily. it would be cool if it had:\nViewSequence.remove(node);\nand 2nd, the splice() method can currently only remove elements, but not add. so it is impossible to insert a surface at a specific index (or am I missing something?)\n. ",
    "jfizz": "I think I may have a related issue: http://jsfiddle.net/VScqy/42/\nIn order to reproduce:\n1. Emulate touch screen (in chrome toggle device mode)\n2. Scroll to bottom\n3. Click on last surface to expand\n4. Scroll to the very bottom\n5. Click on last surface again to shrink (at this point you should see white at the bottom)\n6. Attempt to scroll up using touch events (eg don't use the scroll wheel on the mouse)\nI observed that the scroll view becomes stuck and won't move unless you drag far enough for the last surface to come in contact with the bottom of the view port.\n. a scrollTo function like @wgester proposed would be great! I modified the function a little bit to look something like this (probably just some typos):\njavascript\nScrollview.prototype.scrollTo = function(position, transitionObj) {\n    var transition = new Transitionable(this.getPosition());\n    this._scroller.positionFrom(transition);\n    transition.set(position, transitionObj, function() {\n        this.setPosition(transition.get());\n        this._scroller.positionFrom(this.getPosition.bind(this))\n    }.bind(this));\n}\nAfter making those changes, the function allowed transitions and worked going up and down a form (scrolling on focus). However, there were still a few issues. One issue is that if you use this function to 'scroll to' an input, manually scroll, lose focus on that input then when I attempted to use the scrollTo function again it didn't transition and instead bounces to the top and becomes stuck. Basically I just noticed problems when manual scrolling was thrown into the mix. I think these issues are also mentioned in #317 \n. ",
    "istvanskeri": "My scrollview content gets pushed out of view after the onscreen keyboard opens and can't scroll all the way up again after keyboard closes. I tried to apply the css fix body position absolute but issue is still happening. This bug is preventing us from launching our app. Please advise. \n. I'm experiencing a similar issue with the flipper. In my ios hybrid app i tap the flipper, it flips twice. Works fine on chrome/safari.  Can any of the core devs look at this issue please? This is a show stopper for anyone trying to deploy to ios apps \n. I had to create a modifier to set the height of my gridLayout.  \nvar gridModifier = new Modifier({\n        size: [undefined, 70]\n      });\n  var renderNode = new RenderNode();\n  renderNode.add(gridModifier).add(grid);\n  surfacesProfile.push(renderNode);\nThere has to be a better way\n. ",
    "antoniobrandao": "I have the same problem. Viewport goes up on opening the keyboard, and then doesn't return to it's original position after closing the keyboard...\n. ",
    "leestar": "Bumping this issue, although for me this happens on Android. I implemented a pure CSS workaround, which prevents the app from jumping up, but potentially hides the input bar. Basically the root node of my app has style:\napp {\nposition: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}\nThe problem is caused by having \"bottom: 0\", which causes the app to \"jump up\" when the keyboard slides out. So I changed it to:\napp {\nposition: fixed;\n  top: 0;\n  right: 0;\n  bottom: auto;\n  height: 9000px;\n  left: 0;\n}\nSetting the height to a large number guarantees that the body of the app renders, provided the children heights are well-defined. Depending on your specific implementation, YMMV.\nLooking forward to a real solution as this is a critical bug, please fix this Famo.us team! :)\n. I can verify this. This issue is also occurring for me.\nAny updates to this?\n. Are there at least any workarounds while waiting for a fix? Maybe some other event to listen to that is more reliable?\n. Can this be bumped??\n. @ivelfan  I added both options, and it still doesn't fire consistently. What were your specific settings?\nDevs, there are a few bugs holding back launch of my app, but this one is one of the most critical ones. Any plans to fix soon?\n. @SuPenguin SuPenguin - the projection parameter doesn't seem to work either, see the codepen:\nhttp://codepen.io/anon/pen/GgrMzv\n. I don't see this method in famous/inputs/TouchSync, famous v.0.3.4. \nDo you mean _handleMove()?\n. So I'm looking at the TouchSync.js commit history - was this fixed at one point and then reverted?\n. @TheAlphaNerd Gotcha. Thanks for the info. As a workaround I have to manually compute view/surface dimensions. Looking forward to this fix! \n. ",
    "DSRoden": "Sorry, I can't tell if this issue was resolved? I'm experiencing a similar problem.\n. ",
    "dermellor": "Thanks! \nThe two perfomance killers you mentioned shoudn't be a problem in our case. We are piping the event for every item with item.pipe(scrollView). \nRegarding the layout, every \"row\" or scrollview entry is a sequential layout which is filled appropriate to the screen width. Indeed we started with one grid layout (see http://stackoverflow.com/questions/25538314/combine-gridlayout-and-scrollview-in-famo-us-js - I'll link you answer) but changed it to the current structure.\nI fear we'll switch to native scrolling :-(\n. Nope. I have to add, that we aim good performance on \"older\" devices like iPhone 4S (where our previous native scrolling solution worked like a charm).\nOk, we'll try some optimizations and after this I'll close this issue.\n. @TheAlphaNerd thx for the hint. I guess a native scrollview will destroy the biggest advantage of famo.us, because it will render all elements even the not visible ones. Or are you guys planning to listen to the native scroll events and remove the non visible surfaces, like you do in the core scrollview? But this wouldn't work in iOS < 8 ...\n. @StephanBijzitter Yeah, box-shadows definitely make everything worse, as always . But in our experience the biggest showstopper are images (although you said, that they worked pretty good in your case)\n. They are famous images surfaces, so I assumed that they would benefit from all the hacks and performance tweaks of the framework. But yes, it's worth a try.\n. ",
    "mehmetf": "+1 for this. I am building three prototypes of similar complexity to test render performance:\nIonic\nFamous\nAngular Material\nThe target app is a scrolling list of cards with a simple 100x100 image and some text together with DrawerLayout for a simple menu. I spent an hour or so today putting together a rudimentary prototype on famous (no angular). You can see the code here: http://jsfiddle.net/tcs1kpe6/2/. My \"scrollables\" are simple surfaces.\nThe performance is comparable to Ionic's scrollview which is slower than browser native scroll (even <20 fps at times). I am running all three prototypes using cordova on my Moto X running Android 4.4.4.\nEDIT: If I use crosswalk as my runtime instead of cordova, things are much better. I consistently get 40-50fps scrolling performance. I thought that for Android > 4.4 there's not much difference between the two but apparently, that's not true.\n. As I said in my comment, that was my expectation as well but I used fps meter in debug mode to confirm xwalk was better. For > 5.0 it should not matter because of the evergreen webview.\n. ",
    "malikov": "@mehmetf \ndoes crosswalk really makes a differrence for android > 4.4 ?\nI was under the impression that this would prove to be useful only for devices < 4.4 \n. ",
    "etyp": "Any update on this? What would it take to implement a basic svg on a normal surface or maybe extend the Surface class?\n. @TheAlphaNerd cla has been signed - thanks\n. ",
    "ivosabev": "+1\n. ",
    "suprMax": "why why why this is the only thing that prevents me from using famous. I love built in physics, but I need SVG support too!\n. Yea I already decided to give it a try and see how it goes. I don't need very advanced SVG stuff at this stage. Thanks!\n. ",
    "Beelal": "Seems like \"origin\" member is gone in 0.3.0-rc. How to retrieve surface properties in event handler now? I was using event.origin.getProperties() in version 0.2.\n. ",
    "adamonline45": "Thanks!  I suspect the deferQueue may have a similar issue.  That's a more challenging problem because of the semantics of 'deferring' (as opposed to delaying a tick), so I'll leave that one to you all :)\n. ",
    "totty90": "I only see this in your readme (not even trace about requirejs, global or browserify):\nInstallation\nSimple Installation (Famo.us Starter Kit)\nTo get up and running quickly, download our starter kit. We've loaded it with examples, demos, reference documentation, and higher-level guides.\nAdvanced Installation (Grunt Toolbelt)\nIf you would like to scaffold an app with Famo.us from the command line, install our yeoman generator via npm.\nnpm install -g yo grunt-cli bower generator-famous\nmkdir newProject\ncd newProject\nyo famous\ngrunt serve\nPreparing your project for distribution is then as simple as:\ngrunt\n. OMG... You should not create 3 extra repo for each seed... Take a look how other libs handles that problem.. Is also very confusing to have those names...\n. - First of all naming should be famous-requirejs, famous-browserify, famous-global (No need the seed). Compare each with your current names (global-seed for example tells me nothing about my repo).\n- Keep in your repo the famous-global (which is a compiled file of your repo). For example you will have \"dist/famous.js\" and \"dist/famous.min.js\". With this you will not need the \"famous-global\" repo;\n- About famous-requirejs: you don't need because your project already works with requirejs out of the box;\n- About famous-browserify: if I remember how it works you could create a \"dist/famous.browserify.js\" file in your main repo too.\nIn other words add the files to your \"dist\" folder and delete other repos. Then you will create a build task which will create all the above \"seeds\" with just one click. In the best cases you should run this on each commit. If this is too much you should at least rebuild your dist at each version tag.\nWhat do you think about that?\n. Even better you could export your browserify module to commonjs modules if the \"require\" keyword is found (of course there are better checks, look at my gist here: https://gist.github.com/totty90/106f9577482154f9ab4e ). In this way you don't even need the \"dist/famous.browserify.js\". Maybe only a source map file, which would be nice to have on the \"dist/famous.js\" and \"dist/famous.min.js\" too.\n. Thanks\n. stateModifier.setTransform(\n          Transform.rotateZ(Math.PI * 2),\n          { duration : 1000, curve: 'easeInOut' }\n        );\nI understand that it resolves to 360 which is 0, which is the same as the current rotation. But is more intuitive if it would rotate 360 degrees... I don't know if it makes sense for you\n. Please review all other tutorials because I've found other that doesn't work, but I thought was my browser... \n. ",
    "stefanRitter": "The second error your getting is related to the function(){}.bind() method.\nI use Famous / Angular's polyfills for phantom.js to run my Karma tests in PhantomJS, you could try using the same file for your snapshots:\nhttps://github.com/Famous/famous-angular/blob/master/test/phantomjs-polyfills.js\n. ",
    "phoenixg": "@michaelobriena  Oh, I hope it's open source, so hope!\n. ",
    "metarouter": "Just noticed the famousify module that fixes the issue.\nEdit:\nUnfortunately, this does not apply to custom modules which will use their own local copy of famo.us as a dependency.\nEdit 2:\nDon't know what I was thinking. Updating custom modules obviously fixed the issue.\n. ",
    "bmatto": "I'm seeing this behavior with a TransitionableTransform, and visually it's a bit jarring - I see @AdamCmiel note about setting the desired value in the callback - but it doesn't help the issue visually.\nI have something like this -\n``` javascript\n    var spring = {\n      method: 'spring',\n      period: 500,\n      dampingRatio: 0.45\n    };\nthis.mainTransform.setRotate([Math.PI * 0.5, 0, 0], spring);\nthis.mainTransform.setTranslate(translateXYZ, spring);\nthis.mainTransform.setScale([1.3,1.3,1.3], spring);\n\n```\nResults can be seen here http://fullstack-nh.com/ just click/tap on one of the pizza boxes.  Is there something I can do to mitigate the jump at the end of the transition? \n. The idea here being to use a css transition inline to help \"land\" the tween ... i'll see how it looks.\nAm I correct in assuming that jump will be fixed with this issue, or is that something different?\n. @StephanBijzitter Thanks for note about scaling - that's very helpful indeed. :+1: \n. Ah I see, so you might say...\njavascript\nback2._eventOutput.subscribe(back2._eventInput);\nI guess I superimposed those eventHandlers together.\n. I was deving with 0.3.2 - updating to 0.3.4 solved my issue here.\n. ",
    "allenfantasy": "@TheAlphaNerd Yes, I've signed the CLA just now -- the name is \"Allen Wu\". :)\n. ",
    "irwansyahwii": "@TheAlphaNerd I will created another pull request with the same issue\n. This is not the correct solution, I will pr the correct one\n. Re-testing again, turns out this is the correct one\n. ",
    "Sing-Li": "@TheAlphaNerd  -  cla signed, please verify.  Thx\n. ",
    "philcruz": "This code will reproduce:\n```\n   define(function(require, exports, module) {\n    var Engine             = require(\"famous/core/Engine\");\n     var Surface            = require(\"famous/core/Surface\");\n    var HeaderFooterLayout = require(\"famous/views/HeaderFooterLayout\");\nvar mainContext = Engine.createContext();\nvar layout = new HeaderFooterLayout({\n    headerSize: 100,\n    footerSize: 50\n});\nlayout.header.add(new Surface({\n    size: [undefined, 100],\n    content: \"Header\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"100px\",\n        textAlign: \"center\"\n    }\n}));\nlayout.content.add(new Surface({\n    size: [undefined, undefined],\n    content: \"Content \",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: window.innerHeight - 150 + 'px',\n        textAlign: \"center\"\n    }\n}));\nlayout.footer.add(new Surface({\n    size: [undefined, 50],\n    content: \"Footer\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"50px\",\n        textAlign: \"center\"\n    }\n}));\nmainContext.add(layout);\n});\n```\n. @visheshd It is a Cordova app. I'm not loading any special plugin, though I'm not sure if the keyboard plugin is used by default?\n. That makes sense and, yes, using the Modifier to set the size resolves the issue. Thanks!\nAlthough, there is a still a minor issue in that when I tap the text field to start to edit, the keyboard comes up and covers the text field. Only when I tap the first character does the view shift so that I can see the field I am typing into. But I'll go ahead and close this issue.\n. ",
    "asellenrick": "That fixed the issue. Thank you!\n\nOn Oct 9, 2014, at 4:42 PM, michaelobriena notifications@github.com wrote:\nAre you working on ios8? There is a pretty substantial bug on ios8 safari with their layer compositing. I am in the process of creating a bug report for it.\nWe have a fix in the works to force the composition and that should land in a hotfix shortly.\nTry adding\nopacity: .999999\nto the class \"famous-root\" in the famous.css.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Famous/famous/issues/376#issuecomment-58582491.\n. \n",
    "dinopetrone": "https://gist.github.com/dinopetrone/56f63b2eea3cf5a05bbb\nexample of broken generic sync.\n. ",
    "netaisllc": "@TheAlphaNerd .. Sure thing, stay tuned.\n. CLA signed and comments made; all I have time for now.\nI will see to merging changes into 1 PR later on.  \nBTW, to make proposed changes I used github's web ui to 'edit in place' which sort of magically forks the content, but nothing leaves the web AFAIK. It all stays at github.\nDo you happen to know if the github web ui can do the combining of these requests, or should I fork the repo properly to my host?\nRegards.\n. @TheAlphaNerd I will fix up the PRs after you guys sanction which changes make the cut. :)\n. OK. I tried to do the operation but my GitHub fu is not so strong.\n@TheAlphaNerd At the risk of totally annoying you, I took a light copy-editing run at the project README.\nShould I do something to the two commits made against Master or will you?\n. @matthewtoast Thanks for the review. I have other thoughts and insights about what you wrote but maybe a GH issue is not the place for them. Regards.\n. Way cool. Thnkx, @TheAlphaNerd ...\n. The original content includes \"either\" as well, but it's style is awkward. This change proposes two things: (a) a comma after Transforms to clarify the intent, and (b) a re-ordering of words to decrease the use of passive voice and to come across less casual. Actually, I'm speculating about the comma as the original sentence is hard to understand for me, as a learner.\n. What you say is OK with me.\nHowever, the guides and the other introductory material overuses the \"this can be used like that\" IMHO, as a learner. While each use is no doubt technically accurate, it doesn't help the learner to use to so much. Learners do well with stronger, more definitive guidance.\n. Yes. the line break after the MD url citation.\nThe guides have a few instances of the formatting \"bug\" as shown in the attached image. \nI see why it happens, but it looks sloppy and degrades the professionalism that has otherwise been put into this content.\nIn the attached image, there is clearly enough line length (purple arrow) to fit the string \"Shadow DOM\", which ended up on its own line.\nThis doesn't hurt the understanding of the reader; it just kind of says \"amateur\".\n\n. This proposed change is just like the previous.\nMy observation is much more about how the content appears as the reader scans it, and much less about the understanding of it.  I'm content to have raised the concern.\n. The use of \"objects, or \"left-justify\" them, etc.  struck me at first read as a little too casual. However, what I proposed isn't all that different.\nThe main observation is that a reader of the guide may not be in a position to actually understand what \"etc.\" (or \"and so on\", for that matter) actually means in the context.  Use of such short-hands can be an issue in learning materials.\n. Hmm. The sentence in the original content is oddly worded, so this proposal is an attempt to improve the language.  Maybe this proposal can work:\nNodes in the Scene Graph that occur below sized Modifiers can use this bounding size to define their container's size.\n. It is, but it can be more confusing in this context.\nIn this section the guide is talking about positioning and locating the Surface and I became confused.\nA different way to address the point would be to write:\nWhat if we want to align the Surface differently, such as by it's center?\n. ",
    "agaase": "Thanks stephan, i got the height to increase now; but somehow the scroll container is not readjusting the other elements to move up and down as per the new height. the other elements stay at their original positiom\n. I see this assigned as a bug. Any further updates on this and if there is any temporary workaround?\n. ",
    "pranalisnapwork": "Hi,\nThis is the Fiddle link update it if possible.\nhttp://jsfiddle.net/t2z4Q/46/\nClick on rectangular surface animation will run.the incoming animation should come from border right position with origin[1,0]. The in and out animation should work only in black rectangular area.\n. Hi,\nI have tried Lightbox example, but in that there is no function i.e 'inTransformFrom' and 'outTransformFrom' it is showing undefined when defined there. What can I use there? Can we get progress parameter of rotation?\nThis is the updated fiddle. Change it if possible.\nhttp://jsfiddle.net/t2z4Q/48/\nThanku. \n. I got the 'inAlignFrom' and 'outAlignFrom' example given here. How can I get access to these function, as famous.js does'nt contain these functions. Will you provide new js???\n. Thanks it working.. :)\n. @jordanpapaleo please answer...\n. ",
    "stephenplusplus": "RE: https://github.com/taptapship/wiredep/issues/116#issuecomment-67043189\nwiredep could look for the moduleTypes array, but it wouldn't be able to do anything with a package that declared itself as anything other than \"globals\".\nBower allowing multiple moduleTypes to be declared, but only one collection of \"main\" files is limiting where tooling is involved. Maybe moduleTypes should have been an object, module type: main files?\nbower.json\njson\n{\n  \"name\": \"...\",\n  \"moduleTypes\": {\n    \"globals\": [\"dist/package.js\"],\n    \"amd\": [\"src\"]\n  }\n}\nPinging @sindresorhus for ideas.\n. ",
    "arayi": "These things have actually never been in sync. I'd estimate it would take quite a while to go through and fix all the small discrepancies. Do we want to fix this before the next big content update?\n. ",
    "D-Ogi": "University is not working at all. Just a blank page.\n\n. ",
    "extempl": "Done.\n. You can see the problem on http://famo.us/university/lessons/#/layout/sequential-layout/4 with following code:\n```\nvar Engine = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\nvar SequentialLayout = require(\"famous/views/SequentialLayout\");\nvar StateModifier = require(\"famous/modifiers/StateModifier\");\nvar mainContext = Engine.createContext();\nvar sequentialLayout = new SequentialLayout();\nvar renderables = [];\nvar sequentialModifier = new StateModifier({\n  origin: [0, 1],\n  align: [0, 1]\n})\nsequentialLayout.sequenceFrom(renderables);\nrenderables.push(new Surface({\n size: [undefined, 100],\n properties: {\n backgroundColor: \"rgba(256, 0, 0, .7)\",\n }\n}));\nrenderables.push(new Surface({\n size: [undefined, 200],\n properties: {\n backgroundColor: \"rgba(0, 0, 256, .7)\",\n }\n}));\nmainContext.add(sequentialModifier).add(sequentialLayout);\n```\nIt should looks like with origin: [0,0], align: [0,0] set, but at the bottom.\nBtw, it works correctly in 0.2 version, from which I've took the fix.\n. Seems like this change breaks layouts with surfaces with text only. But, 0.2 version works correctly for the both situations.\n. Well, it just nicer and easier to use\nsuirface.toggleClass('className', condition)\ninstead of\nclassName = 'className'\nif(condition)\n    surface.addClass(className)\nelse\n    surface.removeClass(className)\nAnd it is kinda useful when you need to toggle, but you don't know, is condition provided or not, so you stil wrilte\nsuirface.toggleClass('className', condition)\ninstead of\nclassName = 'className'\nif(condition === undefined)\n    surface.toggleClass(className)\nelse {\n    if(condition)\n        surface.addClass(className)\n    else\n        surface.removeClass(className)\n}\nI think, such feature eliminates possible errors. Btw, it's kinda common practice - for example, jQuery.\n. Seems like the problem is in this block since it sending wrong position (non-zero) which is assigned to this._edgeSpringPosition but I'm still not sure what I need to do to get correct behaviour...\n. ",
    "whatisor": "Thanks StephanBijzitter, but my error is not so. Maybe you're saying about other error.\nIt is related to data rendering. \nIf we enable loop options of viewsequence, scrollview fail to render elements.\nI guess it is from _innerRender of Scroller.js which uses options.margin to define when loop finishs, but I has not solution yet.\n. It is not an error which is shown in console.\nExample code:\ndefine(function(require, exports, module) {\n    var Engine     = require(\"famous/core/Engine\");\n    var Surface    = require(\"famous/core/Surface\");\n    var Scrollview = require(\"famous/views/Scrollview\");\n    var ViewSequence = require('famous/core/ViewSequence')\n    var mainContext = Engine.createContext();\n```\nvar scrollview = new Scrollview();\nvar surfaces = [];\nscrollview.sequenceFrom( new ViewSequence({array:surfaces,loop:true}));\nvar curr = 0;\n```\n//this NOT WORK \n for (var i = 0, temp; i < 6; i++) {\n//this works\n //   for (var i = 0, temp; i < 16; i++) {\n        temp = new Surface({\n             content: \"Surface: \" + (i + 1),\n             size: [undefined, 200],\n             properties: {\n                 backgroundColor: \"hsl(\" + (i * 360 / 40) + \", 100%, 50%)\",\n                 lineHeight: \"200px\",\n                 textAlign: \"center\"\n             }\n        });\n        surfaces.push(temp);\n    }\nmainContext.add(scrollview);\n});\n. Thanks travis5555.\nI cannot reproduce this error after I updated Chrome (from v36 to v38).\nNot sure the reason.\n. Hi,\nYes, exactly it is.\nDo you have any solution for that?\nWe need it if we use ContainerSurface to contain 3D content with clipping enable (by overflow:hidden)\n. I see it work normally in your codepen with line 17 or not :). Maybe other reason?\n. Yeah, just for information, it works on Ubuntu+chrome.\n. Thank but that is not my mean. That is Wall, not Collision.\nI mean Collision.js\n. Good news, I've upgraded to v0.3.5 (old version is 0.3.2).\nNow performance is quite good in Firefox (although not same with Chrome ).\nThanks\n. ",
    "atgillette": "I'm noticing this same issue as well. It seems that in order to enable looping, you need to have a minimum of 16 nodes.\n. ",
    "johndoesenior": "https://github.com/Famous/famous/pull/441\nCheck if this solves your problem. it solved mine.\n. when switching eventHandler.on('wheel') it works.\n. Upstream holds wheel events, touchmove etc, but not 'update'/'start'/'send' for upstreamListeners of wheel events.\n. Its related to Famo.us-Angular, but the source of the problem is Famo.us vanilla.\nHTML\n    <fa-scroll-view id=\"scrollView\"  fa-options=\"{direction: 1}\"  fa-pipe-from=\"handler\">\n         ...\n         ...\n         <fa-surface fa-pipe-to=\"handler\">\njavascript\n   $scope.handler = new EventHandler();\n   $scope.handler.on(\"update\",function(foo){\n            console.log(foo); // nothing, ever\n   });   \n   $scope.handler.on(\"wheel\",function(foo){\n            console.log(foo); // works like charm\n   });\n. famous-angular bug\n. @michaelobriena \n. @wgester any thoughts buddy?\n. The ViewSequence api does not exists for my knowledge in Famo.us Angular integration..\n. ",
    "pefi1011": "thanks for the fast answer..unfortunately it didn't work, nothing changed\n. of course..row 180\nhttps://github.com/pefi1011/Flyer/blob/master/FylerViewInput/src/views/FlyerViewInput.js\n. Oh, it works now!  You were probably thinking attributes but you wrote options...Thanks for your help Myles! \nP.s. there is still a typo on stack overflow, the \"s\" is missing\n. ",
    "gomflo": "thanks now its working pretty smooth\n. ",
    "round": "@aintnorest: well, the bug report is not so much that a double click is happening as: there is different click behavior when viewed in iOS Safari and iOS 'Mobile Web App View' (as accessed from a shortcut icon in the iOS8 springboard, in this case).\n@AdamCmiel: the fiddle does reproduce this behavior, firing two clicks in fullscreen mode (and confirming through event logs in the console). It looks like this instance (view?) of Safari on iOS messes with default click behavior that interferes or duplicates FastClick's. Not sure how/why though, but it's kind of a showstopper.\n. I get the same behavior \u2013 but particularly when the pageChange event happens fast (quickly).\n. ",
    "nihilence": "Is there still interest in solving this within famo.us? If so, I modified the Flipper module for a project and it works as desired. \n. Alright, well... I am sorry that it didn't meet the build. I've never done\nthis before. That's just what I did to fix it for my personal project. I\ncan modify it soon when I get some time.\nOn Tue, Apr 7, 2015 at 11:43 PM, Myles Borins notifications@github.com\nwrote:\n\nAs well, I'm not 100% sure that this will land. It seems odd to modify the\napi of flipper simply for IOS.\nthoughts @michaelobriena https://github.com/michaelobriena\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/pull/672#issuecomment-90821512.\n\n\n~Sabice\n. ",
    "garris": "Super -- Nice hustle people!\n. ",
    "tdsfugal": "Looks like a singularity problem to me.  A usage error. Not a bug.  \nThe repulsion force computation is essentially dividing by zero when the two particles are close enough.  Since it is a discrete simulation the force errors appear as impulses to the velocity.  Normally the errors are imperceptibly small and tend to average out, but when the satellite falls \"through\" the body the particle centers come very close, so close that the force error is an impulse that kicks the satellite out of the system.  \n(That's why it's always smart to wear eye protection and step back whenever there is a possibility of dividing by zero...)  \nThere are ways to mitigate the singularity blow-up (see range, cutoff and cap in the Repulsion code), but these are essentially cheats that introduce other physics errors. The pro solution is to set up the world so that the centers can't get close enough for the numerical round off error to matter.  Wrap the centers in a Collision, for example, to better simulate physical objects.  If the particles really do have to get that close in the simulation then the physics engine needs to either use a smaller delta-T  or a more insensitive (and expensive) integration technique (e.g. Runga-Kutta-Fehler), or both. \n. i don't see much wrong with it.  It has a precession error that wouldn't pass muster in a science or engineering application but is probably acceptable for a game application.  is the precession error a show-stopper for your constraint solver display or can you live with it?\nAs for \"it blows up when they get too close\" problem, well, that's just going to be a problem.  The governing equation has a singularity at r = 0.  Your application has to make sure that r stays large enough to avoid the blow up.  \nWhen I'm faced with a singularity in one of my simulations the first thing I consider is, \"what is the physical significance of the singularity?\"  Adding that natural answer almost always solves the problem.  For example, planets have surfaces and/or atmospheres. A real satellite would crash.  Space vehicles can pass gas clouds, but as they get closer to the center of the cloud the gravitational attraction goes to zero. A force model based on gas cloud gravitation doesn't have a singularity at r=0 so the problem is solved.  \nSo if your exemplar world is a satellite orbiting a planet, have the simulation \"crash\" when r <= R_planet.  If the solver is a learning solver then give it a strongly negative penalty score (and if not then make sure that r > R_planet + safety_margin is one of the constraints!) and restart.  \n. The doThatFrom pattern is very useful.  I hope it stay for two reasons:\n1) No way to adjust the spatial trajectory of the transition using the original  set(endState, transition, callback) pattern.  The transition object only allows temporal control (duration and \"curve\"), but the path from start to finish is implicit and cannot be changed.  For a one-D property like opacity that is not a big issue since there is only one possible path, but most properties are two or three dimensional with an infinite number of trajectories from start to finish. doThatFrom accepts a function as an argument, so there is the possibility of writing code to generate any of the possible trajectories.  There is no loss in generality because doThatFrom also accepts Transition objects so the simplicity of \"set(endState, transition, callback)\" with its implicit trajectory is still there.\n2) Easy to synchronous multiple animations. Perhaps I'm missing something, but when I need four things to happen simultaneously it's easier to provide four functions that do exactly what I want than having four sets of controls to adjust.  Until doThatFrom came along I was spending way too much time rooting about in the Famo.us source code trying to figure out what the built-in functionality was going to do, and then engineering a controller for the controls to get it to do what I wanted it to do. \nAs for performance, when an animation finishes a second call to ThatFrom with a constant end-state value clears the getter and stops the recalculations.  Yes, it's an extra line of code, but the extra typing is easy and does the job. \n@Michael - Roger on your point that the rest of the platform uses the Set pattern almost exclusively (Draggables, for example, don't have a translateFrom method).  Moving away from the set transition pattern would be painful, but staying with it after depreciating it in Modifier would be painful too.  I have a few ideas that are working for me and might help if you are interested. \nDouble thumbs-up for both \"get it right for 1.0\" and Stephen's point about telegraphing the changes to the developer community WELL in advance. It would be such a nice kindness.  \n. ",
    "richardscarrott": "@wgester - Just played around with the speedLimit, setting it to both high and low extremes and the problem still occurred in both cases.\nAs a note, I've been able to reproduce the issue on the starter kit scrollView too.\nContrary to my original thinking I've noticed the 'wheel' event is triggering as expected when attaching the event to all the surface divs directly in the console however _handleMove in the ScrollView isn't being called.\n. ",
    "Imti": "@TheAlphaNerd Ah I see what you mean. I've removed the trailing comma and fixed the indentation. \n. @timjchin Good call, getter/setter functions added.\n. @michaelobriena Good point, renamed frozen to immune. \n. ",
    "dcworldwide": "+1. Famo.us should really state which browsers are supported on their product site. \n. Any updates? \n. @trusktr woo! Feeling hopeful for some direction\n. ",
    "ARaouf": "This seems to be an issue related to a change in both Famo.us 0.3 and the newer mobile browsers, not just Android.\nWith Famo.us 0.3 the issue is present on the following platforms that I tested:\n- Android 4.4 using the mobile browser \n- Android 4.4 packaged using Cordova 4.0\n- IOS 7 packaged with Cordova which uses the UIWebView\nThe issue is not present in the following platforms:\n- Android 4.2 using the mobile browser or Chrome\n- Android 4.2 packaged using Cordova\n- IOS 7 in Safari Mobile\n- IOS 6 in Safari Mobile or packaged with Cordova\nI did not try IOS 8\n. oops sorry, I didnt see that. Ill give it a shot. Thanks!\n. ",
    "LostMoho": "In the actual project I'm working on, adding this to the CSS seemed to help:\ncss\nbody {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    margin: 0px;\n    padding: 0px;\n    -webkit-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    -webkit-font-smoothing: antialiased;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-perspective: 0;\n    perspective: none;\n    overflow: hidden;\n}\nIt didn't really fix it, but in some cases the problem went away and in others it still occurs. I don't really understand what logic determines how content shifts to accommodate the onscreen keyboard, so I'm not sure what bits of the CSS might be important here.\n. ",
    "alexisohayon": "@speigg I would love an example of how you make it work. \nI'm currently learning how to implement famo.us into a large angular app, this could help me save hours :v: \n. ",
    "kilianc": "For example:\njs\nModifier.prototype._modify = Modifier.prototype.modify\nModifier.prototype.modify = function (target) {\n  target = false === this.visible ? null : target\n  return this._modify(target)\n}\nThis keeps the number of DOM nodes low but it messes up z. I keep track of dom nodes with this:\njs\nEngine.on('postrender', function postrender() {\n  debug('famous-angular-container: %d DOMNodes', $('.famous-angular-container').children().length)\n})\n. or\n``` js\nRenderNode.prototype.removeChild = function(nodes) {\n  var parent = this\n  var children = this._child\nEngine.on('postrender', function postrender() {\n    if (!(nodes instanceof Array)) nodes = [nodes]\nnodes.forEach(function (node) {\n  var removeIndex = children.indexOf(node)\n  children.splice(removeIndex, 1)\n})\n\ndebug('famous-angular-container: %d DOMNodes', $('.famous-angular-container').children().length)\n\nEngine.removeListener('postrender', postrender)\n\n})\n}\n```\nsame result.\n. After further investigation, I found that the problem is not in the matrix3d value, but in the order of the DOM nodes when they get re-added.\nThis is what my HTML looks like and the surface containing \"HOME\" and the buttons, respect the z order the first time I add it to the renderd, the second time, when change the state modifier associated with <fa-view view> that messes up everything..\n``` html\n\n\n\n\n<fa-modifier\n    fa-translate=\"[0, y, 2]\"\n\n<fa-surface fa-background-color=\"'{{colorFg}}'\">\n  <div>\n    HOME: {{color}}\n    <button type=\"button\" ng-click=\"push()\">push</button>\n    <button type=\"button\" ng-click=\"pop()\">pop</button>\n    <button type=\"button\" ng-click=\"pop(2)\">pop 2</button>\n  </div>\n</fa-surface>\n\n\n\n```\n. It seems related to https://github.com/Famous/famous-angular/issues/264\n. \n",
    "jeduan": "+1. I've been hitten by this too when using a Ligthbox to render a detail view and then going back to the list view. \n. ",
    "Lauricio": "Hi @michaelobriena,\nSorry, but I am seeing different behavior for 0.3.1\nHere is a screenshot of the SequentialLayout example found in 0.3.0 famous-starter-kit/examples/views/SequentialLayout with direction: 0 :\n\nThe element is the full width of the screen and all of the other elements are off to the right, works as expected.\nand here is a screenshot of the same example, but from version 0.3.1 starter kit with direction: 0 as well:\n\nThe element is no longer full width of the screen, all surfaces seem to collapse on top of each other.\nI am using starter kit examples of the SequentialLayout from both releases and only modifying direction: 0.\n. @michaelobriena Sorry for late response, yes the Pull Request solves the issue, thank you!\n. ",
    "QuantumKing": "@michaelobriena ok, thanks!\n. ",
    "adamelk": "The main reason why this was an issue, which I should've mentioned above, is that if I replace the ImageSurface with a normal Surface that has content with an HTML img tag that has the same src url, the normal Surface does render fine within the scrollView.  My question is why does it render for a Surface and not an ImageSurface?\n. @michaelobriena I tried using img.setContent, and the ImageSurfaces within a different view inside the scrollview are still not rendering.  Could you show me an example of it working?  Here's a screenshot showing that the scrollview contains the images but for some reason the width is 0px.\n\n. ",
    "OpakAlex": "@fundon looks good do in on meetup. \n. ",
    "stevemao": "Hi @TheAlphaNerd , I just did. Could you please double check if anything is wrong? Thanks\n. ",
    "halfninja": "I also get this - have been using http://code.famo.us/famous/0.3/famous-global.js which I guess has been updated. Caused by 404ab7c \n. Yep, I've boiled it down a bit to this page that reproduces it - couldn't work out exactly what was triggering it, but it only triggers when I've got more than a few of these particles. Might be something to do with the presence of Engine.nextTick in combination with something else.\nhttps://gist.github.com/anonymous/7ba5513be05ad38f6326\n. Here's a codepen of the same\nhttp://codepen.io/halfninja/pen/oggPma\n. Possibly useful: It only happens if the star.transition.set()s are given different durations. If they all have the same duration then it works okay.\n. My guess is that where the new code in Engine.nextTick does\nnextTickQueue[frameIndex] = []\nframeIndex might be greater than nextTickQueue.length, leaving undefined elements in the queue array. That might be fine, but in that case the engine needs to guard around them.\n. ",
    "jordangarside": "Is this the bug I'm experiencing on my page?\nMy overflow: hidden is broken on my canvas container, and z-translation isn't respected.\nOnly happens on Chrome Mobile, both 4.4 and 5.0.3. (Firefox Mobile works fine)\nSource is available here.\n. ",
    "raxan": "Thanks for your reply.\nI need to start a project in January, and end in September 2015 (around 9 months).\nDo you think I can start with current BETA and then upgrade to stable easy? Will be stable ready until that? Exist an ETA?\nThanks!! \n. ",
    "ivelfan": "I have the same problem with the default configuration.\nWhen I add pagePeriod and pageSwitchSpeed options, \"pageChange\" event works fine.\nA plan to fix it ?\n. ",
    "veke": "Confirmed. With paginated scrollview with fullscreen height surfaces and with default settings. Page change event fires only if you move the view a little bit after the change. (code from scrollview example.js)\n```\ndefine(function(require, exports, module) {\n    var Engine     = require(\"famous/core/Engine\");\n    var Surface    = require(\"famous/core/Surface\");\n    var Scrollview = require(\"famous/views/Scrollview\");\nvar mainContext = Engine.createContext();\n\nvar scrollview = new Scrollview({paginated: true});\nvar surfaces = [];\n\nscrollview.sequenceFrom(surfaces);\n\nfor (var i = 0, temp; i < 40; i++) {\n    temp = new Surface({\n         content: \"Surface: \" + (i + 1),\n         properties: {\n             backgroundColor: \"hsl(\" + (i * 360 / 40) + \", 100%, 50%)\",\n             lineHeight: \"200px\",\n             textAlign: \"center\"\n         }\n    });\n\n    temp.pipe(scrollview);\n    surfaces.push(temp);\n}\n\nscrollview.on('pageChange', function() {\n\n    var currentPage = scrollview._node.index;\n\n    console.log(currentPage);\n\n});\n\nmainContext.add(scrollview);\n\n});\n```\n. ",
    "chicoxyzzy": ":+1:\n. ",
    "svapreddy": "This removes the error, but I wonder why to do it manual even with DEFAULT_OPTIONS.\n. @StephanBijzitter What you said is exactly correct, I think I had to dig into code once but followed tutorial blindly :( . And I think it needs to be updated in Famo.us learning tutorial too.\n@TheAlphaNerd Thanks for the beautiful library.\n. ",
    "sebringj": "This bug is persisting for me in 0.3.5 when I do textArea.setValue('')    I just reference the _element instead and do _element.value = '' which is a no-no but right now its a no-go without that. 2014 huh? Its 2015 now FYI.\n. ",
    "The1nternet": "Yes.  I just verified, this is also happening in the latest version of Opera.  Does that mean this is a known issue?\n. ",
    "markuz-brasil": "I did, but I have my who build already setup. and to have deamdify run at every build slows down quite a built the build process. My plan is to have it run once into a commonjs and then I can just require it later. It worked for v0.3.2 but now it just doesn't\n. IMO, it just creates unnecessary friction. The whole npm ecosystem behaves in this way.\nso here is my previous version of famous v0.3.2  https://github.com/markuz-brasil/famous-commonjs\nWhy can't you guys add that step into your automated build.\nI've spend hours today on this, which really should have taken me 1 min.\nAfter all, you guys have first class support for  bower\n. about the deamdify, my impression is that it will be run after every code change, weather in my end or not. And that is the issue I have.\n. I can't use watchfy because I build other stuff as well, gulp.watch is the way I go.\nthere is no need for a separate branch. just add a postinstall and build-commonjs in your package.json. \nand have the main section pointing to the index inside the build-commonjs output.\nthat simple.\n. my main point is simple. \nhave a first class support for a commonjs version of famo.us\n. It's already 1am in my part of the world, and 12 hours dealing with this.\nand now instead of depending on 5 packages (famous, cssify, deamdify, famousify (how is this different from aliasify ?) and famous-dist-generator,) I only depend on my fork. Major win.\nBut now I need to be merging my fork you famous after every update. Not ideal, but is much better trade off.\nand here is the package.json after the little changes needed to make this to work. \nMy intention is just to show you how hard that was.\n- obviously famo.us is not supported on the server.\n- no need of separate branch \n- package.json is for metadata only, not to hack package configs. This is so bad\nOne last thing, when someone comes to you with a problem, don't tell them what tools to use, its rude. I mean, I really know what I'm doing and you wanna me to add 4 other deps which 3 will be running at every file change, not cool at all.\nAnd a tip for you, you should shrinkwrap your deps. Sometimes things just blowup at your face.\n{\n  \"name\": \"famous\",\n  \"version\": \"0.3.4\",\n  \"description\": \"Famo.us is a JavaScript framework for everyone who wants to build beautiful experiences on any device.\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/famous/famous\"\n  },\n  \"keywords\": [\n    \"famous\"\n  ],\n  \"main\": \"commonjs/index.js\",\n  \"scripts\": {\n    \"test\": \"npm run lint -s\",\n    \"lint-eslint\": \"eslint src/\",\n    \"lint-jscs\": \"jscs src/\",\n    \"lint\": \"npm run lint-eslint && npm run lint-jscs\",\n    \"build\": \"npm run build-commonjs && npm run build-requirejs && npm run build-requirejs-min && npm run build-global && npm run build-global-min && npm run build-css\",\n    \"build-commonjs\": \"famous-dist-generator --commonjs --local --out commonjs/.\",\n    \"build-requirejs\": \"famous-dist-generator --requirejs --local --out dist/famous.js\",\n    \"build-requirejs-min\": \"famous-dist-generator --requirejs --local --minify --out dist/famous.min.js\",\n    \"build-global\": \"famous-dist-generator --standalone --local --out dist/famous-global.js\",\n    \"build-global-min\": \"famous-dist-generator --standalone --local --minify --out dist/famous-global.min.js\",\n    \"build-css\": \"famous-dist-generator --css --local --out dist/famous.css\",\n    \"build-docs\": \"famous-doc-generator --base src/ --out docs/ --createIndex\",\n    \"build-examples\": \"famous-examples-generator -i ./examples\",\n    \"prepublish\": \"npm run build\"\n  },\n  \"authors\": [\n    \"Adam Cmiel <adam@famo.us>\",\n    \"Adnan Wahab <mail@adnanwahab.com>\",\n    \"Adrian Rossouw <adrian@daemon.co.za>\",\n    \"Alexander Gugel <alexander.gugel@gmail.com>\",\n    \"Andrew de Andrade <andrew@deandrade.com.br>\",\n    \"Anthony Talves <tony@3alves.com>\",\n    \"Antmanler <antmanler@gmail.com>\",\n    \"Arkady Pevzner <arkady.pevzner@gmail.com> <arkady@famo.us>\",\n    \"Austen Talbot <austentalbot@gmail.com>\",\n    \"Avi Haiat <thaiat@ipelia.com>\",\n    \"Brendan Graetz <brendan.graetz@gmail.com>\",\n    \"Carl A. Fahlstrom <carl.fahlstrom@gmail.com>\",\n    \"Cem Turan <cem2ran@gmail.com>\",\n    \"Christopher Cook <christopher.cook@webprofusion.com>\",\n    \"Cliff Crosland <cliffcrosland@gmail.com>\",\n    \"Corey Wilson <corey@ereatah.com>\",\n    \"Daniel Lewis <Thecontrarian@users.noreply.github.com>\",\n    \"Dan Miller <yajnavalkya@cox.net>\",\n    \"Dave Fetterman <fettermania@gmail.com>\",\n    \"David Valdman <david@famo.us> <dmvaldman@gmail.com>\",\n    \"Denis Gorbachev <Denis.Gorbachev@faster-than-wind.ru>\",\n    \"Eric Schoffstall <contra@wearefractal.com> <contra@maricopa.edu>\",\n    \"extempl <extempl@gmail.com>\",\n    \"Felix Tripier <ftripier@gmail.com>\",\n    \"Gregory Lull <gregorylull@gmail.com>\",\n    \"Hongxu Liu <djshu.us@gmail.com>\",\n    \"Imtiaz Majeed <imtiazmaj@gmail.com>\",\n    \"J. Andrew Brassington <jabbrass@zoho.com>\",\n    \"James Snowden <jamesvsnowden@me.com>\",\n    \"Joe Johnston <joe@simple10.com>\",\n    \"John Hurliman <jhurliman@jhurliman.org>\",\n    \"Jonathan Reem <jonathan.reem@gmail.com>\",\n    \"Josef Reinhard Brandl <mail@josefbrandl.de>\",\n    \"Joseph Carroll <jdsalingerjr@gmail.com>\",\n    \"Joseph Orbegoso Pea <trusktr@gmail.com>\",\n    \"Joseph Sample <joseph.michael.sample@gmail.com>\",\n    \"Kevin McGee <kevin.mcgee@cssian.com>\",\n    \"Kyle Craft <craftjk@gmail.com>\",\n    \"Mark Lu <mark@famo.us> <marklu@marklu.net>\",\n    \"Mark Marijnissen <markmarijnissen@gmail.com>\",\n    \"Matthew Trost <matthew@famo.us> <matthew@trost.co>\",\n    \"Max Xu <deepthought@gmail.com>\",\n    \"Michael O'Brien <michael.obrien.a@gmail.com> <michael.obrien.a@gmail.com>\",\n    \"Michael Xia <xia.umd@gmail.com>\",\n    \"Morten Henriksen <mh@gi2.dk>\",\n    \"Murillo <mmbfreitas@hotmail.com>\",\n    \"Myles Borins <myles.borins@gmail.com> <myles@famo.us>\",\n    \"Nitin  Saroha <nitinsaroha6@hotmail.com>\",\n    \"Oleg Slobodskoi <oleg008@gmail.com>\",\n    \"Peter Finley <peter.finley@gmail.com>\",\n    \"Peter Kiers <pkiers@MacBook-Pro-van-Peter.local>\",\n    \"Pierre-Eric Marchandet <pemarchandet@gmail.com>\",\n    \"Rapha\u00ebl Benitte <benitteraphael@gmail.com>\",\n    \"rsperberg <rsperberg@gmail.com>\",\n    \"Sabith Pocker <sabithpocker@gmail.com>\",\n    \"Sing Li <sli@makawave.com>\",\n    \"skoczen <skoczen@gmail.com>\",\n    \"Stephan Bijzitter <stephanbijzitter@gmail.com>\",\n    \"Steve Mao <maochenyan@msn.com>\",\n    \"Thomas L. <thomas.laurent.gm@gmail.com>\",\n    \"Tim Chin <timjchin@gmail.com> <tim@famo.us>\",\n    \"Tom Hornos <tom.hornos@gmail.com>\",\n    \"Travis Cherry <travis_cherry@premierinc.com>\",\n    \"Wayland Woodruff <waylandwoodruff@gmail.com>\",\n    \"Will Gester <will@famo.us> <willgester@gmail.com>\",\n    \"Zach Gardner <zgardner@keyholesoftware.com>\",\n    \"Zack Brown <z@charybrown.com>\",\n    \"Zeqiu Wu <allenwu1018@gmail.com>\"\n  ],\n  \"license\": \"MPL v2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/famous/famous/issues\"\n  },\n  \"homepage\": \"https://famo.us\",\n  \"devDependencies\": {\n    \"eslint\": \"^0.10.0\",\n    \"famous-dist-generator\": \"^0.3.0\",\n    \"famous-doc-generator\": \"^0.7.0\",\n    \"famous-examples-generator\": \"^0.2.1\",\n    \"jscs\": \"^1.5.9\"\n  },\n  \"dependencies\": {\n    \"cssify\": \"^0.6.0\",\n    \"deamdify\": \"^0.1.1\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"cssify\",\n      \"deamdify\"\n    ]\n  }\n}\n. Awesome. For browserify folks that will be great.\nOn Wednesday, February 4, 2015, Myles Borins notifications@github.com\nwrote:\n\nHey markuz-brasil,\nWanted to quickly revisit this thread. I have just finished completely\nrewriting the dist builder, so things finally work as expected again.\nFurther I want you to know that version of Famo.us published to npm will be\nin the commonJS pattern from now on\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Famous/famous/issues/543#issuecomment-72889198.\n. \n",
    "PatrickJS": "thanks, I forgot to say I signed it. I signed it again just in case \n. ",
    "amcc": "i'm seeing the same issue with getCurrentIndex(). Often an incorrect value is given if i slowly scroll to the next page.\nscrollview.on('pageChange', function(event) {\n                        // this sometimes gives the incorrect value\n                        console.log('getCurrentIndex = ' + scrollview.getCurrentIndex());\n                        // this is always correct\n                        console.log(event['index']);\n                    });\nAnother big problem with  getCurrentIndex() is that it gives a value of zero for the first two pages and every subsequent page is one less than it should be. This is when used on 'pageChange' in the code above, whereas the event['index'] above is always correct. Oddly the code below gives the correct value for getCurrentIndex() though it still suffers from the same glitchy behaviour, often giving the wrong value:\nscrollview.sync.on('end', function(event) {\n        console.log('getCurrentIndex = ' + scrollview.getCurrentIndex());\n});\n. ",
    "bitplanets": "(Not talking about the buggy examples in their main page. The slides freezes halfway... but that is another story)\n. ",
    "lostfictions": "(Related: #347, #292)\n. ",
    "revolunet": "yes please merge this, this makes it difficult to use famous in 3rd party projects using ftlabs's FastClick\n. ",
    "thebigredgeek": "I was actually hoping to be able to use the JSPM toolchain (which includes ES6, loader, and Traceur tooling) since this appears to be the direction of the industry (away from RequireJS/Browserify and Bower/JamJS/NPM for frontend assets)  Any ideas?  This seems to be the next-gen best practice and I think it would make sense for Famo.us to align with this.\n. MTW @TheAlphaNerd , we'd still like to reschedule that visit.  This is Andrew from Jiff :)\n. Chrome Cordova, IMO, is a no brainer.  There is no reason to use native webkit when Mobile Chrome Apps exists.\n. Can you advise on how to integrate this fix into my project?   Maybe you could put in a PR or something?  Thanks Myles\n. @TheAlphaNerd npm is definitely losing market share regarding the front-end, in lieu of tools like bower and jspm.  Especially with ES6 become more widely used... it has a module loading syntax that isn't CommonJS\n. ",
    "browles": "@michaelobriena yep looks good. I'm surprised it was working at all.\n. ",
    "jordanpapaleo": "I have never used the global ignore .idea but it sounds like something I would like.\n\nOn Jan 15, 2015, at 11:14 AM, Myles Borins notifications@github.com wrote:\nhey @jordanpapaleo https://github.com/jordanpapaleo I just notice the addition of .idea to the .gitignore\nIs that a webstorm file? I think it might make sense to avoid vendor specific files, lest it become unruly. Do you think that is something better left to a global gitignore? I'm open to being persuaded on this.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Famous/famous/pull/568#issuecomment-70143276.\n. \n",
    "SuPenguin": "@StephanBijzitter oh my bad, i've been watching your PR but i didn't noticed you've already fixed this one. Could you at least merge the commits that doesn't break stuff ?\n. ",
    "MrNice": "This code from @arkadyp:\nReplacing calculatePayload inside famous/inputs/TouchSync.js with this fixes the problem.\nfunction calculatePayload (data) {\n        var history = data.history;\n```\n    var currHistory = history[history.length - 1];\n    var prevHistory = history[history.length - 2];\nvar distantHistory = SyncUtils.getTimeHistoryPosition(history, this.options.timeSampleDuration);\n\nvar distantTime = distantHistory.timestamp;\nvar currTime = currHistory.timestamp;\n\nvar diffX = currHistory.x - prevHistory.x;\nvar diffY = currHistory.y - prevHistory.y;\n\nvar velDiffX = currHistory.x - distantHistory.x;\nvar velDiffY = currHistory.y - distantHistory.y;\n\nif (this.options.rails) {\n    if (Math.abs(diffX) > Math.abs(diffY)) diffY = 0;\n    else diffX = 0;\n\n    if (Math.abs(velDiffX) > Math.abs(velDiffY)) velDiffY = 0;\n    else velDiffX = 0;\n}\n\nvar diffTime = Math.max(currTime - distantTime, MINIMUM_TICK_TIME);\n\nvar velX = velDiffX / diffTime;\nvar velY = velDiffY / diffTime;\n\nvar scale = this.options.scale;\nvar nextVel;\nvar nextDelta;\n\nif (this.options.direction === TouchSync.DIRECTION_X) {\n    nextDelta = scale * diffX;\n    nextVel = scale * velX;\n    this._position += nextDelta;\n}\nelse if (this.options.direction === TouchSync.DIRECTION_Y) {\n    nextDelta = scale * diffY;\n    nextVel = scale * velY;\n    this._position += nextDelta;\n}\nelse {\n    nextDelta = [scale * diffX, scale * diffY];\n    nextVel = [scale * velX, scale * velY];\n    this._position[0] += nextDelta[0];\n    this._position[1] += nextDelta[1];\n}\n\nvar payload = this._payload;\npayload.delta    = nextDelta;\npayload.velocity = nextVel;\npayload.position = this._position;\npayload.clientX  = data.x;\npayload.clientY  = data.y;\npayload.count    = data.count;\npayload.touch    = data.identifier;\n\nthis._eventOutput.emit('update', payload);\n\n}\n```\n. Ah, In my case I was using famo.us v 0.3.3, which is what's in the npm registry currently.\nhttps://github.com/Famous/famous/blob/v0.3.3/src/inputs/TouchSync.js\n. @TheAlphaNerd \nOh, nvm, Browserify-seed locks in the exact famo.us version number, and I started my project a two weeks ago.\n. ",
    "wheeler": "Still repro in 0.3.5 (repro example updated)\n. ",
    "xiamike": "@timjchin @arkadyp @nigelpegg @Imti \nhey guys, just a heads up since this might come up in your demos.  \nBest,\nmike\n. ",
    "pbrazdil": "anyone please?\n. ",
    "neeharik": "I found that the order of modifiers has to be reversed in the ModifierChain if I want equivalent behavior, as the transforms are not commutative. It appears the ModifierChain applies the transforms in the reverse order of insertion into chain. So the equivalent in the above case seems to be\nmainContext\n    .add(modifierTwo)\n    .add(modifierOne)\n    .add(surface);\nIs this what you see too? Is this by design?\n. The translation when scaling happens when the order of the transforms is reversed.\nSo this can be a workaround, try it in your codepen link:\n``` javascript\nvar Engine = famous.core.Engine;\nvar Surface = famous.core.Surface;\nvar ImageSurface = famous.surfaces.ImageSurface;\nvar ContainerSurface = famous.surfaces.ContainerSurface;\nvar View = famous.core.View;\nvar Entity = famous.core.Entity;\nvar Modifier = famous.core.Modifier;\nvar StateModifier = famous.modifiers.StateModifier;\nvar Transform = famous.core.Transform;\nvar Transitionable = famous.transitions.Transitionable;\nvar TransitionableTransform = famous.transitions.TransitionableTransform;\nvar Easing = famous.transitions.Easing;\nvar Scrollview = famous.views.Scrollview;\nvar togle = false;\nvar mainCtx = Engine.createContext();\n//mainCtx.setPerspective(1000);\nvar mainNode = new View({\n  //size:[200,200]\n});\nvar rootModifier1 = new StateModifier({\n  size:[200,200],\n  align: [0.88, 0.5],\n  origin: [0.5, 0.5]\n})\nvar rootModifier2 = new StateModifier({\n  size:[200,200],\n  align: [0.5, 0.5],\n  origin: [0.5, 0.5]\n})\nvar cont = new ContainerSurface({\n    properties: {background: 'red'}\n});\nvar mod = new StateModifier({\n  align: [0.5, 0.5],\n  origin: [0.5, 0.5]\n});\nvar img = new ImageSurface({\n  //content: 'http://www.clker.com/cliparts/N/V/c/R/f/z/glossy-black-circle-button-th.png',\n  //content: 'https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQ23Gzmb4KjWL2CxZXM81lySS4YTdK0rYgj7AToJqK2KuJR8K6U',\n  content: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSbGYiXmH4bP2zLiyn8HGufqQWaUX4f_TGgntNvgSYuNi8fd9SRX27CAzpp',\n  //size: [undefined, true],\n  size: [true, undefined]\n});\ncont.add(mod).add(rootModifier1).add(img);\nmainNode.add(rootModifier2).add(cont);\nmainCtx.add(mainNode);\nEngine.on('click', function(){\n  if(!togle){\n    rootModifier1.setSize([40,40], {duration: 1000});\n    rootModifier2.setSize([40,40], {duration: 1000});\n  } else {\n    rootModifier1.setSize([200,200], {duration: 1000});\n    rootModifier2.setSize([200,200], {duration: 1000});\n  }\n  togle = !togle;\n})\n```\n. The workaround was only to maintain the alignment defined, which in the previous case was changing with size.\n. ",
    "groupsvkg": "Hi Michael,\nDoes this work's in a scrollView with two views inside having fa-size=\"[undefined, true]\" ?\n\nRegards,\nvishal\n. below is my bower.json\n{\n  \"name\": \"i-collab\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"angular\": \">=1.2.\",\n    \"json3\": \"~3.3.1\",\n    \"es5-shim\": \"~3.0.1\",\n    \"jquery\": \"~1.11.0\",\n    \"angular-animate\": \"~1.2.0\",\n    \"angular-resource\": \">=1.2.\",\n    \"angular-cookies\": \">=1.2.\",\n    \"angular-sanitize\": \">=1.2.\",\n    \"font-awesome\": \">=4.1.0\",\n    \"lodash\": \"~2.4.1\",\n    \"angular-socket-io\": \"~0.6.0\",\n    \"angular-ui-router\": \"~0.2.10\",\n    \"famous\": \"master\",\n    \"famous-angular\": \"master\",\n    \"angular-material\": \"master\",\n    \"angular-messages\": \"~1.3.9\"\n  },\n  \"devDependencies\": {\n    \"angular-mocks\": \">=1.2.\",\n    \"angular-scenario\": \">=1.2.\"\n  },\n  \"resolutions\": {\n    \"angular-animate\": \"1.3.x\",\n    \"angular\": \"1.3.x\",\n    \"angular-material\": \"master\",\n    \"famous\": \"0.3.4\"\n  }\n}\n. difference attached\nWhen height = true\n\nWhen Height = 76\n\n. hi michael,\nany update on this?\n. Hi Team,\nAny updates on this?\nRegards,\nvishal\n. ",
    "spraetz": "Awesome!  Right now i'm trying to get something working with physicsJS as the physics engine and Famo.us as the renderer and it's proving... difficult.  and I'm only caring about 2D. \nIs the new physics engine planned for a specific release? or is it just On The Roadmap :tm:  =)\n. ",
    "idanwe": "Great, thanks!\n. ",
    "jpdesigndev": "Same issue here. Can't quite figure out what's going on. Too new to jspm\n. @TheAlphaNerd jspm is my preference for front-end js assets. Unless, of course, it can't be supported.\n. @thebigredgeek I finally got this working using the jspm override config feature in the CLI\njspm install --save github:Famous/famous -o \"{\n  format: 'amd',\n  shim: {\n    '*/*': {\n      deps: ['../core/famous.css!']\n    }\n  },\n  dependencies: {\n    css: '^0.1.0'\n  },\n  directories: {\n    lib: 'src'\n  }\n}\"\n. @capaj It looks like they just added something that will work 2 days ago. https://github.com/jspm/registry/blob/master/package-overrides/github/Famous/famous%400.3.5.json\n. Also, pay careful attention to their directories object (lines 3-5). It exposes the dist folder which may not be desired. It depends on your needs. I'm using ES6 modules with JSPM/SystemJS (as is likely the case with the people interested in this issue), so I prefer the src files so I can import modules as needed.\n. ",
    "capaj": "@jpdesigndev actually jspm has famous override in it's own registry, so proper way of installing is\njspm install famous\n. ",
    "gnimmelf": "Still problems (maybe just my inexperience), since this fix does not allow for direct import of famo.us sub-modules as import 'famous/inputs/FastClick'. \nI can work around that by importing the global and then setting vars by dotting into the main object, but other packages (eg pilwon/react-famous and IjzerenHein/famous-sizeconstraint) that rely on the direct imports fail.\nI would assume that making all the famo.us sub-modules available for direct import would be desierable, as that would also minimize the build by not including unused sub-modules?\nSuggestions?\n. ",
    "vladpazych": "Okay.\nI just thought that there is out of the box solution, that I missed.\nThanks.\n. ",
    "Urigo": "Yes, this link works for me (and the first one still doesn't work)\n. Removed all extensions - still the same (also looked at the network tab and it looks like everything is loading):\n\n. ",
    "nevenisnoob": "i got the same problem on my mac...\n. ",
    "tomByrer": "http://famo.us/university/lessons/#/famous-101/displaying/3\nNot working (no Hello World) on Firefox Dev 37.0a2 (2015-02-15) Win7.1_64.\nWorking on Chrome 40.0.2214.111 (64-bit) & IE 11.0.15.\n. ",
    "jdarowski": "\nI can't see the page either.\nOS X 10.10.2, Chrome 40.0.2214.115 (and also latest Safari)\n. ",
    "matikucharski": "Same for me on Chrome 40 on Ubuntu 14 and Windows 8.1. On Firefox works fine\n. ",
    "koflaherty": "Excellent thank you!\n. ",
    "omasri": "sorry it was the browser.  The examples works again. going to have some fun exploring this week. closing the issue.\nHere's a little example of famo.us \"widgets\" running in a gazibit presentation layer. \nhttp://gazibit.com/show/707\nI noticed it gives us the same text blurring issue on element transforms.  our layer cleans up the blurr most of the times as you navigate.  We had to fix that issue when we transformed embedded video.\n. Couldn't find an answer, but the solution is to avoid the problem and just use one of the layout objects or add views.\n. I fixed the main delete issue.  Turns out through some bad logic in 1 particular case I would re-add the same view.  Since it would draw on top of the other one I thought there was only 1.\nSince the DOM is flat there it is virtually impossible for me to tell.  Making the DOM flat and putting all the nesting in the render tree is great, but it sucks for debugging if we can't see the render tree. \n. Yes it would be.  I was chatting to a friend and he was keen on making a nice chrome extension.  Do you have a code snipet on how to traverse the tree from a main context?\n. ",
    "wendy": "@TheAlphaNerd Yup, just did! Thanks for letting me know!\n. ",
    "FarhadG": "Hey there,\nIt depends on your theme directory. Earlier this year, we used a theme and then used the 'child themes' strategy within Wordpress to modify the theme to our needs. In doing so, you can include the necessary JS and dependencies within the theme directory. Let me know if that answers your question or if you need further assistance.\n. ",
    "adriano-di-giovanni": "Thanks for your reply, @alexanderGugel \nI mean something like a Backbone style extend\n``` javascript\ndefine([ 'famous/core/View' ], function (View) {\nvar\n    prototypeProperties = {\n      initialize: function () {\n        // ...\n      }\n    },\n    staticProperties = {};\nvar\n    MyView = View.extend(prototypeProperties, staticProperties);\nreturn MyView;\n});\n```\nI'd like to know if you think it could be useful and you plan to implement it or if you think it would not be worth it.\nThanks in advance,\nAdriano\n. Thanks a lot, @alexanderGugel \n. I'd like to also post the solution I ended up with.\nInstead of extending TouchSync I abstracted its payload manipulation into what I called an Action.\nGiven this base class\n``` javascript\ndefine(function (require, exports, module) {\nvar\n    EventHandler = require('famous/core/EventHandler');\nfunction Action() {\n    this._eventInput = new EventHandler();\n    this._eventOutput = new EventHandler();\n    EventHandler.setInputHandler(this, this._eventInput);\n    EventHandler.setOutputHandler(this, this._eventOutput);\n  }\nAction.prototype.getEventInput = function () {\n    return this._eventInput;\n  };\nAction.prototype.getEventOutput = function () {\n    return this._eventOutput;\n  };\nreturn Action;\n});\n```\nI started creating and using actions for each and every behavior\n``` javascript\ndefine(function (require, exports, module) {\nvar\n    TouchSync = require('famous/inputs/TouchSync'),\n    Action = require('types/Action');\nfunction TouchSyncAction() {\n    Action.call(this);\n    _initialize.call(this);\n  }\nTouchSyncAction.prototype = Object.create(Action.prototype);\n  TouchSyncAction.prototype.constructor = TouchSyncAction;\nfunction _initialize() {\n    _setupSync.call(this);\n  }\nfunction _setupSync() {\nvar\n  options = {\n    // options here\n  },\n  sync = new TouchSync(options);\n\nthis.getEventInput().pipe(sync);\n\nsync\n  .on('start', _onSyncStart.bind(this))\n  .on('update', _onSyncUpdate.bind(this))\n  .on('end', _onSyncEnd.bind(this));\n\n}\nfunction _onSyncStart(payload) {\n    // process payload\n    _trigger.call(this, 'start', processedPayload);\n  }\nfunction _onSyncUpdate(payload) {\n    _trigger.call(this, 'update', processedPayload);\n  }\nfunction _onSyncEnd(payload) {\n    _trigger.call(this, 'end', processedPayload);\n  }\nfunction _trigger() {\n    var eventOutput = this.getEventOutput();\n    eventOutput.trigger.apply(eventOutput, arguments);\n  }\nreturn TouchSyncAction;\n});\n```\n``` javascript\ndefine(function (require, exports, module) {\nvar\n    View = require('famous/core/View'),\n    TouchSyncAction = require('actions/TouchSyncAction');\n\nfunction CustomView() {\n    View.call(this);\n    _initialize.call(this);\n}\n\nCustomView.prototype = Object.create(View.prototype);\nCustomView.prototype.constructor = CustomView;\n\nfunction _initialize() {\n    _setupAction.call(this);\n}\n\nfunction _setupAction() {\n    var\n      action = new TouchSyncAction();\n\n    this.getEventInput().pipe(action);\n\n    action\n      .on('start', _onTouchSyncActionStart.bind(this))\n      .on('update', _onTouchSyncActionUpdate.bind(this))\n      .on('end', _onTouchSyncActionEnd.bind(this));\n}\n\nfunction _onTouchSyncActionStart() {\n    // your code here\n}\n\nfunction _onTouchSyncActionUpdate() {\n    // your code here\n}\n\nfunction _onTouchSyncActionEnd() {\n    // your code here\n}\n\nreturn CustomView;\n\n});\n```\nAny suggestion?\nThanks in advance,\nAdriano\n. ContainerSurface. Right?\n. ",
    "lukifer": "Following up, anybody had a chance to look at this yet? It's a major show-stopper on an otherwise production-ready app.\n/cc @wgester \n/cc @TheAlphaNerd \n. ",
    "KerimG": "Second this. Am reluctant to use or contrinute to the famo.us framework, because of how opaque development is. \nThere are people on reddit fearing that the project might be dead.\nOn February 26, 2015 7:23:05 PM CET, Andrew Reedy notifications@github.com wrote:\n\nIt would be nice to have some transparency, like a Trello board or some\ntype of internal development road map, so that developers who use\nFamo.us could plan accordingly. I know Famo.us is scaling up and opened\na new office, but it seems like releases haven't been very frequent and\nwe haven't heard any additional information on things like Famo.us\nCarousel, Famo.us UI Components, or any updates on how mixed-mode is\ngoing. \n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/642\n\n\nSent from my phone. Please excuse my brevity.\n. That's very reassuring. Would you mind linking to that info? Just want to read out of curiosity.\nDefinitely agree with your last point.\nOn February 26, 2015 7:47:41 PM CET, Andrew Reedy notifications@github.com wrote:\n\n@KerimG It's definitely not dead. They just raised around 25 mill in\nthis last round, so I imagine they are going through a rapid growth\nperiod. However, they shouldn't leave their early adopters hanging for\nso long.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Famous/famous/issues/642#issuecomment-76241159\n\n\nSent from my phone. Please excuse my brevity.\n. ",
    "kinkk": "@trusktr  +1\n. ",
    "LeJPR": "+1 for getting some further info on the direction with the new API - having been developing with the current version (understanding that its an early release and doing so at our own risk) it would be good to get some further info on the upcoming release - currently feels like us early adopters are being left in the dark!\n. ",
    "wangxiao": "try this https://github.com/leancloud/leanevent\n. ",
    "djindjic": "thanks @TheAlphaNerd. do you have any example code for proportionalSurface? I cant find it in docs.\n. I found a great solution. If anybody find this issue by search engine it could be worth to paste a link here:\nhttps://github.com/IjzerenHein/famous-sizeconstraint\n. thanks @alexanderGugel, that's it!\nOne more question, do I also need to put ColumnView.DEFAULT_OPTIONS = {}; in my constructor after calling super()?\n. thanks @alexanderGugel \n. @michaelobriena :cake: \n. I could add another node to my scene, but again, text in that node will not be scaled by animation changes. Also, I cant find any elegant html/css solution as famous are. I found view port scaling but it depends on windows size... I need some TextSurface but not Textarea.\n. @michaelobriena @TheAlphaNerd I've just tried with TextareaSurface and area is scaled fine, but text in area is with same size throw all animation :(\n. @TheAlphaNerd it's better news then a fixed issue! Thanks guys, I hope that engine will be great tool!\n. ",
    "kxprim": "@TheAlphaNerd The CLA is now signed. Thanks for merging\n. @TheAlphaNerd The CLA is now signed. Thanks for merging\n. ",
    "srazzaque": "@talves Thanks! Yes, the number of nodes definitely had the largest (visible) impact on the performance, I'll find a way to work this inspiration back into my CLJS code.\nDefinitely keen on putting MixedMode to the test once released :-)\n. ",
    "pkpkpk": "@srazzaque have you seen http://swannodette.github.io/2013/08/02/100000-dom-updates/ ?\n. I have a famous jar on clojars, I just published the repo here https://github.com/idiotslowdown/famous-cljs\nI have not used it with react yet... probably worth dissecting the famous-react integration repo. \n. @michaelobriena yes please, thanks man\n. ",
    "luposlip": "@sonwh98 did you find any way to do this? I'm looking for the same solution.\n. Thanks @sonwh98, will take a look at it!\n. ",
    "sonwh98": "@luposlip no integration with react/reagent but take a look at @pkillean repo. He has working examples of using famous as javascript interop. \n. ",
    "abepetrillo": "This seems to replace one problem with another. When you switch the modifiers, Mod seems to be ignored.\n. Ah, I think the align values have to be much higher, relative to the proportion size modifier perhaps? I'll play around with the numbers. Thanks @talves :+1: Does this mean we can close the bug? Or should the flipper be immune to what order the modifiers are in?\n. ",
    "Carlosriverae": "That's mostly due to the limitations of Chrome. I'd recommend building w/ Crosswalk ( crosswalk-project.org ) \n. Yeah sure, Android usually forces apps to use its own webview which is usually an old outdated browser. The nexus line has its own, galazy phones have their own etc, so consistency is not really there. However building with crosswalk lets you package a brand new browser into your app so that even old android phones use a newer version of chrome to display your app. This increases performance as well. You can test our our app ( requestedapp.com ), download it and play with the scrollview. It's definably not 100% smooth like our iOS app counterpart, but compared to when we did not use crosswalk, this version is a ton better! \n- Source: Our android app is build on crosswalk/famo.us \n. ",
    "BodhiHu": "Hi @Carlosriverae , can you give more details on those limitations?\n. Oh, gee, from their site this is really promising, I will definitely try crosswalk, many thanks for your help : )\nAlso I'm closing this issue, as crosswalk seems to be the solution.\n. For those hoping to get the latest news of famous, can follow Steve Newcomb's twitter: https://twitter.com/stevenewcomb.\nAnyway famo.us just felt to be the right way to create native like apps in HTML5, in an intuitive level.\n. @talves in that case I think not\n. @dcsan awesome work !\n. ",
    "rbabayoff": "This one:\nhttp://famo.us/docs/reference/\nIt seems it's being served from different servers than the main web site. Always problems loading pages there.\n. Your API docs are auto rendered using JSDoc, according to your web site. I'm sure there's a switch that allows you to do that. For an example of how it is now:\nhttp://famo.us/docs/api/latest/events/EventArbiter\nJust try and click on the red method name, i.e. setMode, and it's not a link (even though it looks like a link).\n. Hey, you can get it here:\nhttps://www.dropbox.com/s/c5304woadbqcf9m/famous-global.js?dl=0\n. Disregard, I found out that my app includes the famous package still too, indirectly. Closing this.\n. ",
    "particle4dev": "@amitchoubey what result after using crosswalk ? Can you share with us ? Thanks\n. @amitchoubey Thanks, it very helpful :) I also was trying to use crosswalk in my app yesterday but did not succeed. Can you share with me some tutorial or document about crosswalk?\n. ",
    "elkwood": "I'm sorry. Missing the \"new\" prefix when creating my objects.\nThe below call works just fine.\nnew famous.core.Engine.createContext()\nnew famous.surfaces.ContainerSurface()\nPlease close as this is not an issue.\n. ",
    "clockworked247": "@TheAlphaNerd is there a plan to make an updated set of demos?\n. @TheAlphaNerd ok, thanks for the update.\n. ",
    "bmustata": "This will be great and a important motivation to use this library.\n. ",
    "bradtm2000": "hmmm... I signed that a few days ago.  I'll do it again.  Done.\n. ",
    "dx9": "for sure\n. ",
    "DaveVoyles": "I found an old thread that illustrated what the issue was: https://github.com/Famous/famous/issues/274\nLooks like the URL needs to be changed. This could be confusing to folks who are new to Famo.us and just learning. \n. ",
    "kakajansh": "It is not scrolling because you have invisible surface on top here\nYou need to add zIndex: -1 property to your back surface and\nmodifier = new StateModifier\n    origin: [0.5, 0.5]\n    align: [0.5, 0.5]\n    transform: Transform.translate(0,0,-1)\n. ",
    "musnit": "Oh, the deviceWidth/deviceHeight calculations could probably be moved into another method that is run less often, if there are performance concerns with the extra code, but they will change if the device orientation changes, so cannot be calculated just at initialization. I'm not familiar enough with Famous's code base to know where a more appropriate place would be.\n. ooh a new famous, cool :D.\ni tested out this edge on the new version and there is no longer an issue :)\n. wrong repo\n. ",
    "makbol": "Due to new version of famous homepage I think this issue is no longer valid.\n. ",
    "kkirsche": "Yep, just doing this to everyone. Whether active or not no reason not to fix something like this.\n. Also their maintainer says they probably won't ever use it: http://stackoverflow.com/questions/24844901/bowers-bower-json-file-version-property\n. ",
    "alfonsoperez": "Yep thanks, that's why I closed the issue :-)\n. "
}