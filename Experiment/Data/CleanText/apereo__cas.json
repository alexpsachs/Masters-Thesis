{
    "rsutphin": "BTW, if you want to preview how GitHub will render this README, take a look at the branch in my fork.\n. ",
    "serac": "Scott is right that CharacterEncodingFilter should be activated by the DelegatingFilterProxy.  In any case I updated https://wiki.jasig.org/display/CASUM/Internationalization since it's our intention to set the encoding to UTF-8 out of the box.\n. I'm +0 on this as well.  If you feel strongly about it, Scott, go for it.\n. The scope of this pull looks far broader than it ought to.  The included changes go way back in time.  What's up?  In any case I'm -1 on this until further discussion happens on the thread you started on cas-dev, \"LPPE feature\".  I think I can come to consensus, but I'm not there yet.  Hopefully a little shared discussion will get us there fairly quickly.\n. Ok, I'm clear now.  Thanks for clarifying.  No concerns at all then.  Sorry for the noise.\n. Yeah, I'm good.  Sorry for the noise.\n. +1 to merge to master.  I'll do it by Fri if Scott doesn't get to it before then.\n. The subsequent Jira issue you created is making the configuration of time intervals across all components less consistent.  We've used ms pretty consistently across the board to date.  I have reopened the additional issue you created, https://issues.jasig.org/browse/CAS-1104, because these changes are have reduced consistency across all the expiration policies.  The issue of consistency is worthy of discussion before further action is taken.\n. I just sent a pull for what I had.  I'll take all your feedback together and send an updated, rebased pull to make it easier to merge in.  That said, I think you'll find that the constructor change is disruptive but hugely valuable, and in that case deployers would have to touch their configs, making the name-change a non-issue.  On the other hand, it's the change I'm least wedded to.  Just thought I'd try to slip that in for consistency sake with the underlying library.\n. We can approach it that way by avoiding the name change and simply overloading the constructor.\n. Any further feedback?  I'm happy to make changes that address feedback above, but as I said I'd like to do it on one shot.\n. Closing this pull request.  Will respond to Scott's feedback and submit new pull request.\n. Looks interesting, but at first glance this doesn't look like a good fit for including with core.  There's no precedent for an integration module that supports a single product.  I'm happy to consider rationale for inclusion, but that should happen on cas-dev.\n. Works for me.  I'd love to have some place to put together code that's not a good fit for core, yet somewhere that's both convenient and actively maintained.\n. Let's move this discussion to cas-dev, where hopefully more folks can follow the conversation.  Eric, can you start the thread?\n. Merging based on consensus and Scott's invitation.\n. Cursory review looks good.  I believe there have been enough eyeballs on this to move forward.\n. I reviewed a deployed vanilla CAS with these changes and it looked good.  The spacing between the copyright notice and the \"Powered by\" text looked a little tighter on the service manager than main page theme, but the overall design is closer and it's an improvement.\n. I should note that I made a valiant effort to preserve the public APIs of the throttle components in this patch.  The only notable change was the addition of InspektrThrottledSubmissionByIpAddressAndUsernameHandlerInterceptorAdapter#setAuthenticationFailureCode() since the failure code is under the control of deployers and therefore was required to be configurable.\n. I plan to merge this in manually since it's been over a week and there has been no action or comment.  I invited review on cas-dev, https://groups.google.com/d/topic/jasig-cas-dev/iIt3-lAeA-4/discussion.\n. Closing based on CAS-USER discussion, https://groups.google.com/d/topic/jasig-cas-user/YFU_IzEHODc/discussion.\n. Found a simpler strategy that precludes the need for changing CasDefaultFlowUrlHandler.\n. Your observation about potential password disclosure with this component is duly noted and it's a substantial problem with CasDefaultFlowUrlHandler.  Unfortunately, we've investigated a number of potential fixes with that component and all have limitations.\n. New pull request: https://github.com/Jasig/cas/pull/89.\n. It's easier to follow if you simply push additional commits to the same remote branch as that of your initial pull request.  I'll add a cross reference to that one here and then close the original.\n. I suppose it's just a matter of preference.  I like to see all the commits that go into a merge.\n. I believe this is ready to go.  Any major concerns remain?\n. I capitulated on constants that were used exclusively for implementation details by making them private.\n. Overall I like the idea of this optimization, but the implementation matters quite a bit in my mind.  I'm not sure we've found the ideal implementation yet.  For what it's worth, we reduce the memory footprint of login sessions by aggressively swapping out to disk beginning at 3 min using Tomcat's PersistentManager.  This allows us to have extremely long-lived sessions to deal with the case where the user hits the login form and then is pulled away for a while and posts credentials much later.  You'd be surprised how frequently this happens in our environment that it was a welcome fix when we went to 4-hour sessions.\n. I agree that immediately terminating the session on completion of the login flow has advantages.  Just need to get the right implementation.  I believe a FlowExecutionListener [1] may be promising.  My reading of the sessionEnded event suggests we might simply be able to hook a custom listener there and invalidate the session safely with a one-liner.\n[1] http://static.springsource.org/spring-webflow/docs/2.3.x/javadoc-api/org/springframework/webflow/execution/FlowExecutionListener.html\n. I intend to do some testing with jerome's deletesession branch and report back.\n. I tested the current implementation of flow listener that invalidates the session on the sessionEnded event, and it works as designed.  With the listener in place, the steady state number of sessions is dramatically lower than without it.  That will provide a dramatic improvement for our environment, and arguably in general, and I'm enthusiastically +1.\n. I think it's perfectly acceptable that not all ticket registries implement TicketRegistryState; the fact is that some simply don't support ticket counts as specified on the interface.  The workaround to leverage Integer.MIN_VALUE as an unsupported flag is much less clear than simply not implementing the interface.  On the other hand, the present design is apparently causing deployment headaches, so the change is a helpful improvement in that view.  I'm somewhat ambivalent but I'd go with facilitating deployment considerations if pressed.  +1\n. Misagh, could you take this to the Unicon UX folks and get their feedback and follow up here?  I'm loath to take a fairly big change in UI strategy without a +1 from some folks that do this daily.\n. Doh.  My bad Chris.\n. My review and testing has shown that the service manager works as expected with this patch applied, where no changes are necessary to securityContext.xml.  I should note, however, that changes to this file are indeed required to actually move service manager to another base URI, but my intention is that that would be a deployer concern.  The intent of this patch is simply to make that move possible without view or controller modifications.\n. That's a good suggestion and I imagine it would simplify the customization I had in mind.  Since I'm pressed for time, though, I'd like to treat that as a future refinement/enhancement.  Divesting the service manager as a separate webapp may have some impact on the implementation, so waiting seems wise from that view as well.\n. I'll close and reformulate against master for a clean patch.\n. I fixed the minor coding issue Scott pointed out, otherwise all feedback looks positive.  J\u00e9r\u00f4me, merge away.\n. Looks good, Scott.  Thanks for getting to this so promptly.\n. +1 from me but let's mention it on the cas-dev thread to document.\n. Big +1 on this.  Authentication failures generally should not produce stack traces.\n. Since this will end up in a version with major version bump, I'd recommend going one step further and defining table and column names in the JPA annotations.  While it's out of scope for CAS-1134, it's related and I thought I would mention it here.  I'd recommend a follow-up discussion on cas-dev w/r/t naming conventions.\n. It's a moot point by now but I want to respond to Scott.  I fully support taking this patch then improving subsequently.\n. +1\nThis looks incredibly helpful.  Thanks for taking the initiative.\n. My overall assessment to this pull is that there's a lot of build machinery for arguably little gain. Additionally, it seems the approach makes assumptions about common logging levels that developers would increase, which may not provide adequate flexibility. I'd like to see something that easily supports ad-hoc customization; otherwise manually tweaking logging as needed is more flexible at the cost of some tedium.\n. I would like to underscore Scott's concern. We got dinged on a security review of one of our internal apps for a case exactly like this: we had not considered that parameterized error messages could contain content provided by the user, which created an XSS vector when rendered as HTML to the client.\n. +1\nI gave a pretty cursory review, but with Misagh's more thoughtful review I'm confident we're good to go on this one. I'm eager to see the forthcoming work where the functionality is restored in a separate webapp. I hope we'll use that opportunity to leverage annotated controllers and simplify Spring wiring.\n. +1\nI can't do the merge from the Web UI, so feel free to push your version at your convenience.\n. We need a Jira issue attached to this so we will have a record in the changelog.\n. +1 on J\u00e9r\u00f4me's suggestion for documentation. Both a component diagram and user interaction diagram would help me dramatically with a general understanding of LPPE, not to mention making code review easier. I don't want to create a bureaucracy to LPPE changes by putting up documentation requirements, but it would clearly help both me and J.\n. No monitors call getTickets() directly. The SessionMonitor monitors TicketRegistry instances that implement TicketRegistryState, and afaik all the implementing registries do something sane for ticket counts.\n. +1 to merge\n. I'm open to this functionality, but there are some potential problems in the implementation. Most notably is that some of the GeneralName types may be rendered as byte arrays, which is not accommodated by the implementation. If we know what types those are, it may be best to simply drop support for them at this time. Alternatively, vt-crypt may be able to lend a hand in decoding them.\nFirst step is to fix whitespace. CAS coding convention is 4 spaces for indentation, no tabs.\n. I provided a brief but thoughtful high-level description of the changes on the Jira issue. I'm sure that a more detailed description could be provided, but I wanted to get some feedback on exactly what further description/documentation is needed. I wonder whether a developer call and screencast to walk through the changes would be helpful. Other specific recommendations for additional documentation?\n. Closing per agreement on cas-dev. I will refactor the changes here into a larger number of more incremental changes to facilitate review and issue another pull request. Work will be done on a feature branch in the Jasig/cas repo.\n. I'd like to move forward with this. It addresses the issue and hopefully it will be a moot point as we move forward with new authn API for CAS 4.\n. This is probably the right solution since it adds an additional measure of safety, but it feels like work we should not be doing. We should probably generalize NoSuchFlowExecutionExceptionResolver to handle other classes of errors such as BadlyFormattedFlowExecutionKeyException. Since FlowExecutionRepositoryException is a common ancestor to these and other error cases we would likely want to hide from the user, it seems reasonable to simply swap out NoSuchFlowExecutionException for FlowExecutionRepositoryException.\n. Please ensure that the pull is merged into both master and 3.5.x branches upon acceptance.\n. Regarding your question: Does it have to become a separate pull that is targeted for 3.5.2?\nWe don't have a policy. For issues I've handled, I simply use the recipe here for rebasing a patchset onto another branch and then push it up directly:\nhttp://stackoverflow.com/questions/509859/what-is-the-best-way-to-git-patch-a-subrange-of-a-branch\nYou can do as you like, but if you want to leverage the GitHub pull request facility, you will have to apply the patch to your repository via some means (recommended above), then do a pull as normal targeting 3.5.x branch. That feels like additional noise if we've already agreed to the changes and that it can be targeted to another branch.\n. +1 to merge\n. This should be considered for merging into master as well (e.g. via cherry-pick).\n. I will manually apply to 3.5.x branch upon acceptance.\n. The general approach you described in the pull request sounds great. I'll test these changes by incorporating your branch into our overlay and running it through paces in our dev environment. That's a fairly thorough test of the SAML 1.1 support; I think it would be safe to assume that by association SAML 2 support is sound if 1.1 checks out.\n. Still testing SAML 1.1 support. Initial testing looks good, but there have been some hiccups catching all the places where wiring in SAML support is required. It will be vital to provide comprehensive documentation. The good news is that I will have a patch set from our overlay on which to base the instructions. I hope to wrap up by middle of next week.\n. No worries. I should have thought to review your overlay changes -- you mentioned it in the pull request description after all. In any case I think I've found all the places where changes are required. Writing docs after the pull is what I had in mind as well, just wanted to emphasize the importance of good docs for this change.\n. I think I'm done testing. Our overlay with this patch has been running in our dev environment for a week now, where the SAML support would have been thoroughly flexed. No reports of problems or other issues.\n. +1\n. The log4j.xml that ships with CAS provides a good start. In particular you will get auth INFO messages. I'm pretty sure that we should address your issue with documentation.  We run several categories in debug to provide supplementary audit info for troubleshooting and abuse investigations. I'm thinking we should share our advice as a starting point on the CASUM wiki. I'm open to this change but I'd like to explore documentation first and see where that gets us.\n. +1\n. No concerns on the change generally. Please run mvn:notice from project root and address any licensing issues as part of this change.\n. Big +1 generally. I saw at least one thing in the ruleset that should be changed to be consistent with de facto or documented standards (see by-line comments), but it's an excellent first step. Thank you for taking the initiative on this! I've wanted to do this for years.\n. +1 on approach to code cleanup on same Jira. Hopefully there will be agreement on requiring Checkstyle for successful build, which is the only decision point remaining on this pull.\n. I have duplicated the test failure above. I'm +1 on this once we get past the build errors and there's at least a couple independent verifications of a clean build. All credit to you, @mmoayyed, for taking on this yeoman's task. It's been long overdue.\n. Looks like the test failure is fixed, but now the build is hanging, apparently running checkstyle plugin against the cas-server-support-spnego module:\n[INFO] --- aspectj-maven-plugin:1.4:compile (default) @ cas-server-support-spnego ---\n[INFO] \n[INFO] --- maven-checkstyle-plugin:2.10:checkstyle (checkstyle) @ cas-server-support-spnego ---\n* hangs here *\nI saw this behavior on both my Linux workstation and my MacBook, and I'd cleaned out org/jasig/cas in my maven repo prior to building in both cases. I will admit I haven't dug into the problem, but I can provide more details (e.g. maven debug output) Monday if needed.\n. Still getting build errors:\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Jasig CAS Generic Support 4.0.0-SNAPSHOT\n[INFO] -----------------------------------------------------------------------\n...\nResults :\nTests in error: \n  testFailsUserInMap(org.jasig.cas.adaptors.generic.RejectUsersAuthenticationHandlerTests)\nTests run: 25, Failures: 0, Errors: 1, Skipped: 0\n. Successful build!\n. +1\nKeeping with latest and greatest is good, but Spring upgrades frequently cause pain. Keep vigilant for issues that may arise from this bump.\n. +1\nI'm very pleased where we landed on this. Thanks for your perseverance seeing this through.\n. +1\nI'm very pleased where we landed on this. Thanks for your perseverance seeing this through.\n. -1 on merge.\nThe uncertainty around impact to clients is a fairly big red alarm. We should proceed based on facts, not assumptions about expected impact. What integration testing with clients have you done around this change? Hopefully you have done testing and you can just cite the results, and my fears will prove unfounded. The \"official\" Jasig clients listed at https://wiki.jasig.org/display/CASC/Home would be a suitable minimal set of test cases.\n. -1 on merge.\nThe uncertainty around impact to clients is a fairly big red alarm. We should proceed based on facts, not assumptions about expected impact. What integration testing with clients have you done around this change? Hopefully you have done testing and you can just cite the results, and my fears will prove unfounded. The \"official\" Jasig clients listed at https://wiki.jasig.org/display/CASC/Home would be a suitable minimal set of test cases.\n. I think some testing prior to acceptance is warranted for a change that could break clients. That seems perfectly reasonable. If you want to vouch for the above clients without explicit testing, I would take you at your word. Wider audience here means the myriad \"unofficial\" clients, and I would agree the RC well suited to that case. I should note I would feel entirely different about this change if it were bound to a new endpoint such that the impact to existing clients would be optional and explicit. I will be sure to voice that recommendation in CAS protocol feedback thread.\n. I think some testing prior to acceptance is warranted for a change that could break clients. That seems perfectly reasonable. If you want to vouch for the above clients without explicit testing, I would take you at your word. Wider audience here means the myriad \"unofficial\" clients, and I would agree the RC well suited to that case. I should note I would feel entirely different about this change if it were bound to a new endpoint such that the impact to existing clients would be optional and explicit. I will be sure to voice that recommendation in CAS protocol feedback thread.\n. > Fair enough...sure wish some of the client devs would weigh in! :)\nThey did, but the CC wen't to me privately:\nhttps://lists.wisc.edu/read/messages?id=26846569#26846569\n\nI'll see about spinning up something for mod_auth_cas.\n\nLooks like m-a-c is covered already. I think we're in best shape for Java\nand phpCAS, but wouldn't hurt to reach out. Who's heading phpCAS now that\nJoachim moved on? I know Scott Battaglia is following the discussion w/r/t\nJava. We probably need to reach out to Scott Holodak for feedback on .NET\nclient.\nM\n. > Fair enough...sure wish some of the client devs would weigh in! :)\nThey did, but the CC wen't to me privately:\nhttps://lists.wisc.edu/read/messages?id=26846569#26846569\n\nI'll see about spinning up something for mod_auth_cas.\n\nLooks like m-a-c is covered already. I think we're in best shape for Java\nand phpCAS, but wouldn't hurt to reach out. Who's heading phpCAS now that\nJoachim moved on? I know Scott Battaglia is following the discussion w/r/t\nJava. We probably need to reach out to Scott Holodak for feedback on .NET\nclient.\nM\n. +1\nWe will want to review after feature-new-authn-api merge with master.\n. I think @battags raised a reasonable point above, but I'm in favor of this generally.\n. Closing due to committer -1. I'm in agreement with @apetro that we want this feature, but we need a fresh, clean try.\n. +1, just one more place where we need to factor out SAML from other components. I suppose https://wiki.jasig.org/display/CASUM/MemcacheTicketRegistry needs to be updated for the memcached+cas-server-support-saml use case.\n. For the benefit of other reviewers, links to the rendered HTML:\n- http://htmlpreview.github.io/?https://github.com/robertoschwald/cas/blob/09394a6829c299e2ccfe2a606a23336a5518d3ce/cas-server-protocol/3.0/cas_protocol_3_0.html\n- http://htmlpreview.github.io/?https://github.com/robertoschwald/cas/blob/09394a6829c299e2ccfe2a606a23336a5518d3ce/cas-server-protocol/2.0/cas_protocol_2_0.html\n. I had some relatively minor style and organizational feedback, but I'm +1 generally. I agree with Bill this is a work in progress with respect to technical content.\n. Feeling very good about this overall. I think my biggest concern is the changes around the mechanics of ticket expiration. I like them, but it's a substantial change and one we will have to regression test thoroughly to ensure functional parity with previous versions.\n. Feeling very good about this overall. I think my biggest concern is the changes around the mechanics of ticket expiration. I like them, but it's a substantial change and one we will have to regression test thoroughly to ensure functional parity with previous versions.\n. Sounds good. I'm reviewing your recent commits now. My only concern at this point is synchronization around destroyTicketGrantingTicket/logout. I believe the existing implementation is sufficient for now as it appears to have the same synchronization characteristics as the existing code, but I think we may want to carefully consider whether we need more locking. Still thinking about it for my part.\n. +1\n. I plan to block out some time tomorrow for careful review.\n. Looking to summarize status of this pull. I believe we're waiting on a commit to leverage Message or a subclass to communicate expiration details up the stack to the Web tier instead of a custom exception for the \"about to expire\" case. Anything else? Eager to merge this and keep going.\n. +1 to merge\n. No concerns here. You're our OAuth lead, so if you're good, I'm good.\n. +1 to merge. This looks good and I'm eager to get it into master to facilitate integration testing.\n. @apetro, yes, clients are responsible for issuing a redirect back to server. In a future optimization we might parallelize multiple logout requests at the client, but in any case the client logout ends with a redirect back to the server to record the result and get the next one (or batch) of services to log out of.\n. As part of integration testing in our environment after we cut the RC, I will work up a patch to the Java client in order to test further. It's reasonable to expect Java CAS client support for this feature in the same time frame as the 4.0 final release.\n. Good question @apetro. It's certainly an important aspect of the single sign out process, but it's not strictly \"CAS protocol\" fodder in the sense that it attempts to implement a SAML protocol interaction. We've arguably blurred the lines in the past with respect to what's a CAS server behavior and what's a CAS protocol behavior. I'm sure we need to document this somewhere, but not sure where exactly. Suggestions welcome.\n. +1 to merge.\n. Pushed commits to address code review feedback. I plan to merge this after 0900 EST (1300 GMT) tomorrow. I plan to subsequently issue a pull request for feature-new-authn-api onto master to get the ball rolling toward 4.0-RC1.\n. +1\nThis should make extending Web-tier components easier for deployers at the expense of some duplication of configs, but that seems like a net gain.\n. I will look at conflicts in my local copy and consider pushing some additional commits to resolve them.\n. I'm in merge hell right now trying to sort out all the conflicts. New plan is to push up a \"4.0.x\" branch to my repo with the merge result and we can do a final review there. Most of the conflicts are due to CS rules, but there are some logical changes, mainly with SLO, that could benefit from a final review. I'll post a link to the repo when it's ready.\n. Here's the merge result:\nhttps://github.com/serac/cas/commits/4.0.x\nIt's fairly gnarly due to the CS compliance and some whitespace changes. All the unit tests pass, so that gives a fair bit of confidence, but we're most likely going to need to do post-merge cleanup/tweaks as we find them.\nI plan to merge this manually after 0900 EDT (1300 GMT) tomorrow.\n. Bummer. I got a clean full build on my box prior to pushing this, so I guess something is amiss with my working copy. I'll pull down a fresh clone and get this fixed.\n. This is a pretty weird platform dependent problem that I don't believe I can fix on OSX. HFS+ is a case-preserving case-insensitive filesystem so I can't even see CredentialsToLDAPAttributePrincipalResolver.java, which is clearly in the repo:\nhttps://github.com/Jasig/cas/tree/master/cas-server-support-ldap/src/main/java/org/jasig/cas/authentication/principal\nI believe it should be sufficient to simply delete CredentialsToLDAPAttributePrincipalResolver.java. Can someone try that approach on Windows or Linux and push up a commit if that works?\n. @mmoayyed, thank you.\n. Can you push your change with CredentialsToLDAPAttributePrincipalResolver removed?\n. First person to get this fixed wins a cookie ;)\n. Removed file in af89359. @leleuj, please let me know if Bamboo build is fixed.  FWIW, I get a clean build on Linux with this change.\n. Bamboo build looks fixed with af89359, https://developer.jasig.org/bamboo/browse/CAS4-TIB.\n. Sure. Explicit scope is good here since it's strictly a runtime dependency.\n. Guess we have to trust the guide, which I followed for this task:\nhttp://static.springsource.org/spring-webflow/docs/2.3.x/reference/htmlsingle/spring-webflow-reference.html#el-portability\n. A better answer: I plan to integrate 4.0 RC1 with our overlay for integration testing where I'll be able to get ~85% coverage. I'll file Jira issues as I find them if anything comes up.\n. I (apparently mistakenly) thought this was a simple feature. It's certainly easy to implement in any number of ways. I'm going to give this a little more energy and hopefully we can come to consensus. If not I'll punt to 4.0.\n. Looking for feedback on these commits. I'm inclined to proceed unless there's strong objection.\n. I hope to test front-channel SLO as part of testing after we cut the RC and I integrate it with our overlay. I'll file issues if and when I find them.\n. I plan to merge this first thing Monday morning unless there is strong objection.\n. +1\nI trust you've got this covered since you're the maintainer.\n. This will have to go into RC2 or final. RC1 is already out the door.\n. https://issues.jasig.org/browse/CAS-1324 may provide some remediation with the current message.\n. Can you please provide an additional pull request for this feature against master? We presently have no plans for further 3.5.x releases, but we would consider it for meaningful features, which could include this. A patch against master, on the other hand, will be released with CAS 4.0.\n. Thanks -- I appreciate your quick response.\n. Why don't we just push all JRadiusServer configuration outside our components and take an instance in a constructor? Now is a good time for changes that break configuration or are otherwise not backward compatible. The benefits would be reduced code and ability to support new features/configurations in the jradius components without having to explicitly support them.\n. Proposed alternative, pull #304. Review and feedback welcome.\n. @spaetow, are we in agreement that #304 is a better solution? If yes I will close.\n. See the /test-context.xml in https://github.com/serac/cas/commit/3aa154bb641033af9e79343b1a0db0a945c2003d for Spring wiring example.\n. Thanks for this. We need better test coverage for the LDAP components -- unit test coverage should have identified this. I'm actively working on a better test harness, and will include a fix for this and any other defects revealed by improved tests in that unit of work.\n. Correct. I intend to provide a fix for this bug with thorough test coverage over LdapAuthenticationHandler and all the other LDAP components. Hopefully today. I've invested quite a bit of time in a test framework for LDAP, which has been sorely lacking for the entire 3.x branch. With a decent test framework we'll have a chance of catching errors like these in the future before we ship code.\n. Superseded by #291.\n. +1\n. I'm leaning -1 on this, but hostname disclosure is generally benign. If an organization considers hostname disclosure a security risk, they're doing it wrong. That's security by obscurity at its finest. There may be other reasons to avoid hostname disclosure, but security-oriented reasoning isn't justifiable. There's no security risk with this change.\n. Human-readable suffixes are important for diagnostic/troubleshooting use cases. I realize some infrastructure devices don't care as long as they're unique, but we benefit from suffixes that easily identify the node that generated the ticket. Maybe some folks read 32-char hashes, but they're not user/technician-friendly. Brevity is also a concern when you're dealing with large numbers of tickets. That extra ~25 characters over 100K tickets matters to a caching ticket backend.\n. I will merge this evening unless there are further comments.\n. I will merge after COB Wednesday (1700 GMT-0400) unless there are any concerns.\n. Overwriting the principal is the intended behavior; in fact it's exactly the case for which it was developed. Consider the X.509 + LDAP resolution case. The credential looks like CN=Bob,OU=CAS,DC=jasig,DC=org, and you want to end up with a principal \"bob@jasig.org\" coming out of the authentication pipeline. You'd configure a list of (X509SubjectIdentfierPrincipalResolver, PersonDirectoryPrincipalResolver); the first would extract \"Bob\" and the second would use that as a query input to resolve the mail attribute from the directory.\nThe implementation of supports is merely sufficient to support the primary use case described above. Your proposed implementation would work as well, but I'm not sure what additional use cases it would support. Can you provide a candidate use case?\n. This looks like a good change simply for the fact that it better follows our design philosophy of using interfaces at component API wiring/integration points. I would like to discuss your use case a little further. The examples you cited (tickets, servlet container sessions) naturally fall into distinct namespaces, so there would be no overlap in the key space. It's hard for me to imagine a case where a memcached instance dedicated to CAS, which I would argue is a deployment best practice, would encounter key collisions even when storing a number of different kinds of data. Can you propose a reasonable example where you'd expect collisions to occur  in practice where a namespace prefix would be required?\n. Thanks for clarifying the use cases. The tomcat global JNDI resource and mysql use cases seem the most compelling, but as I said this change is fully in line with what we do elsewhere.\n+1\n. The explicit assignments are indeed necessary. Serialization is tough. We need to take a thorough pass over the codebase with serialization in mind; it's one of the most important services authentication and ticketing components must support but we've treated it in many cases as an afterthought. This fix feels icky, like other changes for better serialization support I've made; I'd like to address this in a broader and better fix in the future, but I suppose it will have to wait for the 5.x line. This touches so many components that it will require API changes.\n. So are you +1 on this? If yes, merge at your convenience.\n. This is an alternative to #283.\n. I added a Spring context and unit test to verify wiring and to demonstrate usage.\n. Pushed commit to fix protocol naming issue pointed out by @spaetow.\n. I'd recommend we merge and move forward on @spaetow confirmation this works. If finality/extension of RadiusClientFactory is a sticking point, I'd happily change it to unblock.\n. Sorry, thought we already took action on this.\n. +1\n. +1 Fixes for concurrency bugs seem worthy of an upgrade.\n. I wouldn't think changing defaults qualifies as a feature. Did I miss something?\n. We have several issue types: Bug, Improvement, and New Feature among them. This is marked as a Security Bug, which seems reasonable, but it just as easily could be considered an improvement. There doesn't appear to be any new functionality, which is a reasonable criterion for \"New Feature.\"\n. Woops, looked at wrong issue. CAS-1355 is marked Improvement, which makes sense to me.\n. Fair point. I think there's good reason in this case. I nearly always toggle this off when setting up new services and I've wished myself it was off by default. Our assumption is that other deployers are in the same boat.\n. I plan to merge this Wednesday unless there's a -1. Most of the feedback on #318, which this pull supersedes, was favorable and it seems reasonable to move forward unless there is strong objection.\n. Thanks for merging @leleuj -- I simply forgot about it.\n. +1\n. +1\n. I'm happy to reduce timeouts if we are fairly confident that the tests will pass on a variety of hardware. I'll merge this pull into a local branch and report back. I have fairly new and relatively fast hardware.\n. I get a clean build with these changes. The following is a comparison of time mvn clean package on the candidate branch versus master.\nartbristol/CAS-1322:\nreal    1m46.275s\nuser    1m45.504s\nsys 0m9.684s\nJasig/master:\nreal    2m24.955s\nuser    1m53.494s\nsys 0m10.165s\nThat's a substantial improvement and I'm willing to take it if we get another confirmation of build success from another developer. Given @mmoayyed 's difficulty with building for the last release, I'd appreciate confirmation on his development workstation.\n. +1\n. +1\n. +1\n. +1\nI think this will be a valuable improvement.\n. I will review carefully in the next few days.\n. +1 Looks good. I appreciate your taking the time to raise the problem on the mailing list and seeing through to a clear solution.\n. +1. Looks good. I'm glad to see that it's really just a matter of conforming to the existing CAS 2.0 protocol validation response JSP logic. I appreciate the additional test coverage.\n. At what point will notice:check and license:check happen if not at release time? We want these to happen at some point during the release process I would think.\n. Makes sense. +1\n. +1\n. I'm strongly opposed to the current behavior because it violates the principle of least surprise. If you submit credentials to an expired flow, it appears to be a glitch to arrive at the login form again with no message. It would be better to explain to the user what has happened, which is the spirit of this pull and (details aside) I agree with. I'm open to discussion of the best way to present this information (wording, UX).\n. With respect to \"just works\" we are testing the following in our dev environment:\nhttps://github.com/serac/spring-webflow-client-repo\nSince flow state is stored in a client-side parameter, there is no need for worrying about session expiration and the root cause of the case above is removed. We're planning ultimately to leverage this component for a more ambitious use case (fully stateless cluster), but I believe it's a viable solution in line with @wgthom's \"just works\" goal.\n. @leleuj , correct placing all flow state on the client means there is no limit to the length of time flow state is maintained. The user can show up to the login form today and post tomorrow -- it just works. I've tested some pretty outlandish time frames and it \"just works.\"\nI discussed security generally at length on the project README, so you can refer to that for background. As far as the login ticket specifically, it works exactly like it does today. The LT is placed in flow scope and then verified at the server when the user posts the login form. The mechanics of maintaining flow state are of course different but it compares favorably in terms of security with the current mechanism of a secret authoritative value known exclusively to the server. AES encryption effectively keeps the encoded state knowable only by the server even though it is shared with the client.\nI should also note that client-side flow storage also alleviates an edge case problem where a user is attempting to access multiple CAS-protected resources simultaneously (i.e. multiple browser tabs). At present the likelihood of successfully authenticating is 1/N where N is the number of CAS-protected resources; the root cause is the creation of multiple sessions, and consequently flows, yet only a single cookie is maintained by the client for the CAS server. The net result is a potential mismatch between the LT and the session, which causes the LT to be rejected upon post. When flow storage moves to the client, the LT and the flow state are maintained in tandem and the problem is resolved. Granted it's an edge case, but an important one for some of our vocal users.\n. @fjollberg , I think any text we might display would strive for both clarity and brevity. While I agree it's an edge case, it's more common that you might think. You can also encounter this situation in a HA environment when you restart a node and users are moved to another node in the cluster. My logs are chock full of the traces of this error condition when I do host restarts (new deployments, maintenance, emergencies, what have you).\n. If we're looking to refactor, I hope we'll consider painting bigger and leveraging httpcomponents or similar like @leleuj suggested. If nothing else the need for configurable hostname verification and PKI trust material is a compelling real-world deployer need that should be addressed.\n. I feel strongly that back-channel message delivery should be async by default. I would recommend 3s timeout by default. Both should be configurable.\n. Somewhat offtopic, but wanted to comment so we don't lose it. I'd really like to make the protocol docs part of the GitHub pages documentation, https://github.com/jasig/cas/tree/gh-pages.\n. +1 Nice\n. Looks good generally. I'm +1 provided the comment about the type of the ivSize variable is addressed.\n. I sure hope so, or it's a lot of work in vain. The flow would have to be different than what @mmoayyed mentioned. You'll have to collect credentials and store/buffer them somewhere (flow scope?), then submit them in a batch to AuthenticationManger#authenticate(Credential ... credentials).\n. Keep us posted on the MFA/CAS project you mentioned. Maybe it will produce some requirements to further refine CAS APIs, including authentication.\n. Looks good. +1 to merge\n. +1\nWe might need to discuss naming consistency in the near future. I see the potential for some mixed naming between \"v3\", \"p3\", and \"CAS3\" if we continue to grow v3 while supporting v2 protocol behavior. A consistent naming strategy in the source would be helpful to keep things straight.\n. I must admit I'm not crazy about /p3, but it satisfies the requirements: identifies a protocol v3 endpoint, avoids collisions with RESTful endpoints that use /vN naming (which is arguably better). I'm open to a name game if anyone else wants to play.\n. +1\n. Looks good. Thanks for your contribution.\n. I'll push a whitespace-fix if needed, which does indeed look necessary. In reviewing the commits in order it looks like it was fixed, but the final diff was off. Guess I just missed it in haste.\n. Just pulled from master and indentation looks correct in all files modified by this commit.\n. @afolgado, some responses to your suggestions.\n1. I believe the value of the pwdExpireWarning operational attribute is reflected in the data returned in the ppolicy response control that is conveyed by ldaptive to CAS components. Do you have any evidence to the contrary?\n2. Regarding the apparent off-by-one in graceLoginsRemaining, it appears to be a problem with OpenLDAP, http://www.openldap.org/its/index.cgi/Incoming?id=7596;selectid=7596. The tentative plan is to account for that in ldaptive components.\n. I plan to rebase these commits onto master to get a clean merge. I'll close this pull once I get that one prepared.\n. > I think it's much better from the user's point of view to say \"password expires today\" than \"password expires in 0 days\".\nAgreed, but I think we're going to have to take that as a future enhancement.\n. Superseded by https://github.com/Jasig/cas/pull/397\n. Just realized that the last couple commits are based on an ldaptive snapshot that's not published anywhere. I'm working on publishing them in a public repo, then pushing one more commit that mentions that repo in the ldap module.\n. > I would remove the LdapPasswordPolicyConfiguration and have a PasswordPolicyConfiguration in the AccountStateHandler: what do you think?\nThe design makes sense to me. AccountStateHandler is an implementation detail for LDAP. The implementation for a database handler might look different, but the design of providing a technology-specific subclass of PasswordPolicyConfiguration to an AuthenticationHandler would be a consistent pattern. The details of how password policy is computed and applied is a detail to be determined by the collaboration of those two components.\n. I believe we're reaching consensus on this. I plan to merge after 1200 EST (GMT-5) Wednesday.\n. I went with your suggestion of putting PasswordPolicyConfiguration in the AccountStateHandler, which has been renamed LdapAccountStateHandler. I added an inline comment to 78ea2bd to draw your attention to the changes.\n. > Even with the doc, it took me a good while to get everything in order. I'll update the doc based on that experience, but having a functional example speaks much louder than words.\nTotally agree. Theming has always been a pain point and anything we can do to provide guidance would surely be welcomed by deployers.\n. Good suggestion on test. LDAP tests are notoriously difficult due to lack of a test fixture that provides a directory to test against, but testing encoding may be possible.\n. +1\n. The Travis build is failing on openjdk7 in the jboss integration module, which I would imagine is caused by a networking/environment issue unrelated to this change. Proceeding with merge.\n. I have not reviewed yet, but my impression is that it's way too late in the 4.0 release cycle to make a change of this scale. While I'm sympathetic to the potential simplifications it may make to deployers, most of them have already worked around the issue and it's likely to break even on benefits: some will benefit while others will curse us.\n. This looks good generally. I've found that working with the BC ASN.1/DER parsing components can be brittle, but I can see value in this component for anyone using smart cards.\n+1\n. Discussion forum reference:\nhttps://groups.google.com/forum/#!searchin/jasig-cas-user/CAS$204$20and$20LDAP/jasig-cas-user/ctYJaHYfq2g/UqW1tnM_p-gJ\n. Discussion forum reference:\nhttps://groups.google.com/forum/#!searchin/jasig-cas-user/CAS$204$20and$20LDAP/jasig-cas-user/ctYJaHYfq2g/UqW1tnM_p-gJ\n. Pretty sure we're going to have to trust this one. Not aware of any other devs/contributors that speak Catalan.\n. Pretty sure we're going to have to trust this one. Not aware of any other devs/contributors that speak Catalan.\n. We agreed a while back that machine translation is awkward at best and misleading at worst.\nHeu tancat amb \\u00e8xit la sessi\\u00f3 al Servei Central d'Autenticaci\\u00f3 (CAS)\nYou closed \\ u00e8xit the session \\ u00f3 Central Authentication Service \\ u00f3 (CAS)\nI trust that your Catalan is more natural than the Google translated English ;)\n. We agreed a while back that machine translation is awkward at best and misleading at worst.\nHeu tancat amb \\u00e8xit la sessi\\u00f3 al Servei Central d'Autenticaci\\u00f3 (CAS)\nYou closed \\ u00e8xit the session \\ u00f3 Central Authentication Service \\ u00f3 (CAS)\nI trust that your Catalan is more natural than the Google translated English ;)\n. +1\n. I think logging engine filters are much better suited to this task if we're considering a solution that is external to the codebase:\n- http://logback.qos.ch/manual/filters.html\n- http://logging.apache.org/log4j/2.x/manual/filters.html\nI suppose it amounts to the same thing as your solution, but filters are intended to solve exactly this sort of problem.\n. -1\nThe purpose of this component is strictly convenience for a typical AD installation and probably suffices for 90% of use cases. If you want to customize the search filter, simply use SearchEntryResolver directly, or subclass that if you need custom functionality.\n. It's been a while since I tested this stuff, and I don't have time now to revisit, but I believe the the hard-coded filter allows some very desirable magic. You can use any of the UPN formats in the username field and the entry will be resolved, e.g. serac, serac@vt.edu, VT/serac. That is hugely valuable to most AD deployments. Allowing the user to change it to something other than userPrincipalName would destroy that capability. Moreover, it's not a UpnSearchEntryResolver if it doesn't resolve entries with the UPN. So I'm open to a new component that provides a more flexible implementation, just not this one.\n. I applaud your efforts to add this functionality -- it's been needed for some time. My only concern is adding a service component reference to Principal objects, which are commonly stored with the ticket: Ticket -> Authentication -> Principal. That will drag service components along with the principal into durable storage, and that has proven to be a failed design strategy. I noted that we could mark the field volatile as a workaround, but I'd prefer to strictly avoid storing service components in any data intended for durable storage.\n. > custom webflow actions or other extensions that depend on the principal ... would need to do,\n\nwhat we are forced to do today, which is, they need to hook directly into the attribute repository\nand grab the set themselves.\n\nI think that's a perfectly valid usage pattern if not the ideal one. Let's move forward with that approach. I appreciate your diligence and patience working through these design issues. In the end this will be a valuable facility.\n. I hope we'll consider HTML5 templates in the near future to leverage the autofocus attribute, with a fall-back to javascript [1]. Avoiding scripting generally for important UX functionality like this seems wise, and I believe the rapid adoption of HTML5 makes it feasible in the near term.\n[1] http://fortuito.us/diveintohtml5/forms.html#autofocus\n. +1\nSo these are deprecated in 4.1 and will be removed in 4.2?\n. I agree with the policy comments of my colleagues, but we really need to get serious about breaking up the CAS interface into smaller, focused components that collaborate. If this contribution encourages discussion and moves us closer to that goal, then excellent. I look forward to the coming discussion on cas-dev.\n. First, thanks for taking this on -- we've needed this capability for LDAP component test coverage for years. I'll try to review thoughtfully and provide feedback in the next week.\n. Enthusiastically +1. Thanks for taking on this grunt work! I'm confident it will pay off in the long run.\n. In the spirit of evolutionary improvements this is a step in the right direction.\nThat said, I think the CAS interface needs to go in the near future. It's far too coarse-grained for new capabilities we want to build into the login flow, and I imagine some of the reasons that we call into components directly like TicketRegistry is because we had no other choice.\nThere are at least two components in that interface that need to be extracted into top-level API components:\n1. SessionManager (login, track access to services, logout)\n2. TokenManager (ticket creation, validation, reauthentication)\nI imagine one TokenManager implementation per SSO protocol, and the demands of various protocols might require additional component interfaces. I would also like to see a single StorageService that could be plugged into the highest-level API components so that we have only one point of integration with various storage implementations.\nIrrespective of opinions on the above proposal, the CAS interface has become an obstacle to growth. I hope we break it up sooner than later.\nI apologize for somewhat off-topic feedback. Just wanted to capture these thoughts somewhere.\n. I asked for confirmation of my analysis on #763 that this affects both 3.5.x and 4.x. I think it does, but I wanted confirmation. If you think it applies as well, I'll send another PR against master. I believe this fix merits a out-of-band release (3.5.2.2/4.0.0.1). Unfortunately I don't have the resources to handle release duties at the moment, so hopefully you or @leleuj or both can handle it.\n. @battags, all the tests pass ;) In all seriousness I am testing this in our pprd environment. I'm going to let it bake for a week or so. If nothing breaks, I'm going to production with it. Our internal project steering group felt the situation merited prompt attention.\n. @battags, I meant that I'd tested that the proxy callback is not performed if the ticket is invalid. I just tested this against a proxying service in our preprod environment and got the following error:\n2014-11-14 15:16:59,571 ERROR [org.jasig.cas.web.ServiceValidateController] - TicketException generating ticket for:\n[callbackUrl: https://portal-pprd.es.vt.edu/CasProxyServlet]\norg.jasig.cas.ticket.InvalidTicketException\n        at org.jasig.cas.CentralAuthenticationServiceImpl.delegateTicketGrantingTicket_aroundBody6(CentralAuthenticationServiceImpl.java:303)\nThat suggests that the comment you mentioned is still valid and we need a valid ticket. So much for the simple fix that I'd hoped for.\n. We have three choices in order of increasing effort as I see it:\n1. Do nothing\n2. Remove the following check from CentralAuthenticationServiceImpl#delegateTicketGrantingTicket:\n```\n       final ServiceTicket serviceTicket;\n       serviceTicket = (ServiceTicket) this.serviceTicketRegistry.getTicket(serviceTicketId, ServiceTicket.class);\n   if (serviceTicket == null || serviceTicket.isExpired()) {\n       throw new InvalidTicketException();\n   }\n\n```\n3. Refactor CentralAuthenticationServiceImpl#delegateTicketGrantingTicket to accept a ServiceTicket parameter instead of a String.\nThe second option is easy, but potentially unsafe in that delegateTicketGrantingTicket doesn't perform a complete set of security checks in itself. I don't believe that's a problem in practice, but it could be perceived as unpalatable or risky from an API perspective.\nThe third option is disruptive, but arguably safer since we can specify the contract clearly: the client must call ServiceRegistry#getTicket() and perform the validity check externally before passing in. Maybe that's only marginally safer, but I think the usage would be pretty clear to anyone looking at it and it's easy to document.\nPick one. I don't feel terribly strongly about this (yet).\n. I thought about returning Assertion myself, and didn't mention it because we've been pretty demure about making CentralAuthenticationService API changes. I personally feel like it's high time we started balkanizing that component. I know @mmoayyed has a pending PR along those lines, so your suggestion could be considered in that context. In any case options 3 and 4 are arguably not suitable for the 3.5.x branch. sigh I was really hoping for a quick and easy fix.\n. This pull is superseded by #768.\n. +1\n. Finally! +1\nDo we have other related Java 7 syntax tasks like multi-catch and try-with-resources?\n. -1\nI don't recall our commit voting rules offhand, but I simply wanted to record that I'm not in favor of this feature. I don't want to block it if others feel strongly or we have pressing use cases. I had intended to voice my opinion on the thread you cited, but never got around to it, so I'll say something brief here.\nThe bar should be high for cachinbg the password and disclosing it, and CAS proxy provides a good balance between additional effort and ease of use. We should discourage this functionality generally, and increasing effort complements documentation that explains why it's generally a bad idea.\n. The implementation here uses a shared secret and I don't recall any discussion of a PKIX option or implementation. Shared secrets are deployment nightmares and generally orders of magnitude less secure than a well-developed public/private key-based mechanism. That said, I suppose I agree with your point, @wgthom, that if there were a secure authentication mechanism whose security characteristics were equivalent to that used in proxying, then why not get the password in a single step.\n. Some deployment and security concerns to consider:\n1. How will keys be exchanged? While I realize that's out of scope at least in part, it's worthwhile to consider how it will be accomplished in practice and whether the implementation supports reasonable distribution practices.\n2. There probably ought to be a metadata facility (i.e. service registry) where a service-specific public key is used to encrypt the password. A good solution here may largely address question 1; for example, the service is responsible for providing the CAS service administrator with any updated keys.\n3. Should multiple keys be supported to facilitate key rollover? Deployers would probably appreciate the feature.\n. @jtgasper3, regarding key rollover, the implementation I had in mind was to prepend a cleartext superblock to the ciphertext that identifies which key had been used. A convenient implementation idea: manage public keys as X.509 certificates and concatenate the PEM-encoded cert, a delimiter (e.g. '|'), and the base64-encoded password ciphertext and return the resulting value to the client. It should be fairly easy to decrypt on the client side.\n. @mmoayyed, without per-service keys you have to deal with distributing the one and only private key to all services that wish to decrypt the encrypted password. With per-service keys, each service generates its own private key and distributes the public key to the CAS server. That's dramatically more secure and convenient; the public key can be delivered over insecure channel like email.\n. @jtgasper3, I don't think a symmetric key gains meaningful security and dramatically increases implementation complexity. I am interested in per-service keys exclusively for the purposes of simplifying and securing the key distribution process. Allowing services to distribute public keys to the CAS server is dramatically more secure and convenient than distributing private keys to clients.\n@mmoayyed, there is nothing in cryptacular to help here, unfortunately, though I'm open to adding a feature. I'll need to think it over and discuss with my peers.\n. @jtgasper3, just to clarify I was referring to the scheme you described above where pubkey crypto is used to exchange symmetric keys that are used to encrypt the password. I think that the addition of symmetric key encryption adds little security value at the expense of dramatically higher implementation complexity. That said, I'm happy to be proven wrong as well.\n. What's the use case for encrypting attributes in the CAS ticket validation response? It's back-channel communication over TLS. In the SAML world, the use case for encryption is front-channel communication that passes through the browser, and encryption provides additional security against browser-mediated threats. That's obviously not relevant with the CAS protocol, so I don't see the value.\n. Well said @wgthom. +1\n. This looks good generally. Can you summarize the protocol implications?\n. These changes address my concerns about thread safety, thanks. +1 to move forward.\n. +1\n. Changing from SpEL is definitely not an option.\n. +1 Nice!\n. Looks good. +1\n. I'd like to see a test case, which would help me understand the problem that's being solved. I recall we had a case where the distribution point URL was encoded and it worked, but maybe I'm remembering incorrectly.\n. Sorry, dropped the ball on this. Reviewing now. Looks good generally -- appreciate your patience and persistence.\n. +1 to merge\n. Note that, unfortunately, this pull introduces an API change, which triggered the minor version bump and the target branch, 3.6.x.\n. @leleuj, allowedToProxy should not be applied to the proxied service because I do not want to grant any special privilege to that service. In terms of security policy, I'm delegating authentication to the proxying service by ticking a box on the service manager. That's an increased security privilege and one we grant on a case-by-case basis after security review. I do not want to have to check that box for the proxied service because that would grant privileges I explicitly do not want to grant. That is the exact use case I'm trying to fix with this pull request.\n. @leleuj, it's a change in meaning that brings the functionality back in line with the documentation of the flag. From https://wiki.jasig.org/display/CASUM/Adding+a+New+Service:\n\nAllowed to proxy - whether the service can retrieve Proxy Granting Tickets; defaults to true.\nIf set to false, CAS will immediately stop vending Proxy Granting Tickets to this services.\nExisting PGTs will still be honored until they expire.\n\nThe flag thus impacts checks on PGTs exclusively, and the current implementation is broken in that respect. This patch makes the behavior consistent with the documentation, and in my opinion, the expectations of deployers.\n. I will formulate a separate pull request against master once this is accepted.\n. @mmoayyed , I was planning for only a patch against master since the target fix version is 4.1 in any case due to the API change. Make sense?\n. +1. I think we should take this opportunity to fix the whitespace in the pom. Or we could do a global pom whitespace cleanup prior to 4.1 release. I recall lots of pom.xml files have mixed tabs/spaces, which we really ought to clean up.\n. +1 with minor comments.\n. +1\n. My initial impression is that this is too specific to be something we ought to include in the distribution.\n. I'll try to review and comment by end of week.\n. This can be simplified further: requestParameters.gateway != ''.  Briefer is better.  See http://static.springsource.org/spring-webflow/docs/2.0.x/reference/html/ch03s05.html for more opportunities to leverage special EL variables.\n. Isn't it sufficient to simply determine the request method?  For example, using the following:\nflowRequestContext.request.method\nI can't imagine a case where there would be a POST response to anything but a POST request.\n. It may be more friendly, but I think it would create ambiguity: is the registry empty or does it simply not know.  Throwing makes it clear, and it's the behavior I would prefer.\n. I only exposed that for advanced configuration cases.  For example I didn't code support for the OpenID stuff, but someone might want to use it with these components, in which case you'd need to set this manually and point to custom serializers for the OpenID classes.  It's safe to set it to null since it's ignored in that case.\n. Better to copy from the subclass than have no documentation at all.  See the section \"Automatic Copying of Method Comments\" of http://docs.oracle.com/javase/6/docs/technotes/tools/solaris/javadoc.html for more info.\n. Nice catch.\n. I thought we set a max at 120, and this is more iirc.\n. Damn autocompletion :)\n. Ah, that is a very good point that I had not considered.  Then again, leaving the cleaner in there might suggest it actually does something, which it does not.\n. ack\n. I think exposing this is needed in case you need to instantiate a class like FieldSerializer which needs a reference to a Kryo object, and all serializers need to share a common Kryo object.\n. Since this is the current behavior, let's go with \"if it ain't broke don't fix it.\"\n. I considered protected, but I don't think that's sufficient.  Say some deployer needs to serialize some crazy custom component, which would be in their own package space, then they could reasonably need an instance to the shared Kryo instance.  Since this presumptive component neither inherits from KryoTranscoder nor is in the same package, protected isn't enough.\n. It doesn't necessarily have to be injected, but it MUST be the same instance to work correctly, so a factory design would be the safest to enforce that requirement.  Yet I simply don't have any use cases for this functionality, and without use cases it's easy to get wrong and it would come at the cost of complexity.  I'd recommend going with the present design, which supports extension albeit with some caveats.\n. No.  It's only defined in the webapp POM:\nmarvin:~/Code/jasig/cas$ grep -C2 quartz cas-server-webapp/pom.xml \n<dependency>\n  <groupId>org.opensymphony.quartz</groupId>\n  <artifactId>quartz</artifactId>\n  <version>1.6.1</version>\n  <type>jar</type>\n. Good catch.  Fixed in https://github.com/Jasig/cas/commit/21b598772fff0f8393a6dc426e542f09e23fd446.\n. The test cases verify throttle behavior in fairly precise detail now.  I'd recommend studying the test cases and if you see a fundamental problem there, then we should discuss further.  I'd recommend review of the following class to start:\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/test/java/org/jasig/cas/web/support/AbstractThrottledSubmissionHandlerInterceptorAdapterTests.java\n. There's value, but since it's a test dependency, arguably not much.  Guess it's easy to do, though, so why not?\n. After careful review I see that the line terminators were formerly CRLF (windows), whereas they are now LF.  I believe line endings throughout most of the codebase are LF, so this change, while painful, brings the file into conformance.  We might consider documenting the standard in https://wiki.jasig.org/display/CAS/Code+Conventions or enforcing it in the build via maven plugin.\n. I think the diff is misleading here; I didn't touch that code.  In any case it's not a bad suggestion.\n. I didn't even consider the effect of that parameter.  I got the above code from OpenSAML unit tests and thought it was sufficient for all cases.  Not sure I understand your suggestion in any case.\n. Will do.\n. ack\n. Can we compromise on an INFO message?\n. I measured this a while back and it's substantially cheaper, but I think it's fair to argue it's premature optimization.\n. I grepped the entire source tree and couldn't find them, which was fairly surprising.\n. Misagh made the same suggestion.  Again, didn't touch that code but it's a good suggestion nonetheless.\n. ack\n. I thought it perhaps served some documentation purpose to be public.  Those constants are public in the OpenSAML libs, so I felt justified doing same here.\n. The factories are cached through the Configuration singleton, and the usage pattern here is consistent with what I observed in OpenSAML test cases.\n. Again, I felt it served some beneficial documentation purpose to tell the size of assertion handles.\n. Same justification as above, which is admittedly fairly weak.\n. If if makes you feel better, I enabled an IntelliJ inspection to detect these.  Now, just to use it :)\n. I'll look into it.\n. I'll do whatever we agree on w/r/t code conventions, but I'm -1 on this.  The dictionary definition of override is at odds with the use in an interface or abstract method implementation; there's no existing implementation to override.  Moreover, my IDE displays a visual difference between an implemented interface or abstract method and an overridden method for which there is an existing implementation.\n. AFAIK, once per classloader, which is the intended behavior.  I'll do some research and testing, though, now that you ask since it's a good question.\n. This was the usage pattern I saw in OpenSAML test cases, but I would think it doesn't hold any state that would make it not thread safe.  I'll do some code review.\n. This is consistent with the former behavior, but I do think there's little reason to log an error if we rethrow.  Perhaps if we logged the failed SAML message here there would be some value.\n. Will do.\n. Upon further review I see now why we did not use X.class.getName() in some cases.  The last two credentials classes are in other modules, and adding a dependency on them would create a circular dependency.  I used the component name for classes in the same module and made a code comment that explains why it's not done throughout.\n. Some code review clarifies your comments.  The javadocs of HttpServletResponseAdapter are contrary to the implementation, but it's easy and arguably safer to set the secure flag to that of the request, so I'll do it.\n. Some fairly quick testing shows that it's executed once per classloader as intended.\n. Looks safe to do this, so I'll make the encoder an instance variable.\n. I would imagine that line could produce voluminous output, and it's arguably of little interest.  I think DEBUG level is a better fit.\n. Agree this needs to go into cas-server-integration-memecached module.\n. I'm glad we can get rid of this -- it was a hack at best.\n. Use of an enum here would be preferable.\n. The canonical format for logging with slf4j is log.debug(\"Resolving principal {} for {}\", this.descriptor, certificate)\n. According to the Javadocs for getSubjectAlternativeNames(), the value can be a byte array in some cases.\n. It's a simple component with a single purpose that I described briefly in the javadocs. I wonder if a @see tag that points to a concrete implementation would be helpful.\n. Good catch.\n. I had a constructor with that signature, but removed it since we have cases where we must map a coded CAS exception to a message where defaultMessage simply is not defined. It's no harm to add a constructor with (String, String), but I did not see a use case for it.\n. I have reviewed the source for MessageBuilder and defaultText(code) simply sets the default text string to the message code, which is what my code does.\n. This is the only case where we handle a Spring Message component, so I believe the name Message will be clear in practice.\n. One of the objectives here is to abstract all meaningful data that could be produced by an AuthenticationHandler for use by dowstream components. SearchResult is specific to LDAP, which violates that design principle. That said, I believe we can accommodate your use case since if an AuthenticationHandler retrieves attributes, they will be bound to the resolved Principal in the returned HandlerResult and will be available to downstream components as an attribute map on the principal.\n. Noted.\n. I'm glad you raised these questions. One of the objectives is to generalize LPPE into a generic account/password expiration mechanism that can be implemented by any authentication handler where the concept of password expiration makes sense (e.g. RDBMS). This component simply attempts to map a reasonable javax.security exception onto a corresponding LPPE state transition, but the LDAP authentication handlers have not been modified to throw these exceptions yet.\nAs far as exposing this mapping as a configuration concern, I sincerely don't think there is a use case for it. It's a fairly low-level detail that takes a fair bit of research and testing to get right. I say this based in part on work we did for ldaptive, where this is an implementation detail not subject to configuration. If you can propose a reasonable use case for customization, I'd be willing to reconsider.\n. Indeed.\n. Correct. Old habits die hard.\n. Correct. I would love for some piece of software to tell me when I'm violating coding conventions rather than manually sifting through IntelliJ inspection results. Checkstyle anyone?\n. They are indeed similar, but the return types are sufficiently different to make this difficult. I can imagine that if we adopted a convention of using a Message#code for a Webflow state transition, then it could work fairly easily. That seems a little clunky to me. Do you have any suggestions?\n. Not used at present, but it is a vital integration point for generalized password expiration capabilities. A warning is any important message returned from a handler that did not prevent authentication from succeeding, for example, impending password expiration. I would like to see whether we can make the warnings work for the existing LPPE use cases, and extend/tweak as necessary if they are not adequate.\n. That indeed appears to be inverted logic. Nice catch!\n. Since MutableAuthentication uses a LinkedHashMap to hold successful authentications, the net effect would be to record the last successful authentication. While that's at least deterministic, it may not be desirable in some cases. Deployers may want to record the first successful authentication or record them all. I think this highlights that many aspects of high-level multi-factor authentication behavior have not been worked out. I'm open to recommendations for alternative behavior.\n. We need to allow clients to wire up different principal resolvers based on which authentication handler succeeds. I think I provided a more thorough answer in a previous comment.\nThis attribute is in the abstract class since both concrete implementations use it.\n. Seems reasonable.\n. The intention is to suppress the default serialization behavior for certain types for which a readObject/writeObject is provided. While the transient keyword may have the same effect, the fields are not at all transient in nature. They should be serialized, just not via the default mechanism.\n. It needs one. Nice catch.\n. I did that in cases where it made sense; see AbstractPreAndPostProcessingAuthenticationHandler. Maybe we could inject another abstract class into the hierarchy for additional code reuse.\n. Anywhere I provided a readObject/writeObject method for more compact serialization.\n. This patch is admittedly loose. It was simply easier to apply coding conventions like \"final\" across all files rather than just the changeset.\n. I totally agree. I owe all code reviewers a tasty beverage of choice :)\n. Excellent suggestion.\n. Good suggestion.\n. I'm happy to reconsider throwing IOException. But the core idea is worthwhile: throw GeneralSecurityException (typically LoginException) for a credential failure and some other branch of exception for any other kind of error (e.g. socket exception)  that prevented authentication from occurring. This would allow us to develop a policy in higher components of continuing to next handler on GeneralSecurityException while stopping outright on the other exception type.\nIt's likely a documentation problem on the point about throwing and returning a result. A result is returned if an only if a credential is successfully validated.\n. I'm open to dropping IOException. As far as varargs Credential, that was chosen strategically to facilitate transition to multiple credentials. The API is call compatible with CAS 3.5.\nWe could easily map the failed credential to the exception it caused by tweaking AggregateSecurityException to hold a map of credential to exception.\n. This is mostly a matter of style. Since the method signature declares \"throws AuthenticationException\" you can't simply rethrow Exception without an explicit cast, which I tend to avoid, and even then you'd have to do a type check to cast into the declared exception or RuntimeException (which can be thrown without a declaration). I think it's about the same amount of code either way. A couple alternatives:\n- Put the logAuthenticationHandlerError statement in a higher level (in the authenticate method) and simply not catch the exception here. That was along the lines of the original strategy: simply don't catch anything.\n- Simply do not log RuntimeExceptions and let them be thrown implicitly.\n. I don't like wrapping with AuthenticationException because it would needlessly wrap AuthenticationException inside another. I'll consider pulling up the log statement into the superclass which is arguably the cleanest solution all around.\n. It's simply a template method that abstracts common functionality in the two new concrete classes AnyAuthenticationManager and AllAuthenticationManager. In practice AnyAuthenticationManager#isSatisfied(...) returns true if successes.size() > 0 and AllAuthenticationManager returns true if credentials.size() == successes.size(). The other method parameters are available for more interesting policies, but I don't have a use case or even a hypothetical case at the moment.\n. We have a de facto standard of 120-char line lengths though it is admittedly loosely followed.\n. We use star imports quite frequently in test code to do static imports on test helper classes like assert* or mockito mocks.\n. This is the one check that you will curse most frequently. While it is helpful in some cases, it's frustrating in others. We can keep it and try out, but I anticipate we will reconsider down the road.\n. Most diff tools like new lines at ends of files, so this check has some value. Consider enabling it.\n. Bravo! This will be incredibly helpful.\n. There is a valid use case for using the if (log.isXEnabled) { ... } construct aside from parameterized log messages. I would recommend a one-time code cleanup and removing this rule. We could leverage another check for detecting non-parameterized log messages; for example, one that looks for \"+\" characters indicating string concatenation.\n. Strongly recommend we fail builds on Checkstyle failures. There's hardly a point to style rules that are not enforced. Additionally, I would argue this makes it easier for contributors to submit code. We frequently critique pull requests based on style conformity, and this would allow contributors to get it right before submitting a pull.\n. I would recommend a style for citations that's more natural for HTML. Here, use \"RFC 2119\" as the link anchor.\n. Cite the HTTP RFCs inline and hyperlink to them.\n. Capitalize section titles according to http://www.rfc-editor.org/rfc-style-guide/rfc-style, section 3.4.\n. I would recommend avoiding starting sentences with a URI. In other places this is avoided by the usage, \"The X URI.\"\n. There are some XML formatting problems in this sample SAML request.\n. We might consider maintaing schema as separate standalone documents. Would facilitate XML validation use cases.\n. I'm personally -1 on increasing above 120, but I'll adapt to whatever. One use case to consider is terminal work where you're viewing source in that context, which is something I do fairly often in troubleshooting production problems. 80 is perfect, 120 is workable, 160 would be painful, and 240 would be impossible.\n. I would recommend Collections.emptyIterator(). Generally we expect methods to return collections/iterators to be non-null.\n. I would think this should go after the call to TicketRegistry#deleteTicket. The LogoutManager is performing some potentially heavy work that could fail in a number of ways, and I would think we would want that after ticket deletion to ensure the ticket is deleted in all cases.\n. Pretty sure that synchronized block doesn't do what the description says, at least not for all ticket registries. The ones that work in memory may be safe, but the ones that rehydrate the ticket from a serialized form would produce multiple, distinct instances here. I would think we'd want to simply synchronize CentralAuthenticationService#destroyTicketGrantingTicket. We'll lose some concurrency, but I prefer safe, simple code to fast without compelling evidence of a performance problem.\n. I'm feeling good about this call signature. You basically have a strategy pattern where you can mix front and back channel in an implementation-dependent fashion. That's a design win in my view.\n. Good observation. I'm not sure either; will probably take some serious code review and/or test cases.\n. Agree with @mmoayyed's outline with one tweak: LogoutableService needs a less awkward name. How about SingleLogoutService or SLOService?\n. I'm pretty sure this is consistent with the existing implementation; we trip the flag on entering the method regardless of the result.\n. Add an @NotNull validation constraint to ensure not null and remove null checks in implementation.\n. @NotNull\n. Agree with @mmoayyed. I commented above that httpClient and serviceManager need @NotNull annotations, which will be checked by CustomBeanValidationPostProcessor.\n. That's probably a good suggestion, but source review indicates that end() is called from finalize, so native resources are cleaned up when the object is garbage collected.\n. I'll be glad to see that go.\n. Pair would be perfectly suitable, but we would need to move it to a top-level class. It's presently an inner class of AbstractAuthenticationManager, so making a new class is less disruptive to other unrelated parts of the codebase. I suppose we could create org.jasig.cas.Pair and rework AbstractAuthenticationManager subsequently.\n. +1 for markTicketExpired().\n. Nice. Just ignore the front-channel ones since this component can't do anything about it.\n. I really like using the same HttpClient instance for all sign out requests. Moving the HttpClient from the service to this component fixes some fairly awkward serialization issues that I'd wanted to address in the future, so it feels like I get that for free with these changes.\n. Interesting analysis. I'll have to think about this some more.\n. Just to confirm the proposed change, Iterator<Pair<String,Service>> to Map<String, Service>? If that's correct then sounds good.\n. Perhaps we could compromise here by returning all services in a type that encapsulates service, ticket, and an enum (Success, Fail, NotAttempted) for the SLO result. I personally think the existing design is clear, but returning all with a state flag seems equally clear and it would support Scott's use case, which seems important. I think there's a fair bit of value in communicating more to the user about logged in/logged out state.\n. Sounds like a reasonable question. @dima767 what do you think about reformulating without this flag?\n. I'm actually a big fan of this kind of metadata annotation. I hope we'll be doing it more, but there is a question of what set of annotations to use.\n. I had expected the \"password about to expire\" condition to be modeled as a Message passed up the stack via HandlerResult. I would like to model authentication failure as an exception, and everything else (e.g. warnings) as Messages or some other type associated with HandlerResult. That way the mechanics of authentication can be clearly documented and followed precisely.\n. We could probably model this logic as an ldaptive SearchEntryHandler in order to simply reuse the existing LdapAuthenticationHandler, but with modified configuration that specifies the PasswordExpirationSearchEntryHandler. The only obstacle I can foresee with that impl is that the signature for SearchEntryHandler throws LdapException, where we would need to throw a GeneralSecurityException.\n. What does PasswordPolicyConfiguration#isCritical() mean?\n. Shouldn't the response be taken into account in order to determine the account state?\n. Really wish date formats were more standardized so we wouldn't need all this machinery for a simple about-to-expire check.\n. I'm confused. This component appears to be both a stateless configuration container and stateful account state holder (build method in particular). How does this thing work?\n. This is a necessary evil. I spoke with Daniel and we agreed that if you want application-specific exception mapping, then this is what's required.\n. The latest Spring Framework reference docs recommend leveraging @PostConstruct on a normal method instead of implementing InitializingBean to avoid Spring dependencies on the domain model. I clearly agree with that advice, which is why I went with it initially. If it's a matter of consistency, then I'd like to see a post-RC Jira issue to switch wholesale.\n. Message accepts arbitrary parameters, so I would think it would work as-is. I'm interested to see how much mileage we can get without changing or extending it.\n. It's definitely worth consideration and creating an issue if you have some concrete suggestions for improvement. Maybe start by discussing this use case on https://groups.google.com/forum/?fromgroups#!forum/vt-middleware-users may be helpful. Daniel may suggest a better way to do it or may be open to improvements on the ldaptive side.\n. Ok, it's working like I thought you intended. We need to make a change, otherwise multiple threads will step all over each other using that same singleton bean from the context. I think your suggestion of having build return a data type with result-specific data seems reasonable.\n. The build will fail because we use checkstyle to enforce some important style rules. Trailing new lines are important for most diff tools including git diff, so it's not totally insane. I'm of the mind that checkstyle actually facilitates accepting contributions since the build will catch stupid style mistakes and we don't have to nitpick patches for style adherence.\n. @jsumners Enforcing style after the fact is tough and we're making progress slowly but surely. We'll likely do a big source cleanup prior to the 4.0 release where we'll fix irritating style issues like mixed whitespace. More to the point, we expect contributors to follow some reasonable guidelines like style adherence (as far as we've implemented it) and filing issues. If you don't want to take the time that's fine. Simply raising areas for improvement is helpful.\n. Sounds like a good recommendation.\n. I use that all the time, though I believe it's {@inheritDoc} (note capital \"D\").\n. +1\n. We might be able to parallelize some of the requests with client-side scripting, but the server-side logic would be the same. Some server-side controller has to keep track of the \"next\" service for which to issue a logout request on the client side. @leleuj implementation here is what I expected for the \"non-script-optimized\" solution.\n. Putting more of the conditional logic like this in the controller (instead of flow event wiring) seems perfectly clear.\n. Due to the abstraction of security policy, \"may\" is probably better. It may be worth explicitly noting that satisfying security policy with respect to authentication MUST be a prerequisite to TGT creation.\n. Good point, will fix.\n. In practice it's the order in which credentials were attempted, which is also the \"natural\" ordering of the items. I will state that ordering SHOULD be provided by implementations.\n. I strategically created this interface so that we have room to expand on the notion of helpful, important, or requisite metadata about credentials that are stored with authentication events. While I only have an ID at present, I can imagine we might have more to say about credentials than just a class name. For example, there might be a well-known URI associated with the credential (i.e. InCommon Silver/Bronze) in addition to a class name.\n. Having a very clear name for this component is pretty important in my view. I think I agree that your suggested name is clearer, so I'll go with it.\n. You're absolutely correct and your suggested implementation is much better. Will fix.\n. Yes, that comment is valuable. Will add.\n. Booleans are false by default, but perhaps there's some value with respect to documentation.\n. I like to initialize variables in their declaration where possible, so I would tend to remove that line and put the initialization in the declaration for consistency.\n. The static newInstance(Authentication) provides behavior similar to a copy constructor whereas setter methods are for building up a particular instance. I avoided the \"add\" language except where adding collection members. The \"add\" language for singleton fields arguably creates ambiguity since it's unclear whether you're adding an additional value (e.g. date) or overwriting the existing value. I think setX is clearer in that regard for fields that accept one and only one value.\n. It's static because it doesn't require any access to the fields of the parent class. This class seemed like a minor improvement of the former implementation where a copy is returned for every call to the getter to prevent changing the date. Honestly I'd like to see us make a strategic shift to Joda Time for all date time classes; they have a nice abstraction for immutable instants in time: ReadableInstant/Instant.\n. I needed this class for a test case, but it seemed generally helpful. You may be on to something that the Credentials interface may be able to take an ID field generally. That would be a pretty high-impact change, but I've been thinking that Credentials should be more than just a marker. I'll do some code review and follow up.\n. I think this is feasible but I'd like to constrain it to another pull request since it's large in scope and there's some other credential-related cleanup/consolidation I'd like to do.\n. I'm expecting the Principal to define equals in a way that makes sense, which for SimplePrincipal includes attributes. I'm honestly not sure whether attributes are strictly part of principal equality generally, but this pattern gives us flexibility to go one way or the other without bleeding out into other code.\n. That is correct. There is am implicit requirement that every handler have a unique handlerName value. I will look at adding some javadoc improvements and comments in deployerConfigContext.xml.\n. I'm sure on the CredentialMetaData component, but not necessarily the one simple implementation I provided out of the box. I think your concern is valid, but I'm reluctant to spend too much energy on defining required types of metadata when the requirements for MFA are so poorly defined. That said, if we do the Credentials refactoring you mentioned elsewhere, then most Credentials implementations would implement both Credentials and CredentialMetaData, so you could simply use the Credentials classes directly. The one notable exception would be UsernamePasswordCredentials since it contains sensitive data. In any case I think we can address these concerns in a subsequent refactoring of Credentials.\n. That line is required, for example, in the \"all\" policy case when the first credential succeeds and the subsequent ones fail. Line 222 would not be evaluated if the credential fails authentication, and 244 is needed to fail the policy since all credentials were not successfully authenticated. I will add some test cases for this component, including the one I just described, in a subsequent commit.\n. I pushed a commit with some additional documentation to emphasize the handler name uniqueness requirement.\n. Haha. That was intentional. It's a fairly common abbreviation for \"if and only if\". See http://mathworld.wolfram.com/Iff.html. I've recently seen it in the Shib codebase documentation, but perhaps it's not as common in code documentation as I thought. We can spell it out if needed.\n. Good question. There's a subtle but important implementation detail here. Note getAuthenticationSatisfiedByPolicy searches for all authentications on the ticket to determine one that satisfies security policy. In the proxy case I was uncertain whether we should do that, so I limited it to just the authentication performed to grant the PGT. That is a proxy callback in most cases, which really seems orthogonal to the kinds of security policy of interest in MFA scenarios. Not really sure how to handle it. Suggestions welcome.\n. Fixed in 94dbd29fb29bf8ea05a1fd1577cd9c6826605001.\n. Provided test case for scenario above and many others in 94dbd29fb29bf8ea05a1fd1577cd9c6826605001.\n. This data is available in the Authentication object, but this component follows the AuthenticationMetaDataPopulator paradigm for injecting arbitrary attributes into the ticket validation Assertion and subsequently the protocol response. I can imagine we would use this component by default with the CAS 3.0 protocol to provide the client with the handler names that authenticated credentials.\n. After further consideration and some code review, I have decided to remove the policy check here altogether in 7e31424119d95e9f0730dd6cc8e3c805758b974e. We simply don't have a use case for applying security policy checks to service credentials in the context of MFA, so the safest thing is to revert to the existing behavior. If requirements come to light, we will have the needed guidance to implement suitable behavior.\n. I think username is understood in the common context of a password credential, but I suppose it doesn't hurt to emphasize it. While I prefer brevity in this case, I can live with either one.\n. Ok, UsernamePasswordCredential it is.\n. The new AuthenticationHandler interface includes the getName() functionality of NamedAuthenticationHandler such that names are an inherent part of authentication handlers in CAS 4.\n. They're meaningless in any case. I believe we have some interfaces that use final parameters, but we might want to be consistent in avoiding. I think we can tackle this kind of thing in a post-RC code cleanup task.\n. Agree, ArrayList is best unless you have a compelling reason otherwise and I don't see one. If you want to guarantee O(1) insertion, simply defer creation of the list until you know the result size:\nlist = new ArrayList<RegisteredService>(result.getResult().getEntries().size());\n. Is there some kind of whitespace change going on here? Maybe a line ending change? Regardless that reminds me that we have some mixed line endings elsewhere in the codebase and we should standardize on CRLF or simply LF and enforce with CS.\n. Need an attribute name for new RegisteredService#getRequiredHandlers() data.\n. Interesting use of DN hashCode for ID -- that should work nicely.\n. We might consider a constant to represent the default ID and compare with that. Comparing with -1 requires some knowledge of impl details which seems brittle.\n. Returning null seems dangerous. I think we want to support the following usage pattern:\nRegisteredService saved = serviceRegistryDao.save(original);\nWhere we subsequently do something with saved.\n. See above comment about returning null.\n. I would recommend simply moving the statement return rs on line 97 here. In practice return null would likely never be executed, but returning null is misleading (as it mislead me in making my initial comment).\n. Here returning null makes sense -- it's natural to return null when a match is not found.\n. I would prefer to pass in a fully-formed SearchRequest instead of having the composite fields to deal with. I'm fairly certain SearchRequest objects are intended to support that kind of usage.\n. Correct. It's been moved to cas-server-support-legacy along with the 3.x AuthenticationHandler interface.\n. Good catch, will fix.\n. Sounds reasonable. I think I considered that at the time.\n. +1 for Java 7 resource management. I've used commons-io IOUtils for that functionality in other products. I'll consider it here if it means not adding another dependency.\n. Doh. Thanks.\n. Correct. I believe AuthenticationHandler is the most customized component in the entire codebase and there are likely a number of third-party components. This will provide a transition path that should be a matter of solely XML configuration changes for 80-90% of them (any that use a UsernamePasswordCredentials).\n. Ok, makes sense. Thanks for clarifying.\n. d76ec10 uses IOUtils.closeQuietly(...)\n. Generally I agree we should provide a message for diagnostics/debugging into the thrown exception where it makes sense, and this is a good candidate. Will do.\n. I feel like \"password does not match value on record\" or similar is pedantic in this case since there's only one way for authentication to fail: password mismatch.\n. I sincerely feel like the Person Directory API is overly complex for CAS use cases. What do we gain from IUsernameAttributeProvider here?\n. This is probably a good name change -- we really don't want to advertise the underlying LDAP libs in our component names.\n. The changes to Assertion in 31ec59d may afford some opportunity to clean up the JSTL here and in similar usage elsewhere in this file.\n. Agree, but that aspect hasn't changed in this patch. I was just fixing some bugs that slipped through from changing default id from -1 to Long.MAX_VALUE.\n. Good point. The credential ID should never be null, but we might want to be defensive. We should add some stronger requirements on the Credential#getId() method to indicate ID SHOULD NOT be null.\n. Probably should, yeah.\n. I don't think there's enough shared implementation to merit it. I don't mind repeating myself for a handful of trivial lines, but I could do either way.\n. Good point. I believe LDAP directories, the most common case, are inherently case insensitive. Of course you could use this component with other backends like a database. I can't think of a reasonable case where there would be two attributes that differed only in case, so insensitive matching would be innocuous at worst and helpful at best.\n. Yeah, sorry. I built on top of the branches for the pulls against CAS-1053 and CAS-1305. I'm rushing to try to get these in for the RC.\n. I'm open to alternatives; what do you suggest?\n. Actually, instead of doing the cleanup tasks in this action, perhaps we should transition to the logout subflow and let it handle this stuff. It's probably the safest solution with the least code duplication, but may be overkill in many cases. Thoughts?\n. Actually, we would only want to do that in the case where the ticket exists in the registry but is expired. If the the ticket is not found in the registry, there would be no metadata available to drive the SLO process. If we want to pursue this course, we would need the check to emit 4 states:\n1. notFoundInRequest - transition to gateway check\n2. notFoundInRegistry - transition to action that deletes cookies\n3. expired - transition to logout flow (as subflow)\n4. valid - transition to service check\nI was hoping to do everything in one action, but I can see we reduce duplication and possibly provide better behavior with the above.\n. I can appreciate your concern about changing the user experience by delegating to the logout flow; I'm not certain control could return gracefully to the login flow in all cases, which should be what we strive for. With that concern in mind, I'm leaning toward you suggestion of factoring out common ticket/cookie cleanup from LogoutAction into a common action that can be called from both login and logout flows as needed. I'll proceed with that approach. We will still need the four states I mentioned above.\n. Good suggestion, will do.\n. I'm trying to avoid duplicating cookie handling. Simply calling CentralAuthenticationService#destroyTicketGrantingTicket() and deleting cookies feels like the easiest and most consistent behavior. With the factoring out suggested by @mmoayyed, we could avoid doing the heavy front-channel SLO. I'm going to continue in that vein (not much work), and you can comment on the forthcoming commit. If we can't come to consensus I'm simply going to punt to 4.0.\n. It was superfluous as far as I could tell. The PooledConnectionFactoryMonitor component provides a monitor for ldaptive pooled connections.\n. We do indeed, LdapUtils#closeConnection():\nhttps://github.com/Jasig/cas/blob/master/cas-server-support-ldap/src/main/java/org/jasig/cas/util/LdapUtils.java\nThanks for the suggestion, will fix.\n. I was thinking of a case where a deployer might not have configured an annotation scanner component, but you're probably right. Just being paranoid I guess.\n. Probably because I don't use Eclipse ;) I like Builder classes from commons-lang myself because they're IDE agnostic, clear, flexible, and reasonably performant. We've used them other places, so it seemed natural. I'm open to alternatives like Eclipse or other auto-generated tools, but it seems wise to standardize on something. Presumably IntelliJ has a similar generation feature, but I wonder whether it would be similar. Could you provide an example and I'll look into the IntelliJ support?\n. The final modifier requires an explicit initialization in a constructor, so you see this pattern repeated anywhere there are final instance variables. See also the ExpirationPolicy classes with final variables.\n. I would recommend we say *Builder classes are \"recommended\" in code conventions. If we have the time and energy, we could consider a thorough pass over the codebase prior to 4.0 final to convert wholesale. Once we convert, though, we should add a checkstyle rule (may have to invent one ourselves for this). I would like for checkstyle to enforce anything about code style that is required.\n. Sounds good.\n. It felt like an implementation detail, which would merit an inner class. That said I'm open to your suggestion.\n. Will provide javadocs.\n. Will do.\n. I've considered alternatives and none are as compact and straightforward as what's there now. If you would like to propose an alternative I'm open.\n. I avoid use of final without a compelling use case. I can't think of one offhand, and extension seems both benign and reasonable.\n. The name I used is indeed the correct string to make RadiusClient.getAuthProtocol(String) return the correct authenticator. Relevant source ref from RadiusClient:\n// Supported Authentication Protocols\n    registerAuthenticator(\"pap\", PAPAuthenticator.class);\n    registerAuthenticator(\"chap\", CHAPAuthenticator.class);\n    registerAuthenticator(\"mschapv1\", MSCHAPv1Authenticator.class);\n    registerAuthenticator(\"mschapv2\", MSCHAPv2Authenticator.class);\n    registerAuthenticator(\"mschap\", MSCHAPv2Authenticator.class);\n    registerAuthenticator(\"eap-md5\", EAPMD5Authenticator.class);\n    registerAuthenticator(\"eap-mschapv2\", EAPMSCHAPv2Authenticator.class);\n    try\n    {\n        registerAuthenticator(\"eap-tls\",  \"net.jradius.client.auth.EAPTLSAuthenticator\");\n        registerAuthenticator(\"eap-ttls\", \"net.jradius.client.auth.EAPTTLSAuthenticator\");\n        registerAuthenticator(\"peap\", \"net.jradius.client.auth.PEAPAuthenticator\");\n        //registerAuthenticator(\"eap-aka\",  \"net.jradius.client.auth.EAPAKAAuthenticator\");\n    }\n. Sorry, I see the problem now. Thanks for your patient and clear explanation. I'll code up a fix with test coverage.\n. It's simply a matter of style. Java developers tend to see the world as a strongly-typed one, and I prefer to specify a range of allowed inputs as an enum rather than magic strings. The strings probably won't change, but it does expose an implementation detail of JRadius that I would rather keep hidden. By wrapping in an enum, we can easily respond to implementation changes without requiring CAS deployers making any configuration changes.\n. Feels like over engineering to me, but I will follow along if you guys feel strongly.\n. I'm just blindly following your lead here. I pushed a commit containing the enum change you suggested, which seems reasonable at face value.\n. IV length is a function of the encryption algorithm. For example, this will break with Blowfish which is an 8-bit block cipher. Not sure it's a big deal since most everyone will use AES, which has a 16-bit block, but wanted to point out. You can easily set the IV length by basing it on Cipher#getBlockSize().\n. If the IV becomes dynamic, you'll have to prepend two values: one 4-byte integer indicating the IV length followed by the IV bytes.\n. Size should be an int. I see repeated use of getInt(ivSize), yet only one direct use of the size as a byte array, which happens when you prepend the size to the ciphertext output. It's clearer and more efficient to simply store the size as an int, then convert to bytes in the one case you need it.\n. Curious why checkstyle rules didn't catch that. Are they not applied to this module?\n. Ugh. I understand the need but I hate these kinds of workarounds. A service credential without a meaningful URL makes no sense. Can we make it private or protected to reduce the likelihood of misuse?\n. What about URL fragment/reference? AFAICT from javadocs getFile doesn't include fragment. Do we care? Probably not for proxy callback URLs but possibly for general case.\n. Might want a couple more test cases to verify more complex URLs, i.e. with querystring and possibly fragment.\n. > sometimes you'd have to go through more to actually figure out what the expiration date should be\nThat sounds good at face value but I can't imagine another reasonable implementation other than absolute date or target minus some leeway as you mentioned. Do you have a particular implementation in mind? Can you propose something reasonable? I'm more curious than concerned about this change; it seems like a reasonable improvement.\n. Interesting use case, thanks for sharing.\n. That check is required for deployments with password policy disabled where simply not defining ldapPasswordPolicyConfiguration in Spring configuration indicates password policy support is not wanted. Note that lppe-configuration.xml is still in the optional Spring config, so it's null by default.\n. I'm sorry, I misunderstood. That is indeed simpler and clearer -- will fix.\n. Good suggestion, will do.\n. There's a number of ways it could be done I suppose. I'll consider your suggestion and do if it reduces code/parameter passing.\n. Will do.\n. I realize now that there's no ldap package to provide some context, so including it in the name makes sense.\n. It's a vestige from the implementation in 3.5.x. I can't defend its usefulness, but I acknowledge it's not being used. It would be used in DefaultAccountStateHandler as follows:\nif (configuration.isAlwaysDisplayPasswordExpirationWarning() ||\n            ttl.getDays() < configuration.getPasswordWarningNumberOfDays()) {\n        messages.add(new PasswordExpiringWarningMessage(\n                \"Password expires in {0} days. Please change your password at <href=\\\"{1}\\\">{1}</a>\",\n                ttl.getDays(),\n                configuration.getPasswordPolicyUrl()));\n    }\n. Yes, but I can't guarantee it will drop before 4.0 final. We'll do our best.\n. Then we'll make it happen.\n. You suggestion prompted some reconsideration of the design. I think we can address your concerns and put us closer to implementing password policy in other authentication handlers with some modifications. I'll experiment on another branch and follow up with a link.\n. Check out these changes:\nhttps://github.com/serac/cas/commit/78ea2bd2c7557302f29328d10d4466b660b1e9bc\nI believe the result was faithful to your recommendation, but I painted broader as usual. I think these changes position us well to grow password policy into other handlers.\n. They are dependent on 1.0.3. See https://code.google.com/p/vt-middleware/issues/detail?id=205. As I said I'll work to get a 1.0.3 release cut asap.\n. > My only concern is the passwordPolicyConfiguration object in the authentication handlers:\n\nI'm not sure it's totally appropriate, the password policy configuration is only meaningfull for\nthe account state handlers and not for the authentication handlers as it deals with password policy.\n\nI put it in a base class, AbstractUsernamePasswordAuthenticationHandler, that deals with password credentials for the purpose of ease of extension. I admit it's unused and may be a case of premature design, but it does seems like it would be required on the AuthenticationHandler in some fashion to be implemented in other handlers like the database ones.\n. The subjectAlternativeName field has a variable number of items determined by the certificate request used to generate the cert. It's common (arguably required by most SSL implementations) to contain at least one member, but doesn't hurt to do a bounds check. Ultimately parsing would fail, but perhaps it's more user friendly to throw something other than IndexOutOfBoundsException.\n. I believe ASN1Sequence would throw an IllegalArgumentException that would bubble up from the resolver. Not sure the exception would bubble all the way up to the servlet container, but my guess is that it would. Assuming this is targeted for CAS 4.0, should throw PrincipalException [1] to signal that resolution failed. That checked exception is handled gracefully by authentication components.\n[1] https://github.com/Jasig/cas/blob/670e3e8f6b53918ef935098987ccb4491154225e/cas-server-core/src/main/java/org/jasig/cas/authentication/PrincipalException.java\n. I like the additional logging here, just not sure about the level. In most cases this code path is executed when a back-end authentication system is unavailable, which is an error condition you would want to know about. In that view error level makes sense.\n. This is dangerous. The Sun key/trust managers may not be available; for example IBM JVM or custom provider listing in java.security.\n. According to http://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#KeyManagerFactory, \"PKIX\" is a standard algorithm name that should be supported by alternative JSSE providers. I recommend switching for better cross-platform support and non-standard security configs (e.g. BC).\n. I honestly don't know. I've used this style elsewhere [1] and it passed muster (build and review), so I assume it's ok.\n[1] https://github.com/Jasig/cas/blob/d38d201a2c594e2bc656b2166a4918f7cdb5867d/cas-server-core/src/main/java/org/jasig/cas/authentication/AuthenticationBuilder.java#L272\n. Why is a service component serializable?\n. I would think the String fields would be stored as character data. Is the binary storage issue here related to https://code.google.com/p/vt-middleware/issues/detail?id=223?\n. This exception is stored in the HandlerResult returned from the authentication subsystem. Those objects are passed around fairly liberally. Are we concerned about providing too much information about authentication failures that might leak out to the user?\n. Are duplicate attributes a concern in practice? I don't think so offhand, but a Set may be a more accurate data structure since duplicates could produce unexpected results and ordering is meaningless.\n. Looks like this may have fixed a bug. The previous line only added the first value of the role attribute, while your change adds them all. Your approach seems correct.\n. Is there any reason we aren't using Spring test annotations, e.g. @ContextConfiguration and friends. I should note those annotations have nice inheritance so you can specify a common configuration on a base class and additional configs on subclasses.\n. Wow, that's a nice feature for testing, to be able to look up the password attribute. Most directories do not support reading that attribute.\n. This looks a little dangerous. We might consider including a truststore on the test classpath and simply referencing it here. Or, if this needs to be customizable (perhaps), reference a property in the provided properties file that has a value that is a spring resource path, i.e. classpath://a/b/c or file:a/b/c.\n. If we're generalizing here, I would recommend dc=example, dc=org\n. This DN looks like it's missing something.\n. example.org\n. dc=example,dc=org\n. This is very troublesome. We really need to move away from data intended for storage to hold references to service components. That has caused trouble in the past, and I'd bet it will cause problems in the future. If we must hold a reference to service components, we should mark the fields volatile and explicitly restore them as needed.\n. Thanks for pointing that out. It seems to be valid and this swap may not work. I'll explain further on parent issue.\n. Default sizing is hard. I know from usage patterns at our institution thousands of users log in at the start of the hour, which results in a flood of logout requests 10 hours later. Obviously this wouldn't suffice. I suppose that kind of pattern is less likely for the default sliding expiration TGT policy, but thought it was worth pointing out. In any case I would think a 5 or 10 deep queue provides a better balance.\n. I was expecting to see a build() method:\nfinal SimpleHttpClient client = builder.build();\nThat's consistent with the http-components builders and other builders in the CAS project.\n. When did Guava components become available? We can do all sorts of fun collection magic now :)\n. This appears to be a thread safety problem. This component appears to be wired into the Spring context as a singleton (protocolViewsConfiguration.xml), so this code could be called by multiple threads afaict. If that analysis is correct, then this code will break under concurrency; Cipher instances are not thread safe. I would recommend initializing a local Cipher instance here on demand. Alternatively, I'm open to a feature request to create an implementation of https://github.com/vt-middleware/cryptacular/blob/master/src/main/java/org/cryptacular/bean/CipherBean.java that uses asymmetric keys. That component is much more Spring friendly in terms of cipher parameter specification and is thread safe.\n. Too bad this component even exists to overcome our serialization woes.\n. I would explicitly declare UTF-8 charset here in coercing the string to bytes. We recommend UTF-8 elsewhere, and it's arguably the safest encoding generally and here in particular.\n. Nice little improvement. I hope we'll begin using try-with-resources more broadly.\n. I would think this constant should be defined in this class.\n. We should probably use ldaptive since we use it everywhere else. Also, it would support using a connection pool, which would justify the effort I would think. You can punt that work to me if you want.\n. We could leverage try with resources pattern with an ldaptive Connection if you take my suggestion above.\n. The Object type of the input feels like over-engineering. The only use case I see is for a Spring Resource, which seems flexible enough to accommodate just about anything that might come up.\n. Agreed that would be clearer. Will change.\n. It's not set in all cases -- there's a no-arg constructor. Also, it's consistent with other non-collection fields.\n. Ok. Not a big deal.\n. Assuming the default provider might be a mistake for deployers that want to use UnboundID, for example.\n. Looking at your member fields, I think you want to pass in a ConnectionFactory here. That way you can externalize all the configuration details around getting connections and give deployers the choice of whether to pool or not. Also, it will alleviate your having to store a reference to the provider, which is good. Choice of provider should definitely be external to CAS components.\n. If you pass in the connection factory as a parameter, you can assume it's initialized at component initialization time and avoid this method call. The method is no longer needed, in fact.\n. Ah, I see. I'll talk to Daniel to see if he has ideas. This may be the best we can do in this case.\n. An embedded memcached! Nice.\n. This looks sketchy to me. Nothing about the change you made but the approach generally where we are assuming an internal JDOM provider. There must be a better way to do this. I'll try to do some research and file a separate issue if there seems like a feasible alternative. Again, my concerns are not with changes you made but the approach generally.\n. Why are we no longer honoring the saml2compliant flag?\n. I don't believe we presently require deployers to configure OpenSAML. Is this a new configuration concern we'll have to document for 4.1?\n. This log message is not clear to me. Suggestion: Found proxying service {}, but it is not authorized to fulfill the proxy attempt made by {}. As a matter of style, I don't like surrounding the service URLs in brackets, but that's really neither here nor there.\n. ",
    "battags": "Can you just confirm for me that it doesn't change the DDL?  If that's true then I'll happily merge it in.\n. I moved LdapUtils so I'm not going to pull in the merge.  But I got your fix.  Thanks!\n. Hi,\nCan you open a JIRA issue for this?\nThanks!\nScott\n. Please start a discussion on the Jasig CAS Dev list.\n. I've added this to my list of things to start reviewing.\n. Two questions:\n1. Is there a JIRA issue for this?\n2. Can you start a discussion on cas-dev for this?\nThanks!\nScott\n. Were you able to recover the JIRA name yet?\nOn Sun, Nov 13, 2011 at 9:30 AM, Andrew Tillinghast <\nreply@reply.github.com\n\nwrote:\nplanning to do both but I have been unable to recover username and\npassword at the Jira - it appears I'm not getting email from the Jira\nserver.\n-Andrew\nOn Nov 12, 2011, at 10:57 PM, Scott wrote:\n\nTwo questions:\n1. Is there a JIRA issue for this?\n2. Can you start a discussion on cas-dev for this?\nThanks!\nScott\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/11#issuecomment-2720719\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/11#issuecomment-2722512\n. There's a number of values that shouldn't have changed but have.  Can you make sure to only change the one value?  If you need me to convert it via native2ascii before you can make the change, let me know.\n. Thanks.  I'll take a look over the weekend.\n\nCheers,\nScott\n. It says this cannot be automatically merged.  Are the repos out of sync?\n. Is this the same one where I asked a question about whether the item was already being logged and whether we needed to log it twice?\n. No unit test?\n. I've added some conversation to the on-list discussion.\n. I like this method.  Just waiting to make sure everyone else is okay with it.\n. This is the public constructor.  You can't just change what the parameters mean.\n. any way you can have a new constructor that takes a TimeUnit parameter and then people can do whatever they want?\n. The constructor is fine though I don't understand why the XML file has to change since the original constructor is still there.  I'm still not quite sure what problem we're solving here besides making sure someone doesn't add 3 zeroes. \n. We don't just use non-static loggers for the reason listed above.  That's a partially inaccurate classification of how we do logging.\n. Also, you shouldn't just swap mechanisms.  Even if this is 3.5, people shouldn't have to rewrite their patterns.  There should be an API introduce that supports matching, which can be associated with each service.\n. The feature is not broken. It matches against certain patterns that may be configured to be too general.  However, that is still appropriate matching for that supplied pattern.  The issue that is its possible for someone to configure a pattern that is too general.  Saying that makes it broken is sensationalizing.  I'm pretty sure I could come up with a RegEx that is \"broken\" also.  I also don't think you'd appreciate if I went around calling that broken.\nThis is a big change for customers and is not in the scope of a 3.5 change to make them upgrade all of their patterns).  We can't change our definition of what is \"too big a change for a 3.5 release\" depending on who is offering up the commit.\n-1 if backwards compatibility is not preserved.\n. Unfortunately, my concerns were not addressed at all, so I cannot alter my -1.  I'm also concerned about the attempts to cast a feature that works in such a negative light to push another improvement.  This makes me pause even more that this improvement is being pushed in such a negative way.  The fact is that the existing feature works well for a large number of deployers.  Its not perfect, and there is a natural evolution to it, which includes supporting more advanced pattern matching.  Its also important to note that any pattern matching we do is open to the possibility of being mis-configured and thus not matching on exactly what we thought it would match on.  That includes regular expressions, which many people (including sysadmins) struggle with.  Supporting additional options for pattern matching does not give us the right to fuck over people who have an existing working set of patterns that they are managing.\nBy not preserving backwards compatibility, you're forcing all deployers to alter their existing patterns the second they upgrade to CAS 3.5.  This causes a multitude of problems or (a) people who use and are quite happy with the existing patterns they have (especially if they have a lot of them) and (b) people who use a data store beyond XML, as that is maintained separately and thus all their matching would fail as soon as the code was deployed (or their existing code would fail if they attempted to upgrade the patterns before deploying the new code).\nPreserving backwards compatibility has not met the burden of proof that its too difficult to do and thus can be chucked for a minor release.\nThese are the users of our software.  Without them, we've got a bunch of code that sits in Github and looks pretty.    If we're going to force them to change their patterns that may already be working for them, we have to have a pretty good reason. The fact that other deployers want more options for their patterns is not a good reason to force everyone to alter their patterns.\n. > Leaving the deployers with the Ant-Pattern approach is leaving them with a solution that does not behave properly and presents a vulnerability if used as intended.\nBill, please stop with misrepresentations and false statements.  \"If used as intended?\"  Ant pattern matching of URLs works EXACTLY as ant pattern matching is intended to work.  Just like any solution, if you provide a pattern that is incorrect or more open than it should be, the matching will not work as you hoped YOUR pattern could work.  The same can be said about regular expressions (I know, its shocking that someone might write a bad regular expression).  Statements like these do not help us making progress towards a resolution.\n\nThis harm to them is much greater than the pain they would have to endure to get to a solution that works.  A trade off that I'd bet every single deployer using wild card URLs would gladly make.\n\nI think you're making statements without being able to back them up.  Let's say you've got 30 services registered.  One is a catch all.  Would you rather migrate just the catch-all to a regular expression and leave the other working ones?  I'd say that's highly likely.  Let's go even further to say you have no catch all, why would you want to migrate all your patterns to regular expressions.  And if you have a catch all, you're likely to want to migrate it.  Detecting the pattern and acting responsibly to it helps all deployers migrate quickly.\n\nEven if we preserve the Ant-pattern, folks will still have to migrate to RegEx in order to get proper behavior for wild card URLs.\nYes, they will have to migrate any pattern that isn't supported by ant-pattern.  They do not need to move any other ones.\n. Bill, if I'm being pedantic about correctly asserting that ant pattern matching is working correctly (please find a vulnerability in our PARSING and INTERPRETING of ant patterns not in your choice of a wider matching pattern), then you're being equally pedantic with your inability to separate \"what you want something to do on your behalf\" from \"broken\" and \"vulnerable\".  Just because CAS doesn't do a matching pattern that you want doesn't make it vulnerable or broken.  It means we've got an opportunity to improve CAS.  I highly doubt you'd go around saying CAS is \"broken\" because you attempted to connect a SAML2-compliant SP to it and it didn't work.  \n\nWhen you state \"vulnerability\", \"not working as intended\", you are talking about Ant pattern matching because that is what is stated in the wiki, AND on the service management tool itself as what is use to MATCH service urls.  Again, please find an instance where we are INCORRECTLY matching ant patterns. Otherwise the only vulnerability is your choice of a wider matching pattern (and again, you can have the same problem with regular expressions).\nYou would do well to read the Jasig wiki BEFORE telling me that there is no correct pattern that is consistent with the Jasig wiki.  This is what the Jasig wiki says:\n\"Service URL - the URL of the service. You can use Ant pattern Matching to represent multiple services\nFor example, to match both http and https requests for every url under the www.example.edu/secure/ path\nhttp_://www.example.edu/secure/_*\" \nIt further includes a DIRECT LINK to how to construct an Ant pattern (Source: https://wiki.jasig.org/display/CASUM/Adding+a+New+Service)  An example correct pattern that would match multiple services would be (https://www.rutgers.edu/ or https://acs.rutgers.edu/)\nAnd hell, I'd take that wager because I know exactly how Rutgers matches their patterns.  And its not with wildcard urls for sub-domains.\n. Marvin, I'll take a look later, but I thought we had agreed on minimizing what existing deployers would need to do.  Making them rename a file in their config seems unnecessary :-)\n. I just thought we had discussed making the improvement opt-in (i.e. they can choose to update their configuration) but  moving to 3.5 would require no configuration change (they just wouldn't get the performance boost).\n. +1 to that.  I want us to evangelize the improvement like crazy but I don't want people to feel that upgrading is a pain in the ass even if it is a \"minor\" revision.\n. I think my only major feedback was above.  I mean I'm sure I could find a missing final or something :-)  Or we could argue spaces vs tabs ;-)\n. Anyone know what the popularity of Janrain is?  There is precedent to pull in outside extensions with limited marketshare (i.e. ClearPass).\n. It seems like a few universities made the list.\n. I think the only outstanding thing I see is to just remove the stuff from web.xml if possible.  Other than that I think I'm happy to merge the pull request.  Does it look like any comments/feedback were missed? \n. I haven't had time to look through it completely but I did notice missing javadocs and code that doesn't conform to our coding conventions.  We also appear to be including configuration for this feature in our configuration files (apologies I haven't specifically looked into this one very closely, I'm on a scrum call :-)).\n. Just for reference, can you point me to the conversation/thread that noted this was the preferred method? I don't recall reaching that consensus though we've had so many threads I'm not sure if I would be able to safely recall it :-)\n. Yes, but I believe we also looked at this:\nhttps://github.com/Jasig/cas/pull/23\nAnd I was in favor of this.  I don't think we ever resolved which one we wanted.\n. So to be honest, I'm not sure at this point which one I liked more based on all my comments.\nI just want to summarize briefly the pros/cons of each that I see and maybe we can get one final confirmed closure on this.  (sorry for hijacking this Bill, but I just want to make sure we close properly)\n. Inline Default:\n- self-documenting on default when you view property\n- less things to edit when there is a new property\n- non-consolidated documentation on available properties\nDefault.properties\n- Consolidated, one stop shop on what available properties are\n- Documented in one place via default.properties\n- Requires remembering to add it to default.properties\nDoes this look like a good pros/cons summary?  One seems (slightly) easier for devs to remember and manage and one seems (marginally) easier for deployers to find out available properties.\n. Err there was supposed to be + and - values to indicate positive and negatives.  But I'm pretty sure you can figure them out :-)\n. I don't feel like we've accurately addressed issues around documentation and understanding for deployers and consumers of this.\nWhat steps are we going to take if we do it this way to ensure that deployers can easily find and understand what values they can override?\n. Do we consider this to be ideal?  It looks like this would require us to:\n1. put the property and its default value in the appropriate Spring Configuration file\n2. Document it as a comment in the cas.properties replicating the same default value.  \nDoes this seem likely to get out of sync?\nBTW, I'm +1 on rolling in the Log4j changes to move it out of web.xml if we can separate those changes into its own pull request.\nI'd like us to spend a bit more time thinking about the best way for our deployers to manage the growing list of over-ridable properties.\nRelated: where are we documenting the upgrade instructions (i.e. if people have their own web.xml, what they need to do to pull out the log4j config)\n. Can you open a JIRA issue for this? I think the fix will be more involved than what you're suggesting (and I'm happy to make the fix).\n. I'm going to issue a new pull request for this.\n. Marvin, I attached your name to this since I believe you had made the most recent Inspektr changes. Let me know if you'd rather have me look at it instead. (I'm going through my emails in case its not obvious :-))\n. Do we plan on migrating to a stable version of scribeUP before the next release?  i.e. do they have an ETA on a real release?\n. Awesome!  (in theory our build is supposed to flag any SNAPSHOTS before release, but I'm not sure I trust it :-))\n. Can you open a JIRA issue for this?\n. I think I only had minor concerns about exposing some data as public that may not need to be public (its always easier to make things public later than to get people to stop using them).  Other than that it looked fine.\n. Ship It!\n. Let's do the plugin update as a separate pull though.  I'm going to merge this in.\n. I never got any email to address replies to my feedback.  Is there a reason this was merged and closed?\n. No worries, I think we're finding that we may need a better Code Review tool :-)\nI'll have to now look through the comments again but my main concern was around mixing a UI concern (being able to unselect an attribute name) and the backend storage requirements (where alternative should be null)\n. I don't see what a radio button has to do with what we store.  You should be able to determine/handle a radio button without having to store \"(default)\" [which also isn't very internationally friendly]\n. - return the list of attribute names without (default)\n\nCool\n- remove the constant and store as null\nCool\n- add a mechanism to the UI such that radio buttons (or something else) are\n  cleared and binding value is reset to null.\nSpring Binding / Property Editors should already support this type of thing.  Do they not? \n- Check for NPE where the getter tries to retrieve the username attr.\nIdeally, we should be looking for null and not waiting for an NPE :-)\n. Just to follow up before I forget: not having JPA annotations on those\nother fields was a mistake (and it generates horrible field names) so\nplease put one on the new field you added to match what was done with\nevaluation order.\n\nThanks!\nScott\nOn Mon, Aug 6, 2012 at 3:27 PM, Misagh Moayyed <\nreply@reply.github.com\n\nwrote:\nI suspect that prop editors do this already. Once a selection is cleared, I\nthink the binding should automatically reset the field to null as the field\nis removed from the request but I'll have to test this to be 100% sure. At\nleast, I know checkboxes work like that. Radios should be similar.\nAs for NPEs; sure :)\nI'll work on the changes this evening. Should be pretty minimal.\n-Misagh\n\n-----Original Message-----\nFrom: Scott [mailto:reply+i-5911164-\nb2b6421dc7033c3512bbc59b13b88a9001c7cf5f-1205228@reply.github.com]\nSent: Monday, August 06, 2012 12:15 PM\nTo: Misagh Moayyed\nSubject: Re: [cas] CAS-999: per-service selection of username attribute\nto release... (#93)\n- return the list of attribute names without (default)\n\n\nCool\n- remove the constant and store as null\nCool\n- add a mechanism to the UI such that radio buttons (or something else)\n  are cleared and binding value is reset to null.\nSpring Binding / Property Editors should already support this type\nof thing.  Do they not?\n- Check for NPE where the getter tries to retrieve the username attr.\nIdeally, we should be looking for null and not waiting for an NPE :-\n)\n\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93#issuecomment-7532671\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93#issuecomment-7533017\n. I like this method better if it works.  Ideally we should find a way to not rely on sessions at all, but this looks to be a better stopgap.\n\nI'm curious how much it changes the garbage collection profile though.\n. We proved with Spring Web Flow 1 that we didn't actually need sessions (as long as everything could be serialized). That helps immensely with scalability and simplification of configuration which is why I would eventually like to get back to that.\n. +1 just one minor question\n. I'm assuming these work.  If so, I'm +1 for commit. :-)\n. Wouldn't this just include whatever hash was on the login server page? Not sure why you would want to send that back to the client.\n. Your container should not be redirecting to the CAS server and attaching the fragment to the login url since its part of the service url.  Why is it attaching it incorrectly?\n. This seems like incorrect browser behavior.  Have the appropriate bugs been filed with the browsers?\n. Except you could be potentially sending back fragments that you shouldn't.\n. This code will attach any fragment back to the service url whether it was intended or not.  If you're using something on the CAS side that generates fragments (so you have http://login.cas.edu/login?service=fjkfajfl#casFragment that will get passed back to the client.\n. I think it is okay to merge.\nOn Aug 15, 2012 7:40 PM, \"Misagh Moayyed\" notifications@github.com wrote:\n\nThis pull is also ready for a merge, if there are no further objections\nand/or comments to be addressed.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/101#issuecomment-7773049.\n. Looks good.  One completely optional recommendation, and just some logging clean up in the tests.  If you make any of these changes, I don't think it needs another round of code reviews.\n. Does this make sense to do without a reorderer?  Also, we need to sort by\nname if two items have the same order, don't we?\nOn Aug 8, 2012 6:57 PM, \"Misagh Moayyed\" notifications@github.com wrote:\n...instead of name.\nJIRA: https://issues.jasig.org/browse/CAS-1159\nYou can merge this Pull Request by running:\ngit pull https://github.com/mmoayyed/cas CAS-1159\nOr view, comment on, or merge it at:\nhttps://github.com/Jasig/cas/pull/104\nCommit Summary\n- CAS-1159: Service Registry UI: sort services by evaluation order,\n  ins\u2026\nFile Changes\n- _M_cas-server-core/src/main/java/org/jasig/cas/services/web/ManageRegisteredServicesMultiActionController.java\n  (2)\nPatch Links\n- https://github.com/Jasig/cas/pull/104.patch\n- https://github.com/Jasig/cas/pull/104.diff\n\u2014\n  Reply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/104.\n. Yes, I am referring to the Fluid reorderer or something similar.  \n\nI don't believe we enforce unique evaluation orders.  Do we?\n. +1\nOn Mon, Aug 20, 2012 at 6:25 PM, Misagh Moayyed notifications@github.comwrote:\n\nTeam, if there are no objections, I'd like to go ahead and merge this one\ngiven that enough time has passed since the original submit and it appears\nthat all comments are accounted for and addressed by Jerome.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/106#issuecomment-7885715.\n. The stuff looks fine.  In terms of the exceptions, I thought the tool would either natively handle a parse exception or allow you to map it (or extend it to do that) not that you had to manually convert a parse exception to an illegal argument exception.\n. Sorry, yes, I think we are good to go!\n\nOn Wed, Sep 12, 2012 at 12:52 PM, Misagh Moayyed\nnotifications@github.comwrote:\n\nSo, in light of the last commit is there anything else that can be\nimproved with this pull? May I assume that all comments are accounted for?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/108#issuecomment-8501491.\n. +1 from me!\n. Ship it!\n. +1\n. +1\n. +1\n. If these are the only two needed, +1 (i.e. are any changes required to the Spring config for Spring Security?)\n. You're going to need to make changes to:\nhttps://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/webapp/WEB-INF/spring-configuration/securityContext.xml\n. Would it make sense to move that \"/services/\" to a property (with the default still being \"/services/\" or is that out of scope for this change?\n. The diff doesn't seem to be clean (at least when I looked at it)\n. +1\n. I'm going to merge this in since it blocks building without test failures.  If there any improvements people want, we'll address them in a new pull request.\n. This one should actually properly check everything.\n. Apparently my update of my local files messed with the formatting.\n. I'll do it over the weekend.  I've got a whole bunch of CAS stuff to catch up on over the weekend :-)\n. Please reconfirm that this looks good.\n. Updated Restlet version.\n. +1.\n. I'm going to merge this in. It seems safe.\n. Marvin, can this be merged for 3.5.1?\n. So do you mind if its gone? :-)\n. Marvin, can we get this in for 3.5.1?\n. I think we should merge.  I completely forgot about this.  Apparently this was from my last Pull Request  Blitz :-)\n. My largest concern is around the \"nullable\" attribute\n. Can this be merged since master is now geared towards 4.0?\n. Marvin, I agree with you but I think this should be merged in first and we'll deal with the the other part later.\n. I just got back from vacation.  Please don't merge this until I've had a\nchance to look at it.\n\nThanks!\nScott\nOn Fri, Oct 5, 2012 at 10:10 AM, LELEU J\u00e9r\u00f4me notifications@github.comwrote:\n\nThanks for being so fast in code review (as usual ;-)\nIf you can make some more tests, that would be great. Of course, I will\nupdate docs when CAS-1183 will be done.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/138#issuecomment-9176731.\n. Did we merge in the JPA changes before creating this separation?  It looks like that pull request is still open?\n. We need to still merge in CAS-1134 before we can consider this pull request.  Can you guys +1 and merge it if possible.  In the meantime I will review this.\n. 1) is the 403.html mapping in web.xml usefull ?\n\nYes, I believe\n\n\n2) is the com.github.inspektr.common.web.ClientInfoThreadLocalFilter filter still usefull ?\n\n\nYes, if we're doing auditing.\n\n\n3) do we really need SafeContextLoaderListener and SafeDispatcherServlet or can we move back to more regular Spring beans ?\n\n\nNo, these should die a quick death.\n. +1\n. +1\n. -1 for now.\n\n\nI believe we did this for a particular reason due to a bug reported.  Unfortunately, I can't remember the reported issue number off the top of my head.  I'll have to look it up when I get a moment (unless someone beats me to it).  I'm willing to revisit the issue, but I don't want to say +1 until I remember why we actually changed it.\n. We did it for this JIRA issue: https://issues.jasig.org/browse/CAS-946\n. I'd be happy to +1 this if we can figure out how to make English the default, and be able to click it :-) \n. Sorry, I didn't quite understand.  Did you test whether the proper behavior happens if the messages_en.properties file changes to messages.properties?  Will choosing German and then English from the list of languages actually result in it switching to English.\n. Sorry, just to be extremely explicit: does that include re-selecting English after choosing another language?\nI.e. start out in English, choose German, and then choose English again.\n. If it works, then +1.  I wonder what changed to make it start working again. Maybe they fixed a bug in Spring?\n. +1\n. I'm assuming this won't fail a build just output information?  Will this be run automatically or on demand?  If its automatically, won't it slow down a build?\n. +1 \n. If there's a chance an error can contain user provided data (i.e. username, etc.) then we should now allow this.  It won't differentiate between the message template having HTML and the parameters, will it?\n. The CAS Management WebApp shouldn't have skinning/themes.\n. If you use a Maven plugin in Eclipse (and have it attach source) and also debug remotely to your Tomcat port, that should allow you to set breakpoints in the Spring source without copying source code (sorry for the delay, we had a storm over here that knocked out power :-))\n. Can you just add a comment on what fallbackToSystemLocale=\"false\" will do this way we don't forget?  Otherwise, +1\n. Also, do these have to be tied together?  If not, can they be two JIRA issues so we can track properly for regression testing?\n. +1\n. assuming everything still compiles and tests pass, +1\n. +1.  Just a minor formatting comment.\n. +1\n. +1\n. Some minor comments, nothing that would stop the merge.\n. For the init() comment I had, is there any reason since ProviderDefinition is injected via Spring, to not just have an init-method=\"init\" ? (I think the only Spring requirement is it might have to throw Exception).  Its non-obvious as to why one place had it and one didn't.  Otherwise I think your changes look fine.\n. If init should only be called once and this is being injected into multiple classes then one of the following has to happen:\n1. complete lifecyle management by Spring (i.e. \"init-method\").\n2. init actually happens in the constructor for ProvidersDefinition\n3. Rely on @PostConstruct (which will be used by Spring).\nHaving one particular class call init defeats the purpose of IoC and actually increases confusion and risk.  If you're concerned about someone forgetting to set \"init-method\", then use @PostConstruct\nCheers,\nScott\n. That sounds fine though if your library isn't already using Spring, using @PostConstruct might be better instead of being dependent on a Spring interface?\n. Doing it in the OAuthAction doesn't actually solve the issue.  The issue is that it should be \"initialized\" before its injected into any class.  We shouldn't just pick one of the three that rely on it to initialize it.\nOpenSAML2 forces us to do that and its a disaster (in my opinion).\n. init-method is fine by me.\n. Is the diff updated to have the usage of init-method or do you want me to do that after I merge it?\n. It would be great if there was a high level document describing the API changes.  Its hard to see the forest from the trees in a commit/diff like this.\nIt would also make it easier to compare/contrast to previous explored work.  Without a higher level view I feel like I'm annoyingly nitpicking on stuff. :-)\n. +1\n. As per my comment on the JIRA we should be able to use our existing\nmechanism of Client info. I'll confirm that we can.\nOn Jan 4, 2013 5:19 PM, \"Andrew Petro\" notifications@github.com wrote:\n\n@edomazlicky https://github.com/edomazlicky nice fix. I like it. +1 for\nmerge.\nIn principle the Tomcat Valve etc. solutions that make\nrequest.getRemoteAddress() return a meaningful IP address do seem like a\ncleaner solution to this problem, and I'd encourage everyone to first reach\nfor solutions higher up the stack like that, but this pull request enhances\nCAS to accomodate this mapping at the CAS layer if it's not being handled\nup stream. Nicely done.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/185#issuecomment-11902482.\n. Please see this pull request instead:\nhttps://github.com/Jasig/cas/pull/187\n. +1\n. Configuration via this filter:\nhttps://github.com/dima767/inspektr/blob/master/inspektr-common/src/main/java/com/github/inspektr/common/web/ClientInfoThreadLocalFilter.java\n. @mmoayyed can your changes for pull request #191 be ported to 3.5.2?  If so,we should close this request.\n. +1, one minor final missing\n. +1\n\nWe may want to consider adding the Maven Enforcer Plugin (I just did it for the Java Client and Commons Logging) to fail the build if the other cglib sneaks in accidentally.\n. +1\n. The purpose and configuration of this isn't clear.  It looks like you're going to have to register filters in the Spring configuration for specific services versus keeping all service configuration in the services management tool.\nI'm not currently in favor of this pull request.\n. +1\n. This looks fine to me.  Can you open a JIRA issue for this and associate them together? I'll let the LPPE people comment more on whether these changes affect anything.\n. +1\n. Was this merged without comment?  That's not good.\n. Okay, cool.  Just wanted to make sure there were some eyes on a pull request.  We should make sure people who do look at it but have no objections put their +1 in :-)\n. As punishment you will now be subjected to more code reviews ;-)\n. +1 nice improvement.  Saves everyone from reading my mental state from 5 years ago :-)\n. I'm not sure this is a good idea.  First once you're at WARN level, it should really include the URL.  Second, if its a popular service, you're just going to spam your log for something that should have been validated before.  Thoughts?\n. +1 this looks fine.  Do we have a unit test that confirms the behavior?\n. +1\n. +1\n. We pretty much follow their pattern minus using ClassName.class (we use getClass() where possible for inheritance reasons)\n. +1\n. +1\n. I'm not going to have time to review them this moment so do what you guys think is right.  At this point I'm just the annoying guy pointing out flaws without actually fixing anything :-)\n. Its very hard to compare when the files are reformatted.  For other files it looks like you just added the namespaces but aren't using them.  Is that true?\n. Its very hard to compare when the files are reformatted.  For other files it looks like you just added the namespaces but aren't using them.  Is that true?\n. I'm not quite sure what the purpose of this commit is.\n. how did we define \"appropriate\" ?  This seems to just be adding bloat to the files.\n. I'm not against making our XML files better, but just adding them and not doing anything with them doesn't seem like a useful change.  If we wanted to do one at a time (say convert all them to use the p namespace as one commit, then do the c, etc.) I'd be fine with that.\n. Assuming the site still deploys, +1 :-)\n. I like:\n-  Allow operators to be placed on new lines\n- Remove redundant final modifiers\n- Wrap the line endings at 140 instead of 120. Slightly more flexible with longer class names\n- Static variables are to be defined in all CAPS\n- Switch logger objects to be called logger or LOGGER per slf4j recommendation\n- Allow catch clause exceptions to be marked as final\n- Require whitespace before and after operators\n- Javadoc: Require {@inheritdoc} when `@Override is used. This tremendously helps to reduce javadoc errors and warnings.\n- Require utility classes to have no visible constructor\n- Catch System.out.println calls. Fixed all instances\n- Javadoc: Require @Override tags and @Deprecated\nDo we need:\n- Relax the number of method parameters to be 10, instead of 7 (why are we placing this restriction at all?)\n- Catch Java classes with the missing license header (does the plugin for licensing not do this already?)\nambivalent on (I actually just prefer the eclipse warning for when it doesn't cover every case):\n- Require switch statements to have a default case - this may not always be the case that we need a default.\n. For #1, for me it comes down to which one can do it better?\nFor #2, do you mean constructor args?\n. Also, we can't get rid of the license plugin as it makes it easy to add the headers :-)\nCan we separate ctor and method params?  I think ctor I wouldn't want to restrict since we use it for required dependencies.    But for method params we should\n. +1\n. +1 with a few minor questions/comments\n. +1.  Would you mind just declaring an explicit scope?\n. +1 though its not clear to me how we confirmed that all the flows still work :-)\n. I like the second answer :+1: \n. Just a question: is it worth trying to rush this into the RC?\n. +1 for this improvement.  We can probably improve it further (though it shouldn't stop this pull request)\n. @apetro I concur.  I +1-ed this to at least get this change in. We should open a JIRA issue for further improvements around what you are talking about.\n. Thanks for the update.  Just wondering if we should change the constructor to just take a class object instance of an instance.  Breaks the XML config if anyone had any already but it makes more sense than grabbing the classname from the provided instance.  Thoughts anyone?\n. If its possible, then +1 for that.  I'd have to look over their APIs again.  We wrote that initial code in like 2006 :-)\n. +1\n. I'm not sure why we would ever want to not have this as opt-in.  This is unnecessary exposure/leakage of information.\n. The CAS arbitrarily sets a value by default to a property we for some reason call host.name.  Rutgers used to set them to cas1 and cas2 not leaking any host name information.\nIf you expose this \"auto\" option, at some point someone is going to remove host.name from the sample cas.properties and everyone is going to be getting hostname generated suffixes automatically.\n. If we wanted to get crazy/more explicit, we could define SuffixFactories that output strings and then have things reference those.  \nThe default in the deployerConfigContext.xml (or any XML file that can be overwritten) could be a very safe one but we could include one that generates by hostname (and whatever other crazy scheme we can think of ;-)).\n. There's also no good reason to disclose infrastructure details automatically.  Regardless of whether you have \"proper\" security measures in place, disclosing information you don't need to is generally not recommended.\n. +1\n. I'm not really in favor of this without subsequent changes that would make it explicit why its not working.  This bit of code exists to basically enable the default CAS2 behavior if you're not using the registry.\n. We actually no have no clue how many people (a) register items in the service registry or (b) use the default values we specify in the deployer config file.  Wouldn't a more sensible step be to force the \"disabled\" item to only work with HTTPS urls?  \nA major release is the perfect time to make a big change that makes sense to make.  We shouldn't just make changes in a big release just because we can. That's not deployer friendly.\n. If my service registry data was deleted, I'd prefer a lockdown to just HTTPS services rather than a basic stopping of all functions of the CAS server.  The amount of phishing attempts that could occur in that relatively (?) small window of restore versus the amount of help desk/customer service calls?\n. +1\n. Aren't we locked down for 4.0?\nAlso, is there a corresponding documentation change explaining this to users? (especially since people will have to update the flag in their current instance before upgrading)?\n. Why are we still adding features to an RC?  I asked this question 15 days ago.  I shouldn't have to -1 something that should have already been out of scope for an RC.\n. If a feature wasn't done by the time we hit RC, then it should have been bumped to the next version (4.0.1 or 4.1) or we should have delayed tagging an RC1.  You're finding bugs in other critical parts (thanks!) that need to be fixed but at the same time introducing new features which could (potentially) introduce more bugs :-)\n. Its not a bug, so what else would it be?\n. Right, and we shouldn't really be doing anything other than bug fixes in a release candidate unless there's a particularly good reason.\n. To be clear, I don't disagree with the change, just the timing.  If we had other features we wanted to get in, we should have delayed RC1, not tagged it and then pretended that it was still a milestone :-)\n. +1.  We should consider deprecating the restlet support soon and switching to just using a Spring controller with the parameter matching.\n. Because 4.0 is already in the RC stage. :-)\n. Release Candidate usually means feature freeze and just bug fixes.\n. The language change looks fine.  So +1 for that.  Not sure why the EhCache change is tied to this commit though.\n. -1.  This forces all deployers to have this behavior which may not be ideal (or obvious).  In addition, if someone does not have a validator that checks null further up the chain, this will throw a null pointer exception.  Also, there are no javadocs that explain this hidden behavior.\nIs there a reason a concerned deployer cannot configure a property editor via Spring to trim passed in text?\n. It looks like tests are failing from compile errors.  I am +1 on the concept of this change, but I think this is a post 4.0  pull\n. +1 though with us in RC/GA mode, this should probably wait until a 4.01\n. @leleuj who is that question directed at me?  Me, or @mmoayyed \n. Our standard for abstract classes is to let the subclasses re-use it.  This was a miss that it was private.\n. @leleuj that is referencing libraries (i.e. extending Spring controllers) but we try and have the same behavior.  We missed it on this class. I don't know if I would go call it a bug, and I don't think it should go into 4.0.  We've already introduced features into release candidates which violates our own release strategy.\n. Is this for 4.0?  Aren't we feature complete and preparing for the GA\nrelease?\nOn Oct 27, 2013 3:34 PM, \"Misagh Moayyed\" notifications@github.com wrote:\n\n\nYou can merge this Pull Request by running\ngit pull https://github.com/Unicon/cas CAS-1111\nOr view, comment on, or merge it at:\nhttps://github.com/Jasig/cas/pull/343\nCommit Summary\n- CAS-1111: Check if CAPS LOCK is enabled on CAS Login\n- CAS-1111: Added missing semi-colon\nFile Changes\n- M cas-server-webapp/src/main/resources/messages.propertieshttps://github.com/Jasig/cas/pull/343/files#diff-0(1)\n- M\n  cas-server-webapp/src/main/webapp/WEB-INF/view/jsp/default/ui/casLoginView.jsphttps://github.com/Jasig/cas/pull/343/files#diff-1(1)\n- A cas-server-webapp/src/main/webapp/images/warning.pnghttps://github.com/Jasig/cas/pull/343/files#diff-2(0)\n- M cas-server-webapp/src/main/webapp/js/cas.jshttps://github.com/Jasig/cas/pull/343/files#diff-3(18)\nPatch Links:\n- https://github.com/Jasig/cas/pull/343.patch\n- https://github.com/Jasig/cas/pull/343.diff\n. +1, and I think this should be merged into 4.0 RC/GA.  Can you amend the commit message to just explain how it \"gums up the next login attempt\"\n. Still +1.  Thanks for the commit message update!\n. I'm -0.9 on this.  I think this solution increases confusion for the user (especially since it doesn't tell you to do anything if the session times out).\n. Marvin, a solution like yours (whether its that or something else, but conceptually the same user experience) is what I had in mind when I was pushing back on this issue.\n. @leleuj just a note for historical reference.  The reason that LoginTickets/Tokens exist (which essentially forces a session) was to combat an issue with browsers reposting credentials when users hit the back button.  This issue was around in 2005.  Not sure if its a major issue right now.  \n\nWhen we used Spring Web Flow 1, they had client-side flow management and we merely flagged/highlighted the risk/trade-off of removing the LT so that clients could decide if it was an acceptable risk for them.\n. @leleuj I disagree.  Users don't expect a login screen to expire so its in our best interest to remove that behavior if we're not compromising security (or if we're allowing a deploy to choose a trade-off).  \nWith regards to LT, it exists to solve a specific problem with browsers from like 2002.  We should confirm it recent/modern browsers exhibit the same behavior.\n. Are we planning on a 3.5.x release?\n. It says the build failed?  Is that still true?\n. +1  This is a bug fix with zero risk so it is probably safe for RC3/GA (whichever comes)\n. +1 for 4.0 RC/GA but can you create a JIRA issue to track it?\n. I agree with @serac statement :-)\n. Not really sure what benefit we get here since its used as part of the code that constructs a SAML message (even if we aren't following the protocol exactly)\n. Considering that both consumers of this method create a SAML-style message (regardless of whether its 100% SAML compliant), I don't see any value right now in renaming this class.\nCan we get around this completely by just extending FastDateFormat to have a default pattern and call it ISO8601FastDateFormat (or something like that) and remove the Utils class?\n. +1 for the concept -1 for the singleton.\n. +1 for post 4.0 unless this is a blocking bug.\n. @mmoayyed Are .conf and .jmx also text and included in the distribution?\n. +1\n. +1, is this a bug fix that should go in RC2?\n. @leleuj yes, sorry I meant RC3 or GA (whichever comes next)\n. Just a note that I started to look at this (Commented once), realized its large and will have to defer until later :-)\n. +1\n. +1 I don't have a strong opinion on the logger, though it seems unnecessary since we're not using the SLF4J api method.\n. I think you made this change against an old version of the code and with an incorrect formatter (that undid the formatting)\n. +1.  If its a bug fix, for 4.0\n. I'm not seeing any value in this.  It actually goes against our documented behavior of opening up useful extension points rather than just making everything non-final, protected, etc.  If MFA isn't working, then we didn't expose enough proper extension points.\nI'm -1 for this.\n. It helps to understand something more specific about the use cases.  Telling us you have to \"effectively ... include a new CASImpl\" does nothing to help ensure those use cases are supported.\n. +1 for post 4.0\n. Seems like something we should have a unit test for?\n. Failed test :-( \nFailed tests:   testGetCode(org.jasig.cas.services.UnauthorizedProxyingExceptionTests): expected:<[service.not.authorized.proxy]> but was:<[UNAUTHORIZED_SERVICE_PROXY]>\n. Are these critical bug fixes to be merged?  I assumed not which is why I wasn't looking at this for anything until after 4.0 is out.\n. Why would this be merged for 4.0?  Is it critical bug fixes?  Doesn't look like it from the subject (which is why I wasn't rushing to review it yet)\n. Is it fixing a bug?  Then I would say no. (I also don't see a referenced JIRA issue)\n. I recommend JIRAs just so that we keep track of the features we introduced in case it becomes interesting enough to highlight in release notes. \n. I'm a little confused, subject says references old version of Spring Security but we upgraded spring-expression.\nThat said, if this fixes the problem, +1.  Just make the commit/pull request more clear :-)\n. +1 though can we do this post 4.0 just to minimize changes?\n. I don't know why you're calling this a bug that there's two properties (that actually at the moment have to be inverted to be \"used\" the same way). I agree its a definite improvement, but if we're calling it a bug merely to justify pulling it into an already delayed 4.0, I don't know if that's good enough justification.\n. I'm all for this change (I'd actually even recommend aligning the properties so that they're not reversed), I just don't know if it should really slip into a release candidate.  When things that look like improvements get flagged as bugs I assume its to try and justify slipping it into the release.  Apologies for the assumption :-)\n. Cool.  I definitely think we should align the properties or actually eliminate one of them if we can.  I.e. does default registry cleaner even need to care?  If just attempts to log out and if logout manager is disabled then its a no-op (sorry I haven't looked at the code recently to determine if that's actually possible)\n. Post 4.0, we may want to investigate a refactor that makes it not care (if possible)\n. +1 Thanks!\n. +1 though our build server is complaining :-)\nCommit message for d0b62d7e48bdb45ffe747b1430f82263ff6718e0 is not following commit guidelines. Please see:\nhttp://jasig.github.io/cas/developer/Contributor-Guidelines.html\nThe command \"./travis/test-commit-message.sh\" failed and exited with 1 during before_install.\n. Why exactly are we making this change?  The justification isn't valid: \"This pull fixes an inconsistency where proxy-granting ticket ids do not begin with their assigned prefix PGT, per the CAS protocol.\"  The CAS protocol says they should, not they must.  In fact, when CAS 3 was created this conversation occurred with the Yale team who agreed.\n. I'm open to a discussion.  All I'm saying is your original premise that this is somehow a bug is wrong.  It being prefixed with a TGT instead of a PGT complies completely with the protocol.\n. \"PGTs and PTs are entities in the protocol. They are considered domain objects in the protocol and yet in the codebase they are not. That is an inconsistency.\"\nThis is not an inconsistency.  PGTs and PTs exhibit the same behavior as TGTs, otherwise this code base would have fallen apart on day 1. :-)\nIf we feel we gain something by extending the TGT interface to introduce the PGT interface, that's fine.  But let's not frame it around the existing code having bugs.\nAt the same time, we should actually not be using TGT, PGT, ST, or PT internally as domain objects as we support OAuth, SAML, and CAS.  But I may be the only one who wants to go that far and clean that up.\nSide note: do you EVER sleep?\n. Luckily, according to the JIRA @mmoayyed is targeting 4.1 which gives us plenty of time to debate ;-)\n. I love how there is an RFC for that :-)\n. I'm always happy to discuss further. Session is what we were using in the feature-cas4api branch (https://github.com/Jasig/cas/blob/feature-cas4api/cas-server-api/src/main/java/org/jasig/cas/server/session/Session.java).  I'm not advocating we take any of that code, just noting that we've been looking at that name for a while :-)\n. Since we're going to do a larger refactor later, why aren't we just doing the minimal work (using a new prefix) ?\n. I really think that we should be doing the minimal effort to get the \"PT\" here.  Introducing some stopgap interfaces just temporarily introduces more public APIs that we're not going through properly lifecycle.\n. +1\n. +1  I trust your French :-) (and more importantly your testing)\n. +1\n. I don't think there's been enough conversation to make the statement that this will just be merged on Monday. I know I haven't had a chance to review it it.\n. Conceptually I like supporting this use case, though reading through the documentation you provided (which is nicely rather thorough) I'm not a huge fan of the abstractions chosen and how they go together.  Let me think a little bit about what is bothering me about it (I'm struggling to articulate it right now)\n. +1 assuming build issue has nothing to do with upgrade\n. +1 assuming build error is not related to upgrade\n. What value is this adding?  This means that deployers who previously overrode the file in their local overlay are now no longer overriding that file and will have to rename.\n. how did we go from aligning view names to a new theme resolver utilizing hard-coded paths?\n. Doesn't hard-coded paths mean that files can't be shared/leveraged across themes?\n. +1\n. You changed the actual functionality and role of the class (which was pseudoanonymous).  Breaking API changes aside,  the pseudo-anonymous functionality is important.\n. Its not pseudo-anonymous if its just based off of principal.  The point was the combo of principal+service allowed it to be continually uniquely identified by that particular service but you could never correlate across services.\n. Its not pseudo-anonymous if its just based off of principal.  The point was the combo of principal+service allowed it to be continually uniquely identified by that particular service but you could never correlate across services.\n. +1 to merge because it looks like you'll be looking into the same thing I was concerned with in #681\n. +1 to merge because it looks like you'll be looking into the same thing I was concerned with in #681\n. +1\n. +1\n. how do we get your configuration notes into the documentation that is produced?\n. how do we get your configuration notes into the documentation that is produced?\n. Sorry I haven't had a chance to look into this in detail. I kept going from\nthe top of the stack so I got to all of your other pulls first :-(\nOn Mon, Jul 14, 2014 at 2:04 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nHeads up. Planning to merge by Monday evening unless there are additional\ncomments. Relates to #460 https://github.com/Jasig/cas/pull/460\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/452#issuecomment-48867988.\n. Sorry I haven't had a chance to look into this in detail. I kept going from\nthe top of the stack so I got to all of your other pulls first :-(\n\nOn Mon, Jul 14, 2014 at 2:04 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nHeads up. Planning to merge by Monday evening unless there are additional\ncomments. Relates to #460 https://github.com/Jasig/cas/pull/460\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/452#issuecomment-48867988.\n. You need enough +1s to merge not a date.  All of this is taking longer for\nme as I have to find all of the open pulls in an inbox of GitHub messages.\nOn Jul 17, 2014 4:15 AM, \"LELEU J\u00e9r\u00f4me\" notifications@github.com wrote:\n+1\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/452#issuecomment-49271249.\n. You need enough +1s to merge not a date.  All of this is taking longer for\nme as I have to find all of the open pulls in an inbox of GitHub messages.\nOn Jul 17, 2014 4:15 AM, \"LELEU J\u00e9r\u00f4me\" notifications@github.com wrote:\n+1\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/452#issuecomment-49271249.\n. If you're not getting the response you need, let's raise the concern on the\nPMC list and find out what the problem is.  For those of us who have been\ntrying to respond to your issues instead of getting to do our actual own\ndevelopment, its a bit of a slap in the face to basically say we're not\nresponding fast enough.  I know that's not your intention.  You obviously\njust want the code merged (and I can't blame you for that), but we need to\nfind a way that makes sure they get reviewed by the team.\n\nOn Thu, Jul 17, 2014 at 6:47 AM, Misagh Moayyed notifications@github.com\nwrote:\n\n\u0651For this particular pull, there has been plenty of discussions as it\nsupercedes another and the suggestions have been made for us to do the\nminimal. A week also has passed. Other issues are pending and some depend\non this. I understand the frequency of the pulls is perhaps too many but\nfrom time to time I have tried to remind folks to make the time to review.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/452#issuecomment-49291355.\n. If you're not getting the response you need, let's raise the concern on the\nPMC list and find out what the problem is.  For those of us who have been\ntrying to respond to your issues instead of getting to do our actual own\ndevelopment, its a bit of a slap in the face to basically say we're not\nresponding fast enough.  I know that's not your intention.  You obviously\njust want the code merged (and I can't blame you for that), but we need to\nfind a way that makes sure they get reviewed by the team.\n\nOn Thu, Jul 17, 2014 at 6:47 AM, Misagh Moayyed notifications@github.com\nwrote:\n\n\u0651For this particular pull, there has been plenty of discussions as it\nsupercedes another and the suggestions have been made for us to do the\nminimal. A week also has passed. Other issues are pending and some depend\non this. I understand the frequency of the pulls is perhaps too many but\nfrom time to time I have tried to remind folks to make the time to review.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/452#issuecomment-49291355.\n. The tests are failing.  If they aren't related to the change, +1!\n. The tests are failing.  If they aren't related to the change, +1!\n. +1 from me with the note that maybe we should mark those setters/default constructor combo as Deprecated\n. +1 from me with the note that maybe we should mark those setters/default constructor combo as Deprecated\n. Because I can't remember off the top of my head, are we saying that the services management tool is controlling per service what the valid url is?\n. Because I can't remember off the top of my head, are we saying that the services management tool is controlling per service what the valid url is?\n. That actually doesn't really seem like the right place to do that check if we also still have the handler.   I think that's a bit confusing for people who are trying to read the code (and also places pretty important logic outside of the \"service\" class)\n. That actually doesn't really seem like the right place to do that check if we also still have the handler.   I think that's a bit confusing for people who are trying to read the code (and also places pretty important logic outside of the \"service\" class)\n. I think I'm okay with this change as is.  But we should track possibly moving that logic into the \"core\" non web part.\n. I think I'm okay with this change as is.  But we should track possibly moving that logic into the \"core\" non web part.\n. I think moving that logic increases the scope of this pull beyond what your original intention was.  I wasn't suggested we move it in this pull request but we should revisit what core logic leaked out into what is essentially a marshalling layer.\n. I think moving that logic increases the scope of this pull beyond what your original intention was.  I wasn't suggested we move it in this pull request but we should revisit what core logic leaked out into what is essentially a marshalling layer.\n. +1\n. +1\n. +1\n. +1 with one minor spelling fix.  I do wish these types of things could just be edited by us (hey, wiki!) so save Dimo the effort :-(\n. +1 (again)\n. If hiding this is so critical, its probably better if toString() doesn't return the full value at all (because if someone uses Logback instead of Log4J we're back to square one)\n. Also, regardless of ultimate solution, I agree with Bill that we probably want to display some part of the unique aspect of the ticket.\n. Just because you haven't encountered a deployer that you support that's changed logging frameworks doesn't mean they don't (especially considering that Logback is significantly better than Log4j 1.x).  If we're using a Logging facade then we should make sure our features are enabled by anyone that swaps logging mechanism.  Otherwise we might as well have just compiled against Log4j itself.\n. This was merged after one +1. What is our threshold?  I would assume its\nhigher than one.  There was also definitely some confusion with what is\nopen after the switch from JIRA.  I know I had 200+ emails to sort through.\nOn Jul 17, 2014 1:55 AM, \"Misagh Moayyed\" notifications@github.com wrote:\nMerged #461 https://github.com/Jasig/cas/pull/461.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/461#event-142499806.\n. This was merged after one +1. What is our threshold?  I would assume its\nhigher than one.  There was also definitely some confusion with what is\nopen after the switch from JIRA.  I know I had 200+ emails to sort through.\nOn Jul 17, 2014 1:55 AM, \"Misagh Moayyed\" notifications@github.com wrote:\nMerged #461 https://github.com/Jasig/cas/pull/461.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/461#event-142499806.\n. I'm in agreement that we need to increase the pool of people reviewing and\ngiving feedback in a timely fashion.  Its been mostly (but not completely)\nJ\u00e9r\u00f4me and I and I have limited time (and I'm starting to get annoyed that\nall of my CAS time is reading pull requests instead of developing my own).\n\nShould we raise the concern on the PMC list?\nOn Thu, Jul 17, 2014 at 6:57 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nThat is partially my fault. When we moved JIRA to Github issues, you\npossibly did receive way too many notifications, as many JIRAs were simply\nassigned to you. Please ignore those.\nI really think we should establish a reasonable time period, which when\npasses, a pull can be merged. I have mostly been tracking this by\nobservation and lazy consensus, but formality helps to determine what\nactions should be taken.\nAgain, I am available to revise this pull or any other that is merged if\nyou or anyone else feels inclined to raise questions. No problem at all.\nJust dont want to wait indefinitely.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/461#issuecomment-49292170.\n. I'm in agreement that we need to increase the pool of people reviewing and\ngiving feedback in a timely fashion.  Its been mostly (but not completely)\nJ\u00e9r\u00f4me and I and I have limited time (and I'm starting to get annoyed that\nall of my CAS time is reading pull requests instead of developing my own).\n\nShould we raise the concern on the PMC list?\nOn Thu, Jul 17, 2014 at 6:57 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nThat is partially my fault. When we moved JIRA to Github issues, you\npossibly did receive way too many notifications, as many JIRAs were simply\nassigned to you. Please ignore those.\nI really think we should establish a reasonable time period, which when\npasses, a pull can be merged. I have mostly been tracking this by\nobservation and lazy consensus, but formality helps to determine what\nactions should be taken.\nAgain, I am available to revise this pull or any other that is merged if\nyou or anyone else feels inclined to raise questions. No problem at all.\nJust dont want to wait indefinitely.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/461#issuecomment-49292170.\n. Yes -- please post.  I was planning on doing it tonight, but no reason to\nwait!\n\nI think we need some threshold on what requires more than one vote (i.e.\nupdating language probably needs 0 - 1 + 1 votes but the creation of a new\npublic API probably needs more buy-in, etc.)\nOn Thu, Jul 17, 2014 at 9:36 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nBTW, at Scott's suggestion I am planning to post a question to the pmc\nmailing list and see what we can do to help with the progress and process.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/461#issuecomment-49307087.\n. Yes -- please post.  I was planning on doing it tonight, but no reason to\nwait!\n\nI think we need some threshold on what requires more than one vote (i.e.\nupdating language probably needs 0 - 1 + 1 votes but the creation of a new\npublic API probably needs more buy-in, etc.)\nOn Thu, Jul 17, 2014 at 9:36 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nBTW, at Scott's suggestion I am planning to post a question to the pmc\nmailing list and see what we can do to help with the progress and process.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/461#issuecomment-49307087.\n. We want to ship with a completely empty trust store and require deployers to set one up? (and also require deployers who have already gone through the pain of configuring their existing one to do something to get their existing one to continue to work?)\n\nAlso is the HttpClient change required for this?  If not, why are the two changes tied together?  For example, I have no problem switching to HttpClient, but I would hesitate to do something that is basically forcing people to reconfigure their existing set up.\n. We want to ship with a completely empty trust store and require deployers to set one up? (and also require deployers who have already gone through the pain of configuring their existing one to do something to get their existing one to continue to work?)\nAlso is the HttpClient change required for this?  If not, why are the two changes tied together?  For example, I have no problem switching to HttpClient, but I would hesitate to do something that is basically forcing people to reconfigure their existing set up.\n. \"Not quite. Deployers who have already been dealing with the default java truststore will continue to do just fine. The SSL factory recognizes both the default truststore and the local one that would be shipped with CAS.\"\nAhh that wasn't quite clear from the original description when I first read it (reading it again with your additional context makes it more clear).  We should be sure that its clear in our documentation.\nI'll review this now from the perspective of additive rather than replacement :-)\n. \"Not quite. Deployers who have already been dealing with the default java truststore will continue to do just fine. The SSL factory recognizes both the default truststore and the local one that would be shipped with CAS.\"\nAhh that wasn't quite clear from the original description when I first read it (reading it again with your additional context makes it more clear).  We should be sure that its clear in our documentation.\nI'll review this now from the perspective of additive rather than replacement :-)\n. \"Not quite. Deployers who have already been dealing with the default java truststore will continue to do just fine. The SSL factory recognizes both the default truststore and the local one that would be shipped with CAS.\"\nAhh that wasn't quite clear from the original description when I first read it (reading it again with your additional context makes it more clear).  We should be sure that its clear in our documentation.\nI'll review this now from the perspective of additive rather than replacement :-)\n. +1\n. +1\n. I would also prefer to wait for the official plugin (though Java 7 has been out long enough that we probably should start supporting that ;-))\n. I would also prefer to wait for the official plugin (though Java 7 has been out long enough that we probably should start supporting that ;-))\n. I would also prefer to wait for the official plugin (though Java 7 has been out long enough that we probably should start supporting that ;-))\n. True, it is only three years old!\nJava SE 7 (July 28, 2011)\n. True, it is only three years old!\nJava SE 7 (July 28, 2011)\n. True, it is only three years old!\nJava SE 7 (July 28, 2011)\n. +1\n. +1\n. +1\n. This just moves some imports around.  Is that what you intended?\n. This just moves some imports around.  Is that what you intended?\n. Ah +1 then though I am confused why this isn't in the other pull request?\n. You're logging all of the Exception messages at debug level.  This seems like something that could be handled for all authentication handlers if we do it in an authentication manager (i.e. https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/authentication/PolicyBasedAuthenticationManager.java#L232)\n. This looks like we are pulling in JDBC and JPA, as well as a cross-section of Services Registry stuff AND TicketRegistry stuff. I don't know if all of this belongs in something labeled \"jdbc\"\n. Well I figured if we were pulling it out of core we would pull it into separate modules but it looks like historically (i.e. LDAP) we just dumped all things with the same technology into one spot so my objection is removed :-)\n. Yes +1\nOn Jul 28, 2014 11:59 AM, \"Misagh Moayyed\" notifications@github.com wrote:\n\n@battags https://github.com/battags I am assuming you're +1 on this?\nWould like to finalize the move to get master back on track.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/618#issuecomment-50358095.\n. How does this appear to the user versus using Spring Web Flow's normal mechanism for required fields?\n. If we can do it in Spring Web Flow I think that would be better (personally).  It looks like we're attempting to match validation errors to authentication exceptions purely to get the messages up there which seems wrong (that said we could probably just introduce a ValidationException exception :-))\n\nAlso are those messages automatically translated such that the correct language one is displayed?  Those required fields you removed from the messages should have been translated with the appropriate language being displayed (at least it used to work)\n. This had no +1s to merge?\n. We can retro-actively +1 I just want to make sure its captured :-)\n. +1\n. +1\n. +1 assuming build failure is not related to changes :-)\n. +1 (assuming no one has concerns about the logging level)\n. +1\n. The change overall is fine.  I'm not a huge fan of how XmlViewResolver makes you specify a view xml file to resolve the views from (considering we already have mechanisms to load xml files) but that's not your fault :-).  I do think we should give a bit more information in the deprecated constructor on what you should be doing instead (or why we're not supporting the existing/previous behavior)\n. thanks though based on the description it looks like the behavior was removed with no way to do it another way?  Is that what we want?\n. It existed to allow you to release attributes to everyone (assuming you had a safe set of attributes to release) if you weren't using the service registry (i.e. enabling any services)\nThat does mean that constructor is basically a no-op at this moment and I'm just wondering the best way to communicate that what worked will no longer work.\n. I'm not sure this is a good idea.  You're basically forcing every client to accept your skew versus allowing them to make their own decision (if I am reading this correctly).  That said its optional, so if people are concerned by this they obviously don't have to change the value.\n. I'm okay with the change. My only request before you push would to be to put a more explicit warning in javadoc about how you should really do the skew on the client side to allow users to opt-in to a skew rather than forcing one on them.\n. +1\n. +1\n. How about using the uber-webapp module? ;-)\n. +1\n. I don't see the final fix.  Is it because that commit failed?\n. If its final, then +1 :-)\n. +1 though in the future we really should try to stick to one issue per pull request.\n. I'm not sure this really moves us forward.  Its spreading out more of the protocol logic and knowledge throughout the code base instead of attempting to isolate it into domain specific knowledge.\n. There actually is a reason that that the services have protocol knowledge and that's to ensure that the business logic layer can properly delegate to a service to handle protocol specifics (though I'm not sure if we ever properly completed the transition in the existing branch; I think the cas4api branch had most of that work).  Having the argument extractor handle protocol specifics and making the service \"agnostic\" just means that you're going to have to add more logic at some point into the business layer to handle the different types of protocols. Ultimately if we want to support multiple protocols in any sane way, we need to make sure we've got proper encapsulation of protocol-specifics.\n. I never said the CAS service had anything protocol-specific.  I said we would have to \"add more logic at some point into the business layer to handle the different types of protocols\".  You can see that with a very specific example:\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java#L125\nYou can also see that we have to expose constants classes because they need to be referenced in multiple places.  We've got view/response logic in services, JSPs, and java classes, etc.\nI would argue getResponse() should not be moved out. If the last step is to generate a response, then our workflow should just be able to delegate to the thing that knows how to generate a response.  It shouldn't have to figure out who to delegate to.\n. I guess the ultimate question is what is our vision on how we want people to add protocol support?  In my opinion the current way is a bit messy and unclear and this isn't going to move us closer to making it less messy and more clear :-)\n. +1 nice work!\n. It only makes sense if we actually plan on offering different implementations of the ticket interfaces.  If we just think there is too much code in the main class, there are other ways to resolve it.  I'm all for ticket factories and stuff (which is why we have interfaces just in case) but without a concrete plan to actually leverage them, then its just a layer of abstraction for people to read through. (which is (un)fortunately why the CASImpl just news the same instance, because for 10 years no one has given an alternative impl ;-))\n. When I was working in the cas4-feature-api branch (or whatever it was called) we did actually have factories for producing tickets with the assumption that the ticket implementation might be specific to the backing mechanism (i.e. JPA annotations, Jackson annotations for JSON serialization, etc.) but that created a pretty tight coupling of factory to ticket registry (in fact I think it ended up just being easier to have a factory method on the registry interface itself).  This pull seems to come from some attempts at extending, and I'd be curious as to what those use cases are.  It doesn't look like we had an opportunity to discuss those.  All we received was a potential solution without understanding the underlying root cause.\n. +1\n. +1\n. I'm confused by the justification since none of the stuff built into CAS should have been going against the TicketRegistry directly.\n. > I had only in mind the AuthenticationViaFormAction class but having done a wider search, there are at least 2-3 more components built into CAS codebase that call ops on the registry directly.\nTo be honest those never should have passed code review :-(\n. We need to find a balance. We can't constantly do short term measures/fixes that break or introduce APIs we don't really plan to maintain, nor is a huge re-architecture at once feasible (i.e. see the cas4-api branch which has some good ideas but ultimately attempted to solve way too many problems at once).  At the same time we also need to make sure we hold ourselves to our own standards (i.e. we should not have introduced features that go directly against the TicketRegistry ... we should have had this conversation).\nI'm fine with this change if we think this is the direction we actually want to go in.  If we're stopgapping with this, then what do we actually think something should look like (and that's not to say we have to go change everything at once but maybe we can make that incremental change that puts us in the direction of our vision)\n. GitHub won't display the entire diff so I'll assume you're not using that fact to hide anything nefarious and say +1 assuming the build failure is not related to your changes :-)\n. +1\n. This says GoogleAccountsService  but appears to be of much larger scope.  Its harder to understand the changes with a wider-scoped change than the original description.\n. I'm not against any other improvements to SAML support.  But its very hard to focus on the changes made to support fixing Google with a larger-scoped change.\n. In the future it would be great if these were smaller pull requests.  Its easier to evaluate and also there is no reason the performance improvement of a StringBuilder needs to be bundled with a switch to JodaTime.  It just makes it hard (and rather boring) to get through an entire code review.  Don't get me wrong, I appreciate the improvements but I'm not sure you're going to get the same level of meaningful feedback that you would with smaller pulls (at least in my opinion)\n. +1 from me\n. I'm fine with the new method.  Just one comment about the workflow and that fact that the check is done twice.\n. +1\n. Have we confirmed that everything still works with this?  I am going to guess we did it in reverse order due to the ST being considered to be \"used\" in the other order (from the \"XXX\" comment)\n. Sorry I missed the blurb where you said you tried it on a live server.  I thought you were relying purely on the unit tests.\n. If we're modifying the signature for delegate anyway, it could return something that holds both Assertion and ProxyTicketId.  We could have the \"delegate\" method do the validate of the ST and thus we would not need to re-check its validity.\nThis may be #4 in terms of increasing effort :-)\n. +1\n. I'm not a fan of this.  We're moving classes/changing names for no reason other than to conform to naming conventions I don't recall there being a discussion on?  Or did we agree previously and just finally implement them?  Either way you can't rename without a proper deprecation if you're changing APIs.\n. I think these are all good:\n1.  check for duplicate property keys in language bundles and other property files.\n2.  check for \"@since\" tag in Java components (this is difficult to implement, and it's not perfect yet)\n3. check for \"@author\" tag in Java components\n4. check for number of abbreviations (such as Xml, rather than XML)\n5. check for magic numbers (by far one of the bigger changes)\n6. consistent style for javadoc tag ordering (by far one of the bigger changes)\n7. consistent style for annotation placement\n8. check for boolean expression complexity\nI would hold off on any drastic moves on the following:\n1. consistent style for naming methods, classes, parameters, factories, etc\nNot sure what you meant by this:\n1. check for removing default values from var initialization\nBut I would give a +1 to 1- 8.\n. +1.  I'm not overly concerned with inefficient variable initialization, more that its just redundant.\n. \"verify\" prefix is not required is it?  That would defeat the purpose of removing all of the \"test\" prefixes :-)\nI'm not sure we need @author or @since on a unit test but I don't have a particularly strong opinion on it since you went and added them.\n. +1 if you address any failures you can please submit the pull requests per bug type? (Unless there are very few).  It will be much faster to read a pull request fixing all bugs of a specific type than a large pull request with lots of different bugs fixed.\n. +1\n. +1 though can we document somewhere in our coding standards to prefer immutable lists to arrays for return values that should not be modified.  Copying arrays is rather wasteful :-(\n. +1\n. +1\n. +1\n. +1\n. We don't have a replacement so why deprecate? \nAlso, the immutable implementation can just return a clone/copy.\n. We should only really deprecate something if (a) we don't intend for there to be a replacement (which isn't true in this case) or (b) the replacement is in place (which it isn't yet).    I'm not against adding @Deprecated when we've actually got the replacement method in place. In fact \nThere's nothing inherently wrong with a mutable Date UNLESS you've indicated that your class is immutable and you're not doing a defensive copy :-)\n. +1\n. I am +1 for the concept but -1 for how we're doing this.  We're attaching a strategy to a registered service and then interacting with it as if we have an instance that looks things up based on the passed in service.     To me that doesn't make any sense and makes the code confusing to read.  I'm open to changing my -1 if we have a good reason why we did it that way.  But as far as I'm concerned if you have a strategy attached to a RegisteredService it should have the information it needs about a service already.\n. I've starred this to look at tonight (too big to do at work :-))\n. +1.   Nice work.  I think there are a few methods that need to be renamed.  I also just want to confirm there's an DB upgrade path (I figured it was easier to ask than comment on all the JPA annotations :-))\n. +1\n. +1\n. +1\n. \"Sure. Most often we run into this when dealing with specialized requirements for a client app that wishes to pass param1 and param2 to the /cas/login endpoint. Another example is the cas-mfa module we work on where apps can opt into MFA by providing a specialized authentication method to /cas/login and /cas/serviceValidate. All such scenarios typically require a new extension of Service via a new Argument Extractor.\"\nThis sounds like this solution just merely circumvents the problem/fixes a symptom.  And if we introduce it, then we have to keep it.\nHow does passing \"param1\" and \"param2\" to the /cas/login endpoint affect service generation?  What are they doing with this parameter such that its tied to the service?  And if this is that common, why don't we solve that problem (such that new services don't need to be created).\nIf there's no other option then this change is fine, but I want to make sure we're not introducing short-term solutions/workarounds that are trouble to get rid of (since at this point, it would basically become public functionality).\n. Its not public API but it is public behavior (for that implementation of the CentralAuthenticationService API).  That said, if we're not tracking a better solution to this scenario, we should for the long term.\nSo +1 for the short term solution (because I don't think this is a bad public behavior) but if we haven't we should track for a better solution to needing to create Service classes for each of these scenarios.\n. +1\n. +1\n. +1\n. +1 (assuming the failures are not related)\n. +1\n. +1\n. Are we encrypting this with some value that is specific to the machine/browser that can't \"easily\" be manipulated by someone that stole the value (i.e. if we encrypt original CASTC+IP Address or some additional such constraint)\nOtherwise, to @leleuj comment, there isn't much value other than that someone can't visually inspect it.\n. Encrypting it without doing anything else doesn't do anything I think is everyone's concern.  The identifier is an opaque value and encrypting an opaque value doesn't prevent it from being re-used it just prevents the opaque value from being read.  \nIt looks, from your most recent comment, that you're looking to do more than just encrypt it for the sake of encrypting it, which I fully support :-)\n. Ah I see you had agreed with me earlier anyway (GMail made it look like someone else made the comment :-)).\n. I'm not a JavaScript expert, but +1 for the idea :-)\n. I'm not a JavaScript expert, but +1 for the idea :-)\n. +1 to the change just a comment on whether we want to rely on implicit toString() or the actual method that would return the same value?\n. +1 to the change just a comment on whether we want to rely on implicit toString() or the actual method that would return the same value?\n. +1\n. +1\n. +1 assuming build passes :-)\n. +1 assuming build passes :-)\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. Is UK the ISO two letter country code for the Ukraine?  Otherwise, I'm assuming a Ukrainian confirmed the text :-)\n. Is UK the ISO two letter country code for the Ukraine?  Otherwise, I'm assuming a Ukrainian confirmed the text :-)\n. sorry I meant language code.\nIt looks like it is:\nhttps://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n+1\n. sorry I meant language code.\nIt looks like it is:\nhttps://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n+1\n. +1\n. +1\n. Upon further reflection, should we just make this return Collections.emptyCollection() ?\n. Do any of these need initalizers or validation rules?\n. justremove these @inheritedDoc things\n. if you don't need these getters for anything, just remove them.\n. I think these need to updated?\n. this should typically take up one line according to our conventions\n. same as above in terms of coding conventions\n. is this javadoc correct?\n. if these classes shouldn't be extended just make them final\n. same formatting comment as above\n. My thought is it would prevent people from having to disable the ticket registry cleaner.\n. Our convention is to only provide additional information that differs from the base.\n. True, which one do you think will cause us more headaches? :-)\n. Do they need to be public?  Is protected sufficient? (I know, I'm such a pain!!)\n. Okay, considering in theory the next CAS release includes the ticket registry improvements? ;-)\n. Not to be even more of a pain, but what you're describing sounds like we need a shared injected instance.  Am I hearing you wrong?\n. The follow up to my annoying question would be does that mean we need a Factory for Kryo?\n. we don't have properties for the versions in the parent pom?\n. same as above :-)\n. Wouldn't this basically say that if you could hit submit it failed and you re-submit fast enough, that would be considered a failure?  There's no accounting for number of times?\n. ah.  useful to keep them in sync? (obviously this wouldn't stop this commit which you've already committed :-))\n. By default we typically log WARN and above so doing a check around those is not super useful.  Our recommendation is any DEBUG or INFO with complicated concatenation.\n. Just a note that all parameters should be final.  :-)\n. I believe its just used to extract the parameters properly, so probably not.\n. Are these values available from the OpenSAML API anywhere?\n. we can probably do the HttpBasedServiceCrednentials.class.getName() ?\n. final\n. does this need to be public?  If not make it private.\n. can these factories be cached as instance variables? (assuming this class is threadsafe?)\n. does this need to be public?\n. does this need to be public?\n. final\n. the formatting seems to have been altered or does it just look wrong here?\n. If you're compiling for 1.5 compatibility though I don't think it likes it when you @Override an interface.  I'm not sure if we're requiring 1.6 yet.\n. if this is in the abstract, will it get run for each class that extends it? (sorry, I can't recall)\n. final\n. is this class threadsafe?  can we share one instance?\n. any reason not to log the stack trace?\nActually if we are rethrowing it, is there a reason to log it at all (odds are higher up it gets logged)\n. final on the exceptions :-)\n. I can't believe we missed a final in the original code!   Do we plan on having this extendable, if not let's get final correct this time :-)\n. If relaying information about the generation of keys is important, than that data should be exposed at the interface level, not at the static variable level.  Note, I'm not against the static variable being there, I'm purely asking about its scope of public.\n. Awesome, and now we have a new interview question on classloading if we want to confuse any potential candidates ;-)\n. shouldn't there be a JPA annotation on this?\n. is this an implementation detail or does this actually belong on the interface? Also, for backwards compatibility why aren't we just assuming its empty?\n. this is confusing.  It should just return null\n. Doesn't this mean you're adding it to the list for availableAttributes also?\n. can't this null pointer if getUsernameAttribute is null? You should check it the oppositie way or better yet don't use a default attribute.\n. have these been translated or added to all message bundles?\n. Its Jasig, not JA-SIG\n. formatting seems off\n. this javadoc is redundant\n. is there a reason this is its own string?\n. we don't prefix log with this.\n. we don't typically do the inherit doc\n. formatting seems off\n. these should return a value that would indicate the value is useless.  Possibly -1 or Integer.MINIMUM\n. If you didn't get a reply back to me (apparently I never got these emails), why was this pull request merged?\n. The field right above it (evaluationOrder) has a column annotation.\n. The problem is I never received any emails about any further comments, and\nno one bothered to follow up, which is concerning because my feedback\nwasn't just formatting, it was design feedback.\nI'm happy that you're willing to continue the discussion (and I appreciate\nthat), but we can't just merge pull requests with outstanding design\nfeedback (and I know you didn't actually do the merge!)\nDoes anyone else have problems with GitHub email feedback? I also don't get\nemails if a discussion has started and I wasn't already in it (though I get\nemails about portlets that I don't care about :-)).\nOn Mon, Aug 6, 2012 at 2:11 PM, Misagh Moayyed <\nreply@reply.github.com\n\nwrote:\n\n@@ -118,6 +127,17 @@\n     int getEvaluationOrder();\n/**\n-     * Get the name of the attribute this service prefers to consume as\n  username.\n-     *\n-     * @return Either of the following values:\n-     * \n-     *  String representing the name of the attribute\n  to consume as username\n-     *  {@link #DEFAULT_USERNAME_ATTRIBUTE} or null\n  indicating the default username\n\nI think it was assumed that all comments were accounted for given the  3-4\ndays in between the feedback and upcoming fixes. We could certainly carry\non the discussion to apply any further suggestions and fixes though.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93/files#r1314089\n. We can update the other ones in a different commit, but please revert this one :-)  It used to be JA-SIG we just never updated.\n\nAlso, for some reason I never got an email about this.\n. It used to be documented that we used this for everything but log.  If that got reverted in our documentation, we should revert that :-)\n. should this be the MIN?\n. actually should it call super in this instance?\n. should this call super or return MIN?\n. if we're throwing the error, no need to log it here.\n. this message is not going to be formatted, is it?\n. 0 or min? or super.sessionCount() ?\n. Completely optional, but you could reduce branching logic we need to test with this: http://commons.apache.org/lang/api/org/apache/commons/lang3/BooleanUtils.html#toInteger(boolean, int, int)\n. if you want to log anything, we should probably use a Log instance\n. see above\n. minor point: should this be debug?\n. was there a reason to remove this version?\n. Why not use http://commons.apache.org/lang/api-2.6/org/apache/commons/lang/builder/CompareToBuilder.html ?\n. we really shouldn't throw illegal argument exception?  If this is an AJAX call, it should somehow set the status code for bad input\n. casting is bad.  If something isn't exposed on the interface, we should look at why it isn't\n. exception as branching/control logic is bad. We should revisit how we're doing errors here.\n. this is always going to be on the page?  That seems weird.\n. do we need a global variable?\n. we should make this post\n. why not just return here?\n. Is console available in all browsers?\n. Sorry, I've been reading too much about AMD so I am in an eliminate all global variables mode :-)  You may choose to ignore me.\n. Okay, I didn't think it was available in IE.  We could write a small abstraction around console that encapsulates the check and the writing.\n. Is there a particular reason the test needs to change?  Do you just prefer this or is it required to demonstrate the bug you're trying to fix?\n. This looks good.  But can we make these service instead of svc ?\n. Don't we already have Commons Lang, which has similar methods?\n. won't this result in a server 500?  It really should be the status code for bad input.\n. this is not an internal service error. Its bad input.\n. it seems weird to check if its long above but not convert.  Why not use NumberUtils.toLong(number, default) and then check if the default as supplied?\n. So until hide is called, its seen?  Also, would screen readers see it?\n. What status code are they translated into?  I looked at the javadoc before\nposting the comment and it wasn't clear that it would make it indicate\ninvalid input.\nOn Tue, Sep 4, 2012 at 8:01 PM, Misagh Moayyed notifications@github.comwrote:\n\nIn\ncas-server-core/src/main/java/org/jasig/cas/services/web/ManageRegisteredServicesMultiActionController.java:\n\n\n* @param request The request object that is expected to contain the id and evaluationOrder\n*        as parameters.\n* @param response The response object.\n*\n* @returns {@link ModelAndView} object that redirects to a jsonView. The model will contain a\n*          a parameter error whose value should describe the error occurred if the update is unsuccesful.\n*          There will also be a successful boolean parameter that indicates whether or not the update\n*          was successful.\n*\n* @throws IllegalArgumentException If either of the id or evaluationOrder are invalid\n*         or if the service cannot be located for that id by the active implementation of the {@link ServicesManager}.\n*/\npublic ModelAndView updateRegisteredServiceEvaluationOrder(final HttpServletRequest request, final HttpServletResponse response) {\nfinal String idAsString = request.getParameter(\"id\");\nif (!GenericValidator.isLong(\n  idAsString)) {\nthrow new IllegalArgumentException(\"Invalid service id: \" + idAsString);\n\n\nYes it does, but the cool thing about ajax call is, there's a mechanism\nfor translating exceptions into status codes for bad input. The translators\nare defined at https://github.com/Jasig/cas/pull/108/files#diff-10 and\nthis is the preferred and recommended method by the library, so that\nexception are thrown with ease and translated back to the proper call.\nTakes the ajax out of the method in a way! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/108/files#r1529300.\n. final :-)\n. 311 really isn't the appropriate status code for this. It should be something in the 4xx range.\n. How is this better than just using Long.parseLong and having it throw the parsing exception?\n. Sorry, I meant, doesn't it handle/map any exception natively (or via configuration)?  Or does it only map IllegalArgumentException?\n. Its just going to generate a lot of noise in the logs for minimal benefit (anyone testing can see the status code)\n. If its out, yes! I may have missed it in the repo\nOn Sep 21, 2012 3:10 AM, \"Misagh Moayyed\" notifications@github.com wrote:\nIn cas-server-integration-restlet/pom.xml:\n\n@@ -88,4 +80,8 @@\n        \n\n-    \n-        2.1-RC6\n\nShould this be 2.1.0?\nRef: http://maven.restlet.org/org/restlet/jee/org.restlet/\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/130/files#r1658708.\n. Its in a loop, so it continues to try the others.\n. is this change needed?\n. These specific to the CAS protocol and shouldn't be here (they are also web-specific)\n. these were here because they were specific to extracting them for the protocol\n. these are different parameters.  It is not the same as the protocol one.\n. this class is not specific to the CAS protocol\n. the CAS protocol parameter and the value we put in the flow scope are two different thiings.  This muddles the parameters.\n. Ideally we need to do a better job of protocol separation.  Let's sync up on best choice over IM and/or email.  In the CAS4 branch we had separated this stuff all out, but it was a rather extreme separation that would be too much for this.\n. I'm not a huge fan of putting in IDE specific stuff if we can avoid it (but that may be because I use Intellij :-))\n. Is the Quartz dependency used in the management app?\n. Is this actually used in the management app?\n. Is this actually used?\n. Not sure if we need this\n. there's a theme for cas management?\n. We shouldn't need this\n. Are we actually logging anything with Inspektr?\n. We should actually put all these under src/main/resources I think\n. most of these messages should not be in here\n. This documentation is now incorrect.  I'd also recommend a different name for this file to create less confusion\n. Nevermind, I actually see it now.\n. we shouldn't really be dependent on CAS-core\n. we shouldn't need this file, should we?\n. url is actually a different parameter.  It was only used to display something on the JSP page itself.  We've disabled it for security reasons.  service was a common \"hack\" to support redirects.\n. We should alter the test to not use a port that known software uses :-)\n. Yes, they are in there as an artifact of the move.  There was some minor shared resources (i.e. error pages) that should have been separated.  There's not really a point to skinning the management tool.\n. The parent abstract class should already expose a logger.  Please use that.\n\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/authentication/handler/support/AbstractPreAndPostProcessingAuthenticationHandler.java\n. A logger is already exposed in the parent class. Please use that:\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/authentication/principal/AbstractPersonDirectoryCredentialsToPrincipalResolver.java\n. there are only single instances of controllers so please don't use a static,\n. why are we exposing a static setter for this?\n. This doesn't seem like it has anything to do with the removing deprecated JdbcLockingStrategy\n. Please no \"this\" in front of log :-) \n. Is there a reason to get rid of this?\n. I just realized that technically these controllers should not b accessing the registry directly.  I won't stop this merge for it, but we should re-investigate this.  Only in extreme cases (typically for stats purposes, do we access the registry directly)\n. You can probably switch to using the annotations for new tests.\n. any reason we're not using the Java 5 for...each syntax?\n. how costly is this for a distributed cache? what affect does it have on other actions on the cache?\n. I thought some of the server management tool stats called it (I could be wrong).  The cleaner could call it if misconfigured (i.e. someone forgot to disable it).\nAlso, those stats look like they are for the in-memory version only.\n. Typically we use constructor injection for required dependencies. \n. We typically use constructor injection for required dependencies.\n. constructor injection.\n. I didn't see the other ones call init.  Also, if this is spring configured, shouldn't init called via Spring.\n. What does this have to do with authentication APIs?\n. There seem to be a number of changes in here unrelated to Authentication APIs.  It would have been great for review if these were separated.\n. At this point we should be encapsulating these parameters into a parameter class:\nhttps://github.com/Jasig/cas/blob/feature-cas4api/cas-server-api/src/main/java/org/jasig/cas/server/CentralAuthenticationService.java\n. We should probably have an AuthenticationBuilder class at this point.\n. Can't this be replaced with http://commons.apache.org/lang/api-3.0.1/org/apache/commons/lang3/ArrayUtils.html#isNotEmpty(T[])\n. Authentication itself should probably extend from Serializable\n. I agree\n. Why is this in the abstract class?\n. I'm not sure I agree this should throw an IOException.  Also, throwing a GeneralSecurityException and returning a response puts us in the same confusing boat we had before.\nWe should either throw an exception if there is a problem or return a result, not do both:\nhttps://github.com/Jasig/cas/blob/feature-cas4api/cas-server-api/src/main/java/org/jasig/cas/server/authentication/AuthenticationHandler.java\n. IOExceptions should not be bubbling up like this.  That's an implementation specific detail.  Also, I think a richer API is needed than an array of Credential objects:\nhttps://github.com/Jasig/cas/blob/feature-cas4api/cas-server-api/src/main/java/org/jasig/cas/server/authentication/AuthenticationManager.java\nOtherwise, its unclear what is happening.  Which credential threw the GeneralSecurityException, etc.?\n. I think your import is in the wrong spot.  :-)\n. do you need this variable?\n. this could actually be private\n. you can actually assign this to be a new hashmap and then just putAll in the else clause.\n. I think I preferred this as authToUse\n. final :-)\n. Make sure to translate this into all appropriate languages ;-)\n. You shouldn't be required to configure one.  There should be one configured with the previous default behavior.\n. This isn't really going to scale well.  Its requiring additional configuration for a service outside of the Services Management Tool.\n. If people want the default behavior they should not be required to configure anything.\n. Its completely different.  The logic before was applied consistently across all services relying on data configured in the services management tool.\nThis logic would allow you to apply filtering to specific services based on some level of mapping, where this mapping is done outside of the Services Management Tool.\n. You just said that there would need to be configuration in the deployerConfigContext even for the default configuration.  That means anyone who already has a deployerConfigContext needs to add it.\n. So do you mean you register a set of filters with convenient friendly names, and then in the services management tool you can map the service to a filter (like how we chose which attributes to associated it with?)\n. I don't think its valid to remove 2.0.  There is a 2.0 protocol, and those files support it explicitly.\n. why is this flag even needed if you structure the flow correctly to only check this when there is no service?  There is no need to call this if there is a service since generating an ST will fail and you'll be prompted to sign in.\n. we generally prefer not to have direct access to this.\n. is there a reason not to just use a fail event or something?\n. please keep formatting changes as separate commits.\n. why is this here versus when we go down the path of having a TGT and no service?\n. is there a reason final was removed?\n. we should define service is we are adding a javadoc :-)\n. Ah okay.  No complaints from me then :-)\n. a recommendation though to separate checkstyle fixes from other changes (I know I struggle to do this with Eclipse warnings) as it confuses people.\n. I can't fault you too much, I keep doing it at my job ;-)\n. static variables should be capitalized\n. why is it being changed?\n. static variables are capitalized\n. this should probably change to a string builder if its being reformatted\n. how many characters is the line wrapping?  This seems really short.\n. are we actually running the validator over these parameters?\n. you can actually chain these I believe (fmt.format(...) \n.format(...)\n.format(...)\nLooks good though!\n. You may want to consider using NumberUtils at some point for this parsing.\n. formatter or stringbuilder also since you're in here :-)\n. We may want to have a separate thread about making it around 160 (we just had this debate at work, ironically).  One person was using 120 (they put their monitors in portrait mode) and everyone else was using like 240-ish since they were all in landscape mode.  We ended up compromising on 160 so that people actually got to use their screen space.\n. 120 and below causes so much unnecessary wrapping that owning a screen larger than 20 inches is useless.  This is pretty ridiculous to wrap in my opinion:\npublic final class CredentialsToLDAPAttributePrincipalResolver extends\n-        AbstractLdapPersonDirectoryCredentialsToPrincipalResolver {\nWhat Eclipse really needs is a formatter for files and a visual formatter for your editor (that just applies to your screen).\n. We're validating the properties for sure when Spring starts up.  Not sure if we're also doing the setters.\n. We are doing it:\n<bean id=\"validationAnnotationBeanPostProcessor\" class=\"org.jasig.cas.util.CustomBeanValidationPostProcessor\"\n            p:afterInitialization=\"true\" />\n. I wasn't recommending a specific size, just relaying my recent story.  I'm fine with any value that eliminates things like my example above considering the size of most people's monitors.\n. Sounds good.  Thanks for your efforts here.\n. were all these added but not used?\n. added but not used?\n. This looks suspiciously like a map.\n. there should be a default here if its not being set in the constructor\n. by not having \"logOutOfService\" on here you're removing the capability of tying the specific logout method to the protocol itself.\n. how is this going to scale to multiple logout methods (i.e. if OAuth were to add a logout method)\n. You should probably return all the services.  You have the ability then for the UI to note which services you've logged the person out of.  I believe this is the approach that was taken in the CAS4-api branch.\n. if its disabled why is there even a logoutmanager enabled that does something?\n. why is this registered with the services manager versus the service instance encapsulating the protocol/profile used?  You're leaking abstractions.\n. what does this string represent?  Its unclear.\n. I think a setter is fine if we have a default implementation.  Otherwise, our standard is to use constructor injection for required dependencies (regardless of checkstyle rule)\n. The reality is we have a bunch of things:\n- CAS protocol with no SLO\n- CAS protocol with tacked on SAML2 XML format but our own logic\n- Proper SAML2 SLO Profile\n- Proper SAML2 SLO Front-Channel Profile (sorry I can't remember what the actual profile names are).\n- whatever else someone thinks of down the line\nIdeally, we need a way to encapsulate all of this and be able to handle it.  I'm not sure a LogoutManagerImpl satisfies that requirements, but I agree that a single logOutOfService method will not be sufficient either.\n. At least three out of those four I mentioned exist already.\n. You should return them because you may want to indicate in your UI what the user is no longer logged in to.\n. Replicating the behavior is fine, but I don't think the behavior needs to be implemented in the same way.  The other way did it because of limitations in its design (i.e. not changing/adding APIs)\n. Yes, it should be very clear what it is.\nOtherwise we could create some kind of class to encapsulate the domain and not use an iterator/map at all.  I.e. LogoutRequest with a  TIcket/Id, Service, and Status (to incorporate Marvin's idea)\n. Its not a matter of how many lines of code it takes, its a question of by design where does that logic belong.  We attempt, as much as possible to encapsulate the protocol specific things.  So I'm asking the question of whether these things should be encapsulated or if protocol stuff should be leaked into other abstractions.\n. I'd prefer Username to remain also.\n. do we need this file?\n. are all these dependencies needed in the support module?\n. can we declare an explicit scope?\n. We really should not call the ticket registry directly.\n. this seems to be pulling in unrelated changes?\n. this can just be named something like radiusAuthenticator\n. is it better just to pass the class reference in and always create a new instance?  It breaks backwards compatibility but if it fixes a bug... :-)\n. see comment above on whether we should just always create a new instance.\n. I don't think its a good idea to automatically attach the hostname as a suffix.  People may not realize this is being exposed if they haven't configured anything explicit.  You're leaking information that you may not want to leak.\n. Are there any extension points we can define that would help you?  We\nprefer that if possible otherwise the whole class becomes a public api.\nOn Aug 21, 2013 10:28 AM, \"Stefan Paetow\" notifications@github.com wrote:\n\nIn\ncas-server-support-radius/src/main/java/org/jasig/cas/adaptors/radius/JRadiusServerImpl.java:\n\n\n@author Scott Battaglia\n* @author Marvin S. Addison\n@since 3.1\n  */\n  public final class JRadiusServerImpl implements RadiusServer {\n\n\nAlthough I can understanding the reasoning why the class would be final,\nconsidering that I've had to copy Scott's entire class just to be able to\na) specify an inner protocol option and the possibility to return the\nactual RADIUS response packet, it would be nice to be able to derive\ndirectly from JRadiusServerImpl instead of copying the whole thing again.\n:-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/304/files#r5896471\n.\n. should this be called EAP_TTLS_EAP_MD5 to confirm to the entry directly below it?\n. I think this is the wrong variable.\n. The class parameter and the property should be similarly named.\n. Isn't this text?  Should it not have a copyright header?\n. If you're just formatting, use FastDateFormat which can be shared (its threadsafe)\n. Not sure what value we get in renaming it since the message matches a SAML2 logout message.\n. why is this converted to inject by name instead of type?\n. This is not thread safe to guarantee a single instance.\n. Is there a reason its a Utils class instead of of just IsoStandardDateFormat that can be \"new-ed\" ?\n. actually why is getCurrentDateAndTime not a static method?\n\ngetInstance().getCurrentDateAndTime() which means that getCurrentDateAndTime() can just reference \"this\"\n. A couple of reasons:\n1. Most other things don't rely on singletons (or have their singletons injected).\n2. It gives a false sense of safety.  FastDateFormat is only thread-safe for formatting, not parsing.\nTo make it safe for parsing you need to:\n1. new an instance per usage\n2. Synchronize on it\n3. Create one per thread (i.e. ThreadLocal)\n. Won't this fail.  Don't you have to execute the setHttpOnlyMethod object?\n. CookieGenerator has a logger already I believe.\n. I take this comment back.  I was checking a slightly older javadoc for CookieGenerator.\n. We're not using the parameters though are we?  And we have the slf4j-cl shim.\n. will this comment show up in every output?  It looks like a normal comment versus a JSP comment\n. I think we should use the SLF4J formatting style here:\ni.e. logger.error(\"Failed to store hashed value for key {}: {}\", hashedKey, e.getMessage());\nThat said should be logging the hashed key?\n. I like this interface though I don't believe this is the actual builder pattern so we may want to use another name.\n. This change is a little concerning.  The previous API made it very clear that you were receiving only part of the Credentials object (the username and password).  This new version makes it look like you'll get the original Credential object which is not true.\n. The problem is that if someone passed in something besides a UsernamePasswordCredential object (i.e. MyLocalUsernamePasswordCredential), then that is lost.  It was explicit that was lost when you only got a username/password, but if we're passing you a Credential object, I don't think we want to lose the original class.\n. might be good to just document that the default is true so that its in the javadocs\n. probably should be called message not task\n. static variables should be at the top\n. is there a constant we can reference so this has a nice name attached to it?\n. why does this need to hold this as well as the parent class?\n. Also I feel like we should be able to solve this with a properly injected executor versus a flag (i.e. we inject/enable a SynchronousExecutor vs. a normal one\n. this is a little strange that the boolean is dependent on the task versus what the executor actually does\n. (sorry I was out on vacation) this name makes it sound like its actually switching case whereas its really just calling toLowerCase or toUpperCase\n. this should have an @NotNull ?\n. Does this addition/removal conform to our release policies for removing public APIs?\n. Can't we just deprecate all of the setters (and make the one that sets the boolean a NoOp) and add an additional constructor (and deprecate the default constructor) ?\n. The one you removed.  There was a setter for it that you removed.\n. It all really depends on how seriously we're taking these as public APIs and what our contract is to our clients.  From a proper release standpoint, what I asked for would technically be the \"correct\" thing.  Its a bit heavy-handed though and we may need a looser definition of \"correct\" :-)\n. I bring this up as I had to add back some constructors/static methods that we didn't quite consider \"public\" but that Spring Security was depending on and it means they can't just upgrade the client as a drop-in.\n. We really should deprecate the old method and introduce this new method (and have them set the same property)\n. I still think this should probably be called httpMessage instead of task\n. The javadoc for String refers to it as converting so I was trying to think of a catchy way to incorporate that.\n. I'm assuming the latest Spring version dropped support for \"local\" ?\n. changes like this are unrelated to this code review, no?\n. doesn't removing this break compatibility?\n. you really can't just remove this parameter.\n. this no longer makes it pseudo-random. (i.e. consistent each time the same service is used)\n. this breaks compatibility\n. we want to store a copy of the serialized class here?  That seems less than ideal.\n. based on your code changes above this is not true.\n. Pseuo-random allows you to remain anonymous but still maintain preferences across sessions (i.e. the app can continue to identify you and tie you to its data, but doesn't actually know who you are (can't compare you across apps)\n. Do we want to store a serialized version or just the clazz.getName()\n. no need for final here btw :-)\n. what is cs.dir being used for?\n. in the previous version, I thought we extracted constructing credentials out into its own method that could be overwritten\n. might be good not to reformat this as part of this commit so we can tell what changed.\n. is there an opportunity for unit tests to be added here?\n. nitpick alert - did Unicon write this or did you?  should probably be @author Dmitriy Kopylenko (Unicon, Inc.)\n. can you mark this as @Deprecated?\n. mark this as @Deprecated ?\n. Restlet not restlet I believe\n. should probably deprecate this and log a loud warning.\n. this @NotNull is not needed.  It should be caught by the one above, right?\n. this should be restored\n. I guess the question is to restore the previous state or to restore it to the currently configured state (i.e. if you change the salt for a shib compatible persistent id generator do we want the old one used)\n. sorry... why exactly are we hard-coding a path here?\n. why require a hard-coded path?\n. if this is not supposed to be something we're supporting as sub-classed please mark it as final\n. Why is the hard-coded \"ui\" bit hidden in this format statement?\n. why are all these changing? what benefit are we getting from changing these right now?\n. if we're using the prefix now, do we even need to calculate type?\n. applied\n. by moving this here are we allowing subclasses to match(i.e. if a TGT and an ST object got the same id, this would say they are equal correct?)\n. should this be !object ?\n. do we capitalize this in the protocol doc?  Let's match (i.e. should it be Proxy Granting Ticket)\n. you could also just do \"auto\".equals(approvalPrompt) though I would probably also make \"auto\" a constant.\n. why did we change the behavior?\n. this appears unrelated?\n. Ah okay. We should probably have an issue to get to the latest Commons Lang.\n. I'm assuming this is the change that actually fixes the bug?\n. does this need to be public?\n. are we disabling log generation here? or sending it to a specific file?\n. did we remove these without deprecating?\n. is there a way to deprecate this, keep it and create a UsernameAttributeProvider from the provided username string?\n. is anything going to fail here for people who already had these configured?\n. you should be able to vargs this: http://www.slf4j.org/apidocs/org/slf4j/Logger.html#warn(java.lang.String, java.lang.Object...)\n. there's a method that takes two parameters without needing an array\n. maybe just want to note that generated ids are unique to a service?\n. does the formatter do them this way now or was this manually done?\n. Your discussion here assumes a persistent id generator PER registered service which may not be true (depending on whether they are pre-registered in Spring config or we're letting people configure them per service via UI).  If everything is per service (and not shared) and not being updated by Spring config, then I agree with you.\n. we should indicate what you should do instead to get the same behavior.\n. Any way we can enable them automatically when you add the SAML module?\n. So there's a collection of them but people aren't guaranteed to be connected back to one of the ones in the pool?  Won't that be confusing?\n. That would mean loading the service is not going to result in the same service being restored as was last saved.\n. If its purely the Google one (which is what the pull request is for) then the Google one wasn't designed for all of the options.  It was designed to send another attribute so we should be able to replicate that.\n. will this actually work?  Wouldn't the TGT come in as an argument?\n. if is just better to manipulate it if args[i] instanceof String ?\n. should we just assign it back as args[i] ?\n. Also isn't args[i] at this point null?  Won't this NPE?\n. If you're serializing them to the database and you're also configuring them in the Spring configuration (and subsequently allowing people to select one) they can most certainly get out of sync unless you're saying the thing configured in Spring is a \"template\" which is not how we use Spring configuration.\n. My concern is people are going to think that the items in the XML configuration file are the \"options\" and they are just associating the service with the configured options.  But I seem to be the only one concerned with that so maybe its a non-issue :-)  But then there's only two of us debating this so I don't know if the sample size is large enough either, ha!\n. do we need to do this re-assignment?\n. its still unclear why we would try and bother to process non-String arguments.  Are we hoping to catch if someone passes in a TGT object?\n. is this creating the same exact behavior since you're doing stuff to the combined output of msg & t\n. Someone called log.trace(marker, msg, t) and after manipulation you're calling delegate.trace(marker, msg) which is obviously not the same method they requested :-)\n. is this following our formatter?\n. was it really worth reformatting? :-)\n. is there a way we can detect the absence of the theme and just set the theme to \"default\" so that we don't have to basically add these values around that we might forget to update?\n. any thoughts on moving this to some type of enum so we can get consistent terminology across protocols (i.e. Protocols.CAS.getServiceParameter() and Protocols.SAML.getServiceParameter().  Would allow us to create more shared components where you just passed in the protocol enum and it could extract everything it needed.\n. I'm not really sure this is an improvement.  We're now spreading the protocol logic/knowledge around even more. \n. why can't this be designed such that we don't need to remove these finals?\n. do we plan on not starting up the service if we can't extract the host name correctly?\n. I (surprisingly) don't have a strong opinion either way.  I just wanted to confirm that this failure more was intentional :-)\n. what do these changes have to do with the issue?  Is it because you created that getTicketGrantingTicket method?\n. just a note (For another issue) we might want to deprecate this class.\n. can we have a single instance of a NullPrincipal() (assuming its immutable)\n. The only thing I wanted to note/call out here (can't remember if I did) was that unless Spring changed their proxying, if getTicketGrantingTicket() had an @Transactional(readonly=true) on it and we called it from within another method the internal call wouldn't be through the proxy.\n. Class name seems redundant since most loggers already output the class name.\n. \"test\" prefix is redundant with Junit 4+.  Does our coding standard say we should use them?\n. why is every method throwing an exception?\n. it says URI but returns a String\n. what do these changes have to do with this?\n. what does this have to do with this pull request?\n. you shouldn't need this now if we have supports being called externally as part of the contract.\nIf we are going to double-call it there should be an abstract implementation that enforces this check that we can inherit from.\n. I find the usage of \"test\" to be redundantly annoying but not enough to care.  We may want to declare one way or the other in our standards if we haven't. (we probably have a mix now)\n. the XXX comment no longer seems valid if this swapped worked, correct?\n. Seems like this should be limited to test classes.\n. why are we doing this?  I don't think we agreed this should be a standard.  It looks confusing, like something is missing.\n. are these unused?\n. this is an API change for a checkstyle upgrade.  I don't think we should do that.\n. ah awesome.  Thanks. \n. do we need to give it any JPA parameters?\n. can this be after attributeReleasePolicy for consistency?\n. url should be a URL not a String right?  We're returning a String.\n. its unclear why its holding on to a copy of a builder (this isn't the typical pattern)\n. why are we logging other errors at trace?\n. this is a strange pattern for a builder.  Looks more like a factory?  Also I would have expected it to return an instance of an HttpClient with the name #getHttpClient()\n. not sure why the builder is involved with this\n. this warning isn't correct.  There is no constructor argument for this.\n. this isn't building a SimpleHttpClient\n. will this properly properly save to VARCHAR?\n. this\n. I think these should all be 4.1.0\n. there's no way to determine what this should return based on the new preferred attribute?  If we're adding these back to basically lie about the response is it not better to just fix the thing referring to them since we didn't properly deprecate them to begin with?\n. If you have a factory bean why do you need a configuration object also?  Why can't the factory bean just have the same setters?\n. wouldn't we generate a smaller diff if we didn't rename the variable?  Is there a reason we couldn't use \"handler\" as the name?\n. minor but it would be nice to flip these variables (since normally key is used/referenced first)\n. this is not the same behavior.  The previous version was a snapshot in time.  In this case the underlying map can change while its being used.\n. we should assign entry.getKey() to a variable since its used multiple times.\n. this was just for your testing, right?  Not to be committed yet?\n. well except once that Map is returned the synchronization doesn't matter.  So while someone holding the reference to the unmodifiable map can't do anything, anyone with a reference to the underlying map can actually modify the allegedly unmodifiable map.  I'm not sure if it matters (we'd really be having to go back and look at code reviews to see if it does)\n. The Unmodifiable map has a reference to the services map.  And the TGT does.  If someone makes a change to the TGT the map that is backing the unmodifiable map can change. \nThis is different behavior than what currently exists.  Basically the old way has a \"snapshot in time\" that is returned and  now its actually a map that can change (its just that the person who gets the unmodifiable map isn't the one that can make changes)\nDoes it matter?  I'm not sure.  I'd have to go back and try and remember why we did the snapshot in time.\n. we can try and figure out if we really still need that protection (or if maybe we can just do map#clone(): https://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html#clone() ?)\n. I'm not surprised the #clone() test works.  It should.\nAccording to the JDK source though, your first test should have failed since the UnmodifiableMap just has a reference to the original map.\nhttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/6-b14/java/util/Collections.java#Collections.UnmodifiableMap\n(unless I can't read which is possible)\n. That class is essentially what we were trying to do (it just solves it for every case where our code solved it for one case)\n. Is this something that really needs to be protected with a relatively expensive operation?\n. what does removing public have to do with this pull request?\n. what does that have to do with MALICIOUS_CODE category? \n. I understand the \"risk\".  I'm just asking if its really a risk we need to be concerned about.  If the answer is yes, then maybe we should have just returrned a List of CacheStatistics instead of an array (though depending on whether the API is on our public list we can't change it.\n. didn't you just comment on imports like this earlier? :-p\n. is it really a security issue that a test is doing this?\n. this change seems unrelated to remove unneeded typecasts. You just can't help yourself, can you :-)\n. Sneaky! :-p\n. We're using CASTGC for the name of the cookie, not the prefix of the value, correct?  The prefix of the value is TGT.\n. not sure why you would attach this to the interface as its all about the specific implementation having a fallback default not there being a default ticket generator.\n. if someone didn't configure a generator for a specific service type, I think its still a warning regardless of whether you are using a default generator so there's no runtime exception.\n. this scenario can pretty much only happen if someone doesn't test their services (i.e. they configured SAML, but never tested SAML integration)  Its unclear why we would want to hide that fact.\n. I agree I think that would be a better place. :-)\n. I guess the question is do we have enough services that don't require some form of explicit generator?  If the answer is yes, I would agree with you. \n. Maybe I'm reading this out of order, but shouldn't the \"registered service\" already have been loaded for the \"Service\" so to check the service against the registered service seems weird to me (but I may retract this statement as I continue to read :-))\n. this seems to be a relatively common potential failure point, so why is it logged at warn?\n. is this going to be enough information for a client to construct a meaningful message (since I am assuming you won't be redirected back to the failing service?  I.e. the ability to display a custom failure message PER service (\"If you feel you should have access to this service, please call (XXX) XXX-XXXX) or visit here\"\n. this still seems weird as the \"registeredService\" should have been the normalized version of all possible instances/representations of that specific service (i.e. it normalizes /MYAPP/page1 and /MYAPP/page2 to registeredService /MYAPP)\n. people are going to have to change their local DB DDL since these were not nullable and now they'll never be set.\n. its unclear how enabled is a part of a user authorization policy?\n. same with this.  how is this about authorizing the user?\n. why are these all warn?  If we're doing SSO, there's no way that a service can prevent these redirects and thus this could be a common occurrence?   I think the more important thing would be to make sure these are accurately represented in the audit logs.\n. if we're attaching these strategies to a service it seems weird to require said service to be passed in.\n. from an API perspective, it looks a little weird to pass in the map of attributes rather than the principal.\n. I still think its weird to mix service options with an authorization strategy for people to use it.  Curious as to what others think.\n. do you still need the service param here?\n. The enabled flag says \"is the service allowed at all\"?  Its not \"is the user authorized to access a service\".  You've mixed what capabilities the service is allowed within the context of CAS with the service's ability to authorize the user.\n. this won't allow the former database columns to be used to populate this, will it?  So anyone who migrates will lose their previous values?\n. they still show WARN here.  Maybe I am out of date with my diff or something.\n. I suppose I should have been more clear: I understand why we pass in the attributes (though in reality we should have been able to construct a proper restricted principal if we so wanted), I just don't think the API name represents that well. :-)\n. Except in this case, this has nothing to do with the user.  The user's own information is not the reason they can't log into the service.\nA a concrete example, Rutger's online web registration has hours of availability (yes, I know its weird, but mainframes!).  I would find it weird if during the outside of the hours of availability it appeared to the user as if they were the reason they couldn't access it.  I do see what you're attempting to do, and I'm not horribly against it, but I'm also not convinced its right.  It would be useful for others to chime in.\n. Maybe we just solve this by calling it access strategy? :-)\n. Yes - basically a name that better explains what is encapsulated.  (also note, I'm not saying AccessStrategy is the best name to choose :-))\n. Is my diff out of date or did you adjust the name to access strategy but not the accessing methods?\n. I like it! +1\n. probably just rename this method, right?\n. setAccessStrategy ?\n. do we want to rely on the toString() ?\n. minor - is cas_audit a better name?\n. Just jumping in here (and then I'll jump out :-)I agree with you about being pragmatic about what is public.  For interfaces, we typically used two criteria:\n1. Are people likely to provide their own implementation\n2. Are people likely to be calling this API (i.e. writing custom Spring Webflow actions that call it)\nFor classes, we typically applied the \"final\" mechanism (either at the class or method level, i.e. template methods) to indicate whether it was public\n. Constructor injection +1\nI tend to write my code as if a DI framework doesn't exist and then allow one to be used via constructors\n. ",
    "frett": "for the MySQLDialect the DDL came out identical for me.\n. opened a JIRA issue here: https://issues.jasig.org/browse/CAS-1056\n. This request is outdated and no longer relevant\n. something to consider with this pull request is that any existing configured services will have to be updated when upgrading in order to continue working.\nIt could also be beneficial to store the compiled pattern to improve matching performance\n. wouldn't moving the Transactional annotations also have an impact on transactions related to ticket management when using a JPA ticket registry?\n. nm, you did update that in code, it just wasn't mentioned in the PR\n. This also affects 4.0.x and would be nice to backport since it is a simple bugfix for existing functionality\n. steps to reproduce:\n1. establish session with CAS\n2. session expires after configured time\n3. user visits new client site\n4. client site redirects to CAS using gateway=true to pick up existing login, but not force a login\nexpected result is that the user ends up back on the new client site without being prompted for login because the user's doesn't have a valid active CAS session.\nwhat happens before this patch is that the user is presented the login form even though gateway=true is in the URL.\n. hope that helps clear up my poor wording ;)\n. addresses #1300 \n. going to make one minor modification to preserve original object when it doesn't need to be sanitized.\nThanks for the tip :)\n. I'm getting a gradle build issue for missing javadocs on cas-management-webapp\n. that's the issue :)\n. I will fix the other issue travis is complaining about.\n. switching to JDK7 didn't seem to fix my compilation issue, I'll open a new issue with the build error.\n. yeah, that would work and would be my preferred method, wasn't sure how strongly the community felt about providing the logger as a transient on the objects\n. This probably needs to be updated on other objects that get persisted as a @Lob in JPA.\n. @mmoayyed I'll definitely look into it. In the middle of updating our codebase from CAS 4.0 to CAS 4.1 and just started into adding some customizations into the CAS management UI. part of that is figuring out an upgrade path for our 90 RegisteredServices which will definitely involve scrutinizing that code :)\n. just to follow up on this ticket, I haven't run into any other serialization issues with Loggers. I'll open a new ticket if one does show up, but things should be good for JPA.\n. I agree with @dima767, take this work (once the current conflicts are resolved) and then the rest of the work can be gradual as we notice places that would benefit.\nIf we try to capture everything within the CAS codebase at once it's a huge moving target that would be difficult to accurately review & account for various usage scenarios\n. sounds good to me\n. agreed on getting this merged before much more work on MFA. maintaining two large branches becomes a merging nightmare later on.\n. this only solves the concurrency issue when there is a single active CAS server. If you start load balancing to multiple servers this doesn't solve all the concurrency problems\n. I just read over #875 I don't think currently this will fully solve the concurrency issues in the MemCacheTicketRegistry. The issue sounds very similar to the JPA deadlock issues I was seeing and fixed by using PessimisticLocking in JPA.\nThere will still be race conditions within other Ticket related methods, such as CentralAuthenticationServiceImpl.grantServiceTicket(). That method fetches the TGT using getTicket() (which will be synchronized), but then releases that lock and updates the TGT locally before storing the updates back in the registry. Multiple transactions wouldn't be correctly synchronized in this use case.\nIt would be possible to synchronize the entire grantServiceTicket() operation with the same lock and it would protect against this use case, but there may be more with our current model of fetching a ticket from the registry, modifying it outside of the registry, then sending the new complete state back into the registry.\n. The reason JPA's locking works is that the lock is persisted past the getTicket() call until the grantServiceTicket() method finishes execution.\n. If you get this sorted, one side benefit is we may be able to relax the default locking within the JpaTicketRegistry to improve concurrency performance for that registry. We would still want the control for JPA available since the DB level locking addresses multiple server concurrency\n. If you get this sorted, one side benefit is we may be able to relax the default locking within the JpaTicketRegistry to improve concurrency performance for that registry. We would still want the control for JPA available since the DB level locking addresses multiple server concurrency\n. maybe for the mutex map you could use: WeakHashMap<String, WeakReference<String>>. then in the getMutex() method resolve the WeakReference before returning.\n. maybe for the mutex map you could use: WeakHashMap<String, WeakReference<String>>. then in the getMutex() method resolve the WeakReference before returning.\n. the failure is an issue with the current pac4j SNAPSHOT build\n. This will need some more work to probably cover RegisteredServiceViewBean as well. I just ran into a ClassCastException in the view bean with a custom AttributeReleasePolicy.\n. I need to keep making some progress on other tasks at work, so this might get pushed to the back burner for a bit, but I would like to see this make it into 4.2 at least, and depending on the time frame of 4.2 maybe even a backport to 4.1.\nIt's good to know that your are seeing some utility in this change as well, and it's not just for my own use cases ;)\n. We currently have 2 use cases:\n1. We have implemented a custom AttributeReleasePolicy that will modify the value of one of our attributes based on the RegisteredService in use.\n2. We have created our own RegisteredService implementation that extends the current RegisteredServiceImpl and adds on a few custom settings observed throughout other components. (several of these settings will probably be migrated to the new properties field added in 4.2, but I haven't evaluated and determined if all of them will fit yet)\nBoth of these customizations need some sort of custom logic to execute in the management backend so that the management app at a bare minimum doesn't pave over our custom config/components. For our own deployment we have also added some of our own html to the management service form to present our additional fields that are now present in the JSON being returned.\nI had thought about the possibility of providing multiple mappers of each type, but originally decided it might be overkill and would potentially cause issues going from ServiceData to the mapped object because it wouldn't have a clean way of knowing which mapper to use in that scenario. So, I figured it would be more beneficial to have a single Mapper of each type and let the deployer implement their own mapper selection logic as needed. I'm definitely up for revisiting this decision. Selection of a Mapper for mapping data to ServiceData could be fairly straight forward, it could implement a supports() method. Selection of a Mapper going the opposite way would probably have to involve utilizing a unique type field for each mapper type, this is already done for several components, but not all of them.\n. I need to add in some work on the summary view to allow them to be customized as well. Currently I get ClassCastException from the view stack with my custom AttributeReleasePolicy. I'm hoping to get back to this in the next day or two.\n. it's on my list of things to work on this week, so by Friday I am hoping to have it done and up for review.\n. I added in support for extending the other data beans in the management UI. This should be ready for review.\n. regarding the @Component annotations on all the default Mappers. I chose not to annotate them so they wouldn't conflict in autowiring with a user's own overridden Mappers. The defaults are already initialized and set in DefaultRegisteredServicesFactory if the user doesn't load an instance into the Spring context. For reference this pattern is already present here: https://github.com/Jasig/cas/blob/master/cas-server-support-rest/src/main/java/org/jasig/cas/support/rest/TicketsResource.java#L62\nIf we do switch them to being created in the spring context and @Autowired then we will need a way to address multiple matches like you referenced earlier. I haven't tested out the full specifics of using qualifiers, but I don't see it solving this issue since the auto-wired defaults would need the qualifier so they get wired to DefaultRegisteredServiceFactory, but then a deployer with a custom Mapper couldn't create an instance with the qualifier name without running into the multiple bean matching problem.\n. @mmoayyed @leleuj \nI reworked the mapper auto wiring based on the conversations here to make the default mappers actual named spring components, but still be overridable by custom beans being loaded into spring. Going to fix the checkstyle issues now and also update the documentation for the customComponent field on the various data beans.\n. cleaned up the customComponent properties for all the data beans and added in some tests for custom mappers & a custom RegisteredService class. It should be good for another review pass :)\n. Yes, @JsonIgnore will also probably need to be added to the deprecated setSalt method here: https://github.com/Jasig/cas/blob/4.1.x/cas-server-core/src/main/java/org/jasig/cas/authentication/principal/ShibbolethCompatiblePersistentIdGenerator.java#L81\n. This fixes a ClassCastException I'm running into on my 4.1.x based deployment. This patch is no longer needed after the admin backend changes on master, but I don't feel it's worth the work to back port that patch set to 4.1.x.\n. The missing transactional advice for CAS 4.1.x was the advice on CentralAuthenticationServiceImpl, this had been present in 4.0 via @Transactional annotations, and had already been added to the default JPA TicketRegistry config for 4.2.\nI've added this to the documentation and reverted the @PersistenceContext(type = PersistenceContextType.EXTENDED) fix that introduced issues when the backing db connection times out.\n. none of these changes would apply to 4.2 due to the changes to how the JpaTicketRegistry is configured.\n. not sure, it looks like an issue with checkstyle on the yubikey module.\n. my custom RegisteredService had been using regexs from before support was added to core cas. I've been busy removing several of my own customizations that are now in core cas and stumbled across the fact that it wasn't being reset from one of my own regex tests failing after inheriting the matches function from RegexRegisteredService.\n. addresses Quartz on 4.1 for #1458\n. done\n. looks good to me, +1\n. I did a usage search on CasSpringBeanJobFactory to find the schedulers I updated, I'll do a few more usage searches to see if I missed anything.\n. I also just noticed an inconsistency in the config values for ticket.registry.cleaner.startdelay and ticket.registry.cleaner.repeatinterval between the DefaultTicketRegistry and JpaTicketRegistry.\nJpaTicketRegistry still defaults to the millisecond values even though it treats them as seconds.\n. actually, JpaTicketRegistry still treats them as milliseconds, the inconsistency might confuse deployers\n. hmm, the value has historically been milliseconds, based on that the DefaultTicketRegistry is where we are handling this incorrectly currently. If we do want to switch to seconds everywhere for consistency, we should document it somewhere for upgrading to 4.2\n. Alright, I think I got all the quartz schedulers.\n. I remember seeing some additional threads left from a stock deploy not related to quartz, checking the log4j config and retesting\n. in 4.2 I'm still seeing the log4j2 threads, even though my tomcat config doesn't list those jars on it's exclude list. I'll debug some more for log4j2 and post those findings back on the main issue thread.\n. sounds good to me\n. So, AccessToken extends OAuthCode, which implies you can use an AccessToken anywhere you could use an OAuthCode, would there be any security implications tied to this?\nmaybe a better model is to have a base OAuthToken interface that both OAuthCode and AccessToken directly inherit from, this would be analogous to the Ticket, ServiceTicket, TicketGrantingTicket interfaces.\n. also, the JpaTicketRegistry would needs to be updated to understand those new types because several parts of that TicketRegistry explicitly reference different ticket types. (e.g. getTickets, getRawTicket, deleteSingleTicket)\n. I'm going to skim over this once more today. For now I think the JPA support will work.\nI do want to try and come up with a more dynamic way to register Ticket/OAuth types with the JpaTicketRegistry so we don't need the explicit dependency on OAuth. But I don't think that should hold up this work and can be accomplished in a separate PR.\n. added #1502 to capture the need to refactor JpaTicketRegistry\n. 1 minor property comment, otherwise +1\n. +1 on this. The original dangling threads issue should be left open with a link to the log4j2 issue though\n. so, my root issue actually has to do with a corner case on some self service flows we integrated into the login flow. For email verification we email a URL with a unique key and a value to pre-populate their email address in the login form. This URL breaks when an SSO session is already established because we set the username on the credential object, but never a password.\nI still think the NPE is the incorrect response from the LdapAuthenticationHandler when there is a null password. I think the actual correct place to address this would be in ldaptive since that is where the NPE is thrown from even though they have other checks that look for a null password after the NPE is thrown.\nI'm going to file a patch on ldaptive to address this.\n. Closing this since I'm addressing this in ldaptive\n. needs to be backported to 4.2 and 4.1\n. The idea here is to move the Log4j2 initialization/shutdown natively to web.xml. We preserve the custom config location functionality using the method discussed here: https://logging.apache.org/log4j/2.0/faq.html#reconfig_from_code\nThis has the effect of shutting down the LoggingContext as the very last thing during shutdown of the web app, which doesn't leave any dangling threads.\n. @mmoayyed please review and let me know if I missed any other functionality covered by our logging customizations.\n. Hmm, it wasn't reporting any threads for me on 4.2.x, I'll retest to see if I see the same behavior\n. Regarding switching loggers in cas, I remember seeing a recent thread somewhere about a deployer wanting to use logback instead of log4j.\n. @mmoayyed just noticed your posted log was for cas-server-webapp-4.3.0-SNAPSHOT did you port the changes to 4.3.x already, or just deploy the wrong war? this patch was targeting 4.2.x and would need to be applied to master as well.\nI just recompiled 4.2.x and tested, I'm not seeing any leaking threads there.\n. @mmoayyed from what I can tell this cas-server-support-saml shouldn't be needed as a testCompile dependency since it's already a compile dependency. But I'm not as familiar with gradle as maven, so I might be missing some other hidden effect of declaring it as testCompile\n. We have an application that uses SAML that we want to integrate into our SSO environment. This is the first full SAML client that we've needed to integrate and longterm wanted to use the direct CAS support if possible. I saw it was on the roadmap a couple months ago for 4.3. Recently the priority of the integration was raised so we decided as an interim step until 4.3 is available to setup a simple overlay using 4.3 with SAML support configured. One of the other developers at Cru is actually doing this work right now (@hlbraddock)\n. merging since travis passed\n. Master is fine, its just a style bug, no actual interaction change/buginess\n. looks good to me, I'm guessing it should be back ported to 4.2?\n. alright, just tested on jetty and it's working there, spinning up tomcat now\n. and it works on tomcat as well\n. once I have a chance to look at the internals of how MFA credentials are gathered and processed I will probably update the CredentialFactory interface in the RESTful API to support returning multiple Credentials. This would potentially allow a deployer to support MFA through the RESTful API.\n. I've only had time to skim part of it, I may have some time on Saturday to dig in a little deeper.\n. how is MFA enforced for proxy requests?\nso, if I authenticate (without using MFA) to a service that doesn't require MFA, then that service uses the proxy protocol to try and access a service that does require MFA, are access restrictions in place to prevent the access?\n. Ah, hadn't gotten to validation yet. I started looking through the new webflow resolvers to figure out how the gathering flow works.\n. K, I think I have a working understanding of how MFA interactions work now, I'm going to spend an hour or two going over the PR this afternoon\n. What does having multiple configured MFA providers for a RegisteredService indicate?\nThat all of them need to be satisfied? or that only one of them needs to be satisfied?\nHow would the login webflow resolve which event to trigger if there are multiple MFA providers?\nI ask because currently RegisteredService.getMultifactorAuthenticationProviders() returns a set.\n. k, as I'm looking at making validation try and use the RegisteredService MFA config, I'm having to replicate selection criteria. So I'm probably going to make a centralized MfaTriggerSelectionStrategy (or some better name once I have time to think about it). That's where I'm going to put the resolution logic for the different triggers. We might want to refactor the webflow resolvers to utilize this common Strategy depending on how it shapes out. Then new Strategies could be developed and plugged in to handle the multiple MFA providers config.\nGotta go right now, will work on it some more later.\n. I added the MFA trigger selection strategy. I'm assuming this new object could be applied to the webflow event resolvers to combine all the different trigger implementations into a single MFA webflow event resolver. But I haven't tried to apply it there yet.\n. signed up for duo, haven't had much time during the week to put into more testing, going to roundtrip auth this weekend. My schedule during the week is usually quite packed.\nWould like it if @dima767 or @leleuj could take at least a cursory look at the PR as well, it's a lot of code to review.\n. walking through a few PGT related scenarios, just ran into an NPE in CollectionUtils.convertValueToCollection.\n. hmm, regular SSO is not working for me with this branch.\nMy test case:\n1. Mfa branch without any mfa provider added & no mfa configuration.\n2. Login & establish an SSO session\n3. reload login page with a valid service query param\n. still not working for me, debugging a bit more\n. It appears to be breaking in the following call stack:\n1. login webflow state initialAuthenticationRequestValidationCheck\n2. calls InitialAuthenticationRequestValidationAction\n3. which calls RankedAuthenticationProviderWebflowEventResolver\n4. successfully detects I have a service and tgt\n5. calls initialAuthenticationAttemptWebflowEventResolver.resolveSingle(context)\n6. InitialAuthenticationAttemptWebflowEventResolver calls grantTicketGrantingTicketToAuthenticationResult() which incidentally generates a new TGT, even though we already have a valid one. This method then returns a success event.\n7. the success event is then handed off to this.authenticationContextValidator.validate within RankedAuthenticationProviderWebflowEventResolver which starts treating success as the name of a MFA provider and causes it to error out.\na quick fix would be to add success and successWithWarnings (another possible response I see in grantTicketGrantingTicketToAuthenticationResult()) to this conditional:\nif (event.getId().equals(CasWebflowConstants.TRANSITION_ID_ERROR)\n            || event.getId().equals(CasWebflowConstants.TRANSITION_ID_AUTHENTICATION_FAILURE)) {\n            return ImmutableSet.of(event);\n        }\nbut there is still an unnecessary TGT being generated inside of InitialAuthenticationAttemptWebflowEventResolver which shouldn't be happening. I'm not familiar enough with the intent of these Webflow executors to figure out a better solution to avoid generating the extraneous TGT.\n. Just stumbled onto a different bug with the code I introduced for picking up the required MFA provider from the registered service in ticket validation. This bug was caused by a discrepancy in how we reference MFA providers throughout the code.\nInternally we reference the MultifactorAuthenticationProvider via 2 different ids based on the context. for the authn_method request parameter we use the provider id (e.g. mfa-duo), but for configuration of MFA on a RegisteredService we use the bean name instead (e.g. duoAuthenticationProvider).\nThis discrepancy could lead to confusion among users wanting to configure MFA between which value to use for a request parameter, and which one to configure in the Services Manager. we should probably consolidate to a single id only. My preference would be the provider ids (mfa-duo, mfa-yubikey, mfa-radius) and not the event ids\n. I'm planning on getting back to this PR this weekend\n. I updated the trigger selection policies to consistently use the MFA provider id and not use the bean name. tested it out with the duo MFA provider.\n. I believe that is the only thing remaining.\nI may try and investigate if it makes sense to consolidate a lot of the webflow MFA trigger selection logic to the MultifactorTriggerSelectionStrategy we are now using in ticket validation, but I don't want that to hold this PR up, so I will submit that as a subsequent PR if that work pans out.\n. had to fix one of my previous travis fixes per a recent thread on the cas-dev mailing list :)\n. yeah, I believe that is part of what supplementalAuthentications is supposed to be tracking. Maybe we need to change out the primary authentication object (and put the old in supplementalAuthentications).\nThere is already some logic in place to select the Authentication object to use for a request out of the authentication & supplementalAuthentications.\n. I haven't looked at how the auth was getting persisted for MFA yet. I know it does get persisted for renew=true, at least when using JPA as the ticket storage provider.\n. yeah, it would definitely be preferable to keep the same TGT and just update it's auth context. that way things relying on a single SSO session continue to work (i.e. SLO)\n. I think modifying the Authentication object itself might be bad, but replacing it with a new one and moving the old one into supplementalAuthentication would be alright.\nIt just feels wrong to manipulate an existing authentication object that records a supposedly complete authentication event.\n. We might still be able to handle this using supplemental Authentication. The pre-existing AuthenticationPolicy framework already selects out which Authentication object to use when generating a service ticket and also when validating one. Right now the only provided AuthenticationPolicies are ones to require specific authentication Handlers, but it can be extended to check other criteria about Authentication objects.\n. alright, I get what you are saying, we are building up more context on the current authentication object.\n. just replacing the primary Authentication object will work since we shouldn't be replacing the principal or existing successes/failures.\n. I'm planning on doing another round of testing tomorrow, I think we are really close\n. hmm, it's getting stuck in a redirect loop before even logging in when trying to use a service with MFA configured. trying to debug what is triggering the redirect right now.\n. the redirect loop is related to having a theme set on the Apereo RegisteredService, unrelated to MFA (probably) but still a bug that needs to be addressed\n. that would probably be it, going to merge in master\n. hmm, the only thing in master not merged into Mfa is the 5.0 version update.\n. I'm actually seeing the redirect loop behavior in master, opening a bug report\n. disabling the theme locally so I can continue testing MFA\n. all my testing looks good, I skimmed over the code one last time and made a few minor corrections, but other than that I think this is ready to get merged\n. This should be ported as is to 4.2. In 4.1 this should look like a documentation update.\n. you updated the wrong getTicket in the 4.1.x documentation. Just fixed it :)\n. haha, I know that feeling\n. +1\n. 2 simple changes, first time working with lambda functions though\n. position of the arguments being processed matters. Where I ran into this was this log statement:\n2016-02-05 13:43:16,994 DEBUG [org.jasig.cas.util.CasLoggerContextInitializer] - <Updated logging config file from [null] to [file:/Users/frett/opt/tomcat/7.0.65/conf/cas.log4j2.xml]>\nwithout this fix the log statement was:\n2016-02-05 13:43:16,994 DEBUG [org.jasig.cas.util.CasLoggerContextInitializer] - <Updated logging config file from [file:/Users/frett/opt/tomcat/7.0.65/conf/cas.log4j2.xml] to []>\nwhich changes the meaning of the message\n. by sticking with null it maintains default logger behavior. I feel we should only globally modify log messages when security is the concern (which is the current case with filtering out tickets)\n. I do agree in this case it would be more clear without null, I'll update that on the specific log message and not globally\n. The scenario I ran into this bug was:\n- a CAS server configured with RequiredHandlerAuthenticationPolicyFactory\n- 2 RegisteredService both with valid configured Required Handlers\nI could successfully fetch a ticket and PGT for service 1 but was unable to issue a PT for service 2 using the PGT because the AuthenticationPolicy wasn't examining the root Authentication\n. The scenario I ran into this bug was:\n- a CAS server configured with RequiredHandlerAuthenticationPolicyFactory\n- 2 RegisteredService both with valid configured Required Handlers\nI could successfully fetch a ticket and PGT for service 1 but was unable to issue a PT for service 2 using the PGT because the AuthenticationPolicy wasn't examining the root Authentication\n. I believe this should be back ported all the way to 4.0.x\n. I believe this should be back ported all the way to 4.0.x\n. I'm going to make the following 2 minor changes before this gets merged.\n1. utilize getCode() on the AbstractTicketException for determining the error message code.\n2. Allow ContextualAuthenticationPolicys to override the default code for UnsatisfiedAuthenticationPolicyException\nI also will fix the test.\n. I'm going to make the following 2 minor changes before this gets merged.\n1. utilize getCode() on the AbstractTicketException for determining the error message code.\n2. Allow ContextualAuthenticationPolicys to override the default code for UnsatisfiedAuthenticationPolicyException\nI also will fix the test.\n. the code should be complete, there is an aspectj compile time weaving issue with default methods on interfaces that I need to address before we merge. I'll try and track it down tomorrow.\nThe AspectJ error\n```\n:cas-server-core-authentication:test\norg.jasig.cas.web.flow.AuthenticationExceptionHandlerTests > initializationError FAILED\n    java.lang.ClassFormatError: Method getCode_aroundBody0 in class org/jasig/cas/authentication/ContextualAuthenticationPolicy has illegal modifiers: 0x18\n```\nIt only happens when using compile time weaving.\nI can also squash the history a bit before merge if desired.\n. the code should be complete, there is an aspectj compile time weaving issue with default methods on interfaces that I need to address before we merge. I'll try and track it down tomorrow.\nThe AspectJ error\n```\n:cas-server-core-authentication:test\norg.jasig.cas.web.flow.AuthenticationExceptionHandlerTests > initializationError FAILED\n    java.lang.ClassFormatError: Method getCode_aroundBody0 in class org/jasig/cas/authentication/ContextualAuthenticationPolicy has illegal modifiers: 0x18\n```\nIt only happens when using compile time weaving.\nI can also squash the history a bit before merge if desired.\n. AspectJ 1.8.8 fixed the issue with default methods on interfaces.\nSee: https://bugs.eclipse.org/bugs/show_bug.cgi?id=475200\n. AspectJ 1.8.8 fixed the issue with default methods on interfaces.\nSee: https://bugs.eclipse.org/bugs/show_bug.cgi?id=475200\n. after this is merged I'm going to backport a minimal part of this PR to 4.1.x and 4.2.x to just expose the exception to the webflow, but not any of the exception handling logic.\nI'm looking to implement some of my own custom Auth Policies on my deployment to provide different forms of LOA for RegisteredServices.\n. after this is merged I'm going to backport a minimal part of this PR to 4.1.x and 4.2.x to just expose the exception to the webflow, but not any of the exception handling logic.\nI'm looking to implement some of my own custom Auth Policies on my deployment to provide different forms of LOA for RegisteredServices.\n. sounds good to me, I'll work up the backports for 4.1.x and 4.2.x later today\n. I'm also going to merge this into the Mfa branch\n. alright, I noticed the moved transition ids already. I'm basically stepping through the 3 spots that would return updated events to make sure they are correct.\n. Mfa merge was pushed, waiting for travis to verify the build\n. in response to 2, it's in the realm of user generated data, so we can do our best to ensure it wasn't manipulated, but we would have to accept the fact that we couldn't guarantee it. This is similar to the problems with DRM in consumer devices.\n. that sounds like a good option for 1, make it optional (off by default) with a property to enable when required.\n. looks good to me, +1\n. +1, just a minor nit\nSince I've switched my own CAS deployment to target Java 8 I've started to notice quite a few places that I no longer need explicit generics. It's been nice since most of those places annoyed me that I had to be explicit for no apparent reason.\n. +1\n. I haven't used annotation based @Configuration classes before so there may be a simple solution to this.\nHow would a deployer override core beans defined within a @Configuration class. For example, the auditTrailManager is explicitly defined to be the Slf4jLoggingAuditTrailManager, our current deployment has overriden the current spring xml and replaced that with the JdbcAuditTrailManager\n. I guess the easy answer in that case would be to add core support to configure the JdbcAuditTrailManager, but I'm more curious about a generic way to replace a core bean with a customized implementation.\n. good, I agree going the path of just making changes to cas.properties and dynamically reloading should be enough for 95%+ of deployers. I just wanted to make sure we weren't making a config change that would make it impossible for the remaining 5% to customize some core CAS components in the way they need to for their own business rules (I'm currently in that 5%).\nOne of the back burner CAS tasks I have for our own deployment is to re-evaluate our customizations to figure out what would be beneficials for others (and fits within core CAS) and what can be accomplished using core CAS components already (our overlay started on 3.4.x and has evolved over time). I'm hoping that half of our customizations can be removed/migrated upstream, but there will still be some that don't make sense for the larger CAS community and those I will still need a path to maintain locally.\n. yeah, for reference our overlay is currently modifying 8 core xml spring configs. (cas-servlet.xml, deployerConfigContext.xml, applicationContext.xml, argumentExtractorsConfiguration.xml, auditTrailContext.xml, propertyFileConfigurer.xml, securityContext.xml, and ticketRegistry.xml)\nand the rest of our spring config is in another 24 spring xml files (organized by component/feature/subsystem).\nSo, something that changes how we are currently accomplishing what we need to do draws my attention :)\n. is it possible to subclass @Configuration classes? maybe use that to override core system beans. It would mean we would have to disable the system configuration class and load the subclass one instead. This would probably be the first override method I would try out, but not sure how well it would work?\nI think once we figure out a good override mechanism we should document it with the WAR overlay documentation under an advanced section.\n. After our conversation I'm fine with this PR, but would prefer someone else with actual experience around @Configuration spring config give the +1\n. +1 with the one comment and you still need to address the travis issues\n. k, I'll take a look at it tonight\n. +1\n. +1, I'll merge this tonight when I have time to forward/back port it at the same time\n. +1\n. Any reason why you didn't include the logic for the vfs protocol? https://github.com/Jasig/cas/pull/1657/files#diff-7b7e27f9135c8a6a25869281a004569fR57\n. looks good, waiting for travis to finish before merging\n. try a clean build, that looks like an AspectJ error\n. hmm, this isn't actually correct usage of new VfsResource().\n. @devpreview can you try out this patch: https://github.com/frett/cas/commit/de5e618dcd00d2fb089d20b7a5cb710a560cf553\n. +1\n. just loading up the jpa ticket registry breaks the webapp at the moment for me. doing a bit more investigating.\n. I'm going to try and make some time this weekend to verify functionality in JPA after the couple tweaks @mmoayyed made last night\n. I'm getting Transaction required errors when trying to login using a simple ticket registry:\n2016-04-23 16:59:14,817 ERROR [org.jasig.cas.ticket.registry.JpaTicketRegistry] - <Error getting ticket [TGT-**********************************************fcxJ6Op2yM-cas01.example.org, javax.persistence.TransactionRequiredException: no transaction is in progress] from registry.>\nI need to go right now, but will dig in a bit more to see what can be done to fix the missing transaction\n. well, it appears that the JPA error is on master as well. \n. fixed a couple JPA issues on master that showed up when testing. I'm done for the night, hopefully I'll get a chance to continue testing tomorrow with the JPA fixes in place to see what still needs to be done.\n. Our deployment use case is better utilization of fallback languages defined within the Accept-Languages header coupled with a set of languages we support for our deployment.. The only minimal performance side effect is that you will have a copy of each view cached for each theme. So, instead of a single casLoginView cached in memory, it will be a copy of casLoginView for each theme you use.. I just ran a test environment with 2 simple theme view overrides and it worked as expected.. how view caching is handled after this PR:\nThemeBasedViewResolver (caches an individual ViewResolver per theme)\n|\nThemeViewResolver (one per theme, caches views, utilizes thymeleafProperties.isCached() to enable/disable caching)\n|\nThymeleafViewResolver (single instance with caching always disabled, should only be called if ThemeViewResolver does not have a cached View already). @mmoayyed thanks, I'll be back around for the next couple months. Got switched off of Android development to bring our CAS server up to date and utilize a lot of the new CAS 5.x features :). rebased to clean up the random commits that had gotten included from master :). @mmoayyed I'm open to discussion on this if you feel it should remain based on the validation request service object.\nWith core CAS from what I can tell this would have no impact on behavior and in that context is purely theoretical. For my use case I can work around the problem by fetching the original Service out of the ServiceTicket before validating the ticket itself.. I have a more integrated OAuth solution that lives directly in the login webflow, and the scope for the initial OAuth grant is tracked within the Service object until the code (ST) is exchanged for an access_token.\nOur OAuth support came about before official OAuth support. We haven't migrated because we have quite a few legacy clients out of our control utilizing it and we also have several OAuth api endpoints that utilize the OAuth access_token along with granted scope.\nThe most used endpoint will allow a client to utilize an access_token to get a CAS ticket for a service, this allows us to bridge from our OAuth clients to CAS protected sites and APIs.. alright, this should be good for review now. wanted to tweak the properties a bit, and forgot about SAML 1.0 responses initially.. and working on checkstyle failures now :). 1. authorizedToReleaseAuthenticationAttributes would still be a toggle to enable/disable the release of the attributes on a per-service basis. This is just providing filtering to which authentication attributes can be released when enabled for a service.\n2. A component would make more sense so that deployers could implement custom solutions if desired. I'll rework this into that.\n3. I'll see what cleanup/reworking can happen within getCasProtocolAuthenticationAttributes. I got this updated to use a policy bean that can be replaced by a deployer.. As I'm testing out SAML support in our environment I'm finding several places I have to duplicate usage of the AuthenticationServiceSelectionPlan I'm wondering if the better overall design would be to incorporate usage of the selection strategies directly into the ServicesManager.. I was thinking the implementations just created a new service object from the service object provided. But I see that at least the OAuth one interacts with the http request object directly.\nI'll think about ways we can clean up this logic throughout the code base some more. It's currently a lot of repetition when going from a Service to a RegisteredService across the code base taking AuthenticationServiceSelectionStrategies into account.. This patch shouldn't be necessary, you should just need to enable this setting:\ncas.authn.policy.requiredHandlerAuthenticationPolicyEnabled=true\nhttps://apereo.github.io/cas/5.1.x/installation/Configuration-Properties.html#authentication-policy. just a minor cleanup :). Regarding the schema breaking change, we could leave the field named geography, but long term that is a potentially misleading field name.. k, i'll get that updated to indicate the breaking change.. - a client ip address is also not always unique (e.g. public hotspots)\n- User-Agent can change too frequently based on the transparent background update mechanisms within Chrome\n  - User-Agent can be easy to capture (same value is sent to every site you visit) and easy to spoof.\n- We also made trusted device opt-in via a \"Remember this device\" checkbox on the GAuth code form.\n  - Presenting this option to the user meant we needed to do better at remembering the device instead of \"forgetting\" them every week when Chrome updated\nWith the combination of these factors we felt that using a randomly generated persistent cookie in place of User-Agent would provide a better combination of convenience (not having to prompt for MFA credentials every time your browser updates) along with something that isn't as easy to maliciously acquire from a client.\nIn the process of doing some research I found several javascript based device fingerprint libraries and figured some deployers may have other security needs that drive them to utilize a different fingerprinting mechanism, so I decided the best path forward was to make the device fingerprint extensible.. > Excellent. Is this extension also something that we can put into CAS, and activate based on some configuration option?\nYeah, when I circle back around to implementing the cookie based device fingerprinting (tomorrow or early next week) I'll open up a PR with it.. yeah, I'll toss some test cases in for this. I'm also thinking we should rename getCredential to getPrimaryCredential and potentially rename isCredentialOfType to hasCredentialOfType.\nWe already changed the return type of getCredential between RC2 and RC3, and isCredentialOfType only appears to be used by ByCredentialTypeAuthenticationHandlerResovler currently. This should be ready for review.\nI tested it out on our local code base and I also added documentation for the config parameters to adjust settings.\nI defaulted the settings to using the client ip and a randomly generated cookie (w/o encrypting the cookie value on the client's browser). I'm not sure if it's beneficial to encrypt & sign the cookie value since it's just a randomly generated string with no additional data associated with it.. I'll flip cookie encryption on.\nThe only real reason I had cookie encryption off by default was that encryption requires the deployer to add 2 properties for the encrypted cookies to persist past a restart. And I wanted to limit additional burden on the deployer when there isn't any real benefit I see to the encryption.. Everything should be addressed. Closing this in favor of #3254. backport of #3280 . This should be backported to 5.3.x. I also need to pull the @Transactional annotation off the cleaner class. I was running into an exception because the wrong transaction manager was referenced in the annotation. I pulled it off because it isn't necessary with the current code and seemed like a cleaner option. I'm going to put it back referencing the correct transaction manager so that it will continue to work as the cleaner changes over time.. backport: #3553 . the serviceId should be prefixed with ^ to make sure it matches https:// at the beginning of the service. the same would apply to the imap pattern\n. in this case, using the slf4j parameterized form doesn't really have a negative performance impact, the only performance impact would be one additional method call on the stack, the first thing .debug() does is to check if isDebugEnabled(). wrapping the .debug() call in an .ifDebugEnabled() block would make sense if stringification of a parameter has to be manually performed before being passed to .debug()\nhttp://www.slf4j.org/faq.html#logging_performance\n. should this be final?\n. should this be final as well?\n. I can add a comment to clarify, this would account for any @Entity that inherits from TicketGrantingTicketImpl because they are stored in the same DB table and JPA will seamlessly find any object subclasses.\nThis logic would have to change if we ever separate PGTs out to a different table.\n. I'm fine with dropping them, I have no need for this in my deployment currently.\nI have some custom OAuth code in my deployment (different from the stock OAuth support) that provides long term sessions that can bridge into the CAS protocol and be used to issue PTs. Right now it's standalone, but I've been thinking about reworking it into the RegisteredService/Service/TicketGrantingTicket concepts. I doubt I would have need to define another unique prefix for TGTs, if it does arise I'm fine with submitting a PR to re-add the methods at that time.\n. good catch, I thought that was the one I was editing ;)\n. it's already being called by default because no other super() or this() statement is present, so it's just a question of style.\nLet me know if you want it in there stylistically.\n. yeah, because I wasn't using spring auto-wiring for the default mappers I wanted a way to override just the AttributeFilterMapper and PrincipalAttributesRespository. I opted for passing in the configured mappers after properties were set, which is the need to initialize it in the initializeDefaults method after everything else is wired.\n. do we need to do any type of escaping on requiredValue so it's not processed as regex special characters?\n. actually, strike that. I see that requirement was part of the original issue\n. Let me double check, but because we already store the FK relationship from a PGT -> TGT there should be a JPA annotation that will automatically populate this from that FK. This would prevent having to duplicate the data in a binary column, and make it easier to maintain state between the entire PGT hierarchy.\nThe trade off being it will take a few more queries to load a complex hierarchy\n. @OneToMany(mappedBy=\"ticketGrantingTicket\", fetch=FetchType.EAGER, targetEntity=ProxyGrantingTicketImpl.class)\nI'm going to pull this code down and test this out with some deep PGT hierarchies\n. I saw that line, was going to sort this out first since it could have a cascade effect on some of the other persisting logic.\n. from what I can tell, in order for @OneToMany to work, the reverse @ManyToOne field cannot be on a @MappedSuperclass. This means we would need to move the parent ticketGrantingTicket property from AbstractTicket to both ServiceTicketImpl and TicketGrantingTicketImpl.\nI did this locally and it led to a different exception with the merge(ticket.getGrantingTicket) line you added here: https://github.com/Jasig/cas/pull/1429/files#diff-4bdbc0e2e88e2d337ea33f88245438a4R81\nI'm going to continue down this line of testing this evening, but wanted to update in the interim.\n. > Prefer we don't do that, but I'll await your test results.\nI agree, it's definitely a trade off. It makes the JPA implementation cleaner but at the cost of losing some cleanliness in the base model.\nI was unable to find another solution that would allow us to leverage the already existing FK relationships.\nhere are the JPA changes I made: https://github.com/Unicon/cas/compare/slo-pgts...frett:slo-pgts-jpa\nMy preference would be to go this way because it make it easier to consistently maintain accurate state between TGTs & PGTs in the JPA model.\n. @mmoayyed done\n. it looks like cookiePath actually defaults to \"/\"\n. what I meant was StringUtils.isBlank(warnCookieGenerator.getCookiePath()) will always return false because the cookiePath in the CookieGenerator defaults to \"/\" and not null/an empty string.\nSo, the autogeneration logic of the cookiePath value won't run unless we specifically initialize the CookieGenerators to a blank value.\n. I haven't fully looked at how we are currently initializing executorService, but it appears that in https://github.com/Unicon/cas/blob/dangling-threads/cas-server-core-util/src/main/java/org/jasig/cas/util/http/SimpleHttpClientFactoryBean.java#L250 we create a ThreadPoolExecutor but don't store it locally where we could shut it down.\n. DefaultPasswordEncoder will return null if the password is already null or you haven't defined an encodingAlgorithm\n. https://github.com/Jasig/cas/blob/master/cas-server-core-authentication/src/main/java/org/jasig/cas/authentication/handler/DefaultPasswordEncoder.java#L51\n. PlainTextPasswordEncoder passes the password straight through, so if it's null to start with it will still be null.\n. it starts off as null in the UsernamePasswordCredential, somehow it isn't being set. I'll try to diagnosis a bit more to see if I'm doing something unique in my deployment that is causing an odd state.\n. Although, addressing that still would need a fix for DefaultPasswordEncoder with no algorithm set.\n. The pool created above never gets assigned to this.executorService it's assigned to a local variable definedExecutorService and then returned wrapped in a FutureRequestExecutionService.\n. I think the original intention might have been to assign it to this.executorService since it hadn't been initialized elsewhere.\n. Alright, it's definitely something in my deployment causing the credentials to be null. Leave this open for a bit while I address my problem and think about if this is needed upstream.\n. They weren't in cas.properties, I can check if they are elsewhere in documentation\n. I can switch to reflection here so it gracefully fails if the deployer removes log4j, the only issue would be the need for explicitly defining the listener in web.xml. I tried relying on the servlet 3 auto config, but it still shutdown log4j too soon.\n. I was thinking that as a possibility as well, but I do think it's overkill for now. With how I named the property we can always create a different one for the lock type and deprecate the enabled flag if the need actually arises (since this would be replaced by an empty lock type)\nPart of the issue comes that the majority of the time the TGT is loaded it is going to be written to during the transaction. But the writes occur a good amount of time after the TGT is loaded but still during the same transaction.\nOPTIMISTIC_READ and OPTIMISTIC_WRITE lock types would require a version attribute for the TGT and still presents failures as a deadlock instead of waiting for other transactions to finish, so this type gains nothing over no lock type.\nPESSIMISTIC_READ locks the TGT with a shared lock which almost always needs to be upgraded to an exclusive write lock later (because we almost always write to the TGT after loading it). This leads to still getting deadlocks because multiple threads would have read the state of the TGT before any of them claim they actually need to write to it.\nThe only scenario that disabling locks doesn't lead to deadlocks or data inconsistency is when there is no request concurrency within a single TGT/PGT hierarchy, which makes sense in certain deployment/usage scenarios.\n. alright, I'll get documentation updates in and then merge. will probably do it late tonight or tomorrow sometime\n. yeah, it's currently a stormpath connection failure which is unrelated to my patch, but I will make sure to verify before merging.\n. this list is currently both Autowired by spring and manually initialized in the constructor. I also remember seeing you auto-register the OAuth TicketDelegators when those are loaded by directly adding to the ticketDelegators array. The Autowired functionality feels inconsistent with the other 2 ways we add TicketDelegators.\nHow do you envision this list being extended by other components that define their own custom Ticket classes?\n. maybe this should be required, since you assertNotNull in create\n. again, maybe this should be required\n. @Table and @DiscriminatorColumn shouldn't be required since they are already present on the OAuthCodeImpl super class\n. this really may fit best by not being autowired by spring at all\n. k, +1 to this comment\n. yeah, I'll search for it later this evening or tomorrow.\n. There is another AuthenticationPolicy interface that is used within PolicyBasedAuthenticationManager. Whenever you were going over this interface earlier my mind jumped to that similarly named interface.\nMaybe we should rename this to help differentiate the 2 interfaces better? This currently seems very MFA centric (obviously), do you see this being extended down the line with non-MFA use cases? or should we just rename it to something like RegisteredServiceMultifactorPolicy?\n. If we do stick with a more generic name for the interface, we should rename the methods isFailOpen(), getPrincipalAttributeNameTrigger(), and getPrincipalAttributeValueToMatch() to make it clear they are MFA centric methods.\n. it looks like Hibernate 5.0 will support this type:\nhttps://hibernate.atlassian.net/browse/HHH-8844\n. which we currently use, so this should be good with JPA. I haven't run any local tests with it yet to confirm.\n. do we want to keep the AccessToken and TicketGrantingTicket timeout values the same? or should we expose them as separate properties?\n. Any specific reason you went with creating a SimpleMutex class instead of just using a simple new Object() for the mutex?\n. you are right about the weakness of the objects. a WeakHashMap only stores weak links to the key. so, lifetime of the mutex object would be tied to the String key.\n. Alright, let me see about refactoring this to combine with the other handler. There are some differences in how we access the actual exception, for TicketExceptions its direct, for AuthenticationException we actually process exceptions in handler failures.\n. this was just moving the pre-existing warn message. I'll do a quick evaluation to see where & how TicketCreationExceptions are thrown to double check if it's still accurate.\n. I replaced it with a default transition that acts as a catch-all and handles any event not explicitly defined.\nThis will allow anyone that wants to override which AuthenticationExceptions are handled an easier integration if they just want the custom error message and not any custom webflow states. I think leaving the default is good for deployers, but I can restore the UNKNOWN transition if we want that explicitly defined.\nIn reality with the default transition we can remove any explicit transition to generateLoginTicket and let them be handled by the default transition.\n. it actually looks like we never use TicketCreationException except in tests\n. re-surfacing this comment since github consumed it with a nearby change.\nThis message already existed and was moved here from an earlier catch. The TicketCreationException itself is never even used within core CAS.\n. yeah, let me see what exception would actually get triggered with renew=true then I'll drop this Exception\n. it was the pre-existing error code for UnsatisfiedAuthenticationPolicyException https://github.com/frett/cas/blob/ticketExceptions/cas-server-core-authentication/src/main/java/org/jasig/cas/ticket/UnsatisfiedAuthenticationPolicyException.java#L19\nThis is one of the points that handling of AbstractTicketExceptions diverged from handling of AuthenticationExceptions. For AuthenticationException we don't have access to the original underlying exception thrown by the auth handler, we only have access to the class. So, we need to generate a message code based off of that class.\nFor AbstractTicketException we have access to the actual exception thrown, so we can utilize the built-in getCode() method to resolve which error message to show. I opted to go this route over generating a fixed error code based on the exception class name so that it is possible to dynamically switch out the error message when throwing the original AbstractTicketException.\n. UNKNOWN will need to stay because it is used for any unrecognized handlerErrors within an AuthenticationException\n. :joy:\n. do we really want to do this? This relaxes all the AbstractTicketException checked exceptions.\n. I personally would rather see grantProxyGrantingTicket gain throws AbstractTicketException (and cascade it up the call stack) than make it unchecked.\n. I agree that it does cause changes in signatures which are undesirable. But at the same time those signature changes force code using those interfaces to account for new exceptions being thrown from certain execution paths before an unexpected Exception is thrown in production due to an untested corner case exercising that exception.\nInternally i feel it also helps us account for exceptions we may not be thinking about when we create new methods that need to create a PGT before they lead to unexpected exceptions at runtime.\nI don't feel that all exceptions should be checked, exceptions that arise from improper usage should be unchecked. Or exceptions not used to convey expected failure scenarios.\nThis change cascades consequences to usage of the CentralAuthenticationService object which throws AbstractTicketException from (all?) methods. Now if we are implementing a new component that needs to grant a ST from a TGT we will need to remember to account for the InvalidTicketException since it's no longer a checked exception that is being forced on us.\nMaybe an alternative is to have the new InvalidProxyGrantingTicketForServiceTicket exception not extend the current AbstractTicketException hierarchy, but extend a separate RuntimeException hierarchy.\nAnyways, I feel I've made my case, so I'll leave the decision up to you :)\n. side note, sometimes I wish RuntimeException was an interface you could apply to arbitrary Exceptions so you didn't have to choose between making something that should be an unchecked Exception part of a checked Exception hierarchy that logically makes sense vs. orphaning the exception outside of the checked exception hierarchy so it can stay an unchecked exception.\n. I would put in parenthesis to make the order of operations clear\n. minor nit, we could probably just use Collections.emptyMap() or ImmutableMap.of() here.\n. would this be simpler logic if we converted it to use streams?\n. \"authentication\" should probably be a private constant\n. \"authentication\" should probably be a private constant\n. \"authenticationResultBuilder\" should probably be a private constant\n. \"authenticationResult\" should probably be a private constant\n. I'm +1 for streams when it doesn't leave the code less readable/maintainable than without streams ;)\n. agreed, as I've been working with streams and learning the APIs available, more and more patterns are revealing themselves :)\nanyways, this method seems like an ideal method to convert to using streams\n. couldn't we also load the requestedContext based on the configuration within the RegisteredService itself?\nThis would allow most services that want to enforce MFA to only need to enable it centrally in the ServiceRegistry and not need to specifically request it when validating tickets.\n. well, I see we do load the RegisteredService below.\nbut the !StringUtils.hasLength(requestedContext) test will short-circuit if the client hasn't been updated to send the additional parameter to enforce MFA. This means client services would need to be updated and it couldn't be completely centrally configured without needing that update.\n. yeah, that's the premise. I also want to make sure the trigger of \"Opt-In Request Parameter\" can still be enforced at validation by still supporting requestContext in that scenario.\nI'll make the change.\n. you repeated the javadoc here.\n. any specific reason you decided to use the boxed object Long instead of the primitive long? can this return null?\n. this could be reduced to:\nprivate static long countToLong(final Object result) {\n    return ((Number) result).longValue();\n}\nno need to handle it differently for the various Number types.\n. Good point, there is a window for the service config to change. The time between getting redirected to the login form and actually submitting the form.\nI'll put this back in and add ServiceSelectionPlan support to it.. I'll update the name and move it over to the web.flow package.\nI included the RequestContext object in order for implementors to have access to the request to extract meta-data about the request to generate the device fingerprint. In our local use case this will be replacing the pre-existing geography fingerprint with a cookie based solution.\nThe current geography implementation uses the RequestContext object, but accesses it through RequestContextHolder. I think passing in the RequestContext object directly is a better pattern when the object is already directly available.. These constants help provide some compile-time validation of dependencies. Using the constants prevents accidentally mis-spelling the bean name in a @Qualifier elsewhere in the code base.. I'm not sure if @ConditionalOnProperty works with @RefreshScope based on my understanding of how @RefreshScope is implemented.\nRefreshScoped beans create a proxy to the actual bean, that proxy is wired into other components that require the bean. With @ConditionalOnProperty the bean (and proxy) wouldn't get created if @ConditionalOnProperty disables the bean. At this point it would not get wired in elsewhere and changing the property to enable the bean wouldn't actually enable the bean and update wiring.\nWith that in mind I opted to use a NoOp fingerprint component instead so that the component can be enabled/disabled and still be refreshed within the active spring context.. \ud83d\udc4d haven't done anything with JDK9 yet, but this is good to know.. hmm, I used Component in the sense that the object implementing this interface generates a component that gets combined together in DeviceFingerprintStrategy to produce a full deviceFingerprint.\nmaybe DeviceFingerprintDimension instead?. I'm going to let this rest for the night and re-examine it tomorrow with a fresh mind :). also, good point on the verb vs noun. That actually makes it easier to come up with a better name :). I don't think we currently have a common cookie properties section in our documentation. I'll create one that this references.. ",
    "wgthom": "Pull request needs to be pared down to lppe specific.\n. I re-opened CAS-816 and will shepherd into 3.5 as discussion on the cas-dev.\n. superseded by https://github.com/Jasig/cas/pull/71\n. Dima fixing minor issue with merge, will re-issue pull request.\n. Dima, thanks for the merge and the explanation.\nMarvin, as Dima stated this is simply to bring lppe-feature branch up to date.  We can continue to discuss the merge to master on cas-dev.  Does this clear things up for you regarding this specific pull request?\nBill\n. Misagh, \nThanks for preparing this, the commit looks good, but would you mind moving the module directory from \"cas-server-extensions\" to \"cas-server-extension-clearpass\"?  This will be more consistent with module naming strategy.  I'll be happy to pull this in after that.\nBest,\nBill\n. I'll open a jira for this.  The driver for this is to get consistent config now that TGT expiration policy is set in seconds.  It's minor, but an improvement none the less.\n. \"Also, you shouldn't just swap mechanisms. Even if this is 3.5, people shouldn't have to rewrite their patterns. There should be an API introduce that supports matching, which can be associated with each service.\"\nScott, I don't believe this is worth the trouble or the complexity.  The current approach is just broken as described in CAS-1071.  Leaving the broken implementation in the code base is leaving cas adopters open to this vulnerability.\nBill\n. On Tue, Mar 13, 2012 at 6:15 PM, Scott\nreply@reply.github.com\nwrote:\n\nThe feature is not broken. It matches against certain patterns that may be configured to be too general. \u00a0However, that is still appropriate matching for that supplied pattern. \u00a0The issue that is its possible for someone to configure a pattern that is too general. \u00a0Saying that makes it broken is sensationalizing. \u00a0I'm pretty sure I could come up with a RegEx that is \"broken\" also. \u00a0I also don't think you'd appreciate if I went around calling that broken.\n\nThe feature is broken in the sense that deployers are likely to have\nthe expectation that the matching rules are providing access control\nwhere they are not, hence the JIRA issue that aptly describes the\nproblem.\nIf you want to claim that is was never the intent of the feature to\nprovide access control on URLs like \"https://.example.com/*\" that's\nfine, but I think that is counter to most deployers expectations,\nespecially given the documentation provided, and if I recall correctly\nthe initial intent of the implementation.   In any case, providing\naccess control on wild card URLs has been a requirement on every CAS\ndeployment I've ever been involved in.  So it's also broken in the\nsense that it doesn't meet the (perhaps implied) functional\nrequirements.\n\nThis is a big change for customers and is not in the scope of a 3.5 change to make them upgrade all of their patterns). \u00a0We can't change our definition of what is \"too big a change for a 3.5 release\" depending on who is offering up the commit.\n-1 if backwards compatibility is not preserved.\n\nYour point here is not consistent with the release strategy which\nexplicitly states that a MINOR release (aka 3.5) \"will include fixes\nand enhancements that could not easily be accommodated without\nbreaking backward compatibility or changing default behavior.\"  And\nthat \"Adopters can expect general improvements that require moderate\nchanges in APIs, integration points, default behavior, and general\nconfiguration.\"\nThis is exactly the kind of fix that is appropriate for the 3.5 release.\nNot addressing this issue is leaving the community in danger and\nwithout out a suitable solution for wild card URLs.\nPreserving the ANTLR based approach will simply add complexity and\nmaintenance burden for an implementation that doesn't really work as\nexpected.\nRegular Expressions are routinely used in Apache httpd config and will\nbe immediately understood by sysadmins.\nI believe 4 of the 5 committers have already expressed interest in\nthis change.\nMisagh has already implemented the improvement and revised it based on\nfeedback from the community.\nGiven all this, do you still have a concern?\nBest,\nBill\n. Leaving the deployers with the Ant-Pattern approach is leaving them with a solution that does not behave properly and presents a vulnerability if used as intended.  This harm to them is much greater than the pain they would have to endure to get to a solution that works.  A trade off that I'd bet every single deployer using wild card URLs would gladly make.\nEven if we preserve the Ant-pattern, folks will still have to migrate to RegEx in order to get proper behavior for wild card URLs.  Backward compatibility for an approach that is deficient by objective measures and is eclipsed by a superior approach just doesn't make any sense to me.\n. This thread migrated to cas-dev here:\nhttp://groups.google.com/group/cas-dev/browse_thread/thread/4e3cc29e5b2a93d3?hl=en\n. > > Leaving the deployers with the Ant-Pattern approach is leaving them with a solution that does not behave properly and presents a vulnerability if used as intended.\n\nBill, please stop with misrepresentations and false statements. \"If used as intended?\" Ant pattern matching of URLs works EXACTLY as ant pattern matching is intended to work. Just like any solution, if you provide a pattern that is incorrect or more open than it should be, the matching will not work as you hoped YOUR pattern could work. The same can be said about regular expressions (I know, its shocking that someone might write a bad regular expression). Statements like these do not help us making progress towards a resolution.\n\nI stand by my statements and would suggest that being so pedantic about Ant pattern matching is missing the forest for the trees.  This issue is not about Ant pattern matching.  The issue is about CAS Service URL matching, and there is no \"correct\" Ant pattern for wild card URLs that would be consistent with the Jasig wiki, the JIRA that spawned this commit, and experience with numerous CAS deployments over the years.  Hell, I'd wager even Rutgers has wild card URLs.\n. > You would do well to read the Jasig wiki BEFORE telling me that there is no correct pattern that is consistent with the Jasig wiki. This is what the Jasig wiki says:\nThe Jasig CAS User Manual provides an example of wild card URLs here: https://wiki.jasig.org/display/CASUM/Editing\nIt's clear we have a different perspective on this, and it's unlikely that repeating our positions is going to lead to any breakthrough.  I am glad that there's consensus to get RegEx in 3.5 to address this issue, so I'll leave it at that.\n. Comments on JIRA: https://issues.jasig.org/browse/CAS-1082\nComments on original pull request: https://github.com/Jasig/cas/pull/22\nDiscussion on cas-dev: https://groups.google.com/forum/?fromgroups#!topic/cas-dev/DhEcza_TjF4\nYou ended that thread with:\n\nI like it.  Learned something new too.  Wasn't familiar with the Spring 3 syntax.  I would have probably either used Daniel's method to keep all the values together or placed them directly as defaults on the bean definition for propertyplaceholder configurer.\nWe should have a strategy for the best way to handle these new properties, as I'm sure more clean up down the line will necessitate it.  Maybe a new thread though?\nCheers,\nScott\n. +1 for this merge.\n\nI'm out for the rest of the evening, so someone else will have to click the little green button prior to cutting 3.5RC1, assuming there are no objections.  Looks like Marvin is on board.  I know Andrew is +1.  Looks like it's up to you, Scott.\n. On Mon, May 14, 2012 at 9:53 AM, Scott\nreply@reply.github.com\nwrote:\n\nI don't feel like we've accurately addressed issues around documentation and understanding for deployers and consumers of this.\nWhat steps are we going to take if we do it this way to ensure that deployers can easily find and understand what values they can override?\n\ncas.properties already covers this to a great extent.  See comments\nand overridable properties here:\nhttps://github.com/wgthom/cas/blob/CAS-1082-props/cas-server-webapp/src/main/webapp/WEB-INF/cas.properties\nThis covers most if not all properties a deployer might want to configure.\nI suppose someone could also update CASM to mention the improved cas.properties.\nBill\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/71#issuecomment-5690663\n. On Mon, May 14, 2012 at 10:27 AM, Scott\nreply@reply.github.com\nwrote:\nDo we consider this to be ideal?\n\nYes, ideal from a deployers perspective.\nGood enough from a developers perspective.\n\nIt looks like this would require us to:\n1. put the property and its default value in the appropriate Spring Configuration file\n2. Document it as a comment in the cas.properties replicating the same default value.\nDoes this seem likely to get out of sync?\n\nNo, since the number of properties is small and easily managed.\n\nBTW, I'm +1 on rolling in the Log4j changes to move it out of web.xml if we can separate those changes into its own pull request.\nI'd like us to spend a bit more time thinking about the best way for our deployers to manage the growing list of over-ridable properties.\n\nI feel like we've discussed this one to death.   We have a reasonable\napproach and working code.  +1 for commit.\n\nRelated: where are we documenting the upgrade instructions (i.e. if people have their own web.xml, what they need to do to pull out the log4j config)\n\nAgreed that 3.5 should have proper release notes and upgrade\ninstructions.  I can help write those.\nBill\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/71#issuecomment-5691392\n. Sounds like a clearpass-config bug...perhaps it should be fixed there?\n\nOn Tue, Nov 27, 2012 at 2:19 PM, Misagh Moayyed notifications@github.comwrote:\n\nI just realized an issue:\nThe CAS management webapp changes has removed a number of properties from\nthe cas.properties file of the cas-webapp. Specifically, server-prefix.\nThis breaks clearPass as it references that property key in the\nclearpass-configuration.xml file.\nCould this be fixed in the next pull?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/170#issuecomment-10772407.\n. On Fri, Dec 21, 2012 at 11:25 AM, Scott notifications@github.com wrote:\nIt would be great if there was a high level document describing the API\nchanges. Its hard to see the forest from the trees in a commit/diff like\nthis.\nBig +1 here.  Something like we had for LPPE and LOA would be very helpful.\nIt would also make it easier to compare/contrast to previous explored\nwork. Without a higher level view I feel like I'm annoyingly nitpicking on\nstuff. :-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/183#issuecomment-11618760.\n. +1.  secure by default!\n. Well, we already know that this patch is supported by PhpCAS, Java CAS\nclient, and the older Spring CAS Client.  Isn't the whole purpose of the RC\nto facilitate integration testing by a wider audience?\n\nBill\nOn Tue, Apr 9, 2013 at 10:52 AM, Dmitriy Kopylenko <notifications@github.com\n\nwrote:\nI have not done any clients integration testing. Is there a currently an\nautomated suite of integration tests for all the clients that CAS server\nutilizes? If not, I think it would be a different issue of developing such\na test suite.\nCheers,\nD.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/224#issuecomment-16117251\n.\n. Well, we already know that this patch is supported by PhpCAS, Java CAS\nclient, and the older Spring CAS Client.  Isn't the whole purpose of the RC\nto facilitate integration testing by a wider audience?\n\nBill\nOn Tue, Apr 9, 2013 at 10:52 AM, Dmitriy Kopylenko <notifications@github.com\n\nwrote:\nI have not done any clients integration testing. Is there a currently an\nautomated suite of integration tests for all the clients that CAS server\nutilizes? If not, I think it would be a different issue of developing such\na test suite.\nCheers,\nD.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/224#issuecomment-16117251\n.\n. Fair enough...sure wish some of the client devs would weigh in!  :)\n\nI'll see about spinning up something for mod_auth_cas.\nBest,\nBill\nOn Tue, Apr 9, 2013 at 11:18 AM, Marvin S. Addison <notifications@github.com\n\nwrote:\nI think some testing prior to acceptance is warranted for a change that\ncould break clients. That seems perfectly reasonable. If you want to vouch\nfor the above clients without explicit testing, I would take you at your\nword. Wider audience here means the myriad \"unofficial\" clients, and I\nwould agree the RC well suited to that case. I should note I would feel\nentirely different about this change if it were bound to a new endpoint\nsuch that the impact to existing clients would be optional and explicit. I\nwill be sure to voice that recommendation in CAS protocol feedback thread.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/224#issuecomment-16119109\n.\n. Fair enough...sure wish some of the client devs would weigh in!  :)\n\nI'll see about spinning up something for mod_auth_cas.\nBest,\nBill\nOn Tue, Apr 9, 2013 at 11:18 AM, Marvin S. Addison <notifications@github.com\n\nwrote:\nI think some testing prior to acceptance is warranted for a change that\ncould break clients. That seems perfectly reasonable. If you want to vouch\nfor the above clients without explicit testing, I would take you at your\nword. Wider audience here means the myriad \"unofficial\" clients, and I\nwould agree the RC well suited to that case. I should note I would feel\nentirely different about this change if it were bound to a new endpoint\nsuch that the impact to existing clients would be optional and explicit. I\nwill be sure to voice that recommendation in CAS protocol feedback thread.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/224#issuecomment-16119109\n.\n. +1 for initial pull.  spec still need work, but markdown looks great in github.   \n\nI would remove the html and pdf versions from the commit and just link to github for the official version.   Thoughts?\n. +1\n. +1.  Push this to 3.5.x as well?\n. +1.  Should be applied to 3.5.x as well.\n. In all the CAS deployments Unicon has been involved with over the years, every single one of them uses the Services Registry.  The only deployment I'm even aware of that ran with \"open CAS\" was Yale, and I'm not sure that's even the case anymore since they upgraded to 3.x.   In any case, the code being removed is redundant since an \"open CAS server\" can be easily configured with one Service Definition in the deployerConfigContext.xml.  \nThis change is consistent with \"secure by default\" and simplifies the implementation.\n+1 for the commit.\n. +1\n. This is a minor but important improvement that adds little to no risk to a release that is already quite delayed.  I see little reason not to add it, especially since J\u00e9r\u00f4me and the Security WG have already done the work.\n+1 for the commit to 4.0.\n. +1\n. I think this needs further discussion on what the appropriate behavior should be in this situation.  From an end user perspective it should \"just work\".  Perhaps the login screen should simply disable itself via javascript after that specified timeout and show another login button.\n. Totally agree with Marvin here with regards to \"principle of least surprise\" and need to fix the current behavior.   Would like to explore options to make it \"just work\".\n. On Wed, Nov 6, 2013 at 10:16 AM, Misagh Moayyed notifications@github.comwrote:\n\nOK. It seems that by a rough vote count, most if not all folks on this\nthread prefer to deal with the issue directly, for it to be removed\ncompletely rather than, details aside, displaying some form a message back\nto the user. If the first strategy fails, we can always fall back to a\nerror message and can further decide how and to what degree the user\nbehavior should be accommodated.\n\n+1\n\nIs the above an accurate summary of the discussion so far? Marvin's\nsolution seems fairly promising and valuable to begin with.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/345#issuecomment-27881255\n.\n. \"I sure hope so, or it's a lot of work in vain. The flow would have to be different than what @mmoayyed mentioned. You'll have to collect credentials and store/buffer them somewhere (flow scope?), then submit them in a batch to AuthenticationManger#authenticate(Credential ... credentials).\"\n\nThis won't work for some of the 2FA flows that we've been seeing in practice.  Typically there's an initial authN event via username/password or front-channel that is then used to determine 2fa requirements.  I'm fairly convinced that authN concerns need to be decoupled from the protocol interfaces.  In the short term Misagh's commit would allow deployers some flexibility in behaviors without having to fork CASImpl.\n+1 on the pull.\n. \"if TGT has expired and is to be removed, logout protocol must be\ninitiated. \"  Unless SLO is turned off.  Correct?\nOn Thu, Apr 3, 2014 at 2:16 PM, Misagh Moayyed notifications@github.comwrote:\n\nThis may not be a realistic scenario, but consider that the scenario does\nnot always depend on having a ticket cleaner. There are certain ticket\nregistry types that have their own eviction policy which do not require a\ncleaner by default, and configuration of those is not only tricky, but also\noutside what CAS can do.\nThe objective here from an API design point of view, is: if TGT has\nexpired and is to be removed, logout protocol must be initiated. Regardless\nof circumstances, I tend to see the codebase failing to adhere to that\nprincipal.\n\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/417#issuecomment-39485758\n.\n. Misagh, why would a deployer want a case-insensitive match on the path part\nof service URLs?\n\nOn Mon, May 19, 2014 at 6:39 AM, LELEU J\u00e9r\u00f4me notifications@github.comwrote:\n\nGood question about backward compatibility. I think there might be some\nuse cases where the behaviour would change. But I tend to think that it\nwould be very rare as CAS deployers should never play with the case of\nthe services.\nUse case where it breaks:\n- service1: http://myexample.com/YES, order: 10\n- service2: http://myexample.com/yes, order: 1\nThe incoming url: http://myexample.com/YES would match the service1 in\nthe current CAS version, and the service2 after this pull request has\nbeen applied.\nPersonally, I would take this minor risk...\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/419#issuecomment-43487406\n.\n. I can't remember a deployment Unicon has done over the last 3 years that\nmade use of the current web admin UI. In fact more than a few have removed\nit as a security precaution.  On the other hand the json services registry\nhas proven to be both easy to deal with and extensible.\n\nOn Mon, Jun 9, 2014 at 3:28 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\nYou're right, the management webapp should never limit the design, though,\nat the end, we hope to configure the services through a UI.\nMaybe it becomes too complicated to go with a UI and we should give up and\npropose some XML / JSON configuration file reloading...\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/439#issuecomment-45467445.\n. I think the main point is, if the calling application (i.e. CAS client) can\nbe be authenticated by another means (PKI, shared secret, etc) than the\nPGTIOU (and https call back dance) should not be necessary.\n\nOn Wed, Jan 21, 2015 at 11:11 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n@jtgasper3 https://github.com/jtgasper3 : from first insight, I really\nlike your idea for the PGT.\nA PGT is a more critical information than a simple ST, that's why it\nshould be more complicated to get them.\nYou somehow need two proofs: the PGTIOU in your ST response and the PGTID\nsent directly to the application.\nI tend to think with encrypted PGT in the payload: we would somehow have\ntwo proofs: the payload and the encryption.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/843#issuecomment-70865600.\n. That's fine, but the issue never was confidentiality.  In CAS you either\ntrust SSL or you don't.  The issue with password (and attribute release) is\nall about authenticating and authorizing the calling application (i.e. the\nCAS client).  PKI or symmetric key to encrypt the payload is a proxy for\nthat.\n\nOn Fri, Feb 6, 2015 at 12:25 PM, Misagh Moayyed notifications@github.com\nwrote:\n\nSo, gathering from the discussion here that we are to certainly add a\nper-service key config into the registry. I am going to take this one step\nfurther and add this config into the attribute release policy. We had\ntalked about the ability to encrypt the CAS response as part of service\nauthentication, and this is an opportunity to apply encryption to the\nattributes block as a whole. We are certain that the password should be\nencrypted as an attribute on a per-service level and it would be relatively\neasy to extend that to the entire attributes block, to make sure that\ncertain attributes that adopters may consider sensitive can also be\nsecurely passed along, as an option. Does that make sense to everyone here?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/843#issuecomment-73277361.\n. CAS over a non-secure channel is simply not CAS and one could argue that it\nshould not be supported by the product. That said if a there's paying\ncustomer (after trying to convince them otherwise) that wants added\nprotection than by all means, but I would still be reluctant to take on the\nadded complexity.  You either trust SSL or you don't.\n\nOn Fri, Feb 6, 2015 at 2:27 PM, Misagh Moayyed notifications@github.com\nwrote:\n\nI have in the past dealt with some deployments where the adopter was super\nand hyper sensitive to any passing of attributes to apps. This is an extra\nlayer of security on top of the existing back-channel call as a possible\noptional feature. We also need to consider that the call may not always\nexecute on TLS and we could also make the argument that one may not always\ntrust one's network :) in somewhat dispersed deployments.\nI will admit though that this may be on the borderline extreme, but effort\nwise, I cant say it adds much to the picture.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/843#issuecomment-73297354.\n. Readability trumps premature optimization in my book...  :)\n\n\"premature optimization is the root of all evil.\"  -http://c2.com/cgi/wiki?PrematureOptimization\n. \"Ticket-granting ticket...\" or \"TicketGrantingTicket...\"?  The former is consistent with the CAS protocol doc. \n. \"...Service [{}] is not...\"\n. Carry the same message from the warn statement?\n. The \"NOTE: username is case-sensitive\" comment is likely to confuse deployers more than help in that they might think it applies to all authentication handlers.   Let's just make the default username lower case, and let it be.\n. We did talk about.  Any thoughts if this will cause problems with any of the clients?\n. The 3.0 protocol is meant to supersede 2.0 in way that 2.0 didn't for 1.0.  That is, 3.0 is meant to replace the current response at the current 2.0 endpoints (since we're just documenting common practice) rather than inventing a new validation response.  This seems to argue in favor of removing the older 2.0 views.\nThat said, I see no harm in leaving them where they are, and they do provide potential benefit to deployers, as Dima suggests, of being able to fall back to 2.0 if that became necessary for some reason.\n+1 for commit.\n. +1\n. Also recommend splitting these two error conditions into separate warn messages as the one warn message is misleading to the deployer in the case where the Services is defined (i.e. found) in the registry but disabled.\n. ",
    "apetro": "These look like fine improvements.  I have customized FancyRegisteredServiceImpls in some CAS customizations I did for a client, and while it didn't occur to me to extend RegisteredServiceImpl, if I had tried that I would have benefited from these changes.\n. Didn't make CAS 3.5.  Revisit after.\n. Screen shots here: http://www.unicon.net/blog/apetro/automatically_register_services_management_service\n. Unclean.  Issues with message bundles.  Closing unmerged.\n. This pull request is unclean.  @dima767 has produced a clean version at https://github.com/Jasig/cas/pull/57  Closing this in favor of Dima's superior formulation of this pull request.\n. Discussed with @dima767 .  He's going to work on a unit test for this and proffer via additional pull request.\nI don't think there's duplicate logging here so much as code that is appropriately locally logging a warning of an unexpected circumstance encountered (attempt to use a PGT by a service not permitted to proxy), and also raising an exception representing this exceptional condition.  That exception and stack trace is also logged by higher order code handling the exceptional condition, that is, happens to be logged in another context, but still, this code should log what it knows in its context.\n. (The below comment is that I posted to the relevant cas-dev@ thread.)\nI'm ambivalent about the value of this change to introduce an additional default.properties to be parsed prior to cas.properties, which would supersede default.properties' values.  It feels like it's adding complexity without solving a problem worth solving.\nI'm having trouble empathizing with the problem that this seems to be trying to solve.  Updating the cas.properties file on a CAS version upgrade seems like a totally reasonable burden on the upgrader.  If CAS started configuring TGT timeouts in cas.properties, I wouldn't regard it as too much to ask upgrading CAS adopters to notice the new properties in the shipping-in-CAS cas.properties and either add these to their localized cas.properties or delete their local cas.properties and re-fork from the new default.  I don't see having to update a local cas.properties that worked with version 3.4 of CAS to provide the properties required by 3.5 of CAS as a problem at all, and I don't value sparing adopters that particular pain on upgrade.\nThis is different from making new deployers set these values when they first deploy CAS, since new deployers when first deploying CAS don't have an existing cas.properties file that would gum up getting the properties and values in the cas.properties shipping in CAS.  I would have concern about CAS shipping with properties files that don't work.  That's different from CAS shipping with a cas.properties that does work but worrying that some adopters won't use that working cas.properties.  \nIn my experience, updating the local cas.properties file on an upgrade to include added properties just hasn't felt anything like a real problem, just a reasonable upgrade practices checklist item.  On balance, I'd probably rather have the fail-init-on-unfulfilled-placeholder behavior than the missing-property-is-masked-by-default.properties behavior.\nAdding default.properties feels like it's adding some complexity.\nCurrently: \nQ: \"Hey, there's this placeholder ${cas.securityContext.casProcessingFilterEntryPoint.loginUrl} in cas-servlet.xml, where's the value for that set?\"\nA: In the properties file set in propertyFileConfigurer.xml, which by default is /WEB-INF/cas.properties .\nAfter this change\nQ: \"Hey, there's this placeholder ${cas.securityContext.casProcessingFilterEntryPoint.loginUrl} in cas-servlet.xml, where's the value for that set?\"\nA: Well, it depends.  in propertyFileConfigurer.xml, there's a list of properties files, which by default is /WEB-INF/default.properties and /WEB-INF/cas.properties. The last-parsed value wins.  So, if this property is in cas.properties, that's where it's set.  But if it's not in cas.properties, then it's the value in default.properties.\nIt's not the end of the world, but the latter felt harder to explain, and the former felt simpler.\nCurrently, if I fat finger a property name in a local cas.properties, I notice.  Under the proposed change, the fat fingering is masked by a default value in default.properties.\nWill CAS upgrading deployers be more grateful that we spared them having to update their cas.properties files on upgrades, or will they be more grateful for missing cas.properties properties continuing to fail fast?  It's not clear to me that allowing subsets rather than complete sets of properties in cas.properties files is worth losing the fail-fast-on-missing-properties feature.  Would deployers rather have just one properties file to worry about, or would they rather have two and understand what it means for properties to be in which and not the other?  It's not clear to me that the complexity is worth it.\nI think I'm -0 for this change, but I don't think it's very important and I'll happily help upgrading adopters to understand the cascading-properties-files approach if CAS implements it.\n. Pushed from CAS 3.5.  Revisit after.\n. Pushed from CAS 3.5.  Revisit after.\n. As @wgthom correctly noted, I'm +1 on this, for the reasons @serac handily summarized.  This is an incremental improvement.  Externalized log4j is a handy, a recommended practice.  Inline property defaults is one reasonable way to handle adding properties and giving them sensible defaults.  This pull request is good and represents progress.  I believe CAS 3.5 would be better with it than without it.  So I'm +1 for merge.\n. +1. Looks good to me.  Improves usability with fail-faster behavior.\n. @edomazlicky nice fix.  I like it.  +1 for merge.\nIn principle the Tomcat Valve etc. solutions that make request.getRemoteAddress() return a meaningful IP address do seem like a cleaner solution to this problem, and I'd encourage everyone to first reach for solutions higher up the stack like that, but this pull request enhances CAS to accomodate this mapping at the CAS layer if it's not being handled up stream.  Nicely done.\n. @leleuj the uPortal-specific classes for making use of ClearPass were added to uPortal for uPortal 4.1.0 per this pull request:  https://github.com/Jasig/uPortal/pull/96  That pull makes uPortal dependent on ClearPass as of uPortal 4.1.0, rather than the dependency going the other direction.\n. I'm -1 for merge of this pull request as-is.  Implementation is goofy, the commit conflates formatting change with substantive change, etc., as @battags notes.\nI'm +1 for addressing checking TGT validity at the beginning of the login flow.\nGood concept.  Current implementation too dodgy.  Needs another try.\nI imagine we can see our way clear to merging in a clean implementation of this post-CAS4-RC10-but-before-GA if efforts work out that way.\n. I'm missing something.  What's with the typing by hand?  Is the idea that CAS-using applications are responsible to redirect back to /cas/logout , conveying state, so that CAS can continue the logout process?\n...I have made a global real test : authentication on three services (1 back + 2 front) and call to the logout.\n1) Call the logout url : /cas/logout -> the back logout is performed and a redirection to the first front app happens : /front1?SAMLRequest=xxx&RelayState=yyy\n2) Typing by hand the logout url to resume the SLO : /cas/logout?_eventId=next&RelayState=yyy -> I'm redirected to the second front app : /front2?SAMLRequest=zzz&RelayState=ttt\n...\n. +0.\nI'm fine with this wording change.  I'll even agree it's an improvement over the current wording.\nI'm concerned that advice to log out and exit the browser is no longer sufficient.  Exiting a modern browser is not typically sufficient to terminate typical secure session-scoped cookies.  The standard advice needs to advance to users securing their computing environment (as in, logging out on the desktop or I suppose locking the screen on a mobile device).\n. > Not really sure what advice to offer in the case where the user is using a shared computer such as at a library.\nIncognito / private browsing sessions as implemented at the web browser level, at the least?  Guest OS sessions if supported?  I'm a big fan of dynamically allocated throwaway guest accounts, though I agree many public computing contexts haven't yet grown to offer that feature.\nAnyway, I really don't mean to block a perfectly fine text improvement.  This change is fine with me and I think we have consensus to merge it, bearing in mind that ideally we'll soon clobber this change with something more aggressive. \nInvoking lazy consensus.  If no one objects or gets to it before me, I'll press the green button tonight.\n. @mmoayyed Would it be wise to incubate this enhancement in Unicon/cas-addons, demonstrate it adding value in a multi-node deployment or two, perhaps see it get opt-in adoption, and from that experience then proffer it (or an experience-tempered version of it) for inclusion in a future Jasig/cas release?\n. As a compromise, how about a default solution that generates a hash of the hostname as the default automatic suffix for TGTs?  Include instructions for typical adopters to compute the hash -- say, a quick main() method to do it on the command line.  Doesn't leak hostname, does differentiate which TGT is coming from which server node, does allow the deployer to figure out exactly which node that was if they care enough.\nHowever, I'm not thrilled about inventing such compromises here.  I think this is the kind of idea better explored through cas-addons and baked before incorporated into Jasig/cas.\n. @mmoayyed , thanks, I do think this is the right immediate-term resolution for this issue.\nTo nuance my suggestion: I'm not advocating that cas-addons be a place where great ideas go to die instead of improving Jasig/cas directly.  I'm advocating cas-addons be a place where ideas go to bake, to work out the design and implementation details through experience.  \nThere's probably an elegant expedient to be had here that can emerge to wide satisfaction.  Maybe a solution that parses out the last four characters of the first element of the hostname, which in typical environments will include -- tada! -- a node number, as in cas-dev-01.school.edu  --> \"v-01\".  Eminently useful for deployer debugging while leaking little of consequence, and adding little length to the ticket identifiers.\nI figure shaking out whether that's a good idea, or the idea that someone has next week is better, or maybe the whole thing is more trouble than it's worth -- shaking all that out will be good to do in cas-addons, and then return to this idea in Jasig/cas with a baked answer with some experience with it adding value in CAS deployments.  \nI support the passion for finding ways to make CAS more troubleshoot-able and to make HA scenarios easier to demonstrate.  May be worth marking a calendar to check in on where this got in a few months.\n. :+1: \n. Is this to say that but for this change, /cas/proxyValidate ticket validation response does not include the chain of applications through which authentication has delegated?\n. :+1: \n. I'd like to see resolution of the seems-to-me-to-be-too-clever use of static Exception instances and the exposure of a getCode() exception code accessor without public definition of the known codes in the API, before this pull request might be merged.\n. -1 for merge: I request separate commits for unrelated changes.\nAgree very much that build needs fixed and laud the change to fix.  By all means.  Except by means of commits that combine unrelated changes. :)\nI'd be +1 for each of two separate pull requests, one fixing the build via ehcache version fix and one fixing the language file.\n. open@ thread re.. This log message might be even more helpful if it also logged the registeredService.  That way if the service's not being permitted to proxy is a surprise, it's easier to determine what registration matched and caused the disallow.\n. Seems that UnauthorizedProxyingException could be more valuable if it encapsulated more useful error state about what service wasn't authorized.  Should it have an additional constructor that takes the Service encountered at runtime, the RegisteredService, and generates a more useful message, such that if something later logs the exception and stack trace, they get useful error information?\n. I'm drawing a distinction between the service.getId(), which is the service URL parameter encountered at runtime, vs the registeredService, which has a name, a service identifier that's potentially a pattern that matched the service encountered at runtime, and a unique identifier that allows finding it in the registry.  I'm suggesting that both the service and the registeredService should be included in the log message that a service (encountered at runtime) was not allowed to proxy (because of its registration), so that when reviewing this failure in the logs, it's even more readily apparent which registration matched and gave rise to the failure.\n. Interesting that AuthenticationManager responsible for policy as to whether satisfied.  How does this relate to policy depending on service to which user is seeking to authenticate?  Matching service routes to a relevant AuthenticationManager?  AuthenticationManager relies on a service registry?\n. Ok. I feel like we need a handful of examples of policies adopters would want to have, at least hypothetically, so that we can feel whether the API is going to meet those needs.\nWorking the \"logging in to some services requires authenticating in multiple simultaneous ways, while logging in to other services does not\" example: What's the design intention on how such a policy would be implemented?  isSatisfied() implementation that considers the service?  It doesn't look to me like the parameters to isSatisfied() are sufficient -- Authentication e.g. doesn't convey the target service.  \nSo: richer inputs to isSatisfied() ?  Move policy evaluation elsewhere rather than it being the responsibility of AuthenticationManager?  Something else selects a desired AuthenticationManager depending on the factors that AuthenticationManager can't itself consider? \n. How about \"may be authenticated\".  An implementation that ignores credentials that fail to authenticate when other sufficient credentials succeed is plausible?\n. This method seems redundant with getAuthenticationSatisfiedByPolicy(ticket, context);\nThat is, the getAuthenticationSatisfiedByPolicy(ticket, context); method already has the behavior of throwing when authentication policy is not satisfied, so just call that when wanting to generate an exception on failure to fulfill policy?\n. Should the ordering properties of the return List be specified?\n. Should this be equal only if the other is an instance of BasicCredentialMetaData?  Or are CredentialMetaDatas always equal if they have the same id string?  If CredentialMetaData does resolve down to the String properties of their ids, then can we represent credential metadata simply as Strings directly representing the id? :)\nI think I'm suggesting that CredentialMetaData should be removed in favor of just representing with straight up String, but I may not be understanding this well enough yet.\n. How about naming this AcceptAnyAuthenticationPolicyFactory?\n. Shouldn't this implementation omit the found count and simply return true the first time a successful authentication name matches the required handler name?\nHow about implementing this method as something more like:\nreturn authentication.getSucceses().keySet().contains(this.requiredHandlerName);\n. Worth explicitly stating that the empty set means no requirements on which handlers authenticated credentials, rather than there being no handlers that would be acceptable?\n. Why not throw a newly instantiated exception?  Doesn't throwing a static field goof with the resulting stack trace?\n. @wgthom that's a great catch, really appreciate that.  It's going to be easier to support this, and to help adopters make the transition to fails-closed, when CAS fails closed as clearly as it can. \n. Since code is exposed as a public property, the values for the code should be public fields so as to document them as part of the API exposed to a consumer of this exception?\n. Java fills in Exception stack traces when the exception is instantiated (new) rather than when the exception is thrown.\ncf. http://stackoverflow.com/questions/1696765/why-can-i-fake-the-stack-trace-of-an-exception-in-java\nSo, though this shared static exception instance is thrown here, it will have the stack trace from the (static) line where is is instantiated, and this line where the unauthorized service condition occurred will not be included in the stack trace potentially logged.\nI still think it would be better to use exceptions more traditionally (as in, new them where thrown, with one Exception instance per instance of encountering the exceptional condition rather than one shared static instance of the exception).\nOr, perhaps what's wanted here is to refactor away from using an Exception to represent what is, ultimately, not that exceptional of a condition?\n. ",
    "jdlich": "Are there any other issues to address?\n. Are there any other issues to address?\n. Bump\u2026\n. Bump\u2026\n. Frankly, as much as I love Sass, I think it's overkill and unnecessary for CAS. The real benefit of CSS pre-compilers like Sass is that they provide the standard set of abstraction tools to CSS itself and allow for truly semantic markup (instead of relying on classes which is the only means of abstraction with regular CSS).\nHowever, CAS is just a single page.\nAnd I would like to see us take advantage of that simplicity by not having any CSS libraries or frameworks. I think the goal should be to have a nice clean slate with as few files (and headaches) as possible.\n. Frankly, as much as I love Sass, I think it's overkill and unnecessary for CAS. The real benefit of CSS pre-compilers like Sass is that they provide the standard set of abstraction tools to CSS itself and allow for truly semantic markup (instead of relying on classes which is the only means of abstraction with regular CSS).\nHowever, CAS is just a single page.\nAnd I would like to see us take advantage of that simplicity by not having any CSS libraries or frameworks. I think the goal should be to have a nice clean slate with as few files (and headaches) as possible.\n. I really do love Sass, though!\n. I really do love Sass, though!\n. Looks good to me.\n. Looks good to me.\n. @mmoayyed I'm not sure how to get (or test for accuracy) all the various language translations. I don't see how that's even relevant to this pull request, though, anyway. Might want to open up another issue for that.\n. @mmoayyed I'm not sure how to get (or test for accuracy) all the various language translations. I don't see how that's even relevant to this pull request, though, anyway. Might want to open up another issue for that.\n. @leleuj The message bundle stuff is increasingly getting out of the scope of this pull request.\nI created a JIRA here: https://issues.jasig.org/browse/CAS-1225\nDoes the branch name have to contain the JIRA? And does that happen on my end or can it happen during the merge?\n. @leleuj The message bundle stuff is increasingly getting out of the scope of this pull request.\nI created a JIRA here: https://issues.jasig.org/browse/CAS-1225\nDoes the branch name have to contain the JIRA? And does that happen on my end or can it happen during the merge?\n. bump\n. bump\n. I think that should do it for now.\n. I think that should do it for now.\n. ",
    "atilling": "planning to do both but I have been unable to recover username and password at the Jira - it appears I'm not getting email from the Jira server.\n-Andrew\nOn Nov 12, 2011, at 10:57 PM, Scott wrote:\n\nTwo questions:\n1. Is there a JIRA issue for this?\n2. Can you start a discussion on cas-dev for this?\nThanks!\nScott\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/11#issuecomment-2720719\n. Yes, Eric was able to recover my login information for me.\n\nI didn't create a new JIRA issue for the proposed change as there was one already out there.\nhttps://issues.jasig.org/browse/CAS-816\n-Andrew\nOn Nov 16, 2011, at 8:12 AM, Scott wrote:\n\nWere you able to recover the JIRA name yet?\nOn Sun, Nov 13, 2011 at 9:30 AM, Andrew Tillinghast <\nreply@reply.github.com\n\nwrote:\nplanning to do both but I have been unable to recover username and\npassword at the Jira - it appears I'm not getting email from the Jira\nserver.\n-Andrew\nOn Nov 12, 2011, at 10:57 PM, Scott wrote:\n\nTwo questions:\n1. Is there a JIRA issue for this?\n2. Can you start a discussion on cas-dev for this?\nThanks!\nScott\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/11#issuecomment-2720719\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/11#issuecomment-2722512\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/11#issuecomment-2759207\n. \n",
    "dima767": "Closing this pull request in favor of instead pursuing pull request #18, the one with the one on the master branch - the \"clean\" one with one commit.\nhttps://github.com/Jasig/cas/pull/18\n. Safe to close this\n. Not easily testable. Requires mocking. Will introduce the Mockito mocks later on. The code does work, though, so no rush here.\n. Closing for now and putting this on hold until we figure out what we need to do, as I have another pull request coming up\n. +1 for the change\n. I'd suggest to consider upgrading to Spring 3.1 and take a closer look at the new PropertySource abstraction facility: http://blog.springsource.com/2011/02/15/spring-3-1-m1-unified-property-management/\n. Re-organizing my local clone's commit history to make it much cleaner. Will reopen 'clean' pull requests\n. Will re-open a fresh one\n. Will reopen a fresh one\n. This is a MERGE, to bring lppe-feature up to date with the current master. That's why the commit history from master got in there, because lppe-feature branch fell behind the master for quite some time. Hope this explains. Also, notice that the request is to pull it not into the master, but into feature-lppe, in preparation for merging it to the master, eventually. I think Bill should bring the 'feature-lppe' branch of the blessed CAS repo and you folks take it from there.\nHope this explains.\nCheers,\nD.\n. No noise... Just a collaboration :-)\n. All manual functional tests PASS as prescribed! Good to go.\n. I sure can ;-)\n. OK, I've reverted the public constructor arg back to millis.\nCheers,\nD.\n. An additional constructor... I'll look into it.\nD.\n. Here's the constructor with TimeUnit. Also switched to new Spring 3.1 'c' constructor namespace for args which adds a lot more clarity and readability to the config.\nD.\n. Clearer and more intuitive config options perhaps...?\nD.\n. Anyway, I did my part and of course it's up to the core committers to reject this pull req. No hard feelings at all :-)\nCheers,\nD.\n. Old. No one paid attention to it. Ceases to exist at this time.\n. Perhaps could live here: https://github.com/Unicon/cas-addons :-)\nCheers,\nD.\n. That was my thought - I I had to re-invent the wheel so to speak doing multiple customizations for different clients. I want cas-addons to be as open as possible, with common helpful and re-usable CAS components not currently available in CAS core with the more pragmatic approach of \"less friction\" of getting stuff in and releasing it as an open source lib. available in Maven central.\nAt the same time it could serve as a 'laboratory' for good ideas that some day might end up in the CAS core.\nCheers,\nD.\n. Will do the changes and open another one.\n. https://issues.jasig.org/browse/CAS-1147\n. xref is fine. I just wanted to do a \"clean\" commit without any \"noise\"\n. Roger that. Sometimes that \"pollutes\" unnecessarily the commit history, but I hear you.\n. This is the use case: https://github.com/Unicon/cas-addons/wiki/Active-SSO-Sessions-Report\nCheers,\nD.\n. I have not done any clients integration testing. Is there a currently an automated suite of integration tests for all the clients that CAS server utilizes? If not, I think it would be a different issue of developing such a test suite.\nCheers,\nD.\n. I have not done any clients integration testing. Is there a currently an automated suite of integration tests for all the clients that CAS server utilizes? If not, I think it would be a different issue of developing such a test suite.\nCheers,\nD.\n. As far as I understand this pull should just bring the existing well-known customization to the protocol response. All the other new features of the CAS 3 protocol would come in separately.\n. Understand. It is just that this particular pull request just focuses on principal attributes and nothing else. If it could be merged, then another commit could be made to add these additional pieces of info. I'd hesitate to modify this particular pull request.\n. BTW, can someone point me to the latest spec doc with a full example of the expected new response?\n. Right, but i don't see a full example of the expected response XML with ALL the data in it (I know, the XSD is there, but would be terrific to have the full example)\nCheers,\nD.\n\u2014\nSent from Mailbox for iPhone\nOn Mon, Apr 29, 2013 at 2:12 AM, Robert Oschwald notifications@github.com\nwrote:\n\nFor now, you can use  https://docs.google.com/document/d/1l0o60mLfXF4bkQdwRSH4i6P-IJQki3-v-zyoOAjxDd4/edit which currently is migrated to github as markdown by me. \nAm 28.04.2013 um 22:55 schrieb Dmitriy Kopylenko notifications@github.com:\n\nBTW, can someone point me to the latest spec doc with a full example of the expected new response?\n\u2014\nReply to this email directly or view it on GitHub.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/224#issuecomment-17151401\n. Nothing. Just update to the latest and greatest.\u00a0\n\u2014\nSent from Mailbox for iPhone\n\n\nOn Wed, Apr 10, 2013 at 3:32 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n+1\nI guess there is no special goal here, just to use the latest dependencies : does something worth being noticed ?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/225#issuecomment-16159491\n. Not that I'm aware of\n\u2014\nSent from Mailbox for iPhone\n\nOn Thu, Apr 11, 2013 at 8:11 AM, Misagh Moayyed notifications@github.com\nwrote:\n\n+1\nDima, should there be any changes to the NOTICE files?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/225#issuecomment-16230645\n. Yes, test scope\n\u2014\nSent from Mailbox for iPhone\n\nOn Thu, Apr 11, 2013 at 8:12 AM, Misagh Moayyed notifications@github.com\nwrote:\n\n+1, with a minor comment around the dependency decl.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/227#issuecomment-16230673\n. If I had a vote power, I'd +1 the removal of Restlet in favor of plain Spring @ MVC programming model which now has an excellent REST support :-)\n\nCheers,\nD.\n. Why not 4.0?\n. @battags so that prevents any more changes? :-) Not trying to argue here, just a friendly discussion :-)\nD.\n. for some projects ;-)\n. You don't have to :-) I did my best, but you could find an independent Russian-speaking IT person to verify the correctness of the translation. To convert from unicode to the native: http://native2ascii.net/#\n. Weird. All X509 tests pass locally. Could it be that the pushed test cert got 'corrupted' some how?\nAny other suggestions? This is the simplest possible implementation and unit test with the generated cert that runs fine locally (you could try it for your self) - pull the branch and run all the tests in x509 module.\n``` bash\nT E S T S\nRunning org.jasig.cas.adaptors.x509.authentication.handler.support.CRLDistributionPointRevocationCheckerTests\nlog4j:WARN No appenders could be found for logger (net.sf.ehcache.Cache).\nlog4j:WARN Please initialize the log4j system properly.\nlog4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.\nTests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.875 sec\nRunning org.jasig.cas.adaptors.x509.authentication.handler.support.ResourceCRLRevocationCheckerTests\nTests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.036 sec\nRunning org.jasig.cas.adaptors.x509.authentication.handler.support.ThresholdExpiredCRLRevocationPolicyTests\nTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec\nRunning org.jasig.cas.adaptors.x509.authentication.handler.support.WiringTests\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.46 sec\nRunning org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandlerTests\nTests run: 24, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.059 sec\nRunning org.jasig.cas.adaptors.x509.authentication.principal.X509SerialNumberAndIssuerDNPrincipalResolverTests\nTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec\nRunning org.jasig.cas.adaptors.x509.authentication.principal.X509SerialNumberPrincipalResolverTests\nTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec\nRunning org.jasig.cas.adaptors.x509.authentication.principal.X509SubjectAlternativeNameUPNPrincipalResolverTests\nTests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec\nRunning org.jasig.cas.adaptors.x509.authentication.principal.X509SubjectDNPrincipalResolverTests\nTests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec\nRunning org.jasig.cas.adaptors.x509.authentication.principal.X509SubjectPrincipalResolverTests\nTests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.036 sec\nRunning org.jasig.cas.adaptors.x509.web.flow.X509CertificateCredentialsNonInteractiveActionTests\nTests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.245 sec\nResults :\nTests run: 56, Failures: 0, Errors: 0, Skipped: 0\n```\n. OK, I might have spotted a problem with the cert. Let me make it into a proper DER-encoded format.\nStand by...\n. The code works and is based on this code which uses bouncycastly lib: \nhttp://svn.eparapher.com/trunk/org.eparapher.core/src/main/java/org/eparapher/core/crypto/cert/CertificateInfo.java\nAlso, for the question about the contents of a List containing in the Collection returned from X509Certificate#getSubjectAlternativeNames - here's the javadocs: http://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html#getSubjectAlternativeNames()\n. Feel free to refactor the javadocs\n. OK, the final batch of refactoring based on the feedback. Now feel free to polish further to get it to your preferred perfection ;-) (branch CAS-1468)\nCheers,\nD.\n. Where in java docs? It's just a regular resolver and would be wired in just like any other x509 resolvers. Nothing different. But if it's that important, I could update the Javadoc.\u2014\nSent from Mailbox\nOn Wed, Jul 2, 2014 at 2:43 AM, Misagh Moayyed notifications@github.com\nwrote:\n\n@dima767  one last thing before we merge this one in: could you please provide a sample xml configuration of how one would configure this resolver in CAS?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/443#issuecomment-47742267\n. There you go, sir:\n\n``` xml\n\n\n \n                ...\n                \n\n\n...\n\n\n...\n```\n. Don't know. Misagh, can you help in this department?\u2014\nSent from Mailbox\nOn Tue, Jul 8, 2014 at 10:26 PM, Scott notifications@github.com wrote:\n\nhow do we get your configuration notes into the documentation that is produced?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/451#issuecomment-48423025\n. No opinion here. You guys tell me :-)\u2014\nSent from Mailbox\n\nOn Wed, Jul 9, 2014 at 1:44 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nLooks good. My question is, should we classify the module as an extension? or should we go with something like cas-server-support-rest, etc?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/451#issuecomment-48432201\n. OK, will close this one and will open up a fresh PR with all the changes.\n. Neh... Java 7 is \"too new\" to \"support\"... \n\nSorry couldn't help... And pardon me for the sarcasm ;-)\n. Neh... Java 7 is \"too new\" to \"support\"... \nSorry couldn't help... And pardon me for the sarcasm ;-)\n. Yep, 3. But what is the definition of \"mature enough\", really? Java 8 is main stream with some very good language features e.g. lambdas, streams API, etc., but unfortunately, the way our industry moves, there is very little hope to use it in any \"enterprise\" projects any time soon.\nPlease note, that this is a somewhat general observation.\n. Yep, 3. But what is the definition of \"mature enough\", really? Java 8 is main stream with some very good language features e.g. lambdas, streams API, etc., but unfortunately, the way our industry moves, there is very little hope to use it in any \"enterprise\" projects any time soon.\nPlease note, that this is a somewhat general observation.\n. The mechanism of auto discovering (and loading) Spring context files from jars in the classpath IS generic and I'd personally use it in ALL modules where module is optional and contributes beans to the overall parent Spring app ctx at runtime. :-)\nCheers,\nD.\n. Yes, it does. Not sure what the issue is here, quite frankly, as I did not dive into it.\n. I suspect that it is a wildcard resource resolution strategy i.e. if the exact resource is specified e.g. classpath:/META-INF/spring/views.xml and that resources is unavailable - the exception is thrown. If on the other hand the wildcard is specified e.g. classpath:/META-INF/spring/*.xml the resources are dynamically picked up if available and not bothered with if not available.\n. Don't see a use for that as CAS core is just loading this one explicit for REST. If there are any others like this in the future (by CAS itself), just explicitly list them, making an intent very clear. And of course local overlays could list their own as they wish, turn them on, off, etc. \nI am personally favoring this explicit style. \n. How would this break SAML module? One use case is that if some extention uses this style of auto configuration and wants to turn that off explicitly to do the manual context configuration style. How would one do that with the wildcard definition?\n. Sure why not ;-)\n. How come I don't get those check style errors when I build locally?\n. Interesting... I was using install task to build and install the snapshot into a local cache to integration test with the local overlay. Interesting fact is that apparently install task DOES disregard the checkstyle noise - which made me happy for a moment there ;-)\n. OK, I will also put the ./gradlew build -DskipJavadocs=true -DskipAspectJ=true into a convenience shell script, something like dev-build.sh and include in this upcoming changeset.\n. All good here. Working through the checkstyle noise... BTW, within IDEA, in the Gradle tab, one could execute the checkstyleMain task for any particular module to get an instant feedback and not wait for the entire build to run!\n. And so, 4.3 is going to be 8+ moving forward i.e. Java 8 language features like lambdas, streams API, etc. could be introduced there? \n. I'd say it'll be impractical to go over CAS code base (big one, I must add) and convert every single loop construct to lambdas, stream API, functional interfaces, etc. etc. I'd say we take what has already been done, and then gradually refactor and start using Java 8 features as we work on other features and have to touch and tightly focus on the portions of the code base. That's my humble opinion on this.\n. I'll see what I could do. The plan is to push to java8 branch of this canonical remote, so we all have pull/push access to it (similar to Mfa branch)\n. @tduehr I think the idea is to stop right here, create a Java8 branch on the Jasig remote, resolve all the conflicts and push the existing work there, so all the committers have pull/push access to it and we could go over, run tests, etc., before merging into master.\nFrom then on we'll take an \"incremental\" approach of converting to Java 8 language constructs as we work on the code base and encounter language constructs or API that could be converted to Java 8.\n@mmoayyed @leleuj @frett - does that sound reasonable?\n. Again, doing a complete overhaul of the code base is too big of a chunk of work. I'd rather do it in the smaller, more manageable chunks. While converting imperative loops to functional style, Stream-based APIs is a great idea, it is simply not practical to go over every single piece in the code base and do it at once.\n. Sure. The idea is to incrementally convert them as we work on other issues, etc.\n. OK, I thought we were going to stop committing now to this PR and will integrate and push what we have to java8 branch \n. That's OK. I pulled your latest commit locally. Going to work with that.\n. OK, I'm debugging this Oauth test failure in Java8 branch. Deep down in the JwtAuthenticator it throws an exception as the exp filed in the JWT token is empty, whereas in the master branch it's a valid time instant. I think it has something todo with the ZonedDateTime that's been changed in java8 branch: \njava\n... \nprofile.addAttribute(JwtConstants.EXPIRATION_TIME, ZonedDateTime.now().plusSeconds(5));\n...\nSigh...\n. So, deep down in the JWTClaimsSet::toJSONObject of the Nimbus dependency library that Oauth code uses underneath:\n``` java\npublic JSONObject toJSONObject() {\n    JSONObject o = new JSONObject();\n\n    for (Map.Entry<String,Object> claim: claims.entrySet()) {\n\n        if (claim.getValue() instanceof Date) {\n\n            // Transform dates to Unix timestamps\n            Date dateValue = (Date) claim.getValue();\n            o.put(claim.getKey(), DateUtils.toSecondsSinceEpoch(dateValue));\n\n...\n```\nSo the values must be of type java.util.Date and the ZonedDateTime used in the test won't fly... \n. I've settled with this: Date.from(ZonedDateTime.now().plusSeconds(5).toInstant())\n. OK, @mmoayyed @leleuj @frett - I've fixed the tests and the most recent code from this PR, merged with the HEAD of master is now pushed to this branch: https://github.com/Jasig/cas/tree/java8 All tests pass for me locally. So, pull it down, run locally, play with it and then we could merge to master, finally. I am going to close this PR.\n. I'm having a hell of a time merging current master HEAD into java8 branch. I think we'd better stop this Java8 conversion moving part for now. I propose once we successfully integrate current master into java8 branch - we step back, take a deep breath and thoroughly test this branch before merging it back to master. And I'd also suggest avoiding any significant activities on the master, otherwise we are going to be chasing our own tail here.\n. Looks fine to me, but it would be great to have some unit tests to prove the correctness of the low level synchronization primitives used here, etc.\n. Yeah, the SWF scope was just an example. But in any case, this \"authn tx\" object is really a per-user, stateful \"data object\" which should carry a state in the API (authn API that is) via method param passing. Ideally I would personally design such object to be an immutable, state-transitioning object where each new authentication added to it would result in a new instance returned - ala java's String, etc. And I would not answer any \"performance concerns\" for such design, as we live in the 21st century with tremendous computing power available at our disposal, plus we are not talking about \"big data\" processing system here ;-)\n. Well, the TGT is an web SSO concern, and SSO token produced when an authentication transaction completes/commits successfully i.e. when all the authentication attempts are collected and the final authentication outcome is computed. I would keep those concerns subsystems separate e.g. SSO and authentication subsystem - the main point of this re-design work. \nAnd so it comes down to the implementation detail - where to accurately store this 'in-flight' authentication transaction AuthenticationContextBuilder object (may be it would really make sense to rename it to the AuthenticationTransaction to reflect its true nature?) until it completes and then other subsystems (SSO for example) would make use of the finally produced, definitive Authentication to do its work e.g. create SSO token (TGT) , etc.\n. Perhaps a ThreadLocal is where it would belong, etc. We could take inspiration from Spring's TX subsytem implementation, for example its TransactionSynchronizationManager impl, etc.\n. And may be we would need to introduce an AuthenticationAttempt object to collect in the tx, instead of overloading the Authentication itself to differentiate those concepts - i.e. Authentication in CAS represents a final outcome of any authentication transaction. I know that Spring Security overloads the use of its Auhentication objects, and I personally don't like it ;-)\n. And in conclusion - the authentication transaction should really be bound to user session in higher layers in whatever form. If there is a hesitation to store it in default HttpSession implementation, may be pluggable Spring Session project would be of benefit here, etc.\nhttp://projects.spring.io/spring-session/\n. All sounds good to me.\nOn Fri, Dec 11, 2015 at 04:33 Misagh Moayyed notifications@github.com\nwrote:\n\nTransactionSynchronizationManager and AuthenticationAttempt are both very\ngood ideas. I'll rework this pull based on the collective feedback here,\nand will attempt to run threaded tests to see how it holds. Then we can\ncarry the conversation forward again. Thanks all.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1343#issuecomment-163886578.\n. Looks much better!\n\nFew comments:\n- On the prototype scope - it is designed for stateful objects and to produce a new instance of bean definitions marked with that scope, ONLY with explicit calls to ApplicationContext::getBean. In our case, these new objects are not stateful (as far as I could see) and no explicit calls to ApplicationContext::getBean are made to let Spring give us new instances. I don't think we need those to be prototype` scoped.\n- On the ApplicationContextBuilder - in case of multi-legged authentication transactions spanning multiple request/response trips (mfa case), these authentications (attempts) are collected there, so this object needs to be stored somewhere in between those requests. Where would it be stored? Now we are back to this \"session-based\" nature of multiple authentication transactions. In the current SWF action code, only a single authentication attempt is collected and the ctxBuilder builds the final AuthenticationContext.\n. What is the point of thread local wrapper here: https://github.com/Unicon/cas/blob/37feb2e0939a304b2ae50b7dd6142b71f8192cab/cas-server-core-authentication/src/main/java/org/jasig/cas/authentication/DefaultAuthenticationContextBuilder.java#L28\nif currently, the authentications set state is confined within one thread's stack frame boundary by locally creating instances of the builder and passing the reference around via method parameters?\n. Sure thing wrt WIP. I would personally not mess around with ThreadLocal\nthere and remove it.\nD.\nOn Tue, Dec 15, 2015 at 01:36 Misagh Moayyed notifications@github.com\nwrote:\n\n-\nOn prototype scope, this can be removed. It's probably a leftover\n   change from when I was playing around with stateful object that was going\n   to hold authentications. Good call.\n   -\nOn the threadlocal issue; same story. A leftover change, though I\n   think it wouldnt hurt for us to play it safe to prevent API misuse. Unless\n   you think there is a performance cost associated with it.\n   -\nFor storing and passing around the context builder to multiple flows,\n   I don't have a good answer yet. I am currently in the process of working on\n   cas-MFA to convert it to 4.1, and I am trying to determine whether SWF\n   might be a good place to pass this around to other flows. That seems like\n   the best option, though as we discussed, there are concerns about possible\n   serialization issues. I'll report back later, but at this time, this is not\n   a concern for this PR as we are simply trying to decouple the API and we\n   simply just have a master flow at the moment. Once the MFA starts to form,\n   we can revisit this later. The main objective here is to ensure that the\n   authN subsystem is separate from the service layer.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1343#issuecomment-164660083.\n. Exactly wrt introducing more classes/interfaces - these are aimed to be a set of cohesive, loosely-coupled components to facilitate flexible, decoupled design to enable things like multi-legged authentication transactions, not complect authentication and web SSO subsystems, etc. \n\nRegarding the authentication builder context - it is very clear that this data will need to be persisted between multiple request per particular user session. There is currently a hesitation to assume the SWF layer as a storage mechanism due to the serialization requirement. But in any case, this object needs to be persisted somewhere - if not in SWF-backed storage, perhaps in some distributed cache like Hazelcast, memcache, or perhaps ... ready? ... an RDBMS :-)) That would certainly complicate things further and further.  So, I'd personally lean towards just leveraging SWF (since CAS already uses this layer for web interaction glue) and re-design the auth ctx builder to be lightweight (just collect lightweight, serializable data, just enough to produce the final Authentication at the end of an entire authentication event) so it could be easily stored in the SWF conversation scope without hesitation.\n. And so the unsolved issue still remains - where to persist https://github.com/Jasig/cas/blob/a013bb8714f413541499ec8939e391be2243ce41/cas-server-core-authentication/src/main/java/org/jasig/cas/authentication/DefaultAuthenticationContextBuilder.java in between requests for multi-legged authentication transactions\n. Sure thing - the persistence is not needed to be present in this API, of course. My main point is that currently, each SWF action e.g.: https://github.com/Unicon/cas/blob/a013bb8714f413541499ec8939e391be2243ce41/cas-server-webapp-actions/src/main/java/org/jasig/cas/web/flow/AuthenticationViaFormAction.java#L174 and for example non-interactive action also blindly assume that they are THE ONLY participants in the authentication transaction and immediately build the context and ask CAS to issue TGT. This assumption/impl would need to be re-thought and refactored to introduce a higher layer *web/SWF for example) to mediate the multi-phased authn transactions, take care of the auth ctx builder persistence in between requests in the thread safe manner for each authn session, etc. Basically a mediator/glue layer between authentication and web sso subsystems. \n. And so perhaps one more thing to re-think in this current API - the auth ctx builder stores the Authentication objects with all its state. May be a \"lighter-weight\" version with just enough of simple, serializable state - so it could be easily stored in between requests without a great concern for serialization issues, etc. Just thinking out loud here...\n. And so my personal, final proposal for refactoring for this PR is:\n- Get rid of AutheticationTransactionFactory and create a static factory method on transaction class itself: AuthenticationTransaction::for(Credential)\n- Rename AuthenticationObjectsRepository to for example AuthenticationSystemSupport to clearly communicate that this is a \"helper\" type. And that class would for now carry and expose AuthenticationTransactionManager and PrincipalElectionStrategy\nAnd so I would summarize my own understanding of the current abstractions and so we synchronize all our thinking to make sure we are all on the same page:\nThe main abstractions are:\n- AuthenticationTransaction - a unit of work wrapping presented Credential for the system to process\n- AuthenticationTransactionManager - an entity that is responsible of receiving AuthenticationTransaction(s) and \"processing it\n-  AuthenticationContextBuilder - a \"carrier\" for all the processed authentication transactions by the transaction manager, as well as the entity that has the knowledge of how to produce a final authentication view from all these transaction steps when asked\n-  AuthenticationContext - a definitive, final view of the successful authentication event (sum of all the authentication transactions). This is the \"glue\" object between Authn and Web SSO subsystems. It is passed to the web SSO subsystem (CASImpl) to produce web SSO tokens (TGT) - only when authentication event is successfully completed. See how CASimpl API is now fully de-coupled from authentication concerns?!\nAlso note that these new authentication API types serve as the \"higher level of abstraction\" for the client layers to use (web, SWF... any other client layer for that matter) as opposed to the \"lower level\" API - which would represent real \"workers\" in this subsystem i.e. AuthenticationManager, AuthenticationHandler, etc. Now the upper layers like SWF (yet to be developed) - would not deal with AuthenticationManager directly - only via this higher level authentication transaction API.\nDoes this sound reasonable? I personally like this de-coupling and think it will enable very flexible mfa architecture, REST authentication architecture, etc. in the CAS server. \n. Out of curiosity - anyone \"in the wild\" use this impl as an \"addon\"? \nAlso, as obviously there are a lot of great caching and nosql technologies out there and therefore it would not be feasible to create ticket registry impls for them ALL and include in the CAS core. What would be our \"policy\" regarding including new implementations of the ticket registry in the core?\n. I wouldn't go to the extreme of removing all the other impls ;-)\n. Can we keep anything SOAP out of CAS server? ;-))\n. +1\n. I'm good here (SAML is not \"my cup of tea\") ;-)\n. Let's switch the CI server\n. https://drone.io/\n. I did the pretty thorough scan via IDEA. I think I got it all, but if for some reason something is missed that could be refactored later on \"on the fly\" ;-) \n. But I did carefully think about the current names. We have 2 concepts here,\nreally - an authentication transaction - a single interaction with an\nauthentication source with given credentials and authentication attempt - a\nsummary of all the possible auth transactions in order to gain access,\ncreate web SSO session, etc. Hence the very carefully chosen names to\nexpose an intention revealing interface.\nD.\nOn Sun, Jan 10, 2016 at 08:11 LELEU J\u00e9r\u00f4me notifications@github.com wrote:\n\nI like the idea, I'm not fully convinced by the names. Could we have\nsomething more explicit like startTransactions, addTransaction and\nendTransactions?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1432#issuecomment-170343674.\n. Yes, \"attempt\" is somewhat new concept here, but nevertheless we just\nsaying that someone is attempting to authenticate. A \"finalized attempt\" is\nsuccessful when all the necessary authentication transactions are executed\nand final authentication context is built.\n\nSo if \"attempt\" does not represent a clear concept here, may be we could\nrefer to it (in the facade method names) as \"authentication result\". Or\neven better - rename AuthenticationContext to AuthenticationResult!\nOn Mon, Jan 11, 2016 at 04:23 LELEU J\u00e9r\u00f4me notifications@github.com wrote:\n\nI was not respectfully saying that names have not been properly devised.\nThe attempt concept is something which has never been used before and\nwhich is not really clear not me. When I read attempt, I think: unfinished\nand (maybe failed.\nThough, the idea here is when we have played all transactions, to finish\nthe authentication process and generate an authentication context, right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1432#issuecomment-170481853.\n. Misagh, let's rename AuthenticationContext to AuthenticationResult\n\nOn Mon, Jan 11, 2016 at 06:41 LELEU J\u00e9r\u00f4me notifications@github.com wrote:\n\nI like AuthenticationResult.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1432#issuecomment-170516305.\n. How about this - merge this pull and I'll do the refactoring from the\nmerged master and make a separate PR. Will be cleaner. Sounds good?\nOn Mon, Jan 11, 2016 at 07:14 Misagh Moayyed notifications@github.com\nwrote:\nP.S: The name sounds good to me, if you want to make changes in the same\npull, etc.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1432#issuecomment-170523531.\n. And so with the refactored AuthenticationResult the new facade API would look like this (which IMHO very clear and intention revealing):\n\n``` java\nAuthenticationResultBuilder handleInitialAuthenticationTransaction(Credential... credential)\nAuthenticationResultBuilder handleAuthenticationTransaction(AuthenticationResultBuilder authenticationResultBuilder, Credential... credential)\n\nAuthenticationResult finalizeAllAuthenticationTransactions(AuthenticationResultBuilder authenticationResultBuilder, Service service)\n\nAuthenticationResult handleAndFinalizeSingleAuthenticationTransaction(Service service, Credential... credential)\n\n```\n. Approx ETA for the new PR on this  -some time on (01/12/2016 or 01/13/2016)\n. While I wouldn't (-1), I would caution though that this is a \"very sharp knife\" and the security of it must be taken very seriously. I personally wouldn't deploy this to my production CAS server and only use it in dev/test environments. \n. +1\n. I will do this next week\nOn Fri, Mar 4, 2016 at 17:36 Daniel Frett notifications@github.com wrote:\n\nsigned up for duo, haven't had much time during the week to put into more\ntesting, going to roundtrip auth this weekend. My schedule during the week\nis usually quite packed.\nWould like it if @dima767 https://github.com/dima767 or @leleuj\nhttps://github.com/leleuj could take at least a cursory look at the PR\nas well, it's a lot of code to review.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1496#issuecomment-192503805.\n. +1\n\nOn Sun, Mar 13, 2016 at 14:58, Daniel Frett notifications@github.com wrote:\nI updated the trigger selection policies to consistently use the MFA provider id\nand not use the bean name. tested it out with the duo MFA provider.\n\u2014\nReply to this email directly or view it on GitHub\n[https://github.com/Jasig/cas/pull/1496#issuecomment-196021003] .[https://github.com/notifications/beacon/AAAxVRgaPxzp3vPEipHRYG7F2L4SSXV3ks5ptF4-gaJpZM4HQwjQ.gif]\n. I've been following the progress by viewing commits, etc. Haven't tested locally\nOn Fri, Mar 18, 2016 at 12:21, Misagh Moayyed notifications@github.com wrote:\n@dima767 [https://github.com/dima767] @frett [https://github.com/frett] have you been able to check out the latest mods and resume tests?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1496#issuecomment-198433970]\n. There was a fix recently in the master addressing the redirect loop bug related to view resolvers beans mix up, etc. May be this branch would need to be merged with the latest master.\n. +1 to merge\n. +1\n. As I stated earlier. I'd leave that java8 branch alone with any additional pull requests, to make it finally part of the master sooner. \nI had tough time merging master into it, for example as the API was changed to accommodate Stream API 'count' - changed return types on ticket registry API hierarchy from int to long - with ripple effect through the code base. I had to fix it back to int, etc. Note for the future: let's not change the core APIs like that. \nAnyway, this work is highly appreciated, but let's not get this more complicate at the moment than it needs to be.\n. java8 branch currently is in the \"freeze\" mode to be finally merged into\nmaster. Let's hold off on any further efforts until this happens.\nThanks,\nD.\nOn Thu, Feb 4, 2016 at 09:21 tduehr notifications@github.com wrote:\n\nOkay, I only sent this because I saw you were having problems merging. I\ndidn't think a int -> long change was that big either.. I'll redo the\ncouple changes here against java8.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1509#issuecomment-179865275.\n. Are there any words when ldaptive 1.2 GA might become available?\n. All righty then\n. Good stuff. Now we want to make sure that all tests pass :-)\n. +1\n\nOn Thu, Feb 4, 2016 at 11:25 Misagh Moayyed notifications@github.com\nwrote:\n\nSounds good to me. @dima767 https://github.com/dima767 @frett\nhttps://github.com/frett ?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1512#issuecomment-179928728.\n. Oh, wow, I did not realize that there is a \"stinky\" code duplication with that code block is going on in both places... I will refactor it into AbstractTicketRegistry\n. Oh, wow, I did not realize that there is a \"stinky\" code duplication with that code block is going on in both places... I will refactor it into AbstractTicketRegistry\n. So, moving out that logout manager was a bad idea, after all ;-)\n. So, moving out that logout manager was a bad idea, after all ;-)\n. It has something to do with autowiring voodo, different tick registries modules and that logout manager bean. It doesn't like it being in the AbstractTicketRegistry.\n\nI'll do this - I'll move that injected logout manager back down to those 2 registries and explicitly pass it to the cleanTickets method\n. It has something to do with autowiring voodo, different tick registries modules and that logout manager bean. It doesn't like it being in the AbstractTicketRegistry.\nI'll do this - I'll move that injected logout manager back down to those 2 registries and explicitly pass it to the cleanTickets method\n. Not just yet... ;-)\n. Not just yet... ;-)\n. Man... Hazelcast tests pass just fine locally...\n. Man... Hazelcast tests pass just fine locally...\n. +1\n. +1\n. So in order for deployer's context bean definitions to override the core CAS @Bean definitions, those must be loaded AFTER CAS' bean definitions. Bean definitions loading heuristics always bothered me.\nOne possible way would be use @Conditional facility in CAS to specify conditions of defining core CAS beans ONLY if those beans are not already defined, similarly how Spring Boot uses this facility for its autoconfiguration magic\n. http://javapapers.com/spring/spring-conditional-annotation/\n. I am not saying we must use this facility, just something to keep in mind. The current bean overriding based on the order of app ctx definition loading is something I always \"keep my fingers crossed\" ;-)\nOn the other hand, here's the Boot's impl of the OnBeanCondition and as you could see it's a very complex beast! https://github.com/spring-projects/spring-boot/blob/master/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n. +1\n. Just FYI, the @Configuration classes with @Bean methods are not straight up compiled \"what-you-see-what-you-get\" bytecode, but rather CGLIB proxies generated at runtime to allow Spring to do this wonderful config magic. Again, this is just FYI message ;-)\n. +1\n. BTW, I've been wondering about this component in CAS for a long time. Never\ngotten a good answer.\nOn Tue, Mar 8, 2016 at 04:39 Auke van Leeuwen notifications@github.com\nwrote:\n\nOh btw: this doesn't really change anything for this PR per se, because\nthat fixes completely different (encoding) issues. But it does go to show\nthat if this hasn't worked properly (I mean it would for all request\nparameters always have outputted a toString() for all the request\nparameters (i.e. [Ljava.lang.String;@221ebc09).\nMakes me wonder if this method is useful for CAS in the first place?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1598#issuecomment-193689128.\n. +1\n. +1. If this could be merged today, that'd be very helpful as I need this fix in\nthe snapshot published version for client work :-)\n\nOn Tue, Mar 15, 2016 at 04:31, Misagh Moayyed notifications@github.com wrote:\n\nYOU CAN VIEW, COMMENT ON, OR MERGE THIS PULL REQUEST ONLINE AT:\nhttps://github.com/Jasig/cas/pull/1626 [https://github.com/Jasig/cas/pull/1626]\nCOMMIT SUMMARY\n- Remove extra slash from path prefix\nFILE CHANGES\n- M \n  cas-server-webapp-config/src/main/java/org/jasig/cas/config/CasWebAppConfiguration.java\n  https://github.com/Jasig/cas/pull/1626/files#diff-0\nPATCH LINKS:\n- https://github.com/Jasig/cas/pull/1626.patch\n  [https://github.com/Jasig/cas/pull/1626.patch]\n- https://github.com/Jasig/cas/pull/1626.diff\n  [https://github.com/Jasig/cas/pull/1626.diff]\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/1626 [https://github.com/Jasig/cas/pull/1626][https://github.com/notifications/beacon/AAAxVbZNhK_RXdtelAAvPkH2SuLqXgPCks5ptm5qgaJpZM4HwzTV.gif]\n. BTW, just tested a local build with this patch with a simple overlay. Works just fine. Good to go!\n. +1 on merging into master asap\n. +1. You meant April 29 :-)\n. +1\n. I've made adjustments based on the review comments. @mmoayyed is this could be merged today I'd focus on another PR I had in mind wrt improving the ease of adding custom exception handling mapping for customized view messages, etc.\n. wrt documentation - please suggest a place in our docs and I will do\n. Will add the documentation tomorrow\n. OK, I've added the docs\n. +1\n. And I'm looking at some of the Oauth test failures \n. There you go @mmoayyed - that's the SSL tests failing I discovered a bit ago with untrustworthy cert of https://www.cacert.org\nWe should just find a good resource with good SSL cert or just disable those tests relying on https://www.cacert.org for now. Otherwise we'll be getting failing builds...\n. And so how do we deal about it here - to make the build succeed?\n. Good stuff, but still, this SSL dependency for the tests is very .. what's the word .. fragile :-)\n. Oh, and what do we (I) do to make the tests pass locally (detailed instructions, please)? :-)\n. And +1 with some suggested refactorings in the inline comments\n. Looks good to me. +1\n. Looks good to me. +1\n. +1\n. BTW, the master needs to be merged into this branch as it has moved into org.apereo package.\n. +1\n. +1\n. +1\n. Looks good to me :)\n. +!\n. Sure thing\n. So, what I'd propose, is to move this initializer class to one of the core subprojects (cas-core, perhaps?), refactor it to inject one \"jsonServiceRegistry\" bean (always available) and \"serviceRegistry\" bean (always mapped with alias to the one in use) and perform the business based on this flag (renamed to be generic instead of jpa specific). Also in the body of the impl, check if the mapped registry is not already the JSON one. And other registries would need to also implement \"size\" method. \n. It could be, but really kind of bad from performance point of view. You see, thee load loads the entire object graph into the memory, while size is the \"optimized\" version that each registry would know how to implement natively. For example the current JPA one is implemented with a count query which is a much more lighter weight than loading the entire object graph just to get a count of records.\nPlus size is intention revealing\n. So, if you want to, you could give the outlined impl a try.. Or I could do it, on Monday. Either way is fine by me\n. I agree with both of you ;-) Just a matter of style, so my personal preference is package-private. And I see the latest commit @mmoayyed made to make it a package-private @Component instead - which I like, cause that one doesn't have to be a @Configuration class ;-)\nGood to see you @battags getting into CAS again! ;-)\n. Not everything must be @Configuration :-)\n. Oh, and final where appropriate. For example @Configuration classes cannot be final due to CGLIB enhancement voodo done by Spring, etc., but other \"internal\" CAS @Components can be, for example, etc.\nOh, and not EVERYTHING under the Sun must be @RefreshScope :-)\n. I'm personally happy with this PR. +1 to merge in\n. @mmoayyed Can we get rid of those annoying codacy notes?!\n. +1 If we're able to get rid of node.js altogether that would be even better! :-)\n. +1\n. +1\n. What problem is it trying to \"solve\"?\n. Looks good to me. \n. +1\n. Thank you @olexus Now I'd wait for @mmoayyed and other CAS team members to look at it\n. +1\n. +1. Also usage docs/notes from the deployer point of view would be great!\n. Yes, do a fresh fork and a topic branch please and PR from there. I'll close this one. \nThank you.\n. Or may be as another option, a custom serializer impl for those keys, something like this: https://github.com/echocat/marquardt-java-sdk/blob/master/common/src/main/java/org/echocat/marquardt/common/serialization/PublicKeySerializer.java\n. Annoying checkstyle \"terror\"... if you ask me ;-)\nTry the protected constructor.. example: https://github.com/apereo/cas/blob/master/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java#L103. I'd also lift this utility class from the Cassandra module as this is a general purpose ticket helper that could be re-used in other modules... I thought there were similar test utility methods that did that kind of a ticket creation already (I'm lazy to look). If nothing else, I'd refactor this utility class to name it Tickets and put it in some central test module that could be reused for other ticket based testing purposes, etc.. I'd go even further (not this PR, but in general) - refactor the entire codebase to use native Java 8 lang. features and remove 3rd party deps. like Guava, Commons, etc. wherever feasible\n. @mmoayyed we really need to review and refactor/refresh checkstyle rules. Let me create an issue to track the task\n. There we go \ud83d\udc49 https://github.com/apereo/cas/issues/2134\n. These other extra commits are result of working directly in master in Unicon's fork (need to avoid that in the future to have a cleaner history).\nBut in any case, the change is dead trivial (just a version bump), so it could really be manually applied directly to master if approved.. Would this be OK to include the URI of the main website?. The 4.2.x line is in the security patch mode only: https://apereo.github.io/cas/developer/Maintenance-Policy.html. Test failing seems to be unrelated -> https://github.com/apereo/cas/blob/master/support/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/SamlAttributeEncoderTests.java#L37\nI just ran this one locally and it passes.. Why not? What is the problem with that release date?. Yeah, looks good to me. BTW, the build failing is un-related:\nCaused by: org.gradle.api.UncheckedIOException: Could not GET 'https://jitpack.io/com/github/duosecurity/duo_client_java/master-SNAPSHOT/maven-metadata.xml'. Received status code 401 from server: Unauthorized\nPing @mmoayyed . Yeah, any Spring-managed objects that \"travel across the wire\", I'd remove the RefreshScope, personally. . Additional method on the interface with the 'default' imply will do it :-)\n. I would not use notion \"to be cleaned\" in the name there, just a generic \"getTickets\". Would we? \nWell, if it fails to compile, I'd go for getTicketsStream. No more from me. Is Jetbrains providing open source license for development of CAS? If not, I'm not sure that the CAS project should advertise them. Oh, well, we agree to disagree ;-) Feel free to kill this PR.. Oh, will do. Closing.. Just realized that I need to refactor to facilitate all the other tick registries tests ;-). For the ticket registries dealing with catalog - that is it (and this code will serve as a good testing foundation for future types of registries!) I'll be opening separate PRs for unit tests for different parts of CAS. Good to merge.. This should be finalized... The latest commit.. Waiting on Travis . I'd vote for 6.0. Do we know anyone actively using ignite stores in CAS?. The fresh one will be opened. I don't think it's a good idea to be passing TGTs (as they are bearer tokens) in URL request params. Header would be a better option. @mmoayyed Should be able to. Working on it this morning. Give me few hours, plz. OK, with the provided overlay and steps described, was able to re-produce. CAS Commit Id: dce9d59d916788a7f76fad1492ba36aefc71f9ee\n\n\n\n. Will do. Currently having a hard time running the overlay build against 5.3.8-SNAPSHOT. @gagarski Were you able to run the overlay against 5.3.8-SNAPSHOT\nI'm getting Caused by: java.lang.VerifyError: class org.apereo.cas.web.view.ChainingTemplateViewResolver overrides final method initialize.()V at start up. FWIW...\n\n. @gagarski \ud83d\udc4d. Or perhaps some kind of a functional automated test against the running CAS server, etc. But manual verification would suffice for now. OK, @mmoayyed , @gagarski  \nafter merging the PR into 5.3.x, building and installing the snapshot locally, then building the overlay against 5.3.8-SNAPSHOT, running the resulting cas.war, after sitting there for about a minute, produces \"SOE\":\n... 1024 more\nCaused by: java.lang.StackOverflowError\n    at java.util.concurrent.ConcurrentHashMap.putVal(ConcurrentHashMap.java:1012)\n    at java.util.concurrent.ConcurrentHashMap.putIfAbsent(ConcurrentHashMap.java:1535)\n    at java.lang.ClassLoader.getClassLoadingLock(ClassLoader.java:463)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:404)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:411)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 1017 more\nBuilding against published SNAPSHOT (CAS Commit Id: d14532310734f74d2f6a4864316c1b6e95538e15) runs fine.\n. @gagarski It's basically ./gradlew install -x test from the HEAD of the branch you want to test (based off of 5.3.x) of course - that should install the SNAPSHOT of that build into ~/.m2. Nope, still getting the SOE (could be my env. - I have total of 8 GB of OS RAM, but that's still not good). Here's the sequence of git and gradle steps to install the version into ~.m2 to test against:\ngit checkout 5.3.x\ngit checkout -b gagarski-oauth_profile_caching\ngit pull https://github.com/gagarski/cas.git oauth_profile_caching\n./gradlew -x test -x javadoc -x check install\nthen built the overlay against it (5.3.8-SNAPSHOT in ~/.m2`) and tried to run it.\nIf someone else could try it, or we just merge it.. Note - 5.3.x must run on Java 8, not 11. I like the idea of using Jackson's mapper here. Sounds like it's an opportunity for refactoring of client API e.g. introduction of a \"trait\" interface e.g RenewAwareTicketValidator etc., but not sure it's worth it or in the scope of this work. Just leaving a trace here for future references.... Could do that.\n. Will try to do that\n. This is already being logged:\nServiceManagement: Service Attempted to Proxy, but is not allowed.  Service: [http://otherserver/legacy/service]\nNothing to do here.\n. Man, this is becoming more burden :-) \nI don't have any more coop dev hours to burn on these nit picking :-)\nSent from my iPhone\nOn Jul 17, 2012, at 18:04, Misagh Moayyedreply@reply.github.com wrote:\n\n\n\np:centralAuthenticationService-ref=\"centralAuthenticationService\"\np:warnCookieGenerator-ref=\"warnCookieGenerator\"/>\n  +\n<bean id=\"generateServiceTicketAction\" class=\"org.jasig.cas.web.flow.GenerateServiceTicketAction\"\np:centralAuthenticationService-ref=\"centralAuthenticationService\"/>\n  +\n<bean id=\"sendTicketGrantingTicketAction\" class=\"org.jasig.cas.web.flow.SendTicketGrantingTicketAction\"\np:centralAuthenticationService-ref=\"centralAuthenticationService\"\np:ticketGrantingTicketCookieGenerator-ref=\"ticketGrantingTicketCookieGenerator\"/>\n  +\n\n\n\n  +\n\n\n\n\nSeems like this is the only new changes for this file. The rest seems to be IDE's formatting noise. Could you clean out just the needed change? \nIf you're using Eclipse like me, I realized that I needed to turn off its 'Save Actions' feature or restrict it to only formatted lines. \n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/88/files#r1183632\n. What child classes? :-)\n. Yeah, yeah, I know the theory. Well don't extend it :-)\n\nAnyway, I'll make another pull req to address all the nitpicking to make everyone happy. After all - easy coop dev billable time :-)\nSent from my iPhone\nOn Jul 17, 2012, at 23:37, Misagh Moayyedreply@reply.github.com wrote:\n\n\n+\n+import javax.validation.constraints.NotNull;\n+\n+/\n- * Performs a basic check if an authentication request for a provided service is authorized to proceed\n- * based on the registered services registry configuration (or lack thereof)\n- \n- * @author Dmitriy Kopylenko\n- * @since 3.5.1\n- /\n  +public class ServiceAuthorizationCheck extends AbstractAction {\n  +\n-    @NotNull\n-    private final ServicesManager servicesManager;\n  +\n-    private static final Logger logger = LoggerFactory.getLogger(ServiceAuthorizationCheck.class);\n\nSince the class is not marked final, any child classes that extend it would get the ServiceAuthorizationCheck.class logger instance as opposed to the this instance.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/88/files#r1185122\n. Thank you Jerome. Good point. Again - the static vs instance-based loggers topic is subjective. I'll make it instance-based to make CAS community happy :-)\n\nSent from my iPhone\nOn Jul 18, 2012, at 5:43, LELEU J\u00e9r\u00f4mereply@reply.github.com wrote:\n\n\n+\n+import javax.validation.constraints.NotNull;\n+\n+/\n- * Performs a basic check if an authentication request for a provided service is authorized to proceed\n- * based on the registered services registry configuration (or lack thereof)\n- \n- * @author Dmitriy Kopylenko\n- * @since 3.5.1\n- /\n  +public class ServiceAuthorizationCheck extends AbstractAction {\n  +\n-    @NotNull\n-    private final ServicesManager servicesManager;\n  +\n-    private static final Logger logger = LoggerFactory.getLogger(ServiceAuthorizationCheck.class);\n\nbut the logger is private, so only available in the current class...\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/88/files#r1186332\n. Same reason version 1 is still there, no? There are A LOT of talks about \"backwards compatibility\", etc. so I thought to leave v2 in there in case someone, somewhere would require it, or v3 (default) would break some clients, etc., so this would be an easy \"escape route\" to plug views for older versions back in.\n\nSame reason the \"protocols\" directory structure exists for views in the first place, so multiple \"protocols\" could be used. No? Have I misunderstood?\nIf not, then i suggest to remove ALL the older protocols and keep the only one, latest protocol view.\u00a0\nCheers,\nD.\u00a0\n\u2014\nSent from Mailbox for iPhone\nOn Tue, Apr 9, 2013 at 6:12 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n\n@@ -25,11 +25,18 @@ cas1ServiceSuccessView.(class)=org.jasig.cas.web.view.Cas10ResponseView\n cas1ServiceSuccessView.successResponse=true\n### CAS 2.0 Response Protocol Views\n+cas2ServiceSuccessView.(class)=org.springframework.web.servlet.view.JstlView\n+cas2ServiceSuccessView.url=/WEB-INF/view/jsp/protocol/2.0/casServiceValidationSuccess.jsp\n+\n+cas2ServiceFailureView.(class)=org.springframework.web.servlet.view.JstlView\n+cas2ServiceFailureView.url=/WEB-INF/view/jsp/protocol/2.0/casServiceValidationFailure.jsp\nWhy do we keep the old responses ? Are they used somewhere ?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/224/files#r3710659\n. So, what's your suggestion? Delete protocols/2.0 and just leave protocols/3.0 directory with JSPs there?\n\u2014\nSent from Mailbox for iPhone\n\n\nOn Tue, Apr 9, 2013 at 6:38 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n\n@@ -25,11 +25,18 @@ cas1ServiceSuccessView.(class)=org.jasig.cas.web.view.Cas10ResponseView\n cas1ServiceSuccessView.successResponse=true\n### CAS 2.0 Response Protocol Views\n+cas2ServiceSuccessView.(class)=org.springframework.web.servlet.view.JstlView\n+cas2ServiceSuccessView.url=/WEB-INF/view/jsp/protocol/2.0/casServiceValidationSuccess.jsp\n+\n+cas2ServiceFailureView.(class)=org.springframework.web.servlet.view.JstlView\n+cas2ServiceFailureView.url=/WEB-INF/view/jsp/protocol/2.0/casServiceValidationFailure.jsp\nActually, the version 1 will be still available through the /validate url, which is not the case of the 2.0, replaced by the 3.0 on /serviceValidate and /proxyValidate urls.\nThat's why I would prefer cleaning than keeping for backward compatibility.\nViews defined in the protocol/ directory are also used when you enable the appropriate protocol : OpenID, OAuth, ClearPass, aren't they ?\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/224/files#r3710965\n. OK, that was my intention in the first place. I will not do any more work on this until (and if) consensus on what is the right thing to do here is reached among CAS committers :-)\n\n\nCheers,\nD.\n\u2014\nSent from Mailbox for iPhone\nOn Tue, Apr 9, 2013 at 7:44 AM, Scott notifications@github.com wrote:\n\n\n@@ -25,11 +25,18 @@ cas1ServiceSuccessView.(class)=org.jasig.cas.web.view.Cas10ResponseView\n cas1ServiceSuccessView.successResponse=true\n### CAS 2.0 Response Protocol Views\n+cas2ServiceSuccessView.(class)=org.springframework.web.servlet.view.JstlView\n+cas2ServiceSuccessView.url=/WEB-INF/view/jsp/protocol/2.0/casServiceValidationSuccess.jsp\n+\n+cas2ServiceFailureView.(class)=org.springframework.web.servlet.view.JstlView\n+cas2ServiceFailureView.url=/WEB-INF/view/jsp/protocol/2.0/casServiceValidationFailure.jsp\nI don't think its valid to remove 2.0.  There is a 2.0 protocol, and those files support it explicitly.\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/224/files#r3711733\n. OK, this is just a pull with a patch provided in the JIRA. I won't have time to invest in it this time around, so we might just need to close this request and come back to it later with a fresh impl when time permits.\n\n\nCheers,\nD. \n. http://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html#getSubjectAlternativeNames()\n. In case of catching an IOException in that piece of code and letting null (DERObject) get into ASN1Sequence#getInstance would just return null. So this particular code is \"safe\". Here's the entire ASN1Sequence.getInstance implementation:\n``` java\n/\n     * return an ASN1Sequence from the given object.\n     \n     * @param obj the object we want converted.\n     * @exception IllegalArgumentException if the object cannot be converted.\n     /\n    public static ASN1Sequence getInstance(\n        Object  obj)\n    {\n        if (obj == null || obj instanceof ASN1Sequence)\n        {\n            return (ASN1Sequence)obj;\n        }\n    throw new IllegalArgumentException(\"unknown object in getInstance: \" + obj.getClass().getName());\n}\n\n```\nI just explicitly tested it with throwing IOException on purpose. It's fine.\n. This is the \"check style torture\" mechanism that is used throughout CAS in all the other modules. Without it it wouldn't build. I did not invent it, trust me :-))\u00a0\u2014\nSent from Mailbox\nOn Tue, Jul 8, 2014 at 10:20 PM, Scott notifications@github.com wrote:\n\n\n\n4.0.0\norg.jasig.cas\ncas-server-extension-rest\njar\nJasig CAS REST implementation\n\n\n\norg.jasig.cas\ncas-server-core\n${project.version}\n\n\n  +\n\n${project.parent.basedir}\n  what is cs.dir being used for?\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14690980\n. I could do that.\u2014\nSent from Mailbox\n\n\nOn Tue, Jul 8, 2014 at 10:22 PM, Scott notifications@github.com wrote:\n\n\n\n/**\n* Create new ticket granting ticket.\n*\n* @param credentials username and password application/x-www-form-urlencoded values\n* @param request raw HttpServletRequest used to call this method\n* @return ResponseEntity representing RESTful response\n*/\n@RequestMapping(value = \"/${server.rest.ticketsResource.name:tickets}\",\nmethod = RequestMethod.POST,\nconsumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)\nResponseEntity createTicketGrantingTicket(@RequestBody final MultiValueMap credentials,\nfinal HttpServletRequest request) {\n  +\nFormatter fmt = null;\ntry {\nfinal String tgtId = this.cas.createTicketGrantingTicket(\n  in the previous version, I thought we extracted constructing credentials out into its own method that could be overwritten\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14691008\n. Yes, sorry, old habit. I'll back out the formatting in the fresh commit(s)\u2014\nSent from Mailbox\n\n\nOn Tue, Jul 8, 2014 at 10:24 PM, Scott notifications@github.com wrote:\n\n\n@@ -23,188 +23,197 @@\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd\"\n          version=\"2.5\">\n-  Central Authentication System (CAS) ${project.version}\n  might be good not to reformat this as part of this commit so we can tell what changed.\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14691041\n. Absolutely. I'll look into it.\u2014\nSent from Mailbox\n\n\nOn Tue, Jul 8, 2014 at 10:25 PM, Scott notifications@github.com wrote:\n\n\n\n* Even though the default URI for tickets resource is {@code /v1/tickets}\n* it could be re-configured to whatever URI is desired by setting the following properties\n* in either classpath-based or externalized cas.properties file:\n*\n* \n*     {@code server.rest.prefix=/v1}\n*     {@code server.rest.ticketsResource.name=tickets}\n* \n*\n* @author Dmitriy Kopylenko\n* @author Unicon inc.\n*\n* @since 4.1\n*/\n  +@RestController(\"${server.rest.prefix}:/v1\")\n  +public class TicketsResource {\n  is there an opportunity for unit tests to be added here?\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14691050\n. Old habit. I'll get rid of it.\u2014\nSent from Mailbox\n\n\nOn Tue, Jul 8, 2014 at 10:25 PM, Scott notifications@github.com wrote:\n\n\n\n*     {@code POST /v1/tickets}\n*     {@code POST /v1/tickets/{TGT-id}}\n*     {@code DELETE /v1/tickets/{TGT-id}}\n* \n*\n* Even though the default URI for tickets resource is {@code /v1/tickets}\n* it could be re-configured to whatever URI is desired by setting the following properties\n* in either classpath-based or externalized cas.properties file:\n*\n* \n*     {@code server.rest.prefix=/v1}\n*     {@code server.rest.ticketsResource.name=tickets}\n* \n*\n* @author Dmitriy Kopylenko\n* @author Unicon inc.\n  nitpick alert - did Unicon write this or did you?  should probably be @author Dmitriy Kopylenko (Unicon, Inc.)\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14691063\n. I'm fine with fixed URIs. Less headache. I'll make the change.\u00a0\u2014\nSent from Mailbox\n\n\nOn Wed, Jul 9, 2014 at 8:36 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n\n\n* {@link org.springframework.web.bind.annotation.RestController} implementation of CAS' REST API.\n*\n* This class implements main CAS RESTful resource for vending/deleting TGTs and vending STs:\n*\n* \n*     {@code POST /v1/tickets}\n*     {@code POST /v1/tickets/{TGT-id}}\n*     {@code DELETE /v1/tickets/{TGT-id}}\n* \n*\n* Even though the default URI for tickets resource is {@code /v1/tickets}\n* it could be re-configured to whatever URI is desired by setting the following properties\n* in either classpath-based or externalized cas.properties file:\n*\n* \n*     {@code server.rest.prefix=/v1}\n  Are we sure we want to make these urls customizable? I would prefer fixed urls, like the other CAS endpoints (/serviceValidate, /proxyValidate...)\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14706746\n. Scott wanted a protected method for creating credential instance out of the raw entity representation for potential overriding opportunity in subclasses\u2014\nSent from Mailbox\n\n\nOn Wed, Jul 9, 2014 at 8:45 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n\n\n* Even though the default URI for tickets resource is {@code /v1/tickets}\n* it could be re-configured to whatever URI is desired by setting the following properties\n* in either classpath-based or externalized cas.properties file:\n*\n* \n*     {@code server.rest.prefix=/v1}\n*     {@code server.rest.ticketsResource.name=tickets}\n* \n*\n* @author Dmitriy Kopylenko\n* @author Unicon inc.\n*\n* @since 4.1\n*/\n  +@RestController(\"${server.rest.prefix}:/v1\")\n  +public class TicketsResource {\n  Do we want to make this TicketsResource class final or do we want to \"open\" it to changes?\n\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/451/files#r14707070\n. No reason. I just overlooked it. Will fix. Would public final make sense here?\n. No, the default entry is the core idea here - it enables users to simply add the jar dependency to the pom in order to enable the REST support and not tinker with anything else! If no rest support jar is available on the classpath, the attempts to call /v1/* URIs would go through CAS' DispatcherServlet, not find any concrete handler mappings (it would if @RestController implementation is loaded via the rest support jar contributed bean) and redirect to the /login anyway. A win-win situation.\u2014\nSent from Mailbox\n\n\nOn Thu, Jul 10, 2014 at 5:07 AM, LELEU J\u00e9r\u00f4me notifications@github.com\nwrote:\n\n\n@@ -169,6 +172,12 @@\n     /authorizationFailure.html\n\n-   REST support if cas-server-extension-rest is included \n  I don't think it should be here by default, it should be added when necessary, shouldn't it?\n\nReply to this email directly or view it on GitHub:\n  https://github.com/Jasig/cas/pull/458/files#r14755653\n. We sure could and the client will receive HTTP 400. But that's an exercise for Monday :-) Happy Thanksgiving!\n. This supervisor is really a manager/controller of an authentication transaction. The authentication transaction is indeed a collection of on going authentication attempts/steps. And at the end of this transaction the final Authentication/Principal is computed/produced. The transaction step is a higher level which does delegate the work to the lower layer represented by our beloved AuthenticationManager facade API. So, my proposal would be to rename the current AuthenticationSupervisor to AuthenticationTransactionManager\n. I would personally suggest to use an interface specialization of a Set, namely SortedSet (as TreeSet is an implementation of it) and rename the method to convertToSortedSet. This will keep the right level of abstraction and make IDEA happy as an additional benefit. \n. Could do that\n. No we cannot. There is a Spring Security 'Authentication' type already imported there.\n. Public on purpose - for subclassing purposes. For example custom impl. checks a certain condition/metadata for custom id token and if not met, simply calls 'super.getPrincipalIdFrom(..)'\n. I am personally in favor of this patch. While on the surface it might look\na bit overcompensated, in fact (IMHO) the design presents a well-defined,\ncohesive abstractions that deal with authentication concern in a decoupled\nmanner and paves the way for a flexible a decoupled re-design of the web\nSSO layer.\n\n\nI could see that the factories objects here add to the \"noise\" and wonder\nif those are absolute necessary at this time. But I'm +1 for now.\nOn Fri, Dec 18, 2015 at 04:14 Misagh Moayyed notifications@github.com\nwrote:\n\nIn\ncas-server-core-web/src/main/java/org/jasig/cas/web/flow/AbstractNonInteractiveCredentialsAction.java\nhttps://github.com/Jasig/cas/pull/1343#discussion_r48007030:\n\ntry {\n-                final AuthenticationContextBuilder builder = new DefaultAuthenticationContextBuilder(\n\nThe only other concept that remains unexplained here is\nauthenticationObjectsRepository. That is meaningless to the story and\nit's just a technical glitch. Its main goal is to carry around objects that\nthe authentication machinery needs, rather than injecting the same 3-4\ncomponents into every class and action. It's like speed dial on your phone.\n:)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1343/files#r48007030.\n. And so perhaps instead of a separate factory for transaction, we could use a simpler, static \"factory method\" e.g. AuthenticationTransaction tx = AuthenticationTransaction.for(credential)\n. I'd rather reduce the visibility to protected and keep it here\n. Or better yet a package-private. Whoever wants to subclass it would put the custom impl into org.jasig.cas.audit.spi package. Best of both worlds\n. Sorry @leleuj . That Spring Security Authentication type was/is in the 4.1.2. Will do the proper import. Sorry for the confusion.\n. Based on several productive iterations over this, looks good to me. +1\n\nOn Sat, Dec 19, 2015 at 04:45 Misagh Moayyed notifications@github.com\nwrote:\n\nIn\ncas-server-core-web/src/main/java/org/jasig/cas/web/flow/AbstractNonInteractiveCredentialsAction.java\nhttps://github.com/Jasig/cas/pull/1343#discussion_r48090894:\n\ntry {\n-                final AuthenticationContextBuilder builder = new DefaultAuthenticationContextBuilder(\n\nHere is another pass at the API based on the collective feedback:\nfinal AuthenticationContextBuilder builder = new DefaultAuthenticationContextBuilder\n(\n      this.authenticationSystemSupport.getPrincipalElectionStrategy());final AuthenticationTransaction transaction = AuthenticationTransaction.wrap(new ClientCredential(credentials));this.authenticationSystemSupport.getAuthenticationTransactionManager().handle(transaction,  builder);\nfinal AuthenticationContext authenticationContext = builder.build(service);\nfinal TicketGrantingTicket tgt = this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext);\n- I removed the AuthenticationTransactionFactory and added a factory\n  method to wrap credentials. I would have opted for for, except that I\n  can't seeing how it's a keyword.\n- The sanitation of credentials is now moved to the\n  AuthenticationTransaction, since the factory is gone.\n- As discussed, since we need the Service in the context, I opted to\n  keep the AuthenticationContext around and the builder that goes along\n  with that as the carrier.\n- I also do agree with Dima, that I wouldnt want upper layers to have\n  access to the AuthenticationManager. The TransactionManager is the\n  right intermediate glue here.\nNote that this API does not have to be \"perfect\". It has to be functional.\nIt has to support MFA. It can always be revved later as we don't really\nconsider any of this an \"extension point\".\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1343/files#r48090894.\n. Just make the changes and push new commits to your fork's 4.1.x branch. The updated commits will show up in this PR automatically.\n. Method name too generic, no? May be 'generateCertificates'?\n. OK, how about this (renaming the class name and method to be very \"intention revealing\"). This is not critical, but I personally like clarity in API naming ;-)\n\nSamlIdpMetadataAndCertificatesGenerationService::performGenerationSteps\n. Probably copy/paste javadoc comment from ResourceUtils ;-)\n. Next time around ;-)\n. Yep. The code block would just need to be refactored to this ->\njava\nif (this.executorService == null) {\n            this.executorService = new ThreadPoolExecutor(this.threadsNumber, this.threadsNumber,\n                    0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>(this.queueSize));\n        }\nreturn new FutureRequestExecutionService(httpClient, this.executorService);\nwithout a local reference and an else branch.\n. Can't the Principal be accessed via an already encapsulated Authentication?\n. Should we return null (or J8 Optional<Authentication>) instead and let the callsite of this method deal with nil result?\n. On naming things.. There we go ;-) I think this particular API method is not about \"handling\" the init tx, but more about an establishment of the multi-legged authentication context from an already handled initial transaction (elsewhere). So I'd rename it to AuthenticationResultBuilder establishAuthenticationContextFromInitial(Authentication) or AuthenticationResultBuilder fromInitial(Authentication)\n. Exactly right!\n. Would it make more sense to 'cache' the 'AuthenticationResult' in the flow scope after it was achieved to be available to any interested downstream web flow states?\n. OK, roger that. +1 to merge\nOn Thu, Feb 4, 2016 at 07:38 Misagh Moayyed notifications@github.com\nwrote:\n\nIn\ncas-server-webapp-actions/src/main/java/org/jasig/cas/web/flow/GenerateServiceTicketAction.java\nhttps://github.com/Jasig/cas/pull/1511#discussion_r51866805:\n\n\nthis.authenticationSystemSupport.handleAndFinalizeSingleAuthenticationTransaction(service, credential);\n/**\n* In the initial primary authentication flow, credentials are cached and available.\n* Since they are authenticated as part of submission first, there is no need to doubly\n* authenticate and verify credentials.\n*\n* In subsequent authentication flows where a TGT is available and only an ST needs to be\n* created, there are no cached copies of the credential, since we do have a TGT available.\n* So we will simply grab the available authentication and produce the final result based on that.\n*/\nfinal Authentication authentication = ticketRegistrySupport.getAuthenticationFrom(ticketGrantingTicket);\nif (authentication == null) {\nthrow new InvalidTicketException(\nnew AuthenticationException(\"No authentication found for ticket \" + ticketGrantingTicket), ticketGrantingTicket);\n}\nfinal AuthenticationResultBuilder authenticationResultBuilder = authenticationSystemSupport\n\n\nThe API change you see above is in fact borrowed from the MFA branch, just\nso I could keep it all consistent and have it merge easier later.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1511/files#r51866805.\n. Sounds good. Will refactor.\n. DTO is sooo 2000s... Can we please just name this one 'CasEvent'?\n. OK, this is just a nit pick, but I'd prefer not to explicitly define bean name via annotation value, but rather let the method name dictate the bean name. Let's adopt this style throughout java config classes \n. Not a huge deal - matter of preference. It's just that duplicating method\nname and the same name in annotation value leaves the \"bad taste in my\nmouth\". OK, not a biggie if we stick with the current style.\n\nOn Sun, Feb 21, 2016 at 10:39 Misagh Moayyed notifications@github.com\nwrote:\n\nIn\ncas-server-core-events-jpa/src/main/java/org/jasig/cas/config/JpaEventsConfiguration.java\nhttps://github.com/Jasig/cas/pull/1567#discussion_r53568124:\n\n\n@Value(\"${events.jpa.database.pool.idleConnectionTestPeriod:30}\")\nprivate int idleConnectionTestPeriod;\n  +\n/**\n* The Preferred test query.\n*/\n@Value(\"${events.jpa.database.pool.connectionHealthQuery:select 1}\")\nprivate String preferredTestQuery;\n  +\n  +\n/**\n* Jpa event vendor adapter hibernate jpa vendor adapter.\n*\n* @return the hibernate jpa vendor adapter\n*/\n@Bean(name = \"jpaEventVendorAdapter\")\n\n\nI am trying to remember why I did this. There may have been cases where\nbean names where not valid java method names, and these were names that\nwere expected by 3rd party libs. Also, (ah now I remember), there are cases\nwhere bean names must be defined for aliasing. So I decided to pick one\nstyle for consistency, but if you want, I'll do scan, and if all checks\nout, will remove names and only leave them where they are needed. (I do\nthink the code reads easier this way though, you can immediately tell what\nthe bean name is, rather than guessing it must rely on the method name).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1567/files#r53568124.\n. +1 on using streams wherever possible \n. Usually it does improve the readability of code. Intention revealing,\ndeclarative style of programming. It's of course understandable that for\nany of us doing imperative style of Java for decades (at least couple of\ndecades for Java) :-) it's not clear right away how to solve problems with\nthis functional style (I'm including myself). It'll come, as we start doing\nit over and over again. OK, nothing to see here, move alone :-)\n\nOn Sun, Feb 21, 2016 at 15:33 Daniel Frett notifications@github.com wrote:\n\nIn\ncas-server-core-authentication/src/main/java/org/jasig/cas/authentication/AuthenticationContextValidator.java\nhttps://github.com/Jasig/cas/pull/1496#discussion_r53574991:\n\n+\n-    /\n-     * Gets all multifactor authentication providers from application context.\n-     \n-     * @return the all multifactor authentication providers from application context\n-     /\n-    private Map getAllMultifactorAuthenticationProvidersFromApplicationContext() {\n-        try {\n-            return this.applicationContext.getBeansOfType(MultifactorAuthenticationProvider.class);\n-        } catch (final Exception e) {\n-            logger.warn(\"Could not locate beans of type {} in the application context\", MultifactorAuthenticationProvider.class);\n-        }\n-        return null;\n-    }\n  +\n-    private Collection getSatisfiedAuthenticationProviders(final Authentication authentication,\n\nI'm +1 for streams when it doesn't leave the code less\nreadable/maintainable than without streams ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1496/files#r53574991.\n. Why do we have to change the API here from int to long?\n. I'd probably remove this simple test :-)\n. Well, the fact that the Java API there returns long, does not warrant our\nAPI change, IMHO. I remember specifically casting that count() call to int\nto adopt to CAS API. And I'm not sure about billions sessions :-)\nOn Sat, Mar 5, 2016 at 07:27 Misagh Moayyed notifications@github.com\nwrote:\nIn\ncas-server-core-api-ticket/src/main/java/org/jasig/cas/ticket/registry/TicketRegistryState.java\nhttps://github.com/Jasig/cas/pull/1588#discussion_r55120394:\n\n@@ -15,7 +15,7 @@\n      * @return Number of ticket-granting tickets in the registry at time of invocation\n      *         or {@link Integer#MIN_VALUE} if unknown.\n      */\n-    int sessionCount();\n-    long sessionCount();\n\nMost sessionCount() impls do this:\ngetTickets().stream().filter(t -> t instanceof TicketGrantingTicket).count();\nthat returns a long.\nAlso, theoretically it's possible for the session count to be a long if\nyou have a billion sessions available and thousands and thousands of\ntransactions going through. As such, the API here would simply bomb with an\nint.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1588/files#r55120394.\n. \"Polluting\" with Spock? No, it only makes the project tests \"prettier\" :-) Glad that from now on we could use Spock for testing :+1: \n. Well, if we go with long, then this cast should be removed.\n. Remove int cast \n. Honestly, don't know. What is the use case?\n. It's done as usual by mapping #{null} in deployerConfigContext. Has nothing to do with aliases. This is just a convenience of externalizing the current aliases mapping so folks don't have to deal with yet more XML dancing when enabling different modules relying on these aliases. \n. No :-) This was the most convenient thing for me :-) What shell scripts? Can you point out where I could add it?\n. Cleaner. Deployers don't have to have this alias mappings \"polluting\" their deployerConfigContext. I personally DO prefer the cleaner/thinner deployer context\n\nOn Fri, Apr 8, 2016 at 06:53, Misagh Moayyed notifications@github.com wrote:\nIn cas-server-webapp/src/main/webapp/WEB-INF/casComponentsMapping.xml [https://github.com/Jasig/cas/pull/1676#discussion_r59008790] :\n\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n\nWhy a separate file?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1676/files/9c8a4b49aee43d91c0113ec6f61045218cf9e71f#r59008790]\n. It's no problem for CAS to have a focused XML file for these mappings (on the grand scheme of things), but a huge advantage (IMHO) for deployers that they don't see this \"plumbing\" in their deployer config, so it's narrowly focused on their custom CAS artifacts\nOn Fri, Apr 8, 2016 at 06:56, Misagh Moayyed notifications@github.com wrote:\nIn cas-server-webapp/src/main/webapp/WEB-INF/casComponentsMapping.xml [https://github.com/Jasig/cas/pull/1676#discussion_r59009020] :\n\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n\nLet me clarify: I understand why you chose a separate file. My concern is:\n1. Should this be something an overlay could do, rather than CAS?\n2. Yet another XML file?\n3. Do we ever see the need for a deployer to overlay this new XML file? If so, why not keep it in the deployer, and limit the configuration to one xml file only?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1676/files/9c8a4b49aee43d91c0113ec6f61045218cf9e71f#r59009020]\n. Let me put it this way - it's a way to hide these internal mechanism of aliasing and abstracting it by using simple properties\nOn Fri, Apr 8, 2016 at 07:04, dima767@gmail.com dima767@gmail.com wrote:\nIt's no problem for CAS to have a focused XML file for these mappings (on the grand scheme of things), but a huge advantage (IMHO) for deployers that they don't see this \"plumbing\" in their deployer config, so it's narrowly focused on their custom CAS artifacts\nOn Fri, Apr 8, 2016 at 06:56, Misagh Moayyed notifications@github.com wrote:\nIn cas-server-webapp/src/main/webapp/WEB-INF/casComponentsMapping.xml [https://github.com/Jasig/cas/pull/1676#discussion_r59009020] :\n\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n\nLet me clarify: I understand why you chose a separate file. My concern is:\n1. Should this be something an overlay could do, rather than CAS?\n2. Yet another XML file?\n3. Do we ever see the need for a deployer to overlay this new XML file? If so, why not keep it in the deployer, and limit the configuration to one xml file only?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1676/files/9c8a4b49aee43d91c0113ec6f61045218cf9e71f#r59009020]\n. OK, I could do that\nOn Fri, Apr 8, 2016 at 07:08, Misagh Moayyed notifications@github.com wrote:\nIn cas-server-webapp/src/main/webapp/WEB-INF/casComponentsMapping.xml [https://github.com/Jasig/cas/pull/1676#discussion_r59010017] :\n\n@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:util=\"http://www.springframework.org/schema/util\"\n\nI would feel better if you moved the monitor list out and back into the deployer. That is something a deployer would need to set more often the aliases, and is not so much about mapping aliases.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1676/files/9c8a4b49aee43d91c0113ec6f61045218cf9e71f#r59010017]\n. Sure thing\nOn Fri, Apr 8, 2016 at 07:18, Misagh Moayyed notifications@github.com wrote:\nIn dev-install-locally-no-tests.sh [https://github.com/Jasig/cas/pull/1676#discussion_r59010910] :\n\n@@ -0,0 +1,3 @@\n+#!/usr/bin/env bash\n+\n+./gradlew clean install -x test\n\nThis one for instance:\nhttps://github.com/Jasig/cas/blob/master/dev-build-no-tests.sh [https://github.com/Jasig/cas/blob/master/dev-build-no-tests.sh]\nYou added these, remember? :D\nI have no objections to the change, just the organization of it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1676/files/9c8a4b49aee43d91c0113ec6f61045218cf9e71f#r59010910]\n. I'll test it out. Install should build it as well, shouldn't it? Will do\nOn Fri, Apr 8, 2016 at 07:19, Misagh Moayyed notifications@github.com wrote:\nIn dev-install-locally-no-tests.sh [https://github.com/Jasig/cas/pull/1676#discussion_r59010972] :\n\n@@ -0,0 +1,3 @@\n+#!/usr/bin/env bash\n+\n+./gradlew clean install -x test\n\nYou could likely turn the existing script into:\n./gradlew clean install -DskipAspectJ=true -x javadoc -x test\nWould that work?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub [https://github.com/Jasig/cas/pull/1676/files/9c8a4b49aee43d91c0113ec6f61045218cf9e71f#r59010972]\n. Nope. Checkstyle is happy. Ran the entire CAS server build (with all the tests) locally before pushing. ;-)\n. It WILL FAIL. The SSL handshake with cacert.org. It now has a bad cert or something. If you really want the entire build to fail because of the dependency on some un-stable or rogue internet resource - sure I could turn it back on ;-)\n. I don't know. I haven't pushed it with it enabled to find out. Well, anyway, let me enable it, push it and then we'll see\n. Who cares? ;-) OK, I'll make your day - will change it ;-)\n. I'd do this with J8 stream style, not this imperative style\n. Same here I.e. stream style\n. Ah, got ya. I was also confused about int return type vs long. It's 4.2. OK, nothing to see here. Carry on :-)\n. Sure thing that it might not be feasible today, but I'd second Misagh's sentiment that this code duplication might not be the best thing we could do here. \nI think we need to think hard how to accommodate this use case and refactor the internal/external API and flow to achieve that. We have the luxury of the major release here so we could make any numbers of necessary breaking changes and we need to take advantage of it. \n. Even though the concurrent hash map is used, the impl might not be thread safe. Might need to synchronize on this field in verify and submit methods to promote a consistent visibility between reader and writer threads. \n. OK, thanks to the IntelliJ IDEA, it pointed out that this method is identical to this one -> https://github.com/Jasig/cas/blob/master/cas-server-support-ldap-service-registry/src/main/java/org/jasig/cas/adaptors/ldap/services/LdapServiceRegistryDao.java#L272 ;-)\nSo, duplication... Yuk ;-) An opportunity to refactor this search request factory method into a reusable component somewhere. LdaptiveUtils or LdaptiveObjects (in the spirit of the modern utility classes naming patterns), etc.\n. And I also wonder about those \"generic\" LDAP methods in there like getConnection, searchForId, executeSearchOperation, hasResult - may be good candidates to lift those into an Ldap utils or a reusable component, leaving only the business logic code in here utilizing those infrastructural components. And who knows - those could be reusable. I could think of one use case with CAS customization that I was working with where I'd need to use Ldaptive search capabilities and this would be very useful. Perhaps an LdaptiveTemplate ala Spring's *Template classes, etc.\n. OK, in the spirit of being consistent with functional style through the code base, this imperative style could be refactored with functional style like this:\n``` java\nAttributeModification[] mods = \n                        entry.getAttributes()\n                        .stream()\n                        .map(attr -> new AttributeModification(AttributeModificationType.REPLACE, attr))\n                        .toArray(size -> new AttributeModification[size]);\n            final ModifyRequest request = new ModifyRequest(currentDn, mods);\n\n```\nI do realize this is for 4.2.x, but just to have a record here when this will be going into the master...\n. Why does it have to be a @Configuration and exposed as a \"public API\"?\n. Also, I started to prefer constructor injection vs direct field injection. There are quite a few argument against field injection out there in the inter-tubes. Here's a good one: http://olivergierke.de/2013/11/why-field-injection-is-evil/\n. And also, why don't we make this class a package-private? It's not really a \"public API\". And more general note: would be good a idea to start making package-private other \"internal\" CAS components\n. Just a note on the unrelated work I'm doing on another - I do the opposite i.e. replacing the use of @Resource with @Autowired @Qualifier combination to be consistent throughout our config infrastructure \n. For consistency and also @Resource did not work for me in some scenarios (don't remember which. Could be constructor injection, etc.). In general @Autowired is more powerful and leverages the full power of Spring, etc. Let's pick an autowiring injection style and stick to it.\n. Thank you!\n. Otherwise, +1 on the change from me.\n. Should this instance be made static instead for the JPA blob deserialization ?\n. Are we sure it's a good idea to bring the implementation from spring integration project here? Seems like this impl has been designed for different purposes within the integration and messaging domains...\nhttp://docs.spring.io/spring-integration/api/org/springframework/integration/transaction/PseudoTransactionManager.html\n. If anything - and there is a need for noop platform tx manager impl in some of our subsystems, I'd just copy and maintain it locally: https://github.com/spring-projects/spring-integration/blob/master/spring-integration-core/src/main/java/org/springframework/integration/transaction/PseudoTransactionManager.java - it's just a noop anyway, rather than bring entire spring integration dependency. That, IMHO would result in less maintenance complexity\n. \"If you don't want to use cas-server-support-bom...\" instead\n. And also it'd be nice to generate a list of all the dependencies and versions provided by the BOM... somehow?\n. I'd then make this method private\n. Make it private\n. Will add the link, but that will require compile dependency on the module in question :-)\n. Oops... Will add :-)\n. Yeah, this messed up my IDEA debug config, as I run CAS app within IDEA. This is really not necessary. I'll remove it altogether. \n. I totally agree with Misagh. The schema, keyspace, etc. should all be treated as internal implementation detail and not \"leaked\" into deployer's configuration space. For API documentation purposes, it wouldn't hurt.. Will do. Will check. OK, traced through the code. According to current impl. only the token could be null. Pushed the change.. Why does the interface need to depend on the SWF RequestContext? If it does, I'd move the definition of this API into web.flow package, otherwise, don't \"leak\" SWF types outside of that package.. \ud83d\udc4d To web.flow package then. Calling get on Optional without first checking with isPresent and co. might result in NoSuchElementException. \ud83d\udc4d. The variable name - may be something different? \ud83d\ude03. May be the name of the class to be more clearer something like CasServerApiBasedTicketValidator ?. ",
    "mmoayyed": "+1\n. screenshots are attached to the original JIRA entry: https://issues.jasig.org/browse/CAS-1086\n. Closing CAS1086 to create a new pull request containing only the clean commit. \n. Sure, will do so and will open up a new pull request with the renamed module name. \n. In further discussion with Bill Thompson and Andrew Petro, it was decided to attempt to uncomment the changes as much as possible, merge config files where needed and yet leave the final turn-on switch in in the deployer config file. This facilitates the adoption of clearpass, using the standard maven overlay method.\nI will shortly provide a new pull request that encapsulates the proposed changes. \nMisagh\n. Sure. There will be a certain level of maintenance required for existing patterns. Going for CAS 3.5 and the minor version change, I am hoping the effort will be rather obvious to adopters.\nI will modify the commit to use a precompiled pattern when the service id is set. \n. Scott, I'd be happy to apply fixes/suggestions to the pull. In terms of code conventions, is there a particular style documented somewhere that I can conform to? \nPost-Edit: Found this, https://wiki.jasig.org/display/CAS/Code+Conventions\n. Will open up a new pull request. \n. Based on Marvin's comment, should we then fix the substring length at 255 just to be safe? \n. No longer relevant, as the module is now deprecated and scheduled for deletion. \n. Relates to https://github.com/Jasig/cas/pull/697\n. Discussed on the list. It was decided to have the servlet and filter mappings removed from the web.xml by default. I have updated the wiki here: https://wiki.jasig.org/display/CASUM/ClearPass\n. Sure. In fact, I think [not sure completely] there are a number of other properties that not placed in the cas.properties file which users may not know about. I'd like to open up a separate JIRA though to collect all missing properties into cas.properties. How does that sound? \nI am in favor of the default value though. I think that is still consistent with the way properties are defined, for instance in ticketExpirationPolicies.xml. For instance, ${tgt.maxTimeToLiveInSeconds:28800}\n. No problem. I'll compile a list of missing props and post back to @cas-dev.\n. +1\n. In the JIRA, could you please describe the motivation for this change? For instance, are you getting a particular error stacktrace, etc? \nOne thing that comes to mind is, the parameters being returned as string[] did cause an issue for the CAS login form, when the required fields were missing from the submission request. This was recently fixed in the codebase though. \nAfter having looked through the code and chasing the issue down in spring-webflow, it appears that webflow does a poor job of parsing parameter maps using a particular instance of LocalAttributeMap that does not account of multivalued elements. (It used to do this correctly in 1.x but for some reason the change was dropped in 2.x as far as I have learned) If this is not a pressing issue (i.e. causing an exception stack or preventing functionality) I'd rather we fix this at the webflow level and contribute the fix over to their project, or, see if upgrading to the latest version (since I think we are a revision behind) fixes the issue. \n. +1. \n. Looks good. +1.\nWhile we are at this, could I propose that we take a scan through the pom and adjust the plugin versions as well, so there are less warnings? \n. I understand. I can certainly work with null but I also have to modify the \nUI to allow the user to clear the attribute name if one is set.\nSo, in summary:\n- return the list of attribute names without (default)\n- remove the constant and store as null\n- add a mechanism to the UI such that radio buttons (or something else) are \n  cleared and binding value is reset to null.\n- Check for NPE where the getter tries to retrieve the username attr.\n-Misagh\n\n-----Original Message-----\nFrom: Scott [mailto:reply+i-5911164-\nb2b6421dc7033c3512bbc59b13b88a9001c7cf5f-1205228@reply.github.com]\nSent: Monday, August 06, 2012 11:51 AM\nTo: Misagh Moayyed\nSubject: Re: [cas] CAS-999: per-service selection of username attribute\nto release... (#93)\nI don't see what a radio button has to do with what we store.  You\nshould be able to determine/handle a radio button without having to\nstore \"(default)\" [which also isn't very internationally friendly]\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93#issuecomment-7532046\n. I suspect that prop editors do this already. Once a selection is cleared, I \nthink the binding should automatically reset the field to null as the field \nis removed from the request but I'll have to test this to be 100% sure. At \nleast, I know checkboxes work like that. Radios should be similar.\n\nAs for NPEs; sure :)\nI'll work on the changes this evening. Should be pretty minimal.\n-Misagh\n\n-----Original Message-----\nFrom: Scott [mailto:reply+i-5911164-\nb2b6421dc7033c3512bbc59b13b88a9001c7cf5f-1205228@reply.github.com]\nSent: Monday, August 06, 2012 12:15 PM\nTo: Misagh Moayyed\nSubject: Re: [cas] CAS-999: per-service selection of username attribute\nto release... (#93)\n- return the list of attribute names without (default)\n\n\nCool\n- remove the constant and store as null\nCool\n- add a mechanism to the UI such that radio buttons (or something else)\n  are cleared and binding value is reset to null.\nSpring Binding / Property Editors should already support this type\nof thing.  Do they not?\n- Check for NPE where the getter tries to retrieve the username attr.\nIdeally, we should be looking for null and not waiting for an NPE :-\n)\n\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93#issuecomment-7532671\n. So aside from JPA annotations, decided to switch to switch to a combobox for \na selection of the username attribute, adding a blank item to denote the \ndefault. Turns out, Spring does not like radiobuttons when they are left \nunchecked, unlike checkboxes regardless of prop editors. The value is never \npassed.\n\nCombos are better fit anyway, especially if many attributes are available.\n-Misagh\nFrom: Scott [mailto:notifications@github.com]\nSent: Monday, August 06, 2012 1:17 PM\nTo: Jasig/cas\nCc: Misagh Moayyed\nSubject: Re: [cas] CAS-999: per-service selection of username attribute to \nrelease... (#93)\nJust to follow up before I forget: not having JPA annotations on those\nother fields was a mistake (and it generates horrible field names) so\nplease put one on the new field you added to match what was done with\nevaluation order.\nThanks!\nScott\nOn Mon, Aug 6, 2012 at 3:27 PM, Misagh Moayyed <\nreply@reply.github.com\n\nwrote:\nI suspect that prop editors do this already. Once a selection is cleared, \nI\nthink the binding should automatically reset the field to null as the \nfield\nis removed from the request but I'll have to test this to be 100% sure. At\nleast, I know checkboxes work like that. Radios should be similar.\nAs for NPEs; sure :)\nI'll work on the changes this evening. Should be pretty minimal.\n-Misagh\n\n-----Original Message-----\nFrom: Scott [mailto:reply+i-5911164-\nb2b6421dc7033c3512bbc59b13b88a9001c7cf5f-1205228@reply.github.com]\nSent: Monday, August 06, 2012 12:15 PM\nTo: Misagh Moayyed\nSubject: Re: [cas] CAS-999: per-service selection of username attribute\nto release... (#93)\n- return the list of attribute names without (default)\n\n\nCool\n- remove the constant and store as null\nCool\n- add a mechanism to the UI such that radio buttons (or something else)\n  are cleared and binding value is reset to null.\nSpring Binding / Property Editors should already support this type\nof thing. Do they not?\n- Check for NPE where the getter tries to retrieve the username attr.\nIdeally, we should be looking for null and not waiting for an NPE :-\n)\n\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93#issuecomment-7532671\n\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/93#issuecomment-7533017\n\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Jasig/cas/pull/93#issuecomment-7534418 .\nhttps://github.com/notifications/beacon/xIh4VQSLXYRoprDgzIcjMzNrPzHDaFPiU53xODEXFNu9x-Yum3uVf-s1YvN39Zg6.gif\n. +1\n. They certainly do :D I'll assign the pull to you. \n. I will go ahead and merge this one in. Dont suppose there are any objections, moving ahead on lazy consensus. \n. +1 to commit [ w/ comments in place]\n. J\u00e9r\u00f4me, I think you might have to merge with master before this one can go in. \n. +1\n. I'll close this one and create a new pull without the additional formatting noise, etc. \n. This seems like it is a reasonable change based on the discussion above and the behavior that browsers present. I am not sure if there is any harm in merging the change to accommodate for strange browser behavior to some degree, and it looks like a number of folks have already applied and ran with this change.\nI had one comment on the changeset, but other than that,  I think it's reasonable to merge this. \n. Well, even if we do, 1) it probably would take a while to get the fixes in place (assuming  browser vendors are convinced and accept that this is in fact weird behavior), 2) cant exactly assume that everyone runs the latest browser release with the fix in place, and 3) which browser?! \nAt any rate, I am not saying defect reports should not be filed. Of course they should and I do agree that this is certainly is browser related and outside of responsibility of CAS per se. But in the meantime, a little bit of compromise on CAS side should make folks slightly more comfortable. \n. Hmmm...Not sure I follow. The use case I have in mind, and is one that is closely related to the description above is that you'd have CAS protected links with anchor fragments; those that are for instance: http://www.example.com/index#someAnchor right? The fragments are needed for the \"example\" app to work or at least to drive the user experience correctly.\nNot sure I understand how unwanted fragments may be passed around? \n. Closing, moved to manual instead:\nhttps://wiki.jasig.org/display/CASUM/Preserving+URL+anchor+fragments+on+login+form+submission\n. This is permanent, ready to be code reviewed. \n. This pull is also ready for a merge, if there are no further objections and/or comments to be addressed. \n. Added new commit, having applied Scott's comments. \n. Cool beans! I'll circle back tonight, have the fixes pushed up and will attempt to merge. Thanks for the review!\n. I realized that the commit message is not visible at all. Adding it here to emphasize the additional change made on top of the fixes pointed out\n\nAdditionally, I had to modify the test resources a bit for ehcache to allow for the surefire plugin's forkmode. Without this setting, two particular tests would always fail when attempting to delete tickets when running the test from cas-server root.\nThe two tests that fail without the forkMode setting are:\ntestDeleteExistingTicket(org.jasig.cas.ticket.registry.EhCacheTicketRegistryTests):\ntestDeleteNonExistingTicket(org.jasig.cas.ticket.registry.EhCacheTicketRegistryTests):\n. A bit more verbiage on the topic: as the code change suggest the execution behavior of all tests is not changed at all. The forkMode setting should be exclusive to the ehCache module. The code only allows a level flexibility such that the module can override default settings through plugin management capabilities of the pom. \n\nIf there are no other objections, I'd like to go ahead and merge this one in. \n. Thanks guys. I believe all comments and suggestions are accounted for. I will attempt to get this one merged tonight, if someone else doesn't get to it already :)\n. Sorry, I dont quite follow. Are you referring to the Fluid reorderer? \nAs for duplicate evaluation orders, I would say that having two services with the same order should be considered an error and the service should not be allowed at all unless a unique order is assigned. \n. We don't, but I think it's good idea and that we should. Separate JIRA? same? \nAs for the Reorderer, I have that on my TODO list to tackle and evaluate soon, possibly even this weekend. This small commit though I think is an evolutionary small improvement to the UI on its own and helps with diagnostics. \nI'd like to create a separate JIRA for the Reorderer, but before anything, I'd want to really evaluate once again whether or not we can do away efficiently with the order property . I am not yet confident 100% that we can, so this modest improvement for now may just be sufficient. \nDoes that make sense? \n. Just a quick update: I intend to get started with the reorderer this weekend and categorize the work under a new JIRA task which also encapsulate adding DnD support to the UI. \n. Working on Reorderer support and DnD under the following issue:\nhttps://issues.jasig.org/browse/CAS-1162\n. I am going to close this pull request and include it in 1162. \n. J\u00e9r\u00f4me,\nI am wondering if we can perhaps append query parameters such as 'theme', etc to a clone of the service with the callback url adjusted with the parameters? \nRemoving the final is a reasonable idea, but that'd also mean that all clients would inevitably have to do custom coding to accommodate the change. \n. The callback url, as I understand based on the JIRA description, that it'd be the url where the theme for instance would be appended to. Is that correct?\nIf so, since you know the baseProvider, can we perhaps clone it and append query parameters? \n. Thanks for the update. I am in favor of this approach, with one small caveat. Let me first confirm my understanding with you before getting deeper into the topic:\nIt seems like custom request parameters would be lost. Working directly off of the JIRA issue, what would happen if I had:\nhttp://localhost:8080/cas/login?theme=mytheme&hello=world&someParam=1\nAm I correct in understanding that custom request parameters would be lost in the above approach? Is this scenario realistic and if so, are we prepared to accept the drawback that only certain specific parameters would be preserved? \n. Thanks. I am +1 on this and like this approach better for the regular parameters. As for those that would be lost, we could tackle that at some point later on if needed at all. \nIf you'd like to adjust the code for javadoc issue, I think this should be an easy one to merge in.\n. Team, if there are no objections, I'd like to go ahead and merge this one given that enough time has passed since the original submit and it appears that all comments are accounted for and addressed by Jerome. \n. Addressed comments posted by Scott. Ready for further evaluation. \n. Team, would like to go ahead and merge this one if there aren't any further objections.  Scott has done a fairly detailed review and all his comments should be accounted for. Of course, would be happy to resume work on the pull if there are additional comments to address, but I am hoping that we could get this one merged in by Monday or even earlier :)\nThanks. \n. Latest commit uses status code 412 for ajax calls, and uses native try/catch blocks instead of the commons validator. \n. Pushed a new commit that removes the exception handling mechanism and relies on the toolkit to do so. Simpler and easier to manage. \n. So, in light of the last commit is there anything else that can be improved with this pull? May I assume that all comments are accounted for? \n. Sweet! Merging away...\n. +1\n. Any particular comments or issues with this pull? Is this in decent enough shape to merge? \n. Thanks. Closing pull. \n. This might also be cool to look at: https://github.com/Jasig/sass-maven-plugin\n. Thanks Jacob. I'll attempt to get this one merged tonight unless there are any objections in between. \n. Done.\n. I just realized that the comment in the property file should probably say \"Periodic\" instead of \"Period\". \n. Merged with Scott and Jerome's reviews in place.\n. Not for Eclipse, but the coding conventions are here: https://wiki.jasig.org/display/CAS/Code+Conventions\nI suppose it's pretty similar to the Eclipse default style. \n. +1\n. +1\n. +1\n. Thank you for the pull request. I posted a number of comments for your review.\n. Awesome. +1\n. I posted a few minor comments for your review. Overall, I like it. Less config all together. \n. +1\n. +1\n. +1\n. +1\n. +1\n. @battags I think this pull requires a 2nd merge. Would you mind? \n. Good to go here. \n. +1\n. +1\n. I think this is also a good merge candidate. What is the status of this pull? Should we merge? \n. Thanks. I'll merge this by EOD unless there are other concerns around the pull. \n. +1 with one small improvement. \n. Looks like all fields are nullable by default. This probably breaks existing schemas that are to upgrade, but I still think it's a good re-enforcement in that those fields should never have NULL in them even if the column permits that value. Moving away existing data in a given schema to the one in the pull isn't really that much work either. \n+1. \n. +1\n. +1\n. Thanks. This is great. I had some minor comments, but I think we can start extracting stuff out. I'll fork your repo over and see if I can contribute to anything useful. \nJust a side note, once this is all we should circle back to the docs and explain how this new app may be deployed alongside cas itself as an option. \n. +1\n. +1\n. No problem. I'll hold off on this for now and will revisit later. \n. Thanks. This does help. Let me run through the bug report once more and if it turns out to be pointless, I'll close the pull. \n. I ran through the bug report. What I experienced before the 2nd commit was, by default German [my browser language] was the default locale but I was able to click on English to switch over. \nI then proceeded to specify the default locale to be english in case no cookie is found by the resolver. Then, not only the default was English but I was able to switch between languages by clicking on German/English links. \n. Yes. My tests were done under messages.properties file and I do see the proper behavior where the language of the UI correctly changes depending on the selected locale from one of the links.\nIn summary:\nIf the browser's locale by default is English:\n- By default the UI renders in English. \n- Clicking on any of the language links switched the text to be from the appropriate selected bundle.\nIf the browser's locale is not English by default (German in my case):\n- By default the UI renders in English. (This can be configured so that the browser language can be the default, but I have forced it to be English by default)\n- Clicking on any of the language links switched the text to be from the appropriate selected bundle.\nTests were done for both Firefox and Chrome. \n. Sure. Reselecting English after having selected another language also works and the text is displayed in English again. \n. Great. I'll wait until EOD to see if there are any other concerns and then will attempt to merge. Since 1183 was just merged in, I'd like to finalize all the webapp related changes as much so @leleuj  can proceed further. \nForgot to mention, that a bug in Spring was my thought too. I haven't looked closely yet, but the bug report is about a year old and it's very likely that something got fixed in between. \n. Merging pull after having responded to all comments and concerns. \n. This wont fail the build. You can actually have it fail the build by providing a config parameter that says <warnOnly>false</warnOnly>. The value of that parameter by default is true. \nThis is run automatically. I run a pretty outdated machine and have had no performance issues but of course, as we start fixing stuff in the language bundles we'd see less and less debug output in the build and so better performance to be gained. Running it automatically also removes the burden from the developer to have to remember to run this tool and becomes automatically perhaps, a part of submitting a pull request. \nBetter documentation: https://github.com/mmoayyed/maven-translate-plugin\n. Closing this one for now to be later handled by the changes in the 4.0 branch.\n. Looking into a test failure that's caused by this changeset: \ntestResponse(org.jasig.cas.authentication.principal.GoogleAccountsServiceTests): Inappropriate key specification: IOException: DerInputStream.getLength(): lengthTag=111, too big.\n  testNoService(org.jasig.cas.web.support.GoogleAccountsArgumentExtractorTests): Inappropriate key specification: IOException: DerInputStream.getLength(): lengthTag=111, too big.\nNot sure yet. Will have an update by tomorrow. \n. I do agree that this is certainly not the most flexible option to use. I merely like the fact that there is a central place where I can manage logging levels and wanted to offer up a possible solution. I am perfectly open to other ideas and suggestions that we could improve this. \n. Nevertheless, one we can extract out of this pull is an update to the port and a bump to surefire plugin version. \n. Closing this one for now. May be addressed later through a more elegant and easier to configure solution. \n. +1\n. If I understand your question correctly, the message that is displayed is statically always retrieved from the bundle and it does not include any dynamic parameters. That only \"dynamic\" thing that affects that is the exception indicating the message code:\nmessageContext.addMessage(new MessageBuilder().error().code(e.getCode()).defaultText(e.getCode()).build());\nSo, it does not differentiate between parameters (such as that of the form's) and html code, but there are no parameters unless the above line is modified by an adopter to pass in various parameters and args when building that message. So, it seems to me that this is not violating any security principals, but if someone chooses to modify the error to actually display sensitive data, then the onus is on them.\nDoes that make sense? \n. I am going to further look into this and see if what Scott suggests can be duplicated. I'll report back in a little bit. \n. I reviewed and tested the original changeset with a mocked exception throw that returned sensitive data in its message. What I realized was, the default text that is displayed in case no code is found by the AuthenticationViaFormAction, under certain conditions, actually turns out to the exception message itself. \nIn the next pull, this is what I have done:\n- Refactored AuthenticationException and TicketException to reduce duplicate code and unify the behavior around getCode() for both\n- Refactored AuthenticationViaFormAction to fall back to a default message code, rather than the exception message. \n. So, are you saying that instead of using BadCredentialsAuthenticationException.CODE, we should be using a better error message? Or, are you saying that the usage of BadCredentialsAuthenticationException.CODE is fine, and we just need a better \"default\" text in case the code mapped to BadCredentialsAuthenticationException.CODE isn't found? \n. I understand. I think this pull, in the way that it reorganizes the exception hierarchy and in particular, the way it re purposes getCode() should adequately address both concerns. I'll also account for the change in the default text in the newer pull. \n. I have updated the default text message which may be displayed back to the client in case BadCredentialsAuthenticationException.CODE isn't found. \n. Planning to merge this one by EOD, unless there are other concerns around the pull. \n. Yes. I think that would be reasonable. \n. Team, are there any objections and/or concerns around this pull? Could I go ahead and merge? \n. Planning to merge this one by tomorrow, if there are no objections or issues. \n. Thanks\n. Merging pull request automatically, as an extension to CAS-1200 which was previously merged in. This is just a super minor change that updates the maven translate plugin to now use the messages.properties file instead of messages_en.properties file. \n. I am not seeing that behavior, but let me double check once more. \n. Update: I cloned your repo, checked out CAS-1183 and deployed. I then installed the French language pack for firefox and switched the browser language to french. Restarted FF, everything is in french.\nThen accessed CAS for the first time. Everything displayed in English. I then clicked on French, the UI displayed in French. Clicked English again and the UI switched to English. \nIs that not what you experience? I wonder if it has anything to do with the default OS locale, which I think is French in your case? Even so, the default locale is set to be english. So when the cookie resolver finds no cookies for the locale, it should automatically force you to be english. In the absense of no cookies and without the default locale setting for the cookie resolver, it would have displayed the UI in french. \n. May I recommend the following?\n- Grab the source of the CookieLocaleResolver and place the contents in a CAS package. (org.jasig.cas.web.CookieLocaleResolver)\n- Change the reference to the class in cas-servlet to point to the new class you put together above\n- Set a breakpoint in resolveLocale() and examine what locale is returned. If there's no locale cookie found, the method should return the default locale which is EN. \nIf I can help in any way, please let know.\nYou can grab the source form here:\nhttp://www.grepcode.com/file/repository.springsource.com/org.springframework/org.springframework.web.servlet/3.1.2/org/springframework/web/servlet/i18n/CookieLocaleResolver.java#CookieLocaleResolver\n. Thanks for the output log. I didn't see anything that would stand out. Would you mind setting a breakpoint in org.springframework.context.support.ResourceBundleMessageSource and see what locale it's receiving? \n. Sure. I'll give it a shot tomorrow morning. \n. So, here's what I have done so far:\n- In Tomcat's catalina script, specified the following:\n  SET JAVA_OPTS=%JAVA_OPTS% -Duser.language=fr -Duser.region=FR\n(Is there any other way I could force the locale to be non english?)\n- In the CAS login view, added the following line:\n  <%= java.util.Locale.getDefault().getDisplayName() %>\n- Switched Firefox to French as well, cleared all cookies and history.\n- Accessed CAS on a first try:\n  Everything renders in English\n  The page for the default locale, displays: fran\u00e7ais (France)\n- Clicking back and forth between language links correctly switches the language.\nI'll dig deeper by setting breakpoints here and there. \n. Update: something really strange just happened. I was planning to update to Spring 3.1.3 and then deployed everything to Tomcat. Now, all of a sudden, everything is displaying in French which is the JVM default. \nhttp://docs.oracle.com/javase/6/docs/api/java/util/ResourceBundle.html#getBundle(java.lang.String, java.util.Locale, java.lang.ClassLoader, java.util.ResourceBundle.Control)\n. OK, I managed to duplicate the problem. Turns out, it's a very easy fix:\n<bean id=\"messageSource\" class=\"org.springframework.context.support.ResourceBundleMessageSource\"\n          p:basename=\"messages\" p:fallbackToSystemLocale=\"false\" />\nI'll put this into the next pull along with the spring version update to 3.1.3 (which has also fixed bug wrt resource bundles) \n. @leleuj , would you mind updating this pull request so it can be merged?\n. +1\n. Merging with master and submitting a second pull. \n. They are not tied to each other at all. Sure. I will keep this one to have just the Spring version bump and then will have the message bundle change in a separate JIRA. Pulls coming!\n. @leleuj , no problem. \n. OK. I was a little too quick to judge! It turns out, the property is indeed only available in 3.1.3. So, I'll add the setting back, update the JIRAs and will see if I can do the same change in the management webapp. \n. I added the subtask of disabling the fallback mechanism to the JIRA CAS-1210, added comments around the setting and did the same for the management webapp. \n. Having received reviews by Scott and Jerome, will merge by EOD, unless there are objections. \n. @leleuj , would you mind testing this one out please with the new ports for ehcache config? I am hoping that tests now all run successfully and the ports dont cause a conflict. If you do get a chance to run this, please post back. \nThanks :)\n. Very cool. Merging this one then. Thanks!\n. Planning to merge by tomorrow EOD, unless there are objections.\n. Absolutely. I have been working on the change on and off. So far, it looks like the github API that the plugin uses is too limiting for the number of blobs it creates to push for CAS. The limit is about 5000 and CAS is much larger than that. I am playing around to see if I can find a workaround. Hopefully, this can all be automated. Otherwise a manual push to gh-pages branch would do the job. \n. I am preparing a sample in my own repo to be included in the JIRA/Pull before I submit. Should be by the end of this week if not earlier. \n. Well, no reason in particular. I was chasing a couple of build warnings in my dev environment that eventually turned out to be related to the maven's aspectj connector. In the process, I had bumped the plugin version to the latest to see if that would fix it, and then decided to commit anyway. \nMerging change. \n. Thanks @leleuj. I'll merge. \n. Planning to merge by tomorrow EOD, unless there are objections.\n. Would you mind describing the use case for the change please? In the JIRA, I see that this can be useful for the .NET OAuth client? How so? which client are you referring to?\n. Thanks for the update. One question: Does it make sense if we expose the content type through a setter() method as a property with default being application/json? I am just thinking certain other clients might expect the content type to be something else and that configuration might ease integration. Does it make sense? \n. Great. Thanks. Looks good +1. \n. +1\n. Thanks. I'll merge and push. \n. Doing this separately from this pull to reduce noise. \n. By default, you could try putting the text into the English bundle for now and ignore the other language bundles for now. \n. Pulled and deployed. Looks pretty good. +1. \nWill attempt to merge by EOD, unless there are other concerns that need to be addressed. \n. +1\n. +1\n. +1 here. \nRan a quick smoke test. Looks OK. \n. I just realized an issue:\nThe CAS management webapp changes has removed a number of properties from the cas.properties file of the cas-webapp. Specifically, server-prefix. This breaks clearPass as it references that property key in the clearpass-configuration.xml file. \nCould this be fixed in the next pull? \n. Sounds good. I can take that one: https://issues.jasig.org/browse/CAS-1233\n. Thanks. Looks great. \n. Absolutely. I was just thinking the same thing. I think the doc and the diagram must eventually even be useful for adopters as well since the flow of this all could be somewhat complicated. I'll see if I can put together something. \n. Discussing changeset and plan on @cas-dev. Will close and submit separate pulls breaking the feature apart for easier review. JIRA will not change, but will be enumerated for every pull. \n. P.P.S: Just for housekeeping, here's the set of notes on LPPE:\nhttps://wiki.jasig.org/pages/viewpage.action?pageId=55543468 \n. Team, assuming everyone's OK with the changeset, I'd like to merge by EOD tomorrow if possible.\nPinging @battags and @serac for reviews/feedback. \n. +1\n. Thanks for the clarification. Could I take it then, that this pull as is, is a good candidate for merge? or are there any other recommendations? \n. Jerome, could you merge once more with master please? \n. +1 with one minor comment: Could we perhaps rename the module to be cas-server-management-webapp for consistency? \n. Not really. Everything else looks good. I pulled the branch and deployed. All is well :)\n. Waiting for this pull to finalize so I can start breaking down the LPPE pull requests. \n. +1\n. Closing as this now exists X509SubjectAlternativeNameUPNPrincipalResolver\n. Merging...\n. Fixed formatting issues with the pom.xml in the 2nd commit. \n. +1\n. They should have been moved to the management webapp. Currently, they are used with ajax D&D functionality of the svc registry only. I went ahead and ported your changes into a new pull, and added your suggestions: https://github.com/Jasig/cas/issues/191\nWill update the JIRA as well. \n. Sure. I dont see why not. \nOnce it's addressed and merged into master, can I merge #191 with 3.5.2? Does it have to become a separate pull that is targeted for 3.5.2? Not sure how the process works. \n. Thanks! I'll close this pull and should be able to shortly merge https://github.com/Jasig/cas/pull/191 into master. Once that's done, I'll use the same recipe above to get the pull into 3.5.x. \n. Addressed comments in a 2nd pull. \n. Pushed a 4th commit; added a new empty line and fixed issues with the webapp pom.xml\n. Team, acting on lazy consensus, I'd like go ahead and merge this into master and the subsequently into the 3.5.x branch by Friday EOD. Please speak up if there are any issues that you see with the pull. \nThanks :)\n. Planning to merge by tomorrow EOD, unless there are objections.\n. +1\n. Sure. Test cases under way...\nIn terms of real uses cases, the JIRA does outline brief scenarios. This request was also previously outlined on cas-dev mailing list as such:\n\nThe code for filtering person attributes on the basis of registered service is embedded in CASImpl.  Because of this, when I needed to change just the filtering algorithm, I had to replace the whole class.\n If changing the filtering algorithm is a more general requirement, you might want to consider making this function pluggable.\nThe current CASImpl code does attribute filtering in validateServiceTicket(), which makes sure that only principal attributes whose names exist in the list of RegisteredService allowedAttributes remain in the principal.  All other attributes are filtered out.  The local requirement at Columbia was in addition, to filter by applying a regex to the values (as opposed to the names) of certain attributes.  For example, one Registered Service might be allowed to see values of a particular course-related attribute that apply to undergraduate engineering students.  Another service might be allowed to see the same attribute, but only for values that apply to medical students.  The filtering is actually somewhat quirkier than that, but the point is, the algorithm is entirely local.\nIn the local version of CASImpl, filtering is done by a type called RegisteredServiceAttributeFilter, that is injected into the CASImpl via Spring.  It takes a Map of attributes along with a RegisteredService and returns a Map of filtered attributes.  The current behavior can be preserved by moving the existing filtering code into a DefaultRegisteredServiceAttributeFilter.  And so on.\n. The above scenario of course is role-based. We have also run into situations where we'd want to simply filter attributes for a given registered service based on their syntax and value rather than the role of the authenticated user. An example of this case might the banner system, where the authenticated user returned to the banner system is not the uid, but a specific attribute in the backend ldap system. If that system has the attribute value that is malformed and does not comply with the syntax that banner actually needs it, we could filter it out using the above chain. \n. Addressed suggestions made by @leleuj \n. I hope by reviewing the comments above, I have answered your questions. Up above as well, I had highlighted the intended purpose and requirement around providing attribute filters. Abstractions around the filtering process open up the possibility of validating attributes before they're released.\n\nAs was noted, adopters dont have to configure any additional elements because the default behavior is preserved and provided. It's only and simply moved elsewhere and is exposed as an extension point to facilitate use cases above and more. \n. Closing based on discussion on cas-dev. Will open a new pull request that would place the mapping of filters and services in the svc mgmt tool. \n. +1\n. This should be merged into 3.5.x\n. +1\n. Thanks for the pull @fjollberg \n. Thanks. Fixed. \n. No. This pull was reviewed jerome previously with a number of comments all of which are accounted for. The only remaining issue was the placement of mappings inside the registry that you raised which was done in the second version of the pull before the merge. There were no other issues bit of course if there is more to be done I am happy to comply and adjust. \nScott notifications@github.com wrote:\n\nWas this merged without comment?  That's not good.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/Jasig/cas/pull/204#issuecomment-14358529\n\n\nSent from my Android phone with K-9 Mail. Please excuse my brevity.\n. Oh sure. I'd definitely bug all the dev on the mailing list and elsewhere :D\n. will be handled by docs for now.\n. +1, documentation to follow of course. \n. Haven't grepped the code yet. Is there more? \nAt least on my end, this is a needed change because tests currently fail on me with this:\n```\nCaused by: java.lang.IllegalStateException: Conflicting persistence unit definitions for name 'CasPersistence': file:/C:/Misagh/GitWorkspace/cas-server/cas-server-core/target/test-classes, file:/C:/Mi\nsagh/GitWorkspace/cas-server/cas-server-webapp/target/classes\n        at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.preparePersistenceUnitInfos(DefaultPersistenceUnitManager.java:385)\n        at org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager.afterPropertiesSet(DefaultPersistenceUnitManager.java:346)\n        at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:254)\n        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:310)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1514)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1452)\n        ... 44 more\nResults :\nTests in error:\n  testThrottle(org.jasig.cas.web.support.InspektrThrottledSubmissionByIpAddressAndUsernameHandlerInterceptorAdapterTests): Failed to load ApplicationContext\n```\n. Without applying the patch and a full build, are you not seeing a failure? Weird. \nAs of Spring 3.1, if there's only one persistence unit the xml file is not needed. See this link item 3.12 please\nSince we are using this only for tests, it's all for the better. no cons :) unless we start using/needing multiple units which is very unforeseeable. \n. So found more files for the management webapp and the webapp itself. Will convert those as well.\n. Pushed another commit to address resource dependency between webapp and core. Removed unneeded persistence.xml file. \n. Updated JPA docs: https://wiki.jasig.org/display/CASUM/JpaTicketRegistry#JpaTicketRegistry-PersistenceConfigurationwithSpring3.1\n. Merging with updated docs and Jerome's review. \n. Pushed a second pull, addressed @wgthom's comments. \n. I am attempting to go through the cleanup based on checkstyle rules and CASImpl is the last remaining bits. Could I assume this pull is good to go for a merge, so I can resume with the cleanup? \n. Pushed to address @leleuj's comments. \n. Merged\n. I did not! Thanks. I'll grep once more...\n. Pushed a 2nd commit to fix the issues with whitespaces. I also grepped the codebase and did find a more casts, but those are usually instances of getTicket(String) and need not be modified.\n. Thanks for the pointers. My regex pattern was probably too broad. Pushed. \n. Fixed and pushed\n. Looks like there are some formatting issues after the merge with master. Closing this one, and continued here after a clean merge: https://github.com/Jasig/cas/pull/217\n. Closed, carried off the pull to here https://github.com/Jasig/cas/pull/217\n. I have to take a look and report back. There are lot of tests for CASImpl obviously, not sure there is one for this specific behavior. \n. Added unit tests. Pushed. \n. Merging with unit tests in place...\n. Merged with master and ran. All checks pass. \n. Merging...\n. Added a second commit with comment addressed.\nAs for the removal of maven translate plugin, this is because checkstyle automatically runs an audit that does exactly the same. It compares the structure of a messages.properties file with the rest of resources and reports missing ones. \nOnce the pull is merged, I'd like to go ahead with \"cleanup\" under the same JIRA. Would that work? \n. I believe the current config doesn't fail the build, but I am +1 on generally making it so, once things are sharpened to the ruleset. I imagine there will be some annoyances along the way in that a number of the regex patterns might fail for some odd weird cases but we can tackle that on a case by case basis. \n. Looks like there's general consensus around the rules. Merging this for now. will carry on with the fixes under the same JIRA. \n. Closing in favor of https://github.com/Jasig/cas/pull/222\n. My pleasure. I do see the test failure and will attempt to get it resolved today. \n. Pushed another commit that fixes the test failure. Things in general are in good shape. If you guys can confirm the build is healthy, we can merge and resume the cleanup effort across other modules. core arguably is the biggest one and the rest would take significantly less time. \n. Thanks for verifying this. I am looking into the issue. It most likely is that some regex pattern perhaps gets too complicated for the checkstyle engine and hangs up. I will have better updates by EOD. \nAs for the formatter, sure. I will attach the file once the pull is finalized. I am going through the other modules one by one and I am almost done. Just running some final tests before I push again. \n. Should perhaps clarify, that the pull is now set to fail the build should any errors pop up. \n. Pushed. Please try once more. :)\n-Misagh\nFrom: Marvin S. Addison [mailto:notifications@github.com]\nSent: Thursday, April 04, 2013 8:45 AM\nTo: Jasig/cas\nCc: Misagh Moayyed\nSubject: Re: [cas] CAS:1271: Cleaning up cas-server-core based on checkstyle \nrules (#219)\nStill getting build errors:\n[INFO] ------------------------------------------------------------------------\n[INFO] Building Jasig CAS Generic Support 4.0.0-SNAPSHOT\n[INFO] -----------------------------------------------------------------------\n...\nResults :\nTests in error:\ntestFailsUserInMap(org.jasig.cas.adaptors.generic.RejectUsersAuthenticationHandlerTests)\nTests run: 25, Failures: 0, Errors: 1, Skipped: 0\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Jasig/cas/pull/219#issuecomment-15905286 . \nhttps://github.com/notifications/beacon/xIh4VQSLXYRoprDgzIcjM-XnioioT6tDIa70SZZOZNCwo4htmYESobjwYTwctORV.gif\n. Just noticed a small issue with the pull: looks like the checkstyle plugin is configured to be a maven profile by mistake. I am moving things around to make it become part of the default build. will push directly to master once things are in good shape. \n. Pushed. All systems go :)\n. Pushed another commit that changes the uid to be lower case and fixes the formatting issues in the file.\nSorry about the formatting noise, but I wanted to normalize the whitespace in the file. The only relevant section is the authn handler bean. \n. Pushed another commit that changes the uid to be lower case and fixes the formatting issues in the file.\nSorry about the formatting noise, but I wanted to normalize the whitespace in the file. The only relevant section is the authn handler bean. \n. I went ahead and tested this pull locally. Everything is functional as expected and described by the spec. Per the last CAS dev conference call, this pull should be ready to go. Planning to merge by tomorrow afternoon, unless there are any concerns. \n. +1\nDima, should there be any changes to the NOTICE files? \n. Ran a smoke test, everything looks good. Updated notice files as well. Merging.... Thanks @dima767 \n. +1, with a minor comment around the dependency decl. \n. Moved over here: https://github.com/Jasig/cas/pull/231\n. This is great, thanks. Before we get this merged, do you mind writing a few unit tests to verify this behavior and to make sure it wont be broken in the future? Something basically that makes sure two services with the same name are in fact recognized as two services with different urls. \n. No worries. Feel free to post back with questions :)\n. @herringm How's it going? If you need help, please let me know.\n. No problem. I'll see if I can take a look at this today. \n. Moved over here: https://github.com/Jasig/cas/pull/231\n. My pleasure. It's pretty small but important change and hopefully, we can quickly merge it with others having reviewed it. \n. Excellent change! +1. \n. +1\n. Agreed on removing the html/pdf versions. Extra burden and maintenance upkeep.\nI would also vote for modifying the CAS main readme file to point to the new protocol doc in markdown. \n. I pushed a new commit that allows static variables to be defined in upper case. Will need to take another sweep to make sure all other instances are adhering to this rule and it in fact has become part of the CS rules. \n. If there's not much else pending on this PR, would like to merge by tomorrow EOD if possible.\n. I also uploaded a new version of the formatting rules for Eclipse that would automatically add the new line at the end of file: https://wiki.jasig.org/display/CAS/Code+Conventions\n. I also uploaded a new version of the formatting rules for Eclipse that would automatically add the new line at the end of file: https://wiki.jasig.org/display/CAS/Code+Conventions\n. Understood. It's not exactly a one to one mapping. A number of files in between were modified for other fixes that would interfere with your calculations. For example, changes for a number of tests and test suits that were using junit.framework, \"redundant final parameter\" and other minor fixes for formatting, javadoc tag selection. The remainder of the warnings on master are potentially about missing javadoc tags, etc that hopefully we can get to at some point. \n. Understood. It's not exactly a one to one mapping. A number of files in between were modified for other fixes that would interfere with your calculations. For example, changes for a number of tests and test suits that were using junit.framework, \"redundant final parameter\" and other minor fixes for formatting, javadoc tag selection. The remainder of the warnings on master are potentially about missing javadoc tags, etc that hopefully we can get to at some point. \n. On that note, I recently just learned that we might want to revisit the naming convention of the logger objects to adopt the pattern recommended by slf4j:\nhttp://www.slf4j.org/faq.html#declaration_pattern\nWould be good to allow this to become part of our CS rules, and also take into account static and non-static variables when it comes to log objects, etc. \n. On that note, I recently just learned that we might want to revisit the naming convention of the logger objects to adopt the pattern recommended by slf4j:\nhttp://www.slf4j.org/faq.html#declaration_pattern\nWould be good to allow this to become part of our CS rules, and also take into account static and non-static variables when it comes to log objects, etc. \n. If there's not much else pending on this PR, would like to merge by tomorrow EOD if possible.\n. If there's not much else pending on this PR, would like to merge by tomorrow EOD if possible.\n. Yes, it should be. The most recent change was to add new lines to end of files as part of this pull. \n. Yes, it should be. The most recent change was to add new lines to end of files as part of this pull. \n. Akh, sure. I will take a look today. \n. Akh, sure. I will take a look today. \n. +1, one minor comment. \nThanks for your effort on this one. Looks very good!\n. Planning to merge to get the build fully functional, by EOD if there aren't any concerns. \n. Planning to merge to get the build fully functional, by EOD if there aren't any concerns. \n. Removed the extra blank line. Merging...\n. Removed the extra blank line. Merging...\n. I understand. Sorry about the reformatting. I was using the IDE to check off the namespaces that I wanted and I think it went ahead and reformatted the entire file! Ugh. A number of commits were actually made to reset the format back to their originals but I dont think git likes them anymore. \nThese are just a number of test resources with just the added namespaces, mostly c and p. As for the rest, you are right. These are simply added but not used. Mostly wanted to ensure that there are available in the overlay to future use.\n. I understand. Sorry about the reformatting. I was using the IDE to check off the namespaces that I wanted and I think it went ahead and reformatted the entire file! Ugh. A number of commits were actually made to reset the format back to their originals but I dont think git likes them anymore. \nThese are just a number of test resources with just the added namespaces, mostly c and p. As for the rest, you are right. These are simply added but not used. Mostly wanted to ensure that there are available in the overlay to future use.\n. Forgot to mention of course, that if needed, I could certainly resubmit a second pull without the formatting changes. \n. Forgot to mention of course, that if needed, I could certainly resubmit a second pull without the formatting changes. \n. Excerpt from the JIRA: \n\nReview all spring context files and ensure appropriate Spring namespaces are defined and available for easier > overlays\n\nHelps with folks who aren't too well versed in Spring, when they need to use either of these namespaces. (Recently had to assist someone define a Map instance in the configuration who was simply following an example on the web/wiki and didnt have the right namespace in place)\n. Good point. I mostly opted for the most commonly used namespaces, particularly p, c, util and context and for the most part did away with some of the more specialized ones, such as jee, jms or jdbc, etc. This is purely based on recent experience working with folks to set up overlays, etc that I noticed the above changes are added in various spots. Agreed that it can seem very bloaty. On the other hand, I'd think that if the configuration was switched to use namespaces instead of the usual <property name...> or <constructor> syntax, etc we'd actually and eventually cut down the bloat factor quite a bit. \nAs for the other change, it's simply extra maintenance to have to maintain versionized xsd declarations in the context files, specially when we do upgrades. Keeping it simple here and the non-verisionized version is the recommended practice I believe. \n. Sounds good, sure. I'll do separate pulls for each used namespace but would still keep it all under the same JIRA. Closing this one for now. \n. Agreed on documentation. I can use my existing test data and configuration in fact to update the docs pretty quickly. \n...and certainly, will put together a pull to update the demo. \n. Merging this pull by EOD, so I can continue with docs and updating demos. Please indicate, if there are any concerns around the pulls. \n. Updated docs: https://wiki.jasig.org/display/CASUM/Configuration+for+the+OAuth+server+support\n. Sure. Reviewing now...\n. I have fixed the test issues with OAuth locally, and am going to push to merge. The problem mainly is the result of using RegisteredServiceImpl instead of the new OAuthRegisteredService.\n. If there are no objections, would like to merge this soon so I can resume with switching over to namespaces. \n. Yup. Ran tests on both the webapp and the management webapp. All systems go!\n. As for the default case of switches, I am +0. Personally, I like the rules to be as strict as possible :) but I realize the default may not always have a case. (Well, I guess default IS a case anyway!) I know there was one instance in the spnego module that worked off of no default, so there's really not much there to fix if we remove the rule. I'd suggest that we mark it as error for now, and if it actually turns out to be an annoyance we can always witch back to warn or info. \nAs for licenses, you're totally right. I didn't notice the configuration for 'com.mycila.maven-license-plugin' but I realize that it's not actually stopping the build for missing headers. (I know there was one that I had to fix in the mgmt app). So, question is: should we use the same plugin to take care of licensing, or should we let CS handle that since it already does all of the other stuff too?\nAs for number of parameters, I am +0. 7 seemed sufficient for all intents and purposes by default but I know there was one that had something around 8 or so. Mostly like that the idea that method parameters are restricted to a reasonable size. Helps to break longer functions. \n. So, just to jump back on the discussion in summary I think we have the following things to consider:\n1. Should we let CS also manage license headers and do away with the other plugin? One plugin to \"kill 'em all\"?! (I like this approach better, given that it's integrated into the build and can currently cause it to fail) \n2. Keep the rule on the number of methods parameters, now set to 10? \n   (+0 on this personally) \n. I'll experiment with #1, but I think CS \"might\" be better. It did catch one while the other one did not but that might have only been a matter of the license plugin being absent in the build lifecycle. I'll report back shortly. \nFor #2, that would be all parameters. ctors, methods, etc. \n. Good point! I'll see about integrating the plugin into the build lifecycle in the way that it checks for headers.\nAs for the rule on parameters, we certainly can, yes. Another commit coming up. \n. Pushed another commit with the following changes:\n1. Set the limit on the parameter numbers to methods only. \n2. Remove the CS rule for checking header files\n3. Allowed the license plugin to fail if missing headers are found automatically in the compile phase\n. @battags comments should be addressed now by the latest commit. If there aren't any other issues, I'll merge with master first and then do the final push/merge. \n. Preparing to merge...\n. Joe, a few suggestions here:\n1. I see that you have been working locally on your master branch. Would be much easier to create a topic branch for CAS-1288, move your changes to the topic branch isolated from the master. Makes your future merges and other development efforts with master much easier. \n2. When you do merge with master, make sure you run the build and spot any Checkstyle issues that come up. The codebase will not compile if the issues are unaccounted for. \nIf you're using Eclipse, the section at the bottom of this page might be helpful: https://wiki.jasig.org/display/CAS/Code+Conventions\n. Those warnings are for the most part OK. If there are any immediate issues, CS should stop the build and fail to compile the code. I think your pull happened after a few other changes into master, which is probably why you got past that and is probably why the pull right now cant be merged automatically. \nIf you have a local CAS-1288 branch, this is what you should follow:\n1. Push your local CAS-1288 over to your fork/CAS-1288 branch. Verify the changeset is uploaded to the fork correctly.\n2. Do a fetch from Jasig/cas/master to reset your local master to the latest commit\n3. Merge CAS-1288 local with the now-updated master. Resolve conflicts and commit to CAS-1288 locally\n4. Compile the build. Make sure there are no errors and fix all. Commit. \n5. Push CAS-1288 to your fork/CAS-1288 branch\n6. Create a new pull request that would want to merge your fork/CAS-1288 with Jasig/cas/master\n. Yes. No worries. I'll close this one for you. \n. I'll be pushing code throughout the day over to the local branch here, and have already added 3 other separate commits. I am currently testing openldap and writing more javadocs to help with the review. \n. In the new LPPE configuration, 773 is translated back to the exception AccountPasswordMustChangeException via the mappings defined. This is only handled by LPPE where you'd then be redirected in the flow to the \"password expired\" page. If you wish to remove that flow, you could take out the default mapping which would then make the exception be treated just like a normal error. \nNone of the authentication handlers currently do any type of audit logging themselves, so if you have made changes to the BindLdapAuthenticationHandler now, those would be applied to the new LdapAuthenticationHandler. \nI should clarify of course that the translation I referred to above is specific to Active Directory. I will review the changeset for OpenLdap and will respond shortly. \n. With OpenLdap and the new changeset, you shouldn't have to emulate 773. The changeset here accommodates custom attributes where it's able to take a look at an attribute value to figure out if a particular account password must change upon login. This is also translated back to an AccountPasswordMustChangeException instance, consumed by the flow. \nThe expected attribute value btw is \"true\" or \"false\", or if a number, an integer greater than 0 which would be translated to true. \n. The latest series of commits account for the following:\n1. Removed the unneeded critical property\n2. Separated LPPE configuration from LPPE result\n3. Used PostConstruct in favor of InitializingBean. Will create a JIRA next. \n. Latest commit pushed to address the issue of strong references to the configuration object in the ldap result class. \n. Are there any other comments, issues, concerns with the current changeset? As a next step, I'd like begin removing the old spring ldap components and dependencies. \n. @leleuj I believe we have temporarily turned off CS rules for the authN API branch. My original proposal was to merge LPPE changes first, and the merge with master and go through a round of clean up. I anticipate there's going to be lot of styling issues to fix and I was thinking that we address them all at once in separate pull. \n. @herringm Sure. I'll see what I can do.\n. That change is indeed accounted for, in the current pull. See this commit please:\nhttps://github.com/mmoayyed/cas/commit/f96b1c607863fc4597a4790a35c24ae4dc693f2f\n. Thanks. Looks like @leleuj has also reviewed and is OK with the merge based on his comments. Will proceed. \n. +1\n. Removed references to IUsernameAttributeProvider for simpler configuration and updated test contexts. \n. +1\n. +1\n. +1 to merge. \nWe certainly could disable CS enforcement for the RC, and do cleanup once the release is cut. \n. I'll review as well in just a bit. \n. - Removed CredentialsToLDAPAttributePrincipalResolver\n- Pulled master\n- Ran mvn test. All tests pass.\n[INFO] Jasig Central Authentication Service .............. SUCCESS [5.741s]\n[INFO] Jasig CAS Core .................................... SUCCESS [1:05.029s]\n[INFO] Jasig CAS Generic Support ......................... SUCCESS [1.574s]\n[INFO] Jasig CAS Web Application ......................... SUCCESS [28.161s]\n[INFO] Jasig CAS JDBC Support ............................ SUCCESS [0.935s]\n[INFO] Jasig CAS Legacy Support .......................... SUCCESS [1.547s]\n[INFO] Jasig CAS LDAP Support ............................ SUCCESS [3.031s]\n[INFO] Jasig CAS OpenId Server Support ................... SUCCESS [5.613s]\n[INFO] Jasig CAS RADIUS Support .......................... SUCCESS [1.016s]\n[INFO] Jasig CAS SPNEGO/NTLM Support ..................... SUCCESS [1.808s]\n[INFO] Jasig CAS Trusted User Support .................... SUCCESS [2.025s]\n[INFO] Jasig CAS X.509 Client Certificate Support ........ SUCCESS [4.163s]\n[INFO] Jasig CAS OAuth Server Support .................... SUCCESS [2.579s]\n[INFO] Jasig CAS Client Protocols Support using pac4j .... SUCCESS [1.917s]\n[INFO] Jasig CAS SAML Server and Validation Support ...... SUCCESS [4.506s]\n[INFO] Jasig CAS JBoss Cache Integration ................. SUCCESS [30.145s]\n[INFO] Jasig CAS Memcached Integration ................... SUCCESS [11.297s]\n[INFO] Jasig CAS Ehcache Integration ..................... SUCCESS [6.621s]\n[INFO] Jasig CAS Restlet Integration ..................... SUCCESS [2.919s]\n[INFO] Jasig CAS - Uber WAR .............................. SUCCESS [0.178s]\n[INFO] Jasig CAS Documentation ........................... SUCCESS [0.041s]\n[INFO] Jasig CAS ClearPass Extension ..................... SUCCESS [6.111s]\n[INFO] Jasig CAS Management Web Application .............. SUCCESS [11.418s]\n. I see what the problem is. Argh! \nWindows file names are case insensitive. To git, CredentialsToLDAPAttributePrincipalResolver and CredentialsToLdapAttributePrincipalResolver are the same, which is why it thinks I have nothing to commit, after having removed CredentialsToLDAPAttributePrincipalResolver.\nNonetheless, I can delete the file using prose.io. Should I give it a try? \n. ...or clone CAS on Ubuntu and give it a shot? \n. +1\n. Looks good. Thanks for addressing this issue.\n. Planning to get this pull merged, as it seems there's enough +1 votes to move fwd. \n. +1\n. +1\n. Excerpt from JIRA should help clarify the need:\n\nIn order to assist with multi-node deployments, in scenarios where cas configuration and specially cas.properties file is externalized, it would be ideal to simply just have one set of configuration files for all nodes, such that there would for instance be one cas.properties file for all nodes. This would remove the need to copy/sync config files over across nodes, again in a situation where they are externalized.\nThe current drawback is that in keeping only one cas.properties file, we'd lose the ability to define unique host.name property values for each node, which would assist with troubleshooting and diagnostics.\nThe proposed feature is to be able to retrieve the host.name value directly from the actual node name, rather than relying on the configuration, only if one isn't specified in the cas.properties file. This should accommodate both scenarios.\n\nI understand the concern around leakage of data. I am wondering if we can accomodate all cases where there would be blank, configured, or determined host name values. \n. The configuration in cas.properties automatically and explicitly sets up a host name by default. Multi-node deployments somewhat require that this value be explicitly configured for each node, and typically that is set to the host name.\nA deployer would actually have to go out of his/her way to blank out the setting for this \"leakage\" to kick into effect. I am not sure why an adopter would ever want to blank out the suffix explicitly. If they dont want the host name to leak out automatically, they could always stick with the sample value provided in the cas property file.\nDoes that make sense? \n. I understand the concern around leaking data out. Sure, we can certainly push this idea into cas-addons for incubation. I had originally started to think about going down the factory pattern much like @battags suggests but at any rate, cas-addons would probably be a better home for such these types of extensions.\nWill close the pull and mark the JIRA appropriately. \n. +1\n. I am not sure I fully understand the proposed use case, but I second Mavin's explanation in that this implementation merely satisfies the current behavior in a slightly more compacted way. It's simply refactoring code, and I'd vote that if  we would want to support additional use cases that this impl does not yet support, those would need JIRAs and merit further discussion on the list, etc.\n. +1\n. Absolutely. No failures.\n. +1\n. +1 with the test confirming the behavior. \n. Looks like the pull has gone quiet. I'll pull the change myself, and will put together a new pull with the test case in place.\n. Closing in favor of this: https://github.com/Jasig/cas/pull/327\n. 2.7.2 seems to be a rather boring release :) but 2.7.1 does include a number of fixes, specially around concurrency and race conditions:\nhttps://jira.terracotta.org/jira/secure/ReleaseNote.jspa?projectId=10280&version=11601\n. Will push to 3.5.x directly as well\n. Planning to merge just before noon PDT, unless there are any other concerns.\n. Certainly. Test coming up shortly. \n. Added test case. Will merge and push to 3.5.x directly.\n. I added the remaining changes to have CAS explicitly report back, in case the service registry is empty. http://localhost:8080/cas/login will still function fine; the change is only activated when a service request comes in. \n. Just wondering if there are any other objections, with the 2nd set of changes in place, to merging this pull in. Again, to clarify I added an explicit view and a message to report back to deployers that CAS functionality will be unavailable until the registry is fully enabled with at least on service def. \n. I'd like to merge this by EOD, unless there are any particular concerns. \n. @apetro, thanks much for the feedback. Fair points. I will do what I can to refactor the exception handling logic in this pull. Should have an update by tomorrow.\n. Refactored changes to use new rather than static exception objects. per @apetro's suggestions\n. Further thoughts on? To merge or not to merge, is that still the question? :) Happy to proceed with no further comments. \n. Proceeding to merge...\n. :+1:\n. +1 with the doc update on the wiki.\n. Perhaps the services mgmt wiki can be updated with a brief line to note that proxying ability is turned off by default for cas 4 when adding new services. \n. Great suggestions. Lets open up a JIRA and document it, and perhaps target the change for 4.1 and or even 5? \n. P.S: oh, +1 for the commit obviousl!\n. +1 with minor comments around the javadoc. I am assuming the same set of changes would be applied to the 3.5 branch. \n. Great. Thanks. I'll wait for other devs to get a chance to review. Ideally, it would be great if we can merge by end of week if not earlier.\n. Planning to merge by EOD unless there are objections of course.\n. This is also classified as a bug on the JIRA and it is indeed an issue with SPNEGO support for CAS. I think there has enough time passed for review, and it's a rather small change. I am going to merge this in as well as the other pull that is intended for 3.5.x\nThank you @jtgasper3 \n. +1\n. +1\n. +1 for the language changes. -1 on ehcache.\nSeparate pulls aside, I don't understand why we are downgrading ehcache. If the groupid has changed for later versions, why wouldn't use the new id?! :)\n. On Ehcache:\nI do see the changed groupid here:\nhttp://mvnrepository.com/artifact/net.sf.ehcache.internal/ehcache-core/2.7.2\nNote the comment: \"Internal ehcache-core module. This artifact is not meant to be used directly\"\nBut then I also see:\nhttp://mvnrepository.com/artifact/net.sf.ehcache/ehcache/2.7.2\nIs the latter not available anymore? Strange!\n. Cool. Merging in.\n. Sure. I'll give this a try.\n. Running tests on the core module:\nmaster:\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 1:24.287s\n[INFO] Finished at: Wed Oct 09 03:38:48 MST 2013\n[INFO] Final Memory: 18M/56M\n[INFO] ------------------------------------------------------------------------\nbranch:\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 36.537s\n[INFO] Finished at: Wed Oct 09 03:42:09 MST 2013\n[INFO] Final Memory: 22M/54M\n[INFO] ------------------------------------------------------------------------\nQuite an improvement.\n. Ah, I just understood that the change is intended for 3.5.x. I was trying to find a reference to where LiveCacheStatistics was used in master! :)\nI understand the rationale behind the change, but overall I am really 0 on it. I would of course prefer that we dont downgrade. Would it perhaps be in scope to try to work out the replacement for LiveCacheStatistics? Moving back seems like security wise may not be an ideal move.\nIf not, I'd be fine with the change. \n. Perfect. I wasn't aware that we are really going up a few revisions :+1: \n. Technically, the error should still occur on 3.5.0 which is when the fluid reordering bit was introduced to the management webapp. I am not sure it's related to CAS-1279 since even with that fix in place, the JS error still occurs. Didn't exactly investigate the why, but overall, it's a reasonable change to only want to have the JS script be loaded where it's needed. I did also fix the JIRA entry.\n. I'd like to propose that we also merge this pull, as it's somewhat along the same lines as https://github.com/Jasig/cas/pull/329. I am certainly going to allow more time for review but hopefully, am thinking that we'd be able to merge by end of this week. \nI'll continue in the mean while to work on other JIRAs as time permits.\n. Planning to merge by EOD.\n. I updated the log entry, and also added the behavior to record a WARN message in case a key is not found in the requested language bundle.\n. Thanks for the feedback. Changes in place to address @leleuj's comments. \n. Planning to merge by EOD.\n. Clarifying, that this pull will subsequently be accompanied by updates to the wiki to explain the needed change as far as enabling access to the mgmt app goes \n. @leleuj, I understand your viewpoint. Let me attempt to provide a rationale for this change.\nI certainly agree that the managementConfigContext.xml needs further changes, sure. But this change isn't complicating that process. Adopters would still want to update the file for backend configuration of the registry, etc. This change however mostly focuses on externalizing the access rules to a file. This has a number of advantages:\n- Files can be auto reloaded and the spring context reconfigured when changes happen in the file. (Not that this pull does that, but prepares the ground work for such)\n- It is most definitely easier to simply change a line in the properties file, than to have to deal with an xml file although this can be very much subjective.\n- Pulling rules out into an external file has the advantage that if the file needs to be changed, CAS does not have to be rebuilt. Rather, we just restart the container. This is a big win.\nWe would of course expect that folks change the file if they wish to configure access rules to be hooked to ldap, jdbc, etc or whatever spring security provides. My humble experience has so far been that in a very large percentage of deployments that we have done those options are simply superfluous. What seems to address most use cases and comforts folks is a simple file with a handful of accounts, mostly admin types that wish to edit the file, easy to edit, simple syntax, no big complicated bean config on ldap changes or jdbc. \nDoes that help?\n. P.S: I should probably add that this pull does not propose any \"features\" per se. It's still the same process. We are just making that process more comfortable I'd say. \n. Sure, I understand. My motivation mostly comes from providing a better \"default\" support too. At the end of the day, with either change the userid enabled to access the app is stored inside a file, (File storage being the backend) be it the xml file or the external prop file. So no change there. Both are the same thing in my view, just that the latter provides better options for simpler and more modest use cases.\n. I'd like to go ahead and merge this since I believe @leleuj  and @wgthom are on board with the change based on the discussion above. Please correct me if I have got the wrong impression, but in view of the RC2 coming up, I'd like to move fwd with this by EOD unless there is more feedback to account.\n. Eric, would you please [and thanks for providing this PR by the way], reference the jira in the description? \n. Excellent! Thanks. If you're willing to update the commit messages too that would be super! since we can backtrack the issue in the git log if needed.\n. I think this looks good. I'll wait for others to of course review\n. I'll merge this, and will then bring it forth into 3.6\n. Missing some final modifiers here and there, but looks great. +1\n. > Is there a reason a concerned deployer cannot configure a property editor via Spring to trim passed in text?\nGreat point! Didn't even think of this. I think that's the better solution. I'll close the JIRA with that comment in place.\n. Thanks for the review. Addressed feedback. \n. Pushed commits to address feedback\n. Pushed to address feedback\n. Merging this one (will merge with master first)\n. Not suggesting that this should be merged immediately. I am just working on a number of JIRAs and would like to have the pulls in place when the timing is appropriate to resume work.\n. Merging by Tuesday May 20th, unless there are additional comments.\n. Updated the commit message.\n. Planning to merge this  by EOD.\n. Planning to merge this  by EOD.\n. You are right, and I do agree. It does deserve a better description to explain 1) what has happened 2) and what needs to be done, or will be by CAS which in this case would be a simple reload of the page. I'll see if I can better describe the scenario in the message that would be least confusing for the user. \n@apetro might have some specif insights into this.\nI have tripped over this issue many times with other folks upon CAS webapp session timeout, the page simply reloads after the user submits credentials. Lack of my UX expertise aside, generally, I think the notification is really helpful in explaining the case.\n. You are right, and I do agree. It does deserve a better description to explain 1) what has happened 2) and what needs to be done, or will be by CAS which in this case would be a simple reload of the page. I'll see if I can better describe the scenario in the message that would be least confusing for the user. \n@apetro might have some specif insights into this.\nI have tripped over this issue many times with other folks upon CAS webapp session timeout, the page simply reloads after the user submits credentials. Lack of my UX expertise aside, generally, I think the notification is really helpful in explaining the case.\n. I updated the message to perhaps more clearly describe what has happened. \nThis is a sample screenshot:\n\n. I updated the message to perhaps more clearly describe what has happened. \nThis is a sample screenshot:\n\n. @serac This is very interesting and definitely a serious improvement over the current and/or proposed behavior. Moving the storage back on to the client seems like it would also remove the requirement of session replication across nodes in an HA setup as users currently may have to simply be annoyed with receiving back an empty form and resubmitting credentials again.\nI am very much intrigued to try this out in a local dev environment. As test results prove out the intended use case, would you mind if I reversed the pull based on the proposed library? I see it's currently in SNAPSHOT mode. Would you then be able to and willing to cut a 1.0/0.1 GA release?\n. @serac This is very interesting and definitely a serious improvement over the current and/or proposed behavior. Moving the storage back on to the client seems like it would also remove the requirement of session replication across nodes in an HA setup as users currently may have to simply be annoyed with receiving back an empty form and resubmitting credentials again.\nI am very much intrigued to try this out in a local dev environment. As test results prove out the intended use case, would you mind if I reversed the pull based on the proposed library? I see it's currently in SNAPSHOT mode. Would you then be able to and willing to cut a 1.0/0.1 GA release?\n. OK. It seems that by a rough vote count, most if not all folks on this thread prefer to deal with the issue directly, for it to be removed completely rather than, details aside, displaying some form a message back to the user. If the first strategy fails, we can always fall back to an error message and can further decide how and to what degree the user behavior should be accommodated.\nIs the above an accurate summary of the discussion so far? Marvin's solution seems fairly promising and valuable to begin with.\n. OK. It seems that by a rough vote count, most if not all folks on this thread prefer to deal with the issue directly, for it to be removed completely rather than, details aside, displaying some form a message back to the user. If the first strategy fails, we can always fall back to an error message and can further decide how and to what degree the user behavior should be accommodated.\nIs the above an accurate summary of the discussion so far? Marvin's solution seems fairly promising and valuable to begin with.\n. @leleuj To clarify, I was merely suggesting that we try to remove the problem completely for starters by removing the requirement of session from the webflow. If that works out based on what @serac has implemented or some variant of that, no error messages or JS refreshes would be needed :) If that fails, we can explore the best option in terms of UX. \nHow does that sound?\n. @leleuj To clarify, I was merely suggesting that we try to remove the problem completely for starters by removing the requirement of session from the webflow. If that works out based on what @serac has implemented or some variant of that, no error messages or JS refreshes would be needed :) If that fails, we can explore the best option in terms of UX. \nHow does that sound?\n. Thanks to @serac, I was able to configure the webflow to persist the state on the client. Works really well. The build here is going to fail since the dependency is not yet available in maven central, and once released, I'll make the change to resume the review process.\n. Thanks to @serac, I was able to configure the webflow to persist the state on the client. Works really well. The build here is going to fail since the dependency is not yet available in maven central, and once released, I'll make the change to resume the review process.\n. I have updated this pull request to use the solution that is presented here:\nhttps://github.com/Jasig/spring-webflow-client-repo\nThere are still a few things we should check out and test, that Marvin outlines here:\nhttps://github.com/serac/spring-webflow-client-repo/issues/3#issuecomment-58042345\nI have done a fair amount of testing with the flow and serializable objects and have not found anything in particular out of order. I'll contribute to write more unit tests, but would appreciate others to test as well. This definitely solves the problem of session timeouts (or CAS \"blips\" as I was recently told) and so I am hoping we get through any and all serialization issues. \n. I have updated this pull request to use the solution that is presented here:\nhttps://github.com/Jasig/spring-webflow-client-repo\nThere are still a few things we should check out and test, that Marvin outlines here:\nhttps://github.com/serac/spring-webflow-client-repo/issues/3#issuecomment-58042345\nI have done a fair amount of testing with the flow and serializable objects and have not found anything in particular out of order. I'll contribute to write more unit tests, but would appreciate others to test as well. This definitely solves the problem of session timeouts (or CAS \"blips\" as I was recently told) and so I am hoping we get through any and all serialization issues. \n. I asked @jtgasper3 to help with testing this pull. So far, all results have been positive but as a next step, we are going to try and move the changes over to an HA environment and run tests again. \n. I asked @jtgasper3 to help with testing this pull. So far, all results have been positive but as a next step, we are going to try and move the changes over to an HA environment and run tests again. \n. Calling lazy consensus on this changeset. If there aren't any other comments, I'll get this merged before Thursday. \n. Calling lazy consensus on this changeset. If there aren't any other comments, I'll get this merged before Thursday. \n. P.S: test failure is unrelated. \n. P.S: test failure is unrelated. \n. I know @wgthom has proposed a planning to meeting to go over the schedule and scope for CAS4 and others. Until that is settled, I sort of took proactive measures to make the change happen, since it really does not apply to CAS4.\n. I know @wgthom has proposed a planning to meeting to go over the schedule and scope for CAS4 and others. Until that is settled, I sort of took proactive measures to make the change happen, since it really does not apply to CAS4.\n. Fixed the test issue. \n. Fixed the test issue. \n. Looks like 1.3.5 is now available. So I'll update the pom, run tests again and if things look good, merge.\n. Looks like 1.3.5 is now available. So I'll update the pom, run tests again and if things look good, merge.\n. Superseded by the pac4j library upgrade. Closing\n. Superseded by the pac4j library upgrade. Closing\n. Yup. I created a JIRA for the issue.\n. Yup. I created a JIRA for the issue.\n. I certainly do agree that switching to a more robust library with better support for features that @serac is in the right direction. I am a bit hesitant  to work on that changeset under the same pull/JIRA. I feel like that is rather a big change that would not only increase the complexity of this pull but also smells somewhat like a new feature or improvement and less of a task that it is now. I'd be delighted to mark and continue work on that end under a separate JIRA, which I think the current pull somehow paves the road for that as well.\nWould that work, or do you feel that switching over to that library and the adjustments that follow are a better starting point?\nAs far as MessageSender vs Message goes, I think @leleuj has a valid point. I think it might be better suited if we consider that \n- Message has:\n1. A url as the destination\n2. Content\n3. Content type\n4. Method to send (i.e. \"POST\")\n- MessageSender has:\n1. read timeout\n2. connection timeout\n3. should redirects be followed?\n4. sync/async method of sending?\nWe could then tweak the httpclient implementation to take a Message instead and send it along using the sender.\nIs that more or less what you have in mind?\n. I certainly do agree that switching to a more robust library with better support for features that @serac is in the right direction. I am a bit hesitant  to work on that changeset under the same pull/JIRA. I feel like that is rather a big change that would not only increase the complexity of this pull but also smells somewhat like a new feature or improvement and less of a task that it is now. I'd be delighted to mark and continue work on that end under a separate JIRA, which I think the current pull somehow paves the road for that as well.\nWould that work, or do you feel that switching over to that library and the adjustments that follow are a better starting point?\nAs far as MessageSender vs Message goes, I think @leleuj has a valid point. I think it might be better suited if we consider that \n- Message has:\n1. A url as the destination\n2. Content\n3. Content type\n4. Method to send (i.e. \"POST\")\n- MessageSender has:\n1. read timeout\n2. connection timeout\n3. should redirects be followed?\n4. sync/async method of sending?\nWe could then tweak the httpclient implementation to take a Message instead and send it along using the sender.\nIs that more or less what you have in mind?\n. Certainly\u060c yes. It sure seems like the job of sending a message is the same as what the http client would do anyway. So we might as well move that functionality back into http client and remove the message sender all together. \n. Certainly\u060c yes. It sure seems like the job of sending a message is the same as what the http client would do anyway. So we might as well move that functionality back into http client and remove the message sender all together. \n. This pull is also ready to be reviewed and then merged. The changeset includes:\n- The HttpClient class now accepts an HttpMessage to send.\n- The message can be configured to instruct the client to send it asynchronously, which is the default.\n- In case of SLO messages, the Logout Manager will prepare the message, and pass it onto the http client. The client will then invoke the message for transmission.\n- There are also now a couple of properties for read/connection timesouts of the http client, so that they may easier be configured.\n. This pull is also ready to be reviewed and then merged. The changeset includes:\n- The HttpClient class now accepts an HttpMessage to send.\n- The message can be configured to instruct the client to send it asynchronously, which is the default.\n- In case of SLO messages, the Logout Manager will prepare the message, and pass it onto the http client. The client will then invoke the message for transmission.\n- There are also now a couple of properties for read/connection timesouts of the http client, so that they may easier be configured.\n. Tenatively, it would be great if we could agree to merge this one by Friday. That way I can get some prep time to dedicate to the security improvements listed here:\nhttps://wiki.jasig.org/display/CAS/Proposals+to+mitigate+security+risks\n. Tenatively, it would be great if we could agree to merge this one by Friday. That way I can get some prep time to dedicate to the security improvements listed here:\nhttps://wiki.jasig.org/display/CAS/Proposals+to+mitigate+security+risks\n. Appreciate the feedback. I revised the pull request for the following changes: \n- The HttpMessage is now just a basic carrier, a POJO really. \n- The HttpClient does the task of sending the message. Previously, if the message was going to be sent synchronously, the logic was embedded inside the HttpMessage. This is now moved over to the httpclient, which is effectively our \"MessageSender\" as @leleuj  had suggested.\n- I renamed the async property. There are two aspects to this:\n1. The logout manager can be configured to send SLO messages async, etc. It prepares the HttpMessage and sets the flag on it appropriately.\n2. Aside from SLO, messages also by themselves can be decorated to be sent async, etc. IOW, the message tells the httpclient how it should be sent, rather than the client sending all messages in a particular way.\n- Now, the logout manager can be configured with an injected httpclient and synchronous executor. The approach felt a bit too heavyweight because we'd have to write a synchronous executor, or use something google's guava to do this...and also the existing design allows better flexibility in terms of the message describing how it should be sent. I can nonetheless look into the injection option, but this is what I have so far. \n. Appreciate the feedback. I revised the pull request for the following changes: \n- The HttpMessage is now just a basic carrier, a POJO really. \n- The HttpClient does the task of sending the message. Previously, if the message was going to be sent synchronously, the logic was embedded inside the HttpMessage. This is now moved over to the httpclient, which is effectively our \"MessageSender\" as @leleuj  had suggested.\n- I renamed the async property. There are two aspects to this:\n1. The logout manager can be configured to send SLO messages async, etc. It prepares the HttpMessage and sets the flag on it appropriately.\n2. Aside from SLO, messages also by themselves can be decorated to be sent async, etc. IOW, the message tells the httpclient how it should be sent, rather than the client sending all messages in a particular way.\n- Now, the logout manager can be configured with an injected httpclient and synchronous executor. The approach felt a bit too heavyweight because we'd have to write a synchronous executor, or use something google's guava to do this...and also the existing design allows better flexibility in terms of the message describing how it should be sent. I can nonetheless look into the injection option, but this is what I have so far. \n. Merging by Friday evening. Please let me know if that is an issue, or you have concerns about the pull.\n. Merging by Friday evening. Please let me know if that is an issue, or you have concerns about the pull.\n. Any other comments/suggestions before I go ahead with the merge? \n. Any other comments/suggestions before I go ahead with the merge? \n. I'll be updating the docs shortly.\n. I'll be updating the docs shortly.\n. The motivation  for the change is that I wanted have all SAML related functionality be placed inside the saml module of course. (SLO messages being an exception) So this SamlDateUtils class by the virtue of its name caught my eye in core. I originally moved it over to the saml module, but then I realized there's really nothing specific about saml in the class other a bunch of date related methods, which are now moved to CalendarUtils. This is just a general attempt at organizing the codebase per module and function.\n. The motivation  for the change is that I wanted have all SAML related functionality be placed inside the saml module of course. (SLO messages being an exception) So this SamlDateUtils class by the virtue of its name caught my eye in core. I originally moved it over to the saml module, but then I realized there's really nothing specific about saml in the class other a bunch of date related methods, which are now moved to CalendarUtils. This is just a general attempt at organizing the codebase per module and function.\n. Sure. It was an even decision for me, but I can certainly move the relevant functionality over to the saml module under the same class name.\n. Sure. It was an even decision for me, but I can certainly move the relevant functionality over to the saml module under the same class name.\n. But there is something else to consider:\nThe saml module already does depend on core. Moving the class over to the saml module would then require that core declares a dependency on saml which isn't really ideal if only for a date class. I am not really in favor of that approach. It almost makes more sense to me, to just simply move the other 2 methods over to the logout manager class.\nThoughts?\n. But there is something else to consider:\nThe saml module already does depend on core. Moving the class over to the saml module would then require that core declares a dependency on saml which isn't really ideal if only for a date class. I am not really in favor of that approach. It almost makes more sense to me, to just simply move the other 2 methods over to the logout manager class.\nThoughts?\n. Not sure I fully agree with that. It seems to me that logout is more utilizing the saml syntax and xml structure rather than actually having to do with the spec? In other words I don't see logout to be saml based or compliant. It's just an XML block going on the outpost. It could just as easily be json for instance.( Otherwise I would still tend to think that the same implementation of the logout does still belong in the same module!)\nAgreed on the complexity issue. I am sure we can't remove it, but we can still move it around :) (I think this is almost a quote by martin fowler!) nonetheless moving the date related methods to the logout mgmr class seems like the simplest option to me for now. \n. Not sure I fully agree with that. It seems to me that logout is more utilizing the saml syntax and xml structure rather than actually having to do with the spec? In other words I don't see logout to be saml based or compliant. It's just an XML block going on the outpost. It could just as easily be json for instance.( Otherwise I would still tend to think that the same implementation of the logout does still belong in the same module!)\nAgreed on the complexity issue. I am sure we can't remove it, but we can still move it around :) (I think this is almost a quote by martin fowler!) nonetheless moving the date related methods to the logout mgmr class seems like the simplest option to me for now. \n. I realized that none of the methods in CalendarUtils class are actually used anywhere. In the most recent push, I simply removed the class, and created an extension of FastDateFormat and moved over the one method used. @leleuj please take a look. If you'd rather we change the method name to indicate something about saml, I'd be happy to comply.\n. I realized that none of the methods in CalendarUtils class are actually used anywhere. In the most recent push, I simply removed the class, and created an extension of FastDateFormat and moved over the one method used. @leleuj please take a look. If you'd rather we change the method name to indicate something about saml, I'd be happy to comply.\n. Pushed.\n. Pushed.\n. Looks like this pull also accounts for all comments feedback. I'll try to merge this one as well by late this evening, or tomorrow afternoon unless there is more stuff to account for.\n. Yes. One general motivation for keeping plugins in sync is to of course improve build time if at all possible. With this particular pull, I believe the later version of the plugin do recognize the installed version of aspectj that may be 1.7.x. (Right now I am seeing a warning on the screen that \"1.6 is expected but 1.7 is found\")\n. I defined custom mappings for schema files and removed the rule. \n. I believe they are yes. I'll see if I could simply just provide the same mapping style to them and update.\n. Added mappings and removed a number of exclusion rules. headers are updated as well.\n. +1, It would be also be useful if you could add a unit test or two to verify this behavior.\n. Looks like this is also going to RC3. Will be merging by 9am CDT\n. Agreed on unit tests. Ripped these out simply because they are no longer applicable. In fact the \"interesting\" functionality that we would like to test seems like all have to be mocked. I dont see a practical path to reasonable and useful unit tests. With mocks, it would just be testing the functionality of the service registry dao.\n. I'll review this once more to see if unit tests can reasonably be applied.\n. 1. I added unit tests\n2. Redid the way dependencies are wired\n. I see. Sure. I'll revise the pull to add more tests.\n. Back from travel. I'll be taking a closer look at this tomorrow to review tests and add more.\n. Added integration tests. \n. Added the next commit to take care of the NPE and the max desc issue.\n. Thanks for checking. Fixed the double validation issue.\n. Merging by Wednesday May 20th, unless there are additional comments.\n. Planning to merge by EOD. Another bug fix for 4.0\n. Agreed with @battags. You probably based on your changes on top of the 3.5.x branch. Could you rebase on top of master?\n. Build does not pass.\n. @rdev5 would you be kind enough to also create a JIRA and map it to this pull request? \nThis might help: https://wiki.jasig.org/display/CAS/Code+Conventions\n. +1 Otherwise.\n. Yes. If you have not already, please sign up here:\nhttps://issues.jasig.org/login.jsp\nand create a JIRA for the CAS server project detailing the issue once more. Preferrably, include a link to the pull request as well. You could assign the JIRA to either me or @serac (or any of the other members as well)\nThen, change the title here to say CAS-1234: Fix IV handling... and also include the JIRA in the commit messages as well.\nAlso, I may have spoken too soon. Build still failing:\nhttps://s3.amazonaws.com/archive.travis-ci.org/jobs/14492987/log.txt\n. No worries, I'll take care of the JIRA.\nAnd you're right. Looks like the build is just having intermittent issues with the network. I'll work on that bit as well.\n. Here's the moved JIRA: https://issues.jasig.org/browse/CAS-1386\nplease go ahead an readjust the commit messages and I think we should be good. I'll restart the build shortly\n. Restarted the build on the last commit, just to be safe.\n. Looks like the \"final variable check\" is going to be available in CS 5.7. I'll create a JIRA to track that once it's released\n. Looks good. Should be a merge candidate now. Thanks for your efforts.\n. Pushed to address feedback by @leleuj \n. Created this JIRA which came out of the discussion on this pull:\nhttps://issues.jasig.org/browse/CAS-1391\n. I moved the default filtering policy into CASImpl itself. This is the cleaner approach thus far, IMO.\n. Just an update: that I am slowly working on this pull to implement changes proposed on the mailing list:\nhttps://groups.google.com/forum/#!topic/jasig-cas-dev/kzGZjj_akeo\nThe changeset is a little bigger than intended, specially because it impacts the management app as well. So progress will be slow until some of the existing pulls are merged first.\n. I am going to be resuming work on this one, now that the management app is in better shape with MVC annotations and other fixes. \n. So, this is pull is near complete with changes. I'll start by giving a quick overview of the components and then, will address some of the remaining changes that might be addressed in subsequent pulls/jiras.\nChanges to registered services\nRegistered services no longer hold the properties of \"ignoreAttributes\" and \"allowedAttributes\". Rather, these two settings per discussions on the mailing list have now been captured into attribute policies instead.\nAttribute Policies\nWith this pull, CAS comes with 3 attribute policies for a given service. The policies are:\n1. Return All Attributes (equivalent to ignoreAttributes)\n2. Return Allowed Attributes (equivalent to allowedAttributes)\n3. Return Mapped Attributes:This is a new policy, that effectively is the same as #2, but allows on to remap/rename attribute names per service. (This can already be done at a global level for the attribute repository and we are just now adding support for doing the same thing at the registered service level)\nAttribute Filters\nEach policy may be configured with an optional attribute filter. The key is, while policies retrieve the set of attributes that are needed, and specifically by their name...attribute filters instead only work on values of those attributes. By default, CAS comes with an attribute filter that is allowed to filter/process attribute collections by regex patterns. \nUse Cases\nThe components presented in this pull allow one flexbility to addresses cases such as:\n- Allow all attributes for this service, but exclude \"staff\" from \"isMemberOf\"\n- Use the allowed attributes for this service, but rename \"uid\" to \"userId\" (Note that uid will still be used for all other services, but it's being overridden here)\n. ## LDAP Service Registry\nPreviously, the collection of allowed attributes as well as the flag to ignore them were stored plainly by the ldap service registry. The new components, (policies, filters, etc) are now being stored as binary attributes and retrieved as such.\nManagement App\nThe management app with this pull no longer supports selection of allowed attributes or the ability to ignore them. I did this on purpose, so that I'd be able to keep this pull as small and focused as possible. The app also really needs a bigger face-lift to present a redesigned UI and the ability for adopters to specify various different policies, etc. Major UI work is needed more or less. We do have multiple JIRAs available for this task, such as CAS-1391 and I'll address support for attributes there. \n. I forgot to mention that there are plenty of test cases available to account for each scenario and use case, etc. Feedback is much appreciated. \n. Just as an example, this is how the configuration would look like:\nxml\n<bean class=\"org.jasig.cas.services.RegexRegisteredService\"\n              p:id=\"10000001\" p:name=\"HTTP and IMAP\" p:description=\"Allows HTTP(S) and IMAP(S) protocols\"\n              p:serviceId=\"^(https?|imaps?)://.*\" p:evaluationOrder=\"10000001\"> \n    <property name=\"attributeReleasePolicy\">\n        <bean class=\"org.jasig.cas.services.ReturnAllowedAttributeReleasePolicy\">\n            <property name=\"allowedAttributes\">\n                <list>\n                    <value>uid</value>\n                    <value>groupMembership</value>\n                    <value>memberOf</value>\n                </list>\n            </property>\n            <property name=\"attributeFilter\">\n                <bean class=\"org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter\" c:regex=\"^\\w{3}$\" /> \n            </property>\n        </bean>\n    </property>        \n</bean>\n. It is a pretty big change, but I think the benefits are numerable. This should allow much greater flexibility in terms of the attr release policy, and should satisfy a number of basic use cases. \nTo be clear, the policy components are simply refactoring of the existing concepts. The only addition there is the ability to virtually \"rename\" attribute names per service. The filters however that work on values are far more valuable, and most folks would want to use those. I like the separation of the two, conceptually, where there's one bit that tells what should be retrieved, and a second optional bit that describes what should be excluded from that set. This separtion allows us to provide a number of impls for policies and filters which folks can use with covariance. \nYou're perfectly right that we should still address DB persistence and breaking UI changes. While I will account for the DB changes, I'd rather not make this pull any bigger than it is. Surely, the management app will be addressed to support not only filters, but oauth services, better skin, etc and a few more items. \n. pushed to address feedback by @leleuj \nAlso added a test case for JPAServiceRegistry with attribute release and filtering components. \n. Merging by Friday evening. Please let me know if that is an issue, or you have concerns about the pull.\n. Merging by EOBD. Let me know plz if additional changes are required here. \n. Understood.\nI am not quite sure whether CentralAuthenticationServiceImpl itself should become extensible. Rather, I'd rather not have adopters/developers modify that file at all. New implementations of CentralAuthenticationService should solely define their own custom behavior, rather than relying on an existing CentralAuthenticationServiceImpl. However, new implementations using this abstraction can benefit from inheriting common getters and setters that are required components for CAS operations, which is the goal of this pull. \nFar reaching objectives such as those you pointed out of course, can always be done using the Adapter design pattern. Something like this that we used for the cas-mfa project:\nhttps://github.com/Unicon/cas-mfa/blob/master/cas-mfa-java/src/main/java/net/unicon/cas/mfa/MultiFactorAwareCentralAuthenticationService.java\nThis is a new implementation of CentralAuthenticationService that delegates everything to another inner instance of CentralAuthenticationService. So that it overrides everything it wants to, and delegates other operations to this inner instance. \nNote however, that MultiFactorAwareCentralAuthenticationService still had to duplicate getters and setters for authentication manager, etc. Using the abstraction noted here, that extension would be able to do less work.\n. There is something to be said about opening up the CentralAuthenticationServiceImpl more to extension points. Maybe not to completely remove its finality, but perhaps provide injection points and pluggable components. Something like attribute filters, etc. \n...or maybe we could expose beforeTicketGrantingTicket() and afterTicketGrantingTicket() kind of like what Spring MVC does, but this is to be discussed and certainly outside the scope of this pull.\n. Certainly it's not recurring use case for one with modest requirements to have to rewrite CASImpl. Larger deployments, such as the cas-mfa project I point out earlier (that inspired this pull of course) with more complicated use cases I am sure would benefit from this change.\nAlso, I find the separation of \"authentication subsystem\" from the \"general services that assist with authentication\" helpful. It helps me to think of CASImpl as the component whose solely is concerned with implementing protocol specific features, while other services it relies on are abstracted way and \"pollute\" the class less than before.\n. So, are you suggesting that we rev CASImpl itself to expose extension points? Wouldn't that amount to certain methods becoming non-protected and/or non-final? \nAlso, as I mentioned, there are uses cases where a complete and new implementation of the CAS interface may be needed. (We are actually working on two other deployments that may need different CASImpl) For those, an abstract class that provides needed services is still an extension point, right? For instance, in the case of cas-mfa example I pointed out, the extension point to allow overriding a number of the CAS interface methods, which would be to allow them to be protected and/or non-final, which again is equally the same thing as one implementing the entire interface all by itself, right? \n. @leleuj did mention the possibility to removing the finality from CASImpl itself. That might in fact be easier to work with, but I see no harm in exposing protected members to subclasses such as CASImpl in form of an abstract class. If CASImpl itself were to become extensible, some of those members invariably would have to become protected as well, right? \n. Relaying another experience here; we are actively working on another CAS deployment that effectively would have to include a new CASImpl. Having an abstraction up top to inherit commonly needed services would have definitely helped reduce code and confusion in the overlay. \n. Sure, happy to tell. Use cases are in the context of MFA where generation and/or delegation of TGT is required to be delayed. We would need two CASImpls really, one that simply just authenticates and one that actually issues the TGT after the Nth factor is passed. While MFA uses cases may be too CAS 3.5.x specific, this as @leleuj mentioned could also be reviewed from an extensiblity POV where subclasses of the CAS interface would not have to respecify all the other getter/setters, but simply implement the needed methods. \n. I do believe that CAS 4 would ease that integration; although one thing that would likely make it difficult as @serac says is that act of gathering credentials in a step-wise manner, where credentials at each step would have to be authenticated before user can proceed to the next \"screen\". WIth that in mind, batch of credentials to the handler would likely be not that effective. That would still force us to delay TGT generation, which would again force us to extend CAS. \nWe also have another project coming up that would involve MFA and CAS to some serious extent and it would be interesting to figure out how and to what extent 4 may help with those set of requirements. (Not sure if the codebase will be based on CAS4 at all, but I sure hope so) \nNonetheless, I still think that whether it's a parent abstraction or pre/post event methods, it's still pretty useful to be able to hook into CASImpl as well. Abstraction even more so, simply because it's more than difficult to figure out the right set of hooks for pre/post methods that would cover the simple case. \n. Will post back as details surface up. \nIt certainly does relate to LOA, but I am not sure we/community are there yet. Most simply have a much more modest requirement set that generally falls under the category of \"if this app requires mfa, then do mfa and prompt back\". The specification of mfa from the app to CAS is either done opt-in via request parameters, or via service registry mapped to each service.\nTo be clear, most do not deal with loa yet. The authentication \"method\" that is specified is simply just a string that is meaningful to the CAS server and the client with no broader impact. These methods are configured inside the CAS server also bear no hierarchy and CAS simply just has to remember what's been fulfilled without understanding much about the level itself....nonetheless, these are all marginal steps towards the right direction that is ultimately loa. \nFor the time being, one thing that we probably could target and discuss is to provide api/platform support for step-wise credential gathering. There also a note somewhere on the list that spring subflows could be very useful in modeling additional authn factors, which we also have used and been successful with.\n. Quick update here and relevant to the discussions on this PR: I will be reviewing a MFA implementation based on CAS (v2 development ongoing now) at Apereo here:\nhttp://lanyrd.com/2014/apereo/sdbbdh/\n. We are starting in 45 minutes and I think the sessions are streaming live and will definitely be recorded. I'll see if I can find the YouTube link and paste it here\n. http://t.co/zZDdDPfUng\n. Sure. \nWithout support for patterns, flows needs to be registered and identified directly, in cas-servlet.xml, such as this:\nhttps://github.com/Unicon/cas-mfa/blob/master/cas-mfa-web/src/main/webapp/WEB-INF/cas-servlet.xml#L157\nUsing a pattern-based approach, all flows that are placed in the path that matches the pattern are automatically picked up, which removes the requirement of overlaying that xml file. Also, assignment of ids to flows is done automatically which is the recommended way; such that:\nIf basePath = WEB-INF and we have two flows, login/login-webflow.xml and `/logout/logout-webflow.xml', then each flow is auto-assigned a unique id based on the directory name, \"login\" and  \"logout\". SWF recommends that flows be placed into unique directory names to promote modularity.\nNext, subflows are referenced inside the main login-webflow.xml file, such as this:\nhttps://github.com/Unicon/cas-mfa/blob/master/cas-mfa-web/src/main/webapp/WEB-INF/login-webflow.xml#L155\nand here's the actual subflow definition:\nhttps://github.com/Unicon/cas-mfa/blob/master/cas-mfa-web/src/main/webapp/WEB-INF/subflows/mfa_strong_two_factor_webflow.xml\n. Merging this on May 20th. Please let me know if you see any problems with the proposal.\n. To address @leleuj for a more concrete example, lets say I wanted to add a new webflow file to CAS. With the proposed change, I would create a directory inside webflow. The directory name would be the id the flow that is assigned by the flow registry. So lets say my directory name is mfa. \nThen inside the mfa directory, I would create my webflow file and call it mfa-webflow.xml. Since patterns are used, CAS will pick up my mfa webflow, and I will be able to use and reference the mfa flow, as a subflow for instance, in the login webflow, or the logout, etc. \n. Without this change, I would physically have to grab the cas-servlet.xml file, in the overlay that is, and register my flow by the id. \n. :+1: \n. Shoot! I'll take a look it. \n. Planning to merge by Monday morning. If you do see issues with the proposed changes, please post back.\n. Pushed.\n. Right, as a followup on the same thread, under CAS-1381 the plan is to ensure that attribute support in CAS is compliant with the latest protocol doc. Once the support is fully implemented, under CAS-1283 we'll proceed to create new endpoints and separate out changes. \nI mostly wanted to address the attribute requirements in full before diving into new endpoints and separation of changes. \n. Planning to merge by Monday morning. Do let me know please if that is an issue.\n. Thanks for tracking down and working on the issue. Much appreciated. \nThe changes look fine. Few suggestions:\n- Please amend the commit message so it looks more like CAS-1397: Catch exceptions thrown by decoratedMap bean. This makes it easier to track the change in history.\n- I am wondering if we should log the exception explicitly rather than throwing it? Something like logger.debug(e.getMessage(), e)?\n. If the get operation fails on the map, dont you automatically get an exception in the logs? \n. Cool. Post back when you get the chance please. \n. The null check makes sense to me, for the issues your described. Other than that, all other exceptions should automatically be thrown. I dont think the're any reason to catch them, if you simply want to review details in the logs. Null checking obviously being different. \n. I can tell that the exception is thrown back to you, by looking at the log output provided. It shows that something is thrown, which you are then able to catch and print the following message:\nDEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Could not retrieve hashed value for key [...]: Exception waiting for value\nNow, if that's not showing up in the logs then we'd have to look and see why. I mentioned that it might have something to do with log4j configuration, but not entirely sure.\nRegarding MemCacheTicketRegistry; perhaps. @serac would be able to better explain the intended case there. \n. Thanks for bearing with me. Full comments and details are much appreciated.\nI have got a few additional questions for you: I'd be very much interested to know 1) the concrete implementation of the Map that is plugged into the decorator, as well as the full packed name of the exception that is thrown. Reason I am asking this, is because with your changes, [as you correctly noted and I had wrongfully misinterpreted them :)], there's a catch clause that grabs onto something and so in the logs we have trapped the error. I'd want to know why the same exception does not show up in the logs without the catch clause. Nothing that you are doing in this pull at least theoretically! has any impact on the throwing of the exception, so I'd like to explore this a bit more. \nThe objective for my part is to discover and understand the root cause of course. It may be that the catch clause is needed afterall, but at this point, we are not entirely sure why and that's what I'd like to find out first. \nKnowing the full exception type also should helps us debug the 403/empty response issue. From everything that you're describing, it certainly seems like couchbase under load times out to the point where latency and failure to find the right ticket causes clearpass to fail. The improvement I foresee out of this, is that regardless of the persistence storage underneath, clearpass should never successfully render with an empty block at least. I wonder if I can duplicate that issue, but would like first to know the actual exception type that is thrown. Might have been OperationTimeOut of some sort, right? Would be great to see the full exception stack.\n. Excellent. Thanks!\nJust to be fully clear, what is the version of the jar containing the class net.spy.memcached.CacheMap?\n. I did thanks! Had a cursory review of the output log. I'll spend time this weekend to review once more and would have a few suggestions for you on how to massage the current pull.\n. So, brief review of the CacheMap shows that it in fact \"assumes\" the put operation was successful, simply returns the previous result without actually verifying whether set was successful:\nhttp://www.grepcode.com/file/repo1.maven.org/maven2/com.google.code.simple-spring-memcached/spymemcached/2.8.1/net/spy/memcached/BaseCacheMap.java#141\nSince set() is an async operation, it probably isn't easily possible to grab the result flag, if there is one at all.\nSo In light of that I'd like you to perhaps modify the pull to match the following:\n``` java\n    @Override\n    public String put(final String key, final String value) {\n        final String hashedKey = constructHashedKey(key);\n        final String hashedValue = encrypt(value, hashedKey);\n    try {\n        final String oldValue = this.decoratedMap.put(hashedKey, hashedValue);\n        if (StringUtils.isBlank(oldValue)) {\n            throw new Exception(\"Failed to store hashed value for key \" + hashedKey + \". Put operation returned null\"); \n        }\n\n        return decrypt(oldValue, hashedKey);\n    } catch (final Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n\n    return null;\n}\n\n```\nPlease put enough contextual comments around the throw clause to explain why the null check is needed.\n. and the get():\n``` java\n@Override\n    public String get(final Object key) {\n        final String hashedKey = constructHashedKey(key == null ? null : key.toString());\n    try {\n        final String hashedValue = this.decoratedMap.get(hashedKey);\n        if (StringUtils.isBlank(hashedValue )) {\n             throw new Exception(\"Failed to retrieve hashed value for key \" + hashedKey + \". Get operation returned null\"); \n        }\n\n        return decrypt(hashedValue, hashedKey);\n    } catch (final Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n\n    return null;\n}\n\n```\n. Also, note that the clearpass controller of the master branch redirects to the clearpass error view if the received password is null or blank. So some safety is built in there.\nAs far as retries go, I think that would make sense in terms of a custom extension of the EncryptedMapDecorator.java. You're welcome to submit a patch to the memcached module that adds retries, but given that this is really separate from what the code does and the issue really has to do with how couchbase behaves, I dont know and am not too sure if retries would get you the desired behavior all the way. Might be fine to just simply maintain that custom java class in your overlay, or rethink couch db perhaps. \nThis might also be interesting to review:\nhttps://github.com/KTHse/cas-server-integration-couchbase\n. Planning to merge by noon US-EDT\n. Sounds good.\n. Merging this one too; will merge with master first\n. Planning to merge by noon US-EDT\n. Roger\n. Running mvn checkstyle:check\nBefore javadocs:\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 35.563s\n[INFO] Finished at: Sat Dec 07 02:51:12 MST 2013\n[INFO] Final Memory: 15M/37M\n[INFO] ------------------------------------------------------------------------\nAfter javadocs:\n[INFO] Total time: 24.859s\n[INFO] Finished at: Sat Dec 07 02:40:03 MST 2013\n[INFO] Final Memory: 15M/38M\n[INFO] ------------------------------------------------------------------------\n. Thanks for the great review. I did account for a whole range of comments, and did push additional commits. \n. Merging by noon MST\n. Looks like I did miss a few test cases:\nFailed tests:   testValidServiceTicket(org.jasig.cas.web.ServiceValidateControllerTests): expected:<cas[]ServiceSuccessView> but was:<cas[2]ServiceSuccessView>\n  testValidServiceTicketInvalidSpec(org.jasig.cas.web.ServiceValidateControllerTests): expected:<cas[]ServiceFailureView> but was:<cas[2]ServiceFailureView>\n  testValidServiceTicketWithInvalidPgt(org.jasig.cas.web.ServiceValidateControllerTests): expected:<cas[]ServiceSuccessView> but was:<cas[2]ServiceSuccessView>\n  testValidServiceTicketWithBadPgt(org.jasig.cas.web.ServiceValidateControllerTests): expected:<cas[]ServiceSuccessView> but was:<cas[2]ServiceSuccessView>\n  testInvalidServiceTicket(org.jasig.cas.web.ServiceValidateControllerTests): expected:<cas[]ServiceFailureView> but was:<cas[2]ServiceFailureView>\n  testValidServiceTicketWithPgt(org.jasig.cas.web.ServiceValidateControllerTests): expected:<cas[]ServiceSuccessView> but was:<cas[2]ServiceSuccessView>\nWill take a look shortly.\n. Team, I'd like go ahead and merge this pull by the following Monday morning. Please review when you get a chance. I believe this is the last pending issue for the next release.\n. @leleuj great catch! phew, thank you. I must have forgotten to stage and push the file over. Added another commit to include the new view definitions. \n. I do have reservations about including the version number in the endpoint, specially as changes are done to the protocol which would subsequently impact endpoints but I dont suppose those would be too frequent and often. \n. > And /rest/vX/ for the next version of the REST API ?\nWe do actually have a jira open to rewrite the rest api based on spring. So that might be a good opportunity to do that then. \nSimilar to the current issue: does it make sense for the rest api endpoints to become part of the protocol? Or at least optional in the protocol? That helps with consistency and standardization too.\n. Thanks for the clarification. Makes sense.\nAs for rest endpoints in the protocol doc, I think I will raise the point to the mailing list so other get a chance to comment and discuss as well with more visibility. \n. This is just an API change actually. There are no behaviors to test. \n. Merging this by noon EDT. \n. I'd suggest that you post the question to the @cas-user mailing list. Broader audience might get you better details as far as the general experience of folks who have deployed one or the other. Personally, I'd prefer in-memory transient caches. Something like this even would be worth reviewing: https://github.com/Unicon/cas-addons/wiki/Configuring-HazelcastTicketRegistry\n. Isn't bcrypt essentially a one way hashing strategy?\n. So, I am wondering: is this proposal reasonable to include? and if so, is it fit for RC3 or GA? \n. Right, likely not so...and it's such a minor change that I am wondering, JIRA needed?\n. Sure thing. I'll create one, and will capture a summary of this conversation there as well. Will update the pull soon.\n. This pull can now be closed, in favor of new state handlers provided.\n. :+1: \n. Thanks. I did just fix the reference to the http client. Mostly opted for this approach since it allows for better unit tests.\nI am planning to merge this by late Friday evening and then hopefully work on RC3 this weekend.\n. Merging by 9am CDT\n. Ah, should have clarified. That piece is just house keeping with no real effect. I simply removed the ${spring.version} from the spring-expression dependency, since it was redundant.\n. I have fixed the issues @leleuj pointed out. Please review and post back if you find other issues. Would like to proceed by this weekend's end :)\n. Merging by noon EDT\n. :+1: Although, please modify the commit message to match the template provided here:\nhttps://wiki.jasig.org/display/CAS/Code+Conventions\n. Should be fine. No worries. Just make sure future pulls follow that pattern :)\nAppreciate your help on this issue.\n. Planning to merge by EOD Friday. \n. Great, thanks. :+1\n. Coolio, although not needed really. 3.5.x development has come to an end :)\n. Merging by noon MST\n. Merging with master once, and then merging in\n. Sure thing.\n. Looks like I have to merge this one, since v39 of the parent pom brings over maven-release-plugin v.2.5, which itself includes git-scm-provider-plugin v1.9, which solves commit issues with recent versions of git, which is what I have, v.1.8.5.2!\n. This is relevant perhaps:\nhttp://stackoverflow.com/questions/15166781/mvn-releaseprepare-not-committing-changes-to-pom-xml\nI think @battags also ran into a similar issue when working with the release plugin and the Java client.\n. Apparently, git 1.8.5.2 has changed the commit syntax, which maven-release-plugin v.2.4.2 and git-scm-provider 1.8 are not compatible with. \n. More context: problem I am running into with RC4 is that modified POM versions and tags are never committed and pushed to the branch. The build however successfully completes without any error messages!\nWhat I'll do is, I'll commit this pull to see if that solves the problem. If not, I'll reverse the change. Cant test the new parent pom version without commits, since the plugin will then complain that I have uncommitted changes. \n. Discussed with @leleuj and upgraded local git version to 1.9. Ran through the prep process with no change unfortunately. Will merge next and see what happens!\n. That worked!\n. True, though this is aiming to address a somewhat more modest requirement of having better control over the access rules. \nAs far as two endpoints, I think logically it makes sense for each entry point to have its own configuration. Practically, you do have a point that the audience for both may turn out to be the same. \n. Merging by noon MST\n. I think it\u2019s a split, but I wouldn\u2019t mind for this to go in post 4.0. I \nbelieve there exists another pull that attempts to fix the naming issue with \nSLO callback property, so that would also be in conjunction with this one \nonce the time comes.\n. I had the same question, while researching this. Turns out that it does care. The logout manager attempts to remove all STs first, before initiating SLO protocol.\n. Seems like everyone is on board with this change as well; Merging in.\n. I will also create a JIRA issue to see if we can remove/refactor properties. Perhaps the logout manager should handle everything, including the removal of STs. \nhttps://issues.jasig.org/browse/CAS-1451\n. 3.5.x development has ended. Please issue a new pull for the master branch. \nAlso it appears that the pull is now failing?\n. Closing PR for now.\n. :+1: \n. :+1: I had a few minor comments, but overall, it looks great. \n. Agreed. Moving the configuration makes sense to me.\n. +1\n. @leleuj Had a look at the media directory. There are a few images, but I believe that most have been accounted for in the current docs under Arc and Planning sections.\n. Note that the documentation generated by the maven site needs to still remove the links to \"user manual\" pages. I have added a few other commits on this pull to take care of that as well.\n. CAS builds with Travis are available here: https://travis-ci.org/Jasig/cas\n. Sure; something like this: https://github.com/ReadyTalk/swt-bling/blob/master/.utility/initiate-publish.sh\n. Planning to merge right after https://github.com/Jasig/cas/pull/397 is merged to finalize.\n. Sure, that may be alternative. I am not sure how I feel about a single branch with one file in it though, but it's simpler to understand.\nAs far as encryption, it's done via private/public keys generated by travis for the account and per repository. My analysis is that unless one is able to hijack your travis account, ..., decrypting it would be more than trivial....and it can further be strengthened if you login to travis via github and have 2fa turned on, etc. \n. Es geht gut. Danke schon!\n. +1\n. Could I ask you to amend the commit message to be in the format of: \"CAS-1428: xyz\" ?\n. Right, but that changed the pull request title. The commit message is still the same:\nhttps://github.com/Jasig/cas/pull/404/commits\n. I'd be happy too, but this might also help:\nhttp://stackoverflow.com/questions/179123/how-do-i-edit-an-incorrect-commit-message-in-git\nTake a look and see this can be useful. Otherwise, I can always close the pull.\nAppreciate your help.\n. Sure.\n. Merging this one by EOD. \n. Thing is, we do have documentation that describes service-based themes. There are two issues with that:\n- Even with the doc, it took me a good while to get everything in order. I'll update the doc based on that experience, but having a functional example speaks much louder than words.\n- Service-based themes can be demoed and presented. \nAs far as the default theme, I am not sure what the proceedings are. All references in code and documentation point to jasig, hence the theme here. If that were to change, I think we'd have to take on a more comprehensive approach. \n. Here's a screenshot of the apereo theme:\n\n. Pushed\n. I'll be merging this one by Friday. Please let me know if that's an issue.\nThe comments above raise a point around whether the protocol might want to add other attributes in order to better convey remember-me state, if enabled. Given that it seems we dont have any particular requirements of use cases around extra data for remember-me, and given that the pull for the time being allows the model to be augmented, I am leaning to leave the behavior as is for, and revisit when we have better context on how remember-me might be implemented with the likes of spring security etc. \n. Are you saying, a link to the html rendering, or to actually include the entire html doc in the branch? \n. No concern. Travis can be temperamental. It will bounce back at some point\n. :+1: \n. Merging by noon EDT...\n. I probably should update the http://jasig.github.io/cas/developer/Contributor-Guidelines.html to note the accepted format on commit messages as well.\n. :+1: \n. This may not be a realistic scenario, but consider that the scenario does not always depend on having a ticket cleaner. There are certain ticket registry types that have their own eviction policy which do not require a cleaner by default, and configuration of those is not only tricky, but also outside what CAS can do.\nThe objective here from an API design point of view, is: if TGT has expired and is to be removed, logout protocol must be initiated. Regardless of circumstances, I tend to see the codebase failing to adhere to that principal. \n. Correct. The logout manager will perform the logout op when the TGT is destroyed. If SLO is turned off, it will simply ignore the request and return. \n. Correct\n. Merging by noon MST\n. Planning to merge by late Friday afternoon, unless there are concerns.\nP.S: This hopefully should be the last pull before the GA release, I think.\n. Made the change suggested by @leleuj, in capturing uids into a separate variable.\nPlanning to merge by EOD.\n. Good point; I tend to think this is implementation detail no? Protocol basically says service tickets can be validated for the service they are issued for, and we are still doing that but just taking care of annoyances.\nI'd be fine with a protocol revision though. @robertoschwald ?\n. Merging by Wednesday May 20th, unless there are additional comments.\n. you mean by default, regex patterns make the comparisons in a case insensitive mode? \n. I am fine with that. The only thing is, do we think doing that would cause backwards compatibility issues? I am more inline withe change of keeping the option, but perhaps flipping it so it by default does the comparison in a case insensitive mode, but adopters can change it if need be. \n. I have only come across some homegrown applications that treat urls sensitively (/status vs /Status) for instance. But it seems like this is just rather a minor complication that we can accept. I'll readjust the pull to remove the option and have the comparison be case insensitive by default. \n. - I take \"SHOULD\" as in, you know, it should :)  ... and it's definitely not a \"It may\" or \"It is optional\" or \"It is recommended/suggested\" unless we are interpreting SHOULD as in \"It should do x, but it's not required to do so\", in which case I dont see the addendum...and if so, what's the difference between SHOULD and MAY then?! :)\nEither way:\n- All other entity types in the protocol adhere to a given prefix for their IDs. PGTs and PTs \"should\" as well.\n- If we are taking \"should\" as \"optional/recommended\", it's nonetheless a change that we can accommodate and implement. This pull implements a positive recommendation for a reference implementation of the protocol.\n- PGTs and PTs are entities in the protocol. They are considered domain objects in the protocol and yet in the codebase they are not. That is an inconsistency.\n- There are also additional side-effects, where the separation and explicitness of a PGT (or a PT) allows for a creation of a separate cache instance in distributed environments, as requirements have come up in the list at times.\nAs for the survivors of the Yale team, I am rather sure @apetro is very much now akin and sympathetic to this change for the very same reasons outlined above :)\n. Awesome, thanks for the RFC reference! I now understand the difference and changed the title of the pull request :)\nI certainly didn't mean inconsistent to be in terms of a \"defect/bug\". Obviously, things are functional but nonetheless, it's an inconsistent pattern to me. This is not to blame of course but just an observation and chance to improve. We could certainly debate technicalities, but naturally, when I see ServiceTicket and TicketGrantingTicket, I'd naturally also expect ProxyTicket and ProxyGrantingTicket as well. \nNonetheless, all this may be of little consequence pragmatically. Aside from clarity and a more strict adherence to protocol recommendations if you would, there may be two possible benefits; cache separation and more concretely, finer control over expiration policies. (We actually have/had a JIRA on the latter, if I recall correctly)\n...all of which definitely not intended for 4.0.\n. Also, another question: Why is then that service tickets MUST be an ST and ticket granting tickets a TGT, but proxy-granting tickets should be a PGT? Would that perhaps be considered inconsistent? I fail to realize the difference there.\n. > At the same time, we should actually not be using TGT, PGT, ST, or PT internally as domain objects as we support OAuth, SAML, and CAS. But I may be the only one who wants to go that far and clean that up.\nLets discuss this further more. We have had discussions on how we'd want to separate the authentication subsystem into a more generic layer and I think @serac at some point recommended the concept of a Session. I dont how how far we may go, but I feel like that is something which in theory would be targetted for 5.0 which may be long ways to come depending on time, resources [...and in my case insomnia and public transportation with highspeed wifi :) ]\n. Just as FYI,  this JIRA has been logged to implement and discuss a larger refactoring of the SSO API,  \"Session\"s, etc.\nhttps://issues.jasig.org/browse/CAS-1421?jql=text%20~%20%22refactor%20session%22\n. Reviewing this pull request again, it seems like most folks are on board with the change but a need has been identified to take on a larger effort to refactor the codebase to be more protocol agnostic. If that's a fair view, are there any objections to merging this pull? We have recorded CAS-1421 to address in CAS-FUTURE but given a small incremental improvement here, I'm more inclined to merging this now and tackling the effort one small bit(or byte) at a time. \n. Well, it will be quite a while until we actually get to do the refactoring and that is again at this point is just a proposal. This PR is low hanging fruit, that we can start to build on top of. I am not sure what the refactoring code would look like, but I'd presume it something that sits on top of these APIs. So this feels like a small step in the right direction. At the same time, we can start to support provide support for other features such as PGT expiration policies, etc. \nWe could always just do:\nc#\nif authentications.size > 1 then\n    ticketId = serviceTicketUniqueTicketIdGenerator.getNewTicketId(\"PT\");\nend if\n...and I may have started on the route initially, but that just didn't feel right. These objects do need to exist in the codebase. How they are represented in the upper layers (as far as \"Session\" may be concerned later) is a different matter.\n. So it seems like all is said and one. Any concerns if I take this one by say, Wednesday evening EDT? \n. OK. I continue to remain skeptical about future refactoring of the codebase removing the need for this pull, but sure, in the meantime, I could put something together that is smaller and more targetted. PR to be revised shortly. \n. Superseded by https://github.com/Jasig/cas/pull/452\n. Merging by Wednesday May 20th, unless there are additional comments.\n. Merging by noon MST\n. Merging by noon MST\n. Pull is already pending:\nhttps://github.com/Jasig/cas/pull/422\n. Planning to merge by late Friday evening. \n. Correct. This pull likely breaks custom extension types. I thought that if new extensions were to be developed, the manager UI would also have to be changed by deployers as well and extended. (Doesn't the command class have to change?)\nMy objective was, at this point, to simply advertise as @serac notes that we simply ship the UI with official service types that exist in core. For 4.1, we certainly have plans, jira and pending pulls that account for a better refactoring and clean up of the UI. \n- Use MVC annotations\n- Enable attribute filters and other properties of the services to be set via the UI\n- Enable support for OAuth services, etc\nHowever, I'm happy to go back and revise the pull if extensions are to be considered seriously for 4.0.\nThoughts? \n. Closed in favor of https://github.com/Jasig/cas/pull/427\n. There is a minor issue still with the functionality; and that is if a regex-enabled service is edited and an ANT pattern is specified instead, one that would be considered invalid by regex syntax, an error is thrown. This is because the command class does not change on the fly during the editing of the pattern and validator throws the error.\nSo to recap:\n1. Edit a regex service: ^http://xyz\n2. Change pattern to http://**\n3. Click save.\n4. Receive error\nI'll look into the issue to see if I can find a small fix. \n. None yet. Hopefully will do some testing today. \n. pushed another commit, the issue should be fixed now.\nI had to make a compromise, that is, regex patterns are no longer validated on the fly as you save. the pattern is created and verified only when it attempts to match a service.\n. Excellent, thanks for checking. I'd like to merge this by noon MST. which is about 5 hours now to give ample time for feedback and comments. otherwise, will proceed and we should be good.\n@leleuj could you please rekindle the GA conversation on the list? I am happy to assist with the release and maintenance of javadocs and the doc site, but I am a bit pressed for time. lets set a date. \n. +1\n. :+1: \n. @leleuj I think you can significantly make things easier if you simply use c:forTokens and specify the delim to be something else:\nhttp://www.tutorialspoint.com/jsp/jstl_core_foreach_tag.htm\nMaybe we could opt for a delim character that is rather unexpected? \n. I'll have to run a few tests, not sure, but it sure looks simpler. I'll report back in a few seconds, unless you beat me to it :)\n. It appears that forTokens is kaput for collections. :+1: \n. +1\n. The proposed flow is:\n- Expired tickets are collected by the cleaner.\n- Expired TGTs are handed off to the logout manager to perform logout\n- Services associated with the expired TGT are removed\n- TGT marked as expired\nAt this point, IIF the logout manager has turned on SLO, messages will be sent to endpoint as normal. \n. Merging by Friday evening. Please let me know if that is an issue, or you have concerns about the pull.\n. Added test cases, and also found a couple of issues via the test. So thanks for the suggestion really :)\n. Merging by Friday evening. Please let me know if that is an issue, or you have concerns about the pull.\n. I also updated the docs with a section on transformers. \n. We do have an interface that sort of serves the ultimate abstraction. The objective behind actually providing a solid impl that reviews the remote addr, is that it's a feature that is fairly often requested by folks who are concerned with \"Kiosk-based Authentication\". Consider scenarios where CAS is access on a public computer, say at a library or a student lab, and what the expected behavior is, CAS should be able to determine a much more strict and shorter expiration policy for that particular TGT, compared to one that is generated when CAS is used at somebody's laptop. So the solid impl helps with that use case that folks can just configure and use...although we definitely do preserve the abstraction for anybody else who wants to other fancy things with evaluators of policies. \n. Merging by Monday morning. Please let me know if you see any issues with the pull.\n. By all means, sure.\n. Any updates? \n. Just a friendly reminder that I am available to address updates on this one. \n. How are we doing here? I'd like to begin work on a few related other issues on expiration policies, and would like to resolve this when we can. \n. Bump. \n. bump\n. Thinking about this a bit more; it looks like our remember-me implementation is a very much like the composite ticket policy presented here; maybe we could merge the two somehow?\n@battags let me know what you have mind, or what is still bothering you about this. Granted, this was originally designed as an extension to be non-intrusive but there may be more we can do to better integrate. \n. I updated this pull, to remove the previous API changes. There is now an abstract class that exposes what I previously had in mind in terms of requests and remote addresses, which satisfies the same goal with less clutter and API noise. \n. You make an excellent point. I would think that custom expiration policies would need to extend AbstractCasExpirationPolicy and write their own rules. Mostly, what I had in mind originally was a policy of some kind that would be able to act on http request's properties. This allows me to do that. \nNot sure we want to open up other policies for extensions. I dont see a use case there. But having them extend this new abstract class makes for a consistent hierarchy. \n. There is a dedicated setter. Not sure this is needed at all. \n. I appreciate the pull but I think the documentation is updated to show the correct syntax. The wiki is not longer applicable for 4.0 of course. Now this likely should have been deprecated, but on the other hand, per release strategy, a major release warrants breaking changes to some extent. \n. There is still some work to be done on the management app side to refactor/remove the isAllowedToProxy flag. I'll continue working on that front and will have subsequent commits.\n. It might be, yes. I had in mind that this would be a useful extension point for other policies, and policies whose configuration may not exist in CAS but delegated to other systems. Furthermore, allowedToProxy vs. pgtCallbackUrl are two concepts that are fairly close and tied together, so it made sense to me to come up with an encapsulation that keeps them both in place. So I took the opportunity to consolidate.\nThe management app is a tough one, because it somewhat limits our design choices in core...and it shouldn't. More and more I keep thinking that the app needs a major overhaul, a more modern workflow so that design choices wouldn't be as much inversely affected by the mgmt app. \n. Management app is now updated to remove the checkbox for proxying for now. I also had to update the message bundles to remove the verbiage on CAS working in \"open mode\" as that is no longer applicable. \n. Merging by Monday morning. Do let me know if you see any particular issues with the PR.\n. Last call.\nP.S: build failure is unrelated to the PR.\n. It has not. For some reason, jboss repos are acting up:\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-site-plugin:3.3:site (default-site) on project cas-server: SiteToolException: The site descriptor cannot be resolved from the repository: ArtifactResolutionException: Unable to locate site descriptor: Could not transfer artifact org.sonatype.oss:oss-parent:xml:site:7 from/to jboss (http://repository.jboss.org/nexus/content/groups/public-jboss/): Connect to repository.jboss.org:80 [repository.jboss.org/209.132.182.33] failed: Connection timed out\n[ERROR] org.sonatype.oss:oss-parent:xml:7\n. Two actually:\n- Person directory 1.5.2 comes with a set of updated dependencies, most notably spring that previously could cause conflicts in CAS overlays.\n- Some new DAOs are now available, such as one that is backed by a JSON file, and one based on a custom Groovy script, giving CAS the power of scripted attribute resolvers.\n. @leleuj The benefits are numerous, but what I mostly care about is:\n1. Java 7 and 8\n2. REST APIs. \nI am hoping that we might be able to transition to Java 7 soon. \n. Also servlet-api ~~3.1~~ 3.0 support is another benefit. \n. I had to fix a few failing OAUTH tests, Apparently, the new MockHttpServletRequest in Spring4 now omits default ports which caused 2 test failures. \n. Failing tests\ntestResolvePrincipalInternal[0](org.jasig.cas.adaptors.x509.authentication.principal.X509SubjectAlternativeNameUPNPrincipalResolverTests)  Time elapsed: 0.008 sec  <<< FAILURE!\njava.lang.AssertionError: Error parsing certificate /x509-san-upn-resolver.crt: invalid DER-encoded certificate data\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.jasig.cas.adaptors.x509.authentication.principal.X509SubjectAlternativeNameUPNPrincipalResolverTests.<init>(X509SubjectAlternativeNameUPNPrincipalResolverTests.java:61)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:534)\n    at org.junit.runners.Parameterized$TestClassRunnerForParameters.createTestUsingConstructorInjection(Parameterized.java:186)\n    at org.junit.runners.Parameterized$TestClassRunnerForParameters.createTest(Parameterized.java:181)\n    at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:244)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:241)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runners.Suite.runChild(Suite.java:127)\n    at org.junit.runners.Suite.runChild(Suite.java:26)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:622)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n. Also, please amend the commit message to say:\nCAS-1468: Implementation of X509SubjectAlternativeNameUPNPrincipalResolver\n. http://jasig.github.io/cas/developer/Code-Conventions.html#template-for-commit-messages\n. It might have been an issue with Travis. I restarted the build. Lets see what happens this time around.\n. @dima767 any updates? let me know plz if I can help out. \n. This looks pretty good! Thanks @dima767 :+1: \n. @dima767  one last thing before we merge this one in: could you please provide a sample xml configuration of how one would configure this resolver in CAS?\n. No, just an xml config snippet here. I would like to take a shot at the docs and update them with the new resolver. Or if you'd rather do that it, all the better. Just want to use the existing config you have...less typing for me :)\n. Excellent, Thanks!\n. I think this is an improvement to allow for matching file/view names, so that dynamic view resolvers can  be implemented. What I really hope to see is that we remove the property file views, and have the resolver simply just work with the viewname, which is Spring's default. This way, it would make it completely unnecessary for one to include this file in the overlays. Filenames just have to match logical view names. As I mentioned, this would also one to create dynamic view resolvers that would show a different CAS login page, or use a different context path for view names that may be entirely separate, and not limited to just JS/CSS. \n. John, I think we could also work on an alternative implementation of a resolver, that resolves a view name by the theme defined in the registry entry. Does that make sense? So for instance, if the theme is defined for a service to be \"student\", the resolver would look into /web-inf/view/jsp/student directory to find relevant views. This is something that is fairly on-demand.\n. @jtgasper3 How are we doing here? Anything I can do to help?\n. Docs would be better, I suppose. We do have a section on UI customization and theming, this would be a good addition to that block. \n. Looks great to me. I'd wait for a couple of days, so that perhaps @leleuj  or @battags  have a chance to review. and then we should be good to merge. \n. So, where do we stand on this? \n. I merged this PR with master once to bring it up to speed, and also updated docs and comments inside the class RegisteredServiceThemeBasedViewResolver to better reflect its purpose. I think the class should be marked as final, because there's nothing here for to actually extend, and also provided a setter for the path prefix so it's not entirely hardcoded, if one wants to get creative. Also decided to rename the class to try and differentiate between that and the existing service theme resolver. \n. Bump. Everything looks good? Plan to merge by Friday? \n. Team, planning to merge. Please let me know if you see a blocker with this issue.\n. This is ready to be merged as well. The build failure is Travis failing to read from Amazon's AWS somehow. all tests do pass and the deployment is functional as normal and before.\n. Yes, the changes presented here are not backwards compatible. Again, I was sort of comforted by the release strategy for a minor release that would allow for such changes. Of course this wasn't my original intention and I did start out with the idea of deprecating what may no longer be used, but as I progressed, the changed became far too many and I didnt want to concern myself with side effects of keeping track functionality on both new and old. So I stuck with the changeset here.\nI think the changeset here is within scope of a minor release, but if it's too much of a burden, we could slate it for future releases. \n. How are we doing on this PR? @battags, have you had a chance to review the latest set of changes? \n. The pseudo-anonymous functionality is restored to just be based out of principal. Adding the Service object would work surely, but my concern is that it's only used by the anonymous generator which seems impl specific, but I'll see if I can find a way around it. If not, I'll restore that back. \n. Understood, and I have restored the functionality back to original with your comments as javadocs. Thanks!\n. So, we good on this one? Any other thoughts? \n. I deprecated methods and added warn logs. \n. bump\n. I have merged with master and address a number of comments that Scott had. \n. So, where do we stand here? Anything else I can help clarify or make adjustments? \n. So I accounted for the comments @leleuj had but the issue of Lob still needs to be addressed here.\n. Team, planning to merge. Please let me know if you see a blocker with this issue.\n. Heads up; Merging in a few days so I can resume work on #681\n. Merging by EOD.\n. [INFO] Reactor Summary:\n[INFO] \n[INFO] Jasig Central Authentication Service .............. SUCCESS [  4.392 s]\n[INFO] Jasig CAS Core .................................... FAILURE [  1.096 s]\n[INFO] Jasig CAS Generic Support ......................... SKIPPED\n[INFO] Jasig CAS Web Application support ................. SKIPPED\n[INFO] Jasig CAS Web Application ......................... SKIPPED\n[INFO] Jasig CAS JDBC Support ............................ SKIPPED\n[INFO] Jasig CAS Legacy Support .......................... SKIPPED\n[INFO] Jasig CAS LDAP Support ............................ SKIPPED\n[INFO] Jasig CAS OpenId Server Support ................... SKIPPED\n[INFO] Jasig CAS RADIUS Support .......................... SKIPPED\n[INFO] Jasig CAS SPNEGO/NTLM Support ..................... SKIPPED\n[INFO] Jasig CAS Trusted User Support .................... SKIPPED\n[INFO] Jasig CAS X.509 Client Certificate Support ........ SKIPPED\n[INFO] Jasig CAS OAuth Server Support .................... SKIPPED\n[INFO] Jasig CAS Client Protocols Support using pac4j .... SKIPPED\n[INFO] Jasig CAS SAML Server and Validation Support ...... SKIPPED\n[INFO] Jasig CAS JBoss Cache Integration ................. SKIPPED\n[INFO] Jasig CAS Memcached Integration ................... SKIPPED\n[INFO] Jasig CAS Ehcache Integration ..................... SKIPPED\n[INFO] Jasig CAS Restlet Integration ..................... SKIPPED\n[INFO] Jasig CAS - Uber WAR .............................. SKIPPED\n[INFO] Jasig CAS ClearPass Extension ..................... SKIPPED\n[INFO] Jasig CAS Management Web Application .............. SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 7.065 s\n[INFO] Finished at: 2014-07-06T11:35:01+00:00\n[INFO] Final Memory: 28M/186M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.0:compile (default-compile) on project cas-server-core: Fatal error compiling: invalid target release: 1.8 -> [Help 1]\n. Looks good. My question is, should we classify the module as an extension? or should we go with something like cas-server-support-rest, etc? \n. @dima767 as for docs, you'd want to publish a PR against this file:\nhttps://github.com/Jasig/cas/blob/gh-pages/development/protocol/REST-Protocol.md\nOr I could update it directly. Your call. \nAs for module name, I'd go with \"support\" instead since that was the old naming convention. extension sounds like the module lives elsewhere (in fact I no longer consider clearpass as an extension albeit its module name)\n. Or simply click on edit here:\nhttp://jasig.github.io/cas/development/protocol/REST-Protocol.html\n. Would like to merge this by Monday so I could start work on TGT/PGT ids in the audit log. Please review when you get the chance. \n. Heads up. Planning to merge by Monday evening unless there are additional comments. Relates to https://github.com/Jasig/cas/pull/460\n. No worries :) thanks for letting me know. I am resuming work on jira-to-github transfer, and I am working on a little script to make it all happen. should keep me pretty busy for the next couple of days, so no rush. \n. Merged this with master once. Let me know when you get a chance to review this again. This one https://github.com/Jasig/cas/pull/436 also deserves a bit of attention. \n. Heads up. Merging by Thursday afternoon. \n. I am simply acting on lazy consensus, and that I would like move onto other issues as well. Not everyone is actively watching the pulls or taking part in issues due to other obligations and I understand that, but that shouldnt halt progress on our side. There has been adequate and enough time for some of the pulls and if there are no comments or concerns, I am inclined to accept the patch and move forward after a reasonable time period.\n. \u0651For this particular pull, there has been plenty of discussions as it supercedes another and the suggestions have been made for us to do the minimal. A week also has passed. Other issues are pending and some depend on this. I understand the frequency of the pulls is perhaps too many but from time to time I have tried to remind folks to make the time to review. \n. Sounds excellent to me. Lets find a solution to this. The more reviews we have, the better the code quality would be, which is what I would really want. Would you rather post this to the list, or shall I?\n. Responded to feedback.\n. Responded to feedback.\n. Reverted the equals() definition for ticket classes in the latest commit\n. For some reason when I reverted the changes back, the TGT class wasn't staged and pushed. Here it is now. \n. As an extra security measure, it's no longer enough to declare that a service can do proxying on a \"global\" level, but also  that the callback urls should be authorized. The security strength of the callback is no longer limited to just https + requireSecure by default. The actual pattern of the url can be controlled. \nIt would have certainly been better to put the check into the http handler. Issue with that is the handler has no access to the service but just the credential. Although now that I think about it, the credentials passed to the handler ARE the service, so we could certainly move the check over from the controller to the handler. Makes sense? \n. I am going to take a shot at moving the check over to the handler and see what can be casted down to the service type.\n. Sounds good to me. I'll create a separate JIRA for that. Should be painless. \n. Sounds good. I'll account for the suggestions shortly\n. I added the changes so ending bits of the TGT would be visible. Also reviewed the possibility of changing the toString() method, but seemed insufficient, because one could still do:\njava\nlogger.debug(\"Look Ma, here it is [{}]\", tgt.getId())\nI have never encountered a deployment with the need to swap out the logging framework. While in theory, using another framework would still show the ticket id in the logs, in practice that hardly ever happens from what I have seen. If one is to in fact take out log4j and use something else, and does have the technical chops to do so, they'd probably be able to write an appender of some sort to do the same thing. \nModifying the TGT internals also seems to make it difficult to make this behavior optional. A setting would have to be created and passed around to a bunch of classes before it makes it to the TGT. The appender is slightly more flexible. You'd just have to reorder the xml bits. \n. Added test cases and support for PGT ids as well. \n. I understand the side-effect of this change, but I am also mindful that swapping out the logging component is more of an arbitrary feature than a practical one. While it's something that is technically possible, in practice, we have not seen it happen or even requested...Unless you have in mind a creative solution that accomplishes all, this is as far as we can go and a least intrusive option.\n. if Logback is so much better, we should probably switch as well but whatever we choose, at the end of the day, it concretely needs to control this, and that would require compiling directly against their API because that thing carries out the logging stuff and we need to hook into it. \n. That's fine as well. The only issue with that proposal is that it's not uncommon for logs to be sent to syslog. Should a ticket id be logged, it will be available to some external logging instance and that exposes the same risk. We could get around it by making sure ticket ids are not logged with a CS rule or something, but that doesn't help much either with diagnostics.\nAnother option would be to perhaps write a native aspectj file, which allows us to use pointcuts that Java doesn't yet. call for instance would work. \n. In summary, I am less excited about a partial solution but if that were to be, then so be it :) Swapping out the logging framework given it's rare occurrences at this point is more a of a theoretical issue and while I would loved to account for that well, at this point I think this is a legit compromise. \nOr, if you feel striongly about this, we could look into a native aspectj component that wraps calls to an external library call, like .debug(...)\n. You're right, but let me explain. The audit trail manager only applies to auditing functionality. Not the regular logging mechanism. If I start doing something like this:\njava\nlogger.debug(\"Look Ma, here it is [{}]\", tgt.getId())\nAudit trail is not going to catch that. \nStatements like above will become a problem when logs (not just audit logs) are sent to the syslog with a log4j SysLogAppender. \n. Just to sort of put your mind at ease, if you search the cas mailing list for \"LogBack\" you'll find less than a handful of questions that are only partially relevant. I like the switch to Logback indeed, or at least log4j 2.x, but I dont see how we can get around this issue simply without hooking directly into the logging machine.\n. Interesting idea! I am wondering, rather than going directly against log4j etc...can we find something in slf4j itself? That should work regardless of the logger instance and would be the dedicated component you are referring to. Maybe a custom LoggerFactory or something? \n. Cool, well thank you for brainstorming with me on this. I'll take a peek at slf4j and see what can be done. \n. OK, I think I have found a MUCH MUCH better solution. Will be closing this PR for now.\n. That is partially my fault. When we moved JIRA to Github issues, you possibly did receive way too many notifications, as many JIRAs were simply assigned to you. Please ignore those. \nI really think we should establish a reasonable time period, which when passes, a pull can be merged. I have mostly been tracking this by observation and lazy consensus, but formality helps to determine what actions should be taken.\nAgain, I am available to revise this pull or any other that is merged if you or anyone else feels inclined to raise questions. No problem at all. Just dont want to wait indefinitely.\n. I understand plenty of other folks have other obligations and daily responsibilities, and it is definitely not my intention to blame folks for being careless. Not at all. It's simply that part of my \"job\" is to contribute to the project and I would like execute well on that.  Might be why it may feel like I am rushing to get something in. But again, I am all for boundaries and putting together a formal window of time. Not everyone has time or the patience to review a proposal to change, and we can trust someone's judgement.\n. Most definitely, by all means. I am all for additional reviews and few more eyeballs on the changset. So lets. \n. I wouldn't say I am full on CAS development; I have nonetheless other engagements I should attend to on a daily basis, but I do the most of the work offline and after hours. Last month specially, my workload lessened a bit and so I have found more time to hack away. I am sure it wont always stay like this :)\n. BTW, at Scott's suggestion I am planning to post a question to the pmc mailing list and see what we can do to help with the progress and process. \n. Done :)\nIn the meantime, lets resume progress on this one and others. Let me know if there is anything I can do to better explain the changeset and expedite this process. \n. > We want to ship with a completely empty trust store and require deployers to set one up? (and also require deployers who have already gone through the pain of configuring their existing one to do something to get their existing one to continue to work?)\nNot quite. Deployers who have already been dealing with the default java truststore will continue to do just fine. The SSL factory recognizes both the default truststore and the local one that would be shipped with CAS. The local truststore simply just exposes a level of flexibility so that the changes upon a java upgrade would not be lost. The truststore can be carried over from one upgrade to the next.  There was discussion on the AppSec group that CAS should perhaps only rely on the local truststore, but that breaks existing deployments as you notes. So at this point, we would just be accommodating both stores but would recommend that self signed certs, etc be imported into the local truststore.\n. > Also is the HttpClient change required for this? If not, why are the two changes tied together? For example, I have no problem switching to HttpClient, but I would hesitate to do something that is basically forcing people to reconfigure their existing set up.\nIt is required, yes. Evidently, It's the component that reaches out to an ssl endpoint to establish proxy authn so it needs to be connected with an ssl factory that is able to recognize that endpoint, one that is able to both look the default and the local-CAS truststore. Now, we could have just made the changes I suppose with the existing httpclient without apache. I paused there, because the apache component already handles this sort of thing very well, (see the ssl factory in this PR) and it's an improvement at minimum cost that provides better control and options when establishing a connection. There are no breaking API changes as far as I can tell, save a few setters that are deprecated.\n. Also, to clarify adopters are not expected to set anything up forcefully. The truststore that is shipped here is ready to go; it's simply empty/ready for adopters to start [from now on] importing into it, just like they would have been with the default truststore. As I said, it would have been a breaking change if the config was just limited to the local CAS truststore but that is not the case here. (May become the case in the future to really lock down the config to CAS only)\n. Also, to clarify adopters are not expected to set anything up forcefully. The truststore that is shipped here is ready to go; it's simply empty/ready for adopters to start [from now on] importing into it, just like they would have been with the default truststore. As I said, it would have been a breaking change if the config was just limited to the local CAS truststore but that is not the case here. (May become the case in the future to really lock down the config to CAS only)\n. Another advantage of this method is that the truststore, since it is now part of CAS, can be kept and managed with the overlay, and even be checked into SCM along with the rest of the config. \n. Another advantage of this method is that the truststore, since it is now part of CAS, can be kept and managed with the overlay, and even be checked into SCM along with the rest of the config. \n. Very cool. Thanks!\nI'll start to address comments by @leleuj in the meanwhile and in the coming days. \n. Very cool. Thanks!\nI'll start to address comments by @leleuj in the meanwhile and in the coming days. \n. Latest commit addresses feedback by @leleuj \n. bump\n. Merged PR with master once, fixed a few CS and docs issues. Will proceed with the actual merge in a little bit. Thanks for comments. \n. Thanks a lot. Changes are ported over to development as well. I did have to fix a few typos though. \n. I am not enthusiastic about this change. I simply prefer to wait until the plugin starts officially supporting 1.8. We neither support Java 7 nor 8. So dont get why this is needed yet.\n. I am not enthusiastic about this change. I simply prefer to wait until the plugin starts officially supporting 1.8. We neither support Java 7 nor 8. So dont get why this is needed yet.\n. Relevant JIRA https://jira.codehaus.org/browse/MASPECTJ-132\n. Relevant JIRA https://jira.codehaus.org/browse/MASPECTJ-132\n. Relevant JIRA https://jira.codehaus.org/browse/MASPECTJ-132\n. Substituted by https://github.com/Jasig/cas/pull/742\n. Substituted by https://github.com/Jasig/cas/pull/742\n. So for my own clarity, how is it that the annotation is not being honored? Not sure I understood that part. Or are you saying it just kicks in way too late?\n. So for my own clarity, how is it that the annotation is not being honored? Not sure I understood that part. Or are you saying it just kicks in way too late?\n. So for my own clarity, how is it that the annotation is not being honored? Not sure I understood that part. Or are you saying it just kicks in way too late?\n. I am ok with this change, but I also think we should widen the scan. We do have other areas that use @PostConstruct and the package above isn't going to be sufficient with them. Perhaps we could include a <context:component-scan base-package=\"org.jasig.cas\" /> in application context xml file.\n. I am ok with this change, but I also think we should widen the scan. We do have other areas that use @PostConstruct and the package above isn't going to be sufficient with them. Perhaps we could include a <context:component-scan base-package=\"org.jasig.cas\" /> in application context xml file.\n. Handled by https://github.com/Jasig/cas/pull/718\n. Handled by https://github.com/Jasig/cas/pull/718\n. Setting this to auto implies that there are other values it could accept, whereas you just have an on/off switch to either pass or stay on the page. A boolean would make more sense. \n. Setting this to auto implies that there are other values it could accept, whereas you just have an on/off switch to either pass or stay on the page. A boolean would make more sense. \n. Setting this to auto implies that there are other values it could accept, whereas you just have an on/off switch to either pass or stay on the page. A boolean would make more sense. \n. @steve-gregory need any help with this?\n. @steve-gregory need any help with this?\n. Build failure:\nhttps://s3.amazonaws.com/archive.travis-ci.org/jobs/33094971/log.txt\nYou have made some changes in this PR that should be pulled. ldap dependency, saml changes, etc all need to be restored back to what they were.\n. Build failure:\nhttps://s3.amazonaws.com/archive.travis-ci.org/jobs/33094971/log.txt\nYou have made some changes in this PR that should be pulled. ldap dependency, saml changes, etc all need to be restored back to what they were.\n. If by test coverage you mean coveralls, then none of these are required. If by test coverage you mean the maven test phase, none are required. I'd have to see the output to see what's happening. The oauth module right now is building without saml and ldap dependencies, and should continue to do so. \n. If by test coverage you mean coveralls, then none of these are required. If by test coverage you mean the maven test phase, none are required. I'd have to see the output to see what's happening. The oauth module right now is building without saml and ldap dependencies, and should continue to do so. \n. You should still change auto to match true/false, but at the same time, you should also rename the property to describe what true/false means. Something contextual. true/false is easier to remember for someone deploying CAS, rather than having to dig up what other values are out there. If you rather choose descriptive flags, I'd encourage you to choose an enum instead. See \"LogoutType\". \n. You should still change auto to match true/false, but at the same time, you should also rename the property to describe what true/false means. Something contextual. true/false is easier to remember for someone deploying CAS, rather than having to dig up what other values are out there. If you rather choose descriptive flags, I'd encourage you to choose an enum instead. See \"LogoutType\". \n. Closed in favor of https://github.com/Jasig/cas/pull/700\n. Closed in favor of https://github.com/Jasig/cas/pull/700\n. It actually moves core/DataSourceMonitor.java  to jdbc/DataSourceMonitor.java. IntelliJ then somehow decided that the imports in the class werent pretty enough for the move :)\n. It actually moves core/DataSourceMonitor.java  to jdbc/DataSourceMonitor.java. IntelliJ then somehow decided that the imports in the class werent pretty enough for the move :)\n. Mostly trying to isolate changes. I had in mind that there'd be more classes and files that dealt with JDBC. Turns out there aren't that many. \n. Mostly trying to isolate changes. I had in mind that there'd be more classes and files that dealt with JDBC. Turns out there aren't that many. \n. Superseded by https://github.com/Jasig/cas/pull/630\n. Superseded by https://github.com/Jasig/cas/pull/630\n. My understanding is that the components in this PR all deal with database related \"stuff\", which is what the JDBC module is for. The label is perhaps too technology specific, but it is what it is unless you'd rather create specific modules for JPA, etc....or rename jdbc to something more generic like \"rdbms\". \n. My understanding is that the components in this PR all deal with database related \"stuff\", which is what the JDBC module is for. The label is perhaps too technology specific, but it is what it is unless you'd rather create specific modules for JPA, etc....or rename jdbc to something more generic like \"rdbms\". \n. I cleaned up the tests. \n. I cleaned up the tests. \n. @battags I am assuming you're +1 on this? Would like to finalize the move to get master back on track.\n. @battags I am assuming you're +1 on this? Would like to finalize the move to get master back on track.\n. Haven't tried the webflow route, but this looks just like any other message that flashes atop of the login form. \nI suspect that binding could work with required fields for SWF. Is that what you had in mind? \n. Haven't tried the webflow route, but this looks just like any other message that flashes atop of the login form. \nI suspect that binding could work with required fields for SWF. Is that what you had in mind? \n. Messages are translated, yes. Exceptions are passed onto an exception resolver, which attempts to locate the message bundle and add the error onto the context. Most if not all authentication exceptions are treated this way. I'll look into the SWF option as well. With exceptions, we have the ability to assume user/psw credentials at a level. I am going to try to see if we can achieve the same thing in webflows. \n. Messages are translated, yes. Exceptions are passed onto an exception resolver, which attempts to locate the message bundle and add the error onto the context. Most if not all authentication exceptions are treated this way. I'll look into the SWF option as well. With exceptions, we have the ability to assume user/psw credentials at a level. I am going to try to see if we can achieve the same thing in webflows. \n. Great! SWF binding works, I just had to reformat the error keys. Will post a separate PR. Thanks for the tip. \n. Great! SWF binding works, I just had to reformat the error keys. Will post a separate PR. Thanks for the tip. \n. This is good, thank you for taking this one. I'd still recommend that the JSP page is simply just getting out of hand. We should focus on moving all this code elsewhere.\n. This is good, thank you for taking this one. I'd still recommend that the JSP page is simply just getting out of hand. We should focus on moving all this code elsewhere.\n. By the way, we should perhaps consider using authenticationDate rather than authenticatedDate to be consistent. \n. By the way, we should perhaps consider using authenticationDate rather than authenticatedDate to be consistent. \n. My vote would be on the prop change. XML tags require protocol and client changes possibly!\n. My vote would be on the prop change. XML tags require protocol and client changes possibly!\n. Sure. I did eyeball the change, just didnt physically consent. \n. Sure. I did eyeball the change, just didnt physically consent. \n. bump\n. bump\n. Are we good here? @battags ... had a chance to review? Makes sense?\n. Are we good here? @battags ... had a chance to review? Makes sense?\n. bump\n. bump\n. :+1: \n. :+1: \n. Looks good to me, thank you. Just a question on the import.\n. Looks good to me, thank you. Just a question on the import.\n. I have just pushed another commit here to address the feedback. \nThe idea is, because the saml view requires references to other beans, I opted to move the view configuration from props and over to an xml config file where a proper bean can be constructed. For that, an XMLViewResolver is needed to point to the xml file. Right now, it's empty the file, but I included sample configuration on how to turn on, for example, SAML views.\n. I have just pushed another commit here to address the feedback. \nThe idea is, because the saml view requires references to other beans, I opted to move the view configuration from props and over to an xml config file where a proper bean can be constructed. For that, an XMLViewResolver is needed to point to the xml file. Right now, it's empty the file, but I included sample configuration on how to turn on, for example, SAML views.\n. Sure, just did that. \n. TBH I only accidentally bump into that ctor while writing tests, and had no idea it was there. I dont think any of us actually knew about the param and I hardly doubt that anyone is actually using it, and I am not even sure what the behavior was :)\nI ran a blame on the file, but nothing made sense in history. I say it's fine the way it is, and probably very safe to even get rid of the extra param. \n. Yeah, apparently, the change did exist ~~with~~ since 3.3.x at a time where once could have an empty service registry:\nhttps://github.com/Jasig/cas/blob/3.3.x/cas-server-core/src/main/java/org/jasig/cas/services/DefaultServicesManagerImpl.java#L59\n...and that was removed for security reasons. The extra parameter should have been removed then. At this point, we have got a ctor that is deprecated, plus you can no longer have an empty service registry anyway, so there are a few blockers ahead before one can wonder about default attributes. At this layer, we seem to be protected by other barriers :)\n. How are we doing here? Everything looks good?\n. Yup. No errors. \n. There is nothing to comment/uncomment anymore, because when you include the saml dependency, all views are auto-loaded automatically. If you dont include them, then views are not activated. That effectively amounts to be the same as commenting/uncommenting config.\n. So, if the saml dependency is included and the views are active...AND someone wants to overwrite the views then sure, a META-INF override might work too (in addition to physically placing the view def file somewhere and tweaking it).\nI dont anticipate views being changed though. Maybe skew settings could change. Maybe. But that's tough to come by.\n. Are you suggesting that the views.xml file for SAML configuration be moved to META-INF in the SAML module? If so, I am happy to do it, but it makes no practice difference for a deployer if I understand this correctly. This is what would happen:\n1. SAML dependency included in the overlay\n2. Views are loaded from the classpath, inside the SAML module\n3. X wants to override something in views\n4. X obtains a copy of the views file and puts it on the classpath\nOR\n1. X obtains a copy of the file that puts it in the META-INF directory, etc.\nMakes sense?\n. In other words, the ability for a deployer to override the configuration is left up to the deployer. (Given that the views are buried in the SAML module) \n. Sure. Will do.\n. So turns out I was wrong. If the SAML module is not included, CAS will error out:\nbash\nCaused by: org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [META-INF/spri\nng/views.xml]; nested exception is java.io.FileNotFoundException: class path resource [META-INF/spring/views.xml] cannot be opened because it d\noes not exist\n        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:343)\n        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)\n        at org.springframework.web.servlet.view.XmlViewResolver.initFactory(XmlViewResolver.java:143)\n        at org.springframework.web.servlet.view.XmlViewResolver.afterPropertiesSet(XmlViewResolver.java:93)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1\n612)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1549\n)\n        ... 36 more\nCaused by: java.io.FileNotFoundException: class path resource [META-INF/spring/views.xml] cannot be opened because it does not exist\n        at org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172)\n        at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:329)\n        ... 41 more\nShould we comment the xml view resolver? Should we extend the resolver to create one that ignores FileNotFound errors and just warns? \n. I like the no-custom-extension option better too. We can keep the xml view file in META-INF to be consistent, but will comment out the declaration.\n. Commented out views in the last commit. We should make this clear in the docs of course.\n. So, all is well? Shall/Can I proceed? \n. I added a bit of description to the PR based no the issue itself. @seanrbaker actually came up with the idea and the patch itself.\n. It is a hack!, but it's really designed to help get around some very annoying circumstances. Getting the instance to sync with an NTP server can be a pain, (specially if you are running a clustered environment and just one of those nodes isn't for whatever reason syncing up!) and if you just a few milliseconds behind due a lag in something, the validation will fail. Also, for instances that you cannot control, as it says in the issue description, there's nothing you can do because they would be reluctant to change their configuration or sync with a time server.\nAll of this is mediated by the fact that we'll skew the time just a little bit to let the validation pass through. Other products such as Shibboleth, for similar reasons allow for skewing the issue instance. \n. That is a valid question. The change applies to all. How do we feel about making this  available per saml service? I dug this up from the SAML spec:\n\nSAML system entities SHOULD allow for reasonable clock skew \n         between systems when interpreting time instants and enforcing \n         security policies based on them. Tolerances of 3-5 minutes are \n         reasonable defaults, but allowing for configurability is a \n         suggested practice in implementations. \n\nSo it falls within best practice by the spec to allow for flexible configuration.\nP.S: Also bear in mind that clients are sometimes reluctant to make that change. Dealing with SPs that implement their own flavor of saml is pretty painful and its hard to possibly convince them that the issue might be on their side. See this for background: http://shibboleth.1660669.n2.nabble.com/NotBefore-condition-in-assertions-td7582535.html\n. Looking over this, making the configuration per service requires a new service extension and would be a bit more on the complicated side. Lets leave this setting for now and see where it goes if that's OK with others. \n. Could I assume people are ok with this change then?\n. :+1: \n. :+1: \n. So, let me try and see if I can best explain this PR:\nPackage changes\nYes, everything needs to be in org.slf4j.impl because that's the package slf4j itself looks for to execute its static binding. While the binder itself needs to definitely be there, other components need to as well, because not having them in that package would cause issues with the LogAspect trying to figure out the logger for the class that is itself the logger! which causes a stack overflow problem.\nHow does this work?\nSlf4j does static binding, which basically means it looks at classpath looking for a StaticLoggerBinder that is to follow a very strict pattern, like the singleton stuff you see above. It then hooks onto the CAS binder, the one inside the org.slf4j.impl package, which produces the factory instance CasLoggerFactory from which cas loggers come out, CasDelegatingLogger. \nThis approach is no different than any other framework which wants to lend itself to slf4j. There would need to be a binder, a factory, and the logger. \nThe CasDelegatingLogger obviously needs to delegate the logging task to something else, the real thing. So the factory tries to find what the real logger is. It scans the classpath to find other ILoggerFactory instances (in addition to CasLoggerFactory) and produces logger instances from them, which will be given to the CasDelegatingLogger. In our case, the code finds the Log4J factory, and produces a Log4j compatible logger, which is handed off to CasDelegatingLogger. If we were to swap log4j out with something else, CAS will hook onto that. \nFilters, etc\nTo be fair, I actually did opt for the filter approach first. There are few issues there:\n- Filters, at least in log4j, only vote whether a message should be logged or not. In our case, we want everything logged, but just strip out a few things from the message line. \n- Filters, at least in log4j, do not accept a modified message object. They only make decisions, so if a message object is handed down to a filter, it can decide if it should be logged, but it can not decide if a \"new\" modified message should be logged. The instance cannot change. (You'll need to have appenders instead, which is what I had originally) \n- Problem, as was discussed, with either of those solutions is we'd have to tie directly against their API which makes the codebase less flexible. Having something in slf4j makes it more flexible to do that, although admittedly, is something that rarely happens. \n. So, the latest set of commits should be a lot more comprehensive, to account for args and exceptions in logging, etc. \n. All right, the last commit should address the latest round. \n. Bump. Everything good here? I think all present feedback is accounted for. \n. Bump. Everything looks good? Plan to merge by Friday?\n. Tests are failing here; I'll take another look. Somehow a /tmp file cant be created by Travis, which is odd. \n. Team, planning to merge. Please let me know if you see a blocker with this issue.\n. True, we dont yet, as we cant set the logout type to anything in the UI at the moment\n. Bump. I am going to assume we are ok with this proposal. Any other suggestions/objections? \n. Planning to merge. Anything else I could address? \n. I restarted it for u. Usually, we can ignore glitches like this. \n. Comitters review,agree on a change. If there is consensus it will be merged.\n. I sort of do agree with @serac Are you not able to achieve the same thing with SearchEntryResolver? If it can be done with configuration, why code it?! :)\n. Can you configure a filter with SearchEntryResolver?\n. @serac how do you feel about moving this resolver over to ldaptive? Seems like this and other usecases would belong there.\n. Pinging @dfish3r too. \n. I think for a start it would be a good move to simply just take the UPN Resolver as is, and push it over to ldaptive. That seems like a more appropriate place for it, that it's an ldaptive extension, does something with AD and there's nothing CAS specific about it. \n(Any other extensions that wish to resolve the search by full DN or just the user could then be discussed, which would ultimately all end up in ldaptive itself anyway if the objective makes sense)\n. https://code.google.com/p/vt-middleware/issues/detail?id=224&thanks=224&ts=1408430869\n. Addressed via https://github.com/Jasig/cas/pull/737\n. :+1: \n. I'll write the docs on this one. Thanks Dima!\n. Thanks for the PR.\nThere is no need to pass back up the parameter name to the message class. An http message just has a message that needs to be encoded, that's all. I believe all you should have to do is to set the correct content type.\n. Subclasses that require parameters, etc can then decide to how to format the message as whole, and not have to rely on the parent. HttpMessage simply just wraps a message, whatever that happens to be, without making any assumptions about its content/format. \n. To be explicit actually, in the Logout message class, just call setContentType(...) with the correct content type, and that should be it. \n. I think that all subclasses should be responsible to reformat the message on their own. Maybe they should be forced to provide a content type, and based on that reformat the message. and we should probably mark HttpMessage to be abstract anyway. \nI agree with you, that there is a bit of inconsistency because if a child class was to provide its own content type, it would be forced to have its message encoded. That much is true. But that is a separate pull request and more of an enhancement. For now, we should try to focus on making the smallest fix for the bug. Other improvements you have in mind can have their own PR for sure. \n. Right now, the issue at hand is that logout messages produce an incorrect content type when they go out. Lets fix that first as that's more of a blocker. Next, lets focus on redesigning the message classes to be clearer. How does that sounds? \n. P.S: Also, you likely need to merge with master once :)\n. Cool. Thanks for sticking with this one.\n. :+1: \n. Moved the digest object down to be local. This should be ready so far as it goes. \n. This PR is now based on shiro.\n. bump.\n. Bump. Proceeding to merge, if there are no other comments.\n. Assuming things are ok with this PR, I'll get this merged by tomorrow. \n. Bump\n. Sure, I would welcome augmentations to the CAS interface; I am just not sure or seeing how any changes to the interface body would allow access to principal in this particular view. I am just not seeing the link. The op is pretty view-specific and does not have much to do with CAS interface itself. Maybe an option would be to add a method to the interface, to return the principal from a TGT and have that method be invoked by the view. That's marginally relevant at best. \nThe AuthenticationSupport API is useful in some ways, because it allows one to construct an authentication object from a TGT without direct access and plugging in a ticket registry instance. That's about it; a layer of abstraction that encapsulates and makes it easier for this PR, or other possible extensions who'd want to peek into an authentication object. \n. Bump.\n@battags have you had a chance to review this? Do the comments make sense? \n. I hear you. At the same time, the business logic really \"is\" to get into the registry and grab the authentication/principal from the TGT. Looking over this once more, we might be able to do away with this interface. One possible option might be to allow AuthenticationViaFormAction to put the principal into a webflow scope and later on make it available to the view. That class seems like it has everything we need to make this happen, as it already references the registry and pulls the TGT object out. \nHow does that sound? \n. That would be fine too; I just had in mind similar to @leleuj that we'd want to keep that interface to be solely about protocol-specific functions and no other auxiliary cases. Putting those additional checks and etc in the new method would be reassuring as double safety, because I think the generic-success view is only presented if the TGT is valid all around, right? We have got other actions that execute prior to rendering that view that check for the ticket's validity. \nP.S: getTicketGrantingTicket makes better sense to me, as the rest of the codebase is geared towards that kind of terminology for now. Introducing a session concept, at this point, would be a bit confusing in view of everything else that deals with a TGT vocabulary. \n. Thinking about this a bit more: I am trying to envision what the getTicketGrantingTIcket() on the CAS interface would be like; it would have to be invoked as an on-entry action when the view renders right? and it would also make the TGT available to the view, from which authentication and then principal would be gleaned? Granted, the flow itself perhaps can be configured to set flowscope attributes for principal, but if getTicketGrantingTIcket() returns null for some reason, wouldn't the flow crash with an NPE when trying to set principal on the flowscope? It seems like we'd have to execute a bunch of code to get the principal across to the view and that would also require a proxy abstraction like the AuthenticationSupport? or am I off here? \n. Sounds good, thanks for the suggestion. I like the view level equivalent approach, and will try to get something implemented to that effect. \n. So, I have included a new method on the CAS interface to return the ticket granting ticket, and a flow action to pass the principal from that TGT onto the flow, plus some tests cases to prove this all works!\n. Any other comments/suggestions? this looks good to everyone? \n. P.S: Oh, forgot to mention that I did account for Scott's comments. \n. Good call. I'll account for the change before merging in. \n. Just a side note, that I had to update some of the dependencies to get around various being pulled from here and there.\n. I ran a semi comprehensive test with all modules included in some giant uber overlay and had no problems with JDK7 and Tomcat7. Would appreciate someone else giving this a try and see if conflicts pop up. \n. Tried that too. Loads uberly fine :)\n. Some tests are failing because of the recent move from jasig to apereo. \ntestAcceptsNonHttpsCredentials(org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandlerTests): http://www.jasig.org sent an unacceptable response status code\nUnrelated to this PR, but we should get this fixed. \n. Sure\n. Should be good now.\n. Strange. This doesnt fail locally for me, but when I try on a different machine, it does.\nIt seems like we had been pulling a transitive dependency on xml-apis that is now excluded from the build. The build was lucky to find it before, but we should now explicitly declare that dependency.\n. OK. Try again please. This shoulda fixed it.\n. Thanks for confirming.\n. Just making sure I understand: you find if dangerous because applications may fall out of sync with the actual profile? One may have an old set and one could get a newer set because values could change upon the next validation call? \nThat's a valid point. What I had in mind, and this was something I encountered a number of times, was that certain custom flows in CAS could be triggered via a change in user attributes. MFA is a very good example. The MFA flow could trigger based on a user attribute, as in if user A's attribute X says Y, then A should start with MFA. It's very useful to be able to control that behavior dynamically. These attributes are not necessarily released, but they allow CAS internals to make decisions. (...and these need to be principal attributes, not just out of band call to find the attribute from a backend).\nYou might also be able to help with the user experience. Instead of saying \"log out of everything you have logged into, close your browser, clear your cookies, shut down your computer and restart, see if Chrome has decided to keep your cookies, reformat your hard drive, etc\" :) you may have the option to say \"we have adjusted your account, refresh the page and you'll see them\". \n(That is a true story; once I had to call Macy's to get my credit back in shape, and that is what they told me...not where I got the idea for this PR though :) )\nI realize there are pros and cons specially in the attribute value discrepancy that might happen though. We are just allowing people to make that decision based on their environment and their use cases. \nP.S: most applications I have seen make out of band independent calls to AD to figure out a bunch of other attributes rather than getting them from CAS, and those queries always return a fresh set. uPortal is a good example. \n. So, I think we are talking about two different issues. Let\u2019s brainstorm:\nThe danger in the case you describe, I think, has more to do with policy rather than a CAS issue. It\u2019s up to the institute to decide when attributes are to be updated. The point I am trying to make is, CAS should be able to reflect the most recent set of attribute values when configured. Whether and when those attributes decide to change value is a different question and CAS deployers ultimately have to deal with that issue anyway. Consider the following scenarios:\nWhen attributes are cached:\nIf the underlying store decides to change attribute values, application will continue to work with the old values unless a global logout procedure is initiated. This can be problematic:\n-   You are at the mercy of the user. What happens if the user does not log out? What happens if remember-me is turned on and user is conveniently logged in for 6 weeks? Will the application continue to work with the old and indeed, incorrect value? Isn\u2019t that in some cases more dangerous than the application getting an updated value that is now corrected? Are we going to somehow force a global logout and interrupt user activity? \n-   The logout operation is really not user friendly at all. It\u2019s not enough that an app session has to be destroyed if attributes are not cached. The SSO session must be terminated, which means every app could potentially force a logout, or in your case, ask the user to log out. That is definitely not ideal especially in cases where some of those apps don\u2019t consume attributes at all\u2026or may only consume a subset of attributes that are not changed\u2026and yet you have to re-establish SSO just so a handful of other apps can receive the attributes that are updated and that they care about. \n-   Applications perform out of band queries to, let\u2019s say, LDAP all the time to get a variety of attributes. If these attributes are dynamically changing, you\u2019re always running the risk of one app getting a set that is different than another. The issue is not with the app. It\u2019s the policy that decides to change values dynamically in the middle of user operations. That is dangerous and needs to be planned carefully.\n-   There are plenty of other upstream systems that provision data to the attribute store, on a nightly basis perhaps. We have actually done projects where the CAS-specific LDAP instance was nightly populated by LDIF file from a variety of sources. While this is scheduled and planned carefully, it is still inconvenient and unnecessary to have inform a set of users that you should entirely log out to get your account state in place. That\u2019s not going to get you a lot of happy smiles. More like plenty of calls and questions to the helpdesk. \nSuppose attributes are NOT cached:\n\nApplications will continue to receive correct attribute values because these reflect the most recent changes.\nIf an application falls out of sync, all the user would have to do would be to refresh the page, or worse, just logout of that one application only to get a new ST. The SSO session can continue to remain where it was. Note that we are not re-resolving the user\u2019s identity. We are just changing characteristics. Misagh, as the subject, will continue to be same entity here. \n\nI feel like this particular issue isn\u2019t so much a CAS problem. It\u2019s more of a policy problem and if anything, it helps with the user experience in cases where the feature is needed. \n. Few more thoughts follow:\n\nI don't think that logout is such a pain precisely because there is SSO.\n\nI disagree completely. Just because people can seamlessly log into a bunch of apps does not justify asking them to log out for something that could have been mediated easily. For reasons I mentioned above, logging out is really an unnecessary operation, a blow to the user experience, and can be dangerous specially if you have SLO turned on.\nIf one application out of the many, CASified, requires an updated set of attributes, why should the user log out of CAS? and if SLO is turned out, log out of everything? Why should the user log out at all? \n\nIf CAS applications load dynamically user's attributes, it's not the same that offering this option into the CAS server. It's up to CAS developers to wisely build their applications. And I still think that desynchronizations should be avoided at all costs.\n\nWhat you are describing is a matter of policy. Not a matter of CAS. As soon as you say \"It's up to the CAS developers to decide\", then it starts to become a question of policy, which also applies to things turned on in CAS as well. Bear in mind, I don't disagree that turning on this particular pull needs careful consideration by the institution and meticulousness planning. By all means, it does. Just like anything else. I only disagree about who's going to take on the planning. I continue to believe that CAS should offer this feature, and express concerns and caveats about what it would take to do so, and let people choose. This is not the default behavior, and cannot be automatically turned on. If there are use cases, like the few I have encountered that require this, and folks are ready to accept it, then so be it. \nThis is no different than single logout, which one could also argue to be very dangerous to have left enabled by default in CAS. Yet, turning it on/off is still a matter of policy. Not a question of a feature. We present it. You decide if you need it, which I would think is pretty democratic. \n\nIt's a huge change (49 files changed) a big step towards complexity I'm not ready to assume.\n\nThis is not true at all. In fact, we are trying to avoid complexity for adopters. Let me explain:\nIf you reviewed the pull, you'd see that the majority of those 49 changesets deal with a different problem, and that is, the extension and creation of principal objects. The codebase currently, keeps newing up SimplePrincipal objects, a concrete class and yet Principal is an interface that can/should be extended.\nThus, if I were to assume that I could create MisaghPrincipal I would not be able to do so truly because in so many areas CAS assumes that SimplePrincipal is the way to go. Therefor, the changes here try to abstract that concept away, so that IF you decided to do fancier things with your principal, you would be able to do so.\n...and only one of those other fancier things, is the ability to have dynamic attributes for your principal.\nIf I were to rename the PR title \"make sure the principal subsystem can be extended\" it would still be accurate in view of the changes presented.\nHTH.\n. @leleuj I am going to bring this discussion over the dev mailing list to broaden the conversation. That might help with the progression of this request. \n. I have updated this pull based on the discussion and feedback on cas-dev:\nhttps://groups.google.com/d/msg/jasig-cas-dev/...E/YLmczv0nieAJ\n. The original description is also updated, which highlights the major components in this PR. Those are the ones that deserve most of your attention when reviewing.\n. How are we doing here? Anything I can do to help move this along? \n. Bump\n. @leleuj @battags @serac Just wanted to check upon the status of this pull. Do you guys mind reviewing the changeset presented here and see if things make sense if you get a chance? \n. It is a single factory. The naming perhaps is a bit confusing. Let me try and explain:\n- There is an \"attributeRepository\" bean that is by Person Directory. It retrieves attributes among other things. This is really a DAO. \n- Every principal is associated with an \"attribute repository\" object/interface that is called upon when attributes are requested. This repository interface sits between the principal and the DAO above. \n- Every principal object references the same DAO which is the attribute source. However, the way this source is references by each principal is through the \"attribute repository\" interface that each principal carries. That repository interface is created by factories. \nLet me know if this could perhaps be explained simpler with a diagram or something. There are too many repositories and such thrown in the mix here that the verbiage might be confusing. \n. So here's how everything is tied together:\n- A DefaultPrincipalFactory creates principal objects by default whose attributes can be managed via DefaultPrincipalAttributesRepository.\n- The DefaultPrincipalFactory could be injected with a custom implementation of PrincipalAttributesRepository. Right now we have two implementations:\n- DefaultPrincipalAttributesRepository (again, default, current behavior) \n- CachingPrincipalAttributesRepository \nAdopters can implement their own:\n- PrincipalFactory\n- PrincipalAttributesRepository\nXML Wiring:\n``` xml\n\n\n``\n- TheDefaultPrincipalFactory.getInstance()is just a convenience method that returns a singleton instance. The class itself is not a singleton. If the singleton instance is used, thePrincipalAttributesRepository` is shared, yes. \nThe flow is such:\n- Some component wants to create a principal\n- The available PrincipalFactory is obtained. \n- The PrincipalFactory is already injected with an implementation of PrincipalAttributesRepository, which either does the default behavior, or attempts to cache attributes.\n- The factory creates the principal and passes the correct instance of the attribute repository. \n- When principal.getAttributes() is called, the call is delegated to the available attributes repository. \nSo you would as a caller do:\njava\nfinal PrincipalFactory factory = ...whatever the injected factory is.\nor\njava\nfinal PrincipalFactory factory = DefaultPrincipalFactory.getInstance();\nThen:\njava\nfinal Principal p = factory.createPrincipal(\"principalId\", initial-set-of--attributes-which-may-be-blank);\nWhen you call:\njava\np.getAttributes()...\nThe principal will execute:\njava\nreturn this.attributeRepository.getAttributes(this.id);\nwhere this.attributeRepository is either DefaultPrincipalAttributesRepository or CachingPrincipalAttributesRepository. Depending on however you configured your principal factory.\nSince each principal object is then associated with an implementation of PrincipalAttributesRepository the attributes are automatically cached for that principal. Once attributes are obtained, they are put into the cache. The next time you call p.getAttributes() those attributes are retrieved from cache. We not caching principals. We are only caching attributes. Attributes are linked to each principal but not exactly by the principal id because that is already implied that there is a one-to-one relationship between the principal and the attribure repository. \nHere's a better picture of all components:\n\n. It makes no difference how attributes are put into cache. They could be cached by principal id, or by an arbitrary key name. Because the attribute repository is tied to the principal already, having an arbitrary key name makes it easier on the API (because the principal id does not have to be passed to setAttributes())\n. I'm not a big fan of the getInstance() method when using Spring: why not building a singleton in the context and injecting it where it is necessary? I think it makes things harder to read.\nThe PrincipalFactory is injected into everywhere that is needed. However, that would require that every component that requires the factory be modified in the xml context to inject! which is a lot of noise. So we provide defaults that exhibit the existing behavior without changing too much.  \nOptions are:\n- PrincipalFactory factory = new DefaultPrincipalFactory(); (in about 50 classes)\nOR\n- PrincipalFactory factory = DefaultPrincipalFactory.getInstance();\nA singleton bean would still be OK, IF someone were to inject that explicitly. \n. Actually, at least right now we might have to inject that bean into everywhere relying less on defaults. Let me look into this. I'd probably end up removing getInstance() and have the context pick up the factory. \n. @leleuj I had a chance to review this. Let me see if I can take another shot at this:\nRegarding singleton instances\nWe do have a PrincipalFactory instance in the context already:\n``` xml\n    \n<bean id=\"principalFactory\" class=\"org.jasig.cas.authentication.principal.DefaultPrincipalFactory\"\n        c:attributesRepository-ref=\"principalAttributesRepository\" />\n\n```\nThis is designed to people can simply just swap this out (or the attribute repository impl) with ease without having to find the right class and without being annoying with creating the xml tag, etc. \nBeans by default ARE singletons in the spring context. Same instance is always return (though the class itself may not be a singleton) \nEvery class that requires access to PrincipalFactory does have a setter so the PrincipalFactory from the context can be injected into the class. \nThis is not required per say just yet, because classes are decorated with the already-instantiated default factory. Setting the factory would only be required if one needs to override it. This is a common pattern in the codebase where an object is instantiated directly in the code to provide a default value, but then there are ctors and setters that allow injection. \nCaching\n\nIf a principal factory has one attributes repository: when a principal is created, it is created with this attributes repository which is therefore shared among all principals. Am I right?*\n\nYes. Lets review:\n- PrincipalFactory creates a principal (unique) has an AttributeRepository (unique for that principal and unique in the context)\n- AttributeRepository (unique for the principal) has access to a DAO (person directory) that retrieves attributes.\nSo take for example the following tests:\nAttributeRepository is shared:\nWe pass an initial attribute of \"address\" but we expect the DAO to find \"mail\" for us. \n``` java\n    @Test\n    public void testPrincipalFactoryWithSameCachingAttributess() throws Exception {\n        final PrincipalAttributesRepository repository = new CachingPrincipalAttributesRepository(this.dao,\n                Collections.singletonMap(\"address\", \"final@example.com\"),\n                TimeUnit.MILLISECONDS, 200);\n    final DefaultPrincipalFactory factory1 = new DefaultPrincipalFactory(repository);\n    final DefaultPrincipalFactory factory2 = new DefaultPrincipalFactory(repository);\n\n    final Principal p1 = factory1.createPrincipal(\"uid1\");\n    final Principal p2 = factory2.createPrincipal(\"uid2\");\n\n    assertFalse(p1.getAttributes().containsKey(\"mail\"));\n    assertFalse(p2.getAttributes().containsKey(\"mail\"));\n    assertTrue(p1.getAttributes().containsKey(\"address\"));\n    assertTrue(p2.getAttributes().containsKey(\"address\"));\n\n    Thread.sleep(400);\n\n    assertTrue(p1.getAttributes().containsKey(\"mail\"));\n    assertTrue(p2.getAttributes().containsKey(\"mail\"));\n    assertFalse(p1.getAttributes().containsKey(\"address\"));\n    assertFalse(p2.getAttributes().containsKey(\"address\"));\n    ((Closeable) repository).close();\n}\n\n```\nAs you can see, once the expiration period passes (200 millisec) the repository expires the attribute \"address\" and retrieves \"mail\". This happens to both principals because they share the attribute repository and the DAO. \nNow consider this test:\nAttributeRepository is NOT shared:\nWe pass an initial attribute of \"address\" but we expect the DAO to find \"mail\" for us for only one of the principals and not the other. \n``` java\n    @Test\n    public void testPrincipalFactoryWithDifferentCachingAttributesForManyPrincipals() throws Exception {\n        final PrincipalAttributesRepository repository1 = new CachingPrincipalAttributesRepository(this.dao,\n                Collections.singletonMap(\"address\", \"final@example.com\"),\n                TimeUnit.MILLISECONDS, 200);\n    final PrincipalAttributesRepository repository2 = new CachingPrincipalAttributesRepository(this.dao,\n            Collections.<String, Object>singletonMap(\"address\", \"final@example.com\"),\n            TimeUnit.MILLISECONDS, 700);\n\n    final DefaultPrincipalFactory factory1 = new DefaultPrincipalFactory(repository1);\n    final DefaultPrincipalFactory factory2 = new DefaultPrincipalFactory(repository2);\n\n    final Principal p1 = factory1.createPrincipal(\"uid1\");\n    final Principal p2 = factory2.createPrincipal(\"uid2\");\n\n    assertFalse(p1.getAttributes().containsKey(\"mail\"));\n    assertFalse(p2.getAttributes().containsKey(\"mail\"));\n    assertTrue(p1.getAttributes().containsKey(\"address\"));\n    assertTrue(p2.getAttributes().containsKey(\"address\"));\n\n    Thread.sleep(400);\n\n    assertTrue(p1.getAttributes().containsKey(\"mail\"));\n    assertFalse(p1.getAttributes().containsKey(\"address\"));\n\n    assertTrue(p2.getAttributes().containsKey(\"address\"));\n    assertFalse(p2.getAttributes().containsKey(\"mail\"));\n\n    ((Closeable) repository2).close();\n    ((Closeable) repository1).close();\n}\n\n```\nAs you can see p1 and p2 share different attribute repositories, so their expiration policy is different. While one expiration policy passes and forces the principal to retrieve from the DAO, the other still has time (700 millisec) and its attribute set is not affected. \nHowever, I realize you had a perfectly find observation where the repository was originally going to be shared. I was not seeing that detail! So in order to make it so, the attribute repository is marked with a scope of \"prototype\" in the context\n. I also made sure cache names are unique for every instance of the attribute repository.\n. Also added this test to ensure instances are unique:\n``` java\n    @Test\n    public void testPrincipalFactory() throws Exception {\n        final DefaultPrincipalFactory factory1 =\n                applicationContext.getBean(\"principalFactory\", DefaultPrincipalFactory.class);\n        final DefaultPrincipalFactory factory2 =\n                applicationContext.getBean(\"principalFactory\", DefaultPrincipalFactory.class);\n    assertNotEquals(factory1, factory2);\n    assertNotEquals(\"attribute repositories should not be equal instances\",\n            factory1.getAttributesRepository(), factory2.getAttributesRepository());\n}\n\n```\n. Great, thanks for the test. That indeed overwrites attributes and I see your point about caching now. I'll have to rework the api slightly to make room for principal caching. \n. With a few small mods, I have this test passing now:\n``` java\n    @Test\n    public void testMultiplePrincipalsWithSameFactoryAndAttributeRepository() throws Exception {\n        final PrincipalAttributesRepository repository = new CachingPrincipalAttributesRepository(this.dao,\n                TimeUnit.SECONDS, 5);\n    final DefaultPrincipalFactory factory = new DefaultPrincipalFactory(repository);\n    final Principal p1 = factory.createPrincipal(\"uid1\",\n            Collections.<String, Object>singletonMap(\"mail1\", \"email1@address.edu\"));\n\n    final Principal p2 = factory.createPrincipal(\"uid2\",\n            Collections.<String, Object>singletonMap(\"mail2\", \"email2@address.edu\"));\n\n    assertTrue(p1.getAttributes().containsKey(\"mail1\"));\n    assertTrue(p2.getAttributes().containsKey(\"mail2\"));\n\n    ((Closeable) repository).close();\n}\n\n```\n. Yup! Thanks for bearing with me. Hopefully I wasn't being too thick to see the problem but it's great that we have now more tests to validate all scenarios. \n. I removed the unneeded const. \n. Appreciate your feedback. That is a perfectly valid position. I'll review again to see if we can entirely remove that reference which is also my preference in view of serialization and storage issues we have had. I'll post back an update shortly. \n. @serac I have reviewed the changeset and have another alternatives: aside from marking the field in question as volatile another option would be to entirely remove the ability for a Principal object to retrieve attributes based on the underlying system. A Principal in the new world would simply just be a carrier of the set of attributes that are passed to it at construction time. We could just work around the validation logic to make sure what is constructed as the principal has the right set of attributes, configuration permitting, retrieved from the underlying backend. \nSo concretely:\n- principal.getAttributes() would no longer delegate. We remove the reference.\n- We must ensure PrincipalFactory objects are used to prep the principal that is stuffed into the assertion, etc. (which seems like it's something this pull is already doing)\nThe only possible down-side is, any custom webflow actions or other extensions that depend on the principal would no longer be able to assume comfortably that they can call upon the principal and get the fresh set of attributes. (Consider for instance a custom webflow extension that attempts to alter the flow based on a user attribute, say, for authz purposes) These extensions would need to do, what we are forced to do today, which is, they need to hook directly into the attribute repository and grab the set themselves. \nI think we can live with that. It's a very marginal use case. If this makes sense, I can start massaging this pull further. Let me know. \n. I have modified this pull to account for the suggestions @serac brought up. Specifically, the principal object is no longer tried to the attribute repository. Rather, upon validation the principal is reviewed a second time based on the attribute release policy that every service inherently gets:\n``` java\n@Override\n    public final Map getAttributes(final Principal p) {\n        final Map principalAttributes = this.principalAttributesRepository.getAttributes(p);\n        final Map attributesToRelease = getAttributesInternal(principalAttributes);\n    if (this.attributeFilter != null) {\n        return this.attributeFilter.filter(attributesToRelease);\n    }\n    return attributesToRelease;\n}\n\n```\nHere is how the flow would work:\n1. ST validation succeeds\n2. Principal is retrieved from the TGT\n3. Principal is passed onto the release policy for the given service\n4. Attributes are first refreshed via the repository, (or not, depending on the configuration) and then filtered again and passed back\n5. New principal is created and passed onto the view.\nI also verified the functionality of the JSON service registry to ensure no serialization issues are present in view of the release policy getting a new component. This also has the advantage of allowing an adopter to cache attributes for service A and not for service B, which might satisfy use cases @leleuj had in mind in terms of sync issues. \nNothing else changes. \n. I merged with master once. Let the review process resume :)\n. Team, how are we doing here? Anything I can do to expedite the review process? \n. Good point, I will take care of that in the documentation to ensure it's clear where the configuration should be applied. \n. Probably some commented out elements in the deployer file would be good starters too. \n. Oh yes, it is. We might have to do some work around reducing the ugliness of that serialization task specially if it's JSON, etc but we'll get to it next. baby steps :)\n. I updated this pull to include samle configuration of the changes in the deployer file. \n. So, are we OK with this change going in? Could we set a date, say this Friday for the merge, if there are no other suggestions? \n. Heads up. Planning to merge by Friday on behalf of lazy consensus :) Please let me know if you see an issue with this plan. This will allow me to move onto #798  and more, with a smaller merge chunk. \n. I also wrote docs for the new behavior and merged with master once again. \n. Before merging this, I probably should yank out the jdk6 build config from Travis. \n. I am sure this can further be improved. This is just a first pass to get eyeballs on the changeset and see where we end up. \n. I accounted for @leleuj's feedback. This is what the latest commits do:\n1. Pulled out the JSON mapping logic from the DAO and moved into its own abstraction. This will serve to persist services into other systems, such as NoSql dbs as JSON...and should help with serializing complex object types into ldap for which we have an issue right now. \n2. removed unneeded load operations during save/delete. \n3. Cleaned up pull from residual changes. Added few more test cases.\n4. I added a few more log statements for cases where the constructed file name may be invalid on the platform. I think we should just warn if an invalid filename is found, and let the deployer fix it, rather than sanitize and auto-correct name. \n. Accounted for feedback\n. Bump. \nP.S: I'd like to go ahead and merge this one if possible so we could next focus on serializing service definitions as JSON that is handled by the LDAP service registry and for which we have an open issue. The JSON Serializer API presented here would be useful to handle that issue. \n. Any other comments, suggestions?\n. Yup. Caught that one too. Thanks. \n. OK. I cleaned up the two classes so a static method would not be required anymore.\n. Heads up. Please review when you get a chance. Planning to merge by Friday unless there are more questions/comments.\n. That is odd! let me double check this. maybe I failed to stage some files. \n. Ah, I know why it's not showing you in the diff. It's because the changes I restored back are identical to what's in master now. There is no diff. This is what I see in the default ticket generator class:\n``` java\n /* The logger instance. /\n    protected final Logger logger = LoggerFactory.getLogger(this.getClass());\n/** The numeric generator to generate the static part of the id. */\nprivate final NumericGenerator numericGenerator;\n\n/** The RandomStringGenerator to generate the secure random part of the id. */\nprivate final RandomStringGenerator randomStringGenerator;\n\n/**\n * Optional suffix to ensure uniqueness across JVMs by specifying unique\n * values.\n */\nprivate String suffix = null;\n\n```\n. Maybe the suffix itself could also be final. I'll look into that too. \n. OK. suffix is now also final. (test failure had to do with the JBoss module - not surprisingly)\n. :+1: on HTML5. I have been talking to @cparaiso our UX expert and we have some ideas on how this might all work in a more modern fashion. We're going to initially get started with the management app revamping it and see where we end up and transpose some of those ideas over to the main CAS theme. \n. Yeah, we should attempt to remove these in 4.2. Or rather, take a pass at what's deprecated in the codebase and pretty much remove all. \n. BTW, the docs are updated as well. \n. Accounted for feedback\n. Heads up. Please review when you get a chance. Planning to merge by Friday unless there are more questions/comments.\n. Oh, one other thing that I just realized while reviewing code: having extractors that would actually process the request does have some other advantages for prop injection. If I were to inject a setting into the extractor that controls how the service is to be created, right now I'd have to pass that prop to the service as well since it contains the static method and all the logic that creates the service. OTOH, if I were to encapsulate all the extraction logic directly inside the argument extractor then there would be no need for extra passing stuff around.\n. @battags let me know what you think. \n. > properly delegate to a service to handle protocol specifics\nBut that's exactly my point; that services should NOT handle protocol specifics and that they should remain as pure as possible. We have got, right now, argument extractors that do absolutely nothing other than to delegate, which is pointless both in view of their name as well as the function they intend to carry out (but don't). There is nothing a service would be able to do that an argument extractor cannot, and proper encapsulation of protocol specifics would at a step be to exclude them from pouring into services and move them over to extractors. They are to extract for Pete's sake :)\n. Just thinking out loud here: at this point we do support a number of other protocols with no apparent difficulty at all, or a use case that would prove impossible/ugly to implement with the existing shape and condition of the codebase. There is no evidence yet that suggests this would be hard or difficult to maintain. Sure, there may be some room for refactoring the CAS interface and cleaning up the terminology used here and there but without actual requirements and proper use cases it would be difficult to plan a scope or foresee how any particular change might influence another. \n. > ...proper encapsulation of protocol specifics would at a step be to exclude them from pouring into services and move them over to extractors. They are to extract for Pete's sake :)\nI guess what I am saying here is, if you can show or explain how delegating protocol-specific functions over to services can help with a particular use case for which there exists a needed requirement and how that might be solved with that delegation, I'd be able to better understand your viewpoint. \n. P.S: Maybe the transition is yet incomplete as you pointed out; 'cause I had a chance to take a look at a CAS service and I dont see anything protocol specific in there. maybe the ability to produce a response  could be dubbed as protocol-specific specially with SAML support, but I'd also argue that even getResponse() should be moved out the service itself. \n. Ah, I think we're getting closer to the finale here :)\nSo , it's excellent that you reference that particular line because that's what got this whole thing started; So let me backtrack this a bit and tell you how I ended up here:\nMy original idea was to remove that exact line you quoted [for all the same reasons we have been going over] and I went down the path of prototyping a possible solution, that would as opposed to the lookup, simply allow a service to do:\njava\nservice.getTicketIdGenerator().doSomethingFun()\nI had the idea that it would be much simpler if each service came along with pre-defined ticket-generator built-in, and that we'd open up the possibility of injecting various ticket id instances. One of the primary reasons for doing this, besides reducing CASImpl's complexity was to allow service extensions to be created without a need to explicitly register a ticket id generator. I had the use case of creating a special service type that was going to extract some parameters from the request, but had no need to for a special ticket generator. Yet I was forced to register one, because of that lookup at the codeline you brought up. This annoyed me.\nSo the prototype, it went well so far as it went but then I got to the point where I realized, in order to inject a given ticket id generator into a service, I needed to inject it into the argument extractor, which was only going to pass it around to the service (because services have this factory method, etc), which was the point I realized all this extractor thingy is doing is  just acting as a proxy forcing me to write more lines.\nSo I proposed to move all the extraction logic out of the service and if I could do that, I'd be able to move on with the ticket id generators per service, etc. My point being, that I think this pull does help with that original story and we'd in fact be able to remove those protocol-specific functions from the business layer as you'd out and knock out some of the other auxiliary use cases I described. \n. Regarding better protocol support, I think this first to be thought a bit more philosophically :) I am always trying to dig up use cases for something like this, personally have never run across one...yet. There is room to improve, I am sure, just dont know how yet. For instance, I have been thinking about how we might be able to add support for InCommon metadata, or to better extend our SAML2 support to support other IDPs, but I have no concrete use cases or opinions on a wholesome vision to help with anything codewise. Prefer to get there one small step at a time. \n. ## One small pull for CAS...\nHad a to chance to review this; these may not exactly be protocol-related, but I think in one way or another they impact CASImpl and given their scope, they may be included in an overall vision:\n1. \u064eDefine abstractions for service matching (as opposed to an exact one now)\n2. Define the ability for PGTs and PTs to have their own expiration policy\n3. Define the concept of ticket factories, which would be linked to expiration policies and ticket id generators (which I think you Scott also talked about at some point)\n...and I'll probably think of a few more as well.\nAll of these dont necessarily have anything to do with extending/adding protocol support but they all aim to reduce the complexity of CASImpl. \nLets be visionary for a sec\nIf the notion however is that CAS should be treated as a generic platform where multiple protocols can be easily added, and that it should not take itself (the protocol) as a first class citizen, then that merits further discussion. \n- It is certainly true that we are implementing CAS first and foremost above everything else and that the terminology in the codebase [for the most part] accurately reflects this decision. (I say for the most part, because I really would like to see a ProxyTicket interface somewhere)\n- It also also true that support for other protocols are more messy and less clear :) because they have to live through the CAS protocol first [like OAuth; Saml may not have to] They are being treated as second-rate citizens in the codebase.\nQuestion is: Is that really a problem? \nNot all protocols are treated equally here, and I dont necessarily see a problem with that. While code-wise things may not be ideal, but foremost, I'd like to run into or learn about what those difficulties are in practice, and whether people care about such things through requirements and use cases. \nThe 1-2-3 I referenced above are a bit more \"real\"; It's stuff that I (and by that I mean clients we have worked with) have run into, for which we have had to circumvent the flow or write new extensions. In that sense, they are a bit more visionary.\n. @battags when you get a chance, could please review the conversation here https://github.com/Jasig/cas/pull/730 and let me know what you think? That pull and the one here are or can be closely related based on the proposal given. If https://github.com/Jasig/cas/pull/730 is acceptable as baseline proposal, one of the pre-reqs would be this pull as a nice-to-have which I can then merge and start working on other pieces. \n. @leleuj @serac further input is appreciated. \n. @battags let me know how you feel about the conversation here. In light of the other suggestions we talked about for CASImpl in an attempt to get ticket factories, etc in place here in this pull https://github.com/Jasig/cas/pull/730 I would like to move forward with this because I think this really helps with the use case that is described in https://github.com/Jasig/cas/pull/730 here as well. \n. So, I'd like us to see if we can come to agreement/decision about the fate of this pull request. As I mentioned, I really think this change could pave the way for additional refactoring of the service layer and would also help with the separation of tickets and ticket id generators but as our discussion has carried along for a while, the pull has gone stale and cold. Is there something I can do to help move this along? Is it helpful to discuss what that refactoring effort might look like and how it might relate to this pull at a high level?\n. Revisit as part of #492 \n. Accounted for feedback. \n. :+1: \n. P.S: modifying a web.xml is no different than modifying the xml config file, I suppose. the JVM argument makes better sense for practical purposes. \n. This is now done. The theme resolver can check for the theme bundle and return the default theme if the custom one is not found. Thanks Scott for the suggestion.\n. Agreed. Changes like this need to be discussed either on the mailing list, or fully explained with objectives and intention under a Github issue perhaps. Also, it's recommended that you try to keep pulls as small as possible. \n. :+1: \nI have only come across one particular instance personally where we had to augment the CASImpl class and not more, and I specifically needed access to all other members and objects that were stuffed into CASImpl and not necessarily needed to override the interface functions. It's a marginal case, but something like that, albeit being just a plain abstraction, might help with the god-object like class :)\nAt some point in time, I had the idea to allow each service to include a default ticket generator which somewhat strikes a chord with this pull. That does not necessarily reduce code in CASImpl to a great extent, but definitely makes it easier for service extensions, which I'd argue are more common than alternative CASImpls. \nAt any rate, I hope we can identify a series of improvements, code-wise, and small chunks of work. Even if some turn out to be too big for the immediate release, it would be good to have the scope at hand. \n. Closing PR for now. \n. :+1: \nSpecifically in OAuth's case, who's calling setAttribute()? I am assuming somewhere in the oauth module the service is put into the request as an attribute? \n. :+1: \n. :+1\n. Thanks very much for the through feedback. I have accounted for all instances in the latest commit (which also takes care of test failures on Travis by having changed ports). Do let me know if there is more I can work on here. \n. Thanks. I removed the unneeded props and introduced the temp variable. \n. Please review the failure: https://travis-ci.org/Jasig/cas/builds/37642981\n. Build fails: https://s3.amazonaws.com/archive.travis-ci.org/jobs/37690432/log.txt\n. +1\n. Thanks for the review again.\nI accounted for your feedback and also wrote a few more unit tests to make sure the view names are correctly resolved and the model is rendered correctly with the attributes in the context.\nCant actually render a JSP to see how those attributes are resolved, as that without a container is near impossible. We could think about an alternate view engine like Freemarker, etc if we truly want to render and test the result. But this should suffice for now.\n. Thanks for the review. I accounted for your suggestions. \n. Yup. It's evident that plenty of folks in the community run ehcache as their HA option, and we do owe to them to maintain the module where we can. \n. There is plenty actually that deal directly with a ticket registry; I had only in mind the AuthenticationViaFormAction class but having done a wider search, there are at least 2-3 more components built into CAS codebase that call ops on the registry directly.\nThat aside, returning mere strings as I mentioned sort of forces one to go directly against the registry anyway to pick the actual object class. That is pretty inefficient. (This may not be always stuff built into CAS. It's stuff that is built \"around\" CAS)\nI think it might even be better to introduce getTicket() and getTickets() on the CAS interface and have them proxy the registry and execute checks. We'd then remove our getTicketGrantingTicket() method and have the getTicket() method access the ticket type.\n. Well, evolutionary improvements right? \nI am working on getting some tests to pass right now, and will see if we can remove all access to the ticket registry via such proxy methods. Thankfully, there aren't too many that deal with the registry so it should be fairly trivial. The pull size of course is going to grow because the API impacts many things, but there's nothing substantially and functionally important. We are just changing method signatures a bit. \n. I did some follow-up work on this pull. Here are the highlights:\n- Introduces a getTicket() on the CAS interface to return a specific ticket type from the registry\n- Introduces a getTickets() on the CAS interface to return a collection of tickets from the registry. Added a predicate instance to filter tickets optionally to remove follow-up processing of tickets.\n- Removed access to the registry from all other components and substituted it with the CAS instance. The only one remaining that requires a registry now is the SessionMonitor which we cant avoid for now.\n- Cleaned up all tests and wrote a few more for components that now deal with those two methods.\nThis is a rather large pull, but the majority of the changes have to do with tests and making sure callers can accept ticket objects rather than ids. All tests should pass. \n. So, it looks like the majority find this pull reasonable and a step in the right direction. That's excellent and pretty good progress. I am definitely in favor of breaking up CASImpl or any other such measures to reduce complexity, but it's hard to arrive at a final conclusion in one big sweep. Scott brought up the issue of \"what's our vision for adding protocol support, etc?\" and not sure we all have or agree on what should be carried out. Way too many trees in the way! I suggest we start to collect and document design ideas of what we'd like CASImpl to do and be like, much like what Marvin has proposed, some preliminary ideas of what abstractions are needed, what each would do and what problem they intend to solve, and on a per-release basis, start to build components incrementally. \n. Did merge with master once. Not to be caught on the fumble, but are we OK with this change going in then? \nI did spend a bit of time reviewing possible options that could help with reducing the complexity of CAS. My initial analysis leads me to think that it would be first easier to start breaking up CASImpl by logical abstractions that are now buried inside. Effectively, first step of refactoring this would be to move things out into other objects and interfaces and have CAS simply delegate to those at a higher level. Abstractions that come to mind are the following:\n- Ticket factories. Creation of a ticket takes large lines of code in CASImpl that includes the service lookup, ticket id generator as well as expiration policies. If we could simply get rid of all this, and naturally just have CAS call upon a ticket factory to create a TGT, ST, PT or PGT it would largely help. This a problem that we can [easily] solve. (We do have a pull for this, and maybe that's a good start?)\n- Validators. Some set of components that execute common check during TGT and ST creation. Checking for service properties, ticket properties, etc. Most of this right now is in form of somewhat duplicate code that if were to be moved out could reduce LOC. \nAdmittedly, ideas similar to this only help with LOC and move responsibility elsewhere but they make it easier to have the code read like a good story :) These are abstractions that I think need to exist regardless of whether the CAS interface stays or not and I suppose the first step would be to break things apart, move them around and then start removing concepts that are not needed until there is no more to delete!\n. So on validators, I realize that before creating/validating a particular ticket type there a set of checks that execute, i.e service is found, is not disabled, can do proxy, ticket matches service, etc. These sort of checks seem to repeat and so there is an opportunity to refactor this to common logic and parameterize it such that via tweaking settings, we pull duplicate code out.\n. why not break the CASImpl into CASLoginImpl, CASLogoutImpl and CASProxyImpl to follow the different parts of the CAS protocol itself?\nI think that might proliferate into having 3 or more distinct interfaces all of which would exactly describe one op. In terms of extensibility, I think there is a very little chance for one to want to redefine that entire op by providing for instance a new type of CASProxyImpl. It's the stuff in between that is most interesting. \n. One possible proposal for ticket factories would be:\nAbstractTicketFactory - generates factories that would be defined to create ticket types for ST, PT, etc.\ncontains a generic <T> createTicket() that is to be implemented by subclasses.\nPotential subclasses would be:\nServiceTicketFactory\nTicketGrantingTicketFactory\nLoginTicketFactory\nFor clarity of having the domain language explicit in the code, I would also throw in:\nProxyTicketFactory\nProxyGrantingTicketFactory\nEach factory would be injected via the config with appropriate ticket id generators,\nexpiration policy config, etc. \nThen, CASImpl could simply just include:\nTicket t = AbstractTicketFactory.getServiceTicketFactory().createTicket(...)\nThis requires the abstract factory have access to the application context\nto autowire various ticket factories that exists in the context. \n. I guess I was trying a shorthand way of finding ticket factories, because otherwise, we'd end up with about 4 different factories injected into CASImpl. These ticket factories can certainly be auto-wired so they will be picked by the xml context. The AbstractTicketFactory (which really is just a holder) is a shortcut to find the injected ticket factory instance. As I said, otherwise in CASImpl we'd end up with:\njava\nprivate final TicketFactory serviceTicketFactory;\nprivate final TicketFactory ticketGrantingTicketFactory;\nprivate final TicketFactory proxyTicketFactory;\nprivate final TicketFactory proxyGrantingTicketFactory;\n. The alternative would be:\njava\nTicket t = TicketFactoryHolder.getServiceTicketFactory().createTicket()\nWhere the TicketFactoryHolder would have:\n``` java\n@AutoWired\n@Qualifier(\"serviceTicketFactory\")\nprivate final TicketFactory serviceTicketFactory;\n@AutoWired\n...\nprivate final TicketFactory ticketGrantingTicketFactory;\n@AutoWired\n...\nprivate final TicketFactory proxyTicketFactory;\n@AutoWired\n...\nprivate final TicketFactory proxyGrantingTicketFactory;\n```\n. That will certainly work but at the same time, I suspect you might end up with duplicate injections because one Impl might require more than one factory to function. (or it may in the future, which would complicate things down the road). Of course I am just theorizing. Once you actually start to code this solution things might become easier to navigate.\nThere is also one other thing I thought of; In view of the proposal for ticket factories one of the prereqs for this proposal is in fact this pull:\nhttps://github.com/Jasig/cas/pull/698\n...which asks argument extractors to do the extraction right there and complete the service constructions directly there without allowing the service object itself to build itself. This is required for ticket factories as well because:\n- A ticket factory would require access to the service to figure out what its ticket id generator is. \n- We are keeping an XML file with service-to-generator mappings right now.\n- Rather than doing that look up, it would be alot easier for the factory to simply ASK the service what its generator is, as in service.getTicketIdGenerator()\n- This requires that services themselves find the ability to allow injection of ticket id generators\n- ...and that would require argument extractors to create service objects without having to pass everything back and forth. \nThe flow would be:\nA CAS argument extractor is injected with everything a Service would require.\nThe CAS argument extractor creates the service based on those injections. (This will include everything from the request and everything from the context, like the ticket id gen)\nA service itself can be decorated with reasonable default values, to make injections optional for overrides. \nThis would then allow ticket factories to ask for the id generator of the service and proceed. \n. Acting on lazy consensus; Will merge before the weekend unless there are other votes. \nWe can certainly carry along the conversation here of course; that surely does not have to close. \n. So, I am wondering:\n1. does the proposal above on validators make sense?\n2. does the pull for https://github.com/Jasig/cas/pull/698 in support of the proposal above make sense? \n. Nefarious? LOL SuRRe. There is all kinds of evil buried here :)\nBut joking aside, build fails because a url endpoint is down that some tests use. Once it comes back up, the tests will yet again pass. \n. If you want to dive into the pull though, you probably would want to look our cas.css file which is the only thing I really had to change to get the apereo logo back in place and still work on mobile. \n. Yup. Will do. \n. Done\n. You are right. I will back that out. Was trying to make tests a bit more flexible. \n. Removed the prop from tests.\n. Updated. \n. Further updated based on Daniel's suggestion on the attribute retrieval. \n. Yup. Travis builds JDK7 still with no issues. I'll enable JDK8 after this pull goes in. \n. Updated the pull. \n. Updated to share the encoder. \n. Any other additional comments? could we try to get this one by this weekend? This impacts the other FindBugs-related pull as I managed to find a couple of more XXE-related reports that I would like to investigate further. \n. I was hoping the description with Goals, How and Result would be clarifying, but I can definitely try one more time: Of course the objective here is to not do direct string manipulation of the SAML response for GoogleApps support, but rather use available opensaml APIs to the same thing. We are using opensaml for some of the other related SAML functionality and not for this, so this pull combines the already available APIs used for SAMl1 and puts a structure around them so they can be used for GoogleApps. The How section explains what the proposed structure is above. It just made little sense to me, to first write a bunch of code to convert the GoogleApps SAML response to use opensaml, to then later remove that code and attempt to come up with a structure to be used for both SAMl1 and 2. \n. Agreed and apologies post-hand, but sometimes, I am not sure the codebase can avoid it. Or maybe it's me :) In cases like this, I generally try to give a wholesome overview of the changes, and submit inline comments on the diff to point out interesting areas worthy for review. If you think it'd be easier, I can break this apart into a series of smaller pulls, sure. \nObviously things work fine the way they are now, but my intention is really to further extend this to add support InCommon metadata. Somehow. I have no idea how that would all work yet, but the availability of extending these classes seemed like a step in the right direction. \n. I intend to merge this pull by the weekend. Please speak up if you see an issue with the plan.\n. I addressed the feedback in the latest commit.\nIn summary, I ran findbugs using the IntelliJ plugin, and enabled the core,security and contrib packages for findbugs, and let it scan everything. As of the latest merge with master, there are still about 80 other issues it reports. \nOf course, some of these can be false positives, and we really need to comb through the ruleset to find an appropriate set. Next action items are:\n1. Run the scan as many times as needed to find an appropriate ruleset to check for. Developers can then review the configure together and agree on what should be included.\n2. We'd then include findbugs into the build to protect future changes.\nI'd like to settle some of the existing pulls first before picking this up again. This was just for now the result of a leftover previous analysis I had during our appsec call days last year. \n. Understood. My take is, while smaller pulls are superb, the ones like this are generally boring in nature anyway. I mean, I would think submitting 30+ pulls that would show \"hey, I added 3 final keywords here in this pull and here's another one with one comma added in\" are just really annoying. I would be annoyed to review those myself :) \nNonetheless, I can still break this down, but I would still be a lot of noise. \nMy goal is to actually come up with a ruleset much like with checkstyle. That way, I could just say \"hey, these are the rules that have changed, etc.\" and that would merit clear review and discussion more than any other boring pull that would invovle discussions on whitespace and whatnot :-))\n. Going to take action on this pull as well. Please let me know if you're ok with the changes going in. I know @leleuj has already sort of consented but I'll wait a couple of more days for a few more explicit reviews and votes. \nAgain, I am happy to break this pull apart if reviews are painful....or can try to precisely give a thorough overview of the changes. \n. Of special interest are the javadocs, checkstyle, surefire and the projectinfo plugins. Separate pull exists for the aspectj plugin\n. This should be updated now with changes.\n. Pull should be updated with feedback. \n@leleuj I added support for default logos. This is what it looks like now:\n``` jsp\n\n\n\n\n\n<div id=\"serviceui\" class=\"serviceinfo\">\n    <table>\n        <tr>\n            <td><img src=\"${registeredServiceLogo}\"></td>\n            <td id=\"servicedesc\">\n                <h1>${fn:escapeXml(registeredService.name)}</h1>\n                <p>${fn:escapeXml(registeredService.description)}</p>\n            </td>\n        </tr>\n    </table>\n</div>\n<p/>\n\n</c:if\n``\n. Updated the pull with feedback from @battags \n. That sounds like a good idea. While every populator internally should call supports, and all do now, there's a chance an extension might forget that. I'll make the change. \n. This is updated  now. \n. Removed double calling of the supports method in the latest commit. \n. Added test cases as well. \n. This is updated. \n. Pull is updated to address feedback. \n. Well, I see no dependencies or links to any webflow packages which was the rationale I based this pull on but since it does explicit flow mapping anyway, I suppose it could be moved as well. Sure. \n. This turned out a bit more complicated than I had hoped, as I had to moveAbstractNonInteractiveCredentialsAction` back to core for now, since there are plenty of other action classes in other modules depend on and extend that class, and I certainly wasn't going to move all those over, or add dependencies to the support module for those projects. So, this one we can keep in core for now albeit this being not an ideal situation. \n. Heads up, merging by EOD. \n. +1 \nShould this go into master as well? Merge out of band perhaps?\n. Sure. Perfectly legit change and it makes sense to me. I'll run the same change locally on master and see how it goes, but it all looks good to me. It we ~~can~~ cannot issue an ST, there is no point in making the proxy call. \n. Just a bit more evidence that on master as well I do see the same validation failure due to ST having been validated and thus expired. However, on master things are bit more controlled and more strictly because proxy authn is off by default, and even then, it needs to be enabled for a specific set of url patterns. Without those rules in place, the callback handshake is not executed and so chances of a DOS attack are reduced.  \nNot sure we can do much for 3.5.x at this point. Maybe backport authz rules for proxy authn in a manner that would least intrusive? Probably would not be that simple effort-wise.  \nThis however brings up an idea (for which I think we have issues as well) that maybe we should separate out the proxy ticket expiration policy from the service ticket as well. Currently, the connection between to is very matrimonial and as such it impacts the following situations:\n1. should PT expiration policy  be the same as ST? \n2. when TGT is expired, should PGT be expired as well?\n3. How does SLO impact all of this?\n. It should be there cas-server-core/src/test/java/org/jasig/cas/TestUtils.java I suppose. The method in question is only used for in one class, in one spot in the webapp-support module. Doubt that it would be used anywhere else, to share it outside that context. \n. Updated pull. Build failure is unrelated, as it's try to figure out where JBOSS jars live and cant reach them. This is a pull to slightly try to minimize that noise #770 \n. We have not concretely agreed. No. I am just taking proactive measures. It's easier to present 10 different options and have others weed out 4, than it is to plan the perfect 4 items ahead of time. Rather than focusing on stuff we really care about, I am just presenting options we really dont care for :)\nAnyway, so I am happy to reverse the \"4\" you don't like. So far, two things:\n1. I could certainly reserve the naming convention and mark the rule to be a warning, but I really feel like abstract classes should be named so, and those that are named, should be marked as abstract. We then deprecate the ones that violate the rule, and get them deleted the next time around. Sound good?\n2. Trailing commas: personal preference is, I like them. I find it easier to add items to the array that are expects it, with an awaiting comma. But honestly, I dont care as much about it. The rule an be removed all together.\nLet me know how you feel about this. \n. @battags I am going to shortly resume work on this with the above suggestions. Would that work for you? To recap:\n1. Remove trailing commas from arrays\n2. Reverse Abstract/Root/Base/Factory rule on classes to be a warning instead, mark the classes as deprecated and stick with the original name for now.\nAny other rules you have in mind that would be worthy to remove/modify? \nThis is probably the most interesting piece if you want review what has changed:\nhttps://github.com/Jasig/cas/pull/767/files#diff-211\nControls everything.\n. So I removed the trailing commas from array defs and also restored class names that were renamed, but deprecated them so we would eventually and in the next release appropriately rename them to note their abstraction. \n. So about your 9 and 10 effectively:\n1. The check for naming style for methods and classes is set to a warning. It isn't a big deal because there were only 3-4 classes sort of in violation of the check. This also includes your \"4\" but I'd have to go back and check. At any rate, there are no renames here in this pull and those that were, were reversed and classes deprecated. \n2. I recently learned that in Java, its unnecessary and actually inefficient to initialize a variable to its default value. This seems to be a pattern carried over from C/C++ days. When a variable is initialized, it is by default assigned a default value for its type. (null, 0, false, etc) If you exlicitly initialize this again, you are doing double duty. Now, I dont as much care about the performance (which I'd say we can safely call it negligible) as I care about style because there are places where there is a default and places that there is none. So the pull proposes the check and removes all explicit defaults. Obviously setting to a non-default value like true for a boolean is no problem at all. \n. I would like to take action on this pull if everyone is OK with the explanations and the feedback given above. As this pull affects our style there is a chance that we have might repetitively update it here to account for other changes that are merged here and there and so I want to avoid that extra task. Scott had a few concerns here which I think I have managed to address. So if there is nothing else, I'll go ahead and move this forward. \n. Great, thanks!\n. +1\n. The trouble with the current design is that the builder is a hybrid entity: it acts as both a DTO carrying configuration and it also attempts to build a client. This is a bit confusing because it does not aim for the single responsibility of building a client, (This isn't exactly the builder pattern either; there are no abstractions to bridge over the gaps), because the only method that should be visible there would be a build. \nFirst Approach\nIdeally, all configuration and settings are injected into the builder. The build then simply is invoked to only create an HttpClient. The thing that it builds and returns should be CAS specific. It should not do anything else. When it creates the ideal object, it should inject it with everything it needs to function, so holding references then to the builder itself would be unnecessary. Any bean that would want to reference the httpclient can still perfectly do so, provided the context calls the appropriate init-method to build the client object. This is the recommended approach I'd say, and is fairly common.\nWhat we are basically creating here, which I think @battags also brought up, is very close to a factory bean. We are calling it a builder which might be a bit confusing as there are no similarities to the actual pattern! Maybe it would be better if we opted for a HttpClientFactoryBean instead.\nSecond Approach\nOtherwise, the builder should be renamed to just hold the configuration. It's not going to build anything. It's just a carrier. The client would then simply use that configuration with a reference to do the building. \nMixing the two approaches would be trouble later on.\n. @leleuj you may have to merge with master once and run checkstyle again. We just updated the rules. I am in the process of updating other pulls as well. \n. :+1: \nprobably need to merge with master once. Thanks for taking this one. \n. Are you sure? the button is still green here to merge :)\n. Would you also take a pass at the development docs and see if there is anything that should be updated? Or maybe explain a bit more about what CAS does as far as this PR is concerned in the security guide? \n. thanks!\n. Cool. Just one small typo: temporarly\nLooks great otherwise.\n. @leleuj is this pull actually merged? or I am just confused and you still plan to do so (on Thursday)?\n. Unfortunately, there is no way to intelligently produce a return value for the deprecated settings. Maybe for some and with difficulty. I do plan to work on the mgmt app next but the intention here is to mostly try and not break compatibility (even if there was no such thing as the management webapp, etc)\nAt the same time, they dont produce anything meaningful so it may not be worth it at all? \n. Another update: I am actually trying to find someone who understands javascript and css better than me and can come up with an intelligent design rationale for the management webapp and I have failed to locate anyone yet. At any rate, I'd probably come up with a few wireframes before actually making or proposing any changes. \n. Coolio. I will keep working on it. \n. True :) You know, I had to come up with an alternative to \"test\" because yes, \"verify\" is totally arbitrary. \"test\" was the original convention so hopefully this change would communicate that you can freely call the method anything you want. I could also remove the prefix entirely, but that also would have left me with some strange method names. \n. What you are describing is already handled by proxy authentication. You shouldn't using the REST API for this sort of thing. \n. TGC is never supposed to leave CAS, nor should the TGT. Even if you wanted to, a TGT that you receive would be encrypted and would be of no use to you. \n\n\nJohn is connecting to an application A. Very classic CAS application, John is redirected to CAS, authentifies, gets a TG Cookie, is redirected back to his application with a ST which is validated between Application A and CAS : John is authentified on application A and has a TGCookie on CAS domain.\nJohn go to a page on application A that use a webservice W on the front side. W is also protected by CAS. John needs a ST to get to webservice W.\n  we don't want John to authenticate himself on the CAS REST API...\n\n\nNo you dont. What you want instead is to obtain a proxty ticket for W and have W validate it when it talks to CAS.\n. In order words, the original application should obtain a proxy granting ticket for W. That PGT will be used to obtain a proxy ticket and proxy ticket is then passed to W. W would then ask CAS to validate that PT and so on. You dont want a TGT. You want a PGT instead.\n. This should help explain a bit more:\nhttps://wiki.jasig.org/display/CAS/Proxy+CAS+Walkthrough\n. Thanks for the sequence diagram. It seems like you are using a combination of normal CAS protocol and the rest api. This generally is not a well suited match. The rest api's job is to issue TGTs and STs directly back to the app and will not rely on the state of the CAS server itself (which is what you're proposing). \nAside from keeping this just as a local extension, a few things stand out to me. The combination of using the REST api and the CAS normal flow is the crux of the issue here. You can only use one, but not both, and specially not based on the TGC because it no longer represents just the TGT anymore and we wouldnt want to have the rest API be tied to the state of the CAS server itself, because rest is supposed to be totally stateless. \nSo if you wish to use the normal CAS protocol, it could be something like this with the help of a CAS client:\n1. Browser accesses WS1\n2. WS1 redirects to CAS\n3. CAS SSO, redirect back to WS1 with ST\n4. WS1 validates ST \nSame goes for WS2.\nIf you are unable to use a CAS client, and wish to use a the rest API directly, then:\n1. Browser accesses WS1\n2. WS1 asks the rest API for a TGT with the uid/password\n3. WS1 gets a TGT, and scopes it to the domain\n4. WS1 asks for a service ticket with the TGT\n5. WS1 validates it and moves on\nWS2 will then use the scoped TGT to do the same.\nDoes that help at all?\n. In other words, it seems like in your diagram above the rest api is used as a cas filter (something usually a cas client handles) which is a no-go. If your application requires user authentication in any way, the recommended approach is to use a given CAS client to interact with CAS, etc. The Apache CAS client may be useful, though it depends on what hosts your application obviously.\n. Closing PR for now.\n. This ideally would better be addressed once the remaining pulls are merged/closed. \n. Sure.\n\nOn Nov 30, 2014, at 2:21 PM, Scott notifications@github.com> wrote:\n+1 if you address any failures you can please submit the pull requests per bug type? (Unless there are very few). It will be much faster to read a pull request fixing all bugs of a specific type than a large pull request with lots of different bugs fixed.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Jasig/cas/pull/781#issuecomment-65000838.\n. I'll fix the indentation issue and get this merged today. \n. Thanks for the review. I pushed the changes to remove duplicate calls. \n. Updated pull to account for @battags 's comments. \n. Closing PR for now.\n. :+1: \n. Sure, I understand null values \"can\" cause problems. What I dont know understand are the circumtances that null values can be caused. Instead of assuming, can you describe a use case or a behavior that would cause null values to be retrieved? If you're doing this programmatically, cant you simply check for null values? or is the problem more serious than that? \n\nAt any rate, this type of check really needs to happen inside the loop below. \n. > Lets say, i use multiple PrincipalResolvers to get my attributes from different systems.\nWhich principalresolvers currently return null values? I am not against the check really, I am just trying to understand if it's something that is described by the API contract, or there is in fact a bug somewhere. If a principal resolver is said to never return null and one is doing the opposite of that, we'd have to fix. If you have custom resolvers that do so, they violate the API contract which is really their fault :) So I am just trying to figure out how defensive we'd have to be here and whether it's something we can clarify via the API and go about our way!\n. Also, please remove all code comments and adjust the line indentations as well. \n. Closing PR for now.\n. Closing PR for now.\n. -1\nCan you describe the use case for this change first please? A principal is either resolved by the handler or by a resolver. Why are you doing both? \n. Also, build seems to be failing. \n. Thanks for the descriptions. The use case sure is valid.\nWhat we really should be doing, is to find a way so that attributes from multiple sources are merged, rather than reconstructing the principal, from both authentication and principal resolution. The task of resolving a principal can and should only happen in one place, but principal attributes can also be retrieved from authentication as well. Otherwise, you'll end up mixing principals. \nIf you post this on the mailing list first, I think @robertoschwald would be able to explain what you/we can do to make this easier. \n. Principal attributes can come from multiple sources but that's not what's happening here. Principals cant come from multiple sources. \n. Also see https://groups.google.com/forum/#!topic/jasig-cas-user/ua6c_dBfWi0\n. Sure, lets see if I can clarify my previous statements:\n- In CAS there is (and should always be) one authority that decides who the subject is. That's a single source. In our case that is either an authentication handler, or a principal resolver for more complicated cases. \n- This means that while subject attributes can come from multiple places, whether it's by having multiple resolvers chained together or a fancy authentication handler, at the end, you always get back one subject from either of those places.\n- This means, an authentication manager can not reconstruct a principal object. That's a design violation. \n- If an authentication handler is to resolve a principal from the authentication source, and if attributes are to come in from that source as well as other attribute repositories, a custom authentication handler makes a lot more sense to me, than this pull. \n. In fact, plug in an attribute repository into a custom authentication handler and at the time of the principal construction, merge attributes from the authn src as well as the repository. Done! That way, we dont have to dance around the manager. \n. > What we want is to get user attributes from multiple sources whereas the authentication handler OR the principal resolver is responsible to return THE principal (identifier + attributes). \nExactly.\n..and yes, that's a better way to go IMO. An authentication handler that can delegate to a \"real\" authentication handler to authenticate the credentials, and finally call on the attribute repository to get attributes, merge them with the attributes received from the authentication source, etc.\n...another possible option might to be not delegate, but create an authentication handler that is only abstract with all the right stuff (attribute repository, etc) plugged in, and so custom use cases such as this one would be able to extend that, write the code they need to talk to a WS for example and move on. \n. well, not sure that will work with #676. Merging scenario would not be handled by then. The source that will be consulted with #676 will always be the attributeRepository and not the authentication source. \njava\n        Map<String, Object> attributes = this.cache.get(p.getId());\n        if (attributes == null) {\n            attributes = convertPersonAttributesToPrincipalAttributes(p.getId());\n            addPrincipalAttributesIntoCache(p.getId(), attributes);\n            return attributes;\n        }\n        return attributes;\nAs you see above, p.getAttributes() is never consulted but I am sure we can build that in for #676. Easy enhancement. \n. I took care of this problem via #676. Once it goes it, this problem would also go away :)\n. This is now handled via https://github.com/Jasig/cas/pull/676. Closing. \n. :+1: \n. Excellent point about nulls. I'll build that protection into the commit.\nAs for ByteSource into byte[] again, this is because ByteSource gives us a copy of the byte[], a view/snapshot of it without exposing the original array. Consider the following snippet:\n``` java\n    public static void main(String[] args) throws Exception {\n        byte[] m = new byte[]{(byte) 'N', (byte) 'P'};\n        System.out.println(\"length \" + m.length);\n        System.out.println(\"first value in original \" + m[0]);\n        System.out.println(\"second value in original \" + m[1]);\n        modify(m);\n        System.out.println(\"second value in original after mods \" + m[1]);\n    ByteSource s = ByteSource.wrap(m);\n    byte[] d = s.read();\n    System.out.println(\"first value in clone \" + d[0]);\n    d[0] = (byte) 'O';\n    System.out.println(\"first value in clone after mod \" + d[0]);\n    System.out.println(\"first value in original \" + m[0]);\n\n}\n\nprivate static void modify(byte[] ar) {\n    ar[1] = (byte) 'U';\n}\n\n```\nOutput:\nbash\nlength 2\nfirst value in original 78\nsecond value in original 80\nsecond value in original after mods 85\nfirst value in clone 78\nfirst value in clone after mod 79\nfirst value in original 78\n. Also, I wanted to keep backwards compatibility by still returning the original byte[]. It's just that it's cloned, so it can be modified but it will have no effects on the original object's internal state. \n. Updated pull with null checks and NotNull annotations. Merged with master as well. \n. By all means. Actually, I am going to bring that up next, that our \"docs\" really need to be put right next to the code, so the changes to a pull also are accompanied in the same commit set with the changes to docs. We can come up with a process of how to officially make them available on GH Pages. \n. ...and, actually I might be able to come up with a checkstyle rule for arrays vs lists :) That would even be better. \n. I updated the conventions for the time being:\nhttp://jasig.github.io/cas/developer/Code-Conventions.html#arrays-vs-lists\n. Updated the pull to address @leleuj feedback. Thanks for the review. \n. Fixed test failures in the latest commit. \n. Actually, checkstyle does not support this check yet. I ran a different analyzer. \n. @leleuj A bit of elaboration on the first two:\n- A non-static nested class (note that there really is no such thing as an inner class) has access to all the fields of the enclosing class directly, which allows it to modify program state, albeit accidentally, thus potentially causing security issues. By passing the container, you force the nested class to go through the public contract. \n(Also in the event that the nested class is public and non-static, creating instances of it generally lead to perf issues, because you'd require an object of the enclosing class before you can get to the nested class). \n- Generally, it's a good idea to mark the class that has a clone() method as final, AND the method itself because clone() has the ability to construct objects without going through the ctor and if you allow cloning in subclasses, you risk chances of data corruption which my tool tends to want to categorize that as a security issue. (In fact, I bet I can make CS to check for this too)\n. You can't, and you shouldn't. What you would choose instead is either a copy constructor or a static factory (which how RegisteredService instances are created) \n. Assuming folks are OK with the changeset, I plan to merge by tomorrow evening EDT. \n. Just a couple of comments on the service serializers that specifically deal with tests. Otherwise, :+1: \n. Thanks. Lets make progress on this. Probably need to remerge with master.\n. Yes it is because IOUtils is part of Apache Commons and can't be removed.\n. Thanks for your review. I pushed a change to address the issues pointed out by @leleuj \n. I imagine there are areas that can be changed for multi-catch support. Those are a bit more difficult to catch with a giant grep but I can take a look next and see what can be done. \n. BTW been using this to make adhoc changes like this pull easier. You might also find it useful:\nhttps://github.com/mmoayyed/java-parser-template\n. Relates to #798 and https://github.com/Jasig/cas/pull/692\n. thanks\n. This would be a good candidate for 4.0.1\n. I added the missing annotation. \n. Why, sure. The whole objective here is to help adopters understand what CAS is picking up, what version is deployed and when they pass along log files, we'd be able to better understand the context rather than going back and forth asking for version, os, java and assist the adopter by telling them how to find all that stuff. \nThere is nothing incriminating in the output log. Logged at DEBUG, noise can be reduced later on and should be. \n. OK, so you want to see the log level at INFO? sure. \n. Updated level to use INFO\n. As a reminder that we remove/replace it later. \nAnd sure, it can be a cloned Date. Still not ideal because that gives the illusion that you can do Date.setX().\nP.S: I hate auto-correct!\n. Ok that's fair. I did change the issue milestone to note/remind us to review this for the next major release. Lets punt this for now as the code is already handling mutability. \nIt is interesting that no other library is actually doing this type of extension. I was hoping to find something in guava or commons but there is nothing. \n. I'll follow up with updates to docs but wanted to first open up the pull for reviews first. \n. bump\n. Updated pull to address feedback by @leleuj \n. Merging by next Monday...Please speak up if you see an issue.\n. @battags thanks very much for the review and comments, very helpful. I pushed a few commits to account for the points you brought up which are:\n1. The look-up based on the service parameter is removed and not needed anymore. An authz Strategy should now be an independent component.\n2. Log levels are all adjusted an accounted for, down from WARN. \n3. Tests and API cleaned up. \nI hope this reverses your vote on the changeset. If I have missed something,  let me know. \n. @battags have you had a chance to review? I suspect the items you pointed out are all taken care of. Please take a look when you get a chance. This pull should also help with #843 as well, so I'd like to try and make progress on both fronts. \n. Pushed one more commit, to handle warn->debug and to remove the unneeded service parameter. \n. OK, so I updated this pull again to do two things:\n1. Used DefaultRegisteredService_Access_Strategy instead; might be a better fit. \n2. Changed the API method to be: doPrincipalAttributesAllowServiceAccess\n. I took another pass at this pull to ensure all tests compile and that all CS issues are taken care of. \n. Soooeeeet :)\n. Thanks much for the review. You are right. I did leave out a few method names, I'll get them renamed before the final merge.\nYes, a db patch is required. I'll attach the patch to the documentation, which I will also write as part of this pull (Nice to have docs in the same repo/branch!)\n. Could I assume this pull is ready to go? \n. Sure. Good idea. I'll make the change to reflect that. \n. Updated version and release date (v3.0.1)\n. I corrected the referenced issue in the description. That should help with the use case and functionality intended here. \n. So, are we all in agreement as far as intention and objective of this pull goes? any objections and/or other comments? \n. Sure. Most often we run into this when dealing with specialized requirements for a client app that wishes to pass param1 and param2 to the /cas/login endpoint. Another example is the cas-mfa module we work on where apps can opt into MFA by providing a specialized authentication method to /cas/login and /cas/serviceValidate. All such scenarios typically require a new extension of Service via a new Argument Extractor. However, none of such scenarios require a specialized ticket id generator for the new service type. We simply just use the default.\nIn other words, for example:\npublic class SomeNewService extends SimpleWebApplicationService...\nBecause ticket id generators are defined by exact class names for services, this forces me to do the following mapping:\nSomeNewService -> DefaultTicketIdGenerator\nMy argument is that this last step is unnecessary. There should be a default fallback. \n. Merging by next Monday...Please speak up if you see an issue.\n. > How does passing \"param1\" and \"param2\" to the /cas/login endpoint affect service generation?\nParameters in various cases either define what the service should do additionally. Layers below attempt to cast to a new service type, read out the values of these parameters and operate. There is not one pre-defined behavior obviously. Every use case and deployment is different. \n\nWhat are they doing with this parameter such that its tied to the service? And if this is that common, why don't we solve that problem (such that new services don't need to be created).\n\nUnfortunately, we cannot solve that problem universally, I don't think. Each deployment could come with  N number of custom parameters to endpoints, that would indicate either a new service type to be created or additional behavior that would be stuffed into the existing service (which would be a new service type anyway) Examples could be, additional custom processing for notifications, prompts, alternate flows, authn methods, legacy reasons, etc. These are just examples, not a common use case. The commonality is that a new service type is required one way or another. What it does and why is different for every case.\nThis wouldnt be a public API exactly, because the default fallback generator is a private field stuffed into CASImpl as of latest commits of this pull. It will not affect the API and can later be removed and reworked. \n. Cool. One other possible solution would be to allow the extractor to grab all other non-standard parameters, and stuff them into same WebApplicationServiceImpl as Map or something. That would take care of the issue, and will remove the need for further casting down and creating a new service. \nAt the same time, API-wise one is always allowed to create a service for super special cases for who knows why! API can -> API will :) fallback seems in order nonetheless.\nAnother possible solution would be to have each service declare a \"service.getTicketIdGenerator()\" with a default created at a parent inherited by all others and overridden later. \n. Apologies if I acted hastily in this matter. There were no explicit objections on the thread and I assumed folks are OK with the proposal. \nAs @wgthom mentions on the thread, I don't think we disagree that clearpass should be used with extreme caution and only as a last resort, and I am sure we can document to world's end more than enough reasons as for why this particular functionality should be dealt with much care. But if we are going to provide support for clearpass at all in general, we should do so in a way that is not impossible to configure, broken to use in a clustered environment and generally confusing and over-complicated at best. \nThe effort that has undergone to make clearpass more secure has only done so at the cost of unnecessary complexity and as I mentioned, in clustered environments is very much broken specially in the absence of client support. Strong discouragement in the documentation and elsewhere is a perfectly sound approach to heed caution, but also if this thing is the only solution, and the adopter/client would indeed and regardless like to see \"a\" solution, then making clearpass configuration ever more complicated and difficult will only and only lead to more unsecure means of touching and retrieving the password for integrating a given mandated application with CAS. \nI would like to explore other means of communicating the password more securely that are simpler and self explanatory in nature. The proxy dance simply isn't. This is what comes to mind:\n1. Default  encryption out of the box.\n2. Flag for a particular service to note that it's authorized to use the password. (This is the same as the allowedToProxy flag really)\n. In fact, since we have already a proposal for clean-up of CAS AuthZ rule, it would be easy to start decorating a service with clearpass permissions:\nhttps://github.com/Jasig/cas/pull/828\n. I can certainly assure you that in certain cases with a number of applications I have had to deal with, using the password is the only option. The use cases are generally such that a given application exposes a programmatic API for authentication. This API requires both a valid userid and a password in order to create an authentication session, that is either then kept as a response cookie or some other way. Unless you have the password, there is no other way to integrate the application with CAS (which only so far provides the userid) Examples include Outlook Web Access, WebAdvisor, Email Preview Portlet (in the context of uPortal) and many more...which are common in the higher-ed space. \nThe way I digest this scenario is that, if we are to accept that an application is authorized to receive the password and that we trust the application, sending the password as plaintext either via proxying methods or as an attribute is of little significance. Proxying here from the CAS POV only attempts to ensure the service is authorized to do so, and here we can accommodate the same set of rules via the service registry in a manner that is easier to configure and understand. \n...and you're absolutely right. Clearpass would no longer be required and can be deprecated and removed, along with all the complexity of caching, distributing and managing cache timeouts in a distributed environment. \n. I put together some basic code blocks to demonstrate that the password can be encrypted into the payload response, much in the same way that it was previously encoded in the backend encrypted map. This is by default done via RSA-2048. I am waiting to see what progress we make on #828 so I can determine how to to add rules for an authorized service to receive the password as the attribute. \n. I have updated this pull to include the following changes:\n1. The metadata populator that is supposed cache the credential will use a public/private key to encrypt the password as an authentication attribute.\n2. The password is only release if a credential attribute is resolved by the attribute repository of the principal resolver, AND if a credential attribute is allowed to be released for the requesting service.\nHere is a screenshot of how the attribute will be passed to the app:\n\n@serac does this satisfy what you had in mind? \n. So, help me understand this. Why would you want to have a per-service key for clearpass related functionality? At this point, we just have one key pair that is tied to the metadata populator that encrypts the password for all. Clients need to share the same key pair to decrypt. Is there a need to do more? \nIt sounds to me like you have in mind something that is more like the authentication of service itself, right? \n. @serac Sure, but since the thing we are encrypting is always constant, wouldn't a single compromise of a given key pretty much null out the security of all others? If I get my hands on the key pair and am able to sniff out the password and decrypt it, that will subsequently mean that all other pairs have also been compromised, no? Unless each service encrypts the password with something dyna-salt-like? \n. OK thanks. So it sounds like we'll need two things per-service: the public key and this secret key. @serac  since it seem like we are moving away from BC, is there anything in cryptacular that would help us implement this? \n. So, gathering from the discussion here that we are to certainly add a per-service key config into the registry. I am going to take this one step further and add this config into the attribute release policy. We had talked about the ability to encrypt the CAS response as part of service authentication, and this is an opportunity to apply encryption to the attributes block as a whole. We are certain that the password should be encrypted as an attribute on a per-service level and it would be relatively easy to extend that to the entire attributes block, to make sure that certain attributes that adopters may consider sensitive can also be securely passed along, as an option. Does that make sense to everyone here? \n. @leleuj this is related to the discussion we had at the CAS AppSec group as well that we talked about at ESUP. \n. Yes sure. This proxy mechanism seems to be a better to implement that. I'd also have to consider that the configuration [although not by default] could allow nonsecure services. This would be a way to ensure that we are returning data to a service we can trust via PKI etc even if it's operating in a nonsecure mode.\nAlso, this sort of thing would also allow us to return the PGT in the response, encrypted :) While we may enforce the encryption of both password and the PGT across the board with no option to turn that off, it's probably safe to return all other attributes in plaintext as we do today, and expose an option to encrypt them if needed for deployments that are super sensitive to attr release and policy. \n. I have in the past dealt with some deployments where the adopter was super and hyper sensitive to any passing of attributes to apps. This is an extra layer of security on top of the existing back-channel call as a possible optional feature. We also need to consider that the call may not always execute on TLS and we could also make the argument that one may not always trust one's network :) in somewhat dispersed deployments. \nI will admit though that this may be on the borderline extreme, but effort wise, I cant say it adds much to the picture. \n. Sounds good. I'll get to work again this week to see what I can cook up. Will post back again here soon.\n. Updates:\n1. I have added support for per-service public keys. \n2. Two new fields to the attribute release policy to indicate whether password/pgt are authorized to be released for this service. [no other attribute configuration is required]\nExample:\njson\n{\n  \"@class\" : \"org.jasig.cas.services.RegexRegisteredService\",\n  \"serviceId\" : \"^(https|imaps)://.*\",\n  \"attributeReleasePolicy\" : {\n    \"@class\" : \"org.jasig.cas.services.ReturnAllowedAttributeReleasePolicy\",\n    \"authorizedToReleaseCredentialPassword\": false,\n    \"authorizedToReleaseProxyGrantingTicket\": false,\n    \"allowedAttributes\" : [ \"java.util.ArrayList\", [ \"cn\", \"mail\" ] ]\n  },\n  \"publicKey\" : {\n    \"@class\" : \"org.jasig.cas.services.RegisteredServicePublicKeyImpl\",\n    \"location\" : \"classpath:RSA1024Public.key\",\n    \"algorithm\" : \"RSA\"\n  }\n}\nI had to come up with a RegisteredServicePublicKey and its impl to get around serialization issues.\n1. If either of credential or pgt are available as authentication attribute, they are removed from the validation response initially and replaced with their encrypted/encoded versions. New screenshot:\n\nI simply used the same familiar google-apps instructions to to generate public/private keys. There are test cases in this pull request that validate either scenario as far as encryption and decryption. \nThe only thing that this pull does not address is rollover functionality. I'd be OK with adding that if folks feel strongly about it, but for now, I'd rather focus on the simple-case and if this is approved, I can work on an additional change in a separate pull to work on roll-over functionality. \n. There are 1-2 checkstyle failures here that I will fix shortly.\n. Fixed the build issues and checkstyle. The failure here is not all too correct. How do the changes seem to everyone? @serac everything makes sense better than before?\n. The validation response will be modified basically to return two new attributes conditionally: one for \"credential\" and one for \"proxyGrantingTicket\". All other attributes (principal/authn) remain in place as they were before.\nxml\n...\n    <cas:isFromNewLogin>${fn:escapeXml(isFromNewLogin)}</cas:isFromNewLogin>\n    <cas:authenticationDate>${fn:escapeXml(authenticationDate)}</cas:authenticationDate>\n     <cas:credential>${fn:escapeXml(credential)}</cas:credential>\n     <cas:proxyGrantingTicket>PGT-123456}</cas:proxyGrantingTicket>\n</cas:attributes>\n...\n. Updated pull to address feedback. \n. Assuming the changes are ok here, I'll proceed with the merge towards this weekend. Please speak up if you see an issue with this plan.\n. Appreciate the feedback. I have some docs to write as well, and will continue to do so this week. \n. Cool, thank you. I'll review and see if there is applicability. \n. Thank you for the suggestion. head.js worked beautifully with less code :) updated pull\n. This pull targets 4.x which requires mods to gh-pages. \n. Only master and so forth will allow pulls to the documentation module, which will auto build to gh-pages. We didnt have that process around the 4.x time. \n. Could I assume we are ok with this PR? \n. Here are the full release notes:\nhttp://checkstyle.sourceforge.net/releasenotes.html\nIn fact, we are already one revision behind :) I should update this to point to 6.3.\nThe main motivation is build performance, specially as CS is integrated into the compile phase. We want to be able to take advantage of the latest perf improvements, and possibly do away with buggy checks that might slow the build down or report false negatives. \n. I'll take a look at failures in just a sec. Tests do pass locally. Not sure what's missing yet.\n. I updated the pull to mark the class as abstract. It is also now marked as deprecated because it correctly should be renamed AbstractTicketValidation later on. \n. :+1: with a few small comments, assuming tests pass.\n. Great. thanks. Some follow ups:\nassertTrue(new HttpMessage(null, \"\").isAsynchronous());\nassertTrue(new HttpMessage(null, \"\", true).isAsynchronous());\nassertFalse(new HttpMessage(null, \"\", false).isAsynchronous());\nDont pass null and \"\". Add a valid URL and message instead.\nThen additionally, write a test please that attempts to pass null and \"\". Ensure the test fails. The HttpMessage should be annotated with NotNull annotations really.\n. @ufoscout have you had a chance to resume work on this PR? \n. Fair point, but I still feel that your test needs to be adjusted so you're not passing null and blank values. Also your test appears to have broken the build. License headers missing, etc.\nhttps://travis-ci.org/Jasig/cas/jobs/48633063\n. Great, thanks. I'll let @leleuj and @battags also review but this is good.\n. @alexhenrie thank you for your contributions. we hope you can keep it up albeit all the unicode complexity. \n. So this is just a matter of learning a new way to configure Spring, or did you actually run into an issue?\n. OK, thanks for the update. I'd recommend that you document your experiences here instead:\nhttps://wiki.jasig.org/display/CAS/Home\n. Cool, it sounds like we can update the docs with this new info then?\n. Yes it has definitely changed. Config is not backwards compatible and is \nmandatory. It\u2019s a major change. While there are component that can route \ncalls from log4j v1 to log4j v2, there is nothing that would understand the \nconfiguration of log4j v1 and make it work with the v2 syntax. So this is \ndone on purpose.\nThe SSO sessions fits with the changes to the statistics. It\u2019s just another \nmetric and I realized we could possibly fit it here, as it\u2019s often also \nrequested. If that is too much for this pull, I can certainly take it out.\n. Took out the SSO report\n. Moving to merge by next Monday morning, unless there are other comments. \n. Assuming the changes are ok here, I'll proceed with the merge towards this weekend. Please speak up if you see an issue with this plan.\n. Changeset seem ok to everyone? @leleuj ?\n. The same rationale applies to both front/back channel logins. A specific endpoint to receive a logout message is the same regardless of how that message is sent to that endpoint. \n. cases where there is no cas client, or cases where the application would explicitly rather handle logout requests at an endpoint. if the application does not wish to rely on a cas client to intercept logout requests, it makes sense for those requests to be sent to a place where the app can process its own session clean up and perhaps other housekeeping tasks it needs to do before fulling voiding the session space. \n. Separating functionality like that would be confusing. Either there is a logout endpoint for the service to receive requests or there is none. If there is, those requests can either be sent via front or back channel. This to me is clear to understand, rather than to try and pick which url/setting would used when, etc. \n. So what happens if I have:\n1. No CAS client implemented to work with (and no possibility of using one)\n2. Wish to receive logout request at a different endpoint than the service url because I have a custom servlet that does invalidate my session, calls my database, emails person X and rings the doorbell when a request comes :)\nWill I have to change my settings from back-channel calls to front-channel, only to get a new url receptor and go through the browser to accept the request? What will have to change on the application side?\n. In my view, these two settings are completely separate and I would like to keep them as consistent as possible. Here's the story you'd write in docs:\n1. Logout requests by default are sent to the service url\n2. Optionally, you can change that behavior so they are sent to a new url endpoint\nThat's it. You will have then accommodated all possible scenarios. Because:\n1. those who have implemented the client on the app side will simply set their config to back-channel and be happy.\n2.  those who have implemented the client on the app side and wish to use back-channel with a custom url, will simply set their config to back-channel, a custom url and be happy.\n3.  those who have not implemented the client on the app side and wish to use front channel will simply set their config to front -channel, a custom url and be happy.\nIt would also be easier on the service registry model, because if you are going to exclusively limit the logout url to front-channel, then we'd have to refactor the service registry to make sure configuration is relevant. Something like this:\nLogoutStrategy:\n- NoLogoutStrategy\n- BackChannelLogoutStrategy\n- FrontChannelLogoutStrategy\n- ....Logout Url\nand remove the enum.\n. Updated pull.\n. What you have in mind would work, but wont pass muster for a PR. \n. Oh no, none of that :) I was merely referring to the solution that it won't be appropriate. Specifically, checking for a SamlService explicitly is not a good idea. What would be better instead, is that you have each argument extractor communicate its parameters back to you, and simply modify the message to accept those parameters, as parameters.\nAdditional reading:\nhttps://groups.google.com/forum/#!topic/jasig-cas-dev/ybQcp5RsYFw\nhttps://groups.google.com/forum/#!topic/jasig-cas-dev/U3YHH62wUjE\n. So something along the lines of:\njava\nargumentExtractor.getTicketParameter()\nargumentExtractor.getServiceParameter()\n...and your error message would be:\n{0} and {1} are required parameters\n...now this is also not very appropriate because ticket/service is specific to CAS protocol [and there are other extractors besides SAML as well], so we should try to generalize this as much as we can. This may also be related:\nhttps://github.com/Jasig/cas/issues/708\n. Excellent, thanks for your perseverance. \n. Of course, we'd love to have you complete this. You're doing just fine :)\nWhat you have done would be a good first step. I am still concerned about not moving the extraction logic over to extractors, and have them just return the parameters they use because I can also see additional future benefits to be gained from that move. \nHere's an initial pull that attempted to do the same:\nhttps://github.com/Jasig/cas/pull/698\nNow, what you have would also work in the short term. I'd invite others on the team to review and chime in though. \n. Addressed via #866 for now.\n. Great, thanks for the review. Guava really makes collections tolerable! I think I added the dependency at the time I was working on the CAS.getTickets() change.\n. I had to explicitly define lengths for LOB fields here; otherwise SqlExceptions on data truncation would pop up. \n. Yes, hsqldb 2.3.2.\n. A few things: we are trying protect CAS privacy by not leaking the TGT value at all. The TGT represents the SSO session and essentially the user identity and so it must be protected at all times. Just like how we obfuscate the ticket ids on the server, we should do the same with the cookie value itself. I am not too sure what CAN happen if a cookie value is stolen, but rather than waiting for a possible exploit to happen which we may not be immediately aware of, this is a proactive measure to secure the TGT everywhere. We want to make sure we can protect against replay attacks. \nAlso, the cookie value is encrypted with a 32-bit random seed via AES 256 and then signed. It definitely can not be easily guessed. According to wikipedia, for biclique attacks on AES-256, the computational complexity of 2^254.4 respectively apply. Related-key attacks can break AES-256 with complexity of 2^99.5, respectively.\nAlso interesting:\nhttp://en.wikipedia.org/wiki/Advanced_Encryption_Standard#Security\n. Putting some more thought into this, I agree with @battags  that the encryption method here should change to include both the ip address and user agent. Furthermore, we should also sign the final value and verify it later on to protect against rainbow attacks, and possibly make the feature on by default but configurable to be turned off. \n. > In both cases, you cannot guess it but you can steal it.\nThis is not true. A ticket id that is generated can be rainbowed because it's plainly available. What is stopping me from basically putting together a giant list of ticket ids, creating the cookie and replaying it back? \n. Also, relying by SSL/TLS cannot always be a safe choice. See:\nhttp://en.wikipedia.org/wiki/Superfish#Lenovo_security_incident\n. It's probably worth noting the difference between the SecureRandom method and AES-256 encryption:\nThe SecureRandom method actually generates the ticket id. It's plain and visible. Its randomness provides safety from collision matches to some degree, and makes it difficult, not impossible to duplicate the ticket id. As I said, if I have the TGT format I can try to rainbow myself in.\nAllowing the client to see or be aware of any user sensitive data is a bad idea. It's really no one's business to see the cookie value, and there is no point in having it out in the open. \nThe AES-256 actually does encrypt that random value. So you cannot see what it is or how it works in terms of its format and syntax. It furthermore should sign the cookie value, so that if I created my own TGT or stole one and tried to replay it back, the signature verification would fail.  \nP.S: What can go wrong, will go wrong. \n. Sure, encrypting it will take the guess work out of the way, but we are also going to link the cookie to the remote addr and the agent, and furthermore, sign it as well. This will provide the extra validity. The server itself will need to verify the signature and then decrypt, and make sure all the bits match before fully authorizing the TGT. \n. Updated pull.\nThe cookie generator now is configured as such:\n``` xml\n             class=\"org.jasig.cas.web.support.CookieRetrievingCookieGenerator\"\n        c:casCookieValueManager-ref=\"cookieValueManager\"\n        p:cookieSecure=\"true\"\n        p:cookieMaxAge=\"-1\"\n        p:cookieName=\"TGC\"\n        p:cookiePath=\"/cas\" />\n<bean id=\"cookieCipherExecutor\" class=\"org.jasig.cas.util.DefaultCipherExecutor\" />\n\n<bean id=\"cookieValueManager\" class=\"org.jasig.cas.web.support.CasCookieValueManager\"\n      c:cipherExecutor-ref=\"cookieCipherExecutor\" />\n\n```\nThe CasCookieValueManager does all the linking and verification, and uses the cipher exec to sign and encode.\n. Couple of other notes:\n1. The changeset by default requires JCE, but algorithms can be tuned to remove that requirement. It's dead simple to set up though.\n2. We want to make sure this sort of behavior can be turned off, specially in environments where every http transactions ends up refreshing the request IP. To accommodate that, I have also provided NoOp impls for the cipher and cookie value creation. (Guess I can add those to the config as well as an example)\n. I merged with master once, and also pulled out the NoOp-type components out into their own classes just to be consistent. \n. :+1: \n. Please review the link I posted. It will describe why ANT patterns are not a good choice, and also they are redundant to regex patterns.\nI'll merge with master once.\n. Please review the link I posted. It will describe why ANT patterns are not a good choice, and also they are redundant to regex patterns.\nI'll merge with master once.\n. merged with master\n. merged with master\n. No one should not, and you're perfectly right that one could write insecure regex urls too. It's just that ant patterns seem to be more prone to misunderstandings, which is the real cause of the original JIRA. Without careful analysis and understanding, a * pattern may be incorrectly configured. Of course, same goes through with ..\nWe should also consider that regex patterns really rule all, and there is nothing one could do with ant that would be special and required that regex does not already do. So, having support for both really is pointless. \n. No one should not, and you're perfectly right that one could write insecure regex urls too. It's just that ant patterns seem to be more prone to misunderstandings, which is the real cause of the original JIRA. Without careful analysis and understanding, a * pattern may be incorrectly configured. Of course, same goes through with ..\nWe should also consider that regex patterns really rule all, and there is nothing one could do with ant that would be special and required that regex does not already do. So, having support for both really is pointless. \n. :+1: \n. :+1: \n. @leleuj if you could take a quick look at this one as well, I'd appreciate it. This one is important and right now is causing issues. \n. @leleuj if you could take a quick look at this one as well, I'd appreciate it. This one is important and right now is causing issues. \n. @leleuj shall I move fwd with this? \n. @leleuj shall I move fwd with this? \n. docs are updated btw http://jasig.github.io/cas/development/installation/Configuring-SSO-Session-Cookie.html\n. docs are updated btw http://jasig.github.io/cas/development/installation/Configuring-SSO-Session-Cookie.html\n. We are, yes. I'd already updated and pushed the changes. They automatically get deployed on github pages.\n. We are, yes. I'd already updated and pushed the changes. They automatically get deployed on github pages.\n. Updated pull\n. Updated pull\n. :+1: Thanks for taking this on.\n. :+1: Thanks for taking this on.\n. Of course not, this is has nothing to do with that. The management app issues are handled under #496 \n. Of course not, this is has nothing to do with that. The management app issues are handled under #496 \n. Also, if you are testing, you should really be testing the authz failure views.\n. Also, if you are testing, you should really be testing the authz failure views.\n. Thanks!\n. Thanks!\n. great suggestions! I'll rework the PR.\n. great suggestions! I'll rework the PR.\n. Added the cookie library for jquery. Much less code :)\n. Added the cookie library for jquery. Much less code :)\n. This one good to go? \n. This one good to go? \n. The option needs to be easily selectable by the end-user. This is the end-user opt-out feature, and somehow the option must be made available on the login page. \nSee an example:\nhttps://stlwebmail.principia.edu/owa/auth/logon.aspx?replaceCurrent=1&url=https%3a%2f%2fstlwebmail.principia.edu%2fowa%2f\n\"This is a public or shared computer\"...\n. The option needs to be easily selectable by the end-user. This is the end-user opt-out feature, and somehow the option must be made available on the login page. \nSee an example:\nhttps://stlwebmail.principia.edu/owa/auth/logon.aspx?replaceCurrent=1&url=https%3a%2f%2fstlwebmail.principia.edu%2fowa%2f\n\"This is a public or shared computer\"...\n. Good point about the usage of metadata populators though. That seems like it might be something we want to pass through to the app as an attribute? Wouldn't that be the same as forcedAuthentication flag in the validation response? \n. Good point about the usage of metadata populators though. That seems like it might be something we want to pass through to the app as an attribute? Wouldn't that be the same as forcedAuthentication flag in the validation response? \n. I guess I misunderstood your point about the default checkbox on the logni screen. were you saying it should be commented out? \n. I guess I misunderstood your point about the default checkbox on the logni screen. were you saying it should be commented out? \n. That sounds like a fine idea, to comment out checkboxes by default. I can certainly make that happen.\nI think conceptually, returning \"user selected renew\" via the checkbox is the same thing as forcedAuthentication flag that is already returned in the authentication object. I'll run some tests to confirm, but don't think it's immediately necessary, unless we want to differentiate between \"user selected renew\" and \"app required renew\"...which seems a bit extreme to me. \n. That sounds like a fine idea, to comment out checkboxes by default. I can certainly make that happen.\nI think conceptually, returning \"user selected renew\" via the checkbox is the same thing as forcedAuthentication flag that is already returned in the authentication object. I'll run some tests to confirm, but don't think it's immediately necessary, unless we want to differentiate between \"user selected renew\" and \"app required renew\"...which seems a bit extreme to me. \n. I commented out the checkboxes by default. Also examined the response, and the forcedAuthentication flag in the cas response is correctly set to true when renew is selected either via app or the user. \n. I commented out the checkboxes by default. Also examined the response, and the forcedAuthentication flag in the cas response is correctly set to true when renew is selected either via app or the user. \n. No, those are two different things. \nThe metadata populator is unneeded because the forcedAuthentication flag in the validation response would already include the fact that authentication was renewed. \nThe cookie is only used right now to remember and communicate the user option throughout the login flow, which I realize now is also unneeded because we can simply record the user selection in the flow scope in AuthenticationViaFormAction and use it later to decide whether a TGT cookie can be issued. I'll work on this latter bit and will update the pull shortly. \n. No, those are two different things. \nThe metadata populator is unneeded because the forcedAuthentication flag in the validation response would already include the fact that authentication was renewed. \nThe cookie is only used right now to remember and communicate the user option throughout the login flow, which I realize now is also unneeded because we can simply record the user selection in the flow scope in AuthenticationViaFormAction and use it later to decide whether a TGT cookie can be issued. I'll work on this latter bit and will update the pull shortly. \n. Updated the PR to remove the cookie and simply use the flow scope.\n. Updated the PR to remove the cookie and simply use the flow scope.\n. Addressed feedback by @leleuj \n. Addressed feedback by @leleuj \n. Just a build fluke. All systems are a go. The test depends on external network fixtures and sometimes, they break for some reason. I verified everything again by running all tests locally. \n. Just a build fluke. All systems are a go. The test depends on external network fixtures and sometimes, they break for some reason. I verified everything again by running all tests locally. \n. Will also manually merge with the 4.x branch once the pull is accepted.\n. Will also manually merge with the 4.x branch once the pull is accepted.\n. Good point. We should be using the toLanguageTag method per the docs. Thanks. I'll update the pull and merge. \nDocs:\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Locale.html#toLanguageTag()\n. Good point. We should be using the toLanguageTag method per the docs. Thanks. I'll update the pull and merge. \nDocs:\nhttps://docs.oracle.com/javase/7/docs/api/java/util/Locale.html#toLanguageTag()\n. Actually, I take that back. Using toString produces code_dialect which is consistent with our message bundles. Using toLanguageTag() uses code-dialect. So toString would work better with our setup as it is today unless we want to rename the bundles as well. \n. Actually, I take that back. Using toString produces code_dialect which is consistent with our message bundles. Using toLanguageTag() uses code-dialect. So toString would work better with our setup as it is today unless we want to rename the bundles as well. \n. :+1: with a comment on version placement. \n. :+1: with a comment on version placement. \n. Thanks. So for my understanding, does this mean now that CAS can act as an OpenId Connect client via pac4j 1.7? Are there any additional configurations required in order to enable this besides declaring the dependency? \n. Thanks. So for my understanding, does this mean now that CAS can act as an OpenId Connect client via pac4j 1.7? Are there any additional configurations required in order to enable this besides declaring the dependency? \n. Thanks for the update. So, as I understand, there still needs be a bit of code from the CAS adopter (as you have in the docs) to intercept authentication requests to CAS and send the flow over to the OIDC provider. When the flow is returned back to CAS on the callback, we'd need to resume normally by releasing the profile. Seems like such steps are now considered manual and require a developer to go through the exercise right? CAS itself at this point does not handle the redirection to the provider and back?\n. Would it make sense to introduce new components in the pac4j module that would do this sort of this? Include the needed code to fully complete the OIDC dance? If adopters still have to \"write code\" in order to fully achieve OIDC support then that's not really ideal though of course, I still would support this PR as it's a step in the right direction. \n. Sounds good.\n. @leleuj could I assume this pull is OK too? \n. Thanks!\n. I ran tests with the webapp and the management webapp. Tests should pass, Travis confirming in a sec :)\n. @serac please review.\n. Sure thing. Coming up...\n. Creating a test cert with encoded distribution points is proving more problematic than I thought. I may have to use mocks in this case. Would that work? \n. I added a test case with a sample cert whose CRL is encoded. \n. To elaborate, the original crl is http://localhost%3A8085%2Ftest%20ca.crl which is decoded to http://localhost:8085/test%20ca.crl\n. @serac Could I assume this pull passes review?\n. @leleuj you may want to review this\n. Adding @serac to the pull to review.\n. @leleuj you may want to review this\n. I have updated the pull request to reuse the same const for certificate revocation attribute. \n. I had a chance to work on this pull again, and was able to add the ldaptive configuration. The configuration allows one to inject the search filter, request and the connection config to the fetcher. Also note that try-with-resource syntax is still not available in this pull for ldap connections because we are on v1.0.6. \n. @serac please review this again when you get a chance. I was able to add ldaptive to the config.\nWould be great if we could resolve this PR by the weekend. \n. @dfish3r Thank you. I'll get to work. \n. I have modified this PR to take note of @dfish3r's suggestions. The fetcher now is plugged in with the connection factory and a search executor. The pool is initialized as such:\njava\nfinal AbstractConnectionPool pool = getConnectionPool();\nfinal ProviderConfig providerConfig = pool.getConnectionFactory().getProvider().getProviderConfig();\ntry {\n    providerConfig.checkImmutable();\n    providerConfig.setConnectionStrategy(\n        new ConnectionStrategy() {\n            @Override\n            public String[] getLdapUrls(final ConnectionFactoryMetadata metadata) {\n                return new String[]{String.format(metadata.getLdapUrl(), ldapURL)};\n            }\n        }\n    );\n    logger.debug(\"Connection strategy to [{}] configured. Initializing pool...\", ldapURL);\n    pool.initialize();\n    logger.debug(\"Initialized connection pool for [{}]\", ldapURL);\n} catch (final IllegalStateException e){\n    logger.trace(\"Connection pool failed to initialize, or is already initialized\", e);\n}\nand search\n``` java\nfinal Collection> results =\n            this.searchExecutor.search(\n                            new PooledConnectionFactory[] {this.connectionFactory},\n                            new SearchFilter[] {this.searchExecutor.getSearchFilter()},\n                            this.searchExecutor.getBinaryAttributes());\n        for (final Response<SearchResult> result : results) {\n            if (result.getResultCode() == ResultCode.SUCCESS) {\n                ...\n            } else {\n                logger.debug(\"Failed to execute the search [{}]\", result);\n            }\n        }\n\n```\n- Test cases attempt exhaust LDAP fetching with and without caching. \n- Pool and search are shut down upon @PreDestroy\n. @serac @dfish3r let me know what you think of the most recent changes.\nCoincidentally, this pull is holding up #497 so it'd be most helpful if we could figure out how to proceed. \n. @dfish3r thanks! I had a look at the patch and I think it's perfectly fine. Would you prefer if I updated this PR with the patch you have? \n. I went ahead and applied your patch to this pull. Verified all test cases. \nThanks again. \n. I have updated the x509 docs with details on how to configure ldap fetching. \n. The page seems to be rendering just fine. What's the reason for this change? \n. Sure, thanks. Although you are not really supposed to see the page on github. The correct address is http://jasig.github.com/cas/developement. \n. Apologies. here is the correct link http://jasig.github.io/cas/development/\n. You should clean up this pull so it only contains relevant changes. Also please provide a description for the change so we can evaluate the context. \n. Thank you. I'll test this out tomorrow.\nWhat's our plan to get this to 4.x? assuming change goes through? Do you want me to handle the merge there as well? \n. This works fine. I'd ask @leleuj  or @battags to also review. \n. Because when you are trying to create a PT, you still want to make sure the PGT is authorized to proxy, because the configuration may have changed for the service since the PGT was created. \nFor example, when service is allowed to proxy. we'll create a PGT and subsequent PTs off of that.\nThen, the configuration changes to disallow a service from proxying (Suppose the underlying registered service data as JSON changes). Then, after this change when PT requests come in, we still need to check PGT's ability to proxy.\n. Thanks for keeping with this. \nJust one small note, that this case is not uncommon at all. Consider this scenario:\n1. An admin allows application X to proxy and redeploys CAS\n2. Application X happily proxies for 1 year\n3. Admin decides that Application X should not be allowed to proxy anymore.\n4. Admin goes to the management webapp, or the JSON file and turns that check off, without restarting CAS.\n5. CAS loads the change.\nNow, if that change in the registry is not evaluated when granting PTs, X will continue to receive proxy tickets, until the CAS server is restarted, which is definitely a bug, or at least, a very frustrating surprise. \n. So it looks like we have a few suggestions here to account for. Once applied, I'll merge.\n. sure. PGTs share the same expiration policy as TGT. Default lasts for 8 hours, while it could be for a full week :) \n. To clarify, with this pull proxy tickets should immediately be blocked if the checkbox is turned off. Without this pull, they will continue to be issued, which is relevant the bug addressed here. While this pull fixes the proxy configuration, it also sort of explains why the check is necessary when granting PTs in grantServiceTicket\n. @serac I have created a milestone to track the 3.6 release line. You could resume working on separate pulls for 4.x and master. Thanks :)\n. Ah, sure. You're right. \n. Sure thing. I'll work a few tests before merging. \n. Updated pull with test cases\n. Merging by end of this week. \n. :+1: Fixing whitespaces would be great! I'll create an issue. Coincidentally, I realized most if not all poms have duplicate group ids, which should be cleaned as well. \n. :+1: \n. @serac you may also want to review this one. \n. Thanks for the comments. I believe I have addressed them all. Will proceed to merge. \n. :+1: \n. :+1: Excellent.\nMay I just ask that you add a tiny bit of unit test so we wouldn't break this sort of thing in the future? Tests could compare hashcodes of 2 objects, one with and one without a principal. You could also attempt to load the credential into a hashmap for those objects and see if NPE can be caused, etc. \nOtherwise, I think it's perfect. \n. :+1: \n. :+1: \n. :+1: \n. No worries. I sort of wanted to demonstrate the functionality. I was hoping that using annotations would certainly reduce code clutter, but that may not be worth it since as you pointed out, it's just too magical :) I am also curious to see what others think. \nThere is however another issue which I think we should address in a separate PR and that is the application of aspect functionality to all modules, as opposed to just core. \n. :+1: I would however hold off on merging this until 2.0.2 is released. \n. Sounds good. Thanks. \n. I updated the pull based on the discussion on this thread.\n. Moving ahead with this PR. @seanrbaker is there anything else you'd rather see here? \n. @seanrbaker thanks. Assuming and once this pull merges in, would you be able to help with the documentation? I can always assist where needed.\n. Indeed, this is huge, noisy and not all that interesting to review. We'll eventually benefit from this. I'll wait for @serac to also review before taking any action. This also allows me to work on #960 next.\n. Great! :+1: \n. Thanks!\n. You're right. It should be Bearer. \n. You should make sure all tests pass. The change here has broken OAuth20ProfileControllerTests.verifyOKWithAuthorizationHeader:187 NullPointer\n. That's fine. Concurrent builds can cause it to freak out. \n. :+1: @leleuj you may also want to review.\n. I was speaking to someone yesterday about a similar issue in IE where CAS has trouble rendering views with IE goes into compatibility mode. This might be something we could add to the documentation. \n. I understand the problem but I tend to agree with @serac here. While I am sure the fix here is appropriate, it does feel like too specific of a solution to account for a too specific of a problem, with a browser specially that is not exactly known for its support for standards and good behavior. Of course we have to be pragmatic and I am happy to make this a documentation item for folks to apply, but I am not so sure yet that we need to actually maintain it. \n@asgrant is the same problem we were talking about yesterday? \n. Tongue in cheek, the best solution is report this to Microsoft and have them fix the thing that requires their browser to switch to that mode :) \n. Thanks. I made an effort to update the docs.\n. Updated pull with feedback address from @leleuj \n. Are we good with this one? can I proceed? \n. @leleuj have u had a chance to review this one? I'll merge with master of course. \n. I'll need to document the new behavior, but before I do, shall we proceed? @leleuj\n. That's fantastic, thank you. I dont think we'll be able to merge this right away. It will likely be a couple of versions into the future before we are ready to make the switch. \n. You're both perfectly right. Thanks for the pull again!\n. I ended up changing the pull title, because this in fact is not switching the build. \n. Thanks for the pull. :+1: \n. Also #678 \n. Bump\n. @leleuj have u had a chance to review this one? \n. Yes, the JPA Ticket Registry is already annotated with Transactional for relevant methods.\n. Heads up. Merging by Wednesday morning, unless there are comments.\n. Will be making some improvements to this one. \n. Heads up. Merging by Wednesday morning, unless there are comments.\n. When you say \"on the client\", what do you mean? TGTs are never passed to clients. \n. Perfect! thank you. This definitely is a bug and we can certainly backport it to 4.0.x. I'll run a few tests to reproduce and confirm, and then merge!\n. Confirmed bug. Will backport to 4.0.x\n. Heads up. Merging by Wednesday morning, unless there are comments.\n. It's declaration hasn't changed, only its placement. I did only add a few properties \"just in case\" someone didn't want to enforce utf-8 for whatever reason. \n. Will port over to 4.0.3. Confirmed bug. Much appreciated :)\n. Looks like the fix is only applicable to master at 4.1, and so it shall :)\n. Heads up. Merging by Wednesday morning, unless there are comments.\n. Heads up. Merging by Wednesday morning, unless there are comments.\n. Heads up. Merging by Wednesday morning, unless there are comments.\n. Sort of makes it seems like it's UK/England :)\n. You want to make the change, not to the gh-pages branch but to the cas-documention module in master. \n. Here to be exact https://github.com/Jasig/cas/blob/master/cas-server-documentation/installation/Trusted-Authentication.md\n. Thanks!\n. Thank you. \n. BTW, I noticed that you issued thisw PR from your master branch on your fork. While this will work, it might be better in the future to issue PRs from a topic branch on your fork, specially if you plan to contribute more. That will make it much easier for you to switch between branch and stay in sync with our master here. \n. No worries. Look forward to more pulls from you :) Since you're new, I'd suggest that you also sign up the mailing lists and discuss items you'd like to work on, so that we have an idea of what to expect. \n. See http://jasig.github.io/cas/development/installation/Trusted-Authentication.html\n. The documentation module always pushes to /development. At this point, we manually merge those changes over to Github pages under 4.0.x, because those files are being serves as static html right now unfortunately. \nI added your change to the 4.0.x tree as well.\n. :+1: \n. Just FYI; Note that this PR only updates the development version of the docs, which I am sure you know about. \n. Awesome! thank you. :+1: \n. :+1: Awesome. Thanks!\n. Actually, that is not entirely true. I just realized this new style will not work, as it breaks the SAML module and potentially others that would want to follow along the same structure. I don't think we'd want the adopters to list every single context file, and there may be more than one. CAS should just work and we should try to minimize the configuration step as much as possible. \n. Convention is, things/extensions that follow this style have their configuration loaded automatically for things that need not any user modifications. These are configuration files that are not \"features\" of the extension but present baseline functionality that is required for the module to function. You don't want them turned off, or if you do, simply don't include the dependency in the overlay.  More importantly, these are configuration files that the user has no business getting involved with, and they are simply expected to be there. For example, if I include the rest/SAML dependency in my webapp, why do I have to go and \"enable\" it? If I didn't want to enable it, why do I have that dependency in my project? If this is something that CAS/Software can do for me automatically, why should I have to bother? \nThen, each extension may present \"features\". These are things that need to be enabled/disabled explicitly and require explicit configuration and adopter attention. These may go into the unused directory and may be documented. For example, if you drop the SAML or some other module into the project, the opensaml initialization and all other machinery that is required for SAML protocol views should automatically be enabled and available. Then, if you need \"Google Apps\" support you get to enable that feature and configure it the way you want. \nNow, lets say you wanted to override the baseline functionality provided by an extension. You want to modify the rest context to do xyz for whatever reason, or change something about opensaml. You always have the option to enable the loading of your own configuration files, right? You can overlay the web.xml file for example in your project, and tell it to not auto-load the context from the place that it knows, but rather pick that up from somewhere that you get to specify. \n. \u0650Double checked, yes. it's a false positive. \n. Looks great. Thanks Dima. Specially appreciate the doc update. :+1: \n. @Ammar0 any updates on this? \n. @leleuj in light of the next patch release, how about we merge this for now and fix up other issues locally? Don't think we can update this PR in time. \n. This should also be merged into 4.0.x\n. Thank you!\n. Perfect. \nPlease note that 4.0.4 is scheduled to go out by Aug 7, arbitrarily, which would keep us on a monthly release cycle. Lets power through the rest and get the release out :)\n. Sure, but I wanted to capture all cases once. We could have marked one logger field transient, but others down the road could have bitten us.\n. Added more tests; and removed the transient keyword from Duration. \n. Updated pull.\n. @leleuj do the rest of the changes here make sense? good to go? \n. It's very helpful in MFA cases where you \"forget your phone at home\" but have the device wrapped inside your key chain. \n. Also note that the code currently exists in the Unicon CAS MFA, and part of the objective here is to handle #572 for future CAS versions. \n. It would be ideal to finalize this before 4.1, though this is no priority really for that release.\n. Merging this one in, in absence of additional feedback. Will update docs before the merge. \n. Added docs. Updated pull. \n. Should be merged into 4.0.4\n. No you always have to do both. Encryption protects the content. Signing protects the authenticity of the content. You want to make sure you have the data right, and it actually came from a place you know about and have authorized. It's a 2 step process. Similar to SAML assertions. \n. @leleuj this looks ok to you? getting ready for 404 release. \n. @leleuj See this one too please\n. PS I will also merge this branch into heroku\n. I did a few parts of it on my own :) I had great help with a few UI experts and I am forever thankful to them. \n- Ant-pattern service definitions have disappeared on purpose, haven't they?\nThey have not. When you define a pattern, it is first checked to see if it's a valid regex. If not, the code switches back to Ant. I am guessing most patterns you defined where valid regex. \n- there is no text for the tooltip of the \"Evaluation Order\" field, just the key\nThat's a bug. I'll review.\n- when you check / uncheck the \"Require All Attributes\" box, I think that the \"Required Attributes\" zone should appear / disappear.\nI brought up this point during development. I was told this is not good UI design. Apparently, you still want the user to keep editing stuff even if that stuff isn't going to be applicable.\n- for the \"Authorized to release to credential password\" chekbox, where is the key to encrypt the password? In the \"Public Key Options\"?\nYes.\n- what is the \"Authorized to release proxy granting ticket ID\" checkbox? Compared to \"Proxy Policy Options\"?\nThe option allows you release the PGT directly in the validation response, provided service is allowed to do proxy authentication. \n- the explanation for the \"Attribute Filter Pattern\" input field should be improved.\n  Will review.\n- the explanation for the \"Required Handlers\" textarea is not clear: \"Collection of ids\"?\nTechnically, it's a collection of authentication handler bean ids. Will clarify. \n- it's not clear why I want to use the \"Public Key Options\"\nWill clarify. It's used to encrypt credential/PGT data.\n- even in \"Edit mode\", I have the success message: \"Service has been added successfully\" (I was expected: \"edited\") and it's a bit strange to stay on the \"Edit service\" page after a successful update\nAgreed. I'll see if I can make the change.\n- the default service \"http://localhost:8080/cas-management/login/cas\" does not make any sense\n  Not sure I follow. What sort of explanation would you want? \n- the \"Allow Single Sign-On\" checkbox should be selected by default\n  Will fix.\n- typing \"http://**\" in the \"Regex\" field for the \"Proxy Policy Options\" checked to \"Regex\", I have the unclear error: \"An error has occurred while attempting to save the service. Please try again later\" (logs are explanatory).\nWe can work on this.\n. - when you check / uncheck the \"Require All Attributes\" box, I think that the \"Required Attributes\" zone should appear / disappear.\nHad a look. This is not true. What the checkbox says, CAS should require all attributes/values to grant access to the service. If left unchecked, the first match will succeed. So, you could still have many attributes defined and they will be ORed together. So the pane should still remain visible. \n. All feedback has been accounted for. \n. So @leleuj I am assuming you are satisfied by the pull? \n. :+1: few comments here and there. Most importantly, I think we should use CAS to access to the ticket registry, rather than the registry itself. Direct access to the registry must be discouraged. \n. Documenting here that this may be able to merge into 4.0.x\n. Documenting here that this may be able to merge into 4.0.x\n. I am not sure I follow. I see the existing code basically gets a ticket in the OpenId Handler. \nfinal TicketGrantingTicket t = this.ticketRegistry.getTicket(c.getTicketGrantingTicketId(),\n                        TicketGrantingTicket.class);\nWe cant replace this with a CAS instance? \n. I am not sure I follow. I see the existing code basically gets a ticket in the OpenId Handler. \nfinal TicketGrantingTicket t = this.ticketRegistry.getTicket(c.getTicketGrantingTicketId(),\n                        TicketGrantingTicket.class);\nWe cant replace this with a CAS instance? \n. Ah, I see what you mean. OK. Can we do lazy-inits? \n. Ah, I see what you mean. OK. Can we do lazy-inits? \n. Agreed. OK. Let's stick to the original proposal then. At some point, we need to clean this up somehow via #492 \n. Agreed. OK. Let's stick to the original proposal then. At some point, we need to clean this up somehow via #492 \n. Great, thank you. Still :+1: and I like how constants are all cleaned up. Makes it easier to manage. \n. Great, thank you. Still :+1: and I like how constants are all cleaned up. Makes it easier to manage. \n. Judging by the changeset here, I agree. This would be a better fit for 4.1\n. Judging by the changeset here, I agree. This would be a better fit for 4.1\n. I am pretty much done here, and am working on tests. OAuth module works great with consent, but I had to make a few fixes to make sure views render correctly. Overall, it's very functional and looks really good. \n. I am pretty much done here, and am working on tests. OAuth module works great with consent, but I had to make a few fixes to make sure views render correctly. Overall, it's very functional and looks really good. \n. This is finalized. \n. This is finalized. \n. A few descriptions on the changes here:\n1. OAuth module does not properly render error views when a parameter is missing for example. This is because CAS has 2 view resolvers: one that is URL based and one that is Internal-Resource based. When both of these resolvers are present, one can never be reached without explicit changes to the view name that is returned. These are both expected to be last in the resolver chain, because they catch everything, and cant actually check whether the requested view exists. So the solution is to consolidate down to one resolver, and make sure the view hierarchy is correctly structured. \n2. While working on consent and OAuth, I also noticed that OAuth changes directly access the ticket registry to retrieve TGTs and STs. I moved a few pieces around to ensure that all ticket-related activity is handled via CAS instead. Similar to the suggestion that was made here #1093 \n. A few descriptions on the changes here:\n1. OAuth module does not properly render error views when a parameter is missing for example. This is because CAS has 2 view resolvers: one that is URL based and one that is Internal-Resource based. When both of these resolvers are present, one can never be reached without explicit changes to the view name that is returned. These are both expected to be last in the resolver chain, because they catch everything, and cant actually check whether the requested view exists. So the solution is to consolidate down to one resolver, and make sure the view hierarchy is correctly structured. \n2. While working on consent and OAuth, I also noticed that OAuth changes directly access the ticket registry to retrieve TGTs and STs. I moved a few pieces around to ensure that all ticket-related activity is handled via CAS instead. Similar to the suggestion that was made here #1093 \n. Also, all docs are updated. \n. Also, all docs are updated. \n. Will work on per-attr consent next. \n. This is still WIP. Need to account for renew=true and fix the css\n. Punted to 4.3 for now. \n. Deferring to #514  for now.\n. I stumbled upon this issue while testing the management webapp on heroku. \n. I stumbled upon this issue while testing the management webapp on heroku. \n. Heroku demos now fully functional\n. Heroku demos now fully functional\n. Sweet. Thanks. \n. Please fix the build failure, and other indentation issues. \n. Should this behavior be optional? \n. OK, thank you. Do we consider this change to be a bug fix then? \n. OK. I'll let @leleuj also review it but it looks fine to me. :+1: \nThis should be merged into 4.0.5 too. \n. @leleuj You may want to review this. Hoping to merge by Friday afternoon. \n. Why is it invalid? \n. Great thanks!\nNote that the development documentation needs to happen in master, but I'll take care of it. \n. Please review the milestone. Note that this is marked for 4.2. It's not going into 4.1 at all. That line of development is done.\n. Dependency updates sometimes force code changes which is only natural. When you update a library or a check tool, it is going to change the state of things slightly, but not so much that it would be considered real breaking change, which is why I lumped these together, rather than posting 34 different one-liner PRs. \n. The benefits are:\n1. It's consistent with other modules and the same approach\n2. Oauth/Openid changes should be inside their own modules. No need to clutter things up. \n3. Smaller webapp module by default\n4. Configuration remains the same, because adopters already need to touch the cas-servlet file. \nSo no extra steps really.\n. Planning to merge this one in. Will update docs before the merge. Please review.\n. @leleuj \nI have reworked this pull to enable automatic configuration for a number of modules, just like it was previously done. The configuration is now SO MUCH simpler, and in many cases all that is required by the adopter is to simply include the module in the maven overlay. That's it. \nAs we discussed previously, each module is called during the application bootstrapping process. The application context is split into two categories:\n1. Root\n2. Servlet\nSome beans are available to the root, and some are available to the servlet contexts. Anything that goes into META-INF/spring for the module is available to the root, and any bean that is loaded by cas-server-xyz.xml is available to the servlet, where xyz could the name of the module. This automatic behavior allows us to hide much of the configuration, and do auto registration and bootstrapping as much as possible, while leaving the needed configuration over to the adopter. (i.e adding oauth clients). \nIn order to simplify this, I have provided a framework around this feature so that modules can easily inject themselves into the context. There is an AbstractServletContextInitializer that provides common ops around auto configuration of context. Then, each module declares itself as an extension of this class, and gets called during the init process. The following modules are functional and tested with this pull:\n1. OpenID via OpenIdSevletContextInitializer\n2. OAuth  via OAuthSevletContextInitializer\n3. SAML  via SamlSevletContextInitializer\n4. Ws-FED  via WsFedSevletContextInitializer\nI have updated the docs, and again, if you notice, the number of steps for each module is tremendously reduced down to the essential steps. I have also tried to expose a number of additional properties so that adopters don't have to add xml config to their overlays. \nAs discussed before, I intend to review other modules whose configuration is \"messy\" and adopt the same approach for them. Please review this at your convenience and I'll resume working on other stuff. \n. Note that this sort of automatic configuration should greatly help us with adding MFA support, where one could plug in an MFA module into the overlay, and all the authN machinery would simply activate! Plus it reduces the learning curve for the adopter to enable support for particular module. \n. I do also need to refactor #1118 next\n. Also relevant is #32 and #1075 and #585 as well as adding SAML SP support\n. > You're right, but adopters who already have OAuth configured needs an extra step when they upgrade: OAuth support will break.\nYes, but we are targeting this for 4.2 and per the release strategy, this sort of change is warranted. We are allowed to change impl and config. As I said, I think this overall would be much simpler for the adopter because they could remove so many extra steps and config changes from the process which I think is very beneficial overall, and would very much improve CAS adoption. \n. Heads up. Proceeding to merge. \n. Thanks. The component that should be reviewed the most would be AbstractServletContextInitializer\n. The test failure I think is fixed in master. I'll merge with master once before the final merge. \n. I am assuming you were able to dup the problem on Windows then? \n. Can we rework that block to be like:\njava\nlogger.debug(\"Credential is valid for user [{}]\", principal.getName());\nspnegoCredential.setPrincipal(getPrincipal(principal.getName(), spnegoCredential.isNtlm()));\nsuccess = true;\n. OK thanks. That's much better\n. Planning to merge in the coming days, and will also update docs. Please review. \n. I am OK with the change, but note that CAS does not yet support Java 8. So we can leave this pull open until it officially declares support.\nAlso is the change you referring to specific to OpenJDK? \n. Related to https://github.com/Jasig/cas/issues/957\n. Great. Thank you. A property sounds much better. \n. In this pull, we are only providing an implementation option that is specific to the server without touching the endpoints and/or the protocol. This is just a feature of the CAS server; the idea is that parsing JSON is more convenient for a number of client-types where JSON support is directly built into the programming language, and parsing a JSON blob into Maps and Objects is much easier than the native XML. We have to be extra careful with XML processing not to break clients, but JSON does not have that limitation as much. So the goal is to advertise JSON as a feature, and if and when it gains enough adoption, perhaps the protocol moves away from XML and into JSON which is becoming more and more mainstream. \n. So, there are a number of options. Let's explain:\n1. The current approach keeps the same endpoint, but only produces JSON output for service validation because that service explicitly requires it in the service registry. This makes it a feature of the server. The same endpoint will continue to function as it did before and so it's only useful for clients and services that require a JSON output. \n2. We could introduce a new endpoint, such as jsonValidate or something right now, but that requires protocol changes, community agreements and it then requires every CAS server out there (not just us) to implement and support that. So impact is much bigger (and they may not all in fact need the new endpoint because we don't have broad adoption of this feature).\nSo I think we should eventually introduce a new endpoint that produces JSON output for validation, but we should only do so once we have had enough number of deployments and experiences with the current \"feature\", before we proposal protocol modifications. This is similar to the approach we did with /p3 endpoints. For a while, attribute release was more of a feature/hack. It lived in CAS for a while and then once it caught on, it was built into the protocol. Protocol changes right off the start seem extreme to me.\n. I guess what I am saying is, I would only be in violation of the protocol if we changed the default behavior of the same endpoint :) This is where I sort of draw the distinction between feature vs. spec. A CAS server out there that wants to implement the spec has to have a serviceValidate endpoint, but they don't have to produce JSON because that is not part of a protocol and so it only becomes an extension specific to the impl. Does that makes sense? \n. Sounds good. I like that approach better. So in your description, there are 2 PRs buried: first to update the protocol version with the new parameter, and 2nd is to add support for that in the server. I'll rework those into separate pull requests. \n. First build passes. The other is likely a fluke. \n. :+1: with a comment on organization of comments. \nAlso, please update the documentation. \n. Perfect! Thank you. \n. One last thing, I do still see doc updates missing from this PR. You'll find the docs under the documentation module in master. Please update those as well to make this new setting known. \n. Thanks again. I marked this for 4.2, given that we are now in RC mode and this isnt really a bug as we don't support JDK8 yet officially. Once 4.1 is out, this could go into master, and 4.1.x. \n. replaces https://github.com/Jasig/cas/pull/1120\n. What is the Java version you run? \n. OK, so that's where you ClassNotFound issue comes in. We don't officially support Java 8, and we also don't support OpenJDK. In your dependency list, you probably have xerces pulled in somehow which causes the cast issue. \n. Is it possible to exclude xerces from that openid module? Would that cause issues? If not, we could directly exclude it in source. \n. Great. If you are successful, please issue a separate PR. Thanks again. \n. Much appreciated. That PR, we can include in 4.1. \n. Heads up. Moving forward with the merge. \n. > It should somehow be generalized to all our modules.\nExactly. That's the goal. We should bootstrap everything as much as possible, and remove the extra code for the adopter. My plan to take pass at all other modules, and simplify documentation based on the same approach. \nWill merge with master once. \n. Merging...\n. Thank you!\n. I Fixed conflicts. Cant see any other changes that would ripple through the build. \n. Thanks!\n. Thanks Vincent. :+1: \n. I can restore them, but I was thinking that our canonical source for guidance and docs should be the documentation. Otherwise, it just increases maintenance burden. For example, if you want to know what an authentication policy is, you really should be consulting the CAS docs. Comments in the config, I think, should only be reserved for technical implementation issues. What do you think? \n. :+1: \n. I'll merge with master once and will fix the compile issue. I am assuming everything else checked out? \n. Merged with master. Fixed other issues. \n. I added the handler to the generic module because I thought Shiro would generalize the authentication to a variety of other sources, and since it might be a special use case, it may be best to not include it in the core or a separate module.\n. Thanks. Pull still in progress. I am working on JPA ticket registry, to also refactor tests. That one is particularly tricky, because one could use the JDBC module without using the registry. So I'll review and update the full when it's done. \n. I am going to defer the work on JPA ticket registry for now. We do have to move it to another module to make auto-config work because right that that feature is bundled with a bunch of authN handlers and choose one without the other is difficult. Another module also has the advantage that it allows us to clean up the ticket core API to remove JPA annotations. \n. Note that these were deprecated in 4.0. 4.2 seems like a good candidate to finally remove them. \n. This also is a step towards #1143 \n. I have also calibrated the openid tests a bit more realistically, so that they are wired up using the application context automatic machinery, which should prevent us against accidental mistakes. \n. @leleuj the components you really should review are:\nAbstractWebApplicationServiceResponseBuilder\nGoogleAccountsServiceResponseBuilder\nSamlServiceServiceResponseBuilder\nOpenIdServiceResponseBuilder\nWebApplicationServiceResponseBuilder\nNothing has changed; Just the service logic that previously existed within the service itself is moved out. \n. Any updates on this? \n. Closed via #1262 \n. Please fix the build failures. \n. Thanks. @serac would you be able to review?\n. are we good with this pull? can this be merged? \n. Will merge with 4.1.x as well. \n. Merged into 4.1\n. Just commenting that the change needs to go into 4.1.x and possibly 4.0.x too. \n. > As it's a breaking change in the API, we won't be able to backport that for 4.0.x and 4.1.x so I propose to close: #1184 and #1185\n:+1: \n. This looks good. We simply have the UI to update, and then docs, right? Thanks for taking this on. \n. Thanks. I was planning to merge directly by cherry picking, but it's much easier this way :) \n. This is looking very good. Thank you. We do seem to have a build failure here, but I am inclined to blame it on Travis. Restarted the build, so we'll see what happens :)\n@mduszyk Have you by the way, tested this changeset under load in a HA environment? Would be great to have some real test results. \n. Very good. I think we'd want to leave the change open here until we have some solid results from you or others. Since it's a substantial change to the ticket data model, would be great to confirm the behavior under load. \n. @leleuj you OK with the changeset? \n. The changes are more or less identical to what was in the PR for 4.1. The extra changes are to make sure test cases run, because in master, we happen to be automating the configuration of many modules, and test fixtures needed to be tested and updated to remove the extra reference to serviceTicketRegistry. \n. Checked out Travis. Build failure is not related. Merging and then backporting into 4.0.x and master. \n. Tested with 4.0.x. Works fine. Will try the same batch of tests against master. \n. Removed cvsignore files and restested both modules. Works just as intended, and it's very simpler and easier to manage now. \n. I'll proceed with LDAP next. \n. It is. Additional changes are: added extra logging messages, and fixed sample properties. \n. Blocker for #1192 \n. Nope. Appears to be much faster that Tomcat. Now, I run run-forked. If you simply run run, that takes considerably longer. \nOn my MBP, it takes about 10 seconds to fully start up. \n. To clarify, it does annotation scanning, but it goes much faster. Maybe it's jetty, maybe it's MBP. Not sure yet. \nWe do have this config built in for the plugin as well\n<systemProperty>\n      <name>org.eclipse.jetty.annotations.maxWait</name>\n      <value>240</value>\n</systemProperty>\n. what change did you make to the web.xml? \n. <absolute-ordering/> maybe? \n. Ah, cool! Would it cause problems if we added that tag to the main web.xml? Or did you add it to an override web.xml? I have always done the latter.\n. OK. I'll apply the same change here then. \n. added the web.xml file. We are good here. \n. This is excellent!\nMy last comment is, what about SAML SP clients? Can we automate those too? Or should be a separate pull? \n. Sounds good to me. \n. The rationale behind splitting up the monitoring module is the following:\nMonitoring is probably the least used feature in CAS, whether it's Ehcache, Memcached or other forms of monitors. I have never seen it deployed (and likely you dont use it either). So, I wanted to pull it out of memcached module so that the monitor object does not have to be created during component scans. At the same time, I wanted to enable it via component scans on the off chance that someone actually wants to enable monitoring with Memcached, or Ehcache, etc. Thus, 2 separate modules. \n. I dont have any objections to moving the monitoring module back, but I dont see the downside to having many smaller modules. Are you concerned about the release process?\n. Well, I do think we have to fix the release process. That would be treating the actual cause, and not the symptom. (For instance, I found out a number of reporting plugins during release make the entire process very very sluggish). Another fix might perhaps be to switch over to gradle, but I do think we ought to be able to handle many many small modules. Spring does the same, and they have far too many :) Smaller modules are good for the deployer, which is the real objective I think, and at this point, they are OK for devs but we can do better. \nI do have a branch out there that does build CAS via Gradle. Via the gradle daemon, the builds go through extremely fast. Are you interested to review it? (It is rather old though) \nI did think about having fewer smaller projects separate from the actual distribution. The problem with that approach is: maintenance is extremely hard. We'd have to bounce around between projects, do separate releases for each, make sure APIs don't break across these modules....just way too many problems, and we simply don't have the manpower. \n. That said, I think we should break this down by features, and not by implementation. For example, the SAML module has a number of features, SAML validation, SAML webflow UI, Google Apps, etc. These make sense to me to be broken down. But, doing it via impls is where I would see is too much (i.e. one module for RegisteredServiceImpl, one for RegexRegisteredService, etc)  So I consider monitoring to be a separate feature, and I see no point in deploying it specially if it's something that is hardly ever used by the deployer. \nWe must also consider that producing one big fat jar could potentially impact startup time as well when CAS is deployed. \n. I think we ought to do both, really. The issue with the plugins is something we can easily fix. Conversion to gradle is a much bigger task and we'll likely have many other small releases in the meanwhile before Gradle is fully ready to take over and replace Maven. So we have to fix the build anyways.\nI consider this to be advantage of doing many small incremental releases. Problems such as build speed get recognized early and get fixed early. \"If you are bad at something, do it often\" kind of thing :)\n. Gradle build https://github.com/Unicon/cas/tree/CAS-1322-GRADLE\nNote the last commit date. This needs to be brought up to speed. At the time, I had difficulty finding gradle plugins for some of the tasks we do with CAS, such as NOTICE, LICENSE, CS and FindBugs checking, and there is no way a maven plugin can be used with Gradle. Some of those issues may no longer be relevant now. \nIf you could port that branch over from Unicon over to Jasig as a separate topic branch, it might be easier for both and all of us to start working on that aspect and see how Gradle can help. \n. :+1: \n. :+1: need to make sure dependencies are OK, but everything else is great.\nPlease merge with master. \n. Sounds great. I'll do a quick review and test on Friday. Thanks for completing this.\n. What is the function of RequireAnyRoleAuthorizer? I thought we should restrict access to specific roles? \nAlso, how is one supposed to retrieved roles such that authorizers pick them up? Note that roles are almost always attributes retrieved via ldap/AD\n. Where do roles come from? Or where could they come from? \n. @leleuj shall we finalize this with 1.8.1 now that it's released? \n. I meant running the entire build cycle including site generation, reports and javadocs is now much faster. the info-reports plugin that was pulled down from Apereo parent caused so much delay in the release process. \n. There should be. When I review the diff, I see:\n...org/jasig/cas/monitor/EhCacheMonitor.java \u2192 ...org/jasig/cas/monitor/EhCacheMonitor.java\n ...e \u2192 cas-server-integration-ehcache-monitor}/src/main/java/org/jasig/cas/monitor/EhCacheStatistics.java\nand so on.\n. Thanks. In the future, please do not create JIRA issues. JIRA is and has been retired for a long time. Use GitHub issues instead. \n. Shall be merged into 4.1.x\n. @leleuj shall we move fwd with this one? \n. Final list of modules:\nbash\n[INFO] Reactor Summary:\n[INFO] \n[INFO] Apereo Central Authentication Service .............. SUCCESS [  3.117 s]\n[INFO] Apereo CAS Core APIs ............................... SUCCESS [  1.150 s]\n[INFO] Apereo CAS Core Logging ............................ SUCCESS [  0.409 s]\n[INFO] Apereo CAS Core Utilities .......................... SUCCESS [  0.557 s]\n[INFO] Apereo CAS Core Web ................................ SUCCESS [  0.318 s]\n[INFO] Apereo CAS Core Authentication ..................... SUCCESS [  0.704 s]\n[INFO] Apereo CAS Core Services ........................... SUCCESS [  0.677 s]\n[INFO] Apereo CAS Core Tickets ............................ SUCCESS [  0.470 s]\n[INFO] Apereo CAS Core Logout ............................. SUCCESS [  0.230 s]\n[INFO] Apereo CAS Core Monitor Support .................... SUCCESS [  0.252 s]\n[INFO] Apereo CAS Core Validation ......................... SUCCESS [  0.252 s]\n[INFO] Apereo CAS Core .................................... SUCCESS [  0.307 s]\n[INFO] Apereo CAS Core Audit .............................. SUCCESS [  0.219 s]\n[INFO] Apereo CAS Generic Support ......................... SUCCESS [  0.317 s]\n[INFO] Apereo CAS JDBC Support ............................ SUCCESS [  0.358 s]\n[INFO] Apereo CAS JDBC Monitor Support .................... SUCCESS [  1.012 s]\n[INFO] Apereo CAS JPA Ticket Registry Support ............. SUCCESS [  0.317 s]\n[INFO] Apereo CAS JPA Service Registry Support ............ SUCCESS [  0.212 s]\n[INFO] Apereo CAS LDAP Support ............................ SUCCESS [  0.331 s]\n[INFO] Apereo CAS LDAP Service Registry Support ........... SUCCESS [  0.282 s]\n[INFO] Apereo CAS LDAP Monitor Support .................... SUCCESS [  0.171 s]\n[INFO] Apereo CAS Web Application Protocol Validation ..... SUCCESS [  0.305 s]\n[INFO] Apereo CAS OpenId Server Support ................... SUCCESS [  0.337 s]\n[INFO] Apereo CAS SAML Server and Validation Support ...... SUCCESS [  0.586 s]\n[INFO] Apereo CAS WS-Federation Support ................... SUCCESS [  0.350 s]\n[INFO] Apereo CAS RADIUS Support .......................... SUCCESS [  0.256 s]\n[INFO] Apereo CAS SPNEGO/NTLM Support ..................... SUCCESS [  1.638 s]\n[INFO] Apereo CAS Trusted User Support .................... SUCCESS [  0.226 s]\n[INFO] Apereo CAS X.509 Client Certificate Support ........ SUCCESS [  0.556 s]\n[INFO] Apereo CAS OAuth Server Support .................... SUCCESS [  0.286 s]\n[INFO] Apereo CAS Authentication handler wrapping pac4j ... SUCCESS [  0.106 s]\n[INFO] Apereo CAS Client Protocols Support using pac4j .... SUCCESS [  0.320 s]\n[INFO] Apereo CAS SAML Server Google Apps SAML Support .... SUCCESS [  0.379 s]\n[INFO] Apereo CAS SAML Server MDUI Support ................ SUCCESS [  0.289 s]\n[INFO] Apereo CAS Memcached Integration ................... SUCCESS [  0.398 s]\n[INFO] Apereo CAS Memcached Monitor Integration ........... SUCCESS [  0.251 s]\n[INFO] Apereo CAS Ehcache Integration ..................... SUCCESS [  0.204 s]\n[INFO] Apereo CAS Ehcache Integration Monitor ............. SUCCESS [  0.187 s]\n[INFO] Apereo CAS Authentication handler wrapping pac4j ... SUCCESS [  0.179 s]\n[INFO] Apereo CAS ClearPass Extension - DEPRECATED ........ SUCCESS [  0.228 s]\n[INFO] Apereo CAS REST Implementation ..................... SUCCESS [  0.210 s]\n[INFO] Apereo CAS YubiKey Support ......................... SUCCESS [  0.150 s]\n[INFO] Apereo CAS DuoSecurity Support ..................... SUCCESS [  0.157 s]\n[INFO] Apereo CAS Hazelcast Integration ................... SUCCESS [  0.196 s]\n[INFO] Apereo CAS Mongo Integration ....................... SUCCESS [  0.281 s]\n[INFO] Apereo CAS Web Application Cookie Management ....... SUCCESS [  0.106 s]\n[INFO] Apereo CAS Web Application Reports ................. SUCCESS [  0.132 s]\n[INFO] Apereo CAS Web Application Themes Support .......... SUCCESS [  0.154 s]\n[INFO] Apereo CAS Web Application Authentication Throttling SUCCESS [  0.200 s]\n[INFO] Apereo CAS Web Application Spring Webflow Actions .. SUCCESS [  0.284 s]\n[INFO] Apereo CAS Web Application Support ................. SUCCESS [  0.050 s]\n[INFO] Apereo CAS Web Application ......................... SUCCESS [  1.968 s]\n[INFO] Apereo CAS Management Web Application .............. SUCCESS [  1.306 s]\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 24.496 s\n[INFO] Finished at: 2015-10-31T11:48:42-07:00\n[INFO] Final Memory: 150M/1507M\n[INFO] ------------------------------------------------------------------------\n. Merging to move onto component scanning issue. \n. Thanks for the pull. In the future, always target the master branch please. \n. No worries. Appreciate the contribution. This should become available in the next patch release.\n. :+1: \n. Yes. One candidate is #1254 \n. If we just add the jar without any changes to the log4j config, that would require a system property to be set by either CAS or the deployer to enable async logging. This way, we modify the log4j config file and don't set that property to make things easier for all. \nImportant to note: async logging must be careful to not change the state of the object that is logging. If we attempt to log X, and the 2 lines below, X changes state and then the async logger executes, we would lose the original value of X because of the change in state. I do think we are safe here, but wanted to raise that point. \n. What is your DAO? \n. So judging by your branch name, you are using LDAP. This works for you only. Wont work with the underlying DAO is not able to merge/update. So this pull wont work. \n. We could however allow the class to be better extended so you can override just the piece you need. \n. > Without a patch the management application can't edit services with an ldap backend.\nYou mean a true edit right? Because right now as you said a delete/save operation is the edit function. Probably the biggest issue is the default JSON registry DAO. If there are no issues with that one and you can confirm, I see no issues with this patch. I doubt it can actually update but have not checked this myself. \n\nWould coupling this patch with more code to have the other DAOs handle their own deletes work for you?\n\nSure. \n. Thanks for the update. 2 certainly does sound better. We just need to make sure all DAOs can perform those required steps. \n. Sounds good. I am generally suspicious of the JSON one. others might be able to handle this well. Be sure to test against mongo as well. Thanks. \n. In fact, if you could accompany this PR with additional test cases that prove this behavior works for every individual DAO, that would be superb. Tests should be written for and go into every individual module. \n. Cool. Please fix the build failure and I'll do some local testing myself and if things check out, we'll get this merged. \nIn the future, always publish PRs for master. We'll backport. \n. Great. Could I ask you to do one final thing before we get ready to merge? You are formatting the code with 2 spaces. Please use 4.\n. Thanks. Tested, and things work fine. \n. Needs some additional work around site generation and releases. Will handle them later with Travis, etc. \n. Full build on travis takes about 4 minutes, which is 25 minutes faster!\n. Yes. Maintaining a copy of license per file is not required. See http://www.apache.org/dev/apply-license.html#copy-per-file\n. So are we good here?\n. Build is now fully functional. \n. Will cherry-pick into 4.0.x\n. :+1: \nThank you! I assume you are on 4.1 now and this should be backported for patch releases? \n. Cool. We can backport. \n. Requires a new inspektr release, 1.3 to protect against NPEs when services are saved automatically and there is no spring security context available yet on startup. \n. 1.3 Inspektr is now available in central. Merging. \n. Restarted the build. I think parallel building is causing issues with a few unit tests. Turned that off for now. \n\nSo a lof of new components are instantiated by default: is there a possible concern in terms of performance? \n\nNot really, because these components only get instantiated if you include the module into your overlay, and you would only do that if you want to use the functionality. Thus, our work to break down into many modules to make that separation possible. \n\nHow can I use this component? I still need to override existing Spring contexts to use these already instantiated components?\n\nI will update the docs shortly, but the objective here is that the ONLY thing you should have to modify as the deployer is the deployerConfigContext.xml file (which is rightly named so) You control the context via aliases and properties. That's it. We just have to document what the name of those components and aliases are. \n\nWhat about having aliases where the real bean is defined by a property? In that case, I could switch the authentication handler just by changing the value of a properties for example?\n\nThat is attractive, except that I don't think bean names and aliases can be defined via properties. Also, in certain cases you do have to manually resort to creating the bean (because we don't control the component) so context modification directly is required. Moving that step into properties seems a bit overkill to me. Plus, I have in mind that we should eventually move to a groovy application context which allows us to not only clean up a lot of boilerplate code, but also the ability to script the context dynamically and create refreshable beans. \n. Build is fixed. \n. OK. So, do we want to also switch aliases to be picked up by properties? We might be able to do this for aliases that are defined in the existing configuration already, but for those that are not, the adopter would have to make changes to the context anyway. These are also values that are not expected to be changed over time, and for beans that we don't control the context needs to be modified anyway. So I am not sure this is the right approach here. \nAlso note that the eventual goal would be to use something like spring-cloud-config to auto reload the context based on property changes which would eliminate server restarts completely. I don't know if that framework is able to replace a bean definition entirely if an alias changes via a property! Thus my hesitation to move in that direction. \n. Sure. I will update the pull accordingly. \nPS: I am at the same time interested to move towards a more groovy configuration of the context. I think that will be a tremendous improvement for dynamic config. \n. In the process of updating docs. Should have it done by Monday. \n. Updated docs\n. Build failure is due to \"Sun/Oracle JDK 6 is EOL since November 2012, and is no longer supported. Please consider upgrading...\"\n. You are right. I ran gradle wrapper and it generated everything for me. Will remove them. As for the docs, I think a page under here http://jasig.github.io/cas/developer/ makes better sense. \n. Updated. \n. Will update the docs once the PR merges in. \n. Notes will be available here http://jasig.github.io/cas/developer/Build-Process.html\n. Beautiful. Thank you. \nFew questions:\n1. Why Apache ignite? \n2. What is left to do in this PR? \n. Also, please update the cas documentation accordingly. You can certainly do that towards the end of this PR when we are comfortable with the changeset and it's ready to go in. \n. Very cool. Keep us posted with your results. \nI would also say that CAS itself is able now to encrypt the ticket state across nodes when it attempts to replicate, regardless of the registry used. Not sure if that functionality is released yet, but it's definitely possible for the exact reason you mentioned. You may want to give that feature a try as well. \n. Ah ic. Ok. \n. Reviewed. Looks good. Had a number of comments on the formatting and organization of cache configuration but other than that, it's straight fwd. thanks again for the contribution!\n. @tduehr Have you have a chance to review the comments here? \n. So how are we doing on this pull? I see you have added docs but I don't think the merge with master is correct. Also docs need a bit more review. You have a few refs to ehcache here and there. \n. Added some additional comments for you to review @tduehr Looking very good. Thanks again. \n. Cool. I'll review tomorrow evening. \n. One last suggestion, and we are good to go. \n. I think that would be fine :D eventually at some point, we'll merge paths with the community I guess. \n. Woohoo! thanks @jimhelwig Keep 'em coming :) \n. Should be merged to 4.1 branch. :+1: \n. Thanks @frett Just a quick shortcut that if you in the PR description use the phrase \"Closes IssueNumber\", it will automatically be linked with the issue and closed when the PR is merged. \n. See  http://jasig.github.io/cas/developer/Contributor-Guidelines.html\n. Excellent. Thanks.  Also make sure you fix the compilation issue. Somehow Travis does not like ur changes. \n. What is the issue? Could you provide the logs please? \n. Chances are you are building the source with Java 8, which does not like our docs just yet. Use JDK7 instead for now. \n. For the most part, the codebase is compliant with JDK8 docs. There are a few other issues here and there which we'll fix when we switch the build to 8. Hopefully by the next/next minor release, etc. \nThanks again. \n. I'll add support for the management app as well. \n. Updated the javadocs. \n. Try reviewing the changes with https://github.com/Jasig/cas/pull/1306/files?w=1\nThere are about 2-3 more features that could be automated as such, and I will gradually add those later in other PRs. The abstract class that controls the webflow right now is more of a template with a lot of methods that could be used in the future to augment the flow, specially for MFA. \n. This PR is related to https://github.com/Jasig/cas/issues/1255\n. Fixed the build\n. Look perfect, but I am not sure if compiles? \n. ah nevermind, failure is unrelated. \n. Should be merged back into 4.1\n. Yes. This is helpful because I want to start creating ticket factories that would encapsulate the expiration policies and clean up CAS impl. So having distinct ticket objects helps greatly and its also clearer to see distinct domain objects in the api. \n. One additional side-benefit of this PR is that now, we conceptually can allow PGTs and PTs to have their own expiration policy. They are set to match TGT and ST's  but technically it's possible to treat PGTs like Oauth tokens that would be long lived. \n. Fix the build failures please, and move the dependency version over to the gradle.properties file. otherwise, great. \n. Hmmm. Does this command not produce them for you?\n./gradlew build -DskipJavadocs=true -DskipAspectJ=true\n. This might also help: http://jasig.github.io/cas/developer/Build-Process.html\n. Sweet. Thanks. If it helps, I have the following alias if you want to try:\nbash\nalias bcas=\"cd cas-server; cd cas-server-webapp; gradle build --parallel jettyRunWar -x test -DskipJavadocs=true -DskipCheckstyle=true -DskipFindbugs=true -DskipAspectJ=true\"\nSuper easy to spin up a new instance. \n. Sure. I'll add a test case\n. So the issue here is, a field that is created as a lob by default (and depending on the DB) will end up with a length of 255. That is not enough for a Lob. Some of our Lob fields in the JPA ticket registry are much larger than that. What we are saying here is that the max size of this field can be that value if the database allows it. If it does, I see no issues. If it doesn't, it should auto-adjust. Most databases can support that length. \n. This seems way too heavy handed for a small issue. Why? @Transient I think should do the job right? Did that fail? \n. Ah sorry just saw your comment on the issue. I would prefer if we declared logger as static or even if it was removed. Would that work? \n. Cool. Let's do that please. I'd be OK with static personally, just make sure you add a few comments that explain the rationale. Much appreciated. \n. @frett I think they are auto initialized in the JPA service registry when they are null. Could I ask you to check? \nI'll backport the change to 4.1. \n. Perfect. \nI don't know if 4.1 has this available yet, but we have added a new REST API for inserting services. This might make it much easier for you to migrate changes over. LMK if you can't find it in 4.1 and maybe we could backport that feature as well. \n. Excellent\n. By the way a few folks on the list are having trouble with the configuration of JPA ticket registry. If you have anything to contribute and  update the docs to make that process easier, that would be great.\n. Thank you. I'll attempt to test this behavior locally. \n. Also note that 4.1.3 when released allows you specify a positive skew value. Make sure to reverse your property to 120, rather than -120. \n. Will merge into master.\n. A simple upgrade does not really give us anything. You should gradually  update this pull to take advantage of jdk 8 features. Things to consider are:\n- Converting all relevant constructs to lambdas\n- using the new date time api and removing joda time perhaps\n- using base64 functionality and removing other libs in CAS that do that\n- other relevant fixes\nAnd J\u00e9r\u00f4me is right. We won't be to merge for a couple of months but thanks much for taking this one. Keep the updates coming.\n. Yes it is certainly uglier. However we could put that in some sort of utility static method and call it done. I would still be in favor of removing it and others since they will likely bring down the final war size quite a bit.\n. There are a number of benchmarking toolkits for Java, one of which is by google and happens to be fairly popular and accurate. You could measure throughput, but my guess would that whatever penalty we incur would be fairly negligent. \n. btw, as you keep adding batches of changes, please post a comment on the pull so we can review with you. \n. Sure thing. Just a post a comment per topic when you are done with each. \n. @tduehr if you are using intellij, you could take advantage of inspections of lambdas and streams. It will auto convert everything for you. The rest of course has to be done manually.\n. Excellent. Keep up the good work. \n. Don't forget that you should periodically merge with master\n. Sweet! Thanks. I'll take a look. \n. Thanks for continuing to work on this. Excellent progress. Let's keep the conversation going. \n. > Unfortunately, we're either stuck with commons-codec or continuing to support our own hex encoding.\nCould you elaborate please? What does codec provide that JDK8 does not? and where are those instances used and how? We should already have a UTIL class that handles things like this, CompressionUtils or something. I believe all codec-related functionality is captured there, and if there something that is not, it should be moved over. \n. Very good. Is all other feedback also accounted for in your latest commits?\nAlso, if you run IDEA the next step would be to run an inspection check to catch areas that could be converted to lambdas. There are 1-2 checks that IDEA offers allowing you upgrade constructs to Java 8 syntax. This is more a nice-to-have, but personally I prefer to be consistent across all codebase modules. \nThanks again. \n. Wonderful. Have an ETA on when you might be done? I ask because we'd want this to merge sooner than later, otherwise you/we are going to have to keep rebasing and keep running the same conversion checks, specially with the work that @dima767 is doing on the APIs. \n. No worries. Keep up the good work. \n. Sure. \n. Never indirect. \n. Let's declare it, but let's also make sure we don't use it anywhere unless absolutely needed. \n. So how are we doing here? \n. Good deal :) \n. Any updates on this patch? \n. @dima767 is this something you'd be interested to help @tduehr with? \n. Sounds like a reasonable compromise. @dima767 would you be able to take resolve conflicts for this PR and put it into a branch so that we can do a cursory review/build locally before merging in? \n. Yup. Please proceed. \n@tduehr you will be able to submit PRs to the branch once it becomes available, and then to master when it's fully merged. \n. It would be good to recap what items are still on the todo list so we could incrementally start working on them. \n. I suspect it's a local thing, or something broke in the rebase process. I see Travis reporting that master built fine about 7 hours ago. \n. Thanks. I'll play around with this a bit more.\n@tduehr you are welcome to keep pushing PRs to that branch. This way we can all help with the branch accessible to everyone. I'll take a pass later this week. I'd want this to go in before we do any more work on MFA. \n. They should not assume. There is a supports() method that gets called. No handler gets call unless it can support the credential type. \n. Lets have #1332 merge before working on this. Also, we need to test cases that exhibit the failure to some degree and then updates to those tests that demonstrate the fix\n. So @tduehr Could you rebase/merge with master once? \n. Thanks. So let's talk about the changes. The mutex you have here is added to CASImpl, rather than Memcached Ticket Registry. Why is that? Wouldnt this potentially degrage throughput for ALL registries, rather than the one this issue is reported for? \n. Thanks. Just so I can learn better: what would be involved in writing that class? and what might that impl looks like? and, is there something out there we could for such locking purposes? \n@dima767 you may want to review this one too. \n. Nah, sorry. Ignore that comment. Phantom post meant for a different PR. \n. If you really want to get fancy, it would be awesome if you could run jmeter tests before/after the patch. That would be most reassuring, specially if you also used the default and some other registry like hazelcast, ignite, etc. \n. Will correct the test case and merge. \n. @leleuj build is now functional, but it looks like we are having issues with this:\nDownload https://repo1.maven.org/maven2/com/nimbusds/nimbus-jose-jwt/4.10/nimbus-jose-jwt-4.10.pom\nDownload https://oss.sonatype.org/content/repositories/snapshots/org/pac4j/pac4j-oauth/1.8.1-SNAPSHOT/pac4j-oauth-1.8.1-20151208.110711-46.jar\nDownload https://oss.sonatype.org/content/repositories/snapshots/org/pac4j/pac4j-saml/1.8.1-SNAPSHOT/pac4j-saml-1.8.1-20151208.110653-46.jar\nDownload https://oss.sonatype.org/content/repositories/snapshots/org/pac4j/pac4j-config/1.8.1-SNAPSHOT/pac4j-config-1.8.1-20151208.110722-16.jar\nDownload https://oss.sonatype.org/content/repositories/snapshots/org/pac4j/pac4j-cas/1.8.1-SNAPSHOT/pac4j-cas-1.8.1-20151208.110642-46.jar\nDownload https://oss.sonatype.org/content/repositories/snapshots/org/pac4j/pac4j-oidc/1.8.1-SNAPSHOT/pac4j-oidc-1.8.1-20151208.110717-46.jar\nDownload https://repo1.maven.org/maven2/com/nimbusds/nimbus-jose-jwt/4.10/nimbus-jose-jwt-4.10.jar\n[ant:iajc] /home/travis/build/Jasig/cas/cas-server-support-pac4j/src/main/java/org/jasig/cas/support/pac4j/Pac4jConfiguration.java:3 [error] The import org.pac4j.config.client.ConfigPropertiesFactory cannot be resolved\n[ant:iajc] import org.pac4j.config.client.ConfigPropertiesFactory;\n[ant:iajc]        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n[ant:iajc] /home/travis/build/Jasig/cas/cas-server-support-pac4j/src/main/java/org/jasig/cas/support/pac4j/Pac4jConfiguration.java:63 [error] ConfigPropertiesFactory cannot be resolved to a type\n[ant:iajc] final ConfigFactory configFactory = new ConfigPropertiesFactory(properties);\n[ant:iajc]                                         ^^^^^^^^^^^^^^\n[ant:iajc] \n[ant:iajc] 2 error\nShould be fixed when 1.8.1 comes out. So I am ignoring it for now. \n. This seems like a custom change specific to a deployment without any apparent and/or evident use case. :-1: until facts and use cases become clear. \n. @leleuj are you publishing snapshots? I am also seeing the same failure. \n. Yes. Your pattern should cover all components. This will actually be tremendously handy as we are doing some extension work as well for integrating CAS with ADFS, and having these components for both view and edit are going to make that easier in the long run.\n. Sure thing.\nRelease timeline for 4.2 RC1 is sometime around December 24th. That is not definitive, and depending on how close we are to the pending task list, it might get pushed. I am working on some changes to the authN APIs to make the ground work for MFA possible, and we definitely want those to go in. So once I finish, we would be in theory ready to cut RC1 for 4.2. \n4.1 backporting can happen anytime. 4.1.3 is also scheduled to go out around December 24th. But, we could push that a couple of days ahead too. Patch releases happen on a monthly rotation so if you can't commit to that date, 4.1.4 would be just 4 weeks away!\n. Also, merge with master once. I fixed the pac4j issue:\nhttps://github.com/Jasig/cas/commit/7bac3040c7927c5fd8aa637498e4fe623aba2c0d\n. I think that is a workable plan, thanks. We are right now debating this patch:\nhttps://github.com/Jasig/cas/pull/1343\nOnce this finalizes and hopefully you are done by then as well, we'd be ready in theory to cut RC1. Unless something else pops up!\n. Daniel, how is this pull looking? \n. Several comments on IOC-related functionality; the rest looks great. Thank you. \n. Sure. If you think that makes it easier. What I generally would suggest is that usage of qualifiers protects against implicit behavior while allowing better flexibility with the usage of Spring aliases. That may not apply in your case here, so I'd leave that decision to you. \n. > I haven't tested out the full specifics of using qualifiers, \nA possible approach would be to designate Component annotations to the default implementations. Then, Autowire the fields with Qualifiers. Implementation will then use aliases to instruct what is actually substituted at runtime. Now in your case, you generally at the most have one implementation only (besides the default which I am discounting) so it may not matter really.\n. Excellent. Let's do this! Thanks. \n. This is perfect. Thanks :+1: \nThe only remaining bit is, backporting the docs :) \n. Thanks @dima767 \n. Perfect. :+1: \n. I am assuming this should be backported to 4.1 as well. Right? \n. Sure thing. I'll cherry-pick the commit back once it's merged. Thanks again. \n. You are right; that might be a legitimate concern. I'll do a bit more research and report back. \n. @leleuj I pushed all changes to address feedback by all. Regarding multiple threads, see if the below passing test satisfies your question:\n``` java\n    @Test\n    public void checkBuilderWithManyThreads() throws Exception {\n        this.manager = new PolicyBasedAuthenticationManager(new SimpleTestUsernamePasswordAuthenticationHandler());\n    final int concurrentSize = 100;\n    final ExecutorService executor = Executors.newFixedThreadPool(concurrentSize);\n    try {\n        final List<AuthenticationContextGenerator> generators = new ArrayList<>(concurrentSize);\n        for (int i = 0; i < concurrentSize; i++) {\n            generators.add(new AuthenticationContextGenerator(this.manager, this.builder,\n                    TestUtils.getCredentialsWithSameUsernameAndPassword(\"user\" + i)));\n        }\n        final List<Future<AuthenticationContextBuilder>> results = executor.invokeAll(generators);\n        for (final Future<AuthenticationContextBuilder> result : results) {\n            final AuthenticationContextBuilder resultBuilder = result.get();\n            assertEquals(resultBuilder.size(), concurrentSize);\n            final AuthenticationContext ctx = resultBuilder.build();\n            assertNotNull(ctx.getAuthentication());\n            assertEquals(ctx.getAuthentication().getSuccesses().size(), 1);\n            assertEquals(ctx.getAuthentication().getCredentials().size(), concurrentSize);\n            assertEquals(ctx.getAuthentication().getFailures().size(), 0);\n        }\n    } catch (final Exception e) {\n        logger.error(\"checkBuilderWithManyThreads produced an error\", e);\n    } finally {\n        executor.shutdownNow();\n    }\n}\n\nprivate static class AuthenticationContextGenerator implements Callable<AuthenticationContextBuilder> {\n    private final AuthenticationManager manager;\n    private final DefaultAuthenticationContextBuilder builder;\n    private final Credential credential;\n\n    AuthenticationContextGenerator(final AuthenticationManager manager,\n                                   final DefaultAuthenticationContextBuilder builder,\n                                   final Credential credential) {\n        this.manager = manager;\n        this.builder = builder;\n        this.credential = credential;\n    }\n\n    @Override\n    public AuthenticationContextBuilder call() throws Exception {\n        return this.builder.collect(this.manager.authenticate(credential));\n    }\n}\n\n```\nWhat is happening here is that we have about 100 threads simultaneously using the authentication manager and the context builder to authenticate a single credential instance. \n. I would agree that a global singleton is a poor solution now, but SWF really is a no-go. Tying the object to the \"view\" layer seems like too much of a coupling to me, and besides, SWF has the side-effect of requiring all scoped objects to be serializable, and we cannot guarantee that, or it would be very difficult to manage things later on as we start to build more into the Authentication object.\nWe might need to rethink the design choice here more; perhaps a prototype scope rather than singleton, or something else to separate this on a pre-thread level. \n. I am inclined to go with the local parameter passing for a number of reasons. Using sessions is also a no-go for the same reason that SWF is a no-go, and additionally it would force a sticky session requirement which we do not have at all and will require session replication likely which we may not need. Furthermore, we have no need to \"store\" the history of authentication events really, anywhere (which is what the current code does here in memory, and that is useless). All we need to \"store\" is the TGT that carries the final Authentication and that already happens. So we just need to pass around the transaction here and there to make it both threadsafe and lightweight. That is the most comfortable solution. So Dima's suggestion on making this a local parameter passed around makes very good sense to me. I am sure some combination of that and ThreadLocal would do the job nicely. \nAlso, let's make sure we all are on the same page: an authentication transaction is a single event. It's not chained, or a superset of authentications. It's one thing only. It's you submitting credentials once. An authentication transaction/event happens in an authentication context, in which a series of transactions take place. The final result is a single super authentication that is passed to the TGT (which is the step that currently takes place too). The thing that is the issue here is the context, which is the thing that carries a series/set of transactions/events inside it and that is what we need to fix. \n. TransactionSynchronizationManager  and AuthenticationAttempt are both very good ideas. I'll rework this pull based on the collective feedback here, and will attempt to run threaded tests to see how it holds. Then we can carry the conversation forward again. Thanks all. \n. Merged with master once. Let's finalize a few other patches first before circling back to this pull. This is not a priority for 4.2, and we might ship without this sort of changeset going in, but of course, all depends on time and availability. \n. I have made a few changes to the patch here, and started to test. The threading issue should be resolved. This is what the current WIP API looks like:\n``` java\nfinal AuthenticationContextBuilder builder = new DefaultAuthenticationContextBuilder(\n        this.authenticationObjectsRepository.getPrincipalElectionStrategy());\nfinal AuthenticationTransaction transaction =\n        this.authenticationObjectsRepository.getAuthenticationTransactionFactory().get(credential);\nthis.authenticationObjectsRepository.getAuthenticationTransactionManager().handle(transaction,  builder);\nfinal AuthenticationContext authenticationContext = builder.build();\nfinal TicketGrantingTicket tgt = this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext);\n```\nSo here is what is happening:\n1. We create a local authentication context builder. This builder will simply keep collecting authentication objects that are created as a result of a successful authentication transaction. Note the builder is passed around rather remaining as a singleton. \n2. We ask the transaction factory to give us an authentication transaction based on the provided credentials. \n3. Once we have a transaction, we ask the transaction manager to process it, and put the result into the context builder. We can repeat the same pattern over and over again. \n4. Once we are done, we ask the context builder to give us a final authentication object. \n5. The result is passed to CASImpl to issue a TGT. \n. The authenticationObjectsRepository is simply just a holder object for convenince. Rather than injecting every class with various instances of the API objects, I moved them all into a repository holder, and only inject the repository here and there where needed. I am in the process of writing and running tests, but so far, looks promising. I'll push changes upstream shortly. \n. - On prototype scope, this can be removed. It's probably a leftover change from when I was playing around with stateful object that was going to hold authentications. Good call. \n- On the threadlocal issue; same story. A leftover change, though I think it wouldnt hurt for us to play it safe to prevent API misuse. Unless you think there is a performance cost associated with it. \n- For storing and passing around the context builder to multiple flows, I don't have a good answer yet. I am currently in the process of working on cas-MFA to convert it to 4.1, and I am trying to determine whether SWF might be a good place to pass this around to other flows. That seems like the best option, though as we discussed, there are concerns about possible serialization issues. I'll report back later, but at this time, this is not a concern for this PR as we are simply trying to decouple the API and we simply just have a master flow at the moment. Once the MFA starts to form, we can revisit this later. The main objective here is to ensure that the authN subsystem is separate from the service layer.\n. > Cannot we just use our AuthenticationContextBuilder which collects various authentications and be stored in the webflow?\nNo this simply will not work because in order for the builder to collect authentications, it needs to be passed to the authentication manager, which means the manager must change, which means deployers must change config. No-go. Everything we are changing here is not touched by the deployer configuration. I do not want to change the authentication manager at all. \nYou should not read the code from the perspective of \"this is how many classes we have\". You should read the \"story\", which is:\n1. An authentication transaction is submitted by providing one or more credentials.\n2. A transaction is processed by the appropriate manager\n3. Go back to 1\n4. The result is executed within a specific authentication context. \nThe existing API is simply insufficient, and cannot work in MFA scenarios. Otherwise, we wouldnt be working on this :) \nAlso, as we discussed, we cannot store things into the webflow (at least for now, this is something we are completely unsure of) unless we can guarantee that the things getting stored in the webflow are serializable, which we cannot guarantee, and that would also be tying the API to specific technology choice and container choice. \n. PR is updated. All tests pass.\nReminder that I'd like to finalize this prior to the 4.2 RC1 release, due in about a week or so. \n. No that isnt persisted anywhere by the API. It's passed locally around. See the AuthenticationViaFormAction as an example. \nWe may have persistence issue later on as we develop subflows. I am planning to handle that with #572 \n. Reviewing the CAS-MFA code, I see that extension using SWF to store the primary authN as it transitions to subflows. So I am inclined to think that SWF may be good candidate for multiple legs of the authN, but we still need to investigate this with the new API here since the way we handle SWF state now across flows has changed in 4.x.\n. Absolutely. You are perfectly right. \n. Reviewed. It turns out that the authentication object contains everything we need to get it passed around. It's as \"lightweight\" as it can be for now. Also, I think if we were to create, let's say a lighter version of the Authentication object, we'd need to find a way to copy the contents of the real authentication into the light-weight version, still making sure that those copied items are serializable, which means possibly lots of transformations. That sounds like a lot of effort to me, compared to the energy it takes to figure out what in the real authentication object may cause serialization issues, and in what ways those can be solved. \nMakes sense? \nReviewing our implementations here, I am more and more convinced that everything we have right now is perfectly suited for SWF. All objects are meant to be serializable and perfectly are. What I was worried about was any \"external\" implementations by deployments, or weird implementations of a Principal by a deployment that violates this rule, but, now I that rethink about it, that is of no concern to us really. We don't ever expect folks to reimplement the Authentication object or the Principal, and if they do, they would need to follow the design guidelines in making sure their impls are safe and sound. So I think we should be good here.\n@leleuj let me know how you feel about this patch. \n. @leleuj what do you think about the recent mods to this PR? Are you ok with the changeset, or shall we iterate more? \n. Heads up. Merging by Monday morning, prepping for RC1, unless there are other reported issues. \n. I have added stormpath too, and will continue to JWT soon. Let's build more and take over the world :)\n. Sweet, thanks for the heads up. \nI am going to try to borrow as much as I can from this patch here:\nhttps://github.com/Jasig/cas/issues/1060\nFine work by @epierce\nWe might need a small protocol rev, not sure yet. \n. For the protocol rev, I would like to keep this for now as an extension and implementation until we get broader use out of it. Once we are able to consolidate all the use cases with a few to many deployments, I'd be in favor of modding the protocol. I imagine 4.3 would be a good time to do so. \nWe'll revisit this back one 1.8.2 becomes available to handle the double secret configuration. I would also suggest that you fallback to using the same key for encryption, if one isnt available/defined. \n. I restructures the pac4j hierarchy so the authenticator is passed locally. The only change left to do here is double secret configuration which requires changes on pac4j. \n. Posted https://github.com/pac4j/pac4j/pull/401 and https://github.com/pac4j/pac4j/pull/400\n. @leleuj  This is ready. We just need to wait for pac4j 1.8.2. \n. Yes, and yes please :) We could bump this to 4.3 but I would rather do that as a last resort. Once we go into RC mode, we can't make changes unless they are bug fixes, and I don't know how long the RCs might last. So 4.2 is the best candidate. \nWhat can I do to help with the pac4j release? \n. P.S: Test failure appears to be a Travis fluke. Restarted it. \n. Excellent. If there is anything I can help with, LMK. \n. Perfect. Thanks. I'll update the pull when it's available. \n. - The basic authN is now turned into a non-interactive action.\n- pull is updated to use the pac4j extractor\n- Docs are updated\n- Tested the integration with curl. Perfectly functional. \n. It's not. Travis killed this for some reason, but all should pass. \n. You should push the PR here https://github.com/ZionTech/cas\n. :+1: \n. Note that codeship is building master just fine. Travis however is having issues, for some reason. The build process gets killed. I am looking into it. \n. It does not exist in 4.2 just yet. I'll move it forward. \n. :+1: with a small comment\n. > I think I get the idea, but does it really bring additionnal security?\nFirst note that the intent of this PR is not to add additional security measures on the token format itself. Maybe base64 encoding of the token provides a layer of obfuscation, but it absolutely does nothing to strengthen the integration security-wise. From that perspective, this work is equal to what is in master right now.\n\nI can forge an access token with a TGT and a service identifier, cannot I?\n\nYou cannot forge a TGT. It needs to exist in CAS, and additional checks run to ensure it is valid. \nAlso, the main goal, (which you would count as a security measure) is to ensure the relying party only gets attributes that CAS has authorized. I would call this a security issue in the current impl. \"Receiving things one has no business of getting\" is a security issue. \nI am completely in favor of using JWTs as alternatives to access tokens, but that seemed like an approach better suited for a long-term dev effort. We can review that for 4.3 and have this patch be of immediate use in 4.2. I'd also be open in cancelling this pull and documenting the work to be done in a separate issue to be handled perhaps by you in form of JWTs. All options are valid to me.\n. If you think it can make sense I can encrypt the final access token using a secret and send that back and then decrypt it when the profile controller takes it. that might be something to do\n. Well, we still have a couple of days before the RC1 release, so I can definitely prepare something to encrypt that token. PR upcoming. \n. Ignore the changes to the log4j2.xml files. They are needed but sort of irrelevant to this pull. \n. To answer questions:\n1. Yes this was a patch that existed in the wild. The work here is not original :) It is in use. \n2. I like the flexibility that infinispan provides with many different implementations. I would classify this work as \"experimental\" for now, and would not suggest to remove all others. \n3. Our policy, if I can comment, is such that if an extension lives out there, that is promising, that delivers a technical value beyond what we offer and expands on the CAS integration realm, we would certainly adopt it into the core framework. Over time, we'll keep deprecating and removing old implementations that would become irrelevant (like JBoss Cache as we did). \n4. The whole idea here is to make options available for adopters. We want to offer a technology solution to cover a wide area of expertise and experience so that those who feel comfortable with MongoDb for instance have an option, and those who like memcached also have an option. \n5. This also promotes the CAS project in the opensource space by way of advertising its adoption of other technologies and being friendly to them. Obviously, we wouldnt include everything and anything :) but if one exists out there for which the work is already done and someone is using it, I see no issues with including it. \nP.S An example of such \"addon\" that exists, and one we should NOT perhaps adopt is Oracle's Cache Coherence framework :) \n. PS One \"extension\" that I personally would like to see in CAS core is an authentication handler that talks to a REST resource. That seems to be in demand quite a bit, and seems like a good candidate to also include. @robertoschwald has something that works for SOAP; that might be a good start but I would like to first support REST before moving onto more heavy-handed tech :) \n. Copy that. A problem avoided is a problem solved :dancers: \n. It will be there in about 30 minutes or so. \n. Ideally, it would be best if you could do both :) but that depends on your change. I'd recommend master always, but do what makes sense for you and we can then port it to the appropriate place. Thanks for the contribution. \n. #1321 is also a documentation issue but it does not deal with LDAP AuthN. It's a separate issue, that mostly deals with the upgrade guide, overseen by @robertoschwald . Your here seems to deal with something different. \nThe master doc is in the master branch under cas-server-documentation. Find the Ldap doc in the installation folder, though I am sure you'll find that version is quite a bit different from the 4.1.x branch. So be careful. \nThere are a number of ways to see the master wiki. You can:\n1. Use a markdown editor to edit the .md files. Unfortunately, most editors do not do a good job of rendering code snippets via the github format. There is Atom, Sublime, and MarkdownPad. Use what works for you. \n2. One easy way to see the cas documentation visualized is by checking out the gh-pages branch, and building it locally. See the readme here https://github.com/Jasig/cas/tree/gh-pages\nYou should:\n1. Make the changes there, build the site, and see it\n2. Move the changes over to the master branch of the documentation. \n. Very good. \n. This is great thank you. how did you find these violations ? please also fix to build failures. \n. Thank you. please fix the bill failures. I think you have a number of unused imports as a result of your changes\n. @kirill-vlasov that something we could easily integrate into the build to run checks automatically?\n. Failures fixed. \n. Perfect. Thanks. \n. Perfect. Thanks. \nP.S We'll handle the merge back to 4.2 and 4.1 branches. \n. Merged with all branches. Thanks again. \n. Looks like a few mods are in order, and then we should be good for a merge :+1: \n. Sounds good. \nAre you sure the SNAPSHOT is actually published? \n. Could be a Travis issue. Have you tried restarting the build? Otherwise, we may simply ignore it :) \n. Well, then we might as well merge. Strange!\n. Not sure if this is related, but Travis is reporting:\nCaused by: java.security.NoSuchAlgorithmException at OAuth20ProfileControllerTests.java:119\n. We might be able to enable parallel builds for Gradle. That should make things go much faster, although we should also verify that all tests still pass with parallels. \n. Let me take a look. I'll play around with parallel builds to see what could be improved. \n. First look, this seems wrong:\nexport JAVA_OPTS=\"-Xmx2048m -XX:MaxPermSize=512m\"\nIt should be:\nexport JAVA_OPTS=-Xmx2048m -XX:MaxPermSize=512m\nAlso, I don't know if Travis is able handle that much memory alloc. I'll massage this a bit more. \n. You are right. For some reason, double quotes don't work well on Windows and I thought the same would apply here. Started a parallel build. So far looks good. I'll benchmark and see if it's any faster.\n. Thanks. What's with the build failures? \n. Seems that irrelevant. Thanks. How did u run into this change? \n. Perfect. Thanks. I'll merge this back into appropriate branches. \n. Merged with all branches. \n. Should be merged into 4.2\n. # Test1\n\nTest2\n\n. The only thing I have not been able to test yet are encrypted assertions and nameids.\n. I'll be working through test failures on and off, letting Travis let me know where I failed :) \nYou will find also some dependency upgrades as well as LDAP resolver tests. These were done to make sure dependencies are all compliant with the new saml module. \n. Pushed a commit to handle feedback. \n. I added support for SLO. \n. Any other comments on the API, functionality, docs, etc? \n. Perfect. I have run a few tests with pac4j's SAML support and all seems to pass. We should probably update pac4j's IT tests to support CAS and then we could have continuous testing!\nThank you all. \n. by the way @leleuj, while I was writing the docs for the authorizers I realized this is so much simpler that configuring Spring Security! Job well done. \n. I'll proceed to update the docs for 4.1 next. \n. I appreciate the contribution very much. I am wondering if there is an automated way we could build these checks into Travis somehow. Without an automated process, there is always a chance that these \"errors\" would sneak back into the codebase. Is it possible to integrate the build with your tool?\n. by the way, love your branch name :) \n. I did ask a question on the SonarQube list to see if we could use a hosted version of theirs, but didn't get a response. There is a gradle plugin, but without a hosted version of the tool we wouldnt be able to use it. We could however use PMD with gradle. \n. Is it possible to set up a hosted version somewhere on heroku? \n. Great. Is that something you might be able to do for the CAS project?\n. @kirill-vlasov I did ask to get access to nemo. Sadly, I never got a response. Do you have credentials we could use? \n. See https://groups.google.com/forum/#!searchin/sonarqube/misagh/sonarqube/E3eFZZ6wGCQ/mTr8CpEgCQAJ\n. :+1: \n. This should be merged into 4.2.\n. Very good. You have tested this patch and know of its correctness, I assume? \n. It likely is, because all tests for your patch pass on travis. Thanks. \n. Well in this case seems like a legitimate error, but shall we relax checkstyle rules for tests? \n. That might work. I am afraid that if we don't fail the build though, \"errors\" would go unnoticed. Over time, we'll end up with a whole bunch of, for instance, unused imports, in test cases simply because we think the build \"passed\". \n. That depends on the rule and case. If we have star-import for example, this could possibly turn into a bug:\nDEFAULT_ERROR_LIST.add(FailedLoginException.class);\n. Specially since, we accept contributions from everyone this should help preserve the patch quality. Over time, we'll end up with a huge giant mess, with various styles used by everyone because they prefer it that way. I dnt mind relaxing the rules, but there has to be a style.\nI am working on converting another project, which I wont name, to use gradle. The project is over 10 years old with a lot of features. You should the codebase I am dealing with :) \n. Also, we'll end up having pointless conversations specially on patch acceptance :D for instance, I create HelloWorld.java as an abstract class. You would say, the class should be called AbstractHelloWorld. One other person would say I like BaseHelloWorld. Another would say I like RootHelloWorld. We'll debate this for 3 days :) \nIt's much easier to say: Rules say abstract classes must be named as X. End of story. \n. This pull still needs some work, but I wanted to post the patch to have it available for review and discussion while I take care of docs, etc. \n. Looking into it. It's bizarre that it fails from the cmd line yet it passes in the editor!\n. Merging back to 4.2 and 4.1\n. Yes. Must be ported over. \nI have no idea what is up with Travis. This is very frustrating. Maybe we could switch to Codeship. Don't know. \n. This looks promising. Switching is not an easy feat. Might have to put this on the backburner for now. \n. Actually, I take that back :) I don't mind having all 3 CI systems build CAS. That way, we can compare and let them sit for a while and see which one causes less headache!\n. Tested drone.io. Far too limiting. Cant build multiple branches. Max build time set to 15 minutes. \n. @frett You should also review this. \n. This is going to be a joint effort to work out the test issues. I should probably ask @robertoschwald to review and test this also. @frett is also looking at it, and these are folks that deploy JPA in prod. They are the best guarantee. \n. @leleuj you may have a point there. How about we add a property to keep the existing behavior by default, and let that setting toggle SLO for PTs? We have them off by default just like now, and we doc the property that enables them for people to reduce risk. Makes sense? \n. The risk would be that applications which were authorized by PTs now all of sudden may be SLOed out once the user explicitly logs out. That may be considered unintended behavior. \n. Sure. We could issue WARN statements in the log. That should grab folk's attention, and in 4.4 we could switch the new behavior on. \n. I realized disabling SLO for proxies in form of a setting is not practical, simply because all those tickets end up getting deleted later as part of deleteTicket(). So I am just going to leave things as they are now. Since we are targeting this change for 4.3, a \"change in behavior\" might be acceptable. \n. All systems go. \n. @tduehr go ahead please.\n. Sure. 4.1 docs and 4.2 docs build automatically into github pages. Point your target branch to 4.1. \n. You may have to close this PR and create a new one. \n. This is pretty good. Thanks! I am however pretty sure that there are more places that could use the new API. Did you scan the codebase for all places that use the new support class? I bet there are more test cases that use utilize the \"old\" model. \n. Kewl. \n. :+1: \n. Sure. Questions: \nIs this something:\n1. We should do in this pull?\n2. I should do, in this pull?\n3. I should do in a separate pull? \n. P.S: The name sounds good to me, if you want to make changes in the same pull, etc. \n. Copy that. @leleuj OK with you? \n. PS renamed the pull description to use the keyword \"closes\" as that would automatically close the issue when the PR is merged. \n. Done\n. Merged into 4.2 as well. \n. Very cool. I was under the assumption that the name of the bean shall remain themeResolver for Spring to pick it up, but this obviously works too. Thanks!\n. Of course. What was I thinking!\n. Should be merged with 4.2 and 4.1\n. Sure. I'll work on the same pull for pac4j. \n. I am going to let Travis run the build and see what happens. \n. All systems go. \n. :+1: \n. :+1: \n. +1\n. +1\n. :+1: \n. :+1: \n. I don't think this is used anymore in any the other branch. The library is removed. \n. I don't think this is used anymore in any the other branch. The library is removed. \n. Build should be fixed momentarily. \n. Build should be fixed momentarily. \n. This looks great. One last comment following @leleuj that I think it would be good to explicitly call these properties out in cas.properties, but have them be commented out. \n. This looks great. One last comment following @leleuj that I think it would be good to explicitly call these properties out in cas.properties, but have them be commented out. \n. @frett Would you be able to apply the last few changes to this patch today? This is holding up the 4.1.x release. \n. @frett Would you be able to apply the last few changes to this patch today? This is holding up the 4.1.x release. \n. Perfect. Thanks.\n. Perfect. Thanks.\n. Blanked out cookie paths. Yes, previously the cookie path was always set to the context path. That behavior is still preserved if the cookie path is left undefined. \n. Blanked out cookie paths. Yes, previously the cookie path was always set to the context path. That behavior is still preserved if the cookie path is left undefined. \n. You are right. We definitely do not expect people to mess around with the runtime engine in an adhoc fashion. What I envision is that deployers create custom groovy scripts during dev and test for functionality they find useful, specially if their CAS version does not deliver their functionality. This is no different than any other thing in CAS; you have to know what you are doing. Groovy is already present in CAS in form of a scriptable attribute repository. The Grouper project also provides a near identical tool for similar reason; so what we are offering here is not without precedent. It's just, I dare say, better formulated. \n. You are right. We definitely do not expect people to mess around with the runtime engine in an adhoc fashion. What I envision is that deployers create custom groovy scripts during dev and test for functionality they find useful, specially if their CAS version does not deliver their functionality. This is no different than any other thing in CAS; you have to know what you are doing. Groovy is already present in CAS in form of a scriptable attribute repository. The Grouper project also provides a near identical tool for similar reason; so what we are offering here is not without precedent. It's just, I dare say, better formulated. \n. Perfect. Thanks.\n. Perfect. Thanks.\n. Are there any other schedulers? I vaguely recall something in the SAML module that would parse metadata for MDUI. Is that not relevant here? \n. Are there any other schedulers? I vaguely recall something in the SAML module that would parse metadata for MDUI. Is that not relevant here? \n. Let's switch to seconds, if possible. Doubt anyone would want to configure things at the millli level. \nAlso, don't forget to document the new properties in cas.properties for the scheduler.\n. Let's switch to seconds, if possible. Doubt anyone would want to configure things at the millli level. \nAlso, don't forget to document the new properties in cas.properties for the scheduler.\n. Sure, let's document it too. You could do that in this pull or a separate one, but my vote nonetheless would be to use seconds everywhere. It makes no sense to run jobs every Xms, since most deployers would likely do the math to transform that into seconds or even minutes. \n. Sure, let's document it too. You could do that in this pull or a separate one, but my vote nonetheless would be to use seconds everywhere. It makes no sense to run jobs every Xms, since most deployers would likely do the math to transform that into seconds or even minutes. \n. Awesome. I'd let the build do its thing and then we should be good. \nJust confirming then, with this patch and the earlier log4j change in catalina.properties, are you now able to gracefully shut down tomcat? \n. Awesome. I'd let the build do its thing and then we should be good. \nJust confirming then, with this patch and the earlier log4j change in catalina.properties, are you now able to gracefully shut down tomcat? \n. Looks like this is ready to go. Shall we merge, and investigate further? I'd like to run some tests with this patch in place to see if I still see threads hanging. Sound good? \n. Looks like this is ready to go. Shall we merge, and investigate further? I'd like to run some tests with this patch in place to see if I still see threads hanging. Sound good? \n. I'll cherry pick the changes into master. Will continue to run tests. Thanks Daniel. If you are still testing changes, please keep us in the loop. I'll do a few tests tomorrow as well. \n. I'll cherry pick the changes into master. Will continue to run tests. Thanks Daniel. If you are still testing changes, please keep us in the loop. I'll do a few tests tomorrow as well. \n. Excellent. I'll set some time aside tomorrow to review. Thanks. \n. Excellent. I'll set some time aside tomorrow to review. Thanks. \n. :+1: \nLooks good to me. Like the auto-registration method. Substantial work. Thanks!\n. :+1: \nLooks good to me. Like the auto-registration method. Substantial work. Thanks!\n. > cas-server-support-oauth-core module which has become a dependency of the JpaTicketRegistry module. And deletion queries will be added.\nHow do you mean? I am not sure I entirely follow that. Why is dependency needed? and is there a way to keep this separate via pluggable injection points? \n. > cas-server-support-oauth-core module which has become a dependency of the JpaTicketRegistry module. And deletion queries will be added.\nHow do you mean? I am not sure I entirely follow that. Why is dependency needed? and is there a way to keep this separate via pluggable injection points? \n. Gotcha. One other question, is it possible to keep API changes in a core-api module for oauth, and keep impls separate? \n. Gotcha. One other question, is it possible to keep API changes in a core-api module for oauth, and keep impls separate? \n. Does the oauth module auto enable anything in the cas context? I find that in certain cases, one might just need a dependency on the API modules without the actual impl, and it's also helpful to know a dedicated module just for APIs. (This actually annoys me about the JPA ticket registry because both API and Impls of another module are bundled, but I dont know of a better way since annotations for JPA are required in impl classes) \n. Does the oauth module auto enable anything in the cas context? I find that in certain cases, one might just need a dependency on the API modules without the actual impl, and it's also helpful to know a dedicated module just for APIs. (This actually annoys me about the JPA ticket registry because both API and Impls of another module are bundled, but I dont know of a better way since annotations for JPA are required in impl classes) \n. Good deal. \n. Good deal. \n. :+1: \n. :+1: \n. Created https://issues.apache.org/jira/browse/LOG4J2-1259\n. Created https://issues.apache.org/jira/browse/LOG4J2-1259\n. Yup. I'll keep it open to see what log4j has to say. Thanks all. \n. Yup. I'll keep it open to see what log4j has to say. Thanks all. \n. Excellent. Thanks for the prognosis. \n. Excellent. Thanks for the prognosis. \n. Reset the hostname back to default. This should be good. Tested. \n\n. Reset the hostname back to default. This should be good. Tested. \n\n. This is a bug fix required for java cas client versions < 3.4.x that use the SAML1 protocol. \n. This is a bug fix required for java cas client versions < 3.4.x that use the SAML1 protocol. \n. Merged everywhere. \n. Merged everywhere. \n. Merged everywhere. Thanks. \n. I'll have to run some tests locally, but two things initially caught my eye:\n1. One objective of the previous code was to not tie the code to log4j but use reflection to locate the logger framework. In this patch, we are explicitly importing log4j components into the CAS code, which will likely make it hard if not impossible for someone to use something like logback. Frankly, I don't think allowing folks to use a different logging tool is a big deal at all and I am ok with this aspect of the patch, but wanted to make sure I bring that to your attention.\n2. Shouldn't we shut down log4j per your link's instructions? \n. Tested. Looks good. \n. Actually, I take that back. I do see:\n25-Jan-2016 04:03:48.073 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [cas-server-webapp-4.3.0-SNAPSHOT] appears to have started a thread named [Log4j2-Log4j2Scheduled-5] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:\n sun.misc.Unsafe.park(Native Method)\n java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2078)\n java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:1093)\n java.util.concurrent.ScheduledThreadPoolExecutor$DelayedWorkQueue.take(ScheduledThreadPoolExecutor.java:809)\n java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n java.lang.Thread.run(Thread.java:745)\n25-Jan-2016 04:03:48.076 WARNING [localhost-startStop-2] org.apache.catalina.loader.WebappClassLoaderBase.clearReferencesThreads The web application [cas-server-webapp-4.3.0-SNAPSHOT] appears to have started a thread named [Log4j2-AsyncLoggerConfig-6] but has failed to stop it. This is very likely to create a memory leak. Stack trace of thread:\n sun.misc.Unsafe.park(Native Method)\n java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n com.lmax.disruptor.BlockingWaitStrategy.waitFor(BlockingWaitStrategy.java:45)\n com.lmax.disruptor.ProcessingSequenceBarrier.waitFor(ProcessingSequenceBarrier.java:56)\n com.lmax.disruptor.BatchEventProcessor.run(BatchEventProcessor.java:124)\n java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n java.lang.Thread.run(Thread.java:745)\n. I think supporting logback is more of a nice-to-have at this point. All empiricial research data shows log4j2 performs better than most other frameworks, so personally, I am fine with this approach here, but I want to make sure we get rid of the noisy threads. \n. Plus, I think this sort of thing is inevitable for #1151 \n. You're absolutely right! My mistake. Let me merge this back. \n. Merged and tested. You're right. Issue is resolved. \n. So as long Travis passes, I am fine :) \n. So @frett just so I understand the case better, you ARE now using cas-server-support-saml-idp? Excellent. I am excited. Please let us know how it goes as you integrate with SPs. \n. Excellent. Keep us posted please. I am very much in favor of all patches and changes we could apply to make this work, My initial tests against testshib and spring SAML worked flawlessly, but every SP is a bit different and unique. So I am hoping we integrations become more available, we get to improve this further.\n. Excellent. Just a quick comment on the new property\n. This needs to be pushed back into 4.2.\n. I'll let this live in master for now, but lmk if you want it elsewhere. \n. Yup. I'll merge back. Were you able to confirm the patch on your end? \n. So I see 4.2 already has this change built-in, I'll tinker with it a bit more to see where the issue is. Let's keep the original issue open. \n. Excellent. Now we just have to figure out what is the difference between 4.2 and master. \n. Components that need to be reviewed and thought about most are:\n1. CasWebflowEventResolver implementations\n2. Modifications to the service registry authentication policy\n3. Modifications to webflow automatic configuration for each provider module\n4. Changes to the webflow xml configuration files.\n5. Most importantly, component/setting names :) \nI'll fix the conflicts with master as we make progress. \nThere is also the bit of validating MFA requests which needs to be added as well. (i.e. client asks for Duo on serviceValidate, but CAS cannot satisfy it) \n. Additional notes from the review:\n- ranking: warning, do we only want to keep the last provider? how does it fit with the \"authentication handlers\" concept defined in the CAS services?\n- multi values for principal attribute\n- should the CAS server emulate MFA in Fail-Open scenarios\n. Additional changes thus far:\n1. Prop names have been changed for duo and yubikey to reflect MFA.\n2. Added a new module for RADIUS/MFA since radius itself can be a authn handler without mfa. The new module auto configures the context to add mfa capabilities based on radius. Prop names remain the same. \n3. Javadoc and docs are updated. \n4. Component name suggestions for the policy and API have been accounted for. \nI'll still need to update docs to explain how the authn context is passed to the app, and account for other changes discussed above. \n. Good idea.\nI plan to resume work on this today hopefully. \nI think I have decided to turn that fail-open boolean flag into a tricycle enum. We could let it be close,open,phantom. \n. Also, we likely need an extra attribute defined in the cas payload to indicate what the authentication context is. Possibility with the ability to translate it to something else in a pluggable way. presently, MFA context is passed to the app as a list of successful authN handlers. \n. Things left to do here:\n1. On validation: if the requested authn context is already satisfied by CAS, don't fail. Use ranks to calculate the existing context for validations.\n2. If service is configured to fail open and fake context, make sure the context includes the faked/requested context.\n3. A number of bug fixes to the core webflow routing logic to determine the correct next targetted id when creating MFA subflows. \n. Things left to do here:\n1. On validation: if the requested authn context is already satisfied by CAS, don't fail. Use ranks to calculate the existing context for validations.\n2. If service is configured to fail open and fake context, make sure the context includes the faked/requested context.\n3. A number of bug fixes to the core webflow routing logic to determine the correct next targetted id when creating MFA subflows. \n. 1 and 3 above is done. Working on additional tests and 2. \n. 1 and 3 above is done. Working on additional tests and 2. \n. This should be done now. \n. This should be done now. \n. Team, any feedback or progress on reviewing this? I think Daniel has done a cursory review. I am hopin we can finalize this before end of Feb, and let the work resume on authN event risks. \n. The same restrictions that apply to service validate requests. A proxy validate call is the same as a service validate call of course plus a couple of other things. As long the app on the validate call specifies that it needs mfa, CAS will attempt satisfy and/or fail.\n. Thought I'd add a bit more to the previous reply:\n1. You authenticate without MFA\n2. Ask to validate the ticket with MFA\n3. CAS fails\nOr \n1. You authenticate without MFA\n2. Validate without MFA\n3. CAS succeeds\n4. Separate service attempts to authenticate with MFA\n5. CAS steps up to perform MFA\n6. Service attempts to validate\n7. CAS succeeds and will remember MFA for subsequent requests\n. Note that proxy validate calls that require MFA must have asked for MFA in the original service validate call when PGT is being granted. \n. Merged with master once. Updated.\n. Yes, here's the rationale I had at the time. May no longer be valid or be overkill:\n- The present implementation always grabs the first provider from the set. In the order defined. There is a webflow resolver that deals with the first selection.\n- I thought a Set would provide better flexibility, such that one could customize the webflow handling logic to pick a provider out of a set, based on arbitrary logic. A use case coulld be thought of in terms of, \"I want to enforce duo sometimes, but radius some other times\". So an extension point is available to have a service define more than one provider, and another to allow a deployer to pick from the set.\nThis may not be needed for all, but returning a set was at no cost. \n. @frett merged with master once. How's the prognosis? \nby the way, if you wish to test duo you can def sign up for an account and put in their API keys in the config. Very simple. \n. See the other issue I created with the tgc. It may be related. \n. Sure. I'll review shortly.\n. > we should probably consolidate to a single id only. My preference would be the provider ids (mfa-duo, mfa-yubikey, mfa-radius) and not the event ids\nAgreed. \n. @frett Double TGT issue is the only thing that remains on this pull that we know of? Any other changes? \nGoing to take another pass at this later today. If we are close, might as well do a merge with master and start testing there. Makes it easier to merge. \n. Sounds great. Thanks. I'll look into the double TGT issue, and see if I can make sense out of it. \n. Going to implement a NONE mode for provider checking. So that when NONE is set, no provider is actually contacted for initial verification of availability. \n. Just thought of something; I realize we must stick to the spec and that's perfectly fine, but is there a use case/need to externalize the default nameid format into a property, that is set to the spec expected value? I am thinking of cases where metadata is not able to provide this setting for whatever reason, and yet the SP sort of expects it. That is a bad implementation, but we could technically allow for that kind of thing. \nNot sure if it's any use a all yet, but in general, I prefer things to be configurable when the effort is negligent. \n. That's fine with me. I think the registry model is flexible enough now to account for optional settings. \nShall we log this as an issue for now and see how use cases pan out? \n. Sounds good. \n. Thanks. Will do. \n. All done.\n.  Thanks! Goes to show that I must really clock out before doing any more damage :) \n. We'll need to update the developer docs separately since they are directly maintained in gh-pages. \n. @tduehr You want to target this pull against the java8 branch.\n. Agreed. Let's not change the core API signatures in bulk, but incrementally change the implementations where feasible. I have run some prelimnary tests on the branch and it looks good. A bit more testing, and then we can merge into master, and let the work resume from there in small changes. \nI'll create a pull request from that branch to master so we can let Travis run tests.\n. In working through namespace config, I removed all refs to Spring Sec schemas. \n. See https://groups.google.com/forum/#!topic/ldaptive/JXZioHgvTYk\n. There exists this: https://github.com/vt-middleware/maven-repo which we can use for the time being to let the build pass, and update to GA when it's available. Going to let the PR hang nonetheless. \n. Relevant issue https://github.com/vt-middleware/ldaptive/issues/82\n. Had to also update the checkstyle rules to make sure curly brackets are properly formatted per guidelines. \n. We'd want to ignore codeship for now; since a number of oauth tests require the java 8 JCE to be installed and we can't accommodate that easily via codeship. I spoke to @leleuj about this, and it seems like we'd able to solve that issue with a few updates to the underpinning oauth libs. So I'd leave that one be for now, failing. Travis is where we'd want to focus on, since it's able to install the JCE and get tests passed. I'll see what the failures are all about next. \n. Working through a few remaining javadoc issues. about 60% done. \n. OK Travis is now fully building the branch. Shall we merge and continue? \n. Sounds good to me. @dima767 @frett  ?\n. Keep watching the milestone dates. \n. Rock and roll :) :+1: \n. Ignore that for now please. The endpoint used by that test appears to be down. \n. Updated to add a few more missing blank spaces. \n. Cursory review. It's amazing how simple this has turned out to be :) :+1: \n. One last fix for CS and we should be good:\nhttps://travis-ci.org/Jasig/cas/builds/107266037\n. PS Java 8 has a much more strict ruleset for valid javadocs, and we haven't turned it off yet, thus you likely see a few more errors. Sigh. \n. Looks good to me. Question: why keep null values? what does that provide? \n. Thanks. :+1: \n. One other question: does it make sense to return \"[]\" instead of null? So the log would read:\n<Updated logging config file from [] to  file:/Users/frett/opt/tomcat/7.0.65/conf/cas.log4j2.xml >\nThis is a non-issue, but I think that is easier to digest than trying to figure out what \"null\" is. \n. Agreed on keeping the default behavior. Your suggestion sounds like a better plan. Thanks. \n. This should be ported over to all branches. \n. This should be ported over to all branches. \n. Do the same for the JPA ticket registry as well plz. \n. Do the same for the JPA ticket registry as well plz. \n. :+1: \n. :+1: \n. If it's Travis giving you grief, let it go. It will pick up again off of master. \n. If it's Travis giving you grief, let it go. It will pick up again off of master. \n. Docs should also be updated, I think. \n. Docs should also be updated, I think. \n. @leleuj I see you have pushed a few more commits. Is this patch ready? Shall we proceed? \n. Perfect, thanks. I can run some tests as well if needed. It's likely related to the new expiration policy changes. What is the client you typically use to duplicate that issue? \n. Thanks. We can resume work easier once this goes in. \n. Running tests. Stand by please.\n. :+1: \n. :+1: \n. Thanks Daniel. This looks good. Shall we merge? \n. Perfect, thanks. I was just about to suggest the same :) \n. Couple of notes on this:\n1. Make sure that you account for transition events. I think Mfa, transition id consts are moved to a new interface rather than the abstract class we have now for webflow config.\n2. In light of our conversations on checked vs unchecked exceptions, I think there are few similar changes in the mfa branch as well where exceptions are made unchecked. Please do account for changes there as well if you spot any. \n. Updated docs at Configuring-Authentication-Events.md\n. Updated docs at Configuring-Authentication-Events.md\n. This is updated, but I realized I likely need add support for geolocation as well. \n. This is updated, but I realized I likely need add support for geolocation as well. \n. Need input on the following change:\nI had in mind that we should also track and record geolocation. The preferred way to do this would to use javascript's navigator.geolocation object. Two problems:\n1. The browser will prompt the user to share location if this functionality is enabled. I wonder if that prompt is going to be troublesome and/or annoying? Granted, one can always grant permissions and not have the prompt show up every time. Is that a concern? \n2. We'll need to find a way to pass the coords from geolocation back to the server, without the possibility of one tampering with the data in between requests. What might be a good way to do so? \n. Fair enough; I had in mind that maybe I could come up with a scheme to encrypt the data, but I dont think it actually is possible without a migraine, and I am not even sure it's really worth doing. \n. I was also able to handle 1 via turning off geolocation tracking by default, and exposing a property that would allow a deployer to enable it. Super simple. Docs are updated. \n. Shall we proceed?\n. Fair point. I can reverse. (Would rather us maintain a consistent inheritance hierarchy for exceptions where we can unless there is good reason to deviate) \n. Reversed unchecked exception hierarchy. \n. Shall we proceed?\n. Do we need this cherry picked into master? \n. Do we need this cherry picked into master? \n. This looks good. Got a couple of NPEs on tests, and then we should be good. \n. Thanks. \n. There is also the opposite case where an entry in the cache expires quicker than what CAS has it set and then is immediately removed from the cache. In such cases, the cleaner would have no way to actually process the entry to invoke SLO via the logout manager. So we need direct hooks for caches to capture such events and route them to CAS for processing. This is the motivation for #1254 \n. Moving to merge unless there are any questions. \n. This is already done here https://github.com/Jasig/cas/pull/1510\nYou should likely wait until that one merges in and then repost/update the pull. \n. Related https://github.com/maxmind/GeoIP2-java/issues/61\n. Thanks. Do you have a pre-configured client by any chance we could use to test this mode? \n. Also one other thing: could you repurpose your pull request to point to master instead? Since this is considered a new feature, we wont be able to include it in 4.2.0. \n. No you did fine. Just need to sync changes. \nIn your local clone, pull from master into your master branch. Then switch to your topic branch for this issue, merge with master. Then push back to your branch. This will bring you up to speed. \n. No worries. Thanks for your persistence. \nI had a brief look at the response builder and I think your original suggestion of creating a second ticket for the client might work. Will need access to a client to fully test and confirm though so if you have one ready, that would be very helpful. \n. Looks good. \nReviewing the other issue, I see that if we are in a valid association mode, the ticket is validated (used). The final response only passes back the ticket id when we are in non associated mode so the ticket should be available. \nSo in summary:\n1. Associated and valid: ticket validated and used but not passed\n2. Associated and invalid: ticket not validated, not passed.\n3. Not-associated: ticket not validated, passed\nYour patch changes 3 above right? Because if you are in non-assoc mode you still go through ticket validation AND then pass it back which of course fails. \nWhy do you need the ticket validated when you are in non-assoc mode? \n. Read this more; I think you only need to validate the assertion because you want an identity passed based on the CAS validation assertion and not based on the service identity. @leleuj what do you think? \n. Excellent. Thanks. I'll some tests. \n. Got the test deployed and started testing. I see the failure. Will investigate. \n. Btw, very nice client. Easy to set up and test. Much appreciated :) \n. > Per the spec, i think CAS only need to validate the signature\nThat's probably the best option. I'll dig around the spec and see if I can wrap my head around what validation steps need to execute. \n. So, found a possible easy solution. How about this: if we are in non-assoc mode, rather than validating the ticket, simply skip it and expect it to be validated by the client later. \nSomething like:\njava\n            if (associated && associationValid) {\n                assertion = centralAuthenticationService.validateServiceTicket(ticketId, service);\n                logger.debug(\"Validated openid ticket {} for {}\", ticketId, service);\n            } else if (!associated) {\n                logger.debug(\"Responding to non-associated mode. Service ticket {} must be validated by the RP\", ticketId);\n            } else {\n                logger.warn(\"Association does not exist or is not valid\");\n                successFullAuthentication = false;\n            }\n. Closing in favor of https://github.com/Jasig/cas/issues/1564\n. Thanks!\n. Agreed. It's much leaner this way. Less noisy :) \nOne of the things I really miss in the Java platform is extension methods like C# does. I imagine we could have cleaned up the codebase much more if we had something like that. \n. No particular reason. Saw an open issue and took it up. \n. Of course, I realized that we now have a policy for oauth codes which I had to do as part of moving around exp policies for proxy tickets, so this was just a natural extension of the same feature. \n. Yup. Will do. Tnx. \n. Updated docs\n. @ardias You may want to test the changes here, which are complementary to what you have now. \n. @ardias Have you had a chance to try this? \n. You mean on the server side, or the client? because in your app, the verify() method is already getting called I believe. \n. OK. very good. Is that something you'd be interested to work on? and if so, shall we merge this so that you can resume? \n. Understood. Appreciate your time. So tentative release date for 4.3 is sometime late May 2016. So you have plenty of time to knock this out. I'll ping you from time to time to see whether you need any help, and feel free to post an update on the same issue here. Thanks again.\n. I should note that I am in the process of reconciling our present state of CAS configuration to become much more dynamic and compilable. The goal is to eventually enable something like @RefreshScope. \n. What remains is:\n1. The management webapp.\n2. Possibly *-servlet.xml config. \nI am going to test as many modules as I can, and will continually update this pull. \n. There are a number of ways you can override bean definitions:\n1. Any bean defined by the Java @Configuration can be overridden by name. The same exact way you do today, for instance, with a new bean definition that points to a different class with the same bean id. The Java config is read, and the xml context is used to override anything that is already available in the context. Just remember to keep the same bean id. (In fact, audits were one of the first things I tested, and even though the default bean definition is via Slf4J, the xml context you import is perfectly able to override it. Core support for this particular example is there) . So not much different at all from what you do today. At all. \n2. You could define your own @Configuration class, and define the same bean id, with a different structure and class. \n3. Ideally though, we should strive to allow deployer control over the context purely over cas.properties. So that we can reload those beans later when a property changes. Suppose you decided to change the connection string for your audit database for whatever reason, or change your TGT exp policy, or take out an ehcache node for instance, etc. The less your customize XML and more deal with cas.properties, the better we can help with those scenarios without asking you to restart the server. \n. I will need to go over the -servlet.xml files to make sure most XML context is removed, but this pull in general is ready. We should likely merge this before working on MFA. I also did convert the OAuth changes @leleuj worked on for the new grant type. \n. Sure understood. Once you evaluate and do a bit of house cleaning, hopefully you might end up in that 95% :) \nMy take, and this is just a personal viewpoint is, \"nobody really wants to customize XML beans, and such...and nobody really wants to customize, period, as long as the solution does what they want\". So let's try to do that. There are cases where it makes no sense for the software to do so, or it's darn right impossible, in which we expect developers to customize, the 5%, but also expect them to know what they are doing! (i.e. You have to know what an annotation is!) It makes no sense to try to explain to them what a bean is, or that they should cut/paste XML snippets here and there, because adopters, most, don't care, and it's not their business objective anyway. So there are ways for you to customize. Perhaps they are a bit different or more difficult/modern than what most folks were used to. \n. WOW. That does seem like it's due for an overhaul! I guess I am looking forward to your many PRs then. :)\n. OK So a quick update:\n1. I opted to keep cas-servlet.xml around. There is some Spring magic going on in there that is not worth the trouble of porting over. I moved only some beans inside the file that refed properties. So we should be good. \n2. The only other servlet file kept is for oauth. Everything else is functional. \nShall we proceed? \n. @dima767 Questions for you so I can learn this better:\n\nOne possible way would be use @Conditional facility in CAS to specify conditions of defining core CAS beans ONLY if those beans are not already defined.\n\nHow does it know if \"those beans are not already defined\"? It can only know so, if it's already read and consumed the XML context right? so it can later compare? and if it has read the xml context, it will proceed to use the bean definition that is present in the XML context rather than using the one defined by @Bean, right? So what are we getting by using @Conditional?\n. > It can only know so, if it's already read and consumed the XML context right?\nI guess one possible answer would be that Spring might read the XML context, but it will not immediately turn it into an actual running context. So it can then later make decision about what to put into the context. In that case, we might be able to use Conditional fairly easily. \nExample might be: done define the default SLF4jJ Audit Manager, if a JDBC one is defined. \n. Yes it is. I think you should be able to extend the class, and override the bean. Just make sure you use the same ids for both. \n. Looks good. You should also update both cas.properties as well as the docs. \n. Made changes, and merged with master once. Pushed. \n. very good. I suggest you apply the same change to all other policies? \n. Sure this is a good starting point. Appreciate the patch. Whenever you get around to it, you should update all other policies as well. At this point, this is great but incomplete. \nThanks. \n. We are making some changes to the ticket registry API to ensure items are stored into the registry with their own expiration policy, rather than what's statistically defined in the cache. In view of those changes, I just want to add this note here, that certain registries do not support long values for idle/hard timeouts. I don't know which registry you use, but Ehcache and Memcached only support ints. Just be aware. \n. :+1: \n. The main components of this patch are:\n- TGCCipherExecutor and its parent BaseStringCipherExecutor\n- WebflowCipherExecutor and its parent BinaryCipherExecutor\n. Thanks. I'll work more on this tomorrow. You should also do a review of https://github.com/Jasig/cas/pull/1588 as that is crucial for the boot work to resume. \n. Thanks @scalding . Great work. Posted a few questions, but in general :+1: \n. Going to merge by EOD. Please let me know if that's OK with you.\n. @karlgrose This might interest you. \n. Going to merge by EOD. Please let me know if that's OK with you.\n. :+1: \n. Going to merge by EOD. Please let me know if that's OK with you.\n. :+1: \n. Going to merge by EOD. Please let me know if that's OK with you.\n. I guess we have never run into an issue where a parameter had mutliple values. That does need to be accounted for, certainly, but I suppose the real question is: in your case why do you end up with an array of values? Is that the behavior that redirect=true causes for you? \nI ran a quick search and nowhere in CAS is the flow url used directly. What happens if you try flowExecutionKey instead? Also, where is the code that duplicates the problem? Do you have a fork, etc that we could perhaps try as a sample?\n. OK. Thanks for being very thorough, appreciate it. The use case you have in the way that you are trying to extend the webflows is probably something that has gone unreported and so we never noticed it. \nSo thinking out loud here:\nI am personally a bit hesitant to change the flow handler or to even remove it because that might cause regressions we are not considering at the moment :) I do very much sympathize with you on the annoying part. Indeed. \nI propose as a first to try and see if the removal of the default flow handler of CAS causes any other weird issues. We likely need a battery of tests to ensure everything checks out correctly before falling back to the default behavior, OR perhaps a \"nicer\" option would to let the redirection logic be configurable both in the webflow config, and in the url handler. Expose a property that says allow redirect true/false which would then let you to control the behavior easily. \nHow does that sound? Have I missed anything? \n. Thanks. I think front-channel SLO is very much experimental at this point. @leleuj may know better. \nI'll look into options to allow this sort change easier per our discussion, but as you note, this PR looks fine. It will likely need to be ported forward as well. \n. With regards to 2), I'd just add that in a number of other cases CAS ends up building very large URLs that could potentially cause problems. The suggestion is to increase the header size allowed, since the default as you put is inadequate. This is in particular true in the case of CAS SAML functionality. So as long as you're at something like 10Kb or even 15Kb, you should be fine. (I have tested limits up to 20Mb and it (Tomcat and Jetty) checks out well) Using session-side storage creates other issues that are just not as easily solved. So I am not personally inclined to switch this out unless there is very good reason to do so, in comparison. 90% of deployments, as we are aware dare I say, have no use for extending the webflow to the extent that you are doing now. You're within the 10%. So, what we can do is to help you as much as we can to easily extend CAS for your special use cases without affecting the default for the other 90%. \nOf course, this has nothing to do with 1. Your explanation is perfectly adequate. I'd just want a few more eyeballs and +1s on the issue before we proceed. Thanks for your patience with us. \n. Also related to https://github.com/Jasig/cas/issues/1596\n. :+1: \n. @frett This should likely solve the problem with SSO sessions not working under MFA. Would you please merge and re-test? \n. This will need some more work. Going to wrap up tomorrow. \n. This is ready. \n. Holding off on this one for now. May have found an issue with attribute release. \n. Related issue #1655 \n. Going to merge this one in, so we can start focusing on #1655 \n. No worries; we are not that picky :)\nSo, I take it with this patch I should be able to use the same openid client and run through it fine? \n. Excellent. I'll try to run through this but it looks very good. :+1: \n. Tested. Works good. Thanks again. \n. Need to move a few dependencies around. \n. All good. Moving fwd. \n. Good catch! :+1: \n. This will need to be ported forward. \n. By me , likely :) Just an announcement so others get the notification. \n. This one does not need to be ported fwd. All good. \n. Yup. On it. \n. I'll fix the failure, merge and port the change fwd. \n. :+1: Fix the build failure please.\n. Thanks.\nThis is fixed in master apparently, already. So no porting is necessary. \n. See https://logging.apache.org/log4j/2.x/manual/configuration.html\n. Looks good. Thanks!\n. :+1: \n. :+1: \n. This looks fine, but wouldnt you rather put the url directly in the flow scope? so that existing overlays can function as they did before? Should this sort of thing be handled inside some sort of action class? \n. PS I can cherry pick into other branches. \n. Also, this may be nitpicking, but I'd much rather not \"program in XML\" where and if possible. Your call. \n. Will merge and cherry pick before tomorrow's release of 4.1.6\n. Great. I'll check the snapshot later when it's out to be sure. Thanks for confirming this. \n. :+1: \n. Thanks Dima.\nUpdated milestones.\n. Note the boot version already accounts for this sort of thing.\n. :+1: Looks good. \n. Thanks for the contribution. Very much appreciated. \n. Thanks Dima. \n. Tests should be all passing now. I'll continue to test this branch with various modules. @mindblender is also working on a few UX related items for the main and management webapp. We hope to have something available by the end of next week. \n. I am working on a few UI-related changes on the mgmt webapp to make sure Boot works fine there. barring other issues, could we tentatively agree to get this merged by say, May 7th? \n. Heads up. Barring any other issues, going to move up the merge schedule to this Friday, ~~May~~ April 29th. Merges with master are starting to get unruly :)\n. Yes! :) The weariness from all this merge noise is starting to show.\nGoing to work on test fixtures to get this and Travis ready before then.\n. All systems go. Let the countdown begin. \n. Will backport into 4.2.x\n. Proceeding based on the approval of #1664 since the changes are basically mirrored for 4.2.x\n. :+1: Thanks Dima. Looks great. \n. Looks great. Few minor comments. \nAlso, could we get this behavior documented somewhere? \n. I suppose for docs you could choose the UI customizations doc or the webflow config docs. Both seem like good candidates to me. Webflow might be more appropriate for this kind of thing. They are all inside the docs module of course under the installation folder. Thanks! \n. Awesome. Thanks :+1: \n. Can be ported over to master. \n. That's fine with me. Sure. It's evident that we have to think through this a bit more so ,+1 on the merge assuming build failures are not related. \n. Looks like Travis is happy with the changes. Shall we proceed? \n. I think I might have a simple solution for the issue discussed here on this thread. Going to prototype some more once we are done with oidc. \n. You will need to:\n1. Open up a separate issue\n2. Attach logs\n3. Your configuration\nThanks. \n. Awesome!\n. by the way where you able to get sun.security.krb5.debug working? \n. You should be able to see things like this:\nhttps://blogs.oracle.com/blogbypuneeth/resource/kinit_with_keytab_successful.jpg\nA quick confirmation would be: do the logs go away when you turn that setting off? If so, that says it. \n. Perfect. All is well that ends well :) Thanks for checking. \n. That is possible yes. This is a leftover setting from the past and I am not sure if it was ever used. It tries to do the same thing, but base on your report, looks like it does it too late. \n. Looks great to me. I'll leave it to @frett to verify and proceed. \n. Working on a few test cases that are now breaking when registries attempt to delete TGTs and children. \n. So the trick with that test is that, it actually wants a broken URL. The story is: here is a URL we are trying to reach out to where it has no valid cert publicly, but we have a valid cert for it in a local truststore that we use. So the test is trying to verify that CAS can use its local truststore to reach out to the URL and use the cert in that store. \nOf course, relying on an external resource to verify that for us is painful because it can break at random which appears to be the case here. \n. Pushed some tweaks; going to let Travis do its thing. \n. All tests passing :) \nSo to get the SSL test fixed, I pulled down the new cert for the endpoint, imported it into the local keystore of CAS and removed the previous entry. Then modified Travis to enable a java.security file in the installed Oracle JDK to allow the cert o the loaded (because the cert uses algs and such that are not supported by JDK8 by default) \n. @dima767 What you need to do is, copy this file:\nhttps://github.com/Unicon/cas/blob/remove-ticket-delegators/etc/java.security\nOver to JAVA_HOME/jre/lib/security\nYou already should have a copy of that file locally. The new one you're going to copy over it has the following disabled:\n```\njdk.certpath.disabledAlgorithms=MD2, MD5, RSA keySize < 1024\njdk.tls.disabledAlgorithms=SSLv3, RC4, MD5withRSA, DH keySize < 768\n```\nTravis does this automatically. \n. Going to merge in, so we can resume testing on master with all changes in one place. \n. While this is fine and thank you :), note that this sort of change is planned to be handled by CAS automatically, so you wouldnt have to declare that element manually. See https://github.com/Jasig/cas/issues/1705\n. Looks good. Fix the build failures please.\n. No problem. Please be sure to submit before this weekend. The branch is going to merge with master soon and then it will go away. If you want to wait and let the merge happen, that's fine too. Thanks!\n. Refactored common LDAP functionality into a core module where LdapUtils handles most of the usual LDAP tasks. Cleaned up the LDAP Person Registry and the AUP version of that to use the new changes. \nGoing to let Travis run before taking further action. \n. Sounds good. Let me know if you need any help. \n. This looks like it's ready.\nDo we need to update the docs?\nDo we need to update the app.properties? \nI know this is targeted towards letsboot. Could I ask you to target it against master? I can live it with it as is, and cherry pick it over to master. \n. Porting fwd. \n. The behavior proposed here is also consistent with how 5 works. No porting is needed.\n. And fix the build failures please. \n. I believe that came about with the boot changes to make the code base more annotation friendly. Oidc makes similar changes. Controllers are expected to be annotated and should declare their own handlers via RequestMapping annotations. The patch here really addresses a regression with the boot changes. \n. Excellent. Thanks very much :+1: \n. How? \n. check the encoding on the messages file for your locale. \n. File a separate issue please. We should force the view resolver to use UTF-8 when possible. \n. @mindblender Travis was happy with the changes! thanks. \nNote that CAS is now able to generate CSS files dynamically as part of the gradle build, into the war. We are using sass to generate and clean up CSS generation. There is more to come and I will continually update/test this PR. \n. Thanks for the review. I'll start to review the JWT module here shortly and see how it might work. \n. Looked at pac4j-jwt. Changes there are not applicable to this support. Reasons:\n1. pac4j focuses on client functionality. It accepts tokens and decrypts them, or verifies their signature. Not the case here. We are producing those tokens. \n2. The JwtGenerator class is presently too coupled. For instance,  JWTs are required to be signed. Not the case with OIDC. \n3. OIDC claims are not all supported by JWT in pac4j, which makes sense since it simply focuses on a generic JWT\n4. No support for JWKS. \n. Yes a big upgrade is needed. I am happy to start filling issues and work on them later as well but I am not sure they can make the cut for 1.9. Once the enhancements are available, we could always swap them out when 1.10 is available. \nP.S I still think signing is required. It seems that in pac4j encryption is optional. You always sign nonetheless. \n. Working through the merge. Should be ready by EOD, but let's discuss the attribute issue in parallel. \n. Pondering about this a bit more, I think the callback resolver that we have today is needed regardless if we are to support some of the other OIDC extensions such as prompt and max_age as they likely need to be translated to renew and gateway features of the CAS protocol that would then need be handled via the callback resolver. \n@leleuj are you OK with the changes here based on my recent comments and feedback?\n. @leleuj ping. \n. Moving to merge by tomorrow evening. \n. Note to self mostly. This should be ported back as far as 4.1.x. I'll cherry pick when we merge. \n. Cherry picked to all. \n. Merging in. All tests pass. \n. Cool. Could you fix the compile errors? \n. Ok. Let's let it hang until this is resolved https://github.com/vt-middleware/ldaptive/issues/82\n. Share logs plz. \n. Cool, thanks. I just wanted to see how easy this would be to duplicate. Fairly trivial as it turns out.\nWhat you want to do is turn up logs for org.springframework.webflow or some such, to trace the flow after the account state is handled. Set that to DEBUG and post back please. \n. This works perfectly fine as far as I can see. You are just missing properties. Specially this one: passwordPolicy.passwordPolicyUrl\n. To be fair, I didn't look to see how the flow scope is populated with that property, but that's what the issue here is. The views are fine it seems. \n. Yeah I think so. \n. Before pressing merge, could I ask you to:\n- Reverse the change\n- Find your application.properties file and set spring.thymeleaf.encoding=UTF-8.\n- See what happens\n. OK, thanks. What you want to do then is:\n1. Add a field to the class of type ThymeleafProperties and autowire it.\n2. Use that field to do: setCharacterEncoding(thymeleafProperties.getCharacterEncoding())\nThat should work, rather than hardcoding the encoding.\n. The gradle-witness plugin: https://github.com/WhisperSystems/gradle-witness has the following shortcomings:\n1. Does not deal with transitives too well\n2. Does not work well against multi module repositories\n3. No way to disable it\n4. No way to ignore project-level dependencies that are inside the same project\nThis patch takes advantage of gradle's native buildSrc method to introduce the plugin. \n. Closing this for now. Might have a better way to handle this sort of thing. \n. Thanks. Fix the failures please.\n. Also fix the other compile errors plz. \n. Great! thanks. \n. Will port fwd to master. \n. Should this fix be backported into 4.2? \n. Great! Thanks. \n. Done. 4.2.2 shall have it. \n. \n. \n. \n. \n. There is still some cleanup left to do here, but I am for now going to let Travis run tests. \n. All done. \n. This should already be handled via:\nhttps://github.com/apereo/cas/blob/4.1.x/cas-server-webapp-support/src/main/java/org/jasig/cas/web/support/CookieRetrievingCookieGenerator.java#L66\n. Also, you can't quite freely set that flag because you need to ensure the container supports that method based on the servlet spec. 4.1 does not have that requirement so there are additional checks in place to ensure CAS wont crash. \n. Ah I see what you mean. So let me ask:\nWhen remember-me is set, and this call is executed:\n final Cookie cookie = createCookie(theCookieValue);\nDoes createCookie not take into account changes that were set by the constructor? If not, then yes we could add the same check into addCookie and possibly then remove the check from the ctor. \n. Cool. Thanks for the update. Investigate away :) \n. Looks good to me. Could you update the pull with the proposed changed? That should provide a clearer view on how things are organized. \n. Great. Looks fine. \nWould you be willing to submit the same changeset over to 4.2.x and master? Or would you rather just do one? Or would you rather we port things forward manually by cherry picking? \n. Thanks!\n. I'd like to push a few commits into this branch in order to accommodate the same sort of change for all other registries. My concern is, if we merge we might have to yank all this out in order to support all registries, and my thought is to attempt to do this at the ServicesManager level somehow. Not sure how yet, but I'd hate to waste this effort on a change that is likely to be factored out later. \n. Sounds good.\nWhy do we need the size method? Couldn't that simply be load().size() ?\n. OK. Here is my plan:\n- Going to review Daniel's changes and test. If all checks out, merge into master.\n- Merge master into this branch and bring it up to speed.\n- Organize things a little bit better as we discussed with the component move, etc\n- Leave the branch hanging until you get to it on Monday and see if we can work on this more.\nSound good? \n. Made some positive progress. Changes coming up shortly. \n. Yes exactly.\nTurns out Configuration classes dont pick up ctor injections. At least not yet. I remember Spring v5 helps with that somewhere. So switched back to Component, which then implied that the component may be reusable by others, and so removed public from the class defn too. \n. Drawback there possibly is, forgot to add, that the prop that controls the initialization behavior cannot be refreshable, but of course it makes no sense for it to be refreshable :) So all is well that ends well. \n. Regarding codacy, it will be hit and miss for a while. (Read annoying, yes!) My goal is to ultimately get the checks to match checkstyle so that we can visually see on the PR what's going on with the code.  On this PR though, things should be peachy now. \n. > I guess it is now the users' job to create the xml configuration for CASPRIVACY similar to TGC.\nNo it never is. There should be props available to set this. If not, you may want to submit a PR for that issue as well :)\nThanks again\n. Failure is unrelated. \nNo such thing as WIP. Do or Do not :) \n. Will port forward. \n. This may be ported back to 4.2.x\n. Going to let the pull hang for a while and make nice with Travis. \n. Should be ported back to 4.1 and forward to master.\n. Handled via https://github.com/apereo/cas/pull/1825\n. @cslzchen Could you submit a pull request for 4.2 as well? Thanks. \n. :+1: Very nice!\nI'll get this merged in the appropriate branches later this evening. \n. Changes are ported back into 4.2. Will take care of 4.1 tomorrow morning. \nTested 4.2, works as advertised. Thanks Dima. \n. Awesome, thank you. \n. Thanks again. Merged. \nPS This is already done for master. \n. Support is enabled by adding the following module into the overlay:\nxml\n<dependency>\n    <groupId>org.apereo.cas</groupId>\n    <artifactId>cas-server-support-yaml-service-registry</artifactId>\n    <version>${cas.version}</version>\n</dependency>\nIn application.properties:\n``` properties\nCAS components mappings\nserviceRegistryDao=yamlServiceRegistryDao\n```\nPath to the service definitions directory is controlled via:\nproperties\nservice.registry.config.location=classpath:services\nA sample YAML file follows:\nyml\n--- !<org.apereo.cas.services.RegexRegisteredService>\nserviceId: \"testId\"\nname: \"YAML\"\nid: 1000\ndescription: \"description\"\nattributeReleasePolicy: !<org.apereo.cas.services.ReturnAllAttributeReleasePolicy>\naccessStrategy: !<org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy>\n  enabled: true\n  ssoEnabled: true\nThe service registry is also able to auto detect changes to the specified directory. It will monitor changes to recognize file additions, removals and updates and will auto-refresh CAS so changes do happen instantly.\nThe naming convention for new files is recommended to be the following:\nbash\nYAML fileName = serviceName + \"-\" + serviceNumericId + \".yml\"\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 24\nAdded 20\n\n```\nSee the complete overview on Codacy\n. What happened here? Why close?\n. Oh quite the contrary. We love lingering PRs :) thanks for keeping up with this . \n. Great! Sign the ICLA please and we shall merge away. \n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n. Cool. You probably should also update the docs.\nAnd have you signed the ICLA? I forget. \n. OK. Could I ask you to get the form from here and then submit it via email?\nhttps://www.apereo.org/licensing/agreements\nLet me know when you have. PR looks great. (You should only have to do this once) \n. Or, you could alternatively use this:\nhttps://www.apereo.org/licensing/agreements/icla\n. Status check: @tsschmi were you able to sign the doc? \n. Thanks. I'll give it a few more days, and then will probably will take up your suggestion and make the change. \n. Merged out of band via https://github.com/apereo/cas/commit/5f6dc4eef052322e4562a541f5d8be9ab9282187\n. This is going too need a bit of tweaking to ensure JAR does and can actually compile if it's not there to begin with. \n. This is also relevant for #1772 \n. Thanks! \n. Could I ask you to sign the ICLA and then post back here when you have?\nhttps://www.apereo.org/licensing/agreements/icla\n. Status check: @charlesheidemann  were you able to sign the doc?\n. Nothing. Just was waiting to hear back from you. Thanks. \n. Thanks. \n. Test with RC2. If the bug still persists, file a PR please. Not an issue. . Thanks \n. @zawn when you get a chance please sign this:\nhttps://www.apereo.org/licensing/agreements/icla\n. Thanks! Keep the pulls coming. \n. Block the bot on github.\n. Per discussions during the last call, this is really done. Going to let it hang and have you all review. If it's easier to push to a branch under apereo, please let me know. If you would like to learn more about the changeset other than the general high level idea noted in the description, also please let me know.\n. Going to do some testing this week; lets tentatively plan to finalize this by Friday and see how it goes. \n. Heads up; Planning to merge by Monday next week.\n. Prepping for M3. Going to merge. \n. Thanks again!\n. by the way, if you have time and are willing to look at a few other JPA issues you submitted, that would be terrific. \n. This looks good to me. thanks! Fix the build failures and we should be able to proceed. \n. What is the NAS identifier you mean to use that requires String anyway? \n. I see you have made a few adjustments. Great! Merge with 4.2 once and we should be good. Thanks. \n. Sure. Done https://github.com/Unicon/cas/blob/69e84e644f1cdb18f1d1d316198a6cb2bb154688/cas-server-documentation/installation/Maven-Overlay-Installation.md\n. Sounds good. I'll leave this hanging. Got an ETA? \n. Opened up https://github.com/pac4j/pac4j/issues/606\n. Great. Thanks for the update\n. Should be ported forward to master. \n. What is the ambiguous map issue exactly? \n. Got it. Thank you. \n. @rkorn86 in light of M3 coming up, do you think you'd get a chance to revisit this PR some time today,  by Monday EOD? \n. Gotcha. What might be reasonable timeline for you to review this next weekend? Alternatively, we could proceed with M3 and review this afterwards but I don't see a whole lot of sense in that. \nsch\u00f6nes Wochenende!\n. I am not sure when ldaptive 1.2 comes out. Given that, I'll give this a few more days to see if we can find a better answer. The danger here is, if we merge and ldaptive doesnt release for another 3 months then that delays the 5 release because we'd rather not ship with a snapshot. So lets wait a bit more.\nVery much appreciate the work you have done here. \n. @rkorn86 could you merge with master once please? \n. Appreciate it. This should make it JIT for M3. Vielen Dank. \n. Perfect. I'll let travis do its thing and then proceed. Thanks again. \n. Thanks very much. \n. Thank you very much!\n. Going to port to 5 and retest sometime this week. \n. Thanks!\n. Thanks very much for the pull. I'll need to take a look at the webflow module and see why it's failing to create those SWF changes. Those should all be automated. \n. Dont think so. At least, it's not obvious to me why that would have any effect. Have you tried this line in your config?\nReplace  `viewLoginForm` with `startSpnegoAuthenticate`, if any.\nThat's what the auto-configuration step does not do. \n. OK. Strange. This definitely needs further review.\nCould I ask you to try it based on the way the docs suggest, but turn up logging for org.springframework.webflow to at least DEBUG? That should further explain what SWF is actually doing. \n. I'll run through this myself as well. Been a while since I have looked at this one. \n. No worries. We can leave the pull open by then. At least for the time being, this seems like a decent solution until we get to the bottom of this. Thanks again. \n. To elaborate further, the confusing part to me is, I am not seeing how the flow would jump to startSpnegoAuthenticate. Even if you declared it before that viewLoginForm, nothing before that state navigates to startSpnegoAuthenticate. So we'll need better logs to figure this out. All in good time. \n. Gotcha. When the time comes, please do share logs so we can spot the differences. I am more than glad to adjust the auto configuration logic to create those actions before that particular state, but I am more curious how it actually used to work in 4.0, and not having a proper test/dev environment to set this up makes that difficult. \nAppreciate your help. \n. Merged out of band. Be sure to test again please when 4.2.4 comes out. \n. What went wrong here?\n. That's fair. Could we expect another patch for master? \n. You should design the patch against master. Not a version. \n. Looks good. thank you!\n. Thanks very much!\n. This will need to be ported back into 4.2.x\n. This is great. Thanks. Make sure you also update the docs with the new properties. \n. Ah, never mind. You have already. Thanks again. \n. Thanks very much for the patch. Before we proceed, could I ask you to provide the following?\n- a clear explanation of the problem and when it manifests, how.\n- a clear explanation of why said problem is solved by your patch. \n. Great. Fix the build failures please.\n. Thanks very much!\n. @wcrowell reissue another PR please, select the target branch to be 4.2.x\n. > wants to merge 288 commits into apereo:master from wcrowell:4.2.x\nClose and reissue. Make sure you pick the right target branch. Not master. 4.2.x.\n. Cool. Next, fix these: https://travis-ci.org/apereo/cas/builds/153038567\n. This looks good to me. Thanks very much! I only see a few minor formatting issues, other than it all checks out. \n. Yes. Definitely. You have a few unused imports, etc. Wouldn't want those. Just keep pushing to the same branch as you fix.\n. Thanks. Build passed just fine. \n. Thanks @dima767 Looks excellent. Few minor questions here and there. \n. Great. Thanks very much!\n. Fantastic. Thanks again. \n. @leleuj Do these endpoints need to be updated https://apereo.github.io/cas/development/installation/OIDC-Authentication.html ?\n. Also, I forget: did you update the mgmt app to account for the new OIDC field you added? \n. Very good. Much appreciated.\nSo, the entire batch of tests you have at the moment: everything passes for master? \n. Perfect. Thank you for the good news! What is your email address by the way? And if you find the time, could I ask you to jump on Gitter?\n. Very nice! Thank you. \n. Lots better. Thanks.\nNext, you want to write some docs. Add a new MD page similar to other registries. add a link to it in the sidebar, and document what the registry is, what it does, why it does it, etc. Follow the same pattern as other docs.\n. Dont forget to also update the properties in the docs as well. List them all under a relevant title.\n. This looks perfectly ready to me. Just remember to update docs and post back. Should be good to merge. \n. Hello. Have you had a chance to add docs for this PR?\n. if you look at the cas-server-documentation module, you will find markdown files that are the docs for the master branch (which is cas 5). Use those as a sample. You may want to start by copying a doc that discusses a ticket registry into a new file for redis and add content. When you're done, make sure you also update the sidebar to include a reference to the new page.\nAlso, given our release policy this change will likely go into 5.1. You have about a month or so and I may have to ask you to merge with master once more when we are ready to baseline this. \n. hey @izerui could you please merge with master once and resolve conflicts? . Looks good to me. Thank you. Would you want to apply the same tactic to the master branch as well with a PR? \n. > I can increment the deleted ticket count when I encounter a Proxy Granting Ticket if you want.\nYes, please do. The count should reflect everything that is actually deleted. \n. Merge with master once please.\n. What exactly is the point of this PR? \n. OK, and why do you have your own tokens?\n. It is a ticket. I am just wondering why you saw the need to create your own ticket type.\n. Or was that just an example you were using to explain a potential issue? \n. OK, thanks for the explanation. Why not use the existing OAuthCode implementation? Why did you create your own impl? \n. OK. Lets fix the build failures first. Second, please add a few test cases to demonstrate the change.\n. Because that's not how oauth works. You don't verify the access token on the server side at least. You ask for a code, and in exchange for the code you get an access token. access token is sort of like your TGT. If you are doing anything different, you are likely abusing oauth :) \n. In your case, CAS in OAuth mode acts as both a resource server and authz server. When you get a code, that's when CAS becomes an authz server. When you exchange that code for an access token, that's when CAS acts as a resource server. You're right. I was wrong to phrase my earlier statement that way. What I should have said was, if you are using the java cas client to handle this sort of flow, then yes you're likely to run into issues and need custom work/extensions. The client is designed to handle CAS and to some extent SAML protocols. Not Oauth. But at least it looks like you have done it successfully somehow, and it's not something I would have done or recommended.\n. I think I understand what you've done. Thanks for taking the time to explain it to me. This is probably one of those cases where github pull requests and such don't make it comfortable for users to carry on a conversation about use cases and architecture! But either way, please continue with the PR. \n. @leleuj Having looked at the PR, it seems like it would be best for now to leave this closed and treat as more of an extension. If we want to think about allowing the Java CAS client to handle OAuth protocol features of CAS, we can revisit that later. Does that make sense to you? \n. @zawn thanks for the contribution, very much. I don't think we are ready to accept this just yet simply because there seems to be quite a gap between your use case and how we understand its implementation to actually be. We revisit this later. If you'd like to track this, please open an issue, and clearly describe the problem and what you wish CAS to do. \n. Fix the formatting issues first so we can review. Thanks. \n. This will not make the cut for 5. I assigned this to @leleuj who's more familiar with this area to review.\n. Also I am not sure it makes sense for a refreshToken to ever expire after # number of attempts. I get that you are trying to make the organization of settings more consistent, but that change would not make sense to me. \n. This will need to be rebased\n. What exactly does this PR accomplish? \n. When the user does not configure the property the collection of attributes simply remain as empty. They are not null, and should not be null. If nothing is defined, you don't get a DAO. I am not quite sure what this PR actually does though. What problem are we solving here?\n. Ah, I see what you mean. So person directory attempts to use attributes as-is when no mapping is defined for JDBC DAOs. Correct? \n. This makes sense to me. Thanks for the contribution. Fix the problems reported on the PR and we should be good to merge. \n. No worries. I understand:) \n. Merge with master.\n. Merge with master.\n. Doesn't look like you have. Pull from master once, and then merge. Then push back to the same branch. \n. Thanks. Ported to master/5 as well. \n. Going to port back to 4.2\n. Why was this closed?\n. @leleuj are the changes here better suited for something like 5.1?\n. Do breaking changes affect CAS configuration? or these mostly internal components that are now updated? \n. Very good. As long as there are no breaking changes, I am fine with this. Thank you. \n. Yes, to clarify: a breaking change to me either has to do with user-focused configuration and properties, or a \"public api\" that is expected to be used or extended by the user. Given stormpath is a fairly low-key feature, I am not to worried about that bit.\n. This is not the way to merge. http://stackoverflow.com/questions/7244321/how-do-i-update-a-github-forked-repository\n. What was the previous version exactly? Where did u find it from?\n. Yes those should be accounted for as well. Is there a way we could produce unit tests to account for the correctness of this patch in the future?\n. @marcmos Going to merge. Thank you. When you find the time, please do submit another PR for the other files with the unbalanced closing tag. \n. This patch breaks the SSO Sessions Report. Simply pull up /statistics/ssosessions in your browser and observe the error.\n2016-10-02 10:21:22,200 WARN [org.springframework.web.servlet.PageNotFound] - <No mapping found for HTTP request with URI [/cas/statistics/ssosessions/getSsoSessions] in DispatcherServlet with name 'cas'>\n. Thanks Bill. \n. Final thoughts; we good here, or is there still work being done on the error handling and SWF? \n. I can definitely take a look. How would I reproduce this? use Facebook as a provider and force a bad scope? \n. Cool. Lets merge then, and diagnose further.\n. Yup. That could be a quick fix; I am slightly more worried about the error handling portion. Let me take a quick peek and I'll post back with your demo's results. \n. In ClientAction, remove the following from the catch block:\nresponse.flushBuffer();\nfinal ExternalContext externalContext = ExternalContextHolder.getExternalContext();\nexternalContext.recordResponseComplete();\n. Also, we should do a little bit of refactoring:\n1. Examine the http request in client action and if the request has error codes, etc, immediately route the flow to the STOP flow id, and pass along model variables to note details on the page.\n2. Clean up the pac4j resolver a bit to share logic, since it does mostly the same stuff.\n. @leleuj did you want me to continue with a PR, or would you rather handle the above ? \n. I made a few tweaks to better handle error handling. Going to push shortly.\n. Thanks @philliprower \n. This is great. Where is the cassandra ticket store though? \n. Or to clarify, are you running with Infinispan's support for Casssandra? \n. Cool. Any chance you can share that as well? \n. Also could you clarify this statement please: the serialization should be tested for any different types used ?\nTested by whom? Tested where? Are there test cases here that would facilitate that? \n. Yes to all, and the plan sounds great. You can figure out the impls via the Javadocs: https://www.javadoc.io/doc/org.apereo.cas/cas-server/5.0.0.RC3\nI should also point out: while this change is more than welcome there is a very good chance that they will be removed, left untested or unmaintained if there is not a solid implementation of a ticket store actually verifying all of this in action. At this point, we just have a theory on why these annotations are needed, and we have some tests that verify the underlying objects can be serialized correctly. What we don't know, or shall forget is why are these even necessary to begin with! So I very much encourage you to provide us with the ticket store as well. Otherwise, all bets are off really.\n. And rather than having folks \"remember\" to test new implementations, a ticket store that exercises all of this in action really would go long ways to improve testability. Automating the entire process via a solid use case is key to making this work long-term.\n. There is not a single thing in your statement that I can find to disagree with :) By all means, assuming others are OK as well, proceed. My only suggestion is: submit small [as the change allows] incremental PRs one at a time so we all can understand and digest the change better. I can theorize that you might be submitting 3-4. Add those who are interested as collaborators on your branches (github allows this) so we can work with and help you as we make progress. \nI do have a few questions for you though:\n- Where or what is this large scale you speak of? Which entity/company/org? For how long? A little bit of bio would be helpful.\n- Are you currently running 5? In Test/Dev environments? If so, what's your experience been like so far? \n\nAlso, we use Cassandra as database backend and would like to make our implementation of the TicketRegistry available to the community.\n\nThis is absolutely terrific. Please do. We have options based on Infinispan, but a native well-tested implementation used at large scale is fantastic. \n\nTicket interface, instead of having one boolean method \"isExpired\", should have a method \"getExpiryTime\" that calculates the expiry time of the ticket based on the values of timeToLive and timeToIdle. This value can be stored in the database, and depending on the database implementation, a query can be executed that returns only expired tickets.\n\nI understand. This is necessary to let the cleaner run efficient queries and let the database handle the processing, rather than having to retrieve all tickets and then letting CAS calculate expiration policies. Sounds good to me. I can also theorize that this might remove some of the issues we have had with JPA ticket locking. \n\nTicketCleaner, instead of retrieving tickets for cleaning by calling the method \"getTickets\" should be calling a method like \"getExpiredTickets\" that in the AbstractTicketRegistry can call \"getTickets\", but depending on the implementation can return a set of tickets that are expired.\n\nAbsolutely. Most impls should support this. Memcached might be the only exception and that's ok. \n. Very good. Look forward to your updates.\n. Yes, certainly.\nThose objects are not JSON-serializable, so what you need to do is:\n- Turn their type into a setting that can be serializable. Perhaps a simple String, which the google service factory already receives:\njava\n    @Bean\n    @RefreshScope\n    public ServiceFactory googleAccountsServiceFactory() {\n        final GoogleAccountsServiceFactory factory = new GoogleAccountsServiceFactory();\n        factory.setKeyAlgorithm(casProperties.getGoogleApps().getKeyAlgorithm());\n        factory.setPrivateKeyLocation(casProperties.getGoogleApps().getPrivateKeyLocation()); //here\n        factory.setPublicKeyLocation(casProperties.getGoogleApps().getPublicKeyLocation()); //and here\n        factory.setSkewAllowance(casProperties.getSamlCore().getSkewAllowance());\n        factory.setBuilder(googleSaml20ObjectBuilder());\n        return factory;\n    }\n- Remove:\njava\n    private PublicKey publicKey;\n    private PrivateKey privateKey;\nFrom the factory and the builder.  Pass along the string fields into the builder.\nIdeally, you should refactor the code so GoogleAccountsServiceResponseBuilder becomes a Spring bean created via @Bean and is injected into GoogleAccountsServiceFactory. \n. So ideally, what you should end up with is:\njava\n    @Bean\n    @RefreshScope\n    public ServiceFactory googleAccountsServiceFactory() {\n        final GoogleAccountsServiceFactory factory = new GoogleAccountsServiceFactory();\n        factory.setGoogleAccountsServiceResponseBuilder(googleAccountsServiceResponseBuilder());\n        factory.setBuilder(googleSaml20ObjectBuilder());\n        return factory;\n    }\nand create a bean googleAccountsServiceResponseBuilder and inject those settings into it. That's much better. \n. Thanks. We'd love to review. Can you please fix the build failures please?\n. Also one other thing: we would like to be able to make adjustments along with you on this changeset and help you out, and not have to ask you to fix this and that. We can do this in 2 ways: you can add us as collaborators on your branch, or we could target this for another branch here other than master so others can have rights to make changes.\nhttps://github.com/blog/2247-improving-collaboration-with-forks\nhttps://help.github.com/articles/adding-outside-collaborators-to-repositories-in-your-organization/\n. Thanks for adding me. This took quite a bit of work, but I should have made some decent changes. Summary is:\n1. Switched to apache for generating equals and hashcodes. Please use that style from now on to be consistent. \n2. Thanks to IntelliJ, fixed all of the styling issues. Do not turn off findbugs or checkstyle. You should follow the rules please.\n3. A number of objects could not be properly serialized. Lots of tests were failing. Think I managed to fix those.\nThis is still very much a WIP, but I am going to push to the branch to trigger the build.\n. Also you should almost always on a daily basis merge with master. Holding onto changes in a local fork for too long will make merges/rebased very very difficult if not impossible.\n. Thanks for adding me. I'll continue to make updates here and there; if others wish to be added they can certainly put a comment on this thread as well. \n. OK passing build. Note that I had to massage the @c setting to account for JSON serialization of registered services. As long as tests are all passing, we should be good.\nThanks very much for the great work. Take a pass at the latest changes, and make adjustments as you see fit. We should be targeting this for 5.1, and in the meanwhile, you may want to start working on the ticket registry changes. \n. Hey folks, just checking in: have you started working on separate pull requests on the ticket registry and the cleaner? Would be nice to see them hanging before we plan to merge this post 5 GA. \n. Excellent; haven't reviewed yet but let me ask: how \"ready\" is that branch? \n. For MongoDB, we have Fongo as an embedded instance and we also hook up to Cloud-based providers to test basic functionality. For Cassandra, you're welcome to follow similar approaches; pros/cons for each approach. \n. I am going to try and bring this branch up to speed with the current master and turn it into a mergeable state before proceeding. Does that work for everyone here? You can then resume testing the registry based on the to-be-current master. I'll probably get to the final mergeable state by late tomorrow afternoon your time. LMK if that is too soon or too late for that matter!\n. Not a problem. More patches, the better. Glad you care :) \n. Clarification: if it fails, we'll know and either you or someone else will fix it. \n. Wonderful. Thank you!\n. Closing due to inactivity. 4.1 is also EOLed. . I'll take a pass and see what I can find. Stay tuned please.\n. In the meantime though not required, you may want to sign the ICLA here.\n. Reviewing this. Stand by. \n. hey @DavidRG13, you guys planning to sign the CLA? Not a big deal and you do not have to, but it will make things easier in the long run. \n. Cool. Possible glitch with the CLA service; ignore for now then. Thanks. \nDo you have any instructions on how this branch may be tested? \n. Couple of high-level notes:\n1. Yes tests need to be added to the registry as well\n2. Tests nearly need to be present for all components\n3. All @Value and @Component annnotations must go\n4. All external property files and references must also go\n5. The expiration calculator likely must go as well. \n6. Codacy errors all fixed, except for false positives. Just weed through. \n7. Docs must be added to explain use cases, setup, gotchas, config, etc. You can follow samples for other registries.\n8. All components, specially interfaces, must be accompanied by valid javadocs that explain purpose.\n. Each ticket has an expiration policy associated with it that you can use. Tickets also implement TicketState which should give you date benchmarks. \n. Sweet. I'll set aside some time next week to take another pass. Thanks very much!\n. Quick heads-up: It will be a while before I or anyone else can review this patch again. For now, if and when you have the time please go through the comments and make the changes as recommended where necessary. Then focus on unit tests, integration tests and getting the build pass with a green light. Then, we can surely resume.\nWe have a 4-day holiday weekend; so progress will be somewhat slow until mid next week on our side. (Except for J\u00e9r\u00f4me of course!) . The build error probably happens because some of the new dependencies you introduced are bringing in transitive dependencies that are at odds with what CAS has. You need to run dependencyInsight of gradle to figure out where those transitives come from and exclude them all. It's probably the new cassandra dependency. . Let me pull down your latest changes and take a look; stay tuned. (I am going to somewhat tied up all through next Tuesday, so this will be a few days before I can report back anything useful). In the meanwhile, carry on and make this more awesome :) I'll report findings soon. . Not yet, sorry. Hopefully by Friday. Been rather busy today. Stand by please.. Sure. Couple of first steps: \n1. bring it up to speed with master\n2. squash commits into a single one so it's slightly easier to review altogether. \nI'll look at the dependency issue and resume reviewing this. . Also very important (and without having looked at the changeset yet): \n\n\nthere will need to be ways to test the registry against an embedded/remote/cloud-based/something cassandra instance. We need to find a reasonable way to run integration tests without having to manually require one to set cassandra up and troubleshoot stuff. (That can be a last resort) So if you have time, in the meanwhile this is something you could sort out to build more confidence into the new module. \n\n\nAlso start writing docs. . I moved the target milestone of this PR a few months, as it's quite evident that we wont be able to successfully and accurately ship this behavior given the RC1 timeline. (Don't let that disappoint you though; carry on. This is sure to go in for the official 5.1 release). 1. Excellent. Continue to fix build failures and tests, etc.\n\nThese: https://github.com/apereo/cas/pull/2111/commits\nVery good.\nHere: https://github.com/apereo/cas/tree/master/docs/cas-server-documentation (Follow the approach as other ticket registries. 1) create the main page, 2) add properties as the reference, 3) add link to the sidebar). \n. Don't think so; you should be able to squash on the same branch that is based on this pull. Do this last please. (and really treat this as an optional task). . run gradle dependencyInsight inside the cassandra module with -DskipVersionConflict=true, observe where it comes from and exclude the dependency. . Ah probably not then! Let me check. \n\nBy the way, would you have a bit of time to review the BaseTicketSerializers? I believe what that component does and what you're trying to implement are very similar. Opportunity to consolidate? . > Ah probably not then! Let me check.\nIt's caused by this change. Are you running the command under a compile configuration or testcompile? Try the latter. . public final class LdapUtils {}. > docs finished, please let me know your opinion\nExcellent. I'll take a pass tomorrow. Thanks very much!. @DavidRG13 I am going to try and take a pass at this PR today; would it be OK if I made changes as I went along? or would you rather I analyze and provide feedback to you here?. @DavidRG13 please hold off working further on this PR for the time being. I am going to try and get this pushed into a separate branch on apereo/cas core repo and then we can resume the works. If I am successful, we'll end up closing this PR together and start off clean with new ones targetted to the new branch. \nI'll let you know in a few. If it holds your interest still, please continue with other code cleanup tasks, etc or if you want to work on something more attractive, let me know :) . Took this changes here, pushed to Apereo/cas as a separate branch to continue. Started doing some cleanup work. Ran into some issues with running tests. Some binary dependency appears to be missing somewhere. I'll post back the details later today. . Still have trouble running tests, given the missing cassandra binary dependencies or bindings. Needs to be reviewed and worked on again. . I'll review this tomorrow again and will post back the exact error message I received when running tests. . Here is what I see when I attempt to run CassandraTicketRegistryTests:\n2017-02-23 14:35:08,403 WARN [org.apache.cassandra.config.DatabaseDescriptor] - <Please rename encryption_options as server_encryption_options in the yaml>\n2017-02-23 14:35:08,634 WARN [org.apache.cassandra.utils.CLibrary] - <JNA link failure, one or more native method will be unavailable.>\n2017-02-23 14:35:08,886 WARN [org.apache.cassandra.service.StartupChecks] - <jemalloc shared library could not be preloaded to speed up memory allocations>\n2017-02-23 14:35:08,886 WARN [org.apache.cassandra.service.StartupChecks] - <JMX is not enabled to receive remote connections. Please see cassandra-env.sh for more info.>\n2017-02-23 14:35:08,886 ERROR [org.apache.cassandra.service.StartupChecks] - <cassandra.jmx.local.port missing from cassandra-env.sh, unable to start local JMX service.>\nno libsigar-universal64-macosx.dylib in java.library.path\norg.hyperic.sigar.SigarException: no libsigar-universal64-macosx.dylib in java.library.path\n    at org.hyperic.sigar.Sigar.loadLibrary(Sigar.java:172)\n    at org.hyperic.sigar.Sigar.<clinit>(Sigar.java:100)\n    at org.apache.cassandra.utils.SigarLibrary.<init>(SigarLibrary.java:47)\n    at org.apache.cassandra.utils.SigarLibrary.<clinit>(SigarLibrary.java:28)\n    at org.apache.cassandra.service.StartupChecks$6.execute(StartupChecks.java:197)\n    at org.apache.cassandra.service.StartupChecks.verify(StartupChecks.java:106)\n    at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:169)\n    at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:551)\n    at org.cassandraunit.utils.EmbeddedCassandraServerHelper$1.run(EmbeddedCassandraServerHelper.java:125)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nException (java.lang.IllegalAccessError) encountered during startup: tried to access method com.google.common.collect.Iterators.emptyIterator()Lcom/google/common/collect/UnmodifiableIterator; from class org.apache.cassandra.db.MutableDeletionInfo\njava.lang.IllegalAccessError: tried to access method com.google.common.collect.Iterators.emptyIterator()Lcom/google/common/collect/UnmodifiableIterator; from class org.apache.cassandra.db.MutableDeletionInfo\n    at org.apache.cassandra.db.MutableDeletionInfo.rangeIterator(MutableDeletionInfo.java:159)\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceIterator(AbstractBTreePartition.java:199)\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(AbstractBTreePartition.java:190)\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(AbstractBTreePartition.java:177)\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(AbstractBTreePartition.java:172)\n    at org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer.serializedSize(PartitionUpdate.java:710)\n    at org.apache.cassandra.db.Mutation$MutationSerializer.serializedSize(Mutation.java:372)\n    at org.apache.cassandra.db.commitlog.CommitLog.add(CommitLog.java:262)\n    at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:498)\n    at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:399)\n    at org.apache.cassandra.db.Mutation.applyFuture(Mutation.java:202)\n    at org.apache.cassandra.db.Mutation.apply(Mutation.java:214)\n    at org.apache.cassandra.db.Mutation.apply(Mutation.java:228)\n    at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(ModificationStatement.java:553)\n    at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternal(ModificationStatement.java:547)\n    at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:295)\n    at org.apache.cassandra.db.SystemKeyspace.removeTruncationRecord(SystemKeyspace.java:622)\n    at org.apache.cassandra.db.ColumnFamilyStore.invalidate(ColumnFamilyStore.java:519)\n    at org.apache.cassandra.db.ColumnFamilyStore.invalidate(ColumnFamilyStore.java:495)\n    at org.apache.cassandra.schema.LegacySchemaMigrator.lambda$unloadLegacySchemaTables$278(LegacySchemaMigrator.java:136)\n    at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408)\n    at org.apache.cassandra.schema.LegacySchemaMigrator.unloadLegacySchemaTables(LegacySchemaMigrator.java:136)\n    at org.apache.cassandra.schema.LegacySchemaMigrator.migrate(LegacySchemaMigrator.java:82)\n    at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:223)\n    at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:551)\n    at org.cassandraunit.utils.EmbeddedCassandraServerHelper$1.run(EmbeddedCassandraServerHelper.java:125)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n2017-02-23 14:35:13,773 ERROR [org.apache.cassandra.service.CassandraDaemon] - <Exception encountered during startup>\njava.lang.IllegalAccessError: tried to access method com.google.common.collect.Iterators.emptyIterator()Lcom/google/common/collect/UnmodifiableIterator; from class org.apache.cassandra.db.MutableDeletionInfo\n    at org.apache.cassandra.db.MutableDeletionInfo.rangeIterator(MutableDeletionInfo.java:159) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.sliceIterator(AbstractBTreePartition.java:199) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(AbstractBTreePartition.java:190) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(AbstractBTreePartition.java:177) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.partitions.AbstractBTreePartition.unfilteredIterator(AbstractBTreePartition.java:172) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.partitions.PartitionUpdate$PartitionUpdateSerializer.serializedSize(PartitionUpdate.java:710) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.Mutation$MutationSerializer.serializedSize(Mutation.java:372) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.commitlog.CommitLog.add(CommitLog.java:262) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:498) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.Keyspace.apply(Keyspace.java:399) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.Mutation.applyFuture(Mutation.java:202) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.Mutation.apply(Mutation.java:214) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.Mutation.apply(Mutation.java:228) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternalWithoutCondition(ModificationStatement.java:553) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.cql3.statements.ModificationStatement.executeInternal(ModificationStatement.java:547) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.cql3.QueryProcessor.executeInternal(QueryProcessor.java:295) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.SystemKeyspace.removeTruncationRecord(SystemKeyspace.java:622) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.ColumnFamilyStore.invalidate(ColumnFamilyStore.java:519) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.db.ColumnFamilyStore.invalidate(ColumnFamilyStore.java:495) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.schema.LegacySchemaMigrator.lambda$unloadLegacySchemaTables$278(LegacySchemaMigrator.java:136) ~[cassandra-all-3.4.jar:3.4]\n    at com.google.common.collect.ImmutableList.forEach(ImmutableList.java:408) ~[guava-21.0.jar:?]\n    at org.apache.cassandra.schema.LegacySchemaMigrator.unloadLegacySchemaTables(LegacySchemaMigrator.java:136) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.schema.LegacySchemaMigrator.migrate(LegacySchemaMigrator.java:82) ~[cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.service.CassandraDaemon.setup(CassandraDaemon.java:223) [cassandra-all-3.4.jar:3.4]\n    at org.apache.cassandra.service.CassandraDaemon.activate(CassandraDaemon.java:551) [cassandra-all-3.4.jar:3.4]\n    at org.cassandraunit.utils.EmbeddedCassandraServerHelper$1.run(EmbeddedCassandraServerHelper.java:125) [cassandra-unit-3.0.0.1.jar:?]\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_112]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_112]\n    at java.lang.Thread.run(Thread.java:745) [?:1.8.0_112]. Thank you for the workaround! Looks great, but I think the problem remains: applying that change requires manual work, right? How could we ensure the build can automatically pick up the change and move on, specially when it's run via Travic? Surely we don't expect folks who clone/build the codebase to do a bunch of upfront work in order to get things moving. \nAs for force feeding versions, yes. Have a look at the radius-core module and its build file. You should find similar tactics used there. . btw if you don't mind I propose we close this pull request and focus future work on the cassandra-ticket-registry branch. Should be more recent, and we can collaborate there. There are some design choices made in the current master that would fit this feature, specially when it comes to discerning different ticket types dynamically.. Closing in favor of #2650 . Great, thanks. You likely do need to fix the static imports as checkstyle will probably complain. \n. You'll also need to add tests that confirm this behavior please.\n. This looks good to me, other than a few formatting/minor issues. Final question: do you want to port this change to master as well, or would you rather someone else does that? \n. Use the same issue please, and thanks!\n. Yup these are not related. You might want to take a pass at some of the comments posted here and fix those. I'll review the test failures. \n. Thanks very much!\n. Could you post a similar patch for master as well? \n. This looks excellent. One final change if you feel like it:\nstar-imports are only \"allowed\" if you're dealing with static star-imports such as Mockito, etc. The rest need to be individually declared. \n. I don't think you're really gaining much here to be honest. This introduces an extra class field where we have services and orderedServices now. That's a bit confusing for maintainers. Also on every delete/save/add call you're recreating the TreeSet which is a fully new object with a copy-all operation. Finding things is perhaps more efficient, but not the rest.\nIt would be interesting to run perf numbers with unit tests for before/after and see what the actual advantage is. \nYou may consider the following possibilities:\n1. Is there any way the map can be ordered and turn into what the TreeSet does? I'd very much prefer if we had to deal with a single data structure. \n2. If not, is there any way that we don't have to recreate the TreeSet every time a change is saved? \nPlease treat these as mere suggestions. In practice I think save/delete/update calls are far less common that finding stuff. So this could very well be terrific as is. \n. I think the TreeSet tries to preserve order based on the compareTo() call of the services. Be that as it may, this looks fine. I'll CI pass and then merge. Thanks!\n. one last thing, please do merge with master once to let the build pass (once after you have applied updates to remove the sysout call, etc) \n. I suggest you run those tests and see if you reproduce the failure on your end with this patch. master does build fine, but this could just be a minor fluke that needs to be investigated by you.\n. Where is it called twice? Could you share a snippet please?\n. Ah, well that's an easy thing to fix. If would likely be better if we:\n- Remove usage of isValidRegex cautiously and deprecate it.\n- Let createPattern return the same Optional. If not empty, use get() to get it.\nThat should reduce calls and have a lesser impact overall. \nMakes sense? \nIn other words, createPattern is in a sense isValidRegex; so there is no need to check for validity before creating it. The creation is now able to return an empty if the pattern is invalid.\nisValidRegex is only useful in cases where we just need to check for validity and don't care for the pattern itself. This is in areas where a boolean returned does suffice. \n. Clever trick on the nothing pattern :) You're right; ignore my comment.\nI would be fine with that use, except for the snippet here when service ids are set inside matches():\nthis.servicePattern = RegexUtils.createPattern(this.serviceId);\nSuppose I create a service with a service id of \"https://****$$$\". (Or just about any other invalid regex pattern as typos do happen quite frequently). The current approach here will set the servicePattern to \"a^\". The same pattern will then show up in the UI and logs; that is very confusing. If data is invalid, it should not be transformed [magically] into another. The issue here is that this \"a^\" is not a null object. It is a valid pattern nonetheless. A null object would be Optional.empty() or something (or a null pattern that does nothing effectively).\nSo that's why I shy away from that approach. I think the confusing factor is greater than the cost of if/else statements with optionals. If you can find a way around it, by all means.\n. Not to mention that you'd have to then explain it in docs:\n- Remember that if the provided pattern is invalid, it will be parsed by cas as \"a^\". Don't be sacred if you see those in UI and logs.\nCompare that with:\n- Remember that if the provided pattern is invalid, it's simply invalid and you don't worry about it. Live long and prosper. \n. PS going away for a while. I'll pick up the conversation tomorrow if needed. Thanks for your help, as always!\n. Awesome, thank you! \nDo you intend to also submit a PR for the 5.0.x branch, or would you rather I do that? . Sounds good. Thanks. . Quick footnote: all calls to collections.singletonxyz as well as arrays.aslist and such need to be removed and replaced with something else if you dislike the guava version. These calls create lots of issues and maintenance headache for binary and non-binary serialization matters. It's not worth the time and headache to pick out which is OK whrere, etc. The guava version was in for good reasons. . That's a great idea, definitely. Some are hopefully caught by tests. Others not so much. When it comes to integration tests our coverage goes down quite a bit because we have to do a lot of bootstrapping. That said , we can surely investigate. You want to make sure all services can be serialized to json and yaml with your changes and add tests where needed. Pay close attention to the memcache module and provide full coverage there. Same goes for the Cassandra work and the couchbase work. You want to make sure cas webflow can handle these collections (which I don't think it can). Be very very careful there. That's just what I remember. I'll have to an inventory scan too to see what we could be missing.\nWhile I very much appreciate your time on this, in the end I don't think the pain you are trying to remove is worth the gain with the above enumerated concerns but if you wish to tackle this, by all means. It's your call. . Cool. Sure thing.\nSo for starters here are some guidelines:\n\nFocus on memcached, Couchbase, Hazelcast, Ehcache, etc modules. Anything that touches services, tickets and authN API should have full coverage. In general, it's safe to say that all component that deal with registry, monitoring and such need to be accounted for in tests with these changes.\nSame with JSON/YAML service registries\nSpring Webflow session management needs to be THOROUGHLY tested. I am 99% sure putting an Arrays.asList() into a flowScope breaks the world (or just about any component that contains the result of that call)\n\nI'll take another pass shortly. First, let's get the build passing as a first step and we'll incrementally add more tests.\nI should also this work today is a bit premature. A lot of this would have been simpler if were using Java 9's native APIs, as they provide a very Guava-like syntax. . Aside from fixing the build, please make sure this style is included in the rules. . Right, it's not your fault. It's gradle having trouble pulling snapshot dependencies from pac4j. Ignore.\nSo just to confirm:\n\nWe have all annotations [that make sense] switched over to the new model\nAnd we have the build failing if it find anything contradicting those annotations\n\nCorrect? . Well this @RequestMapping.*method = RequestMethod is possibly good, but I think it may not capture all cases where you might just have = GET where you have a static import on RequestMethod perhaps. I should note that we obviously don't have to get this perfect on the first try; there will be cases where this rule might end up clashing with the normal and we'll just accommodate the pattern right then.\nI was actually hoping we might be able to define a pattern to capture all @RequestMapping instances but that might be too aggressive, right?\n. Very nice. Thanks!. Great work! Thank you. . Yup. It certainly does look like it. Given that master is building fine, this is all you :) . Well it may be something in your environment perhaps because Travis is building master fine and I also can run all tests correctly on master. Any particular changes recently made to your dev environment?. That I believe I have fixed. This is due to pac4j running on snapshots. Merge with master once and let Travis build. If that still fails then let's close this maybe and start with more incremental changes. . Superb! Thanks very much. . Build failure was unrelated in this case. Thanks very much!. This looks great! Merge with master once please and we should be good to go. . Sounds like you may need to rewrite that test to create new instance of that action class with the right value.. Great. Thanks. We should tackle them separately if needed. Could also take a look at checkstyle rules to allow for that exception.. Great work. There is more, right? :) . Excellent. Keep it up :) . @DavidRG13 as you go through these changes, please ignore the saml-idp module for now. Working on a few changes ATM and I'd like to minimize merge conflicts. . Of course, if you have already done that one it's perfectly fine. We shall merge. . Excellent. One thing I noticed by the way: recent changes broke master at runtime. When you change type information for generic collections in beans, you must make sure all instances of that bean are changed.\nFor instance, if the bean is:\npublic List<Object> someList() {}\nMake sure all references to it are also changed:\n@Autowired\n@Qualifier(\"someList\")\nprivate List<Object> list;\nLeaving it like:\n@Autowired\n@Qualifier(\"someList\")\nprivate List list;\ncauses breakage. . Thank you very much for the change. I'll review some time tomorrow, but to clarify, you cannot break up the configuration files as the configuration server is able to simply load a global application.properties/yml file and a single property file named after the application itself. There was a recent thread about this on the list. Maybe we should document this behavior as well. . I cleaned up some of the formatting but everything else looks great. Specially the trick with spring profiles is very helpful. . Sure. Done. \nYou may however want to submit the same sort of PR for the 5.0.x branch. . Right the error is unrelated. Let's blame Travis :). . Outstanding work. Thanks!. While this is excellent, please remember to format filenames with backticks to make them stand out in the docs. Things like application.properties, etc.\nThanks very much!. Outstanding. Thanks very much!. Failure is unrelated. Thanks again!. Excellent. Some suggestions: Perhaps we should seize opportunity to add a few [trivial] test cases for both DefaultDigestHashedCredentialRetriever and the component that uses it? . Excellent. One test failure and we should be good on this one. . Looks good. Could we perhaps use Throwables.propagate() for the above issues to be consistent? (and once we decide to move away from those calls, it will be easier to spot them all) . Yeah that should work. e.getMessage() already has the better description and nothing we're removing here is all that helpful to begin with :) . Outstanding. . Merge with master and push once more. Should clean it up. Same with the other pull #2300 . Sure. . This is fine; due to pac4j making breaking changes. Can be cleaned up later. . Thank you. Merged out of band.. Merge with master once more. Should be solved now.. I'll let Travis run this once more. You may want to run tests locally as well; given master builds fine I am inclined to think the breakage here is due to the changes you have made. . Of course here is the breaking test as you noted:\nbash\norg.apereo.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandlerTests > verifyAuthenticate[5] FAILED\n    java.lang.AssertionError: Authentication failed when it should have succeeded: Certificate keyUsage constraint forbids SSL client authentication.\n        at org.junit.Assert.fail(Assert.java:88)\n        at org.apereo.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandlerTests.verifyAuthenticate(X509CredentialsAuthenticationHandlerTests.java:242)\nFirst, verify that it indeed breaks locally as well. It should.\nSecond, run the test and observe the failing point. Then switch to master and run the test again. Note the delta between the tests and you'll find the breaking change. . hey @DavidRG13 have you had a chance to review and resume work on this? Seems just about done :) . OK. No problem; it's sad to see progress go to waste, but seems like restarting this would be the best approach. Focus on smaller changesets so they can be merged very quickly. \nAnd as always, thanks a bunch! I'll get this closed right now so we can begin anew.. Merged out of band. Thank you.. hey @johnlister thanks very much again. I realize this pull might still need some work, but I am going to merge and carry on offline. \nOnce the changes show up in snapshots, etc please review and make other contributions/modifications as you see fit.. All good. Thank you! \nI was just chatting with someone on gitter yesterday about this improvement and I think we are going to enhance it further. Thanks for getting the ball rolling.\nI am also going to add this improvement to the changelog on the apereo blog. . Very cool. Going to ping @bbooth here to see if we can come up with a common/shared mechanism to enforce policies. \nBlog updated https://apereo.github.io/2017/02/24/rc2-release/#database-password-policy-enforcement. How do you build and what does it tell you? . Thanks. Does pac4j plan on releasing a 1.9.6? . Great. Excellent work. When 1.9.6 is released, please update the PR and we can perfectly merge :) . Great. Excellent work. When 1.9.6 is released, please update the PR and we can perfectly merge :) . One last thing: please also update the docs to note the new settings. Follow the same format as other providers. One last thing: please also update the docs to note the new settings. Follow the same format as other providers. The current schedule is Feb 17th. We can probably postpone for a few days until 1.9.6 is released, or push this PR into 5.0.4. The current schedule is Feb 17th. We can probably postpone for a few days until 1.9.6 is released, or push this PR into 5.0.4. Excellent. Thanks J\u00e9r\u00f4me . Excellent. Thanks J\u00e9r\u00f4me . hey @yellowcola not a requirement at all, but would you want to sign the CLA here? Makes things easier going fwd but as I said, not a requirement at all for contributors. . hey @yellowcola not a requirement at all, but would you want to sign the CLA here? Makes things easier going fwd but as I said, not a requirement at all for contributors. . Thanks @leleuj . Why is baseDn getting removed?. Why is baseDn getting removed?. Ah I see the issue here https://github.com/apereo/cas/issues/2374 thanks!. Ah I see the issue here https://github.com/apereo/cas/issues/2374 thanks!. No they all need to be html. See the official docs.. No they all need to be html. See the official docs.. Thanks for the pull request though. A for effort :) . Thanks for the pull request though. A for effort :) . Understood. You're rather adventurous though! Keep browsing. All improvements/suggestions to docs are extremely welcomed. . Understood. You're rather adventurous though! Keep browsing. All improvements/suggestions to docs are extremely welcomed. . Excellent. Good for you. Team effort. Post back all findings, and better yet, more pull requests. Always happy to merge :) . Excellent. Good for you. Team effort. Post back all findings, and better yet, more pull requests. Always happy to merge :) . Merci beaucoup!. Thanks very much! Excellent work. . Cool, thank you. Does this PR in any way contradict https://github.com/apereo/cas/issues/2315 ? Concerns?\n/cc @maelstr. Also how is the pool created for bind different from the pool created for search? . Thanks very much.\nYou may also want to sign the CLA; not required but it does help a bit.. > Hi, sorry for my mistake, I do understand now the need for 2 distinct pools.\nNot a problem. This is why we collaborate!\n\nshouldn't this two different pools be made more explicit in the configuration file ?\n\nSuggestions? Perhaps we should explain the need for this behavior in the docs? . Cool. Would you want to make that change in the docs and then submit that over?. Thank you very much!. Thank you very much. This was also ported back to 5.0.x. Keep it coming!. Excellent work. Thank you.. Could merge/rebase with master once please? There seem to be a lot of old/lingering commits here. . Fixed out of band. Be sure to update your own fork though for future PRs. . Thank you very much for the pull; The change you have highlighted is not needed as the CAS webflow module automates that change, or should altogether. Examine the SPNEGO module and you should be able to find the webflow automation pieces. . You're very right. My apologies. . > If someone knows how it make things work without modifying xml, we are interested :)\nThis is actually something we consider a \"bug\" :) I'll look into automating this part as well when I find a few available cycles, given most everything else is already. (i.e. Compare with this). Thank you very much for the pull; However the snippet you have provided is incorrect because repositories do not just apply to gradle. They can be relevant for any build tool, including Maven.. I am not quite sure. I have had to deal with both situations!. Outstanding! Thanks very much David. Keep at it.  . Thanks @jtgasper3 Great find!. Yup. Restarted the build. One more try.. What is the command you run? . Also constructors are great. Thank you!. This is usually mine:\ngradlew build install --parallel -x test -x javadoc -DskipCheckstyle=true -DskipFindbugs=true -DenableIncremental=true --offline\nThough it depends what I am working on and I riff on the parameters as needed.\nYou can learn more about the build here:\nhttps://apereo.github.io/cas/developer/Build-Process.html. Cool. You have a few styling issues here; Would you like to take action and fix them or should we merge and fix them later in a separate build? How would you like to proceed? \nIf you decide to continue, you can push to the same branch which would trigger the build again and again. Makes it much easier. . Not yet. Later today perhaps.. You should be able to test the fix in about an hour or so, by using the new SNAPSHOT.. What does your pom look like?. Ah never mind. I just read your description more carefully. Let me review please.. Actually let me ask, what webapp module are you working with? And are you working with the embedded tomcat? . Switch to cas-server-webapp-tomcat. https://apereo.github.io/cas/development/installation/Configuration-Server-Management.html. You may also be interested in https://apereo.github.io/2017/03/31/rc3-release/. >  I was able to put property in cas.properties but since you bundle properties file in cas.war,\nYou should be able to override everything that is bundled in cas.war. If that doesn't work, then that's a bug.. Oh, to your question: \"would it make sense to have yml files take precedence?\" No. I can't find any rationale in that really. Seems very arbitrary. \nThe order is listed here:\nhttps://apereo.github.io/cas/development/installation/Configuration-Server-Management.html#standalone\nSo you'd have application.properties|yml files first and then everything else. If you find that doesn't work, please file a bug. . > I am just saying that you can't use application.yml to override certain properties in there\nThat would be a bug for sure. Externalized settings are supposed to definitely allow you to override what's inside. Regardless of syntax. If CAS ships with application.properties, you should be able to override everything that is in there with an application.properties, application.yml, or cas.properties or cas.yml. As I said, if that is failing please consider that a bug and file one.\nI still do find the yaml precedence over properties to be strange, but if you do find a reference link that explains this is how boot/cloud works then by all means we should totally change CAS to match that. . Cool. Thanks for the clarification. . I recommend you step into the code to determine where and how keys are loaded. That's the best way to diagnose this, short of reviewing logs. If you find that something isnt working, by all means shoot over a patch. . Strange thing is, that it doesn't show up here https://travis-ci.org/apereo/cas/pull_requests !. CI seems down FTM: https://www.traviscistatus.com/incidents/ccp8bj1x2n6y. Excellent. Thanks!. > Also, this was used in several places, would it be useful to create a new method in TicketGrantingTicket for this? getRootAuthentication()\nI think so, yes. perhaps under TicketRegistrySupport. Because:\n\nYour proposal is mostly about adding a convenience method. ticketGrantingTicket.getRoot().getAuthentication() -> ticketGrantingTicket.getRootAuthentication(). This is not part of the API. Just something that makes it easier to work with the API. And certainly, we are not going to redecorate the API altogether because it saves a few keystrokes in this case.\nAPI changes are not allowed until a major release in most cases.. I don't disagree :) which was my original point that tgt.getRoot().getAuthentication() and tgt.getRootAuthentication() arent really all that different, BUT, if you do wish to add this, it's a support utility that needs go into a support class. I'd be OK with removing it altogether too and simply just use the \"long form\". . Of course, if you do decide to stick with the support utility, then areas that are effected by the change should also be changed to use the new support method. Otherwise, there is no point in adding it!. Outstanding. Thank you!. Sure. Yes I am looking into this. Thanks for spotting it. \n\nTravis is just being weird. It will eventually sort itself out. I know there were a few outages recently and I am not sure if it's still them or something CAS does that makes it go haywire. We'll figure it out.. It looks as though we are back in business. Keep watch please and as always, if you find anything else that is broken and needs attention, shoot over patches.. Thank you!. This is great. Thanks!\n\nI assume some of properties are broken out into the pool object since they are shared with LDAP pools? \n\nYes. \n\nWhich of the idle timeout properties would you like to use for JPA or should it look at both properties and use the larger (or smaller?) of the two?\n\nI'd find those to be very confusing.  It appears that getMaxIdleTime is ONLY used for data sources and nothing else. So how about we simply rename that setting to be getMinIdleTime to match the actual setter? Using min-size is not good, because that controls the pool size, and has nothing to do with idle timeouts.\nMakes sense?. btw Travis is being a bit weird lately, and so don't be alarmed if the PR failed. We'll restart and work together to get it merged of course.. Cool. Thanks for the explanation. I understand.\nMy suggestion is, if the max idle setting is documented and yet has no use, it's safe to remove it both form code and docs. It's not used anywhere else right? So lets get rid of it altogether.\n. btw one last thing: It would be greatly helpful if you could start PRs with a \"Closes #2459\". That helps to auto-close the issue. See https://apereo.github.io/cas/developer/Contributor-Guidelines.html#creating-pull-requests. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Sounds good. Yes, can totally be merged back. Would you rather also that bit, or would you rather I do it? . Excellent work. Comments follow.. Excellent work. Could you also update the docs to advertise the new settings now available? . Wonderful. Thanks very much. With build passing, I think we should be good to merge.. This looks great. Please fix the build failures and we can easily merge this one in too. Thanks very much!. Going to merge, and I will fix the styling issues locally. Thanks very much again!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. @chrismyers81 Do you have updates on the set of changes asked here? . Closing due to inactivity. Feel free to review and resume. . Sweet. Fix the build failures please.. We have a PR that attempts to revert the patch: https://github.com/apereo/cas/pull/2492 do you want this to be merged and then you could continue to work? Or you would rather start with what exists already? . Also, what is the collection of SPs you are trying to integrate with? Do you have a list and possibly integration guides you can share with us here? . Excellent. Are there any particular \"lessons learned\" type of notes you can share with us, particularly on the ADFS instance? Was that done to handle Office 365? (Note that CAS claims to provide built-in support for O365 though I believe that behavior needs to be verified) . Settings should always be documented in the main properties page to avoid duplication. Makes it easier to maintain. . I recommend you write a blog post outside of the core project: https://apereo.github.io/ and share it with others so you can show what you did, how and why. . Also you need to be very careful, at least in this particular instance, to not provide \"sample\" values. Because your practical example could very much be copy-pasted into many many deployments reading over your notes and \"blindly\" following along, in this instance, having them all share the same keys. . What's your motivation behind this change? What problem are you solving? . Yes, I understood that from the content of the pull request. What I am asking is, why? . Great, thanks. What you want to do is, refactor the core modules so that allowing X509-authentication for REST does not enable X509 functionality separately. That way, you could just use the core components for REST, and not the actual components that modify webflow, and such. You can see this pattern applied for oauth, etc. \n. Thank you for the follow-up. Let me elaborate:\n\nCAS enables X.509 authentication via REST (our previous PR). CAS does not enables X.509 authentication via webflow\n\nAs I said, this much is very clear from the pull request here. What I am trying to explain is, as soon as you enable the \"x509-rest\" module to enable x509-authentication for REST, CAS automatically pulls in the x509 module which also activates X.509 authentication via webflow. \nIf you look at the list of dependencies for the rest-x509 module you added you can see this:\ncompile project(\":support:cas-server-support-rest\")\n    compile project(\":support:cas-server-support-x509\") //activates webflow for x509 too!\nThat's where the problem is. \nSo to fix this, rather than exposing yet one more property, we need to fix this at a lower level so it just works! Meaning, if you enable the rest-x509 module, all should happen is the ability for you to use the REST API via x509 credentials. That's the intention, and nothing else should happen.\nSo, what you want to do instead is break the cas-server-support-x509 module apart so it turns into a core module, as well as webflow module. You can see this pattern done for a number of modules such as gauth and oauth. The core module houses all core components, while the webflow module only has the configuration that activates the auto configuration and webflow. Essentially the webflow module is the starter module in Spring Boot's terms. \nOnce you do that, you can modify the rest-x509 module's dependencies to be:\ncompile project(\":support:cas-server-support-rest\")\n    compile project(\":support:cas-server-support-x509-core\")\nAnd that will just work for the user/adopter without having to learn and set properties. \nI hope that's clear. LMK if I can assist further.\nPS In the future, please try to be a bit more elaborating and descriptive in the dialog. Statements like \"Customer Wants\" have zero bearings here.. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Excellent, thank you for tracking this down.\nTwo things:\n\nI very much like your suggestion of sharing the mustAccept constant across classes. Please do. Also I am in favor of the new explicit transition, and would prefer that you get rid of the default in fact, if wouldn't cause any other issues. I should also add that this can perfectly be merged as-is, if you decided to forego any of those changes.\nAs x509 authentication and AUP, yes please open up a separate issue or better yet, skip the issue and just go to the pull request directly. No need for extra \"paperwork\". . This is definitely in the right direction; Thank you. Please proceed.\n\nI realize this is still all WIP, but I don't think we need to keep both methods to new up data sources. There should preferably only be one, and that rules all.. That should be brought over by default. You certain you're running the latest master? I can't duplicate this. . See https://github.com/apereo/cas/blob/master/webapp/gradle/webapp.gradle#L83. >  I didn't really need to rename the method from newHikariDatasource, should I rename it back?\nNo, this is perfect. I also like the fact that you changed the return type; we should always favor abstract types on the LHS which as you noted, should make things much easier for proxies and possible swaps later on.  Excellent work!\n\nRight now the code is falling back to trying to create a datasource with other parameters if the datasource doesn't exist in JNDI. \n\nI am OK with this behavior as well. For most deployments, they wouldn't and shouldn't notice a difference and that's all that matters. The idea is, if the deployer declares a module that deals with JDBC-whatever, then he/she better be prepared to handle connection-related matters of config and the how would be up to the deployer. JNDI, fallback and then bombs...else, remove the module! Seems like the perfect amount of nice to me :) \n\nI made the datasourceName a link to a note at the bottom of the page. Is there a better way to handle that?\n\nI see what you did. Yes, two possible suggestions in this area:\n\nGiven the datasource name specifically deals with JNDI, how about we make that name a bit more explicit to say perhaps jndiDataSourceName or some such to reveal the true usage intention? I don't suppose the generality could be useful in the future as well for other means. Specificity should also help with docs.\nIt is indeed very difficult to write good documentation without repetition. I suggest you move that block at the bottom to the top, here:\nhttps://apereo.github.io/cas/development/installation/Configuration-Properties.html#hibernate--jdbc This is where we capture general and common settings/notes that expand across multiple modules and settings. Certainly not ideal, but helps to make things consistent until at some point in the future we find a better home for these sorts of notes. \n\nYou can certainly link back to it if you want, but I'd start with something like this:\nContainer-based JDBC Connections\nIf you are planning to use a container-managed JDBC connection with CAS (i.e. JPA Ticket/Service Registry, etc) then you can blah blah blah...\nThen, add your notes at the end of that, and also your two XML snippets you have on this PR to show what one could do to enable this as a sample. (I believe the Resource tag should also equally apply to Jetty and such, so you can be a bit more generic). \nHTH. . > if you think it would be clearer I can go ahead and change the name to jndiDataSourceName or maybe dataSourceJndiName.\nAll good. Lets stick with what exists here for now. We can always iterate later. Thanks very much. Going to merge. (The build failures are irrelevant to this PR and are entirely my fault for the time being). Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thanks very much! Excellent work.. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Could you explain how this TGT deserialization takes place? . Thank you! For some reason I thought this has something to do with the JSON service registry. Great work. . Could you please describe the problem statement a bit more clearly? The policies should internally be setup based on scopes configured, right? What exactly is causing DenyAllAttributeReleasePolicy to be an issue? Have you set up scopes that would determine policies for you? . Thanks, as always. I'll try to take a pass tomorrow. \n\nOne other note, if the Beans.java class were a spring ApplicationContextAware bean it would be easy to check for a datasource spring bean using the dataSourceName and fall back to a JNDI lookup if the bean wasn't found. \n\nThere is a workaround for this, where you should be able to use ApplicationContextProvider.getApplicationContext() to get by. Might come in handy. . Reviewed. All good.. Thank you.\nOpenID services are registered just like any other service. They do not have a specific type, yet. . Outstanding work!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!\nCould I ask you to submit the ICLA form from here:\nhttps://www.apereo.org/licensing/agreements/icla\nNot a requirement, but it does help things move forward.. Why was this closed?. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you. This is something that needs to be contributed back to pac4j. Please discuss with @leleuj and move the pull request over. When the change goes in, if it does, simply bump the pac4j version on the CAS side to handle the update.. Thank you. This is something that needs to be contributed back to pac4j. Please discuss with @leleuj and move the pull request over. When the change goes in, if it does, simply bump the pac4j version on the CAS side to handle the update.. Thank you very much!. Thank you very much!. This patch breaks the CAS configuration, as the correct bean id is in fact oauth20AuthenticationRequestServiceSelectionStrategy. With the new change, CAS starts to complain about the missing bean id. . This patch breaks the CAS configuration, as the correct bean id is in fact oauth20AuthenticationRequestServiceSelectionStrategy. With the new change, CAS starts to complain about the missing bean id. . All good. No worries. I am going to correct this shortly, plus a few other minor UI tweaks to OIDC consent.. All good. No worries. I am going to correct this shortly, plus a few other minor UI tweaks to OIDC consent.. Thank you!. Thank you!. Yes, likely. It probably does not like the fact that we have \"duplicate\" annotations. This thing is hit and miss mostly. . Yes, likely. It probably does not like the fact that we have \"duplicate\" annotations. This thing is hit and miss mostly. . This change break the CAS validation endpoints by default due to the @Controller annotation pre-scanning the context. The bean definitions, now marked as conditional, are never injected into the context due to that pre-scan. . This change break the CAS validation endpoints by default due to the @Controller annotation pre-scanning the context. The bean definitions, now marked as conditional, are never injected into the context due to that pre-scan. . I am working on a solution that shows some promise; the trick is to move the annotation for @Controller to the parent classes so Boot does not create a bean apriori. You may want to check this for 5.0.x. . I am working on a solution that shows some promise; the trick is to move the annotation for @Controller to the parent classes so Boot does not create a bean apriori. You may want to check this for 5.0.x. . I can confirm that marking controllers as Conditional breaks CAS in 5.0.x. This is fixed in master, and the issue has to do with the following sequence:\n\nBoot scans the context and creates beans that are annotated with @Controller, specially the validation controllers.\nBecause the explicit Bean definitions are now marked as conditional, Boot never creates the proper instance with all of its injections\nControllers result in NPEs due to missing injections.\n\nThe trick is to remove the Controller annotation from the individual validation controllers and move them to the parent abstract class, so Boot can still recognize and register them in the servlet chain, but not create an instance of them beforehand.\nPlease let me know if you have time time to review this, or if you'd rather I apply the same change to 5.0.x to make this work.  . I can confirm that marking controllers as Conditional breaks CAS in 5.0.x. This is fixed in master, and the issue has to do with the following sequence:\n\nBoot scans the context and creates beans that are annotated with @Controller, specially the validation controllers.\nBecause the explicit Bean definitions are now marked as conditional, Boot never creates the proper instance with all of its injections\nControllers result in NPEs due to missing injections.\n\nThe trick is to remove the Controller annotation from the individual validation controllers and move them to the parent abstract class, so Boot can still recognize and register them in the servlet chain, but not create an instance of them beforehand.\nPlease let me know if you have time time to review this, or if you'd rather I apply the same change to 5.0.x to make this work.  . Thanks for checking. Let me run through this once more.. Thanks for checking. Let me run through this once more.. Thank you.\nWhile this is a good defensive check, you should make sure no resolver/authN handler can produce attributes with NULL values. That is sort of the understood contract. . Thank you.\nWhile this is a good defensive check, you should make sure no resolver/authN handler can produce attributes with NULL values. That is sort of the understood contract. . Thank you. Please fix the failing tests and we should be all good. . Thank you. Please fix the failing tests and we should be all good. . > There was no webjar for editabletable js and it was pointing at the master copy of a js file on the github.com cdn. In theory someone could come along to that project and commit something new and CAS deployments would pick up the new code right away. Since there was no webjar and the project doesn't look like it is going to change anything, I copied the js file into CAS.\nNo problem. Could you please create a separate issue for this one please too? We do need to perhaps find a better alternative and eventually remove the JS file from CAS. For the time being, please also rename the JS file local to CAS to something more sensible a bit.\n\nThere was also no webjar for the Gloria Hallelujah font used on the error pages so I changed the font. I also updated the error pages to be more boring. I figured most people can jazz them up on there own with their own company's personality. I can revert that if you would rather leave them alone.\n\nAll good.\n\nThe version for each webjar is duplicated in the resource url in the messages.properties entries and in the gradle.properties so if you were to upgrade a javascript library you would have to change the version number in a couple places, but that is potentially fewer places than if the javascript file was used in several html files.\n\nThis is excellent, though I recommend you remove the versions from the messages.properties file. That's not quite the right place for it; Seems like we might need some other file buried within in CAS, sort of, that houses all UI component versions. \n\nI moved some head.load() stuff out of cas.js and put it into bottom.html. I did this to put the CDN urls in something that thyme could generate from the message bundle. As far as I could tell it was working when I did that in my overlay but I don't really know what head.load is doing so I can't be sure it is still working when done in the bottom.html script block.\n\nI'll review more thoroughly.\n\nOne thing I learned about webjars is that there are a couple types. There is the classic kind which involves someone using Maven to download a library and package it as a webjar. There are also npm and bower webjars and I think anyone can create one of those if the javascript library exists in npm or bower format. You request a version on the webjar website and I think an automated process creates the webjar and pushes it to maven central.\n\nAwesome. Should be something we can do for that local JS file? . > There was no webjar for editabletable js and it was pointing at the master copy of a js file on the github.com cdn. In theory someone could come along to that project and commit something new and CAS deployments would pick up the new code right away. Since there was no webjar and the project doesn't look like it is going to change anything, I copied the js file into CAS.\nNo problem. Could you please create a separate issue for this one please too? We do need to perhaps find a better alternative and eventually remove the JS file from CAS. For the time being, please also rename the JS file local to CAS to something more sensible a bit.\n\nThere was also no webjar for the Gloria Hallelujah font used on the error pages so I changed the font. I also updated the error pages to be more boring. I figured most people can jazz them up on there own with their own company's personality. I can revert that if you would rather leave them alone.\n\nAll good.\n\nThe version for each webjar is duplicated in the resource url in the messages.properties entries and in the gradle.properties so if you were to upgrade a javascript library you would have to change the version number in a couple places, but that is potentially fewer places than if the javascript file was used in several html files.\n\nThis is excellent, though I recommend you remove the versions from the messages.properties file. That's not quite the right place for it; Seems like we might need some other file buried within in CAS, sort of, that houses all UI component versions. \n\nI moved some head.load() stuff out of cas.js and put it into bottom.html. I did this to put the CDN urls in something that thyme could generate from the message bundle. As far as I could tell it was working when I did that in my overlay but I don't really know what head.load is doing so I can't be sure it is still working when done in the bottom.html script block.\n\nI'll review more thoroughly.\n\nOne thing I learned about webjars is that there are a couple types. There is the classic kind which involves someone using Maven to download a library and package it as a webjar. There are also npm and bower webjars and I think anyone can create one of those if the javascript library exists in npm or bower format. You request a version on the webjar website and I think an automated process creates the webjar and pushes it to maven central.\n\nAwesome. Should be something we can do for that local JS file? . Valid point. The trouble is, as a brand new deployment if I were to customize the messages.properties I'd be grabbing all the messages and the versions altogether which ends up polluting my environment and if we end up bumping a JS lib version from 1 to 2, that deployer on the next upgrade would miss that bit. This is an internal implementation detail that should not be exposed to deployers at all.\nI guess we have a number of options here:\n\nAs you say, another base name.\nMove these into application.properties or such, and then use @environment. (Don't remember the syntax, and do not like this either, personally)\nThis looks promising.\n\nI like #3 best. \nPinging @danielfernandez to see if he shed light on this. . Valid point. The trouble is, as a brand new deployment if I were to customize the messages.properties I'd be grabbing all the messages and the versions altogether which ends up polluting my environment and if we end up bumping a JS lib version from 1 to 2, that deployer on the next upgrade would miss that bit. This is an internal implementation detail that should not be exposed to deployers at all.\nI guess we have a number of options here:\n\nAs you say, another base name.\nMove these into application.properties or such, and then use @environment. (Don't remember the syntax, and do not like this either, personally)\nThis looks promising.\n\nI like #3 best. \nPinging @danielfernandez to see if he shed light on this. . Travelling for the next few weeks; responses will be sporadic and slow. \nI'll try to review the changes later, but the high-level goals should be:\n\nIt's fine for the file to be buried in some jar. This is not something anyone would ever want to use in an overlay.\nIf anyone wanted a newer version of some JS lib, they would need to come to the project and update it at source, or completely do their own thing. Then leverage the change in an overlay. The change must be made where the change belongs.\nAs much as I agree with your point about messages.properties and overlays,  the sad reality is that folks do that sort of thing (...and documentation is for the weak). We should be able to \"force their hand\" by simply doing the right thing. The more you hide the internals and focus on the business problem, the better.\n\nAs always, thanks!. Travelling for the next few weeks; responses will be sporadic and slow. \nI'll try to review the changes later, but the high-level goals should be:\n\nIt's fine for the file to be buried in some jar. This is not something anyone would ever want to use in an overlay.\nIf anyone wanted a newer version of some JS lib, they would need to come to the project and update it at source, or completely do their own thing. Then leverage the change in an overlay. The change must be made where the change belongs.\nAs much as I agree with your point about messages.properties and overlays,  the sad reality is that folks do that sort of thing (...and documentation is for the weak). We should be able to \"force their hand\" by simply doing the right thing. The more you hide the internals and focus on the business problem, the better.\n\nAs always, thanks!.  > could you please detail what is the situation wrt Thymeleaf that might raise concerns here?\nWe are trying to remove CDN links to JS resources from Thymeleaf pages and move them into webjars, and externalize their versions via some sort of property file. The question is, does or can thymeleaf provide an easy way to access application-level properties? The best I found was your suggestion at some point that led me here. I take it that's still the proper way? \nThanks for circling back to the thread by the way. .  > could you please detail what is the situation wrt Thymeleaf that might raise concerns here?\nWe are trying to remove CDN links to JS resources from Thymeleaf pages and move them into webjars, and externalize their versions via some sort of property file. The question is, does or can thymeleaf provide an easy way to access application-level properties? The best I found was your suggestion at some point that led me here. I take it that's still the proper way? \nThanks for circling back to the thread by the way. . This looks like it's ready to go, right? Any other changes you have in mind? Anything I can review or help with? . This looks like it's ready to go, right? Any other changes you have in mind? Anything I can review or help with? . Sweet. I'll take a look a bit later today, and will respond. Stay tuned please. . Sweet. I'll take a look a bit later today, and will respond. Stay tuned please. . By the way you may also want to merge with master once; the build failures are my fault. I have been trying to beat into shape a couple of patches and packages I have received directly and that process got a little bumpy. The failures should be gone now.. By the way you may also want to merge with master once; the build failures are my fault. I have been trying to beat into shape a couple of patches and packages I have received directly and that process got a little bumpy. The failures should be gone now.. > One gotcha with using filters is that if you update a webjar version in gradle.properties, it won't be picked up in the already filtered common-messages.properties file in the jar of cas-server-core-web unless you clean that sub-project. I put a comment warning about that in gradle.properties but if you know a way to tell gradle that cas-server-core-web*.jar is dependent on gradle.properties, that comment could go away.\nThis needs to be improved for sure. I foresee hours of troubleshooting and @mindblender yelling at me :) \nI think we might need to define input/output pipes for the gradle task in that module, so gradle sees a need to recompile the jar if it sees that gradle.properties has or was changed. We might also be able to make tasks sort of depend on each other. So step-wise:\n\nBuild cas-server-core-web regardless, every time and re-filter.\nNext, make sure the rebuilding only happens with gradle input/output filters, making gradle.properties an input to the task. \nhttps://docs.gradle.org/3.3/userguide/more_about_tasks.html#sec:task_inputs_outputs\n\nAll of this can be achieved via a custom task defined in the web module, and then tied into the overall build cycle I imagine with dependsOn(). Sort of like how we are currently doing stuff with npmLint,  etc.. > One gotcha with using filters is that if you update a webjar version in gradle.properties, it won't be picked up in the already filtered common-messages.properties file in the jar of cas-server-core-web unless you clean that sub-project. I put a comment warning about that in gradle.properties but if you know a way to tell gradle that cas-server-core-web*.jar is dependent on gradle.properties, that comment could go away.\nThis needs to be improved for sure. I foresee hours of troubleshooting and @mindblender yelling at me :) \nI think we might need to define input/output pipes for the gradle task in that module, so gradle sees a need to recompile the jar if it sees that gradle.properties has or was changed. We might also be able to make tasks sort of depend on each other. So step-wise:\n\nBuild cas-server-core-web regardless, every time and re-filter.\nNext, make sure the rebuilding only happens with gradle input/output filters, making gradle.properties an input to the task. \nhttps://docs.gradle.org/3.3/userguide/more_about_tasks.html#sec:task_inputs_outputs\n\nAll of this can be achieved via a custom task defined in the web module, and then tied into the overall build cycle I imagine with dependsOn(). Sort of like how we are currently doing stuff with npmLint,  etc.. Fantastic work.\nI think everything looks good; just the build issue needs to be fixed, and I had a few optional suggestions for the way common props are handled. I don't see a practical use for them yet from the deployer perspective, but consistency-wise, they feel like settings to me that should be slightly externalized and refactored out of the core config class. . Fantastic work.\nI think everything looks good; just the build issue needs to be fixed, and I had a few optional suggestions for the way common props are handled. I don't see a practical use for them yet from the deployer perspective, but consistency-wise, they feel like settings to me that should be slightly externalized and refactored out of the core config class. . I realized that I'd forgotten about your questions here, @hdeadman . Sorry! Some inlined comments follow:\n\nThe out of the box cas-overlay-template can't be used to authenticate to the cas-services-management-overlay without some pain. One issue is that cas-overlay-template lacks the cas-server-support-json-service-registry dependency so the classpath:/services json files aren't used. \n\nCould you explain this a bit more? Neither of the templates share that dependency. Are you saying if they both did, there would still be problems with both apps recognizing the same directory for JSON services? \n\nAnother issue is various forms of SSL trust and hostname verification that prevent the management app from validating the service ticket. \n\nNever run into this myself, but I can imagine how this might occur. \n\nFinally, there are port conflicts running both via spring-boot, which I got around by putting mgmt on port 8444 instead of 8443. Is having those both run locally via spring-boot without significant pain a worthy goal? \n\nI think it's worth making sure that there is no port conflict. That bit, I can buy. \nPractically, most deployments run both the webapp and the management webapp on the same host. Most do not run with boot and embedded containers, so this item is probably not that much of a priority. However, removing any sort of pain is always a worthy goal. How about we start with the port change, here in the core codebase and see how that goes? \n. I realized that I'd forgotten about your questions here, @hdeadman . Sorry! Some inlined comments follow:\n\nThe out of the box cas-overlay-template can't be used to authenticate to the cas-services-management-overlay without some pain. One issue is that cas-overlay-template lacks the cas-server-support-json-service-registry dependency so the classpath:/services json files aren't used. \n\nCould you explain this a bit more? Neither of the templates share that dependency. Are you saying if they both did, there would still be problems with both apps recognizing the same directory for JSON services? \n\nAnother issue is various forms of SSL trust and hostname verification that prevent the management app from validating the service ticket. \n\nNever run into this myself, but I can imagine how this might occur. \n\nFinally, there are port conflicts running both via spring-boot, which I got around by putting mgmt on port 8444 instead of 8443. Is having those both run locally via spring-boot without significant pain a worthy goal? \n\nI think it's worth making sure that there is no port conflict. That bit, I can buy. \nPractically, most deployments run both the webapp and the management webapp on the same host. Most do not run with boot and embedded containers, so this item is probably not that much of a priority. However, removing any sort of pain is always a worthy goal. How about we start with the port change, here in the core codebase and see how that goes? \n. Yup.  That's my bad.  Will clean that up later. Thanks!. Yup.  That's my bad.  Will clean that up later. Thanks!. This is great. But your change removes the baseDn requirement for EVERYTHING, right? You want to make sure it's only optional for SASL. \ncc @tduehr . > There may be a case in which every entry in AD is in a different directory, so you can't determine the baseDn\nThanks. Could you qualify this with an example please? . No worries. Thank you for the follow up. A for effort.. Thanks very much. You may also want to sign the CLA here if you wish. Makes things easier going forward. . Awesome. Thanks Dima!. This is all great. Couple of comments:\n\nFirst things first, please fix the styling issues; Indentations, formatting, etc. Makes it very hard to review. If this is too much ask,please let me know and I'll lend a hand.\nPlease do make sure the build failures reported here by Travis CI are fixed. Some probably are styling related, some are javadoc related. Fill in the blank as much as possible.\n\n\nIs it a correct approach in order integrate fortress implementation?\n\nYes. This is all good.\n\nIs my the registration of fortress handler correct? I'm doubt since i'm constructing a new collection for it.\n\nNo.\nYou want to follow the example here:\nhttps://github.com/apereo/cas/blob/master/support/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java#L223\nYour config class needs to implement AuthenticationEventExecutionPlanConfigurer and then register the handler along with the resolver.\nThanks again!. In the style directory you should find checkstyle rules. If you have the checkstyle plugin installed for eclipse or intellij that would make it much easier. . I see you have added a few more commits; excellent. Please keep up the good work. Shout out if you have any questions. . Howdy, have you had a chance to resume working on this case? Need help? . Excellent. Thanks for the update. . >  is that ok create a test with mock?\nYes absolutely.\nAnd if there is an \"embedded\" fortress version that can be spawn up on demand for tests, that might even be better if it's available. If not, go with mocks please.. Please create a markdown file here similar to others:\nhttps://github.com/apereo/cas/tree/master/docs/cas-server-documentation/integration\nDocument using similar syntax as other files/docs and do also please include the diagram you have here as well. \nWhen you're done, add a reference to the new page here:\nhttps://github.com/apereo/cas/blob/master/docs/cas-server-documentation/sidebar.md#appintegration. Hi there, how's this one coming along? . Excellent. Thanks very much. . Thank you so much @yudhik . I posted a few minor comments here and there; but this looks great so far. When you make the updates, I think we should be good to merge and include this in the next RC!. Also once this is merged in, I would like to create a blog post based your excellent notes here: http://directory.apache.org/fortress/testimonials.html and put the final notes here on https://apereo.github.io/.\nWould you be OK if I used and referenced some of the content from your original post? . Thank you very much. I am not sure I understand your question? Could you explain? Does this change not fix the problem you have in mind?. Ah I see. I had in mind that bug usually is something where core functionality is broken. That doesn't seem to be the case here; you can get password policy working; you just need a small variation to make it better.\nIf it helps you better, we can surely mark it as a bug. In the grand scheme of things, these are just window dressings. . It will be released in 5.2 RC1 since you pushed the change to master. If you want it be available in 5.1.1 then you need to create a separate PR pointing to 5.1.x. Regardless of whether it's a bug or improvement or anything.. Excellent! I'll let the build pass and merge shortly. Thanks again. . It's probably related to the dependencies that are newly added and how to interfere with the overall scope resolution of artifacts. . It cannot. If it's deleted then it's gone from the remote unless you still have the local tracking branch. Shoot another pull request maybe? \nYou want to add the logout configuration component to your tests. See other tests for examples please. . Cool. No worries! I'll try to circle back later today . Thank you very much for the change. The correct artifact name is in fact cas-server-support-jdbc. Drivers should be pulled in automatically, or should perhaps be declared separately.. Going to merge back into 5.1. Thanks Dima!. Excellent work! I suspect this needs some back-end work; Let's get it merged and work on the follow-up separately. \nAs always, thanks!. Thanks Dima!. Yup. It is unrelated.  The build shall bounce back. This goes back to Duo not publishing jars and jitpack.io failing to grab the release. Sigh. \nAs Dima says, this is perfectly a legit change. Whether you want to push this to 5.0.x is up to you of course. . Cool. I can lend a hand in backporting this. Thanks. . Great! Please do.\nI backported the change to 5.0 and 5.1. Thanks again. . hmmm...I see your point. Is this because the policy is proxied and HZ has issues with deserializing it? Serialization (goes into the cache) works but not the opposite? Or maybe it never actually goes into the cache to begin with? \nI haven't looked at others, but do other policies need adjusting like this one? . That's all good. @dima767 is perfectly on point. \nTravis, could you when you find a chance review others and see they might have the same problem? (You want to review all  expiration policy beans, not just those in core).\nI'll backport to 5.1.x. Checked. This is the only policy with refresh scope. GTG. This is very very good. Thank you.\nThere are test cases in the codebase that handle cases for encoded tickets. Given this is a bit of a sensitive area, I highly recommend you attempt to write at least one test case for the simplest registry you can find to ensure deletes happen correctly. . PS If you need help, LMK and I'll set one for you to see how that could be done. . That, or here. Both are perfectly fine. . Your gist looks very good to me. No issues and your usage of parameterized tests is also superb.\n\nThis will double the registry tests being run (not sure if that is an actual issue).\n\nNo problem. The only issue might be that tests take longer to execute :) and Travis might complain. But that's Travis's problem and not ours.\n\nSome tests are not extending the abstract test (MemCache registry tests)... maybe they should be refactored to extend the abstract test class.\n\nThey should be, yes. Clean up where you can.\n\nSome registries are probably not using encryption (Jpa?)... Those might just run non-parametrized.\n\nThat's fine, or perhaps as an extra bonus we make those support the behavior as well. (Calls for a separate pull request though) \nKeep it up. . PS Please do merge with master once you get the chance to make sure all tests can run correctly by the CI instance. . Outstanding work! Thank you. This is awesome. \nAs you start going the path of refactoring stuff, please  open up PRs as early as possible so we all could get an idea what you wish to accomplish so we can help you better if needed, and please be mindful of the release policy and breaking API changes. The less of those you have, the quicker we can manage, merge and release. . Is this something, that we should backport to 5.1.x? (Not the tests, the core functionality that deals with deleting encoded tickets? If so, could I ask you to take a pass at 5.1 and see how difficult it would be to backport and then submit a PR? If too much, please let me know and I can cherry pick but I'd like it best if you could claim all the credit :). Just a quick update that I have added support for encryption to both mongodb and ignite ticket registries. You may want to review, if that peaks your interest. Probably there are still a few others that lack this support, and they will gradually mature.. Outstanding!! It's amazing how simple the fix eventually turned out to be :) thank you so much for tracking this down. . Don't worry about it. Travis is what we care about, mostly at the time. CircleCI is a bit of an experiment.\nThank you so much. . @jkacer would you mind if I asked you create the same PR for master and/or 5.1? You're welcome to do just one of those and I'll handle the other if that is too much work. . Pleasure! Thank you for doing all the work. I did absolutely nothing :) keep em coming. . All hail @mindblender ! Awesome work. . Sure. Will do. I'll try to get to this before this Friday. . I am not sure I see a missing dependency. Failures are styling-related? More to come shortly.. I did respond a while back that I think the build failures are not dependency related. They seem like styling issues. We still need to look into the log4j dependency issue nonetheless as well as the dynamic creation of the schema. . You can see the failures at the bottom of this page here https://travis-ci.org/apereo/cas/builds/243155462?utm_source=github_status&utm_medium=notification. Sure.. I made a number of suggestions. Sorry about the noise. \nI recommend that you:\n\nClose this pull request\nMerge with master\nHandle/review the comments posted here\nPost a fresh PR for us to continue reviewing and improving.\n\nAs always, thanks. . Outstanding. Thank you!. Thanks Dima!. Ported to 5.1 branch as well. Thanks! Keep'em coming. . See http://checkstyle.sourceforge.net/config_misc.html#TodoComment\nAdd this check into the checkstyle rules, or edit it if it already exists and set it to issue warnings instead of errors. . I removed and restarted the build. Thanks for following up. . This looks great. Please prepare a PR for both 5.1 and master, or do either one and I can handle the rest if you prefer. Thank you.. Thank you. Please fix the build failures and update the docs with the new setting as well. Great work. . Looks like the build failure is a fluke. Restarted. . Outstanding. Thank you. . Excellent. \n. Excellent. Could I ask you to fix the build as well please? . Q: this seems like a pretty reasonable change for 5.1 too. If so, would you want to backport the change with a 2nd PR? . Outstanding. Thanks very much for the find!. You're fine here. We are experimenting with some build/gradle fixes to make the build performant. You're in the clear. Thanks very much!. Thank you sir. . This is not the right fix. These are handled automatically by the webflow configurer component, or should be. You want to step through the code and figure out why they are not added for you. . Excellent work. Thank you all.. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. What problem does this pull actually solve? . Understood. Your change basically duplicates the pwdupdateform into a new file and then changes the text? That doesn't seem very efficient to me. There should be a way to reuse the same page with extra parameters. . pinging @mindblender to review. . True enough; we should probably consolidate them down to 1, still keeping them as a template with enough parameters. That's just my vote, but I'd like @mindblender review since he's the UX guy and lives in this area. \nAlso, given this is a \"new feature\", you should please target the branch to master. . Looks terrific. Could u also issue the same thing for master? Thanks again. . Thank you very much. Please remember to format messages using back ticks. Makes it easier for everyone to review and understand the case. . Sure. If you notice above in the original issue report, I reformatted the exception stacks to use formatted blocks.  Backticks or triple backticks for code blocks can be very helplful for others to read the code/problem and understand what's going on.\nSo rather than pasting:\n2017-06-26 15:23:13,982 TRACE [org.apereo.cas.audit.spi.ThreadLocalPrincipalResolver] - = :creationTime and r.principalId =\n :principalId]]>\nUse:\n2017-06-26 15:23:13,982 TRACE [org.apereo.cas.audit.spi.ThreadLocalPrincipalResolver] - <Resolving principal at audit point [execution(AuthenticationRiskScore org.apereo.cas.impl.engine.DefaultAuthe\nnticationRiskEvaluator.eval(Authentication,RegisteredService,HttpServletRequest))] with thrown exception [java.lang.IllegalArgumentException: org.hibernate.QueryException: could not resolve property\n: creationTime of: org.apereo.cas.support.events.dao.CasEvent [SELECT r from org.apereo.cas.support.events.dao.CasEvent r where r.type = :type and r.creationTime >= :creationTime and r.principalId =\n :principalId]]>\nOr here is one color coded for bash:\nbash\nls -al *.txt > grep -v \"something\"\nMore  here:\nhttps://unix.stackexchange.com/questions/27428/what-does-backquote-backtick-mean-in-commands. You can also use the github editor to make your life slightly easier:\n\n. w00t!. Thanks for the change. Reminder that you should remove the \"template\" from the PR body before adding comments. Just a nice-to-have :) as all that content gets sent to folk's emails and makes  it harder to focus on the \"actual\" description of the PR. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Very nice. Please update the properties catalog in the documentation to include the new setting for all relevant blocks (anything that is affected by the setting) . Also, if you dont mind could you please post a similar PR for master as well? . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thanks! When and if you get to it, additional tests for the handler would be very helpful. . There are certainly unit tests, I am not sure if there is any for this particular module. If you get around to it, that would be great. . Thank you for the change, but this needed to go in here; not in gh-pages:\nhttps://github.com/apereo/cas/blob/master/docs/cas-server-documentation/installation/JWT-Authentication.md\nI applied the change.. Very nice. Thanks. I remember that you did the same sort of change for master, right? \nGreat work. Thanks for taking the time.. Very cool, thanks for the reminder. Way too many things to keep track of :) Keep it up. . This is perfect. Thank you. \n\nDo not worry about \"making mistakes\": https://apereo.github.io/cas/developer/Contributor-Guidelines.html#be-not-afraid\nWould you be interested in issuing the same changeset to the master branch? . Sure. You're welcome to backport any and all changes you deem appropriate that remove pain :) . Also, if it helps there is this guide: https://apereo.github.io/2017/07/05/cas-contribution-guide/. Also, love that you stuck with the typo :) That should be \"duoClient\"; not dupClient!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. You may be interested in issuing the same patch to the master branch, to ensure the fix continues to exist beyond 5.1.x. . Also, since you mentioned you weren't quite sure how to do PRs, here's a better guide: https://apereo.github.io/2017/07/05/cas-contribution-guide/. This doesn't look right, because your base branch started off from 5.1.x. You want to base your changes off of a branch that spawned from master. Please let me know if you need additional instructions on how to do this.\n. Yup. . Outstanding! Thanks very much and congratulations on submitting your first PRs to the project. Hopefully, plenty more to come.\n\nAre you on Twitter? Wanted to give you a shout out. . Not a problem. All the same: https://twitter.com/misagh84/status/882705405209477120 Feel free to share :) . Awesome work. Thank you. Dont ever say you're not a Java developer :) This looks great. . Thank you! and congratulations on your first pull request :) . Thanks very much!. Excellent. Reviewing this, I do have a number of minor comments. . Aside from my comments, this looks great. Tend to the review and build failures and we should be good to go :) Thanks again. \nAlso, I dont see how this implementation is put to use. \n\nShould the default manager be swapped in the config to use this?\nShould the default manager be removed? . That's all correct, but practically speaking folks arent going to write their own config class to inject the new implementation into the runtime. If there is enough confidence in the new impl (and I suspect there is), why dont we simply just make it be the default instead and provide the feature out of the box? \n\nThe alternative would be for CAS to decide which impl to use based on a setting, and I suspect that might be overkill in this case. . This looks like it's good to go. What's pending? . Fantastic. Ping when you're ready and we shall merge. Thanks again. . @tsschmi could you take a look at SamlIdPConfigurationTests? Test are failing due to an NPE. . I made some changes to make the NPE go away. Please review when you find the time. . This is what I ended up doing to make the test pass. Not sure yet why; could have been a faulty test:\nhttps://github.com/apereo/cas/blob/master/core/cas-server-core-services/src/main/java/org/apereo/cas/services/DomainServicesManager.java#L120.  Excellent. Thanks for confirming. . Thanks very much. I'll set aside some time next week to take a pass at this and provide feedback. . This looks fine at first glance. You however should be moving this controller over to pac4j as well. Its implementation does not belong here; only its usage does. . Excellent. Thank you for picking up this work. Happy to work with you on the pac4j front. . Excellent. Please do the same for master.. Awesome. Thank you for the changes. . The build failure has to do with dependency management of this module. Chances are the module is publishing duplicate dependencies into the pom. Run locally and examine the pom. . I'll review the gradle/build issue a bit later to help out. Stay tuned please.. Cool, thanks. This will take me a while to review. Stay tuned; I'll eventually get to this. Working on something/docs that does require my full attention ATM. . Have not forgotten about this. Stay tuned. It's just taking longer than expected. Another week or two. . I'll set aside some time next week to review. Merge with master in the meanwhile please.. I gave this a try, and it looks like the build simply does not compile. That needs to be fixed before digging into dependency issues. . Cool, thanks. Will start reviewing next week. .  Build ticket registry based on Apache Cassandra. That's cool. Ignore it for now. . Could we also squash commits please? This has been running for way too long and I'd like to consolidate history a bit. Totally optional.. Beautiful.  Thank you. . > Please consider the possibility of making ticketRegistry.getTickets() returning a Stream so there would be only 1 stream created\nThis is likely a very good idea; though practically speaking we cant quite make the change without breaking APIs, right? Is there a way it can be accommodated as a default method or would it be something more suitable for the next major update? . I like the change, surely, but it might be too early to prep as it's the sort of change more suitable for the next major version. You're welcome to keep track of it on your TODO list :) but as I say, there is no talk of CAS 6 just yet and that might be something we could think about in 2018, etc. Unless you can come up with a way to introduce a new method signature without breaking existing impls, I say we punt for the time being. . Excellent work my friend, as always. Thank you. . by the way when I merge things, since I have commit access to your repo do you want me to delete the branch too? Or would you rather keep them around and self-clean? . Thank you for trying this module. \nDoes it make sense to use ChronoUnit instead? I realize one can put down 365 days but perhaps just saying 1 year or 12 months is easier? Or does it not matter at all?\nI ask because I KNOW someone will get picky about this :) . So here's the plan. I still think we should find ways to support alternative and wider units of measure for time. So I shall merge you proposed change, thank you so much to fix the current issue and then some time later in the future we can reserve room for improvement. Thanks again!\nYou may also want to sign the CLA here; purely symbolic. . By the way, could I ask: when you say \"we\" who is that exactly? Which institution/company/organization? . Ah, genau. Danke fur die Information :) . Fantastic. Thanks. . You probably need to ensure the same field is added to all other views, right? . What about duo, authy and other MFA login views?. Yes please add it. Chances are it actually is needed. \nAlso, what do you have tuned on in CAS that takes advantage of this geolocation field? Does GAuth on its own work fine, or are you doing additional things in the overlay that process that? I understand you're recording authN events. What else are you doing next with them? anything? . Excellent, thank you. . Please document the setting, both in the project documentation and in code. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Very good. Does this after master too? Another PR? . Awesome. Same exact process as you have now. A PR is a PR is a PR is a PR :)\nThank you, as always. . Howdy, have you had a chance to cook up something for master as well? . > If using Spring bootRun, I think this is normal since it is not compiled to javascript until run in the browser for debugging.\nIt is bootRun. Could we perhaps integrate and wire that step into the build so it works for all cases? Majority of development happens via bootRun and it would be great to make it all consistent with no exceptions.. Gotcha; So let me clarify:\nWhen we were testing this yesterday we could see the build running with --prod as part of bootRun. Maybe that's where I am wrong? @mindblender could clarify. Even if it's not running with that flag, switching to that particular service type is more of a serious error than just warnings. Tooltips were misplaces on the page and console certainly showed catastrophic errors rather than mere warnings. A screenshot actually might help better; I'll try to see about that unless Jeff beats me to it, or someone else.\nIn the end this is what should happen from an end-user end-developer perspective:\nRunning the management in bootRun should work exactly as it works with java -jar or any other acceptable build command. If there are manual steps in the process, it's best that we automate, and then some. \n. > bootRun as far as I can tell is not building with --prod. Sorry to be thick about this, but are you saying it should compile with --prod so it is the same as building for a war?\nYes exactly; Are there any drawbacks to this approach? If I understand correctly, running with --prod does minify and obfuscate javascript which might not be ideal for dev. Is that the only issue? I realize I did originally ask for this, thinking it's a required thing for the \"SAML2 Provider service Type\" changes but if the latter is fixed and the two are now irrelevant, we might safely ignore my objection. \n\nKeep the bugs coming and also let me know if there are any over all design/layout/architecture changes that would improve the PR.\n\nVery much appreciate it. One thing I have spoken to Jeff and Jodie about is that perhaps we might take this chance to rethink the JSON payload that is submitted to the backend. It's very cryptic and confusing at this point and I very much dislike the backend implementation of mappings and parsings. I could very much use your help on either front to work with others to make sure as this area grows larger, it continues to be maintainable. The RegisteredService model is only going to but grow and we must make sure either front is amenable to future changes without resorting to ugly hacks here and there.. Also note that master is sort of in flux as @dima767 and I have begun to clean up the CAS configuration model to document things and refactor. Keep merging with master and we shall eventually fix all build failures. We can talk more about the overall plan at the next dev call of course.. Per discussions with @tsschmidt, closing the PR for the time being to start anew and continue on a dedicated branch with plans to follow up with a PR prior to the official release. . Rather than reusing the page, is there a possible to route to a new page altogether to allow for better customizations and separations? . > Change HttpStatus.SC_FORBIDDEN to something else and add the relevant page (i.e. HttpStatus.SC_LOCKED and add the 423.html error page)\nI like this best. Seems like a quick win at low cost.. Great! You think you might be able to do the same change for master?. Thanks very much. Excellent work.. Thank you! Fix the merge conflicts please and we should be good to go. You may want to propose the same change for master as well. . You're right; I am not sure why Github complained about merge conflicts when I looked at this last. Ignore the noise. . Also please fix the checkstyle failures and this should be solid. Thank you, as always.. All excellent. Couple of minor formatting comments and then a fix for:\n```\n* What went wrong:\nExecution failed for task ':core:cas-server-core-util:checkstyleMain'.\n\nCheckstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/core/cas-server-core-util/build/reports/checkstyle/main.html\n```\n\n. Excellent. Ping back when ready. \nAlso, quick note: master is in a bit of flux at the moment. When you push updates, chances are you might see failures. Please examine the build log and if the error doesn't seem like something you may have caused, ignore it gently :)\nThanks!. @tduehr have you had a chance to resume work on this? RC is coming up this Friday and I'd love to include this one in as well. . This is great, thank you. Reset the logger-related changes back to what they were and we should be good to proceed. . Also please add at least 1 test case that confirms the behavior. . Neither. \nI expect you to revert changes done in this pull request that affect LOGGER elements here. If you browse the changed files, you will spot them. \nThank you. . Thanks very much. Could you please post the same PR for the master branch as well? . Also please remember to fix the build failures:\nCaused by: org.gradle.api.GradleException: Checkstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/support/cas-server-support-rest/build/reports/checkstyle/test.html. Excellent. Please merge with master once and resolve conflicts so we can proceed. Thank you. . Have you had a chance to merge this with master once and resolve conflicts?. Great. Thanks. . Have you had a chance to provide a patch for master? . @mindblender this looks like it's got changes that don't have anything to do with authn graphs. Do I have the right branch here? . Specifically the Dashboard.js file: is that complete? If we merged this as is, is it going to break/remove the existing dashboard functionality? . Great. Thanks. I'll merge and resume testing a bit.. When I build and deploy, I see cas/js/statistics-bundle.js 404 () in the console. What do I need to do to build the JS bundle? . Also it looks like webpack cannot build:\n```\n\nTask :webapp:runWebpack\nHash: e4605ac23da5642e23a7\nVersion: webpack 2.1.0-beta.25\nTime: 13964ms\n               Asset    Size  Chunks             Chunk Names\nstatistics-bundle.js  696 kB       0  [emitted]  statistics\n    + 1170 hidden modules\n\nERROR in Entry module not found: Error: Can't resolve './resources/static/js/components/dashboard/Dashboard' in '/Users/Misagh/Workspace/GitWorkspace/cas-server/webapp'\nFAILURE: Build failed with an exception.\n```. Ended up removing a number of references to Dashboard. Now I can see this:\n\nHowever, no graph is actually displayed (I know for certain the data is available). Clicking on refresh causes this:\nstatistics-bundle.js:19 Uncaught TypeError: this._listeners[t.type] is not a function\n    at HTMLButtonElement._ (statistics-bundle.js:19). One last thing: I am not sure but I think webapp/resources/static/js/statistics-bundle.js should be added to gitignore? . One quick question: what exactly is /authentication? . That aside, I think the changes you have applied here are perfectly sound. Just make sure the build can pass with formatting fixes, etc and we should be good to merge. \n\nOnly side effect is that existing installations with \"cas.theme.defaultThemeName\" set will now have that default theme also applied to other services as well.\n\nCan you elaborate on this? Is this not already true where the default theme does already apply to everything? . Excellent; thanks for the explanation. I think that \"side effect\" is an acceptable compromise. Ping when back the pull is back in shape please.\nWho is \"we\" in this context btw? What organization/company/institution if you can share? . I recommend you merge with master once more to get your changes up to speed. . Excellent work. I\"ll let the CI tool do its thing and will then merge. Thanks again. . Ah, sehr gut. Danke f\u00fcr die Hilfe :)\nPlease keep the patches coming. All are most welcome.. What you have designed here is perfectly sound and safe with one caveat: \n\nRemove the particular setting from the RegisteredService API and all its children, and turn into a property instead global to CAS. The setting could go into the module/component that deals with settings related to http and web in general.\nTurn the UrlValidator into a Bean that is created alongside the httpclient bean in the util module. Based on the provided setting construct the right validator.\nInject the validator into the builder here and have it simply use it.\nEnsure the default behavior is off, which is what it is today. \n\nThis is more complicated, but ultimately I believe modestly better, because:\n\nThe builder should not have to have \"custom logic\" around how URL validations are done.\nModifying the service API is massively complicated and one that we simply cannot do without very good reasons. If basically affects the entire CAS deployment, service registry implementations, etc. This does not belong there.\nTurning this into a general utility function probably promotes its usage in other areas of the codebase where logout and validation functions are used, such as other protocols that do more or less the same. . HttpClientProperties seems like a good choice.\n\n\nThe cas-server-core-util has currently no dependency to cas-server-core-configuration so I cant inject it right now.\n\nVery good point. We in fact can't add that dependency because that would introduce circular errors. How about we move the bean to cas-server-core-web? That seems like a better home.. Awesome sauce. Thanks very much!. Just a tip to make progress faster:\n\nIn order to avoid Travis failures on style and such, you can certainly run the tool from command line via gradlew checkstyleMain and gradlew checkstyleTest. \nIf you use eclipse or IntelliJ, there are checkstyle plugins available that you can use and scan the changes automatically. Very helpful, specially the IntelliJ plugin.. Yes JCE is a requirement for tests to pass at this point. Travis knows to auto-download and install them. . Of course. Thank you for the follow-up. . Also, do you mind if I ask you to squash commits as well? I normally don't care, but given this dates back to a few months ago and is likely going to increment further, it would be good to consolidate. \n\nPS Something is definitely off with the rebase. Note the number of changed files.. Merge with master once please.. Sweet. Do the same sort of change for master please and we shall merge. Thank you. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. First off, excellent work. Thank you! Second, I should ask that you post the same PR for the master branch. Should port very easily. Also please document the setting both in form of javadocs and in the project documentation page where settings are located. Do this for both branches please. \nOnce those are done, I'll let CI do its thing and then merge. . And you most certainly want to fix build failures, etc. . Howdy, any activity on this to make sure we can merge? have you had a chance to review build failures? . Please reset all changes and only include fixed SPNameQualifier (was not set in saml response). Do the same for master as well. . Sure. Two things:\n\nIt's absolutely unclear what this means: \"deleted \"Id\" from Java Attribute Names to reflect XML attribute names\"\nA patch release cannot present breaking changes as you have done with renames.\n\nThanks for the work, of course.. Excellent work.\nUnless I am missing this bit, the documentation does not explain how to obtain the scripts? Is there a reference to the download location? . Awesome! Thank you. . You'll need to figure out the root cause of the NPE and prevent it there first. The change in this PR does really nothing of value.. A number of comments:\n\nFirst,\"it runs in my machine\" is never an acceptable explanation. I understand sometimes Travis produces false positives, but in the end we need to make sure it passes regardless. \nPerhaps there is an opportunity here to rework the \"null\" return and do something else instead. Your patch here simply does a get with assumptions and something will cause that get perhaps to fail and throw expectations. it's also a very confusing thing as at first glance, it's absolutely unclear why this is happening and it very much feels like a hack. This is why I am saying you need to fix the root NPE issue and find an alternative. (Note that any fixes you make must also make it to mater, and 5.1 cannot present breaking API changes. So you may want to live with the extension you have right now if that is more practical). . I am not sure you're reading what is being put down. \n\nThere is quite a bit of discussion posted here, here, here and on the same PR where I indicate the change you have in mind is not an acceptable strategy for fixing the problem. I strongly recommend you review the above links. These are designed to avoid repeating the same discussions over and over again. We all have a limited number of keystrokes in our hands.\nI am not sure you're following; I understand what this patch does and how it does it. I simply don't agree with the solution. That's all. It smells like a hackish solution and I think there must be better strategies for checking for a valid TGT, rather than doing a get and hoping some exception comes up. I don't have a solution at hand just yet, but I know this is not it. I hope that makes sense and saves you the effort of repeating the same explanation again. . PS If you want to brainstorm about a possible alternative, that's perfectly fine and I am open to that...but that would possibly lead into mid next week. . Just to help move the effort along, and not block this, and get you thinking about this: as a first pass I'd say this is possibly a more practical solution:\n\nGrab the authentication object from the TGT up front.\nIf NULL, throw exception.\nElse, use the same object to rebuild the ST.\n\nSo:\n\nYou only have do a \"get\" once.\nYou are actually doing a validation of the TGT up front, and once rather than doing a get and treating that get like it's a validation call.\nEvery time you call something that resembles a get, you possibly should do something with the return value; Otherwise, it's m00t and smelly. This approach avoids that.\n\nHope that makes sense. If you feel like you want to resume, please post back and I'd be more than glad to reopen the PR and start again. Or simply, issue a new PR. \nThanks.\n. Thanks for the work. This is not the way this should be handled, because a support module cannot depend on a webapp module. Your approach is correct, just not the implementation. . I'll do a quick review to see if I can recommend any better options. I think the approach might be that the configuration class that builds and injects the default webflow actions and states must be given higher priority regardless, so that others follow quite later on. That should take care of other possible issues with other modules that might depend on the presence of default actions and states. . Please try with the latest master and see how it holds up. I made sure the webflow context is loaded with the best priority first, and then respositioned the initialization logic to be more explicit.. Excellent. Thank you for the confirmation and I apologize if I stepped over your work. I realized the fix was going to be much larger than anticipated and figured doing it would be quicker and less painful for you. However, A for effort and please continue to test the RC/master as you see fit.. Thanks @frett. Excellent work. Will review shortly. Any performance side effects? . Outstanding. Thank you...and it's so good to \"have you back\" :) . w00t...and booo android :)\nOne thing I might need your help, review and expertise is the work that is getting to give the management webapp a new facelift with typescript, material UI and lots more. Much of it is handled by the community and I am just mildly encouraging and keeping tabs. If you are interested to help and have time, I'd love for you to get involved. \n. We most certainly are, and thanks very much for starting a WIP pull request. Very well done.\nI recommend the following:\n\nStart with the basic outline of the module, taking inspiration from cas-server-support-consent-rest.\nYou essentially need an implementation of the ConsentRepository along with a configuration that activates it.\nI think the approach you have outlined with multi-valued attributes and JSON transformation works well, and it also is the same approach that the LDAP service registry uses. A good starting point for sure. Save the entire ConsentDecision as json into the attribute and you wouldn't have to worry about mapping fields one by one! You just have to make sure the attribute can carry the size as decisions grow.\n. You also may want to rebase and start off fresh to avoid having to deal with lingering commits. . Excellent question; I might need to do a quick bit of write up as it seems like it's a very common thing. In short:\n\nYou have two remotes. One for your fork, and one for apereo, right?\ngit remote -v\nWhat you want to do is the following, assuming \"origin\" is the apereo/cas remote and \"arbner\" is your own: \n```\ngit checkout master\ngit pull origin master\ngit checkout consent-ldap\ngit merge master\ngit push arbner consent-ldap\n```\nThis is not a rebase; but it does the job in a safer way. . Then, something weird is going on. This is fine, as I/we mostly care about files that are changed really and right now even though you have 20+ commits showing here, you only have 1 changed file, which is fine. I would tell you to rebase and squash and all that, but I think it's all m00t. Focus on the problem at hand, rather than fighting with git :) . Howdy, made any progress on this item? Need help? . Very good. Thanks for the update.\nDepending on how fast legal moves, I recommend you try to get this done before RC3 goes out...or else we might be forced to push this out to RC4 and beyond depending on the incoming changesets and whatever changes need be done. . Friendly ping; any updates on this one? . Outstanding. Looks perfect to me. Thank you. \nI am working on a number of fixes to get our CI build passing again. Please merge with master by tomorrow and things should turn green again. We'll merge immediately afterwards. . Master should be passing right now. Would you rather I merge and fix styling/etc issues, or would you want to continue with all that yourself? . All green and merged. Thanks again. . Quick update:\n\nMade a pass, added logging to the repository and a few other tweaks to ensure a number of ops per auto-inspections use java 8 idioms (such as lambdas, etc).\nAdded to release notes https://apereo.github.io/2017/09/15/520rc3-release/#attribute-consent-via-ldap. Wonderful. Thanks very much for continuing with this. . Thanks for the pull request, but this is not the way you should handle this. This functionality is covered in master, with the help of a boolean property. I recommend you review what is done in master and backport as needed. . The problem should be fixed given attributes with special characters are encoded. Or should be. See the attribute encoder for details. . It's not meant to be released. It's used for extensions.. Thinking a bit more about this, I realized that I was very wrong here. You are totally in the right that we should \"fix\" the attribute name. The strategies that I had used in the past were done in poor health and I am not sure why I never thought of just designating a fixed attribute name for the Dn. We should definitely do that. . Excellent. Sorry to lead you down a wrong path.\n\nI'd say you are right; but the following changes are possibly in order:\n\nfixate the attribute name to a predefined value. Do this for both 5.1 and master. No need for an option there.\nadd a Boolean allowing the capture of dn as a fixed attribute. Just like master, this would be done for 5.1\nfinally, the attribute 'can' be released if they policy says release all in which case we still need to make sure it's encoded correctly in the format is xml. I think master is fine but 5.1 might need the change. As you note this only applied to xml and the json format should handle this fine.. > 1. If you agree, the predefined value of this attribute will be set to \"principalLdapDN\" (There is no such attribute in any well known ldap schema, so there will be no conflicts...).\n\nprincipalLdapDn, but yes.\n\n\nTo be more ... bulletproof, the option for changing this value should remain in case of a conflict with a custom schema that contains this attribute... If not, most of the changes in the original PR will be removed (no option for setting/changing the name of the attribute) and \"principalLdapDN\" will be added in the attributeMap in LdapAuthenticationHandler.java. (Also for master).\n\n\nSure.\n\n\nEncoding won't be an issue anymore, as \"principalLdapDN\" does not contain any forbidden character (for xml name element).\n\n\nExcellent.\n\n\nAll collectDnAttribute related changes will be backported from master. Should this be done in this PR or in a new one?\n\n\nSame is fine. Choose whatever is easiest for you.\nAnd the attribute is not referenced anywhere else. It's only made available should extensions at the time of custom deployments need it.\nThanks again. . Yes all good. \nI am not particularly excited about #2, because I simply can't think of a reason to why anyone would want to change that name but if you want to add an option, that's perfectly fine.. OK. Sounds good.. Excellent. Let's do the same for master and then we can surely merge. Thanks again. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Great. Take care of this and we should be good to:\n:support:cas-server-support-reports:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/HealthCheckController.java:46: Unused Javadoc tag. [JavadocMethod]\n FAILED. Great. Fix the build failure and we should be good to go. Thank you. . Thanks for the change.\nCould you please explain why you see ids being the same? Have you looked into the cause to figure out why this happens? . Thank you for the explanation. This makes very good sense.\nA few things:\n\nPlease fix the build failures; usually this has to do with formatting, etc.\nI recommend that you add a few test cases to ensure this bug is correctly fixed and verified.\nWhen you're done, please post a similar PR for master and we'd be happy to merge both.\n\nThanks again.. That has nothing to do with this issue. It's just INFO. INFO means information. You can review the build failures here on the PR request noted by continuous-integration/travis-ci/pr, examine the log and make fixes. You see how it says \"Some checks were not successful\" ? Click details and examine the log.. And you see the following, if I may:\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/repository/credentials/GoogleAuthenticatorAccount.java:41:14: Variable 'v' should be declared final. [FinalLocalVariable]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/repository/credentials/GoogleAuthenticatorAccount.java:41:18: Use a single space to separate non-whitespace characters. [SingleSpaceSeparator]. Excellent. Merge with upstream once, and then issue should go away. Then start working on the other items.. Excellent. I cannot merge just yet because we have a number of outstandings tasks:\n\nI recommend that you add a few test cases to ensure this bug is correctly fixed and verified.\nWhen you're done, please post a similar PR for master and we'd be happy to merge both.\n\nIs that something you can handle? (I can help with the 2nd item for sure). . Not a problem. Thanks for your participation. Whenever you feel inclined to resume work please post back and we can continue. Thanks again.. Very good. What you want to do is provide a PR that is targetted against 5.1, along with a set of test cases prefererably where you test the patch against MongoDbGoogleAuthenticatorTokenCredentialRepository. So you want to write a MongoDbGoogleAuthenticatorTokenCredentialRepositoryTests similiar to MongoDbGoogleAuthenticatorAccountRegistryTests and ensure your changes are actually correct. \nWhen that's all good and done, you are welcome to post the same PR targeted against master or ask me and I can port it forward for you.. And more importantly, all you need to do is add @org.springframework.data.annotation.Id to the id field. That's all. . Excellent. Thanks very much. . Only if you want to :) (Or I can do the same too if you prefer) The \"rule\" mostly is: changes/fixes done to branches other than master need be brought forward but not the other way around unless you do want to yourself. Because of course, you always want the latest release/master to contain newer fixes/features and have folks upgrade to it when it's released. . You sure can, yes. Also include the tests and make sure they all pass. Thanks.. We fix the failures. . Going to close this for now, due to inactivity. If you wish to resume on this, please post back so we can reopen and continue.. @tsschmi Merged this one with master; had to resolve a few conflicts. Take a look please when you get a chance to let me know if the set of changes are good.. Appears the previous merge took care of it all. Going to close this for now, and continue testing master with @mindblender . Thanks. Good start but this is not the right fix. Rather than passing a new object to the view, you need to make sure the service that is passed, IS the real service. Look into service selection strategies. . Much better! Thank you. . > Should I be looking at master to create a PR there also?\nThat would be very welcomed if you are up for it. Otherwise, I can also port forward. Fair warning: given it wouldn't be a straight-up merge, there will be some manual work involved to manage changes and move over. If you do decide to do it, try not to change branches within the same project/directory/workspace. Dedicate two separate directories/projects, one for 5.1 and one for master. Or at least, that's what I tend to use.. Some additional thoughts on this:\n\nGiven master is marching towards 5.2, I believe per the release strategy we are allowed to make breaking changes/behavior meaning that I think it would entirely be OK to take up your suggestion of turning on the auto-registration functionality and hopefully call it good for master. Good thing about feature releases is that functionality as such can change, with good reason and rationale of course. \nI put together a prototype with a dynamic/general feel to it and I think it should pass muster as a first draft. However, if auto-registration=true, we may not need the changes at all.\nDoes auto-registration=true mean that we can also turn off/remove explicit registrations that are currently done? I remember way back way, this behavior was put in place to account for some weirdness, though that was about 5-6 years ago and much has changed since then. If the property change indeed means we don't have to register everything whether statically or dynamically, I'd be entirely in favor of removing what might be considered cruft in favor of better kryo behavior...and again with the property change, all we might have to do for the port to master would be to change the default value of the option to be true (remove all explicit registrations) and move over the tests and other small fixes/changes you so wonderfully put together to ensure all passes. \n\nLook forward to suggestions. . I don't and did not find anything that would prevent an apereo project from displaying ads. If there is one, sure, happy to back out. . > I thought about making the admin pages' AuthorizationGenerator available for the consent client, so roles are resolved there too. What do you suggest?\nI'd say that's desired behavior, actually, right? The /cas/status pages are designed to be accessed by an administrator, while the set of pages/endpoints you are working on are designed to be user-focused.  Why should I logging in as a user be able to navigate to /cas/status endpoint and such? \nOr perhaps you envision that I, as an admin, would log into the consent views editing someone's records and then navigating to /cas/status? \n. > The error only occurs when an admin logs into consent to manage his or her account, and then tries to access admin pages in that session. As an admin I think I wouldn't expect it to be a problem.\nRight. I didn't consider that an admin may also be a user. Strange, but not that strange of course.\n\nThe solution to logout and login again with the right service does not seem intuitive to me.\n\nAgreed, though I wouldn't mind seeing a \"logout\" button. What you're building is really an \"app\" that is bound to the state of the SSO session and it would be good to expose that functionality. Not that it would be a required solution for the issue you've been working on; more of an addon.\nI dont see any problems with the extra overhead at this time since I gather it would be fairly minimal. I would however suggest that you add a bit of docs to explain the nature of the service that is auto-added. I imagine controlling that service in the registry via extra policies would amount to the same thing, reducing overhead (i.e. everyone with attribute blah can get to this page, otherwise no). \n. > I'm not sure I understand. Do you mean replacing the method that adds the consent service to the service registry by some logic in the registry classes? You mean some attribute that proves authentication has happened?\nNot quite. A service that gets added to the registry has associated policies that may control access. Such that you might say: \"generate a ticket for this application if the user has an attribute x matching value y\". That's a simple authz rule. Given what you're doing here with roles and such is very similar, and you're also auto-adding an entry to the registry, it's probably good to document that the access control is also controllable via the registry policies for the added service.\nRef: https://apereo.github.io/cas/development/installation/Configuring-Service-Access-Strategy.html. Right; Let me think about this a bit. I wonder if sha-512ing things was overkill. Probably was. \nHang on for the day. I'll get back to you by tomorrow. . What I would like to propose and build into master is as follows:\n\nWe do need to remove the sha-512 functionality and switch to base64. Given the names/values are encrypted and signed already and can be decrypted back, there is no need for extra hashing. I believe it was done perhaps to \"compress\" the generated string, but it obviously has caveats. You SHOULD be able to, from CAS, get the exact collection of attributes and values letting it decrypt everything for you. \nThose who might have records produced in sha-512 might need to nuke and restart over. I don't think we need to expose an option to keep backward compatibility here, given I don't think a lot of people have consent turned on anyway. So the impact would be minimal.\n\nLMK if that is agreeable with you and I'll proceed to build this up so that you can continue.. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. > Just glancing over a couple of them, it looks like the issue also exists in the Cassandra one.\nExcellent. If you want to shoot over another PR to handle that bit too, all perfectly good. Both this and Cassandra are fairly new. So as much attention as you can spare, all the better.. > While working on this I noticed that the pm flow relies on PasswordManagementService.getSecurityQuestions() having a stable/consistent iterator, but that's not documented in the interface. It may be worth another commit to get that spelled out explicitly in the javadoc.\nSure.. Excellent. Thank you. . Ported back to 5.1.x. Thanks again. Ported back to 5.1.x. Thanks again. Ported back to 5.1.x. Thanks again. Ported back to 5.1.x. Thanks again. >Without something like this we resort to replacing the PasswordChangeAction bean, and in my continuous quest to not replace things I'm looking to solve the problem upstream.\nSounds like you read this: https://apereo.github.io/2017/09/10/stop-writing-code/ Good for you.. >Without something like this we resort to replacing the PasswordChangeAction bean, and in my continuous quest to not replace things I'm looking to solve the problem upstream.\nSounds like you read this: https://apereo.github.io/2017/09/10/stop-writing-code/ Good for you.. backported to 5.1.x. backported to 5.1.x. Excellent, thanks. Please:\n\nPort the change to all relevant branches. (If I can help, LMK)\n\nEnsure CI passes for all. . Excellent, thanks. Please:\n\n\nPort the change to all relevant branches. (If I can help, LMK)\n\nEnsure CI passes for all. . Heads up; the next 5.0.x release is happening this Friday. Are you able to put some time aside to review the failures on this PR so we can merge and include the changes? . By the way, note that 5.0.x is going out of \"active commission\" in about a month; your time might be better spent reviewing 5.1.x or 5.2, etc. See the maintenance policy for more info please.. Thank you for the PR. \n\nCould you please describe:\n\nWhat exactly is the intention of this pull request? What problem does it solve, and why?\nWhat, at a high level, are the key components here?\nWhat, at a high level, is the user-facing functionality?\n\nI recommend you close the pull request and start at smaller chunks. We simply will not be able to review and merge a patch that has 36 files changed with all new functionality in time, and it's likely this will go stale for a long time.. Ah gotcha. As I was browsing through the files I was expecting things to be more PMish :) and couldn't quite make out the connection between that and what you consider an editable attribute. \nSo ok, you essentially have put together designs where CAS would be able to generically edit a given attribute from some sort of data source backend, and one class of attributes would be those that deal with security questions. So far, so good. I understand the motivation where today, there exist islands of similar functionality that deal with AUP and such and I guess you were inspired to kill many birds with one design. Very good!\nHowever, I recommend that you back out most changes and solely/exclusively focus on a smaller problem with a much smaller scope that only deals with security questions and attributes associated with those. It might seem counter-productive but I am in fact recommending that you should perhaps go for yet another island. My recommendations stems from the fact that I believe the work you are doing, while great as it can be, is a little premature, for the following reasons:\n\n\nThe password management functionality in CAS is fairly new; in fact most \"serious\" deployments would end up deploying a separate standalone app altogether to handle that sort of thing. While I personally have high hopes for this thing in CAS today to take off and remove that need, the reality is that the margin is far too narrow to dedicate an entire framework and technical batch to handle more advanced operations such as this more generically. I could be entirely wrong here of course, and I also suggest you shoot a message to the cas mailing lists and ask around; if there is enough interest to spend time and energy maintaining this for the broader masses and have other modules leverage this behavior, by all means. Happy to jump on board, but it seems like something of a nuclear power plant designed to power a light bulb. \n\n\nAnother factor in me hesitating is that sort of framework you're working on where CAS ends up updating essentially an identity store is not quite a good fit for CAS. As a general framework allowing CAS to edit attributes and principal data, the work seems overkill given most \"serious\" deployments have dedicated IDM solutions solely tasked for that sort of thing where CAS simply becomes a consumer. Much of that framework already exists outside, and will continue to live as such with complex rules and engines provisioning things here and there. The sort of \"update\" ops CAS ends up doing mostly deal with one attribute here as a boolean and few over there for blah. Fairly limiting and very focused. This is why I recommend you focus on a much smaller problem; I can promise you that the adoption of the \"general framework\" would be rare and eventually, I am afraid, it will end up as code once written and then deleted only to remain as an extension for you. \n\n\nPlease don't read this the wrong way; I am not certainly referring to your needs as \"not serious\" and I am rarely one to call something \"outside of core vision\". (In fact I wrote a whole blog post about the exact opposite) I think everything is in scope given proper demand and adoption possibility at the right time and I don't see this amount work would be worth it right now; but that's just me. I certainly do not want to discourage you from contributing, but a few more convincing votes would be great to express larger interest around the overall design of this possibly extracted from the mailing lists, etc. \nI am also going to ping @frett @tsschmi @dima767 to name a few to see what they might have to say, as more active contributors to the project. . > I'd be willing to back it up to only deal with password management if you feel that would be a better fit. After all, that's really the same code just with less configuration. Ideally I could hook it such that it would be possible to extend.\nExcellent. I think this would be a pretty good action plan; bonus points for extension policies later on which helps should use cases and scope ever grow beyond what we think they are today :)\nThanks very much. . @tsschmidt Looks excellent. A number of minor formatting issues and we should be good to go. Thank you.. Excellent wordsmithing. Thanks!. Thank you.\nIn the future, please try opting for a more descriptive title and/or commit message.. Excellent work. Thank you.. Merged into master and streamlined. Thanks very much! Great work. . https://apereo.github.io/2017/10/13/520rc4-release/#minors No 21.. Excellent. Thank you!. @frett Excellent find, thank you. Would you mind merging with master once please? I am trying to get our Travis CI thing back in shape and it's just been kicking me around to no avail. Sorry about the lingering changes. . Much appreciated. . Thanks. Does this change only add (Changed in version 5.2!): to the docs? Besides the table formatting fixes of course. Also, changelog:\nhttps://apereo.github.io/2017/09/15/520rc3-release/#surrogate-authentication\nYou don't need to add the warning. master is already 5.2. Please remove the warning. Everything else looks good.. Thanks very much.. Wonderful. Incremental progress FTW!. Yes, please do one for master too. Excellent work. . Excellent.\nBefore merging, let me ask: is this not what you need?\nhttps://github.com/apereo/cas/blob/master/webapp/resources/templates/fragments/loginform.html#L89. Ah of course. I failed to see the changes were in loginMessagesView. Sorry!\nPS Could I ask you to reach to me privately either via email or gitter? I do have something I would like to discuss with you and see if that might spark an interest. I am at mmoayyed@unicon.net or @mmoayyed on Gitter. 100% optional :). > Sorry for the extraneous edits to messages.properties, my editor killed trailing whitespace when adding screen.button.changePassword=Change Password. I figured I'd leave them since cleaner is better?\nAlways, and I don't care that much :) All is good.. > With core CAS from what I can tell this would have no impact on behavior and in that context is purely theoretical.\nThanks for the change. I don't see any issues with the change, and offhand, so long as it has no \"visible\" impact it's good. \nKeep'em coming!. I am however interested to learn more about what you're doing here:\n\nMy use case: I'm capturing a few additional attributes about the initial ticket issuance request in a custom Service object that I want access to after validating the ticket.\n\nWhat's happening here? . Great. Thanks for the notes. . Wonderful. Pending green checks I will proceed to merge. Thanks for resuming work on this!. This is excellent. However note that we cannot ship this behavior in a patch release as you have it. Please reposition your PR to target master. Changes targetted for 5.1 need to be much smaller.. Outstanding; one small comment before merging. . Thanks very much. Awesome work!. Other than downloading the client and trying it out, I don't know of a different way to check for support.. Not sure I agree with this change. Why? . Providing a free license is one thing. Having the tool power development is another. We are not advertising usage. Just that we most commonly use the tool to build the software. For what it's worth, the eclipse logo might also be there too. That's probably a better change for this PR.. Sounds good. Thanks!. Since the management app is going to be extracted away, going to close this pull request and follow-up elsewhere under the relevant repo. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Since the management app is going to be extracted away, going to close this pull request and follow-up elsewhere under the relevant repo. Sweet. A number of comments and questions:\n\nHow does this work authorizedToReleaseAuthenticationAttributes that can be assigned to an attribute release policy?\nWould it not be better to design a component that calculates what is released and what is not (in the view), rather than passing array lists around? That should make it better, later on, to extend as well and customize/override?\nIn Cas30ResonseView, should getCasProtocolAuthenticationAttributes be cleaned up? . Outstanding. Thanks Daniel. . Outstanding! Thanks very much. Looks perfect. . Sounds great. I probably won't get to it this week, but certainly on the TODO list for the next.\n\nAgain, thank you for all you have done so far. .  Build ticket registry based on Apache Cassandra.  Delegated authn to SAML: work through SLO changes and quirks. This is starting to look better every day, so thank you very much. I think there is still a few things to clean up on the webflow side; I'll try to take a look before the weekend.. Thanks very much. Would you be interested to post the same changeset to the master branch?. Thank you very much for the contribution!. >  I'm finding several places I have to duplicate usage of the AuthenticationServiceSelectionPlan I'm wondering if the better overall design would be to incorporate usage of the selection strategies directly into the ServicesManager.\nIt's likely that we can encapsulate all that logic inside a common component but I don't think ServicesManager is a good bit. There should be nothing in the manager that deals with the http-request (and if there are, those should be removed). . This will also need to be updated https://apereo.github.io/cas/development/protocol/CAS-Protocol.html. Added to changelog: https://apereo.github.io/2017/12/29/530rc1-release/#minors. Thank you very much for the contribution!. While I understand the issue, and this is certainly a problem, I do agree with @frett that 1) The placement of the patch in the chosen resolver is probably not right 2) and this is something that should be taken care of by the authentication policies. I recommend you do a bit more research to see if the policies can lend themselves to this situation and how, and in the meanwhile, also fix the NPE. . We cannot. Please review the previous comments as well as the release policy. . Two things, amongst many:\n\nAPI changes are not allowed in patch releases. See maintenance/release policy.\nboolean equalsIgnoreDate(Object other); is simply not an elegant approach and with respect, feels very much like a hack and a workaround. \n\nI have not looked into this problem deeply, so I apologize if this sounds vague or unhelpful. I am not yet sure what approach we might take, but I certainly know it's not going to be boolean equalsIgnoreDate(Object other);. I can circle back and try to review this with a bit more feedback, but it will take some time. So please bear with me.. Thank you very much for the detail explanation. I understand.\nI agree with your suggestion that a private method in the resolver class as you note is better. When you do move the method, rather than calling it equalsIgnoreDate, name it something that makes its intention well known and rather than fully comparing all fields, pay special attention to only comparing those you actually might need. Please remember to post the same patch for all relevant branches.\nLong term and possibly something to be done on master: I wonder if we can transform this private method into some form of strategy API that can decide when and under which circumstances a TGT might be created. Seems a little too overkill for now, but it's something to keep in mind.. Teriffic, aside from one minor comment. Please post the same patch for all other relevant branches. Happy to merge. \nThanks again for your patience. Wonderful work. . Thank you very much for the contribution. Keep 'em coming!. Thank you very much for the contribution!. Outstanding work. Thank you. At first glance, this looks perfectly solid. The build is going to bounce back and forth for a little bit so dont be alarmed just yet if you see failures here. I'll do a better review later today and shall merge, pending comments, etc and greenness of the build :)\nAgain, thank you.  . You should be able to run this:\ngradlew test -x javadoc -x check -DignoreTestFailures=true --stacktrace -DskipSass=true -DskipNestedConfigMetadataGen=true\nReference: https://apereo.github.io/cas/developer/Build-Process.html\nOr something like this:\ngradlew check -x javadocs --parallel\nMind you; this will take some time.. Added to the changelog: https://apereo.github.io/2017/12/29/530rc1-release/#minors. @hdeadman Looks great. Could you resolve the conflicts, please? . Thanks. Excellent work!. Thanks for the change. Why are we doing this? . Thanks for the change. Why are we doing this? . https://apereo.github.io/cas/developer/Maintenance-Policy.html\nhttps://apereo.github.io/cas/developer/Release-Policy.html\nhttps://apereo.github.io/cas/developer/Contributor-Guidelines.html. https://apereo.github.io/cas/developer/Maintenance-Policy.html\nhttps://apereo.github.io/cas/developer/Release-Policy.html\nhttps://apereo.github.io/cas/developer/Contributor-Guidelines.html. @dacurry-tns If you are up for posting the same patch for master, that would be excellent. Otherwise, we can take care of it for you. . @dacurry-tns If you are up for posting the same patch for master, that would be excellent. Otherwise, we can take care of it for you. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. No worries. The failure is likely not related. I am working through some test failures and the build might be shaky for a while. But this looks pretty good. Thank you!. No worries. The failure is likely not related. I am working through some test failures and the build might be shaky for a while. But this looks pretty good. Thank you!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Sweet. Thank you @dacurry-tns!. Sweet. Thank you @dacurry-tns!. You will need to submit another pull request with the same change targetting the 5.1.x branch instead.. You will need to submit another pull request with the same change targetting the 5.1.x branch instead.. There are no bots! :) Only people masquerading as bots. . There are no bots! :) Only people masquerading as bots. . Excellent. Thank you. Take a second pass please and fix the build failures. We should be good to go. . Excellent. Thank you. Take a second pass please and fix the build failures. We should be good to go. . Thanks. I'll get this merged for now and will work on follow-up tests later. Turns out, some of the tests we have had for a while are not quite tuned for parallelism; those that deal with LDAP or throttling. It's a gradual effort and something that is very tricky to try and duplicate locally. If you have time and energy, I'd very much appreciate a helping hand in this area. . Thanks. I'll get this merged for now and will work on follow-up tests later. Turns out, some of the tests we have had for a while are not quite tuned for parallelism; those that deal with LDAP or throttling. It's a gradual effort and something that is very tricky to try and duplicate locally. If you have time and energy, I'd very much appreciate a helping hand in this area. . Thank you very much!. Thank you very much!. @hdeadman could I ask you to possibly post the same changeset for the 5.2.x branch? . @hdeadman could I ask you to possibly post the same changeset for the 5.2.x branch? . Very nice. Thank you. Please post the same changeset for the master branch. . Very nice. Thank you. Please post the same changeset for the master branch. . Thanks for the changeset. I strongly recommend you reduce this pull request down to a laser-focused batch of changes targetting a specific functionality/module. Changing 80+ files at once is perfectly good, but chances of someone reviewing it, and taking the time to review it are very slim, which means your progress here will only be that much slower. This PR will sit here for a very long time. . Thanks for the changeset. I strongly recommend you reduce this pull request down to a laser-focused batch of changes targetting a specific functionality/module. Changing 80+ files at once is perfectly good, but chances of someone reviewing it, and taking the time to review it are very slim, which means your progress here will only be that much slower. This PR will sit here for a very long time. . It is unclear what this pull request exactly does. Please rebase/merge with master and try again please with a new pull request. Thank you. . It is unclear what this pull request exactly does. Please rebase/merge with master and try again please with a new pull request. Thank you. . Please see:\n\nMaintenance Policy\nRelease Policy\n\nContributor Guidelines. Please see:\n\n\nMaintenance Policy\n\nRelease Policy\nContributor Guidelines. Thank you very much for the contribution!. Thank you very much for the contribution!. Sweet. Post an update here as well: https://apereo.github.io/2017/12/29/530rc1-release/. Sweet. Post an update here as well: https://apereo.github.io/2017/12/29/530rc1-release/. Thank you very much. You may want to do the same for 5.2.x as well. . Thank you very much. You may want to do the same for 5.2.x as well. . Wonderful. Thank you!. Wonderful. Thank you!. Thank you for the contribution. This is exactly the sort of thing we would like to avoid. Rather than spending time documenting what doesn't work, your time is much better spent making sure things do in fact work. If you find this to be a problem, the best thing you can do is to in fact fix it. . Thank you for the contribution. This is exactly the sort of thing we would like to avoid. Rather than spending time documenting what doesn't work, your time is much better spent making sure things do in fact work. If you find this to be a problem, the best thing you can do is to in fact fix it. . By actually fixing bugs.. By actually fixing bugs.. Thanks for the change very much. It was small enough that I ported forward manually, but I do appreciate your help.. Thanks for the change very much. It was small enough that I ported forward manually, but I do appreciate your help.. @leleuj This look to you? . @leleuj This look to you? . > I\u2019m wondering if this fix, using the service id, could cause any concurrency issues for multiple requests at the same time?\n\nI wouldn't think so. This was mostly done to remove metadata collisions especially if two services end up having the same name for instance. So I think what you have here is fine, thank you. What I am more interested in is finding a way so the file actually gets used. You want to ensure that the resolver only downloads the file again if it is in fact considered \"expired\". . > I\u2019m wondering if this fix, using the service id, could cause any concurrency issues for multiple requests at the same time?\nI wouldn't think so. This was mostly done to remove metadata collisions especially if two services end up having the same name for instance. So I think what you have here is fine, thank you. What I am more interested in is finding a way so the file actually gets used. You want to ensure that the resolver only downloads the file again if it is in fact considered \"expired\". . Wonderful. Thank you for your time.. Wonderful. Thank you for your time.. Thanks for the analysis. I'll give this some thought and get back to you. Stand by please.\nThis might be redundant, but could you also attach your configuration? meaning, any properties you have turned on related to this as well as any service definition files. . Thanks for the analysis. I'll give this some thought and get back to you. Stand by please.\nThis might be redundant, but could you also attach your configuration? meaning, any properties you have turned on related to this as well as any service definition files. . Thanks. Reviewing this today. Stand by please.. Thanks. Reviewing this today. Stand by please.. I am unable to duplicate this in master. I can see that caching policies correctly kick into action and the backup file is only downloaded once. However, I can see that when the cache has expired, a new metadata file is downloaded and put on the disk with the old downloaded metadata files in there already. I can see that over time this might flood disk. \nIt's possible that caching improvements are not available in 5.2.x yet. \nIn order to fix the above problem, I am going to try and slightly make the backup file name more intelligent, cleanup old lingering files if a new metadata is about to be downloaded.. I am unable to duplicate this in master. I can see that caching policies correctly kick into action and the backup file is only downloaded once. However, I can see that when the cache has expired, a new metadata file is downloaded and put on the disk with the old downloaded metadata files in there already. I can see that over time this might flood disk. \nIt's possible that caching improvements are not available in 5.2.x yet. \nIn order to fix the above problem, I am going to try and slightly make the backup file name more intelligent, cleanup old lingering files if a new metadata is about to be downloaded.. This is now handled better in master. Please take a look and see what improvements exist, if any and backport functionality to 5.2.x where needed. SamlRegisteredServiceServiceProviderMetadataFacade is a good starting point, as well as SamlRegisteredServiceCachingMetadataResolver.. Wonderful. Thank you!. Outstanding. Thank you!. Thanks for the patch.\nI understand the problem, but this is not a solution we can accept. You need to ensure the data source is correctly created for everything everywhere and not just for a bind and not with the likes of Class.forname, etc.. > Do you have any suggestions on how I can rework the patch to meet expectations?\nSure. You should look into how the data source itself is created and where and the modify that logic where necessary. To create a one-off data source for a component that deals with database-related matters is not a good fit. It would be also good to explain and then figure out why SQLFeatureNotSupportedException is thrown. Maybe the root cause requires attention to a different area. . Going to close this for now due to inactivity. Feel free to resume when you get the chance. Thanks!. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. I dont think this is needed. Have you examined the code in DefaultAuthenticationEventExecutionPlan? sorting already takes place there.. > I don't know if its a good idea to expect a Set to be sorted, maybe indicating it with using SortedSetwould be slightly better.\nI agree. However, since we won't be able to make API changes in a feature release, for the time being, it would be better to simply change the implementation body to ensure a sorted a set is returned albeit the return type as a Set. . Thanks very much for the change. A number of comments:\n\nThere is no such thing called P4j. It's Pac4j. Please be consistent.\nThe initial action that is added seems like it's entirely duplicated code from elsewhere, right?\nPlease ensure the same patch is posted to the master branch as well.. > I could improve it and extend the initialAction instead of copy a part of it. Let me know what you think about it.\n\nSounds like a better idea to me. Override bits that you need, if any, while delegating much of the work to the InitialAction class.\nThanks for your help. . > I tried to override, but private method gives a little less flexibility. It means it didn't change that much the class except we know where it comes from. :)\nNo. It simply means you need to take the method off of private. Otherwise, there'd be no point in extending the class.\n. Looks great. Thank you. Please post the same changeset for the master branch. ```\n:support:cas-server-support-pac4j-core-clients:javadoc/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/config/Pac4jWebflowConfiguration.java:6: error: package org.apereo.cas.util does not exist\nimport org.apereo.cas.util.CollectionUtils;\n                          ^\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/config/Pac4jWebflowConfiguration.java:12: error: cannot find symbol\nimport org.apereo.cas.web.support.CookieRetrievingCookieGenerator;\n                                 ^\n  symbol:   class CookieRetrievingCookieGenerator\n  location: package org.apereo.cas.web.support\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/config/Pac4jWebflowConfiguration.java:68: error: cannot find symbol\n    private CookieRetrievingCookieGenerator ticketGrantingTicketCookieGenerator;\n            ^\n  symbol:   class CookieRetrievingCookieGenerator\n  location: class Pac4jWebflowConfiguration\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/config/Pac4jWebflowConfiguration.java:72: error: cannot find symbol\n    private CookieRetrievingCookieGenerator warnCookieGenerator;\n            ^\n  symbol:   class CookieRetrievingCookieGenerator\n  location: class Pac4jWebflowConfiguration\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/Pac4jInitialFlowSetupAction.java:11: error: cannot find symbol\nimport org.apereo.cas.web.flow.InitialFlowSetupAction;\n                              ^\n  symbol:   class InitialFlowSetupAction\n  location: package org.apereo.cas.web.flow\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/Pac4jInitialFlowSetupAction.java:13: error: cannot find symbol\nimport org.apereo.cas.web.support.CookieRetrievingCookieGenerator;\n                                 ^\n  symbol:   class CookieRetrievingCookieGenerator\n  location: package org.apereo.cas.web.support\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/Pac4jInitialFlowSetupAction.java:30: error: cannot find symbol\npublic class Pac4jInitialFlowSetupAction extends InitialFlowSetupAction {\n                                                 ^\n  symbol: class InitialFlowSetupAction\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/Pac4jInitialFlowSetupAction.java:37: error: cannot find symbol\n                                  final CookieRetrievingCookieGenerator ticketGrantingTicketCookieGenerator,\n                                        ^\n  symbol:   class CookieRetrievingCookieGenerator\n  location: class Pac4jInitialFlowSetupAction\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/Pac4jInitialFlowSetupAction.java:38: error: cannot find symbol\n                                  final CookieRetrievingCookieGenerator warnCookieGenerator,\n                                        ^\n:support:cas-server-support-pac4j-webflow:compileJava FAILED\n  symbol:   class CookieRetrievingCookieGenerator\n  location: class Pac4jInitialFlowSetupAction\n9 errors\n:autoLintGradle\n```. Also see https://apereo.github.io/2018/04/05/cas-codebase-feature-build/. re-open the pull request please, merge with 5.2.x and get the build to pass. repeat the same exact exercise for master. Happy to merge then. (We should try to merge both at the same time to avoid feature imbalance). @leleuj speaking of which btw, a couple of oauth-related tests are failing in 5.2.x as a result of the last change done to scope redirect urls to codes, etc. Would you mind taking a look, and fixing those?. Excellent. We have been banging on RC1 for a while with no issues yet and have several projects running on CAS 5.3 RC4 which includes that as well. Thanks for the notice. Look forward to the final release.\nI might selfishly ask that you cut an RC2 first so that we can test any upcoming changes and then align the final release of pac4j with CAS 5.3. But, of course, do whatever makes better sense. . Yes, that is perfect. Thank you. . You may want to start a new pull request. It looks the underlying branch was either force-pushed or recreated somehow.. Thanks Dima. Would be good to update the blog as well to note the change.. This is great, thank you. Please post the same patch to the other branch as well, 5.2 and master. . Please merge with 5.2.x once more, and either remove all inline comments, or move them into javadocs, or only explain things that are non-obvious. . Very nice. \nWhat impact does this changeset have on existing schemas? . Thanks for the update. We will not be able to merge this until CAS 6; you're welcome to let this hang until the time comes (unplanned ATM) or close and revisit later.. Run 5.2. See the schema and the data as CAS loads and saves. The run your patch against the same database and see how it behaves. \nDo this for a number of database types at least to be sure. . Looks great. Thanks very much. A few minor comments and we should be good to go. . Thanks for the updates. Great work!. Looks great. Thank you. Whenever you are up for it, one for 5.2.x would also be most welcome.. Thank you. Given that almost all deployments universally run Tomcat, I am personally not inclined to accept this. We can, however, let this hang and see if the need ever comes up. It seems like a lot of complexity for something that is very rarely used (and it's quite possible we might drop Jetty and others, given the rarity of those deployments).. @hdeadman Before I start the review, could you please resolve conflicts and make sure CI passes? . @hdeadman Thank you. Looks excellent.. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Sweet! @dima767 is this good to merge or is there more to be done here? . Wonderful. Please do the same for the master branch. . Thanks for the patch. We are going to have to fix the CLA, rather than removing it. I'll try to look into it later this week.. This is now fixed, FYI. . You're very welcome.\n\nFirst, I think doing this sort of thing globally is possibly a good idea.\nIf one is using the mapped attribute release policy, I can see how attributes would be mapped once, and then the mapped name would be \"remapped\" again for the friendly name. I dislike this approach myself, but I can't see how that would affect consent. Are you saying you want consent to show the friendly names for the attributes, and not what is mapped to them (as in the urn value)?\n\nIf so, that would make sense. I would agree with the concept in general. For clarity, could you please attach a JSON snippet here of what the service defn might look like in your propsal? I think we need to agree on what would be before heading down to code.. Adding @tsschmidt to the thread since this might also affect the management webapp as well.. I gave this some more thought:\n\n\nI am personally not inclined to support an option for attribute mappings, globally. You're welcome to build that extension, but I think more and more we are seeing that it's much better to define mappings for the individual service where the mapping is actually needed. This might change in the future, but for the time being, I think we should stick with what exists and see how the use cases grow.\n\n\nI'd be more interested to explore the possiblity of perhaps designing friendly names inside the attribute release policy for SAML services when the mapped option is used, rather than inroducing a new field or renaming an existing field. So we'd remove friendlyNames and attributeNames from the body the SAML service, and perhaps look for an option that tied that all together more closely within the attribute release policy block itself. \n\n\n\nAs far as I can tell, the urn's are only in use by the SAML protocol.\n\nThis is not entirely relevant; you are releasing attribute BLAH to an application, regardless of how and under what names, etc. So in theory user is consenting to the release of BLAH. Whether you choose to describe BLAH to the user in friendlier terms is irrelevant to the protocol used and whether it has a concept for friendly names. Out of all options, I think perhaps a better option would be to isolate your use case to the consent module specifically, and design a component there that knows how to provide extra metadata for each single attribute describing each with more detail. You can imagine that when the code begins to process and display attribtues to the UI, this new component would be called to describe each attribute, their purpose, their owner, etc etc in the UI rather than translating urn:1:2:3:4 to departmentSystemXfactorEnabled which argubly is only marginally better. So I'd focus on this option perhaps, improving the consent functionality, since that's where the real \"pain\" is. \nHTH.. > So I'd focus on this option perhaps, improving the consent functionality, since that's where the real \"pain\" is.\nAnd one possible advantage of this approach would be that consent would be able to provide descriptions, friendly names, etc for each attribute regardless of the protocol, which would mean it would be able to support CAS, SAML2, OIDC, etc. Those protocols may have no concept of a friendly name, but consent wouldn't care and indeed, why should it.. > Sound good to me. If I understand correctly, the attribute release or consent policy would have a block with this information. The consent module would use it for UI purposes only.\nRight except that it wouldn't be part of the consent policy for the service definition if I got your point correctly. I'd imagine it would be some sort of separate standalone API that consent would call. Connecting to the services API seems rather too complex and unnecessary perhaps and affects the management as well so the scope gets bigger.\n\nOne question remains for me: how to specify SAML friendly names? Would the SAML response be built with the friendly names from that block, if any exist? I saw a lot has happened to SAML attribute release. Would it fit in there?\n\nAs the docs say; it's sort of unpleasant if you have a mapped attribute policy, because as you said you map A to B and then you need to assign a friendly name to B. But if you are not mapping them, you just define friendly names for each attribute you're releasing. If friendly names are available, the response will be built with those for the friendly names and attribute names would be the real attribute name. If you don't have friendly names, the behavior would be what it was before. Friendly names are optional. \n. Yes. I believe it's a WIP. . No worries. Once you have pushed a new commit, please post back and I'll be sure to merge. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. btw, for future reference please note that your target branch for this PR was to master which is not marching towards 5.2 anymore. I backported your change to 5.2, but you may want to readjust the target branch next time if you indeed want a change to go into 5.2 first (and then possibly do another PR for master as well). The results are more or less the same; just wanted to make sure you recognize the branching strategy here.. > I might rewrite be interested in rewriting the Couchbase backend in this regard, and perhaps others in order to make Couchbase setup easier (N1QL?). I'm in that case wondering wether it is necessary to keep Couchbase 4 compatibility and password protected buckets or if it would be ok to drop Couchbase 4?\nI think that would be perfectly fine. I'd suggest that we keep the current master/5.3 compatible with Couchbase 4 as is, and switch to newer Couchbase integrations starting with the next feature release, likely 5.4. That should give you enough time to do the work, test, document, etc etc. How does that sound?. I'd say around November 2018. . I think this is fine. Have you ensured that metadata is in fact correctly generated for collections?\nA good test would be to run the build once, and then look into the JAR that has the generator code in there and under META-INF, locate the generated JSON. Inside the JSON, try to find a setting that belongs to a collection, like any of the settings for DuoSecurity. If you see them in there, all systems go. . Thank you for the pull request. The dependency is automatically included in and with CAS; No need to document its existence:\nhttps://github.com/apereo/cas/blob/5.2.x/webapp/gradle/webapp.gradle#L131. Sure thing; sorry I was too quick to notice the rest. Yes, those would be fine to include. Thank you. Update the pull please and we can certainly merge.. This is fine, but did you get a chance to review this?\nhttps://github.com/apereo/cas/blob/master/core/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/config/CasWebflowContextConfiguration.java#L235. Great, thanks.\nIn the areas of webflow dynamic configuration, there are certainly candidate components for improvements; for instance, a given webflow configurer should have to operate only on a single flow definition and it would then have extensions that operate specifically based on a login flow, logout flow, etc. (The configurer itself should not have to know about the specific type of the flow it's managing, per se) A current webflow configurer is a little too assuming at this point and I think it would be good to break it apart further to make the division of responsibilities clearer. Food for thought in the future.. Looks great. Once small comment and we should be G2G. Thank you. . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Please add test cases that verify the behavior. Thank you.. Wonderful. Could I persuade you in posting the same patch for 5.2.x as well? If it's too much trouble, please let me know and I'll handle it myself. \nThank you. . Also, running a clean build produces:\n```\nrunning with these values:\n        sassPath: ./resources/static/sass\n        npmPath: ./node_modules\n        cssPath: ./resources/static/css\nError in plugin 'sass'\nMessage:\n    resources/static/sass/ssosessions.scss\nError: File to import not found or unreadable: partials/fonts.\n       Parent style sheet: /Users/Misagh/cas-server/webapp/resources/static/sass/ssosessions.scs\n        on line 3 of resources/static/sass/ssosessions.scss\n\n\n@import \"partials/fonts\";\n   ^\n\n\n```\nSee also https://api.travis-ci.org/v3/job/344094240/log.txt. Tested. Looks and works excellent. All hail @mindblender . Thank you very much for the contribution. Outstanding work. Keep 'em coming!\nIf you are interested, might want to apply the same patch to https://github.com/apereo/cas-webapp-docker. . Awesome! Thanks for checking. . Sorry! Was I too quick? \nIf you do find more, please do more PRs. Thanks!. Thank you very much.. Thank you. Please fix build failures and do the same for master.. This is ready to merge, but I am going to halt for now and work on some \"unrelated\" Travis CI changes. Presently, CI builds are timing out because we are going to above the allowed timeout by Travis CI. We should have this sorted out by next Tuesday and then we can definitely merge this. You're welcome to work on the radius integration tests for the time being if you have the time. \nThanks again. . This is perfectly good in nature. I think the design needs to be reformatted to align with the rest of the codebase. Dynamic registration of components based on auto-wiring injections where the underlying container is a Collection of sorts that is passed around here and there is not a good idea and tends to cause issues down the road, in particular when it comes to controlling the execution order of the components in that Container (List) in your example. So over time, we have been moving away from this model and switching to a more NPE-resistant compile-time-controlled approach with more explicit control.\nGiven the nature of the change, I am not 100% sure if we can merge this for 5.2.x as it's sort of beyond the scope of a patch release but having looked at the patch briefly, I did not see any breaking changes per se...so I suspect we are good. \nI am in the process of writing a blog post to outline the intentions behind the above-recommended strategy. If you could, I'll ping this thread once the post is done so you can get an idea of what I have in mind as an alternative. If you are eager, however, I could point to specific examples in the codebase and you can take it from there? \n. Couple of comments:\n\nThere are options in CAS today that allow you to control whether OAuth ATs, etc should be deleted as part of TGT removal. The default is to not delete I believe since ATs and such as are tracked as descendant tickets of the TGT. I think (Having not dedicated a lot of time to this PR yet) that what you @teddyber describe might become true with this patch.\nI remembered that as part of #1, we introduced the concept of LogoutHandlers that get invoked once a TGT is about to be deleted. I am not a big fan of creating a Component+JPA variant everywhere since that obviously does not scale. We need to find a better solution that would not force us to repeat the same pattern for every protocol and every module that might want to do something with the JPA ticket registry. Ideally, all changes should be scoped to the module in question that is JPA.\n\n@sbearcsiro could you please post a CAS overlay as a sample that demonstrates this problem? I'd like to run through the issue myself once. . > ... you don't want to delete refresh tokens, etc that can outlive the TGT...\nIn general, yes but I'd say that depends on how you intend to use the protocol. Certain deployments simply use OAuth as a means for authentication only and do not care about anything beyond a simple user profile that is exchanged for a one-time (more or less) access token. In these scenarios, ATs continue to be renewed and regenerated because the timeouts (CAS vs App) are very closely synchronized and the applications are not actually tracking ATs on their own. So the interactions are exactly like that of the CAS protocol. This sort of thing is why the option exists that allows CAS/You to decide whether descendant/linked tickets must be removed or not. IIRC, the default is to not remove (which might cause other issues of course)\nThen again, there are others that care about tracking AT on their own, actually use an AT like an AT should be and wish to separate expiration policies. For those deployments, yes there could very well be an issue. What you have described wrt the semantics of the RefreshToken expiration policy may also be an issue. Could I ask you to perhaps start with a simple unit test to demonstrate what we think might be failing behavior? ... and then we can come up with a fix.\nTest would be:\n\nGenerate a TGT, and then an AT off of that.\nCreate an RT off of that AT and TGT.\nExpire the TGT \nObserve the behavior when you use/exchange the AT.\nObserve the behavior when you use/exchange the RT for yet another AT.\n\nIf you see failures in 4 and 5, then it's safe to call Houston :) (Push the tests up please as a WIP PR) \nThanks again.. Closing per the discussion on https://github.com/apereo/cas/pull/3206. redirect(ctx) does an actual redirect, right? If so, it's not something we can do here. Perhaps it would be better to remove the calculation of the \"redirectUrl\" from here and when a client is selected on the page via an actual click etc, we could post that choice of the client back to the server and then call redirect?  . @luis100 what saml IdP did you use to test this with that binding? . Well, that is supremely cool! Thank you. Here's my suggestion:\n\nWe're going to merge this for 5.2.\nWork on my suggested approach for master/5.3. I can show you what you might need to do, or I can do this as a baseline and have you test it. \n\nSound good? . Coolio. Thank you. Watch the blog for further updates in this area and be sure to continue testing with RC3 and RC4, etc.\nBlog:\nhttps://apereo.github.io/2018/03/30/530rc3-release/. Thank you for the change. Please fix the typo in javadocs and then fully explain what the new field does in the javadocs. . Thank you very much for the contribution!. Back to a functional running state based on v2 official. Resuming work next week.. Yes, correct...or more likely 6.0. That might be a better choice; to be decided later once we are done with 5.3. Thank you very much!. PS Going to backport over to 5.2.x. The only one I was able to track down was maxWait for JPA connection pooling. Everything else seems good. Thanks for the catching this in the act!. I have had to switch this back in order to get access to the underlying Tomcat engine. I think you should still be able to override the factory bean since it's made conditional. If this poses an issue, please post back. . Sound great! Is this something you prefer me to do, or would you be interested in doing that yourself in a patch? . Merging so as to review and provide a diagnosis. Thank you @sbearcsiro . Please stay tuned.. Please review the latest commits and children of BaseOAuthExpirationPolicyTests to verify behavior.. Thank you very much for the contribution!. Please re-organize the pull request to only contain your changes by properly merging with then upstream. Thank you!. There is this guide:\nhttps://github.com/apereo/cas#contributions-\nOr just about anything on the web that discusses git workflows would be good too.. Wonderful. Please post a PR for master too. . This is great, but I do see we have a breaking change in the schema with the field rename. Any concerns there? Workaround, etc? . > Regarding the schema breaking change, we could leave the field named geography, but long term that is a potentially misleading field name.\nI agree. I was mostly in a wondering mood :)  I am fine with the breaking change, honestly. I think this feature is actually quite new and hasn't had that many users for us to warrant being SUPER careful. As long as we document it in the release, I'd OK with the change as you have. \nI can do, or would be even better if you could do the honors to put our a note and warning:\nhttps://apereo.github.io/2018/03/30/530rc3-release/. By the way, what sort of alternative fingerprinting strategy do you have in mind that necessitated this change? I am mostly fishing for ideas to see if anything else might be a good contribution in this area :) . > we felt that using a randomly generated persistent cookie in place of User-Agent would provide a better combination of convenience\nExcellent. Is this extension also something that we can put into CAS, and activate based on some configuration option? \n\nIn the process of doing some research I found several javascript based device fingerprint libraries and figured some deployers may have other security needs that drive them to utilize a different fingerprinting mechanism\n\nIf you have the data available, could I ask you to share that with me? I wonder if there are certain caveats with those options that might prove acceptable for certain deployments and users, and perhaps those would be good to also include as other extension options here. (Of course, documenting the caveats). I should also add that the approach here, regardless of previous comments, isn't going to work because stuffing items into the application session leads to other problems that we already deal with it, and have prepared fixes for. This approach is going to get yanked out, so I suggest you wait a bit until this area is finalized and consolidated before making any more changes. . As soon as we have https://github.com/pac4j/spring-webmvc-pac4j/pull/15 and https://github.com/pac4j/pac4j/pull/1113 merged.. FYI: In the process of working through a few related pac4j PRs before resuming work on this. Fixes expected to go in before next Monday.. Changes are pushed in. Please review and test and then resume work here based on the new approach. And of course, if you do find issues with the current strategy please discuss here or file new pull requests incrementally.\nThank you!. Thank you very much for the contribution!. Just a quick reminder that please do also make a note in the release notes once and when this is finalized.\nLGTM otherwise with a few minor cosmetic changes. . This is perfectly good with me. Thanks Dima.. Hello,\nI see you are a first-time contributor! Welcome.\nIt seems like you're using the pull request to ask for help. This is not the right way to do things. If you need support and assistance, please refer to the project documentation to learn more about the support channels, i.e. mailing list, etc.\nThank you.. Wonderful. Could I ask you add a few more test cases for ByCredentialTypeAuthenticationHandlerResolver to make sure we account for this in the future? It's the sort of thing that is tricky to spot, I imagine.. Sounds good with me. Please do. . First, thank you very much for the change and welcome to the project as a contributor. Well done :) I'll try to get us started:\n\nThis is my first time contributing so any issues for new contributors are probably present. \n\nNo problem. We are here to help. If you have not already, I recommend you take a peek at this document:\nhttps://apereo.github.io/cas/developer/Contributor-Guidelines.html\n\nChanges were made in both cas-server-core-configuration, cas-server-support-dynamodb-ticket-registry, and cas-server-support-dynamodb-service-registry. I was building it as 5.2.4-SNAPSHOT and was copying the appropriate maven repos over into my cas-overlay for testing. \n\nVery nice. The change is perfectly valid. Two things:\n\n\nWhile you in this patch take care of what I would call core entities, you should note that there are other types of tickets present in CAS that go into the registry and by extension dynamodb. You have a few that belong to OAuth, and some in SAML, etc. You may want to consider updating the storage name for all tickets types and externalize those into settings as well. (This is very much an optional thing; just stating it here for transparency)\n\n\nAny new behavior/change/feature introduced into a support branch must be forwarded to the master branch as well, and you're welcome to this in yet another PR. We merge both PRs at the same time since we can't quite afford to present new features in a patch release that would be otherwise absent in the next release. If the change is rather simple, we're more than happy to do that bit ourselves and port it forward. In case it's more complicated, we can the contributor proceed. In this case, it's up to you. The patch is rather simple, but if you prefer to handle that bit as well and port forward, by all means. \n\n\n\nSo I'm assuming that some mysterious entity out there will update the cas version or that it doesn't matter. If I need to update it let me know.\n\nNothing mysterious about it. For reference, see:\n\nhttps://apereo.github.io/cas/developer/Build-Process-5X.html#continuous-integration\nhttps://apereo.github.io/cas/developer/Contributor-Guidelines.html#how-fast-can-i-consume-the-change\n\n\nSo what did I mess up on? I'd love to fix it.\n\nTake a look at the state of the Travis CI build. Review the failures and push accordingly until the status turns green. Once the state of the pull is finalized, you can move onto the forwarding business, if you are interested. Sometimes the failures are unrelated because of Travis CI flukes or because someone else (usually me!) has broken the build. In those cases, please ping the PR and we'll try to get it merged and fix issues later on.\nThanks again.\n. > What do you mean by pinging the PR? Like I just don't know what that means.\nPost a comment that says: \"Hey, can anyone come do stuff over here please\". PR is short for Pull Request. Literally, the patch you're working on.\n\nWell the error in Travis CI is \"Checkstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/core/cas-server-core-configuration/build/reports/checkstyle/main.html\" Although I'm unfamiliar with Travis so I don't really know what I'm looking at to fix it.\n\nThis is not a Travis CI error per se. This is checkstyle examining your changes and the codebase in general to find violations of style guideline that are enforced by the codebase. Run gradlew tasks to figure out what tasks are available, and one of them is going to be checkstyleMain and checkStyleTest. Run those to see the failures. \nOr look here to configure the IDE with a plugin:\nhttps://apereo.github.io/cas/developer/Build-Process-5X.html\nAnd if you examine the Travis CI more closely, you'll find these:\n:core:cas-server-core-services-authentication:checkstyleMain\n:core:cas-server-core-services-registry:checkstyleMain\n:core:cas-server-core-tickets:checkstyleMain[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/dynamodb/AbstractDynamoDbProperties.java:64:21: Variable 'preventTableCreationOnStartup' explicitly initialized to 'false' (default value for its type). [ExplicitInitialization]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/dynamodb/DynamoDbTicketRegistryProperties.java:33:5: Instance variable definition in wrong order. [DeclarationOrder]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/dynamodb/DynamoDbTicketRegistryProperties.java:46:5: Instance variable definition in wrong order. [DeclarationOrder]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/dynamodb/DynamoDbTicketRegistryProperties.java:59:5: Instance variable definition in wrong order. [DeclarationOrder]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/dynamodb/DynamoDbTicketRegistryProperties.java:72:5: Instance variable definition in wrong order. [DeclarationOrder]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/dynamodb/DynamoDbTicketRegistryProperties.java:75:5: Constructor definition in wrong order. [DeclarationOrder]\nFix those.\n. If you examine the build report, you can also see the full command that was executed with that error:\n./gradlew --stacktrace --parallel -DskipNpmCache=true assemble checkstyleMain checkstyleTest test coveralls. FYI: A number of tests are failing on Travis CI somewhat unexpectedly. I suspect those are ones that spin up a docker instance. I am experimenting with each batch to see if I can figure out the cause and I\"ll get this PR merged with master to let it fully rebuild after the fixes. . Small progress update: Got the build back on track. Still experimenting with DyanmoDb ticket registry tests. Travis CI does not report much and simply seems to hang. Going to look further into this tomorrow, but of course the failures are not showstoppers for this change. \nAs for cookie encryption; I think you have made the right choice. Doing it is rather cheap and I suspect it provides grounds for other stuff to be built into the cookie in form of extensions by others. So it's best that we encrypt by default and expose an option to control it later, rather than the opposite.. Wonderful. Thank you very much!. Thank you @NgSekLong . I read over the spec and I think this is a valuable change. I merged the change out of band, and this will be included in RC4. . By the way, I just realized that this patch is posted to 5.0.x. Please see: https://apereo.github.io/cas/developer/Maintenance-Policy.html. No, just submit another PR that fixes what you have in mind.. Also, dont worry about that commit this time. I'll revert it manually. \nThanks!. Test failures should be accounted for:\n```\n:support:cas-server-support-yaml-service-registry:compileTestJava/home/travis/build/apereo/cas/support/cas-server-support-yaml-service-registry/src/test/java/org/apereo/cas/services/YamlServiceRegistryTests.java:22: error: no suitable constructor found for YamlServiceRegistry(ClassPathResource,boolean,ApplicationEventPublisher,NoOpRegisteredServiceReplicationStrategy)\n            this.dao = new YamlServiceRegistry(RESOURCE, false,\n                       ^\n    constructor YamlServiceRegistry.YamlServiceRegistry(Path,boolean,ApplicationEventPublisher,RegisteredServiceReplicationStrategy,RegisteredServiceResourceNamingStrategy) is not applicable\n      (actual and formal argument lists differ in length)\n    constructor YamlServiceRegistry.YamlServiceRegistry(Resource,boolean,ApplicationEventPublisher,RegisteredServiceReplicationStrategy,RegisteredServiceResourceNamingStrategy) is not applicable\n      (actual and formal argument lists differ in length)\n1 error\n FAILED\n:autoLintGradle\n```. @tsschmidt I'd like to get this one merged, but I see there are still a few pending changes needed. Would you mind if I took over and completed those, or would you rather resume on your own as time permits? . Could you please paste in here, before and after samples? with and without the change? . Thank you.\nCan you explain why the above error message actually happens? . These seem related to your changes:\n:support:cas-server-support-openid:compileTestJava/home/travis/build/apereo/cas/support/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/DelegatedClientFactory.java:382: error: cannot find symbol\n                    cfg.setProviderName(saml.getProviderName());\n                       ^\n  symbol:   method setProviderName(String)\n  location: variable cfg of type SAML2ClientConfiguration\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/DelegatedClientFactory.java:385: error: cannot find symbol\n                    cfg.setAuthnRequestExtensions(() -> parseExtensions(saml.getAuthnRequestExtensions()));\n                       ^\n  symbol:   method setAuthnRequestExtensions(()->parseE[...]ns()))\n  location: variable cfg of type SAML2ClientConfiguration\n/home/travis/build/apereo/cas/support/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/DelegatedClientFactory.java:388: error: cannot find symbol\n                    cfg.setAttributeAsId(saml.getAttributeAsId());\n                       ^\n  symbol:   method setAttributeAsId(String)\n  location: variable cfg of type SAML2ClientConfiguration\nNote: /home/travis/build/apereo/cas/support/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/DelegatedClientFactory.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors. This change is unnecessary since the behavior you're after is already provided by 5.3. Please test with 5.3 and report back. . Wonderful. No problem. Thank you very much for the feedback. . This is perfect; Thank you. I do wonder if the mixin can be moved to one of the more core pac4j modules, but it's fine as is today. Lets get this merged once the build turns up green. . BTW, is there an oppurtunity here to write a few test cases preventing this from happening again? It doesn't have to be too comprehensive; even if it's just testing this exact case, it's a good foundation to keep adding more later on and increase coverage (currently at 58% and growing). LGTM.\nI am quite sure this design needs to be revisited later, as I especially am not in favor of instanceof checks, but it's perfectly good for now.. nitpick: While this is perfectly good [and thank you very much], I started to wonder if this could perhaps be simplified or avoided by using ObjectProvider instances to delay the initialization of a bean. Might help, but this is just fine.. Resuming work here https://github.com/apereo/cas/pull/3375. I dont think this is the sort of change that we can merge, especially if stages depend on each other to complete before advancing. . > If the tests don't pass, then a snapshot shouldn't be deployed and the generated documentation is irrelevant..\nNot quite; there are situations where the travis-ci environment proves brittle and fails to download a dependency or find a plugin due to network issues, memory issues, docker issues, or other possible irrelevant failures. If the builds dont depend on each other, then the BUILD job may fail because of travis-ci crankiness while the SNAPSHOT or TEST job may complete just fine for that build. This is an absolute must. Otherwise, we'd be sitting ducks while the thing picks up again. Too slow.\nThen there are scenarios where we get a pull request that is perfectly good, yet it's has minor styling issues. We generally like to merge those as quickly as possible with the issues therein, in order to give credit to the other and not have to ask them to fix pesky little issues, and so that we can fix those internally and push upstream in the interest of making progress. Allowing all jobs to run at the same time in the current fashion allows us to make progress faster, is easier on everyone making changes with minor mistakes. \nThen there are situations where someone posts a PR on documentation that is perfectly good, yet the build fails due to some irrelevant test case, etc. Again, we'd like to merge that fix as soon as possible, knowing other aspects of the build can proceed just fine, save the annoying test case that will be fixed separately.\nIt's unfortunate that the build cache works the way it does today, but that is an acceptable side-effect of the current workflow. \n. Just to give you an idea; we are working on projects in production that are testing snapshot features every 10-20 minutes. It is simply unacceptable to have them wait over an hour or more,  for the full build to go through because some stupid html ending tag is causing javadocs to fail and as a result the whole build. The build will eventually go through, but that's on us, and not them :) . If this is proving to be a recurring problematic issue, should we consider simply removing support for apache ignite? . I made some tweaks to the internal ignite memory allocations. Per their docs, the node running in pure in-memory mode uses 20% of the memory. My adjustments should allow it run a bit more comfortably. I'll continue to play around with this, and will merge your pull with master a few more times to see if I can make it pass. If not, we might consider turning off tests for ignite and have them run only in standalone mode, or more drastically, remove the modules altogether.. > I made some tweaks to the internal ignite memory allocations.\nUnsuccessful. Ignite tests for now have to run locally.  I tagged the tests with the right annotation to skip execution on CI. . Ignite tests are back to a functional state after the excellent work done by @tduehr to split up tests and Travis CI is back in a functional state. There may still be an opportunity to utilize docker, but that need at this point is just extra complexity. . > Note that this does not make CAS fully compliant: as per the RFC, \"The authorization server [...] verifies whether the token was issued to the client making the revocation request\", but I couldn't find how to trace the token back to its issuer. Did I miss the obvious or isn't it possible currently?\nIt is possible; not yet implemented. If you wish, that would be a fine thing to work in a follow-up PR. You would need to look up the token in the ticket registry, find the corresponding object and run checks based on the retrieved AccessToken ticket.\n\nAlso note that this should probably be added to the OAuth 2.0 endpoints as well, since the RFC isn't OIDC-specific?\n\nI dont suppose OAuth endpoints support revocation today; that also would be a fine PR to work on.\nThank you very much.. I am working on a project ATM that involves delegated authentication; I might be able to spend some time this week or early next week to work with you on this and take over the handling of the missing bits. I think you're fairly close to completion actually, and if you simply switch the manual extraction of parameters with argument extractors and such, then we should be ready to test out other scenarios.  . Thanks. I'll try to look into the SAML 1.1 issue shortly, but you're right. What you want to see at the end of the flow is:\nhttps://example.org/test/foo?SAMLart=ST-asdfasdfsadf%2B0%2Fasdfasdfasdfasdf. I should have fixed this; Your branch/pull should be up to speed with master and the current changes. Please resume.. Thanks for the notes. Let me run through your changes once and see this in action myself. I think your 3rd bullet point, making this all part of SWF, is probably the best option, by introducing a new small subflow somewhere. Before we step in that direction, let me poke around a bit to see if I can find something less scary as a solution. Stay tuned.. I merged your changes into the master branch, and then made a few tweaks to ensure parameter building is done correctly wrt the protocol used. Please resume testing on master.. Updated notes: https://apereo.github.io/2018/05/25/530rc4-release/#command-line-shell-commands. This is perfectly good, thank you. Is there a possibility to see if we can reasonably add a test case here to account for this in the future? There are test cases already that handle serialization scenarios for immutable collections, etc. Might this be a candidate there too? . I think that is sufficient for now; long-term it would be good to consider working on test cases that affect WebUtils.putSomething(RequestContext). . I have modified the BaseCasWebflowSessionContextConfigurationTests to attempt to demonstrate the failure today. Please test this patch by running AllWebflowTests and hopefully, the tests should pass. The same batch of tests that verify serialization of webflow objects can further be enhanced by accounting for more candidate objects, specially the ticketing components.. > I was looking at putting TGTs and STs into the flow scope(s) but by the looks of it WebUtils only ever puts them in by their String id, so I'm not sure there's much point testing that?\nThanks for the review. We can skip those.. @bdavids1 would you mind posting the same sort of patch for the 5.2.x branch as well? . Note that the idea plugin is no longer supported by the IDE, and is considered deprecated. Running 2018.1 and 2018.2, I have seen it totally corrupt the project struct.. ```\n\nTask :support:cas-server-support-themes:checkstyleMain FAILED\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/CasThymeleafViewResolverConfigurer.java:6: First sentence should end with a period. [JavadocStyle]\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/CasThymeleafViewResolverConfigurer.java:16:5: Missing a Javadoc comment. [javadocForAllProtectedAndPublicFields]\nTask :support:cas-server-support-syncope-authentication:checkstyleTest\n\nFAILURE: Build failed with an exception.\n\nWhat went wrong:\nExecution failed for task ':support:cas-server-support-themes:checkstyleMain'.\nCheckstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/support/cas-server-support-themes/build/reports/checkstyle/main.html\n  Checkstyle files with violations: 1\n  Checkstyle violations by severity: [error:2]\n```\n\n\n\nOtherwise, LGTM. Thank you. . Superseded by #3355 . Thank you very much for the patch! Nicely done.\nUnfortunately, we cannot accept this as is; A better solution might be to investigate strategies that would remove the proxy wrapper from the object. I recommend you try with the latest master/snapshot and see if you still experience the issue. Thanks again.. All hail @mindblender !. Thank you very much.\n\nTested with grant_type: authorization_code, without the changed debug log output Service unauthorized even for valid service, with the changes the valid OAuth service is passed.\n\nPlease include test cases in this PR that demonstrate the failure and the fix, before and after.. Have you had a chance to resume here? . No worries; I just wanted to make sure you have enough help and are moving in a good direction. I can definitely help you with the tests but before we do, can you explain this better?\nfinal String codeClientId = token.getService().getId();\nHow is it that the service identifier is a client id? . Also, for tests, you need to start with OAuth20AuthorizationCodeGrantTypeTokenRequestValidatorTests. Simply run that to make sure it's good, and then adjust it to catch this case. . Can you share your oauth test client? and your service definition file that has the client registered here?. Thanks for the diagnostics. Very helpful.\nDo you actually have an example application (an oauth client) that can demonstrate the problem in practice?. Good idea. Thanks for the change. Done!. Awesome work. Thank you!. Absolutely. What you have provided here is not a patch or a pull request. It does nothing and fixes nothing. It seems like it's more of a question than anything else. If you need help troubleshooting issues, there isn't the right avenue. . > I do believe the fact that different classloaders are causing an error is a bug, not a configuration issue\nCould be, sure. Then again, may be not. This is not a matter of belief. It's a matter of evidence :) \n\nis it not a bug that the first remote call to the ws-fed STS service is causing a ClassCastException?\n\nAs I explained before, I simply have no idea whether this is an issue or not. This is not something that one can take a quick glance and deduce an underlying problem. It needs careful analysis, time, lots and lots of research, deep dives both into the CAS code, as well as the Apache Fediz code, etc. If I knew the answer, I'd tell you. The best I can tell you at this point is that we don't know, and we need time and extra research. It may be an issue, it may be a non-issue. Therefore, you can try to dig deeper to figure out the underlying cause with additional time and investment, and I personally have none available to work on this, as it's not a use case I have invested in right now and I also dont have anyone sponsoring my time to work on this. You are welcome to reach out to the community to ask for help or other CAS developers to see if they can help provided you sponsor their time as well, or try a commercial support partner to help you diagnose the problem.. Please describe the issue in some detail, via following the PR template, and please include test cases that demonstrate the issue before and after your changes. Thank you.. Have you tried to use the /health endpoint instead, which does all of this by default? The status endpoint is mostly kept around as a legacy thing for backward compatibility and I am personally not keen on extending it any further than what it is. . ```\n\nTask :support:cas-server-support-mongo-ticket-registry:checkstyleMain FAILED\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-mongo-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/MongoDbTicketRegistry.java:42: Returning an unmodifiable collection is specially problematic for serialization tasks. To avoid future side effects try using an empty collection of size zero instead [collectionsUnmodifiable]\nTask :support:cas-server-support-mongo-service-registry:findbugsMain\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':support:cas-server-support-mongo-ticket-registry:checkstyleMain'.\nCheckstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/support/cas-server-support-mongo-ticket-registry/build/reports/checkstyle/main.html\n  Checkstyle files with violations: 1\n  Checkstyle violations by severity: [error:1]\n\n```. You may want to reconsider using CollectionUtils to get around the styling issue, and if you could merge with master as well and resolve conflicts, I think this is GTG. \nThank you, as always.. Thanks for patch. Well done. Could you resolve the conflicts please? . Thanks very much. Continue to fix issues by monitoring the Travis CI build status for this pull request. . ```\n\nTask :core:cas-server-core-authentication:checkstyleTest FAILED\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/PersonDirectoryPrincipalResolverTests.java:106: Line is longer than 190 characters (found 218). [LineLength]\n\n```. Please correct the pull request title to describe the fix more clearly. Thank you. . \nNot all failures are relevant.. I understand that if you view the page \"normally\" then you get the hardcoded cas.css reference, but what happens if you view it with thymeleaf trying to render it? The hardcoded reference will be removed, sure, but does a theme's css config get applied to the page?  . Could you please update the PR with:\n\nA summarized issue description.\nA brief overview of how the solution manages to fix the problem.\n\nThank you.. Wonderful. Looks like one last remaining issue before the final merge:\n```\n\nTask :core:cas-server-core-tickets-api:checkstyleMain\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/support/BaseDelegatingExpirationPolicy.java:91:5: Missing a Javadoc comment. [JavadocMethod]\nTask :core:cas-server-core-tickets-api:checkstyleMain FAILED\nTask :core:cas-server-core-util:checkstyleMain\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':core:cas-server-core-tickets-api:checkstyleMain'.\nCheckstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/core/cas-server-core-tickets-api/build/reports/checkstyle/main.html\n  Checkstyle files with violations: 1\n  Checkstyle violations by severity: [error:1]\n. Thanks for the patch. Could I ask that you prepare the same sort of thing for the master branch? . Double checked; Inspektr is in fact [publishing snapshots](https://github.com/apereo/inspektr/blob/master/travis/deploy-to-sonatype.sh). [Here](https://oss.sonatype.org/content/repositories/snapshots/org/apereo/inspektr/inspektr-common/1.8.4.GA-SNAPSHOT/) is the latest..\nTask :support:cas-server-support-audit-rest:test\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by worker.org.gradle.internal.reflect.JavaMethod (file:/home/travis/.gradle/caches/4.9/workerMain/gradle-worker.jar) to method java.lang.ClassLoader.getPackages()\nWARNING: Please consider reporting this to the maintainers of worker.org.gradle.internal.reflect.JavaMethod\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\norg.apereo.cas.audit.RestAuditTrailManagerTests > verifyAction FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertFalse(Assert.java:64)\n        at org.junit.Assert.assertFalse(Assert.java:74)\n        at org.apereo.cas.audit.RestAuditTrailManagerTests.verifyAction(RestAuditTrailManagerTests.java:52)\n```. This look pretty great. Shall we cut inspektr and then switch the version? . Related issue: https://github.com/jshiell/checkstyle-idea/issues/377#issuecomment-404747579\n\nScreenshot - scan only modified files:\n\nCurrent import rules:\n\n. This looks very good; I think the ServicesManager should stay. There is the possibility of associating a policy to a service definition that might affect surrogacy where I can think of a custom property for instance that might get attached to a service to change the behavior of canAuthenticateInternal.. Instead of this change, have you simply tried setting the cache timeout to 0? . > it would have been very helpful if the documentation has explicit instructions on how to disable caching, i.e. set the appropriate property to 0 or supply a duration of 0.\nI totally agree. My suggestions for improvement is perhaps less desirable than what you would want, but I'd say it would be helpful if this particular field gains a few additional explanations as javadocs where it's defined. This will allow the CAS metadata generator to quickly process and fetch those instructions and by extension, that allows you to search for the setting and get all the explanation one needs. If you are not familiar with the configuration metadata, please let me know and I'll guide you along.\n\nthere are multiple stages and components related to attributes -- principal resolution vs. attribute resolution stage, attribute repository vs. attribute release, etc. If caching is not turned off for all applicable components then one may draw the conclusion there is a bug or the setting does not work. Again, a reminder in the documentation would really help.\n\nCertainly. I strongly recommend that you put together a blog post reviewing this topic in full detail from start to finish if you feel strongly about it. Blogs go here: https://apereo.github.io/ You can provide a walkthrough and tutorial with specific examples and values, motivations and use cases. Most of \"Tell me how to do X\" should be categorised as blog posts where you can rant on as much as needed, detailing specific assumptions and caveats. Again, if you need help doing so, please speak up.\n\nThat leaves CasCoreAuthenticationPrincipalConfiguration.globalPrincipalAttributeRepository(). Since it is impossible to specify a negative cacheTime, should this code be changed to check for (cacheTime == 0) instead?\n\nIndeed. That's an excellent idea. Please do this for all relevant branches.\n. Pending https://issues.apache.org/jira/browse/GROOVY-8727\n[GROOVY-8727] JDK 11 Compilation Failure: ClassVisitor.visitNestMemberExperimental throws UnsupportedOperationException  - ASF JIRA\n. Thank you. Just in case, you may want to post the same patch to the 5.3.x branch as well specially if you wish to use this fix in the next 5.3 patch release.. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. > this potential typo is also seen on master branch, maybe I submit 1 more PR after this?\nYou are more than welcome to; thank you for spotting this.. Yes. All are typos. . Thank you. This is great!\nWith regards to checkstyle, it sounds like you are using the checkstyle rules for master in 5.3.x, or vice versa. Since 5.3.x does not have support for val in the checkstyle rules, that might be why. If you dont mind, could I ask you to refrain from using val here under 5.3.x? If not, I'll gladly merge this and do the cleanup myself.\n. Or, alternatively, backport the checkstyle rules form master to 5.3.x as well and that should get you going better (though I'd advise against this. You probably run into a large of batch failures for unrelated areas all of which would need to be backported too, and that is simply busywork) . Nicely done. Thanks again. . Merge and resolve conflicts, and looks like this would be g2g. . Any thoughts on how this might break the schema for other databases? . Thanks for the notes. There are integration tests in CAS for most of the database types, and I can see the breakage. Good for now! Thank you.. PS I strongly recommend you work off of topic-branches. Otherwise, you end up posting over already-merged commits and eventually this will mess you up. Create a branch for the thing you want to work on, rather than staying directly on top of 5.3.x. \n. Please restore back all test suites. They are very helpful in allowing one to run a batch of tests in the IDE directly without resorting to elsewhere to run and track down failures, specially if they are sweeping changes that affect a large number of components. . I don't know if this is all too common, but I find this to be more comfortable in situations where a change is made to a module that affects a number of components, each of which has its own test case (and sometimes you have multiple ones). It's a lot more convenient to simply run the test suite in the IDE in one go and locate and fix the failures with the IDE jumping to failure points and outputting logs. Without the suite, I imagine tests would need to run from the command-line where you lose the intellisense of the IDE guiding to you towards the failures and you'd have to decipher logs to figure out what files and what lines are at fault. \n. Could you please add test cases that demonstrate the fix? . Thank you very much for the contribution. Outstanding work. Keep 'em coming!. Thank you.\nI recommend you work off of topic branches in the future. Notes:\nhttps://apereo.github.io/cas/developer/Contributor-Guidelines.html#workflow\nThis will attempt to isolate your development environment for the change at hand; working on top of a branch that is the direct equivalent of a target branch generally causes merge issues in the future with lingering commits here and there.. This is excellent but I think you need to change the target branch to master. This is not something we can ship in 5.3.x.. Thank you for the patch. If you do need autoCommit=true, simply consider setting that to true in your CAS settings.. Thank you very much. Let's pick this apart:\n\nFor the first issue, it looks you may have found an issue. Could I ask you to try to get the build in order and passing, and then when it all checks out, post yet another PR for master? (of course, let's wait to see if the build does in fact pass, and you may want to add some additional checks and tests to prevent this behavior?)\nFor the remaining issues, I recommend you try to put together a sample project on Github and share its link here that demonstrates the issue. Show the requests and responses back and we'll try to work through it together. Items 2-4 are likely related, but me personally, would like to see the interactions first to see if you have missed anything obvious. If there are any fixes needed, we'll work through separate PRs together for each change, depending on the impact. \n\nThanks again.. You can locate the test suite for the module at hand and run the batch. If you want to run everything tagged as a simple unit test, you could take a look at the run-tests-simple.sh in the CI folder and use that command. I should say though that ultimately, the only thing we care about passing tests is the CI. Things might work well on your machine and pass all fine, but CI is the reference :)\nIt will be some time before I can walk through your scenarios (and thank you very much for those) but I'll be in touch. . Wonderful. I'll probably start to collaborate with you on this mid next week. . Are you including client_secret=totallysecrettrustme in the request because persumeably your application is a confidential client? If not, have you tried dropping that bit from the request? \n. > Isn't a confidential client with password flow a valid case?\nIt would be yes, which would make it a feature request and not exactly a defect, and if I know this correctly, a confidential client is required to pass the client id and the secret as an Authorization header, and not directly in the request. Though it doesn't make sense for an OP to authenticate the request twice (once using username/password and once using client_id/secret), that seems to be the use case. A confidential client scenario isn't supported in CAS 5.x, and given the scope of the issue and the release, that change would be better fitted to master/6.\nAlso note that in 5.x, the set of supported grant types can be defined as \"empty\" which means everything is allowed by that service definition. Your patch will need to take this behavior into account so as to not break everyone's integrations and it was done specifically so to not present a breaking change. So, you need to ensure that if the set of supported grant types is left undefined or blank, the request can go through with a warning in the log. If however, at least one grant type is defined then the request may be checked for the supported grant types defined. . Each validator operates on the request/thing it can validate. If it can't, it will ignore it and move on. \nI believe some recent changes in this area are pushed to master. Please review and see if those help with this effort.. > No. Here is how authorize endpoint controller created in master:\nValidators operate based on the request that can be operated on and one that can support. If they can't support the request and they don't recognize it, they will skip it and move on, allowing the next validator in the chain to handle the processing. Furthermore, I am sure you also realize that this patch in its current form cannot be merged because it does not fit the scope of a patch release. I recommend that you revert the changes, and find a much more nuclear/surgical solution. If the changes do need to remove or add new APIs, etc heavily, then they are better fitted for master, or they may be kept in a local fork or overlay. A better approach, I might suggest, would be to restore all components back and try to backport functionality from master as much as possible, fixing issues along the way and keeping code compatibility as much as possible.\nPOST EDIT: It might in fact be easier to try to duplicate the same problem in master and see if it manifests itself there. If it does not, then you can try to spot the differences and backport where needed. If it does, we can try to find the missing gaps, fix it in master and then brainstorm about what can be backported to the patch. . By the way, I apologize if I may have been too brief. I'll set aside some time today hopefully, to review the current design and implementation of validators and will try to post back some findings that would explain how each validators and what might work best without a whole lot of changes. (Worst case, Friday).. > I understand that. My point is /authorize endpoint never receives grant_type parameter -> supports always returns false -> validate is never called. Since *GrantTypeAuthorizationRequestValidators are not used anywheere else, they are effectively dead code. That's why I've removed them and related tests and I think they should probably removed rom the master too. But I can restore them if I am wrong.\nYou are absolutely right, and thanks for your patience with me here. Took me a bit to realize this and having looked at this more closely inmaster, I reckon the following classes can be removed in fact:\n\nOAuth20ClientCredentialsGrantTypeAuthorizationRequestValidator\nOAuth20PasswordGrantTypeAuthorizationRequestValidator\nOAuth20RefreshTokenGrantTypeAuthorizationRequestValidator\n\nThe rest should be able to stay as they are.\n\nFix typos and code duplication for /token validators in master branch (separate PR).\n\nSounds good. Sure.\n\nPort /token validators changes from master to this branch, replacing current implementation to reduce the difference in code base.\n\nAbsolutely.\n\nCopy tests from this PR to master branch (for now they seem more complete) (separate PR).\n\nWonderful.\n\n(?) Remove redundant validators for /authorize endpoint in master (if they are really redundant).\n\nYup. The 3 above are good candidates.\n\n(?) Restore validators for /authorize endpoint in this PR (if they are actually not redundant or if we want to keep then for some other reasons).\n\nSame as above, really. Essentially those that operate on grant_type can be removed here.\nAs always, and while not necessarily a requirement really, it would be best to do these in separate PRs (as you note) and try to keep changes focused and nuclear. Makes it easier for everyone to track, modify and merge quickly, but in the end, do what would be most comfortable for you and I'd would try to accommodate.\nThanks again.. John, do you think you might have the time to post the same PR for master tomorrow? I'd like to try and include your change in tomorrow's release if possible. . John, this is now merged:\nhttps://github.com/pac4j/pac4j/pull/1165\nCould you switch to the next snapshot for pac4j, 3.1.0-SNAPSHOT, clean up the extra setter and see how it plays? The SNAPSHOT should be out once this passes: https://travis-ci.org/pac4j/pac4j/builds/411903838. Thank you very much for the contribution. Outstanding work. Keep 'em coming!. You are more than welcome to, but I suspect that cannot be merged; given the change here alters the schema, it would be a breaking change for every other database type etc that might be fine today. Master can accept breaking changes, so for 5.3.x you probably need to patch this bit yourself in your overlay, etc. . How is OAuth20AuthorizationCodeGrantTypeTokenRequestValidator.java (which seems to be about AuthorizationCodeGrantType) related to the refresh_token grant type? I don't see the connection. Could you explain further?. Thanks for the note.\nThe client secret is actually picked up by Authenticator components in attempts to authenticate the request based on the client id and secret, or usename/password, etc. If the access-token request requires authentication, then those authenticators kick in. If you're not seeing that work properly, could share a sample project that demonstrates the failure along with requests and responses? \n. btw, it would be very helpful if you could include additional test cases to cover the new approach (if they are not there already). If you have trouble with this piece, let me know and I'll help you out.. Looks much better, thank you so much.\n\nhow to mock HttpServletRequest object.\n\nThere is a mock object called MockHttpServletRequest. If you search inside the codebase, you'll find plenty of examples for doing that. . No need to rebase or close for that matter; things get squashed right here when your patch is merged. \nI think everything looks pretty good; you just need to update the docs with references to the settings that added, and we should be good to go. . The JDK download site, as well as Travis CI, have been sort of wobbly lately but they should be back to normal now. I restarted the CI build to see this patch go through 'till the end. . Thank you very much. \nPlease:\n\nWrite test cases that show before/after scenarios.\nPost the same patch to the master branch when you're ready, and if applicable.. Looks excellent, thank you.\n\nOne small failure:\norg.apereo.cas.support.x509.rest.X509RestHttpRequestHeaderCredentialFactoryTests > createX509Credential FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertFalse(Assert.java:64)\n        at org.junit.Assert.assertFalse(Assert.java:74)\n        at org.apereo.cas.support.x509.rest.X509RestHttpRequestHeaderCredentialFactoryTests.createX509Credential(X509RestHttpRequestHeaderCredentialFactoryTests.java:48)\n...and minor comments here and there.. OK, no worries. I'd wait for Travis CI to run through this batch once more if it still fails, we'll merge anyway and look into it later. Thanks!. > org.apereo.cas.support.x509.rest.X509RestHttpRequestHeaderCredentialFactoryTests > createX509Credential FAILED\n    java.lang.AssertionError: cred is not right type: X509CertificateCredential(certificates=[[\nYou may want to update the assert statement to indicate the credential type received; that way you can possibly try to figure out the reason for the mismatch. . Also, shouldn't be assertTrue instead? You want to make sure the credential is in fact of that type, and else throw an error, right? . Thank you for the patch. This is not a typo; it's a placeholder reference for the actual theme name. . Ah, excellent. My apologies for being careless here. Thank you.. If you'd like to submit the same sort of change for the master branch, that too would be great!. Looks like one minor issue:\n```\n\nTask :api:cas-server-core-api-configuration-model:checkstyleMain\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/api/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/model/support/saml/idp/SamlIdPTicketProperties.java:0: File does not end with a newline. [NewlineAtEndOfFile]\n```\n\nand we should be good here. Thank you.. > I'm going to try getting checkstyle working on my cpu again for a bit and then I'll go do the documentation and stuff.\nIf you check out the contrib docs, you will find a section for IDEA where the check style plugin allows you to only check the files that are modified. Should be done almost instantly. (For other IDEs, not sure). > What do you mean by RequiresModule annotation?\nFor the new properties class, you need:\n@RequiresModule(name = \"cas-server-core\", automated = true)\n@Getter\n@Setter\npublic class CasServerProperties implements Serializable {. >Commenting out LambdaParameterName fixes it, I'll try not to commit it though.\nMake sure your IDE is set to run the latest checkstyle version.. The plugin version is a good step, but I was mostly referring to the checkstyle version itself:\n\n. Are you seeing that error when you run the test locally or on travis ci? . Issue here is that your extractor bean id is not in fact what is referenced by the call sites. You had the bean defined as X and then you had Qualifier references refer to it as Y. Since the references used ObjectProvider, you'd always get a null object for the extractor due to the bean naming mismatch, and thus the failure. This has been fixed.. The error in tests likely is because your new configuration class is not included in the test suite; thus your extractor is never picked up by the test execution and the ifAvailable() method that is supposed to pick it up returns null. . @Import(value = {X509AuthenticationWebflowConfiguration.class, X509AuthenticationConfiguration.class})\npublic class X509CertificateCredentialsRequestHeaderActionTests extends AbstractX509CertificateTests {\n...\nSee the list of configuration classes that are imported by the test class. Include yours.\nAnd, you need to run the same command as Travis CI:\n./gradlew --stacktrace --build-cache --configure-on-demand --no-daemon -DtestCategoryType=SIMPLE test coveralls --parallel \\\n-x javadoc -x check -DskipNpmLint=true -DskipGradleLint=true -DskipSass=true -DskipNpmLint=true --parallel \\\n-DskipNodeModulesCleanUp=true -DskipNpmCache=true -DskipNestedConfigMetadataGen=true\nYou can see the command in the build output for Travis CI. . I restarted the job for you.. Looks great, thank you. Please consider posting the same fix to the master branch.\nAlso just as a tip (and not that this is a blocker), it would be good to reduce the changesets to only the stuff that requires changing. Do not re-format the code as it makes it harder to spot the change and learn from the pull request. . Thanks very much. You don't really have to clean up. I see it's your first time doing a PR for this project, so no worries at all.\nYou are right in that the code components would not immediately apply, but I am fairly certain the issue does exist. You won't be able to cherry-pick easily, unfortunately, but the change/improvement should be ported forward. . Yup. This is perfectly good, thank you. I'd wait for the same fix for master and then would try to merge both. Hopefully before the coming weekend as, per the release schedule, would be great to get this into the next 5.3 patch release.. Hello, have you made any progress here on porting this patch over to master? Do you need help?. No worries. I took care of this one for you. . Thank you very much. \nPlease:\n\nFix build failures\nWrite test cases that show before/after scenarios.\nPost the same patch to the master branch when you're ready.\n\nI see you're a first-time contributor. If you need help with any of the above, please post back.. > I assume you are refering to Unit Tests. I saw your commit of OneTimeTokenAccountTests in the master. Those should be just what is needed. Do you still need more test cases?\nCorrect. I think that test is a good starting point, too. If you could backport it to your branch and continue on the build, we should be good to go here.\nThanks again. . Hi there. Have you been able to make progress here? Need help? . Thank you very much for the contribution. Keep 'em coming!. Than you very much for the patch.\nI don't think this is the right fix. Can you describe the circumstances the lead to INVALID_AUTHENTICATION_CONTEXT? I believe changes are more likely required in the place where the authn context is validated, aka https://github.com/apereo/cas/pull/3482. Thank you very much for the logs, @atticus88. \nThe bit about No satisfied multifactor authentication providers are recorded in the current authentication context. is likely where the issue is. \nAs @tsschmidt says, if bypass is in fact happening, certain attributes are recorded to indicate that as part of the collected authentication, and it's likely the validator is not processing those attributes correctly, not honoring bypass. The fix will likely need to be part of the validator, and perhaps https://github.com/apereo/cas/pull/3482 does it already; I will try to test this particular pull request against 5.3 and 5.2 and see how it might behave and we can take it from there. \n. I like the above option better; concretely, I dislike having those two calls in the provider itself as they sort of duplicate what a bypass-provider itself might do to update the authentication. If we can find a common spot to house the bypass-updates-authn calls, I think this would work charmingly.. @atticus88 Thank you for the patch and suggestion again. Closing in favor https://github.com/apereo/cas/pull/3493.\nPlease keep'em coming :) . A smaller version of the patch https://github.com/apereo/cas/pull/3493 is made available in 5.2.x, and should be ready for testing in the current snapshot.. Thank you very much for the pull request.\nThis isn't correct. If you review SchedulingProperties you will find that there is enabled flag there. The proper structure is what the doc suggests it should be. Perhaps you meant for the change to go into the 5.3.x branch? . no problem, at all. If you wish to open up the same patch for the 5.3.x branch, I'd be happy to review and apply if it needs to be merged there. thanks again!. Looking really good. Let's make sure the build passes and we should be GTG. Do you want to post this forward to master, or shall I? . I think this looks excellent. One comment here is that the call that puts the provider into the webflow scope is fairly generic; while duo is the only provider at this point that does in fact make use of it. It seems like either we need to move the webflow calls into the duo module and not expose generic static methods that would have one believe the API can be used to fetch a provider regardless of the module used for mfa, or we should take a pass at other providers and ensure we stuff a provider into the webflow scope for all of them.\nI do like the second option myself. . Yes that should work. That's the last resolver in the chain that always executes, and in fact already puts the resolved provider ids into the flow, which should make those static methods unnecessary too! You can get the provider ids that are resolved, and fetch the provider instances from the context in the right spot.\nOne thing that does require testing is multiple instances of duo. I believe if you have more than one defined, then the resolved provider ids that are put into the conversation-scope there include all duo ids. If that is true, then we are golden here; refactor and remove static method calls and simply use the resolved providers. . > Then both are returned from Selective resolver and the decision is then made by the configured MultifactorProviderSelector for the MFA flow.\nRight. So how about we simply move the putActiveMultifactorAuthenticationProvider right after the selector picks a provider? That way, the behavior applies to all MFA providers, and isn't just a feature of duo. . That makes sense. Thanks!. Nice. A few comments here:\n\nThe latest commit removes the use of the Variegated provider from Duo in favor of registering a Bean for each provider created in to the ApplicationContext.\n\nDo we need to remove the Variegated provider API altogether then, if we have no use for it?\n\nMfaCredential\nMfaAuthenticationHandler\n\nI am guessing that these two need to be implemented by all credentials and providers for MFA, and not just duo, right?\n\nAbstractCasMultifactorWebflow\nAdded an ActionState to call MfaInitializeAction in the MFA based on on STAT_ID_INIT_LOGIN_FORM\n\nHow does this point in the webflow deal with this? Does it impact the REST API when MFA is attempted?\nAlso I have not looked too closely yet but we should be mindful of the scope here and how it might fit into a patch release. Are there any breaking changes, configuration or API-wise? . All sounds good. \n\nI would leave the variegated API for now, since technically it cannot be removed in a patch release. But for the master branch, we should try to do without it.\nGiven your description of MfaCredential (and like the related handler), I suggest these components need to then be renamed to explain why and how someone should implement them so the name explicitly indicates objective and intent. Right now, the name suggests that if a credential is related to mfa functionality, then it may be an implementor of this MfaCredential which isn't right by design per your description. This is not an issue really, as picking the right name to convey this sort of thing is difficult and if there are no good candidates, we should remember to revisit the naming scheme for this classes.. Looks like all things pass here. Thanks very much! Excellent work. Did you want to handle the master changeset as well? Leave that up to me? Both? :). ```\nWhat went wrong:\nExecution failed for task ':support:cas-server-support-shibboleth:findbugsMain'.\nFindBugs rule violations were found. See the report at: file:///home/travis/build/apereo/cas/support/cas-server-support-shibboleth/build/findbugsReports/main.html\n\n\nTry:\nRun with --info or --debug option to get more log output. Run with --scan to get full insights.\nException is:\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task ':support:cas-server-support-shibboleth:findbugsMain'.\n    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:110)\n    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:77)\n    at org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)\n    at org.gradle.api.internal.tasks.execution.SkipCachedTaskExecuter.execute(SkipCachedTaskExecuter.java:105)\n    at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:59)\n```\n\nProbably related to #3507 \n. Thanks very much. When all is said and done, you may want to port the same patch to master as well before we can merge this.. I recommend you keep the changes as generic as possible like all other clients, and adjust css/logo/etc in your overlay. You will have a cas.css file as well as an images directory to use in the overlay. Doesn't make much sense to add these here, as almost ALL CAS deployments simply rip out all UI elements and start customizing them. Given yours is super specific, I recommend you start with the overlay for those changes. . But to answer your question: CSS files are generated from sass files here that turn a scss file into a css file. The static/images directory is also the folder for CAS images, and otherwise every other icon/logo/etc comes from font-awesome. . Yes and yes :). Also, please remember to document the new authentication provider in CAS docs.. This is now ported forward to master. If you could update the docs, we should be good to merge this one. Thanks again. . Very nice. One question: you are actually removing implementation project(\":support:cas-server-support-saml-core\"), which seems like does nothing to activate SAML support. The reference is only there to provide that constant (which is likely not good). Could you clarify? . > That is exactly why I removed it. We can put it back after the saml core refactor and remove the static final from here if that would be preferred.\nNo it's fine. I think in master, this sort of thing is broken down so when you do a PR for master please do take this into account.. Travis, could merge with master once please? This should be near ready to merge. . LGTM. Could you do the same for the other branches as well? . Understood. Thanks for the update. . No. Make sure you have the repository declared in the build script..  #3521 is merged. @leleuj you may be able to take advantage of the fix in the latest 5.3 snapshot. . Daniel, did you want to handle the backport or should I? and are you certain removing Transactional does not cause issues with JPA?. Looks really nice. Added a few comments, and also needs test cases.. Thank you! A cursory look suggests that master does marginally better in this area; If you prefer, I can port the changes forward or you're welcome to do that? . Nicely done. Thank you.. LGTM. Port to master and we should be set to go!. Travis, could you merge with 5.3.x once please? Should be able to merge afterward. . @hdeadman Could you post a PR to the cas-overlay-template project for the 5.3 branch, upgrading the boot version as well? Would you prefer if I did that? . Thank you very much for the contribution. Keep 'em coming!. Jeff, do we need to the same batch of stuff against master? . Could you take a look at the CI failure here? https://travis-ci.org/apereo/cas/jobs/434341045\nTravis CI - Test and Deploy Your Code with Confidence\n. It would likely be more conclusive if the final result turns out to be:\n{\n  \"a\": \"1\",\n  \"b\": [\"2\", \"5\"],\n  \"c\": [\"3\", \"6\"]\n}. I understand. Let me clarify: \nIf the question is about how attributes should be collected from multiple authentication objects, then the answer is that they all need to be merged together and turn into multi-valued attributes. If on the other hand, the question is what surrogate attributes should be collected for the particulars of the impersonation scenario, then the answer would be that likely only attributes that belong to the impersonatee should be collected in that session. If the current behavior in either scenario doesn't match either description, an improvement would be in order.. > Would it break anything?\nSure. Any time you change behavior, it risks breaking everyone's deployment of it. Also, I am not sure you'd have a clear solution, because we are assuming there is a \"problem\". You just have a different interpretation of the use case at hand; so perhaps two things might be in order: 1) either change the behavior in the overlay as you see fit 2) or introduce the two scenarios and allow folks to flip between them using a setting while keeping the default in 5.3. (And when you do the same changeset for master, you could to switch to the mode where only the surrogate principal attributes are collected and considered though I'd likely advise against that too). Update: I have had a few conversations with a number of CAS users about this particular behavior, and I believe the overall consensus regarding the surrogate behavior is that this patch should be merged. So first, thanks very much for taking the time to handle this scenario. Second, would you have time to submit something similar for the master branch, or would you rather we handle that on our own? . Great, thanks. . Thank you very much for the contribution. Keep 'em coming!. > Would you rather fallbackPrincipalAttribute be principalAttributeFallback? There is already a property called principalAttribute and a variable in the java code called principalAttributeName (for the principalAttribute property).\nI think perhaps alternativeprincipalAttribute would be a better name.\n\nIf you don't think the property should be defined in X509Properties, I don't understand where it would go.\n\nWe'd likely need to re-organize the X509Properties and break it down to individual components, each addressing a separate resolver and other things. Right now, there is this giant class that sort of controls everything, X509-related. We have:\nval x509 = casProperties.getAuthn().getX509();\nval principal = x509.getPrincipal();\n...which sort of needs to turn into:\nval x509 = casProperties.getAuthn().getX509();\nval principal = x509.getSubResolverByWhatever().getPrincipal();\nI think this sort of change should really be applied to the entire class, using static inner classes to better group related settings. If you'd like, I can take a stab at the overall reorg some time next week and then you'd have grounds to better house the new field.. > If this alternatePrincipalName attribute applies to the SUBJECT_ALT_NAME and EDIPI resolver, and each resolver has its own config bean, would their config beans need to each duplicate that property?\nPossibly. It depends on how creative one may be via inheritance and delegation. It would be best to re-organize things such that duplication is avoided, but chances are that it may happen.\n\nWould that mean four resolver config inner classes?\n\nAssuming your count is correct, yes. Also, we are likely looking at re-organization of other settings in X509 that deal with CRL fetching and caching, etc. So 4 or so *Properties classes for the resolvers and a few others for the other stuff. \nBy the way, I personally dont mind one way or another, but it would be better to avoid inner classes specially in this case since I can see that the overall class body can get very large with so many inner classes, etc. A better option would be to extract each class into its own and use @NestedConfigurationProperties on the field, which does also work marginally better when we generate spring configuration metadata.\n\nI renamed property to alternatePrincipalName but I saw after I did it you said alternativePrincipalName? Do you have a strong preference?\n\nNope. Either is fine.\n\nAlso, there is a an unrelated change to UmaAuthorizationRequestEndpointController.java in this commit.\n\nYup. It's fine. Seems like you were cleaning up some leftover checkstyle stuff; all good.. The changes introduced here break GoogleApps functionality:\nhttps://groups.google.com/a/apereo.org/forum/?utm_medium=email&utm_source=footer#!msg/cas-user/wNghzsq6QFs/VjH6bsNJCQAJ\nReverting. . The changes introduced here break GoogleApps functionality:\nhttps://groups.google.com/a/apereo.org/forum/?utm_medium=email&utm_source=footer#!msg/cas-user/wNghzsq6QFs/VjH6bsNJCQAJ\nReverting.. This is great, thank you. Please submit another PR targetted at the master branch and we should be able to merge both quickly.. Something's definitely gone wrong here! Did you actually rebase/merge on top of the master branch from apereo/cas? You'll need to make the change in a separate branch, based off of master, and then use that in the PR. If it's easier for you to have me make the change, please let me know (but it would be much better for you to take credit for that too!). Very nice. Thanks!. Thank you very much for the contribution. Keep 'em coming!. Thank you very much!. Change is ported forward. . This is fine, but I just realize that this class is only used in LoggingConfigurationEndpoint. Could we perhaps remove this class, and LoggingConfigurationEndpoint altogether, remove the extra property config and all other related things and simply take advantage of the \"loggers and \"logfile\" endpoints that are natively provided by Spring Boot? I believe that should be a much better option with the new model of actuator endpoints. . Forgot to mention that if you are not too familiar with actuator endpoints, etc, I'd be happy to experiment a bit and report back results.. >SonarJava 5.8 has been deployed to SonarCloud\nRef: https://community.sonarsource.com/t/java-11-unsupported-class-file-major-version-55/3474/5\n SonarSource CommunityJava 11 Unsupported class file major version 55Hi,  SonarJava 5.8 has been deployed on SonarCloud.  For knowing about this, this is another issue which I am not really in position to answer, I\u2019ll forward this feedback to the SonarCloud :sonarcloud: team.\n. > Is the above a good enough test for this scenario? \nSeems OK to me. How is the behavior in https://github.com/apereo/cas/pull/3256 tested? Your test should be rather similar to that one, I suppose.. Looks good to me. Thank you! Are you satisfied with the changes, and can this be merged? . J\u00e9r\u00f4me, is this the sort of thing we might be able to use with lombok's @Cleanup annotation?\nRef: https://projectlombok.org/features/Cleanup\nSomthing like:\njava\n@Cleanup\nval response = ...\n@Cleanup\n. This cannot get merged in its current state. It really needs to get broken out into several small PRs. It's impossible to see what's going on, either from a knowledge-share or review perspective.. Thank you very much. Do you think you might be able to write a few cases to show the failure/success cases?. > Several of the webflows seem to clear out the credentials (digest, basic, generic-remote, openid, spegno, token, trusted & x509) so I assume none of them work with the AUP default repository. \nOuch. That sounds like a very unfortunate side-effect.\n\nShould the clearing of the credentials be moved to the beginning of the login form flow or should it be tied to specific transitions in the x509 flow? (Not the success transition to create TGT which AUP prepends itself to.)\n\nMy vote is the latter, or perhaps we can do it in the beginning of the login if the non-interactive authn method (like X509) decides to route the user to the login form.. Forgot to ask: it seems like the new scope setting only applies to the default AUP repository implementation, correct? Would it make sense to apply the setting to all repositories since the behavior is a feature of CAS and not specific to a backend technology? . PS I think you want to try to move the logic to AbstractPrincipalAttributeAcceptableUsagePolicyRepository to have it apply to all before verify is called. . Yes. Seems like something this commit actually broke:\n```\norg.apereo.cas.ticket.support.RememberMeDelegatingExpirationPolicyTests > verifyTicketExpirationWithRememberMe FAILED\n    java.lang.ClassCastException: java.lang.Boolean cannot be cast to java.util.Collection\n        at org.apereo.cas.ticket.support.RememberMeDelegatingExpirationPolicy.getExpirationPolicyNameFor(RememberMeDelegatingExpirationPolicy.java:56)\n        at org.apereo.cas.ticket.support.BaseDelegatingExpirationPolicy.getExpirationPolicyFor(BaseDelegatingExpirationPolicy.java:135)\n        at org.apereo.cas.ticket.support.BaseDelegatingExpirationPolicy.isExpired(BaseDelegatingExpirationPolicy.java:80)\n        at org.apereo.cas.ticket.AbstractTicket.isExpired(AbstractTicket.java:120)\n        at org.apereo.cas.ticket.support.RememberMeDelegatingExpirationPolicyTests.verifyTicketExpirationWithRememberMe(RememberMeDelegatingExpirationPolicyTests.java:61)\n```. Thank you very much for the contribution. Keep 'em coming!. > In some environments spring's ApplicationContext does not have a parent set\nWhich environment is that exactly?. Thank you for the explanation. Would you want to port this to master in another pull request, or do you need help with that? . Thank you very much for the contribution. Keep 'em coming!. > Assuming they all clear the credential when there is an error that results in the flow going back to login, then this should be OK\nYes, this is the main reason. Particularly, (and I could be entirely wrong here), thymeleaf tends to get very particular about binding a credential to the flow model, and it finds a different type of credential in the flow already that it cant bind to the login form, etc we get very nasty errors. That said, I think what you have here is fine, but just in case, I'll try to run tests with SPNEGO and AUP for instance and see how it might hold up. . I am not sure about this. Some improvements can be surgically applied, but in general, it doesn't seem a good idea to suppress warnings only to make a CI tool happy. Might those warnings actually be fixed and removed, rather than suppressed? . Can you point out the area in the code where the service is extracted via ECP? . Thanks for the note. Offhand, I am not so sure about the module change to the build because I suspect it might introduce circular dependencies. While the reason for the change is obvious, I think some additional refactoring might be in order in the future. I'll run some tests and will get back to you; if you could fix build issues in the meantime, that would be great. . @rkorn86 Could you by the way post the stacktrace you get with the NPE? . Thank you very much!. Could you identify what version of Oracle this is that has the limitation? . Cool. Thank you. Is this a sort of thing that is addressed in later versions of Oracle? . Great. In that case, I'd recommend that you simply try to make the upgrade. I would normally be OK with this sort of change, but there is no reason to break database schemas for every other database type that might not have the issue, and while the upcoming major release allows us to make this sort of breaking change, I'd rather avoid it by solving the problem via an upgrade. If that is not an option, I recommend you simply make the change locally to the source code.. Handled via https://github.com/apereo/cas/commit/77896e6459f11cb5cfe574fffaea7bf06534b292 using Hibernate's support for physical naming strategies.. Could you also add a few notes to the docs to describe the change in this patch? . Thank you very much for the contribution. Keep 'em coming!. Thanks Bo. Much appreciated!. I may actually need to revert this one; because the generated source files must be kept and shipped with CAS.. Second thought; that is not really a problem as the files are always auto-generated. The issue could be that when one first loads the project into the IDE, there would be compile-errors until a build is actually run once?.. Excellent work! As for the module, I'd think api/cas-server-core-api-configuration-model would be most fitting, since that's where the settings are defined anyway. . > Anyway, I don't know if we want to put all these properties in the additional metadata or if we should just take a few properties from each group that are likely to be used if that feature is being used \nMy vote is the latter. In fact, I might be able to help identify what might be most common. Do you want to merge this as you have it, before we step into that stuff? . I think we might have an issue here:\nif (xFrameOptions != null) {\n            super.setXFrameOptions(xFrameOptions);\n        }\nConsider this:\n\nService S1 has custom header options for x-frame. It gets set.\nService S1 has no custom header options. So CAS tries to fall back onto the default value. The default value is changed for the filter via #1, so every service gets that value.\n\nThis needs to make sure that the filter value is reset to the original, if no service option is found.. Yes that's perfect, except that DENY should not be a hard-coded value. You should get the default from the settings instead. . Bo, please hold off on making any other changes. I think we might need to modify the parent filter to make the header-insertion process easier. I am going to put together a small patch release to expose operations better to the CAS filter here, and then I'll let you know to proceed with the fix. Should be very quick. . Changes are done. Waiting for CI to publish snapshots.. Thank you very much for the contribution. Keep 'em coming!. > so naturally the user will assume (at least I will think like that) their login\nSome high level notes:\nI understand why you might be troubled by this, but practically, users generally assume that they should just log into places seamlessly without getting prompted at all. The surprise (read annoyance) only/usually is a factor when users are asked to enter credentials; not the other way around. So in your scenario, what's closer to reality is that users are surprised when they are asked to log into app A, and are likely delighted that B didn't ask for their credentials again.\n\nUser login to App A, and App A claims that it is SSO disabled...\n\nConsider:\n[App Z: SSO enabled] [App A: SSO disabled] [App B: SSO enabled]\nHow would you explain the situation when the user logs into app Z, then A, then B wrt the surprise factor with createSsoCookieOnRenewAuthn=true? \nThis is what should happen.\n\nZ creates SSO.\nA ignores SSO and asks for credentials. An attempt is made to create an SSO cookie and likely is either ignored (or the cookie is updated).\nB uses SSO established by Z.\n\nIf you use createSsoCookieOnRenewAuthn=false:\n\nZ creates SSO.\nA ignores SSO and asks for credentials. No cookies created/attempted.\nB uses SSO established by Z.\n\nReads the same, no?\nBut let's say you have createSsoCookieOnRenewAuthn=false and you start with A:\n\nA ignores SSO and asks for credentials. No cookies created/attempted.\nB should ask for credentials again since no SSO/Cookie exists.\n\nIf you find the second statement to be false, then you have found a bug that needs to be reviewed.\nPS Now, you might have the argument to let A remove the pre-existing cookie if createSsoCookieOnRenewAuthn=false to really get around what you call the surprise factor. That's more understandable though practically not all that viable.. Thanks. Could you explain why flashScope is required/needed here? . > For regular CAS services (redirection = consent service), the flash and flow scopes will be the same, but for SAML this makes a difference.\nCould this PR be changed so that we'd only fetch stuff from the same/common spot? The fact that one has to remember the why is rather alarming. Unless there are specific valid reasons for keeping the scope separate, it would be good to keep things consistent.. Help me understand please: Why wouldn't you want to work with the normal service found in the scope? What is special about consentService that needs to have its own attribute?  . Sounds good to me.. Merging in to follow-up with fixes in https://github.com/apereo/cas/commit/82385f3d90a19da1ed5962089fedc734a8626fd8. OK. We should be good to go here. Fixed via https://github.com/apereo/cas/commit/82385f3d90a19da1ed5962089fedc734a8626fd8. We're looking into this. Stand by please. . This should be fixed in about an hour or so. Be sure to update your snapshots when you try again.. Please describe the problem you're solving in the PR description, add test cases that show before/after and port over to master.. Thank you!. Thanks for the patch. Any particular performance drawbacks with initializing the cipher every time vs other alternatives?. > From my JMeter result, I didn't see any visible performance downgrade after the change in this PR (i.e. initializing Cipher every time).\nGreat.\n\nBtw, this Cipher issue also exists in master branch. If this issue & solution is validated, I will make another PR on master.\n\nYes, please do.\n. The bot is out of order and isn't quite cognizant of the CAS release policy just yet. Given the final cut of RC4 and we more or less going into freeze mode, the targetted version should be 6.1.0-RC1. I'll take a pass later today to make the bot behave. . Looks great. Will merge at the right time. Thank you. . Looks great. Will merge at the right time. Thank you. . @hdeadman This might be a good one for 5.3.x as well. If you could backport, that would be great or else let me know and I'll do it. . @hdeadman This might be a good one for 5.3.x as well. If you could backport, that would be great or else let me know and I'll do it. . You're right; This is pretty low key. Given that we officially should be in freeze mode and it's not a bug fix as I understand it, I'd rather we keep this up for now, merge into 6.1.x and then cherry-pick back into 6.0.x. Process-wise and long-term, I think that's easier rather than debating/examining the risk-factor for every PR while in freeze mode. \nThat being said, I am personally perfectly OK with the merge so long as others are too as it would be a bit of violation and so I want to make sure most are OK with the change before violating the policy :) . You're right; This is pretty low key. Given that we officially should be in freeze mode and it's not a bug fix as I understand it, I'd rather we keep this up for now, merge into 6.1.x and then cherry-pick back into 6.0.x. Process-wise and long-term, I think that's easier rather than debating/examining the risk-factor for every PR while in freeze mode. \nThat being said, I am personally perfectly OK with the merge so long as others are too as it would be a bit of violation and so I want to make sure most are OK with the change before violating the policy :) . > Should the space just be added after ${err}?\nThat would be OK, or perhaps, the actual message in the bundle can be padded slightly with an extra space? That might be a better option overall, since views are usually replaced in deployments and folks may not immediately see the required change, but message bundles are slightly less likely to be overlaid. . > Should the space just be added after ${err}?\nThat would be OK, or perhaps, the actual message in the bundle can be padded slightly with an extra space? That might be a better option overall, since views are usually replaced in deployments and folks may not immediately see the required change, but message bundles are slightly less likely to be overlaid. . Makes sense, sure.\n\notherwise it would mean updating 25 or so bundles and multiple properties in each\n\nNot quite. We only care about the English bundle. You only update others if you speak the language or have a vested interest in that locale. . Makes sense, sure.\n\notherwise it would mean updating 25 or so bundles and multiple properties in each\n\nNot quite. We only care about the English bundle. You only update others if you speak the language or have a vested interest in that locale. . > Do you think it is worth trying to copy the runtime/implementation dependencies into a single folder and running the command line scanner\nIt's worth experimenting but I wouldn't spend a whole lot of time on this. The plugin itself might improve, or we might find a better alternative/replacement that may not require a whole lot of heroics. If you estimate this to be a quick thing to do (meaning 1-hour task), then sure. Otherwise, I am OK with the 12-minute performance gain. That's quite a bit on its own. . >... or write a mapper to set NOT_SET to UNDEFINED.\nThis is not necessary because the very same RegisteredServiceMultifactorPolicyDeserializationProblemHandler.java you modified here should handle scenarios where NOT_SET can be translated to UNDEFINED. Everything that passes through that handler should be caught, and there is a test case that demonstrates this. If you find other registries that don't pass through the Jackson library, those are the ones you should review and fix. . Yes. If you use DefaultRegisteredServiceJsonSerializer as the thing that handles the serialization, then it would automatically do that for you...or at least, it should.. > ... for the cases where a service is disabled in the service registry.\nCould you add a few test cases to demonstrate this? . Thank you very much for the contribution. Keep 'em coming!. You're welcome to keep the bug fix here for this PR, but everything else needs to 1) extracted out of this , and 2) targetted to a non-maintenance release preferably.. Generally, no though that depends on your patch and what it wants to do (and the policy is pretty forgiving in that regard). If you break this pull request apart, it'd be easier to decipher the extent of the change and whether it'd be applicable to accept here. . See my previous answer please.. Thank you very much. I think this looks fine, and I have asked Hal to also review. We should be able to merge in no time. You should start prepping for the branches and porting the change to those, unless you rather we handle that for you. \nThanks again! excellent work. . Please port the same patch to the master branch as well. (Or if you prefer, let me know and I'll take care of that bit for you). Thank you very much for the contribution!. PS If you have not already signed the CLA, I recommend that you do. . My apologies. Thanks for the reminder. I'll add you to the list here as well. . Myself, I am perfectly OK with this as-is. The only gotcha is that the check should not be a job in postbuild; if the check fails, you want the whole build fail, halt on all other jobs in the same stage and not push docs to gh-pages at all. So this either needs go into a separate stage on its own, or it needs to be bundled with a preceding stage, like the build step. . > Maybe I should make the script smarter to only run validate documentation if /docs is modified?\nSure. There are scripts/functions that should let you do this to a degree. You probably want to turn this behavior on once all links are corrected, right? . Cherry-picked into 6.0.x. Tests may be done separately. . > Allow to set responseType and responseMode for OIDC clients\nPlease also update the pull request to indicate what this means, why it is necessary and what exactly would the new settings impact. . > Are the javadoc comments extracted in the Configuration-Properties page ?\nThey are not, and you may update the page manually but the comments are typically used for configuration metadata processing, lookups and generating reports, etc via Spring Boot.. Yes, this is very good, thank you. You don't need to create a PR for the 6.0.x branch; this is simple enough that we can simply cherry pick. \n. This is cherry-picked into 6.0.x as well. Thanks again!. Looks great. Thank you both.. Yes, this looks perfectly good. The only outstanding item I think is to try to rename and simplify the field sqlUpdateAUP to something like updateQuery, etc. The rest is excellent, and you don't have to prep a new PR for master. We should be able to cherry-pick this from 6.0.x over to master very easily and your spot/credit in the commit log will be all the same. That said, if you prefer to, by all means do. \nAs always, thanks very much. . >So, would you like me to change it to your suggestion? If so, I would also do that in 5.3.x PR.\nNo, you make a very good point. Thanks for the reminder. Let's leave it exactly as it is now.\n\nCherry picking is exactly what I would have done to create the master PR. If you could do that, that's welcome.\n\nSure thing.. Cherry-picked into 6.0.x. Marking as WIP until JUnit 5 migration is complete.. Merged out of band. Thanks very much for your work here!. This patch has been automatically marked as stale because it has not had recent activity.. > could you check if this error also exists in 6.0.x and master branches and provide forward ports of this PR. Your support would be greatly appreciated!\nYes I believe the behavior is identical to that of 5.3.x. Could I ask you to do a PR for either master or 6.0.x? I can then cherry-pick from your PR.\nAnd as always, thanks very much.. > I would like to fix this problem\nSurely, you must realize that the pull request submitted here is not valid; it contains about 300 commits and 500 changed files. If you're unsure how to put together a PR, please ask, and do please review your submitted changes before actually submitting them. Makes it easier for everyone to review and assist. . Sure thing. Have you checked out the guide below?\nhttps://apereo.github.io/cas/developer/Contributor-Guidelines.html#how-do-i-do-this\nYou will need to push your changes to your fork first, and then create a pull request from fork/ur-branch to cas/5.3.x. \nAlso see https://apereo.github.io/cas/developer/Contributor-Guidelines.html#can-i-backport-a-change-to-a-maintenance-branch. @pa55ionbub do you think you'd be able to submit the same PR to either the master or 6.0.x branches as well? . Thanks for the pull request. In the future, please consider choosing a more appropriate title to help with the auto-tagging process. . This is good with me. Thanks Timur. Shall we proceed? . See https://oss.sonatype.org/content/repositories/snapshots/org/apereo/cas/cas-server-support-ldap/6.0.1-SNAPSHOT/cas-server-support-ldap-6.0.1-20190129.102114-20.pom\nIt will only be pulled in when necessary; namely when one has to deal with LDAP. The default tomcat webapp you reference has nothing to do with LDAP and it would not make sense to include the module in by default\n\n. My bad. Turns out the snapshot that I referenced earlier hadn't quite been published yet, and I lazily glossed over that fact. Forcing CI to publish again, here is the most recent snapshot:\nhttps://oss.sonatype.org/content/repositories/snapshots/org/apereo/cas/cas-server-support-ldap/6.0.1-SNAPSHOT/cas-server-support-ldap-6.0.1-20190202.211221-21.pom\n...where you'll find:\n```xml\n\ncom.unboundid\nunboundid-ldapsdk\n4.0.9\nruntime\n...\n\n```\n\n. We cannot merge this just yet.\n\nI was unable to duplicate the problem against master, 6.0.x or 5.3.x. So, before any merge is to happen, could you please upload a few sample projects that duplicate the issue?\nThis pull request should also be updated with tests that show the failure and the fix, before and after so we can better examine and understand the root cause.. PS Or perhaps, some sample configurations for both services that demonstrate different attribute release policies would be good, to run some independent checks. . Thanks. Would you mind attaching that project with the config files here? . Thanks again. I spoke to @dima767 about this as well, and he should be able to duplicate and confirm the issue before we move forward. Stay tuned please.. @dima767 do you think you might be able to confirm the issue/solution by this Friday? Or do you need more time to push back the release date for 5.3.8? . Great. Can you verify the patch fixes this issue in 5.3.8?. > That's the command that created working ...\n\nGood enough for me. Thanks again.\n\nHowever it is possible to use client id aware profile manager here and make remove also client_id aware.\n\nAlso sounds fine. Let's do that in a separate PR, if you are interested? . Thank you very much. \nI recall talking to @leleuj about this a long while ago around CAS 3.x, and since then, this problem has never surfaced up so it could be just you and a very limited audience relying on complex types, etc. That said, that's no reason to ignore it if the solution is easily maintainable. While I think it's something to pursue, I don't agree that the change fits the scope of the 5.3.x release line, and would be better for the current master. Let's keep the discussion open here on this PR, and as time permits, collect changes and feedback for the next available release. . > This way we cannot delegate OAuth 2.0 to another CAS instance (could we do this before?)\nJust to clarify, are you saying that using this patch, one cannot start with an OAuth client, submitting a request to CAS 1, redirect that request to a different CAS 2 server, get back to CAS1 and produce a response from the original OAuth client?\nIf that is true and this patch breaks that behavior, then it's a non-starter. We'll likely need to find options to make this work with that scenario or introduce settings that activate this behavior conditionally.. Sure thing. I'll keep this in mind.. I dont think the assertion is different structurally between CAS versions at all; regarding \"POJOs and maps are still serialized using toString\", did you consider asking CAS to produce a JSON response instead of XML for validations? I think that might handle the serialization scenario better.\nIt sounds like issues with the XML response regarding serialization of complex types need to be addressed first before we make progress on this pull request. Some recommended JAXB in the past; though I am not a fan, that might handle things better especially when it comes to complex types such as dates.. Ah, gotcha. That makes sense. Thanks. \nI am almost certain master behaves much in the same way; Do you have a possible fix in mind? \n\nOpenSAML has a few encoders I suspect that one might be able to better serialize attribute values? \nIf the object type is complex, expect such objects to implement proper serialization for values? Use reflection to invoke a method, much like the semantics of readObject()?\nExpect the toString() of the object to encode the value correctly?\nSomething else? . Yes. We can address the serialization issues separately of course. This PR here is in a pretty good shape; I think the new config class can be removed but otherwise LGTM.. Update: tagging an attribute value type as XSObject should let CAS take advantage of XmlMapper to serialize complex types. This conditional behavior based on a type should be helpful in letting one use toString() in cases where it makes sense and one has control over the object/pojo's body, etc.. Hi @gagarski, have you had a chance to revisit this patch again? Would you prefer if I merged this out of band? . Do you think it would make sense to add test cases covering such conditions? . Excellent stuff. All hail @tduehr.. Thank you very much for the contribution. Keep 'em coming!. Thanks very much for the pull request. This is superceded by https://github.com/apereo/cas/pull/3835. See https://github.com/apereo/cas/pull/3836 for analysis of failures.. Test failures here seem relevant:\n\norg.apereo.cas.support.pac4j.authentication.DelegatedClientFactoryTests > verifyFactoryForOidcClients FAILED\n    org.pac4j.core.exception.TechnicalException: tenant cannot be blank\n        at org.pac4j.core.util.CommonHelper.assertTrue(CommonHelper.java:109)\n        at org.pac4j.core.util.CommonHelper.assertNotBlank(CommonHelper.java:121)\n        at org.pac4j.core.util.CommonHelper.assertNotBlank(CommonHelper.java:131)\nCompare with the master branch please; there should be a relevant value for the tenant and Azure AD.\nval oidc3 = new Pac4jOidcClientProperties();\nconfigureIdentifiableClient(oidc3.getAzure());\noidc3.getAzure().setTenant(\"contoso.onmicrosoft.com\");\noidc3.getAzure().setLogoutUrl(\"https://example.logout\");\nprops.getOidc().add(oidc3);. Thank you very much for the contribution. Keep 'em coming!. My take, and I'd let others comment on this:\n\nAdds a style check to enforce the use of properties in the annotations for a test rather than a separate file.\n\n+1.\n\nAlso moves properties to interfaces and stuff where it makes sense... Results in each test file having less boilerplate code.\n\nI understand the motivation here, but I am not so sure the changes here make the situation any better. It seems more complicated, specially for new contributors, to understand how write or modify LDAP tests. I am also not certain whether adding 3-4 components and wiring them up this way, working around Java quirks, etc is easier to manage than having duplicated properties, etc specially when these settings seem to change so very rarely. So I am -0 here. Feedback from others of course would be specially helpful.. LGTM. Please port forward.. > Change the expectation that Response and Grant types will use enum names in the service entries instead of type values? (i.e IDTOKEN_TOKEN instead of 'id_token token')\nNot a good idea. The domain language must remain consistent with its configuration as much as and whenever possible. There is no such thing called IDTOKEN_TOKEN; that's an internal thing. The official value that every user should instantly recognize is id_token token. Our choice of enum use as an internal implementation detail should not have to dictate how one may configure something. (Java-wise, it's also considered bad practice more or less to rely on enum names; the error-prone-plugin will likely start issuing warnings for that sort of thing). \n\nChange CAS Management to write the enum type values into the registered service?\n\nThis.\n\nTo use the type() values we would probably need to add a valueByType() method to the enums.\n\nSounds good to me.. Thank you very much for your contribution!. This seems fairly suspicious to me. Before merging, I think we should figure out why the same issue does not exist in 6.0.x. Do you think it might be related to a Spring upgrade? If you go back to an older Spring version matching 6.0.x do you still see the error? Or even an older Boot version?. > Were you able to replicate this issue?\nYes, and I also failed to duplicate this case on 6.0.x. On master, I even tried to match all core dependency versions such as Boot, Tomcat, and Spring to see if I can find the root cause to no avail. Whatever is happening is way too deep to know. \nEither way, I think what you have here makes more sense anyway. These two blocks were extracted out into beans so one can override them conditionally, if needed. Since they are getting called by a parent bean anyway, and conditionally at that, I see no reason why they have to remain as standalone beans. So the change is fine by me :)\nHowever, I think:\n\nThe two methods should be made private.\nA matter of taste this one, but I'd even remove the methods themselves and move their body to where the call site is. Rather than:\n\nif ldap then\n    methodDoesLdap()\nend if\ndo:\nif ldap then\n   return the thing that does ldap related stuff\nend if\nSeems easier to follow specially if the method body is a one/two liner. Your call of course. \nIf you could finalize this before Monday next week, that'd be great to include this in RC2.\nOne thing that would be very good to add in the future are tests that evaluate and load the context via configuration class so stuff like this can be caught. If you're up to the task, that can surely happen after RC2. . That's perfect, thank you. Once the change is merged in, I can help and easily cherry-pick this into 6.0.x; that is if you rather not do a separate PR.. Thank you very much. This looks great. I'd like to ask you to reposition the pull request to have it point to the master branch, and then please work through the CI failures to make all checks pass. Should be very easy merge. Again, thanks for your time, as always.. PS please also remember to add test cases demonstrating the feature.. > So, I would appreciate, if this could be part of 5.3.10. Happy to provide a forward port for 6.0.x and master. Would that be possible?\nThe general policy is to add features to feature releases and keep patches as small as possible limited to the scope of a patch release. (Also note that 5.3.x is only going to be around for a few more months only); that being said, this patch is small enough and low-impact enough that we might be OK with bending that rule a bit. I'll let others comment on that possibility and see if they might be OK with it; (I suspect they would be, but it's good to call this out and make sure that decision is made in public) \nIn the meantime, yes do please provide forward ports. (You can just do one and we'll cherry-pick over, giving credit where credit is due). \nThanks again. . Looks like you have everything under control here. Please also consider porting the change over to the master branch. . Folks, are there any objections to merging this improvement into the 5.3.x branch? Please try to cast your vote before this Friday. Otherwise, we'll invoke lazy consensus and proceed. Thank you!. Thank you very much for the contribution!. > Are they really required to be final?\nNo, they are not. You can cross-check with the master branch and try to apply the same strategy. \nPS There is also some ongoing work internally to try/remove the cache from the object and move it outside to not cause issues with serialization, etc.. Thank you very much for the contribution!. If you examine CasKryoTranscoderTests, you'll find tests that attempt to handle proxy tickets, etc.\nCould you also attach the failure log output from your first commit? What is the error you'd get? . Thank you very much for the contribution!. > @mmoayyed or anyone: do you know what is wrong with my commit for travis ? \n\nI can't succeed to run the script that should run the docker-compose for a sentinel + redis context.\n\nHow are you testing this, locally? \n\nCould you provide settings that I should do to run travis on my fork before to make the PR to avoid spam/annoying stuff on the main CAS project?\n\nNo, absolutely not :) Only because, there is nothing spammy or annoying about making progress on a WIP PR. You start a PR when you start work, not when you finish it. Nobody is going to get mad at you for making progress and pushing changes (That's what email filters, etc are for). We all do the same exact thing. Don't ever worry about annoying folks with the frequency of your changes. Continue as you are doing, and I'll appease those who might have a problem with this approach. Ultimately, your test needs to pass here. Not locally, not on a fork. Here. So you might as well start here. Trust me; there is nothing annoying about progress. \nFrom the contributor guidelines of the project:\n\nShed all of your fears of making a mistake as part of your contributions to the project. Practice makes perfect and we are all here to help you as much as we can so you can ultimately become an independent contributor to the project. It\u2019s OK to make mistakes and it does take some time, effort and energy to improve the state of proposals and contributions. So do not be discouraged, keep at it and if you find anything that is unclear along the way, do not hesitate to ask questions.\n\nAlso: https://ben.straub.cc/2015/04/02/wip-pull-request/\nThe WIP Pull RequestSo you\u2019re working on a project on GitHub, and your team is using pull requests.\nThis means you\u2019re getting a notification (probably an email) every time someone\u2026\n. Btw, at the moment the repo.spring.io repo is up and down so our CI builds will continue to fail until the service is restored. Hopefully should be resolved tomorrow by the time you try again. Follow https://twitter.com/springops for more info.\nSpring Operations (@springops) | TwitterThe latest Tweets from Spring Operations (@springops). Track operations for http://t.co/W0JzLcPIaS, the official website of the Spring IO platform. In the cloud\n. At the moment the repo.spring.io repo is up and down so our CI builds will continue to fail until the service is restored. Hopefully should be resolved tomorrow by the time you try again. Follow https://twitter.com/springops for more info.\nSpring Operations (@springops) | TwitterThe latest Tweets from Spring Operations (@springops). Track operations for http://t.co/W0JzLcPIaS, the official website of the Spring IO platform. In the cloud\n. Thank you. Two questions:\n\nWouldn't you be better off by explicitly using @PostMapping instead to be super clear? I dont know what @RequestMapping does by default; It's rather unclear.\nHow does this change affect other providers such as Twitter or SAML2 IdPs? . Thank you, both. . > Does it take some time to mark it as checked?\n\nYes, you should be good for follow-up attempts.. @tduehr I assume you want to inline properties in this PR as well, right? Or is this just the checkstyle rule and cleanups will come in separately? (Either is fine btw) . Excellent, will do. \n. Shouldn't this be a \"logger.error()\"? Also, should we check to see if the logging level is enabled? \n. You dont really need the else{} clause here. \n. Can we simplify this loop such that:\n- OAuthProvider overrides equals(). Does this make sense? \n- listProviders.contains(provider) will effectively loop through and invokes the overridden equals()\n. I think in general, all debugging statements need to check for appropriate level being enabled. May prove to be minor, but there are some performance gains to benefit from. \n. Should the above constants be in the OAuthConstants interface along with the rest? \n. Why 200? Shouldn't it be 400?\n. Thanks. Do we have a doc somewhere that defines these conventions? I'd like to document these and perhaps even set up the IDE to follow appropriately. I see this: https://github.com/Jasig/cas/wiki/Contributor-Guidelines but nothing on coding styles/conventions. Any pointers? \n. Shouldn't there be another constant for \"service\" too? much like OAuthConstants.TICKET? In fact, does cas-server-core define these constants somewhere that we could use? \n. Perfect! Thanks for the update. \n. Found this:\nhttps://wiki.jasig.org/display/CAS/Code+Conventions\n. Sure. What I meant was, when the condition is met, the return statement will end the execution flow. So you don't really need the trailing else. So it would look like this:\nif (url.indexOf(\"?\") >= 0) {\n     return url + \"&\" + name + \"=\" + OAuthEncoder.encode(value);\nreturn url + \"?\" + name + \"=\" + OAuthEncoder.encode(value);\nI would also recommend to use the StringBuilder class for concatenation. \n. Sounds good.\n. That works. Thanks. \n. I thought that constants, specially those at the protocol level would be exposed by CAS core, but if not, I think having the constant in OAuthConstants is perfectly reasonable. \nMight want to take a sweep and refactor all protocol-level constants in CAS core under a separate JIRA task, if only for better tracking purposes and possible follow-up discussion among the devs. \n. I think for the most part, everything still stands, but you're right that it does need some love! I have noted this down to circle back and update it based on the feedback we receive all around from devs, etc. But for the most part, should be good. \n. Perfect. I'll assign it to myself for now. Thanks :)\n. Akh, you're right. It's not as pretty! :) How about something like this:\nStringBuilder sb = new StringBuilder(url);\nsb.append(url.indexOf(\"?\") >= 0 ? \"&\" : \"?\");\nsb.append(name).append(\"=\");\nreturn sb.append(OAuthEncoder.encode(value)).toString();\n. I cleaned up the documentation a little bit with more info on logging, etc. \n. Shouldn't this be:\nprivate final Logger logger = LoggerFactory.getLogger(getClass());\nSo that child classes get the correct logging instance? \n. Missing copyright header block. \n. Small typo: plain\n. Just for better debugging and troubleshooting purposes, can we split the logging instances into two conditions? one for the null check and one for the isEnabled() check with each having specific error messages? \n. Seems like this is the only new changes for this file. The rest seems to be IDE's formatting noise. Could you clean out just the needed change? \nIf you're using Eclipse like me, I realized that I needed to turn off its 'Save Actions' feature or restrict it to only formatted lines. \n. Since the class is not marked final, any child classes that extend it would get the ServiceAuthorizationCheck.class logger instance as opposed to the this instance.\n. Cool beans :) \n. You can allow the IDE to do this for you automatically. In Eclipse for example as part of its Save Actions preferences entry, there's a setting where it can add the final keyword to all parameters and fields where necessary. Comes in very very handy :)\n. One last question, did you consider simplifying the loop? Are providers recognized and unique by their type? \n. Perfect. Thanks for the clarification :)\n. I tend to agree with you. In addition to fixing refs, I personally find that the usage of final prevents me from somewhat being lazy and that it forces me to create new variables, instead of just being lazy to use what's already passed. For example, I used to do this:\npublic String method(String key) {\n    key = \"someValue\" + key;\n    return key;\n}\nAny way, I think this is the last remaining issue. Everything else looks great from my POV. \n. I suggest that the above keys be derived through the API and the appropriate class itself, to improve future refactoring efforts. I believe the classes are all publicly accessible. So something along the lines of:\nimport org.jasig.cas.adaptors.trusted.authentication.principal.PrincipalBearingCredentials;\n...\nthis.put(PrincipalBearingCredentials.class.getName(),...);\netc. \n. Would it make sense to inject the instance through Spring? \n. Could false be determined through the service/request, when available? \n. Should possibly remove/update these. \n. Minor detail, but I am very much in favor of @Override. Since 1.6, you should be able to [I believe] to use the annotation on interface methods.\nMaybe another candidate for code conventions? \nThe reason I find it easier is, at first glance when I looked at the method I became suspicious of the prefix parameter and that why it's there to begin with, not realizing that it may be an overridden method as part of the interface definition. \n. Just to make the compiler happy(!) and in an attempt to get the IDE to produce less warnings, I would suggest: Map<?,?> model. \n. WARN debug message would be informative here. \nAlso, I'd suggest to do the isEmpty() check before constructing the attribute object. Less GC. \n. Why not always do: value.toString()? I think the cast is effectively the same, except it's cheaper[?]. \n. You're correct. Will fix. \n. To further explain the behavior based on @leleuj 's comment:\n- The usage of DEFAULT_OPAQUE_USERNAME_ATTRIBUTE is automatically determined when username attribute is set on the service. If the value received matches DEFAULT_OPAQUE_USERNAME_ATTRIBUTE the service is automatically marked as anonymous. Therefor, the line registeredService.isAnonymousAccess() will take effect. \n- If the username attribute is set to null through code perhaps, or is set to be DEFAULT_USERNAME_ATTRIBUTE, then the principal's id is returned. The above code is incorrect in that it should really be:\n  registeredService.getUsernameAttribute.equals(RegisteredService.DEFAULT_USERNAME_ATTRIBUTE)\n- if the service is set to ignore attributes, or the username attribute exists in the allowed attributes for the service, the corresponding value will be used.\n- otherwise, principal's id is returned as the username attribute with an additional warning. \n. np. \n. Coolio. \n. Thanks :)\n. Decided to do away with DEFAULT_OPAQUE_USERNAME_ATTRIBUTE. New commit in the works. \n. I see two uses for the DEFAULT_USERNAME_ATTRIBUTE constant:\n- Having that value as part of the list of username attributes allows the service registry to better indicate the CAS behavior when no attr is selected. By including for instance (default) in the username column, I think it visually better represents the configuration of a given service as opposed to just having blank in there, which may seem that the service is not returning anything at all for its username!\n- More importantly, the constant allows you to switch over and reset the username attribute back to default. Suppose that in svc registry, a given service is configured to use someAttribute as the username. If the constant is removed, when the deployer decides at some point to remove that rule and reset the attribute back to the default, there would be no way of configuring that (as the selection of username attributes in the UI is noted by radiobuttons). So, having the default constant in there along with the rest of the available username attributes allows one to revert the setting, if needed. \n. will do. \n. Certainly. Will do. \n. Sure.\n. Will mark. \n. I think it should be part of the interface, because it defines the behavior at the contract level that default username attribute is valued as such. Lower impls and other areas of the code can then do comparisons based on this constant at the contract level as they see fit. \nThe code is still backwards compatibles for null values, such that null values while accepted are translated back to (default). This I think better indicates what the username attribute retrieval mechanism is both at the config level as well as the UI in svc registry. \n. Just to clarify, return null when the value passed is null? \nI reread the javadocs and that description is in fact incorrect. The method should never return null. Will fix. Please see my comment below on the need for the DEFAULT_USERNAME_ATTRIBUTE constant. \n. The code should never return null, as the setter does an explicit check. I dont think removing the default attribute is practical, because it allows one to revert the config back to the default by toggling a radio button, etc. The scenario is, without the default attribute, if the username attr is set to helloWorld at the svc reg level, there would be no way of resetting it back to the default unless data is directly meddled with either at the xml or db level, etc. \nAdditional UI visibility benefits are also gained from having an explicit meta attribute that explains what the default behavior is, as opposed to having just blank. \n. I could certainly do at most 4 language files for which I can vouch for quality, but the rest, it would be just me using either google or bing translate. Not sure that is of any help. \nI have actually been thinking about this issue. Here are some suggestions:\n- Ignore all other language bundles other than English. Have adopters maintain their bundle of interest based on the EN file. \n- Work on a maven-translate-plugin that automatically fills in missing language keys based on EN file, assume the quality risk. \nI have actually been working on a small little language plugin for maven that does just that based on the bing API. (Sadly, the Google API is no longer free) It has the ability to report missing keys, fill in and translate missing keys and optionally break the build if there is anything missing. \n. Good point. Will fix. \n. I didnt see any other JPA annotations on the other fields. They are most likely created and mapped all by default, save the evaulationOrder prop that defines some additional behavior (not nullable, etc). \n. Not sure I follow this line. Why is the theme name mapped to the oauth20 service name? shouldn't it be the service name as the value? \n. Should be able to do without these. For instance, declare the map with the generic types in place? \n. final? \n. True, but I think the annotation for evaluationOrder is set to rename the column to \"evaluation_order\" and to indicate that it's not nullable. The rest are left to blank and I suppose the column is created based on the attribute value directly. I believe no special rules need applying to the username attribute. It can certainly be null and I dont see any issues with the name. \nPS: In fact, while nullable=false makes sense for evaluationOrder, I am not sure why its column name should be any different. Maybe certain DBs have that as a reserved keyword, etc? \n. I think it was assumed that all comments were accounted for given the  3-4 days in between the feedback and upcoming fixes. We could certainly carry on the discussion to apply any further suggestions and fixes though. \n. If so, I think we ought to take a pass at the POM to make sure all other modules are consistent. As far as I can remember, the only module that noted \"Jasig\" was the EhCache. Almost all other modules use \"JA-SIG\". \nCould we do that as a separate commit? \n. No reason. Will fix.\n. Will fix.\n. Will fix.\n. Cross checked w/ coding conventions. Not explicitly explained, but will fix.\n. Will fix.\n. I am in favor of Integer.MINIMUM. I'll have to cross check and see how the count is accumulated on the caller side. \n. Apologies. Understood. Although, I did ask Jerome to follow up with the commit so the assumption was more on my part. Tend to move on lazy consensus :)\nActually, the issue I had was that I was overwhelmingly flogged with emails from Github but setting up a filter fixed that. Though, I also dont receive emails or notifications from Github if I wasn't part of the discussion already. This isn't so much of an issue, as I tend to frequent about Github pretty much constantly :) and tend to inject myself into discussions!\nI am happy to carry on the discussion on design recommendations and concerns. Is there anything in particular that you'd like to follow up? \n. Got it. Tnx. \n. No worries. I was think that local vars would be final, but this works too. \n. I pushed the fix for the test failure, which was an extension of CAS-999. \nIf I can tell, the design issue was whether or not we can do away with the constant that defines the default username attribute. To ease into the discussion, I'll paste and summarize my original reply to J\u00e9r\u00f4me/Scott here again: \n\nThe code should never return null (for the username attr), as the setter does an explicit check. I dont think removing the default attribute is practical, because it allows one to revert the config back to the default by toggling a radio button, etc. The scenario is, without the default attribute, if the username attr is set to helloWorld at the svc reg level, there would be no way of resetting it back to the default unless data is directly meddled with either at the xml or db level, etc. Additional UI visibility benefits are also gained from having an explicit meta attribute that explains what the default behavior is, as opposed to having just blank.\n. My bad. Read between the lines. It actually is :)\n. Reviewed the code once again. Turns out the message is part of the exception ctor that is thrown:\n\nthrow new BeanInstantiationException(this.getClass(), message);\n. Decided to move the method impls one level up to the abstract ticket registry.\n. Yup. Super it is. \n. Will apply.\n. True for the exception. I'll use String.format instead.\n. Super makes the most sense since it handles MIN as is defined by the interface def. \n. Thanks. I like it :)\n. If I may suggest: one small improvement here:\nlogger.debug(\"text : access_token={}&expires={}\", ticketGradingTicket.getId(), expires);\n...and +1\n. Ah, you're right. My bad! Didn't quite notice the line below. \n. managed by the parent pom. \n. Awesome. Will do. \n. Sure.\n. Agreed. The setter() wasn't part of the interface.  Moved it up to the interface.\n. The javascript call does immediately hide/remove it. \nJust double checked to be sure. The services.js file on page load has the following line:\n$(\"#errorsDiv\").hide();\n. This is my attempt at identifying the constant here and extracting out the column identifier. \n. Sure. \n. I am not sure how the return value would be consumed by the callback function. Gotta double check. \n. Ha ha, no problem. Appreciate the review as usual. (Although, I really do wish I could capture that into an actual constant!)\n. In my testing, it works with Firefox, Chrome and Safari. Didn't check IE, which I would think doesn't have support for it. Ugh!\nSo, the change would perhaps turn into using a jQuery plugin to do the logging, or adding if (!window.console) before the call. I prefer the latter, but will look into plugins. \n. I double checked. The exception is just a shortcut to be caught a few lines down in order to set the status code and the error description as part of the AJAX call. If you would review the finally block, there's a line that resets the status flag and the catch block captures the exception description. \nI could certainly remove all throws, and instead return the ModelAndView immediately with the appropriate flags/description but having done one, I realized that is going to result into duplicate code. I suspect the approach to throw exceptions as needs, and the catch-all at the end to build the ModelAndView object is somewhat cleaner and results in less LOC\n. I moved the check up top and not as part of the else. \nif (svc == null)\n    throw new IllegalArgumentException(\"Service id \" + id + \" cannot be found.\");\n. So my wrapper around console.log is pretty much an empty function when the console object is not available. I realized that it is in fact available in IE8 and IE9 (I don't suppose we care about older versions than that!), but it really has to be \"turned on\". \n. Actually, may have found a better way to handle ajax exceptions:\nhttp://spring-json.sourceforge.net/quick_exceptionresolver.html\n. Well, both actually. My main goals in changing the test case was to somewhat discourage shared cache manages i.e. getInstance(), force the test to build the context through the xml configuration file and of course, remove the need to create the cache programmatically. \nThe actual deployment of clearpass (based on the docs) depends on loading the context file from the classpath, and this is just an attempt to stay in line with the deployment scenario. \n. Just to clarify: many of these dependencies are managed now by the parent pom. They were needed when clearpass was maintained as separate extension, and were not removed originally when clearpass was ported to the codebase. This seemed like a good excuse to do some cleanup. \n. With the removal of shared singleton cache managers, there's no need to fork tests into a new VM every time. The cache itself would be prototyped for each test execution. \n. The manager must be properly shut down after each test. Otherwise, EhCache is not able to create a new one for the incoming test by the same name. \n. Kind of, but also there's the corresponding CSS style which will also attempt to hide the div when the browser renders the event. \nAs for screen readers and to the extent that I am familiar with them, I don't think this is going to work well, particularly because readers don't seem to like dynamic changes to the page. Navigating to an actual error page would possibly trigger the reader event to detect the change and read the screen aloud, but dynamic pages are probably ignored. of course, I am basing this analysis based on memory and prior experience. Could be totally wrong! :)\n. True. The problem with langs is or at least the problem I experienced was that, I wanted to be able to only detect, so that I could throw back the error. Lang only has support for parsing correct input, or taking the default. \nTaking the default won't work in this case, because there's a possibility that the value provided could be the same thing as the default and I didn't want to, on behalf of the client, assume an evaluation order which is something they ought to be able to configure responsibly. \n. Yes it does, but the cool thing about ajax call is, there's a mechanism for translating exceptions into status codes for bad input. The translators are defined at https://github.com/Jasig/cas/pull/108/files#diff-10 and this is the preferred and recommended method by the library, so that exception are thrown with ease and translated back to the proper call.\nTakes the ajax out of the method in a way! :)\n. You're right. Should probably switch to a throw clause here. see my comment up above plz on how exceptions are translated to error codes for bad input. \n. To summarize, the advantage with a detect-only method I find is that I no longer have to assume. The code should expect a valid id to come in for this case and I dont really have a default value for it anyway. Which service should I default into, in case the client didn't provide a valid service id? That bit is expected, I suppose, hence the original check.\nWith evaluation orders, as described above, it's a bit different because I can probably assume a INTEGER.MAX_VALUE or something alike in case invalid input comes in, but I'd rather the client is notified to take care of bad input first, specially an attribute that determines, well, the evaluation order of services. \nHope this makes sense. \n. Seems like all this should probably go into the memcached integration module. You'd avoid duplicate dependencies and seems to be a better fit. \n. Formatting is off here, it seems\n. Formatting is off. \n. The else clauses here are redundant. \n. You're missing the final keyboard in a number if spots. \n. Formatting seems to be off. \n. Does this mean that if a developer does not have memcachd running on 'localhost:11211', then the build is going to fail? \n. Also, the test cases seem to be duplicates of the clearpass tests. Can we refactor and extend the existing clearpass tests, and only override the map construction? \n. You should be able to override size() and yet, leave the impl body blank. \n. You're right. That's unfortunate. Wouldn't suggest cas-server-core. You would either have to copy the code as is, which I don't favor that much, (duplicate code, ugh!) or evaluate the current memcache integration module to explore refactoring options. I suspect that there are similar tests there that effectively try to do what you're doing here with the clearpass memcache impl. There might be an opportunity to identify reusable components from the existing tests. \n. The error handler configured to manipulate the response by default uses status code 311. I should add that this appears to be configurable. \nCode: http://grepcode.com/file/repo1.maven.org/maven2/net.sf.spring-json/spring-json/1.3.1/org/springframework/web/servlet/view/json/error/HttpStatusError.java#HttpStatusError\nAlso, buried in the documentation:\nhttp://spring-json.sourceforge.net/errorhandling.html\nSection #3: JsonErrorHandlers\n. Gotcha. Thanks for the note. Guess I totally skipped over the isMemcachedListening(); line. \n. I removed the line here that manually set the response status code: https://github.com/mmoayyed/cas/commit/0d6bba680b0bc1747216a88dff514ace72ebae5f\n. Should be MemcachedBaseTests and probably abstract. \n. Should be MEMCACHED_OPERATION_NOT_SUPPORTED\n. You should probably extend AbstractMap\n. Your implementation should adhere to the principals of the interface. Callers probably would expect a null, not an exception based on the interface definition. Same goes for the other override methods. \n. The else clauses here are redundant. You could simplify the block with something like:\nreturn value == null || value.equals(nullPlaceHolder) ? null : value;\n...or better yet, use this instead: http://commons.apache.org/lang/api-2.6/org/apache/commons/lang/ObjectUtils.html#defaultIfNull(java.lang.Object, java.lang.Object)\n. Why is this constant required? If you don't neither the key nor the entry in the map to be null, you should probably extend HashTable instead. \n. Thanks, I understand. Could we perhaps extend HashTable to get around this issue?\n. Good point on primitives. I think this can be greatly simplified if you either extend AbstractMap or HashTable, the latter of which I think takes care of the null entry/keys as well. You'd only override what you actually need and can provide. \n. By the way, why do we need this class anyway? Couldn't we just use net.spy.memcached.CacheMap itself? it's a map and it should handle most of everything provided by this already? So, in the Spring configuration, one would simply inject an instance of net.spy.memcached.CacheMap. Let that map instance define what is supported and what is not. \nMake sense? \nJust to clarify, implementing a Map for the EhCache module was needed because as I recall, EhCache does not provide a native map implementation. MemCached apparently does, so it'd be more efficient and less effort to use that directly and not provide a wrapper around it, unless there's good reason to do so. \n. Clearpass should not ever allow nulls to enter the map when it actually is in function. The unit test you refer to is probably misleading, and in likelihood should be modified to fix this behavior. While it shows that nulls are handled by the map instance in one way or another, in reality they never would be as proper values are intercepted by the meta-data populator. Clearpass would indicate that a password can't be retrieved, only by doing a lookup and failing to find the password. \nI certainly appreciate your patience and effort. Glad the native injection worked out. Would you be willing to document your approach on the wiki?\n. Are versions provided by the parent pom for these two plugins? I'd hate to see dumb warnings on the build output, though they probably have no effect on the build itself whatsoever. \n. Minor issue: this.loginUrl\n. Do we ever expect these params to be null? If yes, wouldn't it be more suitable to throw exceptions in advance? IllegalArgumentException, etc? \n. this.configuration\n. this.configuration\n. Same issue with this\n. Not better, but I found the try/catch blocks to be slightly messier. Here it's check/throw without any extra noise. \nThen again, having rewvied code, I think the parse has to be done anyways, so I'll remove the check and switch to the try/catch block instead.\n. Looking at status codes, I think 412 is better candidate perhaps, which indicates that a precondition has failed. \n. Good point. Let me try and see if the native approach works. It should, really. There's no hard wiring to a particular exception type. If it does, it'd be so much cleaner. I'll post back in a little while. Thanks!\n. Fantastic. I'll go ahead and close this issue. will also update the JIRA. \n. Minor adjustment. Shouldn't this be return test != null?\nI realize return false; is still required which is annoying of Java, but this would reduce 3 lines down to 1. \n. Should this be 2.1.0? \nRef: http://maven.restlet.org/org/restlet/jee/org.restlet/\n. Would suggest the file name to be renamed to cas-management or something similar that indicates the file has something to do with CAS. \n. Not sure if this file is necessary at all. Does git not inherit from the parent module? I'd suggest new entries be added to cas-server. \n. I think it's safe to keep only keys that begin with management and leave out the rest. \n. loggedOut.html? I am not sure if this is used at all. Is it? \n. Similar comment as above. cas-management, etc? \n. Never mind this. \n. Sounds good.\n. Yes. It provides a MetadataPopulator implementation that captures the users credentials and keeps in the Map instance that is backed and persisted by ehcache. \n. This is such that the eclipse maven plugin would stop bugging the developer about the goal/phase not being part of the default lifecycle. Not needed per se, and has no effect on the config, but one less warning after all which is good for eclipse users.\n. Good point. Do you have a recommendation for a class that might be a good spot to host these?\n. How about https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/authentication/principal/WebApplicationService.java?\n. Sounds good. I'll post a message to @cas-dev to jump start the discussion on this issue. \n. Perfectly agreed. I do hate the noise as well. In the next release of the plugin, I'll attempt to provide a goal that is part of the default lifecycle and then we can remove the extra bits here. Noted this down to get to it sooner than later\n. For this one, the protocol doc actually refers to a url parameter! I am assuming the doc needs to be updated to point to service now.\n. There is a bug in the current version of the plugin that does not allow running single tests. \n@leleuj, would you mind testing this version and see it causes any issues? All tests run on mine, but I recall that we had to revert back to 2.12 for a test failure you had encountered. \n. This is just weird. Could you highlight which test it is that fails and why? (There's a bug with 2.12 that it wont allow running individual tests so I'd rather we move away from that) \n. I will alter the port shortly. (I am in the middle of a changeset and cant quite commit yet) Will post an update in a little bit.\n. We could allow themes, but if it's just a matter of styling and decorations, I think simply modifying the css and js files for the mgmt webapp's overlay would suffice. Since the app  would seem to be just internal to the deployer's environment and not to the actual users, I dont suppose allowing theme options would be that beneficial. \n. Should we also append the name parameter, if value is null? \n. Minor rename: based on the conventions the log object should be called log. \n. Not sure I understand the need for this method throughout the code. How may this be used? \n. For the message bundles, I think you should also set the property to not fallback to system locale, much like the other pull request.\n. Shouldn't this be part of the parent module's pom? \n. Curious;  I wonder if the removed 403 mapping is related to the line above? Isn't it the case that if the servlet response returns 403-forbidden, the container would somehow redirect to the 403 view? \nupdate: never mind. I see the error code 403 defined below with its mapping. \n. I am not sure this is correct. the services webapp does have its own top.jsp, right? It shouldn't reference the default UI's top.jsp? \n. Just an FYI. I am going to work on the plugin so it follows the default lifeycle. That should reduce the m2e noise we have put in. \n. Looking at the Spring docs, they dont mention when the property was added. It should be available with our current version of Spring. The upgrade to 3.1.3 was just added bonus. \n. Good point. Done. \n. Good idea. Will do. \n. Will do. \n. Sure.\n. Are you referring to the way conversions are done? Sure we do use JodaTime. The converters are just an abstract extensible way of defining how an ldap date may be translated over to a JodaTime DateTime instance. From AD specially, there's something additional logic is involved before the DateTime instead may be constructed. \nThough this changeset provides 3 implementations, I imagine based on adopters' policies there will be more custom ones. So extending the AbstractLdapDateConverter would allow one to convert an ldap date, perform additional logic and subtractions, etc before the final JodaTime instance is delivered. \n. One small note: in a comment block would you mind explaining the change you have made so it's easier for adopters to understand? \n. Sure. I'll add the reference so Sonatype too. The link to the zip file I provided is the exact clone of the current codebase in a zip ball. In other words, it'd be exactly as if you cloned the repo through git clone. \n. True. My plan is to use the maven github plugin in a separate pull to publish javadocs in a separate branch that would finally be available at the link above. This is somewhat of a premature change assuming the team's OK with having Javadocs on Github as well, but I think it's modest improvement and it's a good it seems to keep code and javadocs in the same spot and it's easier to find them. \nAs an example, we have done so with the cas-addons project and it has turned out quite well: http://unicon.github.com/cas-addons/apidocs/index.html\n. Did try that, but when I attempt to generate one using Add generated serial version ID (AspectJ), Eclipse produces the 1L for me. \n. See my note above please.\n. It used to be {@link org.jasig.cas.support.oauth.OAuthConstants.THEME}. Now it's {@link org.jasig.cas.support.oauth.OAuthConstants#THEME}.\nReplaced the dot with the hash tag, so it becomes a javadoc link. \n. Ah, gotcha. I definitely would have liked it to be much simpler than what it is now, but as much as I have found, it seems like there needs to be a little bit of conversion between AD's epoch's and JodaTime's (which is Java's really) before we can construct the right instance.\nOnce the code has the correct timestamp in long, it is then able to create the DateTime. That long value is based on Java's epoch which is accepted by JodaTime. If the library had a native way of calculating this all, it would have been great!\n. You're right. I did hint at it a few times in various contexts. I assume most devs would be OK with it as well, and I'll take upon myself to do this once this is in.\n. I'll double check. This is possibly a fluke. \n. Ah. I know why. JpaDaoSupport is also deprecated. I'll reverse the changes, and then do a separate pull for that one. \n. These should probably be in the appropriate message bundles. \n. The title and the copyright should both go into message bundles. \n. The type really is used not only to explain the nature of the error in plain text, but also acts as an identifier that would help with the login flow. For instance, in this implementation, the type is eventually mapped to Spring webflow events such that the \"passwordExpired\" error type will direct the flow to the password expiration state, etc. \nPlus, it also proposes the advantage that adopters can extend the class and using the same mechanism, create additional new types that could then be mapped to the flow, without a somewhat of an ugly hack. I'd like to leave the option of having an extensible type open.\nI realize an enum could possibly do the same thing by wrapping the id around itself with a string field but that would limit the extension of LPPE. Not sure what your thought is on this issue. While LPPE supports a number of scenarios OOTB, leaving extension points open for new use cases seems appropriate. \nWhat do you think?\n. Sure. Snapshots though available through sonatype could also be generated locally. I believe our CI could automatically generate and push the artifacts here as @battags pointed out:\nhttp://developer.jasig.org/projects/cas/cas-server/cas-server/index.html\nNot sure exactly how that's done though. \n. Sadly, based on maven docs in a multi-module project, everything can be inherited from the parent site automatically, except the menus. You'd need to explicit declare that a child module need to inherit the parent menus through the inherit=top setting.\nRef: http://maven.apache.org/plugins/maven-site-plugin/examples/multimodule.html\n. The maven-site-plugin is pulled automatically by maven as part of the default lifecycle and should available in the parent pom. We are not customizing any of the default params, so not overriding anything here. \nI was hoping to able to create the project site on github pages which would have been available at jasig.github.com/cas. Turns out, that's not possible for two reasons:\n1. The github version of the maven-site-plugin has very poor support for multi module projects and does not support a staging site (required for relative submodule links to work on the site, etc)\n2. the github api only allows 5000 API calls for authenticated requests, which is not enough to push CAS site artifacts over.\nSo I decided to do away with it and simply just polish up the site a bit more and improve the doc. \n. Sure. I'll account for this in the next broken pull. \n. Good point. I switched over. \n. Nowhere in code calls getTickets() AFA I can tell. The ticket registry impl with EhCache does not require/have a cleaner. The class itself is marked as final so points of extensibility by deployers are also restricted. So, in that regard, no effects on the cache other that actual and explicit calls by the client, such as the SSO Sessions report below. \nAs far as performance,  this is what EhCache says:\n\nThe time taken is O(n), where n is the number of elements in the cache. On a 1.8Ghz P4, the time taken is approximately 200ms per 1000 entries. This method is not synchronized, because it relies on a non-live list returned from getKeys() , which is synchronised, and which takes 8ms per 1000 entries. This way cache liveness is preserved, even if this method is very slow to return.\n\nThe stats may be old though. I haven't encountered any machines with a 1.8GHz CPU in a long time :) Nevertheless, we might want to switch to getKeys() or getKeysNoDuplicateCheck().\nP.S: getKeysWithExpiryCheck is already in use by sessionCount or serviceTicketCount\n. In fact, based on TicketRegistry's docs:\n\n@return collection of tickets currently stored in the registry. Tickets might or might not be valid i.e. expired.\n\nSo getKeysNoDuplicateCheck() might be the better option, if needed really.  We could also expose an option that allows the deployer to determine this behavior. \n. As in the text .defaultText(\"The exception code could not be located for \" + defaultCode) ?\nThat's fine, but that's mostly for safekeeping and covering all the bases, just in case the code mapped to\nBadCredentialsAuthenticationException.CODE goes away for whatever reason, this text allows CAS to not crash. As things stand, the user will never ever see this message. \nCome to think of it, maybe it's better to crash early?\nAs in, if for some reason the code mapped to BadCredentialsAuthenticationException.CODE is removed, it might be better to remove the default text above and simply allow CAS to crash or forcibly throw an exception back to indicate the actual issue. \nI am open to both approaches really. Overall and now that I review, I think crashing early might be the better option of all since the exception that is thrown would say the exact same text anyway. \n. Good point. Will do. \n. The monitoring tools may call it, but they are not a scheduled task, no auto calls. With you on cleaner, but that would be misconfiguration as you mentioned. Wouldn't say that classifies as a performance fault. \nI understand your concerns around the performance of the calls. However, I see a number of justifications here:\n- The code is only rarely called, and only by demand in CAS by default. If this is still a point of concern, I could add an option, much like the changes for TicketRegistryState to say, whether or not this behavior is supported, or which strategy is used to return tickets. \n  - None\n  - DuplicatesWithNoExpiryCheck\n  - DuplicatesWithExpiryCheck\n  - etc\n- If there's a need to explicitly extend this behavior such that a 3rd party extension attempts to do something with getTickets() they'd obviously need this to work correctly. (If the feature wasn't supported, they'd be doing something similar, I imagine). At which point, they'll need to consider that if they absolutely want a list of tickets, there may or may not be performance considerations.\n. Minor edits to Javadoc tags. \n. Interface comments would be specially helpful to understand the component's purpose. \n. Shouldn't this be: this.getClass()? \n. Could we require the defaultMessage here? \n. Shouldn't the 2nd argument to Message be a default error msg? or we could reverse the default code maybe? \n. Just for clarity's sake, shouldn't we rename Message to be more CAS specific here? other than by noting the full package name? \n. Can the HandlerResult be extended to return the ldap query's SearchResult? I am thinking a few steps ahead that if the abstract ldap handler is set to retrieve attributes, it would be useful for subclasses to have access to those attributes via SearchResult\n. Please see my comment above on the extension of HandlerResult to be able to return the ldap query SearchResult. \n. I think this should just be throw e, since the parent handles the call anyway. Potentially then, we could mark handleLdapError private in the parent class. \n. I am unclear on where these exceptions are actually thrown. Could you point to the right spot please? I cant find the throw clause. \nAlso, on a related note, how can an adopter customize the handling of states? If I want to not handle InvalidLoginTimeException and want that to be treated as a normal error, how can I easily customize this? \nI think it might be better if we inject these classes via the configuration bean. The message would then be mapped internally for each exception class, and allows one to serve new extension points via the config for new exceptions. I think we should take away from CAS the responsibility of knowing and handling these exceptions beforehand, and let the config extend that for us. \n. I think some of the logic in this class and AuthenticationErrorMessageResolver can be shared via an abstract parent. Structurally, they seem very similar. The construction and declaration of MESSAGE_MAP and resolve are potentially the same with minor variances. \n. Per conventions, this should just simply be log. \n. I suppose no this for the log object also would be applicable, per conventions. \n. Much like my other comment above, I believe this class and AuthenticationViaFormAction would benefit from having the same parent, that at a minimum, would encapsulate the logic of error resolvers and and populating the context. \n. I am not able to find where in code this collection is used. Could you clarify please? \nTo restate my comment above, I believe this class could potentially benefit from a collection of \"metadata/attributes/props\" that might be gathered  and passed on by the actual handler. In case of ldap, this would be for instance attributes that are set to be retrieved, which could be used by the subclasses to further examine the account state. \n. We only had a copy of it in the ehcache module, which was recently removed. The original one in core still exists. \n. X509CertificateCredentialsToSubjectPrinciplalResolver needs to be a proper javadoc link \n. Remove @version. Optionally, you may want to either remove @since or give it an appropriate value. \n. You should encapsulate all your case clauses into a common abstraction, based on the code given. \n. Should simply just be log. \n. Sure. Will fix. For some reason my dev environment isn't replacing tabs with spaces!\n. I understand, but should the code not be available for whatever reason, the error that is thrown back...shouldn't it be a descriptive text? My understanding is that it would now simply throw back the code itself, which is not that meaningful. \n. Thanks for the clarification. This does make sense. I was just debating which it'd be easier; to tweak the authentication handler to customize which exceptions should actually be thrown and thus mapped, or let it throw everything and allow the adopter to modify the state map. Nonetheless, for the time being it might be that modifying the handler would be the better choice in a way that it is the component most adopters are concerned with and making adjustments to the handler is pretty much a norm. Tweaking the handler also works nicely for a custom and special LPPE AuthN handler in general that I had previously intended to design. \nThinking out loud, the other concern here is that extending the state map would be somewhat difficult, should we come up with new exceptions to catch as part of LPPE but that isn't a very probable case in the near future. \n. I'd love a checkstyle ruleset! I'll see if I can polish one up and share via the coding conventions page. \n. I see what you mean. I believe you should be able to use the Event return type for both. webflow accepts and can parse both, I believe.\nWhen I was evaluating the LPPE bits, I had also used codes for webflow transitions. Agreed that it's not the best approach perhaps, but maybe so long as the transitions are abstracted into a common component, that would reduce clutter. I imagine that could also present us with some nice extensible points whereby custom extensions of AuthenticationViaFormAction and that of its parents would even be able to redirect the flow in overriding those message codes/states for edge cases. \n. Sounds good. Tnx. \n. Question: your catch blocks seem to be identical. Wouldn't it be possible to catch Exception, log and rethrow? \nI am assuming by \"documented behavior\" you were referring to the class Javadocs. they only state that that if the exception is thrown by a handler, the process is aborted and the exception throws. It's mum on the type of exception thrown, which makes me think ANY would be appropriate to catch, hence Exception itself. Does that make sense? \n. How about we wrap all exceptions and rethrow? Something like: \ntry {\n    ...\n} catch (Exception e) {\n    logAuthenticationHandlerError(handlerName, credentials, e);\n    throw new AuthenticationException(e);\n}\nWould this cause a bug for the caller? I presume not, since they're catching AuthenticationException and the wrap would sufficiently initialize the new exception object to the full state of the thrown e? \nLOC aside, your approach is perfectly fine. I am just concerned that on the first look it's not exactly obvious why the two catch blocks...or maybe it's just me :)\n. This is irrelevant to this PR. I just grabbed the opportunity to do a minor cleanup as I was tracing the code :)\n. I adjusted this in the 2nd pull. \n. No opinions here, but aside from creating two authentication objects, I take it that the idea is that we are not using a different authentication type, the thing that changes is the principal and the way attributes are handled. authToUse is always an instance of MutableAuthentication, so I dont see an immediate benefit of clearing that out unless we had different authN types/classes. \n. Shoot! I'll fix it in the next commit. \n. switched to simply say return null which is more appropriate. \n. I think we should remove the const and simply have the field init with the value exception.message. \n. The m2eclipse plugin has a bug where if you specify its version at the parent pom under the plugin management, it will crash with an NPE, and I think this mostly served to compress editor noise. We should really fix the maven-translate-plugin bit to comply with the default lifecycle of the build. I'll take that up in little bit :)\n. Seems to work with Chrome and Firefox. Research indicates that these header/value combo is sent and supported by all browsers that support ajax requests. \n. Will do. \n. Sure and we'll have cas-management.host and cas-host to accommodate that and I believe that tends to be more of a special use case. The change here is to only simplify the property-value config. For a simple default deployment, we are assuming the cas-management-host is the same as cas-host and it mostly serves here to simply dev/testing. Undoubtedly, this prop file would have to be modified via an overlay method, etc. \n. The context path seems to be available at cas-management. Pulling up ${cas-management.host}/management in the browser shows up with a 404. \n. Looked up the javadoc for getHeader to confirm:\nhttp://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getHeader(java.lang.String)\nThe header name is surely case insensitive. The value however seems to always be sent as XMLHttpRequest\n. Certainly. I will run a test with IE9 and will report back shortly. \n. Changeset works just fine with IE. \n. No. I am deploying the webapp manually on my own from src. \nMy cas-management properties file is as such:\ncas.host=https://mmoayyed-1933.unicon.net:8443\n...\ncas-management.host=${cas.host}\ncas-management.prefix=${cas-management.host}/cas-management\nThis works perfectly fine when I attempt to navigate to https://mmoayyed-1933.unicon.net:8443/cas-management\nIf I switch to:\ncas.host=https://mmoayyed-1933.unicon.net:8443\n...\ncas-management.host=${cas.host}\ncas-management.prefix=${cas-management.host}/management\nNavigating to https://mmoayyed-1933.unicon.net:8443/cas-management shows up with a 404. \nThe context path by which the webapp is deployed by default is at cas-management. The reason it works in your demo is because you have forcibly made it available at management and that's perfectly fine for a custom setting, but we should still respect the defaults. An overlay method such as yours could of course be perfectly customized to make the context path be available at anything. \n. P.S: Of course, if you do prefer the default build/deployment to be available at /management, I propose that we change the pom to reflect this via:\n<warName>management</warName>\n. Apologies if there already has been discussion around this bit. The question I have here is, could we write a small abstraction around the component that sends the logout request, so that SamlDateUtils may also be moved over to the new module?\nSomething like LogoutRequestBuilder that is in the saml module implemented by SamlLogoutRequestBuilder? or maybe an entire new interface that exposes a logout method that is then implemented by the AbstractWebApplicationService? \n. You're right, and it probably doesn't matter for an actual deployment. My idea was more around supporting the default settings during development. Such that if you simply do a mvn clean package the WAR that is built and its context will be available cas-management which would then match the config. Of course as you noted, the settings could be tweaked either way for an actual deployment.\nSorry for the confusion. \n. Thanks for the explanation. \n. Filters in the chain are independent of one another. This property applies to the case where you want the filter to, independant of any others, allow for ignoring the attribute release policy if the service is set to ignore. The RegisteredServiceDefaultAttributeFilter may not have been configured as part of the chain so we cant rely on it having done this already. \n. Although this makes me wonder where all filters should automatically extend the RegisteredServiceDefaultAttributeFilter? \n. My understanding is that complex attributes, those that contain a list of attributes are simply returned a Lists? I'll verify this with person directory, but I believe that's how it's done. Will report back. \n. Done. \n. Never mind, I think I understand what you meant. I'll certainly account for Array and Map as well. Good point. \n. Thinking about this more, I think this level of flexibility is not perhaps needed. I'll remove the setting. \n. That's certainly true, but there does exist a default filter configured with previous behavior. If you would review the file RegisteredServiceDefaultAttributeFilter, that's where the default behavior is encapsulated which is effectively and exactly what happens now. The spring configuration then registers that filter into the chain and that configuration is also provided in the deployerConfigContext.xml file. \n. That's true, but it's not any different from the current behavior and/or code structure. Before this pull, the filtering process existed in CASImpl. This pull simply takes that bit of code and places it elsewhere such that it can be more easily augmented. The filtering process and the execution of the chain still exists in CASImpl. Much like now where the services management tool does not have the responsibility of filtering attributes.\nIf I understand correctly, if you're proposing that the filtering process should also be moved into the services management tool, it might be better captured in a separate JIRA. That request appears to be more complicated than simply providing abstractions around the attribute filtering process. \n. Not sure I follow. Folks are not required to configure anything. If this change is accepted for instance for a CAS4 release, the proper overlay structure would have everything an adopter would need to get started. There's nothing missing in the config provided in this pull that would then be required of the adopter to do, other than making sure the overlay is in sync with the version used. Given the release strategy, I suppose that double checking an overlay config to that extent would be in order. \nIsn't that true? \n. I understand. Thanks for the explanation. The fact that the mapping and logic is outside the tool may be seen as inconsistent, but I think that level of flexibility might be a good thing. no? The point of this pull is to be able to provide dynamic filters through code if need be. Tying this back to the management tool might actually be possible, but it would indeed not only be difficult but also could be very limiting in what can be done. \nDo you have suggestions on how this bit might be improved? \n. Absolutely, but wouldn't that be anyone behind a CAS4 release? Not preserving backwards compatibility to that extent would be in order for a major release? This seems to me to be consistent with our release strategy. Tons of other other stuff may be changed for a major release, and I imagine this is no different. Right? \n. Here's an idea: what if we expose a filter for every registered service that exists in the management tool? That would take care of the mapping issue where filters would then directly be linked with a registered service.\nThen, each filter would also be freed up to do anything it wants based on and specific to the service it is registered for, dynamically.\nHow does that sound? \n. Let me a post a summary of our discussion over to cas-dev. It seems like this needs to be thought through more thoroughly with the entire team.\n. Just realized that this no longer has to extend the default. Will update. \n. The cast here would be have to be removed later. See https://github.com/Jasig/cas/pull/211\n. Allowed for allowStaticMemberImports\n. Noted.\n. I will comment it out. Brief survey of the reported errors on this one shows that the majority aren't as \"magical\" as the plugin seems to think :)\n. Good idea on concatenation. Will add a separate rule for that as well. \nI'll keep the log.isXEnabled rule for now, and we can certainly remove it after the cleanup. \n. I aligned the parameters for this one. This is broken down on a second line to address the 120-character line limit in advance. \n. This is broken down on a second line to address the 120-character line limit in advance.\n. created a new id\n. Sure. Updated the pull.\n-Misagh\nFrom: LELEU J\u00e9r\u00f4me [mailto:notifications@github.com]\nSent: Sunday, March 17, 2013 1:46 AM\nTo: Jasig/cas\nCc: Misagh Moayyed\nSubject: Re: [cas] CAS-1265: Improve log messages of CASImpl (#210)\nIn \ncas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java:\n\n@@ -217,7 +216,9 @@ public String grantServiceTicket(final String \nticketGrantingTicketId, final Serv\n         final List authns = \nticketGrantingTicket.getChainedAuthentications();\n         if(authns.size() > 1) {\n             if (!registeredService.isAllowedToProxy()) {\n-                final String message = String.format(\"ServiceManagement: \n  Service Attempted to Proxy, but is not allowed. Service: [%s] | Registered \n  Service: [%s]\", service.getId(), registeredService.toString());\n-                final String message = String.format(\"ServiceManagement: \n  Service [%s] (with registered service \" +\n\nI understand, but could the line be split another way like this :\nfinal String message = String.\nformat(\"ServiceManagement: Service Attempted to Proxy, but is not allowed. \nService: [%s] | Registered Service: [%s]\",\nservice.getId(), registeredService.toString()); ?\n\u2014\nReply to this email directly or view it on GitHub \nhttps://github.com/Jasig/cas/pull/210/files#r3405071 . \nhttps://github.com/notifications/beacon/xIh4VQSLXYRoprDgzIcjM3ViHa8ww2gENdPt93LRz1dvRkjeaqEc5IAImMv_W-rE.gif\n. It is a checkstyle rule. It wants the first sentence in the Javadoc to end with a period and assumes that to be a logical sentence. \n. Good question! I have to double check and report back. I don't believe it's part of the default ruleset and it may be difficult to actually devise a rule based on simple and only regex patterns. I'll report back shortly. \n. The jasig notice plugin has a goal to auto-generate missing entries. I guess it didn't want the upper E. I see a number of other entries in the file with lower-case letters, but I'll check on this to see how the pugin makes a determination.\n. Unfortunately, there are no standard checks for groups. There's only one for imports. Seems like this would be the rule that we might have to observe manually. \n. This is really the part that matters!\n. Changed the userid to be all lowercase, even through it is still case sensitive given the way AcceptUsersAuthenticationHandler works. \nAbout the chosen password, there a little bit of trivia behind it :), but we can certainly change it to be more CAS-appropriate if needed. \n. I suppose this should be scoped to test? \n. Why this? Which warnings are you trying to avoid? \n. You can safely remove the else clause here. \n. When you mention that the swf is stopped here, what happens next? \n. Checkstyle complained that since the class was marked as final, this one was redundant!\n. Ah, right :) Missed that. Will do. \n. Sure thing. At times it's pretty tempting but I'll try to do better. \n. This is an invalid and incorrect message here. There's no enabled property! Took the chance to fix it here.\n. Making sure that if the password policy isn't setup and no value is found for the configured date attribute, all checks would then be ignored. \n. Minor fix here, removed the space to make the IDE happy! \n. This is really the import spot where the redirect timeout is passed to the view. \n. This is the view, actually consuming the value. \n. Certainly open to a more global refactoring of LPPE. In fact, I believe with the ldaptive changes that @serac ac is working on, some of that will be taken care of and will be noted. \nAs for this particular change, we could halt the flow and throw the exception but I believe the desired use case here is such that if an account isn't setup with password policy rules, the flow should resume normally as if the account was setup correctly and all checks passed. This happens for instance, when a new ldap domain is brought into the authentication settings and say, its specifically for admin/staff/etc accounts that may never become a part of the password policy sphere. I realize it's weird, but it does happen :)\n. Nonetheless, I just realized that perhaps we should at least log the userid for whom the policy could not be established. That would be more clear in terms of future audits and maintenance. \n. Even if they're not final? Checkstyle wants them to be all in lowercase. I was thinking that the codebase usually just takes basic constants to be in upper case where is also what checkstyle recommends. \n. Checkstyle generally isn't fond of param names matching field names. (which I think is reasonable, specially if you're not careful about using this on the LHS! :) )\n. Plz see my comment above. \n. Will do.\n. 120 which was somewhat implicitly followed before the checkstyle rules came in. \n. This is addressed with the use of Formatter\n. Ah, sorry. I have missed the fact that static variables in the code base are uppercased. Will add this to the conventions, checkstyle and will update the conventions page. The change here of course will be reversed. \n. Will reverse. \n. Will reverse. \n. Will do. \n. Will do. \n. Will do. \n. Good point. I'd assumed that we are, since the annotations are widely used but it doesn't look like we are using validators in anyway. I'll put the change in. \n. Well, I was specifically looking for the following elements:\nxml\n<context:component-scan base-package=\"org.jasig.cas\" />\n<context:annotation-config/>  \n<mvc:annotation-driven />\nDont see them anywhere. These should also help with annotations in general anyway, @AutoWire, @PostConstruct, etc. \n. Cool! I skipped over than too quickly. We should be good then. I'll push the up the rest. \n. How about we sort of take the average and use 140? \n. Sure, I understand. Let me experiment a little bit to see if increasing the lime limit a little bit makes things easier on the wraps. 140 should take care of longer classes names like in your example and seems like a reasonable mid-line in between the comfortable and the painful :)\n. I am going to merge this one in, and will open up a new thread on CS rules and line limits. Need to experiment with 140 a little bit throughout the build. \n. I think you shouldn't set the flag here. The flag should be set only if the logout message was sent to the endpoint successfully. \n. I am not sure I fully agree with the return type here or the description really. If the method was only dealing with front channel SLO, this made perfect sense but now it's as if it's only returning partial data that only has to with a portion of the method behavior. Not sure if that's ideal. \n. You should do a null check here, and/or isEnabled, etc I believe. The service may have been altered with service registry implementations that can auto reload and pick up changes externally. \n. You should potentially in a finally block, use deflater.end() to close open pointers. \n. Could we perhaps use an existing Pair class, if the class is just to be used as a container? (I think one is used somewhere in the code) Maybe even a Map?\n. Slightly uncomfortable with the method name here. setExpired kind of implies that a value is expected as a parameter to note whether or not the ticket should be expired. Seems like you're implicitly implying that the ticket is going to be marked as expired, so I'd suggest something along those lines. \n. Missing final here.\n. Another missing final here on the registeredService\n. Also unsure of this call here. Are we implicitly assuming that logout requests have been sent and successful for a back-channel call? what about front-channel requests that aren't already sent?\nOr are we to clear services regardless? \n. Really wish we could avoid a cast to a concrete class here. I'm thinking something like:\n1. Declare an interface LogoutableService or similar that defines the isLoggedOutYet method.\n2. Have AbstractWebAppService implement that\n3. Change the cast here to LogoutableService here instead. \n. Would suggest using Formatter instead. \n. final for service and ticketId. \n. Some other missing final elements here, worthy to note: frontServices, ticketedService, etc.\n. This should in fact never be null right? I'd suggest an assertion error instead on startup to ensure this. \n. Gotcha. I do see that they're indeed used, but I wouldn't be totally opposed to redefining the same method signatures for the id and original url in the new interface (i.e. SingleLogoutService, etc) We are kind of doing the same thing with Ticket and TicketState interfaces anyway, so it would be somewhat consistent with the current practice. \nIdeally, I'd really want to do away with duplicate code but it seems like sometimes and for the time being, it would make sense. \nWhat do you think? \n. I do agree with @serac. Makes sense to me that if the logout functionality has failed (as in not sent successfully, to be precise) for whatever reason, we'd still want the ticket gone. \n. One other thing that I just noticed on this line:\nlog.debug(\"Ticket found. Performing back channel logout and then deleting.\");\nThis is slightly misleading, because it's making an assumption that logout calls are to be back-channeled while the implementation lets the service decide. \n. Good point. Careless editing I presume :) Will fix. \n. Great. Lets move the method upwards then. \n. Just my general pondering, that I was thinking it would perhaps be preferable if the method was to return all ticketed services it processed as opposed to just those that would be processed by the front channel calls, though I realize the drawbacks of that approach as well. I'll think about this a bit more. Thanks for the explanations. \n. Understood. Thanks for the note. \n. Another observation here: I like the fact that the class isn't marked as final. However, I do see that most methods here are actually final which would potentially cause trouble for extensions. I'd vote that we allow the logOutOfService method to be extensible. \n. See my comment above please. Wondering if this method should in fact be final. If not, would prefer if the actual class was marked as final instead. \n...and since it's only doing back channel calls, I am wondering if the method name should actually reflect that behavior. \n. Good question. Not sure that is actually needed though for a number of reasons:\n- Everything you can do with ant patterns you can certainly do with regex as well. A lot more, in fact. \n- Providing an extension for ant patterns requires changes in the Authorizier and other controllers to be aware of the service type, and a level of abstraction must be introduced to capture different match types\n. one missing final :)\n. Note: SWF remains unchanged as there does not appear to be a non-versionized xsd declaration yet:\nhttp://www.springframework.org/schema/webflow-config/\n. +1 on the rule change. I know there's at least once other instance that is using 8 parameters. 10 seems reasonable.\nWould you mark the rule as error please, when you make the change? \n. I am going to review our CS rules once more. I was under the impression that the rule on final was added, but maybe it only applies to parameters. \n. examineAccountState is parimarily interested in translating a few exceptions that are related to the actual account state. These are exception that natively communicated back by the framework and are here lowered down to a more CAS specific error. \nexamineAccountStatus  takes that one step further and attempts to do the same verification without relying on the framework. This is to accomodate directories that set up policy based on custom attributes, which may not be supported by the framework and as a result, aren't quite transformed back into exceptions for the code to translate. Perhaps this one should be renamed to reflect that behavior better. \n. True. I think this might be better addressed by doing the mappings inside the AD response handler class. I'll account for this in the next commit. \n. I refactored to account specifically for AD. \n. Ah, I see. That makes sense that HandlerResult is able to process warnings. I'll reverse the model to accommodate that, but likely, I'll have create a class that would inherit from Message to be able to communicater the number of days left to the expiration date. \n. Good catch. I think I was experimenting with the critical flag of the auth controls. This should be removed. \n. The response is only consumed in the sense that via the returned ldap entry, attributes are picked up that would ultimately build the policy configuration. This is to accommodate custom attributes that make up the policy in cases where the policy isn't communicates via warnings or exceptions. Otherwise, via the configuration of response handlers the account state would be automatically picked up and translated. \n. Agreed. Would make life a whole lot easier. We have Active Directory whose date values are long numeric ids that really need to be calculated. Others work based off of a variety of patterns, epoch-based, etc. Standards really would have helped, but for now, I think this level of complexity with reasonable implementations should be sufficient. \n. Good point. Maybe I should separate the state elsewhere. The idea was that the configuration is provided via context, and the same config object would then build its state upon examining the account policy. \nMaybe it would make better sense if the build was to actually return some sort of a result object that only holds the result of a retrieved configuration? Would be easier to separate state from others. \n. I had to jump through a few hoops to be able to override the settings. Unfortunately, the Error is defined as an Enum and the AD resolver doesn't allow me to plug in a custom extension of the AD state to override a number of cases in order to throw CAS specific exceptions. \nWe should keep an eye on ldaptive to see if this behavior can be improved later. \n. Good catch. Yes, I am also in favor of the annotated PostConstruct. I'll reverse the change here for this pull...\nand perhaps we should add the rule into CS and go through to concert all afterProperties methods to this new style? Shouldn't be that much work. \n. Please open a JIRA issue for this request.\nYour current pull as it stands has removed the new line at the end of file, which will cause the build to fail. Please adjust. \nAlso, I am not sure that the ability to override a single file is necessarily a good idea. I am more of the idea that it might be better to simply provide a new directory spring-configuration-overrides next to where spring-configuration lives and have the context loaded in such a way that configuration in that directory overrides the default. That way, You can override all beans in all context files with just the change you want to have, rather than copying down the entire file and have it match the name. (I have had to assist folks who simply had the name misplaced). \n. Two questions:\n1. What does the above fix do, actually? The javadocs seem to be mum on the overloaded constructor. \n2. Do we need to use the full package name of the ObjectWrapper? \n. Thanks. I joined the group and will shortly post a summary. \n. @jsumners,\nAdditionally, tabs are completely forbidden.\nSee this rule:\nhttps://github.com/Jasig/cas/blob/master/checkstyle-rules.xml#L179\nand this rule:\nhttps://github.com/Jasig/cas/blob/master/checkstyle-rules.xml#L218\nBoth should fail the build. If there are instances that you have spotted, we'd have to look into checkstyle and see why it's not catching those. If there are any please report back so that we can be consistent across the codebase. \nThanks for the request. I have often thought about the same feature but it probably merits more discussion on the mailing list before we formally open a JIRA issue and commit to it. I'll start the discussion. If you're not already, please join the cas-dev mailing list as well to participate. \n. Not sure if we actually need this line: registeredService.getLogoutType() == null\nShould probably set reasonable defaults on registered services with a @NotNull annotation.\n. Should this really be in its own class? Seems like LogoutRequest is a better home. \n. You probably can get rid of @SuppressWarnings({\"rawtypes\", \"unchecked\"}), if you mark the map instance with generics, as in Map<?,?>\n. Just to be consistent, I think this would better be named as FrontChannelLogoutAction\n. You probably want this method enforced on child classes. Why not implement the doExecute() here which would call preventCaching(), and down below the call, expose an abstract doExecuteInternal() for subclasses to implement? \n. Just a shortcut, that if you use the {@inheritdoc} tag, you can skip the javadocs here on overridden methods! :)\n. Having read your description of the test you performed, does this mean that CAS would only be able to issue the log out for the first service, and would ignore the rest? This seems strange.\nI was under the impression that front-channel SLO would actually be at the front, implemented inside the browser. In other words, I was thinking the above loop would actually be written in Javascript or something so that ajax calls (or what may be the agent that issues callbacks) would be all inclusive of all collected logout requests. The indexing of the starting service looks unreliable a bit. \nMakes sense? \n. Shouldn't this implement NamedAuthenticationHandler? \n. static final fields are in upper case, based on latest CS rules. Updated the conventions: https://wiki.jasig.org/display/CAS/Code+Conventions\nThis branch hasn't been through CS cleanup just yet. Waiting for changes to finalize before we merge with master and go through final rounds of cleanup. \n. Done. \n. Sure. \n. +1 post-RC code cleanup task. This is just a matter of personal habit, but we should definitely be consistent. \n. I think load() expects an empty instantiated list anyways. I'll switch to ArrayList\n. Yes. The branch hasn't of course been through CS cleanup. Waiting for changes to finalize, so that we merge with master as a first step. Lots of stuff would be cleaned up as a result of the merge and we could take care of the rest, notable new components that are inconsistent wrt to line endings. \n. Good point. INTEGER.MIN or something like that might be a better alternative. Will review and adjust. \n. Done. \n. Sure. \n. Good idea. Will do. \n. Understood. So, are we considering NamedAuthenticationHandler to only now be available for legacy support purposes from now on? \n. There's a closeQuietly() somewhere that should adequately apply here. \n. Would be great, if we could javadoc this and the condition that would cause the throw...and/or for easy debugging purposes, an error message as part of the exception would also be helpful.\nAlthough I realize they are party of the contract exception hierarchy anyways. \n. See my comment above please. \n. Certainly, yes. Will keep that in mind after the merge. \n. It can\u2019t be binary or any other type. The id attribute value is expected to \nbe string value, out of which of course the principal will be constructed.\n. You're right. I was originally thinking that that for the sole purpose of supplying the username attribute for the search query, that interface would be adequate as it's designed to do that, but of course it does more than just ease of configuration, and now that I review it more thoroughly, we are not really taking full advantage of the interface. I'll remove it. \n. This seems slightly brittle to me. I'd rather we attempt to parse the pattern. See http://bit.ly/13DPmPj\n. Could one ever construct a Credential object with a null id? Should this be changed to return credential.getId() != null? \n. Should this extend BasicPrincipalResolver? and just override the resolution part? \n. Combine log entries into one? \n. Wondering if this should be case insensitive? \n. Understood. Lets do that in a separate JIRA, then. I'll capture the change. There might be other areas in the code that rely on the specifics of the pattern like this. \n. What would happen if we transition to 3? Could we resume back to the normal login flow? I like the idea that we get to reduce duplicity by relying on alternate flows, but I dont want to change the flow behavior. I imagine from the user experience POV, if you one tries to access /login and the TGT has expired already, branching out to the SLO flow should ultimately return and present the login form as usual. \nI think it would perhaps be easier if we refactor the code to encapsulate all cleanup activity in one wrapper component as facade, and have this flow and the logout flow execute it. \n. Small suggestion here; it would be easier for maintenance if you actually refer to the constants above. \n. You're missing a double quote at the very end of this line. \n. I am wondering if we should simply remove this block. I don't believe window.console.log is actually used anywhere, is it? If needed, we probably should switch to a better JS debugging library like this:\nhttp://benalman.com/projects/javascript-debug-console-log/\n. This method is a bit hard to read. I'd think we could rewrite this to convey intentions better. Perhaps resolve the given credential outside the loop first? \n. Just wondering if we should make this a top level package-protected class? I would have to search, but I seem to recall other instances of this. Not sure just yet.\n. I think the class would definitely benefit from comments explaining this behavior. Other at the method level or the class itself.\n. I think we'd benefit from writing another test case that executes supports directly, since that seems to exhibit interesting behavior.\n. +1. I myself am in favor of Builder classes as well. Much easier to read.\n. Why not final?\n. Makes sense. Thinking out loud here that typically factory instances are marked as final since they are the controlling authority on the newly created instance and that behavior is strictly usually controlled I believe.\n. I am wondering about @leleuj's suggestion. Could we provide a layer of abstraction such that all RADIUS specific details are encapsulated inside an impl class? The packet creation and transmission seems to be specific to the library. Do we know of other use cases where different impls might be needed? \nI realize we are not doing the same with other modules, such as ehcache, etc. \n. Agreed. We could always bundle the JS file within CAS but I think it's safe to trust github.com for now.\n. You mean, a comment to describe the updated versions of JQuery and JQuery UI? \n...or are you referring to the <!-- tag? \n. Ah, excellent point. Will do.\n. Will change to use JSP comments here as well.\n. This is where the real change is implemented. Ignore the rest :)\n. I split the warn messages when validating registered services. \nIn terms of static exception objects, my thought was that exception codes are captured directly inside the one exception instance. Throwing exception objects individually would potentially scatter codes through the codebase, or would require exposing public constants. \nNot seeing how the exception stack would be troubled. The UnauthorizedServiceException instance should always show up in the logs. It's not a pluggable instance. \n. The comment here needs to be corrected.\n. The class, or the setter, or the field directly would probably merit further explanation around the newly added property. \n. Fair point I am looking at the ImmutableAuthentication class and looks like the equals method does what I want. I'll switch over.\nI was originally thinking that it would be unfair to assume the implementing class is ImmutableAuthentication but then it's also incorrect to force equality of the two objects by manually checking. \n. Good question. I was more under the impression that the custom_messages file would be able to provide truly custom messages, those that are not part of the CAS bundle. But, we could certainly make the override happen as well to sort of kill 2 birds with 1 stone. Will make the change.\n. Good catch! yes.\n. Good point. Removed holder.getProperties().size() > 0\n. This change: \nxml\n<notice.skip>true</notice.skip>\nwould require that we update the Jasig parent pom to use the latest version of the plugin\n. What are screen.warnpass.message.line1 and screen.warnpass.message.line2? Do we have template examples of the values of these?\n. Why are we sending parameters over? Not I understand this bit.\n. Thanks for clarifying.\n. Sorry I am a bit confused. Which message are you referring to? :)\n. Ah, this is my bad, sorry! I wasn't careful enough to review the parameter's definition. Will reverse out. Thanks for the catch!\n. True. Required for the autowiring of the fields to work.\n. Practically it would be the same, yes, but simply just enforcing a particular bean id here only.\n. Agreed, certainly. I'll look into this furthermore.\n. Correct. Less warnings on the console prompt and IO interactivity.\n. True. Looks like a v2.5 is pulled from person directory impl. I should switch back to 2.5 until person directory updates the dependency.\n. Right! Will remove.\n. Switched.\n. Done.\n. Well, admittedly I wasn't thinking about thread safety when I put this together so that's a bad reason :) but that aside, I dont know why we would want to new instances. Aren't we to simply treat the class as a bunch of static utilities? \n. Thanks for the clear explanation. Makes perfect sense. I'll make the changes.\n. Just making sure I understand the change; FastDateFormat is thread safe for formatting, but it does not provide a way for parsing. Are you saying that any code that wishes to parse based on this format would have to be synced? \n. It does, but it's based on commons logging. I'd rather we continue to use slf4j consistently everywhere as we do now.\n. Right, but nonetheless, it's all the same to me. I'd change if you feel strongly about this but consistency makes more sense to me. (Next change that would add a parameter would swap out for the new logger instance anyway, etc)\n. Replaying @serac's comment:\n\nIV length is a function of the encryption algorithm. For example, this will break with Blowfish which is an 8-bit block cipher. Not sure it's a big deal since most everyone will use AES, which has a 16-bit block, but wanted to point out. You can easily set the IV length by basing it on Cipher#getBlockSize().\n. Replaying @serac's comment:\nIf the IV becomes dynamic, you'll have to prepend two values: one 4-byte integer indicating the IV length followed by the IV bytes.\n. Formatting issues. Please use the final keyword when declaring new variables.\n. Good point, they should be or the travis build would fail. I'll do some tests locally. It may be that we have to update the rules slightly more to enforce specific behavior that is missed here.\n. Few more missing finals here and we should be good :)\n. I am a little rusty on logout; aren't we here assuming that the logout method is back-channel? isn't the debug message misleading?\n. OK, I guess I am really confused now :)\n\nThere are two distinct cases:\n- For services that are configured to logout in a back-channelish(!) way. In this case, the logout manager simply performs the job.\n- For services that are configured to logout using front-channel, the logout manager does nothing but to only \"collect\" these requests and put them into the webflow, as you note. In this case, the log message of Performing back channel logout... is incorrect, because we are just gathering info here and not much else. Right?\n. To the line:\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/logout/LogoutManagerImpl.java#L120\nThis block shows that we are simply collecting logout requests, and only perform back-channel processing if the service is configured to do so. \nSo, here at CASImpl level this would be an unfair assumption to display the debug message that the component is going to perform back-channel logouts. I think it should be adjusted to say something like Processing logout requests... etc\n. Exactly! :+1: otherwise. Unit tests of course would be a plus.\n. Great questions. Let me reply back in reverse:\nFilters per registered service\nAttribute filters are  in fact a property of registered services. Note this line a bit further down:\nregisteredService.getAttributeFilter().filter(principal.getId(), attributesToRelease);\nFilters in management webapp\nConfiguring attribute filters are now done via xml fragments of the svc registry. They are not yet supported by the mgmt webapp UI, and that's a good point. We should think about supporting filter configuration in that UI as well.\nCreated this JIRA to capture that need: https://issues.jasig.org/browse/CAS-1391\nDefault attribute filters\nNow to the case of RegisteredServiceDefaultAttributeFilter:\n- Attribute filters that are associated with services, filter attributes based on their values\n- The default attribute filter that applies to all services, filters attributes based on their name, so that only allowed attributes are released for the service.\nand:\n- Attribute filters that are associated with services do not require an instance of the registered service. They care about values only.\n- The default attribute filter that apples to all services requires access to the registered service in-process.\nYou're perfectly right about creating many instances of RegisteredServiceDefaultAttributeFilter. The alternatives:\n- Remove the class. Move everything into a static method inside CASImpl\n- Keep the class, but not implement RegisteredServiceAttributeFilter. Move everything into a static method inside the class.\nSuggestions?\n. Personally, I am myself in favor of this route:\n\nKeep the class, but not implement RegisteredServiceAttributeFilter. Move everything into a static method inside the class\n. Forgot to mention, that there might be a 3rd solution as well:\n- Refactor, to merge the RegisteredServiceDefaultAttributeFilter and RegisteredServiceAttributeFilter, such that each registered service:\n1. Is by default associated with a default filter\n2. Each filter is forcefully passed down the collection of attributes that the default filter can cope with.\n\nSlightly bigger in scope, but perhaps a better solution than the others.\n. No big deal, but you may want to use UnsupportedOperationException instead.\n. I think it would be easier on the reader, if you actually tested for the \"opposite\" case. Expect the failure and declare it at the annotation level (@Test(expected=SomeException.class)\n. I understand the need for this method, but I'd really prefer if we could make do with DefaultTicketRegistry? Mocking the registry seems like a big leap of faith :)\nNonetheless, I understand it may not be possible to dup the use case. \n. We do have a small opportunity to improve, but probably not that significant. Noneless, I think overall it would make things simpler to make the modest refactoring effort.\nThe last option of merging  RegisteredServiceDefaultAttributeFilter and RegisteredServiceAttributeFilter is more complicated than all. I am more and more inclined to move everything into the static class RegisteredServiceDefaultAttributeFilter and perhaps even rename it, so it's not mistaken for an attribute filter, because it's not.\nAttribute filters are intended to filter attributes based on their values. The default works by attribute names. That's the fundamental difference. RegisteredServiceDefaultAttributeFilter is also not intended to be overriden or subclasses at all. We'd want to lock it down. So the static option makes sense to me from that aspect. \n. Gotcha. I guess I was more used to seeing assert statements here and there :)\nNonetheless, I understand it's difficult to come up with a test case on this one and appreciate you taking the time. What you have is sufficient and perfectly workable. :+1: \n. Right, the idea is: we'd first find all the attributes that are actually allowed for the service, and then we apply further filter processing on those. The reverse would mean that we get to apply the filter to attributes that the service may not want released at all, so no point in processing those. We only filter results, for those that are actually allowed/needed.\n. You're right, sure. This needs to be JSP comment instead. I'll change.\n. You dont need this block `catch (final Exception e) {``\nAlso, if the oldValue is null you should simply return null after the warning message and not continue down. Agreed certainly that the logger should also use SLF4J. Also, I'd change the warn level to be error. \n. Well, based on your observation it appears that the exception is thrown back to you and by that, without the catch clause it would simply appear in the logs with the entire stack trace which I believe what u are trying to do. If you are able to catch the exception and log it, not sure why it wouldn't show in the logs? would that be due to log4j configuration failing to declare the package? \nIgnoring to catch the exception explicitly does not seem to cause a program crash. So I am not sure I understand the point of catching and logging it, if it's just going to show up in the logs regardless without causing a crash. Unless you were planning to do something about the exception for a remedy...which if the db is down or under heavy load...not sure you can do anything at all. \nDoes that make sense?\nThe null check is different. That's a case of failure which makes sense to me. \n. Unless you have something useful data that do not show up in the log when the exception thrown and you'd want to explicitly log them to help with troubleshooting then sure, a logger call would be great. But I dont see anything useful in this case to help with troubleshooting (i.e. hashedKey, etc) which is why I am suggesting that you might be able to simply let the exception be thrown and have it show in the logs to assist with diagnostics. To recap, not catching it does not seem to make CAS be unavailable. \n. I guess that depends on the doc statement. Based on Javadocs's manual:\n\nWhen writing a phrase followed by a sentence, do not capitalize the phrase, but end it with a period to distinguish it from the start of the next sentence\n\nI think we can safely ignore this one for now and leave it to the discretion of the author to ensure the syntax.\nRef link:\nhttp://www.oracle.com/technetwork/java/javase/documentation/index-137868.html#@param\n. See my comment above on the @param tag. Seems to equally apply to the return statement as well.\n. Exactly\n. Done\n. Done\n. Done\n. Done\n. Done\n. Done\n. Done :)\n. I am not sure if that is the case. The method in fact is returning the exact string \"generated\".\nSnippet:\njava\npublic final String generate(final RequestContext context) {\n        final String loginTicket = this.ticketIdGenerator.getNewTicketId(PREFIX);\n        logger.debug(\"Generated login ticket {}\", loginTicket);\n        WebUtils.putLoginTicket(context, loginTicket);\n        return \"generated\";\n}\n. Done.\n. hmmm...interesting comment. defining explicit views might be better in terms of clarity, but I'd wonder if it would make things difficult for existing deployments that already rely on existing default views?\n. would suggest that you remove the comments. We can trace these through the git history.\n. Incorrect. The method is not actually throwing an exception. You are catching everything. Instead of a @throws, turn into a general description about the need for null checks, etc and how errors are logged. Doesn't even have to be at the method level.\n. See my comment below please.\n. Not quite. The throwing of the exception is more controlled by the get call of the underlying map which could really be anything OperationTimedOut, etc. Since the exception is dependant on the map type and is unchecked, we dont quite know what to catch. Catching Exception here makes sense.\n. Another alternative is to simply log the error and return, which is what the throw clause would ultimately achieve. I guess we could try a different exception type hereto be exact, such as a NullPointterExceptoin or InvalidArgumentException? \n. Not quite. The result object merely is a DTO that contains values for retrieved attributes out of the directory. All calculations are contained inside the handler.\nCalculation of expiration date time by default accommodates cases where it's basically based on an expiration attribute value, or it's based on a date attribute value + some leeway. While these two are fine for default, sometimes you'd have to go through more to actually figure out what the expiration date should be. In those cases, the handler would have to be extended, and allowing the developer to rewrite this method would satisfy that use case.\n. Sure. Although I believe the pull here is attempting to cover edgy use cases, recently had a discussion with folks who expressed interest in leveraging the LPPE bit of the handler to reach out to other non-ldap systems to perform calculations. This would allow one for instance to authenticate via ldap, but for instance leverage an external JDBC connection to make do with calculating the expiration date and so on. I believe this change helps to accommodate those who have disparate account stores for user identity and management, etc. (To be clear, the discussion I had was mostly in flavor inquiries on the lppe module in general, and no hard requirements were presented for work but there have been a few who have attempted to take the L out of LPPE :)\nAs you note of course, as far as ldap servers go I also haven't come across one with more elaborate calculation needs other than what's here in the code.\n. Perfect. :+1: with the exception change.\n. Sure. I am not sure I see a practical difference between the catching of Exception vs. RuntimeException though, but that would also be fine.\n. Sure. Sounds good to me.\n. Sure. I'll switch to a ...Formatter...or a ...Creator might be better.\n. Good question. I think this has broader scope in that the current codebase has a number of constants protocol-related and otherwise that are simply hardcoded. We'll need a more comprehensive effort to comb through the code and come up with a strategy for a common place to put all these.\n. Hmmm...I vaguely recall one some time ago but cant seem to find it. I'll create one detailing the need. Would you prefer if I assigned the JIRA to you?\n. One small final here.\n. I think you save a few LOC by extracting this block out. Seems like you'd want the handler to execute nonetheless. \n. I think the class would generally benefit from having log statements here and there, to better indicate the internal calculations that take place. \n. Sure. I understand that. I was just referring to the organization of the block. Something like this:\n``` java\nmessageList = Collections.emptyList();\nif (this.ldapPasswordPolicyConfiguration != null) {\n    logger.debug(\"Applying password policy to {}\", response);\n    messageList = this.ldapPasswordPolicyConfiguration.getAccountStateHandler().handle(\n            response, ldapPasswordPolicyConfiguration);\n}\nif (response.getResult()) {\n    return new HandlerResult(\n            this,\n            new BasicCredentialMetaData(credential),\n            createPrincipal(upc.getUsername(), response.getLdapEntry()),\n            messageList);\n}\n``\n. No worries. Looking forward to future updates. \n. +1 to remove this (the property I mean)\n. @serac are the changes presented in this pull dependent on1.0.3? could we perhaps make do with 1.0.2?\n. This is the oauth token that is encrypted bytravis encrypt`, here exposed as a \"secure environment variable\" to the build. The secure block allows the token to be decrypted for the build based on the key pair associated with this repo and the user (in this case, me)\n. Sure. \n. Sorry; I dont follow. Are you saying the title here should be removed? or rather, should it contain more content to refer to contributor guidelines to both jasig and CAS? \n. That's not going to work. Here's why:\nhttps://github.com/blog/1184-contributing-guidelines\nA contributing.md file is specifically designed to show up when someone submits a PR. Its intention is to remind the submitter to adhere to the guidelines upon submission visibly and somewhat annoyingly :) I noticed that at times we have had to remind folks to clean up the code based on such guidelines and so, with a more visible reminder on the page, perhaps we'd be doing less work on the pulls. \n. No worries. Hopefully, this helps to reduce time spent on code reviews :)\n. I hear you. I am open to all options, but I feel like that might eventually lead into way too many interfaces? \nBut you're right. Perhaps we should categorize. What comes to mind?\nInterfaces for views, arguments, etc? \n. Sounds like a plan. I'll see what I can do. \n. Sure. These are the ones we can currently support. LOA-related attributes likely need to be here, later on, as the protocol updates itself. \n. Just to highlight, that the pull allows for augmentation of the model, in case an adopter needs to add any additional attributes into the view. With that support, for now, we can likely stick with the above attributes until protocol updates per feature like LOA, or there are other community-drive requests.\n. If I understand your concern correctly, looking at our \"previous\" documentation, there isn't anything about the remember-me attribute in the payload:\nhttps://wiki.jasig.org/display/CASUM/Remember+Me\nSo, you're right that folks may have already customized that attribute name, rather than what's officially specified here. Those can safely be upgraded/ignored, since we are merging on a standard name and adopters can keep the existing name.  \n...or were you thinking that there may be a need for \"additional\" attributes that would describe the remember-me authentication use case, other than just a simple \"longTermAuthenticationRequestTokenUsed\"? \n. Thanks for the clarification. It makes good sense.  \nCould you describe in better detail, the way spring handles remember-me authentication? maybe we could take inspiration from there...links to a github repo, or a doc perhaps? at any rate, we should further discuss this on the list. would you mind starting that off? \n. So coming back to this; I see one issue with the interface separation. The constants used for errors, and views, are all ones that are specifically used by the protocol. They are mentioned and explained, so it's still fitting to include them in a cas-protocol interface. Unless you'd want to have:\nCasProtocolViewConstants\nCasProtocolErrorConstants\netc?\n. Makes sense, will do. \n. InvalidTicketException as part of granting STs only occurs if the TGT is invalid or expired. \n. The destroying of TGTs here, is based on similar instances of destroyTicketGrantingTicket being used throughout the codebase. I am not seeing anything on front-channel SLO in a number of areas that use destroyTicketGrantingTicket. Could that be a bug?\n. See:\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/web/flow/AuthenticationViaFormAction.java#L131\n. Very good. So, shall we create a JIRA to kill the two birds with one pull? :)\nI am saying this, because it looks like both instances require webflow mods that would not be so trivial to make. \n. Sounds good. I created this jira and tentatively assigned it to you for now. We should revisit the topic once GA is out. \nhttps://issues.jasig.org/browse/CAS-1437\n. I need to revert this! Wasn't supposed to be here.\n. If the original credential is in fact transformed, I dont think it's of any usefulness anymore, is it? The transformation intends to find the \"right\" username which along with the old password form the new authenticating credential. Since that combo becomes the executive acting credential, it makes sense to me that the metadata considers that instead of what was originally provided. I am not sure the original matters in this case, since all downstream systems would be interested in what's transformed and not what was passed initially. \n. As for what extensions receive, It is true that the design pretends the original credential is passed down. We can make that very explicit through javadocs, but I convinced myself that building a new UidPswCredential is more sensible, treating it more as a DTO, rather than passing bits and pieces here and there.\nAll authn handlers that are affected do expect a uid/password anyway, and the original credential was cast to a uid/psw credential as well. While internal data bits remain the same through the new copy, I am not sure it makes sense for an extension to expect the same object reference. An extension cares to receive a uid and a password, regardless of how it was constructed. \n. Good point. So, rather than creating a new object I now simply set the transformed username, since that's the only variable. The original class stays put.\nThe latest commit should reflect that.\n. I had the same thought, but convinced myself that this should be there for backwards compatibility reasons. (I'd prefer if the option wasn't there at all and things were always case insensitive, but there may be requirements over the case....not sure)\n. Could you elaborate please? I am not sure I follow. Are you saying there should be a setter() method for username for an authentication handler?\n. This is now done for authn handlers affected by this pull\n. Sure. Missed this one!\n. Logging should already be handled by parent classes\n. protected, so that it can be accessed by extensions of the state handler. there will certainly come a time where errors need be removed or added to the map given requirements.\nAs for non-static, no particular reasons. protected static just seemed a bit strange, but I could definitely reverse. No reason for many map instances. \n. You do, and yes.\n. Sure. I'll add one.\n. I added the test case\n. Ah good catch. I need to account for this.\n. Sure. Will address. \n. Will do.\n. Yes, the AttributeFilter is simply an optional component that takes place second in the process of releasing attributes. The policy determines what attributes should be released, and the filter indicates what values out of the collected set should be removed/processed. \nPerhaps it would be clearer if I renamed the policy class to be AttributeReleasePolicy so as not be confused with the attribute filter.\n. You're perfectly right :)\n. You're right. My dictionary was pointed to EN-US. Updated!\n. Happy to change. What might be a better name? AltersCase\u2026.?\n. Yes it is. Marching towards a minor 4.1 release, the strategy dictates:\n\nMINOR - an evolutionary incremental improvement that includes all PATCH release improvements along with fixes and enhancements that could not easily be accommodated without breaking backward compatibility or changing default behavior. Adopters can expect general improvements that require moderate changes in APIs, integration points, default behavior, and general configuration. \n\nObviously, the goal is not intentionally break APIs but sometimes, as it might be with this pull, the change just warrants it. \n. I am a bit confused. Which boolean are you referring to? I only see a locking strategy setter here....or were you talking about the Logout Manager? \n. Ah, I see. Sure. Lets see what I can do. \n. Sure. I updated the pull just now with deprecated APIs. \n. ConvertCasePrincipalNameTransformer sounds good. I'll push in a second.\n. They did, apparently, yes. The schema defn no longer allows it. \n. It has not, yes. I was testing the flow and jsp pages, and noticed the JS error on mime-type restrictions. The screen was rendering blank for me, so I switched the link to be the correct one. I later realized the blank screen that I experiences had nothing to do with the upgrade or the JS error, but was mostly a chrome caching issue, but I kept the fix there anyway. \n. Yes. Realized the construction of that statement made little sense!\n. This is done now in the most recent commits. \n. This method is not throwing IOException really, right? \n. What happens with an IOException occurs? CAS would crash at this line because oct=null?\n. Plz provide a bit more context around params and the return value. \n. How do we know the length/size of the sanItem list? It's worth documenting that in the javadocs, and also for safety, check for size before accessing the element at that index?\n. Move this comment line to the javadocs plz.\n. Can we combine both exceptions here? \n. Do plz add a {inheritdoc} up here.\n. Why are we keep just this line?!\n. Suffixes are optional right? \n. Should the prefix be in cas.properties?\n. What is the recommended strategy for storing complex objects? Clob? Or shall we simply just ignore such fields during persistence?\n. You're right. I'll update the docs. It's no longer persistent clearly.\n. Sure, unrelated, but these are a couple of \"typos\". \n. Sure does, See my note at the bottom of the PR plz.\n. Remind me again plz, why does it have to be pseudo-random? My tests show that it works fine with a random id, so I went ahead with the change, and I couldnt find any documented rationale for the service-based id gen...\nThe generator is only now used to create anonymous ids, and so I am not sure if the transient ID HAS to be persistent across multiple requests. If it makes sense for it to do that, I'd be happy to do it the persistent way as well.\n. I would really like for them to be gone, so whatever controller is routing to these views should similarly discover the JSP automatically.\n. Thanks for the clarification. Lets keep them. \n. I am not sure. I think it will be clearer if we included the whole path. I hardly ever doubt this gets changed by an adopter and we should have reasonable default values but in terms of learning curve and visibility, it's easier to see where the entire \"view\" is defined as a whole rather than just a dir name.\n. Ah, I see. So it's somewhat similiar to how attribute queries work in SAML/Shib which I suspect how the component gets it name from. Cool. Thanks for helping me learn that it.\nSo, I could add the service parameter back, but it's only used for one impl now (which is this one). I am wondering if I could substitute something else instead of the service...or perhaps look up the service from some place else rather than a direct parameter...It's no big deal if service has to be injected, but rather keep the interface simple. \n. OK cool. In that case, when you are calling final ASN1Sequence seq = getAltnameSequence(sanItem); I'd suggest do a null check there with a debug line that explains what just happened.\n. Same goes for the call right after that of course.\n. We would want the serialized version. classes have state, and configuration and they should be restored when retrieved from the persistence storage to the state they were in.\n. Force of habit! I'll take it out. \n. You should make sure the service is not disabled. \n. Javadocs or comments as for why this is needed? \n. Ah, I see you have that for setCache() method. So the ctor could benefit from a @see tag.\n. I am still struggling to understand why this file is needed. Wouldn't the controller be able to simply map the view name to the file name? Why have the view explicitly here?\n. There are no use cases in this case. This is just a minor oversight in the code. Credentials are always passed down as arrays since in CASImpl they are declared as Credential... in method signatures. \n. This is so that we can run cs directly inside the module; it's used to locate the expressions and the filter file. All modules follow suite\n. When you overload the ctor, the default goes away which causes problems for Spring and the existing config. I wanted to keep what we have in the config, but simply add support for time units.\n. Definitely, right now the WHO should always show up as UNKNOWN if the arg type passed is Credential...\n. Correct. \n. I am less concerned about breaking API changes, seeing that we are protected by the release strategy. This is not to say that we should be careless of course, and Scott has reminded me to take an effort to deprecate APIs where we can and that's certainly warranted. Sometimes, we cant help it. If we were shooting for a 4.0.1 I would have certainly taken on a way more modest approach. \n. It should keep track of the existing configuration, as it changes. The only interface we have to do would be the management app, and once it starts to support such changes, it should present something like:\n1. Here's what you have for your attribute provider\n2. Deployer via the UI changes the salt from x to y\n3. the provider is stored with Y and becomes alive\n...and since the provider via extension can grow, @Lob seems to fit.\n. I'd love to, but in this case, there aren't any particular fields to evaluate. Just a few standard rules, recommended by the javadocs of the EqualsBuilder itself:\nhttp://commons.apache.org/proper/commons-lang/apidocs/org/apache/commons/lang3/builder/EqualsBuilder.html\n. Good catch, updated. \n. No, a disabled service is registeredService.isEnabled(). Non-existing services are not allowed to use CAS anyways. The most interesting aspect of this pull is the ability to decorate the login page and I would like to stick to this. Not much else is going to be customized, but we can certainly track what you're describing in a separate issue. \n. Type was used in the log statement, which I removed. Hopefully just the prefix in the log is self explanatory. \n. Yes, unless we remove type checking. \n. Good catch!\n. Makes sense to me and I like the name. Will do.\n. You should be able to. There is a ctor parameter that you can pass for that as well.\n. You're right. I thought that they are chaining, but in fact they are overriding one another. We could just stick with one. I took this from the example here:\nhttps://hc.apache.org/httpcomponents-client-4.3.x/httpclient/examples/org/apache/http/examples/client/ClientCustomSSL.java\nI think it simply sets the protocol to be used.\n. Very good questions! Indeed, we should perhaps make this be optional by default and off. \n. Creating a new URL instance forces a checked exception.\n. I'd have to dig, but I suspect deep inside the http client, it accepted URL instances better as parameters in some areas, and so I took the effort to have the conversion happen at the upper layers.\n. Very good point. Let me review this. I think I ran into an issue with this while that testing that the pool was prematurely being shut down after a test execution! so I made it per thread. \nI am not actually sure what's the best practice here. Is a shared thread pool the way to go? \n. Sure. Will do\n. Well, that is the same result. We'd simply end up with too many setters :)\nCtors are immutable, and we wouldnt have to worry about object construction after a setter again. so for that reason I like them better. Now it is true that if you wanted to modify one aspect, you'd have to pass in a few more defaults as well for parameters. So it's a split\n. I recall that a test required this actually. I'll dig through and see if I can find which one. Maybe the fault was with the test.\n. See my note above plz about the executor being shut down prematurely. I'll review. \n. Reviewing this, I think I might use CASTrustStoreSslSocketFactory to note that this is CAS specific. \"Custom\" is a bit too broad.\n. Specifically, see\njava\npublic CASTrustStoreSslSocketFactory(final File trustStoreFile, final String trustStorePassword,\n                                         final X509HostnameVerifier hostnameVerifier, final String trustStoreType) {\n        super(getTrustedSslContext(trustStoreFile, trustStorePassword, trustStoreType), hostnameVerifier);\n    }\n. FileTrustStoreSslSocketFactory it is. \n. You're right. Doesn't look like it's needed. Will remove\n. Reviewing this once more. you're right. I'll revert the change. My thought was to keep hashcode and equals close together for clarity, but given that STs and TGTs inherit from the same class, it's not possible to enforce strict type checking at the parent level. \n. You know, I am more and more inclined to make the executor service per thread. I am running tests for LogoutManagerImpl and the executor always automatically shuts down after one execution. \n. Yes and no. When I started moving stuff over, tests started to fail because the JDBC Svc Registry had trouble saving services, due a class-not-found-exception on lang3, which is the reference I removed up there. Things work fine in core because lang3 is somehow resolved via transitive dependencies. We're solely using commons-lang v2.5 and having lang3 up there was an oversight in fact. \n. You're right. I should do that!\n. Sounds good. I did try going that route as well, and it seems like some of the other dependencies need to be cleaned up first. person-directory was the one most that caused trouble with the upgrade. \n. It is, yes. \n. Ah, interesting! I think there's something wrong with my local git/dev environment. Changes seem to have a will of their own :)\nBut I was experimenting with unit tests to see if I could prove out this behvior, and so made the const here public so it can be compared with the outcome of a unit tests but eventually bailed. I'll revert this back. \n. On second thought, lets see if I can resume working on the unit test.\n. Yes, we weren't returning them. That's the context of this issue actually. Only remember-me was added previously.\n. rememberMe and maybe authn method, dont quite remember now but it was just a few. \n. Yup. With this PR they are just bundled together, and they were previously as well. We are just making sure they all make it to the payload. Authn attributes are no different than any other, so clients should have no problem with a complete set now given that they were able to work with attributes before. The payload structure is not modified, etc. \n. Dont see any references to Map.Entry. Still needed?\n. Ah, I see. Thanks!\n. I am good with this change. One small concern: Are we ALWAYS sure that e.getCause().getMessage() is a valid call? Could we bump into a NPE with the cause?\n. marked the constant as final. \n. Maybe we should add a NotNull to the parameter? (although I'd think that's more of an edge case)\n. We are disabling log generation here by loading the configuration from a non-existent file. \n. We can deprecate it, but we cant create one from it. It needs to be configured per service and we cant know what that provider is going to be. Could be anonymous, etc. \n. No. There would just be one attribute set less that what it used to do. The configuration however needs to be adjusted correctly so the provider can be set again. \n. Dont quite remember now, but I suspect manually.\n. It will be per service, yes. We have got a collection of generators available in the context configuration, but every service will have its own instance.\n. They are. They need the saml module dependency first. \n. Good idea. Just did that.\nSo views.xml is now being bundled with the saml JAR, and loaded from classpath. There is a prop to override the default file on classpath if there is a need to override views or their settings, etc.\n. Good catch! You are right. Args needs to be processed, exception messages and also need to loop through the match to figure out all instances of the ticket ids. Will resume work on this today hopefully.\n. No, so let me clarify. What we have here has to be the DefaultLdapServiceMapper.java and the above method \"used to\" provide a way to set a username attribute per service. This PR proposes to change the way usernames are provided and configured per service. So the setter above does not just apply to Google anymore. There is now a setUsernameAttribtueProvider() which could be anything for a given service that is going to be stored in ldap (or elsewhere) \n. That's correct. It's not the same service because provider configuration needs to be re-adjusted, and that would mean different ldap data/attributes for the new config. \n. No, they most definitely are. Lets review the use case again:\n1. Every service has a username attribute provider.\n2. Users can configure a provider in the application context, and connect it back to the service.\n3. Some providers like the anonymous username provider require an id generator, which by default is picked\n4. If and when we choose to modify the management interface to allow adopters to configure username providers per service, they will be presented with a list of options for providers. They can go with a principal attribute provider, or with an anonymous one. \n5. The management interface does not have to support the id generator configuration if an anonymous username provider is picked. It could (and our statement could be) simply just go with the defaults....or it could support that. It's all a matter of how we choose to present UI options. \nIt may be something like this:\n1. I pick my provider to be anonymous, out of the options UI presents to me.\n2. UI changes and says: by default this provider uses this ID generator, and here are its settings (salt, etc)\n3. I change the salt and press save.\n4. The configuration is composed to put everything together, and will be saved as a whole. Lob, or inmemory, etc.\n(note that of course the UI options presented to the user do not have to match what is available in the context. We could spin up class instances ourselves with some kind of mapping for example)\n. Well, the arg may not always be a string. Could actually be an object. I'll put a test down for that too. \n. Sure does! Will get it fixed.\n. This looks good, thank you.\n. That's sort of what I am saying, yes. In a sense, what's configured in the Spring configuration is one thing, and the configuration required to put services into a database is another. You cant have them both ways (i.e. If you are going to manage services via a DB/interface, why are you changing xml files around?!) or yes, stuff would get out of sync. \nWe provide a template configuration, as you say, in the context. This is how stuff would work OOTB normally. If one is going to change the backend to be something other than memory, that configuration no longer applies and needs to be moved over to that place (which is what the management app does) The current behavior today works in the same way. If I have 3 services in xml and I decide to put them in ldap, if I configure my ldap mapper, etc my services aren't going to show up in ldap automagically...at least I dont think they will! :)\n. Well, that's a valid question and I think we can make that clearer by summarizing this exact debate on the documentation or somewhere in javadocs, etc to note that if one is move to the backend from xml over to memory, everything that is configured in xml needs to be moved over, reconfigured and readjusted. \nAt the same time, I really dont think it's that big of a deal. We are doing this today. If you move services from xml to JSON to DB to LDAP, etc you're going to have to redo that all today. There is not auto-export-to-the-backend-you-decided-to-use-without-talking-to-Misagh functionality! :)\n. Besides, all this ldap-mapping functionality is a pain. We should figure out some kind of OLM(?) like what unboundid does. \n. Exactly.\n. Not sure I follow your statement? What this is going to do is attempting to log the exception message and the message itself at a TRACE level, having sanitized the log messages itself first. \n. ...and not just TGT objects, anything whose toString() might produce something that needs clearing. \n. Nope. Removed\n. If you overload the constructor, the default \"goes away\". So we are just keeping this to make sure existing default behavior stays where it was. \n. You're right. This is not thread-safe. Will need to move away from the shared mechanism and create the digest per thread. \n. Strictly speaking, no. But it aligns well with the PR so I took then chance. The codec library is handling all the message digest ops so thought to better be on a recent version. \n. That is true, but we cant satisfy the original request anymore. What getExceptionToLog(msg, t) is going to do is, it's going to peek into the exception stack looking for ticket ids, etc trying to sanitize them. It will come up with a message that is the stack but cleaned up. That message will be logged. We may not be logging the exception directly, but for all purposes, the message is logged just as it is today. \n. So to answer your original question: yes it is creating the same exact behavior.\ndelegate.trace(marker, getExceptionToLog(msg, t)) = delegate.trace(marker, msg);\n. I am not sure I follow your idea. Would you elaborate plz? What are these \"repositories\"? By key, do you just mean a string that represents an attribute repository? \n. The idea is that both prefix and suffix are optional. It doesn't make sense to create a class with both value as null, but it isn't possible to provide options through ctors to just set one and not the other. This is how we can keep both optional. \n. Shiro provides default impls of MessageDigest. At the end, you'd still be working with a message digest, but the impl is provided by shiro based on the algorithm provided. We do have commons codec that does this well, and I am not sure pulling another library in just to do the hashing bit for something we already have a component for is all too helpful....unless shiro does something monumentally better than codec to justify the leap. \n. Sure, but that is something which should be [and is] addressed in the project documentation when logout generally is discussed. The property describes that \"this is the logout type for the service, this is where you can control what happens to SLO requests. If you want to know more about those types, see X\". Also the statement implies that \"If front-channel SLO was not experimental, it would be the default\" which is not true. \nI also suppose that if at some point FC-SLO is no longer experimental, it would be more work for us to come back, (remember to come back), trace all \"experimental\" references in code and change them to say \"well, now it's not anymore\" :)\n. Yes, exactly.\nI can do:\njava\nvar trans = new PrefixSuffixPrincipalNameTransformer()\ntrans.setPrefix(...)\nOr:\njava\nvar trans = new PrefixSuffixPrincipalNameTransformer()\ntrans.setSuffix(...)\nOr:\njava\nvar trans = new PrefixSuffixPrincipalNameTransformer(\"prefix\", \"suffix\")\nBut this would be ugly, if I didnt have the default ctor:\njava\nvar trans = new PrefixSuffixPrincipalNameTransformer(null, \"suffix\")\n. Ah excellent. That's what I was looking for. Thanks. I'll see if I can tweak the PR. (Pulling in Shiro just for hashing seems a bit overkill, but I think it will be useful down the road). \n. I am afraid that wont work, because it's just not enough to store the object type. We need to keep track of everything that object was carrying with it. For example:\n``` xml\n\n        <property name=\"proxyPolicy\">\n            <bean class=\"org.jasig.cas.services.RegexMatchingRegisteredServiceProxyPolicy\"\n                  c:pgtUrlPattern=\"^(https?)://.*\" />\n        </property>\n\n        <property name=\"attributeReleasePolicy\">\n            <bean class=\"org.jasig.cas.services.ReturnAllowedAttributeReleasePolicy\">\n                <property name=\"allowedAttributes\">\n                    <list>\n                        <value>uid</value>\n                        <value>groupMembership</value>\n                        <value>memberOf</value>\n                    </list>\n                </property>\n                <property name=\"attributeFilter\">\n                    <bean class=\"org.jasig.cas.services.support.RegisteredServiceRegexAttributeFilter\" c:regex=\"^\\w{3}$\" /> \n                </property>\n            </bean>\n        </property>\n\n\n```\nWhen we are persisting proxy or attribute policy, it's not enough to store a key mapped to the type name. We'll need to be able to carry in everything that object had. We need a representation of that object as is; the object will be serialized, we can talk about how and in what format I guess. \nI am imagining the UI would be able to very nicely lay out all options that one could have for proxying or attribute policy and usernames, and these all would be strings and lists, etc passed from the UI layer to the backend. A collection of strings and flags that would ultimately construct the object snippet you see above. \nNow we could:\n1. Start creating fields for every setting and property in ldap by this mapper, and store things as strings. retrieve them, and create the object manually based on those values\n2. Persist the entire object, and pull it out as is. \n. Sure, I doubt that it will be used in views particularly; the abstractions here aren't view specific as you see. It's simply useful to be able to grab an authn object from a TGT, and the result can be mapped to whatever scope in the webflow's view. \n. I should note that we make use of this API rather heavily in CAS MFA:\nhttps://github.com/Unicon/cas-mfa\nIt's been exercised and proved its usefulness there very well.\n. Sure, https://github.com/Jasig/cas/issues/678 is here.\n. It has not, no. I mostly took out some TAB characters in the text to make CS happy. \n. That might work a bit better. Although serializing all objects into a JSON might be a tad more difficult but it at least a Clob can be read and processed by others. I like that idea better. Shall we create an issue to track it down separately? Because the mapper need to be somewhat significantly modified to handler all objects within a service.\n. Here it is: https://github.com/Jasig/cas/issues/681\n. Might make a bit more sense if the field was named ~~\"typeIdUsed\"~~ \"typedIdUsed\" so the getter would be \"isTypeIdUsed\". \n. Yup. That's it. Ignore the typo plz :)\n. Not any that I found. Combining multiple truststores isn't apparently that common. The solution you see in this PR is what everyone I found suggested to use, but not in form a particular library. Would be great if there was one. \n. Definitely. Will review shortly.\n. We dont need to run the build for pull requests. We only need to run it for master, and once for the matrix. This should happen in a post-success mode in a script I think. Otherwise, it's going to cause every PR to break. \n. Also:\n[INFO] Checking licenses...\n[INFO] Missing header in: /home/travis/build/Jasig/cas/travis/settings.xml\n. Because you cannot reference a non-static method in a ctor. The object instance is just being constructed, so you cant call anything on it. \n. So that:\n- If the CAS node name is cas-01.sso.edu then, the suffix determined would just be cas-01\n- If the CAS node name is cas-01 then, the suffix determined would just be cas-01\n. ...and the reason for it is because, we wouldn't want to \"automatically\" expose the FQDN in logs. Adopters may choose to do so explicitly, but we are just going to take the node's essence! :)\n. By all means. What do you have in mind?\nWe have to \"construct\" the suffix in the ctor, so it can be passed to the super. What would be a better way of doing this? \n. Sounds good. I'll take care of it in a bit.\n. Actually, this should be pulled out. Left-over from testing. I dont think it should be defaut. \n. I dont think it is. Do you have a reference? \n. Residual change. Must be removed.\n. If you are referring to the RegisteredServiceProxyPolicyMixin, this is purely used as a \"hack\" for jackson to ignore certain members of a given class during serialization. I didnt want to jump down to the class itself and annotate the methods I wanted ignored with a jackson annotation, so a mixin is a way of telling the JSON lib to ignore methods, etc. \nAs far as DB, I have also another impl in mind that I'll shortly submit which persists services in a mongodb database. Possibly, that could be an extension of a JsonServiceRegistryDao here.\n. However, I think it might prove useful to move the object-mapping logic out of this class and into its own component as a generic one, so other use cases like the one you mentioned can take advantage of it. Make sense? \n. Good point! We should probably sanitize file names. I'll take a look and see what cleanup strategy we can use. \n. Will review. \n. Because an Empty Map instance returned by emptyMap is not serializable. \n. By jackson, I meant.\n. Interesting. I think there is a metrit to both approach. Not having the suffix makes it very clear that it is always calculated. Having it, would service as a viable drop-in replacement for the existing DefaultUniqueTicketIdGenerator. You change the xml name, and the suffix is only auto-calculated if what's passed is blank. This has the advantage of allowing CAS adopters to decide: if they leave the host.name property blank, suffix es are calculated automatically. If dont leave it blank, that suffix will be used explicitly. This does not require them to switch XML configuration. \n. Fair point. I removed the parameter. \n. I have asked IntelliJ folks to explain this to me :) For some reason, the IDE likes to reformat things for no particular reason, other than to group stuff around in an order that it likes. If you can point me to a setting that would turn this off, I'd be happy to oblige. \n. Yup. Had to restore some of the changes from the previous pull\n. Sure. Done.\n. You are right. I'll need to double check this again. \n. We could come up with an implementation of ThemeSource or perhaps ResourceBundleThemeSource that might be able to construct the theme, or change the ServiceThemeResolver to check for this. I wanted to avoid custom implementations as much as possible, but I can dive deeper and see what exactly may be involved. If it's fairly trivial then I agree that we should remove hardcoded values from the UI. \n. This is a curious change; https://test.scaldingspoon.org/idp/shibboleth is there on purpose \"because\" it contains a missing cert. The cert itself is located in the truststore, which serves to prove that imports into the local CAS truststore can be loaded with certs are missing. Otherwise, your test looks just like the one above it. \nIf you list the certs in the truststore.jks file you'd see the missing cert for the scaldingspoon site as well as we the one for cacert.org\n. I am not sure I follow you you here. This pull reverses the behavior that now exists with SimpleWebApplicationServiceImpl parsing the request. In a nutshell:\nOld:\n- Request come in\n- CasArgumentExtractor passes it over to SimpleWebApplicationServiceImpl\n-  SimpleWebApplicationServiceImpl parses the request that is protocol specific.\nSo you could say that SimpleWebApplicationServiceImpl has more knowledge of the CAS protocol than the Argument Extractor does!\nWhat happens now is:\n- Request come in\n- CasArgumentExtractor parses the request that is protocol specific.\n-  Creates a SimpleWebApplicationServiceImpl with the parsed bits\nAs a result, SimpleWebApplicationServiceImpl has no knowledge of the protocol.\n. In other words, Argument Extractors should be protocol-aware, and they should be done actually peeking into the request. Services that are created as a result of that parsing should be completely protocol agnostic...which is not the case here. \nAnd it is a pain point because if I were to create a custom service and am to follow the pattern, I'd have to:\n- Create the service class\n- Create an argument extractor for the service class\n- Have the argument extractor pass the request over to the service class\n- Have the service class parse it via a static method and call itself with what's parsed\nThe argument extractor unlike it's name does not actually extract anything and forces the service bean to be protocol aware, which is the thing this pull tries to solve. \n. That sounds like a great improvement. I'll capture it in an issue in a bit. \n. and here it is https://github.com/Jasig/cas/issues/708\n. Sure, I moved some ctors around and the finals are back. \n. I second that. This thing's primary job is to build a ticket id based on the hostname, and if it cant, we should probably fail. I'd be OK with warnings in logs as well.\n. Seems to go well with the rest of the file. I think our convention generally is 4 spaces  all around.\n. top is also included as the containing objectclass, which is the most abstract objectclass every other class inherits from. Seems to apply to both AD and OpenLdap. While many directories may be OK with not specifying this, I think ldaptive sort of warned me about this missing parent and seems to be good practice to keep it in here. \n. These complex objects are kept as binary attributes for now. There is another issue, which I'll try to tackle next that proposes to keep these JSON blobs. \n. We want to make sure we dont alter the DN; if the DN attribute is included in the list of attribute mods, ldaptive will consider it as a legit change, regardless of whether values are identical or not. \n. also bumping ldaptive version to x.4\n. Right; I realized role attributes may be multivalued and so it makes sense to be able to include all authorities in the final result. \n. Probably not a common \"mistake\", although double-safety never hurts. I think I accounted for this after I realized I could, by mistake, include duplicate names in the list of attributes. \n. Good point. I think the original intention was to be able to provide more diagnostics info, but that should not have any leaking side-effects. It might be best to simply log the response at DEBUG/TRACE level and leave the exception msg as it was. \n. So, this also relates to the other question of why \"a service component is serializable\". \nOur service model right now contains complex object types which need to be stored into ldap as a whole, rather than individual bits and pieces (as that would be both painful and impractical). So the idea was that we get the whole object serialized into a field and then back out. \nWhile this implements binary serialization, there was also the suggestion of having these in ldap as JSON character data, which would be somewhat readable and less prone to other issues. \nRight now, we create fields in ldap for lets say \"getUsernameAttributeProvider\" that gets the entire instance (and everything it carries inside it) serialized as a byte[] and puts it into the field. This is then deserialized on the way back out so the object is constructed in its entirety again. I plan to tackle this next to move away from byte[] and use JSON as the serialization strategy here. \n. Bears to say that while I was testing serialization/deserialization of these binary attributes, I ran into the reported issue, which turned out to require an actual provider reference to the connection factory. Good to account for either way, but probably wouldnt matter so much if we turn these byte[] into JSON. \n. Turns out, we are logging the response right now, so I'll remove it from the exception message. \n. This is brittle. Why dont we check for exact values? \n. Yes; there were a bunch of calls in CASImpl to get the TGT from the registry; all pretty much doing the same thing a getTicketGrantingTicket. So I made sure all of that is routed to getTicketGrantingTicket now.\n. Not sure I follow. You seem to be describing a use case related to spring-cloud/spring-cloud-security. Care to elaborate? Is this header something that is set by either of those two libraries? Do they have exact/specific names? Can we collect a list and retrieve them here? \ncalling a substring of 7 characters on something that starts with \"bearer\" is very confusing at best in the log run. Before building any kind of support for this, we should make clear why this is needed. \n. This should also be StringUtils.isNotBlank\n. Rather than a comment, make this a log entry; specify the header name in the log\n. The truststore is merely symbolic here, and is a copy of the cacers file for JDK7. We dont actually use the ldaps protocols under tests, but it seemed like the API requires one in order to initiate the config.\n. This String probably should be moved over to OAuthConstants?\n. Hmmm...probably not so. It would have made sense if we were keeping this new client-side repository as an optional thing, but since it is [and I think it should be] the default it does make sense any more to keep the listener around, right? We no longer deal with sessions anymore. \n. Yes, so there wouldn't be a need to overlay the entire xml file.\n. I added comments into the file. \n. Yes. Should the xmlViewResolver be uncommented and used, I wanted to make sure it has the right order. Anything that is based on InternalResourceViewResolver should be moved to the very last because it's a fallback that would catch everything. \n. Great. I took out the listener. \n. Yes, by default we include the cache reference implementation for the most basic need. there is another implementation dependency for ehcache which would make sense for someone already doing ehcache stuff.\n. Sadly, yes. Things like this could be removed if we introduce concepts like validators that I brought up in the other thread. A validator would have access to these factories to produce the final principal. \n. Sure, I guess it could be a singleton as well. I'll look into it. \n. These are the initial attributes passed and cached. This is because, when the principal resolver creates the principal it may have collected a set of attributes. We grab onto those attributes and capture them initially into the principal. \n. Good one. This is actually a typo and should be \"cached\"\n. Not exactly related, but I consistently received conflict errors as a result of inspektr pulling in transitive dependencies, so I excluded them explicitly. \n. This is really the interesting part. Ignore all the other reformatting stuff. \n. Adds an optional logo field to the default config. \n. The registered service is put into the context here, only if a service is extracted. \n. Not so much a JUnit4 thing here; it reads easier. i.e. \"Test the Save Method\"\n. Used a generator to create tests and it must have done that for me. Removed.\n. Have to do with WebUtils changes (pressed enter way too fast). The InitialFlowAction calls WebUtils to stuff a number of parameters into the flow/request scope. The action class is cleaned up, hence the change to WebUtils. \n. A serializable component like the one above requires a getter. \n. Sure. Plus, I think we were accounting for situations where a db column may not specify a value or may not be there simply, to ease upgrade paths. We can now say that this feature is supported and required, etc. \n. A serializable component like the one above requires a getter.\n. This can be removed actually.at the time I was experimenting with saving individual pieces of a service as json and I thought I could parse the json object directly, which of course did not work. \n. It is up there. The diff just does a bad job of showing it. See line (131-37)\n. When testing with UnBoundID at least (which could also be used as the backend memory store), the attribute value comes back in base64-encoded format. So we check first, and convert if needed. \n. Nope. IDE shows it's not used anywhere. so will remove :)\n. Test failure actually caused this change, something to do with the surefire plugin and forking of VMs perhaps. \n. Somehow the cache manager never actually cleared caches.\n. Actually, this is good idea. Maybe we could make checkstyle enforce that rule. I'll look into that as a separate issue but will update this one as well. \n. Honestly, not sure there, hence the heck. I dont think we have run into that issue before, but then again we were only storing basic strings in there and not a blob. maybe that makes a difference. @dfish3r might know more of course. \n. Path to a logo image is defined on a per-service level and defined in the service registry. We provide a sample image for the most generic service definition but of course it could be configured to be more specific per service id. \n. This is also fixed of course. \n. That's a fine idea. I have got some CS and FindBugs items planned ahead. I'll account for this as well in the standards. Would be a lot of noise to get this fixed as you noted, we have a mix right now but consistency one way or another would be even better. \n. Sounds good. I'll remove the call from populators themselves since the manager is calling the method anyway. \n. Well, the thing is we are not dealing with binary values at all. The attribute in question is declared as string/text value in the schema, and we are putting json in and getting json out. The json value is put into a description attribute of the entry, and my tests show that while it goes in as raw json value, it comes out base64 encoded, hence the need for the check. \nWe are no longer dealing with any binary attributes, and I had the assumption that this behavior was unboundid specific. \n. I'll account for your test of course too. Thanks. \n. More evidence:\nWhat goes in as json:\njson\n{\n  \"@class\" : \"org.jasig.cas.services.RegisteredServiceImpl\",\n  \"id\" : 883880829872605,\n  \"description\" : \"Service description\",\n  \"serviceId\" : \"https://?.edu/**\",\n  \"name\" : \"Service Name1\",\n  \"theme\" : \"the theme name\",\n  \"proxyPolicy\" : {\n    \"@class\" : \"org.jasig.cas.services.RefuseRegisteredServiceProxyPolicy\"\n  },\n  \"enabled\" : true,\n  \"ssoEnabled\" : true,\n  \"evaluationOrder\" : 123,\n  \"usernameAttributeProvider\" : {\n    \"@class\" : \"org.jasig.cas.services.AnonymousRegisteredServiceUsernameAttributeProvider\",\n    \"persistentIdGenerator\" : {\n      \"@class\" : \"org.jasig.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator\",\n      \"salt\" : \"Y3JDRVh4M3A1b2ozY1RKSQ==\"\n    }\n  },\n  \"logoutType\" : \"BACK_CHANNEL\",\n  \"requiredHandlers\" : [ \"java.util.HashSet\", [ \"handler8\", \"handle92\" ] ],\n  \"attributeReleasePolicy\" : {\n    \"@class\" : \"org.jasig.cas.services.ReturnAllAttributeReleasePolicy\",\n    \"attributeFilter\" : null\n  }\n}\nwhat is retrieved on the next call:\new0KICAiQGNsYXNzIiA6ICJvcmcuamFzaWcuY2FzLnNlcnZpY2VzLlJlZ2lzdGVyZWRTZXJ2aWNlSW1wbCIsDQogICJpZCIgOiA4ODM4ODA4Mjk4NzI2MDUsDQogICJkZXNjcmlwdGlvbiIgOiAiU2VydmljZSBkZXNjcmlwdGlvbiIsDQogICJzZXJ2aWNlSWQiIDogImh0dHBzOi8vPy5lZHUvKioiLA0KICAibmFtZSIgOiAiU2VydmljZSBOYW1lMSIsDQogICJ0aGVtZSIgOiAidGhlIHRoZW1lIG5hbWUiLA0KICAicHJveHlQb2xpY3kiIDogew0KICAgICJAY2xhc3MiIDogIm9yZy5qYXNpZy5jYXMuc2VydmljZXMuUmVmdXNlUmVnaXN0ZXJlZFNlcnZpY2VQcm94eVBvbGljeSINCiAgfSwNCiAgImVuYWJsZWQiIDogdHJ1ZSwNCiAgInNzb0VuYWJsZWQiIDogdHJ1ZSwNCiAgImV2YWx1YXRpb25PcmRlciIgOiAxMjMsDQogICJ1c2VybmFtZUF0dHJpYnV0ZVByb3ZpZGVyIiA6IHsNCiAgICAiQGNsYXNzIiA6ICJvcmcuamFzaWcuY2FzLnNlcnZpY2VzLkFub255bW91c1JlZ2lzdGVyZWRTZXJ2aWNlVXNlcm5hbWVBdHRyaWJ1dGVQcm92aWRlciIsDQogICAgInBlcnNpc3RlbnRJZEdlbmVyYXRvciIgOiB7DQogICAgICAiQGNsYXNzIiA6ICJvcmcuamFzaWcuY2FzLmF1dGhlbnRpY2F0aW9uLnByaW5jaXBhbC5TaGliYm9sZXRoQ29tcGF0aWJsZVBlcnNpc3RlbnRJZEdlbmVyYXRvciIsDQogICAgICAic2FsdCIgOiAiWTNKRFJWaDRNM0ExYjJvelkxUktTUT09Ig0KICAgIH0NCiAgfSwNCiAgImxvZ291dFR5cGUiIDogIkJBQ0tfQ0hBTk5FTCIsDQogICJyZXF1aXJlZEhhbmRsZXJzIiA6IFsgImphdmEudXRpbC5IYXNoU2V0IiwgWyAiaGFuZGxlcjgiLCAiaGFuZGxlOTIiIF0gXSwNCiAgImF0dHJpYnV0ZVJlbGVhc2VQb2xpY3kiIDogew0KICAgICJAY2xhc3MiIDogIm9yZy5qYXNpZy5jYXMuc2VydmljZXMuUmV0dXJuQWxsQXR0cmlidXRlUmVsZWFzZVBvbGljeSIsDQogICAgImF0dHJpYnV0ZUZpbHRlciIgOiBudWxsDQogIH0NCn0=\nDecoded:\njson\n{\n  \"@class\" : \"org.jasig.cas.services.RegisteredServiceImpl\",\n  \"id\" : 883880829872605,\n  \"description\" : \"Service description\",\n  \"serviceId\" : \"https://?.edu/**\",\n  \"name\" : \"Service Name1\",\n  \"theme\" : \"the theme name\",\n  \"proxyPolicy\" : {\n    \"@class\" : \"org.jasig.cas.services.RefuseRegisteredServiceProxyPolicy\"\n  },\n  \"enabled\" : true,\n  \"ssoEnabled\" : true,\n  \"evaluationOrder\" : 123,\n  \"usernameAttributeProvider\" : {\n    \"@class\" : \"org.jasig.cas.services.AnonymousRegisteredServiceUsernameAttributeProvider\",\n    \"persistentIdGenerator\" : {\n      \"@class\" : \"org.jasig.cas.authentication.principal.ShibbolethCompatiblePersistentIdGenerator\",\n      \"salt\" : \"Y3JDRVh4M3A1b2ozY1RKSQ==\"\n    }\n  },\n  \"logoutType\" : \"BACK_CHANNEL\",\n  \"requiredHandlers\" : [ \"java.util.HashSet\", [ \"handler8\", \"handle92\" ] ],\n  \"attributeReleasePolicy\" : {\n    \"@class\" : \"org.jasig.cas.services.ReturnAllAttributeReleasePolicy\",\n    \"attributeFilter\" : null\n  }\n}\n``\n. So, I guess somehow the attribute is marked as binary because isBinary returns true. I am not sure why the attribute is considered as binary. Does it depend on the nature of attribute value? I dont see any references to binary attribute config in the context. \n. This seems to do the job well:\n``` java\n        String v = null;\n        if (attr.isBinary()) {\n            final byte[] b = attr.getBinaryValue();\n            v = new String(b, Charset.forName(\"UTF-8\"));\n        } else {\n            v = attr.getStringValue();\n        }\n    if (StringUtils.isNotBlank(v)) {\n        return v;\n    }\n    return nullValue;\n\n``\n. yes, string concatenation directly is frowned upon.\n. You are perfectly right. This is the result of a bad merge with master. Fixed now. \n. static inner classes are preferred over to non-static classes, specially in this case since the class itself is used in a static-like manner. \n. That's fine, but that means that I'd have to mark the builder itself as static, since the method that creates the google service itself is marked as static. The other pull on arg extractors should hopefully fix this issue and remove static creator methods from service classes. \n. I am not sure if that would be threadsafe. It was previously shared, so falling back on the old behavior would likely be acceptable. At the same time, I'd like to get away from maintaining state as much as possible. Any perf issues with keeping it directly inside the method? \n. I cant find any other uses for it. These methods were all part of SAMLUtils before. There is areturn Base64.encodeBase64String(output);` call. It seems like it would make sense for us to encapsulate base64 encoding logic somewhere once and have it be used elsewhere. There are many other Base64 references in the code. Sounds like a reasonable pull to me. \n. See https://github.com/Jasig/cas/issues/760\n. Yup. See https://github.com/Jasig/cas/issues/760\nAll of this could be moved elsewhere into a separate component and called by others. \n. I am not sure I follow you here. We do test to see if the logo is defined; are you saying we should check and see if the logo actually does exist at the specified path? and if it doesn't, print a default logo? \nI'd be fine with those changes, but I think it's a bit overkill. Only reason a logo would not show up is because it doesn't exist at the path specified, or it's not specified at all. My analysis would be:\n1. If there is anything in the logo, use it. (if it exists it will be shown, it not, it wont)\n2. If there is nothing, fall back onto a default image.\nThat way, we leave the burden of checking for the path and diagnosing the logo issues over to adopters. otherwise we'd have to add scriptlets here to the login page. logo could also be a URL as well, which would be tricky because it can be dynamically generated. those are not easy to check correctly. \n. OK, that's fair. I can move it up to be as a field so long as there are no safety issues. \n. Great, thanks. My previous JSON snippet does not show it correctly, but there are \\n\\r elements in the final outcome which per your explanation causes the attribute to be marked as binary. \n. Sure. We do everything you outlined except the default logo config which I will add. \n. Sure does. Recommended approach, I read up, that allows for easier mods to the array. \n. Can do. \n. TicketException is an abstract class. The recommendation is abstract classes as far as naming patterns go need to state so in their name. Thus, TicketException becomes AbstractTicketException. \nLikewise, a class whose name is AbstractXYZ or XYZFactory must also be marked abstract \n. See http://checkstyle.sourceforge.net/config_coding.html#ArrayTrailingComma\nRationale: Putting this comma in makes it easier to change the order of the elements or add new elements on the end.\n...which I would agree with. \n. The constant is moved up, because the declaration order is wrong here. See http://checkstyle.sourceforge.net/config_coding.html#DeclarationOrder\n. Ah good one. We should be consistent, yes. \n. You are right. Probably could put that into TestUtils?\n. Thanks. \n. I'd recommend we overload the method, and have the default be passed there. That's easier to read, and makes for better javadocs. \n. It's possible that these values may need environment-specific tuning. I'd suggest we make that happen. Most adopters would rather change a few property values, rather than create new executors in the xml config. We just then ship with sensible defaults and let folks decide what the right value should be. \n. You're perfectly right. I'll make that change as well.\none thing I noticed that probably needs more work still as a follow-up is, these checks do not so much work with Test classes. I cant figure out why yet, but I'll get around to that later. \n. Thanks. I sense another commit coming up :)\n. These are duplicates, actually. There is a check that makes sure we have unique properties. I removed the duplicate ones, which for the most part, were really identical value-wise. \n. Turns out, this was only used in one test class. I moved it over as a private method. Thought about TestUtils, but realized I'd rather not use webflow dependencies in the core module. \n. We dont, but maybe we should. There are a few other ones that dont receive the annotations and we rely on defaults. I'll make the change for all so it's consistent. \n. I would recommend the following two ctors:\n- One accepts a full executor as a single parameter\n- One that constructs a ThreadPoolExecutor with the following values: 200, 200, 0L, TimeUnit.MILLISECONDS\nWe might also want to think about simply changing the default to be constructed with a ThreadPoolExecutor and 200, 200, 0L, TimeUnit.MILLISECONDS?\n. Similar to my comment above, rather than calling init(null), you'd just call init with the appropriate parameters received from the ctor. So you'd be overloading the init method as well. \nAnother alternative would be to come up with SimpleHttpClientBuilder class that is passed, and that would contain everything SimpleHttpClient needs. All settings would be injected into the builder instead which would possibly allow for less overloaded methods. \n. Agreed. This will be easier although I suspect it's done currently because it makes the spring config comfortable but I suppose we could still do this with init-method type attributes. \n. I suppose that technically depends on the JPA-Impl but with Hibernate, it should, yes. Here you are:\nsql\ncreate table RegisteredServiceImpl (expression_type VARCHAR(15) DEFAULT 'ant' not null, id bigint generated by default as identity (start with 1), attribute_release blob(255), description varchar(255) not null, enabled boolean not null, evaluation_order integer not null, logo varchar(255), name varchar(255) not null, proxy_policy blob(255) not null, required_handlers blob(255), serviceId varchar(255) not null, ssoEnabled boolean not null, theme varchar(255), username_attr blob(255), primary key (id))\n. Interesting piece being: logo varchar(255)\n. This is slightly troublesome; it seems like the only reason SimpleHttpClient has to know/reference the SimpleHttpClientConfiguration is because it wants to know the set of acceptable codes. Is there any way we could get rid of that reference? \n. It would be ideal, if the builder only needed the configuration object. the httpclient itself should not have to require it. \n. How do you feel about the following pattern/proposal:\n``` xml\n\n    ...\n\n This is your builder...\n\n\n\n``\n- The FactoryBean/Builder should then buildorg.jasig.cas.util.http.SimpleHttpCliententirely. \n- You could expose a constructor/setter onSimpleHttpClient` and pass the acceptable codes over. This removes the need to reference the configuration object inside the client.\njava\nnew SimpleHttpClient(acceptableCodes[])...\n- Same approach can be defined for the executor. \nInstead of \njava\nbuilder.buildRequestExecutorService(this.configuration, this.httpClient);\nYou could do:\n``` java\ndefinedExecutorService = builder.buildRequestExecutorService(this.configuration);\n// you already have the httpclient built at this point\nexecutor = new FutureRequestExecutionService(httpClient, definedExecutorService);\nnew SimpleHttpClient(acceptableCodes[], httpClient, executor)...\n```\nThis is the pattern we are borrowing from:\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/cache/ehcache/EhCacheManagerFactoryBean.html\n. My thought is that the builder here is really a factory bean, that produces a bean and ultimately puts that into the context. So your builder could be changed to be SimpleHttpClientFactoryBean. \nI also would like the bean that is produced from SimpleHttpClientFactoryBean to have zero dependencies on other objects. The SimpleHttpClientFactoryBean should inject it with everything that it needs, primitive values if possible at all, and off it goes. This should reduce the coupling between the abstractions and also, would be compliant with the single responsibility principal, because a SimpleHttpClientBuilder really should not be building a Executor. That's not what it's building. So that detail needs to go away. What really should come out of the SimpleHttpClientFactoryBean (or the builder, etc) is a SimpleHttpClient. Nothing more. \n. That would work as well if we end up merging the factory bean and configuration object. That's one less component actually which is great!\n. Amounts to the same thing really, force of habit. \n. Yes, it is testing for support for special characters :)\n. This merits a bit of explanation:\nConfidence of 2 means, normal level of confidence in the detection of bugs. (1 being the highest, 3 being the lowest)\nRanks 1-14 are considered somewhat serious. 15 and above are like \"Fine, but nothing serious for the moment\". \n. Instead of this, use the loop right below this.\nCheck if the value is null. If it is, dont add it\nIf a value in the collection is null, also dont add it\nWhat would a value be null? what circumstances would cause it to be null? \nAlso the build is failing. \n. What's the rationale behind removing this line? \n. Not sure it can though. The only other thing that deals with services here is the grantServiceTicket() which is also marked as synchronized. No other way for services to change. \n. No, it is to be committed. There is nothing else to fix :) (The PR passes). \nThere are more categories to account for, but they are not here yet. I will gradually introduce more by category. \n. I could revert, but I am just having a hard time digesting this. this.services is not exposed. It's only contained within this class which means nobody else would have a reference to it, except for the unmodifiable map that nobody cant do anything with anyway. I would have understood this better if we actually we exposing services out and naked with no protection. Right? \n. Cool, thanks for the explanation. I get it now =) I'll revert and will also put this into the javadocs. That should make it easier for future mods. \n. Actually, it seems like it does not matter. See this please:\n``` java\n            HashMap map = new HashMap();\n            map.put(\"name\", \"misagh\");\n        Map cannotChangeMap = Collections.unmodifiableMap(map);\n        assert cannotChangeMap.containsKey(\"name\");\n\n        map.clear();\n        assert map.size() == 0;\n\n        assert cannotChangeMap.containsKey(\"name\");\n\n```\nWhile the original map changes, the \"snapshot\" never does. Makes sense? \nI ran this on JDK7-8. \n. This passes too:\n``` java\n            HashMap map = new HashMap();\n            map.put(\"name\", \"misagh\");\n        Map cannotChangeMap = Map.class.cast(map.clone());\n        assert cannotChangeMap.containsKey(\"name\");\n\n        map.clear();\n        assert map.size() == 0;\n\n        assert cannotChangeMap.containsKey(\"name\");\n\n```\n. Ah, I figured it out. I am an idiot :)\nWhile I ran the tests, I didnt realize I had to start the VM with a -ea option. Once I did that, tests started to fail. \nThis seems like a much better option:\nhttp://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/ImmutableMap.html\n. I pushed the change up.\n. SimpleHttpClient is always created via a factory bean. There is no reason to expose it publicly, as it's just an impl detail. \n. Ah, per findbugs, \"Component exposes internal implementation\" is listed under malicious_code.\n. Well, we could minimize the expense by making sure that the call is executed only once, and this could be done in the docs as well. Otherwise, it is an array, whose reference is in control of client and can be altered. \n. Sure, I always favor returning lists over arrays. While it may not be a practical risk (chances of someone trying to mess around with a referenced copy of the array are probably none and that no \"serious\" damage can be caused), it still could be considered an improvement to remove all malice. \nAs you noted though, cant change the return value (otherwise, I would have also changed all \"byte[]\" returns to a list of something) \n. I did start out with Base64 utils and then realized that's not what we are doing. Compression also makes it sound like we are dealing with zip/jar type ops but I am not sure what can make better sense. \n. It would be better, sure. At the same time, I suppose there are callers that already know how to handle null, that may not be comfortable handing exceptions. \n. Static imports being the key difference here :) We are just loading one class here only anyway, to make the VM super happy!\n. Probably not. After all, it's just a test! But I didnt want to take discriminating measures. It's really just to make sure the tool can catch all possible issues, and generally, I suppose it's good practice too (another item for the conventions doc) \n. In other words: star static method imports? Goooooood. star import on classes? Baaad. :)\n. Actually, we are adding that here. Previously, the array was only checked for null and not the length. This meant that callers of this method could pass NULL for the VARARGS credentials which is somewhat confusing. (null array vs. zero-length array?) We either want to pass an empty non-null array or an overloaded version of that method which does not take the varargs.\n. See my note above please. Pass a null for a varargs argument is somewhat confusing because you'd then have to make a distinction between a null value vs zero-length value. \n. Oh, no! It sure is. See the line above it, and the parameter:\nfinal SingleLogoutService singleLogoutService = (SingleLogoutService) service;\nOnce I removed the cast, I renamed the parameter to hopefully generate a small diff.\nSee, I am behaving :)\n. I suppose we do, and per JLS, the proper ordering is \"private static final X\". \n. We should mark this as deprecated, both with an annotation and in the docs.\n. Lets mark this as final and initialize in the empty ctor. That would allow the ctor to actually do something useful. \n. excellent choice of syntax. we should probably convert the whole codebase over. \n. Can obj ever be null? should it be annotated? \n. Is there any way we could generalize this? to declare a rule that says \"register all instances of RegisteredService\" ?\n. What about DateTime? \n. I say this, because we should really not be using Date anywhere. \n. Lets break this method apart in 2 sections: java-specific and cas-specific registration processes. \n. This seems like a short-term solution. \nI really would like us to come up with a solution that is more declarative. Manual registration forces us to think about serialization every time we change the API and object model. Is there something we can do with annotations to decoratively say \"this class supports x, and these fields should be serialized, etc\" and then in kryo code, we just scan, find those and write out using a single serializer? Annotations can be ours, we dont have to tie the codebase to any that kryo perhaps provides. \n. https://github.com/Jasig/cas/issues/751\n. > shouldn't we retrieve the service from the servicesManager by its identifier?\nI suppose that happens later down the road. It seems like we are creating a default service type with just the id and then later on that service is checked against the registry. I do agree with you, now that I review it again, that it does look odd. I suppose this only happens for satisfy tests? why are services being serialized anyway? \nI am wondering if we can do something with annotations but at the same time, I dont want other modules to be specifically tied to the kryo API. I am ok with the changes that you have presented, but long-term it would be great to find a solution that doesn't require any registration at all. \n. I am not sure the order matters here right? In this block, we have things like kryo.register(ArrayList.class); mixed with kryo.register(HandlerResult.class); Once is java specific, once is CAS. You dont have to break the method per se, but it would be better to at least group them. \n. Agreed, although it would have been even nicer if you could include multiple resources in the same block, like every other sane language does today :)\n. You are right. Faulty copy/paste here!\n. Great. Could we make that explicit somehow? or pull those bits out into a specific component that deals with tests only, just to remove chances of future confusion?\n. Exactly. \nThe test would work, but if you have an array of multiple items, element 3 could be null in theory. This problem could really be addressed via using a List rather than Credential.... For some reason passing null to a \"Credential...\" creates an array with a null value!\n. updated pull. \n. We should probably merge these two methods into one: putTicketGrantingTicketInRequestContext\n. ...and pretty much do that everywhere and replace all other individual calls. \n. ...and deprecate the other 2 methods. \n. Good point. It looks like I forgot to add @Component. Will do\n. I don't know if in practice it happens, but it's best to assume that it does given that the API allows for it. In fact it is there by design to allow for MFA-related functionality. \n. Yes, excellent point. We should change the code to match the protocol. \n. Looks like we have an indentation issue here\n. Suggestion: Create a list of all supported protocols as a const, and do list.contains(mechanism)=false instead.\n. Dont we have a util function for this, in WebUtils? \n. You're right. The name is specified as CASTGC. Maybe we could enforce both:\n- name of the cookie should be CASTGC. \n- value of the cookie should begin with TGT, etc.\n. Not sure I am with you on this one. This pull intends to provide a default generator in order to relieve someone from having to define one explicitly. That's not a warning to me because it's no longer the requirement (Specially if the to-be-configured generator is going to look exactly as the default anyway)\n. At the time, I couldnt  think of a better place to put it, but  now I have had time to sleep (on it!) maybe we could stuff the default instance into CASImpl itself. \n. I updated the issue in the description to clarify the use case here. This behavior is useful and intended to happen in order to not require explicit generators, specially in cases where they are not cared for. Suppose I created a new service and then an argument extractor. I dont want to, or should not have to create a generator for my service if I have no special requirements for it. That would just be boilerplate configuration noise. While my service could do some special processing on the request, my generator would not necessarily have to be all that special to require something explicitly being there. \n. Tough to say! My experiencing in arriving at this pull has thus far been dealing with some specialized deployments that merited parsing request parameters into a separate Service type. It still feels like something of an override would be in order, if only needed to bypass the default.  On average, I'd say chances of someone creating a new service are far more likely than requiring a particular type of id generator. \nThe other option might be to not add a default, but locate the generator based on an inheritance hierarchy rather than exact matches but that would obviously require a particular chain of components which may or may not make sense for a deployment. \n. No, just a matter of habit. I'll switch them out. \n. The difference that we get is a SetView and we need a set out of that. Guava always returns immutable copies. \n. The use-case that is implemented here is consistent with how the current Unicon addon functions. In fact, here we go one step further and expose an option to require all attributes. So the idea is:\n(Current addon)\n- Match one attribute name, whose value could match any of the required values.\nor if we require all attributes:\n- Check all attribute names and at least one value must match a required value.\nUse cases might be the following stories:\n1. To access service X, principal must have attribute Y whose value may match any of A, B or C. (memberOf=student or staff or admin)\n2. To access service X, principal must have attributes Y AND Z, whose value may match any of A, B or C\n   (role=admin or superuser AND memberOf=admin or superuser)\nWhat we dont have yet is:\n1. To access service X, principal must have attributes Y AND Z, whose value may match A and B and C.\n   (role=admin AND superuser AND memberOf=admin AND superuser)\nNot sure this last one is all that practical. \n. Indeed. Will add\n. yes, it should be hopefully. the message that is bundled says that the user specifically is unauthorized to access the application and that some form of contacting the helpdesk is required. of course cas server logs tell a lot more. \n. You're right. The service object that is passed right now is only complementary and in the default impl of the authz strategy, only is used for logging purposes. The problem is that the authz strategy, even though it's associated with a registered service has no way to accessing its properties which is why this pull sort of cheats :) but I can certainly clean up the API to remove the recursive passing of the extra parameter. \n. The authorization strategy that is presented here is not just about authorizing a user. It's merely a wrapper around authorization-like features that are individually put into the service registry right now:\n1. User is [un]authorized to access a service.\n2. User is [un]authorized to take advantage of SSO for a service.\n3. User is [un]authorized to access a service based on attribute configuration and roles.\nThe API wraps the above into a single strategy component.\n. See my explanation above please. Hopefully that makes better sense. \n. Seems like this would be just noise, sure. I have changed the level to TRACE. \nOur audit logs should naturally, just like before, indicate that a ST cannot be granted if a user is not authorized. Logs in generally will provide more info inside CASImpl just like they did before. \n. Absolutely :) I fixed this. \n. This is done on purpose, because principal attributes may not be immediately the same. If the attributes are cached, you want to retrieve the latest version. If they are not cached, you will receive the same map. Because we can't call principal.getAttributes() to always retrieve the current/latest set, we pass in a map instead that is pre-processed.\n. I dont, you're right. this can be removed...and now is :)\n. Yes that is a possibility. Doing cascade updates from the old to the new simply from the JPA perspective would be very difficult. It might be easier if we prepped a scripted patch that does the update and release that for people to run after the cas install, or to make explicit in the release notes that schema needs to be looked after.\n. no you are right. I'd missed out on a few.\n. If a service is not allowed to authenticate with CAS, from the CAS point of view, no user is allowed to authenticate with CAS which means no user, globally and universally, is allowed to use the app, specially if CAS is handling authentication for the app entirely. Practically, it's the same. If you disable a service and dont allow it for use for anybody, can you really say someone is allowed to use the app? No. It's just a matter of how it's disabled and by which authority.\nThis component does not deal with user authorization entirely. It deals with authorization. As part of that strategy, you can decide whether you disallow everyone, or some selectively. Whether we choose to call that a disabled service or disabled user amounts to the same thing practically. \nYou can think of the enabled flag as a global user attribute that gets set with false that blocks authentication for all users.\n. To be even more accurate, we are not even disabling users from the app perspective. We are saying: no user is authorized to use CAS for authenticating into this particular app. Thus, this service is disabled. This would make more sense if you were to review this context from solely a \"what can users do?\" perspective.\n. why yes, the name suggests that we are doing something with the principal where in fact we are passing attributes. Fair point. I can certainly amend this to be more like doPrincipalAttributesAuthorizeServiceAccess() or something better if you have one in mind. \n. Sure, point understood. At the risk of repeating myself :) I would add that the presented authorization strategy is more of a conglomerate collection of rules that would disable user access to CAS and thus the app. It combines configuration that can be applied to CAS and retrieves configuration that lives outside CAS for authorization purposes to compose all of that functionality in one spot. It's just a matter of, IMO, how you read the functionality out loud in terms of a use case. We could, as you suggest, separate the two (as the previous addon also did and focused only on the user-specific part). \nI certainly do agree that it would be weird to use \"enabled\" + \"user-attribute enabled/authorized\" at the same time. That would be wrong and impractical. Does this pull encourage that behavior? Not sure. Maybe we can better addressed by documentation and sample use cases? perhaps :)\nLet me ping @leleuj and @serac. What's your take here?\n. You mean instead of AuthorizationStrategy? Sure! [heading out for now but I will update the pull a bit later]\n. Tough to find a good name, specially for a non-native like me! I consulted with my thesaurus and almost every synonym it suggested gave me a good laugh :) I am not sure we can find a better name than AccessStrategy or AccessManager. \n. could we turn these into a * import?\n. Missing EOL.\n. Also, mock up urls and sample test. This is weird. Your test sort of violates API contract because these parameters should never be null or blank. You could use a test url.\nIn fact, please add a separate test for null checks and blank checks too!\n. The class name should be HttpMessageTests\n. Yes, these are moved to the view itself:\nhttps://github.com/Jasig/cas/pull/843/files#diff-ccda3fd7254a1043af2de6503809295aR71\n. To clarify, this is done because authN attributes are bundled with principal attributes. If no principal attributes are available for release, no authN attributes will be released. The code will make them all be in the same \"attributes\" bundle. \n. From the JSP perspective, everything is considered an attribute because they are all part of the \"attributes\" block.\nFrom the CAS perspective, authN attributes are of course separated from principal attributes. The code will get all user attributes, and will add authN attributes to the same collection, and the result is passed onto the JSP view. What this means then is that if no user attributes are released, the final collection size is greater than zero because we have always authN attributes to pass. (Previously user-attributes=0 meant no attributes at all)\n. Yes, the protocol does not differentiate between the two. \n. Correct, and good point on thread safety. I reorganized the encoder so the map can be passed around locally. Also fixed the docs issue. \n. These are separated out on purpose, so that extensions of this class can override the one they need. If I use the encryptAndEncodeAndPutIntoAttributesMap directory, that would mean encodeAttributesInternal would need to be entirely overriden, or extensions would have to override encryptAndEncodeAndPutIntoAttributesMap and do additional checking for the attribute name, etc. \n. I'd say, yes and no. Changes like those that you propose would require somewhat major changes to the protocol, and would likely break those clients that do consume attributes (like the PHP one for example). At the same time, consuming one block for the client is easier than two...and even if you broke it out in 2 different tags, you'd still have to look up attributes by name anyway. So I am not sure I see any practical benefits. \n. What you have in mind seem like client-specific to me. For instance, a client could do:\ngetCasAssertion().getAuthenticationAttributes()...\nor \ngetCasAssertion().getPrincipalAttributes()...\n...which leaves/allows the client to do all the parsing needed and make that separation, and decouples the CAS server from any future changes. \n. Agreed. They are different, and as you say, clients will need to look up the attribute anyway. I just don't want to impose major protocol changes. Even the bits that are introduced in this pull, I feel like we can simply dub as extension and optional attributes [as the protocol describes] and as I mentioned, I dont foresee any practical benefits. This is just a logical separation with minimum gain, the client itself can make that separation via parsers, etc.\n. No, you're right. But if you are going down the route of overriding things, you can always code your own encoder and do everything in plain text. The objective here, as I understand, is not to lock down the configuration 100%. While the code here perfectly encrypts and encodes all sensitive data, I'd imagine the overriding ability to become useful later on, during troubleshooting and dealing with encryption issues, and/or to accommodate future use cases, such that one could only override the piece that is causing trouble or is in question. For that reason, I am not entirely sold on the finality thing here. [Otherwise, we could mark the entire class as final and go about our own way]\nThe other issue, that is closely related to the finality of the class is the method separation. If I didn't have the dedicated methods for instance, I'd have to have something like this as is suggested:\n``` java\nprotected void encodeAttributesInternal(final Map attributes,\n                                            final Map cachedAttributesToEncode,\n                                            final RegisteredService service) {\n        try {\n            if (!initializeCipherBasedOnServicePublicKey(service)) {\n                return;\n            }\n            encryptAndEncodeAndPutIntoAttributesMap(attributes, cachedAttributesToEncode,\n                CasViewConstants.MODEL_ATTRIBUTE_NAME_PROXY_GRANTING_TICKET);\n        encryptAndEncodeAndPutIntoAttributesMap(attributes, cachedAttributesToEncode,\n            CasViewConstants.MODEL_ATTRIBUTE_NAME_PRINCIPAL_CREDENTIAL);\n    } catch (final Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n\n```\nTwo issues:\n1. It's simply not as clear. Would you rather read:\njava\nencryptAndEncodeAndPutIntoAttributesMap(attributes, cachedAttributesToEncode,\n                CasViewConstants.MODEL_ATTRIBUTE_NAME_PRINCIPAL_CREDENTIAL);\nor would you rather read:\njava\nencodeAndEncryptCredentialPassword(attributes, cachedAttributesToEncode);\n1. Lets say I wanted to override the encoder to do \"something\" with the PGT encryption. If I have dedicated methods, all I have to do is to override:\njava\nprotected void encodeAndEncryptProxyGrantingTicket(final Map<String, Object> attributes,\n                                                       final Map<String, String> cachedAttributesToEncode) {\n        encryptAndEncodeAndPutIntoAttributesMap(attributes, cachedAttributesToEncode,\n                CasViewConstants.MODEL_ATTRIBUTE_NAME_PROXY_GRANTING_TICKET);\n    }\nIf I dont have that dedicated method, I'd have to override the entire encodeAttributesInternal which is not something I wanted. I just want that one piece.\nMakes sense?\n. That being said, if you/others feel strongly against extension possibilities, we could just mark the encoder as final and leave everything else. \n. Directly inside the log4j2.xml file: https://github.com/Jasig/cas/pull/870/files#diff-1247a897c9e6da7eb28c8ca9bd007b73R23\nwith <Configuration monitorInterval=\"60\">. the interval is in seconds.\n. A meter measures the rate at which a set of events occur. Meters measure the rate of the events in a few different ways. The mean rate is the average rate of events. It\u2019s generally useful for trivia, but as it represents the total rate for your application\u2019s entire lifetime (e.g., the total number of requests handled, divided by the number of seconds the process has been running), it doesn\u2019t offer a sense of recency. Luckily, meters also record three different exponentially-weighted moving average rates: the 1-, 5-, and 15-minute moving averages.\nhttps://dropwizard.github.io/metrics/3.1.0/manual/core/#meters\n. Fixed. Found a few more as well and fixed all.\n. Done on purpose. Less noise.\n. Done on purpose. Less noise.\n. Done on purpose. Less noise.\n. Fixed\n. Fixed\n. Pretty much all log configuration looks similar. Only a few instances are different where certain package names are turned off. Some levels have changed also to produce less noise, but no loss of functionality. \n. Point taken, but given that we are modifying the statistics features of CAS, this seemed like a natural fit to produce more stats. Does that make sense, or would you still rather see this in a different PR?\n. This is 100% mandatory. There is no other way to start the logger context via spring and have it be configured to look up the log4j config file. This is a workaround that decouples the config from the code. Without this class, the only other way to start the logger is to put the config into the web.xml file and that is not practical for our purposes. So we do need this. \n. Controllers that deal with statistics and healthcheck require this. This seemed like a good place to add, and is consistent with the way the management app also works and uses this config.\n. Oh by the way, what seems to be the problem with the jetty plugin? \n. Yup. Just pushed the change.\n. Here is the longer explanation:\nLog4j2 automatically starts itself via no configuration. It attempts to locate the log4j configuration file from a number of predefined places, if you dont set the location of the config file. If you want to explicitly control the location of the file, it is suggested that the setting be placed inside the app's web.xml file, which isn't going to work for us, because we want to let Spring handle the initialization and the setting of the config file for log4j and control that location from the cas.properties file.\nSpring itself only works with log4j1. No support for v2 exists. Hence the reason for this class's existence.\nThis is what it does:\n1. First, we disable the auto-initialization of log4j2 via the web.xml\n2. Then, in the log4jConfiguration, we specify the path to the log4jConfiguration, and the package where the log4j2 initializer exists. This is the same initializer that would run automatically [which we disabled] and now we are going to find it and invoke it programmatically.\n3. So, the code here attempts to locate the initializer, and set the log4jConfiguration file location parameter and then starts the logger context. \n. Additionally, the scanning logic is done on purpose to not tie the code itself to any log4j APIs. Everything is controlled via the XML configuration file that is log4jConfiguration, as before.\n. Seems like a problem with multiple bindings. Have you been able to debug the logger factory and step through the code to see why you get the NPE? \n. This has been the lazy me copy/pasting the config file for all modules. I have fixed all such errors in the most recent commit on this pull. \n. Sure. Moved. \n. Well, of course logj2 is still fairly new compared to v1 and its adoption rate has only been slow. I'd imagine folks are still catching up to the new syntax and frankly, most probably don't see a need to. Logging generally speaking is not most pressing/interesting bit of a given application, but as we deal with authentication and requests, auditing, security offices and concerns about performance, I feel that pros outweigh the cons. I am hoping we can cause a micro bump in that trend.\nSpring is probably not the best example. By support, I meant that they dont provide a class to initialize log4j2. That's what we have now, and that's the extent of their support. Spring itself uses commons logging as I recall, so they are not a fair comparison.\nThere is simply no way that you'd be able to initialize log4j2 and keep the same desired functionality. No way to get around it, other than plugging directory into log4j itself, which is something we do here in a most decoupled way. Using the Log4ContextListener would mean that you make the configuration exist inside the web.xml file, and that is simply not practical for overlays, if we can find a way to control the location of the file via spring and properties.\nAlso, using Log4ContextListener directly would mean the codebase would be tied to that API. You'd have to import packages, and start calling that API directly. We dont want to do that, since we use logging bridges and such and want to abstract all of that away. Thus, we need to come up with a way to initialize the logging system without directly calling their API and simply reference standards and generics context listeners and hide the actual implementation. This is a safe way to do so. \n. Point taken, but I'd also say that these log files are all related to tests and nothing significant comes out of them. No big deal, but I'll take another pass.\n. Nice, and you're right. I'll do this on-demand here and file an issue for cryptacular.\n. Indeed. Trying to serialize an actual public key instance will result in a whole mess of stuff that is impossible to fathom. \n. You can implement the CookieValueManager itself, but you should not be able to modify the default cas behavior. There is not much value in picking choices, either the value is linked with the default pieces, or you write your own. \n. Perhaps, but I didnt want to add yet another java class file to host 4 lines of code. We could move it out though. It's just a matter of organization. \n. The CipherExecutor needs to be CAS specific, so it can be pulled out or replaced with other impls I suppose. We are using a library for the encryption and signing of course but the wrapper on top of those calls would be better served if it was CAS code. Much like the HttpClient wrapper we have. \n. Good point. Can do. \n. This is cleaned up. \n. Removed\n. Done\n. Good catch! Fixed.\n. It should be, yes. But we cant use the view name right now. I'll add a separate view resolver.\n. Right now, CASImpl is the intermediary between web requests and the ticket registry. So it handles most if not all of the ticket-related ops. Depending on the underlying ticket registry, yes, this might take a bit of time. \n. Sure. I'll delete them both but then have to move <context:component-scan base-package=\"org.jasig.cas\" /> from the app context. Because of the file load ordering, the servlet file loads first and the scan needs to happen first thing in the load op. \n. Cant, because we also need to return JSON data for the report. \n. No this could never happen. Tickets are filtered above. \n. Thanks. Fixed the formatting.\n. Good point. Will do\n. Restarts the flow from the original event id, by simply redirecting back to the initial url. \n. No, I would think any other impls would want to extend the class itself and handle the storage mechanism. This is for a super simple use case and more like for demonstration purposes. Almost ALL impls would want to extend this class to look into a db or ldap server. \n. I found out that there are many other keys out there that we dont necessarily have anything for them in our bundles, and dont want to anyway. Spring and Spring Security for instance try to load off the description of their error messages from the app bundle, and to generate a warn for very single statement is just noise. If the key is not found, the key itself is used verbatim and to investigate, an accepted approach is to always turn on DEBUG. \n. Good point, I'll yank this out into another PR. \nThe fix that was applied is not enough, because if obtainCookieValue throws an error, CAS would still crash.  (say, IP mismatch) \n. Could we externalize this into the parent pom? Trying to avoid phantom versions in specific poms. \n. No. The change is, we had protected static final Map<AccountState.Error, LoginException> ERROR_MAP; which is reported as an error with findbugs because the map can be controlled from outsider components in the same package. So I made sure it's only visible to its children.\n. If the service is found, we are ok. But if not, and this option is disabled, the flow would throw an exception informing the user which is the intent of this PR. \n. It's not, because while beans under org.jasig are retrieved, those beans themselves could have dependencies to other components that may not be under org.jasig. (i.e. a bean could have ApplicationContext, etc as part of Spring) So we really are interested in the stuff that we have written :)\n. Required to use a new style, in order to accommodate CertUtils.toString()\n. Dont think so. It's provided as just a String. \n. Unfortunately no, because the LdapContext is not automatically closable. \n. It's not, yes, because it already exists as an available resource in the x509 module. \n. I remember that I chose object specifically, because not everything could be classified as URI, URL or Resource. an LDAP location is not a URL but a URI, but there is not URIResource in Spring, only a URL! So I opted for Object to cover all bases.\n. Good idea! I'll start working on that next to see where I end up. I am sure I'll have questions for you and Daniel. \n. On second thought, how do we imagine populating the connection config with the ldap url received at runtime? I imagine the ldap-fetcher would require access to a connection factory and a connection config, to auto-populate the config and pass it onto the factory? \n. @serac would you be amenable to me merging this pull? and then you could take over the ldaptive config when time allows? It's taking me longer than I'd hoped and I'd be happy to pass it over to you. \nOr if you'd rather make changes to this pull, that'd be fine too. \n. I think I ran into a few problems with that approach. A factory requires a connection-config to spin up and that config must have an ldap url before it can be used. Since I dont know the ldap url beforehand, I opted to simply pass the config around. The config needs to be prepped dynamically so it can be set on the factory. \n. See my note above please. As it turns out, initializing a factory without a url at hand is not possible, since the URL itself is coming from the cert. \n. Sounds good. I'll reset to null and make it be required, assuming you're OK with the remaining comments below on passing around connection factories. \n. Appreciate it. I did post a message to the ldaptive mailing list as well. Not sure if he's had a chance to review it. \n. So, every LDAP URL that is tied to a given LDAP fetcher will use the same settings. This way, more than one can be wired into the config with different settings. Some will use no security and some will not. Or did I misunderstand your question? The configuration I believe allows one to inject appropriate values for each fetcher, that way, a deployer can customize what needs to be passed in for a given ldap url to make a connection work. \n. I realize it does sound strange and it's probably not all that common. Here are the two scenarios:\n1. If a deployer already knows everything about the LDAP instance, he can certainly set that all up in the connection config. The patch here only sets that URL if one is not already configured. This is useful when checking CRLs generally from a known LDAP instance with everything known beforehand. In this case, the cert itself matters not. We just have a generic ldap fetcher that knows where to connect and what to retrieve beforehand.\n2. In cases that one does not know any details, generally no security constraints are defined. This would be an anonymous search that the deployer needs to configure in the context. In these cases, the ldap server is generally internal to the org and can allow connections without any additional security constraints. This is the sort of thing that \"usually\" is used by the govt affiliations. \nA similar implementation by cxf does the above for example:\n``` java\n    /*\n     * Downloads a CRL from given LDAP url, e.g.\n     * ldap://ldap.infonotary.com/dc=identity-ca,dc=infonotary,dc=com\n     /\nprivate static X509CRL downloadCRLFromLDAP(String ldapURL) throws CertificateException, \n    NamingException, CRLException,\n            CertificateVerificationException {\n        Map env = new Hashtable();\n        env.put(Context.INITIAL_CONTEXT_FACTORY,\n                \"com.sun.jndi.ldap.LdapCtxFactory\");\n        env.put(Context.PROVIDER_URL, ldapURL);\n    DirContext ctx = new InitialDirContext((Hashtable)env);\n    Attributes avals = ctx.getAttributes(\"\");\n    Attribute aval = avals.get(\"certificateRevocationList;binary\");\n    byte[] val = (byte[]) aval.get();\n    if ((val == null) || (val.length == 0)) {\n        throw new CertificateVerificationException(\"Can not download CRL from: \" + ldapURL);\n    } else {\n        InputStream inStream = new ByteArrayInputStream(val);\n        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n        return (X509CRL) cf.generateCRL(inStream);\n    }\n}\n\n```\n. One thing we may want to consider the ability to configure connection pooling may start to become a performance burden if there are many URLs specified in the cert. We have encountered cases where there was more than one URL provided in the cert, and we needed to check them all. \nNow, while that feature does not presently exist (as this PR only looks at a single URL), I am wondering if we need to ultimately provide other impls that simply do not do any sort of pooling and immediately close connections. \n. I am wondering if it might be easier for deployers if we provided two implementations. One that is not based on ldaptive with no pooling, etc (which the PR originally had) for simpler setups or those JJ mentioned, and we could have one for deployers that are already comfortable with ldaptive config. \nAll and all, I think it's pretty evident that most folks would benefit from some sort ldaptive namespacing mechanism to reduce the xml clutter. syntax sugar as it were.\n. i.e. Keep LdapResourceCRLFetcher to be based on simple javax.naming and move all of this into an LdaptiveResourceCRLFetcher.\n. Mark this as final?\n. I suggest we extract lines 93-96 into a separate method that can be overridden by extensions. \n. Certainly, I could override doAuthentication. However, my job would become much easier if I could plugin my own logic in a method that is exposed for me, such as:\ndoCustomStuff(webContext, userProfile, request, response);\nMuch less code for me to deal with and write. I could examine the userProfile here and have my way with it. \n. Use case might: upcon examining the user profile, I could throw an exception, log something to an external resource, etc before creating the final result.\n. Ah, you're right! Never mind. Didnt realize createResult is doing that. In that case, I dont think adding request and response is helpful. If needed, one could always override doAuthentication(). \nThanks for your patience with me. \n. Could we use a HashCodeBuilder, appending these arrays, and rather than 3 (which I think will make the build fail because it will be considered as a magic number), why don't init the hash with super.hashCode()? \n. It's going to produce too much noise, as not all saml requests contain a body. Specially the initial one read by the extractor will only have url parameters and setting this to debug will log a nasty exception that may confuse deployers. \n. Oh yeah, noise-to-signal ratio was just way above par!\n. Understood. Good point. \n. That's a mistake. Will correct. \n. Certainly not. This configuration was extracted from the Shib IdP config. CAS will auto-load the context file because it's specified in the META-INF directory, and it knows to look there for any spring context files that modules provide. This is the same strategy used by the Rest module. Nothing required of the deployer. \n. Had a look. The diff is actually confusing. Here's the actual method def:\njava\n    @Override\n    public String getNewTicketId(final String prefix) {\n        if (saml2compliant) {\n            return new SAML2ArtifactType0004(ENDPOINT_ID, newAssertionHandle(), sourceIdDigest).base64Encode();\n        }\n        return new SAML1ArtifactType0001(this.sourceIdDigest, newAssertionHandle()).base64Encode();\n    }\n. Understood, but my understanding is, that can also be specified as a regex pattern, something like \\w+.\\w+.\\w+.\\w+./\\d\\d\nAn exact string would require exact matches and that will not work so well against a range of IP addresses. (The pattern would then need to into a set) \n. Very good idea. I'll apply.\n. Will change. \n. Ah nice. I was looking for one, and turns out it's closeConnection(). Once we move to Ldaptive 1.1, we should be able to take advantage of AutoClosables\n. This also provides a semi centralized place to control the activation of spnego, such that CAS configuration would not be required by a deployer to allow a new request. No restarts, no mods. \n. Good point. I think I'll move this down to the hostname based action class. It has no use to be exposed as a public API. \n. Ah, I see why I didn't use it. LdapUtils is part of the ldap module on which we have no dependency here. The LDAP dependency that needed is ldaptive. As I said, moving to AutoClosables in the future would make closeConnection() calls unneeded.\n. Looks we might have to move this into a util package afterall. \n. Can we use BEARER_TOKEN here instead of the actual string? \n. Sure. updated. \n. I'd rather you call lowercase on the actual const. This isnt a real const. \n. Ah good point! we do not. I'll remove this. \n. That's fine idea. I'll make the change.\nNote that I am not sure it applies to clearpass. For extra security, it's best to enable clearpass+proxying via disabling empty proxy chains and not accepting any proxy. Otherwise, this could result into a security bypass issue where a service without having gone through the proxy dance gets to access clearpass. So, we want this value to always remains false. No need to further customize, in most cases.\n. Agreed, but this is implemented directly via the protocol. The very last index is always the primary authn, and everything else before it is the proxy chain that get pushed down the list in the response to note the order. I'll see if I can pull this out into a smaller more meaningful methof. \n. Yes, meant to be customized and adjusted by the deployer. \n. Sure. Good idea. \n. No that's different. What that does is, it periodically reloads the configuration from the source regardless. What I am proposing is, configuration should be reloaded as soon as a change occurs, so you wouldn't have to wait 5 mins (or whatever the timeout is). You make it a change and it's instant. \nSuppose app owner X comes to you and says \"hey we need attribute X for our app\", and your registry is set to reload once every 1 hr. You cant tell him to wait an hour until the change is reloaded. You'd rather make the change and have him test it immediately. \n. Also what's proposed here is not so much a configuration option, than it is a feature of the registry. There is no way you can turn this behavior off. \"It should just work\", as you expect it to work. \n. Yes because at that point, the watcher has basically crashed. (i.e. disk failure, etc)\n. Sadly no, because a DAO is managed by the services manager instance. DAO loads the changes internally, but the manager sort of \"caches\" them, so you need to refresh both. \n. Reviewed. Here is what we have on CASImpl:\n1. destroyTicketGrantingTicket: single call to the registry to destroy.\n2. grantServiceTicket: single call to the registry to add ticket\n3. delegateTicketGrantingTicket: single call to the registry to add ticket\n4. validateServiceTicket: single call to the registry to delete ticket\n5. getTickets: single call to the registry to get ticket\n6. createTicketGrantingTicket: single call to the registry to add ticket\nAs you see, we always have single transactions. \n. No, you're right. Those are two transactions but I am not sure or don't really see what the side effects are. What does having Transactional at the top of the method really give us? \n. I had a talk with one of my colleagues who understands databases and hibernate really well, and we both came to the conclusion that having a Transactional at the top of the method doesn't really get us anything. There will be 2 instead of 1, but to achieve true synchronization and locking, it will require some truly fancy hibernate heroics and it will entirely depend on the database of choice. \n. And with that, are we good with this one? Seems like we have an agreement. \n. It's triggered automatically via Spring and OpenSamlConfigBean, which does everything this component does and more.\n. Also noteworthy that the above configuration causes CAS to crash\n. Good point. Let me rework the conditions and I'll add a few more test cases to cover all cases. \n. Typically, we always check the cache first to see if we have a CRL. If there is one, we simply return that one. If there is not one, we start checking distribution points in the url list and we optionally try them all until we find at least one that has that entry. If we find one, we cache it and return it. \n. I may have missed one; will double check. Could be github not showing the latest diff. Will report back. \n. True. Probably not needed, but annotations only kick it if there's a validator process. If you are calling init manually..., then they dont. Though, I'd agree that this is probably overkill. \n. Ah, it is. I should do a merge first I guess. Two many efforts in parallel. \n. No because argument extractors attempts to create services, or specific service types which we don't want to do here. We simply want to be able to manipulate the flow when it starts up. \n. No, I dont think so. The entityId is used to look up the metadata associated with it, and that is either filtered by the metadata filtering engine (which does sanitation there) or we do dynamic lookups via a metadata query service in which we encode the URL appropriately, an approach that is consistent with both the cas server and the client. (Also, findbugs didn't want me about it :D ) \nDo you have a specific check in mind that we could apply? \n. Good point. I'll see if I can move this to the context. \n. This is sort of consistent with how we do with CAS service's logo, and etc. These are elements that belong in the UI. They also provide flexibility for the adopter and allow him/her to decide how the UI elements should be organized if one was not available, but the other was,  etc. \n. I had a 2nd look at this. \nThis check here:\n(revokedCrls.size() == crls.size() && !revokedCrls.isEmpty())\nThis check here says: if all remaining crls (after checking and removing those that are expired) are considered revoked, then throw the exception and apply the policy. Otherwise, proceed. Because you may find that 5 crls are remaining, and only 2 of them have been revoked. So the 3 that remain are valid and we wouldn't need to apply the policy to those. The policy is only applied if everything is considered revoked; thus the check.\nDoes that make sense? \n. I reviewed this once more; I don't think we'd be able to move this to the XML config because it's a feature of the component that should automatically start as soon as CAS is started. It's not an add-on that can be optional; it must exist and I wouldnt want the adopter to create a whole bunch of complicated XML to manage this reloading aspect. \n. Let me propose this:\nYou have 5 CRLs initially. Once you go through the loop, you realize 5 are expired. So you remove the expired 5 from the original set. At this point:\ncrls.size = 0\nand because of that:\nrevokedCrls.size = 0\nSo it turns out that revokedCrls.isEmpty() is needed. If you take this check out, a revoked certificate exception will be thrown when all CRLs are expired and removed, and that is not what you want. \n. This is a good point. I think I should update the filter to make sure the entityId is only allowed to be specified once. While having more than one is fine, it's still a good safety check. I can update the PR to do this. \nThe entityId parameter is always correlated with the CAS server config to look up the right metadata; metadata is either static or dynamic from an aggregator. Even if you specified the wrong entityId, the worst that can happen is, a wrong logo for example will show up on the login page from the metadata that is associated with that wrong entityId. Nothing more. \n. I think this is the last remaining issue here before we merge; let me know if that helps to clarify the logic here.\n. I have updated the filter. Let me know please if that satisfies your request. \n. That may be possible. You could do something like:\n/cas/login?service=http://bad-app&entityId=http://good-app\n...which will cause UI data to be rendered via the entityId on the page. I dont know if we can do anything to fix this; if one chooses to operate with bad service definitions then so be it. As things stand today, the entityId must also be authorized via the service registry. If the registry is vulnerable then we might have bigger problems. \n. You are perfectly right! Removed the check. Thanks for bearing with me. \n. No it never should. When the populator runs, it is assumed that authN is successful. Need to double check, but I think that is the current behavior.\n. Because the cache name is tied to each instance, and is dynamically constructed with UUID every time the object is spin up. \n. You're right. This may be typo. I'll see if I can remove it. \n. Good point. Will do. \n. You have to consider that the cache is totally transient. If a service is saved to the database and retrieved back, a new instance of the cache is created. There is no easy and sane way to preserve cache data to persistence. I went that route initially. So much pain. \n. Problem is, transient does not work. It requires spring data's @Transient annotation only, and I didnt want to pollute the base object model with something specific to Spring data\n. Yes, helps to speed up queries. \n. We do, but Mongo also makes it a bit more difficult. It wants to serialize every private field that is declared inside the service object. So we have Logger, and it wants to serialize it. We have other fields that keep track of the data, set by the user that are completely hidden, that are dynamically constructed and have nothing do with service definitions, and it wants to serialize them too. There is no easy way to ignore a field, other than using Transient as the annotation, and there is no easy way to ignore a type. Thus the noise here. \n. The registry is used to authorize which users are actually allowed to use Yubikey. A separate registration process may be available that allows users to register their device with their userid and only then they can use YubiKey with a registered device. Otherwise, I could just log in with my own Yubikey as you! Just because the OTP is a valid token, it doesnt mean it's actually authorized and is a valid credential.\n. I specifically wanted to avoid creating a new credential type. That would have meant way more work to configure the webflow, the UI, have separate resovlers, etc. Instead, this is modeled as uid/password, where you actually submit your userid as the uid, and your password is in fact the one-time password generated by Yubikey. We are still using username/password authN. The format of the password is different a bit. \n. Yes, you are expected to write one, to register accounts within your institution. This is used as part of the onboarding process. Users need to sign up, add their YubiKey device, set recovery options, etc. That all needs to happen, and then the Yubikey account is created. The registry then talks to that place to authorize the authN. \n. I do, yes. UIDs are mapped to OTPs. The registry Impl should take that into account.\n. Possibly, yes. The drawback of that approach is, it needs explicit configuration and updates to the documentation so that we highlight configuration for each registry and those that are supported to do encryption. This way, everything is automatic. Your configuration stays exactly the same. No other changes. The only thing you're required to do is define a cipher which works for all registries. \nComposition here has other disadvantages: the wrapper that does encryption must be named ticketRegistry as the beanId, and the inner registry must be named something else. Which means all other config must be renamed as well. If you wanted to disable encryption, you'd have to reverse the configuration all together. Way too much work for an adopter.\n. Good idea. I'll look into shiro and see if we can remove much of this code here. For signing, we are using jose which is similar to how we sign cookies too. \n. Switched to shiro. Simpler. \n. > The ticketRegistry is defined in the ticketRegistry.xml file, so that's the only place you need to change something: rename the default one and create this new one.\nNo this is not true. It's not enough to change it there. Other places need to change as well that reference that bean. For example CASImpl expects a ticketRegistry. Extensions expect that bean id. In a MFA context, everything pretty much references that bean id. So can not change it. \nIf we do the wrapper option it turns into:\nxml\n<bean id=\"crypticRegistry>\n<property name=\"innerRegistry\" ref=\"ticketRegistry\" />\n</bean>\nThen, every place that references the ticketRegistry must be changed to point to crypticRegistry. That is a lot of work both for us, and the adopter in a deployment.\nThe above model also makes no guarantee from an API perspective, what the inner ticket registry may be. You are just passing a TicketRegistry. Because a ticket registry that is not cache-based and does not do serialization cannot support encryption. You can't protect what gets passed to you without API changes, so you only solution is to throw exceptions when things fail, and then document \"X is supported, but Y isnt\"\nBecause of that, you have to maintain a separate configuration block and ask people to configure wrappers and inners accordingly and go through their configuration to make sure everything they have defined as ticketRegistry is now updated to support that. Also not an option. \nAnd if you're going to make API changes to protect against what's passed to you, you might as well do it correctly. Wrappers work better if you're writing extensions. Since we have access to the API directly, might as well do it directly. When you enable Ehcache or Hazelcast ticket registries, you should not have to make a decision and then understand whether your choice supports encryption or not based on docs and user forums. You automatically get that support. Just have to enabled it. You also should not have to define wrappers to communicate the idea that you're trying to intercept something. If you can do it directly, why intercept it?\n. Also worthy to point out that the changeset here is 100% backwards compatible, even though per release strategy, it may not have to be. \n. Also, bear in mind that if you are just running with the default ticket registry which is perfectly sufficient for single-node CAS deployment for smaller deployments, you do not need to enable encryption, which furthermore complicates your configuration if encryption support is enabled as a wrapper. \n. OK, that snippets makes more sense to me. There are still a few concerns:\n1. The DefaultTicketRegistry does not need encryption support at all. If you are running a single node CAS instance, there is no need for you to encrypt ticket data. Safety is not an issue here. Your data is kept in memory only, and never goes anywhere else. We could keep encrypted data in memory, but that seems overkill to me. The default config should remain exactly the same.\n2. Using the wrapper solution breaks existing overlays because XML config is required that would be missing.\n3. The idea of AbstractCrypticRegistry is effectively the same as adding that boolean to note encryption support. If you extend that class, you automatically get that support. For example, Ehcache would return true for that property while JPA may not. If you extend that class, you automatically have declared support, so there is no need to do this. The disadvantage of that boolean is, it breaks backwards compatibility because it requires API changes which we cannot do for a minor release. Alternatively, we could declare an interface, a marker interface that each registry implements to note that they support encryption. (Similar to Serializable)  but then again, you're back to the same solution where you extend/implement something to note support for encryption, which is the same as you extending AbstractCrypticRegistry. So we are not gaining much there. \n4. I don't entirely follow your description of events that would produce errors. Can you elaborate further plz? We have to consider that encryption MUST be optional. We should not change the default behavior to force that. Many ticket registries automatically provide that support automatically, or the adopter may choose to run the registry in a private network that is totally secure. The onus would be on them to figure out whether they need that support. So by default, if you have deployed Ehcache, your configuration should work exactly the same as it did before. Encryption is an extra feature you can then turn on. Whether you use composition or inheritance, you do need to create a cipher. Without it, you always run that risk. It's something you need to consult the docs for to figure out how to enable it. \n5. The biggest problem I see from a design POV is that the innerTicketRegistry can be anything. See #3 for more info. We need to protect against what's passed to us, because if we can make it work without any additional errors that is ideal. Another problem is that it breaks existing XML configuration in existing overlays which makes upgrades difficult. If we can make it work without any additional breakage, then why not? \n6. I still don't quite understand why the wrapper solution is better. I see the cons outweighing the pros. What benefits do we get, that are not already provided? \n. That's exactly correct. It only applies to distributes ticket registries that can do serialization, such ehcache, hazelcast, jboss and memached. I suspect it may also work with nosql-based registries such as couchdb and mongo, if we ever develop one. I have included sample snippets in the ticket registry xml file to show how a cipher can be added and this of course will be documented.\nGlad we came to a resolution on this. Thanks for bearing with me. \n. Most if not all CAS themes completely rip out the login screen; by that logic the CASVersion class is totally useless. Maybe we could log this when the context starts up as well? \n. Sounds good. I'll adjust the pull to get this logged. \n. You should CAS here instead. Direct access to registry is discouraged. The same call on CAS does other checks too some of which you have duplicated here. \n. move openid.identity into a constants interface? \n. This field is not optional is it? If it's not, can it be moved to the ctor? \n. Nevermind, I just noticed the field declaration. \n. Classes that are private dont need their ctor to be marked as public. That is redundant and useless. \n. Due to HSQL and Hibernate updates, keeping this as AUTO will cause NPEs now. \n. Classes that are private dont need their ctor to be marked as public. That is redundant and useless.\n. This is relevant to Checkstyle updates for reducing CC. The code is refactored into a number of smaller methods, is all. No other changes. \n. No. You have private static when you want to mark a method as private, and that method is getting called from a public static method or context. Non-static methods cant be called from static blocks. Static methods/blocks are often performance friendly and beneficial. Nothing suspicious about them :) \n. We dont require them; most have been there from before. The ones that we have written could be useless at times and too obvious, but I think we can do better. We just bad docs, not that docs are useless. That said, I think we can relax them further. \n. Maybe :) At the same time, less stuff to write. But I understand, we have been so used to creating \"public\" classes and using that keyword without hesitation that now removing it feels a bit strange.\n. Good point. I will update it to make it look more accurate. \n. This one is very tricky. How is the output actually rendered? I think the underlying openid lib has issues parsing \\n and \\r characters. \n. No comment required for loggers, yes. Properties can be ignored as long as they are conformant to Java beans. So for example, getStatus and setStatus do not need docs, but getAuthenticationTokenBasedOnX() would need one. The property javadoc setting is controlled via <property name=\"allowMissingPropertyJavadoc\" value=\"true\"/>\n. Remove the above comments from here. Add the property to cas.properties, and explain what the setting does. Comment out the setting of course. \n. Will need to update this once and if the pull merges\n. Well, since the parameter is optional per semantic versioning, I think this can be applied as a \"patch release\" to the protocol. A minor change would be more suitable if we had more drastic changes to the protocol. \n. Good point. Will update. \n. Could you explain a bit more? What sort of other responses? \n. Updated. Note that the protocol never returns http error codes. We do have a INVALID_TICKET_SPEC error code that is perfect for this sort of failure. \n. No. Well, I would rather not use Java code to register classes and rely on spring and auto wiring to do this sort of thing. We only do registrations in code where we cant reach the appropriate context. We also cant annotate ServiceValidateController with @Component because there are multiple instances of that class used for other purposes. \n. Correct, they cannot. One deals with the root web application context, and one deals with the servlet application context which is a child of the former. \n. Exactly. If you need access to the root spring application context, you need to add your XML config file to the META-INF/spring directory. If you need access to the servlet child web application context, simply create cas-servlet-oauth-oidc.xml and CAS will pick up. Note that the servlet is a child of the parent, and while you can reach up to the parent from the child, you cant do the opposite. So you may need java classes to handle bean registrations in a dynamic way. \n. That said, I think we may anticipate newer changes to the protocol to specially support multifactor authentication. so that might be a good excuse to bump this to 3.1, but given that I don't know we'd be able to do all of that for 4.2, I'd still keep it at a patch release for now. \n. Sorry, saw your comment after the face. Changed to cas_audit :) \n. Yes, finally :) \n. Yes, checkstyle related. The method length was too long. \n. It was a real change. This now references the parent class rather than the impl \n. Yes\n. The repository is part of registered service API. Each registered service instance must be uniquely identifiable. \n. Sadly, no. person directory wants Map<String, List<Object>> while CAS has Map<String, List>. So we need to convert\n. The idea is to enable further integration by extending the authentication machinery to Shiro. So that plugins written for shiro realms would be able to use CAS. Particular use case is the focus Shiro has on authN based on roles and attributes where CAS has no such thing. \n. Will fix the findbugs issue. Did everything else seem OK? \n. fromRegisteredService which is now broken into smaller methods. I think it was more than 150 lines. \n. As you see the class here is very much extensible. So adopters who wish to work with Shiro, can simply extend and follow through, and define custom realms and roles. This is used to control which authentication may be activated based on a role, so that if user has role X, this authentication can decide to execute, or pass to another. \n. You're right. These are leftovers and should be removed. Will do\n. I am just following the pattern here, but this file may not be needed. Left it there just in case. \n. Good point, yes. I'll create an issue to track this. Thanks for bringing it up. It is confusing right now. \n. Thought about realms, but a realm would allow shiro to use CAS I guess, right? We want an authN handler that can be plugged into the CAS configuration via Shiro. So there needs to be a wrapper like this.\nTo expand one this, I have come across far too many use cases where people have more than 1 authN handler, and they want to control which handler is activated based on a given role/attribute, specially when sources have duplicate accounts! so rather than complicating the API to add that support, I thought about using Shiro that does this quite well, and as such there is no need to reinvent the wheel. Shiro is also an acceptable library and pretty widely used, so should reduce the learning curve for those who understand shiro.ini, better than the CAS XML config, etc. AL though I understand a little bit of both is required. \n. One possible advantage might be that CAS would become a comprehensive SSO platform to not only work with a variety of apps, but also provide support for a variety of well adopted frameworks, so that we could cross this off our list. Similar to JWT, Mongo, and Stormpath, \"if you build it, they will come\". Specially for Shiro, JWT and Mongo, I have had several questions on whether CAS does this sort of thing. So we should keep moving fwd. \n. Sure, this one doesn't. The default impl of the attribute repository simply does what CAS does today. Maybe we could remove the word \"cache\". That might make better sense. \n. So the process is complicated, but needed:\n1. First person attributes are retrieved. \n2. If there is no merging required, simply convert to principal and return. 90% of cases.\n3. If merging is required, merge principal attributes with person attributes, and reconvert, and return. The step you refer to as not needed is used for merging to resolve collisions. \n. Unnecessary docs.\n. Checkstyle issue. \n. Adding required dependencies for JDBC authN and registry. \n. Transactions are controlled by AOP and can be turned off when not needed. \n. Yes. Attributes may have a size of 0. \n. I would say, yes because each serve may produce a response that is different. For example, openid responses are very different from SAML responses, and to produce one, they each need different dependencies. So we are mapping services to response for each service. This also has the advantage that modifying on response builder wouldnt affect another, which wouldnt be the case if we just have one generic builder.\n. Good point. Will fix. \n. Yes, everything that is supported by RadiusProtocol which are the following:\n``` java\n    /* The chap. /\n    CHAP(\"chap\"),\n/** The EA p_ m d5. */\nEAP_MD5(\"eap-md5\"),\n\n/** The EA p_ mscha pv2. */\nEAP_MSCHAPv2(\"eap-mschapv2\"),\n\n/** The eap tls. */\nEAP_TLS(\"eap-tls\"),\n\n/** The eap ttls pap. */\nEAP_TTLS_PAP(\"eap-ttls:innerProtocol=pap\"),\n\n/** The EA p_ ttl s_ ea p_ m d5. */\nEAP_TTLS_EAP_MD5(\"eap-ttls:innerProtocol=eap-md5\"),\n\n/** The EA p_ ttl s_ ea p_ mscha pv2. */\nEAP_TTLS_EAP_MSCHAPv2(\"eap-ttls:innerProtocol=eap-mschapv2\"),\n\n/** The MSCHA pv1. */\nMSCHAPv1(\"mschapv1\"),\n\n/** The MSCHA pv2. */\nMSCHAPv2(\"mschapv2\"),\n\n/** The pap. */\nPAP(\"pap\"),\n\n/** The peap. */\nPEAP(\"peap\");\n\n```\nI will update the docs to make this known.\n. If you see one that is missing, let me know. \n. In fact, I don't see yours in the list: EAP_TTLS_EAP_MSCHAPv2. So will add :) \n. OK, cool. I was too quick to look :) In that case, I'd just leave it be, unless a specific request comes up. \n. No this wont work. We need to make sure only the username is actually recorded, so this method here can do its job. You wont always have username+password, because you may have a different authN handler that does nothing with the password. \n. Take a look at UsernamePasswordCredential. Likely, the audit-related code is calling toString on the credential. Either we need to fix the credential or fix the audit code that stores it. \n. I think the best approach to this problem is to take out the \"password\" from the credential. \n. Setters are invoked via autowiring to adjust properties, based on cas.properties. We want to support defaults, where the default sometimes might be blank. If this check isnt there, the config property will be set to blank, which might cause issues with \"the real default\". So we only set explicit values if one is allowed, otherwise we leave it as be. \n. It may be that the \"real default\" value is blank too, but I didnt want to make that assumption. It may change later on. The default config should be left untouched. \n. Understood. Sounds reasonable. \n. Could you ever log into Service A, but have two active sessions for A and thus two STs? \n. I was thining about the comment on the issue:\n\nIs this possibly an issue when running multiple web nodes behind a reverse proxy? In that case, the same web-app (service) URL can be serviced by multiple back-end servlets, so you could have multiple internal sessions for the same user-facing service.\n\nDoes that makes sense or apply? \n. One other comment: I think this should be defined in the root pom, and then referenced down here. Since we have other modules that use the same dependency, it's good to make them all point to the same thing and make that explicit. \n. Cryptacular is used in transit by the webapp to handle webflow state. \n. To be clear, the suggestion is to move:\n<dependency>\n      <groupId>org.cryptacular</groupId>\n      <artifactId>cryptacular</artifactId>\n      <version>${cryptacular.version}</version>\n</dependency>\nTo the parent POM, and then declare the following in the x509 module:\n<dependency>\n      <groupId>org.cryptacular</groupId>\n      <artifactId>cryptacular</artifactId>\n</dependency>\n. Please add a log statement here to note that the ST is being deleted. It's possible that the entry is removed from the cache by GC, so if you are not able to delete the entry, that should be logged too. \n. Log at DEBUG level, or TRACE. TRACE would be better in fact. \n. I understand the concern about the too many calls. At the same time, I don't think that's a big deal, because the cache is supposed to handle large volumes and loads. The problem with not removing them and simply relying on the expiration policy is that while the ST may be considered expired from the CAS perspective, from the cache perspective it is still present! It is only removed from the cache expiration policy (and not CAS's) kicks in to clean up. That might be too slow, misconfigured and when it kicks in, depending on how GC works it may not actually clean up after itself.\nSo I think it's a safe bet to do this. Due to referential integrity, if you just remove the TGT from cache, objects that are linked to it may not immediately go away because they may be linked to other objects that are valid. It's a rabbit hole to try to figure out what is linked to what, so removing them all is a safe bet. \nIs there a bulk op with the cache that we could use to delete a batch of objects? If not, I'd be OK with this approach here. \n. Also add !isEmpty() just so we are nice to the compiler. \n. Why this? Are you getting proxy objects back that you need to find the real ticket instance? \n. See my comment above please.\n. There is a fair amount of duplicate code here, I suppose, across all registries. I think we need to clean this all up later, but certainly not in this PR. \n. Yes. The separate registry for STs was only added as part of a JBoss ticket registry when I traced the feature, and we no longer support that option, and I have never ever seen this separate registry used anywhere. Safe bet to remove it. \n. Copy that, thanks. \n. Even better :) \n. I also think this deserves a comment, to explain why sync block is removed. \n. Minor issue though. No biggie :) \n. Appreciate the comment. Would you mind turning this into a Java comment, or better yet, push a commit that turns that into a javadoc? \n. This is what I was referring to that will not work. We should use a simple flag here instead.\n. I think it would be easier for the adopter, if you changes this option to \"onlyTrackMostRecentSession\".\n. This is where the hostname/path comparison comes into play to compare services based on ids. \n. Great idea! Will do. \n. and you need to be authorized. The TGT that is passed is going to carry a principal that must have an attribute name/value before you can do anything. So not only you need to be authenticated, but also, you need to have a \"memberOf\" attribute with a value of \"admin\" for example. That way you can entirely control authorization via external systems that control attribute provisioning, like Grouper. \n. See https://github.com/Jasig/cas/pull/1194/files#diff-bc2887a6c98858eb875377a6be8d411aR103\n. What about fragments with \"#\" ?\n. I was thinking this might go into the ctor of TGTImpl, but then I realized that approach won't work if we would want to do this on a per-service basis. \n. I feel like a bit of logging here might be helpful. \n. You're perfectly right. I had in mind originally that services should be disabled, but since they can be easily modified by the json request, and we have authz, this is invalid now. Will update. \n. Actually, you know what; let's do this in a global configuration first. Skip the per-service config please. Now that I think about it, I think it's overkill to do this on a per-service level. \n. The idea is, if this feature is going to cause any problems people can simply revert back to the original old configuration with a global config. Nobody will ever understand this feature on a per-service level to want to customize it. \n. Bulk remove here. \n. With the current design, you can only plug in one access strategy into a service.  Are you saying there could be TimeBasedRegisteredServiceAccessStrategy that extends from DefaultRegisteredServiceAccessStrategy?\n. Sure. So everything you see under com.duosecurity is not our design and code. It is taken directly from DuoSecurity. Unfortunately, they do not publish their Java artifacts to any type of repository and recommend that developers take the Duo integration code directly from their repo. So, I grabbed a snapshot from the repo and added the files under com.duosecurity which is the same package they use. I also dont want to modify what they have to \"fix it\", because as soon as we start modding those files, upgrades become very difficult. We should be able to simply grab what Duo offers in the future and overwrite what exists in CAS, until they actually start releasing artifacts to central (which who knows when that might be). \nSo if you consider com.duosecurity.* as a blackbox, the design is that you have a Duo handler that uses a Duo Authn Service to talk to Duo. There is also a DuoCredential that represents the username and the signed token that is generated by CAS and passed back to the Duo API. \n. See https://github.com/duosecurity/duo_java/issues/1\n. P.S: I also thought about using jitpack to get Duo artifacts, but sadly, their releases on github are very very old and dont match what exists currently in the repo. \n. Should this be false? so we keep the current behavior as default? \n. Yes that's fine by me. \nI have long held the idea that we should have distinct classes for PGT and PT, so that we clean up the API to make that separation known. That effort might help with the problem you encountered here. \n. Sounds good. Will update. \n. Great. :+1: \n. Exactly yes. \n. Needs to be removed, since we already have an annotation-config element. Will do. \n. One is used to scan the context to replace properties. Once actually makes cas properties available to the context as Properties object. \n. Valid point. I think most modules have this definition. I will keep this here for now, but in a separate issue, will go through to remove duplicate scans. \n. Correct extra safety. Because features are bundled in the same module, we need checks like this. If we start breaking things down, then checks go away because you can expect that by mere inclusion of a module, its dependencies must be available and non null. \nThus #1192 \n. Nice :)\n. I was thinking that we could have one wrapper, that works with any authenticator. Is this not the case? Seems like your wrapper only handles username password credentials. Could we abstract this, so that later we could add mongo and jwt and etc? \n. Maybe we could create a overloaded call to just do addAuthenticationHandler ?\n. Lets qualify prop names. cas.pac4j.client.authn.typeidused or something. \n. Is it possible to auto detect what authenticators are available in the context? I think you need a map here for every authenticator to be linked to its profile creator. and you can then put the map into the context. entries in the map can be declared dynamically via Components. \nMakes sense? \n. Is there anything sensitive in the user profile that should not be logged? \n. This won't scale, I don't think. We need to be way more generic here. \n. Can this be moved to annotations? \n. Also, I am assuming this is added to the docs, but it should definitely be added to the cas.properties file of the webapp. \n. Could these lines here be moved into WebUtils? Seems like a common-enough op. \n. So this means, for mongo and stormpath, we'd have to write individual authN handlers that extends pac4j classes? \nIs it possible to write one Pac4j authentication handler that works every authenticator that pac4j offers?\n. Saw your note up above. Ignore this please.\n. Understood. At the same time, I think this will force us to create individual authN handlers for everything that pac4j offers. Not sure that's a good thing, but I understand the problem and your solution makes sense. \n. However, I do think this class should be marked with a Component annotation. Aliases could later be used to map this class to the primary authN handler. You should also attempt to autowire everything inside the class, but allow for optional fields. For example passwordEncoder could be autowired from a specific encoder for this class in the context using a Qualifier. \n. Is it possible that Clients can be autowired as well? So if you for example detect properties configured, you instantiate a facebook client or an oauth client? This is how google apps works in cas. \n. I really wouldnt want anyone to start configuring XML unless they absolutely have to :))\n. Yes it will, but it's not going to be used, right? It only gets used if you map that to an alias. Not mapping it would require declaring it in XML. Are you concerned about keeping objects around in the context? \n. I am not sure. The most popular are uses cases FB, OIDC and SAML. You are at the most going to have 5 clients in practice. While in theory it's possible to create as many clients as you want, in practice it will never be more than 4-5, and there wont be duplicate clients (i.e. no two facebook clients). \nI think we should shoot for the simple case and automate it like that. if anyone wants to declare 20 clients, that's edge case that could happen via explicit xml config \n. If so, I would be OK with that risk. If the module is included in the context, it IS intended to be used. So we better have those objects around to be used. \n. No I think it\u2019s fine. But perhaps pac4j should not log this kind of thing, or obfuscate it. \n- Misagh\n\nOn Oct 16, 2015, at 1:10 AM, LELEU J\u00e9r\u00f4me notifications@github.com wrote:\nIn cas-server-support-pac4j/src/main/java/org/jasig/cas/support/pac4j/authentication/handler/support/ClientAuthenticationHandler.java https://github.com/Jasig/cas/pull/1217#discussion_r42214364:\n\n\nfinal String clientName = credentials.getClientName();\nlogger.debug(\"clientName:  {}\", clientName);\n  +\n// get client\nfinal Client client = this.clients.findClient(clientName);\nlogger.debug(\"client: {}\", client);\n  +\n// web context\nfinal ServletExternalContext servletExternalContext = (ServletExternalContext) ExternalContextHolder.getExternalContext();\nfinal HttpServletRequest request = (HttpServletRequest) servletExternalContext.getNativeRequest();\nfinal HttpServletResponse response = (HttpServletResponse) servletExternalContext.getNativeResponse();\nfinal WebContext webContext = new J2EContext(request, response);\n  +\n// get user profile\nfinal UserProfile userProfile = client.getUserProfile(credentials, webContext);\nlogger.debug(\"userProfile : {}\", userProfile);\n  Credentials are the most sensitive and they are displayed appropriately (a few lines avode). We also consider some information like access token (OAuth) to be sensitive and they would appear here with this log.\n\n\nSo the risk is: if you turn on DEBUG on org.pac4j and read the log in the following hours (the access token lasts two hours for Facebook for example), you can take it and act on behalf of someone.\nDo you want me to remove this log, change it to trace or keep it (as the risk is unlikely)?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Jasig/cas/pull/1217/files#r42214364.\n. So my original idea was that we have one wrapper authentication handler only, and it would then be allowed to have a map of authenticators and profile creators. We would then be able to plugin in as many authenticators and profile creators as we would want, without writing authN handlers for every authenticator and every type of credential. But I see how that may not be possible.\n- Misagh\nOn Oct 16, 2015, at 1:04 AM, LELEU J\u00e9r\u00f4me notifications@github.com wrote:\nIn cas-server-support-pac4j/src/main/java/org/jasig/cas/support/pac4j/authentication/handler/support/AbstractWrapperAuthenticationHandler.java https://github.com/Jasig/cas/pull/1217#discussion_r42214022:\n\n+import javax.security.auth.login.FailedLoginException;\n+import java.security.GeneralSecurityException;\n+\n+/\n- * Abstract pac4j authentication handler which uses a pac4j authenticator and profile creator.\n- \n- * @author Jerome Leleu\n- * @since 4.2.0\n- /\n  +@SuppressWarnings(\"unchecked\")\n  +public abstract class AbstractWrapperAuthenticationHandler extends AbstractPac4jAuthenticationHandler {\n  +\n-    /\n-     * The pac4j authenticator used for authentication.\n-     */\n-    protected Authenticator authenticator;\n  I think you see your point, but how would you create two wrappers with different authenticators?\n  So I think this wrapper needs to be defined in a context with the appropriate authenticator (and profile creator), which is fairly straightforward.\n\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Jasig/cas/pull/1217/files#r42214022.\n. Sounds good. \n- Misagh\nOn Oct 16, 2015, at 1:14 AM, LELEU J\u00e9r\u00f4me notifications@github.com wrote:\nIn cas-server-support-pac4j/src/main/java/org/jasig/cas/support/pac4j/authentication/handler/support/UsernamePasswordWrapperAuthenticationHandler.java https://github.com/Jasig/cas/pull/1217#discussion_r42214579:\n\n+import org.jasig.cas.authentication.handler.PrincipalNameTransformer;\n+import org.pac4j.core.credentials.Credentials;\n+import org.pac4j.http.credentials.UsernamePasswordCredentials;\n+\n+import javax.security.auth.login.AccountNotFoundException;\n+import javax.validation.constraints.NotNull;\n+import java.security.GeneralSecurityException;\n+\n+/\n- * Pac4j authentication handler which works on a CAS username / password credential\n- * and uses a pac4j authenticator and profile creator to play authentication.\n- \n- * @author Jerome Leleu\n- * @since 4.2.0\n- /\n  +public class UsernamePasswordWrapperAuthenticationHandler extends AbstractWrapperAuthenticationHandler {\n  The AbstractWrapperAuthenticationHandler is generic, depending on CAS and pac4j credentials.\n\nThis UsernamePasswordWrapperAuthenticationHandler is the most useful handler where CAS username/pwd credentials are converted into pac4j username/pwd credentials.\nThe only left use case is for pac4j string token credentials (one string as the credentials), but I didn't know from which CAS credentials we could convert this.\nI'm open to any suggestion?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/Jasig/cas/pull/1217/files#r42214579.\n. Yes that might be better. What are our use cases for doing direct authN with CAS and pac4j? I sort of assumed that all use cases handle indirect authN. \n. Is this something that can go into pac4j itself? \n. So Spring Security has many other mechanisms for allowing access. Can they be supported without asking the deployer to write java code? \n. I suspect that IP Checking is perfectly fine for now. Never seen anything else requested. \n. Great. I'll check back again when the PR is updated. \n. Good catch. leftover from the move, and should be removed\n. What is the current behavior now? 401 or 403? \n\nWe have specific error pages that intercept those error code and show a \"you are not authorized to see this page\" message. Does this changeset work correctly to show that error? \n. I want to make sure this does not result into any conflicts or extra dependencies. Have you tested this too? \n. Fixed and updated the pull. \n. Perfect. I think you may want to exclude them all, because CAS explicitly declares all 3 of those. (not sure about codec)\n. Looks good. \n. Running an embedded jetty without this change will not fire up servlet context listeners that are annotated with @WebListener\n. Only the root webapp context is scanned. Not the cas-servlet files. So this bean could not have been available for context manipulation if it was in the servlet context. I could move the scan down month servlet context but that was not only so much more work, it also created lots of other issues. \nIt makes no difference really. All endpoints are functional. \n. Because that would break backwards compatibility.\n. Per the protocol, we should return an error. Blocking invalid input seems like a better idea than calling back to a default. The client would need to fix itself and would need to know that it did something wrong :) \n. Yup. It's very helpful when converting properties to collections. I resorted to doing this conversion via Java, because writing that line in Spring EL was just very confusing, and likely not possible. \n. Are these urls that would be decorated with logo images of various providers? don't see the images in PR :) \n. No problem. \nI was thinking to modify the demo server to include this configuration by default, and then thought images would look good there for the demo but that's a customization we can make to the demo server. No big deal. \n. should be externalized\n. all cache configuration should be externalized into the cas.properties file with default values\n. you probably also want to add a log level for ignite itself.\n. let's format this file using 4 spaces.\n. why are these consts public? are they used anywhere outside this class? \n. you also want to make sure cache names match the const name. use the actual const field to define the cache name via Spring El. \n. See the hazelcast config for an example. \n...or http://stackoverflow.com/questions/11577547/what-is-the-easiest-way-to-specify-a-list-with-values-in-spring\n. Dima, one other check, if the request does not specify a username/password, could you throw an exception or something similar? \n. Kewl! Thanks. Enjoy. \n. I'll get this merged in for now. If you could do a separate PR for the change, that would be great. \n. No, because that would sort of imply that the principal's attributes can be modified by the implementation here, or that the object can be downcast and passed around as something else.\n. Good point, Will adjust.\n. Most checks are the same for either call, because PT really is an ST. So checks that deal with service registry and authn policy and such are all shared. I'll take a look at the proxiedBy field and see if that can be moved elsewhere. Not sure yet. \n. Good point. Will do. \n. Is there a way this configuration can be detected by the registry and constructed through properties rather than requiring the adopter to deal with beans? \n. p tag not closed?\n. final? \n. Could be new HashSet<>?\n. This should use ToStringBuilder instead. \n. You don't need DisposableBean. Annotate a method with PreDestroy instead. \n. Lifecycle methods should not throw checked exceptions. \n. Was this adjusted? \n. Where is this actually referenced? Dont see it. \n. Ah never mind I see it. I do think it would be better if you don't require adopters to create this bean config, and just have them specify properties so YOU then create this bean for them.\n. For all the above checks, could we use StringUtils.isNotBlank() ?\n. Fix the build failure please. You now have an unused import for the line you removed.\n. That is possible; but there are a few concerns:\n1. The authentication manager is already too complicated as it is. Way too many configuration knobs. \n2. The proposal seems like a mixture of responsibilities to me; an authentication manager handles the authentication piece of given credentials. The supervisor handles the collection of those credentials. I would prefer to keep things separate. \n. The principal election strategy only decides who the primary principal is. In a multi-flow environment, every authentication attempt creates a new principal object. We need a strategy to figure out which of those can be considered the primary authentication, meaning the authenticated subject is the selected principal. This generally covers 99% of all cases; the remaining 1% may decide to use a more elaborate strategy to determine who the primary principal should be.\nIn a multi-flow environment, every authentication attempt creates a new principal object. The final principal is composed of 2 things generally:\n1. The primary id, selected by the strategy\n2. The principal attributes, which is combination of all principal attributes in the entire authentication event. In the event that 2 principals have the same attribute from two separate authentication attempts, they are merged meaning the attribute value becomes multi-valued. \n. Consider the following example:\n1. Step 1, authenticate with username/password: J\u00e9r\u00f4me/password\n2. Step 2, authenticate against stormpath\nYour primary principal id is selected by the strategy to be: J\u00e9r\u00f4me \nYour principal attributes are a combination of step1 and step2. \nYour authentication attributes are also a combination of step1 and step2.\nAfter all, your identity is a combination of step1 and step2. To the final outer layer, you are the entire event, because that is everything we know about you. \nIn most deployments, step2 does not produce any meaningful attributes, but in some cases, you may want to learn a bit more about the principal; so we need to cover steps.\n. You are perfectly right. Will remove. I had a plugin configured to auto-generate docs, and it scanned everything here!\n. We attach the authentication to the TGT object, not the webflow. The builder produces one final authentication object that is a conglomerate. It contains everything about the authentication event, collected from all authentication attempts. That translates to a deployment, where the primary flow executes authN1, and secondary flows execute the remaining authN events. The final result produced by the builder is attached to the TGT when CASImpl generates the TGT. \nYou may very well be right about the threading issue. I'll review and run some additional tests to see if I can move the builder to a local instance, or a thread-safe instance. \n. I could enable this test for mongolab, but I am concerned about performance. Guess we could give it a try. Need to make sure the db is cleaned before running tests because we only have about 500MB of free data, and overtime it might grow and fail tests. \n. This is called by either the service/ticket registry components @PostConstruct methods. \n. Could we use ProxyGrantingTicket.PREFIX instead? \n. Could we use ServiceTicket.PREFIX instead? \n. Could we use ProxyTicket.PREFIX instead? \n. Should we call super here?\n. Could we use TicketGrantingTicket.PREFIX instead? \n. Could do with a bit more description here. \n. Could do with a bit more description here.\n. While this works, I'd rather you check also for ServiceTicket instances, and then throw errors if there is any other ticket types. \n. Could do with a bit more description here.\n. Checkstyle may be bug you about this. Please add a space between for and then \"(\".\n. Shouldn't this also account for ProxyGrantingTicketImpl? I realize they are both the same entity, but for the sake of clarity, it might be best to include them both, or at the least, explain this via javadocs. \n. I think we should remove both these methods, unless unit tests require them. setTicketGrantingTicketPrefix was deprecated in the previous release so it should be safe to remove them. I see no value in allowing folks to set the prefix, unless this proves useful to you in your deployment already. \n. Awesome!\n. You also want to update the main context file that is pulled in. Same sort of changes should be applied. It's under META-INF/Spring. \n. Yup. Docs would be very helpful. \n. Nope, all good.\n. In theory it allows me to do something like this in XML:\n<bean id=\"myhandler\" parent=\"abstractPac4jAuthenticationHandler\" p:property=\"overriding a value\" />\n. Good point. I will account for this.\n. You are perfectly right. This can be removed. \n. Only if you access this via the browser, yes it is blocking. This is mostly targeted at command-line clients such as curl where credentials are auto-sent and processed. We still need to do more here, as I realize something like curl may not be able to handle the 302 redirect correctly. So I'll need to investigate this a bit more. \n. Sounds good. Will do. \n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Let's keep static imports as wildcards\n. This is strange. The method name suggests that we get back a TreeSet, not a collection. Either the return type must be changed, or the method name. \n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Do not change the sematics of the hashcode builder. This does not belong in this PR.\n. Do not add the equals method here. These should be moved down to the concrete ticket classes, not in this PR. \n. Should have been kept. \n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Don't think this will work with JPA ticket registries. We'll likely run into either schema or serialization issues. Let's keep this as long.\n. Let's keep static imports as wildcards\n. Let's keep static imports as wildcards\n. Let's keep static imports as wildcards\n. You'll need to explain what this class does.\n. Also a full name, or an email address would be best as the author. \n. Let's keep this as private. \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Why is this method marked as deprecated? \n. Need better javadocs. \n. Is there nothing in kryo that would handle this natively? \n. Let's keep static imports as wildcards\n. What is this about? \n. Where is this class used and why? \n. A single module with a single class in it that only does util is overkill. Can we get rid of this module? or move the class to the util package? \n. If the purpose of the module is to convert ZonedDateTime to something the schema can understand, we should then remove this module and make sure all the ticket api is considered as long. \n. Is this line needed?\n. You should likely call the base overloaded method here and for the one method above it. \n. where do we need Spring Security? \n. Unfortunately, I don't recall the exact case, but moving this upwards will cause issues later on. I know this because at some point not too long ago I attempted to do the same exact thing. It may work now that we have made a few API changes, but let's play it safe and revisit later. \n. I understand the rationale behind the this move; I do think we ought to remove them completely. If they should not be used, they should not be there at all since it doesn't make much sense to create a brand new class and mark methods inside it as deprecated, specially when no other methods or components access the deprecated functionality. If you were changing an existing class, I'd have been in favor deprecating things. \n. Cool. Thanks. \n. I would caution you against doing so; these components exist here because Duo sadly does not release their artifacts to Maven Central, which requires us to keep their code here locally and release/compile it locally. Which means we take what they have verbaitm without any changes because we want to continue doing so when they \"release\" new updates to the code, and that's just the easiest thing to. \nIt's up to you; I am suggesting what might work easier in the long term. Once Duo understands the benefits of a public repository!, all of this will be removed by a dependency to their artifact. \n. Also, note that commons-codec should also be removed since Java8 provides native base64 functionality. \n. Sounds good. If you are using IDEA, you may want to tone down the inspections. Our de facto grump! is Checkstyle (and Findbugs to some degree). If they are happy, we are happy :) Unchecked exceptions should never be declared in javadocs. That is just odd to me. \n. Gotcha. I meant that you could probably do something like this:\nreturn isLdap(r.getScheme());\n...\nreturn isLdap(r.getProtocol());\nThis should work. \n. That should not be needed at all. All ldap related functionality is handled via ldaptive. \n. Thanks. Removing Duo is simply not an option. Even though they make it very difficult to use their API in a sane way, they are by far the most popular option, and we want to make sure we support them. Most deployments of MFA would either opt for Duo or RSA. Both of which we support, or should. \n. Let's mark this as private. \n. You need a  @Qualifier here \n. You need a @Qualifier here\n. Move this to the top of the class please.\n. Missing @Component\n. @Component here\n. @Component\n. +@Component\n. +@Component\n. Always name components. Implicit behavior could be dangerous. Do this for all please.\n. Preferably, all of the above should have qualifiers. \n. This will help with extensions, because if I write my own impl of PrincipalAttributesRepositoryMapper, Spring will complain that it has found two instances of that, and will fail. Using qualifiers allows me to alias the impl correctly, or use the default beans in some other context. (This is probably why you didnt have Component annotations on the default impls, to avoid this issue) \n. Let's also add a qualifier here. Something like principalIdProvider, etc. \n. final AuthenticationContext authContext = WebUtils.getAuthenticationContextFromSWF(context);\nWebUtils.saveAuthenticationContextToSWF(context);\nThe above two calls are completely unnecessary for this PR.\nNote that is no SWF involvement here. NONE. It does not save anything, nothing is retrieved from it. Just like how things work today. SWF has absolutely no role whatsoever in managing the authentication in the current master, and neither in this current PR. It is completely and utter irrelevant. \nIt ONLY becomes relevant once we start adding multiple flows, and multiple ways of providing credentials. That functionality is of no concern to this PR. Your patch might be relevant for a subsequent PR that attempts to \"store\" the context across multiple flows/legs of the authentication. It does not apply to this PR. There are no other flows. There is no need to store the context anywhere right now. \n. If I were to explain this in a more palatable way:\njava\nfinal AuthenticationContextBuilder builder = new DefaultAuthenticationContextBuilder(\n                        this.authenticationObjectsRepository.getPrincipalElectionStrategy());\nfinal AuthenticationTransaction transaction =\n        this.authenticationObjectsRepository.getAuthenticationTransactionFactory().get(credential);\nthis.authenticationObjectsRepository.getAuthenticationTransactionManager().handle(transaction,  builder);\nfinal AuthenticationContext authenticationContext = builder.build(service);\n- Create a local authentication context at the start of the flow. Again, remember that there is only a SINGLE flow. One way to submit credentials. In your authentication context, only ONE thing happens. No more. \n- Obtain the credentials, and initiate an authentication transaction. The transaction will pre-vet the credentials. \n- Ask the Transaction Manager to process that transaction. \n(You may optionally repeat same 2-3, once we add subflows, and other ways to obtain credentials.  Again, remember that presently there is only a SINGLE flow. One way to submit credentials. In your authentication context, only ONE thing happens)\n- When you are satisfied, you finalize/build the context and instruct CASImpl to deal with it. \nNow, I think the question here is: do we have a proliferation of objects/components? Are we trying to create way too many abstractions? Possibly. Here is where the idea for these abstractions comes from:\n- An AuthenticationContext is the playing ground. It's local to every request, from start to finish. It's as if you go to the gym, and you reserve the gym for a couple of hours from when you enter until when you exit.  If that makes sense, then we need something to build this context for us. Thus AuthenticationContextBuilder. \n- Once you are in the gym, you pass the front desk and present your credentials by swiping a card into a reader. The clerk will take your credentials, process them and gives you a pass to the court. You enter the general hallway. \nThe reader is the AuthenticationTransactionManager.\nThe act of you submitting credentials and swipping it is an AuthenticationTransaction\nThe clerk is the AuthenticationManager.\nYour pass to the gym is an Authentication object. \n- Once you are in the general hallway, you attempt to enter the basketball court. Another clerk stands at the door. You present your team membership card by swiping a card into a reader. The clerk will take your credentials, process them and gives you a pass to the gym. You enter the court. \nThe reader is the AuthenticationTransactionManager.\nThe act of you submitting credentials and swipping it is an AuthenticationTransaction\nThe clerk is the AuthenticationManager.\nYour pass to the gym is an Authentication object. \nNote that your credentials are different this time. \n- You are then ready to exit the gym. The gym (AuthenticationContext) knows this about you:\n- You presented credentials to the first desk. Were successful. We know who you are, your address, your name, your email, etc.\n- You presented credentials to the clerk at the court door. Were successful. We know you play basketball.\nSo the gym will provide a comprehensive view of ALL of your activity and ALL of who you are. That's where the finalized AuthenticationContext comes in. \nAnd you do this in the present patch via AuthenticationContextBuilder#build()\nNote that again, in the present patch you do not enter the basketball court. There is absolutely no way for you to that via CAS. The act of submitting credentials takes place ONCE, and it's the only thing you can do. No SWF involvement; no need to record what you did, for the time being.\n. Also, please note that I am in no way advocating for this patch to go in :) My main objective is ensure none of this is too complicated, and that we all understand the same story. That's the most important bit. If the story makes sense, then we can write it in a way that makes sense to all. \n. The only other concept that remains unexplained here is authenticationObjectsRepository. That is meaningless to the story and it's just a technical glitch. Its main goal is to carry around objects that the authentication machinery needs, rather than injecting the same 3-4 components into every class and action. It's like speed dial on your phone. :)\n. Perfect. In that case, may I suggest then that we move this class into its own file? I realize it's small enough to be included as an inner class, but it might be better if we gave it its own personality. \n. Yes, thank you both. Sounds like we are getting closer to the finish line. \nBased on your review, I am inclined to do away with factories to reduce the object noise. Factory methods might work better as Dima suggests. I am inclined to keep the core abstractions for now but I'll know more once I see how the removal of factories and turning them into methods might help with the rest. So I'll carry forward with a new update and we then continue once more. \n@leleuj on your #3, yes we do. Note that the Service can be optional for the context because you CAN generate a TGT without going anywhere but this is absolutely required for a number of additional use cases which may not be too obvious, so I shall explain:\n1. A service in the context helps to enforce ABAC at the time of generating a TGT. We have ABAC enforced at ST validation time which is when the AuthZ rules kick in. This should really also be done at TGT time, and we could only do this if we knew what the service (optionally) was. So we need it there.\n2. On the roadmap, there is a request to implement authentication-per-service features. We'd want to accommodate a use case where one could say: This application should ONLY use this handler, and that application in the registry should ONLY use this other handler. I don't know the specific implementations of how that would turn out, but I do know for sure that for this feature, we need the service in the context. \nSo yes, it's needed.\n. Package private it is then. Thanks. \n. Here is another pass at the API based on the collective feedback:\njava\nfinal AuthenticationContextBuilder builder = new DefaultAuthenticationContextBuilder(\n      this.authenticationSystemSupport.getPrincipalElectionStrategy());\nfinal AuthenticationTransaction transaction = AuthenticationTransaction.wrap(new ClientCredential(credentials));\nthis.authenticationSystemSupport.getAuthenticationTransactionManager().handle(transaction,  builder);\nfinal AuthenticationContext authenticationContext = builder.build(service);\nfinal TicketGrantingTicket tgt = this.centralAuthenticationService.createTicketGrantingTicket(authenticationContext);\n- I removed the AuthenticationTransactionFactory and added a factory method to wrap credentials. I would have opted for for, except that I can't seeing how it's a keyword. \n- The sanitation of credentials is now moved to the AuthenticationTransaction, since the factory is gone.\n- As discussed, since we need the Service in the context, I opted to keep the AuthenticationContext around and the builder that goes along with that as the carrier.\n- I also do agree with Dima, that I wouldnt want upper layers to have access to the AuthenticationManager. The TransactionManager is the right intermediate glue here.\nNote that this API does not have to be \"perfect\". It has to be functional. It has to support MFA. It can always be revved later as we don't really consider any of this an \"extension point\". \n. Notice the attribute policy decides what attributes should be sent. \n. Ensure service is still valid and enabled. \n. Build the final access token via ID#SERVICE similar to typedIds. \n. This should be reverted. Project version implies that it should the version of the maven overlay. We want the cas version here stated explicitly. and it's something that all other docs use as well. \nOtherwise, gorgeous. Thank you. \n. @PetrGasparik It wont compile because that is expected of you to define. See https://github.com/Jasig/cas-overlay-template/blob/master/pom.xml#L79\n. jboss logging itself is a bridge that can work with slf4j. Since we already include jboss-logging on the classpath via hibernate, we are excluding it from here to remove versioning conflicts. \n. Added\n. I think we should provide a bit of explanation as to how these secrets are generated, using which tool, what length/algorithm is required, etc. \n. This should be\ncompile(group: 'org.pac4j', name: 'pac4j-jwt', version: pac4jVersion) {\n        exclude(module: 'slf4j-api')\n    }\n. Needs docs on this one I think. public fields require docs. \n. Should these be enabled by default? \n. Does this call ensure that service is not null and it's enabled? Remember that settings in the registry are auto-reloaded and can change dynamically. We need to check every time. \n. Seems like writeTextError always uses SC_BAD_REQUEST. Can we remove that parameter via overloads? \n. This is odd. Why the $?\n. I meant why not # cas.oauth.jwt.signingSecret= ? Most settings I think should be commented out unless needed. Otherwise they would show up in the UI under the properties report and might be misleading. \n. Also, this keys are mandatory for JWT support comment might be also misleading. I think you should clarify that keys are required for access tokens, since we also use JWT for token authN. \n. Done\n. Well it generates not just certificates by also metadata. What might be a better name to capture everything?\n. Good call. I ended up cleaning this part of the code a bit more. We now should have:\nclass ShibbolethIdpMetadataAndCertificatesGenerationService implements SamlIdpMetadataAndCertificatesGenerationService\nThe metadata generator of Shib is not as flexible as I would want it to be, so I imagined that there may be other impls out there who'd want to create their own via a different tool or lib. \n. This has to be reverted. The reason attributes are wrapped is because they need to be manipulated from Map later, and the map we receive is immutable. It might be better to fix the underlying map than to change the wrapper call. \n. There are converters that take a String and turn it into a bean, but as far as I know, they work with xml config manipulation. \n. Yes. Apparently, it's possible: https://stackoverflow.com/questions/9547170/in-gradle-how-do-i-declare-common-dependencies-in-a-single-place\nI'll handle this in a separate pull. \n. No. If you are starting from scratch, you access the endpoint to generate your metadata. That's all. If you do lose your metadata for some reason, meaning the file is removed from your metadata location, renamed, etc for whatever reason then the endpoint will regenerate them for you when accessed. If the file remains in the same place, the endpoint will simply show your metadata to you. \n. You're right. Never mind :) The diff threw me off. Carry on. \n. Ah, great question. \nYou see, when we generate the metadata from that endpoint, the result that we get has a whole bunch of other elements/bindings in the metadata that we do not want, because we do not support them. Now, since we don't support them, they don't do you any harm but because they are in your metadata and advertised, other SPs mighr think the CAS IDP actually supports them (because that is the point of metadata amongst other things), so the confusion. Also, the generated metadata assumes a lot of other things about ports, host names, etc which may not be appropriate for CAS deployment. \nSo, why don't we generate the \"right\" metadata in the first place? Because I have no control over it :) \nSee https://issues.shibboleth.net/jira/browse/IDP-894\nSo what this all means is, once you generate the metadata you need to review it to make sure it's correctly defined and matches the configuration. Thus the example provided in the docs for you to compare. You should always review the metadata generated anyway; that's a common practice. \n. You're right. They should be moved. \n. Yes. This does make it easy on them. What is happening with the build is that gradle by default is configured to do very strict dependency matching and filtering, which means transitive deps that conflict with ours are automatically stopped and build failed. Just so we can catch weird issues later on, but it does make the build uglier. I prefer that than having a deployer make sense out of ClassNotFoundException errors. \n. Controllers are, yes but this is not adding a controller. This is simply adding a mapping for that endpoint in the web.xml file at runtime. This is needed, because we map everything explicitly, rather than mapping /* and letting components handle things. The latter approach is easier, but I also think explicitness in declaring what endpoint is supported at the container level reduces \"the attack surface\". \n. Absolutely, sorry about this. I realize there are other classes generated with the same javadoc comment, I'll comb through all and provide better info. \n. This needs an explanation:\n1. I realized that Person Directory has a dependency conflict with CAS with its version of Spring. \n2. Once I updated person directory to use the latest version of Spring similar to CAS, I noticed tests started to fail. \n3. So What you see here is the result of me fixing person directory and testing it on the CAS side to ensure attributes are rightly resolved.\n4. PD is now updated and released as 1.7.1. \n. Yes. This is where the SP metadata for a given service is resolved from the config and then cached via guava for a period of time. \n. Yes very much so. In fact the design works very similar to Oauth. Initial request is processed, put into the session, a callback service is passed to CAS, user authenticates, returns to callback service, saml response produced via the original request. \n. I should say I am a bit uneasy about this part. I know OAuth is dealing with web sessions, but are there better ways? concerns? threading issues? \n. Precisely. \n. Dima suggested this a while back:\nhttp://projects.spring.io/spring-session/\nWe might be able to handle session-related matters better with this. \n. Pac4j might also work very well. I'll hold off on further changes here until your work with Oauth and JWTs is done and will see how you leverage SessionStore there before making changes. \n. This is handled to satisfy dependency requirements. \n. This messages show up on the screen similar to \"Invalid Credentials\", on top of the login box. \n. Good point. Will move it down. \n. Yup. You caught me :) I will clean this up. \n. Escaping is required, not by us. By the deployer. Either the pattern is a valid regex or it's not. The deployer has to make sure it's valid. If it isn't, we don't treat it as such and we don't try to guess the deployer's intention. \n. To further explain this, let say we have the following rule:\n\"cn\" : [ \"java.util.HashSet\", [ \".*[Aa]dmin.*\" ] ]\nThe deployer then decides to add an extra \".\" catching Admin.Misagh for example. So the pattern becomes:\n\"cn\" : [ \"java.util.HashSet\", [ \".*[Aa]dmin\\..*\" ] ]\nSo you see, I as the deployer have the responsibility of escaping. Technically, if I don't escape it, it's still a valid regex. But nonetheless, that's my job. Not CAS. \n. If you did however put in:\n\"cn\" : [ \"java.util.HashSet\", [ \".*[Aa]dmin.****\" ] ]\nThen, that is not valid regex as the pattern won't compile. Thus, we treat it as a verbatim attribute value \n. Cant start with \"is\" since that implies a boolean return. I could go with ensurePrincipalAllowedForThisService. \n. Perform SLO for PGTs if any. \n. Up there, we are deleting all STs, then PTs, then PGTs, and then TGTs in that exact order. \n. Ask the parent TGT to keep track of this PGT. \n. JPA is tricky because we need preserve transaction integrity. So we clean up everything in one pass, allowing further ops to become nops. \n. Excellent. LMK. \n. No reverse order does not work specially in JPA cases because you have to maintain referential integrity. You always want to start with the children, and the move up. You can't leave orphan objects around, if you start by killing parents first. \nI call this the \"cabin pressure\" strategy. \"In the case of a drop in cabin pressure, always assist your children first by helping them put the oxygen mask on, and then put on yours\" :) \n. Good call. I shall move this down. \nI am not sure what the future holds for logout management. @leleuj at some point was going to, and probably still is, working on front-channel SLO. So, keeping a separate abstraction to manage logout makes sense but at the same time, long way out, I am sure some of this stuff is due for a better rewrite. \n. One thing I also noticed is, I had to explicitly tell the entity manager to update the parent TGT of a ST. It wasn't updating it correctly when an ST added a PGT to its parent TGT. You may also want to look into that as well. \n. You are absolutely right LOL Maybe that explains why I don't come off as friendly around children :) \n. Most important reason is, consistency in the inheritance hierarchy. I want to be able to control a ticket registry line better by ensuring everything is part of the same \"category\" in cases where it is allowed. \nEncryption is off by default. You get exactly the same behavior you have today. \n. 1. Ticket id comes through. It's a TGT\n2. All of its children, STs are deleted. \n3. TGT is examined for its PGTs. \n4. If there are any, PGT is passed to step #1\nRepeat that same loop. When you recursively start to delete PGT, its children become PTs. \nfinally, you kill the PGT and exit the recursive loop, and then you kill the TGT. \n. Remember that a PGT is a TGT and a PT is an ST. \n. Sure thing. \n. Define \"invalid flag\" please. \n. Yup. Good idea. Would you want to take that one once we finalize this? \n. Think there is one. Saying this from memory, but there is a boolean that indicates whether a ticket is considered expired. Gotta look. Every ticket has an isExpired() method that does the same check. Is that what you are after? \n. > This means we would need to move the parent ticketGrantingTicket property from AbstractTicket to both ServiceTicketImpl and TicketGrantingTicketImpl.\nPrefer we don't do that, but I'll await your test results. \n. Why change the bean name?\nSee http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/DispatcherServlet.html\n. Reviewed. This is not as scary as I thought. Let's do this. Thanks. \n. That's what the ticket registry cleaner does, though we don't have cleaners for all registries. Only the default and JPA have one I believe. This this issue #1254 \n. @frett If you could put a PR out to the Unicon cas repo that has this branch, I will merge it in, and then I'll continue to update the pull based on the feedback gathered here. That should do it :) \n. Perfect. Working on this now. \n. You should likely add yourself here. \n. Cant. required for spnego at the moment, sadly. \n. Yes, if there is no context path defined. In otherwise, if you have deployed CAS at root and you have not set the cookie path to root explicitly, it will be set to root. \n. Note that this patch provides now an extra step for the deployer because previously deployers simply had to deploy CAS where they wanted to, and the cookie would have been automatically set. This now requires them explicitly configure the cookie as well, but this is more of a special case since almost all deployments opt for /cas. \n. Ah, gotcha. Sure. I'll reset them to blank. \n. Minor annoyance, but should this turn into \"OC\" ?\n. Why is it that OAuth functionality is leaking its components into core-tickets? Should these not be part of some sort of oauth module? \n. Same question as above. I don't think any of the OAuth components should be in the core. \n. The below lines should be refactored and moved out. \n. This should also be moved to the OAuth module where appropriate.\n. This should also be moved to the OAuth module where appropriate.\n. We need to refactor the delegation logic such that the oauth module is able to plug its own delegators into the core. This should be handled at runtime. I don't think any of the new OAuth classes should interfere with the core cas functionality. \n. So one solution would be not hardcode delegators into the registry, but move them out into a component that can be extended via OAuth code, so it can in turn build up its own delegators and pass them to the core ticket registry. \n. Good find. I'll take a look and see if shutting down the pool makes a difference. Seems like we should be doing that anyway. \n. Verified. I think the shutdown call above should take care of executor pool I believe.\n. So password encoders return null? How come? \n. Very good. So, I think we should take care of all other handlers as well since they may be prone to the issue?\nAlso, how is that the password ends up being null in the first place? \n. In other words, should we take care of this at the UPC layer via an annotation or Assert call? \n. Yup. I am personally OK with more protection in the handler, but I think the encoders also need to cover this. \n. You're perfectly right. I read the line backwards. I'll see if I can pull it out and shut it down explicitly.\n. Copy that. Happy digging :) \n. This is done. \n. The properties that are removed here: 1. are they removed from cas.properties? 2. are they removed from the docs? \n. As I stated earlier, this will tie the code to log4j directly. Perhaps we should document this somewhere that CAS does not allow the use of any other logging framework. \n. While this is perfectly adequate, I wonder, would it be more flexible if we allowed ENUMs to be defined as a property? Would adopters need to modify the lock type to something better suited for their deployment? \nI realize this might be overkill. Just thinking out loud here. \n. Understood. Thanks for being thorough. \nSo, I suggest we also document this property under the JPA docs, and also capture your exact explanation there too. :+1: from me with doc updates. \n. Copy that. Check out Travis too. \n. Minor annoyance: can we just capture Exception? \n. Reviewing this again. I don't think AutoWired works on collections and generics. You will need to use Resource instead.\n. I think this should be changed to use unspecified. Also, I am somewhat sure opensaml has the same constant somewhere. could we see if we could use that instead? \n. Accounted for. \n. Sounds good. Will do. \n. You are right. There are authn policies associated with the authn manager and the CAS interface so I think it's best to really divorce this concept for that all and get it focused on MFA. I like RegisteredServiceMultifactorPolicy better which should convey the idea. \n. @frett We should also focus on adding this sort of functionality to the management interface, of course, once the design here finalizes. \n. Correct. I could correct the javadoc here. \n. I have to dig deep and see how it might work. Good suggestion. \n. I started with that solution, but then realized that since we already have the TGT cached, I should be able to easily establish an authN context/result from that without getting SWF involved.  The approach you have in mind is implemented in MFA where we need that initial context for subsequent flows, so I decided to reuse the existing APIs for now, and provide support for SWF caching when MFA merges in. (The MFA branch does cache the result of course because flows need it later)\n. The API change you see above is in fact borrowed from the MFA branch, just so I could keep it all consistent and have it merge easier later. \n. Could we return null instead? I think semantically, that makes more sense than initializing the credentials with null values. \n. I like optional best! Let's get java8 into master, and then you can massage it that way. I am working on tests and should have an update within the hour or so if not earlier. \n. Done. You should be able to merge and continue. \n. Is there some sort of core util class we could move this into? CompressionUtils maybe? \n. Should we use some sort of Url builder? \n. You likely need javadocs for these two. \n. Even better. Let's collect them all in one spot. Makes it easier to troubleshoot issues later. \n. Well, as long as you're encoding it right we should be fine. Just wanted the code to read easier, but this would do too. Your call. \n. You probably want to use Apache's here, so we can be consistent.\n. See comment above.\n. See comment above. \n. Don't wrote docs for these. Just use Overrides\n. You probably should move this class to a util module/package. \n. Because the searchConnection has to be closed before we do anything else. The check is of course added below once the connection is cleaned up. \n. Looks like in both cases you's calling this.getTickets and this.logoutManager. Do these really need to be passed? Can the logout manager also be moved to the abstract ticket registry? So the method signature becomes cleanupTickets() ?\n. Looks great. Probably should remove these though. \n. Should this be pushed into pac4j? \n. This should be removed to use the new Service AuthZ Support class. \n. These should also be refactored. There are many calls to the service registry for every validation check. It's best to get the service once, and then validate everything based on that object. \n. I think Spring provides this functionality already. There is a method that allows you to check for required parameters.  Does the same exact thing. \n. Should this be turned into valid JSON? \n. This should likely be pushed into pac4j, I think. \n. Should not use the manager directly; instead use the new authN support component. \n. The profile class is extensible, yet this behavior does not allow for it to be extended. \n. Ok. In that case, why are we creating a new instance if it's exactly the same as HttpProfile? Seems like a waste, no? What does this profile give us that HttpProfile does not? \n. Very good. Thanks. \n. This is almost identical to the existing authN exception handler. I think we should rework that component into this one, or vice versa to remove duplicate/code and logic. I suspect that you should be able to define your mappings directly in that handler already, no? \n. Let's mark this as protected\n. Let's mark this as protected\n. Likely don't need this else clause here. Return terminates. \n. This error is a little too specific. Are we sure it's appropriate for all TicketCreationException instances? \n. This should likely go to where the remaining flow consts are. \n. Based on your impl above, it's possible for UNKNOWN to be returned. So this likely should not be removed. \n. Gotcha. Looks good. Missed the default transition. \n. Good catch. Shall we get it removed in this pull? \n. Just spotted something. Where is this code used? \nI asked, because I spotted the following:\nauthenticationFailure.FailedLoginException=Invalid credentials.\nauthenticationFailure.UnauthorizedServiceForPrincipalException=Service access denied due to missing privileges.\nauthenticationFailure.UNKNOWN=Invalid credentials.\nShould the messages.properties be updated in a similar way to include the error message? and maybe remove UNKNOWN? \n. Must have been a bad copy, but it may become useful as an extension point later. I'll remove it for now. \n. Good point. We sure should. \n. LOL. Sure\n. Checked exceptions in general, I think, are a bad idea in any language. I see no benefit really. They force us to do a bunch of forced catch blocks, and potentially cause signature changes in APIs. \n. There is nothing here that would disallow cascades obviously. There is just no benefit to explicitly declare that, I don't think. \n. No it's not RequestParam. Unfortunately I don't remember but I know @dima767 told me about this some time ago. No big deal. \n. Sure. Will do. \n. I am trying to remember why I did this. There may have been cases where bean names where not valid java method names, and these were names that were expected by 3rd party libs. Also, (ah now I remember), there are cases where bean names must be defined for aliasing. So I decided to pick one style for consistency, but if you want, I'll do scan, and if all checks out, will remove names and only leave them where they are needed. (I do think the code reads easier this way though, you can immediately tell what the bean name is, rather than guessing it must rely on the method name). \n. Faster startup time. \n. At least for dev; i.e. you want to ensure context loads correctly but you don't necessarily need to hit the web. As long as it loads, ...\n. Yes for sure. The mgmt webapp is likely not a good example (I only kept it for consistency), but for the webapp, it spins up much faster than before. I also would say that scanning xml context is much slower than reading binary compiled configuration code. So the fact that code is now handled via Java config and less via XML might also contribute to faster startup time. \n. Sounds good, but I do see this line below:\nreturn profile instanceof OAuthUserProfile\n                    && validator.checkParameterExist(request, OAuthConstants.CLIENT_ID)\n                    && validator.checkServiceValid(registeredService);\nIf we are always checking for instance, why cast above? or remove the instance checking? \n. Never mind. Wrong check! I'll switch this. \n. Turn this into boolean matches(CharSequence rawPassword);\n. Also turn this into libraries.springsecurity\n. Ah I see what you did. Never mind this. \n. This probably should go into the dependency definition directly if possible. Ideally, you should just have: \nprovided libraries.springsecurity.\n. Remembered something. Should other handlers be modified to take advantage of the new method? \n. So let me summarize to see if I understand you correctly:\n1. Clients need to pass a special parameter today to request mfa during validation.\n2. You are saying, if a client fails to send it yet the service itself says it needs MFA in the registry, we should use the service config to enforce mfa? \nIf so, sure. Much easier. Shall I make the change, or would u rather push that yourself? \n. In theory, it's possible yes but that would of course be met with an error. Per the contract, null values are not permitted. \nTrying to remember: I think the rationale was 1) I generally prefer objects over primitives 2) certain registries support in, and some support long. Rather then returning a primitive and casting, etc I simply wanted to do getTimeToLive().intValue() when an int was required. \nThis might of course be problematic; the deployer would have to be aware of what the registry supports. If you choose your expiration policy values for a ticket to last as long as a Long can, the registry would certainly bomb out because it can only support int max values. But, nothing we can do about that. \n. Good one. Done. \n. I think it might be easier if you included the spock dependencies under the \"test\" category. One could then do: libraries.tests or something and have everything available that might be needed for tests. \n. Awesome. Could we perhaps turn this readme into cas docs? under cas-server-documentation? You could sort of follow the same pattern as the other docs, and just add a link to the new page from somewhere that talks about attribute resolution, etc. \n. More of a curious point: I vaguely remember that the saml-idp module also declares the same sort of bean. Nothing to do for this PR, but in general, it might be worthwhile to move \"common\" saml functionality into a saml-core module. \n. Most sessionCount() impls do this:\ngetTickets().stream().filter(t -> t instanceof TicketGrantingTicket).count();\nthat returns a long. \nAlso, theoretically it's possible for the session count to be a long if you have a billion sessions available and thousands and thousands of transactions going through. As such, the API here would simply bomb with an int. \n. No that won't work. Doesn't have to be a billion sessions; you just have to enable remember-me expiration policies, and CAS would bomb. \n. To expand on that last note: a remember-me policy typically indicates a timeout value of a very large value; much larger than int, because you want your session to last, let's say 3 weeks, etc. As long as that value converts to a long, CAS would bomb.  It's also not so much about the semantics of the type. The timeout values that we have for expiration policies of STs and TGTs all resolve to a long today. There is the conflict; the API (prior to this change) allows for a TGT timeout to be a long, yet the count of sessions expects an int. That does not make sense. \n. Thought about this some; You're right of course. the API change is not really warranted by the Java API semantics. It's done, to fix a bug as I explained with the inconsistency between the types of timeout values, and the call that attempts to return a count of tickets that operate based on that timeout value. So this is really a bug fix, that requires an API change. We have to be pragmatic here to get around the bug for this intended release: Do we really think this is a breaking change in terms of what adopters would expect? Do we really expect folks to extend and override that behavior and use that (now breaking API) in extensions? I would argue that it's not, and it's not really an \"extension point\". The breaking change is warranted because it's low-impact as far as extensions go. \n. Definitely. I'll create an issue. Upcoming. \n. I might ask that you turn these into proper javadocs so it's easier to understand from the outside. \n. Does the parent not give you the views? Why duplicate fields? If it doesn't, is there a way to make it provide those to extensions? \n. Sounds good. \n. So, I am being extra thick. What does this say in plain english? If the creationTime + margin is before now, ticket is expired? \n. You're in DefaultAccessTokenFactory. Why is a refreshTokenIdGenerator referenced here? \n. Yes. Sure thing. Will adjust. \n. In most cases, LDAP specifically, a separate resolver is not needed. We can get by with null. \n. Why a separate file? \n. We do have existing shell scripts. Could you just add install to the list of commands and remove this file? \n. Let me clarify: I understand why you chose a separate file. My concern is: \n1. Should this be something an overlay could do, rather than CAS? \n2. Yet another XML file?\n3. Do we ever see the need for a deployer to overlay this new XML file? If so, why not keep it in the deployer, and limit the configuration to one xml file only? \n. I would feel better if you moved the monitor list out and back into the deployer. That is something a deployer would need to set more often the aliases, and is not so much about mapping aliases. \n. Understood, thanks. That makes sense to me. \nMy only other concern is the list of monitors. I do see a use case where people would want to add/remove monitors, and I'd have that available in the deployer file, rather than here. (Eventually, we could do away with monitors possibly and move onto actuators) \n. This one for instance:\nhttps://github.com/Jasig/cas/blob/master/dev-build-no-tests.sh\nYou added these, remember? :D\nI have no objections to the change, just the organization of it. \n. You could likely turn the existing script into:\n./gradlew clean install -DskipAspectJ=true -x javadoc -x test\nWould that work? \n. It should, I think. Or worst case, we chain them together. \n. You should turn this back on. \n. Checkstyle will likely error out, that this should be if (nonNullErrors.isEmpty()) {\n. Not according to Travis. Not sure why it fails locally, but Travis runs it fine, right? \n. OK, but that is what you want to use instead right? \n. Because you're duplicating isEmpty.\n. I'd love to, except that this is targeted for 4.2 and that branch is based on JDK7. \nMaster will be stream-based though. \n. I understand the rational here, but eventually, this will have to be removed. What is happening in the OAuth world today is that you are validating tickets manually, which requires that you execute this kind of logic here to make sure services are authorized, and attributes are properly released, etc.\nWhat you want to do instead is:\nAsk CASImpl to validate the ST for you and give you a principal, via the callback url as the service. Once you do, you will have a CAS principal who's allowed the proper attributes automatically, and you wouldnt need duplicate logic here. \n. Following up, that I do think this functionality needs to be refactored for CAS 5, but perhaps after the boot changes go in. We could get started without boot, and I likely can handle the merge later. \n. I reviewed this briefly. Let me ask:\nWhen OAuth creates an access token, that token is then submitted to the profile controller. The token needs to be validated, and the token is just an ST correct?\nSo we end up doing this:\n``` java\nfinal AccessToken accessTokenTicket = this.ticketRegistry.getTicket(accessToken, AccessToken.class);\nif (accessTokenTicket == null || accessTokenTicket.isExpired()) {\n    //bad ticket...\n}\nwriteOutProfileResponse(jsonGenerator, accessTokenTicket.getAuthentication().getPrincipal());\n```\nSo this I think is the issue here. Let me elaborate:\n1. This ticket/token is validated manually. The code is directly cross checked against the ticket registry, which is a practice we should discourage.\n2. As you said, the principal that is used here is established during authentication as part of that access token. This is contrary to the CAS model where we always use the principal constructed during \"validation\". \nMy theory is:\nCould we submit the access token to the /cas/p3/serviceValidate via the Java CAS client, validate it as a normal ST, get back a CAS principal and then use that? The validation logic in CASImpl accounts for everything that is required, including attribute release, access strategy (which is what this PR is trying to do) and everything else, which should allow you to remove that if block up there.\nMakes sense? \nP.S Not opposed to the PR, just saying there might be better ways to handle this. \n. P.S I realize my comment perhaps was aimed at the wrong code segment here. Sorry about that. \n. Done. \n. Sure on all counts. I'll start to clean up. \n. Go back to root, and type: gradle clean. Then run the tests again.\n.  Issue found: 'VARIABLE_DEF' should be separated from previous statement.\n. Change this to @Controller(\"accessTokenController\")\n. Change this to @Controller(\"authorizeController\")\n. Same here\n. And here, fix the space. \n. Looks like this one is not updated yet. \n. The callback resolver here attempts to append the entityID and the redirect_uri parameters to to the callback. This allows the CAS validation process to then:\n1. Detect the fact that the callback url is really not the real service, but it is an OIDC request with the real target that is the redirect_uri. It knows this is an OIDC request because it can detect the callback url based on those parameters as an OIDC thing. \n2. We pick the redirect_uri used during the validation process to use that definition to process user attributes and claims. The redirect_uri is what is registered in CAS service defns. This is consistent with how SAML works where entityID are registered, and the callback url there is also modified to remember and note the entityID to whom attributes shall be released. \nRight now, it is my understand that attributes for OAuth are processed based on the definition of the callback url, which means, they can never be released...or it may be the case that everything is released since we don't do proper filtering based on the redirect_uri and its attribute release policy. \n. What does this do? If the type is unrecognized, show it anyway? and use a generic icon?\n. Gotcha. Looks fine. We may add a few more default ones. \n. Sure. I'll run through this once more, but what you describe as adequate as that sounds was not what I was seeing. Specifically, I was getting no attributes even though I specifically had allowed everything to go through. I'll check again. \n. OK, attributes are definitely not released without the changes here. \nAccessToken.Authentication.Principal has no attributes available that were previously resolved by CAS, because the principal is created during validation for the incoming service that is https://mmoayyed.unicon.net:8443/cas/oauth2.0/callbackAuthorize?client_name=CasOAuthClient\n. \n. And this is what it looks like with the changes in this PR:\n\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: Avoid unused private fields such as 'baseName'.\n.  Issue found: 'VARIABLE_DEF' should be separated from previous statement.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: 'VARIABLE_DEF' should be separated from previous statement.\n.  Issue found: 'VARIABLE_DEF' should be separated from previous statement.\n.  Issue found: 'VARIABLE_DEF' should be separated from previous statement.\n. Dont think so. We'll end up then doing double filtering, because the authentication principal that is created will contain all attributes and we would then have to filter them out based on what the actual RP configuration is, which also means doubly calls to the service registry. We also wont be able to do the filtering at all for the profile requests, since we wont know what the service is. All we have is just an access token and authentication. \nYou always want to pick up the rules for attributes for the real RP. Callback is a fake url, and shouldnt have to have any kind of special logic.\n. Change this back please. \n. Remove the commented lines. \n. Remove the commented line. There is no need for comment things out. Source control and git tracks history for you much easier. \n. Good idea. Will do\n. Few things:\n1. You are never ever supposed to use a Configuration class in your deployment. If you do, fine (and maybe that's the only way you can get X to work for you), maybe you'd like to, but then you'd be on your own. \n2. Classes that are simply marked as public are not necessarily public APIs. Typically, we consider interfaces to be a lot more contractual than other public classes.\n3. Even with interfaces, one has to take a pragmatic approach. For instance, we dont really really ever expect anyone to provide their own implementation of CASImpl by implementing that upper interface. (i.e. if you do, you must have a very very good reason or you're doing it wrong) Therefor, pragmatically, neither the impl nor the interface are considered \"public APIs\". Not saying we should start changing APIs willy nilly, but these are things we have to take into account as well.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n. You should get this field removed if it's not used anywhere. \n. also this comment is unnecessary. Remove them all from this patch please. \n.  Issue found: Empty line should be followed by  tag on the next line.\n. @dima767 what's this about? This looks like an infinite-loop to me. \n. Think this should be this.delegate.resolve(). Ran into this while merging back. \n. Fixed. \n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: '2000' is a magic number.\n.  Issue found: '5' is a magic number.\n.  Issue found: '10' is a magic number.\n.  Issue found: '500' is a magic number.\n.  Issue found: '1000' is a magic number.\n.  Issue found: '42' is a magic number.\n.  Issue found: '4245' is a magic number.\n.  Issue found: '100' is a magic number.\n. Is that done just for consistency? One-liner @Resource tags seems easier to read me, no? (I also do know @Autowired does not work with generic collections, though 4.3 will likely fix that) \n. Sounds good. I'll swich over.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: '172800' is a magic number.\n.  Issue found: '3600' is a magic number.\n.  Issue found: '16' is a magic number.\n.  Issue found: '512' is a magic number.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: The String literal \"Flow {} already contains a definition for state id {}\" appears 5 times in this file; the first occurrence is on line 139\n.  Issue found: '10000' is a magic number.\n.  Issue found: Missing a Javadoc comment.\n.  Issue found: Missing a Javadoc comment.\n.  Issue found: Missing a Javadoc comment.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: '10' is a magic number.\n.  Issue found: '180' is a magic number.\n.  Issue found: '50' is a magic number.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Too many fields\n. Good point. sure. \n. It is a noop. Looks like it's simple enough for a vanilla copy. I'll apply.\n. Sure, generate in what sort of format though? \nOnce the BOM module is released, one could always look at the final pom in central and see everything? And we could link to that pom? or did you have something else in mind? \n. If the principal attribute password is not defined, could we fallback to the pooledBindAuthnHandler? \n. Could this be something we could actually contribute to ldaptive? It doesnt seem like something we'd want to maintain. Have you discussed this change with Daniel @ ldaptive?\n. You'll need to also document this property, and briefly explain what its purpose it perhaps in the docs where properties are all listed. \n. I think we should, yes.\n. I looked at 1.2 and I don't see it. I suggest you discuss this with Daniel and see if he'd be willing to take the contribution. If that works, we can simply just upgrade to 1.2 via that other PR, and accept your change afterwards. If not, we'll merge this PR as is. \n. By this weekend. \n. You also want to make sure other comments on this pull are accounted for.\n. This is not right the change. The webflow module should be creating everything SWF needs. If it's not, we should look there and see what might be failing. \n. See above. All this should be unnecessary ideally. \n. Please remove this block. We should add this to the default overlay anyways. The template should handle it for all; users should not have to learn this. \n. Also, please avoid referencing specific properties in the doc pages. You may instead say something like \"Make sure you have specified the JCIFS Service Principal in the CAS configuration. Use this link to see relevant settings\". \n. Minor suggestion: try using {@link}. Helps with future refactoring, if the class should be renamed, etc.\n. No @Bean here? \n. Revert this back? \n. Never mind. Dont need this anymore. \n. Gotcha. Lets keep it then. \n. This is an anti-pattern. All these should be removed and moved inside the bean itself. To fix the Controller annotation issue, try removing the BaseOAuthWrapperController as a return type and return the actual bean type.\n. Not a big deal, but a shorter name perhaps: idTokenSigningAlgs. \n. This really should be: Apereo CAS Redis Ticket Registry.\n. This will not work. We need CAS specific properties. \n. Remove DisposeableBean. Use @PreDestroy instead.\n. You'll need to wire in an instance of Cas properties and construct the connection factory based on values provided.\n. Is there a reason this has to exist? \n. You will also need a batch of tests to make sure tickets are properly added and removed. \n. Good. Now go through the rest of the files, account for changes and fix build failures please.\n. This will need to be grouped next to other dependencies. Perhaps under tests? \n. The version also needs to go into gradle.properties.\n. You will need to call encodeTicketId() here. Cross checks all ops here against other registries and make sure ticket ids are properly encoded/decoded based \n. Also format the file correctly. In certain areas you have a (){,  in some areas you have () {. Sometimes it's x:y, sometimes it's x : y. \n. Like here\n. Or here\n. I wouldn't throw this exception. Capture, and log it.\n. Do these need to have @RefreshScope? If a bean's construction is controlled by CAS properties, it would be nice to have to recognize changes and load.\n. See my question about @RefreshScope below. \n. Why this and not deletedTicketCounts.size() ?\n. Ah never mind. I see it. \n. Should be: The key is started with...\n. Ehcache?\n. How does redis manage the eviction policy? does such a thing even exist? \n. This generally is called casProperties.\n. Possible to return the interface instead?\n. Return an interface type instead?\n. This should be ProxyGrantingTicket.class\n. See my comment above\n. Same here\n. And here\n. And here\n. And finally here.\n. Why are we scanning this? \n. Why would this ever be null?\n. This is redundant.\n. Same as above.\n. And how exactly does the scan solve that problem?\n. I am going to have to ask you, by the way, to be clearer in your future submissions plz. \"Code refactoring introduced a small problem\u3002\" doesnt help anyone. What code refactoring? Which problem? How small? How does the solution address that problem?\nFollow the PR template please. \n. Good. So before making a change, we should figure out why it would ever be null. \n. And which database is that? And what field exactly are you referring to? the creation-time or the expiration policy? \n. Remove the license header please.\n. In OpenSAML, there is a SamlConstants class that contains this as a const: SAML2_REDIRECT_BINDING_URI. Use that one. \n. Do we have an event definition called \"stop\" ?\n. Ah never mind. I see actionState.getTransitionSet().add(createTransition(ClientAction.STOP, ClientAction.STOP_WEBFLOW));\n. If you are including pac4j, you already have pac4j-saml as well...which means you also have opensaml?\n. In any case, no big deal.\n. Use org.apache.commons.lang3.StringEscapeUtils;\n. Great! Thank you. \nOne other thing you may want to do is merge with master once, and then update the pull request. Right now, you have about 250+ commits in this PR. If you merge with master, the count should go down to one.\nDo you know how you might do that? If not, I can help.\nAs a follow-up note: always do work on topic branches of your own fork. Never on master. \n. See https://apereo.github.io/cas/developer/Contributor-Guidelines.html#development-walk-through\n. Please use Lists.xyz``` instead.\n. Same here.\n. Who encodes the password? \n. This really is a call that likely should go away, and must be abstracted internally. \n. Gotcha. In that case, as this breaks functionality, you're likely to refactor the APIs to come up with enough abstractions/components to handle this behavior and allow for proper encoding across all, and then make exceptions for those that cannot. \n. To clarify, this patch seems to fix an issue with one encoder while breaking functionality with other encoders. Of course, that cannot happen. So you'll likely need re-organize the API to ensure ALL encoders can function correctly, that they ALL encode the password correctly, and accommodate enough parameters in the new API so those such as BCRYPT can handle it and execute a match while others can skip and simply encode, etc.\n. It would also be very useful if you could:\n- Provide a test that shows the broken behavior today.\n- Provide additional tests that show how the patch fixes that error and broken behavior. \n. Excellent. Thank you! LMK if you need any sort of help. \n. I would agree that most if not all authN handlers should be using password encoders where possible. But per my reckoning, both method calls should be used. The flow would be that:\n- Password is encoded first using the encoder, i.e.encode.\n- Authentication uses the encoded password to find the account and match on it.\n- Double check the provided password, if/when necessary, by the handler and make surematches()` actually does a match. \nIn the case of QueryDatabaseAuthenticationHandler for instance:\n``` java\n        final String username = credential.getUsername();\n        final String password = credential.getPassword();\n       //password is encoded already by the parent class that handles credential prep.\n    try {\n\n        //execute authN. \n        final String dbPassword = getJdbcTemplate().queryForObject(this.sql, String.class, username);\n\n       //this needs to turn into a passwordEncoder.matches()\n        if (!StringUtils.equals(password, dbPassword)) {\n            throw new FailedLoginException(\"Password does not match value on record.\");\n        }\n\n....\n```\nThe only problem as you describe is that BCrypt wants the raw password which we lose if encode it first in the parent class. So you'll just need to massage the calls to keep a non-encoded version of it, and that would keep it consistent across all encoders, etc. Something as simple/dumb as perhaps (without too much complication):\njava\nauthenticateUsernamePasswordInternal(userPass, originalCredential);\nThen let the specific authentication handler deal with the encoder.matches since now you have both, and that shall work with all encoders since they all expect the raw password.\nAs for QueryAndEncodeDatabaseAuthenticationHandler, let's discuss and track that in a separate issue.\n. That's probably OK. I am not personally a big fan of instanceof checking, but we likely could do with it for now. Go ahead please.\n. You'll need to clear this bit and complete the docs.\n. Also rather than calling it charSequence, pick a name that is a bit more meaningful. \n. Remove this extra line. Be careful with formatting in general.\n. Also remove the comment. Don't need it. Git has a commit log :) \n. This should be removed, right? \n. This wont work. You will need to make sure the given pattern is valid; it's not appropriate to replace it with some other pattern in case it's invalid.\n. This is not a pattern technically that matches nothing. It does match something!\n. This is a breaking call. isValidRegex(\"$$$$\") now returns true which is certainly incorrect both semantically and javadoc wise. \n. This will need to be corrected. Certainly has nothing to do with this PR.\n. Also needs corrections. Why are REST settings modified here? \n. Needs to be placed in with the othe dependencies.\n. You don't need to declare junit. It's already provided to you.\n. Needs to be placed in with the other dependencies.\n. Javadocs needs corrections. Follow the pattern as other components do.\n. I believe the above two methods can be merged into a single method. \n. Remove this line.\n. Fix the docs as well. I think you incorrectly somehow updated rest docs for this? \n. Version is incorrect\n. Update the name of the configuration. This deals with Cassandra; not a generic ticket registry config.\n. Remove the properties class for cassandra. Stay consistent with other modules.\n. Similarly, rename the config class for this module to note it deals with Cassandra\n. Use CasConfigurationProperties instead.\n. Rename the bean and the class. This is not a nosql-ticket registry as it is generically defined here. This is about Cassandra. (There are other nosql registries in CAS). \n. Why are we passing the registry? \n. Missing javadocs.\n. Correct all log messages and remove caps. This should be \"Deleting ticket {}\", etc.\n. What is this doing exactly? \n. Why / TEN? \n. Remove reference to the Impl. Use ticket state. \n. Provide a separate cleaner component. \n. Missing javadocs. Registry class also needs to be renamed.\n. Remove all prefixes. Use interfaces.\n. You don't need this method here. The default cleaner handles all of this. If you wish to control the cleaning behavior, please do that either in a separate component or a separate PR.\n. This needs to be worked out. I am not a fan of isXYZ methods. \n. It's also buggy because it entirely skips PGTs and PTs and all other ticket types.\n. You'll need to merge the two together. From the API perspective, you're just dealing with a generic Ticket. Inside the implementation of that API, you can detect the type as you see fit. Let me know if you need a sample to demonstrate that. Your API needs to remain ticket-agnostic as much as possible.. Typing checking is bad,definitely. But you're not doing type-checking per se. You're checking for ticket prefixes and that breaks a lot of things. \nWe are definitely not going to add options for every single type to every registry; that needs to be avoided when/where possible unless there are VERY GOOD reasons to violate that. It's also a maintenance nightmare. Registries at API level (and everything that is at that level) need to remain ticket-agnostic which is something you can easily handle with generics. Inside the implementation of API (IIF needed) you can double check types. . In my initial reviews of this branch, I did put together a small example of how this might be simplified via generics and refactoring of the current API. If you'd like I can certainly share that with you to you see what alternatives might exist. . Also, is there any reason why CassandraDAO needs to exist as a delegated component? It seems to be duplicating a ticket registry in and of itself. Is there any reason why those operations are not part of the registry? Is there a chance we [or someone] might need to provide alternative implementations of the DAO such that it needs to be abstracted out? Is this done just to keep the registry lighter? (which is fine, just needs to be documented better of course) . Fix the version number please.. This is good. You also need to add test case for this scenario:\n\nCreate a registered service with an invalid pattern (serviceId)\nCall matches on the service created.\nCheck the serviceId. The result should remain to be the same invalid serviceId set to 1.. 2. Does not matter. Anything should do.\nService id of the service you just created.\n. Wouldn't it be simpler to make sure the current event id is appropriately returned instead, rather than modifying the webflow directly as such? . Excellent. That removes my suspicion. Great work!. Understood. No problem. \n\nYou do need change the below line to be:\nSUCCESSFUL_AUTHENTICATION_EVENT.equals(flowScope.get(WHATEVER_THE_CONST_IS_FOR_AUTHN_RESULT)). Looks like these also need to be moved into ctor parameters?. Is the final set here immutable? . Very good. No. Just making sure :) thanks. This something we should add to checkstyle? My preference is to always explicitly call class unless the method in question has become an idiom like assertTrue. But that matters not; Whether explicit or not, we probably should stick to  consistent style, or make this exception known. Right? . This will need to be reversed. The collection must be mutable. . Is a singleton list serializable to JSON?. Fix javadocs here please.. This will need to be mutable.. Actually no, scratch that. This is fine.. Yup. All good. Thanks for confirming. . Is this a legit complaint??. Is this something that can be done with retailAll instead? Not a big deal though. . Move this to CollectionUtils. In fact, there may be something similar there already? . It seems like the two blocks for rejectedDifference and difference collections are almost identical. Can we refactor and reuse? . Also not a big deal, but the else clause is rather redundant.  See https://apereo.github.io/cas/developer/Code-Conventions.html#needless-else-clauses. Probably also something we could build into checkstyle rules to keep everything in one format. . Also, there probably is plenty but please verify there are unit tests that thoroughly test the changes in this area. . Could this be moved to CoreAuthenticationTestUtils? I vaguely remember a method call in there that mocks principal creation? . Sure. . Yeah that's fine. You could have 1 method call that deals with required attributes and another that deals with rejected attributes. Both of these pass the relevant collection to a common/shared method that does all the logic. Before and after each call to this shared method, simply add log statements so the activity can be traced. . Probably not. This one is closely related, but if you prefer separate PRs that's cool. . Make this a WARN please.. Same here. WARN is better. . And here.. This is probably more like Stream.of(providers).collect(Collectors.toSet())? Or should be? . This doesn't look right to me. The previous test specifically wants a match on MFA_PROVIDER_ID_1. So you probably should try to preserve order for the providers. Maybe use a LinkedHashSet? . Yup. Looked like we have a few of these new HashSet<>(Arrays.asList... patterns. I'll track this under a separate issue. . public final class TicketCreatorUtils is the common idiom. We also have a few others such as Beans etc. If you wish to explicitly make a utility class, you likely should postfix it with Utils.. Javadocs here please. (Failure to add will likely prevent CAS from publishing snapshots). ```java\nif (StringUtils.isBlank(properties.getSecret())) {\n    LOGGER.debug(\"Creating BCRYPT encoder without secret\");\n    return new BCryptPasswordEncoder(properties.getStrength());\n} \nLOGGER.debug(\"Creating BCRYPT encoder with secret\");\nreturn new BCryptPasswordEncoder(properties.getStrength(), \n    new SecureRandom(properties.getSecret().getBytes(StandardCharsets.UTF_8)));\n```. These seem to duplicate the existing fields from the parent class? . Docs also need to be updated to ensure all handlers reference the same fields. . Also please update the docs in general to explain that password policy is possible now with JDBC to a limited extent.\nAnd fix the build failures. . Properly, camel-cased please.. This needs to switch to getRootAuthenticationFrom now, right?. This also needs to switch to getRootAuthenticationFrom now, right?. How about these? . Yes please. A second PR would be great!. I don't think these belong here. You need to move them down to the x509 level. . This is great. My only comment is: avoid inlined comments. Turn these into javadocs, so they can reviewed externally, formatted and linked to APIs, etc.. Seems like these should be removed, right? . Is it not possible to simply not create this as a standalone bean and create it internally, injecting it into the reloadable bundle bean directly?. Help me out here please: why this? Does this have something to do with failing tests as you mentioned? Why should the root-level project know about the webapp resources? If this is needed, couldn't you mod the classpath at the webapp project level and augment it there? . Thanks for the reminder; I'd forgotten that these are also dependencies.\nI do dislike the duplication, but I think the placement of the static-uris file is fine in webapps. What exactly do you envision the filtering would do? Are you thinking the filtering would take place at build-time such that the final web artifact would essentially have the versions hardcoded in the URLs as a result of that filter? That might not be so bad. . Let me elaborate. Currently there exists this:\njava \n    @RefreshScope\n    @Bean\n    public HierarchicalMessageSource messageSource() {\n        final CasReloadableMessageBundle bean = new CasReloadableMessageBundle();\n        bean.setDefaultEncoding(casProperties.getMessageBundle().getEncoding());\n        bean.setCacheSeconds(casProperties.getMessageBundle().getCacheSeconds());\n        bean.setFallbackToSystemLocale(casProperties.getMessageBundle().isFallbackSystemLocale());\n        bean.setUseCodeAsDefaultMessage(casProperties.getMessageBundle().isUseCodeMessage());\n        bean.setBasenames(casProperties.getMessageBundle().getBaseNames());\n        return bean;\n    }\nSo what's happening today, is this bean is created, and then via autowiring and qualifiers it receives that common messages bean created separately. That seems inconsistent, because you should be able to internally create the same object and set it on the message source here, sort of like all the other setters above. You can still inject multiple property files into the setter and we could potentially even externalize it into a property, etc. \nWould that cause issues with FactoryBeans, etc? . Master. 5.0 will get its own branch. I'll try to get things updated today or this week if all goes well unless you beat me to it :) . ```java\n        final CasReloadableMessageBundle bean = new CasReloadableMessageBundle();\n        bean.setDefaultEncoding(casProperties.getMessageBundle().getEncoding());\n        bean.setCacheSeconds(casProperties.getMessageBundle().getCacheSeconds());\n        bean.setFallbackToSystemLocale(casProperties.getMessageBundle().isFallbackSystemLocale());\n        bean.setUseCodeAsDefaultMessage(casProperties.getMessageBundle().isUseCodeMessage());\n    Properties p = new Properties();\n    ....\n    bean.setCommonMessages(p);\n    ........\n    bean.setBasenames(casProperties.getMessageBundle().getBaseNames());\n\n```\nWould the above not work? . To clarify, what I find confusing is: Why do we have a bean created as a factory, only to then mark as optional, only to then somehow have spring proxy the object from the factory, only to then set it on the resource bundle...when it can directly be set on the resource bundle? Seems a lot of needless maneuvering. \nIf it makes things easier:\n\nNobody would ever need to customize this file, or add to it.\nIf they do, they come to the project and submit a PR.\nOr they rip this all out and do it their own way. \n\n3 is how it happens. Almost always. . I like common-messages.properties. Definitely sounds better. As for the factory bean and logging, we probably could do both with Throwables.propagate(e) and that should take care of both the uncheckedness! of it as well as logging.\nIf you wish to continue using the PropertiesFactoryBean and the bean that goes along with that, that's perfectly fine. In that case, we need to find a way to remove the auto-wiring  bit from the resource bundle itself. That's the bit I don't like. (We have a bean that gets everything set on it directly, and then somehow deep within itself gets an autowired field)\nIf I remember correctly, you can pass the factory bean as a parameter to the  bean that creates CasReloadableMessageBundle. Spring will auto-proxy the object from the factory for you. Example:\njava\npublic HierarchicalMessageSource messageSource(@Qualifier(\"casCommonMessagesFactoryBeanId\") final Properties props)) {\n   // set the props directly\n}\nThat probably is the better compromise. See JpaEventsConfiguration as an example. \nThanks. . Beautiful. Since you have done this so well and now that we are here, could we move these somewhere into the configuration properties AND provide a default for a file that is NOT part of classpath? maybe in /etc/cas/config? \nOf course, document all? . All of this should really go away. I understand there are issues with logback requirements, and such and it's fine we have to make exceptions in the build to bypass those, but all changes need to preferably be encapsulated inside the project's own build file. Not outside. . Why SNAPSHOT? . This design here, while perfectly sound, will not work because you're making certain upfront assumptions about the types of tickets that are found at runtime. You need to be able to dynamically discover ticket types that exist and proceed to serialize those. . This new JacksonJsonSerializer() likely needs to become its own bean. . What is purpose of this class exactly, and how does one take advantage of it?. See my comment above about dynamically discovering ticket types. Making assumptions about concrete ticket implementations is not a good idea, and for instance, registry today will not be able to handle OIDC or OAuth tokens. See how the Hazelcast ticket registry works today. . Please add 1-2 lines to describe what this component does. It's not immediately obvious, but one could probably guess that tickets are serialized as text and in JSON. It's perhaps useful to describe when one would want to use this vs the binary equivalent.. This also will not work, with the introduction of additional ticket types that exist today. You want to discover ticket types, and auto-create tables, etc based on what exists at runtime and has been registered. Not statically, and without any assumptions. . I am not sure I understand the role of this one too. What does it do, and how is it different from the normal ticket registry API, so to speak? . Is there an opportunity for CAS to auto-create the keyspace, optionally, similar to how JPA ticket registry works so that these can all be removed from the docs? I have not thoroughly reviewed this all, but I suspect there are certain assumptions made in the registry core about the schema that loosely match these schemas. It's best to say \"CAS auto-creates everything that is needed in the schema so you don't bother with it\". Outstanding!. Is this something we can work on and fix directly inside cassandra? Submit a patch to them to fix this logging dependency issue so we don't have to mess around with dependency gymnastics here? I realize you already have submitted a patch to them to take care of an issue, right? Could that also contain a fix for this? \nThe alternative would be to remove the global exclusion rules for logback, and exclude them from every other module that wants to bring them in, run extensive tests to make sure everything works as before, and then move the cassandra-related changes into the cassandra module. . I think it's worth taking a look. I can promise you that for the most part, most wouldn't want to setup and maintain the schema definitions, specially if the software can do itself, which makes it easier for us to  make changes later to the schema and not have to update the docs or ask deployers to run a series of scripts again. I'd encourage you to review that, either now or later as a separate step. It's something that would increase the module's adoption. Automation is key, almost always. . Seems like this block should be merged into https://github.com/apereo/cas/blob/master/gradle/dependencies.gradle#L36? . Yes exactly, that's the idea.. The support module here, should try and make every effort possible to NOT know anything about service tickets, TGTs, etc. Not in the API, not in method names, not anywhere as much as possible.  It should try to work with a very generic ticket abstraction and then learn as much as it can at runtime from the ticket catalog.\n. As you noted, this for instance shall go away because you could and should be able to use the ticket definition to pick up the table name.\nOf course this sort of thing goes hand in hand with what I was pointing out earlier, which is that you'd then be able to create the table schemas automatically because everything is done automatically. Based on this design here, I think the auto-creation of tables at this point is sort of a must.. Great, thanks. We likely should try to explain different use cases for each serializer separately, or at least point to somewhere that does explain that sort of thing. It's not immediately obvious why one would use text vs binary...maybe for performance? Not sure.  It's worth it to type up a few sentences here.. Yes that would be one idea. I am a little pressed for time at the moment, but I should try to explain things better before Friday. Until then, this might help a bit:\nhttps://apereo.github.io/2017/03/31/rc3-release/#ticket-metadata-and-catalog\nI'll point out specific examples a bit later. Stay tuned. \nAnd as always, fantastic progress. Thanks very much! . Your solution is perfectly sound as is. It is however not sustainable because it promotes \"a bad habit\". This is the principal of information hiding where each module should only be concerned about its own stuff and not leak outside. I understand it's a lot of work and I am happy to help where I can, but I do think this is the right way to go about this and keep sanity in the build. I understand it might seem like a small thing right now and insignificant. Small things pile up over time and this is mostly foreseen pain. . This falls into three categories I believe: \n\nstorage systems that are cache-based. CAS will auto-create everything that it needs and will split up caches for various ticket types. Fine-tuning of the cache is usually handled  by CAS exposing settings.\nstorage systems that are no-sql based. CAS basically asks for a collection name I believe and that's mostly it. All other optimizations are handled by the user directly.\nstorage systems that are RDBMS-based. CAS creates the schemas automatically, though that can be disabled via settings.\n\nI understand that doing this automatically is 1) a lot of work, and 2) hides a lot of information. That's all fine. I would like to see how the script is affected once the code here starts to use the ticket catalog, and then we can discuss this further...and if needed, handle this in follow-up pull requests, etc. . Cool. I think there is opportunity to remove either the parent interface entirely here, or maybe that specific method by stuffing it some place else, but that can obviously happen later. . Btw, make sure you adjust the @since tags please to note 5.2.0. I'd promised to provide some notes on how this works:\nThe general idea is, modules that have extended the ticket hierarchy attempt to register their own special ticket types into the catalog. This means, no storage system should have to make assumptions about what is available statically. It will need to look into the catalog to figure out what is available and proceed based on those. For example, OAuth/OIDC/etc register special ticket types, and Hazelcast as an example splits/auto-creates caches for each if/when needed by simply looking up ticket definitions in the catalog. \nIn your particular example, you want to try to do the same sort of thing. You don't have to create a \"cache\" for every ticket type. That's up to you. Not all registries today actually do this; for instance Ehcache stuff everything into a single cache (see https://github.com/apereo/cas/issues/2561). You as the designer of the registry must decide/design how to best scale and optimize the internal configuration/creation of all things registry/storage related....and hide all of that from the configuration/deployer. If you need one table per ticket, great. If you don't, also great. Just don't ask those questions from the deployer as much as possible :) \nTo recap, the key thing here is to simply not make assumptions. . Possible suggestion for later: might want to move the consumers into a smaller inner/static/private component to make sure this class itself remains as nuclear as possible.. What is the significance of this value here? . I am not sure I follow your comment here. Could you explain please. Are you saying the publishEvent() call should turn into a separate EventPublisher component? . If this actually needs to be 0 to limit monitoring intervals, how about an overloaded constructor that removes the need for the passing of that value?. Thanks for the note. Should this turn into a TODO comment? . Thanks for the note. Should this turn into a TODO comment? . See comment above please.. Yup, that's all good. Make it happen please :) . Not a javadoc thing; more of an IDE+Checkstyle warning thing. I'd rather be annoyed by INFO/WARN messages of some static analysis tool than to discover things need to be maintained by reading javadocs :) . Yes, definitely.. I may also suggest perhaps adding a log message in either scenario, explaining \"the expiration found is X\" or \"could not find an expiration\", etc. . Given what I have seen from various LDAP servers and weird behaviors, I'd keep them separate but I might just ask @dfish3r to confirm. . Note that this is probably not the best exception to throw. There are better ones that specifically deal with authn failures. See other handlers for examples. . The only one you really need here is cassandra. Everything else is provided for you. . I do not think you need the configuration module declared as such. . Just a reminder that explicit table names need to simply go away. This solution does not scale.. Always try to reference the CasConfigurationProperties parent instead. . This is not correct. You need to follow the approach as other property containers. . Avoid bean aliasing. Let the method name define the bean name, like other config classes.. . Prefix the method name with cassandra to avoid conflicts. Declare the bean as conditional please.. This is not correct. The name is a mismatch. Need docs to explain exactly what this class does and why. Need docs to explain exactly what this class does and why. Table names need to go away. . Prepared statements per ticket type need to be dynamically constructed and cached if need be. . else clause is superfluous. . This defeats the entire purpose of the ticket catalog. Explicit checks are and should never be required. . No casting should be allowed. Always work with the parent interface without making any assumptions. . This file needs to entirely go away. No logback is allowed as it messes up the rest of the modules working with and using log4j. . This interface likely needs to entirely go away as operations listed here are almost exact duplicates of the registry itself.. No need for a qualifier. Parent interface probably isnt correct. See other cleaners. . This does not look right to me. Why are we only cleaning expired TGTs? The cleaner should not make any assumptions about ticket types it works with. . I'd prefer to be on the safe side and simply return a new List, Set, etc. immutable collections as such as not serializable and I am sure somewhere down the road that might bite us, given they are pretty difficult to catch up front. . Same note as above.. Need better comments here please, essentially what you have put down as the description for the PR :)\nAlso author and version tags need adjusting. . This doesn't look right at first glance. Services are sorted usually by evaluation order. Does this break that? . Would be good to explain what this pattern actually does, via comments. . Also try to call RegexUtils to create the pattern, and probably the pattern should be defined as case insensitive? . Cool. Thanks for clarifying. If you're up to it,  the explanation here might as well turn into javadocs? . Please avoid Collections.unmodifiableCollection. If you want to ensure the original collection remains in place, simply use CollectionUtils.wrap. Unmodifiable collections mess up serialization and all kinds of weirdness ensues. . I haven't checked honestly, but you might be able to delete this class entirely and use WebUtils.getService() or something similar in RegisteredServicesTestUtils, etc.. This is not a DEBUG entry. It's a WARN entry. . This is not a DEBUG entry. It's a WARN entry. . This looks like it can be improved by turning into a static field perhaps? . This needs to be corrected.. Version should not be hardcoded.. \"Ticket Registry\". It would be good to make this conditional and perhaps expose a setting that would activate different serializer types based on the option. . Javadocs to explain what this does would be useful.. Javadocs to explain what this does would be useful.. StringUtils.EMPTY. Blank is returned above and null here. Why the inconsistency? . This is probably an error. This is probably an error. These constants all need to be made private. Nobody outside of this class should know anything about the tables, etc.. Things like this need to be removed. You want to look up table names from the catalog. Queries and statements need to be built on the fly and then cached if needed on demand.. All conditional logic such as this needs to go away. You want to look up the relevant statement from a cache based on the storage name and/or ticket type rather than hardcoding checks. You are not just dealing with TGTs and STs and checking for types manually does not simply scale. . Is this correct? . Change the wording to not say \"Inserting\". Rather \"Failed to insert...\" . As mentioned previously, this will break CAS basic functionality with logging, etc. . Do not create schemas manually as this does not scale. You want to auto-create the schema based on what you find in the catalog. . The cleaning section is all fine, but it needs to get more generic than this. The basic issue here is the certain pre-made assumptions are made what ticket types are supported and handled and that is a no-go.. 0 might work, but have you tested this with single logout then?. Please revert this change. Immutable collections generally lead to pain. . Please do not use emptyMap(). Please do not use and revert. In fact, I'd even go so far as to say, this sort of thing probably needs to be enforced by checkstyle :) . Good stuff. Just a few minor changes here and there and some reverts. . Ah gotcha. Yes totally. Ignore please :) . typo? . Please default the comparison type to be EXACT. . Simply just use EXACT. No need to import opensaml explicitly? . Would be good to show a sample of this file.. You mean in the CAS overlay? I would much rather this turns into Java config where the version is configurable via FortressProperties. Possible to do? . Please move this block into the dependencies.gradle file, and reference is as libraries.fortress. . Small change; most of the execution plan configuration is now made conditional. Could you please add the same tag here? See others for examples.. This sample could perhaps be added to the docs as a decent starting point for the file outline? . Would be good to document this and note what it means, in form of javadocs.. This will need to be updated to match 5.2.0. Capitalize log message, and use [{}] instead. Use [{}] instead. Use [{}] instead. Capitalize message.. Cannot marshal fortress session with value.... Use EncodingUtils please.. This wont work. You want to add a name setting to the google object and then externalize the value.. Good point.  Hardcoding the name presents the side effect that it makes it harder to change it later, in case someone wants \"Google Login\", \"Google Authentication\" or anything else. Preferences run wild around here :) \nOne compromise would be that we should still externalize the name, yet if anyone wanted to change it to something else that would also mean some UI changes would be in order to make sure the switch matches. UI changes in this area are almost always a requirement for deployments so this should not be too troublesome. \nBig picture, we might want to rethink the logic that it takes to calculate a type better so as not to not tie it directly with the name but for the time being, this should do OK. . Also, please don't forget to put out the same patch for the master branch. . Where did 18 come from? . If the key is base64, is there a possibility ever that the key length might not match the key size? I am thinking this if block here could be simplified a bit. . This log message might also be tricky: if the key is base64 and yet for some some reason key.length does not match the encryption key size, are we correct to say the key is not not base64 encoded? Perhaps we should divide those conditions with explicit log messages? . Also would I be correct in thinking this patch is compatible with existing keys that folks already have generated? . Turn this into a @link javadoc tag please. Lest the file gets moved/renamed, we should be able to catch it. . Turn this into a @link javadoc tag please. Lest the file gets moved/renamed, we should be able to catch it.. Turn this into a @link javadoc tag please. Lest the file gets moved/renamed, we should be able to catch it.. Do we have test cases for this new class?. You also should add a test case to ensure existing keys are and can still be supported. Breaking compatibility at this point probably would not be all too well received. . Please don't autowire. Pass the instance directly when the builder is constructed in its own bean. . Perhaps a log message to indicate the URL isnt valid? . Does it make sense to only pass a subset of properties rather than the whole thing? . Not a necessary javadoc tag; please remove. . Also it would be best if you could use constructor injection rather than a setter. . Remove all such tags please. This is just extra \"noise\". . We should be able to just pass in the boolean we need in the constructor, right? . I suspect you might be able to annotate this with @FunctionalInterface? . Perhaps an opportunity to create a test case for this class and the factory as well? . Could you document the same sort of explanation in the code where the property exists? in form of javadocs? . Use oneliner javadocs please; try to stay consistent with the rest. . Reset formatting changes please.. Is this really something that needs to be calculated in the java code? Cant we calculate the same thing here in the UX, given the thing you're working on is related to UX anyway?. @danielfernandez is there a better more recommended approach where one could do #strings.replaceAll in Thymeleaf? . All great. This bit here I think needs to be looked at more. Two things specifically:\n\nI don't think CSS classes are things that belong in a messages.properties file. That's a file used a language bundle and css classes don't belong there. (There is no need to translate a CSS class for example).\nProbably need to find a better strategy than cas.pac4j.saml2client3.name=SAML2 3. The more automatic you make this better....and while this might be far fetched, there shouldn't be a limitation on how many clients of SAML or CAS are supported here. (Today, I am forced to add keys for the 4th one, and I would like to avoid that technical limitation).\n\nMy suggestion would be to remove all such keys from the properties file here, and move them to the relevant html page. I can promise you that for a real deployment, all of the html/UI is going to get ripped out and replaced with something entirely custom and in those cases, I would like the entirety of UI changes to be removed from the deployment if needed, rather than replacing the HTML and leaving the properties.\nMakes sense?. You very likely need a log message here. In fact for both PRs. . Are you sure this line makes sense?. This needs to be documented explicitly and clearly, like all other settings. It also needs to include a default value.. Yup. That's good. The rest likely need to move over from the actual handler at some point.. Also v is probably not a very good variable name. Either choose id or something more apparent, or remove the variable and set directly.. Please update this test so that:\n\nCreate a service object with the relevant properties\nSave it as JSON, serializing it.\nThen read the same file again as JSON and ensure it matches what you expect.\n\nDo not hardcode raw JSON snippets into tests.\nOtherwise, excellent. . Remove this please.. Remove the default value.. Fix indentation.. Actually I am wrong on this. Please leave this be.. Excellent, thanks!\nFor the most part, you can \"fake\" one yourself by copying an existing UID and changing values...or I believe both eclipse and IDEA are able to auto-generate them for you. (IDEA has an inspection in fact where it fails the build if a serializable class does not have UID, or a generated UID I should say). . It appears we have a copy/paste problem here.. Very true. I might just add that there is also support for management.yml file, as well as any and all profiles you may wish to use to break down properties. The functionality is exactly the same as that of the core webapp, except the name of the file :) . This line needs to go away. It simply forces everyone to run/enable oauth automatically, when they begin to use memcached. The test dependency too. \nIn order to ensure oauth (and everything else) is accounted for, there will need to be a more dynamic strategy where each module on its own begins to \"inject\" relevant components into the kryo map, if kryo is found and enabled at runtime. Doing this statically causes unforeseen caveats.\nAll else looks fine. Thank you!. I would support that approach; though rather than removing the logic it would be best to expose options for those two operations, such that if X = true, auto-registration is turned on and all else is skipped or otherwise, the existing approach is kept. This I believe should present the least number of surprising side-effects.. > If there's an option, what should the default be?\nSame thing as it is today. Auto-registration is off.\n\nUnder what conditions would the alternative be invoked?\n\nGiven deployer's consent, the option would be tweaked. It's a decision one might have to make.\n\nFrom inside CAS or from someone overriding from a cas overlay project?\n\nAt the overlay project. The default value for the option preserves the behavior today, and YOU in the overlay would tweak the option to enable auto-registration. That solves the problem for you, and keeps the existing behavior for those who are happy with their existing configuration and have no issues. . Sure. There is cas.server.name mapped to CasServerProperties.java. Plenty of others.\nIf you review the master branch, in BaseMemcachedProperties, there are options for this sort of thing: kryoAutoReset, etc. They are ready and applied to the kryo component at initialization time.. Rename this to isValidAnswer() please, or more verbosely, isValidSecurityQuestionAnswer().\n. While this is fine, I suspect we might want to refactor this in the future to expose a \"validator\" interface of some kind where you'd write the implementation for that only to validate answers. . 1. See my earlier comment. As long as you expose an option and keep the current behavior, that's fine.\n2. Negative. Class names may change, and forName() as performance side effects which should be avoided at all costs. As I mentioned, it's not just oauth. There are or may be plenty of other modules that might need the same, and hardcoding class names is not an acceptable approach. A module should be self contained, and all others with specialized serialization needs should take care of their own, on their own.\n3. See #2. . You see, the bottom-line motivation for the approach is quite simple: \"it should just work\". The expectation that folks would have to register class names via properties, and know how to do it, what the classes are and why, debug and troubleshoot to figure this stuff out is simple impractical. Nobody is ever going to understand it and by extension, nobody is ever going to do it. If you deploy OAuth or any other module, THAT MODULE already knows what things it might need to inject into the context already. Because it's doing weird things, and it knows best what needs to be serializable and how. The expectation that adopters would have to teach that to CAS is not reasonable, and dynamic behavior where the thing is then going to reflectively new up class names is also not that productive, because if for instance, oauth is already loaded on classpath at runtime, there is need to need to use reflections. Inject, fire and forget, which also keeps it consistent with everything else that CAS does dynamically, keeping modules separate with very little overhead (Consider how authn handlers are injected into the runtime). . 1. Correct. It's broken. For you. This is the first time this issue has been reported, and at least for me, I have deployed this module a number of times without ever having to deal with this issue. I don't know what's unique about your deployment, but I'd rather keep the existing behavior and expose a variation of it via an option to be on the safe side. If over time, the option proves to be more useful and indeed becomes da solution, we shall and by all means, switch.\n\nA performance hit is a performance hit. If it can be avoid, it should be avoided. But more so, it's simply unnecessary to do for other reasons I outlined. There is no need for cross-module dependencies. This is how OIDC overrides OAuth, and this is how MongoDb can be used for GAuth and this is how you can register a JDBC authn handler into the authn engine without static linking. Memcached might not follow this approach just yet. It should, which is the root of my suggestion here.\n\nI understand the complications up front, and will be more than happy to provide you with a foundation on master so you can resume work on here. Hopefully, that would serve as a good baseline. Short of that, simply live with the patch in your environment. . By the way, in the interest of making progress I recommend the following: remove the oauth dependency for now so we can merge the PR. That would be very good. Once similar work is done on master, I'll ping this PR so you can review and implement a similar approach here as a new PR. Sound good? . Outstanding. Thanks. I'll work up a few examples and a put together a general framework for that sort of thing and we'll review together. Will ping the PR again when the changes are in.. Excellent find, and sure. Please do. . All good. Much appreciated. Who could say no to more tests :)\nYou just need to fix the styling issues I believe; if checkstyle complains about your use of singleton() and such, simply add a rule to suppress those errors and make an exception. . This needs to go away. You already have the login url under CasServerProperties:\nhttps://github.com/apereo/cas/blob/master/core/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/core/CasServerProperties.java#L134. I dont think an exception is thrown here? . I remember similar code constructs such as this. Probably could use a common place with a bit of cleanup? . Should probably be a @Bean, and probably deserves a better name to avoid conflicts. . All great. Thank you. However, do unchecked exceptions need to be part of the throws clause? (I suppose they are, if you want to add javadocs; just checking). All great. Thank you. However, do unchecked exceptions need to be part of the throws clause? (I suppose they are, if you want to add javadocs; just checking). No, all good. I guess I was really thinking out loud really; I remember IntelliJ seemed to bug me about declaring runtime exceptions, but it did also complain about a @throws clause being there in the docs without an explicit declaration of the exception class. Catch 20-20. \nAll is well. Carry on :) . This cannot happen. webapp modules may not be accessible from support modules. I recommend you move the new interceptor into a more commonly-shared module. How about something in pac4j-core, etc? . Are we sure core-web is the best spot for this? Isn't this specifically a pac4j thing? . Why not pass the decision and attributes? Why break down to individual fields? If a new field is added in the future, it needs to also be added here right? Passing the decision object entirely helps to reduce work? . This probably needs to be renamed. config is way too generic and easily at conflict with something else. . Could this be moved to the security interceptor? In which case you no longer need this class at all? . This will likely need to go away at some point too and turned into sass. Can help with this bit if you want.. Ah, you're right. Never mind :) . How about cas-server-support-pac4j-core? . Please turn comments such as these into proper javadocs.. Probably should be getEmail. This looks rather stange. It should be more like:\nreturn new ToStringBuilder(this)     \n                .append(\"x\", this.x). Please remove this and define your own sentinel properties.. Properties need to implement Serializable. . Likely not needed.. Formatting is off? . Formatting is off? . Could getNodes() be defined as an indexed list instead? . All fields need to include proper/decent javadocs, please.. This should be AccountPasswordMustChangeException instead.. Perhaps we should do this as the DELETE verb of http.. I am not sure the principal is actually needed for a delete op right? All you should have to know before delete the record identifier. I'd rather just pass the id with delete. . /consentDecisionId in URL path doesn't look right? . /consent is a little too generic; it would be best if this was made a bit more explicit by using something like /contextReview, etc.. You may want to turn this string into a constant and use it throughout the class.. You probably should also do:\nfinal ProfileManager manager = WebUtils.getPac4jProfileManager(request, response);\nmanager.logout();. /callback is also a little too generic. Make sure the endpoint corresponds to the functionality at hand. /consentReviewCallback is clearer, for instance.. Why this?. Of course, if this is scoped to the parent controller, such that it turns out to be /consent/callback or some such then it's fine and you just need to ensure the parent controller has a more explicit mapping.. Sorry; should have been clearer; the attribute release policy specifically.. Looks good.. Gotcha. I would either set this to deny attributes explicitly, or leave it as default (which probably is the better option).. Is there a reason this only applies to the access-token URL? . Thanks for the notes. I recommend you do 2/3 things before we can merge:\n\nPlease update docs to note the settings. Also update the setting with full javadocs to explain what it does. (Much of what you noted down here should go into the javadoc field).\nPlease update docs to explain the new functionality and its behavior better.\n\nThen, it would also be good to ping the cas user list and ask how folks feel about turning on throttling by default and what those reasonable settings should be. (In my experience, most deployments tend it want to keep it off; not that I agree but it's sort of the norm).. Use WebUtils please and the relevant method that puts credentials into the flow.. Use WebUtils please to abstract away such calls. . In fact, probably the same call that fetches credentials could possibly also look into the conversation scope?. Does it make sense for these consts to go into CasWebflowConstants? . nitpicking: wrapping seems needless to me. . Follow the convention of [{}]. No objections, but why the name change? . Of course it is! :) Sorry. . Excellent.\nRather than tying \"audit\" functionality with logging, and rather than introducing individual fields, wouldn't it be better if you simply included all request headers in MDC and then picked out anything you needed in the logging configuration instead of documenting and selecting individual headers?. Wonderful. Please ping back when you have made the change and we'll be happy to merge. Thank you for picking this up!. Excellent.\nI recommend you simply clean up this block with the following:\nCollections.list(request.getHeaderNames()).forEach(a -> addContextAttribute(a, request.getHeader(a)));\nWhich not only reduces LOC but keeps it consistent with the line above it. With the null-check of course. Otherwise, looks brilliant.. You did perfectly fine. Thank you!. Switch to getTransitionableState please.. Please take out this line (#80). Or put in a different way: Front channel logout may not be available for all CAS clients. Ensure your CAS client does support this behavior before trying it out.. Delete this class altogether. Simply introduce a new property and use that in the original action to do what you need. Set the setting to true for your deployment.. I dont think this bit is redundant. If a ticket is about to be generated for a service which is no longer authorized to access CAS while an SSO session does exist already, (and the deny was applied to the service config after the fact), are there checks in place to make sure access is denied? . Excellent. Thanks!. This also seems like it should be 3.0.3. I recommend we take out the schema version and sync with the protocol version that way. . Is there a reason CAS protocol X would want to have a different protocol XSD schema version Y implemented by CAS version Z? (You see where I am going with this?) . to further elaborate: I am not saying the schema should not be versioned; I am saying it should be, and its version should simply match and be equal to the CAS protocol version. Because it's unlikely (and possibly very confusing) to have a schema version matching one protocol version implemented in one CAS version. In practice, we already have a difficult-enough time explaining to folks \"no this is a CAS protocol version; it has nothing to do with the CAS server version\". . Log message is little too presumptuous. . I recommend you remove this interface and take a look at existing serializers that deal with tickets. An example of this would be the mongodb ticket registry for instance.. None of this should happen. The registry must be able to support all kinds of ticket types; not just TGTs and STs. You will need to create queries, schemas and everything else dynamically based on the catalog never ever assuming anything about the ticket type manually and rely entirely on the ticket catalog.. This sort of logic here needs to be avoided. It defeats the polymorphic functionality of the catalog. Any time you find yourself checking for a ticket type to do something, that's a bad sign and needs to be reviewed.. You may be able to review MongoDb or DynamoDb ticket registries. . Remove this. Use mocks please.. loggers need to be static and final.. This should likely go to where other action state ids are stored; WebflowConstants or some such.. See my comment about loggers.. Javadocs for getters/setters are generally not needed.. Name this method more precisely; It's storing a profile so lets call it that. . Can this ever be null? and if so, we should assert to make sure it's not or throw an error? . This is not right. It should be service.getServiceId(). I recommend you move this line to the parent build.gradle file where all the other settings are. Makes it easier to manage. \n~Is this parameter something that should be set to true when a CAS release is cut?~. Got it. Thank you for the notes. To clarify, I realized after posting that comment that my question was fairly m00t and the flag is obviously forced manually when needed, not quite affecting the release process. If you can move it alongside other build parameters and settings, that would be superb and I'd be happy to merge this in. . Happy new year to you too!\nWhy do you need the expiration date for TGTs? You cannot or should not store the expiration date anywhere because it's not something that you can or should calculate statically. . Gotcha. \nNo, you don't need to get all the tickets. You can design your own cleaner that constructs a very specific query to only retrieve tickets that are expired, rather than getting them all and checking them one by one for expiration. Based on the ticket creation time, you can design a query with a where clause that looks for tickets whose creation time is greater than or less than blah, etc and then only process those and clean them. \n  . Also, please close this PR and start a new one. This is getting quite long, confusing and convoluted and it's difficult to keep track of notes and comments. . The drawbacks are that that expiration date is not a static value and cannot be calculated beforehand in most cases, especially if you want to account for idle timeouts or other dynamic forms of TicketExpirationPolicy. You might want to design this such that in your deployment, you override the necessary bits to make it work the way you need to until the expiration policy API is changed to make things behave more streamlined.. This is likely not a good name for this behavior. Change to NOSQL or something like that.. I don't think this is actually needed at the API level; it's something very specific to a module and I believe the JDBC ticket registry and others do this by stuffing things into the Properties object. You may want to look into doing the same.. Wrong message? . What is this about? . You will need to pull in the configuration-api. Why import this? . Remove all. Move to the place where the action is created and potentially use NotNull annotations.. This needs go away. . Rename.. Actions classes dont belong in a core module, I dont think. . Rename; stick to guidelines please. Remove; fix the warnings where applicable. . Turn all comments into proper javadocs.. Change type to action.. This probably should be catching Exception. Right? . The log message here is incorrect. You're not granting service tickets here.. The action name must be changed too.. The action id must be changed too.. The failure event id must be changed too.. Authentications, not Authorizations :) Very different concepts. . Cool. Thanks for the note. This is fine as is. . Please rename these methods, removing the number 2, into something that is a bit more intention-revealing.. Please rename these methods, removing the number 2, into something that is a bit more intention-revealing.. Remove the word encrypt, and replace it with jasypt. Remove the word encrypt, and replace it with jasypt. Convert to Java 8 streams, using filter and map APIs. . Convert to Java 8 syntax.. Convert to Java 8 syntax.. Need a warning here in the logs.. Fix typo with wit. Fix the help text; algorithms listed do not only affect encryption. . Log placeholders per convention are formatted as [{}]. Add a boolean flag for BC to keep consistent.. Remove the word encrypt from command, name, fix typo in help message.. includeBouncyCastle is a better option I'd say.. Either add to Javadoc or avoid inline commenting altogether.. ...PropagateExceptions...small typo.. ...PropagateExceptions...small typo.. Sorry to be persistent here; thinking about this again: what is the harm in adding BC by default anyways? . What does this do? . pac4j - Please stay consistent with prefixes.. It might also be good to combine this with attributes defined to be fetched directly from authn sources. (LDAP and JDBC at this point).. This is perfectly good, but I think it might be slightly better if you simply inject the Map into this class, rather than building here every time. I can think of a number of advantages with that approach specifically wrt to reloadability of the settings.. This will not work. The list may have attributes that are mapped to something else. You cant take the Map as is and you need to transform it. See examples in the codebase on how the list is processed. The same applies to the JDBC stuff below.. Remove the reference to the interface; Only add if you can actually link to the component. . Link to constant please.. X509CertificateExtractor is a better name.\nAlso the interface could be tagged as FunctionalInterface?. Remove header. \"Tomcat SSLValve\" instead. . RequestHeaderX509CertificateExtractor. Remove; use lombok.. Remove; use lombok.. Rename method to reflect intention.. Rename variable. Use IsNotBlank/IsBlank from StringUtils.. Remove. Not needed.. All comments should turn into Javadocs.. StringUtils would be good here.. Why check for log levels? Is the generation of the log message expensive?. [{}] instead.... This is generally not a good idea. It would be better if you create a NoOp instead, or create a new Action class and inject it dynamically when settings allow for it.. Through painful practice, we have learned that introducing an auto-wired field into a class that is somehow somewhere expected and assumed to turn into a Bean causes all sorts of weird issues, least of all for tests. There are a number of lingering auto-wired fields still throughout the codebase, all of which should and are getting consistently cleaned up where the bit is moved to the appropriate Configuration class.\nAs for the suggestion; yes that's sort of what I had in mind. You have the default action today in CAS, and your particular behavior would be an extended version of the default with some additional ops to extract certificates. If the child action fails, simply delegate back to the default. Then as you note, the actual bean definition would be constructed based on the presence of a particular setting. \nIf you need to chain the two actions together and have them, one at a time, process a request...we can discuss that too and there are examples throughout that sort of show how to do composite type operations without introducing the risk or check for NPEs.. No worries. The injection would come from whatever class that is building the bean instance for CasServerProfileRegistrar. It's probably the related @Configuration class. You can build the map fully there, and you also wouldn't have to worry about null checks on attributeRepository. The suspected candidate would be CasDiscoveryProfileConfiguration.java.\nThen the final Map/Set gets injected into the class here (and you can, if you are brave, mark the bean with RefreshScope) . Please document these. . Is there a possibility that we might run into an NPE here? or that the values be null? . Please review the relevant section in the master branch and backport accordingly. Thank you.. Thank you for the change. Is this change really necessary?\n\nThe fact that the path uses /: does not indicate that this is Unix-based?\nThat fact that the path begins with /: does not indicate that this from the root directory?\nThat fact that the path begins with /: does not indicate that on this windows you should start from the root which is c:\\?. Please use , instead to be consistent with other properties, and use org.springframework.util.StringUtils.commaDelimitedListToSet to parse the values. Please update the documentation for the field to explain the new behavior with examples.. This probably can be transformed into Java 8 syntax with a map() call. While this is excellent, let me also ask: would you be interested in putting together a few unit tests that demonstrate radius authentication functionality? You can try to spin a docker image that is based on free-radius and run tests against that. If so, let me know and I'll guide you through the process.\n. Something like:\n\njava\nipAddressSet.stream().map(ip -> return getSingleRadiusServer(client, server, ip)).collect(...);. Cool. Not a showstopper for this patch of course, but it would be great if you could contribute in that area when time permits.\nThe process is somewhat simple:\n\n\nWhen Travis CI starts, it will spin up a number of Docker images. You might need to find one based on freeradius that is configured with the essentials (i.e. protocol, client, secret, user accounts, etc). Then, you make sure Travis CI is able to start your container like it's done here for Couchbase:\nhttps://github.com/apereo/cas/blob/master/.travis.yml#L50\n\n\nAnd you write a shell script that is able to start the freeradius docker container:\nhttps://github.com/apereo/cas/blob/master/ci/run-couchbase-server.sh\n\n\nFinally, your test case will need to be just like any other test but it must be annotated with the following:\n\n\njava\n@RunWith(ConditionalSpringRunner.class)\n@ConditionalIgnore(condition = RunningContinuousIntegrationCondition.class)\npublic class MyTests {\n...\n}\nThis will make sure tests are only executed as part of Travis CI only. \nI should say that if you can find some sort of \"embedded\" free-radius server that can be started/stopped/configured programmatically, we can skip all the docker business and simply write normal tests...or just as well, if you can find a free cloud-based radiusserver that we can use a basic subscription for testing, that's fine too.\n. Documentation must be updated with the new settings.. @dima767 how did you validate against Couchbase 5? This is still pulling 4.6.4, no? . Ah, I see you're pulling/running the image here. Cool. Ignore comment :) . I think we might want to rename the interface, if it's to deal with or support specific webflow concepts? . > I think passing in the RequestContext object directly is a better pattern when the object is already directly available.\nAgreed. . Please remove these settings, and instead, only list the group id and link out to the Commons page where crypto settings are listed.\nExample:\nhttps://apereo.github.io/cas/development/installation/Configuration-Properties.html#jwt-tickets\n\nThe signing key and the encryption key are both JWKs..... Signing & encryption settings for this feature are available here under the configuration key .... Small typo: YubiKey? I think The K is capitalized elsewhere as well. . Please remove, and use @RequiredArgsConstructor instead. That would only make a constructor available for final fields ignoring others, and you already have the field. . Same sort of typo here perhaps?. The formatting here needs to be cleaned up. . Add the annotation to indicate a nested configuration property.. Add the annotation to generate a no-args constructor. Add to all subclasses as well. . Cookie settings likely need to be referenced rather than duplicated here.. Remove duplicate Qualifier tags please, use ObjectProvider instead as a class field.. Please mark the bean as conditional, and include a log message when a NoOp is created.. Same as above.. Same as above (Also note that else clauses are redundant) . You should try to rework the design so that beans are only generated if enabled is true. Bean creation must be made conditional, and then you can ask the application context for all components that are created and register them appropriately.. Please remove all javax.annotation.Nonnull from the code. These cause issues with JDK 9 and later in the future.. The suffix \"Component\" seems a bit redundant to me; Everything is a component. What exactly is the purpose of the interface? That should likely be indicated in the name. . Ah, I see. I suppose using RefreshScope something that one could successfully take advantage of, in this case. Thanks for the note. LGTM. . No worries. Thanks for the help. . I think you should opt for a verb that encompasses the category of features this interface provides rather than a noun since the sort of class we have here actually does stuff, rather carrying stuff under a label. Its sole job seems to deal with calculating a fingerprint hash for the device. So anything in the neighborhood of \"Calculator\" seems OK with me; \"Computer\", \"Resolver\", etc. \n\nThe thing that it returns however, after doing the calculation were it not a simple String could perhaps be refactored into a DeviceFingerprintDimension which one might see as a simple data class, carrying data only. \nPlease note that I am possibly nitpicking here. If DeviceFingerprintComponent is a good enough, so be it :) . if (StringUtils.isNotBlank(registeredService.getClientSecret()) ... ). This is not a Test class? . Please rename the class to end in Tests (plural). Otherwise, it will never run as part of the build.. Fix version.. Do you need to cast down to the Impl class or can we stick with the parent interface? \n(Also, extra space at the end should be removed). Same comment as above.. You probably could add @Functional here.\nAlso, I think a rename here is in order since this interface is specific to the service registry business: how about we switch to RegisteredServiceResourceNamingStrategy? I dont imagine we'd be using this interface for rename strategies for a variety of things, right? Makes sense to me keep the interface and impl specific in names.. If you do rename, please rename the bean id as well. . Use '=' instead? . registeredServiceResourceNamingStrategy, and the actual method name should change too. . This needs to be updated too.. And this as well. . implements Serializable. Please make sure everything is properly documented as well, like all other values. . It would be ideal if configuration classes were given names.. You also need to make sure everything else that references clientAction is switched over, to use the new name.. Remove the interface, please. . StringUtils.isNotBlank(requestedUrl). Isn't the standalone configuration file added here as the first property source?. Remove all protected instance. Remove their javadocs. Only mark those as protected that are needed by your changes. . You need to explain this better.. You need to explain this better.. Remove.. Explain the message better. . Why is this necessary? . createAuthnFailureActionState. Use a constant for the failure state id.. Gotcha. It's perfectly fine. . Isn't configureWebflowContextForService owned by the same class that houses all the properties? If so, you do not need a field to be marked as protected only to then access it from a method inside the same class that has the field.. Ensures cookie paths are properly set for the generators when the flow is initialized. . Possibly should change to:\nLOGGER.warn(e.getMessage(), e);\nThe error message that is indicated above does not make that much sense. Principal attributes cannot be validated in any way by CAS.. In that case, you need to simply add a flag that displays that behavior, rather than adding a whole new class and action and accompanying beans.. Any reason these variables are removed to not be final?. Furthermore, as far as I can tell the configuration of cookie generators only sets paths for the generators. Therefore, is there a reason that operation is removed? does it cause a failure or break something? If not, you should simply let it be and remove this class altogether.. Could you explain this bit please?\n. Could you add a few test cases to account for this scenario please, for all repository implementations? . Please remove uses of val. This generally interferes with JDK 10 upgrades in the future when we switch to var. \npost-edit: if for whatever reason we decide to switch to lombok's val, then it would need to be applied consistently across the entire codebase. . how would this work with the calling client using SAML1 instead of CAS? . While this is a good partial solution as is, we would need to investigate use of SAML and cannot merge this as is. I recommend you spend a bit more time on this, to stand up a simple java client using SAML1, and get it to use delegation as well to see how the change behaves. \nI also dont think you need to extract the service parameter manually. There are argument-extractors and such for that already that should handle the saml bit too. . This should get you going: https://github.com/cas-projects/cas-sample-java-webapp\nAnd it would be even better to update tests to account for the changes you have added. . This should be documented to indicate what it does.. Move comments into Javadocs.. Could you turn this into a bean inside the original configuration class, and pass what it needs as a parameter, autowired, etc? . Please document the most likely values for the position.. Please restore this block and perhaps instead of throwing an error, log a message to indicate the behavior introduced below.. This is intriguing. what is this for? . Same as above. Things like this should be avoided.. Please externalize the version, and then move out of this PR into a new one.. Use CollectionUtils please.. Mark as final.. Log message seems off here. \"service\" ?. Name the configuration class and tag it.. Remove; switch to required-args and make the field final.. Couldn't the object simply be cloned? or shallow-cloned using any of the commons library methods?. Mark bean/method names as conditional where possible; make sure the names are \"event\" specific. . This likely needs to be reworked. . Mark related fields as final; switch to required-args. . Same as above. Swap with required-args.. A debug message here to indicate the calculated date-time would be helpful.. Happy to take the credit, but you likely need to edit me out.. This is excellent. I recommend you remove the interface altogether and instead simply modify the signature of getAuditRecordsSince to be more generic. It doesn't make sense to have both methods in there.. Ah, gotcha. Let me work that into inspektr then, and cut a release, or would you rather do that as well? . Wonderful. Lets get this merged then based on the current inspektr snapshot and once all things pass, I'll cut a quick release. \nThank you.. Don't you want to cast the result as a double, instead of just the failure threshold? . Thank you for the note. In that case, wouldn't it better to simply change the variable types to be double instead and remove the cast? Furthermore, is this something you be interested to write cases for? . This will likely need to go away. IIRC, there is a test configuration class already and mocks up the service manager with a number of dummy/test service definitions. This may be an opportunity to reuse that. If not, then InjectMocks is probably an easier thing to do and it's less LOC. . This seems suspicious, given it's like defined in the parent class.. Also suspicious.. Is this an accident, or is this line no longer needed? . No worries about the test. It will eventually get there; and yes to backporting this to 5.3.x. I took care of this for you, since the change was super small. \nThanks for contributing. If you do need help with setting up a dev environment, check out the docs. There is a section that should get you started with the build process. . Please delete this test class, and move your test into InMemoryGoogleAuthenticatorTokenCredentialRepositoryTests.. Everything is generally controlled by checktyle and findbugs, if you're looking for those sorts of guidelines. Notes are available here: https://apereo.github.io/cas/developer/Build-Process.html\nBesides that:\n\nIf there is an existing test, make sure it passes and make sure it's included in the test suite (if found, or else create one) and make sure CI passes too.\nIf there is no existing test, try to write one.\nAsk for help if you need to :) . In the end, I understand some of the style guidelines can be somewhat painful to go through; so most usually, if you have done the bulk of the work and cant quite figure out the guidelines just yet, I personally try to get the change merged for the first few times to help you move along; that is if you dont want to deal with the style guide issues yourself. . Please rewrite the comments altogether to explain the intent of the setting, and not just its usage warning. The usage warning is already documented.. Please rename the setting to explain exactly what it does or activates or supports. As a suggestion, something like useRequestExtraction, extractFromRequest, etc.\n\nAlso, please keep the default behavior as it was. While the usage warning is adequate, it would be nice to not have to present breaking behavior for those who may find that compromise to be acceptable given deployment choices and environments.. Please remove this reference. A webflow module cannot preferably access a support module. Rename flag to explain what it actually does.. It doesn't make much sense to combine the functionality implemented here with the old behavior in one class and then differentiate based on a setting. I would probably prefer to create separate classes, different forms of RestHttpRequestCredentialFactory that each do exactly one thing. Then in the bean definition, based on the presence of a setting or its value, we can create each object accordingly.\n```java\nif (oldWay) {\n   return new X509RestHttpRequestCredentialFactory();\n}\nreturn new YourX509RestHttpRequestCredentialFactory(x509CertificateExtractor.getIfAvailable());\n```\nOf course, name the class such that its intentions are revealed. Don't be shy about getting wordy :) \nThe drawback would be that you wouldn't be able to use both new and old strategies at the same time, but I can't imagine that would be a proper use case and IIF that somehow becomes one, we can always refactor at a later date.\n. Based on my note above, you should try to remove this method altogether, and simply add the request parameter to the existing method. That way, if x509insecure is set to true goes away. . Sounds reasonable. Thank you.. I must admit I don't follow. What prompted or required you to include the webflow module in here? What did or does it provide for this work that you otherwise couldn't access? . Please revisit the comment and adjust.. I believe this needs to be flipped to keep the same behavior as before.. Consider using getClass().getSimpleName() instead of this. Please correct the javadocs for the class, and make sure the class ends with Configuration for consistent, and that it is made public. Remove the Slf4j reference as well. . Same as above; Consider using getClass().getSimpleName() instead of this. As above; Consider using getClass().getSimpleName() instead of this. Please retore the qualifier back. . Nitpicking tough I suspect spotbugs might consider this to be an issue: casProperties.getRest() can be extracted out into a single var perhaps.. Why the change? . Consider using getClass().getSimpleName() instead of this. 6.0.0. Also do not forgot to include the RequiresModule annotation.. Remember to document these fields as well with default values.. Small typo for the param placeholder.. Probably a good DEBUG call would also be: final failure mode calculated is..... The 3rd parameter (i.e. CasWebflowConstants.STATE_ID_MFA_UNAVAILABLE) should be transition ids. If they match the state id, that's fine but I wouldn't necessarily recommend this. Separate consts and values are better when it comes to troubleshooting this.. Does this really belong here? I think a better home would perhaps be the thing that configures the mfa flow in general. It would be best to try to keep the flow defn as pure as possible, and only interject when a feature is actually used. . Are the placeholders correct here?. Possible to include some sort of duo message into the exception from the actual result-set, or get that logged? . All need to be taken out.. How do these lines come into play? Should they be dynamically added here? and aren't you doing that already? . Due to. Check and error if there is no registration URL defined? . I think we have these lines sort of duplicated in DefaultMultifactorAuthenticationProviderBypass. Would be good to refactor and find a common household here. . One small placeholder issue, I think.. getCreationZonedDateTime. . Why this change? . Why ignore? . Remove all deprecated functionality please.. This seems to be duplicating the toCollection method. . couchdb. Please include this into the pac4j dependency. . Please include ConditionalOnMissingBean annotations for all beans.. Also consider using ObjectProvider for injected fields.. RequiredArgsConstructor would be better, if you make fields be final.. nextLong could return a negative, right? . You may want to avoid using SecureRandom natively, and use the CAS wrapper class instead.. Annotations should be removed here, if they are no-ops? . @ConditionalOnMissingBean?. LOGGER.debug(\"Requested authentication context is [{}] and available contexts are [{}]\", requestedContext, contexts);. This is a good starting point, but at some point, we should get this cleaned up. A handler component should not try to reach beyond its limits and deal with webflow scopes. We can clean up this bit later.. Unless you mean to make the method private of sorts, it would be better if you actually returned the provider instance, and renamed the method to reflect that bit too. . I understand why you had to do this, but this needs to be re-worked. We should try to stick to the most generic type possible, and introduce things that can be polymorphically recognized.. Not sure if it matters, but to be on safe side, collect to a set that can preserve order? . collect to a set that can preserve order? . Same as above. Try to preserve order. . This likely need to move next to other SWF constants in form of a ACTION_ID_XYZ.. Why this? . Also not sure if this belongs here. Shouldn't the MFA-related actions, etc be housed in a module that is only required for MFA, and not by default?. Same as above, really. This probably needs to move into some sort of common MFA module.. This does need to move into MFA Utils (I think there is a similar call in there already) . This needs to be renamed to be more explicit because Credential in master presents a property for source and it would be confusing to have both source and providerId in the same class. Something slightly more verbose like MultifactorProviderId would do, I think.. As noted early, this needs to be implemented by every form of MFA credential and not just Duo. . Is supports((MfaCredential) credential); a recursive call that would cause an overflow issue? . Could this be refactored now to use a more generic type? Since you're only adding a name here? And is this not a duplicate of AuthenticationContextAttributeMetaDataPopulator? . Switch the type to DuoMultifactorAuthenticationProvider? Make the method private? . Use ApplicationContextProvider.registerBeanIntoApplicationContext? . Collection<AuthenticationHandler>. Always stick to the more generic type, where possible.. I might have been looking at master. never mind this :) . Yes please.. It might actually be good to break up the saml-core module into one that has the config/starter beans and one that just has the API components so that this and anywhere else could take advantage of the API without activating beans. (Not required here; future). Remove these. Use AuditableExecution registeredServiceAccessStrategyEnforcer; instead.. LOGGER.debug(\"Found Entity Id in Service id = [{}]\", param.get().getValue());. Same as above, with log placeholders.. EncodingUtils.urlDecode. Should this be removed? . Also list here? https://apereo.github.io/cas/development/installation/Configuring-Ticketing-Components.html. It really looks like these objects are treated as singletons? If so, why not make them be singletons by following that pattern?. Are the above log statements really, errors and warnings? Seems like debug and info should suffice just fine.. Probably should use a qualifier here to make overrides easier.. I meant you have things like if (couchDbConnector != null) { then create it. This is basically a singleton, right? . Remove and use toCollection(final Object obj, final Class<T> clazz) ?. Same as above.. This should be removed. . Change log file name? . I dont see how this file is mapped in spring.factories. Is that done here? . Likely copy/paste error, for the file name.. This probably needs to be reworded. Also I really dont think the default value should be true. If bypass fails in the groovy script, we should likely consider that a catastrophic error and just halt together? . Ah never mind. I missed the fact that true does actually activate MFA which is correct behavior. So that's good; just reword the log message, for this and the REST one likely.. Is this really needed? It's going to cause maintenance issues when we upgrade gradle as it's yet another area one must remember to update. . Reword log message; remove all caps and include settings used in the message?? . It would be better if you prefix the config class with Cas because this might cause collisions later on with boot, as they also have something similar for HZ. . Use qualifiers, to avoid collisions.. Bean name here too is kind of risky. Was that always there? If not, we probably should rename this as well.. Nicely done. Once lombok adds support for InheritedConstructors, all of this noise would too go away. . Path seems unnecessary here.\nAlso, it would be good to logically order the tests configurations separately from others. Easier on the eye.. Reword log message; identify settings used that make sense in the message.. 120 magic constant? Opportunity to move this into settings? . Typo? . Just a cautionary advisory: try to move the comments to the code as javadoc, if needed. This will allow us to auto-gen properties and notes later on based on the cas config metadata as part of the overlay generation processor separately, as part of the work @mindblender is doing.. It might also be good to turn the engine name into an enum, so that validations can occur if someone were to produce a typo, etc.. Sounds like a good option to me.. Might this check be better placed inside the DAO itself, if it is not there already? . All such states or transition need to be prefix with mfa or some such. . Also please ensure constants are grouped together logically; states and transitions should not be mixed.. MultiInstanceMultifactorAuthenticationHandler.. Link AuthenticationHandler in javadocs. This is not a good name, I think. It implies the class is some kind of credential where it's not. . Not a good name, me thinks. Implies the class is an authentication handler while in fact it's not. . No such failure mode as NOT_SET. Remove and use @Getter. Reword log message. . Link in javadocs.. Do we care about case in equality? . Multifactor. Probably also rename bean to indicate this deals with mfa.. I vote that you restore the parameter back. Availability of a provider should be controllable via custom policies linked to a service, allowing for extensions to operate based on service properties, or custom services. . Is this going to work, if the webflow transition never comes to init-login-form, such as the case with delegated authn? . Multifactor. Rename the field to match the getter method, and then use @Getter.. Rename variable. Multifactor. Do you need te concrete type here as the generic type? Use interface instead? . Reword log message.. This should be an error; cant create a provider without an id? . nitpick: fix wrapping.. You are better off using if statements here. An empty default and a case that returns just look weird.. Fix wrap. . Remove. Rename the class. Should indicate Registration of \"what\" in the name.. This stuff really is dangerous and ultimately not maintainable; Way too many assumptions about the factory bean, and how it's proxied and plenty of other assumptions about cas property prefixes, etc.\nI can  try to help, if you could explain what exactly needs to happen here; (perhaps we should chat on zoom, etc); and the explanations should be in javadocs too :) . That does make sense, and your analysis on mfa provider connection capability is correct in theory; but I can see that in practice, we'll surely run into that use case. I would guesstimate the case is not so much about whether mfa should trigger or not (which would make that condition a bypass), but more about how the availability checking of a provider may trigger off custom properties tagged to a service. \nWhat you have here is fine; but I would vote for the extra flexibility specially since it seems like it won't cost that much, API-wise. . They all do operate on the login flow, sure, but they dont all come to the same state in that flow. For example, in delegated authn flow there is no need to \"init the login form\" because there is no login form. The authn is handed off to an external identity provider that has the login form, but on the return trip, MFA should trigger by CAS. (Same would be true for X509, etc) Given the way you are modifying the webflow here, I suspect this may break those integrations.\nHave you tested a scenario where you are handed off to Twitter for instance for authn, and on the return trip, CAS would do duo? . I am ambivalent either way, though I generally like longer descriptive names (They work better with search engines) but what I care more about is consistency. Whether M or MFA or SuperMultifactor, it all must be one thing :) If you feel strongly about it, I have no issue with it  but do the change in a separate PR, and do it everywhere. . Beans.newDuration(). Cant break the existing defaults.. This is not a good place for this, API-wise, as it conflates the MFA provider API with a basic credential. You likely need something in between the two. Something like a generic MultifactorCredential, MultifactorableCredential , etc. Also, I am not entirely clear on what you mean by \"unique mark\". Sounds a bit medieval to me :) Could you explain this further please, perhaps in javadocs? . Link class name in javadocs. Link class name in javadocs. prefix state id and value with mfa to avoid conflicts. prefix state with mfa to avoid conflicts. prefix var id and value with mfa to avoid conflicts. prefix transition id and value with mfa to avoid conflicts. If this factory is to actually create a Spring-based bean, then it's better to simply implement the FactoryBean API. Otherwise, the method does not belong here; the provider API shouldn't have to be tied to the container technology underneath in anyway. . nitpick: Login flow should be changed to use flow.getId(). . Also, signature sounds better to me, if I understand the intention of the method. Or something synonymous to that.... Gotcha. Sorry about the back and forth. Too many changes to keep track of :) \nIf I am thinking about this right, I think we need a combination of what you had before and what exists now. Adding this capability into the Credential doesn't make sense API-wise because it applies to every single authentication handler and would be just extra noise. What might make better sense would be to introduce an in-between interface that is implemented by all MFA credentials (possibly that's what you had?). In that interface, you could add the mark method, which really sounds like it should be multifactorProviderSignature or multifactorProviderId, etc. Then cast down to the interface where needed.\nI would also go one step further to say that if you need the mark to find the provider to then find the handler, then all such operations should probably go into the in-between interface and then used by the likes of Duo. If we end up supporting multiple instances of other providers, they should all be able to use the same functionality in one common spot. (You could have this sort of logic elsewhere as well , provided it's refactored into a common component accessible to every provider, if and when needed). Understood. I think if you then switch to FactoryBean then it's quite clear what this thing is supposed to do. And do please document the caveats in javadocs so the usage and decisions made are clear.. Yes :) . The note here is sort of problematic: if the property belongs in X509Properties, it means that it should work for all X509 related functionality/resolvers. Saying it works for some and not others immediately begs the question of: \"which ones?\". So in principle, the setting should work with everything relevant, or it should be moved to a properties class that actually can do something meaningful with the setting.. It would be much better if a smaller variant of your explanation was moved into the javadoc for the actual setting. You could use the scenario here as an example in your explanation of the settings field, if it's especially left in X509Properties. If it's moved to a block of settings that only affect this and that resolver, then copy verbaitm. . While this is OK, you can see that you are sort of cascading inward where the if statements are taking the shape of a diamond :) An easier way to short-circuit this which argubly might be easier on the eye and follow-up reads would be:\n```java\nif (StringUtils.isEmpty(fallbackPrincipalAttributeName)) {\n  return whatever;\n}\nval attributes = extractPersonAttributes(certificate);\nval attribute = attributes.get(fallbackPrincipalAttributeName);\nif (attribute == null) {\n   return whatever;\n}\n...\n```\nAvoid the diamond.. OCD alert: could this be simplified to just say: principalAttribute? . Shouldn't DuoCredential also implement the interface? . Isn't this more like a catastrophic error, as an exception? . I suspect this should be taken out.. It would be much better if you could remove all inline comments, and simply turn them into javadocs. . Opportunity to use the Java stream API? . Confirm, and then remove comment if necessary.. While I appreciate you taking the time to explain things, this sort of thing is rather obvious and doesn't exactly need a comment perhaps? . I usually cheat myself, and write the loops and whatnot in the old traditional way and then use IDEA's inspections to convert things back to the fancy syntax. That's been a very valuable tool for me to learn the API and over time I'd gotten better at it. . I suspect this should be added to the test suite for the project.. This is fine, but the else clause is redundant here. . This is fairly strange. Why aren't we using a Set? . Actually, I take that back, but this block is fairly confusing!. @hdeadman Would you mind adding a few Javadoc comments to the method here to explain the what and why? It might be me, but I had to pause for a second or two to really figure out what's happening here :) . Could we rename this to GLOBAL instead?. It might be better to explain what the value does, rather than discuss implementation details. A module should be free to process and honor this value as it wants, where the explanation should not indicate concrete choices. This sort of thing is rather hard to maintain and keep accurate, especially if for instance, the flow scope, later on, got swapped out by some other flow. Something simpler might do such as:\n\nStore the accepted usage policy choice for the length of the SSO session, and do not prompt for acceptance again, unless the authentication is renewed or SSO is lost.. You might want to take out an annotation. It indicates whether something is required * by the user * to configure. In our case, it's not since you're supplying a default value/behavior.. Also, scope might be a better name. When you add default, it implies that there is something else at a different level that can override it.. btw, the setting should be also documented. . Duplicate? . Remove, add @Setter? . may?. try to use Javadoc linking for code elements; makes future refactorings much much easier.. These should be switched back, right? core modules are not generally tagged as API. . I am not sure I fully follow this. Why is this necessary? . Couldn't you just to do: setXyz(0)? Like many other config classes? \n\nAlso if you just want to initialize the value to 0, wouldn't you simply default the field value to 0 instead? . Indeed. I agree it's rather confusing but it seems like one is dealing with the pooling configuration and the other acts as warning-threshold for the monitor. . Please remove this, and inject the ApplicationContext directly.. You should be able to remove these; These are boot specific-settings that are reported and/or migrated by the native Boot facility. We should not have to maintain them separately.. Please do.. This won't work. You cant set the default based on what is defined in the code. The default (or the user-set value that is global) is retrieved from CAS settings in i.e. the cas.properties file. Because you overwrite it, you can't really reset it again back to what it was.\nIdeally, you should not do super.setXFrameOptions(xFrameOptions); at all which changes the state of the parent filter. You need something like this:\nsuper.insertWhatever(httpServletResponse, httpServletRequest, myCustomStuff);\nAnd you should only do this, when there is indeed the need to set/insert that custom stuff, and not before that check (which is what the code does now). This is not the sort of thing you can do today, because the parent filter API does not let you do so. Once that is changed, I'll post a note here and you can try to refactor.. This is rather risky, because it impacts overlays. @hdeadman see any issues with this? . Is there a particular reason for this one? . Seems like this should actually be a constant? final field?. Don't forget to document these.. Rather that describing what happens internally API-wise (which doesn't really belong here and would serve better as javadocs, etc), it would be much better if you actually describe the what and not the how. What does CAS do when you pass along the warnings? where are they processed? where do they show up? etc etc. Avoid using class names and try to use plain language as much as possible.. val messageDescriptors = new ArrayList<>();. use val.. use val.\nWhat Timezone is Instant.now() based on? . use val.. Probably should be X-CAS-etc.... Probably should be X-CAS-etc.... You are not necessarily sending warnings. You're collecting messages, some of which may act as a warning. I think a better header name for this section might be more fitting.. It's not an RFC specific thing here; it's about correctly using a product/platform name. The proper name is \"CAS\". . Makes sense. Thank you.. var for mutability only when needed; val otherwise. The fact that you can sort of do this is a limitation of the analysis tool and not necessarily the preferred style as it's used consistently everywhere else.. Please change individual line-comments to multi-lines using the /* whatever */ syntax.. Please link the class in Javadocs.. Mark the bean as Conditional.. Perhaps switch to trace and capitalize the log statement. . - What security warning in the documentation? Please remove this bit.\n- ...and activating tlsClientAuth assumes the opposite.. Please remove username/nickname.. val? . Is this necessary? . You should either remove that statement from the logs or you need to repeat the warning to some degree in the logs again, and explain the inconsistency as you do above in your comment. It's unclear which warning exactly that is, and 2 months from now when the page is removed, updated or has 4 other warnings this statement in the code becomes that much more confusing and is impossible to track or maintain. . Sure, sounds OK to me.\nAlso, please make sure you're using the correct indentations. (Looks like you're using tabs in some places) . NameID. Should remove, and use similar functionality in CoreAuthenticationTestUtils. Should remove, and use similar functionality in MockServiceTicket. Should remove, and use similar functionality in MockTicketGrantingTicket. Should remove, and use similar functionality in CoreAuthenticationTestUtils. Should remove, and use similar functionality in CoreAuthenticationTestUtils. Should remove, and use similar functionality in CoreAuthenticationTestUtils. Should remove, and use similar functionality in CoreAuthenticationTestUtils. Consider using Javadoc linking tags such as {@link} rather than code tags. They work better in the future when things get removed or refactored and the javadoc building process can catch those errors. Do this for all docs for the settings you have added.. This seems rather strange; if one has already defined a principal-id column and an AUP column, then one shouldn't have to define them again in the query. It seems like you can remove the setting, and add one for table name, and then build the query on the fly.\n...unless you have use cases where the query is entirely different or complicated and you need full control over it?. Remove this line please.. Please refactor the logic of determining the principal-id into a separate method, possibly with a protected scope.. Should this be considered a catastrophic failure? One's record should not be \"accidentally\" updated. . This doesn't look right. You will need to let registeredServiceAccessStrategyEnforcer do the job, and also make sure the null object isn't used here:\njava\nwebApplicationServiceServiceFactory.createService(registeredService.getServiceId());\nSo something like this:\njava\nval registeredService = getRegisteredServiceByClientId(clientId);\nval service = registeredService != null ? webApplicationServiceServiceFactory.createService(registeredService.getServiceId()) : null;\n...which would then let registeredServiceAccessStrategyEnforcer handle all access-related behavior.. > If you think this scenario is too odd, I could replace this by a setting for username transformation (NONE,UPPER, LOWER) to adjust the query. From my point of view, this limits the configuration flexibility and may cause issues with some SQL dialects, not support whatever change is made to the query.\nI agree, and it's fine as you have. I'd only ask that you might consider renaming the field name to updateQuery or some such. Not a big fan of \"AUP\" in the name, myself.. Seems unnevessary to pass the 3rd parameter, as you can already get it from final AcceptableUsagePolicyProperties.Jdbc jdbc = properties.getJdbc();. This isn't right. It will need to be something like this:\njava\nval valuesCol = CollectionUtils.toCollection(pIdAttributeValue);\nif (valuesCol.size() > 1) {\n   // issue a warning...\n}\n// pick and return the first value and call `toString()` on it. Rather than duplicating test code from JdbcAcceptableUsagePolicyRepositoryTests, consider refactoring common functionality into a base class and only override what is different. . Remove please.. You'll need to elaborate a lot more than just simply re-stating the setting name, please.. You'll need to elaborate a lot more than just simply re-stating the setting name, please.. Also please indicate what the accepted, common values are.. The field needs to be renamed. This is probably the last change before the merge.. Multi-valued attributes should not error out; a warning is likely best while you continue to use the \"first\" in the list.. Yes, correct. Looks pretty good. Simplified to if (Arrays.stream(getExtensions()).noneMatch(fileName::endsWith)) {. This class already exists. Please move the test to https://github.com/apereo/cas/blob/5.3.x/core/cas-server-core-services/src/test/java/org/apereo/cas/services/DefaultRegisteredServiceAccessStrategyTests.java. Yes, all good. . Any chance this can be removed? . Could we instead build against a specific commit id? or entirely remove jitpack and build against a published binary? (The service generally is very flaky). . PS Also please keep consistent with other classpath entries by using \" instead of '. Could you elaborate on the difference between the two, and why would this be necessary? I am really not a big fan of maintaining two different styling rules. It's confusing for most, especially contributors. . All var references need to switch to val, unless required otherwise.. Please make sure the new category of properties is documented correctly in CAS docs.. Likely missing author tags. . You will need to make sure this class is thoroughly tested. Examine other integration tests and add one for this registry as well. \nYou will also need to ensure this registry option is documented, much like all others in CAS docs and TOCs, etc.. This is not a good practice to disregard the return value. You'll need to break the method apart into smaller pieces.. Are writeConsistency = \"LOCAL_QUORUM\" and readConsistency = \"ONE\" things that should be controlled via CAS settings? . Remove and use lombok where appropriate. Remove and use lombok where appropriate. Ah gotcha. So the plan is to ultimately consolidate down to one, right? That's good with me. Thanks very much!. This does not belong here, does it? . This should be removed, right? . Wouldn't you want to set this directly on the CasConfirmation object without subclassing it? There is a defaultTicketValidator field of some kind where you could just set the validator on it, no? . I think it might be better to use trace for such messages? . This doesn't make much sense. Are we expected to put in contents of something, or is this a path to something/file? It should either be private String privateKeyContents; or private String privateKeyPath;. If it's a path, it's best to define it as a Resource, and please document the setting and explain when and how it might be used in combination of other settings.. Remove line; move into the documentation for the field instead.. Should be static.. Nexmo.. You should make sure this test is tagged with @EnabledIfContinuousIntegration, so it can run via CI. Right now, it only is set to run locally.. > If i change this class with the tag that you provide, it will run as usual ?\nIt will run under CI. Not locally. It only enables the test if it's running under continuous integration, as the annotation suggests.\n\nAlso could you provide the command to run test locally ?\n\nPlease see https://apereo.github.io/2019/03/12/cas61x-codebase-feature-build/#running-tests\nWhen you run the gradle command locally, you either have to pass an environment variable or system property that sets CI to true to bypass the rule imposed by EnabledIfContinuousIntegration, or you have to remove that annotation temporarily to let Gradle run it (This is what I usually do).. @tduehr If you have the time, it would be very useful to perhaps update the build process doc to explain how tests are selected and executed.. You will need to set an environment variable called CI to true, before running the test:\njava\n@Target({ METHOD, TYPE, ANNOTATION_TYPE })\n@Retention(RUNTIME)\n@EnabledIfEnvironmentVariable(named = \"CI\", matches = \"true\") // <--- See here\npublic @interface EnabledIfContinuousIntegration {\n}. > Mind if I do away with that class/test condition?\nNot at all. Have at it.. ",
    "leleuj": "Hi,\nI send this pull request to add OAuth support in CAS server.\nAs I wanted to reuse the client part of this code to add OAuth support in the Shiro project, I created an open source library : Scribe UP. It's a web-oriented extension to Scribe to get user profile after OAuth authentication process.\nSource code is here : https://github.com/leleuj/scribe-up. It's available under Apache 2 licence. Current version : 1.0.0-SNAPSHOT is available in Sonatype snapshots repository : https://oss.sonatype.org/content/repositories/snapshots.\nMy last commit is an update to integrate the Scribe UP library in the cas-server-support-oauth module for the OAuth client part : it allows to retrieve a complete user profile with identifier and attributes after OAuth authentication. A metadata populator has been created to handle the attributes and the profile response created by the OAuth 2.0 wrapper is now integrating the attributes in addition to the identifier.\nI retest everything and it works just fine. I update the documentation and attach it to the JIRA CAS-1041 : cas-server-support-oauth_with_scribeup.pdf.\nI hope this module will be soon integrated in the CAS version 3.5.\nBest regards,\nJ\u00e9r\u00f4me\n. Don't you think that we could add this property in the cas.property file (in the SLO part), just to make sure that users know they have this option ? And remove the default value...\n. You're right, there are other missing properties. I'll merge this pull request. Open the JIRA and maybe start a discussion on dev mailing list to know what properties are worth being known in cas.properties...\n. Sure. I'm leading on my own the ScribeUP project : https://github.com/leleuj/scribe-up so I can release whenever I want.\nI haven't released yet as I have in mind to add some more OAuth providers or maybe some new features.\nBut like for CAS version 3.5.0, I will release a stable version of ScribeUP few weeks before releasing the CAS server to be sure to deliver something working properly.\n. Much better than I tought. +1 to adjust all plugin versions...\n. Yes, there are other ways to optimize memory consumption but I see many advantages in \"mine\" :\n- service redirection is the conceptually appropriate moment to discard web session if it still exists\n- easy to implement and understand (one class in webflow with few lines of code)\n- not dependent on application server.\nThat said, I'm open to discussion : we should maybe perform some benchmarks...\n. You're right, it looks promising, I will try to use it instead of the DeleteSessionAction, I could maybe use session.invalidate() and avoid question about race condition on termination...\n. I could not find a solution to save flow state in request (and not in session). So I came back to the solution based on listener : in this one, I couldn't use the invalidate() as it generates exception (\"impossible to create session as response has already been send\").\nSo I use the same code as for the DeleteSessionAction...\n. So far, I'm using web session to store service when authenticating at OAuth provider.\nI would have a huge impact if web session would be removed... I'd rather keep web session for login process.\n. Your goal is clear to me and it's a good path to scalability (even if I keep web sessions for OAuth). I'm not sure it's easy to achieve that with Spring Webflow 2, hope you can find a way...\n. Everything is ok now : I set logging's level to DEBUG instead of INFO.\n. final added and merged with master...\n. You want to add the query parameter to the service or to the callback url ?\n. You're right, the JIRA requests to add the theme parameter in the callback url.\nAs I have only one provider instance, I chose to have only one callback url : the CAS login url + the OAuth provider and to remind the requested CAS service, I put it in web session.\nHere, the theme parameter is totally equivalent to the service parameter, that's why I propose to use the same mechanism : save the theme in session.\nUpdating the callback url was what I wanted to do at first, but I don't remember exactly why I gave up on this (maybe problems with OAuth 1.0 signatures).\nI need to think more about this solution : take all query parameters of /login url and append them to the callback url...\n. I make providers cloneable in ScribeUP 1.2.0-SNAPSHOT and tried to make everything work in OAuth module, based on callback url.\nI went far on complexity and I couldn't achieve a satisfying solution as callback urls are used before OAuth authentication and after OAuth authentication to finish the process and they are used as security elements both in OAuth 1.0 and OAuth 2.0. And callback urls are not safe values to rely on (parameters can be re-ordered or re-encoded).\nMoreoever, I'm already using web session to store OAuth credentials.\nSo I come to the conclusion that using the web session is the best solution (safe and easy).\nNonetheless, you're right, providing an extension mechanism is not sufficient, so I remove it and choose to handle all parameters that I think necessary :\n- service\n- theme\n- locale\n- method\nDoes it sound good to you ?\n. You're right : these extra parameters would be lost.\nI could kept my extension mechanism (first commit) but I don't think it's really necessary : what was requested in the JIRA was to keep the theme parameter, which is a regular parameter. So I decide to keep regular parameters and for those who need to save extra parameters, as it sounds to be a very very specific need (extra parameters + OAuth support), I let them duplicate OAuthAction with their own code.\n. I just updated javadoc.\nThanks for taking time for code review.\n. I remove the extension mechanism because I don't want to encourage developers doing cutomizations.\nOAuth support or not, you would have the same problem, trying to use the theme with another name. I think the solution is on your side...\n. Waiting for some tests from Tim (the reporter of the bug)...\n. +1, useful feature : I saw the problem happen when using Spring Security which needs a success logout url after application logout (which newbies sometimes set to CAS logout -> inifinite loop)\n. +1\n. I think each file (.css or .scss) should have a header with license / copyright, but it's just a minor remark.\nI'm not a CSS specialist, but I have never heard about SCSS : how does it work ? Is it all browser compliant ?\nWhat's the use of cas.css (which is not split into parts) compared to cas.scss which only has imports ?\nI'd like to get some more technical information on this. Thanks...\n. If we use SASS, I think it's necessary to add the appropriate plugin to make it easy to use it, otherwise each developer would need to download some SASS compiler on its desktop...\n. +1 (small but useful improvment)\n. +1 with two minor remarks\n. +1\n. +1\n. A search for /services in *.java in cas-server-core returns only these two occurences.\nIt's a necessary change before extracting the services management webapp.\n+1\n. I think it's not necessary to do it now and in this patch.\nWe plan to move out the CAS management webapp for CAS 4.0 and when it will be done, the context path will be by definition adjustable.\n. +1, I like this solution !\n. Should be ok now\n. +1 with one issue\n. +1\n. +1\n. I see that properties files are already there in cas-server-webapp/WEB-INF/classes : +1\n. +1\n. +1\n. +1\n. The log level is not set to INFO by default, so there won't be any logs unless you activate it. At the same time, you're right, it's not a very usefull log...\n. I don't : keep code \"as is\"...\n. Thanks for being so fast in code review (as usual ;-)\nIf you can make some more tests, that would be great. Of course, I will update docs when CAS-1183 will be done.\n. Sure. Just keep in mind it's the first step (out of four I planned)...\n. I assume you're talking about CAS-1134 ? You're right, it has not been merged and impacts the services management UI.\nGo ahead with this pull request (CAS-1134) if you want, I'll copy the changes in the new cas-management-webapp.\n. I merged CAS-1134 and copy the change on manage.jsp (#135) in cas-management-webapp.\n. I updated the cas-management-webapp according to Scott's comments. It should be ok for merge ?\nNonetheless, I have still some questions to address now or later for the cas-management-webapp module :\n1) is the 403.html mapping in web.xml usefull ?\n2) is the com.github.inspektr.common.web.ClientInfoThreadLocalFilter filter still usefull ?\n3) do we really need SafeContextLoaderListener and SafeDispatcherServlet or can we move back to more regular Spring beans ?\nI eventually removed the characterEncodingFilter filter in web.xml in cas-management-webapp as it duplicates the springSecurityFilterChain filter : we should do the same in cas-server-webapp, shouldn't we ?\n. Backport of the check on missing key properties (#143)...\n. Good idea : +1\n. It's up to you, I let you do the same update on cas-management-webapp (as it has been merged) or I'll do it in my next pull request...\n. +1\n. +1\n. +1\n. Sorry if I wasn't clear : the usage of BadCredentialsAuthenticationException.CODE is fine, but I proposed antoher \"default\" text in case the code mapped to BadCredentialsAuthenticationException.CODE isn't found.\n. +1\n. +1\nShould I copy this mechanism on cas-management-webapp also ?\n. OK, I'll add this in my next pull request (\"cleaning of the old services management\")\n. OK. It's backported on CAS-1183, #150...\n. Sorry for bothering you with this.\nMy test :\n1) cleanup of all cookies/history... in Chrome 22.0.1229.94 m. I check in \"Development tools\" that really no cookie appears\n2) call http://localhost:9080/cas/login : the login page is displayed in French !\n3) click on \"Spanish\" link (http://localhost:9080/cas/login?locale=es) -> everything is displayed in Spanish\n4) click on \"French\" link (http://localhost:9080/cas/login?locale=fr) -> everything is displayed in French again\n5) click on \"English\" link (http://localhost:9080/cas/login?locale=en) -> everything is still in French !\nI enable DEBUG logs on org.springframework.web.servlet.i18n.CookieLocaleResolver :\n2012-10-28 07:38:49,866 DEBUG [org.springframework.web.servlet.i18n.CookieLocaleResolver] - \n2012-10-28 07:38:50,995 DEBUG [org.springframework.web.servlet.i18n.CookieLocaleResolver] - \n2012-10-28 07:38:52,199 DEBUG [org.springframework.web.servlet.i18n.CookieLocaleResolver] - \nI tried to do some debugging on first access but it seems to work : locale is always en.\nCan you tell me what should I check (breakpoints, logs...) ?\n. Scott is right, I already did some tests putting breakpoints and I don't need to copy source (fortunately !).\nI'll recheck everything...\n. I did the following test :\n1) call the default login page (/cas/login) -> french messages instead of english ones\n2) click explicitely on \"English\" link (/cas/login?lovale=en) -> same problem.\nI put breakpoints in resolveLocale and setLocale methods in the CookieLocaleResolver class.\n1) In the resolveLocale method, no attribute in request, no cookie -> default locale returned is en (called 3 times)\n2) In the setLocale, the en locale is put in request and in cookie; the resolveLocale returns again the en locale but this time from the request attribute.\nWhat happens is really strange : everything seems to work in the class.\nI will send you by private email the DEBUG logs enabled for org.springframework.web. I'm not sure it will more helpful though. Shouldn't we take a look at the code behind <spring:message, MessageSourceAware or class like that ?\n. I get a little farther.\nThe first time the getResourceBundle method (line 203) is called with basename=\"messages\" and locale=\"en\", no bundle is in cache so localeMap is null and the doGetBundle method (line 213) is called with these same parameters.\nThen, it loads the bundle using the beanClassLoader which is the WebappClassLoader (Tomcat), goes in the deep of the JDK (no line available) to load the bundle (at some point, the candidate locales are \"en\" and empty) and just after, the returned bundle property (line 213) is the French property bundle.\nI get the same problem with Jetty.\nReading the source code, I suspect the Locale.getDefault() to be part of the issue. My default JVM locale is fr_FR.\nMisagh, can you set your JVM locale to fr_FR and re-test to see if you get the same issue ?\n. Very strange. I will re-test everything on my work computer on monday (I was at home this week) : I let you know...\n. Great! I'm glad you find the solution for the \"locale problem\".\n. I updated the pull request, it should be ready for merge (except the minor remark regarding the default locale for the CookieLocaleResolver, which can be handled later)...\n. If there is no objection or new code review, I will merge this pull request next week.\n. Sure. That's the idea : when the separation will be done, we'll be able to start real improvment...\n. If no one has new comment or objection, I will merge this pull request tomorrow.\n. +1\nIf #150 is merged before this one, do you mind doing the same on cas-management-webapp in this pull request ?\nElse if this one is merged before #150, I'll do it by myself...\n. Thanks for doing the job on cas-management-webapp !\n. +1\n. Sure. I cloned the master and merged this pull request : tests pass !\n. Don't forget about the github maven plugin discussion... to avoid 404 on javadoc...\n. +1\nIs there a particular reason for which you want to upgrade to this version ?\n. +1 (I did the test : everything compiles and tests pass)\n. Merged this pull request as the same pull request or 3.5.x (#152) has already been validated.\n. Sure. I updated the description in the JIRA...\n. The profile endpoint is not part of the OAuth spec : it's given by the provider. Returning JSON without the content type was a mistake, but as we set the right content type now, I think we shouldn't do more (right now).\n. Thanks, if no objection or new code review, I'll merge it by tomorrow.\n. +1\n. On which Firefox version do you have a problem ?\nThat said, you're right, there's something wrong in HTML with the unterminated HTML tag li.\n+1\n. +1\n. Jacob, it must be me, but I don't know what this pull request targets : any JIRA associated ?\n. OK, I'll backport these new properties by myself in the next pull request...\n. I'm not sure : should we consider this pull request finished and ready for code review or do you plan some more evolutions ?\n. I merge this one by myself as it's the same as #161 (but for 4.0.0), already validated.\n. +1\n. If no objection or code review, I will merge this pull request next wednesday.\n. Thanks for reporting and testing Misagh.\nI agree, I will fix this in this pull request today.\n. Thanks for checking. Time to merge...\n. I may be tired at the end of this day, but I think this topic (LPPE) deserves a diagram to fully understand what components and relationships are involved and what you want to improve / refactor with this new pull request.\n. +1\n. If no objection or code review, I will merge this tiny pull request next monday.\n. If no objection or code review, I will merge this small pull request next monday.\n. Updates and questions after Scott's code review...\n. I'd like to know more about the use case behind the pull request : what is the scenario that requires to retrieve all the tickets ?\nI'm in line with Scott about the potential performance issue...\n. Thanks for the clarification.\n. I just merged with master and fixed the conflict.\n. I don't have any strong opinion on this : any other feedback on renaming the cas-management-webapp into cas-server-management-webapp ?\n. Thanks Misagh for your code review.\nIf no objection, nor new comment or demand for renaming, I will merge it \"as is\" tomorrow, so you can start working on the LPPE refactoring.\n. All required dependencies are now injected through constructors (and not setters)\n. You're right : as injection is done by Spring, we could use init-method=\"init\", but I think there is a risk to forget it and it's tricky to find out where the problem comes from in this case.\nThe OAuthAction class is the core class of the OAuth client support, so it makes sense to me to choose it for ProvidersDefinition initialization  (even if the init() method could have been called everywhere the providersDefinition is set).\n. @battags : Scott, I plan to make the OAuthAction class implement the InitializingBean interface and to make the call to the init method of the providersDefinition in the afterPropertiesSet() method : is it ok from your point of view ?\n. Oops! I think we misunderstood each other : are we talking about using @PostConstruct in the ProvidersDefinition class (in the scribe-up library) or in the OAuthAction class (in the cas-server-support-oauth module) ?\n. I don't completely share your point of view, but I understand it.\nThe scribe-up library is intended to be independent from J2E to be used with Play Framework (https://github.com/leleuj/play-oauth-client). Thus I can't use @PostConstruct.\nSo I think the best solution is to use the Spring init-method with a warning in the documentation.\n. @battags If we agree on the use of the init-mehtod and if don't have any new comment, do you mind merging this pull request ? Thx\n. The pull request is up-to-date (the init() call is not done any more in the OAuthAction class) and thus ready for merge.\nThe init-method is not part of this pull request, it should be done when using the cas-server-support-oauth module (for example in the demo : https://github.com/leleuj/cas-oauth-demo/blob/master/cas-oauth-client-demo/src/main/webapp/WEB-INF/spring-configuration/applicationContext.xml, line 76).\n. I didn't review the source code, but the indentation is a bit messy and makes things hardly readable...\n. It's a great work ! I will share a \"high level\" concern on the JIRA ticket...\n. +1\n. I assume the CAS deleted classes are now part of uPortal : for my information, can you point me to the link of these classes ?\n. Thanks for clarification.\n. +1\n. +1\n. Sounds a good integration test to me, where as unit tests already cover SAML 1.1 and Google support (classes in the cas-server-support-saml/src/test/java/org/jasig/cas/support/saml/web/support and cas-server-support-saml/src/test/java/org/jasig/cas/support/saml/authentication/principal/ packages)\n. My fault, I forget to warn you on the necessary adaptations. And I was waiting for the pull request to be merged for writing the documentation...\nThis is the commit I made on my overlay to support new SAML module : https://github.com/leleuj/cas-overlay-demo/commit/76b811e78c97b8aff2bad73198328d8b090ad13e...\n. Great! I will write the documentation today.\n. Some minor comments on code. I think more tests are required and I don't see any update/addon of *Tests classes.\nI'd like also to have some real use cases for a better understanding...\n. +1\n. I searched all the clone() calls across the source code and found another spot where you can get ride of the cast : in the findServiceBy method in the DefaultServicesManagerImpl...\n. +1\n. My fault, I should have added the final +1 !\n. The updated documentation : https://wiki.jasig.org/display/CASUM/OpenID...\n. I made the test and it works fine. Though, do you plan to remove all persistence.xml or just this one ?\n. Very strange ! I check out a fresh copy, apply this pull request and rebuild. Tests pass again. Are you sure that you are up-to-date ?\nThat said, I have nothing against removing the persistence.xml if it's totally painless and transparent for users : what's the pros and cons for having or not a persistence.xml file ?\n. Tests are ok. But as CAS deployers are expected to define by themself the packagesToScan, the documentation will need to be updated on this.\n+1\n. +1 with some minor comments\n. final +1\n. Did you search for all (TicketGrantingTicket) and (ServiceTicket) casts through all the code source ? I found other occurences...\n. My grep leads me to two other occurences in AbstractDistributedTicketRegistry and OpenIdCredentialsAuthenticationHandler...\n. +1 with one minor formating comment...\n. I really like the idea of introducing checkstyle to enforce CAS coding conventions. Though, why did you remove the maven-translate-plugin ?\n. +1 on the pull request and making builds fail if rules are not respected\n. Trying to rebuild CAS : mvn clean install, I get an error on cas-server-core :\nTest set: org.jasig.cas.CentralAuthenticationServiceImplTests\nTests run: 23, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.556 sec <<< FAILURE!\ntestGrantServiceTicketWithDifferentCredentials(org.jasig.cas.CentralAuthenticationServiceImplTests)  Time elapsed: 0.008 sec  <<< ERROR!\nCREATION_ERROR\n        at org.jasig.cas.CentralAuthenticationServiceImpl.grantServiceTicket_aroundBody2(CentralAuthenticationServiceImpl.java:231)\n        at org.jasig.cas.CentralAuthenticationServiceImpl.grantServiceTicket_aroundBody3$advice(CentralAuthenticationServiceImpl.java:57)\n        at org.jasig.cas.CentralAuthenticationServiceImpl.grantServiceTicket(CentralAuthenticationServiceImpl.java:1)\n        at org.jasig.cas.CentralAuthenticationServiceImplTests.testGrantServiceTicketWithDifferentCredentials(CentralAuthenticationServiceImplTests.java:193)\n. By the way, would you mind sharing your Eclipse formatter (xml file) to ease adoption ? I think it's worth attaching it in the https://wiki.jasig.org/display/CAS/Code+Conventions...\n. +1\n. +1\n. +1\nMuch appreciated the \"indentation/comment art\" in XML files !\n. +1\nMuch appreciated the \"indentation/comment art\" in XML files !\n. Two things I'd like to highlight :\n- I re-generate all NOTICE files through mvn notice:generate...\n- In the ClientAction class, I stop the webflow with : response.flushBuffer(); return new Event(this, null); : maybe there is better way ?\n. Two things I'd like to highlight :\n- I re-generate all NOTICE files through mvn notice:generate...\n- In the ClientAction class, I stop the webflow with : response.flushBuffer(); return new Event(this, null); : maybe there is better way ?\n. Just committed a change in the code to follow Misagh's code review.\nOnce again, I've struggled a few hours with Spring webflow to handle the brutal stop potentially required by pac4j when getting credentials. I finally came to a solution with an end-state, but it doesn't work for OAuth 1.0 clients as they rely on the web session deleted by the TerminateWebSessionListener. So I kept the current behaviour !\n. Hallelujah !!\nI finally came to a solution to handle properly the additionnal HTTP action required by pac4j !\nI throw a specific event handled by a <view-state to avoid the web session removal...\n. Merge planed in an hour : last reminder !\n. Related to : https://github.com/Jasig/java-cas-client/pull/19, I don't see the authenticationDate and isFromNewLogin attributes : aren't they missing ?\n. +1\n. +1\nI guess there is no special goal here, just to use the latest dependencies : does something worth being noticed ?\n. +1\nI guess there is no special goal here, just to use the latest dependencies : does something worth being noticed ?\n. +1\n. +1 : global builds had become painful...\n. +1\n. Absolutely : the documentation needs to be updated to reflect this default behaviour change.\n. If no objection or new comment, I will merge this pull request tomorrow...\n. The doc has been updated : https://wiki.jasig.org/display/CASUM/OpenID...\n. That's an excellent question. Glad you asked.\nLet's take the example of an authentication delegated to Facebook :\nafter authentication, back in the CAS server, the user profile is requested and the response from Facebook is a JSON text, which will be mapped to a global structure of more or less complex objects (pac4j behaviour).\nThis user profile becomes a map of attributes in the CAS server, attributes which will be pushed to CAS client applications through the service ticket validation.\nThe problem is how we can rebuild the user profile from this service ticket validation response in the CAS client applications. The idea is to store JSON fragment during Facebook response parsing and restore them when the toString() method is called, to be able to reduild the user profile from the CAS assertion as if we were parsing the first Facebook JSON reponse.\nBy default, these fragments are not saved by pac4j (save CPU / memory). You must explicitely ask for it with : ProfileHelper.setKeepRawData(true);\n. If no objection or new comment, I will merge this pull request tomorrow...\n. After being authenticated at Facebook, let's imagine that I received this profile :\n{ \n  \"id\": \"1\", \"name\": \"jleleu\",\n  \"photo\": {\"id\": \"12\", \"url\": \"http://xxx\", \"width\": 100, \"height\": 100}\n}\nIn pac4j, I will have a FacebookProfile with :\ngetId() -> String\ngetName() -> String\ngetPhoto() -> FacebookPhoto[id, url, width, height].\nIn CAS server, I will have a principal with the following attributes : \"id\", \"name\" and \"photo\". The photo attribute is a complex attribute here.\nDuring service ticket validation, a toString() will be called for all these attributes. So in the CAS client application side, I will receive :\n\"id\" -> \"1\"\n\"name\" -> \"jleleu\"\n\"photo\" -> \"org.pac4j.oauth.profile.facebook.FacebookPhoto@4545445\".\nThat's why, in pac4j, all complex objects used in profiles have a special behaviour : when they are built from JSON, the source fragment can be saved and restored through the toString() method. This is what you can control with ProfileHelper.setKeepRawData(true);\nIs it clearer ?\n. In fact, you don't really need the pac4j libraries on client side as complex objects are returned as JSON texts (like the ones you get from the original provider), you can parse them pretty easily.\nI'm open to suggestions but I don't see any better way to \"serialize\" data in a String than restoring the original JSON fragments.\nWe could maybe split complex objects.\nFor example : the attribute photo which is a FacebookPhoto would become :\n\"photo.id\" -> \"12\",\n\"photo.url\" -> \"http://xxx\"\n\"photo.width\": 100,\n\"photo.height\": 100\nAnd if it was a list of FacebookPhoto, we would have :\n\"photo1.id\" -> \"12\",\n\"photo1.url\" -> \"http://xxx\"\n\"photo1.width\": 100,\n\"photo1.height\": 100\n\"photo2.id\" -> \"13\",\n\"photo2.url\" -> \"http://yyy\"\n\"photo2.width\": 200,\n\"photo2.height\": 200\nI don't think that it's a better solution, do you ?\n. OK. Let's go for the merge ;-)\nI captured the topic with : https://issues.jasig.org/browse/CAS-1301\nIt may be solved with new XML or JSON response brought by the future revision 4.0 of the CAS protocol !\n. +1\n. Once again, I applaud your great efforts on checkstyle compliance.\nI made a count : on master, the build generates 6757 lines and with your pull request only 6711 lines. I assume 46 (6757-6711) warnings have been fixed : I would have expected at least 86 warnings/lines less as 86 files have been modified...\nDid I miss something ?\n. +1\n. Is the Eclipse formatter in https://wiki.jasig.org/display/CAS/Code+Conventions up to date ?\n. Is the Eclipse formatter in https://wiki.jasig.org/display/CAS/Code+Conventions up to date ?\n. +1\n. +1\n. I just noticed that tests are broken now : https://developer.jasig.org/bamboo/browse/CAS4-TIB-136. Would you mind fixing them ?\n. I just noticed that tests are broken now : https://developer.jasig.org/bamboo/browse/CAS4-TIB-136. Would you mind fixing them ?\n. I feel good that we see things the same way. Thanks to you @serac & @mmoayyed for this exhaustive code review.\nI tend to think that @wgthom was right about the deep changes that front SLO implies. That said, I'm confident with what I've developed even if I still need to write a LogoutManagerImplTests to complete the tests part.\nI will address most comments as suggested but there are still pending questions on which I'd like to reach an agreement before updating this pull request...\n. I feel good that we see things the same way. Thanks to you @serac & @mmoayyed for this exhaustive code review.\nI tend to think that @wgthom was right about the deep changes that front SLO implies. That said, I'm confident with what I've developed even if I still need to write a LogoutManagerImplTests to complete the tests part.\nI will address most comments as suggested but there are still pending questions on which I'd like to reach an agreement before updating this pull request...\n. I've just updated the pull request taking into account Misagh's and Marvin's code reviews.\n2 points may be discussed more :\n- does the Pair object need to be Serializable ? I don't think so...\n- should we make the destroyTicketGrantingTicket method synchronized ? I tend to keep this new implementation (synchronization around retrieval and cleaning of the services of the TGT) which works like the old one and preserves/improves performance...\n. If no new comment or objection, I plan to merge this pull request on Wednesday morning (9am GMT)... to be able to jump to the next pull request to finish front SLO...\n. New updates to match Scott's code review.\nI think @mmoayyed  and @serac agree on this pull request.\n@battags : Scott, I remove the logOutOfService method and will add the concept of LogoutRequest in the next pull request.\nAre you in line with my last replies and this pull request ? So I can merge it...\n. No problem.\nI have noticed your main concerns : I'm definitely convinced about the new design and the removal of the logOutOfService method. And I will improve abstraction by creating a LogoutRequest in the next pull request.\nBased on Marvin's and Misagh's agreement, I will merge the PR now...\n. +1 with one small caveat\n. +1 with one small caveat\n. +1\nWe will need to update strongly the documentation to be sure people are aware of the breaking changes (definition of the services).\nMost of this update should be replaced by the new Spring Security OAuth integration, but I find the OAuth service definition to be a good idea.\nWould you mind creating a pull request for my demo : https://github.com/leleuj/cas-pac4j-oauth-demo to reflect these changes ?\n. Misagh, the build seems to be broken since you merged that pull request : https://developer.jasig.org/bamboo/browse/CAS4-TIB.\nWould you mind fixing it please ?\n. I see that the pull request can't be merged automatically : are you up-to-date with the master ?\nI will take a close look at what you've developed next monday or tuesday...\n. Misagh's advice makes sense. I will read and comment this pull request any way before your next one...\n. My main comments :\n- we could use the CentralAuthenticationServiceImpl instead of the CAS authentication manager\n- I'm wondering if we could rely on the TGT expiration instead of redefining many classes around timeout\n- I see a big problem for the performance when we need to go through all tickets to find one according to the username : I don't have any solution right now...\n. Great! Looking forward to your new pull request...\n. After the thoroughful code review from Marvin, I just have  some comments about formatting...\n. Just updated the pull request according to Misagh's comment\n. If no objection or new comment, I will merge this pull request at the EOD (4pm GMT)...\n. +1 with few minor comments...\n. Ready for merge : I let @serac fix the build before...\n. +1 as soon as the merge will be possible...\n. @serac : the build is broken now for LDAP support : https://developer.jasig.org/bamboo/browse/CAS4-TIB-152/log...\n. Will try...\n. I removed the file but I can't commit on Linux : nothing to commit (working directory clean)\nRebuilding CAS, I have now a failure in memcached :\nFailed tests:   testExpiration[0](org.jasig.cas.ticket.registry.MemCacheTicketRegistryTests): expected null, but was:<org.jasig.cas.ticket.registry.AbstractDistributedTicketRegistry$ServiceTicketDelegator@1336fab>\n. I didn't know about prose.io : great tool !\n. Yep, the build is fixed. Will merge my pull request...\n. Looks good.\nI won't have time for a full test with front/back channel services as I'm going on vacation in a few hours (for 2 weeks)...\nRemind me to completely test the SLO on RC1...\n. +1 : it makes sense to me to improve this message.\n. @serac : no problem to accept this one on 4.0.0-RC1 ?\n. If no new feedback or objection, I plan to merge on monday at 9 GMT+2...\n. Not sure to understand @serac's comment : are you preparing a bigger pull request including this \"small\" one ?\n. I understand the need but I'm in line with @battags : I don't like this \"leak\" of infrastructure information.\nThat said, you can achieved what you want : remove the host.name property from the cas.properties file and define for each server you have the same system property with the name of the server you want...\n. If no new comment or objection, I will merge it this sunday (11 am GMT+2)...\n. If no new comment or objection, I will merge it this sunday (11 am GMT+2)...\n. +1 (minor comment)\n. I tend to agree with this change, but I would expect a JIRA and a use case to explain in which situation you use something else than the default MemcachedClient...\n. +1\n. I didn't make any test yet. Though, I'm in line with the changes. My main caveat is about the initialization of the properties in the constructors : are these initializations really necessary ?\n. I'm +1. I will wait until tomorrow for new comment or objection. If none, I will merge at 4pm GMT+2.\nI will do more tests after the merge...\n. Updated the https://wiki.jasig.org/display/CAS/Code+Conventions as well...\n. +1\n. A complete search didn't not provide any refernce to this file : +1\n. Just to be sure, it's a defensive change as in fact, no test fails because of a NPE, right ?\nIn this case, +1\n. Would you mind opening a JIRA first and providing new tests to confirm the problem and the fix ?\n. I've made a global test and you're right : proxies used are no more available in the CAS response.\nWould you mind providing the associated test to ensure we will never have regression on that feature in the future ?\nThanks.\n. @ganeshrnair : any progress with this ?\n. Thanks. Might be related to CAS-1362...\n. +1\n. +1\n. +1\nanything special to notice about this upgrade ?\n. +1\n. I'm ine line with the change.\nOne caveat though : a test should confirm this behaviour (change)...\n. I'm in line to improve CAS security by default.\nWhat will happen when I will call http://localhost:8080/cas/login ? An error page or the unauthorized page ?\n. I think that (almost) all deployers have defined services in their registry : for them, there wouldn't be any impact.\nAnd a major release is the perfect time to make such a \"big\" change.\nThat said, I admit that documentation needs to be updated and the error needs to be explicit.\nWhat do you have in mind ? Some page saying : \"No service is configured on your CAS server. You are not allowed to authenticate. Please configure your CAS services...\" ?\n. @battags : I may be wrong in my first assumption, but I really think that most deployers use a services registry : I'd like to get feedbacks from Uniconers on this...\nI myself think that this change makes sense and goes into the right direction and as it can break things, it perfectly fits for 4.0.\nAbout disabling HTTP service, I propose this feature so I'm a great advocate of it : your interest on this makes me think I should probably propose a pull request for this.\n@spaetow : I'm astonished : are you talking about the services management webapp ? It might be tricky sometimes but it works fairly quickly...\n. @wgthom : thx for the feedback\n@battags : one use case that pops into my mind : let's assume I have a DB services registry in production defining all my services. If for any reason, I erase all data in DB (DBA mistake), my CAS server will still work without any issue. But an attacker will be able to forge request like : https://myserver/cas/login?service=http://www.gotophishingsite.com\n@spaetow : it's certainly too late, but I have an overlay demo with the CAS server and the services management webapp : https://github.com/leleuj/cas-overlay-3.5.x\n. +1\n. Mostly yes. But I thought it would make sense to start implementing a first security proposal for 4.0.\nFeel free to -1 if you disapprove it...\n. Thx. I'm still expecting one more +1 to merge...\n. Thx. I will wait one more day before the merge... just to be sure...\n. @mmoayyed : for the doc update, do you have something in mind ?\n. Yes, it's a good place to warn about this change...\n. My apologies but it wasn't clear for me. The scope of the RC is more or less closed to the remaining JIRAs of the RC1.\nI wanted to draw attention on the security initiative and its proposals by proposing this one.\nThat's why I asked you to explicitely -1 this pull request (to move it out of the scope of the RC). After getting two +1 and no -1, I posted a message to say I will wait one more day just to be sure (there was no objection)...\n. As suggested by @mmoayyed, I added a warning on the services management wiki page : https://wiki.jasig.org/display/CASUM/Services+Management.\n. After @battags comments, I'd like to confirm that this feature (which is not a bug but an improvment) is fully accepted. One more +1 is expected here...\n. No problem. I will split this pull request in two pull requests.\nYes, the groupId has changed and it seemed obvious to me that the good solution was just to change the groupId but then, a class was missing at compilation so I decided it was too much change and that it would better to downgrad to 2.6.6 (instead of 2.7.2) than to make more changes (on a minor CAS version)...\n. Thanks for the feedback. You're right : the ehcache exists for version 2.7.2 with the net.sf.ehcache groupId, but not the ehcache-core with the same groupId : I will try to keep the groupId (net.sf.ehcache) and the version (2.7.2) and just update the name (ehcache-core -> ehcache) in a separate pull request...\n. This is now a \"clean\" pull request just fixing the French accents issues...\n. This is a very interesting initative. Just one question : are you sure that it works even on old computers (not too aggressiv timeouts) ?\n. great !\n. +1\n. Thanks for changing the test. It looks ok, even if I find it hard to read.\nI've done a complete manual test as well and it works.\n+1\n. Yes exactly, it's for 3.5.3.\nNot my intention to nitpick on this, but practically, CAS 3.5.2 uses EhCache 2.6.0.\nWe upgrade to 2.7.2 but it breaks things.\nI propose to downgrade to 2.6.6 but in fact, it is still an upgrade from 2.6.0 to 2.6.6.\n. I plan to merge this today to fix the build...\n. Build fixed !\n. Good catch. +1\n. Just for my understanding, this error happens on 4.0 right ? The master is the target.\nBut the JIRA has an \"Affect version\" set to 3.5.2 ? Please set also the \"Fix version\" (to 4.0.0-RC2 ?) so we can find it when performing searchs.\nWhere does the problem come from ? Because of CAS-1279 ?\n. Thanks for the feedback. It seems to be a reasonable change... +1\n. +1\n. I'm pretty sure that we won't ever be able to have all properties for all languages. Thus it would crash for certain locales. So I consider it as a bug.\nThe core change is useCodeAsDefaultMessage=\"true\". I like the idea of printing a WARN if we don't have the property for the current locale and for the default one. However, I think that the most interesting WARN would be when we don't have the property for the current locale even if we have the property for the default locale.\nA tiny comment also.\nI'm +1 globally on this one.\n. +1\n. I'm not in line with this one. I understand the need, but the managementConfigContext.xml file is already meant to be customized like the deployerConfigContext.xml file for the CAS server.\nMoreover, this customization is just one solution whereas we can have many other possible ways to define the users details (database, LDAP...) which are not addressed here.\n. OK. I see. I agree with the idea to externalize configuration to simplify life and offer the most common configuration by default.\nBut I think we have different experiences : in most of your deployment, you have seen simple properties files and thus this pull request really makes sense. On my CAS installation, the users of the services management webapp are stored in a database so it's not very useful.\nI would appreciate other feedbacks but I tend to trust you on this...\n. Do you plan to send the same pull request for 4.0 as well ?\n. My pleasure. I'm sure that for the next versions (>=4.1), we will talk again about supplemental authentications and the best way to handle/use them.\nIf no objection, nor new comment, I will merge this pull request tomorrow 9pm GMT+2...\n. Just added the missing final...\n. If no objection, nor new comment, I will merge this pull request tomorrow 9pm GMT+2...\n. auto merging myself...\n. I just updated the parent pom to the latest version (35)...\n. Following the release process (https://wiki.jasig.org/display/CAS/Release+Process), step 5 says that we check license and notice manually before really performing the release. So it makes sense not to trigger these verifications once again during the release...\nAt least it's my understanding...\n. I'm in line globally with the change. Though, I made some comments and I think that a test could be added to confirm the new behaviour.\n. Still +1 with a last tiny comment...\n. Why not but do you have a use case in mind ?\n. It was a question for @mmoayyed...\n. @battags : you mean that we should consider it as a \"source code bug\" and fix it, right ?\nIt might be me, but our code conventions : https://wiki.jasig.org/display/CAS/Code+Conventions could be improved on this : In the case where we are extending an abstract class someone else provided for us, and if they were so kind as to provide a protected Log instance for the runtime class, we'll try to use that...\n. @battags : understood. I updated the code conventions wiki page to capture (at least for me) this rule.\n. I had in mind that I tested removing the session=true and that it didn't worked. But I made the test and authenticated successfully !\n+1\n. I agree that the current behaviour is not user friendly and should be changed.\n@mmoayyed : I'm not very ethusiastic about the Javascript solution : a simple error message on the login page would be my preferred solution (after submitting credentials and if the session is expired).\n@serac : about your webflow on client side, does it mean that there is no timeout ? in that case, what about the security and the login ticket mechanism ?\n. @battags : thanks for the historical backgound : that's what I assumed.\n@serac : I already browsed your excellent documentation quickly and read it again but I don't see any mention of the login ticket...\nWith flows stored on client side, we would have a completely stateless CAS server. Though, I tend to think that the CAS server (generally and especially since 3.5.0) consume very few memory.\n\"access multiple CAS-protected resources simultaneously\" seems to me like a rare use case.\nI don't want to dampen @serac and @mmoayyed 's enthusiasm, but I think we should better focus on providing the appropriate user message when the session or login ticket is expired.\n. @fjollberg : I think it matters more for an authentication system than for any other application to reassure users. The message would be something like : \"The duration to enter credentials has expired. Please fill in again your credentials\".\n. Might be me, but I'm a bit lost regarding this conclusion.\nI'm always in favor of the simplest solution but I changed my mind : I think that a Javascript reload could be better than an error message...\n. @mmoayyed : thanks for the clarification. If you and Marvin feel confident on the client side webflow storage, I will follow you on this. And the fallback solution would be some Javascript reload solution.\nNonetheless, the client protocol support for OAuth, CAS and OpenID (cas-server-support-pac4j module) strongly relies on the web session : I would need to update that as well...\n. We had many problems with session expiration as well as with the TerminateWebSessionListener.\nI'm now convinced by this solution.\n+1\n. Notice I was expecting some patch (for LinkedIn) to release a version 1.3.2, but I've never received any fix...\n. +1\n. +1\n. This is an interesting proposal and I feel that something could be done on our HTTP client. I'm not sure it's the final right refactoring.\nIt raises several questions :\n- should we leverage a new solution on an existing framework like httpcomponents ?\n- what are exactly the properties of a message versus a message sender ?\n- should we deal with messages or with message senders ? I'm more comfortable to manipulate messages...\n. I'm still trying to figure out a good solution on this. According to your proposal, what are the differences between the HTTP client and the message sender ? It looks like to me that they are both similar...\nA well-know and establish framework may be a good starting point to validate our design...\n. We can't be wrong with the concept of Message, sent by the HttpClient.\nI tend to think that more properties should go into the Message : should it be sent asynchronously ? how long is the timeout ? ...\n. Fantastic! :+1:\n. I understand your motivation, but I think that having a SamlDateUtils is clearer than having a CalendarUtils to know the way and what for the class is used ?\n. I tend to think that if it's so complicated to change this class, it's because it doesn't need it.\nThe CAS logout has a SAML implementation, so I'm not surprised to have a SamlDateUtils class in the core (where the core features are).\n. I should have said : \"a SAML way implementation\", but that doesn't change anything : we generate dates in a SAML way for logout. And I'd like to keep that information somehow.\nThough, I'm always open to proposals. So maybe the solution is to have a CalendarUtils class with a getSamlFormatCurrentDateAndTime() method...\n. I think it's a good idea to have a name recalling the real use : returning a date formatted as a ISO standard date.\n+1 as soon as the problem with getInstance() is fixed.\n. Same as @battags : is there any special expectation from this update (I assume no) ?\n. +1\n. In fact, it was the same problem than https://issues.jasig.org/browse/CAS-1362.\n+1\n. I tend to think that it's a bug that exists for a long time as it's the same problem in 3.5.x : https://github.com/Jasig/cas/blob/3.5.x/cas-server-core/src/main/java/org/jasig/cas/web/view/Cas10ResponseView.java.\nSo shouldn't we fix it also for 3.5.x ?\n@battags : you mean : should go into RC3 or must have gone into RC2 ?\n. I'd like to insist on adding tests. I just made a real quick manual test and attributes are lost if I save a form with errors (no service name for example)...\n. You're right about unit tests, but I was more thinking about \"integration tests\" using spring mvc tests : http://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/testing.html. These would make more sense...\n. Thanks for the integration tests.\nI made a few tests and I found two problems :\n- when filling a long description, I get the following error message : registeredService.description.length.registeredService.description. It looks like a property is missing, doesn't it ?\n- when filling a very very long description, I get a CAS unavailable error with the following in logs :\n2013-11-22 11:36:30.471:WARN:oejs.ServletHandler:/cas-management/edit.html\njava.lang.NullPointerException\n    at org.jasig.cas.web.view.AjaxAwareJsonExceptionResolver.resolveException(AjaxAwareJsonExceptionResolver.java:55)\n    at org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1148)\n    at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:985)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:939)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)\n. I just made a test and problems with the description have been fixed. Thanks.\nUnfortunately, I have found an another issue. I think it's a new one :\n\n. Things are correct now. +1 for 4.x\n. +1\n. Will trust you on this one : +1\n. +1. It's been some times I was thinking about this, but your solution is very elegant !\n. +1 to fix that in 4.0\n. +1 for 4.0 as it's a bug fix\n. No pressure. It's a fairly big change which needs cautious...\n. It's a big change. I like the idea of having something powerful and meaningful (because who can guess that ignoreAttribute means \"return all attributes\").\nThough, I have some concerns about:\n- the UI breaking changes but according to what you said, you will update the UI in a subsequent pull request, so it will be ok\n- the database interactions: I'm not sure this works anymore with database, how the policy and filter go into DB?\n- the filter concept: I would remove it just to keep the filtering policy, whatever it applies on...\n. I'm in line. I may be a little too cautious while wanting to have two concepts instead of one...\n. Thanks for the new commit.\nI'm +0.9 on this one (-0.1 for the doubt I have for the two concepts separation)\n. I see your goal, but is it really enough to implement specific behaviours ? I'm not sure.\nLet's imagine we want to provide different service ticket timeouts depending on the service : I think we would need at least to open the CentralAuthenticationServiceImpl class by removing the final keyword and replace the direct access to the field serviceTicketExpirationPolicy by an indirect access through the getServiceTicketExpirationPolicy() getter (to be able to override it in a subclass). I don't think we are ready to go that far though...\n. You raise very interesting arguments, especially the Adapter design pattern.\nConsidering all of this, it is a real use case that someone would rewrite completely the CAS behaviour and need the abstract class you propose ?\n. Right, I don't think it's a substantial improvment, but I'm sensitive to the pollution argument.\n+1 for 4.x\n. I understand @battags's philosophy of providing extension points from a theorical point of view, but I don't think that we can achieve that practically. I'll be glad if you can prove me I'm wrong though.\nRegarding the use case I mentioned and the one from @mmoayyed, the solution seems to open the class by removing the final keyword and replace direct access to (protected) properties by the use of the appropriate getters... It's very drastic ! It's a real debatte !\nI gave a +1 more for the code cleanup in the CASimpl class, than for the gain in terms of extensibility.\n. Subsidiary question: will CAS 4.0 be able to address your MFA needs in that case?\n. If I understand things clearly, it's beyond MFA, it's LOA (Level Of Assurance) as specified here: https://wiki.jasig.org/display/CAS/Level+Of+Assurance+-+Head+document. The ability to fill in multiple credentials and define a global security policy with different levels of asurance for each service (aka N successful authentication handlers).\nI'm still hesitant on this but if we are to \"open\" the CASImpl, I'd like to do it also for getters and setters to improve customization possibilities...\n. For LOA, MFA was a pre-requisite. It may seem a small step for the users, but it's a great one internally.\nTo be short, LOA requires 3 main changes: UI + authentication process + access check.\nThe authentication process has been changed successfully into MFA.\nThe UI still needs to be changed to be able to gather multiple credentials and the solution will certainly be based on (sub)webflows.\nThe accesses still need to be checked at the service level based on a policy configuration and the current authentication.\nWe will work on UI and access check in 4.x... It will also require a new revision on the CAS protocol (4.0)...\n. I hope this presentation will be available somewhere later on, for those who cannot attend it...\n. I'm not very comfortable with Spring webflows.\nWould you mind giving us an example of how to add a new webflow using this method and how it would be available ?\n. Upgrading to 2.5 means that we don't support Tomcat 5.5 anymore for example (http://tomcat.apache.org/whichversion.html).\n+1\n. @battags : I don't think it's easy to find a good test for that, will try to figure something out...\n. A new commit to change the debug message and add a test (it was not easy : I will appreciate any feedback)\n. Updated the pull request after @mmoayyed's feedback...\n. I plan to merge this on friday unless someone has objection or feedback...\n. Update according to @serac's code review...\n. If no new code review or objection, I plan to merge this on Friday.\n. +1\n. Regarding this discussion : https://groups.google.com/forum/?fromgroups#!topic/jasig-cas-dev/QgJBZHY7Ouk and this post : \n\n+1 for reverting /serviceValidate to CAS2 protocol/CAS3.x release\nbehavior (deployers can continue to overide as required).  This\nensures backward compatibility for all current CAS clients.\n+1 for new /p3/serviceValidate for CAS3 protocol multi-value attribute\nrelease.  This provides optional enhanced features for clients that\nsupport it.\n\nI don't understand this pull request. I would expect a new endpoint with multi-values attributes and removing attributes from this endpoint...\n. OK. Thanks for clarification...\n. +1\n. I'm a bit surprised by the proposed change : the OperationTimeoutException is a RuntimeException that you would trap as an Exception and re-throw as a RuntimeException...\n. I may be mistaken, but I was expecting that you catch the exception and does not rethrow it.\nWhat's the purpose of catching OperationTimeoutException and \"replacing\" it by RuntimeException ?\n. I think I understand now. Your main problem is that spymemcached does not log properly errors. I personaly would only catch RuntimeException.\n. +1 for 4.x\n. I think @battags is right : even if the improvment is interesting, it should wait for 4.x...\n. +1 for 4.x\n. I think @battags is right : even if the improvment is interesting, it should wait for 4.x...\n. Thank you very much for this harsh job ! A great improvment for the Maven build time !\nA global +1 for 4.x\nI commented several times : I hope it might be useful, even though some remarks might be false positives...\n. I'm not completely convinced by the naming : /p3/. That said, I don't really have a better proposal, maybe /cas3/...\nFurthermore, I may be missing the point but I don't see any change in the protocol_views.properties file to define for example this view : cas3ServiceSuccessView ?\n. What about /protocol/v3/serviceValidate ? And /rest/vX/ for the next version of the REST API ?\n. There is always a compromise with versions : if every change generates a new version, it becomes quickly impossible to manage everything properly whereas if all changes are made on the same endpoint, CAS deployers would encounter breaking changes without any warning.\nSo I think that a new version for a major protocol version makes sense and is a good compromise.\nIntegrating the REST API in the protocol is an interesting idea we need to think about carefully...\n. Eventually, I'm getting used to /p3/ ;-) Please do.\n. No test case to verify the fix ?\n. OK. +1 for 4.0\n. I plan to merge this on Monday, at 4 pm (GMT+1), so that @mmoayyed can cut the RC3. Please review and comment if necessary...\n. I was just expecting the addition of a missing space, though I really like the LogoutMessageBuilder.\n+1 with a comment.\n. It is a test, isn't it? Can I close it now?\n. I'm surprised we forgot this bug for the RC3.\n+1 and we must be very careful with such small change with big potential impacts...\n. +1 with some tiny comments about formatting...\n. +1\n. +1\n. +1\n. +1 for 4.0\n. +1 for 4.1\nI'm in line with the change: it makes sense to me to make final keyword mandatory...\n. I don't think this is really dangerous. Though, I would go @battags's way and wait for 4.1...\n+1\n. Good news!\n. Small change but it makes sense to be able to go further in security configuration (than just a check on IP). That said, I think that most deployers would need to override the whole securityContext.xml file if they have specific needs.\nIs there any particular reason for two different access expressions (instead of just one)? I don't see any obvious use case where one would access to one url and not to the other...\n. :+1: for 4.1\n. You're right, the slo.callbacks.disabled property should change the behaviour of the DefaultTicketRegistryCleaner and implementation are opposite.\nThat bug must exist for a long time now...\nGood catch: +1 for 4.0\n. I really don't see why I would call it a bug just to make it goes into 4.0. I don't even propose it...\nBut the logUserOutOfServices property in the DefaultTicketRegistryCleaner class means the same as the disableSingleSignOut property in the LogoutManagerImpl class, doesn't it?\nIn that case, both classes should behave the same way and the proposed pull request fixes this issue (not a big one I admit).\n. No problem. Any other opinion is welcome on this proposed change...\n. I think that I JIRA ticket would be necessary here...\n. The discussion you pointed out is an old one: I think it would be good to refresh memories by restarting a thread on the CAS dev mailing list with your proposal...\nI appreciate the good job about batching the tickets cleaning, but I'm not sure that it's more than a JDBC enhancement... In any case, that deserves a good discussion...\n. The indentation is not correct, which makes things harder to read. The indentation must be fixed...\n+1 to always use LdapUtils.closeConnection\n. Quick merge... OK. So let's forget about the indentation improvment...\n. Yes indeed: great! I didn't see the indentation has been so quickly fixed...\n. +1\n. I've done a thoroughful code review.\nI think this change goes into the right direction as the source code is now a lot more understandable.\nThanks you both guys for this great work!\nThough, I have some comments and a design concern between LdapPasswordPolicyConfiguration and AccountStateHandler: at this time, the configuration depends on the handler which applies on the configuration. I would remove the LdapPasswordPolicyConfiguration and have a PasswordPolicyConfiguration in the AccountStateHandler: what do you think?\n. @serac : sorry to bother you again on that, but I didn't see in the merge your last proposal: https://github.com/serac/cas/commit/78ea2bd2c7557302f29328d10d4466b660b1e9bc\n. Thanks\n. There are maybe some pictures we could reuse for the Github pages...\n+1\n. Yes, indeed, there are already appropriate pictures on the Github pages, we can forget these ones...\n. Looks great!\nMaybe a silly question, but how can I access the CAS build on Travis?\n. Thanks. I was a bit lazzy on this. I should have RTFM.\nSo we could even imagine using the Travis build to push the snapshot artifacts into the Sonatype snapshots repository, right?\nI have myself a bunch of projets for which I should maybe use Travis... Very interesting... Thanks for pushing us forward...\n. I've seen another solution that looks easier: http://blog.xeiam.com/2013/05/configure-travis-ci-to-deploy-snapshots.html.\nI guess it's not a real concern, but I really don't like to have all my credentials, even encrypted, being published on the web in the travis.yml file: any hint about Travis security?\n. That's what I did on my own project: https://github.com/leleuj/pac4j/commit/e4f4ef955c2dfe05afbe3a22d4c4753c61ee2307. Pretty simple solution to deploy!\n. +1\n. Will trust you on this one...\n. +1\nThanks for updating the properties of the management webapp as well...\n. +1\nThanks for both translations\n. Would you mind adding screenshots of the default and new Apereo themes?\nIf it is about giving people an example of theme creation, I think it could be done in the documentation as easily as through source code...\nBy the way, shouldn't we choose now the Apereo theme as the default one since Jasig has merged into Apereo?\n. Thx. Nice and modern!\n. +1\n. Maybe a test to check that the characters are properly escaped now would be great...\n. I'm +1 and we can leave things that way. Though, from my point of view, it's necessary to open some discussion on cas-dev to see if new requests / requirements emerge...\n. :+1: I'm glad we fix this error as well...\n. Great!\n+1\n. So finally the test on username is sufficient!\n+1\n. Is it really a realistic scenario?\n. In fact, it's not a matter of TGT lifetime, isn't it?\nWe just need a logout if the TGT is expired at the moment of the expected generation of a ST, right?\n. The title deals with \"proxy validation\", but this change would apply every time we use services (thus without performing proxy validation), we would identify them in a case insensitive manner.\nSounds like a huge change, which needs to be specified in a protocol revision, doesn't it?\n. I'm in line globally with the change. Though, I just have a concern about the check in the regexp service.\nThis pull makes me realize that we already have an insensitive case test for Ant pattern defined services: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/services/RegisteredServiceImpl.java#L51.\nShouldn't we do the same for the regexp services? And not just as an option?\n. yes, just to be consistent with the check on ST and what we already do for Ant based services...\n. Good question about backward compatibility. I think there might be some use cases where the behaviour would change. But I tend to think that it would be very rare as CAS deployers should never play with the case of the services.\nUse case where it breaks:\n- service1: http://myexample.com/YES, order: 10\n- service2: http://myexample.com/yes, order: 1\nThe incoming url: http://myexample.com/YES would match the service1 in the current CAS version, and the service2 after this pull request has been applied.\nPersonally, I would take this minor risk...\n. I'm jumping late on this discussion.\nEven if I haven't done a comprehensive code review, I tend to agree with @mmoayyed : better to distinguish TGT+ST from PGT+PT for clarity and settings (cache, expiration policy).\nBut this is to be discussed more...\nThe strange thing from my point of view is that I think I remember seeing PGT starting with \"PGT\" and PT starting \"PT\" and this has disappeared in CAS 4.0...\n. Indeed, the passwordEncoder should be used...\n+1\n. +1\n. I'm in line with @serac, I was expected a very small update (a few lines) to ensure that the correct RegisteredService implemntation is used after an update... That said, it's always easier said than done...\n. Just before the final release, I would go for the smallest change possible if it's feasible... and I'll open discussions afterwards...\n. Thanks for closing your previous PR and opening a smaller one...\n. :+1:\n. Thanks for investigating this...\n. Any update of this fix?\n. I've just made a test and it works: no more error when switching between regexp and Ant pattern...\n. OK. I'll be available for the release next week: on Monday or Wednesday... Will reply on the mailing list...\n. :+1:\n. @mmoayyed : c:forTokens doesn't work for collections, does it?\n. Expecting one more +1 before the end of the day... To merge it at worst tomorrow morning (9am GMT+1) before cutting the release... Thx...\n. No more feedback. I'm merging...\n. Good catch!\n. Planning to merge on Monday...\n. +1\n. The code is really simple, maybe it would deserve a test case by principle though...\n. You're welcome: it feels good to be right ;-)\n. I like the idea of being able to setup the expiration policy according to some inputs (the request is a good candidate). Though, I feel it's a bit too much or too specific here. Just providing some starting point would maybe be sufficient: an AbstractHttpRequestBasedExpirationPolicy...\n. The source code is really simpler now. However, I don't understand why the older expiration policies (like HardTimeoutExpirationPolicy) inherit from this new AbstractCasExpirationPolicy as they are final. How can I implement my own expiration policy?\nThe gain of having the AbstractCasExpirationPolicy class and and its getRequest() method is fairly modest.\n. OK. I see your point. At the end, current and newly created expiration policies will inherit from this AbstractCasExpirationPolicy.\n+0.9\n. I would have chosen an easier way here. The \"ProxyPolicy\" is maybe overkill when it comes to url checking, isn't it? And moreover, I think it will be pretty complicated to integrate it properly in the UI...\n. You're right, the management webapp should never limit the design, though, at the end, we hope to configure the services through a UI.\nMaybe it becomes too complicated to go with a UI and we should give up and propose some XML / JSON configuration file reloading...\n. OK. I will propose that on the mailing list...\n. +1 is there some reason/justification for this upgrade?\n. :+1:\n. :+1:\nI'm always asking the question, but what are the benefits? I think there are some security fixes on the Spring Security side...\n. Even if the Java 6 support has ended, I still think it's early to move to Java 7. Many organizations are still using it...\n. Good to know the change about the MockHttpServletRequest as I'm restarting to work on OAuth server support...\n. +1\n. The renaming is useful only if we go as far as @mmoayyed proposed: why not address that in this pull request?\n. +1\n. +1\n. Even if Scott has done a thoroughfull code review, I'll take a look a this one too as it's a big PR (bigger than I thought).\n. Just sent a replied on my proposal to just store keys in database and have maps defining mappings between these keys and complex objects (policies, providers, etc.)\n. I don't need to ask why we should move from Restlet to Spring REST: the code speaks for itself!\nI'm in line with some comments, tests would ensure the behaviour remains the same.\n. +1\n. +1\n. Indeed, there is a check by service: https://github.com/Jasig/cas/blob/master/cas-server-webapp-support/src/main/java/org/jasig/cas/web/ServiceValidateController.java#L120\n. +1\n. I've spent a lot of time on code review lately, even of course I'd prefer to work on developing stuffs. I can't spend more time on open source. Though, I can still handle the Misagh's contributions stream ;-)\n@mmoayyed: are you currently full time on the CAS server development?\nAt least, if we have a lot of code reviews, it means that we have a lot of contributions, which is good for the CAS server!\n. I have several comments, even if I like the overall idea of having a specific truststore for proxy calls and using the httpclient component from Apache...\n. I have several comments, even if I like the overall idea of having a specific truststore for proxy calls and using the httpclient component from Apache...\n. Looks like there is an issue in the executor pool initialization...\n. +1\n. +1. I was able to build the CAS server with both JDK 7 and 8...\n. +1. I was able to build the CAS server with both JDK 7 and 8...\n. It's strange to see such problem for the first time as I though we had many times the @PostConstruct annotation.\nThough, we just have it in the LDAP module:\n./cas-server-support-ldap/src/main/java/org/jasig/cas/adaptors/ldap/services/LdapServiceRegistryDao.java\n./cas-server-support-ldap/src/main/java/org/jasig/cas/authentication/LdapAuthenticationHandler.java\n./cas-server-support-ldap/src/main/java/org/jasig/cas/persondir/LdapPersonAttributeDao.java\nSo the problem may happen again. Shouldn't we have a wider component scanning or use the InitializingBean interface instead?\n. It's strange to see such problem for the first time as I though we had many times the @PostConstruct annotation.\nThough, we just have it in the LDAP module:\n./cas-server-support-ldap/src/main/java/org/jasig/cas/adaptors/ldap/services/LdapServiceRegistryDao.java\n./cas-server-support-ldap/src/main/java/org/jasig/cas/authentication/LdapAuthenticationHandler.java\n./cas-server-support-ldap/src/main/java/org/jasig/cas/persondir/LdapPersonAttributeDao.java\nSo the problem may happen again. Shouldn't we have a wider component scanning or use the InitializingBean interface instead?\n. The idea is good, some things to fix...\n. The idea is good, some things to fix...\n. No! Why do we need to have the cas-server-support-ldap and cas-server-support-oauth modules by default in the cas-server-webapp/pom.xml file? These modules are optional!\n. @mmoayyed : how does the test coverage work? How comes that these dependencies become mandatory? Or maybe the are required with a <scope>test</scope>?\n. +1\n. +1\n. +1\n. Looks good to me unless there is a better solution relying on SWF...\n. Yes, we are no more consistent here: either the XML tag name should be changed or the property name.\nThere might be something to do with the isFromNewLogin tag as well...\n. OK. Will do...\n. I just updated the authenticatedDate property into authenticationDate...\n. Will merge on Wednesday unless someone has a concern...\n. I'm about to merge this one...\n. Oops! My fault. I though Misagh had +1 this one. @mmoayyed: is it ok for you?\n. +1\n. +1\n. +1\n. Will merge on Wednesday unless someone has a concern...\n. Oops! This one was targeted for master instead of 4.0.x branch. Will close and reopen a new one...\n. Just one more question: what will happen with the xmlViewResolver if the cas-server-support-saml module is not used? No error at startup?\n. Good. Thanks.\nInstead of commenting / uncommenting the file, couldn't we use the same mechanism than the one introduced by @dima767 with the cas-server-support-rest module? Where contexts are located in the META-INF directory (example: https://github.com/Jasig/cas/blob/master/cas-server-support-rest/src/main/resources/META-INF/spring/rest-context.xml) and defined by default: https://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/webapp/WEB-INF/web.xml#L35.\n. Right, I missed it. It's somehow a new mechanism. It makes sense to me to reuse the same mechanism for both modules, doesn't it? Maybe not in this pull request though.\n. Sorry but I'm not sure to follow your last comment @mmoayyed: are you in line to go towards Dmitriy's solution?\n. I don't think there would be any difference between the two methods. It is just a matter of where the file to override was originally located.\nThe idea was to have a consistent overriding system accros all modules.\n. Thanks for your patience and tenacity ;-)\n. Ouch! I'm surprised it doesn't work. @dima767 : are you sure it works for the cas-server-support-rest module?\n. You must be right. It's not the same optional configuration.\nTo come back to the original question of @mmoayyed : I'm hesitating, I think commenting / uncommenting is the easiest way to proceed, to avoid creating a new customized ViewResolver.\n. I see you comment the xmlViewResolver instead of the whole views.xml file.\n+1\n. +1\n. I'm looking for more explanation but I don't see any issue for this one...\n. I don't know the topic very much but it looks like a hack to me. At a system level, are not all servers synchronized using the right time service? Isn't there any windows on the client side for the check?\n. I'm no sysadmin, but I had the idea that NTP was some basic platform service. But, if you don't own the infrastructure, it could be a real problem...\n+1\n. Thanks for the additional explanations...\n. I'm still +1\n. +1\n. Removing code is so rare! +1\n. +1\n. It looks like a very smart solution, but pretty hard to understand...\n. The truth is that you have achieved an outstanding work on this! I find the solution complicated, but I don't see any better solution to target all logging frameworks...\n+0.9\n. Some tiny comments and a more important remark: how do we set this \"no logout for this service\" behaviour in the UI? We don't, do we?\n. +1\n. +1\n. +1\n. If no new concern or any objection, I will merge it today as the management webapp may not be used because of this bug.\n. +1\n. +1\nThough, I'm pretty sure that all of these dependencies version updates will raise new versions conflicts when combining various modules.\n. Will give it a try with my own overlay: https://github.com/leleuj/cas-overlay-demo and let you know.\n. I was about to test the PR, but I see that the build failed: https://travis-ci.org/Jasig/cas/builds/33564990 / https://developer.jasig.org/bamboo/browse/CAS4-TIB-340/test. It seems to be related to \"Saml validation now forcing service match\".\n. I fixed the tests: https://github.com/Jasig/cas/pull/680\n. When applying this PR, I had conflicts in the pom.xml file and I see that this PR can't be automatically merged.\nWould you mind updating it?\n. I tried to compile with the PR and get a test failure:\nTests run: 3, Failures: 0, Errors: 3, Skipped: 0, Time elapsed: 0.176 sec <<< FAILURE!\ntestResponseWithNoAttributes(org.jasig.cas.support.saml.web.view.Saml10SuccessResponseViewTests)  Time elapsed: 0.167 sec  <<< ERROR!\njava.lang.NoClassDefFoundError: org/w3c/dom/ElementTraversal\n    at java.lang.ClassLoader.defineClass1(Native Method)\nDid you run the tests?\n. Works for me.\n. I didn't review the PR, however I'm hesitating conceptually speaking.\nRefreshing the principal's attributes during the SSO session means that the profile will be different from one application to another one. I find this very dangerous.\nAt my company, when we change the user's profile and when we want to refresh it accross all the websites the user has browsed, we propose the user to log out and log in once again.\n. Yes, I think that user profile desynchronization is very dangerous when it is presented to the final user in the websites. Let's say I change my contact email from leleuj@gmail.com to another personal email, it would be strange to see one address in some applications and the other one in others. I could even think that all actions I perform in my applications use my new address (whereas some applications use the old one).\nDo we want to offer that option to CAS deployers? I'm not sure.\nMFA or LOA is different: it is related to your granted accesses and will be refreshed as soon as you try to access some area which needs an upgrade of your privilege.\nIf applications read the user profile by themselves, we still have the problem of refreshing the updated user profile.\n. You raise valid arguments. However, I'm still not convinced.\nI don't think that logout is such a pain precisely because there is SSO.\nIf CAS applications load dynamically user's attributes, it's not the same that offering this option into the CAS server. It's up to CAS developers to wisely build their applications. And I still think that desynchronizations should be avoided at all costs.\nIt's a huge change (49 files changed) a big step towards complexity I'm not ready to assume.\nOther opinions are welcome.\n. You're right about the scope of the PR: it's not such a huge change in the source code, it's more a new Principal abstraction layer.\nI would not say that logout is the same issue than this dynamic attributes retrieval. Logout is a basic feature whereas this one goes further. But eventually, both are settings defined by the CAS deployer.\nI like the idea that this feature is seen as a new extension capability CAS deployers can use carefully.\nAlthough I still don't like the idea of desynchronizations, your arguments make sense.\nI'd like someone else to jump into our discussion before going myself into a deeper code review.\n. Good idea.\n. I'm currently in holidays (small screen, slow connection), I'll check that this week-end.\n. I may be missing the point, but I'm a bit surprised by the desing: I would have expected the principal attributes repository to be a single component used by all principals. Sometimes it seems to be a property of a principal and sometimes it seems to be shared.\nI like the principal factory but I think it should rely on a single principal attributes factory.\n. Indeed, things seem easy from a far distance: a new abstraction layer. But, taking a closest look, it's not completely clear to me. I'm going to try to explain it better.\nThe attributeRepository from Person Directory is a singleton. That's clear. But what about the DefaultPrincipalAttributesRepository and the CachingPrincipalAttributesRepository? I tend to think they are singletons as in the DefaultPrincipalFactory, there is only one instance of the PrincipalAttributesRepository reused for all principals (through the createPrincipal method).\nHowever, in that case, I'm not sure to understand how the CachingPrincipalAttributesRepository works: https://github.com/Jasig/cas/pull/676/files#diff-d7ffbcc123501b42717fa4940e0358c7R204 as I see only one key for the cache: shouldn't user attributes cached by principal identifier?\n. Thanks for these comprehensive explanations.\nI'm not a big fan of the getInstance() method when using Spring: why not building a singleton in the context and injecting it where it is necessary? I think it makes things harder to read.\nI feel embarrassed but I still don't get this part: \"It makes no difference how attributes are put into cache\". If a principal factory has one attributes repository: when a principal is created, it is created with this attributes repository which is therefore shared among all principals. Am I right?\nIn that case, how can the attributes of multiple principals be put / get from cache using only one key: the same for all principals, won't a principal get the attributes of another principal?\n. Changing the principal factory injection in 50 classes is a real work, but I would not say that it \"is a lot of noise\", I tend to think the exact opposite: Spring contexts grealty help us to have a good overview of the use of the components.\n. OK. But I'd like to see the test:\n- creation of CachingPrincipalAttributesRepository\n- creation of DefaultPrincipalFactory using the previous repository\n- creation of principal with id: uid1 and attribute mail1\n- creation of principal with id: uid2 and attribute mail2\n- get attributes for principal with id: uid1. Do we really get mail1?\n- get attributes for principal with id: uid2. Do we really get mail2?\n. So you finally come to save attributes according to the principal id ;-) And you certainly no longer need the constant: ATTRIBUTES_CACHE_KEY.\n+1\n. I take a look at the PR. I made a few comments to make things work properly (not messing principal attributes in the cache). It looks ok even it takes me some time to find that the principal attributes repository must be injected into the attributes release policy.\n+1\nI guess you need to merge with master as the \"Merge pull request\" button is disabled.\n. Yes. It makes me think that the attributes release policy is serialized with the service, and so should the principal attributes repository, right?\n. +1\n. +1 with somme comments\n. +1\n. The XML example still references: net.unicon.cas.addons.ticket.internal.HostNameBasedUniqueTicketIdGenerator.\n. +1\n. +1\n. +1 and I like the constants classes.\n. Argument extractors are protocol-specific, so I'm not surprised to see more logic in them. Still +1\n. +1 with comments\n. +1\n. +1\n. +1\n. Merging the PR by myself for tests. After the current build.\n. That's a huge PR, it would have been good to discuss the topic on the cas-dev mailing list first. The \"Merge pull request\" button is also disabled which means you're not up-to-date.\n. Yes, the CASImpl must be improved and indeed, the idea of TicketGenerator is very promising. I'm also looking forward to the discussion.\n. I reverted the unnecessary change. Thanks to @mmoayyed.\n. Good question in fact, which makes me realize that the service parameter is restored from the web session to the webflow.\nThe PR won't work. So I will fix it.\n. Updated the PR to restore the service from pac4j module as a request attribute, to be able to consume it from the SimpleWebApplicationServiceImpl creation.\n. Will merge tomorrow if no objection or new concern.\n. For serialization problems, the solution is to update the Kryo version and the supported classes for serialization.\nAfter https://github.com/Jasig/cas/pull/707, I will work on that.\n. Adding a HashSet around an already existing java.util.LinkedHashMap$LinkedKeySet (as a matter of facts, a Set around a Set) is only necessary because Kryo does not properly handled this kind of set. It's a workaround, upgrading Kryo to handle more types seems to me like a more sustainable solution.\n. Oops! I was completely wrong: I thought it was a problem related to the Kryo serialization. I talked nonsense. Forget about my comments.\n. Sorry for the wrong lead. At least, you've got a better understanding of Kryo right now ;-)\n. +1\n. +1\n. +1 with a tiny comment\n. +1\nI appreciate the effort to stay at the state-of-the-art.\n. Will take a closer look at the end of week.\n. +1 with a few questions/comments\n. +1\nI think it deserves a new test in this class: https://github.com/Jasig/cas/blob/master/cas-server-support-oauth/src/test/java/org/jasig/cas/support/oauth/web/OAuth20ProfileControllerTests.java.\n. :+1:\nGreat improvment. I made a few comments. And as we have now classes for the CAS protocol views, we could maybe add some tests for them.\n. Thanks for the tests. Views are now really light, so it's not a big deal if we don't have tests for them (we never had).\n. :+1:\nThis class is hard to understand as it handles several use cases. I really like this change. A few comments though.\n. You like to be up-to-date on EhCache, don't you?\n+1\n. I like the idea to get the TGT or ST directly from CASimpl. It doesn't mean that we will never access the ticketRegistry, but it will make things easier.\n. I liked the idea of returning Ticket instead of String, but the creation of the getTicket and getTickets methods to get rid of the ticketRegistry dependency is really too much and leads me to the same conclusion as @serac.\nAnd it's not an easy job to know how to properly split the CASImpl (we can find some help on the previous work from @battags). Generally, this kind of initiative is not successful when the target is too far or too ambitious. @serac's vision is certainly accurate, but I'd like we go through small steps, like the latest\u202fPRs provided by @mmoayyed's. I find it's the right way to achieve something.\nI'm not sure to see what's behind SessionManager and TokenManager. I'm not sure either to clearly see what's the final target. There was this interesting proposal: https://github.com/Jasig/cas/pull/705/files which moves more logic into some ticket generator.\n. @battags: the \"small steps\" strategy only makes sense if we agree on the final target and it's not completely clear to me where we are going. This PR seems to be going into the right direction.\nWe should define our final target. What will be the final classes? The general API?\n@serac: would you mind enlighting us about your SessionManager and TokenManager and their API?\n. Yes, I think there is something to refactor around ticket factories. The Validators concept is not fully clear to me: it might become obvious in a PR.\nMaybe it's a naive proposal but why not break the CASImpl into CASLoginImpl, CASLogoutImpl and CASProxyImpl to follow the different parts of the CAS protocol itself?\n@serac : I'm always looking forward to get a better understainding of your SessionManager and TokenManager?\n. Yep, I said \"naive\" ;-) You're right: there are things to extract like the ticket factories, but three small classes are always easy to understand than a big one.\nAbout the ticket factories, I like your proposal, except the:\nTicket t = AbstractTicketFactory.getServiceTicketFactory().createTicket() which is strange as we use Spring. Why not simply injecting the factories?\n. With several CASImpl (for logout, login...), we would just inject the right ticket factories.\n. +1\n. +1\nMight be worth updating the documentation: http://jasig.github.io/cas/4.0.0/installation/LDAP-Authentication.html\n. Who can say \"no\" to new tests? However, I see that there is one \"hidden\" change regarding the support or not of multiple results in SearchModeSearchDatabaseAuthenticationHandler.java. Different PR would have been better.\n+1\n. +1\n. If it still builds properly for JDK7 ;-)\n+1\n. Some design concerns, but I like this PR. It's a good step into the right direction: it provides a better code organization and prepare a better SAML support.\n. +1\n. Great PR! Some comments. Findbugs rocks.\nWould you mind documenting somewhere how you proceed with findbugs and your configuration?\n. +1\n. Yep, I'm in line with the changes.\n. +1\n. Thanks. This is exactly what I had in mind.\n. I guess you forget to commit the update of the authentication manager which effectively uses this supports method to operate on the right authentication meta data populators.\n. +1\n. +1\nI've seen the error.\n. Why not?\n+1\n. I think I remember this is not the first time this test goes wrong as the string check was a bit fragile.\n+1\n. \u00cct makes sense, but what about the AuthenticationExceptionHandler in the same package? I guess it should be moved as well, shouldn't it?\n. +1\n. Too bad that this trivial patch doesn't work.\nThough, we have other options to limit the risk of a DOS attack:\n1) disable proxy by default: we don't need to backport code from master, it's already disabled in the 3.5.x branch (a simple property turned to false): https://github.com/Jasig/cas/blob/3.5.x/cas-server-core/src/main/java/org/jasig/cas/services/AbstractRegisteredService.java#L86 and in 4.0.x: https://github.com/Jasig/cas/blob/4.0.x/cas-server-core/src/main/java/org/jasig/cas/services/AbstractRegisteredService.java#L93\n2) limit the thread pool: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/util/SimpleHttpClient.java#L105.\nIt would be a very trivial patch both for 3.5.x and 4.0.x (and master).\nFor master, we can really apply a more invasive patch.\n. Maybe the TestUtils class could be moved into the test-jar of the core in that case?\n. +1\nOne last comment about the version format.\n. Nice solution. +1\n. +1\n. I updated the pull according to @mmoayyed's feedback (new SimpleHttpClientBuilder class) and @serac's feedback (the queue size can be defined, https://github.com/Jasig/cas/pull/772/files#diff-c42380b30541428d874798a987ec720bR88)\n. In fact, it's not only building a HTTP client but also a request executor service. I think we need two objects here: one storing the configuration and one building stuffs for the SimpleHttpClient. I will work in that direction and let you know.\n. @serac @mmoayyed @battags : updated with a SimpleHttpClientConfiguration which stores the configuration and a SimpleHttpClientBuilder which builds the HTTP client and the request executor service required by the SimpleHttpClient.\n. Indeed, the one that merges first beats the others ;-)\nI can no longer merge the PR automatically. I will update with the master.\n. Here we go: synchronized with master\n. And SimpleHttpClientFactoryBean happens!\n. Will merge next thursday if we finally agree on the factory.\n. Merged with master.\n. It's not exactly a security issue, but I will add a note in the security guide about the configuration of this threads pool.\n. Here is the note: https://github.com/Jasig/cas/commit/4bd1d336c89fbc388ded41e5824383f53c7ec9f2\n. Fixed.\n. Yes, Tomorrow is the plan.\n. +1\n. I'm not completely comfortable with that PR. The default behaviours are really just there to make the management webapp work (maybe they could be smarter).\nBut my point is that I'd prefer to wait for the new management webapp.\n. I would wait for the final management webapp.\n. +1\n. Wow! What a change you did! Not a big deal, but I don't like the \"verify\" prefix, nothing is better, even if I liked the \"test\" prefix (that's just me).\n. +1\n. This is an interesting scenario: using directly the REST API from a previous authentication by login page.\nThough, I don't think there will ever be a new version 3.5.x. The current fix version is 4.0.x and the development one is the 4.1.0.\nMoreover, such a change should be discussed on the mailing list first. I'm wondering if there is some security concern with such a system, like a malicious page I'm currently browsing and which would request some ST on my behalf and without letting me know.\n. +1\n. +1 with a few comments about properties which could be created instead of having the same method called multiple times.\n. Will merge on Tuesday unless someone has a concern.\n. +1\nI like the idea, a few comments by the way.\n. We have the Eclipse formatters in the code conventions: https://wiki.jasig.org/display/CAS/Code+Conventions.\nBuild locally (mvn clean install) before sending any pull request to launch the tests and verify the checkstyles rules...\n. +1 and a few comments\n. Expecting one more +1 on this before the merge.\n. I had the same request from users using the authentication delegation. Generally, information returned by identity providers (like Facebook) using pac4j are supplemented by local information.\n. I'm not sure to see the problem here: principal attributes can come from multiple sources, so it really makes sense to merge attributes from the authentication handler and from the resolver. I think we could even imagine having multiple resolvers (but let's keep that for CAS 5 new design).\nIf it's not obvious though, I agree that the best is to bring this topic on the mailing list.\n. I'm not following you: \"Principal attributes can come from multiple sources\" and \"Principals cant come from multiple sources.\"\n. OK. I think I get it.\nWhat we want is to get user attributes from multiple sources whereas the authentication handler OR the principal resolver is responsible to return THE principal (identifier + attributes). Thus, the resolver is not meant to add attributes to the user.\nSo your proposal is to add a dedicated attributes repository in the authentication handler, isn't it?\n. OK. So as soon as we merge https://github.com/Jasig/cas/pull/676, we'll have a solution.\n@baumgartner: does it make sense to you?\n. Will merge on Tuesday unless someone has a concern.\n. +1\n. +1 with a few comments\n. You're welcome.\n. +1. Readability...\n. I don't understand the reasons behind the two first points and how it is related tos ecurity. Could you elaborate a little more?\n. Point 1 makes sense.\nFor point 2, if I make the clone method final: how I can override it properly in the subclasses?\n. +1\n. A few questions...\n. +1\n. +1\n. Good catch! +1\n. Will merge on Monday unless someone has a concern.\n. +1\n. +1\n. +1 with a related question\n. Updated according to @mmoayyed's code review\n. And merged with master.\n. Will merge on Monday unless there is a concern.\n. Merged with master again.\n. I don't see the removel of the closeQuietly method from the IOUtils class: is it normal?\n. +1\n. +1\n. +1\n. Smart!\n. +1\n. The problem does not occur in 4.0.1. It comes with this change in 4.1.0: https://github.com/Jasig/cas/pull/674/files.\n. Will merge next Monday unless someone has a concern / objection.\n. I'm wondering if this information should be output by default.\n. Sorry for the misleading comment, I didn't realize that it was already output by default: https://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/resources/log4j.xml#L104.\nWould you mind reverting to the previous log level? Thx.\n. +1\n. In fact, the reminder is for us, as CAS deployers don't have any other solution than calling the current getAuthenticationDate() method.\n. +1\n. +1 with some comments.\n. Great update. Thanks.\n:+1:\n. +1\n. Will merge on Friday unless someone has a concern.\n. Updated according to @mmoayyed's feedbacks.\nWill merge on Monday unless someone has a new concern.\n. I'm not sure to understand the link with #834.\n. What's the use case you try to address here?\n. I'm not very enthusiastic on this, neither feels @battags I guess.\n@mmoayyed : do have a real use case in mind (from a Unicon's client for example)?\n. OK. +1\n. A small change and a huge one at the same time.\n+1\n. +1\n. As I said: \"I don't feel comfortable with sending back the password as a user attribute: it can lead to so many problems.\".\nJust to be sure: passing back the encrypted password in the service ticket validation response means that we would not use ClearPass any more. It would be removed, wouldn't it?\nWhat are the use cases when we need the password to be sent back to the application? Are we absolutely sure there is no other solution?\nIn that case, I'd rather go for this solution (with the default settings you mentioned) instead of the complicated ClearPass one.\n. I won't go against @serac, but I feel we have to choose the lesser of two evils. And in that case, I vote for the password in the ST response (instead of ClearPass).\n@serac: why did you propose the proxy instead of the ST response? Any benefit we missed? A security concern like it's harder to catch a proxy call than a ST response?\n. I won't go against @serac, but I feel we have to choose the lesser of two evils. And in that case, I vote for the password in the ST response (instead of ClearPass).\n@serac: why did you propose the proxy instead of the ST response? Any benefit we missed? A security concern like it's harder to catch a proxy call than a ST response?\n. @jtgasper3 : from first insight, I really like your idea for the PGT.\nA PGT is a more critical information than a simple ST, that's why it should be more complicated to get them.\nYou somehow need two proofs: the PGTIOU in your ST response and the PGTID sent directly to the application.\nI tend to think with encrypted PGT in the payload: we would somehow have two proofs: the payload and the encryption.\n. @jtgasper3 : from first insight, I really like your idea for the PGT.\nA PGT is a more critical information than a simple ST, that's why it should be more complicated to get them.\nYou somehow need two proofs: the PGTIOU in your ST response and the PGTID sent directly to the application.\nI tend to think with encrypted PGT in the payload: we would somehow have two proofs: the payload and the encryption.\n. I'm not a Javascript specialist, but I think you should take a look at: http://headjs.com/. It seems to do the job.\n. I'm not a Javascript specialist, but I think you should take a look at: http://headjs.com/. It seems to do the job.\n. One more cool framework! :+1:\n. One more cool framework! :+1:\n. +1\n. +1\n. +1\n. +1\n. I'm in line, but are we still pushing to gh-pages ? I guess we need to use https://github.com/Jasig/cas/tree/master/cas-server-documentation module now.\n. I'm in line, but are we still pushing to gh-pages ? I guess we need to use https://github.com/Jasig/cas/tree/master/cas-server-documentation module now.\n. Would you mind giving us some details about this change?\n. Would you mind giving us some details about this change?\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1 with two comments.\n. +1 with two comments.\n. +1\n. +1\n. Thanks for taking time on this. Indeed, using Unicode characters is painful, but it's not mandatory if you don't forget to encode your files in UTF-8.\nBe cautious with single quote, generally they don't display well: did you check the messages with single quote?\n. Thanks for taking time on this. Indeed, using Unicode characters is painful, but it's not mandatory if you don't forget to encode your files in UTF-8.\nBe cautious with single quote, generally they don't display well: did you check the messages with single quote?\n. I think you're right, it must only be escaped in the messages with {x}.\n. I think you're right, it must only be escaped in the messages with {x}.\n. +1\n. +1\n. +1\n. +1\n. Thanks for taking time to report back.\nI'm surprised by the work around you propose: replacing the Spring EL by OGNL. How can it be that using Spring EL makes OpenID support broken? What was the error you got?\n. Thanks for taking time to report back.\nI'm surprised by the work around you propose: replacing the Spring EL by OGNL. How can it be that using Spring EL makes OpenID support broken? What was the error you got?\n. OK. In that case, why don't we update the test in the flow to be Spring EL compliant?\n. OK. In that case, why don't we update the test in the flow to be Spring EL compliant?\n. I understand, but Spring EL is definitely the target.\n. I understand, but Spring EL is definitely the target.\n. Just to provide an update on this. I tested a CAS server v4.0.x with OpenID support: https://github.com/leleuj/cas-openid-demo/commit/743d17eddef8f64099953477d2d07643019bd218.\nFor the OGNL / SpringEL issue, it's fairly easy: the neq OGNL keyword is to be replaced by the ne SpringEL keyword!\n. Just to provide an update on this. I tested a CAS server v4.0.x with OpenID support: https://github.com/leleuj/cas-openid-demo/commit/743d17eddef8f64099953477d2d07643019bd218.\nFor the OGNL / SpringEL issue, it's fairly easy: the neq OGNL keyword is to be replaced by the ne SpringEL keyword!\n. Yes, I'll update the doc with the code.\n. Yes, I'll update the doc with the code.\n. It seems that previous log4j configuration were changed when updating to log4j: is this the expected change?\nThe SSO session report mechanism should not be in this PR.\n. It seems that previous log4j configuration were changed when updating to log4j: is this the expected change?\nThe SSO session report mechanism should not be in this PR.\n. +1\n. +1\n. I just took a quick look. Are we sure we want to override the default logout url with a specific one for the back channel SLO?\n. I just took a quick look. Are we sure we want to override the default logout url with a specific one for the back channel SLO?\n. I thought we were only targeting the front channel communication with this new specific logout url.\n. I thought we were only targeting the front channel communication with this new specific logout url.\n. Yes, but I'm not sure it makes sense to have a specific url where to send CAS logout requests (instead of the service url). Which CAS client would work that way?\nFrom my point of view, the specific logout url was only for front-channel and only to receive simple GET requests (like reusing the /j_spring_security_logout url from Spring Security).\n. Yes, but I'm not sure it makes sense to have a specific url where to send CAS logout requests (instead of the service url). Which CAS client would work that way?\nFrom my point of view, the specific logout url was only for front-channel and only to receive simple GET requests (like reusing the /j_spring_security_logout url from Spring Security).\n. Most CAS clients implement the back-channel logout mechanism. I don't see any need for a  specific logout url where applications would manage by themselves the CAS logout requests, which would not be that easy.\nBut for front-channel logout, many applications have created their own logout url like this logout.jsp:\n<%\n  session.invalidate();\n%>\nOr endpoints for logout are available in proprietary software.\nAnd this does not work with the CAS server. So my idea was to add a specific logout url so that the CAS server can call it. In addition to a more evolved front-channel mechanism which can be implemented later  on by CAS clients.\n. Most CAS clients implement the back-channel logout mechanism. I don't see any need for a  specific logout url where applications would manage by themselves the CAS logout requests, which would not be that easy.\nBut for front-channel logout, many applications have created their own logout url like this logout.jsp:\n<%\n  session.invalidate();\n%>\nOr endpoints for logout are available in proprietary software.\nAnd this does not work with the CAS server. So my idea was to add a specific logout url so that the CAS server can call it. In addition to a more evolved front-channel mechanism which can be implemented later  on by CAS clients.\n. You're right: it will be easier to have a consistent behaviour even if most deployments don't need the CAS logout request itself (but just the call),\n. You're right: it will be easier to have a consistent behaviour even if most deployments don't need the CAS logout request itself (but just the call),\n. +1\n. +1\n. +1\n. +1\n. The SqlException was caused by the updated database dependencies, wasn't it?\n. +1\n. I'm not sure to understand the value of this protection: if the cookie is stolen, encrypted or not, it can be reused, right?\n. And if we want to secure the CAS cookie by linking it with an IP, it can be done on server side without encrypting the cookie value...\n. I guess we all agree that the CASTGC cookie must be protected at all costs.\nThough, I still don't see the value of the AES-256 encryption compared to the token generated by SecureRandom. In both cases, you cannot guess it but you can steal it.\nI definitely think that the HttpOnly flag is an improvment for the security. Linking the cookie to an IP should be an option maybe because I think that it can be changed during a wifi browsing session.\n. With extra information (IP, user agent), the encryption improves security.\n+1 with a few comments.\n. I think both options (Ant pattern or regexp) are valid ones. The PR can't be merged automatically.\n. You're right, Ant-pattern services may lead to more vulnerabilities, but at the same time, should one really define: * :// *.mydomain/** for a CAS service? The regexp: .*://.*\\.mydomain/.* would be as unsafe as the previous one.\n. OK. +1\n. Why not? +1\n. I'm on my way ;-)\n. The json-web-key-generator is a pretty young library (v0.1), but we already have it.\n. +1\nFor the documentation update, aren't we supposed to update the cas-server-documentationmodule?\n. +1\n. +1\n. +1 with a comment\n. +1 with a few comments.\n. +1\n. It seems good. I'll test it for real tomorrow and let you know.\n. I just tested it and the management webapp is still broken:\njavax.el.PropertyNotFoundException: The class 'org.jasig.cas.services.RegexRegisteredService' does not have the property 'enabled'.\n        at javax.el.BeanELResolver.getBeanProperty(BeanELResolver.java:664)\n        at javax.el.BeanELResolver.getValue(BeanELResolver.java:293)\n        at javax.el.CompositeELResolver.getValue(CompositeELResolver.java:188)\n        at com.sun.el.parser.AstValue.getValue(AstValue.java:138)\n        at com.sun.el.parser.AstValue.getValue(AstValue.java:183)\n        at com.sun.el.ValueExpressionImpl.getValue(ValueExpressionImpl.java:224)\n        at org.apache.jasper.runtime.PageContextImpl.evaluateExpression(PageContextImpl.java:1009)\n        at org.apache.jsp.WEB_002dINF.view.jsp.manage_jsp._jspx_meth_c_forEach_0(manage_jsp.java:917)\n        at org.apache.jsp.WEB_002dINF.view.jsp.manage_jsp._jspService(manage_jsp.java:224)\nDidn't you fix it?\n. OK. I'll check both authorization failure views.\n. I just tested them and it's ok. +1\n. I like the idea as well and I'm no Javascript expert. But doesn't a library exist to do that kind of detection? I think jQuery has a cookie plugin...\n. Yes +1\n. I'm not sure it should be displayed in the login page by default.\nAbout the solution: did you think about using a MetadataPopulator ? To mark the authentication as \"Occured in a public workstation\"...\n. Thx for the example. Yes, the benefit of the MetadataPopulator is to store the information in a way we could push it back to the applications.\nYes, I was thinking about commenting out the checkbox by default. Maybe we should do the same for the warn checkbox which is not used very much. And we could maybe add the remember me checkbox, commented as well.\n. Sorry if I misunderstood your previous comments, but weren't you about to use a MetadataPopulator instead of a cookie?\n. A few comments here and there, but I like the solution without cookies.\n. Thanks for taking time on this one.\n+1\n. +1\n. It looks like ti breaks the build: https://travis-ci.org/Jasig/cas/jobs/57613591.\n. OK. Great! Sorry for the false positive.\n. +1\n. +1\n. +1\n. I just updated the PR according to @mmoayyed 's feedback.\n. Exactly. You need to configure an OpenID Connect client. I updated the documentation to highlight that the OpenID Connect protocol is now supported, but I didn't provide any practical example.\nThe full documentation is on the https://github.com/pac4j/pac4j project:\nfinal OidcClient client = new OidcClient();\nclient.setClientID(\"xxx.apps.googleusercontent.com\");\nclient.setSecret(\"yyy\");\nclient.setDiscoveryURI(\"https://accounts.google.com/.well-known/openid-configuration\");\n. Yes, CAS adopters need to update their login webflow as well as to add the appropriate handler (/ metadata populator). It's the way of CAS extension where you need to configure stuffs, but we could provide this authentication delegation in an easiest way.\nI'm open to suggestions.\n. CAS deployers don't need to write code: they only need to perform some configuration, even to define the CAS server as a client of an OpenID Connect provider.\nA big change would be to always have the authentication delegation configured and add clients on the fly (maybe with some annotation) but it certainly goes too far. I propose to merge this one and create a new issue if you feel the need. Sounds good?\n. Yep, I forgot to +1\n. +1\n. +1\n. +1\n. +1\n. +1 with a question\n. +1\n. +1\n. A few comments here and there...\n. +1\n. The allowedToProxy flag has always applied to the proxying service and proxied service. With this change, the check would only apply on the proxying service and no more on the proxied service. In that case, why is the check in the delegateTicketGrantingTicket method (when the PGT is created) not sufficient? Why do we need a check in the grantServiceTicket method?\n. @mmoayyed: I understand the use case, but it's rare one, isn't it? As we could just wait for the PGT to expire, couldn't we.\n@serac: so I don't think it's a bug, it's a change of meaning: before, \"allowedToProxy\" meant \"allowed to create PGT\" OR \"allowed to create PT\", now it will only mean that it allows PGT creation. A service won't be able to refuse to be used through a proxy, right?\n. OK. I'm in line. So we don't add a new check to allow or not a service to be used by a proxy, do we.\n+1 with a few comments\n. Just trying to get a better understanding: after the proxy checkbox has been turned off, proxy tickets will be created till the PGT is not expired, let's a say, a few hours, right?\n. +1 Though, I'd like to have these edge use cases covered by tests.\n. +1\n. +1\n. +1\n. +1\n. +1\n. Sorry for the time spent on this, but I'm not in favor of this change (adding Lombok). To be short: little value, more magic and a more complicated build.\n. This depends on: https://github.com/Jasig/cas-server-security-filter/pull/15\nAs soon as it is merged, I can make a release and update this one to forget about the SNAPSHOT...\n. I will merge it to ensure people test the fix. Then, I'll push a new PR when I'll cut the new cas-server-security-filter release (v2.0.2).\n. I don't know SPNEGO, but I have a few questions / comments...\n. What a change! I will trust you on this.\n+1\n. +1 the RFC is the reference\nBTW, how did you find out that it should be written with an uppercase letter?\n. It should be Bearer to follow the RFC, but yes, it's a lot safer to do comparisons in lowercase.\nWhat problems do you still encounter?\n. OK. I see now. +1\n. Indeed, these changes are just comments for the Javadoc with Java 8. We should merge it now even without changing the default target: less work in the future...\n+1\n. Looks good to me even if I don't speak Polish.\n+1\n. No, this pull request only targets the master and thus the version 4.1.0. A new pull request must be sent to the 4.0.x branch for version 4.0.x. Be careful as the keys may be different between the versions...\n. +1\n. +1\n. +1\n. I'm not sure that we need to make the encoding filter customizable, but yes, we can move it to the top (even if it doesn't change anything here).\n. I see your point. I'm not against it, but not really convinced by it.\n+1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. +1\n. I don't understand this PR, I assume it's a misuse. Closing.\n. I don't understand this PR, I assume it's a misuse. Closing.\n. In fact, I find 3 occurences of this abstractConnectionPool bean: I guess all three should have this destroy method.\n. In fact, I find 3 occurences of this abstractConnectionPool bean: I guess all three should have this destroy method.\n. I liked the first solution with the star to load more than one extension, but you're right, it may lead to potential issues as it's a bit too general.\nWhy not having a classpath*:/META-INF/spring/extension/*.xml? It would work for all extensions and be limited enough to avoid conflicts.\nWhat do you think?\n. I liked the first solution with the star to load more than one extension, but you're right, it may lead to potential issues as it's a bit too general.\nWhy not having a classpath*:/META-INF/spring/extension/*.xml? It would work for all extensions and be limited enough to avoid conflicts.\nWhat do you think?\n. Indeed +1\n. Indeed +1\n. +1\nIt may be a false positive, but it seems that there is 1 failing check from Travis.\n. +1\nIt may be a false positive, but it seems that there is 1 failing check from Travis.\n. Really great! :+1:\nYou're the Hazelcast support maintainer now ;-)\n. Really great! :+1:\nYou're the Hazelcast support maintainer now ;-)\n. I'm not against it. At worst, it's a useless check.\n. I'm not against it. At worst, it's a useless check.\n. +1\n. +1\n. +1\n. +1\n. @mmoayyed : Thanks. I'm writing the reply to the message posted on the CAS mailing list\n. @mmoayyed : Thanks. I'm writing the reply to the message posted on the CAS mailing list\n. Done. +1\n. Done. +1\n. Just wondering if a solution could have been to mark logger as transient?\n. Just wondering if a solution could have been to mark logger as transient?\n. A few comments here and there but the pull looks good. I think more tests would confirm the good behaviour.\n. A few comments here and there but the pull looks good. I think more tests would confirm the good behaviour.\n. Yubikey seems to be a well-established solution for hardware OTP (like RSA SecurID). The code looks good.\nI'm +1, although I would appreciate another (committer's) feedback.\n. Yubikey seems to be a well-established solution for hardware OTP (like RSA SecurID). The code looks good.\nI'm +1, although I would appreciate another (committer's) feedback.\n. +1 with a few comments\n. +1 with a few comments\n. I think it's better, but I cannot reproduce the problem on Windows, nor on MacOS.\n. I think it's better, but I cannot reproduce the problem on Windows, nor on MacOS.\n. Why do we sign and encrypt tickets? Is encryption not enough?\n. Why do we sign and encrypt tickets? Is encryption not enough?\n. +1\nThanks for your patience\n. +1\nThanks for your patience\n. I'm in line, this is already what we are doing for CAS version x responses.\n+1\n. I'm in line, this is already what we are doing for CAS version x responses.\n+1\n. Restlet behaviour is pretty strange, the RequestParameterPolicyEnforcementFilter is just a regular filter.\n+1 for the solution\n. Restlet behaviour is pretty strange, the RequestParameterPolicyEnforcementFilter is just a regular filter.\n+1 for the solution\n. I'm not sure I will have time to review everything, I'll try to take a look at least.\nI'll make a test before the end of the week and let you know.\n. I'm not sure I will have time to review everything, I'll try to take a look at least.\nI'll make a test before the end of the week and let you know.\n. Wow! What a great job! You did that on your own?\nI just quickly did a few tests, it seems to work for most of the features I tested. A few comments:\n- Ant-pattern service definitions have disappeared on purpose, haven't they?\n- there is no text for the tooltip of the \"Evaluation Order\" field, just the key\n- when you check / uncheck the \"Require All Attributes\" box, I think that the \"Required Attributes\" zone should appear / disappear.\n- for the \"Authorized to release to credential password\" chekbox, where is the key to encrypt the password? In the \"Public Key Options\"?\n- what is the \"Authorized to release proxy granting ticket ID\" checkbox? Compared to \"Proxy Policy Options\"?\n- the explanation for the \"Attribute Filter Pattern\" input field should be improved.\n- the explanation for the \"Required Handlers\" textarea is not clear: \"Collection of ids\"?\n- it's not clear why I want to use the \"Public Key Options\"\n- even in \"Edit mode\", I have the success message: \"Service has been added successfully\" (I was expected: \"edited\") and it's a bit strange to stay on the \"Edit service\" page after a successful update\n- the default service \"http://localhost:8080/cas-management/login/cas\" does not make any sense\n- the \"Allow Single Sign-On\" checkbox should be selected by default\n- typing \"http://**\" in the \"Regex\" field for the \"Proxy Policy Options\" checked to \"Regex\", I have the unclear error: \"An error has occurred while attempting to save the service. Please try again later\" (logs are explanatory).\nIf we have a great UI, why would we move it out of the CAS project? I was in favor of dropping the UI if we could not maintain it, but as we have a great UI and as it heavily relies on the cas-server-core module, I think we should keep it in the CAS project.\n. Wow! What a great job! You did that on your own?\nI just quickly did a few tests, it seems to work for most of the features I tested. A few comments:\n- Ant-pattern service definitions have disappeared on purpose, haven't they?\n- there is no text for the tooltip of the \"Evaluation Order\" field, just the key\n- when you check / uncheck the \"Require All Attributes\" box, I think that the \"Required Attributes\" zone should appear / disappear.\n- for the \"Authorized to release to credential password\" chekbox, where is the key to encrypt the password? In the \"Public Key Options\"?\n- what is the \"Authorized to release proxy granting ticket ID\" checkbox? Compared to \"Proxy Policy Options\"?\n- the explanation for the \"Attribute Filter Pattern\" input field should be improved.\n- the explanation for the \"Required Handlers\" textarea is not clear: \"Collection of ids\"?\n- it's not clear why I want to use the \"Public Key Options\"\n- even in \"Edit mode\", I have the success message: \"Service has been added successfully\" (I was expected: \"edited\") and it's a bit strange to stay on the \"Edit service\" page after a successful update\n- the default service \"http://localhost:8080/cas-management/login/cas\" does not make any sense\n- the \"Allow Single Sign-On\" checkbox should be selected by default\n- typing \"http://**\" in the \"Regex\" field for the \"Proxy Policy Options\" checked to \"Regex\", I have the unclear error: \"An error has occurred while attempting to save the service. Please try again later\" (logs are explanatory).\nIf we have a great UI, why would we move it out of the CAS project? I was in favor of dropping the UI if we could not maintain it, but as we have a great UI and as it heavily relies on the cas-server-core module, I think we should keep it in the CAS project.\n. Wow! What a great job! You did that on your own?\nI just quickly did a few tests, it seems to work for most of the features I tested. A few comments:\n- Ant-pattern service definitions have disappeared on purpose, haven't they?\n- there is no text for the tooltip of the \"Evaluation Order\" field, just the key\n- when you check / uncheck the \"Require All Attributes\" box, I think that the \"Required Attributes\" zone should appear / disappear.\n- for the \"Authorized to release to credential password\" chekbox, where is the key to encrypt the password? In the \"Public Key Options\"?\n- what is the \"Authorized to release proxy granting ticket ID\" checkbox? Compared to \"Proxy Policy Options\"?\n- the explanation for the \"Attribute Filter Pattern\" input field should be improved.\n- the explanation for the \"Required Handlers\" textarea is not clear: \"Collection of ids\"?\n- it's not clear why I want to use the \"Public Key Options\"\n- even in \"Edit mode\", I have the success message: \"Service has been added successfully\" (I was expected: \"edited\") and it's a bit strange to stay on the \"Edit service\" page after a successful update\n- the default service \"http://localhost:8080/cas-management/login/cas\" does not make any sense\n- the \"Allow Single Sign-On\" checkbox should be selected by default\n- typing \"http://**\" in the \"Regex\" field for the \"Proxy Policy Options\" checked to \"Regex\", I have the unclear error: \"An error has occurred while attempting to save the service. Please try again later\" (logs are explanatory).\nIf we have a great UI, why would we move it out of the CAS project? I was in favor of dropping the UI if we could not maintain it, but as we have a great UI and as it heavily relies on the cas-server-core module, I think we should keep it in the CAS project.\n. OK. Forget my comment about the default service.\n. OK. Forget my comment about the default service.\n. Yes, great job!\n+1\n. Yes, great job!\n+1\n. +1 with a small comment\n. Interesting new version: the configuration becomes so easy!\n. Interesting new version: the configuration becomes so easy!\n. Theorically, it makes sense. But practically, it leads to very bad things. My OpenIdCredentialsAuthenticationHandler requires the CentralAuthenticationService which requires the authenticationManager which requires the OpenIdCredentialsAuthenticationHandler:\nCaused by: org.springframework.beans.factory.BeanCurrentlyInCreationException:\nError creating bean with name 'centralAuthenticationService':\nRequested bean is currently in creation: Is there an unresolvable circular reference?\n. So definitely reverting the use of centralAuthenticationService in the openIdHandler...\n. Yes, we could \"lazy-init\", but this must be set every time the centralAuthenticationService bean is used: fairly annoying!\n. Just updated the pull following Misagh's feedbacks.\n. I hope I will merge it tomorrow before I start the release.\n. Updated the documentation as well.\n. One more thing: do we plan to backport this change to the next 4.0.x ? I tend to say no as it's a marginal feature and the 4.1 release is coming soon.\n. +1\n. +1\n. I'm not very comfortable with this topic, I'll follow your opinion on this.\n. I'm not against updating dependencies, but I think it would have been better to do that before the RC2. We should do only bug fixes as we are now in the RC process.\nAnd it's not only dependency upgrades, there are some refactoring here and there (I'm not saying I'm against them) and some strange changes from my POV (public keyword removal).\n. Yes, for 4.2, I should definitely start reviewing PR after my first coffee ;-)\n. +1\nAlthough, I'd like that we relax a little bit on Javadoc.\n. What are the benefits here of having the OAuth or OpenID views in their module?\nEverything goes in the same module, right? But it adds one more step to the configuration process.\nDoes it worth the deal? I don't think so...\n. You're right, but adopters who already have OAuth configured needs an extra step when they upgrade: OAuth support will break.\nMaybe I was too negative on this, at least, it would improve the overall design.\n. Will review that carefully but at first glance, it seems such an improvment!\n. The build fails: a test does not pass anymore.\n. :+1: with a few comments...\nA great improvment for the CAS configuration!\n. Indeed, I have the issue on Windows and removed the empty lines at the end of the files as well: https://github.com/leleuj/cas/commit/ddcac8f61c5a249b519e394d7e3e23653e31fb9c\nEverything is ok with the fix.\n. The source code is fairly smart. Though, I'm not sure to understand what are the real use cases which would legitimate this extension. Moreover, the current endpoints are fixed in the protocol.\n. I get the idea and I'm in line to introduce JSON (maybe to eventually replace XML). If you change the current endpoint to return JSON instead of XML, in fact, you don't match any more the defined protocol spec people may read and implement. Wouldn't it be better to propose a new endpoint?\n. That makes sense, you raise good arguments. Adding a new endpoint is a huge work: getting agreement, updating the protocol spec, implementing it in the CAS servers and in the CAS clients... The \"experimental\" approach is appealing.\nBut, let's take the problem the other way: what will happen if every CAS server decides to add its own endpoint in JSON or YAML or Thrift (binary protocol)? Or different urls? With different attributes? It becomes a huge mess where the protocol does mean anything.\nAdding a new endpoint does not imply that a CAS server adds this endpoint immediately as the protocol has several versions and the CAS server may decide not to support the latest one.\nMaybe we should just turn your proposal into something more extensible. In a new protocol CAS v4, the endpoint may return other format or structure based on a provided parameter type (in your case, type=jsonformat). If the type is not supported, a \"400 bad request\" error is returned and should be properly handled by the CAS client.\n. Build fails because of checkstyle -> \"unused import\"...\n. +1 when the build will be fixed\n. +1\n. Very interesting approach to simplify SAML support activation. I should somehow be generalized to all our modules.\n+1 except that the branch has conflicts and cannot be merged automatically.\n. +1\n. Good catch Vincent!\n. +1\n. +1 I hope there won't be any side effect on the build\n. +1\n. I found the comments pretty useful...\n. You're right. Maintaining the documentation in two places is a bad idea.\n+1\n. The build has a troublesome error: cannot find symbol.\n. The build fails on the findbugs step.\n. A big +1. So much easier for configuration.\nI see a broken test on SAML in the build.\n. +1\n. +1\n. A too late +1, I assume the build passed\n. +1 with a main comment: shouldn't a response builder be a singleton?\n. +1 with a few comments\n. Made a few comments, it seems good to me.\n. For 4.1.x: https://github.com/Jasig/cas/pull/1184\n. For 4.0.x: https://github.com/Jasig/cas/pull/1185\n. I updated the PR according to latest comments: new property name, just a flag in the grant method and host/path comparison.\nOne thing remains: updating the UI. But I want to be sure we all agree on this before.\nAs it's a breaking change in the API, we won't be able to backport that for 4.0.x and 4.1.x so I propose to close: #1184 and #1185\n. Closed PR for 4.1.x and 4.0.x\n. Yes, validate we want a per-service configuration (breaking change) and not a general configuration (no breaking change), update the UI and the docs...\n. The build fails as the ResponseHeadersEnforcementFilter is not available yet.\nI completely missed: https://github.com/Jasig/cas-server-security-filter/pull/18\n+1\n. I'll be ok when the load testing will prove that performance are not compromised by the change (I'm thinking of the children tickets cleaning).\n. Sounds good news! Did you already performed benchmarks without the change? What were the maximum you reach?\n. Yes, the performance is not as good as currently, but the degradation is fairly limited.\nA big thanks to @mduszyk for his tenacity on this.\n:+1:\n. I was expecting less changed files for this \"small\" improvment. Were the previous PR on this topic merged?\n. Right, the previous PR was for 4.1.\n+1\n. There won't be any new 3.6.x. The next version will be the 4.2.0 and we already maintain two maintenance branches with 4.0.x and 4.1.x.\n. +1 with two comments\n. Looks good to me, a few comments here and there.\n. I assume it's the same PR than the one for 4.1?\n. :+1:\n. +1\n. +1 with a comment\n. And it starts quickly? No annotation scanning delay?\n. Thanks for the tip. I'll try to use run-forked. For the annotation scanning, I updated the web.xml to avoid the issue.\n. Yes, but I also added: metadata-complete=\"true\" in the web-app tag ;-) Magic...\n. It was not completely sure about the potential side effects, so I just added it my web.xml overlay.\n. Updated PR.\n. I updated the pull request according to all comments.\n. About the SAML client, I was a bit hesitating as they are many configuration options, but it could be done. Maybe we could another bunch of clients in a future pull request?\n. Cool! Will merge to move on to https://github.com/Jasig/cas/issues/1222\n. +1\n. +1 as it was already applied on 4.1\n. I'm in line to split services registry and tickets registry which may not be the same backends for deployers. For example, we use SQL for services registry and Memcached for tickets registry.\nThough, creating specific modules about monitoring feels a bit too much here.\n. I get the idea. I like small components, especially when they are separated. As these components are submodules of the same big Maven project, I'm for limiting their number though.\n. Yes, and more generally about the fact that many submodules (of the same Maven project) makes things harder: maybe I'm mistaken, but I think that even your IDE will be slower.\nAll components are tighly linked together, but maybe we should think about creating new projects (Maven projects) for ticket registries, services registries, authentication handlers, other extensions...\n. OK. Let's merge this pull request and try to improve the build. Do you expect a great improvment by removing the reporting plugins? Or should we already consider moving to gradle: I'll be happy to review what you have for that and have a build time comparison.\n. Indeed, the main concern is certainly the availability of the plugins in the Gradle world.\n. +1\n. Sure, I'll merge with the master. I still need to upgrade the security of the CAS management webapp. The SNAPSHOT versions will be replaced as soon as the releases are available.\n. @mmoayyed : I just updated this pull request after testing it for the management and server webapps. I think everything is ok and I'll finally update it when pac4j v1.8.1 and spring-webmvc-pac4j v1.0.1 will be released (next week I hope).\nIn the management webapp, you now have the same default security filters than in Spring Security. It's the securityHeaders name in the pac4j configuration in the securityContext.xml file:\n<constructor-arg name=\"authorizerName\" value=\"securityHeaders,csrfToken,RequireAnyRoleAuthorizer\" />\nNotice also the csrfToken name (it requires this PR on pac4j side: https://github.com/pac4j/pac4j/pull/381) for CSRF protection even if it has never really been used. Putting anything in the header works: https://github.com/Jasig/cas/pull/1232/files#diff-5686939dba410a452413671476543a80R15\nThe regular CSRF protection with AngularJS is to check these values against a cookie which has never been generated either (it is now thanks to the csrfToken name), but it is disabled. I guess it was a choice you made during the implementation.\n. Before doing a test, you need to review: https://github.com/pac4j/pac4j/pull/381 and I need to merge this pull request.\nThe RequireAnyRoleAuthorizer is made to check if the user has one of the defined roles. By default, in the pac4j configuration, you need to define a map of authorizers (a name and a class), but if you have only one authorizer, you can use the authorizer property and the name of the authorizer is the class name. That's what I used here, but the RequireAnyRoleAuthorizer is really configured to expect the roles defined in the property (ROLE_ADMIN by default): https://github.com/Jasig/cas/pull/1232/files#diff-f514b1542ea29bd6f908bda2b4e93916R27\n. Roles are computed by the authorizationGenerator attached to the client: https://github.com/Jasig/cas/pull/1232/files#diff-bee4d35d9a61279872b2ade2f0853a06R26\nThis can be switched for a from-LDAP roles loader for example: https://github.com/Jasig/cas/pull/1232/files#diff-99b06c77023e01089d9de416f28208c4R59\n. Sure, I will update the PR with the released versions of pac4j and spring-webmvc-pac4j, retest everything, update the documentation and ping you when I'm done.\n. @mmoayyed : I updated the PR to use the latest pac4j releases as well as the documentation and re-tested everything. It's ready for merge. \n. +1\n. +1\nBy \"faster\", you mean on Travis ? Because on my local computer, the build time (skipping tests) becomes 5min25s vs 5min35s (without this PR).\n. Sure. My test was biased.\n. Why no file is removed from the current cas-server-integration-ehcache module and moved to the new monitor one?\n. You're right: files are moved, not deleted.\n+1\n. +1\nI like the decoupled design where events are broadcasted and consumed somewhere else. I guess new pull requests are yet to come to consume these events.\n. +1\nIt seems so magic: adding a dependency and the logs are written asynchronously to provide better performance. What's the counterpart?\n. +1\n. +1 with a few comments\n. Great! I'm wondering if it was really necessary to remove all header files in addition to the NOTICE files. But as it's done, let's keep it that way. Did you check the legal aspects with the Apereo foundation?\n. I think so\n. +1\n. +1\n. When creating a new service, it was generating an error, right? I don't remember checking that.\nRegarding 3), it may explain: https://github.com/leleuj/cas-pac4j-oauth-demo/issues/21\n+1\n. +1\n. +1\n. +1 with a few comments\n. +1\n. The build failed, it may be relevant.\nSo a lof of new components are instantiated by default: is there a possible concern in terms of performance? How can I use this component? I still need to override existing Spring contexts to use these already instantiated components?\nI'm not sure to see the benefit.\nWhat about having aliases where the real bean is defined by a property? In that case, I could switch the authentication handler just by changing the value of a properties for example?\n. Regarding aliases, I'm using that in some projects at my company:\n<alias name=\"${myService}\" alias=\"myService\" />\nSo I can switch the service implementation using the myService property.\n. I'm not saying we must use aliases everywhere, but it pushed your logic to its full extent by configuring by properties as much as possible.\nI would use it at least for the authentication handler.\n. +1\n. We don't need the gradlew.bat and gradlew files in each module: it's cumbersome.\nFrom the root project: gradlew build builds everything while gradlew :module:build only builds the module named module.\nI suggest we improve the README or add some \"Build the CAS server\" documentation page on the new wiki to help people get used to Gradle with CAS.\n. +1\n. +1 with a few comments in addition to Misagh's ones.\n. I see: \"This branch has conflicts that must be resolved\".\n. I'm in line the \"spirit\" of this module. Though, I doubt CAS deployers will rebuild a new back office based on this support module ;-)\n. +1\n. Thanks\n. +1\n. It looks good to me. The build needs to be fixed\n. +1\n. +1 with a comment and a question: the ProxyTicket is distinguished from the ServiceTicket, but I don't see any direct benefit in this PR, I assume more changes are to come, aren't they?\n. +1 with a comment\n. +1 with a comment\n. A small comment, but a big :+1:  A good step towards clean design for the CAS core!\n. Hard to say if it fixes the problem. A test would help confirm the good behaviour.\n. Should we really use Integer.MAX_VALUE for the size of the field? It feels a bit too much. Do we have some sample size from a regular configuration? Just to say this example value ten times or something...\n. +1\n. The update to Java 8 is planned for version 4.3 (not this one, but the next one).\n. Too bad I was sleeping during this conversation, but JWT has been removed from the OAuth support (it will be used for OpenID Connect only).\n. It seems to have broken some test.\n. @frett @mmoayyed Sorry for the glitch. I forget the master was on pac4j SNAPSHOT, it has been replaced by the released version and there was a breaking change. Misagh has fixed the breaking change and I just replaced the SNAPSHOT version by the release. Daniel, if you merge with the master, the pull request should build successfully.\n. What would be the use case where you need your own mapper? Can we imagine having a list of mappers applied successively (to map new types)?\n. Your argument makes sense. Let's revisit the mappers later on if the need arises. Is the pull request ready for tests or is there some work remaining?\n. +1 for the update and to follow Misagh's comments to make things really customizable.\n. I haven't reviewed the pull request thoroughfully, but my main concern is multi-threading: I'm surprised to see a singleton component which collect all authentications for all users happening at the same time or not...\n. @mmoayyed : I think a global singleton won't work: you cannot collect all authentications from all users in the same place. But you're right: we don't store anything in the webflow, the authentication is saved into the TGT.\nI think like @dima767 : the authentication transaction is a per-user stateful object, it collects authentications, over HTTP requests.\nWhy not save this authentication transaction (which is somehow a superset of the authentications) in the TGT?\nBTW, the PR must be rebased with master.\n. I need more time to fully review things, but I see many new concepts: AuthenticationObjectsRepository,  AuthenticationTransactionManager, AuthenticationTransactionFactory: do we really need that \"complexity\"? Cannot we just use our AuthenticationContextBuilder which collects various authentications and be stored in the webflow?\n. I guess we iterate enough for the time being. We'll revisite the design if we feel the need later on. Rebase the PR with the master and go ahead with the merge.\n. :+1:\nIt's so good to see a CAS handler built on pac4j.\n. What a master plan!\nFor JWT, you will need some new TokenWrapperAuthenticationHandler (in cas-server-integration-\npac4j-core) and a CAS credentials which represents a simple String...\n. +1\n. You already did a lot: you submitted PR and reviewed mine. And we didn't change many things so I'm confident version 1.8.2 is ready for release and other improvments / bugs could go into a version 1.8.3.\nI really like the \"release often\" strategy.\nI'll do the release next Monday.\n. I just released pac4j v1.8.2. It will be available in the Maven central repository in a few hours...\n. I had in mind that basic auth would be a non-interactive action. I'm a bit surprised by the choice here.\n- a suggestion on using pac4j to extract credentials.\n. +1\nBTW, the build is broken, I'm not sure if it is related...\n. +1\n. Is it a backport of what we already have for 4.2?\n. +1\n. +1 with a comment\n. I think I get the idea, but does it really bring additionnal security? I can forge an access token with a TGT and a service identifier, cannot I?\nIf we want to go down that way, we should generate a JWT using the JWTGenerator from pac4j (with encryption and signature): the subject and attributes would come from the current authenticated user and the audience would be the service identifier.\nDoes it make more sense?\n. You cannot forge a TGT hopefully, but my point was that you can forge an access token by using an existing TGT and another service identifier than the one for which the TGT was delivered (as I can encode / decode base64 easily).\nI can only agree that the current implementation is not satisfactory.\nAfter my unsuccessful attempts to move on to a brand new OAuth / OpenId Connect implementation, I'm \"just\" going to improve our current implementation, starting by the use of JWT (see: https://github.com/Jasig/cas/issues/514#issuecomment-166110600).\nLet's merge this one for 4.2 not to loose your efforts and this improvment.\n. I think it would have been better with encryption, but I saw it has been already merged (I guess you prepare the release). So no problem, leave that security enforcement to JWT.\n. +1 with a comment\n. It looks very promising and it seems we could remove all implementations to have just this one and change the underlying storage...\n. +1 with a comment\n. +1\nThe build seems to report checkstyle issues.\n. +1\n. +1\n. Requires: https://github.com/pac4j/pac4j/pull/417\n. Updated the PR according to your feedbacks.\nThe build is strangely still failing on a missing pac4j JWT class which is already merged.\nBTW, I'm not sure I'll keep JWT for access tokens, but it feels better than the current solution: less source code by relying on pac4j and in all cases, JWT will be used in OpenID Connect.\n. From https://oss.sonatype.org/content/repositories/snapshots/org/pac4j/pac4j-jwt/1.8.3-SNAPSHOT/, downloading the latest sources jar. The \"missing\" class is there.\n. I restarted it several times and no less than a minute ago.\n. The build is broken, I'm fixing it...\n. Yes, I don't have time to investigate right now, so I disabled the tests temporarily, might be related to Java 8 though.\nI'll investigate that for the next PR on OAuth server support. But the build is so long...\n. This build is a nightmare:\nFAILURE: Build failed with an exception.\n* What went wrong:\nPermGen space\n. Thanks\n. I would say the opposite and have quotes around a text with spaces, but I'm not 100% sure.\n. Will review tomorrow\n. An incredible PR for a killer feature. I didn't review everything deeply, but it looks good. I'm looking forward to test it practically. I've been struggling to find an online SAML IdP for pac4j demos, it's a relief to have one inside the CAS server I can deploy in a couple of minutes.\n:+1:\n. Good to hear. +1\n. +1 with a comment\nI'm in line with @mmoayyed : it would be great to be self-sufficient on this.\n@kirill-vlasov : I think these results are brought by SonarQube: am I wrong?\nI had in mind that Sonar made checks using PMD, Findbugs and Checkstyle or are there any specific rules applied here?\n. +1\n. +1. The build fails because of a Checkstyle check. I believe more and more that our Checkstyle way is a bit too constraining (especially in the test classes).\n. We could keep the Checkstyle report for tests but stop blocking the build.\n. I agree, it's a trade-off to find. But I'm a bit doubtful about the value of the Checkstyle rules: does it prevent any bug to ban star import for example?\n. True and I have no better proposal actually.\n. Good catch.\n. +1\n. Looks good. See my comment...\n. +1\n. It seems a test is broken in the build.\n. Interesting refactoring. My feeling is that maybe we could have better names for the methods in the utility class.\n+1\n. The build \"nightmare\" restarts: I see a failing test on Hazelcast :-(\n+1 To be fixed on master as well?\n. A few comments here and there. SLO has become fairly complex. Looks good to me, but I fear some unexpected behaviours in real life. Some tests are broken in the build.\n. What's the risk implied by this pull request? I have the feeling that we only add HTTP calls and tickets deletion without changing the existing logic. Isn't that right?\n. Indeed, it pleads for a property to enable / disable this new behaviour.\n. +1 for the backport. Checktyle fails during the build.\n. Indeed, there is a problem: \"This branch has conflicts that must be resolved\". Are you sure you checkouted your branch from the master to submit a PR to the master?\n. I'm not sure. @mmoayyed : can we target a PR for documentation on branch 4.1.x?\n. I like the idea, I'm not fully convinced by the names. Could we have something more explicit like startTransactions, addTransaction and endTransactions?\n. I was not respectfully saying that names have not been properly devised. The attempt concept is something which has never been used before and which is not really clear not me. When I read attempt, I think: unfinished and maybe failed.\nThough, the idea here is when we have played all transactions, to finish the authentication process and generate an authentication context, right?\n. I like AuthenticationResult.\n. +1\n. I agree\n. +1 Looks like we need the same for pac4j ;-)\n. Thanks\n. :+1: huge cleaning. thanks\n. +1\n. +1\n. +1. The same pull request is expected for 4.2.x and master branches.\n@mmoayyed : the build seems broken on 4.1.x since: https://travis-ci.org/Jasig/cas/builds/102285723\n. Shouldn't these properties be added (yet commented) in the cas.properties file?\n. What happened so far if the warn or TGT cookie path is blank? It defaults to the context path of the CAS server, isn't it?\n. Very smart! +1\nIt gives me idea for pac4j on-the-fly configuration with Groovy.\n. I updated the pull request with automatic tickets delegator registration. It's ready for review and merge.\n. It's a re-foundation which should make future improvements a lot easier.\n. @frett : any concern with this pull request?\n. The AccessToken and OAuthCode don't need a hierarchical relationship between them, even if the access token is stronger in terms of security.  I will do what you propose and add an OAuthToken parent for both.\n. For the JpaTicketRegistry, there is indeed a problem in the OAuth tokens deletion. I kept the AccessTokenImpl to be a son of OAuthCodeImpl (like PT and ST) to make things easier, even if (as I said previously), the AccessToken is not a son of OAuthCode,  both are children of OAuthToken. OAuthToken,  OAuthCode and OAuthCodeImpl are now in the cas-server-support-oauth-core module which has become a dependency of the JpaTicketRegistry module. And deletion queries will be added.\n. For example, in the deleteSingleTicket method, the appropriate query is created according to the type of the ticket.\n. I just updated the pull request, taken into account @frett 's comments. See: https://github.com/Jasig/cas/pull/1463/files#diff-4bdbc0e2e88e2d337ea33f88245438a4R134 for the JpaTicketRegistry changes.\n. It's certainly feasible, but isn't it a bit too much here? What's the expected benefit to have a oauth-core-api module?\n. The cas-server-support-oauth-core only contains tokens interfaces and implementations. Things are enabled when using the cas-server-support-oauth module. So I think we don't have the problem here, do we?\n. Will merge to move to the next OAuth issue...\n. +1\n. +1\n. +1 Good job\n. +1\n. CAS will be more tied to log4j but deployers can switch to other logging frameworks. It looks good to me.\n. +1\n. As JWT support has been removed per #1425, OAuth tests should pass now. In the build, I see a problem with Checkstyle.\n. I think so, I don't think we have any better option. The change is huge, mostly around date time stuffs. It's better to move on, we'll fix problems in future pull requests (we're on the master and far away from the release date).\n. @mmoayyed : I just updated the pull request to use the Java 8 Optional feature.\n. There are failed tests which are not related to my changes and that I don't reproduce locally.\n. org.jasig.cas.authentication.FileTrustStoreSslSocketFactoryTests > verifyTrustStoreLoadingSuccessfullyWithCertAvailable2 FAILED\n    java.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n. OK. Good. So this pull request is ready for merge.\n. +1\n. +1\n. A few comments\n. +1\n. +1\n. Yep, I'm fairly happy with the final result.\n. About Checkstyle, it's fixed.\nI used to run: gradlew clean install and I was forced to add -DskipCheckstyle=true to avoid Checkstyle verification. Now, Checkstyle doesn't seem to be called by default and I need to call gradlew clean check.\n. +1\n. +1\n. Yes, the patch is ready, and most changes were innocuous. Though, I haven't been able to re-test it as service tickets seem to expire immediately in the latest CAS snapshot.\nThis won't be the latest pull request on the topic, I think we can merge it.\n. I use the: https://github.com/pac4j/play-pac4j-java-demo and the: https://github.com/leleuj/cas-pac4j-oauth-demo\nStart both: on locahost:9000, click on \"CAS\", you will be redirected to the OAuth server CAS (/cas2) for login and you should come back authenticated in the Play app.\n. +1 with a few comments\n. +1 with a few comments\n. The OAuth support on the master is now really different from the one in 4.2. So we don't need to cherry pick this commit. I'll review the code on master in the light of this issue though.\n. The build is fixed. I was fooled again by the gradlew clean install.\n. Any reason you submit this PR now?\n. OK +1\nThe documentation must be updated as well.\n. +1\n. About the front-channel SLO, we don't have multi-values parameters: it is just the relay state parameter. So there should be no problem with it.\n. OK. Thanks for the explanation. The fact the parameter is a single value does not prevent 2) as indeed, the relay state is the execution key in case of the front channel SLO (to be able to continue it after applications logouts). The solution only relies on server side configuration.\nAbout 1), I see your fix, it looks good. Though, I'm surprised: the appendQueryParameters is a method from DefaultFlowUrlHandler, isn't it? Why does not it handle parameters properly? Some bug referenced in Spring webflow?\n. +1\n. +1\n. I guess tests must be fixed as well as one fails now: verifyGrantServiceTicketWithNoCredsAndSsoFalse.\n. Updated documentation and names.\n. +1 PR expected for 4.2 and master as well.\n. +1\n. Yes, I'd prefer to merge it as soon as possible and fix glitches along the way than let you work endlessly after the master...\n. +1\n. +1\n. Excellent! :+1:\nThis is exactly what we need to make configuration and upgrades easy.\n. +1\n. +1\n. Yes. Merging...\n. I missed the change, but the context wrapper (https://github.com/Jasig/cas/blob/master/cas-server-support-oauth/src/main/java/org/jasig/cas/OAuthApplicationContextWrapper.java) does not declare the endpoints any more, so @Component must now be @Controller. @mmoayyed : when did the endpoints stop to be declared in the context wrapper?\n. Exactly what I imagine, mainly based on the OAuth support. A few questions, but it looks good to me...\n. About your questions:\n1) The JwtGenerator produces tokens and the JwtAuthenticator validates them\nretrieving the user profile, I think this is the use case of OpenID Connect\n2) You can define if you want or not to sign JWT:\nhttps://github.com/pac4j/pac4j/blob/master/pac4j-jwt/src/main/java/org/pac4j/jwt/profile/JwtGenerator.java#L49\n3) Sure, OIDC brings more claims, but it would still work the pac4j module\n4) Yes, indeed, no support for JWKS, but it could be added\nThere is also this improvement: https://github.com/pac4j/pac4j/issues/454\nMy feeling is that we could address everything but certainly with a big\nupgrade of the pac4j-jwt module. And I perfectly understand you don't want\nto deal with that just for OIDC...\n2016-05-04 16:42 GMT+02:00 Misagh Moayyed notifications@github.com:\n\nThanks for the review. I'll start to review the JWT module here shortly\nand see how it might work.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1733#issuecomment-216886494\n. Indeed, encryption is optional in pac4j. I think we could tackle that for 1.9.1 and upgrade CAS afterwards. Feel free to open the necessary issues.\n. +1\n. Great improvement! +1\n. @mmoayyed : I have received a lot of emails from \"Codacy Bot\" for this PR: is it normal, as I'm not the author of the PR?\n. A great work, but I think we need to fix the issue I mentioned before the merge (and wait for the version 1.9.1 of pac4j).\n. I'll do the releases at the beginning of next week.\n. I released pac4j v1.9.1 and spring-webmvc-pac4j v1.1.1: you can safely upgrade to these ones. Notice that the signature of the validate  method of the Authenticator class has changed.\n. Accounted for @mmoayyed 's comments\n. Yes, I forgot both. I'll submit a new PR for that.\n. I read the previous discussion but I'm not sure to understand the current changes proposed in this PR if it's about validating access tokens. I agree about the resource server needing to validate the access token, but this already exists with the /oauth2.0/profile endpojnt: if the access token is valid, the user profile is returned; otherwiser, an error.\n. On the access tokens, one interesting improvement would be to generate JWT for the access tokens to remove the need to call the authorization server to validate them.\n. It might be me, but your post is not fully clear to me. The /oauth2.0/profile profile is a CAS existing mechanism, why do you want to use a service ticket?\n. @mmoayyed I agree.\n. In fact, there are some breaking changes brought by pac4j v1.9.2 for CAS 5.0.0. So people won't be able to upgrade to pac4j 1.9.2 if CAS 5.0.0 stays on pac4j 1.9.1.\n\nThough, it could be a CAS 5.0.1.\n. No configuration change is required, this is indeed mostly internal components.\n. Unfortunately, there will be breaking changes. Even if you don't change the Stormpath configuration (cas.authn.stormpath.*), using the pac4j-stormpath v1.9.2 dependency with the cas-server-support-stormpath v5.0.0 dependency would break (unless you merge this PR). And some other cases.\n. Given the issues with RC2, it's maybe not too late to merge this PR before releasing again RC3.\n. Everything is ok, except the error handling with SWF where I get a blank page.\n. You need this PR and the demo: https://github.com/leleuj/cas-pac4j-oauth-demo which is already configured to fail for Facebook ;-)\n. You merged before I pushed the change with the SAMLConstant, but anyway, this is a detail.\n. I'll let you handle the adjustments then.\nAbout point 1., handling error codes is the responsibility of the client so I don't think you should refactor things here.\n. Very impressive! But I haven't found the guava dependency to be removed from any module, we still need it, don't we?\n:+1:\n. We can plan the 1.9.6 release for the end of February if it's not too late for CAS 5.0.x.. We can plan the 1.9.6 release for the end of February if it's not too late for CAS 5.0.x.. No problem, I'll cut the 1.9.6 release sooner. Ping me if I forget.. No problem, I'll cut the 1.9.6 release sooner. Ping me if I forget.. I just released pac4j v1.9.6. It should be available in the Maven Central repository within a few hours.. I'm certainly wrong on this, but I would have expected to see more of this logic inside pac4j and not CAS.\nThe idea here is to receive a SAML logout request and trigger the CAS logout process, right?\nIn pac4j, the callback endpoint (the login URL in CAS) receives credentials to finish a login process, but it should also be able to receive logout requests and handle them (this is what is done by the CasClient). And finally, the question should only be how to turn this pac4j internal event into a CAS logout process (maybe with a specific CasProfileManager).. Let me rephrase it to be sure: so it's not a matter of receiving a SAML logout request in CAS, but of generating a SAML logout request in CAS to send to the IdP, right?\nAt the end of the delegated authentication, we get a pac4j profile we turn into a CAS authentication.\nCouldn't we turn back the CAS authentication (which stills exists) into a pac4j profile and pass it to the getLogoutAction method?\n. The relationship between the pac4j profile and the CAS principal is fairly straightforward:\nCAS username = pac4j id, CAS attributes = pac4j attributes\nSo I think it would be easier (and more powerful) to recreate the pac4j profile from the CAS principal. Use the restoreOrBuildProfile method: https://github.com/pac4j/pac4j/blob/master/pac4j-core/src/main/java/org/pac4j/core/profile/ProfileHelper.java#L53\nBecause it will recreate the appropriate pac4j profile type.\n. I think it's cleaner now. But check my comment, I have a doubt with the authentication attributes versus the principal attributes.\nAfter a delegated authentication, by default, the principal has a \"typedId\", something like: org.pac4j.oauth.profile.FacebookProfile#454664465  which allows the ProfileHelper to rebuild the right profile, so I think you should be able to get a SAML2Profile...\n. You spotted an issue when we added the \"authentication attributes\" concept, there are not considered when rebuilding the profile via ProfileHelper. restoreOrBuildProfile.\nThese are two different collections, so you can't merge both and expect things to properly work.\nThe solution is to enhance the restoreOrBuildProfile method to handle authentication attributes (it should not be a big work): https://github.com/pac4j/pac4j/issues/1103 both in master and the 2.2.x branch (which we should upgrade to 2.3.0). Please keep in mind to stay backward compatible for the 2.2.x branch, so we must keep the old method as well as add a new one.\n. You're welcome. The build was broken, but it didn't seem to be related.\n. Wow! That was fast. I just opened a PR for the master also.... Closing. The issue has already been fixed.. This looks good to me, although I haven't made any deep testing.. @cifren what's the status of this PR (and the one for the master)? I guess you just miss some dependencies to make the build pass. Did you test it?\n. Excellent! Keep me posted if you need some additional help with testing.. It depends a bit on the changes: for limited changes, I generally copy/paste the CAS classes in my overlay to change them and test things quickly. Then, I copy the changes into the CAS sources. It seems it's what you do.\nOr for more global changes, I make the changes in the CAS source code, rebuild and install only the necessary modules, rebuild my overlay (based on the related SNAPSHOT) and test the changes.\n. By \"rebuild and install\", I mean \"./gradlew clean build install -p module\", with \"-p\" to just build a module and not the whole project which takes too much time.\nSo here is the process for big changes (like this one):\n1) rebuild the CAS source, only the necessary modules\n2) rebuild the CAS overlay pointing to the SNAPSHOT source version\n3) run the CAS overlay and test.\nIs it clear now?\n. Your test should go further than just \"the compilation worked\", but I guess you test the change in some CAS overlay, don't you?. This looks good to me.\n@mmoayyed is this ok for you or do you want me to do an additional test?\n@cifren are the changes for the master branch ready as well?\n. @mmoayyed Sure, I'll do that on Friday. I'll certainly cut the pac4j v3 release as well, I know you were expecting it very soon...\n. @mmoayyed I have no issue to cut a RC2. We have had a few changes on SAML, Twitter... I can release the RC2 tomorrow: is this ok for you?\n@cifren you should have a \"Reopen and comment\" button at the bottom of the page...\n. @cifren the PR has been automatically closed due to inactivity, are you still working on this?. Indeed, there is an issue with using the getRedirectAction(ctx).getLocation() method. With pac4j, you should use the redirect(ctx) method: https://github.com/pac4j/pac4j/blob/master/pac4j-core/src/main/java/org/pac4j/core/client/IndirectClient.java#L73 which should perform the right operation on the web context. But this should happen in a second time...\nTo avoid that, your solution seems to work, even if I find it a bit fragile...\n. @mmoayyed I guess this upgrade is not planned for v5.3 but for v5.4 at best?. Thanks. Indeed, it's a major change and should certainly go into the v6.. A few comments on this:\n\nmore generally, this problem will be solved using pac4j v3 (not yet released) where the client_name can now be an URL parameter or a path suffix; unfortunately, this won't work in CAS except if we create a new callback endpoint path\nit took me quite some time to understand your solution: grab the Oidc state, save it into session for all Oidc clients, when called back, check the state from the session, get the states from the session, retrieve the right Oidc client... Maybe you could do something easier: override the OidcRedirectActionBuilder class and generate a state which is the client name, set it to all OidClient, when called back, check the state from the session to get the client_name...\n. Indeed, pushing the client_name in the state parameter weakens the security as this parameter is not expected to be static, but a dynamic value.\n. Apart from the source code and @mmoayyed 's comment, the use case seems valid to me.\n\nYou should also sync the PR with the master.\n. @luis100 I just merged your pac4j changes.... I'm not sure why you want to keep the state parameter, but in the pac4j spirit, it should go into the authentication attributes of the user profile.. +1\nThis one was more straightforward than this: https://github.com/apereo/cas/pull/3293\n. @sbearcsiro @mmoayyed does it make sense to backport it on the 5.2.x branch?. Thanks for the backport. I don't see a reason why we would keep the QueryParameterCallbackUrlResolver for Azure (it simply doesn't work), so we should use by default the PathParameterCallbackUrlResolver for Azure in pac4j. This way, you could remove the CAS usePathBasedCallbackUrl property.\n. What do you think: https://github.com/pac4j/pac4j/pull/1166?. Thanks for your contribution. Sure. I'm on it. Don't merge this one until I'm done for the 5.3.x and master branches.\nI'm testing it with MFA enabled and while it works for the 5.2.x branch, it doesn't with the 5.3.x branch. I'm investigating... I may finally change this PR into another solution...\n. In fact, it doesn't come from my code. The version 5.3.4-SNAPSHOT has already the problem if you enable the authentication delegation and MFA.\nHere is the stack trace:\njava\n2018-09-14 12:24:20,633 ERROR [org.springframework.boot.web.support.ErrorPageFilter] - <Forwarding to error page from request [/login] due to exception [No transition was matched on the event(s) signaled by the [1] action(s) that executed in this action state 'mfaInitialize' of flow 'mfa-gauth'; transitions must be defined to handle action result outcomes -- possible flow configuration error? Note: the eventIds signaled were: 'array<String>['error']', while the supported set of transitional criteria for this action state is 'array<TransitionCriteria>[success]']>\norg.springframework.webflow.engine.NoMatchingTransitionException: No transition was matched on the event(s) signaled by the [1] action(s) that executed in this action state 'mfaInitialize' of flow 'mfa-gauth'; transitions must be defined to handle action result outcomes -- possible flow configuration error? Note: the eventIds signaled were: 'array<String>['error']', while the supported set of transitional criteria for this action state is 'array<TransitionCriteria>[success]'\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:137) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\nThe MfaInitializeAction is a new class added in v5.3.4, by @tsschmidt I guess... I don't have the issue in version 5.3.3.\n. @tsschmidt \nTo reproduce the issue, for example use this demo: https://github.com/casinthecloud/cas-pac4j-oauth-demo (master branch).\nUpgrade the version to 5.3.4-SNAPSHOT and add the cas-server-support-gauth dependency in the pom.xml file.\nDefine Google Auth as the global provider: cas.authn.mfa.globalProviderId: mfa-gauth in the application.yml file.\nBuild and run in Tomcat: http://localhost:8080/cas.\nChoose Twitter as the authentication delegation, log in with Twitter, install the Google Authenticator app on your mobile, then register in Google Auth and finally fill in the Google Auth token.\n. Yes, exactly, except that I use Twitter instead of another CAS server and Google Authenticator instead of Duo.. I just tested #3521 and it's better, but I still have an issue. The provider is properly chosen in the MfaInitialiazAction, but I have this exception:\njava\n2018-09-14 16:32:13,687 DEBUG [org.springframework.webflow.engine.ActionState] - <Entering state 'initializeLoginForm' of flow 'mfa-gauth'>\n2018-09-14 16:32:13,688 DEBUG [org.springframework.webflow.engine.ActionState] - <Entering state 'mfaInitialize' of flow 'mfa-gauth'>\n2018-09-14 16:32:22,641 DEBUG [org.springframework.webflow.engine.ActionState] - <Entering state 'accountRegistrationCheck' of flow 'mfa-gauth'>\n2018-09-14 16:32:22,678 DEBUG [org.springframework.webflow.engine.ViewState] - <Entering state 'viewRegistration' of flow 'mfa-gauth'>\n2018-09-14 16:32:22,738 ERROR [org.springframework.boot.web.support.ErrorPageFilter] - <Forwarding to error page from request [/login] due to exception [Exception thrown in state 'viewRegistration' of flow 'mfa-gauth']>\norg.springframework.webflow.execution.FlowExecutionException: Exception thrown in state 'viewRegistration' of flow 'mfa-gauth'\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.wrap(FlowExecutionImpl.java:573) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:227) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:139) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_131]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_131]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_131]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_131]\n    at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:216) ~[spring-core-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:470) ~[spring-cloud-context-1.3.0.RELEASE.jar:1.3.0.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at com.sun.proxy.$Proxy177.launchExecution(Unknown Source) ~[?:?]\n    at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:264) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:967) ~[spring-webmvc-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:901) ~[spring-webmvc-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) ~[spring-webmvc-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:622) ~[servlet-api.jar:?]\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[servlet-api.jar:?]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-websocket.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apereo.cas.web.support.AuthenticationCredentialsThreadLocalBinderClearingFilter.doFilter(AuthenticationCredentialsThreadLocalBinderClearingFilter.java:30) ~[cas-server-core-web-api-5.3.4-SNAPSHOT.jar:5.3.4-SNAPSHOT]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apereo.cas.security.RequestParameterPolicyEnforcementFilter.doFilter(RequestParameterPolicyEnforcementFilter.java:261) ~[cas-server-security-filter-2.0.10.2.jar:2.0.10.2]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apereo.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:237) ~[cas-server-security-filter-2.0.10.2.jar:2.0.10.2]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apereo.cas.security.AddResponseHeadersFilter.doFilter(AddResponseHeadersFilter.java:94) ~[cas-server-security-filter-2.0.10.2.jar:2.0.10.2]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:111) ~[spring-boot-actuator-1.5.14.RELEASE.jar:1.5.14.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apereo.cas.logging.web.ThreadContextMDCServletFilter.doFilter(ThreadContextMDCServletFilter.java:91) ~[cas-server-core-logging-5.3.4-SNAPSHOT.jar:5.3.4-SNAPSHOT]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) ~[spring-boot-actuator-1.5.14.RELEASE.jar:1.5.14.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:130) ~[spring-boot-1.5.14.RELEASE.jar:1.5.14.RELEASE]\n    at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:66) ~[spring-boot-1.5.14.RELEASE.jar:1.5.14.RELEASE]\n    at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:105) ~[spring-boot-1.5.14.RELEASE.jar:1.5.14.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.18.RELEASE.jar:4.3.18.RELEASE]\n    at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:123) ~[spring-boot-1.5.14.RELEASE.jar:1.5.14.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apereo.inspektr.common.web.ClientInfoThreadLocalFilter.doFilter(ClientInfoThreadLocalFilter.java:66) ~[inspektr-common-1.8.3.GA.jar:1.8.3.GA]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apache.logging.log4j.web.Log4jServletFilter.doFilter(Log4jServletFilter.java:71) ~[log4j-web-2.11.0.jar:2.11.0]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:212) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:141) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:616) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) ~[catalina.jar:8.0.39]\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:509) ~[catalina.jar:8.0.39]\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1104) ~[tomcat-coyote.jar:8.0.39]\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:684) ~[tomcat-coyote.jar:8.0.39]\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1520) ~[tomcat-coyote.jar:8.0.39]\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1476) ~[tomcat-coyote.jar:8.0.39]\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) ~[?:1.8.0_131]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) ~[?:1.8.0_131]\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:8.0.39]\n    at java.lang.Thread.run(Thread.java:748) [?:1.8.0_131]\nCaused by: org.apereo.spring.webflow.plugin.ClientFlowExecutionRepositoryException: Error encoding flow execution\n    at org.apereo.spring.webflow.plugin.ClientFlowExecutionRepository.getKey(ClientFlowExecutionRepository.java:114) ~[spring-webflow-client-repo-1.0.3.jar:1.0.3]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.assignKey(FlowExecutionImpl.java:419) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.assignFlowExecutionKey(RequestControlContextImpl.java:193) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ViewState.doEnter(ViewState.java:170) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.start(Flow.java:527) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.start(RequestControlContextImpl.java:234) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.SubflowState.doEnter(SubflowState.java:101) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.start(Flow.java:527) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:223) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    ... 91 more\nCaused by: java.io.NotSerializableException: org.springframework.cloud.context.scope.refresh.RefreshScope\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1184) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1378) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) ~[?:1.8.0_131]\n    at java.util.HashMap.internalWriteEntries(HashMap.java:1785) ~[?:1.8.0_131]\n    at java.util.HashMap.writeObject(HashMap.java:1362) ~[?:1.8.0_131]\n    at sun.reflect.GeneratedMethodAccessor189.invoke(Unknown Source) ~[?:?]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_131]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_131]\n    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1028) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteObject(ObjectOutputStream.java:441) ~[?:1.8.0_131]\n    at org.springframework.webflow.core.collection.LocalAttributeMap.writeObject(LocalAttributeMap.java:333) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_131]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_131]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_131]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_131]\n    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1028) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) ~[?:1.8.0_131]\n    at org.springframework.webflow.engine.impl.FlowSessionImpl.writeExternal(FlowSessionImpl.java:162) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at java.io.ObjectOutputStream.writeExternalData(ObjectOutputStream.java:1459) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1430) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) ~[?:1.8.0_131]\n    at java.util.LinkedList.writeObject(LinkedList.java:1131) ~[?:1.8.0_131]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_131]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_131]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_131]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_131]\n    at java.io.ObjectStreamClass.invokeWriteObject(ObjectStreamClass.java:1028) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1496) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) ~[?:1.8.0_131]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.writeExternal(FlowExecutionImpl.java:311) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at java.io.ObjectOutputStream.writeExternalData(ObjectOutputStream.java:1459) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1430) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[?:1.8.0_131]\n    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348) ~[?:1.8.0_131]\n    at org.apereo.spring.webflow.plugin.EncryptedTranscoder.encode(EncryptedTranscoder.java:89) ~[spring-webflow-client-repo-1.0.3.jar:1.0.3]\n    at org.apereo.spring.webflow.plugin.ClientFlowExecutionRepository.getKey(ClientFlowExecutionRepository.java:112) ~[spring-webflow-client-repo-1.0.3.jar:1.0.3]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.assignKey(FlowExecutionImpl.java:419) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.assignFlowExecutionKey(RequestControlContextImpl.java:193) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ViewState.doEnter(ViewState.java:170) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.start(Flow.java:527) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.start(RequestControlContextImpl.java:234) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.SubflowState.doEnter(SubflowState.java:101) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Transition.execute(Transition.java:228) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.State.enter(State.java:194) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.Flow.start(Flow.java:527) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:223) ~[spring-webflow-2.5.0.RELEASE.jar:2.5.0.RELEASE]\n    ... 91 more. Yes, indeed. Will do some debugging to get more details.... It seems that the culprit is: googleBypassEvaluator if that helps... (I put a breakpoint where the exception occurs). I'll re-test your fix.. I'm trying to test your changes, but my local build failed because of:\njava\n[WARNING] The POM for net.unicon.iam:duo-java:jar:1.1 is missing, no dependency information available\n[WARNING] The POM for net.unicon.iam:duo-client:jar:0.2.2 is missing, no dependency information available\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n@mmoayyed is something wrong with the Unicon dependencies?\n. Sorry for my late reply. I confirm it works. And indeed, I will now be able to test my changes.. We're good for the 5.3.x branch: https://github.com/apereo/cas/pull/3538\nMoving on to the master branch...\n. @mmoayyed A pull request is available for the master branch as well: https://github.com/apereo/cas/pull/3539\nI renamed all PR titles to remove the \"WIP:\". As advised, it has been tested with MFA enabled.\n. @mmoayyed Merging as well as other PRs for the 5.3.x and master branches.... Oops! It seems I'm out of sync with master, will re-sync before merging.... Synced. Waiting for the build to pass.... Out-of-sync again. Waiting for the build to pass (again).... It looks good to me. Nonetheless, the tests seem broken: https://travis-ci.org/apereo/cas/jobs/432203228. Port forward: https://github.com/apereo/cas/pull/3595\n@mmoayyed I accounted for your comments. I also removed the non-working inflatemethod to use the decodeByteArrayToString method instead (renamed as inflate as it was really an inflation operation).\n. Shouldn't we rely on the bypassApproval property as well?\n. Ah OK. Perfect!. It seemed so at first: we could change the response type to CloseableHttpResponse to be able to close it.\nBut the built statement from the @Cleanup annotation would not include a try/catch around the close method call in addition to the general try/catch (which is what HttpUtils.close does).\nSo I'd prefer to keep the current implementation.\n. Yes, good point. As soon as the profile is in the session, it will be reused keeping its existing attributes.\nThere is a security concern here (the second scenario you mention) if you can get more attributes than the service is allowed to.\nI remember creating a DirectCasClient which has the same behavior as the CasClient but without keeping the profile in session. It's used somewhere else and at first, I thought we should use it here also. Yet, I fear it may break things (especially this one: DelegatedAuthenticationSAML2ClientLogoutAction although I doubt it works well in a clustered environment).\nYour solution looks to be a good one: attach the user profile to the client_id and reuse it only for the same client_id. It must be tested in depth though.\n. @gagarski About the DirectCasClient, it will do the same thing as the CasClient: redirect the unauthenticated user for login and finish the login process on the callback URL. The only difference is that it won't store the profile into the web session, only in the HTTP request.. Yes, returning complex types through the validation endpoint has always been a difficult problem. We have the JSON format on this endpoint since a few versions and it's better, but it's not the ultimate solution as I remember doing some customizations for a client not a long time ago.\nBut I think we could consider your proposal apart from this. For me, it's not controversial, it's smart. The OAuth, OIDC and SAML protocol supports are built with facades delegating the authentication to the CAS server and eventually retrieving it. Sending an HTTP request between the CAS server and itself to get the user identity is fairly inefficient.\nSo I fully agree with your proposal (it will work for OAuth and OIDC) and we should do it for SAML as well (in the SSOSamlProfileCallbackHandlerController class). Let's target the master for this change.\n. The SAML support has the same issue as the OAuth/OpenID Connect support: it relies on the CAS service ticket validation to pass the user profile from the CAS server to the protocol facade. Then, yes, in the case of the SAML support, the attributes are sent in an XML format.. Here is the webapp I use to test the change password (I tested the reset password on a customer implementation): https://github.com/casinthecloud/cas-overlay-demo/tree/pm-53x\nLogin/pwd to use: jleleu/jleleu\n GitHubcasinthecloud/cas-overlay-demoCAS server demo using the Maven overlay. Contribute to casinthecloud/cas-overlay-demo development by creating an account on GitHub.\n. @mmoayyed Thanks for merging. Let's remain vigilant on this change. If ever someone complains about the password management feature, put me in the loop.... @gagarski did you make some try with the SAML support as well? Thanks. Yes, it should be enough (like for OAuth), you don't even bother in that case to wonder how the data were passed... Of course, testing is always necessary.... I definitely think we have two topics here: the internal communication which works if I understand things correctly and this is the topic of this PR. And serialization issues which should be addressed in a new PR.... The tests are fixed and I was forced to upgrade to the new v3.6.1 release (which fixes an issue on the Google OAuth 2 support).\n. Thanks for reporting. I saw the issue but didn't get time to fix it... I'll check that as soon as possible.... 2. In fact, all providers use the QueryParameterCallbackUrlResolver (/login?client_name=X) except the Azure provider which uses the PathParameterCallbackUrlResolver (/login/X)\nSo other providers are not affected by this change.\nSo +1 on this. You're right, it should be \"error()\". I'll change it.\n. You're right, it can work with a query string starting with \"&\", but it's cleaner to respect the format : \"?name1=value1&name2&value2\"...\n. That's a good remark. Is a provider determined uniquely by its type ? I would say yes, but I'll have to think about it...\n. In fact, we can consider these constants at the application level and move them to OAuthConstants. But these constants are for the profile so I staid close to what I did in ScribeUP and attached them to the profile : it's very subtle... It could be changed but I prefer to keep things that way.\n. That's exactly what I thought at first, but I checked the OAuth 2.0 spec and as it wasn't clear, I asked the question on the mailing list and they told me the response should be HTTP 200 and in no case, a redirection until the clientId and its associated defined callback url has been verified : http://www.ietf.org/mail-archive/web/oauth/current/msg09519.html.\n. OK for the constant. But I couldn't find the constant in cas-server-core except in SimpleWebApplicationServiceImpl class but as a private one.\nI could make it public and use it but there might be a reason ?\nI'd prefer to use a constant in OAuthConstants. What do you think ?\n. About code conventions, last update is \"Mar 13, 2005\" and it talks about commons logging : it looks very old, is it still valid ?\n. OK. I got it now.\nI like the else statement for readability, I'd say the same for the use of StringBuilder.\nDo you really prefer this code ? I'm doubtful about this :\nStringBuilder sb = new StringBuilder();\n    sb.append(url);\n    if (url.indexOf(\"?\") >= 0) {\n        sb.append(\"&\");\n    } else {\n        sb.append(\"?\");\n    }\n    sb.append(name);\n    sb.append(\"=\");\n    sb.append(OAuthEncoder.encode(value));\n    return sb.toString();\n. You're right. I added the missing constant in OAuthConstants as a first step.\nBut I also created CAS-1145. You can jump on this right now or I'll work on it as soon as possible.\n. but the logger is private, so only available in the current class...\n. I'm still not convinced. Harder to read than my first version even if faster to execute. Can we have an arbiter on this ?\n. Do you want me to add the final keyword before all method parameters they require it ?!\n. Thanks for the advice Misagh.\nI'm a great supporter of using final keyword for class or method as it clearly means : \"do not inherit or override\",  and forbids bad usages.\nFor parameters, when using the final keyword, you cannot change the reference of the object, but you can still use the setters and change the value of the object. So I find it pretty useless and verbose for parameters.\nThat said, I feel alone on this point, I can add (let Eclipse add) the missing finals...\n. I owe you an explanation on this.\nAt ScribeUP level (web OAuth authentication and user profile retrieval), unicity of a provider depends on its type but also on its configuration (client id, client secret, callback url). So I wont' considere adding equals / hash methods only based on type and I'd rather keep the explicit check on type (as it's a simplification I choose in CAS OAuth module).\n. New commit with missing final keyword !\n. Is there some kind of formatting problem here to make the whole file appears different ?\n. Shouldn't it be contains instead of equals ? Though, I'm not sure to understand what means this second check ?\nI'm certainly missing something but I don't the see the use of the two constants : DEFAULT_USERNAME_ATTRIBUTE and DEFAULT_OPAQUE_USERNAME_ATTRIBUTE.\nI would expect the following behaviour :\n- isAnonymousAccess -> principalId = generate id\n- getUsernameAttribute() = null -> principalId = principal.getId()\n- ignoreAttributes OR allowedAttributes contains getUsernameAttribute() -> principalId = the value of the getUsernameAttribute() attribute\n. Again, I'm not sure to understand why you don't use null as the default username attribute and get rid of the constant ? Less code...\n. Some javadoc to update here...\n. I get it now and I don't see a better solution handling UI concern.\nI don't see any new test in the pull request, I think such a major change deserves it : can you add some test(s) to verify the behaviour with username set to :\n- null\n- \"(default)\"\n- a real attribute name ?\n. It's a bit messy but I didn't find any better solution so far. You have :\nservice.name = oauth.clientId\nservce.description = oauth.secret\nservice.theme = oauth.displayName\nI just added the last one for the confirmation screen. So I kept previous ones \"as is\" for some backward compatibility.\nMoreover, I don't think that there is really better mapping.\n. You're right, will change it.\n. Not sure to understand, what should be final ?\n. Sorry, I did the merge so I'm guilty also on this.\nI thought everything was ok as Misagh has replied to all our comments and as I didn't see any new comment from you Scott.\nOne test is still failing though, Misagh has found the problem and will commit a fix very soon.\nWhat's the design issue remaing ? I'm a bit lost with all comments...\n. It should be authorizationUrl with i... Do you really test it ? ;-)\n. As the \"text\" string is computed for output (see the \"return\" below), I think it's easier / better to log it directly.\n. Makes sense, I will adjust it.\n. - final on input parameter\n- remove blank line\n. The maven-javadoc-plugin is defined in version 2.8 in jasig-parent pom but your remark was relevant, the maven-source-plugin version is only defined in a specific profile in the oss-parent pom.\nI will add the version for both plugins to avoid problems.\n. In fact, no. These values should never be null. I will remove the check.\n. I will change my Eclipse configuration to avoid these minor issues ;-)\nAnd \"return this.providers\"...\n. Shouldn't it be setFollowServiceRedirects(true) to test that the service is not found in services registry and therefore there is no redirection ?\n. why not keep a log.info ?\n. Yes, it's a good idea : \"management\" may be confusing.\n. Good remark : I don't know in fact, I'll check... except if someone give me the answer before...\n. Totally in line with you, but I will do that in a future pull request as Id' like to frame my work in 4 pull requests just to simplifiy tchats and feedbacks.\nI sent an email proposing that : https://lists.wisc.edu/read/archive?id=18683349\n. Yes, it's finally a more global feedback : I should do that wherever \"management\" is mentioned.\n. Just for my information : the clearpass extension uses EHCache to store passwords ?\n. Right, I'll check, but I think we don't need...\n. Once again, it's certainly useless. I'll check...\n. Yes, now it's a copy of the CAS server default theme, but I imagine that deployers might want to customize the look & feel of the services management UI.\nAnd using theme is a proper way to do that, isn't it ?\n. You mean the theme properties ? Why not keeping the theme concept for UI customization ?\nHowever, I plan to clean CS / JS / images in a third pull request for CAS-1183 : https://issues.jasig.org/browse/CAS-1183?focusedCommentId=27671&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-27671\n. Right, I'll fix that.\n. Agreed, but I want to avoid an overcomplex pull request trying to do everything in just one step. So I plan to clean properties in a third pull request, with the re-arrangement of the JSP pages and the cleaning of CSS / JS / images.\n. Yes, I'll update this and change the name of the file. I propose : mangementConfigContext.xml.\n. Yes, we need the CAS core dependency as services classes are defined inside the CAS core for both web applications : CAS server webapp and CAS management webapp.\nHowever, I think the cas-server-core should not contain all the classes regarding webflow and navigation which are tied to the webapps and which should be therefore put in webapps (example : CasDefaultFlowUrlHandler class in cas-server-webapp and ManageRegisteredServicesMultiActionController.java class in cas-management-webapp).\nI plan to do that in the fourth pull request for this topic.\n. We can get rid of this as we already have this in web.xml to handle errors :\n  <error-page>\n    <error-code>500</error-code>\n    <location>/WEB-INF/view/jsp/errors.jsp</location>\n  </error-page>\nI'll do that.\n. You're right and I just pulled your pull request on master and it generates an error on my desktop : \n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project cas-server-integration-ehcache: There are test failures.\nI'd really like to know if I'm the only one who can't support the 2.12.4 version plugin...\n. Sorry, the issue is on my side. I have a process gvfsd (GNOME Virtual File System on Ubuntu) started on port 40001 which blocks the test...\n. I think it's not a real use case in the OAuth module (value = null), though we could imagine just having the parameter without any value at a theorical level, meaning value = null. It's different from not having the parameter at all.\n. It's used for the tests (OAuth20AccessTokenControllerTests class here). I set a \"mockito logger\", to verify after, that the right log has been generated.\n. Just for my information : is this property only available when upgrading Spring jars in version 3.1.2 ?\n. I understand what you're asking me to do, but I don't see which pull request you're talking about. #154 (CAS-1210) does not have this change ?!\nAm I missing something ?\n. Yes, it has been moved to the parent pom.xml.\n. You're right, this entry point returns a 403 HTTP code, which needs the appropriate mapping (which was previously on 403.html but is now on authorizationFailure.html)\n. Yes, I think it's the idea and I plan to do these UI updates but in the next pull request (this one is for removing services management part from the CAS server).\nBefore working on the management UI, I will open a thread on the cas dev mailing list as this issue deserves a shared discussion.\n. It sounds like a good improvment.\n. Shouldn't you use StringUtils.isNotBlank ?\n. I don't understand why this constant is protected whereas the others are private.\n. About these constants, shouldn't we do something close to what is done in AbstractAction ? why not inherits from AbstractAction ?\nreturn new EventFactorySupport().success(this);\n. Why not getSearchBase() instead of BindLdapAuthenticationHandler.this.getSearchBase() ?\n. Shouldn't we have a computed serialVersionUID here ?\n. @author and @version for posterity ;-)\nSame comment for other classes...\n. Shouldn't we rely on the dedicated \"time\" library Joda which is already used elsewhere ?\n. You're right : I will do that.\n. OK\n. Sure. Though, as there's a debate around using static or not : http://slf4j.org/faq.html#declared_static, I think we should put that recommendation clearly in the CAS code conventions, don't you think ?\n. This is for testing purpose. A mockito logger is injected during testing to verify that the right log has been generated.\n. Are you sure this master.zip is the last snaphost available ? I think it would be better to explain that snapshot artifacts are stored in the Sonatype snapshots repository, explaining groupId and artifactId and version. Or maybe give a link to the repo itself : https://oss.sonatype.org/content/repositories/snapshots/org/jasig/cas/.\n. I have a 404 not found on this \"Javadoc\" link.\n. Why don't we have a computed serialVersionUID here instead of 1L ?\n. same comment about the value of the serialVersionUID ?\n. What did you change here ?\n. Sorry. My comment was misplaced and unclear. Seeing computations : \nfinal long totalSecondsSince1601 = l / 10000000;\nfinal long totalSecondsSince1970 = totalSecondsSince1601 - TOTAL_SECONDS_FROM_1601_1970;\nI was wondering if it could have been done more easily with Joda objects directly.\n. I don't remember the discussion on the dev list, but I'm +1 for the maven github plugin to publish javadocs...\n. Seems strange to me, but I have no explanation unfortunately !\n. Why did you replace the JpaTemplate by the EntityManager ?\n. I think that the same (new properties) should be done for the cas-management-webapp module until we decided what to do for the management UI.\n. Same comment...\n. Should the type be an enumeration ?\n. line 210 - 236 : I wonder if we can't simplify this part...\n. I understand, it's better to keep a String for extension purposes.\n. So we plan to produce javadocs only for releases, not for snapshots. Correct ?\n. Can't we just have one site.xml (a dream maybe) ?\n. I may be missing something, but I don't see the maven-site-plugin ?\n. A warning in Eclipse makes me realize it does work without in Maven 3. So I removed it.\nYou want to keep it ? New input for the CAS code conventions ?\n. The OAuth server support is tiedly linked to the CAS protocol (OAuth code = CAS ST / OAuth access token = CAS TGT) and therefore needs to access to the ticket registry.\nWhy don't you want that these controllers access directly the ticket registry ?\n. Sure, I can. Though code conventions talk about testcase extending junit.framework.TestCase. So I will change that also...\n. Javadoc is required on class header...\n. I don't like the default message returned to the end user. I would prefer something like : \"A technical error occured (code: XXX)\".\nWhat do you think ?\n. My point was about the message itself.\nI think it should never crash even in this odd use case (no mapping for BadCredentialsAuthenticationException.CODE).\n. OK. That convention makes sense, I'll do that and I'll update the code conventions wiki page as well.\n. Will fix.\n. Will fix also.\n. It may look strange. Though, you have to keep in mind that the ProvidersDefinition class belongs to the scribe-up library, which is independent from Spring (as it's used in Apache Shiro project for example which does not use Spring).\nI could call the init() method any time or anywhere I want, but in fact, the ProvidersDefinition will be initialized only once, that's why I just put it in the OAuthAction class because this class is absolutely required for OAuth support.\n. I may be missing the point, but you replace credentials == null by hasCredentials(credentials). I was expected the opposite : !hasCredentials(credentials), that's you did indeed line 221 - 224 !\n. What happens if we have multiple successes ? Which handler name is kept in fact ? I think it may be somehow a random pickup...\n. It's just an idea, but can't the principalResolver be a property of the authenticationHandler as they are both distinguished by their supports method which should work the same when they are associated : the test line 213 is somehow redundant after the test line 169...\n. Just a minor remark on this : I would prefer the method name getExceptions() instead of getErrors(()...\n. I saw that many times : why using this extra property ? transient is not enough for your needs ?\n. Exception are serializable, but I don't see any serialVersionUID here ?\n. I see the concept of name in several places with the getName() and setName(name) methods, with default value if empty on this.getClass().getSimpleName() : I'm wondering if you could have created some base class with this name concept ?\n. Where is used this class ?\n. I thought this class has been renamed in EhCacheTicketRegistryTests ?\n. I would keep things \"as is\" for backward compatibility. When a precise analysis is required, the getSuccesses() method needs to be used : it will certainly be the case for LOA.\nAt a code level, I think it can be good to isolate this loop into a new separate method : saveHandlerNameInAuthentication (you can find a better name) which can be overriden into another manager.\n. There is an indentation issue here. But I think the global pom.xml should be re-formated...\n. Just for my information, why can we get ride of this now ?\n. I respectfully doubt that this test works : are you sure this test covers all the browsers ? Just this header name with the associated value for all browsers, no exception, no lowercase/uppercase differences ?\n. A tiny remark : an empty line is missing here...\n. Both webapps (CAS server and CAS management) could be installed on different hosts and ports (for example : sso.myhost.com versus admin.internalhost.com).\n. Why replacing management by cas-management ?\n. I will trust you on this. But I would feel more comfortable if you can test it also on Internet explorer...\n. Are you referring to my demo : https://github.com/leleuj/cas-overlay-demo ?\nThe context path is also set in your webapp server : are you sure it's /management ?\n. Thanks for checking !\n. It should be me, but I still don't understand why you changed /management by /cas-management. Looks like it works for both context paths depending on your configuration !\nThat said, I don't have a strong opinion on this...\n. No problem, through discussion, we agreed on keeping the SAML logout request in the CAS server for now.\nAnd we agreed also that after that, I will start working on a more global SLO refactoring.\n. Why do you have this property to enable a configuration which has been already done for each registered service ? I find it not very useful : do you have a specific use case in mind ?\nIf necessary, maybe, it should be shared with the RegisteredServiceDefaultAttributeFilter class...\n. I would prefer the use of the matches() method here to offer a better match.\n. As complex attribute value objects, you just consider List : no Array, no Map ?\n. Some formating issue with the } here (should be at the begining of the next line)...\n. Some minor formating issue : a space is missing between (T) and ticket...\n. I think the { and the catch should be on the same line...\n. Why did you break the message in two parts ?\n. Looks like the identation is not right here.\n. As you add a new property (ticketId), you need to regenerate the serialVersionUID.\n. I understand, but could the line be split another way like this :\nfinal String message = String.\nformat(\"ServiceManagement: Service Attempted to Proxy, but is not allowed. Service: [%s] | Registered Service: [%s]\",\nservice.getId(), registeredService.toString()); ?\n. OK. I didn't notice it was part of the method's definition, I thought it was in the body of the method...\n. No capital letter for Ehcache ?\n. I'm questioning about the period. Is it a checkstyle rule ? I find it weird in this context...\n. No checkstyle rule here to say that the different properties should be separated by an empty line ?\n. Not my habit, but why not ?\n. Is the indentation correct here ?\n. Why do we keep the old responses ? Are they used somewhere ?\n. I think we talked about adding version=\"3.0\", don't we ?\n. Same comment about version=\"3.0\"...\n. Actually, the version 1 will be still available through the /validate url, which is not the case of the 2.0, replaced by the 3.0 on /serviceValidate and /proxyValidate urls.\nThat's why I would prefer cleaning than keeping for backward compatibility.\nViews defined in the protocol/ directory are also used when you enable the appropriate protocol : OpenID, OAuth, ClearPass, aren't they ?\n. Right, I would just keep protocol/3.0 instead of protocol/2.0...\n. I tend to say no, but it's hard to tell without testing. For safety, we can post-pone this change for 4.0 revision...\n. clients.findClient(clientName) returned an untyped object, which leads to a warning.\nAs lists can be used to defined clients, you could have List<Client<Credentials,UserProfile>>, verbosity I wanted to avoid in pac4j that's why I skip generics definition for the Clients class...\n. Yes, will fix that.\n. The webflow is abruptly stopped here with a WARN in logs.\nWe use a J2EContext : it means that the additionnal HTTP action has been already written directly to the HTTP response, that's why I'm doing a response.flushBuffer(); here.\nThe webflow is stopped and an HTTP action (redirection, unauthorized, 200 OK) is done according to the protocol and the client...\nI'm not totally satisfied here , but it's the best way I found to get out of the webflow...\n. It might not make sense but shouldn't we throw some functional exception here ? Maybe an idea for some more global refactoring...\n. Understood\n. Exactly, I stay as close as possible from the current implementation to avoid breaking things. loggedOutAlready must be understood as log out has been requested more than log out has been successful...\n. I'm still thinking about the call signature, this is the best I've found so far (strongly inspired by Marvin). I notice your concern and will think about it once more for the next pull request...\n. You're right, services may have been changed and reloaded. This is the problem with that strategy : checking the service at logout and not at creation. That said, I will just check for nullity here to avoid a NullPointerException. Even if the service is now disabled, I'd like to know if it was a front or back one...\n. Right, missing final\n. Thanks both for the explanation... Will keep things as is thus...\n. It's a good idea. Will do that : create a org.jasig.cas.util.Pair which is not Serializable as the original Pair : does it have to be Serializable like the TicketedService ?\n. Right, will change...\n. Good catch\n. It's a very complex problem : synchronization for logout.\n2 uses cases can occur :\n- multiple logouts happening at the same time on different CAS servers of the cluster\n- multiple logouts happening at the same time on just one CAS server.\nIf you have a cluster of CAS servers, I think it's pretty impossible to achieve a distributed synchronized on TGT for logout. Let's forget about this one.\nLet's target multiples concurrent logouts on the same CAS server and think about memcached storage.\nWe will have 2 HTTP requests, 2 calls to memcached and 2 different rehydrated TGTs. The only way to synchronize properly is to do it for a shared object between both requests : the CentralAuthenticationService. So you're totally right, we would need to synchronize the destroyTicketGrantingTicket method.\nBut, at that time, the destroyTicketGrantingTicket method is not synchronized, the synchronization is handled through the synchronized expire method  which calls the logOutOfServices method. So far, the logout is not properly synchronized and we didn't get any complain about that.\nSo my proposal would be to keep this kind of synchronization (not global on destroyTGT) but without synchronizing the back channel HTTP calls (as it's done right now). So what's why I wanted to synchronize the retrieval and cleaning of the services : not perfect I admit, but as safe as it's done now, with better performance.\nOne more thing I'd like to propose to improve things is to add an updateTicket() call in the removeAllServices method of the TicketDelegator to synchronize also the update of the storage.\n. Yes exactly, it's a choice for performance reasons : avoid synchronized wrapping HTTP calls... See my comment above on logout synchronization...\n. I respectfully disagree here. It seems to require only a SingleLogoutService and it's true to check if it has been already logged out, but the identifier and the original url of the service are also required in the logOutOfService method and they belong to AbstractWebApplicationService...\n. I will use String.format as it's thread-safe (inspired by Marvin's code once again)...\n. Agreed\n. Will do. Seems safer.\n. I think it makes more logical sense to logout and then after logout, delete the ticket which has been used to perform the logout.\nSo far, it works like that.\nThat said, I'm not deeply tied to this solution and would switch if you really think it's necessary...\n. FYI, emptyIterator() comes with Java 7 and not Java 6 ;-)\n. why a blank line here ?\n. Redefining the same method signature is an option, but I'm a bit reluctant to it. However, it would be good to capture in an interface what is linked to logout...\nSo far, we have :\ninterface : Principal / methods : getId, getAttributes\ninterface : Service inherits from Principal (that's not clear to me why ?) / methods : setPrincipal, matches\ninterface : WebApplicationService inherits from Service / methods : getResponse / getArtifactId\nSo I propose to add the getOriginalUrl method to the WebApplicationService interface and finally create a SingleLogoutService inheriting from WebApplicationService...\n. OK. I will switch order : delete then logout.\nYes, services are back or front channel but this method performLogout only performs back channel calls and return services which require front channel logout...\n. I now wonder if I should have marked the class as final. The logOutOfService method is some helper method to perfom back channel calls, I'm not sure to see what new behaviour you would implement instead ?\n. Agreed. I will mark the class final and change the name of the method.\n. Shouldn't we need the same for theRegisteredServiceImpl ?\n. OK. Let's keep things that way and we'll add it if necessary...\n. Yep, good catch !\n. Right, the order does not matter. A Map is more friendly than an Iterator<Pair<>>... Will change... I will keep the org.jasig.cas.util.Pair object though as it can re-used...\n. Yes, the logoutManager must be initialized : a @NotNull is missing and the initialization must be done by constructor. Will fix.\n. In fact, there is no constructor at that time and the required constructor would have more 7 parameters (which breaks one checkstyle rule) : I will keep setters and just add @NotNull...\n. I've been hesitated a while on this... I thought the same way you do...\nPractically, we have a SAML logout (for CAS and SAML services) and no logout (for Google and OpenID services).\nWe could handle different kinds of logout in the LogoutManagerImpl according to the kind of the service if we really need it.\nConversely, the logOutOfService method is not sufficient to handle properly the front SLO...\nThe logic of the logout is more complex than just calling a method which performs an HTTP call : it must be gathered in one place, in the LogoutManagerImpl...\n. OK. Should we change the checkstyle rule to accept more parameters for constructor ? (10 instead of 7 for example)\n. \"We have a bunch of things\" : you mean we could have a bunch of things ?\nI tend to keep the LogoutManagerImpl to gather at one place the logout logic which is pretty simple (and I think it's been that way for a long time)...\n. As already discussed, the idea would be to have a specific behaviour according to the kind of service.\n. Why would you return services that have been already processed by the logout manager ?\n. It replicates the current behaviour : no logout is performed (no back channel calls and no service returned for front SLO) if the disableSingleSignOut is true.\n. The back/front channel nature is a configuration data and therefore is stored in a registered service available through the services manager.\nThe services are created when requests come to the CAS server.\nSo you need to retrieve for a service if it's a back or front channel SLO. You can do that at service creation (argument extractor) or at logout (here).\nI think it's better to do at logout not to pollute the argument extractors and as they are not necessarily needed (no logout performed).\n. A map of <service ticket, service> : do you want me to update the javadoc ?\n. And they are all three implemented in the LogoutManagerImpl with very few lines of code, aren't they ?\n. Would be great to help me not to forget to add final ;-)\n. I updated the rule to an error severity and 10 parameters allowed.\n. OK. I understand the need. I'm not against it, but it seems to be more like an improvment to me.\nI propose to do that in the next pull request about front SLO where I will update the UI to integrate the front SLO.\n. I did not target to re-implement it the same way, but to provide the same features in a better design which allows me to do a lot more after.\nToo bad that you were not at the conf call yesterday, it would have been easier (even for a French guy like me) to have a little chat together...\n. The LogoutRequest class makes sense to me : let's merge this pull request and I'll do that in the next pull request when changing the UI...\n. Maybe I did not express myself well. I wanted to highlight that reimplementing all features in a few lines of code was some kind of proof of a good design.\nAbout the desing itself, I wouldn't say that \"protocol specific things leaks into other abstractions\" : \"leaks\" seems to me like an uncontrol and somehow unwanted thing.\nThe logout process depends on the nature of the service, that's true but that's just one of the aspects of the logout : that's why I get rid of the logOutOfService.\nThe logout process has many aspects which needs to be gathered and cleverly orchestrated at a higher level, in the appropriate component : the LogoutManagerImpl.\nLet's imagine a logout process which needs to gather logout requests or order them, it clearly makes sense to have a specific component to handle logout.\n. I think we can avoid to have a global authorized grant types definition, this could be put into the OAuthRegisteredService class...\n. It should use the OAuthRegisteredService class.\n. To be removed !\n. I'm not sure that we should rely on the CAS authentication manager directly, maybe we should use the CentralAuthenticationServiceImpl and its createTicketGrantingTicket method to perform authentication and create the TGT...\n. Would have been an enumeration more appropriate here ? I'm surprised that these constants are not already defined in the Spring Security OAuth library.\n. Just before the merge, the @since javadoc will be necessary...\n. Shouldn't we rely directly on the TGT expiration ? Instead of defining a timeToKillInSeconds...\n. I'm not sure to understand why this class is made for...\n. I fear some performance problems here as we go through all the tickets (TGT and ST) : we definitely need to avoid that...\n. I hope we don't need this one ;-)\n. In the future, this should be our JSon text with TGT, service, all encrypted and base64 encoded, right ?\n. Same performance problem here...\n. I think you are reverting the last commit from @mmoayyed...\n. My old classes should be removed (this one and the others)...\n. OK. See my comments on the oauthConfiguration.xml file at https://github.com/joemccall86/cas-oauth-demo/blob/1daae05b1d4456576fc47f3e6bb8b3a5083d92a9/cas-oauth-server-demo/src/main/webapp/WEB-INF/spring-configuration/oauthConfiguration.xml...\n. This mapping should not be set by default : it must be one step of the configuration to add OAuth server support...\n. I've seen this method three times : there must be some possible refactoring on it...\n. I'm a bit surprised by this syntax : I was expected some @NotNull defined for the properties of the class, not for the parameters...\n. Doesn't it make sense to gather both methods : examineAccountStatus and examineAccountState ?\n. I'm not against these annotations. It may be worthwhile to update our https://wiki.jasig.org/display/CAS/Code+Conventions...\n. Right, the name could be improved : OAuthRegisteredClient seems the perfect name for me. I think it will be pretty useful to distinguish this kind of CAS services.\n. As a matter of facts, I was talking about the e.printStackTrace()...\n. Yes, and we could imagine setting by ourselves the CASTGC cookie using the CookieRetrievingCookieGenerator and therefore, recreating the CAS authentication when the user has authenticated through basic auth...\n. Wrong guess from me. Not a big deal though, don't bother...\n. I know you're trying to do things without impacting the core (safe strategy), but I'm wondering here if it would make sense to be able to get this value timeToKillInSeconds from the TGT...\nI feel it could help a lot for the OAuth module source code : don't you think ?\n. Understood\n. In fact, things are worst than I said : for the Memcached ticket registry, the getTickets() will throw an Exception : https://github.com/Jasig/cas/blob/master/cas-server-integration-memcached/src/main/java/org/jasig/cas/ticket/registry/MemCacheTicketRegistry.java\nWe could have a separate token store but I'm not sure that it would be so easy : we would still need to remove expired tokens, and so on...\nAt that time,I don't know what is the right solution. I tend to search a solution in an another war : isn't it possible to have an improved OAuth2Authentication with the TGT id ?\n. 1. In fact, I forget to recall what is already in the JIRA : without that fix, complex user attributes (like list) are not properly handled and generate exceptions\n2. Of course not, some stupid copy/paste here : will clean\n. Is a blank line necessary here ? checkstyle rule ?\n. Won't these empty spaces make the build fail (checkstyle rule) ?\n. Same comment as above...\n. Same comment as above...\n. empty blank line...\n. no end line ?\n. At that time, the logoutType is not saved to database for example, just to avoid breaking anything.\nSo unfortunately I think we can have some use cases where the logoutType can be null.\nWhen the front SLO will become an official feature (instead of an experimental one), I think we'll do what you propose.\n. I'm open to debate on this.\nBut as this enum is used in another classes than just in the LogoutRequest class, I prefer to have a separate class...\n. Good suggestion. Will change...\n. I will trust you on the naming ;-)\n. Yes, it makes sense as every logout request must invalidate the cache.\n. Yes, with capital \"D\". I will take this into account, though I don't think it's a big deal to copy/paste the javadoc...\n. I can't say better than Marvin said. We agreed to plan a \"Javascript\" optimization for a future CAS version...\n. This is main change I made regarding your original front SLO proposal. Good to see we are in line !\n. Might be a silly question, but why don't you rely on the getAuthenticationSatisfiedByPolicy method here ?\n. Not a big concern here, but I would appreciate to have the default value explicitely defined : private boolean tryAll = false;\n. I like the idea of having an AuthenticationBuilder class, but I'm respectfully not totally convinced by your implementation. I would expect the following usage :\nAuthentication a = AuthenticationBuilder.newInstance().addDate(date)....build();\nI don't check thoroughfully in all the source code but are the setter and the newInstance(source) methods really useful ?\n. Just for consistency, shouldn't all the new calls be placed in this constructor ? I mean for the credentials, attributes...\n. I might be nitpicking here but does the class really need to be static ?\nJust my personal opinion, but I would have designed the ImmutableDate class as a wrapper of the Date class without reimplementing  the setters instead of throwing UnsupportedOperationException : might be easier your way though...\n. I'm not sure to understand why there is an identifier in this OneTimePasswordCredentials class : is this something intended for all Credentials ? I remembered some CredentialMetaData interface with a getId() method ? Could we have some common interface or abstract class ?\n. One empty line can be removed...\n. No problem, split your work as you wish, hope my suggestions can help you find the best direction...\n. I remember you test also the attributes in the CentralAuthenticationServiceImpl class : does it make sense to do the same here ?\n. I think I already made this comment but the last authentication handler name will override the others, right ?\n. I think we lose too much information here : if we have a UsernamePasswordCredentials, it will become a BasicCredentialMetaData with just the class type saved : why not keeping the username provided ? I'm wondering if the credentials shouldn't be able to return their own metadata through a getMetaData() method for example providing a safe UsernamePasswordCredentials in this case with the password erased...\n. Do we really need this test as the opposite test has failed in line 222 (as we reached this instruction) ?\n. One minor comment from the \"human spell checker\" : if instead of iff...\n. Good to know, but I've never heard about it. It may be obvious for others though...\n. I find this a bit strange : shouldn't the successes be automatically available as an attribute ?\n. I'm pretty sure we could reuse this class more generally, maybe for the logout : I will think about it...\n. You're right, it's about PGT here, it really needs reflection, sounds like a good and cautious approach for now.\n. I would prefer with Username...\n. According to our CAS code conventions, shouldn't it be in lowercase ?\n. @author ?\n. The usage of this class is pretty straight-forward from the name, though I always appreciate a complete Javadoc...\n. Are final expected in the methods definition for parameters in interfaces ? I think it's not the case...\n. Is there any specific reason to return a LinkedList (versus an ArrayList for example) ?\n. Not sure that the Javadoc should be changed here ?\n. Jut my 2 cents here, but it could make sense to have temporary properties to ease readability...\nCollection<Principal> principals = lc.getSubject().getPrincipals() ...\n. Don't we have any helper to handle a proper close for files ? like LdapUptils for LDAP accesses...\n. It would be easier with Java 7 ;-)\n. transformedUsername with r ;-)\n. I think you have converted all CAS handlers in 4.0 format : what is this LegacyAuthenticationHandlerAdapter for ? For CAS deployers with their own authentication handlers ?\n. Sure. Makes sense to me.\n. this.searchExecutor ?\n. This log is redundant with the one line 159...\n. Are we sure it can't be of another type ? (I see Binary below...)\n. Perfect. No worry thus...\n. It builds and passes tests without it !\nI also removed the src/test/webtest directory...\n. I don't think so. Will remove...\n. Sure. Will add...\n. Shouldn't we remove also the CASPRIVACY cookie ?\n. Same question here...\n. I'm hesitating on this...\nShould we really call SLO here ? Isn't it an explicit action from the user ?\nWhat we want is to avoid displaying \"you're authenticated\" if the user is not authenticated.\nAs we are close to the RC1, I'm in favor of an easy and less intrusive solution :\ncan't we just \"update\" the initial flow action not to store the TGT in context (and delete cookies) if the TGT is expired ?\n. We could have used a constant for logoutRequests, but it can be done later...\n. Why did you remove this monitor ?\n. I think I already made the same comment on pull request, but don't we have a LdapUtils.closeContext ?\n. I don't think that you need the first test this.chain.size() > 0 as you already defined @Size(min = 1) (line 43)...\n. Maybe a silly question here : why not just use the default hash and equals methods generated by Eclipse ? why using EqualsBuilder ?\n. 0 and null are the default values : you don't need to set them explicitely : an empty constructor would do the job, wouldn't it ?\n. You're right, it's more reasonable to use something not dependent on the IDE, it's more an habit on my side...\nAn example for this class of what Eclipse would generate :\n``` @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + ((credentialClass == null) ? 0 : credentialClass.hashCode());\n        result = prime * result + ((id == null) ? 0 : id.hashCode());\n        return result;\n    }\n@Override\npublic boolean equals(Object obj) {\n    if (this == obj)\n        return true;\n    if (obj == null)\n        return false;\n    if (getClass() != obj.getClass())\n        return false;\n    BasicCredentialMetaData other = (BasicCredentialMetaData) obj;\n    if (credentialClass == null) {\n        if (other.credentialClass != null)\n            return false;\n    } else if (!credentialClass.equals(other.credentialClass))\n        return false;\n    if (id == null) {\n        if (other.id != null)\n            return false;\n    } else if (!id.equals(other.id))\n        return false;\n    return true;\n}\n\n```\nPretty ugly in fact, but it's easy for lazzy developers : just right click, \"generate hash and equals methods\"...\nIf we made a choice, it would make sense to apply it globally for the CAS server (as soon as possible) and add it in the CAS code conventions ?\n. Right, forget about this one...\n. I don't think we will have time/energy to achieve that for 4.0. I'm in line for the recommendation... and a new CS rule later...\n. I'm in line with @spaetow : if we know we have other use cases (for example one that allows the reuse of the same RadiusClient), we must leave open some possible customization.\nIn this case, why not having an interface RadiusClientFactory and a final default implementation RadiusClientFactorySimpl ?\n. strongly : no. It's more to be consistent with our way to propose extensions : an interface and a final default implementation. Specific use cases must be addressed by creating specific implementations.\nWhat would be the customization here ? Inherit from this class and override the newInstance method not to instanciate a new client every time ?\n. Maybe it would be better to have a Java comment...\n. It's a bit a strange url, but I think we can consider github.com as a reliable host...\n. I mean a JSP comment : <%-- --%> to avoid transferring this comment to the browser... Tiny improvment in terms of bandwith usage as users don't care about that information...\n. Not related to this change, just a cleanup...\n. I'm surprised by the 4 following tests : they will always return true. I think you wanted to test authentication and auth, don't you ?\n. Tiny comment : isn't it a bit too much to return the code property twice ?\n. Shouldn't it be classpath:custom_messages ?\n. Is this test really useful regarding the test one line below ?\n. More a question than an assertion here : shouldn't we have the custom_messages first, to be able to override CAS properties ?\n. OK. Thanks for the feedback. I will try that...\n. Just for my understanding : after 10 seconds, the form will be submitted automatically, right ? Why 10 seconds ? Why this auto submit ?\n. The property is badly named here as it's an asynchronous call if true (not a synchronous one).\n. Why do we change the default behaviour ?\n. In fact, this message should be changed as well : synchronously...\n. What is T here ? No other reference in the interface ?\n. Shouldn't it be logger instead of LOGGER (and not static) ?\n. I think you keep this one because there are some callers for this method, but if you want to achieve a complete refactoring, I would get rid of this one and just keep the other sendMessageToEndPoint...\n. What is the <Boolean> for ?\n. As this class represents a message sender, I think the concept of synchronism should be one of its property...\n. Don't we already have commons-lang as a (indirect) dependency ?\n. What's the real objective ? Improve time build (CAS-1322) ?\n. Do we really need the default constructor here ?\n. We can't simply remove all tests as we now use annotations. What about using the spring mvc tests framework ?\n. I'm not sure that we really need to have the concept of RC1 here. Let's keep things simple...\n. Good catch @battags : this method should be synchronized...\n. Can't you use INSTANCE instead of getInstance() here ?\n. The logout manager performs the back channel logout and stores into the webflow the services which require a front logout. Then, in the webflow, a logout action performs the front channel logout...\n. OK. I understand your point : the back channel logout will be performed only if the service is configured to do so whereas the debug message always says that a back channel logout is performed...\nI will change that.\n. In fact, we have a limited set of registered services. This way, we would instantiate a lot of RegisteredServiceDefaultAttributeFilter, more than necessary.\nHow can you use a different attribute filter (other than the default one) for a registered service ?\nWhy is the attribute filter not a property of the registered service ? Which then would be configurable through the services management webapp ?\n. For security reasons, it might be better to have a less clear message like Invalid credentials.\n. Tiny remark : a space is needed between kind and the colon...\n. I spent some time trying to find a best solution than the current one, just to remove the circular dependency, but without success.\nI'm really wondering if we shouldn't stick to the current implementation (which satisfied me).\n. Yes, I will change that...\n. It tests the new implemented behaviour : perform logout and then delete ticket. The \"opposite\" (delete ticket and perform logout) cannot be tested without changing the source code and reverting to the old behaviour...\n. Yes, I wish I could do that, but the DefaultTicketRegistry does not meet the need.\nThe use case is very specific : when the TGT is marked as expired, in the case of a distributed ticket registry (like Memcached or Oracle), an update (see TicketGrantingTicketDelegator) will be performed on the existing TGT and if it doesn't exist (because it was previously deleted), it generates an exception.\nI really don't see how I can simulate that without using these two custom (I admit : \"ugly\") mocks...\n. That's a smart refactoring. You find your way by considering that only attributes determine the behaviour of the filter. That's a totally acceptable compromise from my point of view.\nOne caveat though : the filter applies at the end. Shoudln't we apply the filter first when it exists ?\n. The refactoring is good.\nThough, I think we should be more ambitious on this. ignoreAttributes is just a specific kind of filters which return all attributes and allowedAttributes is just another specific filter which returns only the attributes according to the given names.\nShouldn't we create a more global concept for the attributes filter ?\n. Right, I will make it private.\n. I will finally make it protected to avoid misuse and warning.\n. Yes, I think we don't care about fragments but I also think that I could improve and simplify this serializer by using the String representation of the url. Will try that...\n. Sure, I will add a test with a more complex url with query string and fragment...\n. Double period at the end of the sentence\n. Just for consistency : sometimes, there is a period at the end of a parameter's javadoc, sometimes not. Do we have a rule for that ?\n. The main use case seems to be \"no period at the end of a parameter's javadoc\".\n. A period at the end of the return's javadoc ?\n. A useless method cleanup, right ?\n. I would say : EhCache instead of eh cache, to keep the name of the known library...\n. In fact, the remaining time in seconds before expiration with syntax : expires=3600...\n. I would say : OAuth as it's the name of the protocol...\n. I would say : OpenID as it's the official name of the protocol...\n. I would also say : JRadius as it's the official name...\n. Maybe SAML with capitals...\n. An empty line is missing here, I think...\n. Calculates with s ? Me trying to fix conjugation errors ;-)\n. I would expect : @return the generated login ticket...\n. Suggested improvment : Checks if is <code>gateway</code> present in the request params....\n. Implement ? It might be me, but I'm suprised by the sentence. For what it's worth, my suggestion : Triggered on successful validation events.\n. You're right. Forget this one...\n. OK. Let's do that...\n. It's a minor comment but I'm wondering if we should really have default views, moreover pointing to the CAS protocol v2... It might be interesting to define explicitely the views...\n. You're right : we might introduce breaking changes. At the same time, we already change the name of the views : casServiceSuccessView (a CAS2 view in 3.5.x) becomes cas2ServiceSuccessView.\nLet's keep things that way unless someone has the same comment...\n. There was a long discussion going on on that topic that I didn't follow completely.\nBut I would never throw a generic Exception...\n. Nor catch a generic Exception...\n. Can't we just leverage any specific behaviour on the PasswordPolicyResult ?\n. An IllegalArgumentException would make sense to me...\n. Sorry if I'm completely missing the point, but why not catch a RuntimeException if these are unchecked exceptions ?\n. Practically, it makes no difference. Though, I think it's more in line with the purpose of the pull request : catch unexpected/unchecked exceptions...\n. Good catch. There was a bug here so that logging was not correct...\n. The httpClient has replaced the noRedirectHttpClient : I'm not sure you really want to change that, don't you ?\n. Minor comment: maybe a useless line here...\n. Minor comment: some useless spaces here...\n. Minor comment: a space between AbstractController and {...\n. Makes me wonder why we don't have any constant for these strings: evaluationOrder and id...\n. You're right, it's a more global effort and strategy to design properly all constants. Do we have a JIRA for that (for 4.x)?\n. Here is our first attempt about constants: https://issues.jasig.org/browse/CAS-1145. But you can create a more global one, we'll assign it later when we'll start working on it...\n. There might be some indentation issue here...\n. ...and there also...\n. Good catch: using a new connection allows you to close it properly without losing the previous one...\n. Why don't you simply have a boolean to know if a warning has been added to the context and test it just below instead of having the hasWarningMessage method?\n. This looks strange to me: ldapPasswordPolicyConfiguration is the root object and at the same time is used as a parameter...\nI would have expected something like: ldapPasswordPolicy.checkStateAccount(response);...\n. It would be good to add the version for which this class was first created (@version).\n. I would have maybe prefixed the name by Ldap as it's only related to LDAP stuffs...\n. I think the same could be removed in the French property file.\n. I'm not sure to understand exactly what it means: every time a user authenticates, he will be prompted some warning message if this property is true, won't he? It seems to be very intrusive/annoying...\nMoreover, I haven't been able to see how this is used in the source code...\n. Forget this one: I see some new properties that need also to be translated into French (at least). A job for me...\n. I imagine that a ldaptive release is coming very soon...\n. In fact, Maven will refuse to do the release if there is still a SNAPSHOT library referenced as a dependency. So some tagged version will be required at least...\n. No need to say that you have achieved a great refactoring on this, my remarks are just trying to respectfully improve even more our design.\nYou are now returning a Pair<Principal, List<Message>> instead of a Principal for the authenticateUsernamePasswordInternal method: it makes sense to me; I'm not completely convinced by the Pair structure but I don't see anything better right now.\nMy only concern is the passwordPolicyConfiguration object in the authentication handlers: I'm not sure it's totally appropriate, the password policy configuration is only meaningfull for the account state handlers and not for the authentication handlers as it deals with password policy. By the way, I've made a search across the pull request and I don't see any use of the passwordPolicyConfiguration object in the authentication handlers. It might be removed maybe...\n. OK. Let's keep it that way. Will see how it changes over time...\n+1\n. What is this secure property?\n. Some reminder: I didn't see you commit on this pull our last discussed changes: https://github.com/serac/cas/commit/78ea2bd2c7557302f29328d10d4466b660b1e9bc...\n. Sorry to bother with that, but I think it deserves to be changed in all languages properties as well...\n. We already have a \"Contributions\" section in the README.md: I would change this one because it is displayed on the Jasig/cas home page...\n. I meant that we should not create a new CONTRIBUTING.md file but update the README.md file we already have as this latter is displayed by default when you click on the Jasig/cas project in github.com\n. OK. My apologies. I didn't know about this default great behaviour with the CONTRIBUTING.md file...\n. I really like the idea of gathering all CAS protocol constants in one interface. Though, I think you push the idea too far with VALIDATION_CAS_MODEL_ASSERTION, ERROR_CODE_INVALID_REQUEST... Some are view constants, some are error constants...\nI think we need to create several constants interface...\n. I would keep this CasProtocolConstants interface for the CAS protocol constants.\nFor constants related to views, I think they should be kept in controllers.\nFor errors, I would create a new constants interface as they are used in several places...\n. I agree with these new attributes returned in the response.\nI'm just wondering if it deserves a discussion on the mailing list to be sure that no other attribute might be useful...\n. I like the new mechanism your brought to support additionnal attributes. Yes, LOA attributes will come in the future.\nBut my point was more on the remember-me attributes if someone was expecting some other one...\n. At first, I had the CAS vision of the remember-me (we are in a remember-me situation if it's not a new login). Then, I talked with Rob Winch (tech lead Spring Security) for who it doesn't really make sense: he was expecting to be in remember-me after some time after the authentication date.\nSo I'm wondering if someone might have a new implementation/vision for the remember-me which can lead us to add some attributes we didn't think about first...\nI hope I'm clearer now.\n. Spring Security uses a dedicated cookie to implement the remember-me feature: as long as the cookie exists, the remember-me will be detected.\nThough, my aim was to brought CAS remember-me feature to Spring Security, there was more work than expected both on the CAS server and CAS client sides. But I think we are going into the right direction. You can read more here: https://jira.spring.io/browse/SEC-1986 & https://github.com/spring-projects/spring-security/pull/14.\n. Might be me, but I don't see the differences between old and new lines here...\n. OK\n. You're right, error codes are in the protocol spec! So it makes sense to have them in one interface.\nSome (VALIDATION_SAML_ATTRIBUTE_NAMESPACE,  VALIDATION_CAS_MODEL_ASSERTION) are not directly listed in the spec, so they may \"stay\" in their original classes...\n. Are we sure that a InvalidTicketException only happens for a timeout?\n. What about the front channel SLO?\n. What areas are you referering to? Because there should be some front-channel SLO process if the UI is involved.\nWhen the /logout url is called, the logout-webflow.xml is called and services which were marked as \"Front channel\" will be processed accordingly.\nEvery time we perform logout, we should call the destroyTicketGrantingTicket method but also process the front channel logout requests whenever it's possible. I think it's the case here...\n. Indeed, this one needs to trigger the front-channel SLO as well. I had in mind that it was not necessary due to the fact it was the first service granted at authentication (so no previous service to logout), but obviously the \"renew\" parameter means that it's not the first service...\n. Yes please. And it might be easier than you thought, the logout webflow already handles all the SLO logic (back and front-channel), so in fact, you would not need to call directly destroyTicketGrantingTicket, but \"call\" the logout webflow...\n. You did good. I'll handle this one when I'll re-work on front-channel SLO...\n. I'm certainly saying the same as @battags.\nPreviously, the authentication was performed on transformedUsername and credential.getPassword and the metadata were built on the original credential.\nWith your proposed change, the authentication is also performed on transformedUsername and credential.getPassword, but if you use createHandlerResult, you will build the metadata on the provided credential, which has been transformed and is therefore no more the original one.\n. Your arguments make sense. You could maybe rename the input parameter as transformedCredential for the authenticateUsernamePasswordInternal method for a better undersdanding...\n. If you make a lower case comparison in the matches method (in the AbstractWebApplicationService class), should it be always case insensitive here as well?\n. For me, it would make sense to create a username property from credential.getUsername() if we use it more than once. And this remark is true for all handlers.\nDon't you think?\n. Yes, it will be a breaking change. But as you change the matches method, I think we are already there...\n. Oh no, I'm just saying that you should create a variable: String username = credential.getUsername(); when you use the username more than once.\n. Don't we need a default value here of -1?\n. No logging here?\n. OK\n. any reason why the map has become non static and protected?\n. You're right: protected static feels strange, no strong opinion on this...\n. I'm not sure to understand the second condition service instanceof RegisteredServiceImpl: I don't think it will work in the following use case: I have defined an Ant Pattern and I updated my service url with a new regular expression starting with ^.\nMaybe  a test would confirm (or not) the expected habviour...\n. Great! The test case matches perfectly the use case. Though, I'm still surprised by the second condition service instanceof ..., I should do some debugging to get a better understanding...\n. There is no use of the attributeFilteringPolicy property in the equals method: seems strange to me?\n. Same comment for the hashCode method...\n. How would it be saved to database?\n. I'm now really wondering if we need this internal concept: it seems complicated, the filter just applies on the values of the attributes, right? Can we just have a filtering policy applying on values, names or whatever we can imagine...\n. My \"piercing eye\" tells me there are two spaces instead of one before the extends keyword.... Just to say it...\n. I think that the name: issueAsynchronousCallbacks is misleading here.\nAt the logout manager level, we have an issueAsynchronousCallbacks property (note the S) and at the message level, we need a isAsynchronous property.\n. I would expect an asynchronous argument in the constructor...\n. I would remove this overriden method...\n. Sending a message is the responsability of the HttpClient, isn't it?\nThe HttpMessage is just a simple POJO, the container of what needs to be send and how, right?\n. I would expect to see this method in the SimpleHttpClient...\n. Can we just avoid to submit the message to the executor service if it's not asynchronous and call it directly?\n. I'm wondering if maybe we still have two concepts: the HttpMessage holding what needs to be sent and the MessageSender holding the logic of sending the message?\n. I think both spellings are valid, aren't they?\n. This change has nothing to do with the libraries upgrade, right?\n. Some side change?\n. Not a big deal...\n. Are we sure we want to make these urls customizable? I would prefer fixed urls, like the other CAS endpoints (/serviceValidate, /proxyValidate...)\n. Is it a correct syntax? I would have expected: \"${server.rest.prefix:/v1}\"...\n. @battags is right: tests are mandatory here. In fact, what would have been great is to have the same tests for both REST implementations (old and new)...\n. Do we want to make this TicketsResource class final or do we want to \"open\" it to changes?\n. Is there a reason to have no modifier (the \"default\" access modifier)?\n. Tiny comment: indentation looks strange here...\n. Indeed, that's what we proposed in the \"old\" implementation...\n. Looks good to me, just to say: hey, it's a public API and you can't override this one.\n. I'm not sure to understand the use of this constructor...\n. It makes sense. Its reminds me that the upgrade between 4.0 and 4.1 will break services definitions!\nIn fact, in 4.1, the proxy policy should be RegexMatchingRegisteredServiceProxyPolicy(\"https://.*\") to have a service \"allowed to proxy\" and with \"requireSecure\" like in 4.0, right?\n. I'm not sure to understand when we have an array for the \"WHO\"... Some tests could help to see the use cases...\n. OK. And you think it might explain some unexpected \"'WHO\"?\n. context instead of contex?  REST instead of rest?\n. I don't think it should be here by default, it should be added when necessary, shouldn't it?\n. Understood. Indeed, it seems easier to just drop the jar (thanks to: classpath*:/META-INF/spring/*.xml as well). Though, I always feel worry with magic...\n. 3.4.4?\n. You may use the EqualsBuilder to be consistent with the HashCodeBuilder...\n. You're right. Too bad!\n. I'm concerned about this: super.setPrefix(prefix);. What happens in a multi-threading environment when different services are called at the same time with different associated themes?\n. You mean: 4.1?\n. I think that the idea is to have the same view name as the JSP name. I doesn't change anything for the customized JSP pages, right?\n. I think we could find a better name which is not tied to the proxy authentication concept, because it's not in fact.\nSomething like: CustomTrustStoreSslSocketFactory, what do you think?\n. By the way, I'd like to be able to set/override this parameter: SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER...\n. I'm not sure to understand what is the meaning of useTLS() for HTTP requests?\n. new TrustSelfSignedStrategy(): I understand we accept self-signed certificates, don't we? Should this be enabled by default? Does it make sense in a production environment?\n. Why are we catching Exception now? Isn't RuntimeException enough if we really need to catch exceptions?\n. It's not a big deal, but why did you change String to URL?\n. This is a subtle and huge change at the same time: the threads pool is now longer shared among all HTTP clients!\n. Many things are configurable in this class, I think the MAX_POOLED_CONNECTIONS and MAX_CONNECTIONS_PER_ROUTE deserved to be as well...\n. I think our strategy is to force mandatory parameters to be set through constructors and other parameters through setters.\nI would go that way here and avoid these too many constructors...\n. Strange! It might make sense, but it's pretty seldom to set the \"content length\": is there any specific reason for that?\n. I'm not sure to understand how the executorService could be terminated while the CAS server is still running...\n. I think both ways are acceptable, but having just one pool to configure is easier...\n. StringUtils.equals already ensures the check on null, so you can remove your first check...\n. The OAuth and LDAP dependencies have nothing to do here...\n. Same comment\n. This factory could exist without CAS, couldn't it? What about FileTrustStoreSslSocketFactory or DiskTrustStoreSslSocketFactory?\n. I see a problem here: the init() method instantiates a new executor pool, overriding the one provided by the constructor...\n. As you can inject the executor service in constructor, it's up to the deployer to know if he wants to share it or not. Looks like a good solution to me...\n. There is a problem here: you duplicate the tests already in the SessionMonitorTests.\nWhy not just move the testObserveOkJpaTicketRegistry?\n. I don't see that we were returning authentication attributes previously: it's new, isn't it?\n. I don't know SAML protocol, but authentication attributes and principal attributes would be returned at the same level, right?\nAre clients able to consume all these attributes? How can they tell ones from the others?\n. Line 49, you have: Entry entry = (Entry) pageContext.getAttribute(\"attr\");...\n. I'm certainly nitpicking but one can inherit from PreventedException with its own exception and a null cause...\n. Or the service has been disabled...\n. This constructor is very strange: I didn't notice the defaultAttributes argument: is it really used somewhere?\n. Good way to proceed by deprecating it!\n. The login webflow is also at order=\"2\", I don't think it's a big deal, but I'd prefer to increase the orders defined for the two webflows...\n. I don't understand this reference: /WEB-INF/view/views.xml?\n. Same here...\n. instance instead of istance\n. Does this one really require to be in the org.slf4j.impl package?\n. Maybe an empty line would be necessary before the Javadoc...\n. Same question for this package...\n. Why not create a static final CasLoggerFactory (as a singleton)?\n. I'm not sure to understand clearly how it works...\n. Are views commented on purpose?\n. Just an empty line before this one...\n. The indentation feels a bit too much on the right here...\n. I'm not sure to see the benefit of having this constructor. Isn't it already the default behaviour?\n. I'm concerned about the shared messageDigest: does it really work in a multi-threaded environment?\n. Is this change necessary?\n. I think it's not useful to have a protected logger for a final class.\n. Storing this complex object as a @Lob doesn't seem such a good idea. And I think we have the same problem with the attributeReleasePolicy property.\nWouldn't the easiest solution be to have some key instead of an object? And some attributeProvider and attributeReleasePolicy repositores?\n. That way, we could keep on using the management webapp to define services, if these default repositoies were also initialized for the management webapp.\n. front channel SLO is still experimental, I would not remove this comment.\n. Any specific reason for a final logger versus a static final logger?\n. Although it's good to keep backward compatibility, we have huge breaking changes in 4.1 (I'm thinking about the services definition).\n. MessageDigest seems to be a low-level class: wasn't there some more elaborated solution (based on Shiro for example)?\n. Yes, the key would be a String and the value would be the appropriate object like a ReleasePolicy or a UsernameProvider. It could be simple maps for that in the CAS server.\nIn the CAS management webapp, you could just have lists of these keys for the UI.\nNo more problem with serialization and it would work for the UI. These object definitions would sometimes be too static but I think that the drawback is acceptable.\n. Just to be sure of my understanding: you mean using the default constructor and then only one of the setters, don't you?\n. Isn't it exactly what we are looking for: http://shiro.apache.org/static/1.2.1/apidocs/org/apache/shiro/crypto/hash/SimpleHash.html#SimpleHash(java.lang.String,java.lang.Object,java.lang.Object,int)?\n. We will need to do that for other languages as well. Would you mind opening an issue for that?\n. The comment has not changed, has it?\n. I'm not completely convinced by this method: it's a little too high level for being easily mainpulated in the views.\n. Perfect\n. Yes, you're right. My answer was a bit na\u00efve.\nAs our problem is that saving/restoring serialized objects generates issues as objects evolved, why not serialize in JSON?\n. Yes please, it's another topic.\n. OK. I trust you on this. Just to be sure: \"typeIdUsed\", not \"typedIdUsed\" (typed with d)?\n. OK. Changing...\n. I may be wrong, but I feel we are reinventing the wheel: isn't there any library already offering such classes?\n. I always like to find a description and a \"at since\" annotation, even for a test class.\n. Yes, it would be executed every time, even for a PR. Will move as a post-success script.\nGood catch for the license.\n. Why is the method static?\n. I think I guess, but what is this check for?\n. OK\n. I would have done things a little differently. Without using a static method and without marking the class final, so that maybe other ways to compute the suffix could be implemented.\n. I'm no saying it's not good, but I feel this could be improved the way I propose. What do you think?\n. The logic put in the constructors could be moved into two different methods: createGenerators(int maxLength) and createSuffix(String suffix) in the DefaultUniqueTicketIdGenerator class.\nThen, in this new ticket id generator, the setSuffix would be overrided to compute the suffix from the hostname without taking into account the input parameter and only the necessary constructors would be available: the default one and the one with the maxLength parameter.\nDoes it make sense?\n. Maybe we could have some dedicated encoding for the name in case CAS deployers give crazy names to their services, like :\\/~@: not sure it works on every file system.\n. Can't we just update the map instead of reloading everything from files?\n. Same question here, but you do remove it from the map. Is load really necessary?\n. What about our idea to serialize services in JSON even in the DB? This class could be pretty useful, couldn't it?\n. Why this change?\n. This class should really be available in the JDK ;-)\n. I'm not sure to undertand how this fits in the PR.\n. Wow! So it won't work anymore for anybody except you ;-) I thought it would be proposed as an option.\nCan we have a classpath:/default-services instead or keep the old one?\nDo we all agree to make the JSON registry the default?\n. Does it make sense to still have the option to set the suffix for this generator? I don't think so. It should be only computed, shouldn't it?\n. I was misunderstood. No, it isn't, but I think it would be worth it being in the JDK.\n. Thanks for the clarification. Yes, it makes sense to me.\n. Yes, I understand. But I think it's better to only have one clear behaviour instead of some magic (like empty suffix means to compute the suffix).\n. Two times?\n. Maybe I would delete the file as it is more likely to fail and then remove it from the map.\n. This change is strange: it's already merged. I guess you are some commits behind...\n. This new CasArgumentExtractor could maybe be created in a setUp method.\n. Shouldn't the serialVersionUID be changed?\n. Nothing related to the PR right?\n. Indeed missing in the toString() method.\n. This is not related to the PR, but the other website has an invalid certificate.\n. You're right, I made the change too quickly without thinking properly. I will revert it.\n. And now the test passes.\n. Isn't it two spaces for indentation in XML files? Just to say something ;-)\n. OK. In any case, not a big deal.\n. I like the idea. JSON serialization makes sense here and I remember you created a JSON component for that in a previous PR.\n. Maybe I would create an temporary property result = response.getResult().\n. Do we use SSL and StartTLS in our LDAP tests? What is in your ldapServerTrustStore?\n. I see ldap.useStartTLS=false at line 7. Might be good to just remove this line.\n. Is this property still used? I don't think so.\n. Small comment: a blank line is certainly missing here.\n. And there.\n. Maybe I would change the name of the method to say that attributes are multi-valued ones.\n. And this method name as well.\n. I think you forget the remember-me attribute for CAS 3.0 protocol response.\n. Why do we keep this file? For custom extensions provided by CAS deployers, right?\n. This is not related to this PR. You increment the order to make some space for the xmlViewResolver, don't you?\n. Does it still make sense to terminate sessions in advance if they are stored on clients?\n. I would have moved this method at the top of the class as it presents the global logic. And the other methods above just to help reading.\n. We can have the case where there is no login ticket, cannot we? If so, I would rename the method as something like checkLoginTicketIfExists (feel free to find a better name).\n. Missing blank line.\n. Missing empty line.\n. No longer for webflows.\nHowever, we still use web sessions for pac4j client support and OAuth server support, but this mechanism is not necessary in that cases.\n. How is this related to the PR?\n. I guess that the idea here is to change the cache implementation to choose what is most suitable for my CAS server (like Memcached for example).\n. On more stuff in the CASImpl ;-)\n. I've seen this new DefaultPrincipalFactory(); in the CASImpl as well: would it make sense to have some constant for it?\n. This is very strange: why is the principalId not the key of the cache of the user attributes? How does it work for multiple users authenticating a the same time?\n. My English might not be good: Uncached? Not cached?\n. I'm not sure to understand what's the use of these attributes?\n. OK. I see now. Each principal has one principal attributes repository.\n. Now I see a problem: the same attributesRepository is shared between all principals, isn't it?\n. I think that the synchronized keywod is necessary here. And the best way to create an instance is to use a static initialization block.\n. Not sure to understand how this is related to the current PR?\n. Where is this used?\n. So far, the logout type was not saved in DB as it was considered experimental. Now we say that we somehow fully support it, right?\n. Good catch!\n. Empty line here.\n. What's the use of these readJsonTree methods?\n. No @Override?\n. Where does this come from?\n. Is this method still useful?\n. ?\n. Why not use the builder which is a GoogleSaml20ObjectBuilder, which inherits from Saml20ObjectBuilder?\nMoreover, I really think that you should not mix static and object methods. I would remove static methods.\n. Could this encoder be shared among all instances?\n. It looks like a method which has a wider scope than just SAML. I would be surprised that we don't use that somewhere else (in the logout manager for example).\n. Same here: we use inflating/deflating in the logout manager as well.\n. What's the objective here? Performance I guess?\n. Why removing this constant here and keeping the constant itself? I guess there is a problem here.\n. protected static: what's the goal?\n. Where is the logo used really? All services have the same image.\n. I really like to see a @since in every class.\n. @since ?\n. Yes, I missed it.\n. Will this be the behaviour of regular LDAPs?\n. Why not having a test on the logo image? If it exists, it is displayed otherwise, the default image is printed.\n. I took a look at this class and its parents, it looks thread-safe (methods acting on input parameters, no object properties). I don't see any perf issues also as the constructor seems to do little.\nI don't have a strong opinion on this.\n. No, I don't think we should test if the logo actually exists on disk or wherever it is stored.\nWe should just test if the logo property is not empty: in that case, use it and display the defined logo. Otherwise, we should use the default logo.\nI would always display the name of the service and the description if it is not empty.\nDoes it make more sense?\n. This method is only used for tests, isn't it? I'm wondering if it's not better to put it somewhere else.\n. Does it compile?\n. Why not keep 4.0.0 and replace it by 4.0 ?\n. Why this change?\n. Why this comma again?\n. This constructor references another one which calls in turn a third one. Hard to read I think.\nI would call the third one directly: this(code, \"\", DEFAULT_TYPE);\n. What has this message to do with the constant?\n. I see PERCENTAGE_VALUE some lines above...\n. Yes, it makes perfectly sense.\n. I guess the same comment for 4.0.0 (versus 4.0) also applies for 4.1: shouldn't we have 4.1.0?\n. You raise a good point. At first, I had the idea of allowing 20% of the total of the threads in the queue to be able to handle bursts. But I think it really depends on the way the CAS server is used, so I kept just one element.\nIt can be changed.\n. I'm not sure I follow you here : could you elaborate a little more?\n. Yes, that would be easier to set a threadsNumber than to create a new executor service. But that's where I realize that the constructors approach is maybe not the best. Am I supposed to create a constructor with just these two parameters or a full constructor?\n. The SimpleHttpClient is too big: the configuration and initialization part could be extracted in some SimpleHttpClientBuilder class: I like your idea and will go in that direction.\n. Yes, build() would be a better name. This method is called explicitely so there is no Spring magic here.\n. In fact, it's the builder which holds the built elements. So that's why I keep it.\nBut I realize that maybe it would make more sense to keep the built classes instead (the request executor service and the HTTP client).\nIs this what you expected?\n. The RejectedExecutionException is more important and needs to be easily visible in the logs because it can be caused by unappropriate settings. Other exceptions can be safely ignored as they should never happen.\n. According to wikipedia, it's really a builder:\nThe builder pattern is an object creation software design pattern. Unlike the abstract factory pattern and the factory method pattern whose intention is to enable polymorphism, the intention of the builder pattern is to find a solution to the telescoping constructor anti-pattern. The telescoping constructor anti-pattern occurs when the increase of object constructor parameter combination leads to an exponential list of constructors. Instead of using numerous constructors, the builder pattern uses another object, a builder, that receives each initialization parameter step by step and then returns the resulting constructed object at once.\nThe built objects are stored in the builder and retrieved from it, which is, I admit, quite unusual.\nThey could be retrieved and kept by this class just after the initialization. Agreed?\n. You're right. I will change the warning texts.\n. No, it's the builder for the SimpleHttpClient. It effectively builds a HTTP client and a request executor service.\nIt could be renamed if it's confusing.\n. Yes, the SimpleHttpClient keeps the configuration just to be able to get the acceptable codes. That's a bit strange and we could certainly have the acceptable codes directly in the SimpleHttpClient itself, but isn't it a configuration?\n. The HTTP client is really required to build the request executor service, so it's normal to see it as an input parameter.\n. Just to be sure: you want to keep the builder and add a factory, to hide the build of the SimpleHttpClient object, right?\nI'm hesitating to change my code again: your proposal is interesting, but I'm not sure it makes things really better or easier to understand.\n. Why not: \"ant\".equals(rs.getName())?\n. Strange character?\n. I feel we're back to the first discussion with Scott on factory/builder. Will work in that direction.\n. Tiny comment: strange indentation here.\n. The entry.getKey() is used twice: it would be extracted in a dedicated property.\n. Same comment for the entry.getValue().\n. Same here.\n. Not related to the PR.\nEclipse just told me that the dependency version was already defined in the main pom.xml: https://github.com/Jasig/cas/blob/master/pom.xml#L968.\n. Indentation should be improved.\n. The principal can be null: a check is required.\n. I think merging should be the default behaviour = true.\n. I guess you should have a blank between if and (merge, as well as between != null) and {.\nMaybe you could have a property for result.getPrincipal() as you reuse it below.\n. Can params be null? Because params.length would not support it...\n. Same question for statistics: I think it can be null and thus, this returns a NullPointerException.\n. I'm not sure to understand why you wrap the byte[] into a ByteSource to finally return a byte[].\n. If the byte[] is private, why making it immutable? It is already protected, isn't it?\n. Same question here.\n. And there.\n. I've already seen this source code before.\n. Shouldn't we have also a check on certificates being not nullhere?\n. And there.\n. Can one of the deflate method rely on the other one by transforming byte[] into String or the opposite?\n. To be honest, I'm not a super fan of the name of this class even if I don't have a better one. I thought: TransformationUtils, but it's not very clear.\n. Returning null is the original behaviour, I'm wondering if throwing a RuntimeException would make more sense.\n. Why removing the check on the length of credentials?\n. Not sure to see how this is related.\n. I missed it. 1 - 1 ;-)\n. OK. I read it like you removed the check on length whereas you added it. My fault.\n. Just wondering if we have a rule to force static final instead of final static?\n. OK. Will add the annotation.\n. I'll remove the default constructor in a future version when the deprecated one will have been released.\nIn fact, the serializerMap may never be initialized as it's additionnal serializers, so it's defined through a setter and not in the constructor. I will keep it that way.\n. The \"Java 7 try closeable\" syntax is a pure pleasure ;-) which could be used everywhere we need to close streams (I saw your JIRA on this).\n. I'm almost 100% sure it cannot be null. However, I kept the code \"as is\" regarding the null values.\nI will add a NotNull annotation as it doesn't make any sense to encode a null object.\n. It depends on the objects hierarchy: for the registered services, we could certainly do something with a generic serializer keeping the id and retrieving the object from the servicesManager.\nThat makes me take a look at the current RegisteredServiceSerializer and I find the source code pretty strange: it seems to recreate a registered service only with the service id. You are marked as the author: shouldn't we retrieve the service from the servicesManager by its identifier?\nWith Kryo, if don't register your serializer, the name of the class will be stored instead of an integer and the FieldSerializer will be used: we leave that option possible with the kryo.setRegistrationRequired(false);.\nThere are many options with Kryo: annotations or even implementing the KryoSerializable interafce.\n. You're right: I will add the DateTime handling.\n. I tend to think it's better to keep the current order and add the missing serializers at the end, to allow CAS deployers to upgrade without loosing the current serialized tickets. If it's really possible...\n. You're right: I don't see the use of serializing registered services. It's certainly for the tests.\n. Yes, order matters. Registered classes are given values 0, 1, 2, 3... If a class is registered on the fly, it's full name is used instead of an integer. It's not as efficient as a number.\nBut keeping the order is usefull if we want to allow an upgrade from a previous version to this one.\n. It's not the right definition for HTTPS and IMAPS.\n. I don't see the link between the comment and the property.\n. Is this the expression: ^(https?|imaps?)://.* you're looking for?\n. Same problem here in the definition of the service.\n. Same comment here.\n. I will add a comment to make that explicit.\n. I find that res is a strange property name.\n. Just to be sure of my understanding: we need that because the passed credentials are an array with a null element.\nImproving the test: (credentials != null && credentials.length > 0 && credentials[0] != null) was not enough, wasn't it?\n. Can we really have an array with multiple elements (more than one)? Does it make sense for the CAS protocol and flows?\n. I only find four references of these methods:\n- request scope: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/web/flow/AbstractNonInteractiveCredentialsAction.java#L103\n- flow scope: https://github.com/Jasig/cas/blob/master/cas-server-webapp-support/src/main/java/org/jasig/cas/web/flow/AuthenticationViaFormAction.java#L198\n- flow scope: https://github.com/Jasig/cas/blob/master/cas-server-webapp-support/src/main/java/org/jasig/cas/web/flow/InitialFlowSetupAction.java#L86\n- this one.\nIt could be a good simplification. I don't think there would be any side effect. I captured this idea here: https://github.com/Jasig/cas/issues/825.\n. We could directly remove the \"old\" methods in favor of the new ones. I think that deprecation is good for API and configuration, but internals can be changed more brutally.\n. I don't understand this change since I don't see any annotation to scan in the CasEnvironmentContextListener class.\n. We are currently using CASTGC: should we move to TGC something?\n. This is a fix for a small bug I found when testing: when you play a first authentication for a service and then a second one without a service, it was not working as the null service was not saved (and thus restored).\n. Yes. Will fix.\n. Good idea. Will do.\n. Yes, we have a method for that. I will use it instead.\n. I don't see any CODE for mapping a message on the browser.\n. I guess we could directly use the property: requireAttributes, couldn't we?\nOr the idea is to override the getRequiredAttributes() method for specific needs?\n. Do we really need an immutable copy internally?\n. So even if I must have all attributes, I only need one value in one attribute to be authorized. I would have expected to be authorized if I have one value for each requried attribute.\n. Do you have some use case(s) to share with us?\n. Why not using the ssoEnabled property directly?\n. Same question here.\n. Forget this one. I see the CODE in the constructor of the exception.\n. Shouldn't we have a mapping somewhere for this new code?\n. So clear with examples ;-) It makes sense to me.\n. Don't you want to make it abstract as the root hierarchy of the ticket validation exception?\n. I feel the name of the exception to be a bit too long, but I don't really have a better proposal.\n. OK. The default constructor already sets this value.\n. You removed these authentication attributes?\n. But from a client side perspective, how can we know it's a user attribute versus an authentication attribute? By the name?\n. This comment does not seem to match with the constructor.\n. OK\n. I'm not sure to understand what this method does. password and pgt are moved to a specific collection for a future encryption, right?\nIn that case, how can it be thread-safe if the cachedAttributesToEncode is shared for the whole  DefaultCasAttributeEncoder?\n. I'm still hesitating on this: so far, no CAS client consumes these authentication attributes, so we canchange things as much as we want. However, I think it would be better to have two different collections, wouldn't it?\n. Maybe I would remove these dedicated methods and use the underlying one directly: encryptAndEncodeAndPutIntoAttributesMap.\n. I'm not sure to follow you here.\nI guess the encodeAttributes method  should be final because otherwise, I can override it and get directly the password and PGT, can't I?\nAttributes are provided in plain text, so we must absolutely be sure that the password and PGT are encrypted and with the current design, it means we must be sure that they have been saved in the cachedAttributesToEncode, which is performed by the initialize method which thus, should be marked final as well.\nAm I wrong?\n. Conceptually, I feel it's two different blocks (user attributes != authentication attributes). The easiest transition seems to use the existing user attributes to return more information, but in any case, the client must be aware of what is the attribute for so CAS clients should be upgraded to deal with these new attributes, whether they are user attributes or not.\n. Small typo: expression\n. How do we set the refresh interval now?\n. What's the use of the @Metered annotation?\n. cas-management-xxx as a pattern?\n. cas-management-xxx ?\n. Previously, the root level was WARN? On purpose?\n. Previously, it was DEBUG ?\n. Previously, it was DEBUG ?\n. cas-management-xxx ?\n. A different configuration from the original?\n. I don't think it should be in this PR.\n. Why do we need this class?\nI think adding custom (logging) configuration classes is a bad idea. Because of the last CasLoggerFactory class to change TGT values on the fly for logging, I haven't been able to start the CAS server through the Maven Jetty plugin.\n. A MVC annotation in the application context?\n. I'm in favor of extension possibilities. A good point about readability with your dedicated encryption methods.\nI think that the encodeAttributesInternal method should be one that could be overriden: thus, it would be great to move out the cypher initialization and try/catch. I guess all other methods should be marked as final.\nSimple enough?\n. Sorry, I missed it.\n. Can we find a better name with cas-server-integration-jboss ?\n. Same question here: why do we chose slf4j.log ?\n. cas-management ?\n. cas-management ?\n. cas-management ?\n. cas-management ?\n. Here is the Maven Jetty plugin error: https://github.com/leleuj/cas-overlay-demo/issues/6\n. Truly, I cannot read that: aren't we just trying to initialize the Log4jServletFilter with the appropriate log4j configuration file?\n. Let me reformulate: why not having this annotation in the cas-servlet.xml file?\n. I still think this is too complicated if we \"just\" initialize the Log4ContextListener with the appropriate file configuration path: why do we have a loggerContextPackageName property? Isn't org.apache.logging.log4j.core.web the right package?\nIsn't it worrying to have Spring not support log4j v2? As a mesure of log4j v2 adoption and support...\nWhat Google trends says: http://www.google.com/trends/explore#q=log4j%202%2C%20logback&cmpt=q&tz=\n. I still see many slf4j- files which could more appropriately named, like ehcache-integration- in that case.\n. I've tried a few things, but no debugging. I didn't have the right reflex on this.\n. I find it pretty strange to find the default executor inside the interface, isn't it?\n. Isn't there any default class which does this job? In some library like Shiro.\n. Just wondering about the extension capabilities of this class? Shouldn't we be able to choose the extra information we want to rely on?\n. Same comment.\n. This code (4 lines) is duplicated from the previous method. What's the magic between keys.put(\"kty\", \"oct\"); ? Cannot we have some constants to help understanding?\nCan this initialization happen outside the encryption/decryption methods?\n. Why passing the registeredService?\n. registeredService.getLogoutUrl() could be stored in a variable.\n. Why not using the logoutUrlof the logout request as previously computed?\n. I always like @since annotation for my poor memory ;-)\n. Cannot we just use the view name? Shouldn't we have a constant (final static) ?\n. I still find that very strange to request the CASImpl to get all tickets.\nI guess this operation might take some time and we should not call this endpoint too much, right?\n. Cannot we just return a String with the name of the view?\n. I think this one is useless considering the previous component-scan.\n. Shouldn't we have a dedicated CSS file?\n. You removed the highlight library, but I don't see the removal of the specific CSS styles.\n. Can we have a null ticket here?\n. Maybe it's just the rendering in Github, but the indentation looks incorrect.\n. This change is not related to this PR, isn't it? I guess there was already a fix to trap encoding issue...\n. Is it an acceptable use case or should we trigger a WARN?\n. Should'nt we have a setter for this to be able to use another implementation?\n. I'm not sure to understand the role of this onclick.\n. Yes. I will do that.\n. I guess there is a small typo: Iff instead of If.\n. Maybe you could have a constant for publicWorkstation.\n. Definitely a constant here...\n. This is no more necessary as we don't use cookies, right?\n. I think the rememberMe checkbox also deserves a tabindex.\n. You set a rule to forbid static initialization?\n. OK\n. Isn't it a double check as we should only retrieve beans in the INCLUDE_PACKAGES (lines 236 - 242)?\n. I'mp surprised by this change: I don't see the old behaviour I had in mind, i.e. it would not work without a service parameter.\n. OK\n. I've seen this String as a constant in the CertUtils class (but private).\n. This file: userCA-valid.crl is not in pull request...\n. Can we have multi-threading issues with this shared objectName?\n. Can we avoid this finally by using a Java 7 try (resource) {}?\n. I'm not sure to understand why we want to use the SNAPSHOT: I don't see any new feature (https://github.com/Jasig/cas-server-security-filter/commits/master)\n. Forget my comment, I missed your latest PR on the cas-server-security-filter...\n. BTW, shouldn't we rename ticketGrantingTicket as parentTGT or something to make that obvious?\n. I guess it should be final.\n. Yes, I don't see how this could be changed. Will do.\n. This is definitely part of the pac4j authentication mechanism, I don't see what could be the extension here.\nIf you want to drastically change the pac4j authentication mechanism, override the doAuthentication method. To plugin in your own logic after a regular sucessful authentication, override the createResult method.\n. Isn't it exactly what you can do with the createResult? Which is actually sending an exception if the identifier of the user profile is null.\nDo you want me to add the HTTP request and response as input parameters?\n. No problem.\n. You really compressed the source code, don't you? ;-)\n. Why not have debug like the other log just above?\n. Maybe I would keep a String here, just for the case we want to test a real Network IP definition (example: 127.0.0.1/32) and not only regexp...\n. This is the IP address of the current request, isn't it? Multi-threading issue?\n. Isn't it too much by default for a reverse DNS lookup? 2 seconds?\n. I don't like big classes: I would extract this inner one...\n. Is it a real use case? Sounds pretty complicated to me...\n. No LdapUtils.close(connection) ?\n. Do we really need to test an external class?\n. I'm sure it's not, but this change feels like magic. Any way to improve this source code? Extracting the chainedAuthentications.size() - 1 code into a meaningful variable?\n. I guess that ... must be replaced by a proxy (list).\n. It could rely on properties inside the cas.properties file, like we do usually. \n. OK. So let's keep it that way: if someone wants to override / disable security, it should require some extra-work and explicit configuration.\n. Maybe we could have (not perfect, but a little more meaningful):\nint numberAuthenticationsExceptPrimary  = chainedAuthentications.size() - 1;\n. Why not rely on our already existing reloading system? https://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/webapp/WEB-INF/spring-configuration/applicationContext.xml#L72\nI think it would be better not to multiply configuration options.\n. Yes, that sounds good. I've always been expected to see @Transactional annotation at the registry level.\nThough, in the CentralAuthenticationServiceImpl class, every annotated method generally performs a read then a write on a ticket. They were previously enclosed in the same transaction, I fear some side effects by having now separate transactions: what do you think?\n. required=true is superfluous, isn't it?\n. Generally, the groupdIdis above the artifactId.\n. Same here.\n. required=true is useless...\n. OK\n. We exit the loop in case of exception and no longer watch the directory, don't we? I would have expected the exception to be ignored.\n. Isn't the load call sufficient here?\n. I was thinking about the JpaTicketRegistry class which has almost all the sufficient @Transactional annotations, not the JpaServiceRegistryDaoImpl class. Sorry for the misplaced comment.\nHowever, let's take the destroyTicketGrantingTicket method for example:\n1. one call to the ticket registry to get the TGT: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java#L230\n2. one call to the ticket registry to destroy the TGT: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java#L233\nAm I missing the point?\n. I'm not sure about this either. It might also depend on the chosen isolation level.\nAs generally the first operation is a read and then a write, I expect no side effects, compared to a write followed by a read because in that case, the write would be visible only to the following read in the same transaction.\nI remember some reported concerns / issues regarding performance and lock with the DB support, I guess having smaller transactions will help.\nSo I tend to think that your changes are a good choice.\n. Yes\n. How is the initialization done in that case?\n. Maybe you missed that small comment: \"generally, the groupId is above the artifactId\".\n. Why this Assert.notNull check as we already have a @NotNull for the parserPool?\n. Isn't it the same change than in https://github.com/Jasig/cas/pull/1032/files#diff-3eae41a3c73981deb47c12d09cffffeaR199?\n. I'm not very comfortable with the concept here, but I'm surprised to see this extraction happens in an Action: wouldn't it be better in some ArgumentExtractor?\n. As the entityId is used to build the url, can we fear some vulnerability?\n. I feel strange to have a cron job defined directly in the source code rather than in a Spring XML context.\n. I don't think that such computations should happen in the view but before...\n. Just nitpicking on this: if we are here, the crls.size() does not equal the expiredCrls.size() so after removing all expired CRL (crls.removeAll(expiredCrls);), the crls cannot be empty, so again, if you want the revokedCrls list to be the same size as the crls list, you don't need the !revokedCrls.isEmpty() check.\n. I don't really understand this logic: it seems we get the CRL from the cache or from an url, right? Why is the code not the same fater the retrieval?\n. I understand, I just found that the source code doesn't make that obvious. Anyway.\n. Not really, but attackers are generally creative people ;-)\nIf the entityId parameter is at the end of the url, it may be complicated to trick the system: can we imagine using another entityId that the right one? Could we get more roles / rights ?\n. OK\n. I understand this check: revokedCrls.size() == crls.size(): if all crls are revoked, let's throw an exception. What I say if this condition is true, the revokedCrls being equals to the crls which cannot be empty, then the second check is not necessary.\n. Don't use version 1.7.1 to keep compatibility with opensaml.\n. bug fix\n. If all crls are expired, you are trapped in the first if check (https://github.com/Jasig/cas/pull/992/files#diff-1cc175d11f2a81cb0773374cd6d0038cR91) and never goes through the else clause we are talking about.\n. About a tricky attack, can we imagine having some malicious CAS service (because of a poor white list definitions) using a real entityId to look like a real service and fool the user?\n. To make the build pass regarding Checkstyle.\n. Yes right, I may be pushing things too far on this.\n. For my understanding, when are the successes null? Should it ever happen?\n. I'm a bit surprised to see a transient attribute used for the equals method.\n. Why is the cache name not used in the equals method?\n. I guess this test could be \"smartly\" merged with the test above: if (!(o instanceof RegisteredServiceProxyPolicy)) {\n. Minor comment: response.getStatus() can be extracted as a variable.\n. Where is the associated implementation? Is it meant to be some CAS deployer specific implementation?\n. For an OTP support, I would not have expected the handler to inherit from the username/password handler.\n. I'm not sure to understand the logic behind the registry.\n. I didn't know this fake Mongo for tests: very interesting!\n. Why not, but I don't like to see some code to drop / create the collection. I prefer to do this kind of operation manually or by script.\n. We need an index of this \"id\", don't we?\n. It feels a bit strange to have all these converters to ignore some field versus using the transient keyword, but why not.\n. I trust you, but do we really have all these kinds of objects in services' definitions?\n. Understood\n. In fact, you need the username to verify if the OTP really belongs to the user, don't you? In that case, the username/password credentials makes sense.\n. I'm always surprised to see all this plumbery as we have Spring everywhere which has a good hashing / encryption support or as we could use shiro-core which also has a strong hashing / encryption support.\n. You choose the inheritance way, I expected some composition in which you would have a new CrypticTicketRegistry in front of a regular registry: new CrypticTicketRegistry(ticketRegistry); This way, you would not have changed the existing ticket registries, wouldn't you? Easier and more backward compatible.\n. The ticketRegistry is defined in the ticketRegistry.xml file, so that's the only place you need to change something: rename the default one and create this new one. I don't think it's too much work, not more than setting the cypher to use.\nAnd yes, we would need to update the documentation, but this is something we cannot avoid, even with your proposal.\nI'm not sure to understand why some ticket registries would not support hashing / encryption?\n. 1) Deployment\nI have a better proposition. Without encryption:\n<bean id=\"ticketRegistry\" class=\"org.jasig.cas.ticket.registry.DefaultTicketRegistry\"/>\nWith encryption:\n```\n\n\n\n```\nOne change in the ticketRegistry.xml file. That's all.\n2) For registries that do not support encryption\nUnless handling that properly, my solution will generate exceptions that might be tricky to understand. On the other side, your solution will work but without protecting the data.\nWhat's the worst? Thinking it works and getting an error or thinking it works and it doesn't without any error? So you think your data are protected in production and everything is unsafe. I'd prefer to get an error in some validation environment and start trying to understanding what's going on.\nAn even better solution would be to use my solution and add some boolean supportsEncoding() method to each registry so that the cryptic registry could check that and throw a clear exception about the issue.\n. Re-reading and reviewing everything once again, I understand things better: the new AbstractCrypticTicketRegistry only applies to distributed ticket registries. So you just need to set a cypher executor to add data protection and it does not break backward compatibility.\nYes, it's a better solution than my proposal.\n. Should it rather be maxAge?\n. It's the date time of the CasVersion class: so it can be seen as the date time of the last installation / update of the CAS server, cannot it?\nI'm a bit skeptical of its use.\n. Forget my previous comment. I missed your explanation.\n. It's really useful for our CAS server at Heroku, but I'm a bit skeptical of the usefulness for any regular CAS deployment.\n. You're right, the default login page is mainly for us. I would be great to have it as well at startup.\n+1 that way\n. Here is the change: if the openid.identifier is to be defined, we use the principal found in the assertion.\n. Here is the change: if the openid.identifier is \"http://specs.openid.net/auth/2.0/identifier_select\", we don't have any default username for the login page and in the case that the user is authenticated, the username is taken from the principal.\n. An openIdPrefixUrl is added to be able to rebuild the full OpenID identifier: this prefix + the username taken from the authentication.\n. Just a new constant.\n. Yes, Indeed, the ticket registry is used in another spot also. I'll clean both.\n. That's true, but I could do that for many constants. Will go further on this.\n. Seeing all these new useless Javadocs, I start thinking that our rules are too restrictive: what's the value of The constant LOGGER. Javadoc? Same question for The Form data., The Service data., The Status....\n. I'm always suspicious with private static, it feels incompatible: what are the reasons behind?\n. They are used by the inner class, aren't they?\n. There is a refactoring here which is mixed with the \"dependency upgrades\"\n. Why removing the public keyword?\n. Same question about the public keyword removal here and in other spots...\n. What's the difference between AUTO and IDENTITY? Why this change?\n. Yes, but it feels a bit strange, doesn't it?\n. OK\n. I'm in line with the changes, it's just that it was not what I was expected because of the title...\n. OK. I missed the public static caller.\n. Another habit we need to get use to.\n. I don't think it really works, or by luck. Because the openid4java library does not support line breaks very well. As we choose to use \\n to make it work, we should not leave a line break depending on the operating system just before, at the beginning of the file.\nBut the issue I see comes from the casOpenIdAssociationSuccessView.jsp.\n. It means we don't need to comment for loggers, doesn't we?\n. But we still need to comment any property? Like status or formData...\n. OK\n. format is good, just wondering if we should see bigger and imagine very different kind of responses?\n. We must add that if the format is not supported (by the CAS server or the service): a 400 bad request error must be returned. So that CAS clients can start supporting that.\n. I'm wondering if we should use version 3.1.0 to make the change notable.\n. I don't know yet, but I was trying to anticipate some kind of anticipation. Maybe it's too much speculation.\n. Smart initialization.\n. This could not be registered via the appropriate classes, couldn't it?\n. Both registration components cannot be merged, can they?\n. So here is our new rule for module configuration (and I'm thinking about the new OAuth / OpenID connect module I should build): I would just need to add a cas-servlet-oauth-oidc.xml if required, right?\n. No cumbersome Javadoc :-)\n. You reverted the split into small methods, didn't you?\n. Is there a real change here? This instanceof test seems to have changed...\n. No change here except that you inline this source code, don't you?\n. Why these new equals and hashCode methods?\n. It feels a bit strange to find \"cache\"  methods in the default implementation which has no cache.\n. The source code is a bit tricky: there is a conversion from principal to person and one from person to principal: any possible improvement?\n. Yes, it's feasible, but I'm not sure to see what would be the use cases you want to address by using Shiro.\n. Which method was too long?\n. OK. But why redefining both methods just on relying on the parent behaviours? -> .appendSuper(super.equals(rhs)) and .appendSuper(super.hashCode())\n. Yes, but the conversion happens in the to directions: retrievePersonAttributesToPrincipalAttributes (person -> principal) then convertPrincipalAttributesToPersonAttributes (principal -> person): is it really necessary?\n. Starting reviewing this PR about Shiro integration, I was just expecting some Realm wrapper. Nothing more. Do you have a real use case behind that or do you imagine it can happen?\n. I'm not against this change, even if I have the feeling it's a bit too much (I mean the roles managament as well as the ini configuration).\n. Shouldn't we have our documentation based on JSON examples right now? As the default services registry is the JSON one?\n. Is this default context really necessary?\n. Do we need a new ResponseBuilder for each service? I tend to think the response builder is a singleton (one by type).\n. null: in that case, we don't have a response builder?\n. The attributes.isEmpty() is a missing check, isn't it?\n. Why testing if the parameter is not blank in the setter? It's the first time we do that in setters, don't we? Is there any particular reason?\n. I don't think so, I don't see any use case for that.\n. Yes, but if someone wants to use it, he will find it in the root pom while he would'nt know if it's only defined in this pom.\n. What exceptions are we catching exactly?\n. I expected a else if clause here.\n. OK. Understood.\n. OK. Can we narrow the catch clause to a RuntimeException for example?\n. In that case, I'd prefer so.\n. Indeed, if we have a new ST, the TGT must be updated, but I thought it was internally done by the AbstractDistributedRegistry by using the delegators: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/ticket/registry/AbstractDistributedTicketRegistry.java#L230. Am I missing the point?\n. OK. So the idea here is to have only one tickets registry.\n. What's the problem with the code?\n. Why do we explicitly remove children tickets? Most of the time, it's service tickets: aren't they removed at service ticket validation?\n. OK. So you moved the tickets removal in the deleteTicket method.\n. I agree too at a theorical level, though my concern is that it may generate many unnecessary calls (as the ST is either expired or was explicitly removed at the ST validation). Pinging @mmoayyed to be sure we all agree.\n. OK. Im' in line.\n. Sure. I can change that name to something more functional.\n. Copy that.\n. I would not name collection the collection, but activeSsoSessions.\n. Nor entry, but activeSsonSession.\n. Why parsing manually the body? Why not having a JsonService object?\n. So the only thing I need to add a new service is to be authenticated: I was expecting some Spring security involved here, but maybe it's overkill.\n. OK. I see. Generally, we expect security to be ensured before accessing a resource using the appropriate Spring Security filter, but it's certainly easier this way.\n. I don't see where the service \"is always disabled by default\", it looks like it can be defined in the JSON request...\n. Good idea. Will add.\n. Yes, we agree on a per-service configuration, but I was originally in favor of a general configuration (in the cas.properties for example). In that case, it would not be a breaking change and we could backport it for 4.1.x and 4.0.x.\nIt's a fairly \"elaborated\" tuning, I'm still not sure it deserves a per-service configuration: last chance to change your mind!?\n. OK. Will add.\n. Or we can use a general configuration for 4.1.x and 4.0.x and a per-service one for 4.2.x?\n. Shouldn't we have a TimeBasedRegisteredServiceAccessStrategy for this need in addition to the DefaultRegisteredServiceAccessStrategy?\n. Isn't it already available somewhere?\n. Same question...\n. I'm not completely comfortable with the design and naming: DuoAuthenticationHandler calls DuoAuthenticationService which calls DuoWeb (static methods) using Util and Base64.\nCan you elaborate a little more about the choices behind this design and naming?\n. Glad we see things the same way now ;-)\nWill update PRs and use constructor to avoid any breaking change.\n. Things are harder than expected. We forgot that the PGT is also granted from the service in the CASImpl (which feels a bit like an API circular reference):\nfinal TicketGrantingTicket proxyGrantingTicket = serviceTicket.grantTicketGrantingTicket(pgtId,\n                                    authentication, this.ticketGrantingTicketExpirationPolicy);\nSo if I want to pass the onlyTrackMostRecentSession parameter to the TGT constructor, I still must change the API.\nSo I think the previous solution where the grantServiceTicket method of the TGT is updated is easier to understand and has a better design: @mmoayyed : are we in line?\n. Updated PR that way.\n. Yes, that's what I meant: a new TimeBasedRegisteredServiceAccessStrategy extending the default one...\n. Thanks for the explanation. It's a very strange choice from Duo, but it explains the design.\n. As it's a new major version (4.2) and as I'm confident this change won't break anything in almost use cases, I choose to enable it by default.\n. What is the annotation-config=\"true\" for?\n. Here is the fix, isn't it? It looks like we returned to the first implementation we had for that and which was replaced by the InflaterOutputStream.\n. I don't think we need to keep this file: .cvsignore, don't we?\n. Strange to have two lines on properties...\n. This package is already scanned: https://github.com/Jasig/cas/blob/master/cas-server-webapp/src/main/webapp/WEB-INF/spring-configuration/applicationContext.xml#L42\n. And our cas.properties is getting bigger again ;-)\n. One useless file.\n. This is an additional check, isn't it?\n. It was misnamed.\n. Yes, there is a specific pac4j logo for CAS!\n. This is the wrapper which internally uses a pac4j authenticator and profile creator to act as a CAS authentication handler.\n. By default, the needed action-state for authentication delegation, commented.\n. Not excatly, there is one root wrapper: AbstractWrapperAuthenticationHandler which is independent from the credentials type, because we must know how to convert the CAS credentials into pac4j credentials. Then, we have a first implementation: UsernamePasswordWrapperAuthenticationHandler for UsernamePasswordCredential.\nThough, generic parameters are missing to ensure the right type of credentials (CAS & pac4j). Will add.\n. Yes.\n. Missing in the doc and cas.properties: will add.\n. I think you see your point, but how would you create two wrappers with different authenticators?\nSo I think this wrapper needs to be defined in a context with the appropriate authenticator (and profile creator), which is fairly straightforward.\n. Credentials are the most sensitive and they are displayed appropriately (a few lines avode). We also consider some information like access token (OAuth) to be sensitive and they would appear here with this log.\nSo the risk is: if you turn on DEBUG on org.pac4j and read the log in the following hours (the access token lasts two hours for Facebook for example), you can take it and act on behalf of someone.\nDo you want me to remove this log, change it to trace or keep it (as the risk is unlikely)?\n. The AbstractWrapperAuthenticationHandler is generic, depending on CAS and pac4j credentials.\nThis UsernamePasswordWrapperAuthenticationHandler is the most useful handler where CAS username/pwd credentials are converted into pac4j username/pwd credentials.\nThe only left use case is for pac4j string token credentials (one string as the credentials), but I didn't know from which CAS credentials we could convert this.\nI'm open to any suggestion?\n. Yes, I'll keep an empty context.\n. Yes, will do.\n. The problem I see is that if I add a @Component annotation, this handler will be automatically scanned and created, which is not what we want.\n. We could, but I think it's not practically feasible as we have twenty clients or something...\n. In fact, this pac4j wrapper is not meant to be used with authentication delegation. It's for direct authentication in the CAS server (but with a wrapped pac4j authenticator).\nI put it in this module for simplicity, but it should not be instantiated by default. It should even have it's own module: cas-server-integration-pac4j. What do you think?\n. I will do that. In fact, direct authentications happen when credentials are provided for each request: so a regular CAS authentication would be considered as a direct one from the pac4j point of view, thus the use of the authenticator.\nIndirect authentications occur at an external identity provider, it's the \"authentication delegation\" provided by the cas-server-support-pac4j module.\n. New documentation to explain how to use a pac4j authenticator wrapped in a CAS authentication handler.\n. This class is made to deal with pac4j configuration: to build it from scratch or update it with clients declared by properties.\n. Notice the callback url is now optional as it's provided by this class (doc updated).\n. For now, Facebook and Twitter clients can be defined via properties. More clients can be added later on.\n. An empty context: kept for consistency with other modules using automatic configuration.\n. Why is there a specific module for Memcached monitoring? I think it's tightly linked to the Memcached module, isn't it?\n. Yes, definitely. And the IpProfileCreator also. I should have added a big warning: it's too early for a comprehensive review.\nHandling practical use cases is a good way to check everything fits in the pac4j paradigm and add the missing components in pac4j.\n. I admit that pac4j seems more limited than Spring Security here as there is no EL syntax like hasIpAddress. Nonetheless, if ever you change this expression by: hasRole, you likely need to change your securityContext.xml configuration to compute this role. Like for pac4j.\n. Good add-on: this was missing as a dedicated topic!\n. I thought we said that we don't scan packages in submodules, but only in the CAS server webapp...\n. Forget about it: I just noticed it's a Spring context for tests.\n. Why is the ticket registry in the monitor module?\n. I updated the pull request. Thanks to new constructors, the config definition is a little shorter.\nNotice that a 401 HTTP error is returned instead of a 403 HTTP error for Spring Security. To generate a 403 HTTP error with pac4j, you need this configuration:\n```\n    \n\n\n\n\n\n\n\n\n\n<mvc:interceptors>\n    <mvc:interceptor>\n        <mvc:mapping path=\"/status/**\" />\n        <mvc:mapping path=\"/statistics/**\" />\n        <bean class=\"org.pac4j.springframework.web.RequiresAuthenticationInterceptor\">\n            <constructor-arg name=\"config\" ref=\"config\" />\n            <constructor-arg name=\"clientName\" value=\"AnonymousClient\" />\n            <constructor-arg name=\"authorizerName\" value=\"IpRegexpAuthorizer\" />\n        </bean>\n    </mvc:interceptor>\n</mvc:interceptors>\n\n``\n. The new current behaviour is a 401 HTTP error when the user does not have the right IP address, which does not change anything in fact: the same error page is displayd with the same layout and message, only the \"403\" number is replaced by \"401\".\n. The dependencies are very limited (at least for this submodule): slf4j, commons-codec, commons-lang3 and guava. I'll check it doesn't conflict with the ones from the CAS server (after resolving this issue: https://github.com/pac4j/pac4j/issues/317).\n. I also changed the default Memcached server to belocalhostwhich works out of the box for a local Memcached on a development workstation.\n. Why did you move the controller and handling in the application context? It fits more in the servlet context, doesn't it?\n. Why this change?\n. Why is theskewAllowancenot pass to theGoogleAccountsService?\n. Good point\n. Can we just ignore an invalid format and still return a service?\n. I'm not sure why you remove the@NotNullannotation for theencodingAlgorithm. It's mandatory, isn't it?\n. Forget about my comment: I see the check now...\n. I didn't know about thiscommaDelimitedListToSetmethod...\n. This is certainly the right to think about the plist of thecas.propertiesfile.\n. pac4j v1.8.1 will be released end November / begin December. I'll update the version after that.\n. Good point. I finally used the name of the providers as I encountered two problems: 30 images at least would have been required to match all available providers and I wasn't sure to know what would make sense for SAML, OpenID Connect, CAS OAuth wrapped server...\n. It makes life easier for CAS deployers: as soon as they add a new provider, it shows up. But I doubt that any CAS deployer will keep the layout and design on these new links (and the login page more generally).\n. BTW, I forgot to update the documentation. Will add that shortly.\n. I guess you could define more specific caches. For example:private IgniteCache serviceTicketsCache;.\n. Maybe you could add a@NotNullannotation where the property is defined.\n. You should also consider to have a localhost instance by default (like Memcached). Properties should always be updated for production as every production environment is different.\n. I think you forgot to finish the comment, didn't you?\n. if themongoTemplateisnull, shouldn't we fail at startup?\n. Shouldn't we pass aPrincipalobject finally?\n. I would have expected a bigger cleanup in thegrantServiceTicketmethod as I had in mind that most checks were done in the case of proxying...\n. Small remark: why not usingAssert.notNullor something like that?\n. Or even better a@NotNull` annotation for all properties...\n. Don't tell me we effectively reached the previous maximum?\n. BTW, I guess we said we could avoid such trivial Javadoc.\n. I don't understand this: we merge all principal attributes together?\nI was expecting something a bit easier here: we loop on all authentications, merging attributes authentication, keeping success / failures and credentials and the principal is the one computed by the principalElectionStrategy.\n. I understand a supervisor is an authentication manager which authenticates and collects the authentication in the authenticationContextBuilder.\nThis could maybe be replaced by an upgrade AuthenticationManager: what do you think?\n. It's certainly me, but I don't understand how this will work in a multi-threaded environment: an authentication manager acts on specific credentials and returns an authentication, but we have only one authenticationContextBuilder which collects all authentications from all users?\nCurrently, we attach the authentication to the webflow, don't we? Shouldn't we attach the authentication context builder to the webflow as well? Or do we imagine UI interactions which collect authentications and happen outside the webflows? \n. It's a good idea to setup a test database in a MongoDB cloud provider.\n. To test MongoDB in pac4j, I use an embedded MongoDB: it's a bit heavy (it needs to be downloaded first), but it works well: https://github.com/pac4j/pac4j/blob/master/pac4j-mongo/pom.xml#L57\n. At first, I was a bit surprised by the merge of the principal attributes (and only that point), but thinking a little more about that, that's not surprising as multiple authentications occur, producing multiple principals and the identity is the sum of these principals.\n. How is this method called?\n. What's the use of declaring an abstract class as a Spring component?\n. Same question here\n. and there\n. We'll have two secrets eventually.\n. Multi-threading issue I think: you get a specific jwtToken for a registered service, but you only have one shared authenticator for all tokens and services. \nI guess the pac4j wrapper classes hierarchy must be changed to pass the appropriate authenticator for login.\n. You could certainly use this pac4j class: https://github.com/pac4j/pac4j/blob/master/pac4j-http/src/main/java/org/pac4j/http/credentials/extractor/BasicAuthExtractor.java if you are not reluctant to add this dependency, to extract credentials.\nI realized this needs to be improved BTW: https://github.com/pac4j/pac4j/issues/395\n. So this is blocking, the user must enter credentials in the basic auth popup.\n. OK. But you won't set a value if you don't have an implementation, so the child class will also have a @Component. It feels useless to me, doesn't it?\n. Ah! It's shorter now.\n. Cannot we move this package name in an import?\n. At first, I thought you forgot to initialize this one, then I spotted the initializeDefaults method.\n. That remains complicated from my point of view. What are we doing here: take the current authentication context from SWF, take the credentials, validate them, update the current authentication context with the new authentication and save the authentication context back again in the SWF, right?\nLet me try to propose some naive implementation:\nfinal AuthenticationContext authContext = WebUtils.getAuthenticationContextFromSWF(context);\nfinal Authentication authentication = auhtenticationManager.authenticate(credentials);\nauthenticationContext.add(authentication);\nWebUtils.saveAuthenticationContextToSWF(context);\nfinal ServiceTicket serviceTicketId = this.centralAuthenticationService.grantServiceTicket(ticketGrantingTicketId, service, authenticationContext);\nThe principalElectionStrategy would be attached to the AuthenticationContext created in the InitialFlowSetupAction...\n. Of course, my counter proposal could not be the final source code, but it may help to find improvments. Even for me, it's hard to read the changes and I've spent quite some time on this PR...\n. Sorry to be so \"painful\". And you're right: SWF is not related here.\nTrying to pushing my ideas once again:\n1) I think credentials cleaning should go into the AuthenticationManager: it's a few lines of source code and I don't see where they could be used otherwise. So I would remove all the stuffs around: AuthenticationTransactionManager and AuthenticationTransactionFactory\n2) We need to have some authentication context, add authentications to it and then generate a final authentication (using the PrincipalElectionStrategy).\n3) Do the AuthenticationContext really need to carry the Service?\nLet's try to rewrite this part. I assume the PrincipalElectionStragegy is injected in the class as well as AuthenticationManager (maybe this is where we need your repository to gather both):\nAuthentication authentication = authenticationManager.authenticate(credential);\nAuthenticationContext context = new DefaultAuthenticationContext();\ncontext.collect(authentication);\nAuthentication result = context.buildFinalAuthentication(principalElectionStrategy);\nDoes it make a little more sense?\n. Don't we need some bridge with slf4j?\n. It works with a null warnCookieGenerator?\n. Forget. I see the check now.\n. It should be in a else clause.\n. Yes, it's a bit too short. Will do that.\n. OK\n. OK\n. For now, I'd prefer to keep this method \"as is\", because this is the first PR of the OAuth series, so I'm not sure if it will be needed later on.\n. In fact, the above method: verifyAccessTokenRequest already does this check: https://github.com/leleuj/cas/blob/cas-1387/cas-server-support-oauth/src/main/java/org/jasig/cas/support/oauth/web/OAuth20AccessTokenController.java#L151\n. Same discussion we had for pac4j: $ is part of the regexp to ensure we change the last occurence.\n. \"enabled by default\": you mean having default values?\n. Agreed with both comments.\n. It's nice too this way.\n. Indeed, the new HashMap<> is alone and not assigned to anything.\n. We could certainly remove the first echo $JAVA_OPTS then (2 lines above).\n. Can we centralize with Gradle dependencies we use in several modules?\n. Nothing in Spring to do that?\n. So I need to generate the metadata calling the appropriate endpoint and then clean them, right? It's not completely clear to me.\n. OK. In that case, I don't understand: \"the generated metadata MUST be reviewed and massaged slightly to match the CAS configuration\".\n. How is this related to the pull request? And it's not the first change which seems unrelated: any sync issue?\n. Definitely verbose all these exclude: we loose the Maven transitivity here, but definitely less a nightmare for CAS deployers who don't need to exclude dependencies everywhere: I (used to) do that in my overlays.\n. Why are these constants not located in the SamlIdpConstants? They are SAML IdP constants, aren't they?\n. Refresh my memory on this: the controllers are declared with Controller, aren't they? Why do we need to add them explicitely?\n. Can you improve the Javadoc here to help SAML newbies like me? ;-)\n. Newbie question again: SP metadata?\n. So we need the web session to make it work, like for OAuth server support in fact.\n. What's the callback for? Does it work like the OAuth server support as a facade which delegates to the CAS server for authentication?\n. Javadoc please.\n. The OAuth protocol is not related to web sessions. But our current implementation is because it was easier developing that way. Maybe I'll revisit that as well.\n. That's an option, I created the SessionStore in pac4j with the same idea. That said, we can also try to stick with the webflow although I fear it may be complicated.\n. Shouldn't the AuthenticationPolicy be part of the PolicyBasedAuthenticationManager?\n. I'm in line with Daniel: isn't escaping required?\n. Can we have a better name?\n. I mean: more descriptive, to distinguish between the checks.\n. Let's say: isPrincipalAllowedForThisService\n. Looks good\n. Not very important, but I think it's quite the opposite: \"In the event of a sudden loss of cabin pressure, oxygen masks will automatically descend from the ceiling. Grab the mask, and pull it over your face. If you have childs travelling with you, secure your mask before assisting with theirs\"\n. I may not following properly the algorithm, but how are the proxy tickets deleted.\n. As the DefaultTicketRegistry lies in memory, what's the advantage of encrypting tickets? As it's mostly used in development, it makes debugging harder.\n. \"Encryption is off by default.\": no problem then.\n. Right. The ProxyGrantingTicket is a child of TicketGrantingTicket whih makes the first test true.\n. initializeAuthenticationTransaction instead?\n. No, you're right, it's really about handling the initial authentication transaction.\n. I thought we had given up on this one?\n. Yes, two letter for Oauth Code\n. In the AbstractTicketRegistry in the core-tickets module,  the getProxiedTicketInstance method builds the delegators and we need specific ones for the OAuth tickets.\n. That was my original idea. But in that case, OAuth tickets will be available through the ServiceTicketDelegator which misses the getAuthentication method and thus needs to make public its getTicket method: ugglier from my point of view compared to a clean hierarchy as I propose.\n. Read my previous comments. Either we open the getTicket method from the ServiceTicketDelegator to get the ticket and call the getAuthentication method or we have a full OAuth tickets hierarchy.\n. Indeed, it seems the right thing to do. I will add this.\n. New OAuth tickets delegators are added when the OAuth module is added.\n. I don't think they are inconsistent, but practically, I agree they certainly won't be used at the same time.\nTo be consistent with other components in CAS, we offer this injection capability which is thus not required and we need to add the default service ticket delegators of course.\nFor the OAuth support, I could have created a specific LinkedHashMap in the OAuth Spring context XML file to inject it (though I choose another option by getting the ticket registry and adding the new service ticket delegators at the first positions).\n. Yes, you are completely right. This \"trick\" was useful to make tests pass when other modules depend on the cas-server-support-oauth one. They now depend on the cas-server-support-oauth-core module which solves the problem.\n. Yes\n. Do you mean: @Entity and @Table? For access tokens, the discriminator value is different so it's mandatory, isn't it?\n. OK. I got it. I confused: @DiscriminatorColumn and @DiscriminatorColumn. Will fix.\n. Yes, autowiring won't work, @Resource is necessary, though it becomes mandatory which is not our use case. I will remove autowiring for now.\n. What's the use of this default value: NO_CONFIG_PROVIDED?\n. oK. I think I get it: the ResourceLoader returns false to exists() in that case, right?\n. We don't send any message, right? We just call the url?\n. You raise a good point here. For simplicity, it's currently the same timeout as for the TGT, but it should be optionnally changed. I just opened: https://github.com/Jasig/cas/issues/1505 to track that improvement (we can also have the same question for OAuth codes). It will be revisited at least when dealing with refresh tokens (another timeout).\n. I agree: that's not \"pretty\", but it saves null check on many places. My first design was to return null, the ideal would be Optional in fact.\nI can revert if you want...\n. OK. Let's do that, I will wait for Java 8.\n. I don't see any blank space here.\n. No blank space.\n. No blank space.\n. We don't have any centralized urlEncode method currently and I have found several occurences here and there so we need one.\nCompressionUtils doesn't seem the best option, I would prefer using the new EncodingUtils.\n. This time, Checkstyle did not complain, but I will add them.\n. I see your point, though, built urls are very different and only used in that class. I'm hesitating on this.\n. OK. I think it reads easy so this pull request is ready for merge...\n. Why did you not just add the \u00ecsNotBlank  test on the currentDn string here?\n. OK. I get it.\n. All validation logic is now a specific component.\n. The resource owner password grant type is ensured by the appropriate security configuration on the /accesstoken endpoint.\n. The release should be available next week.\n. No, this is really a specific user profile of the OAuth server support (for the resource owner grant type).\n. Really specific to this implementation.\n. For now, we return the access token as a plain/text. We'll do the same for the error page. But we'll need to provide a JSON capaibility in both cases.\n. Good question. I have special profile types because I want to be sure that the profiles have been created by the appropriate authenticators to avoid any vulnerability coming from cross authentication: using the client grant and authenticating as a user for example...\n. Why is this method empty?\n. Or even necessary?\n. Typo: getTimestamp instead of getTimstamp\n. Shouldn't we rely on the ClientInfo here? Which has exactly the same issue: obtaining the IP from an header or directly from request.getRemoteAddr?\n. Use the provided service, not the callback one!\n. OK. I will use: RegisteredServiceAccessStrategySupport.\n. OK. I will use the registered service as input for this kind of check.\n. I haven't found any method doing that in Spring: can you elaborate a little more? Are you referring to @RequestParam?\n. OK. I will do that.\n. All theses classes (authenticators and profiles) are not meant to be extensible. I will make them final for now and we'll see if any extension request comes in.\n. What's the idea behind this @Lazy(true) as all beans will be needed, won't they?\n. OK. And it makes a big difference, I mean, you can see it looking a the \"startup time\"?\n. There is already a call to setUserProfile a few lines below...\n. I'd rather stay with the specific OAuthUserProfile than with a generic UserProfile. Because in that case, considering the authentication that must have occured, it must be an OAuthUserProfile.\n. Don't we want to handle that properly instead of throwing an exception and generating a 500 error?\n. Exactly, if creation time + max timetolive is before now, the ticket is expired.\n```\ncreation date   +   ttl             now\n|--------------------|               X            => expired\ncreation date      now     + ttl\n|-------------------X---------|                   => still alive\n``\n. Good catch. Will fix and do some renamings for consistency as I realized that theoAuthprefix is not necessary for access and refresh tokens.\n. Not a big deal, but I guess it should be4.2.1. How to pass anullvalue here?\n. For OAuth, you don't need any principal resolver, the authentication handler already returns aHandlerResult. I see your point, but I don't think it's feasible. ThecreateAuthentication method is called twice: in theOAuth20AuthorizeControllercontroller and in theOAuth20AccessTokenController controller.\nIn the OAuth20AuthorizeController controller, the service ticket has already been consumed by the pac4j client to finish the authentication process for the callback service. There is no ST to validate here.\nIn the OAuth20AccessTokenController controller, we either retrieve the token and authentication or get the pac4j user profile and build the authentication. In this latter case, we don't have any ST, nor token.\n. Indeed, an access token inherits from a service ticket, but we don't have any TGT. So we cannot create an access token using the CASImpl, and I don't think we cannot validate the access token for the same reason: https://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java#L310\nOr we need to simulate some TGT in OAuth or accommodate the existing logic we have. Maybe we should merge this one and open a new issue for that if ever it's feasible.\n. I fixed some checktyle issues, then merged with master. Now I have the following errors when running tests: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name 'proxy20TicketUniqueIdGenerator' for bean class [org.jasig.cas.util.HostNameBasedUniqueTicketIdGenerator$ProxyTicketIdGenerator] conflicts with existing, non-compatible bean definition of same name and class [org.jasig.cas.util.DefaultUniqueTicketIdGenerator$ProxyTicketIdGenerator]\n. What is this callbackUrlResolver for?\n. Can it be easier with the pac4j-jwt module?\n. I think it would make to use the pac4j-jwt module here.\n. The /authorize endpoint is called with the redirect_uri parameter. Protected by pac4j, this url is saved and the redirection to the CAS server happens. Then, after a successful authentication, you're redirected back to the /callback url and finally to the originally requested url (something we should improve in the future: https://github.com/Jasig/cas/issues/1571).\nIf you take a look at the controller, you see that the client_id is retrieved and checked with redirect_uri (https://github.com/Jasig/cas/blob/master/cas-server-support-oauth/src/main/java/org/jasig/cas/support/oauth/web/OAuth20AuthorizeController.java#L164), then the real service is retrieved from the client_id: https://github.com/Jasig/cas/blob/master/cas-server-support-oauth/src/main/java/org/jasig/cas/support/oauth/web/OAuth20AuthorizeController.java#L61. It means we retrieve the appropriate CAS service (the one matching the client_id and redirect_uri) and thus get the right attributes release policy for example.\nSo I think everything works properly unless there is a bug I missed. I guess you should try without this specific callback url resolver and see that everything is working properly (especially attributes releases).\n. OK. So there is a bug, but I think the solution is to define the callback authorize service to return all attributes: https://github.com/Jasig/cas/blob/master/cas-server-support-oauth/src/main/java/org/apereo/cas/OAuthApplicationContextWrapper.java#L48, isn't it?\n. Here is my real concern. This is the comeback of the hardly-understandable concept of direct / indirect redirection.\nIf you do that, it will work. But you may encounter performance issues. If you choose Twitter for example (which is based on OAuth 10), the computation of the redirection url requires to call the Twitter server. So if it is down or slow, you will have troubles to display the login page even if you don't click on the \"Twitter login\" button.\nI think an intermediate url (/delegateauthentication?client_name=TwitterClient) would be necessary to avoid this downside.\n. You did the upgrade to pac4j v1.9 in the same PR: GREAT!\nYou may want to wait for the version 1.1.1 of springwebmvcpac4j and version 1.9.1 of pac4j (coming very soon) as I will slightly change the signature of the Authenticator and ProfileCreator components.\n. I'll raise a warning on this: for OAuth 1.0 and OpenID Connect support, this will require to call the identity server and may generate performance issues.\n. The callback url service should return ALL services as the filtering is done here: https://github.com/apereo/cas/blob/master/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/BaseOAuthWrapperController.java#L101 for the real OAuth / OIDC service.\n. OK\n. OK. Will do.\n. I guess it's not a big deal with a mocked ticket registry. But shouldn't it return 1?\n. Little typo: behaviour\n. Yes, I hesitated on this. But the opensaml dependency is not pulled, and I thought maybe it was not necessary since we may only use Facebook for example.\n. Totally right. My IDE didn't want to import the SAMLConstants.\n. And it does not compile. I will move the libraries.opensaml from runtime to compile scope if you don't have any concern with that.\n. No, findbugs must not be always disabled.\n. You should use the pac4j constant: Pac4jConstants.pac4jRequestedUrl.. Same here.. I guess you meant 6.0.0.... Indeed. Yes. Will do.. A matter of style I would say, but yes, let's remove the else clause.... @tduehr I guess you'll remove that when ALL modules will be running JUnit5 tests.. I think it would make more sense to use the authentication attributes here instead of the user attributes.. I think it would make more sense to use the authentication attributes here instead of the user attributes.. It will work in both cases.\nIf you enable multiProfile, all profiles (each attached to a client_id) will be saved into the web session and with your mechanism, you'll pick up the right one.\nIf you disable multiProfile,  only one profile (attached to a client_id) will be saved into the web session and erase the previous one. With your mechanism, you'll return no profile if it's not the right client_id starting a new login process.\nOption 1 should provide better performance, but I fear side effects if we keep many profiles in session, especially at logout. I'd prefer to disable multiProfile. . ",
    "epierce": "I agree that it's not something that should really be in core, but I'd like to put it someplace that people who are looking for the functionality will be able to find it easily.  This is a CAS steering committee question, but any possibility of creating something like Jasig/cas-addons?  Since this was written for USF, I (and USF GC) would feel more comfortable putting the code there than into a company's repo.\n. Their customer list is pretty extensive: http://www.janrain.com/customers They claim to have deployed Engage on 350,000 websites in their marketing material.\n. Updated the pull request, but should I change the commit message too?\n. They are already in messages_en.properties from the LPPE extension\n. The SAML response has to be POSTed back to the service.  This was copied directly from the existing code for SAML 2 authentication\n. Correct.  The delay is to give the user time to read the password warning message.  The auto-submit is to make sure that the SAML response gets back to the service without requiring user interaction. 10 seconds is the default from the existing LPPE code.\n. ",
    "pdrados": "Ok Scott, I 've opened JIRA issue CAS-1130.\n. That's what I thought also (that's why I opened issue 2703). I will step through the code once more, as you suggested to see if I can find anything. By the way, other people also have the same problem (see https://groups.google.com/a/apereo.org/forum/#!topic/cas-user/Lb0CskZTK8o). . I am closing this pull request, as this was not the right fix.. casExpiredPassView includes pwdupdateform which displays screen.mustchangepass.heading and screen.mustchangepass.message. So when your password expires you get the \"you must change your password\" message instead of the \"Your password expired\" one.. Indeed pwdexpired form is (now) a duplicate of pwdupdateform, but I see it more as a template/placeholder which one could edit according to his needs.. It looked like a \"bug\" to me (took some time to understand why I see mustchange message in casExpiredPassswordView), that's why it was targeted to 5.1.x, but if you see it as a \"new feature\", no problem, I will target the master branch. Let's see the review first though... . Ok, pwdexpiredform is removed and the appropriate message is displayed by checking the processed template name.. Thanks Misagh, there is a new PR for the master branch (#2773). Could you please explain what do you mean about using back ticks? Where/how should I use them?\nThanks, in advance.. It seems that this field is not needed in casGoogleAuthenticatorRegistrationView.html (the only other view for Google Authenticator). casGoogleAuthenticatorRegistrationView posts to casGoogleAuthenticatorLoginView which adds the geolocation info.. I can only assume that it is also needed in other MFA login views, but I can not really see/test it. Since I don't see any harm on adding this input (even if it is not needed), do you want me to add it?. Risk based authentication is affected by this issue, as geolocation info on TGTs is used when calculating authentication risk.. To my understanding, we could:\na) Use response.sendRedirect(\"/throttled\") and map that to... casThrottle.html\nb) Change HttpStatus.SC_FORBIDDEN to something else and add the relevant page (i.e. HttpStatus.SC_LOCKED and add the 423.html error page)\nc) Add a new flow - handler -  ... - states - view...\nThoughts?\n. Of course, already done!. The collectDnAttribute that exists in master is supplementary to this PR. If collectDnAttribute is true and a \"username\" is of the form of user@example.org, then the problem is still there. cas:LdapAuthenticationHandler.user@example.org is an illegal (xml terms) name, so ST validation will still fail, with the above SAX parse exception. . Ok, I shall test with the master branch to see if this is fixed and backport it to 5.1.x.\nIf there is no principalAttributeId definition, then the \"id/username\" is what the user entered in login form, correct? I don't think that at this point \"id/username\" is properly encoded...\nMoreover, what is the reason that this \"attribute\" does not have a fixed/well defined name? How could someone, let's say through the cas-management application, release only specific attributes and this one or everything but this attribute to a service?. Glad to hear that we are on the same page :-)\nI have to say that after your comment, that this attribute is for internal use (in general) and not meant to be released, perhaps all these changes are unnecessary. Using a \"fixed\" name when adding in the attributeMap, may be enough...\nAny thoughts?. No worries :-)\nSo, just to summarize and to be sure that we are on the same path: \n1. If you agree, the predefined value of this attribute will be set to \"principalLdapDN\" (There is no such attribute in any well known ldap schema, so there will be no conflicts...).\n2. To be more ... bulletproof, the option for changing this value should remain in case of a conflict with a custom schema that contains this attribute... If not, most of the changes in the original PR will be removed (no option for setting/changing the name of the attribute) and \"principalLdapDN\" will be added in the attributeMap in LdapAuthenticationHandler.java. (Also for master).\n3. Encoding won't be an issue anymore, as \"principalLdapDN\" does not contain any forbidden character (for xml name element).\n4. All collectDnAttribute related changes will be backported from master. Should this be done in this PR or in a new one?\nThanks. Oh, I forgot to ask, is this attribute referenced/used anywhere else in the code? If yes, please show me where, in order to do the update for the new name.\nThanks again. Ok so, \n\nprincipalLdapDn will be the default attributeName \nThe option to change it will remain.\nNot an issue anymore with the default configuration. In any case, IMHO, encoding issues (if any) should be addressed in Cas30ResponseView as for any other attribute...\nTo be more self-contained, all collectDnAttribute related changes will be backported from master in a new PR, after this one is merged.. Just to be sure that if there is some conflict with a custom schema, which includes principalLdapDn attribute, there is an option to change this attribute's name.... Sorry for the late response                                                      \n\n@hdeadman This is the relevant part of the stack trace:                        \nCaused by: java.lang.NullPointerException                                      \nat org.apereo.cas.authentication.principal.cache.CachingPrincipalAttributesRepository.addPrincipalAttributes(CachingPrincipalAttributesRepository.java:79)\nat org.apereo.cas.authentication.principal.cache.AbstractPrincipalAttributesRepository.convertAttributesToPrincipalAttributesAndCache(AbstractPrincipalAttributesRepository.java:228)\n@mmoayyed cache and cacheLoader are transient, so after deserialization they are always null. As a consequence, an NPE arises when putting (or getting) attributes. If I try to reinitialize them before use, I get an error, as they are also declared final. Are they really required to be final?. You are right, I will add a log message in case of an already expired password. When password is not expired, the log message already exists.\nDo you know if there is a case that getLoginRemains is greater than 0 while password hasn't expired yet? In OpenLDAP, I think that there is no such case, but I don't know for other LDAP Servers...\nIf other LDAP servers, behave like OpenLDAP then these two if statements, should become one if - else.... What if the casExpiredPassView set a variable, that it would be checked (true/false) in pwdupdateform? Is that ok?. I think that there is no such flag (or at least I can't think of any), but again I might be wrong. Perhaps @mmoayyed could shed some light on this.. Of course ... not!\nSorry about that. It's fixed now. Ok, I will fix it right now.\nBtw, I see that only allowMissingPrincipalAttributeValue has a default value in this same file.... ",
    "cyrille-leclerc": "Indeed, the problem appeared in case of empty login or empty password which is handled by Spring Validator.\nI agree that the real fix would be at the webflow level. Empty login/password and invalid credentials should follow the same flow.\nMoreover, this CasDefaultFlowUrlHandler has a security problem : the submitted password is injected in the URL parameters.\nI'll report this comment on Jira.\n. ",
    "jdpgrailsdev": "Yes and No.  Let's assume you go to www.example.com/index#someAnchor, but you have not been authenticated.  The container will automatically redirect you to your login page, but the browser will maintain the anchor/fragment from the original link:  www.example.com/login#someAnchor (at least this is the behavior we have observed with multiple browsers).  This patch guarantees that the anchor is not lost upon the form post so that it can be re-applied by the browser to the redirect URL issued by the server upon successful login.  Because anchors/fragments are client-side pieces maintained by the browser and NEVER transmitted as part of the HTTP POST to the server, this is the only way that we could find to maintain the anchor/fragment (without putting it in the POST data and modifying the server to restore it).\n. Note that this will only help FireFox/Chrome/Opera/IE 10 and not Safari and IE 9 and below:  http://blogs.msdn.com/b/ieinternals/archive/2011/05/17/url-fragments-and-redirects-anchor-hash-missing.aspx.  This has nothing to do with the code itself and more to do with how the browsers handle persisting fragments/anchors across 302 redirect responses from servers.\n. The container is not doing this.  This is browser behavior.  Firefox, Chrome and Opera remember the fragment when issued a 302 by the server and automatically put it on the end of whatever redirect URL is in the redirect response from the server.  Per the link I added in the discussion above, this has nothing to do with CAS and everything to do with how browsers either maintain or don't maintain the fragment client-side when dealing with 302's/redirects.  That being said, it just so happens that if you use fragments in your application AND allow people to bookmark pages with the fragment, then this becomes an issue if they have a bookmark and have been logged out.  This is because the browser does the right thing to keep the fragment on the URL when being redirected to the login page.  However, without this patch, it does NOT re-apply the fragment to the subsequent redirect after a successful login, as the fragment is client-side only and not posted to the server as part of the login request.  By \"helping\" the browser to put the fragment back on the URL in the browser when submitting the login request after the first redirect, it ensures that the second 302 issued by the server for a successful login keeps the fragment on there (client-side, based on the statement I made above for FireFox, Chrome and Opera).  In addition to the link I provided in the comment, please take a look at the discussion in this bug for Spring Security:  https://jira.springsource.org/browse/SEC-1067.\n. Yes, though from the responses above, it sounds like there is some reservations about merging it in.  FWIW, we are using this version in our applications and were hoping to get it merged back so that we do not need to apply it in future releases.\n. ",
    "edudar": "Is this request is ready to be merged. We've faced same problem and I'm wondering whether we'll implement it in our clone or to get it out of box. Thanks.\n. ",
    "sophietk": "In JSP files, the call to *ProviderUrl is the same.\n. Maybe we can let the possibility to extend this class, and extract saving/restoring instructions in overridable methods. That would solve my problem indeed.\n. Wrong copy from my own workspace. Do I have to combine my commits in one ?\n. ",
    "cparaiso": "SASS ( http://sass-lang.com/ ) is just an extension of CSS3 to make CSS a little more modular with a few extra features that make it easier.\nSASS compiles all the SCSS files to CSS file(s) of your choosing.  Benefits of SASS include CSS variables, mixins, nesting and more.  In the end there is no difference in the CSS file outputted.  It's just faster and a little more organized in SASS.  \nDevelopers can simply opt out of this feature and edit the cas.css file alone.\nI'll add the license / copyright to the header of each scss file.\n. I am Unicon UX.  I spoke with Misagh this morning.  We've agreed to remove all SASS files for now and re-factor some aspects of cas.css.\n. ",
    "pmarasse": "I always forget to check auto generated setters by eclipse... By the way, is there any java code style file for eclipse out here ?\n. Thanks, I'll take a look and configure my eclipse.\n. ",
    "edomazlicky": "Hopefully these new commits will fix some of the issues brought up and also make testing with multiple memcached servers easier.\n. Good point that the X-Forwarded-For can be spoofed and should be used with care. Most Load Balancers should offer an option to ignore the client provided XFF header before presenting it to the backend web server (on HAProxy it's something like this: reqidel ^X-Forwarded-For:.*). This should prevent the client from using XFF spoofing to get around the Login Throttling. \n. It shouldn't (and it doesn't on my machine). If the assumeTrue fails it skips the test. I copied this code from the MemCacheTicketRegistryTests.java which does the same check to see if Memcache is listening in the setUp(). \n. Your right it is almost a duplicate of the EncryptedMapDecoratorTests tests. However, that test uses the size() operator which Memcached doesn't support so we couldn't use it without removing that part of the test.\n. Makes sense, I was going off the assumption it should go here since the EhCacheBackedMap lives here.\n. If I move the code to the memcached integration module then the EncryptedMapDecorator test would stay in the clear pass directory and this test would go to the memcached directory. So where would this new base class class for the two tests go? In cas-server-core? \n. Null's can't be stored in a Memcached server because everything stored there must be serializable. The nullPlaceHolder gets around that restriction and is the reason for the replaceIfNull, checkIfNull functions.\n. I can't return nulls on many of them since they are primitive data types. I could return 0 and false and empty Collections though. Any code that calls size(), isEmpty() on this Map is probably going to fail in some way though.\n. Just realized I need to account for someone wanting to store the value of nullPlaceHolder in the Map. Working on that now.\n. HashTable might work. However I'm thinking ClearPass actually does store null values to indicate that a user's password is not available. The EncryptedMapDecorator unit test seem in the clearpass module seems to suggest this. \n. Ok let me try the direct injection method. \n. So to test it I replaced my MemcachedMap with a simple extends of BaseCacheMap. The Unit test now fails on the tests which deal with nulls:\n  addNullKeyAndValue(org.jasig.cas.maps.MemcachedBackedMapTests): Can't serialize null\n  addNullValue(org.jasig.cas.maps.MemcachedBackedMapTests): Can't serialize null\nSo the real question is does ClearPass ever add null keys/values to it's map? If it does not then I can direct inject the native Memcached CacheMap and the need for my custom map goes away.\n. Glad we got everything cleared up and found the most elegant solution. I've added a page to the Wiki with a Memcached CacheMap example for ClearPass here:\nhttps://wiki.jasig.org/display/CASUM/ClearPass+and+Multiple+Server+Configurations\nI also put in a note on EhCache configurations.\n. ",
    "jeffreyindc": "Sorry I did not get back to you sooner.  It was 16.0.2.\nFrom: LELEU J\u00e9r\u00f4me notifications@github.com<mailto:notifications@github.com>\nReply-To: Jasig/cas reply@reply.github.com<mailto:reply@reply.github.com>\nDate: Saturday, November 10, 2012 2:32 AM\nTo: Jasig/cas cas@noreply.github.com<mailto:cas@noreply.github.com>\nCc: Jeffrey Simpson simpson@yfu.org<mailto:simpson@yfu.org>\nSubject: Re: [cas] Changed the formatting of the Language List to prevent problem in FireFox. CAS-1223 (#163)\nOn which Firefox version do you have a problem ?\nThat said, you're right, there's something wrong in HTML with the unterminated HTML tag li.\n+1\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/163#issuecomment-10252828.\nJeffrey Simpson\nSenior Software Engineer\nInformation Technology\nYouth For Understanding USA\nTelephone: 240.235.2144\nToll Free: 800.424.3691\nFax: 240.235.2174\nWebsite: www.yfu-usa.orghttp://www.yfu-usa.org\n[http://yfuusa.org/media/Disclaimer/image001.jpg]http://www.yfu-usa.org/          [http://yfuusa.org/media/Disclaimer/image002.jpg] http://yfuusa.org/host-families/host-a-student.php\nYouth For Understanding (YFU) prepares young people for their responsibilities and opportunities in a changing, interdependent world.\nJoin YFU USA on Facebook, Twitter and YouTube\n[http://yfuusa.org/media/Disclaimer/facebook_32.png]http://www.facebook.com/YFU.USA.Fan [http://yfuusa.org/media/Disclaimer/twitter_32.png] http://twitter.com/YFU_USA  [http://yfuusa.org/media/Disclaimer/youtube_32.png] http://www.youtube.com/YFUUSA\n. ",
    "robertoschwald": "+1\n. +1\n. isFromNewLogin is well known and could be security critical if you need to separate interactive/remembered login.\n. isFromNewLogin is well known and could be security critical if you need to separate interactive/remembered login.\n. For now, you can use  https://docs.google.com/document/d/1l0o60mLfXF4bkQdwRSH4i6P-IJQki3-v-zyoOAjxDd4/edit which currently is migrated to github as markdown by me. \n. For now, you can use  https://docs.google.com/document/d/1l0o60mLfXF4bkQdwRSH4i6P-IJQki3-v-zyoOAjxDd4/edit which currently is migrated to github as markdown by me. \n. Using UTF-8 bundles since 2007 with ReloadableResourceBundleMessageSource. So +1\n. Added pdf/html so you see how it looks like.\nAs soon as spec is released, I would prefer creating those as we need them on the wiki and would have a downloadable pdf version, too.\n. Not sure if this is the right place for the comment, but for me it seems to be important:\nRegarding the html generation for the cas site, I played around with the doxia-module-markdown maven doxia plugin. It looks very promising (supports the GH markdown extensions). That would be an option. Only difference is, that we need to place the md files in cas-server-protocol/src/site/markdown directory. The reasons why I personally don't like to link to the github parsed md files in the official CAS documentation are:\n- It is a specification, therefore we need a released, frozen version. If GitHub changes their md parser, the document will change (or break)\n- To broaden CAS adoption, we need to make it as easy as possible for new developers to get into it. Therefore, I prefer a downloadable document.  \nIf it is of interest, I can add the doxia pom.xml file I have created to the pull request.\n. Wow ;-)\n. +1 from my side as well.\n. Preview with http://htmlpreview.github.com/?https://github.com/Jasig/cas/blob/master/cas-server-protocol/3.0/cas_protocol_3_0.html\nMaybe we should add this to gh-pages?\n. > Are you saying, a link to the html rendering, or to actually include the entire html doc in the branch?\nAdding the md's to the gh-pages would be great, however some things need to be sorted out, first:\n- how to generate a TOC\n- How to render PDF with klickable TOC\n- Embedable Images (I know can be done by html markup in the md, but Pandoc supports Self-Contained mode, so one could download the HTML and got everything needed for a complete offline doc)\nCurrently we use pandoc for this requirements.\n. Is the Travis build failure on JDK 6 something I should be concerned of? Looks more like a general problem to me..\n. Differences between SHOULD and MAY see RFC 2119 https://www.ietf.org/rfc/rfc2119.txt\nAm 09.04.2014 um 14:56 schrieb Misagh Moayyed notifications@github.com:\n\nI take \"SHOULD\" as in, you know, it should :) ... and it's definitely not a \"It may\" or \"It is optional\" or \"It is recommended/suggested\" unless we are interpreting SHOULD as in \"It should do x, but it's not required to do so\", in which case I dont see the addendum...and if so, what's the difference between SHOULD and MAY then?! :)\nEither way:\nAll other entity types in the protocol adhere to a given prefix for their IDs. PGTs and PTs \"should\" as well.\nIf we are taking \"should\" as \"optional/recommended\", it's nonetheless a change that we can accommodate and implement. This pull implements a positive recommendation for a reference implementation of the protocol.\nPGTs and PTs are entities in the protocol. They are considered domain objects in the protocol and yet in the codebase they are not. That is an inconsistency.\nThere are also additional side-effects, where the separation and explicitness of a PGT (or a PT) allows for a creation of a separate cache instance in distributed environments, as requirements have come up in the list at times.\nAs for the survivors of the Yale team, I am rather sure @apetro is very much now akin and sympathetic to this change for the very same reasons outlined above :)\n\u2014\nReply to this email directly or view it on GitHub.\n. +1\n. Shouldn't we raise the version to 3.0.1 and change the release date? Otherwise people I think get confused.\n. +1 Thanks for the work!\n. +1 when build is fixed. That was a fast one. Thanks!\n. NP. Whats this codacy bug? False positive?. I'll check now\n. ok, I'll wait and check on 5.0.x. I'll review now. Will implement fix tomorrow, as I had to interrupt.. @mmoayyed Cannot reproduce the problem here. Sent you a PM on Gitter.. Interesting. Locally it works. Tested using ./gradlew test --stacktrace --parallel, and by starting Cas30ResponseViewTests in IDEA.\n\n\nxml\n<testsuite name=\"org.apereo.cas.web.view.Cas30ResponseViewTests\" tests=\"20\" skipped=\"0\" failures=\"0\" errors=\"0\" timestamp=\"2017-05-13T06:38:32\" hostname=\"mymachine\" time=\"11.093\">. How do we track bugs? We even do not have a bug tracker anymore.\nI\u2018m involved in many OS projects, but CAS tbh is the only one with such strange policy. \nSecurity by obscurity never worked.\nSent while mobile.\n\nAm 02.01.2018 um 06:14 schrieb Misagh Moayyed notifications@github.com:\nThank you for the contribution. This is exactly the sort of thing we would like to avoid. Rather than spending time documenting what doesn't work, your time is much better spent making sure things do in fact work. If you find this to be a problem, the best thing you can do is to in fact fix it.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. +1 already thought of it.\n. Same question I have...\n. Versioned as RC1 as it is not released, yet.\n. This are Pandoc related tex markups for page break in PDF file generation, otherwise the content starts right after the TOC. Therefore, I added the newpage markups on every chapter.\n. Added for preparation of CAS-1349.\n. Next lines changed to the concrete pandoc commands used to generate the HTML and PDF versions.\n. This is a new pandoc html template with the added Jasig license header to avoid build breaking.\n. I just wanted to make clear for adopters that it is unreleased, yet.\n. It had a ^M at the end of the shebang. Converted using recode to unix format. Hard to see, but using a hex dump, you see the 0d 0a sequence:\n\nBefore:\n00000000 23 21 2f 62 69 6e 2f 73  68 0d 0a 23 0d 0a 0d 0a  |#!/bin/sh..#....|\nAfter recode:\n00000000  23 21 2f 62 69 6e 2f 73  68 0a 23 0a 0a 67 72 6f  |#!/bin/sh.#..gro|\n. Here I would not state that Memcached as an example of a NON-Durable storage, but state an example of a durable storage like JpaTicketRegistry, otherwise users  get confused. \n. Should we stay in sync with the protocol spec version (3.0.3 in this case) or increment the schema, only?. I wouldn't do that. We need the schema as an xsd in the future in the project, if we marshal the XML generation for the serviceValidateResponse instead of hand-crafting them as today using the views. So we should version the schema. Maybe we can externalize the schema into a xsd and include in the MD file (if possible)?\n . ",
    "keinstein": "Ok. I hope I could fix the first objections. The code still compiles and works in our installation.\nIf I understood the following text correctly, the Byte[] issue should be fixed, now. \nhttp://docs.oracle.com/javase/7/docs/api/java/security/cert/X509Certificate.html#getSubjectAlternativeNames()\nRFC 822, DNS, and URI names are returned as Strings, using the well-established string formats for those types (subject to the restrictions included in RFC 3280). IPv4 address names are returned using dotted quad notation. IPv6 address names are returned in the form \"a1:a2:...:a8\", where a1-a8 are hexadecimal values representing the eight 16-bit pieces of the address. OID names are returned as Strings represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are returned in RFC 2253 string format. No standard string format is defined for otherNames, X.400 names, EDI party names, or any other type of names. They are returned as byte arrays containing the ASN.1 DER encoded form of the name. \n. ",
    "asaarnak": "I think request.getRemoteAddr() is more secure. \nBecause X-Forwarded-For Header could be faked.\nThere are even browser plugins for setting X-Forwarded-For.\n. ",
    "katelme": "Remember merge into master (4.x)\n+1 for Scott trick\n. Dimitri, thanks to use my implementation.\nAs I am relative newbie CAS user, and as I said in Jira issue I don't know if that logic is better in the InitialFlowSetupAction. Any opinion about? Another better implementation?\n. Dimitri, thanks to use my implementation.\nAs I am relative newbie CAS user, and as I said in Jira issue I don't know if that logic is better in the InitialFlowSetupAction. Any opinion about? Another better implementation?\n. ",
    "fjollberg": "Ok, was not quite sure wether to call it a bug or an enhancement, but left it as a bug.\nhttps://issues.jasig.org/browse/CAS-1261\n. Just an opinion. It is better to just ignore this than to post a long technical description of what happened that frankly absolutely no-one cares about. They want to log in. The web is flaky at times, people will just retry and forget about it. If possible, remove the behavior, otherwise just let it be is my point of view.\nA really simplistic approach would be to let the page reload itself after the timeout period to keep the session warm. Someone might lose entered data if interacting at that point, but that should be rare.\n. I'm very much in favor of removing the cause of the issue with redesign. Failing that, I fail to see the point of any other message than \"we are sorry, but please reload\" from a user perspective, in which case you could just reload instead and not bother the user to manually do it. I'm also very much in favor of any solution not including many thousands of lines of JavaScript library code in one of extremely few places in our system handling clear text passwords. We've in fact been screened recently with this concern, which I could happily respond to with the fact that we use one single inline JavaScript statement in our implementation.\n. I made a really minor tweak to the existing test to prove that it is the primaryAuthentication and not the list of Authentications that is used, which is the new behavior of Cas10ResponseView. The actual behavior of service registry attribute setting and it's effect on the Authenticator is a part of CentralAuthenticationServiceImpl and tested there.\n. I wasn't sure that this functionality was complete and working in 3.5.x, we haven't looked at and implemented like this before, so I left that bit out. But yes, I believe that it would be good to make the same change in 3.5.3 in that case.\n. Sorry about Jira, was in a rush and used an old procedure.\n. Before I converted the code to the new CAS service JSON serialiser I had some unit tests verifying the serialiser. The layer on top of couchbase is thin enough to make unit testing almost pointless, there is hardly any logic there at all. The stuff that's interesting to test is the interaction with the couchbase library and server, so eventually I just dropped the idea of unit testing.\n. I guess the bits that are removed are the asynchronous attachment to the couchbase server. It can really be argued if you want that in there at all since it's a somewhat different behaviour than you may otherwise expect. It allows the CAS server to start even if the couchbase server hasn't quite started yet, and attach to the couchbase server once it is running.\nIn our implementation we have a separate monitoring servlet in our overlay which detects and indicates this situation which our load balancer is polling.\nA different approach and perhaps more straight forward is to assume that couchbase is up and running and instead test for that before the CAS container startup. But the way we did it worked well enough for us to leave it as it is and made server boot procedure a bit faster and simpler.\n. I think you don't want the async attach really. I've not investigated this aspect of the most recent couchbase client. In the earlier version it was just on initial startup it would fail if unable to find any living server. If running it would reattach nicely.\n. Note: this still assumes backward compatibility in the configuration of the Couchbase server with regards to authentication using a bucket password. In Couchbase 5, this is deprecated in favor of authenticating against the server in a more conventional manner.\nI might rewrite be interested in rewriting the Couchbase backend in this regard, and perhaps others in order to make Couchbase setup easier (N1QL?). I'm in that case wondering wether it is necessary to keep Couchbase 4 compatibility and password protected buckets or if it would be ok to drop Couchbase 4?. Yes, I would definitely need some time with other activities up this spring in mind, so that's fine.\nWhat's the time frame for 5.4?. Sounds perfect.. Ah, ok, that works. Perhaps a bit asymmetrical compared to https://apereo.github.io/cas/5.2.x/installation/Webflow-Customization-Extensions.html#java perhaps. But fine, you can drop this PR.. ",
    "dtanner": "About the URL - yeah, I agree - it should include the URL to be useful on its own.  We knew what was going on because the AuthenticationManagerImpl's logging included the URL, but that log level is INFO as well.  \nWhen this particular issue happens (failure due to insecure authentication), my understanding is that it's normally a configuration mistake that needs to be discovered and corrected.  Are there other use cases for that log?  In our case, we were totally blind to the problem until this log statement showed up, so my thought was that even if it spams the logs for a while, the team would easily see the problem and be able to fix it.\nWhat log level do you usually run at in production?\n. ",
    "herringm": "I will give a stab at creating some unit tests, but will likely need some guidance.\n. Have not had a chance to look into creating the test cases...\n. Thanks, I'm unlikely to get to until at least Monday.\n. Misagh, thanks for finishing the work on this issue. I really appreciate your stepping in an helping.\n. How do these changes affect audit logging? We use OpenLdap and are currently using CAS 3.5.2 with a slightly modified LPPE implementation that emulates an AD 773 error at bind time meaning the audit log shows that the user failed to authenticate (user must reset password). No successful audit record is recorded until after the user changes their password. This allows us to quickly track down user access problems without having to sift through lots of meaningless AUTHENTICATION_SUCCESS and TICKET_GRANTING_TICKET_CREATED audits as the user is not actually sent to the requested service.\nBelow is an example of our customized audit messages when a user with the pwdReset flag logs into CAS:\n```\n2013-05-19 04:43:27,961 INFO [org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler] - \n2013-05-19 04:43:27,962 INFO [org.jasig.cas.authentication.AuthenticationManagerImpl] - \nAudit trail record BEGIN\n=============================================================\nWHO: [username: xxxx]\nWHAT: supplied credentials: [username: xxxx]\nACTION: AUTHENTICATION_FAILED\nAPPLICATION: CAS\nWHEN: Sun May 19 04:43:27 EDT 2013\nCLIENT IP ADDRESS: xxx.xxx.xx.xx\nSERVER IP ADDRESS: unknown\n=============================================================\nAudit trail record BEGIN\nWHO: [username: xxxx]\nWHAT: :PASSWORD_CHANGE_REQUIRED [pwdReset=TRUE; data 773]\nACTION: TICKET_GRANTING_TICKET_NOT_CREATED\nAPPLICATION: CAS\nWHEN: Sun May 19 04:43:27 EDT 2013\nCLIENT IP ADDRESS: xxx.xxx.xx.xx\nSERVER IP ADDRESS: unknown\n=============================================================\n```\n. Would you be willing to post the audit log statements for a configuration using openLDAP and a user that has the pwdReset or pwdMustChange flag set? Thanks\n. ",
    "albert2cas": "Hi,\nI know this is an old feature, but I was trying CAS 5.0.4 which hasn't this feature yet.\nI'd want to share my opinion about this, because the support for clustered or load balanced applications is very important to me. Please note that not in every distributed environment, the session is shared.\nTo me, if the FRONT_CHANNEL thing were to be implemented as described here it wouldn't be a good idea, because it relies on the client only to spread the logout across each and every application that the user accessed (if a user closes the browser before that the SLO ends, the user is stil authenticated in the applications which didn't receive the redirect).\nI'd rather suggest an alternative solution: the CAS Server, in the Service Management tool, should allow a service to have multiple backend urls to which the SAML logout message would be sent. This way, CAS could send the logout message to every instance of the same application ensuring that the user, regardless of which application s/he accessed, is always logged out properly.\nAn alternative is that the CAS Client could be the owner of the backend urls of the application in which is present and it is responsible to spread the logout message to them.\nWaiting for your opinions...\nThanks!\n. ",
    "joemccall86": "@leleuj I'll did a git pull parent master on my local master before initiating the pull request, but I'll take another look at it. Maybe I missed something obvious. \n@mmoayyed Checkstyle seemed to pass with warnings for me, both in eclipse and running mvn install. There were some warnings though, is that what you're talking about? Also, do I need to merge my local CAS-1288 branch into local master before creating the pull request? If not I'll do the next pull request from local/CAS-1288 to Jasig/master. Is that the right workflow?\nThank you for bearing with me. It's my first time writing a formal merge request.\n. @mmoayyed I understand. Should I withdraw this pull request? (Is that even possible?)\n. Thanks for all the comments! I have my work cut out for me.\nOne thing I'd like to contribute is that for my day job we are using a custom branch of Cas that uses spring-security-oauth, but not the custom TokenStore and TokenEnhancer objects. Albeit we only use the password grant type (which is only unsupported here because I haven't made it work with the custom token stores). If we're willing to live with a TokenStore that is separate from the TicketRegistry most of the work is already done for us by spring-security-oauth. \nNow that I know about the CentralAuthenticationServiceImpl class I can look into having the TGT automatically generated and stored in the TicketRegistry, which may change how I implement some of the above functionality.\nThanks for the support! I'll try and get something together ASAP.\n. I don't know much about JSP, but this string renders as JSON, whereas the request parameters visible in the URL when this is called are error=shortname&error_description=long_description. I didn't pursue further into extracting the error and error_description from the URL.\n. I think OAuthRegisteredService might be confusing in the OAuth world, since it represents an OAuth client and not an OAuth service. Perhaps we can call it OAuthClientWrapper?\n. Could you elaborate? I know it's bad to use the qualified name to the cas Authentication object but it does conflict with a Spring Security Authentication, hence the fully qualified name.\n*EDIT: I just saw your comment below and it answers my question.\n. That's a much cleaner solution. I'll look at that.\n. You would think so, but that's not the case. I could probably re-factor the grant types into polymorphic types that have a private string GRANT_TYPE, which is precisely what spring-security-oauth does.\n. We do, but there is no getter for the TGT expiration. It's defined in TicketGrantingTicketExpirationPolicy which has no getter for timeToKillInSeconds, so I had to work around that by injecting the value into a custom TokenExpirationConfig object that I could autowire into the TokenServices.\n. DefaultTokenServices generates a UUID for the value of the access token. We don't want that, so the CasTGTTokenEnhancer replaces that UUID with the TGT value for that user. We use it later to authorize service calls.\n. I think this is a trade-off between having the token store based solely on the Cas TicketRegistry  and having spring-security-oauth handle the token storage for us (either through an in-memory hashmap implementation, or by having the user configure the token store himself inside oauthConfiguration.xml). If we are willing to allow a separate token store from the ticket registry it simplifies a ton of work, at least for the initial release of this enhancement.\n. Until we need more information than just the TGT value, I vote we keep it clear text. Base64 encoding offers no security benefit and users are strongly encouraged to run over https anyway. Once each service gets its own access token we should have the TGT for that user and the service ID in the token - then we should store it in JSON and Base64 encode it.\n. I think I scrambled this pull request a bit accidentally. The next pull request will follow @mmoayyed 's instructions.\n. You're right... I was just getting a little sloppy :-)\n. Refer to https://github.com/joemccall86/cas/commit/711dced9f7eb1888e4145ebc3c3600bfb59b0cd7\nI found that it only made sense to update QueryDatabaseAuthenticationHandler and AcceptUsersAuthenticationHandler to use the .matches() method. Other handlers either used their own encoding (QueryAndEncodeDatabaseAuthenticationHandler) or passed the username/password to another system to do the checking (e.g., ldap, jaas, shiro).\nI did just realize I missed FileAuthenticationHandler.java. I'll go ahead and update that one as well.\n. ",
    "jsumners": "Sorry, I'm working with the 3.5.2 code. Files like casLoginView.jsp have mixed whitespace. Maybe it's cleaned up in the repo.\nI posted what I'm trying to accomplish to the cas-user list. While working on this, I have found that the overlay can quickly pull in so many upstream files as to make maintenance between versions a bit of a nightmare. I created this patch when I thought I would only need to add some customizations to the servlet configuration. But now, I see that there needs to be a better way of adding to, and possibly overriding, pretty much any of the upstream configuration without duplicating the source material.\n. I don't know why no new line at the end of the file would cause the build to fail. That seems ridiculous. Anyway, I used the GitHub interface to edit the file so it did the trimming.\nI like your idea, but I don't know how to implement it. I'd rather just replace my overlay's cas-servlet.xml with upstream's and add back in my one line when changes are made than deal with the hassle of creating a JIRA account just to submit this.\n. @serac so the style is \"EOL before EOF but tabs mixed with spaces is fine\"? There are plenty of files in the source tree with mixed tabs and spaces for indents.\nAnyway, I hope you guys implement the goal of this pull request. It would make some customizations a lot easier to keep synced to upstream.\n. ",
    "chilversc": "That's true when its the user's own device. Not really sure what advice to offer in the case where the user is using a shared computer such as at a library.\n. ",
    "spaetow": "I've done that with #283 :-)\n. When you say \"push all JRadiusServer configuration outside our components\", can you expand on that? From what I see, all your components right now do is take the username and password, call the JRadius RadiusClient with the details of the server, and the type of authentication to use (all of which is fine), and then on a yes/no response, pull the principal out of the username. Nothing really major in that... \n. Yes... if the bit of XML I posted on #304 to use the modified version is correct :-)\n. Smashing! Let's close this one, and make sure we update the Wiki for RADIUS support in 4.0.0. I'll backport your change to a 3.5.2-compatible extension.\nThank you very much. \n. +1\n. My testing concludes that all's well! Thank you very much @serac! Here's my vote: :+1: \n. I don't see any objections... would be lovely to have this, can we merge this :-)\n. Considering that I have been unable to make the service management applet work, and the service management information is... spotty (with much on it on the 'CAS Wishlist'), perhaps overhauling the online documentation on how to implement the services registry in CAS (specifically, checking all the Wiki entries and either condensing them or restructuring them coherently) would be useful when you implement this. \nI cannot stress how much time I've wasted attempting to get the services registry applet to work in a standard CAS 3.5.2 installation (i.e. all defaults). If it hadn't been a requirement for me to use CAS, I would've said \"sod this, I'll find a different authentication server\" after a few days. I still don't have a proper services registry... I still have the wildcard service enabled.\n@leleuj's page message \"No service is configured on your CAS server\" is useful already. It could possibly link to the wiki page that describes how to register services either in deployerConfigContext.xml or by other means.\n. @leleuj, yes I am referring to the services management webapp. I haven't ever gotten it to work. Look at the cas-users list where I've posted several times about it and got... well... no response. So a proper documentation update when this item is committed (I'm :+1: it) would be useful... perhaps looking at how I should have configured things here, would be useful, because I'm sure I'm not the only one who makes some fundamental mistakes with it.\n. +1\n. Sorry to jump in here, but I agree with @serac and others who believe that the current behaviour is unacceptable. There's been many a time where I've typed in a credential, only for the login page to re-appear, making me think something was wrong on my server side. \nWould it make sense for the page to self-refresh (if at all possible) whilst keeping what's currently typed in in there?\n. This is good! +1\n. +1.\n. If it's not, close it. However, it appears that someone has attempted to use it the way it is documented on the Jasig CAS wiki and it broke, which leads me to believe it's no longer available.\n. If the Wiki no longer applies for v4.0, then the pages need to be updated to mention this everywhere and point to the correct resource for 4.0.\n. It technically wouldn't break backwards-compatibility, but I considered that this was really just an issue with EAP, so only did it for EAP. I've updated the file to now create a new instance every time it attempts an authentication, plus your suggestions to use radiusAuthenticator as a common variable name.\nSorry, when you meant \"pass the class reference in\", did you mean just passing the name of the class instead of an object that is saved in this.radiusAuthenticator? That could work too, I guess... How much does CAS 4.0.0 break backwards-compatibility on other things?\n. See above. We can simply just create a new instance if that's the preference of the CAS developers :-)\n. True, was just avoiding clashes with any other similarly named objects (but I notice that the internal object is referred to as 'this.radiusAuthenticator', so I guess that's very explicit - I'm new to Java, so excuse any 'odd'/non-standard coding practices)\n. Although I can understanding the reasoning why the class would be final, considering that I've had to copy Scott's entire class just to be able to a) specify an inner protocol option and the possibility to return the actual RADIUS response packet, it would be nice to be able to derive directly from JRadiusServerImpl instead of copying the whole thing again. :-)\n. Perhaps to leave it open to be extended/derived from? :-)\n. Fair enough... Ignore my question. :-)\n. this.protocol.name() returns not \"eap-ttls\" as what I would expect when \"EAP_TTLS\" is specified as the client protocol, but \"EAP_TTLS\". This means that RadiusClient defaults to null as the authenticator, which in turn in the RadiusClient.authenticate() method defaults to PAP authentication.\n. Let me rephrase: RadiusClient.getAuthProtocol() needs \"eap-ttls\" as parameter when wanting to use EAP-TTLS. So far so good. However, when I check what this.protocol.name() returns, it returns \"EAP_TTLS\" when I've specified \"EAP_TTLS\" in the deployer config. I followed your sample test.\nRadiusClient will not be null when you specify an invalid protocol, it simply sets its internal authenticator to null. When you then attempt an authentication, the first few lines in RadiusClient.authenticate() fetch a PAPAuthenticator() when the authenticator is null.\nWhen I replace \"RadiusClient.getAuthProtocol(this.protocol.name())\" with 'RadiusClient.getAuthProtocol(\"eap-ttls\")', the rest of the code works correctly and my authentication succeeds.\nSo there's something wrong with how this.protocol.name() is supposed to return its correct value.\n. I had a brainwave this morning. Considering that RadiusClient.getAuthProtocol() supports 'arguments', i.e. using client.getAuthProtocol(\"eap-ttls:innerProtocol=eap-mschapv2\") will return an EAPTTLSAuthenticator object with the inner protocol set to EAP-MSCHAPv2, would it possibly make sense to do away with the enum? \nThat way, there's no need for any further fixing, and at the same time it exposes the ability to set the protocol of the inner tunnel in an EAP-TTLS authentication (like the RadiusClient class does at the moment)?\n. Ok, In that case, it would make sense to provide appropriate enums that allow the user of the components to be able to specify the inner protocol, i.e.\nEAP_TTLS_PAP(\"eap-ttls:innerProtocol=pap\"),\nEAP_TTLS_MD5(\"eap-ttls:innerProtocol=md5\"),\nEAP_TTLS_EAP_MSCHAPv2(\"eap-ttls:innerProtocol=eap-mschapv2\"),\netc. \nAccording to the comments in EAPTTLSAuthenticator, the three above would be the only ones supported by default, since MSCHAPv1/2 and CHAP are not supported in Java 1.5 and earlier, but I suppose you can define their equivalents too.\nRestricting the use of an EAPTTLSAuthenticator to using PAP only would be pointless because initiatives like eduroam require more than just PAP in the EAP tunnel (MD5 is popular, as is EAP-MSCHAPv2). :-)\n. Exposing more of the RadiusClient functionality, perhaps? I can't think of anything at the moment really.\n. Thank you very much. This was one of the problems I had with v3.5.2. I suspect that if anyone else wants some other supported EAP inner tunnel auth methods, they can submit a request to extend the RadiusProtocol enum which means nothing else changes!\nI'll test this out now and let you know on the main pull request whether it all works. :-)\n. You're right. I'll update the pull request.\n. Since we're correcting grammar, \"if gateway is present\", not \"if is gateway present\" :-)\n. Do I understand this correctly? You only return a RadiusResponse object if you receive an Access-Accept from the RADIUS server?\n. Very similar to https://github.com/spaetow/cas-abfab-support/blob/version_1_0_0/jradius-authenticator4/src/main/java/uk/ac/diamond/cas/abfab/radius/ABFABRadiusServerImpl.java (the authenticateEx method) then. :-)\nHappy to backport some of those changes into our code if that improves how RADIUS responses are handled :-)\n. I'm assuming that this includes other protocols (like EAP_TTLS_EAP_MSCHAPv2), yes?\n. Actually it is. It's just before MSCHAPv1. However, it does not list EAP_TTLS_EAP_GTC, although I don't know whether JRadius supports EAP-GTC as an inner protocol... \n. ",
    "avinashga23": "It seems like the resolve method is overwriting the principal for each subsequent resolve method call in the resolver chain. Even the first resolver resolves the credential to principal the subsequent request to the second resolver overwrites the result of the first resolver.\nAlso the supports method simply calls the supports method of the first resolver. This means even if there is a resolver in chain which supports the credential, it will not get the chance to resolve.\nI feel it will be good to modify the supports method and resolve method. So that supports method returns true if any one of the resolver in the chain can handle the credentials. Also the resolve method to return with the first resolved principal. \nIf this is an incremented build of the principal then the previously resolved Principal must be stored and then merged with the next resolver result.\n@Override\n    public boolean supports(final Credential credential) {\n        for (PrincipalResolver resolver : chain) {\n            if(resolver.supports(credential))\n                return true;\n        }\n        return false;\n    }\n. I have seen few applications which uses LDAP for authentication and uses a database stored roles and permissions for authorizations (duplicate user in database). Such an application will be benefited with this implementation.\n. ",
    "h0nIg": "\nCAS-1346\nuse case: e.g. it is not possible to use a facade where the key is a combination of a prefix and the real key. on real deployment scenarios a memcached store will be used by the application that consists of many parts (cas ticket storage, session storage, .....) for which a key prefix has to be used. this facade is not part of the memcached client\n. in general, you are correct and there are no collisions since the keys of the session will consist of a hash and the ticket will consist of a random string. BUT expect the following usecase:\n\ncreate a memcachedclient instance via tomcat globalresources / jndi for multiple applications that are using one memcached instance. to assure that there will be no collisions a prefix can be used. regarding the jndi stuff the client is not able to get the credentials and will only get the memcached facade that will provide keys with the prefix to him. background of bundling more than one part (ticket storage, session storage.....) within the instance:\n1) expect that the memcached instances are managed by couchbase (current max limit of instances is 10)\n2) (as far as i know) mysql memcached support requires a prefix, because only one instance can be created for the mysql server instance\n. ",
    "ganeshrnair": "Yes that is issue - without this change the chain of proxies is not displayed. \nI have created a jira for this - https://issues.jasig.org/browse/CAS-1348.\nThis are the steps (from https://wiki.jasig.org/display/CAS/Proxy+CAS+Walkthrough) I performed to reproduce the issue and check the fix.\nStep 1:\nhttp://localhost:8080/cas/login?service=http://localhost/bling\nStep 2:\nhttp://localhost:8080/cas/serviceValidate?ticket=###&service=http://localhost/bling&pgtUrl=http://XXX.XXX.XXX.XXX:8080/casclient/api/pgt.json/receive\n(cas client is application that received the pgtIou and returns the PT)\nStep 3:\nhttp://XXX.XXX.XXX.XXX:8080/casclient/api/pgt.json/?pgtIou=$$$\nStep 4:\nhttp://localhost:8080/cas/proxy?targetService=http://localhost/bongo&pgt=@@@\nStep 5:\nhttp://localhost:8080/cas/proxyValidate?service=http://localhost/bongo&ticket=***\n(list of proxies is expected here)\n. Yes that is issue - without this change the chain of proxies is not displayed. \nI have created a jira for this - https://issues.jasig.org/browse/CAS-1348.\nThis are the steps (from https://wiki.jasig.org/display/CAS/Proxy+CAS+Walkthrough) I performed to reproduce the issue and check the fix.\nStep 1:\nhttp://localhost:8080/cas/login?service=http://localhost/bling\nStep 2:\nhttp://localhost:8080/cas/serviceValidate?ticket=###&service=http://localhost/bling&pgtUrl=http://XXX.XXX.XXX.XXX:8080/casclient/api/pgt.json/receive\n(cas client is application that received the pgtIou and returns the PT)\nStep 3:\nhttp://XXX.XXX.XXX.XXX:8080/casclient/api/pgt.json/?pgtIou=$$$\nStep 4:\nhttp://localhost:8080/cas/proxy?targetService=http://localhost/bongo&pgt=@@@\nStep 5:\nhttp://localhost:8080/cas/proxyValidate?service=http://localhost/bongo&ticket=***\n(list of proxies is expected here)\n. ",
    "tfpoage": "Yes, please.\n. ",
    "artbristol": "I will give it a try on an AWS t1.micro instance (very weedy VM) and report back\n. Finished testing, but org.jasig.cas.web.support.InMemoryThrottledSubmissionByIpAddressHandlerInterceptorAdapterTests already fails on a t1.micro instance, unfortunately. (That's not one of the tests I touched)\nMaybe take the pull request anyway? You can always back it out if it starts causing trouble later.\n. ",
    "coveralls": "\nCoverage remained the same when pulling 5c9cddfdb8547ec33140b7aa39abcf18f88fafde on Unicon:CAS-1367 into 07868463106b7532a3b55cb9a681ee9224a80a92 on Jasig:master.\n. \nCoverage remained the same when pulling 5c9cddfdb8547ec33140b7aa39abcf18f88fafde on Unicon:CAS-1367 into 07868463106b7532a3b55cb9a681ee9224a80a92 on Jasig:master.\n. \nChanges Unknown when pulling 063a58bc8a7453d57a3824f5b275a87215e357ed on Unicon:CAS-1179 into * on Jasig:master*.\n. \nChanges Unknown when pulling 063a58bc8a7453d57a3824f5b275a87215e357ed on Unicon:CAS-1179 into * on Jasig:master*.\n. \nChanges Unknown when pulling fea57518dc61b3cc551f856f2cf78faaa7ed2a5b on Unicon:CAS-1425 into * on Jasig:master*.\n. \nChanges Unknown when pulling fea57518dc61b3cc551f856f2cf78faaa7ed2a5b on Unicon:CAS-1425 into * on Jasig:master*.\n. \nChanges Unknown when pulling 66643d2fb9cd5e740c58534cf53a95e3d0e31803 on Unicon:CAS-1425 into * on Jasig:master*.\n. \nChanges Unknown when pulling 66643d2fb9cd5e740c58534cf53a95e3d0e31803 on Unicon:CAS-1425 into * on Jasig:master*.\n. \nChanges Unknown when pulling f690c06c42cd4c324b81429898f5e8a270a1a9ca on Unicon:CAS-1425 into * on Jasig:master*.\n. \nChanges Unknown when pulling f690c06c42cd4c324b81429898f5e8a270a1a9ca on Unicon:CAS-1425 into * on Jasig:master*.\n. \nChanges Unknown when pulling f690c06c42cd4c324b81429898f5e8a270a1a9ca on Unicon:CAS-1425 into * on Jasig:master*.\n. \nCoverage increased (+0.05%) when pulling 53a6ecfdd5a4213c65dcd799c979311e7230f7d2 on Unicon:CAS-1475 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage increased (+0.05%) when pulling 53a6ecfdd5a4213c65dcd799c979311e7230f7d2 on Unicon:CAS-1475 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage increased (+0.05%) when pulling 53a6ecfdd5a4213c65dcd799c979311e7230f7d2 on Unicon:CAS-1475 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage increased (+0.05%) when pulling 53a6ecfdd5a4213c65dcd799c979311e7230f7d2 on Unicon:CAS-1475 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nChanges Unknown when pulling 9ca2e30c173871b7abd1a518a49cab680cdcd4fe on Unicon:CAS-1475 into * on Jasig:master*.\n. \nChanges Unknown when pulling 9ca2e30c173871b7abd1a518a49cab680cdcd4fe on Unicon:CAS-1475 into * on Jasig:master*.\n. \nChanges Unknown when pulling 2a427d8c3e3c7f728af9024651a5296d40085728 on Unicon:CAS-1360 into * on Jasig:master*.\n. \nChanges Unknown when pulling 2a427d8c3e3c7f728af9024651a5296d40085728 on Unicon:CAS-1360 into * on Jasig:master*.\n. \nChanges Unknown when pulling 8ce0b52f15598d3f88ced89210e49e386619c757 on Unicon:CAS-1439-1 into * on Jasig:master*.\n. \nChanges Unknown when pulling 8ce0b52f15598d3f88ced89210e49e386619c757 on Unicon:CAS-1439-1 into * on Jasig:master*.\n. \nCoverage decreased (-0.01%) when pulling 0616c42b79c8908cc28f0a1b1da8722d296eb079 on Unicon:CAS-1439-1 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage decreased (-0.01%) when pulling 0616c42b79c8908cc28f0a1b1da8722d296eb079 on Unicon:CAS-1439-1 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling bcad4b8be264dd0239e9b395db725933ab194214 on Unicon:CAS-1439-1 into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling bcad4b8be264dd0239e9b395db725933ab194214 on Unicon:CAS-1439-1 into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nChanges Unknown when pulling 2a30644c9e13b3c244f096dadf81ccb8f684c67f on Unicon:CAS-1360 into * on Jasig:master*.\n. \nChanges Unknown when pulling b7da095932d2dbb1d17604b6f73db2a8ef1e03b6 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling b7da095932d2dbb1d17604b6f73db2a8ef1e03b6 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling b7da095932d2dbb1d17604b6f73db2a8ef1e03b6 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling b7da095932d2dbb1d17604b6f73db2a8ef1e03b6 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling 3ab6ef7112747e6a6eb60f5a464f193a2d2c4705 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling 3ab6ef7112747e6a6eb60f5a464f193a2d2c4705 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling 3ab6ef7112747e6a6eb60f5a464f193a2d2c4705 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling 3ab6ef7112747e6a6eb60f5a464f193a2d2c4705 on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling f91d0a26ebfa8b8e84a68da2a0aacf99a61250dc on Unicon:CAS-1182 into * on Jasig:master*.\n. \nChanges Unknown when pulling f91d0a26ebfa8b8e84a68da2a0aacf99a61250dc on Unicon:CAS-1182 into * on Jasig:master*.\n. \nCoverage increased (+0.17%) when pulling cdc62e8fef7db5aef319ff186e566d75a189254d on Unicon:CAS-1480 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage increased (+0.17%) when pulling cdc62e8fef7db5aef319ff186e566d75a189254d on Unicon:CAS-1480 into fcda74c133740d77823d22770a9c81127ebd4922 on Jasig:master.\n. \nCoverage decreased (-0.03%) when pulling 37be1c3eac2337bee435e4085745fd4a09c258bf on dfish3r:ldap-authn-return-attrs into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage decreased (-0.03%) when pulling 37be1c3eac2337bee435e4085745fd4a09c258bf on dfish3r:ldap-authn-return-attrs into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage decreased (-0.03%) when pulling 37be1c3eac2337bee435e4085745fd4a09c258bf on dfish3r:ldap-authn-return-attrs into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage increased (+0.03%) when pulling a1794d1c5df98f1fdd985e9690e6a0e2ab816c63 on iPlantCollaborativeOpenSource:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage increased (+0.03%) when pulling a1794d1c5df98f1fdd985e9690e6a0e2ab816c63 on iPlantCollaborativeOpenSource:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage increased (+0.03%) when pulling a1794d1c5df98f1fdd985e9690e6a0e2ab816c63 on iPlantCollaborativeOpenSource:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage decreased (-1.2%) when pulling a729b357dac8a5ed0be707ed2f32158770124ae1 on iPlantCollaborativeOpenSource:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage decreased (-0.02%) when pulling a50664f8a8b71a9e0a74bec3be25adbcf2641e78 on iPlantCollaborativeOpenSource:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling 66fa2c35d29a3a20183b9db10e376ae23cbbdf10 on iPlantCollaborativeOpenSource:master into a438767a83d744b71618ad75470d3d7093edd9a9 on Jasig:master.\n. \nCoverage remained the same when pulling 2b1156291ec3dc3b464e00b57378d3d3648f055e on alexhenrie:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage remained the same when pulling 2b1156291ec3dc3b464e00b57378d3d3648f055e on alexhenrie:master into 755f299218a90231efc14bae5b982dfa22777b11 on Jasig:master.\n. \nCoverage decreased (-0.81%) when pulling cffc255a02e901a96f3bbe8c3113df049d66029a on Unicon:JPA-issue613 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage decreased (-0.81%) when pulling a88ac26a0f2df5530d3819e7d18e86d2d2e8cb10 on Unicon:JPA-issue613 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage remained the same when pulling deef00e4bf6f567533522c80ce66024221613138 on leleuj:cas-612 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage decreased (-0.79%) when pulling a6d6f3e574ef9b432206ca47cdc389db304068c6 on leleuj:cas-612 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage remained the same when pulling 1790f859fa096cc97e3fa931b4866f4f306bd0b9 on Unicon:uid-psw-swf-611 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage increased (+0.15%) when pulling 0bdfd94b08de24187ae7ccfa72be14723c208fb3 on Unicon:back-slo-620 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage decreased (-1.0%) when pulling f220b24b9a14b0d1d983d5a18bbca21b0c04e8ac on Unicon:back-slo-620 into 6f5a170e08794cc504a0d77cd5bbef4981dad31a on Jasig:master.\n. \nCoverage decreased (-0.0%) when pulling 7916b1901ecd8e1a8aa307a233c867a4b8776ca2 on archer308:authhandlers-logging into 2a042ff85dfac430ce8c5557bf1301123048de9a on Jasig:master.\n. \nCoverage remained the same when pulling 4f26b84e17fe629fccee64c1128bbe0dec2641db on leleuj:cas-612-4.0.x into 2a042ff85dfac430ce8c5557bf1301123048de9a on Jasig:master.\n. \nCoverage remained the same when pulling 2182d8aa5dffb5c017f466eddd52662b29cb606c on wzlee:master into 2a042ff85dfac430ce8c5557bf1301123048de9a on Jasig:master.\n. \nCoverage remained the same when pulling 13e40b414b92663e5689347cd3ef9a86460df74c on Unicon:#637 into 2a042ff85dfac430ce8c5557bf1301123048de9a on Jasig:master.\n. \nCoverage increased (+0.01%) when pulling a29bf5066f37a7c48df3242ac6372bcd7326de27 on Unicon:saml-attr-relp into 680fff3310152ada3706c4199ecae2783838dd46 on Jasig:master.\n. \nCoverage decreased (-0.13%) when pulling 84727040901ff7622cefc653c01c7dddfc76d072 on Unicon:saml-attr-relp into 680fff3310152ada3706c4199ecae2783838dd46 on Jasig:master.\n. \nCoverage decreased (-0.2%) when pulling 84727040901ff7622cefc653c01c7dddfc76d072 on Unicon:saml-attr-relp into 680fff3310152ada3706c4199ecae2783838dd46 on Jasig:master.\n. \nCoverage increased (+0.01%) when pulling ed86abb58b444b9ec078c461cad4a8eed83d8d2b on Unicon:saml-attr-relp into 8315b24c0dfd7849393882ce1e9ccb772401a68f on Jasig:master.\n. \nCoverage increased (+0.08%) when pulling 9ed13dab772e4b58e1f69ef65403bace56774d03 on Unicon:saml-attr-relp into 8315b24c0dfd7849393882ce1e9ccb772401a68f on Jasig:master.\n. \nCoverage remained the same when pulling d9c7866aa1905be7bee882d831fa81630b8fb12e on Unicon:timetodie-prop-465 into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.02%) when pulling 3912b00ee4863b0ec1c6c6c0493a03dddde252c2 on Unicon:saml-val-timeskew-#480 into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.02%) when pulling 3912b00ee4863b0ec1c6c6c0493a03dddde252c2 on Unicon:saml-val-timeskew-#480 into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.23%) when pulling dc66f8f0f7eeebe8afbc237e3b2f874b088cedfd on Unicon:saml-val-timeskew-#480 into 680fff3310152ada3706c4199ecae2783838dd46 on Jasig:master.\n. \nCoverage increased (+0.04%) when pulling 4e28bee2cfdb8c65ed01dc9f90d372d3964a6a63 on Unicon:cs-cleanup into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.19%) when pulling 1123209b9f320c149559f9e9046db18eed9156f9 on Unicon:issue#477 into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage increased (+0.01%) when pulling d1a709491e2b056dc5dc8eaeb74fd79a6580fe49 on Unicon:must-change-password-645 into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.23%) when pulling 6989e5aab9296b7aa9cc5cf8cd6291cfb7bbe29e on Unicon:issue-#460-TGT-logging into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.22%) when pulling 6989e5aab9296b7aa9cc5cf8cd6291cfb7bbe29e on Unicon:issue-#460-TGT-logging into 80f469c1b59129311616b8f3846110ed2f7b496d on Jasig:master.\n. \nCoverage decreased (-0.25%) when pulling 7a6f01a3e7e423a2657ad6fa9663c4f9a298f6b8 on Unicon:issue-#460-TGT-logging into 680fff3310152ada3706c4199ecae2783838dd46 on Jasig:master.\n. \nCoverage increased (+0.15%) when pulling cd793e18c672cc902d11fae3e7751ffdfe38088b on skibaa:CAS-1482 into 5a4e9046a9be07b14c4a41254d4f7b6fd89d8a66 on Jasig:master.\n. \nCoverage remained the same when pulling 747fa910aa2e129dcaac453b8eda262298e54b01 on Unicon:issue#656 into 8315b24c0dfd7849393882ce1e9ccb772401a68f on Jasig:master.\n. \nCoverage remained the same when pulling 3b1fa1ad533ada74f6b05b0222ddd7bf501e4149 on skibaa:CAS-657-new into 8315b24c0dfd7849393882ce1e9ccb772401a68f on Jasig:master.\n. \nCoverage remained the same when pulling 5bf05e01aa3d992bc984414645b6e12335eebf5e on leleuj:cas-663 into 44200593ed8b3c046fa46dc565bd8cdc047f44cf on Jasig:master.\n. \nCoverage increased (+0.26%) when pulling 71630402214fb634027ba74e993a3b932af11432 on Unicon:jdbc-handler-dynasalt into 44200593ed8b3c046fa46dc565bd8cdc047f44cf on Jasig:master.\n. \nCoverage increased (+0.27%) when pulling b3a9f2cad57b9c64f10e9992e6067176bae865b3 on Unicon:jdbc-handler-dynasalt into 44200593ed8b3c046fa46dc565bd8cdc047f44cf on Jasig:master.\n. \nChanges Unknown when pulling 3d5912ee6cd6be61e480c14352ddb105ebe60044 on Unicon:principal-success-view-669 into * on Jasig:master*.\n. \nChanges Unknown when pulling 816b66721dde7875fc3c78f02bd8ba64acbb858b on Unicon:principal-success-view-669 into * on Jasig:master*.\n. \nCoverage increased (+0.05%) when pulling 29c5f648b553da8ba7984e19dc77660739c953ea on Unicon:principal-success-view-669 into 73af2714d11fba39f8d89c03f2b3d26d2527c4c9 on Jasig:master.\n. \nCoverage increased (+0.05%) when pulling 8e04f7ca010c4bc297002ae7dcb6bd226917b6bc on Unicon:principal-success-view-669 into 73af2714d11fba39f8d89c03f2b3d26d2527c4c9 on Jasig:master.\n. \nCoverage decreased (-0.01%) when pulling 50a8249a59c0f5f6e69dc7d3b574b15a5a29d532 on Unicon:commons-langv3-621 into da2904b7906a12262e9012247a1c588973157b6a on Jasig:master.\n. \nCoverage decreased (-0.03%) when pulling 2d7da60762e713d50b350def214dea32227d6690 on Unicon:dyna-principal-attrs-468 into 0c552e6fab43ba04977ab0d2fa35e2a8afe38435 on Jasig:master.\n. \nChanges Unknown when pulling eee709e6e1f9b4d45f8af504990d0ea7b3739ec7 on Unicon:dyna-principal-attrs-468 into * on Jasig:master*.\n. \nCoverage increased (+0.13%) when pulling e017666b5f13594cbb71057cf48a508abbd3de41 on Unicon:dyna-principal-attrs-468 into fc6a867fbdd1e67cacdea62d3c46162e3f6e7b9c on Jasig:master.\n. \nCoverage increased (+0.06%) when pulling f9bcb09443809ca0085e69925643e65ce965f31f on Unicon:dyna-principal-attrs-468 into d74adb0aa7070c721b8c0bb2f0f45a8f37afd738 on Jasig:master.\n. \nCoverage remained the same when pulling 0fe5b9bd1ad6716c06feb02d06cbf13cbf5fc225 on Unicon:jdk7-upgrade-668 into 0c552e6fab43ba04977ab0d2fa35e2a8afe38435 on Jasig:master.\n. \nCoverage increased (+0.33%) when pulling abf795f0d5509255ec689681b9710a9857441f69 on Unicon:CAS-1369 into a8539cf295a21c84516309cb4c4671b00fc89da7 on Jasig:master.\n. \nCoverage increased (+0.55%) when pulling b4a1a27435326d429ddb48fbc97889ad026ca500 on Unicon:CAS-1369 into a8539cf295a21c84516309cb4c4671b00fc89da7 on Jasig:master.\n. \nCoverage increased (+0.01%) when pulling ed5b7b0b7a167573d0bf0f0fbeebf06ea2f3ddac on Unicon:CAS-1369 into b9967e71d1ce1722c44ba7926ac88959c7ab38af on Jasig:master.\n. \nCoverage decreased (-0.05%) when pulling 794dc34876d632d0e487ee3711191127a48170eb on Unicon:hostname-tcktid-gen into a8539cf295a21c84516309cb4c4671b00fc89da7 on Jasig:master.\n. \nCoverage decreased (-0.05%) when pulling 794dc34876d632d0e487ee3711191127a48170eb on Unicon:hostname-tcktid-gen into a8539cf295a21c84516309cb4c4671b00fc89da7 on Jasig:master.\n. \nCoverage decreased (-0.01%) when pulling 04e142b7f8498063090b6aa7fe27b93d7f6cf47b on Unicon:hostname-tcktid-gen into a8539cf295a21c84516309cb4c4671b00fc89da7 on Jasig:master.\n. \nCoverage decreased (-0.06%) when pulling ff6e6209ed664111a678d5e8ca2267619b42af81 on Unicon:hostname-tcktid-gen into 5dd3ce8c82fd84e86eb4047b3c45565e9a0ea67b on Jasig:master.\n. \nCoverage remained the same when pulling 771e6af81770d36c2a86adce83e6cb3a4e6022ea on sdorra:master into a8539cf295a21c84516309cb4c4671b00fc89da7 on Jasig:master.\n. \nCoverage remained the same when pulling 1dd8528b6d50d13fdae82f026286861cdb4deab8 on Unicon:jboss-cache-uber-webapp-depped into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage increased (+0.13%) when pulling 31605a73c91916c27463f1cef6405849a479a559 on Unicon:arg-extractors-refact into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage increased (+0.13%) when pulling e57248926190431364263b46cc34767ff89c187c on Unicon:arg-extractors-refact into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling fbd3b84205ba0433db358e65a3a0cd465caeea4a on Unicon:oauth_approval_prompt into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling 069810e87bf745a7d0b4aaeb544c2b34e0372a41 on Unicon:oauth_approval_prompt into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling 120f7e9da6e9bccfa2f6b15378cc51da7ec2cde6 on Unicon:oauth_approval_prompt into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage remained the same when pulling 5a27af4b41b2eadc54a1789a77ca234dd122dfcd on manamana88:master into 27d30b95342c26ae6c936fc702aa81897a62fd88 on Jasig:master.\n. \nCoverage remained the same when pulling 0d6991f215d7ef0d4e0ab5b626219364b119a009 on Unicon:svctheme-fallback-def into 94fce326c754b198e43a9dcc15e9a08bbad1eaa6 on Jasig:master.\n. \nCoverage increased (+0.03%) when pulling 4020a672eae1c5c5ce73599c312b390f31af2c39 on Unicon:svctheme-fallback-def into 94fce326c754b198e43a9dcc15e9a08bbad1eaa6 on Jasig:master.\n. \nCoverage remained the same when pulling 389673e35d7bdb783ab7216a2f7633b44fcde776 on leleuj:cas-689 into acbcd8edd73653348424aa157f7a7033034485f4 on Jasig:master.\n. \nCoverage remained the same when pulling 1ba0b91144a7e4e8ff17aa07a3e62abca9587e56 on leleuj:cas-689 into acbcd8edd73653348424aa157f7a7033034485f4 on Jasig:master.\n. \nCoverage decreased (-0.02%) when pulling 558c05a0edcc68d44046a25bb98624eda248e47d on leleuj:cas-609 into b9967e71d1ce1722c44ba7926ac88959c7ab38af on Jasig:master.\n. \nCoverage decreased (-0.02%) when pulling 74f24742d5eb5edc0576dcba99469b2be4a7d133 on leleuj:cas-609 into b9967e71d1ce1722c44ba7926ac88959c7ab38af on Jasig:master.\n. \nCoverage decreased (-0.01%) when pulling 212c96f0801f79f21b675e17de7739739740c7b4 on leleuj:cas-609 into b9967e71d1ce1722c44ba7926ac88959c7ab38af on Jasig:master.\n. \nCoverage remained the same when pulling 80e197190e44df0a07448a47847d98882c948148 on alan125:master into fc6a867fbdd1e67cacdea62d3c46162e3f6e7b9c on Jasig:master.\n. \nCoverage remained the same when pulling 27993f8b0fdb922d38c8d8af6b12d3fa2ddece66 on Unicon:openid-extractor-parent into fc6a867fbdd1e67cacdea62d3c46162e3f6e7b9c on Jasig:master.\n. \nCoverage increased (+0.02%) when pulling 54ee23fa86b083b0d93878fcf4049b850da997fd on mikeroda:master into 7d016cb478d68e0646440d841264be21e60b7875 on Jasig:master.\n. \n\nCoverage increased (+0.02%) to 43.252% when pulling 945a8ff37893bc62cc9d43d51b7000ef49994a1f on Unicon:mgmt-enhancemnets into 33507c6950ffdb7f7da90c038f63a983cd8410b0 on apereo:master.\n. \n\nCoverage increased (+0.1%) to 43.329% when pulling 22cd413e1017f9035cc1d42e1c406dcbdfe3395d on Unicon:mgmt-enhancemnets into 33507c6950ffdb7f7da90c038f63a983cd8410b0 on apereo:master.\n. \n\nCoverage increased (+0.03%) to 42.608% when pulling 5b4bc9f47c222584aa8e7179eb36fa0bc804a512 on Unicon:mgmt-case-sensitive into 062f3e912cae8fc88a440ea080730d4cdb601660 on apereo:master.\n. \n\nCoverage remained the same at 42.887% when pulling 1602caae855d098168e2c4cbb91ad773277ffccf on dodok1:patch-1 into 5fc23003e80241d83593a27a6738239b0f83499f on apereo:master.\n. \n\nCoverage decreased (-0.009%) to 42.878% when pulling 1602caae855d098168e2c4cbb91ad773277ffccf on dodok1:patch-1 into 5fc23003e80241d83593a27a6738239b0f83499f on apereo:master.\n. \n\nCoverage increased (+0.06%) to 43.199% when pulling 3615cde30aa522fd0386b53885f050628c3da222 on philliprower:AddCASThrottleToOAuth5.2.x into b5a7aef05d86cc66da8df16322e8520b2cb69cc7 on apereo:master.\n. \n\nCoverage increased (+0.06%) to 43.028% when pulling 4ced3dde5c37b76b59d6bb3a871c9682dccf840b on philliprower:AddCASThrottleToOAuth5.2.x into cd4bc31d9e48907b3272ef6644f540c26d579df5 on apereo:master.\n. \n\nCoverage decreased (-0.009%) to 43.029% when pulling fe4f1532738b7e3c7db9e18a386a83b1dcf6c6ba on philliprower:AddCASThrottleToOAuth5.2.x into a55bd714817281c199bea6a6363a0d8122443450 on apereo:master.\n. \n\nCoverage decreased (-0.004%) to 43.047% when pulling 987484bd1c32c6425e6e1678d11361b0ecf90b21 on strnadpetr:jpa-ticket-stream into 6737833b04f8bf0ed696c72a310244968c61d2fe on apereo:master.\n. \n\nCoverage decreased (-0.001%) to 43.035% when pulling f50b0ac70d08571d3f8389454ac4abf1b8c7e00b on marwatk:password-warning-change into ec23ef2da277d91fed34798b02034819a307ce36 on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 43.036% when pulling eb242ba09b0b3d3c9833e129c13da8cc27cf84f4 on frett:validateServiceTicketOriginalService into 6737833b04f8bf0ed696c72a310244968c61d2fe on apereo:master.\n. \n\nCoverage increased (+0.06%) to 43.033% when pulling 9accb55a9406906c619ca0f3c0d5fd8e0a54e8d3 on rrenomeron:pac4j-saml-css-new into cd4bc31d9e48907b3272ef6644f540c26d579df5 on apereo:master.\n. \n\nCoverage increased (+0.04%) to 43.064% when pulling 53416acd2d4dab6ab8215c475539f3f20a88e016 on rrenomeron:pac4j-saml-css-new into 089dd0b8f9b32d596eee33c9fb6f2fd7bdca6afb on apereo:master.\n. \n\nCoverage increased (+0.01%) to 43.049% when pulling 7d54983704066cc28210378cd64cc3d947e96ccb on Unicon:mgmt-theme into a55bd714817281c199bea6a6363a0d8122443450 on apereo:master.\n. \n\nCoverage increased (+0.09%) to 43.132% when pulling 379b28080a22bd7dea0539e8c14331a5f1ef0e19 on Unicon:mgmt-restful-policy into a55bd714817281c199bea6a6363a0d8122443450 on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 43.102% when pulling 3f690bb7bbf3e2375fc16605d91e28f59acaca19 on Unicon:mgmt-restful-policy into fe7655eebdec4fb34cda2bc11146cd091b8de273 on apereo:master.\n. \n\nCoverage increased (+0.006%) to 43.043% when pulling b43e4d5f94d8188a71b2afbf5f5ac19be77e1e4b on Unicon:mgmt-saml-groovy into a55bd714817281c199bea6a6363a0d8122443450 on apereo:master.\n. \n\nCoverage increased (+0.01%) to 43.052% when pulling 76f28efc7cc925719ee728cb673b0f965da651b0 on Unicon:mgmt-saml-groovy into a55bd714817281c199bea6a6363a0d8122443450 on apereo:master.\n. \n\nChanges Unknown when pulling 4c620859b37fdf4ae3af24b7374751188fe52188 on marwatk:pwd-change-auto-login into  on apereo:master.\n. \n\nCoverage increased (+0.005%) to 45.375% when pulling fd4d4122b9f2070b0721f482218e91730546332f on marwatk:pwd-change-auto-login into 1afd8179b9bdc1bbf543277025639692113aad83 on apereo:master.\n. \n\nCoverage decreased (-0.001%) to 45.369% when pulling fd4d4122b9f2070b0721f482218e91730546332f on marwatk:pwd-change-auto-login into 1afd8179b9bdc1bbf543277025639692113aad83 on apereo:master.\n. \n\nCoverage decreased (-0.2%) to 45.22% when pulling bf7a9f9ea230054e9b131b1b2f9d588049ecf524 on Unicon:mgmt-properties into e1cd81aed972a63d4dceded9610f2fd566e16259 on apereo:master.\n. \n\nCoverage decreased (-0.1%) to 45.499% when pulling b2bac8dc0f8cd536a357b409f6af1c09d3c4cc3e on Unicon:mgmt-properties into 09b2d1b84602004625438c273f3f91a5fd732eef on apereo:master.\n. \n\nCoverage decreased (-0.007%) to 45.617% when pulling d634c0d2026eeff6794b087beaf47778d130a613 on owski:CAS-3032 into 09b2d1b84602004625438c273f3f91a5fd732eef on apereo:master.\n. \n\nCoverage increased (+0.0005%) to 45.624% when pulling 80b9a5d11060225b9a33fa5f4405e6f1a9361e25 on owski:CAS-3032 into 09b2d1b84602004625438c273f3f91a5fd732eef on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.806% when pulling 43240cd96866ad01dd101fd6cad2847ea7dcf600 on Unicon:mgmt-5.2-bugs into 09932b85f87cedad71346cbf5bc009d488766a4e on apereo:master.\n. \n\nCoverage remained the same at 45.802% when pulling efb4f4516a0de00c101fb0f1369f3901dfe4adbc on Unicon:mgmt-5.2-bugs into c0b996ac1697c814a9e2caea783d61ee63cbd6e3 on apereo:master.\n. \n\nCoverage decreased (-0.006%) to 45.796% when pulling 659b4ae489f0380c12229e3bb6966b862d98d581 on Unicon:mgmt-wizard into 8a52b698f344da5176fd76fdc85c072b1d53779b on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.786% when pulling 659b4ae489f0380c12229e3bb6966b862d98d581 on Unicon:mgmt-wizard into 8a52b698f344da5176fd76fdc85c072b1d53779b on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.786% when pulling 659b4ae489f0380c12229e3bb6966b862d98d581 on Unicon:mgmt-wizard into 8a52b698f344da5176fd76fdc85c072b1d53779b on apereo:master.\n. \n\nChanges Unknown when pulling 2fb57427d7c3f1e573a0e855591000ba723daa42 on Unicon:mgmt-ng-5 into  on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.713% when pulling d842b2e4c10f7c7718e8f71c0feaae5464142897 on frett:protocolAttrRelease into 7c8fa2a4eeb508aaa802890a8a39f8bfbad10ae1 on apereo:master.\n. \n\nCoverage remained the same at 45.791% when pulling 12b5b08f6c868136bd4295dded8212dbd8cf1642 on Unicon:mgmt-ng-5-fix into 399b5f3c1ac48777a9593b68cdb366811fab7364 on apereo:master.\n. \n\nCoverage decreased (-0.003%) to 45.713% when pulling c31633cfb6cb1846e3afc080268294a995f355aa on Unicon:mgmt-material-5 into c3290afeb23677f1663f236ce87d35ddfe8bb6f5 on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 45.689% when pulling c31633cfb6cb1846e3afc080268294a995f355aa on Unicon:mgmt-material-5 into c3290afeb23677f1663f236ce87d35ddfe8bb6f5 on apereo:master.\n. \n\nCoverage decreased (-0.006%) to 45.69% when pulling 18cf09a30a145a617d576647eccaeed55afb2ab0 on Unicon:jaas-auth-fix into b07cb846c616772f6cdcbbd184750e25e63153ef on apereo:master.\n. \n\nCoverage decreased (-0.003%) to 45.686% when pulling bcb894b1ad0a6fc6850e7d22ac2c09d87b297799 on arbner:saml-slo-fix into 7fe1d771b6eddc2a5ae55dba74f5f26380a93e0d on apereo:master.\n. \n\nCoverage decreased (-0.1%) to 45.695% when pulling 1ee65c52f710171b91e080c4ec6d2cecba9fc7fc on arbner:saml-slo-fix into 547f2fba2fbbbc72550a4cf679920a292bb9335c on apereo:master.\n. \n\nChanges Unknown when pulling 5d14e178d970e849c155843a9c54e1261ab00463 on frett:usernamePasswordSubclasses into  on apereo:master.\n. \n\nChanges Unknown when pulling 5d14e178d970e849c155843a9c54e1261ab00463 on frett:usernamePasswordSubclasses into  on apereo:master.\n. \n\nCoverage increased (+0.1%) to 45.836% when pulling 2d0ee2d575619ab3cb24a18126a3dcd9a2a92148 on jkacer:master_enh_pac4j_single_logout into 50e40c2e3087bd84bc1974b659c975c41be81f7e on apereo:master.\n. \n\nCoverage increased (+0.2%) to 45.877% when pulling 6c94a1733afaacf471ccc37086dea309969fae75 on jkacer:master_enh_pac4j_single_logout into 48184d0d303c4f095c7b2a8da4657fef27208de2 on apereo:master.\n. \n\nCoverage increased (+0.2%) to 45.893% when pulling 583f6dbbaa898f055c0377bccf62c00ed4edd6d7 on jkacer:master_enh_pac4j_single_logout into af727dcf7d93b2265981a927ead49581e3a28a9f on apereo:master.\n. \n\nCoverage increased (+0.2%) to 45.888% when pulling 3d0d703c40c70631d518f15a5cf41b68297aff7f on jkacer:master_enh_pac4j_single_logout into af727dcf7d93b2265981a927ead49581e3a28a9f on apereo:master.\n. \n\nCoverage increased (+0.2%) to 46.146% when pulling ed09ca97d46c0679a704afdf48620eafe357a2da on jkacer:master_enh_pac4j_single_logout into 23ecd6b8b5e10c3a1ce05c2b84f6a78da9ed3bf6 on apereo:master.\n. \n\nCoverage increased (+0.3%) to 46.215% when pulling ed09ca97d46c0679a704afdf48620eafe357a2da on jkacer:master_enh_pac4j_single_logout into 23ecd6b8b5e10c3a1ce05c2b84f6a78da9ed3bf6 on apereo:master.\n. \n\nCoverage increased (+0.2%) to 46.232% when pulling 9c84f7081bbee4d6bb7c22136d9f84d8a61e1f98 on jkacer:master_enh_pac4j_single_logout into 9d251531cc1d67fa6fe31f6b0a5475d0d2f487f1 on apereo:master.\n. \n\nCoverage increased (+0.2%) to 45.757% when pulling dfc58e1842f0d293382e7d2a5a9d394680fec9f1 on jkacer:master_enh_pac4j_single_logout into 568104e39f0cbc2ffb2cde4e7cdd5c68b82acbb0 on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 45.685% when pulling 3369c2b0f376e0ce56e0006801b9f79e4c55f45b on Unicon:mgmt-mat-table-datasource into 040c7c3075666e43d8dbc80fa7cf667b654ab585 on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.707% when pulling 022fd13662caf4a4e80ba2cf86c364ac0853110f on Unicon:mgmt-ng-lint into fd8df75d543d61e527d797e5dc8456fcbdfb41d9 on apereo:master.\n. \n\nCoverage increased (+0.002%) to 45.702% when pulling 39683e3858fbe8ece3fe6a0ade6744777bfb5804 on frett:samlAdjustments into 48184d0d303c4f095c7b2a8da4657fef27208de2 on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.693% when pulling bcef3ba73224cb474061bbe3e1d5827a5a8495b6 on mestarshine:master into 5a3f3cce9dc6a37a29a5ca4f469c3abb5b2de3f4 on apereo:master.\n. \n\nCoverage remained the same at 45.702% when pulling 6887e1aa9cf59c787132b6dcfda1330e980c9911 on jtgasper3:patch-3 into c8c2ad8dd5e8edb02cc6c9cb9c2b0a78b4fbafcf on apereo:master.\n. \n\nCoverage decreased (-0.006%) to 45.703% when pulling 09ab4bfd61b5ecf0be22b314391307581edf2da2 on frett:fixSamlRsForThymeleaf into be4809757a7100a1cda14f91f38ec879b542fa46 on apereo:master.\n. \n\nCoverage increased (+0.09%) to 45.795% when pulling 09ab4bfd61b5ecf0be22b314391307581edf2da2 on frett:fixSamlRsForThymeleaf into be4809757a7100a1cda14f91f38ec879b542fa46 on apereo:master.\n. \n\nCoverage decreased (-0.001%) to 45.692% when pulling 5689fdc3c254487d9a30175f305d60b03d9491fe on antoine777:oidc_fix into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nCoverage increased (+0.08%) to 45.771% when pulling b576e9df2cf883dd0ff8db53ac7dc9996d4ab432 on antoine777:oidc_fix into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nCoverage increased (+0.005%) to 45.699% when pulling 2a2a96cb24ac44339ba99506090a7d0f0d6fb0de on antoine777:oidc_fix into 276472caca4c282e2633c7722bc7d2da2c421aaf on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.709% when pulling 54b3640f99dba525f1628e684e7820048c0cbcdb on robertoschwald:fix_spec_serviceValidate_schema into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nCoverage increased (+0.03%) to 45.709% when pulling 037338a18e048cbb44abee265e36b9c23a00b86f on robertoschwald:fix_spec_serviceValidate_schema into af727dcf7d93b2265981a927ead49581e3a28a9f on apereo:master.\n. \n\nCoverage increased (+0.01%) to 45.693% when pulling 037338a18e048cbb44abee265e36b9c23a00b86f on robertoschwald:fix_spec_serviceValidate_schema into af727dcf7d93b2265981a927ead49581e3a28a9f on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.715% when pulling 1432b69ffd04c105d99dea4c467175d8ec3e3cf5 on code-4-fun:master into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nCoverage decreased (-0.006%) to 45.687% when pulling 1432b69ffd04c105d99dea4c467175d8ec3e3cf5 on code-4-fun:master into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nCoverage increased (+0.01%) to 45.703% when pulling ebed4d8b6e501ea8bedd70e40073db0cbecc5f31 on code-4-fun:master into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nChanges Unknown when pulling ff33fc9fecd68ffe0fc91b06f96e48fbb42ad503 on code-4-fun:master into  on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.71% when pulling ed113c4cb2297b9cf2747f26bb9e15e14e14b617 on antoine777:oidc_protocol_implementation_fix into 9ee564283ba5ca3fb0b8862576988f46d3e8e9af on apereo:master.\n. \n\nChanges Unknown when pulling 6ff16d40acda650a36e5c40b83d692a9b7d454c5 on swoeste:master into  on apereo:master.\n. \n\nChanges Unknown when pulling 6e3ef2bd039c176b0b4a9a90f336d677e7d85056 on swoeste:master into  on apereo:master.\n. \n\nCoverage decreased (-0.07%) to 45.987% when pulling f5ad58d7cd2b19f1ea3893491215d1bed6299d92 on hdeadman:shellfix into 28238a65833f72db73ee3751321f9be88a38cb9d on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.685% when pulling 935b8b90c0464f0f9199a669659d871f7237bc76 on pdrados:5.2.x-DateTimeRiskCalculator into ec21a89263b1efafb173f9b0a0f9df7a12ef71de on apereo:5.2.x.\n. \n\nCoverage decreased (-0.02%) to 45.692% when pulling 4d39d8920347e0683b8c7e24b2bf2eeeb47748e5 on hdeadman:shellfix52 into b8a739ea6a96180e3a90ddb74eba8dc9fae05762 on apereo:5.2.x.\n. \n\nCoverage increased (+0.02%) to 46.035% when pulling 361230eaec3ca6cf7ab68dbfcc7d91ccc872892f on frett:webflowStateConstant into 334669fc9ff307fe4065891db3ab1bd630e63871 on apereo:master.\n. \n\nCoverage increased (+0.006%) to 45.963% when pulling b3042fa804e7d0a69edd4d9673cc258910c2a1cf on remove-spring-factory into 50e2f14749356333aee123ff20c5274e23668134 on master.\n. \n\nCoverage increased (+0.02%) to 45.957% when pulling bdaa994695dafd5546305d0347df63920e46276e on prigaux:patch-3 into b61ebf7e9199448187fad7e83af87ae06a7a2fbc on apereo:master.\n. \n\nCoverage increased (+0.003%) to 45.646% when pulling 471d052dadd1eedadfd1eabf0707ae8692a737dc on kawhii:5.2.x into b2f89b8406ff40c97b3c126ac76c188b27123308 on apereo:5.2.x.\n. \n\nCoverage increased (+0.02%) to 45.646% when pulling 3d4f7115b9ac52e81e25287da6c2c36406185a2b on kawhii:5.2.x into 3c23af44fcb69e4918fcea8da8f86738acd75702 on apereo:5.2.x.\n. \n\nCoverage increased (+0.006%) to 45.63% when pulling f30320bae176da83fb01842ff5180f2de906f863 on kawhii:5.2.x into 3c23af44fcb69e4918fcea8da8f86738acd75702 on apereo:5.2.x.\n. \n\nChanges Unknown when pulling 8093b1a2c96f80cc9fd7727f48c74e39a583cce2 on hdeadman:throttle-test into  on apereo:master.\n. \n\nChanges Unknown when pulling 84e8e1a3254de0a177c996bc0d3cc135429cb466 on hdeadman:tests into  on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.889% when pulling 422d788c4d5a8407773d6b7408a24508367f955f on tduehr:jpa-cassandra into a20dcdc76adf52a729da0acdfdc08d6a78892ba9 on apereo:master.\n. \n\nCoverage increased (+0.003%) to 45.908% when pulling 1ea2264cf268ee6f60f7c2fbc77e258446023ad3 on tduehr:jpa-cassandra into 5059d9289e4a9d9a867d64384867cbca6d597fcf on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 45.893% when pulling 28756170fcd8771ebfa3f7e770624f07599dece4 on tduehr:jpa-cassandra into 5059d9289e4a9d9a867d64384867cbca6d597fcf on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.834% when pulling 76d1736680a92bc4d65beb32a96717a83cdfb53e on tduehr:jpa-cassandra into b16b7f4f5b74d250b4f7ad2aaaf83526a1ee53c2 on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 45.819% when pulling 00a6121bba15718c48d1b80cc552d1bb687a4785 on tduehr:jpa-cassandra into b16b7f4f5b74d250b4f7ad2aaaf83526a1ee53c2 on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.831% when pulling 9ea2e550977ee19dcb0720d8543355b5afc0484b on tduehr:jpa-cassandra into b16b7f4f5b74d250b4f7ad2aaaf83526a1ee53c2 on apereo:master.\n. \n\nCoverage increased (+0.006%) to 45.879% when pulling 0d8a464e089f611dca7c8be59e3c77ca4121cd1c on ilgrosso:patch-1 into a20dcdc76adf52a729da0acdfdc08d6a78892ba9 on apereo:master.\n. \n\nCoverage remained the same at 45.882% when pulling 86ee406d6d90dedbd92e0500c5c592a8f2658206 on arbner:locale-fix into aced4914264f924542803e8a2dbf145ab3f048d3 on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.861% when pulling 79dde5b4f9f6ecab29182c0a00a7deebd8140a80 on kardasa:master into aced4914264f924542803e8a2dbf145ab3f048d3 on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.83% when pulling 9b124a1acede2a72c4d91f54bedb8492e2a8fdda on leleuj:fixrestmfabypasscallm into ec7bf6d147889e7c8258fd211acd63438624be7a on apereo:master.\n. \n\nCoverage increased (+0.02%) to 45.845% when pulling 6146319b6d860b8792bed212b55b31ccc29e359b on svc-url-pattern-refactor into 311433992d610e1cc6d14d20797bb2c79d733fab on master.\n. \n\nCoverage decreased (-0.008%) to 45.934% when pulling 1195eacc03759755cb7e25830a894ff94ca65db8 on 3cdota:master into 88461ef5594758880c3be85767782c1f2140df04 on apereo:master.\n. \n\nCoverage remained the same at 62.814% when pulling de892d52d95a79cc89d4b4fda2b0237599bc6d1f on tduehr:elementcollections into c88207329856eba28d434668e3854b9e7c1ac254 on apereo:master.\n. \n\nCoverage decreased (-0.1%) to 45.533% when pulling 3ed79aae19a70bfb20005633af022ec043c6d8d6 on hdeadman:jasypt3 into d2343f3b295ade2f8d2b8b3b0bdd089381aa7fcf on apereo:master.\n. \n\nCoverage decreased (-0.007%) to 45.436% when pulling 579cf18614b46ddd99d26e5367f2786759ef79e2 on hdeadman:sslvalvefix into e0f58db40745277de5adf2e3225d1aaf2d32a454 on apereo:master.\n. \n\nCoverage decreased (-0.06%) to 45.493% when pulling 8534885d842738722de471a92f26a3b7b0cd810b on hdeadman:sslextract into 3d5595eebb1b4f3b9d210447ddea83956a3135d8 on apereo:master.\n. \n\nCoverage increased (+0.007%) to 45.45% when pulling 403539b5159aaa255ecdca1022e44bbdb9ecc4a5 on pt-studio:master into e0f58db40745277de5adf2e3225d1aaf2d32a454 on apereo:master.\n. \n\nCoverage decreased (-0.007%) to 45.425% when pulling 303546bd7cd0f9f70e3ef0056bd76f01fdf57d9f on tick-reg-catalog-config-tests into 43a40da7f7b64755b9b50d686b5b8160df40059e on master.\n. \n\nCoverage decreased (-0.007%) to 45.646% when pulling a993f29b4a6dc5cb835d046b2e07634469a0df10 on arbner:saml-attribute-names into 35802534928b94706091678eb4806b81f7677dc0 on apereo:master.\n. \n\nCoverage remained the same at 45.576% when pulling c2218744db395574434bc55064b40827f4fa8654 on alexdp:patch-2 into 6486c4a1bdb63bc813593c8eb5f4f00f1450577f on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 45.532% when pulling 9ab7f69859e56611dd0f38559d09b541c2616803 on leleuj:fixpackagenames into b518bccc2b741a7b63a2b8ff740f365caab1a3e4 on apereo:master.\n. \n\nCoverage increased (+0.007%) to 45.567% when pulling 9b401f98e62e199b4b85bcdbfc66009579053709 on fjollberg:logout-flow2 into b518bccc2b741a7b63a2b8ff740f365caab1a3e4 on apereo:master.\n. \n\nCoverage increased (+0.007%) to 45.567% when pulling 5b548d13c65dad0ec5dd7045a5fdd8758152b7de on cifren:patch-1-DefaultRegisteredServiceAccessStrategy into b518bccc2b741a7b63a2b8ff740f365caab1a3e4 on apereo:master.\n. \n\nCoverage decreased (-0.003%) to 45.563% when pulling d918a79de4c4564011dd4f02f9b6493cd5acb93f on sbearcsiro:fix-non-remember-me-cookie into ccd1f382a98f45a31df83008c2acd52cb1a6c419 on apereo:master.\n. \n\nCoverage decreased (-0.005%) to 45.531% when pulling 47e909fd917376fd667f038d2fe5dabb3f10999f on DOFandersolsen:bugfix/kryo_remember_me_username_password_credential into ba823365cdba4ee4f401b56f34809b58bdf8ade8 on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 45.524% when pulling d621bb9a3eb9d1bbb758a93a3facbb7c4e329e57 on jtgasper3:patch-5 into b7411f101a6f3acebec4251e03b64b51dac247ce on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 45.527% when pulling da9e594a285ca2dfc2b77ec3864f4e7fe2a2d0eb on discovery-attributes into 0043cd9ecba849ec0ef1102a4bf2e263f33ecd67 on master.\n. \n\nCoverage increased (+0.02%) to 45.549% when pulling 7d2f4a101576b81c2a969c61d077caf470bc4c23 on plajko:performance_fix into ad7280d540c008072c5740d6383b2579a8433170 on apereo:master.\n. \n\nCoverage increased (+0.07%) to 45.605% when pulling f9fe4db08dc719a165a45148ff49e6a70ee96380 on bootstrap4 into ad7280d540c008072c5740d6383b2579a8433170 on master.\n. \n\nCoverage remained the same at 45.531% when pulling 190a8160c8689ab7ec7e7f3017889c9ff04dbd17 on plajko:tomcat_threadpool into ad7280d540c008072c5740d6383b2579a8433170 on apereo:master.\n. \n\nCoverage remained the same at 45.531% when pulling 34bcbb1bc8521232c744d115916e563aefd4e10b on plajko:mongo_writeconcern into ad7280d540c008072c5740d6383b2579a8433170 on apereo:master.\n. \n\nCoverage decreased (-0.006%) to 45.543% when pulling d5dc0a204c39c732497840a6ac27a1778395ddd5 on audit-oauth-user-profile into 3d5595eebb1b4f3b9d210447ddea83956a3135d8 on master.\n. \n\nCoverage increased (+0.007%) to 45.605% when pulling 342600db2ad02c2ed5083e2f7f83b7476ffece43 on cisiqo:master into e1f4daaedefba096f66a58a776d9b9d22e54fd34 on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 45.572% when pulling 747934ccc22f191849b2ec75ec4ebd296c340f4a on William-Hill-Online:cas01 into e1f4daaedefba096f66a58a776d9b9d22e54fd34 on apereo:master.\n. \n\nCoverage decreased (-0.004%) to 45.575% when pulling 8c3b132f633f655bd0f2e57d00f6ecf8d9a768ce on plajko:oidc_jti into 9e26f5bdbd77174d7ec5117fb8588b6eff679603 on apereo:master.\n. \n\nCoverage decreased (-0.007%) to 45.553% when pulling c2393dc17f241f432e48327dcee081d6eb4d77f8 on leleuj:redislogs into 0043cd9ecba849ec0ef1102a4bf2e263f33ecd67 on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 45.55% when pulling b520e3fbab636a1e4b68a707f8442a32aa27f16f on frett:gauthHandlerResultFix into 568104e39f0cbc2ffb2cde4e7cdd5c68b82acbb0 on apereo:master.\n. \n\nCoverage increased (+0.07%) to 55.528% when pulling 0d21ff5badd56c33e89e065cd5807f110594f904 on tduehr:split-hibernate into 1b57bd75ab230fcf1c68371b0c54c64307e964cd on apereo:master.\n. \n\nCoverage remained the same at 45.574% when pulling 73e4866bc9708426e43cc4c179379f4543a2153e on sbearcsiro:patch-3 into 8e9c916bedd1977ff48a4c063f2b76aeecbd0f12 on apereo:5.2.x.\n. \n\nCoverage increased (+0.04%) to 46.823% when pulling 47e9c4255b404736d17e9e2c293a2b734f63fcce on frett:triggerSelectionStrategy into 1913ca50ce5d7205e52cec358f1d8264753ca911 on apereo:master.\n. \n\nCoverage remained the same at 47.428% when pulling c855a221d5ef5c16dcfae9e366336317692d11d0 on couchbase-v5 into b68ec79f0d09565487c73e6961739c0155af98d3 on master.\n. \n\nCoverage decreased (-0.08%) to 45.505% when pulling bda9337511270894566f193f0292f5d8ed1ee310 on auxepaul:fix-U2F into 9b0f9ff2ba8a3b8ff4c70e771e0bdb0bed28f0be on apereo:5.2.x.\n. \n\nCoverage decreased (-0.008%) to 47.782% when pulling 508ea9a5ce2536fdecbc1c098549c6c31db7a241 on frett:mfaTrustedDeviceFingerprint into ba023839a6acb0740b2dbeef5686e6dba0a3cc96 on apereo:master.\n. \n\nCoverage decreased (-0.03%) to 47.793% when pulling b3976e2a95dba50e77d251db9ce54c3cf7ed6ee8 on surrogate-access-audit into 8f861336f134e72d69cd76d16c6d2d574041affd on master.\n. \n\nCoverage increased (+0.003%) to 47.825% when pulling 214938182481745d54d44fa91c24061c3abdbb27 on hdeadman:oidc into 8f861336f134e72d69cd76d16c6d2d574041affd on apereo:master.\n. \n\nCoverage increased (+0.02%) to 47.801% when pulling 85f4c401e08b6429bef01b93ed2b385646dacfd7 on jsimomaa:master into 1558594987680753a1e147f913654ebed63b57c4 on apereo:master.\n. \n\nCoverage increased (+0.01%) to 47.793% when pulling dcd33c6d5676b32b113290831c4b11e7a98827a9 on reddyalready:fix-broken-html-links into 1558594987680753a1e147f913654ebed63b57c4 on apereo:master.\n. \n\nCoverage increased (+0.02%) to 47.815% when pulling 742e1af187be446e5c6d5b2501001daf406890b5 on yubi-account-encryption into 6237224929f9f1f7015d65902f4369ad4a93e4cc on master.\n. \n\nCoverage decreased (-0.09%) to 45.497% when pulling fd50d69f2de739ff9c04ed7a092ff15665cf6900 on byu-oit:5.2.x into decc9295269cb77656519e3182d262a59f4e9103 on apereo:5.2.x.\n. \n\nCoverage increased (+0.01%) to 45.503% when pulling e8db960eff636834450a229e9b781b19b0680036 on mgmt-saml-name-fix into e6d7b807bc00601c2f290acbede7a3c3f241b27d on 5.2.x.\n. \n\nCoverage decreased (-0.09%) to 45.503% when pulling 785639bdac593928c45c963f0b9c1865a88b571b on leleuj:pac4jversion into decc9295269cb77656519e3182d262a59f4e9103 on apereo:5.2.x.\n. \n\nCoverage increased (+0.06%) to 64.679% when pulling 7ca17eb48cb1eb26d7f30c584276512059c954ef on tduehr:couchdb into 4fd1df012b9cd853194fc0dc8dfb49120621bfae on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 59.453% when pulling 8d5957b2a803d17025bcb087a452719fd4b88373 on sbearcsiro:oauth1-req-token-serialiser into 8311037b8035673ec231fb509820c23720bd4778 on apereo:master.\n. \n\nCoverage remained the same at 60.292% when pulling 1412493e856433523b4b44d4b51683120902573c on sbearcsiro:fix-template-handler-breaking-replace into 3ff03f65a76692125669747f0bade7176dfd5795 on apereo:master.\n. \n\nCoverage increased (+0.03%) to 61.529% when pulling 417166994487b54cff07ec6264f64c1fea699a5f on sbearcsiro:external-properties-first into bdab466821fdcf9e7b726b21b2db485e6ccd55b0 on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 63.352% when pulling 52d06ecafb9c20b7daafb6457b38b041c56a7bb4 on fcrespel:update-french-locale into 5c0566fda0b870b5502a85bdfc7b823a79ad8c3a on apereo:master.\n. \n\nCoverage increased (+0.01%) to 63.515% when pulling 46e0e159e94e079ad6ce682b2a9955abbeb09155 on tduehr:pac4j_delegate_style into 9bc551b8f43a83af0c5595597e3e4be487a3f9a5 on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 63.486% when pulling d7c6d6dff1ce70fc27623968d12b06bfba1ddc2f on sbearcsiro:serializable-default-authn-results-builder into 64a69c4543d64804a2e88d95ff51bcb229429503 on apereo:master.\n. \n\nCoverage increased (+0.01%) to 64.603% when pulling 85f3c7e780fd1f343b038f8b2278d21c3d4566ec on sbearcsiro:twitter-email into b99040a52353e8de3a44f756a9692c028f36ee7d on apereo:master.\n. \n\nCoverage decreased (-6.4%) to 60.812% when pulling a84d89e25f7f7b886eecebab8ee3b2bb387c66a3 on tduehr:split_tests into 84ffd48b388354a13f615e49c6a7acf09064232f on apereo:master.\n. \n\nCoverage increased (+0.02%) to 64.643% when pulling dc927feba7adf6eb93f0b69e5d99c29c936dee5c on ringmaster217:master into 4fd1df012b9cd853194fc0dc8dfb49120621bfae on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 64.603% when pulling 3aafb77bb0d1538a3cf128c46c3323c960a6d3dc on domain-manager into 4fd1df012b9cd853194fc0dc8dfb49120621bfae on master.\n. \n\nCoverage increased (+0.02%) to 45.46% when pulling 674003f01d6d1596b63e96e7447f718d1c863af5 on fmartelli:rmarp-pr into ef678256cebe828d407ad32e0d8b7a89aeb4ac2b on apereo:5.2.x.\n. \n\nCoverage increased (+0.004%) to 69.16% when pulling 43cbec40bae39ec7ade95be44f9f0bc246130cba on jimmytheneutrino:hackfix-wellknown-endpoint into 6884628e70609e2de41bec04c72889f142ebe27c on apereo:master.\n. \n\nCoverage decreased (-0.01%) to 62.803% when pulling 7703ce871dc6bf559a09810280aa42c2447f9bce on renovate/pin-dependencies into c88207329856eba28d434668e3854b9e7c1ac254 on master.\n. \n\nCoverage increased (+0.01%) to 62.812% when pulling 074610d96e95df03cb3204e115ad6b42e8231071 on NgSekLong:health-status-desc into 8ab8154fcf4d9279e7494a0bf66cb1eef49cc756 on apereo:master.\n. \n\nCoverage increased (+0.01%) to 62.825% when pulling 9df1b77016aa048609a8efef8f29eb05951296ef on NgSekLong:patch-3 into c88207329856eba28d434668e3854b9e7c1ac254 on apereo:master.\n. \n\nCoverage increased (+0.03%) to 62.637% when pulling d24cbbdcd60cf5a78c91b45a57a57f73de1daf91 on sbearcsiro:mongo-delete-old-expire-at-index into 7a2e1e56de734aec1960b5383726e87b082de788 on apereo:master.\n. \n\nCoverage decreased (-0.02%) to 45.503% when pulling a24f708529fb9355454ce4827d45e85a7bb7249a on leleuj:protected-52x into dd6d5718bed0ecff49f2888630b61d5e09901d40 on apereo:5.2.x.\n. \n\nCoverage increased (+0.003%) to 45.519% when pulling 7dab339fda48240abcdedf3e48a8202124ee93e8 on NgSekLong:patch-4 into e8edcf3424268901ca00c043ba38a958c43e3a57 on apereo:5.2.x.\n. \n\nCoverage increased (+0.09%) to 45.519% when pulling 6e889ccc7d4cf12842d4c45ee30bfe21a09df8a6 on miller79:5.2.x into d9c60a96c1659a3852b1e1263624f0448dd7bac7 on apereo:5.2.x.\n. \n\nCoverage increased (+0.1%) to 45.613% when pulling 7c0a2d49ec14a32e7739e2dff1ea7f9ada375092 on gregamu:5.2.x into 98efe33be757dca456ac90558e266024996b7f0a on apereo:5.2.x.\n. \n\nCoverage remained the same at 45.417% when pulling f49908ec9c2dc2e8c6fe579fe7f054bc10a737bf on miller79:5.2.x into 813fb7fb8f57935d3911e6f273b5bfae03c6112e on apereo:5.2.x.\n. \n\nCoverage remained the same at 45.433% when pulling e9b4c4f654007b0cc8cbb3f335d5d3df744e8aaf on leleuj:smserrmsg-52x into 2fe4b417f244da8be6f1273468eac23e3e4fe170 on apereo:5.2.x.\n. \n\nCoverage decreased (-0.007%) to 45.426% when pulling 23af54b34807a7826b5ce89a9396e45e565b6966 on leleuj:surrogationsms-52x into 2fe4b417f244da8be6f1273468eac23e3e4fe170 on apereo:5.2.x.\n. \n\nCoverage increased (+0.05%) to 45.404% when pulling 8953a6922c1e9f6db39f34f20fa6c0bc214c9826 on viswatejan:5.2.x into f88005276a84d1d75f5f91f7eb3739b5c932b70a on apereo:5.2.x.\n. \n\nCoverage remained the same at 45.321% when pulling 8c3a3885894b803ca515795a9af30aa9845d65e3 on leleuj:terminate-52x into 4bd8a3e56cf0109fd1ccbf12e1ee928cc9707bc2 on apereo:5.2.x.\n. \n\nCoverage decreased (-0.001%) to 45.32% when pulling f83578b1180488f9caff99408c6b172e76a67b5a on leleuj:doubleauth-52x into dd99050c24f49e587fe218c45f87ba8689278627 on apereo:5.2.x.\n. \n\nCoverage increased (+0.09%) to 45.401% when pulling 8a28deba2a7c5d5d5e33328ce08c30f2f5b08aec on leleuj:samldecodingissue-52x into 38cde096a0c6b3876dc271b8beb7265d78f4ccbd on apereo:5.2.x.\n. ",
    "ledermueller": "May I ask why you get the jquery from google instead of providing it with CAS itself? Isn't that a security risk?\nI don't want to start talking about the tracking capabilities provided to google with those references.\n. Sorry, I wasn't able to check the checkstyle issue on Travis with my mobile device. And now I don't see the link to Travis anymore.. As soon as I get back to my pc. . Unfortunately I have to ask you to revert this patch. I have encountered multiple issues that I have to investigate first. I will come back as soon as I have found the issue(s).. Please revert the patch as it seems to be not valid for Web SSO and will cause issues with stricter SPs. I got mislead by the exception of the SAP instance and have to dig deeper what the issue is (next time I will create a PR if I'm 100% sure it solves the issue - sorry).\nAt the moment I try to integrate the following SAML 2 SPs:\n ADFS 2.0 (done)\n SAP (ongoing)\nI don't have any guides and doing this more in a trial and error style.. After I'm done with integrating I will try to provide some more details (if I'm allowed to) in my free time.\nThe ADFS integration is unfortunately not about Office 365 its about on site Sharepoint + ADFS.. ",
    "rdev5": "Sure, give me some time. We're debugging a CAS Unavailable error with this commit at the moment.\n. See https://github.com/Jasig/cas/pull/359\n. Just wanted to let you know we've tested this latest commit pretty extensively at this point with many of our CAS-ified applications. Besides the occasional stale CASTGC cookie bug throwing a \"CAS is unavailable\" error (which we've seen before; fixed by clearing your cookies before authenticating), everything is working great and ClearPass is responding properly now :)\n. Not sure if I know how to go about creating a JIRA for this and/or if I have permissions to create one. Is this something I need to set up on my end for this?\n. Does that failure have anything to do with a network communication problem? Doesn't look like the ClearPass extension I've been working out of is even being reached.\nERROR 2013-11-25 14:44:00,798 main::SimpleHttpClient - Read timed out\nFailed to send ProxyIou ... for service: http://www.rutgers.edu/\n[INFO] Jasig CAS Core .................................... FAILURE [53.512s]\n. JIRA issue created here: https://issues.jasig.org/browse/CPE-25\nDidn't see where I could assign it to you, so it looks like it got assigned to Andrew Petro.\n. @leleuj Isn't that what I have written? Or do you mean to say that I should be catching it as a RuntimeException instead of an Exception?\n. Sorry, I was under impression you were suggesting I change it to RuntimeException so that's what I did.\nThe purpose for this pull request is to report possible timeout exceptions thrown by spymemcached that may be causing our 0 char ClearPass responses. As it stands, we get as far as proxyIou being sent to our callback, but under certain circumstances, as we've seen in other applications in the past, Couchbase may for one reason or another fail to store an object and it is up to the server application (e.g. CAS) to handle that by either re-trying or at least reporting that there was a problem.\nOn the implementation side, this may also imply that documentation should account for these cases where we may have to request for new proxy tickets within the client application (e.g. website service) as a means of retrying when conditions have been met and a response is expected but is still returning null.\n. Also, I did change it from throw to logger.debug() per @mmoayyed from 8 hours ago. I probably also need to revert the exception being caught from RuntimeException to Exception. Let me know what the preference here is, although based on what I'm seeing, the latter appears to be it.\n. Sorry, I guess those last commits ended up being unnecessary. With this latest commit, we are now able to see the following generated within EncryptedMapDecorator.java:\n2013-12-05 11:14:40,443 DEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Could not store hashed value for key [...]: Timeout waiting for value\nAlso, I would probably recommend that this be increased to WARN level since it doesn't occur often while it does impede users' ability to successfully utilize ClearPass under certain circumstances.\n. The only exceptions I've seen to date are the HttpClient read timeouts, followed by TicketExceptions. It appears to be silent on or around the get/put operations, possibly due to a null response (or at least that's what I suspect and have added null handling in there as well).\nWe're going to test this against production and see if this confirms the need to implement logging here.\n. @mmoayyed Quick update on logging here. We took a quick sampling in production and compared the log details to our test instance that has this pull request deployed and can verify that the additional \"Exception waiting for value\" was reported. Shown below is a before- and after-build comparison.\nBefore (production):\nERROR [org.jasig.cas.util.HttpClient] - Read timed out\n...\nDEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Updating ticket ST-1234\nDEBUG [org.jasig.cas.CentralAuthenticationServiceImpl] - Principal id to return for service [HTTPS on example.com] is [jdoe]. The default principal id is [jdoe].\nDEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Generated hash of value [...] for key [ST-1234.example.com].\nDEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Deleting ticket ST-1234.example.com\nAfter building https://github.com/Jasig/cas/pull/371:\nERROR [org.jasig.cas.util.HttpClient] - Read timed out\n...\nDEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Updating ticket ST-5555\nDEBUG [org.jasig.cas.CentralAuthenticationServiceImpl] - Principal id to return for service [HTTPS on test.example.com] is [jdoe]. The default principal id is [jdoe].\nDEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Generated hash of value [...] for key [ST-5555.test.example.com].\nDEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Could not retrieve hashed value for key [...]: Exception waiting for value\nDEBUG [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Deleting ticket ST-5555.test.example.com\nThis is comparing log details between our production instance and our test instance. I want to say that these tests (and being able to reproduce their errors) would necessitate having the additional logging in place. Would it still be necessary for us to roll this out in production to verify again, or are these tests sufficient?\n. Noticing on some requests (even on subsequent ones, one right after another), clearPass is responding with a 403 header, even when being passed a valid proxy ticket, or what should be a valid proxy ticket.\n. Since about 2:35pm yesterday until now, we've had well over 3,000 successful logins, which include those that have logged in after we changed the memcache protocol in clearpass-configuration.xml around 7:00am this morning; only 3 failures reported. I have a hunch making this change from BINARY to TEXT will also help to reduce our ClearPass failure rate. Though I do agree, checking for null is important and still needs to be added.\n@mmoayyed I wanted to address your comment that \"all other exceptions should automatically be thrown.\" Are you able to verify this for sure?\nThe following is a snippet of what I'm referring to:\npublic final class MemCacheTicketRegistry extends AbstractDistributedTicketRegistry implements DisposableBean {\n    ...\n    public void addTicket(final Ticket ticket) {\n        log.debug(\"Adding ticket {}\", ticket);\n        try {\n            if (!this.client.add(ticket.getId(), getTimeout(ticket), ticket).get()) {\n                log.error(\"Failed adding {}\", ticket);\n            }\n        } catch (final InterruptedException e) {\n            log.warn(\"Interrupted while waiting for response to async add operation for ticket {}. \" +\n                    \"Cannot determine whether add was successful.\", ticket);\n        } catch (final Exception e) {\n            log.error(\"Failed adding {}\", ticket, e);\n        }\n    }\n    ...\n    public Ticket getTicket(final String ticketId) {\n        try {\n            final Ticket t = (Ticket) this.client.get(ticketId);\n            if (t != null) {\n                return getProxiedTicketInstance(t);\n            }\n        } catch (final Exception e) {\n            log.error(\"Failed fetching {} \", ticketId, e);\n        }\n        return null;\n    }\n    ...\n}\nIt seems to me that if MemCacheTicketRegistry#addTicket and #getTicket are handling Memcache get/put operations, we would want to be handling them in EncryptedMapDecorator as well since MemcachedMap is a valid decoratedMap option.\n. @mmoayyed Right, but even though that exception is thrown, it's not \"thrown,\" for lack of a better way to describe it.\nI updated my comment to clarify, but notice that the Before logs show that line doesn't exist in production, whereas in our test instance where we built my additional exception handling changes I'm proposing in this pull request; that's when it showed up; After building https://github.com/Jasig/cas/pull/371. Would this have anything to do with the fact that the get/put methods aren't set up to throw an exception like how the constructed method (EncryptedMapDecorator) throws NoSuchAlgorithmException?\nAlso, along the same lines when discussing \"ClearPass failures,\" we're talking about times when we get a valid proxy ticket and make a request to /clearPass but get a 403 or even empty response back. Wanted to elaborate a little on some behavior we've seen in order to base a question I have.\nWhen we were deploying some of these changes in this pull request to our test environment, we were having issues with Couchbase that required us to basically reload its configuration before it would stop doing a service shutdown and restart loop. To fix Couchbase, from my server admin, \"we had to delete the config.dat file in \\var\\lib\\couchbase\\config and all of the data files in \\var\\lib\\couchbase\\data.\"\nOnce it had stabilized again, we tried to do some tests, but ClearPass would keep coming back with either a 403 error or a null value for . Note that there was still data in Couchbase from previous login attempts in our test environment.\nAt the end of the day, what fixed it and allowed our tests to resume working normally was for us to flush the entire bucket in Couchbase. This bucket would've contained PGT-IOU's, TGT's, etc.\nIt seems that we have proxy tickets under control at this time and haven't had a null proxy ticket come back as of yet after some 3,000+ logins. However, is there a remote possibility that the reason why we're getting these rare cases of null and/or 403 ClearPass responses (0.07%) would be due to collision of pgtIou/pgtId or issued proxy tickets? Again, given the scenario with us having to flush our Couchbase bucket for CAS, it behaved almost as if there were stale tickets in there being re-used by CAS because they weren't being issued uniquely enough to begin with.\n. I've emailed our server admin to start a new build so we should be able to provide you with the full exception stack once we get that done.\nAs far as our decorator, if I understand your question correctly, the following bean is what we're using:\n```\n Credentials Cache implementation \n\n\n\n\n\n\n\n\n  this is the timeout for the cache in seconds \n  this is the prefix for the keys stored in the map \n \n\n \n\n\n\n```\n. We're using 2.8.1\nAlso, I think I just found the root to the problem we've been seeing. Again, keeping in mind that at any time under load (which we can verify in other external and unrelated applications that it does in fact occur), Couchbase could fail to store an object which for our uses, we're labeling as a \"Could not store\" exception.\nSo here's what I've discovered:\n- To simulate this edge case, login and derive the hashed key from debug output in CAS logs (e.g. Generated hash of value [abcdefg] for key [...])\n- Delete this object in Couchbase, prefixed by clearPass_ (e.g. clearPass_abcdefg)\n- Regenerate a proxy ticket and make a request to /clearPass while this user is still logged in\n- Because the clearPass_ key no longer exists, ClearPass returns with 0 len password.\nAt present, the only way to resolve this on the application side is if the user logs completely out of CAS and logs back in as this is the only time the encrypted password is stored by this hashed key. Notice that these steps leave the PGTIOU intact but it leaves EncryptedMapDecorator#get with the following message:\n2013-12-09 13:30:54,496 WARN [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Retrieving hashed value for key [...] returned null\nBecause EncryptedMapDecorator currently assumes that it got stored successfully, nor does it expect to catch an exception here because at present no exceptions are being thrown in the logs as far as we know, it's not doing any preliminary checks to see if the key exists in the first place.\nI think these null checks need to be logged at ERROR level in both #get and #put. During the put operation, there also needs to be a check to verify that the key was stored successfully. I'm not altogether at the moment if decoratedMap#put will return the value of the successfully stored key (after doing some checks, it appears it doesn't so I'll be removing that from the commit), or just give you a copy of what you originally requested to store. It may be that the most robust solution comes by doing a subsequent EncryptedMapDecorator#get to ensure it got stored and if it comes back null, re-attempt at least once or twice, possibly waiting a few milliseconds in between.\nWould like to know your thoughts on this approach to see if this is the direction we should go on this. Also going to see if I can generate a full stack trace regarding spymemcached.\n. So what we did to try to simulate a communication error with Couchbase (not sure if this is an entirely accurate way of reproducing this problem) was basically login to CAS and then turn off Couchbase and try to re-issue a new proxy ticket and/or make a request to ClearPass with CASTGC cookie in hand. Results as follows:\nDEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Generated hash of value [...] for key [jdoe].\nERROR [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Failed to stored hashed value for key [...]: java.lang.RuntimeException: Exception waiting for value\n=============================================================\nWHO: [username: jdoe]\nWHAT: supplied credentials: [username: jdoe]\nACTION: AUTHENTICATION_SUCCESS\nAPPLICATION: CAS\n=============================================================\nDEBUG [org.jasig.cas.extension.clearpass.TicketRegistryDecorator] - Creating mapping ticket [...] to user name [jdoe]\nDEBUG [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Generated hash of value [..] for key [...].\nERROR [org.jasig.cas.extension.clearpass.EncryptedMapDecorator] - Failed to stored hashed value for key [..]: net.spy.memcached.OperationTimeoutException: Timeout waiting for value\nERROR [org.jasig.cas.ticket.registry.MemCacheTicketRegistry] - Failed adding ...\njava.lang.RuntimeException: Timed out waiting for operation\nAnd here's the full stack trace from this simulation: https://gist.github.com/rdev5/a94131eed58166aae3ad\n. A temporary fix that we may be looking to implement within our own application:\nIf ClearPass returns a 0 len password, provision a link for the user to  \"try logging in again\" that passes [the CAS login action + the destination service URL] as the service parameter to the CAS logout action. This will have the effect of first logging out the user before redirecting them back to the login action with service URL in hand as follows:\n<%\nservice_url = \"https://example.com/clearpass.asp\"\nretry_login_url = \"https://cas.example.com/logout?service=\" + Server.URLEncode(\"https://cas.example.com/login?service=\" + service_url)\n%>\n. Did you get everything you were looking for?\n. Thanks, much appreciated.\n. Thanks for looking into this for me. Will see if I can incorporate those changes later this morning.\n. Re-opened this pull request as shown above as I'm now working off of a forked a copy for CAS and will use that for sending any future changes through that branch.\n. If I don't get around to these this weekend, probably late Monday morning-ish would be the next best time to make these changes.\nThanks!\n. Is there any value (or concern) in going with a database option (e.g. Oracle or SQL) vs. memcaching of tickets and/or proxy tickets? The thought here is that in a document-oriented storage engine where there may be some issues in our community version, if a database alternative wouldn't be more reliable or viable. Please let me know.\nThanks\n. Sorry, been extremely busy at work.\nJust had a quick question as I'm trying to revisit this soon. Is it safe to say that you guys are not using Bcrypt for encryption currently?\n. Hi,\nFinally able to get back into this so I will be following up with some fresh info shortly.\nThis being the case, I'm going to forego this Issue for now as I believe the level of detailed debug logs I'm able to produce may help to clarify some of the observed behavior described by this pull request.\nSome new observations that we would appreciate your attention and feedback on:\n- INVALID_TICKET when trying to obtain a new proxyTicket using a known pgtId received at the proxy callback URL. Possibly due to expiring pgtIds? We have seen this occur mostly with users that have logged in successfully at 10:03 but don't make another request to ClearPass until about 13:08 (about that time span). We have also tried setting the TGT expiry to 4 hours, but it doesn't appear to be improving this behavior concerning pgtIds, even though pgtIds have the same TGT- prefix.\n- In KryoTranscoder#encodeToBytes we are seeing BufferOverflowException being thrown on a pretty regular basis (~5% of the time) in the CAS logs. This immediately follows a successful pgtIou, a successful pgtId, and a successful proxyTicket. Immediately to follow is an empty ClearPass response (or empty password) which I believe may be connected to this Buffer overflow issue. For every case where these conditions are observed (successful responses up until an empty password), there appears to be a Buffer overflow (WARN) entry in our CAS logs that corresponds to the Proxy Ticket that threw the Buffer overflow. Is this related to e28a6e1010?\n. Just wanted to follow up that right exactly at the 2 hour mark (7202 seconds to be precise), my pgtId appears to \"soft-expire\" where it will still generate proxy tickets (my suspicion is that these proxy tickets will also validate as well), but handed off to ClearPass, we get a \"successful\" XML response with an empty <cas:credentials></cas:credentials>. Please also see my previous comment where we tried to set a TGT expiry of 4 hours which doesn't seem to apply to this.\nIt appears this may be due to a fixed configuration setting in spring-configuration/ticketRegistry.xml where we have <bean id=\"ticketRegistryValue\" ... c:ticketGrantingTicketTimeOut=\"7201\" /> so we're going to test this shortly.\nThanks!\nAlso, I wanted to point out that CAS logs show Buffer overflow while encoding ST-1234 (where ST-1234 is the proxy ticket) for just about every additional request that takes place after this 2 hour mark. With the configuration change to ticketRegistry.xml we do still get a lot of invalid/empty proxy tickets but no observed buffer overflows. There is also a 2 hour setting in clearpassing-configuration.xml for the memcachedMap bean that is currently being considered as well regarding this.\n. Regarding the \"Empty Response,\" this again goes back to the cached key not being found in cache. Reasons why it's not in cache could be different each time ranging from network latency to other application-specific circumstances or scenarios.\nOne thing I did stumble across that I'm not sure would have any impact or not is the opTimeout and the timeoutExceptionThreshold which aren't being set in clearpass-configuration.xml yet are options in the SpringIntegration documentation for spymemcached (2.8.1). The library's defaults are as follows:\n[net.spy.memcached.ConnectionFactoryBuilder]\n  public static final long DEFAULT_OPERATION_TIMEOUT = 2500;\n  public static final int DEFAULT_MAX_TIMEOUTEXCEPTION_THRESHOLD = 998;\n  public static final long DEFAULT_MAX_RECONNECT_DELAY = 30;\nHowever their configuration example shows that timeoutExceptionThreshold being set to 1998. It's possible by using the internal default of 998 this is causing the connection to shutdown a little too quick (see https://github.com/dustin/java-memcached-client/blob/master/src/main/java/net/spy/memcached/DefaultConnectionFactory.java#L111-L114).\nThis would make sense and I'll see if we can do some testing on this as I was able to reproduce \"Empty Response\" in a ClearPass transaction that took place during a noticeably longer load time than usual earlier today. I was able to produce a ClearPass response at 17:26:13.995Z (UTC) and then under observed network load, my cached ClearPass key in Couchbase dropped and began getting empty responses from 17:31:05.652Z (UTC) on. Logging back re-cached my key and resumed normally functionality.\nFinally, as far as logging goes, it appears you will be including this in a future release as shown here: https://github.com/Jasig/cas/blob/master/cas-server-extension-clearpass/src/main/java/org/jasig/cas/extension/clearpass/ClearPassController.java#L81-L88\nAs this pull request directly relates to implementing those null checks, I will go ahead and close this now.\nThanks\n. I'm not actually using Maven so it didn't present an issue in my build :)\nThis was also intended to effect the documentation site for CAS 5.1.x here. When does this actually become available? Tried refreshing my dependencies but it still gives the same error. Should I be specifying an alternate version in my build.gradle?. CI reports no conflicts with base branch. Appears to be a failing test (which I'm really not inclined to fix at this time):\n````\norg.apereo.cas.web.support.InMemoryThrottledSubmissionByIpAddressAndUsernameHandlerInterceptorAdapterTests > verifyThrottle FAILED\n    java.lang.AssertionError: expected:<403> but was:<423>\n2 tests completed, 2 failed\n:support:cas-server-support-throttle:test FAILED\n:autoLintGradle\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':support:cas-server-support-throttle:test'.\n\nThere were failing tests. See the report at: file:///home/travis/build/apereo/cas/support/cas-server-support-throttle/build/reports/tests/test/index.html\n````. Is this still necessary if the IV length is already going to be determined by getBlockSize() for the algorithm specified? Or are you saying potentially there could be different lengths of IV values given the same algorithm?\n. Either way, I have some code working and tested now to both derive the IV length more properly and store it along with the IV and ciphertext. Update to follow shortly. Thanks again.\n. Are you referring to the methods themselves as well, adding the final keywords to those? Or just the srand variable for now?\n\nSee https://github.com/rdev5/cas/commit/cb1d374bf0fd73e730b3ed178faa8e80bbe37988\n. I can convert it to SLF4J formatting, though at that remark, I would consider the other logging calls in this same file to be inconsistent as well (see #constructHashedKey which logs using String#format).\nAlso, want to point out that constructHashedKey() also happens to be logging the resultant hashedKey at DEBUG level. I pretty much looked at that as an indicator that it was okay to log that information.\n. Just to re-iterate, you don't see a need to catch this.decoratedMap.put() in the event that Couchbase is unavailable or under load? We've seen this behavior in our web applications frequently when too many users are concurrently trying to store to Couchbase. Admittedly, the last scenario I recall, it may have had something to do with the fact that they were trying to update the same object at the same time. But when it did happen, we did in fact get a \"Could not store\" exception that we had to catch.\nWill make the other necessary changes as soon as I can, sometime later this morning.\n. Agreed. ",
    "lucastheisen": "I amend'd the commit message to follow the convention set out in the link above.\n. arg, just looked at log...  it still has old commit and just added 2 new...  will that matter as long as the most recent commit has the right message?\n. Will do.\n. It might be nice to allow for a reason (string/enum/something).  Typically its not displayed to the end user (information leakage), but can be useful in the logs.... ",
    "xargsgrep": "I ran the same test that failed in the CI build in the revision before my\ncommit and it failed, so it was already failing.\nI'm not sure if this issue has already been addressed in the master branch,\nbut if not then I'll go ahead and issue a new pull request for it.\nOn Jan 25, 2014 10:38 AM, \"Misagh Moayyed\" notifications@github.com wrote:\n\n3.5.x development has ended. Please issue a new pull for the master\nbranch.\nAlso it appears that the pull is now failing?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/Jasig/cas/pull/392#issuecomment-33291540\n.\n. Well, it's a bit more than a JDBC/JPA enhancement because a separate ticket registry cleaning job had to be created with the necessary logic to support batched cleaning. Anyway, I think a discussion would be a good idea.\n. \n",
    "anthony-o": "Link to the Jira : https://issues.jasig.org/browse/CAS-1424\n. Attaching to the same Jira issue https://issues.jasig.org/browse/CAS-1424\n. ",
    "afolgado": "Hi @serac,\nFirst of all, I'd like to make a correction in my proposed code (sorry). I think it's pretty clear where it is:\n} else if (ttl.getDays() < configuration.getPasswordWarningNumberOfDays() \n                    || configuration.getPasswordWarningNumberOfDays() == 0) {\nNow, \n\nI believe the value of the pwdExpireWarning operational attribute is reflected in the data returned in the ppolicy response control that is conveyed by ldaptive to CAS components. Do you have any evidence to the contrary?\n\nAccording to the ppolicy manpage, \"pwdExpireWarning contains the maximum number of seconds before a password is due to expire that expiration warning messages will be returned to a user [...]. If this attribute is not present, or if the value is zero (0), no warnings will be sent\". In practice this is what happens in the tests I've made:\nIf binding date falls between \"expiration date\" and (\"expiration date\" - pwdExpireWarning  value), this message will be returned by the server:\nldap_bind: Success (0) (Password expires in 57 seconds)\nLdaptive will then setup a Calendar object with the expiration date in the warning (getExpiration()), based on the seconds left to expiration. In this example, it would be a \"password expires today\" warning. I think it's much better from the user's point of view to say \"password expires today\" than \"password expires in 0 days\".\nOn the contrary, If the bind moment is sonner than (\"expiration date\" - pwdExpireWarning  value), or pwdExpireWarning is set to 0, no result message will be issued by the server, and the warning in ldaptive would be null, so it wouldn't even pass to the body of the function.\nBeing said that, the passwordWarningNumberOfDays configuration value would rather be a maximum number of days, subject to the pwdExpireWarning server configuration.\n\nRegarding the apparent off-by-one in graceLoginsRemaining, it appears to be a problem with OpenLDAP, http://www.openldap.org/its/index.cgi/Incoming?id=7596;selectid=7596. The tentative plan is to account for that in ldaptive components.\n\nSetting the corrected \"grace logins left\" value at a lower level is probably the best idea, (if possible, because you probably don't want to overwrite ldaptive libraries). That's a design decision, however. I just wanted to notice the issue.\n. Hi @serac,\nFirst of all, I'd like to make a correction in my proposed code (sorry). I think it's pretty clear where it is:\n} else if (ttl.getDays() < configuration.getPasswordWarningNumberOfDays() \n                    || configuration.getPasswordWarningNumberOfDays() == 0) {\nNow, \n\nI believe the value of the pwdExpireWarning operational attribute is reflected in the data returned in the ppolicy response control that is conveyed by ldaptive to CAS components. Do you have any evidence to the contrary?\n\nAccording to the ppolicy manpage, \"pwdExpireWarning contains the maximum number of seconds before a password is due to expire that expiration warning messages will be returned to a user [...]. If this attribute is not present, or if the value is zero (0), no warnings will be sent\". In practice this is what happens in the tests I've made:\nIf binding date falls between \"expiration date\" and (\"expiration date\" - pwdExpireWarning  value), this message will be returned by the server:\nldap_bind: Success (0) (Password expires in 57 seconds)\nLdaptive will then setup a Calendar object with the expiration date in the warning (getExpiration()), based on the seconds left to expiration. In this example, it would be a \"password expires today\" warning. I think it's much better from the user's point of view to say \"password expires today\" than \"password expires in 0 days\".\nOn the contrary, If the bind moment is sonner than (\"expiration date\" - pwdExpireWarning  value), or pwdExpireWarning is set to 0, no result message will be issued by the server, and the warning in ldaptive would be null, so it wouldn't even pass to the body of the function.\nBeing said that, the passwordWarningNumberOfDays configuration value would rather be a maximum number of days, subject to the pwdExpireWarning server configuration.\n\nRegarding the apparent off-by-one in graceLoginsRemaining, it appears to be a problem with OpenLDAP, http://www.openldap.org/its/index.cgi/Incoming?id=7596;selectid=7596. The tentative plan is to account for that in ldaptive components.\n\nSetting the corrected \"grace logins left\" value at a lower level is probably the best idea, (if possible, because you probably don't want to overwrite ldaptive libraries). That's a design decision, however. I just wanted to notice the issue.\n. ",
    "albertocabello": "Something like that?\n. I see it is not possible (or at least not easy) to change the commit message.\nWould you be so nice to delete this pull request so that I create a better, new one?\n(Not needed to say, I'm quite newbie regarding GitHub beyond the most trivial ops).\n. >  I can always close the pull.\nPlease, close it.\nI somehow managed to fix the commit message in my fork, but nothing seems to work to change the pull request. I'm learning a lot, though.\n. More complete Spanish translation update in pull request: Jasig#407\n. ",
    "lukas-slansky": "You're very welcome.\n. ",
    "alexhenrie": "Thank you!\n. Well, you could always send it through Google Translate...\n. Well, you could always send it through Google Translate...\n. Do single quotes always have to be escaped, or only in messages that include {0} or {1}?\n. I've converted both files to UTF-8 and escaped the apostrophes in messages that contain {0} or {1}.\n. ",
    "seanrbaker": "Noted for next time.  Thanks guys.\n. FWIW, I completely agree that it is a hack, though arguably it works around some short-sightedness in the original protocol.  In this case it wasn't so much conceived as relating to local servers which have time skew, but more as you say Jerome designed for when you don't own the consumer.  In our case that was a server owned by Google which insisted that its time was correct at ~2 seconds ahead of our own.  We're legally obligated to stick with the NTP server we're using, making the issue intractable for us without allowing a skew.\nIMO the use cases will be rare, but it's an invaluable feature to have for those who really need it and extends the availability of CAS for handling SAML 1.1 browser / artifact profiles.\n. I'm sure there'll be more good ideas as this gets moved into production elsewhere, but this looks good to me!\n. I'm sure I'm going to need help with style and syntax, but otherwise sure thing!\n. Makes sense if we want to support CIDR in the base class, though if the concern is only for extending classes, they're not beholden to the defined pattern as is and can implement anything else which they like.  RegExp was originally used just because it was more in line with the way service entries are defined.\n. It hasn't been in production here (or, at least not that's ever been observed), but it's a good point for larger installations.  Any objection to simply passing the IP around between functions?\n. 5k was originally in there to be really sure that legitimate but slow requests didn't get cut off, but agree that from a usability standpoint it's not really a good solution for a deployer.  Locally we tuned to 1000, but 2000 may be a better starting point for a new deployment.\n. We're exceptionally heterogeneous in our deployment, and so this is for us.  How many others would benefit?  I'm not sure.  But if you have mixed machine types and mixed system AuthN sources (some Active Directory, some not) in the same subnet, LDAP lookup into AD is the only way we've found to be sure the client supports SPNEGO before sending a 401.\n. Keep in mind that the functionality is also used by the LDAP class as well -- AD doesn't track IPs by default, at least not in an easily queryable way.  No issue with breaking out the class, but inheritance might need to change to Base->HostName->LDAP to keep from duplicating code.\n. ",
    "jtgasper3": "I can go ahead and incorporate the changes that @mmoayyed and @leleuj referenced for your review.\n. Should I include a commented out config for the alternate view resolver in the context file or just define it in documentation on the wiki?\n. The proposed changes have been committed, with the exception of using the default theme if a service is disabled. It's coded, but I help on the commit until discussion is concluded.\n. Hi guys,\nIs there anything else that can/should be done for this?\n. @battags, per you last comment:\n\nDoesn't hard-coded paths mean that files can't be shared/leveraged across themes?\nWhich files do you mean?\n. @battags, per you last comment:\nDoesn't hard-coded paths mean that files can't be shared/leveraged across themes?\nWhich files do you mean?\n. I'd like to throw my two cents in. I'm actually working with a client that has been struggling to get ClearPass implemented in their environment. Their scenario is seemingly simple, they would like to use pwm. pwm requires ClearPass to integrate with CAS because it interacts with LDAP as the user, not using a service account. (CAS support was added by a member of the community, not the primary developer...)\n\nThis seemingly simple desired has turned into extreme difficulty. They run clustered (active/active) CAS Servers and got the ticket registry replication using ehcache working. They managed to get the base ClearPass components working, but ClearPass replication is not working as 3.5.X documentation is non-existent. 4.0 docs are helpful, but still leaves out a lot of tribal knowledge that frankly requires someone with a strong ehcache background to work through issues.\nOh, did I mention... their PWM instance is also clustered which means yet another ehcache replication configuration to work through so that PGT/PGTIOUs can be shared between CAS Clients. While https://wiki.jasig.org/display/CASC/Using+the+CAS+Client+in+a+Distributed+Environment explains the client configuration well enough, the need for client replication is obvious except to the season'd CAS implementer. \nSo, we've taken a very basic need for many new CAS adopters, using ClearPass to try to integrate legacy, Microsoft, pwm style apps and purposely keep it the most difficult, un-well documented thing to implement for \"security\" sake. But this most sensitive thing is also the most prone to error and abuse if not done properly.\nSo, my humble opinion is keep it external to the baseline config (so it is not available by default) but make it reasonable to implement, and make it easy to use. Passing it as an attribute does that. Personally I'd like to see either shared-secret (service by service) or asymmetric encryption (again service by service) protecting the user's password. This is could actually be more secure than relying on PKI to establish trust (NSA, Hong Kong post office and all). \nAnd as a side note, I think it make sense to think about moving the PGT to the same model. Proxy callbacks are horrible in clustered environments, and frankly could be eventually deprecated if the PGT was also an encrypted attribute released in the ST payload. \nSorry, it was more like a nickle. :)\n. I have no comment on point 1. Point 2: I think that makes sense... to store a public key in the service registry for each service. \n@serac, on point 3 are you thinking of encrypting to multiple keys at once to support rollover? It can't think that the implementation would be difficult to do nor would it increase the cipher text much. Logistically speaking, I don't know if it will bother deployers that much not having it... if we are only talking about ClearPass and it's a small subset of CASified application... If we are also considering this a vehicle for PGTs then I could see the benefit. Either way I suppose providing options is a good thing.\n. @mmoayyed, usually when using public key crypto an ephemeral key is chosen and that is used to encrypt the secret (password in this case) with symmetric crypto. The public key of each recipient (service) is used to encrypt the ephemeral key. \nWhen decrypting the recipient uses their private key and decrypt to retrieve the ephemeral key which is then used to decrypt to get the secret... The cipher text in asymmetric looks more like a data structure: {[key(n) identifier and encrypted ephemeral key for key(n), ...], encrypted secret (via ephemeral key)} .\nWe definitely don't want to roll our own schemes with this stuff... It would be nice if the was a SODIUM equivalent for Java as it trivializes encryption. I believe Bouncy Castle[1] which is Java and .NET based, is used by the OpenSAML library to do the xml/signing encryption. Determining the various options for crypto definitely gets interesting. \nProperly used symmetric (AES-192) encryption is probably easier to put together and can be as secure when properly salted as asymmetric. Yes, key transportation would be left as an exercise to the user.\n[1] https://www.bouncycastle.org/specifications.html\n. @serac I'm not disagreeing that public key crypto is the better choice here, but I do disagree with the idea that symmetric key crypto \"dramatically increases implementation complexity\" over public key. \nBut, I'd love to be proven wrong, as it means that implementing the pub key crypto properly will be easier than I'm expecting and that is a good thing for the project.\n. See https://github.com/Jasig/cas/blob/4.1.x/cas-server-support-pac4j/src/main/java/org/jasig/cas/support/pac4j/authentication/handler/support/ClientAuthenticationHandler.java#L81\n. Hold off on this PR. More changes are needed. \n. All better. This is the working combination.\n. Because us implementors are lazy and using a different name would require a change to https://github.com/Jasig/cas/blob/4.1.x/cas-server-webapp/src/main/webapp/WEB-INF/cas-servlet.xml#L251 as well. (That list seems to be chained back to the loginFlowRegistry, so a change seem necessary.)\nAlso, if I recall the RegisteredServiceThemeBasedViewResolver is an InternalViewResolver, so technically the name still fits. :)\n. ThemeResolver is wrong. This is a ViewResolver.. :)\nOn Sat, Jan 9, 2016 at 2:54 PM Misagh Moayyed notifications@github.com\nwrote:\n\nVery cool. I was under the assumption that the name of the bean shall\nremain themeResolver for Spring to pick it up, but this obviously works\ntoo. Thanks!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1437#issuecomment-170291098.\n. OK, this passed three test that I manually ran... \n1. no authz rules on the service\n2. authz rules with no url\n3. authz rules with url.\n\nAll worked as expected, but feel free to test yourself.\n. OK @mmoayyed. Please let me know what I should clean-up. :D . While working on the master version change (verifying the change is in-progress), I noticed I missed the javadoc for the method.. @mmoayyed, yes. Found a bug, that I want to run by you. Ping me when available.. @mmoayyed Using Pac4j to set the Azure tenant property and the newly defaulted PathParameterCallbackUrlResolver.  This test against Azure was fine. \nLeaving the usePathBasedCallbackUrl support for folks that want to not use Querysting in 5.3.3. In 6.0, PathParameterCallbackUrlResolver will be used for all.. I'm having all sorts of issues getting 6 to work. I can't get findbugs to output... missing classes. I'm also having problems getting a war built to test the change against Azure. sigh. The test with Azure worked. If I'm reading the Travis output correctly, the build is breaking on some check issues related to code I didn't break... :D But I'll look into them if I can get Intellij to report the same things.. Thanks Misagh. I'll get it added.\n. Thanks. It was more clear in my head when I wrote it, but it should re-written.\n. Well, it's two lines... And the view is not technically part of the public facing ui. It's in monitoring and not default/ui\nviewStatisticsView.(class)=org.springframework.web.servlet.view.JstlView\nviewStatisticsView.url=/WEB-INF/view/jsp/monitoring/viewStatistics.jsp\nWould you recommend it going somewhere else?\n. My vote would be something along the lines of `/WEB-INF/view/jsp/${cas.defaultViews:default}/ui/\".\n. I don't see it specified here: http://docs.spring.io/spring/docs/3.2.x/javadoc-api/\nI also found cod for the 2.5.X branch and the suffix was initialized with \"\".\n. Note the filename change...\n. Good idea about the @see tag...\n. Is disabled service the same thing as a non-existing service entry? I'd argue that perhaps we should allow admins to apply a different theme/view set to a disabled entry e.g. \"The scholarship app is down for repair\".)\nEither way it is a simple fix.\n. Ahh, yes.\n. Checking for a disabled service will be in the next commit.\n. I see where you are coming from. I have fixed that by pulling the buildView code from each of the base classes and incorporated it directly.\n. I wouldn't call it hard coded, but a realistic default. There is a setter that allows for the path of the view to be changed.\n. I don't see the statisticsView/Controller being much different than the healthCheckController with a hard coded view embedded in the code. On a previous commit this was the only view in the UI view mapping. But it's not really UI but isn't a Protocol view either. Would you like me to revert this code and put it in the protocol mappings? Or go back further or return to a one entry default_views.properties file? \nI welcome your thoughts?\n. How does one know if \"we're\" supportting it being sub-classed or not? Marking it as final severely limits future creativity.\n. You guys set up a convention a long time ago. User interface views go into \"WEB-INF/view/jsp/default/ui/\". For whatever reason, the default \"theme\" (if you will) was called \"default\", and I'd argue was improperly nested before \"ui\" (e.g \"WEB-INF/view/jsp/ui/default/\"). It has set a convention... \nContinuing on with this convention and this enhancement, if implementors want to use alternate views based on a registered service's theme, they can clone default/ui pages and copy them to theme/ui (e.g. alumni/ui) and do whatever they want to with the set of views. \n. @leleuj, you are correct that this bring together a view's jsp filename with the viewname referenced in the login-webflow.xml. As for customized JSP pages, it shouldn't change anything if the filenames where kept the same. \n(Although I've seen some implementors that give the jsp file a unique name and update the default_view.properties be commenting out the default and putting in a replacement. sigh)\n. ",
    "dfish3r": "Specifically the annotation was not being honored in the unit tests.\nI had to add:\nxml\n<context:component-scan base-package=\"org.jasig.cas.authentication\" />\nto the context xml.\nI'm not sure if this is the only way to get JSR-250 annotations processed in spring.\nComments on the user list indicate it needs to be added to the deployer config as well.\n. Specifically the annotation was not being honored in the unit tests.\nI had to add:\nxml\n<context:component-scan base-package=\"org.jasig.cas.authentication\" />\nto the context xml.\nI'm not sure if this is the only way to get JSR-250 annotations processed in spring.\nComments on the user list indicate it needs to be added to the deployer config as well.\n. I'm not against moving something generic into ldaptive.\nThe SearchEntryResolver was designed specifically for resolving an entry using the authenticated DN.\nDoing anything else introduces some risk, so we made the component extensible but not configurable.\nLdaptive does have an AD package, so moving the UpnSearchEntryResolver is doable.\nI'd have the same configuration concerns as Marvin, but there is probably a compromise that allows some control over the filter, but forces use of a UPN.\n. I updated the existing the SearchEntryResolver to include functionality for subtree and onelevel searching.\nThe ability to resolve an entry using a mapped identifier is not specific to AD, so a general solution seemed in order.\n@skibaa can you build the ldaptive 1.0.5-SNAPSHOT and confirm this meets your needs?\n. > I'll say, this was under CAS 4 and ldaptive added way too much noise to be tenable\nCan you elaborate on that? I assume you mean that your deployers did not want to be burdened with the necessary configuration.\n. @mmoayyed \nHere is some sample code to illustrate how this could be done in ldaptive 1.0.x\n``` java\n    ConnectionConfig cc = new ConnectionConfig(\"%s\");\n    DefaultConnectionFactory cf = new DefaultConnectionFactory(cc);\n    cf.getProvider().getProviderConfig().setConnectionStrategy(\n      new ConnectionStrategy() {\n      @Override\n      public String[] getLdapUrls(ConnectionFactoryMetadata metadata)\n      {\n        // provide the LDAP URL from the cert here\n        return new String[] {String.format(metadata.getLdapUrl(), \"ldap://url.from.the.cert\")};\n      }\n    });\nConnectionPool cp = new BlockingConnectionPool(cf);\nPooledConnectionFactory pcf = new PooledConnectionFactory(cp);\ncp.initialize();\n\nAggregatePooledSearchExecutor ex = new AggregatePooledSearchExecutor();\nex.setBaseDn(\"ou=People,dc=vt,dc=edu\");\nCollection<Response<SearchResult>> results = ex.search(\n  new PooledConnectionFactory[] { pcf, },\n  new SearchFilter[] { new SearchFilter(\"(uupid=dfisher)\"), },\n  new String[] {\"displayName\"});\n\ncp.close();\nex.shutdown();\n\n```\nThe ConnectionStrategy interface was intended to facilitate URL selection for availability in non-load balanced environments.\nI believe it can be used for this problem, just provide an implementation that knows about the URLs found in the cert.\nAlso, by using the AggregatePooledSearchExecutor you can easily execute the same search over all the connection pools.\n. I don't think you're latest commit is going to work.\nYou can't initialize a pool more than once.\nI spoke with @serac about the impetus for this change and he said it had more to do with removing old JNDI code than anything else.\nWith that in mind I created a patch that provides two implementations using ldaptive, one that provides pooling and one that does not:\nhttps://github.com/dfish3r/cas-x509-crl-ldaptive/commit/52aef4dc0fd7b781f730d3144df43743ac568a40\nIMO you should remove the implementation that uses JNDI and renaming the Ldaptive classes.\n. This is really an artifact of how LDAP attributes are handled in Java. For better or worse attribute values can be either a String or a byte[]. The ldaptive API provides access to values for both types with LdapAttribute#getStringValues() and LdapAttribute#getBinaryValues(). These methods detect the underlying type and convert it appropriately. So if you've got a binary value and you ask for it as a String, ldaptive will Base64 encode it. This seems to be the least objectionable format as this is what the LDIF spec does.\nFor your code specifically, I'm not sure what you're trying to accomplish. In the nominal case binary values shouldn't be represented as String. You can obviously do it, but it won't be a readable string. (i.e. jpegPhoto). I think a more useful block of code would be:\njava\nif (attr.isBinary()) {\n  // handle binary attribute, what's wrong with base64?\n  final byte[] b = attr.getBinaryValue();\n  v = new String(b, Charset.forName(\"UTF-8\"));\n} else {\n  v = attr.getStringValue();\n}\nBut I'm not sure why you don't want a base64 encoded value in this case.\n. It finally occurred to me why this is happening. You're serializing JSON with line feeds. The UnboundID provider sets the attribute as binary because the line feed requires base64 encoding per the LDIF spec. I'll raise an issue to investigate further.\n. Filed this issue:\nhttps://github.com/vt-middleware/ldaptive/issues/14\n. Is it acceptable that every LDAP URL uses the same security configuration (or none at all)?\nThe fundamental question may be, how much information does the deployer have about the X509 certificates.\nThis implementation indicates a deployer knows just about everything accept the URL in the certs, which feels a bit odd.\n. So a deployer knows the security constraints on the LDAPs containing the CRLs, but they don't know the LDAP URL itself?\nI know it seems useful to dig the LDAP URL out of the cert, but it seems like the deployer should already know their PKI infrastructure well enough to declare the URL(s) that should be used.\n(I promise I'll get to the root of your problem, but I'm still struggling with the broader use case...)\n. ",
    "steve-gregory": "How to add a service that will bypass the 'Authorize' page (in deployerConfigContext.xml):\nXML\n    <util:list id=\"registeredServicesList\">\n         <bean class=\"org.jasig.cas.support.oauth.services.OAuthRegisteredService\">\n           <property name=\"id\" value=\"1\" />\n           <property name=\"clientId\" value=\"client_id_here\" />\n           <property name=\"clientSecret\" value=\"client_secret_here\" />\n           <property name=\"serviceId\" value=\"https://your.server.com/callback_url\" />\n           <property name=\"name\" value=\"Name of Service\" />\n           <property name=\"description\" value=\"Description of Service\" />\n           <property name=\"approvalPrompt\" value=\"auto\" />\n         </bean>\n         ...\n  </util:list>\n. How to add a service that will bypass the 'Authorize' page (in deployerConfigContext.xml):\nXML\n    <util:list id=\"registeredServicesList\">\n         <bean class=\"org.jasig.cas.support.oauth.services.OAuthRegisteredService\">\n           <property name=\"id\" value=\"1\" />\n           <property name=\"clientId\" value=\"client_id_here\" />\n           <property name=\"clientSecret\" value=\"client_secret_here\" />\n           <property name=\"serviceId\" value=\"https://your.server.com/callback_url\" />\n           <property name=\"name\" value=\"Name of Service\" />\n           <property name=\"description\" value=\"Description of Service\" />\n           <property name=\"approvalPrompt\" value=\"auto\" />\n         </bean>\n         ...\n  </util:list>\n. My Apologies I got caught up working on other projects.. I will revisit this code and commit again in the next day.\nAs for the use of 'Auto' I got this logic from Googles' OAuth 2 query params:\nhttps://developers.google.com/accounts/docs/OAuth2WebServer#formingtheurl\nWith the options 'Auto' and \"Force\" seem to make more sense than \"true\" and \"false\", as well it gives you the opportunity to add a \"one time\" option (If that makes sense).\nHowever, If you would like I can change 'auto' to boolean value.\n. I have made the required changes, including removing the dependencies from pom.xml, but it seems now the build isn't passing.. Are those dependencies supposed to be included, but listed elsewhere?\n. @leleuj I tried removing it as per your request, but for some reason the test coverage failed? And re-adding them seemed to fix test coverage. How should I proceed? \n. ",
    "archer308": "Well, I'm logging one of the exceptions at the \"error\" level, and the others at the \"debug\" level.  I felt like this would be the most useful, as the one I log at \"error\" level is a little more catastrophic than the others.\nIf the database credentials are wrong in deployerConfigContext.xml, or if there is malformed SQL in deployerConfigContext.xml, you'll get an ERROR message in the logs.  This makes sense to me as you'd probably want a blatant configuration error to spit out an error message in the logs even at the default logging level in log4j.xml, \"INFO\".\nThe other exceptions, however, could happen if the username supplied is not found in the database, or if the password does not match.  These errors could happen even if the configuration in deployerConfigContext.xml is fine.  So I feel like you probably wouldn't want these popping up in your logs all the time, but they could be helpful to see if you wanted to up your logging level to \"DEBUG\" or \"TRACE\" in log4j.xml.\nThat was the rational behind the way I split things.\nI am not very familiar with the Jasig CAS codebase, so I'm not surprised if there's a better way to get this than what I've suggested.  If I can get the time, I'll try looking at the code you've pointed to and see if I can see how things could better fit together.\nDo you think splitting things as I've described would be feasible in an authentication manager?\n. I am working with an installation using the QueryDatabaseAuthenticationHandler.  This and #617 are my attempt to create some logging for it.  What you've said matches up with my experience so far with the QueryDatabaseAuthenticationHandler, and is why I chose an \"error\" logging level.  I don't know about the other authentication handlers.\n. Unless I am mistaken, at the moment, yes, e.getCause() will always return a cause so there should be no null pointer exception.  This is because it appears to be impossible to instantiate a PreventedException without giving it a cause.\nhttps://github.com/Jasig/cas/blob/master/cas-server-core/src/main/java/org/jasig/cas/authentication/PreventedException.java\nThanks for bringing it up though, and please do double-check me.\nOriginally, I had a quick if-statement test to make sure e.getCause() didn't return null, but I removed it when I looked at the code linked to above.  If you think we're better off with me adding it back, not a problem.\nThanks!\n. ",
    "skibaa": "I believe the build failed because of some build system glitch. How can I rebuild it?\n. Thanks! This time the build succeeded. So what is the procedure to merge the pull requests?\n. What's the downside of having more universal component? It is backward compatible and will cover more use cases. Of course, I made a replacement class with war overlay, but wanted to help others who might have the same problem.\n. @mmoayyed I don't understand you. How can it be done with configuration, when search filter is hard coded? My patch simply converts it to property. Regarding the option of principal to be taken without baseDn - again my patch allows anybody to achieve with configuration the same thing he would otherwise achieve only by rewriting UpnSER. I thought about using Spring EL to allow any expression to be used for the principal - but decided it is not really necessary. Anyway, the current code erroneously supposes that Active Directory always uses same search filter - which is false. Why not to fix it? Because it is right in 90% of cases?\n. No, because super.createSearchRequest has to be overridden. That's the reason you, guys, have subclassed SearchEntityResolver in the first place. But you did not take into account that AD configuration might need different search filters - so I made it a property instead of constant. Same for having baseDn in principal.\n. Moving to ldaptive or not, there is a need for a class, which allows configuration of the search filter. UpnSearchEntryResolver has hard coded string userPrincipalName={0}, its successor uses hard coded string (objectClass=*) (via SearchRequest.newObjectScopeSearchRequest). BTW, Spring Security in ActiveDirectoryLdapAuthenticationProvider has hard coded string (&(objectClass=user)(userPrincipalName={0})). So there are different possible search filters in use, and IMHO it should be possible to specify desired one in the configuration.\n. > HttpMessage simply just wraps a message, whatever that happens to be, without making any assumptions about its content/format.\nIf it would not know about the format, that would make sense. But it makes more than assumptions! It fills contentType = MediaType.APPLICATION_FORM_URLENCODED_VALUE and also the UrlEncoder in formatOutputMessageInternal is necessary only in form-urlencoded format (not in XML, and not in multipart).\nSo if our the base class claims it is doing form format, it should do all the job through the end. Otherwise, it should not provide default contentType as it does and should not do UrlEncoder in formatOutputMessageInternal, leaving that job to subclasses. And in the current master it is in the strange middle (knowing content type but not really making it).\nIf you insist, I will make the minimal patch changing encoding only, but IMHO it is worse.\n. I see. I will create a new PR then. No sense to have so many commits for a one-liner. It will also stop this \"merge conflicts\" noise.\n. The new PR is ready to be merged: #662\n. ",
    "tptodorov": "The exception was NotSerializableException and from debugging cas, I found it is caused by non serializable keySet. \nWith the implemented fix, serialization works.\nI'm using Cas 4.0.0.\n. ",
    "manamana88": "You are right, but it may be not compliant with company best practice. Furthermore with a JVM argument it's impossible to configure many CAS in the same tomcat. \n. Hi all, \nI apologize for my errors about the best practice policy, the next time I will be more careful. As Scott has thought, I tried to extend the TGT in order to save more info about, for example, the IP address of who has done the authentication, it's a requirement of my company. I saw that this information is available in the log, but I needed something more manageable. I thought to add a Map of secondary and generic information, but I also thought that a user might use wrongly this map and that cas works well as it is. If a user wants to add more logic or information to the current flow, I think it's right that the user makes more efforts, for example extending one or more classes. I saw that at the moment it's practically impossible, the ticket implementations are hard coded in many points. I did some effort trying to reach this achievement. I also generalized the JPATicketRegistry, unfortunately with a compromise; As you can see, I moved the parent TGT attribute from the abstract ticket to the subclasses, but I didn't want to be more invasive than I was. About the huge commit you are also right, but I don't think that it's possible to make it smaller, because I changed \"only\" CASImpl, TGTImpl, STImpl and AbstractTicket, but these are very central classes so I also adapted a lot of test configuration and classes, which are the 50% of my commit.\n. I think that now my pull request doesn't make conflicts anymore\n. ",
    "alan125": "Why add the complexity of Kryo to this? Isn't just using a normal java.util.Set implementaion instead of java.util.LinkedHashMap$LinkedKeySet musch simpler, especially that the functionality th LinkedKeySet gives is not really needed?\n. Didn't know that kryo is being used in CAS core (don't see it in my dependency tree). Also, it's not surrounding a set with another set, it's copying the objects in a set into another set that can be serialized. However, if kryo is already there, then I second your opinion on upgrading it.\nOn a side note, where is kryo configured in the project exactly? since I can only find it in cas-server-integration-memcached, which I don't need in my overlay\n. You got me looking everywhere in the code for kryo :-D\n. :+1: \n. ",
    "Aldrioth": ":+1: \n. ",
    "dacru-lcms": "Hi, I have CAS running in wildfly 10, It works fine after a few hours, when users try to logout shows an error:\nCAS is Unavailable\nThere was an error trying to complete your request. Please notify your support desk or try again.\nAnd here the stacktrace:\n2017-09-15 09:33:49,437 ERROR [io.undertow.request] (default task-609) UT005023: Exception handling request to /cas/logout: org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.webflow.execution.ActionExecutionException: Exception thrown executing [AnnotatedAction@628ac17e targetAction = [EvaluateAction@a0cbc76 expression = terminateSessionAction.terminate(flowRequestContext), resultExpression = [null]], attributes = map[[empty]]] in state 'terminateSession' of flow 'logout' -- action execution attributes were 'map[[empty]]'\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n    at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)\n    at org.jasig.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:227)\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at org.jasig.cas.security.RequestParameterPolicyEnforcementFilter.doFilter(RequestParameterPolicyEnforcementFilter.java:250)\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at org.jasig.inspektr.common.web.ClientInfoThreadLocalFilter.doFilter(ClientInfoThreadLocalFilter.java:62)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)\n    at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)\n    at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)\n    at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)\n    at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)\n    at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)\n    at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)\n    at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)\n    at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)\n    at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:284)\n    at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:263)\n    at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)\n    at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:174)\n    at io.undertow.server.Connectors.executeRootHandler(Connectors.java:202)\n    at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:793)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.webflow.execution.ActionExecutionException: Exception thrown executing [AnnotatedAction@628ac17e targetAction = [EvaluateAction@a0cbc76 expression = terminateSessionAction.terminate(flowRequestContext), resultExpression = [null]], attributes = map[[empty]]] in state 'terminateSession' of flow 'logout' -- action execution attributes were 'map[[empty]]'\n    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:60)\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:101)\n    at org.springframework.webflow.engine.State.enter(State.java:194)\n    at org.springframework.webflow.engine.Flow.start(Flow.java:527)\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368)\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:223)\n    at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:140)\n    at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:238)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\n    ... 52 more\nCaused by: java.lang.IllegalArgumentException: 'principal' cannot be null.\nCheck the correctness of @Audit annotation at the following audit point: execution(public abstract java.util.List org.jasig.cas.CentralAuthenticationService.destroyTicketGrantingTicket(java.lang.String))\n    at org.jasig.inspektr.audit.AuditActionContext.assertNotNull(AuditActionContext.java:80)\n    at org.jasig.inspektr.audit.AuditActionContext.(AuditActionContext.java:62)\n    at org.jasig.inspektr.audit.AuditTrailManagementAspect.executeAuditCode(AuditTrailManagementAspect.java:153)\n    at org.jasig.inspektr.audit.AuditTrailManagementAspect.handleAuditTrail(AuditTrailManagementAspect.java:141)\n    at sun.reflect.GeneratedMethodAccessor95.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)\n    at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)\n    at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:68)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168)\n    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at com.ryantenney.metrics.spring.MeteredMethodInterceptor.invoke(MeteredMethodInterceptor.java:45)\n    at com.ryantenney.metrics.spring.MeteredMethodInterceptor.invoke(MeteredMethodInterceptor.java:32)\n    at com.ryantenney.metrics.spring.AbstractMetricMethodInterceptor.invoke(AbstractMetricMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at com.ryantenney.metrics.spring.TimedMethodInterceptor.invoke(TimedMethodInterceptor.java:48)\n    at com.ryantenney.metrics.spring.TimedMethodInterceptor.invoke(TimedMethodInterceptor.java:34)\n    at com.ryantenney.metrics.spring.AbstractMetricMethodInterceptor.invoke(AbstractMetricMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at com.ryantenney.metrics.spring.CountedMethodInterceptor.invoke(CountedMethodInterceptor.java:46)\n    at com.ryantenney.metrics.spring.CountedMethodInterceptor.invoke(CountedMethodInterceptor.java:32)\n    at com.ryantenney.metrics.spring.AbstractMetricMethodInterceptor.invoke(AbstractMetricMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)\n    at com.sun.proxy.$Proxy177.destroyTicketGrantingTicket(Unknown Source)\n    at org.jasig.cas.web.flow.TerminateSessionAction.terminate_aroundBody0(TerminateSessionAction.java:78)\n    at org.jasig.cas.web.flow.TerminateSessionAction$AjcClosure1.run(TerminateSessionAction.java:1)\n    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)\n    at org.jasig.inspektr.aspect.TraceLogAspect.traceMethod(TraceLogAspect.java:44)\n    at org.jasig.cas.web.flow.TerminateSessionAction.terminate(TerminateSessionAction.java:69)\n    at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:113)\n    at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:102)\n    at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:49)\n    at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:342)\n    at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)\n    at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:131)\n    at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:299)\n    at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:84)\n    at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:75)\n    at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188)\n    at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145)\n    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51)\n    ... 62 more\nThanks for your time.. Hi, I have CAS running in wildfly 10, It works fine after a few hours, when users try to logout shows an error:\nCAS is Unavailable\nThere was an error trying to complete your request. Please notify your support desk or try again.\nAnd here the stacktrace:\n2017-09-15 09:33:49,437 ERROR [io.undertow.request] (default task-609) UT005023: Exception handling request to /cas/logout: org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.springframework.webflow.execution.ActionExecutionException: Exception thrown executing [AnnotatedAction@628ac17e targetAction = [EvaluateAction@a0cbc76 expression = terminateSessionAction.terminate(flowRequestContext), resultExpression = [null]], attributes = map[[empty]]] in state 'terminateSession' of flow 'logout' -- action execution attributes were 'map[[empty]]'\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:982)\n    at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n    at io.undertow.servlet.handlers.ServletHandler.handleRequest(ServletHandler.java:85)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:129)\n    at org.jasig.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:227)\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at org.jasig.cas.security.RequestParameterPolicyEnforcementFilter.doFilter(RequestParameterPolicyEnforcementFilter.java:250)\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at org.jasig.inspektr.common.web.ClientInfoThreadLocalFilter.doFilter(ClientInfoThreadLocalFilter.java:62)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121)\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262)\n    at io.undertow.servlet.core.ManagedFilter.doFilter(ManagedFilter.java:60)\n    at io.undertow.servlet.handlers.FilterHandler$FilterChainImpl.doFilter(FilterHandler.java:131)\n    at io.undertow.servlet.handlers.FilterHandler.handleRequest(FilterHandler.java:84)\n    at io.undertow.servlet.handlers.security.ServletSecurityRoleHandler.handleRequest(ServletSecurityRoleHandler.java:62)\n    at io.undertow.servlet.handlers.ServletDispatchingHandler.handleRequest(ServletDispatchingHandler.java:36)\n    at org.wildfly.extension.undertow.security.SecurityContextAssociationHandler.handleRequest(SecurityContextAssociationHandler.java:78)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.servlet.handlers.security.SSLInformationAssociationHandler.handleRequest(SSLInformationAssociationHandler.java:131)\n    at io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler.handleRequest(ServletAuthenticationCallHandler.java:57)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.security.handlers.AbstractConfidentialityHandler.handleRequest(AbstractConfidentialityHandler.java:46)\n    at io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler.handleRequest(ServletConfidentialityConstraintHandler.java:64)\n    at io.undertow.security.handlers.AuthenticationMechanismsHandler.handleRequest(AuthenticationMechanismsHandler.java:60)\n    at io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler.handleRequest(CachedAuthenticatedSessionHandler.java:77)\n    at io.undertow.security.handlers.NotificationReceiverHandler.handleRequest(NotificationReceiverHandler.java:50)\n    at io.undertow.security.handlers.AbstractSecurityContextAssociationHandler.handleRequest(AbstractSecurityContextAssociationHandler.java:43)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at org.wildfly.extension.undertow.security.jacc.JACCContextIdHandler.handleRequest(JACCContextIdHandler.java:61)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.server.handlers.PredicateHandler.handleRequest(PredicateHandler.java:43)\n    at io.undertow.servlet.handlers.ServletInitialHandler.handleFirstRequest(ServletInitialHandler.java:284)\n    at io.undertow.servlet.handlers.ServletInitialHandler.dispatchRequest(ServletInitialHandler.java:263)\n    at io.undertow.servlet.handlers.ServletInitialHandler.access$000(ServletInitialHandler.java:81)\n    at io.undertow.servlet.handlers.ServletInitialHandler$1.handleRequest(ServletInitialHandler.java:174)\n    at io.undertow.server.Connectors.executeRootHandler(Connectors.java:202)\n    at io.undertow.server.HttpServerExchange$1.run(HttpServerExchange.java:793)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.webflow.execution.ActionExecutionException: Exception thrown executing [AnnotatedAction@628ac17e targetAction = [EvaluateAction@a0cbc76 expression = terminateSessionAction.terminate(flowRequestContext), resultExpression = [null]], attributes = map[[empty]]] in state 'terminateSession' of flow 'logout' -- action execution attributes were 'map[[empty]]'\n    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:60)\n    at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:101)\n    at org.springframework.webflow.engine.State.enter(State.java:194)\n    at org.springframework.webflow.engine.Flow.start(Flow.java:527)\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368)\n    at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:223)\n    at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:140)\n    at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:238)\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959)\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893)\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\n    ... 52 more\nCaused by: java.lang.IllegalArgumentException: 'principal' cannot be null.\nCheck the correctness of @Audit annotation at the following audit point: execution(public abstract java.util.List org.jasig.cas.CentralAuthenticationService.destroyTicketGrantingTicket(java.lang.String))\n    at org.jasig.inspektr.audit.AuditActionContext.assertNotNull(AuditActionContext.java:80)\n    at org.jasig.inspektr.audit.AuditActionContext.(AuditActionContext.java:62)\n    at org.jasig.inspektr.audit.AuditTrailManagementAspect.executeAuditCode(AuditTrailManagementAspect.java:153)\n    at org.jasig.inspektr.audit.AuditTrailManagementAspect.handleAuditTrail(AuditTrailManagementAspect.java:141)\n    at sun.reflect.GeneratedMethodAccessor95.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:621)\n    at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:610)\n    at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:68)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168)\n    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at com.ryantenney.metrics.spring.MeteredMethodInterceptor.invoke(MeteredMethodInterceptor.java:45)\n    at com.ryantenney.metrics.spring.MeteredMethodInterceptor.invoke(MeteredMethodInterceptor.java:32)\n    at com.ryantenney.metrics.spring.AbstractMetricMethodInterceptor.invoke(AbstractMetricMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at com.ryantenney.metrics.spring.TimedMethodInterceptor.invoke(TimedMethodInterceptor.java:48)\n    at com.ryantenney.metrics.spring.TimedMethodInterceptor.invoke(TimedMethodInterceptor.java:34)\n    at com.ryantenney.metrics.spring.AbstractMetricMethodInterceptor.invoke(AbstractMetricMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at com.ryantenney.metrics.spring.CountedMethodInterceptor.invoke(CountedMethodInterceptor.java:46)\n    at com.ryantenney.metrics.spring.CountedMethodInterceptor.invoke(CountedMethodInterceptor.java:32)\n    at com.ryantenney.metrics.spring.AbstractMetricMethodInterceptor.invoke(AbstractMetricMethodInterceptor.java:59)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:208)\n    at com.sun.proxy.$Proxy177.destroyTicketGrantingTicket(Unknown Source)\n    at org.jasig.cas.web.flow.TerminateSessionAction.terminate_aroundBody0(TerminateSessionAction.java:78)\n    at org.jasig.cas.web.flow.TerminateSessionAction$AjcClosure1.run(TerminateSessionAction.java:1)\n    at org.aspectj.runtime.reflect.JoinPointImpl.proceed(JoinPointImpl.java:149)\n    at org.jasig.inspektr.aspect.TraceLogAspect.traceMethod(TraceLogAspect.java:44)\n    at org.jasig.cas.web.flow.TerminateSessionAction.terminate(TerminateSessionAction.java:69)\n    at sun.reflect.GeneratedMethodAccessor125.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:113)\n    at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:102)\n    at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:49)\n    at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:342)\n    at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)\n    at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:131)\n    at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:299)\n    at org.springframework.binding.expression.spel.SpringELExpression.getValue(SpringELExpression.java:84)\n    at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:75)\n    at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188)\n    at org.springframework.webflow.execution.AnnotatedAction.execute(AnnotatedAction.java:145)\n    at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51)\n    ... 62 more\nThanks for your time.. ",
    "astik": "Also, \"service\" property is now fetch at first as a query parameter and then as form data.\nThat enable us to ease CAS management on application side (Webservice W) with a proper authentication strategy :\n```\npublic class JsonRedirectStrategy implements AuthenticationRedirectStrategy {\n    private final static Logger LOG = LoggerFactory.getLogger(JsonRedirectStrategy.class);\npublic void redirect(final HttpServletRequest request, final HttpServletResponse response, final String potentialRedirectUrl) throws IOException {\n    LOG.debug(\"redirect to {}\", potentialRedirectUrl);\n    response.setContentType(\"application/json\");\n    response.setStatus(401);\n    PrintWriter writer = response.getWriter();\n    writer.write(String.format(\"{ \\\"redirectUrl\\\" : \\\"%s\\\" }\", potentialRedirectUrl));\n}\n\n}\n```\nTaht way, when we will call webservice W unauthenticated, we will get the full CAS URL to post on (with the withCredentials enable to also send the TG cookie).\nOf course, if service is not into URL, the fetch will fallback on form data as it was done previously.\n. For information, here is the CAS configuration that I use :\n<filter>\n    <filter-name>CAS Authentication Filter</filter-name>\n    <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class>\n    <init-param>\n        <param-name>casServerLoginUrl</param-name>\n        <param-value>https://CAS_SERVER:8443/cas/v1/tickets/getFromCookie</param-value>\n    </init-param>\n    <init-param>\n        <param-name>serverName</param-name>\n        <param-value>http://WEBSERVICE_SERVER_NAME:8180</param-value>\n    </init-param>\n    <init-param>\n        <param-name>authenticationRedirectStrategyClass</param-name>\n        <param-value>my.cas.client.authentification.JsonRedirectStrategy</param-value>\n    </init-param>\n</filter>\n. Glad this matter is interesting, i was afraid to be wrong because of lacking advanced knowledges on CAS =)\nSo, for the security concern, malicious could ask for ST on behalf of user if nothing is configured conrrectly on CAS server. To enable the feature I'm exposing here, you'll need to enable CORS. CORS is something you'll have to configure on the CAS server, so that you can set it the way you want. To avoid malicious code, you can enable CORS only for certain domain ( Access-Control-Allow-Origin: http://www.example-social-network.com) instead of all ( Access-Control-Allow-Origin: *).\nFor the discussion, I have also post a message on the dev list =)\n. What do you mean by proxy authentication ? Which part is the proxy ? the application REST API ? the frontend application (full JS) ?\nWhile dealing with simple CAS configuratiion (no proxy), user gets redirect to CAS and its TGC is given to cas for validation.\nHaving the same behavior (TGC handling and service url given to CAS within query parameters) while dealing with AJAX requests seems fair to me.\n. I know what the proxy cas is but i don't understand what it has to do with our problem here.\nI never meant to use TGC outside of CAS, it is only use, as usual, between the end-user and the CAS server as it is a cookie set on the CAS domain.\nMy problematic is a frontend only application, only static file. There is no backend for the application. The application use webservice which are CAS protected and don't have Proxy CAS feature, nor I want them to have it. I want to keep the webservice as simple as possible.\nSo my frontend application (Angular App) will use the webservice and no communication is made from webservice A to webservice B ... only the frontend application calls the webservice, that mean, it is the end-user that calls directly the webservice.\nI am in a scenario like a simple CAS one, except the HTTP calls are made with the ajax engine instead as explicit URL change in the browser ... from an HTTP point of view it is the same. But as the AJAX engine is headless, i can't rely on the classic CAS redirection process and i need the REST plugin to expose a simple way to exchange with CAS server (ie not through HTML).\nThat being said, I want to be able a transparent access to a protected resource while being authenticated on CAS. That is what CAS is doing with regular user navigation, that is what I'd want with AJAX call. Once again, I don't see how proxy will help me in this.\nFirst access to WS1, user not authenticated neither on WS1, nor CAS\n```\nBrowser                  WS1                                WS2                  CAS\n ------------------------>\n* user is not authenticad on WS1 *\n <--------------- REDIRECT TO CAS\n REDIRECT TO CAS REST API -------------------------------------------------------->\n* user is not authenticad on CAS *\n <------------------------------------------------------------------------------ ERROR\nREDIRECT TO CAS LOGIN FORM --------------------------------------------------->\n <------------------------------------------------------------------------- LOGIN FORM\n AUTH --------------------------------------------------------------------------->\n * user is authenticad on CAS *\n<--------------------------------------------------------------------------------- ST\n ST ------------------->\n * user is authenticad on WS1 *\n <----------------- JSON\n```\nFirst access to WS2, user authenticated on CAS, not on WS2\nBrowser                  WS1                                WS2                  CAS\n -------------------------------------------------------->\n***** user is not authenticad on WS2 *********\n <--------------------------------- REDIRECT TO CAS\n REDIRECT TO CAS REST API -------------------------------------------------------->\n***** user is authenticad on CAS *********\n<--------------------------------------------------------------------------------- ST\nST ---------------------------------------------------->\n ***** user is authenticad on WS2 *********\n <----------------------------------------------------- JSON\nI think this cinematic is very close what CAS does as a not-proxy configuration.\n. ",
    "baumgartner": "Thank you for your feedback, my first attempt was to use the loop below, but it would force an org.opensaml.MalformedException. \nLets assume we have the following attributes fetched in our principalResolver: \nattributes.put(\"permissionList\" , source.getPermissionList()); \nattributes.put(\"title\", source.getTitle()); \nif there are no permissions in the PermissionList, our attribute-value will be an empty collection: [ ] \nIf there is no title, our title-attribute is \"null\". \nBy sending the attributes as a saml message, there will be no information about \"permissionList\". \nBut the title attribute will be converted to a collection Saml10SuccessResponseView:93, and title will be converted from \"null\" to a collection with a single element and the value null: [null] \nIf you use the check below, our saml-message entry will be  which will cause an org.opensaml.MalformedException. \n. > can you describe a use case or a behavior that would cause null values to be retrieved?\nLets say, i use multiple PrincipalResolvers to get my attributes from different systems. \n\nIf you're doing this programmatically, cant you simply check for null values? \n\nOf course i would be able to do that, but any other developer using jasig with saml would need to check for null values too. As far as I have learned in java programming books like Joshua Blochs \"Effective Java\" or other TDD books, methods should check/handle their input and not fail with NullpointerExceptions. \nI have changed the null-check to the bug-fix to your recommended way, and i also extended the junit test to parseResponseFromServer method from the Saml11TicketValidator.java. I did this because of the comment in the empty collection check: bnoordhuis: don't add the attribute, it causes a org.opensaml.MalformedException\nLuckily, at least the CAS-client validator seems not affected of this MalformedException \nBut the problem is still the same, the saml-Response will contain now the following elements: \n<saml1:Attribute AttributeName=\"testEmptyCollection\" AttributeNamespace=\"http://www.ja-sig.org/products/cas/\"/>\n<saml1:Attribute AttributeName=\"testEmptyAttribute\" AttributeNamespace=\"http://www.ja-sig.org/products/cas/\"/>\n<saml1:Attribute AttributeName=\"testAttribute\" AttributeNamespace=\"http://www.ja-sig.org/products/cas/\">\n                  <saml1:AttributeValue xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:type=\"xs:string\">testValue</saml1:AttributeValue>\n</saml1:Attribute>\nIn this case testEmptyCollection and testEmptyAttribute will not contain an attributeValue. \nSo, if the emptyCollection caused problems with some SAML-Clients, also the emptyAttribute would cause an MalformedException. \nThat was the reason for my first solution to skip with ((Collection<?>) e.getValue()).size() == 1  && ((Collection<?>) e.getValue()).contains(null))\n. Thank you for your feedback and sorry for breaking the build. \nI wonder if there is any eclipse auto formatter package? \n. Thanks for the info, the projects readme.md pointed to http://jasig.github.io/cas/developer/Contributor-Guidelines.html \nI hope my last update fits your needs. \n. Use case: The handler validates the credentials against a web service. The webservice response contains the authentication state and personal user information. Later some handlers call other services for the authorization information (Roles, OU,...). \nI am using both because i need multiple handlers and multiple chained resolvers, depending on the authentication-method. \nauth-method1 needs resolver 1,2 and 3\nauth-method2 needs resolver 1, 3 and 4\nThe failing build seems to be a build server problem. \n. ",
    "scalding": "If I could, I'd add blaring sirens and blinking text reading \"DON'T USE THIS!!!\" to the ClearPass page. ClearPass is a bad thing, and no one should ever use it. But, as @mmoayyed says, there just any way for us to get rid of it all together. As a widget maker, you shouldn't be responsible for keeping users from widgeting themselves in the foot. You should let your users know any known risks that they take and let them be responsible. Any roadblock that you put out there is just another way of intentionally breaking your widget, which leads to headaches for legitimate users.\nPart of the reason for using the proxy had to do with ensuring that the payload reached the proper destination. With the front channel connection, it would be possible to slurp that service ticket and get those attributes. With the proxy, the cas actually only sends that service ticket to a specific URL, lessening the risk that the ST will be leaked. (Right?)\nThat said, any real implementation of this needs to have some sort of explicit trust set up so that only the proper actors can get the password. Something like a shared secret encrypted value might be an easy first stop, but you might even want to move toward encrypting the full payload (something you can do with SAML, for instance).\nJust my thoughts, hope they help. I'd vote positive on it, with some caveats (as others have stated as well).\n. I might be biased, but I'm good with it\n. Worked on supporting CAC [http://en.wikipedia.org/wiki/Common_Access_Card] a few months back. \n- You won't know what URL you are going to need to pull from until you read a card, and depending on the level you want to support, you will need the ability to pull from dozens of URLs. Your notification of a new host is when you read it from the card.\n- Your PKI is configured with the highest CA cert you trust. This can be at the department level all the way to the full DoD. If you want to get fancy, you can also include other sections of the US government that use smart cards, which will add more points you'd have to support.\n- chances are you are not going to need to deal with SSL since all the artifacts are signed. That's to say, you don't need to trust the connection, and in fact most resources are on unencrypted channels. You trust the artifacts at those locations because they are signed with a certificate you trust.\n- you don't want to leave a connection open to a system serving CAC CRLs, especially as a non-US government or military entity\nThe best we found was to do something like [https://svn.apache.org/repos/asf/cxf/tags/cxf-2.4.4/distribution/src/main/release/samples/sts_issue_operation/src/main/java/demo/sts/provider/cert/CRLVerifier.java]. We had to work around the fact that systems come and go without notice, as well (e.g., one department stopped hosting the file on http).\nI'm currently under NDA, so I can't go into much more detail about the implementation. I'll say, this was under CAS 4 and ldaptive added way too much noise to be tenable; it was much easier to just use javax.naming. It might be a different story if you are deploying for a single institution/organization, though.\nHope this helps.\n. I was actually curious what it might take to remove this requirement. Right now, it's tied into the Shibboleth code as they allow a user to use velocity in the Spring configuration files. But, yes, if going forward with this, might be worth moving to a commons\n. Didn't know if you wanted to pollute your other test libraries with Spock. If that would be fine, I can move.\n. Thanks, done.\n. I've integrated it into the Attribute-Resolution.md doc\n. should be done now. hopefully.\n. ",
    "jameswennmacher": "Though an external party I wanted to throw in my two cents.  I strongly agree with comments from @jtgasper3 and @wgthom and the spirit of this pull request.  \nI work with a number of uPortal customers that want and like CAS but absolutely need Clearpass to integrate with legacy or external applications such as IMAP-based email systems for email preview among other. I strongly support the strategy of passing the user's password in the ST response rather than the headache of the current approach of the PGTIOU (and https call back dance).  The current strategy has caused significant grief and added complexity on clustered uPortal installations.  Each time we run into ClearPass in clustered environments we've gotten better at it, but it is still a sore point and more complex than IMHO it needs to be.\nI'd love it if the customers could CAS-ify their apps or handle user-specific content another way to avoid ClearPass, but that is not always a fiscal or technological possibility.  In the portal use case, the customer wants user-tailored content and whether it is a good strategy or not from a security perspective, sometimes we just have to have the user's password.\nI can't speak to the technical security aspects other than I agree that the password needs to be strongly protected; the configuration ideally should require an opt-in approach, limit the sources that are allowed to request returning the password (whitelist or PKIX), and a mechanism in place to insure the source is who they say they are; e.g. password encrypted with a shared secret (I agree with the negatives mentioned by @serac ) or PKIX setup.  No matter which way you go, I doubt it will be worse than the status quo :smile: .\nI'm excited to see progress on this issue.  I want to thank @mmoayyed for tackling a significant pain point.\n. Though an external party I wanted to throw in my two cents.  I strongly agree with comments from @jtgasper3 and @wgthom and the spirit of this pull request.  \nI work with a number of uPortal customers that want and like CAS but absolutely need Clearpass to integrate with legacy or external applications such as IMAP-based email systems for email preview among other. I strongly support the strategy of passing the user's password in the ST response rather than the headache of the current approach of the PGTIOU (and https call back dance).  The current strategy has caused significant grief and added complexity on clustered uPortal installations.  Each time we run into ClearPass in clustered environments we've gotten better at it, but it is still a sore point and more complex than IMHO it needs to be.\nI'd love it if the customers could CAS-ify their apps or handle user-specific content another way to avoid ClearPass, but that is not always a fiscal or technological possibility.  In the portal use case, the customer wants user-tailored content and whether it is a good strategy or not from a security perspective, sometimes we just have to have the user's password.\nI can't speak to the technical security aspects other than I agree that the password needs to be strongly protected; the configuration ideally should require an opt-in approach, limit the sources that are allowed to request returning the password (whitelist or PKIX), and a mechanism in place to insure the source is who they say they are; e.g. password encrypted with a shared secret (I agree with the negatives mentioned by @serac ) or PKIX setup.  No matter which way you go, I doubt it will be worse than the status quo :smile: .\nI'm excited to see progress on this issue.  I want to thank @mmoayyed for tackling a significant pain point.\n. ",
    "ufoscout": "It should be ok .now.\n. @mmoayyed not yet. \nHowever, for the additional things you asked me to test, they are not related at all with the patch I proposed that is only about the async parameter. \n. It should be ok now.\n. ",
    "Bartol0": "See Java exception:\n2015-01-23 14:00:52,537 DEBUG\n[org.jasig.cas.web.FlowExecutionExceptionResolver] - \norg.springframework.expression.spel.SpelParseException: EL1041E:(pos\n51): After parsing a valid expression, there is still more data in the\nexpression: 'neq'\nfor such an expression:\ntest=\"externalContext.requestParameterMap['openid.mode'] neq ''\n. Yes, that would be more clear, but for me introducing OGNL was easier\nthan learning EL.\n. The first case. I am not familiar with Spring.\n. ",
    "alexkolson": "Ok! Are there certain PR guidelines that I should be adhering to or is it just not a large enough contribution to be considered? \n. Aha! That definitely sounds like a better approach. :) I'll read up on those links and #708 and see if I have any further ideas/questions. \n. Just committed an initial attempt with only SamlService implementing the method, to see if/where the errors are in my thinking here. If every service implemented the getServiceParameters() method, and the return value was used to populate the error message, would that work? As I've started out implementing with SamlService? Or is the better approach, as you mentioned, to move the logic into the ArgumentExtractor's? \nPlease forgive any blatant errors with my thinking, this is my first foray into open source CAS development. \nAs a side note, it appears the latest commit failed to pass the checkstyle requirements. I'll see what I need to fix there.\nAlso, please let me know if you'd rather just knock this one out rather than waiting for me to do this in the right way. :)\n. Roger that. Thanks for letting me know!\n. @mmoayyed @leleuj Any plans to backport this to 3.6.x?\n. ",
    "cameronbwhite": "It does not render in Github correctly.\nThe version below is the current version https://github.com/Jasig/cas/blob/master/cas-server-documentation/protocol/CAS-Protocol-Specification.md\n\nIt should look like\n\n. @mmoayyed Your link 404ed\n. ",
    "JanuszP": "OK, fixed\n. Sure, I just didn't wanted to break the convention.\n. It looks that CI failed on code that I haven't  touched\n. I use CAS (4.0.1) for https://glosbe.com. Recently we needed an OAuth with bearer token support. OAuth 4.0.1 wasn't offering such thing, I've tried to look for a replacement but found nothing as complete as CAS so I've checked latest code and there it was! After some tests it came out that there is something wrong with how tickets are handled.\nThank you for all your effort that you put into CAS. \n. Hello,\n  I'm not sure if this is the right place, yet I'm still encountering problems with how \"Bearer\" keyword is used. Changing \"bearer\" to \"Bearer\" fixed some issues yet it introduced another. Please take a look at:\nhttps://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java#L39\nwhen authorizing request tokenType from Oauth2AccessToken is used (if it exists), default implementation lowercases the \"Bearer\" keyword:\nhttps://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/DefaultOAuth2AccessToken.java#L27\nBottom line - being case sensitive in here will probably lead to such problems and they are quite hard to debug. I think it would be best to do a ignorecase comparision. What do you think?\n. ",
    "asgrant": "@mmoayyed this is the problem we were discussing. I think I'm on board with the idea of adding this as documentation as a small use-case gotcha. With the way that Microsoft operates this tag being added could mean nothing or we'll need additional tags in a different version of IE/Edge.\n. ",
    "moghaddam": "You're welcome ;) and you're right. We can postpone it to future releases. However the changes in the given patch are just in comments, so they can be merged smoothly.\n. ",
    "gerbil14": "Will it also work for the 4.0.x versions?\n. ",
    "siddharthgoel88": "Oh ok. I will do that and send the pull request again.\n. Ah ok. I am new to this stuff. I will take of note of it. Thanks for letting me know that :-)  I do that in future.\n. Good idea. I will check official website and subscribe to mailing list and try to get involved :)\n. I was wondering, even after my fix for typo I could see the error on http://jasig.github.io/cas/4.0.x/installation/Trusted-Authentication.html page. I thought Travis-CI would publish new changes from master to gh-pages. Am I wrong?\n. Oh ok. Got it. Thanks.\n. ",
    "NicolasMarcotte": "I can't find the third instance, there is one I missed in LDAP-Authentication.md, is the third one, the concrete  BlockingConnectionPool  found X509-Authentication.md ?\n. ",
    "kayalvizhiameen": "Added an alternative solution in 886\nAdded step-by-step approach in http://blog.imaginea.com/sso-using-cas-restful-apis-and-java\n. ",
    "prigaux": "I've fixed the indentation issues.\n\nShould this behavior be optional? \n\nAFAIK there is no reason to check NTMLallowed late. I really think the change is valid (and I tested it here on an older CAS version)\n. Yes, IMO it is a bug fix.\nLooking at the code, it seems this code was somewhat broken. I'll submit a simple pull request putting the \n  // else => kerberos\ncode inside a real \"else\" (there used to be a \"return\")\n. I didn't want to modify too much...\nI added a further cleanup commit, still keeping the different log message.\n. Well, current documentation is telling to modify login-webflow.xml ... I just helping modifying it!\nIf someone knows how it make things work without modifying xml, we are interested :)\n. I do not really know why, but maven does not need it.\nI guess the http://developer.jasig.org/repo/content/groups/m2-legacy/ repository may come from http://central.maven.org/maven2/org/apereo/cas/cas-server-webapp/5.0.3.1/cas-server-webapp-5.0.3.1.pom, or something like this?\nAnyway, not important!. Fixed in the middle of commit \"allow unsigned jwts \" : https://github.com/apereo/cas/commit/84e66f63cc57e8280e43c772129abd8dea71271c\nAlso backported in 5.2.5 : https://github.com/apereo/cas/commit/daefc4bda12a0d5170d52c059ebae85bd815dea9. ",
    "mabes": "The paragraph is about the \"IP+login\" adapter, but the class name is that of the \"IP only\" adapter.\n. ",
    "tduehr": "I don't believe it is. I'll put together a patch later that turns it into a property with SecurityManager as the default. That'll make it easier to support users that want Xerces instead as well.\n. Done\n. I'd just forgotten to actually commit it before pushing...\n. I'm not entirely sure XMLSecurityManager is needed for jdk8. I do know I get a cast exception without changing it to org.apache.xerces.util.SecurityManager. I get a ClassNotFound exception for XMLSecurityManager.\n. openjdk8 on ubuntu 15.04\n. Xerces is being pulled in by the cas-server-support-openid.\nThe relevant section of mvn dependency:tree\n[INFO] +- org.jasig.cas:cas-server-support-openid:jar:4.1.0-RC3-SNAPSHOT:compile\n[INFO] |  +- org.openid4java:openid4java:jar:0.9.8:compile\n[INFO] |  |  +- commons-logging:commons-logging:jar:1.1.1:compile\n[INFO] |  |  +- net.sourceforge.nekohtml:nekohtml:jar:1.9.10:compile\n[INFO] |  |  +- com.google.inject:guice:jar:2.0:compile\n[INFO] |  |  \\- xerces:xercesImpl:jar:2.8.1:compile\n[INFO] |  \\- org.apache.httpcomponents:httpclient:jar:4.4.1:compile\n[INFO] |     \\- org.apache.httpcomponents:httpcore:jar:4.4.1:compile\n. It may be. I'll try when I get a chance today.\n. It works with xerces excluded. I will send a PR to exclude that dependency instead.\n. I checked the other DAOs, they all can update as far as I can tell. If we assume a future (or current) DAO can't merge/update, an equivalent patch could be applied to the DAO so it expects a delete before the save.\nIt seems better for the DAOs to properly handle what they need to do for a save/update than the controller.\nWithout a patch the management application can't edit services with an ldap backend.\nWould coupling this patch with more code to have the other DAOs handle their own deletes work for you?\n. The LDAP DAO currently tries an update for edit actions. This fails because the controller has deleted the service from LDAP already. This means you can only create and destroy (from the user's point of view) services from the management app using an ldap backend.\nI see two ways to correct this:\n1. Leave the controller alone and make all DAOs behavior expect the record to have been deleted previously by the controller.\n2. Remove the delete from the controller and have the DAOs perform the required steps to update a record.\n. I just looked over the other DAOs. They all seem to expect a record to possibly already exist. Most, like json, don't care since saving it again to the same place will over write the previous version. The ones that do care already perform a delete. I'll take a look at their test suites to verify this as well shortly.\n. The other DAOs already had tests to cover this use case.\n. As far as I can tell this affects all of 4.x. I'm on 4.1 and I checked HEAD. Based on a couple posts on cas-users, it's in 4.0.x as well.\n. Tested by backporting to 4.1.1 as well.\n. Gonna need a bit more work still.\n. Apache Ignite because it's the only distributed cache I could find that had SSL transport between nodes and I couldn't get the memcached ticket cache to play nice without starting Ignite as a separate service.\nI still need some testing locally. I have so far only tested with a single node.\n. It's not yet released. I actually didn't really run into it until I tried to use them under 4.1.1. From what I can tell this goes a step further than the ticket encryption as it sits in 4.2-snapshot; Ignite seems to use SSL mutual auth.\n. Yes. I'll update later tonight\n. I'll fix the merge and the doc. Should have that done today.\n. Should be good to go.\n. Implemented all of them but setting the cache variable final.\n. All set.\n. I know, I just have been working in java8 already and knew it wouldn't take much to get the javadoc to run.\n. I'll add what I can, but I haven't done that much w/ Java8 yet...\n. I'm not so sure on ditching joda just yet:\nreturn new DateTime(file.lastModified());\nbecomes\nreturn ZonedDateTime.ofInstant(Instant.ofEpochSecond(file.lastModified()), ZoneId.of(\"GMT\"));\n. I'm not worried so much about ugly as I am speed... that's four method calls and two object instantiations for two calls and one object. Is there a benchmark suite?\nReducing the war size is something I can get behind at least... I'll add that stuff to a util class so it's not as nasty looking and my keyboard doesn't wear out.\n. I was planning on making this work multiple commits until merge time... possibly even multiple commits per topic.\n. That's the plan it seems.\n. Yeah, I'm having issues getting it to find some of the new stuff but I'm also going to give netbeans and possibly eclipse a run at the code as well... Currently, I'm working on turning all DateTime, Date, and timestamp objects ZonedDateTime and moving all references that can't be removed to a util class. Should be able to push that over the weekend.\n. Until this push I've been rebasing master. Normally that's what I'd do but this one's going to be longer term w/ several commits so I'll be merging master right before each commit.\n. New Date-Time stuff added. Moved all Date, Calendar, joda.time.Instant, and DateTime reference not in a test (and most of those got moved anyway) to a util class: DateTimeUtils.\n. Reverted a bunch of stuff and removed unused util class methods. Unfortunately, we're either stuck with commons-codec or continuing to support our own hex encoding. I think I'm going to err on the side of ditching the dependency and sticking the needed functions into util classes or just inline them if there's only one use.\n. ASCII Hex encoding (AAA -> 414141)\nI'll move the couple of hex implementations to CompressionUtils.\n. squashed and rebased against master\n. I'm already working though lambdas... I incorporated everything but reverting to using longs for timestamps to support JPA and get rid of the single class module. I noticed there are other modules with a single class and using ZonedDateTime across the board makes more sense. I did also add ZoneID.UTC to all the ZonedDateTime.now() calls.\n. Unfortunately, Nothing more exact than \"soon\"... \n. You still want encoding/hashing dependency cleanup (eg. commons-codec) as part of this PR?\n. Unfortunately, since HttpClient \u2013 and likely a few others \u2013 depend on commons-codec, the dependency will stick around. Do you want to standardize on it or leave it as an indirect dependency?\n. That mean standardize on it or just declare the dependency explicitly?\n. ~150 more for loops to take a look at. Then Collections2 and the old stuff that got missed in previous jvm upgrades. The old stuff should be automatically upgradeable at least.\n. I'll push what I have. most of it's pretty rote but some require a bit of thought.\n. ... It may be better to manually merge from this branch periodically rather than completing the PR. That way it stays open while work continues and is only one spot to follow. After this commit I'll rebase against master.\n. Okay, i have the tests running for the rebase now. Should be pushed in a couple minutes\n. Done. Let me know what branch I should be continuing from.\n. There are also older constructs throughout the codebase.\n. I rebased but I have a lingering cert check error that I can't debug as it happens on master for me as well.\n... and that NPE in OAuth...\n. It's a local thing. I happened before my most recent rebase.\n. I forgot this was still attached...\n. Okay, Use DateTimeUtils.dateOf(ZonedDateTime.now().plusSeconds(5))\n. Does it make sense to close this and open another based on my own java8 branch for continuing this?\n. I just rebased from master...\n. I'll do it again in a bit.\n. The implementations of AuthenticationHandler#authenticate all assume they get the correct credential type and cast without checking. They shouldn't have to cast the credentials to a specific type. This is currently causing failing tests and will require fixing as part of this rebase.\n. Done\n. It's on the CAS Impl because that's where tickets come into the system.This ensures there is one ticket instance in use for a given ticket ID.\nA naive implementation that used a single mutex would certainly slow everything to a grinding halt. The trick to this one is using multiple mutex handles: one per ticket id. Resource usage is kept in check by using WeakHashMap to allow tickets to be collected when required.\nThe only thing I'm not sure on: ticketMutexCache being synchronized may result in a similar serialization but would at least only involve memory operations. This could be solved with a implementation with only synchronized writes but that would require writing that class.\n. null values of what? Seems like I thought it was an error condition that would be caught elsewhere that this code doesn't need to protect against.\n. @frett correct, this only handles concurrency issues for a single CAS server. In a load balanced setup like that you'd have to use a mutex at the ticket registry's storage level. Memcached's add command seems to support that but since memcached gets everything in serialized form, that's not of much use. It may be possible to rework things to simulate something like Redis' hash objects to properly fix the concurrency issue due to that serialization.\n. Okay. I think I can get that going.\n. I didn't think of that. Good catch! All access to a given ticket should be synchronized. That's as good as it can get without complex objects in the backing store. I'll rework this and see what else needs synchronizing.\n. I didn't think of that. Good catch! All access to a given ticket should be synchronized. That's as good as it can get without complex objects in the backing store. I'll rework this and see what else needs synchronizing.\n. This must be done with locking at the cache level. Most of the supported caches will do this. For memcached, it will have to be faked using the add command.\n. You have a couple rogue auto comment formats but it looks good otherwise.\n. I think that setting would violate least surprise for any new deployments. Defaulting to current behavior should be deprecated at least.\n. I've got the AbstractTicketRegistry stuff ready to go as soon as this is merged.\n. Okay, I only sent this because I saw you were having problems merging. I didn't think a int -> long change was that big either.. I'll redo the couple changes here against java8.\n. I had some issues externalizing configs this week myself. Turns out it was tomcat8 preventing access to anything outside of the  webroot. Fixed by updating tomcats context.xml to mount the files as PreResources. This might be useful information in the externalization doc. \n. I had some issues externalizing configs this week myself. Turns out it was tomcat8 preventing access to anything outside of the  webroot. Fixed by updating tomcats context.xml to mount the files as PreResources. This might be useful information in the externalization doc. \n. Added a PR to that fork for the FreeIPA stuff.\n. Done\n. I think this is just the beginning of a bigger issue...\n. I'm going to resubmit this against letsboot\n. This passes all tests and should be correct, but I get strange errors when I try to use it.\nCaused by: org.springframework.beans.ConversionNotSupportedException: Failed to \nconvert value of type [java.lang.String] to required type [org.apache.ignite.cac\nhe.CacheAtomicityMode]; nested exception is java.lang.IllegalStateException: Can\nnot convert value of type [java.lang.String] to required type [org.apache.ignite\n.cache.CacheAtomicityMode]: no matching editors or conversion strategy found\n. I just found ignite-spring. It should help clean this up a bunch. I'll give it a shot tomorrow.\n. I haven't had a chance to work on this in a while. There are/were some bugs somewhere in 5.0.0-SNAPSHOT that prevent this from working right just yet. This is currently setup for spring boot as well. I'll take a look shortly and provide an update.\n. This seems to require ldaptive 1.2.0-SNAPSHOT\n. I'm trying to use it as is but the only thing being thrown is a general AuthenticationException. I'm never redirected to the password change URL despite the log saying it's handling PASSWORD_EXPIRED.\n. Otherwise, it works just fine for me.\n. Seems like it may be related in some way to https://github.com/apereo/cas/pull/646. Looking at the webflow for login, both the casMustChangePassView and casExpiredPassView point to the same place abstactPasswordChangeView but neither are being hit.\n. I'm afraid they're less than useful... this is with org.jasig.cas.authentication.support and org.jasig.cas.web.flow at debug. I'll post a wider one w/ all of org.jasig.cas.authentication in a bit.\nhttps://gist.github.com/anonymous/7f6c3d0a72c568700a266bab81619f83\n. This one is more useful:\nhttps://gist.github.com/anonymous/a05bbde1756126e5a846c3a47e43c02f\n. The old property was password.policy.url I had that one set.\nAfter adding passwordPolicy.passwordPolicyUrl to my config, I still get the same error.\nI think I found it... I'm using ldaptive1.2 which doesn't use usePasswordPolicy anymore. I'll troll through the ldaptive 1.2 branch to see what I missed in my own patches.\n. <ldaptive:authentication-response-handler>\n            <ldaptive:free-ipa-handler\n                expirationPeriod=\"${ldap.auth.expirationPeriod}\"\n                warningPeriod=\"${ldap.auth.warningPeriod}\"\n                maxLoginFailures=\"${ldap.auth.maxLoginFailures:0}\" />\n        </ldaptive:authentication-response-handler>\nLooks like I have a bug to find...\n. Got it! incoming PR.\n. Would it be easier for me to target unicon/ldaptive1.2 on this?\n. Done\n. Yes, I'm experiencing it at least as far back as 4.3.0-SNAPSHOT from shortly after the 4.2.0 release.\n. The correct baseDn In this use case is DC=example,DC=com I'm not sure if it's required for SASL and that baseDn might be a standard default if none is provided.. Seems that's not exactly the case. I'll look up he SASL spec as well but it seems, for searches at least, based is not required. See also: https://www.drupal.org/node/357363. checksyle issues fixed. I'm going to add something to handle existing keys gracefully. (and rebase against master). It's all good. I need to refactor some of this anyway. Looking at it again, it seems silly to keep the key in base64 and decode it on every crypto operation.. Seems like I built this off of the nativeprng patch. let me know if it should be split off.. The problem I'm running into that may require a fairly large change is the JPA code all assumes hibernate backed by JDBC. That's improved somewhat since I switched from kundera to hibernate-ogm but may still require a few larger changes.\nWhat I'd like to get out of this is a fairly generic JPA frontend for the various things that already support JPA and minimal or no changes required to those components to get another JPA backend added once I get Cassandra working.\nThat said, I'll try to keep the required class name changes low (JpaProperties rename hits a lot of files).. Hibernate-OGM does not fully support abstracted CRUD.. Pretty sure it changes them. But I don\u2019t know. Was blocking hibernate-ogm w a column exception of some kind.\n\n. I\u2019ll leave it here in case #3105 doesn\u2019t wind up needing it.\n. Is there a simple way to test it for schema changes?. Ready to go. Will have to wait for 6.0 due to schema changes.. Hibernate-OGM does not fully support abstracted CRUD.. I'm going to save committing the rest until it's passing here. The ticket registry will look very similar.. Just looking for spots that need tweaking currently.. made travis unhappy. closing for now to reduce noise here while I work this out in my own repo.. why not?\n\nWaiting for the build to complete allows the other stages to use the build cache. If it doesn't complete, it's unlikely the other tasks would. If the tests don't pass, then a snapshot shouldn't be deployed and the generated documentation is irrelevant..\nThis way you also have a shorter turn around for a failed build. If a build or tests fail, the next build can start in less time, that's the hope anyway, than it currently takes for all the jobs to complete.. Okay makes sense.. We were using it but stopped as ignite doesn't handle clusters across multiple locations well. Unless you see something off with my docker script, feel free to remove support.. Good to know someone is using it.. PR broken to individual components.. This commit is an interesting one. It defines the service oriented tasks only on the projects that include them. Exceptions are LDAP, FILESYSTEM, and MAIL. These three are not confined to projects with a common substring to the name.. Sure, how does that workflow wind up playing out?. Left authentication tests alone for now. They'll need to be looked at by someone w/ better knowledge of pac4j (or mongo) than I have now.. Had to skip rest for now. needs refactoring to be able to properly mock tests.. folded into #3484. reworking the dependency check plugin configuration reduced the dependency check phase by thirty minutes.. doesn't work. build is too interdependent.. See also https://github.com/sormuras/bach/issues/36\nskips broken radius tests. That's what I was going to work through but this isn't going to get done in one shot.... No, jdk8 defaults to /dev/random as well. I\u2019m not sure why it was changed back to the blocking source after I switched it to nonblocking.  Though, I\u2019d like check jdk source just to double check.. if that... pretty sure they're created as part of the build. certainly updated every compile task run.. The issue is on the decryption side. Because of where an SSO system sits, those with access to the logs may not already have access to the keys in the config. Providing the full decryption exception is a padding Oracle in that somewhat unlikely case. The original exception is rethrown if the logger is set to trace.. The issue is on the decryption side. Because of where an SSO system sits, those with access to the logs may not already have access to the keys in the config. Providing the full decryption exception is a padding Oracle in that somewhat unlikely case. The original exception is rethrown if the logger is set to trace.. codacy's coverage is not ready for prime time.. Bah, I missed the review request.... This changing cas-server-core forces at least three other modules to switch. Holding off on this for now. Hopefully, I can move those dependent modules individually and come back for core.. Don't worry about it. If there's nothing special about the test, the upgrade to junit5 is just changing two import lines.. This one is checkstyle and inline properties. The cleanup is going to be much larger than I thought and require refactoring some things.. Don\u2019t worry about how my stuff is affected. It\u2019s easy enough to make these changes for a class or two. Not sure if I\u2019ll get the first part done early enough for this PR anyway.. I'll see what I can do, I'm not sure how to do the IP addresses. There should be multiple entries in a production environment.\n. Okay, I'll also add another PR to expand that to org.jasig.cas.ticket.registry.TicketRegistry#addTicket(Ticket ticket) once this one's done.\n. That's from starting this work from the EhCache registry code. The other ticket registries should be reviewed for this as well.\n. Also a holdover from EhCache.\n. Not without creating a new QueryCursor for the TGT cache just below this line\n. Yet another holdover from EhCache.\n. by just setting properties like ignite.keyStoreFilePath? Probably.\n. All tests pass. I looked into this to make sure but i don't remember what I ran into. I'll dig up a link later today.\n. That's just IDEA being grumpy. I'll keep an eye out on those automatic imports.\n. Another IDE analysis rule... doesn't like concrete classes used for collections. I'll change it back.\n. It made sense to move it up since it was an opportunity to unify the methods. I'll reverse this and stick to making them all function similarly.\n. These methods are marked deprecated because they shouldn't be used in new development since the use of org.joda.time.* and the old java.util.Date interfaces are deprecated. The two that aren't marked only handle long and java.time.*. The joda project has deprecated itself stating java8 development should occur on the java.time interfaces not on theirs.\n. The JavaSerializer class died horribly since there isn't a no arg constructor for ZonedDateTime. I looked around and got code similar to this almost immediately. I expect kryo will add something like this soon and it can be removed from CAS.\n. A comment I didn't mean to commit. However, this function is only used by DuoWeb, so IDEA complained and I agreed. I'm going to be removing the rest of the functions in this util class replacing them w/ commons-codec functions. Commons-codec also has support for URL safe base64 encoding.\n. That's correct. Then I'll yank this module make the API use longs.\n. Another IDE grumpy point. Also, this is something that makes my skin crawl... Nothing should be throwing or catching Exception. Imho, that includes documentation. I'm going to keep this stuff to files I otherwise touch and put the rest in another PR.\n. I keep expecting that myself but java.net.URL specifically does not inherit from java.net.URI. The relationship between URL and URI is similar in their respective rfc's.\n. I think I had to add this to get the ldap stuff running. I'll double verify and make sure to pull this out if possible.\n. right... I knew that...\n. and spring security was swapped out for pac4j...\n. That makes sense. I'll see what I can do to lean on Duo there too, or replace Duo with another TOPT implementation...\n. My mistake. I thought this was just a TOPT library.\n. I'd prefer to have performLogoutForTicket perform this loop and recur on any PGTs found since this is more a property of the ticket itself. Given how empty this class is, I'd take a long look at moving performLogout to the ticket implementation classes. I'm not very familiar with the logout process so I'm not sure how possible that really is.\n. Does the reverse order not work? I'd expect you'd want to kill granting tickets first then the tickets they created (possibly simply through recursion).\n. right... forgot about that. What about updating the ticket with an invalid flag before proper deletion? That should be in a different patch anyway; it's getting out of the scope of this patch.\n. If everything is moving under AbstractCrypticTicketRegistry, shouldn't AbstractCrypticTicketRegistry be merged into AbstractTicketRegistry?\nAgain, different patch...\n. just a boolean valid/invalid (or deleted) field that can be updated in the reverse order before deleting them. That way the ticket is invalidated regardless of what happens or when with the delete actually happens.\nBasically a soft delete indicator.\n. K\n. isExpiredInternal covers what I was thinking. Set it and save the object before deleting them all? Though, expiring the ticket and letting something else do the cleanup later might be useful. Then again, we're talking about a very small window. Might not be all that worth fixing...\n. On further thought... Only the idea of setting the expired field and letting something else cleanup later is a decent idea.\n. I added a util class to handle the transfer to something JPA understands. Which is what hibernate will be doing to since JPA wasn't updated to the new APIs.\n. Okay to all above.\n. I don't remember exactly. Also, looking at this code again, the SimpleMutex class should be using a WeakReference anyway. As written, these object will keep them selves alive since they have a standard strong reference to their keys.\nI'm starting to think you're correct on that.\nI'll change it and remove the class but leave it in the history if needed.\n. Which is held in the mutex, so it'll never go away... I'll correct that before I kill off the class.\n. The old keys may be valid base64 due to the characters used. If it's base64 and the key size is not the same as the decoded length, either it's an old key or misconfigured.. I can do that. Yes, this will be compatible w/ existing keys.. Made more sense to me here as it's a property of the ticket and was pulled using a static method previously.. I can't modify the signature of getAuditRecordsSince here because the interface is not defined in CAS.. Done. \nPR apereo/inspektr#12. I think it's no longer needed. I added the annotations in Inspektr so the mixin shouldn't be needed anymore.. I actually didn't mean for that to land in this PR at all.... Was to prevent a collision in the JSON. has since been resolved in another manner.... As above.... Done. done. fixed. Done. Done. We need to retain cid and rev. I'll see if there's a better way.... just calls super now.. Done. Done. Done. Done. Done.. These are calculated fields based on the contents of other fields that are going into the JSON. They are not required to persist the object.. because I changed getId() to avoid collision with the id field.. Done.. very similar... it's needed to rebuild a Set into a List and cast the elements. I will rework the interface in another PR to get rid of this. Currently, only public List<String> getEligibleAccountsForSurrogateToProxy(final String username) uses this function. A Set will do just fine but requires redoing the interface.\n. Why pull in every pac4j data service when we only need one? I only added the one dependency spec because the rest aren't relevant to this.. Done... That one took me a while to find yesterday.... Will do.. Done. Done.. Done. Where the bean is also declared in a core config somewhere and this is supposed to override it, should I add @AutoConfigureBefore?\ne.g., casEventRepository. Done. Probably... it's not used by anything but i left it there as a starter for other stuff.... Not my classes... They wouldn't be singletons if a user put different databases in different couchdb servers. I might wind up doing that to separate the higher traffic ones from the lower.... Done. Done. It is, in the NoSQL stuff.. Done. This shouldn't even be in this PR.... lazy initialization, it's so the create methods can be called more than once... probably should rename them.... bummer.... Done.... Done. Done. Done... seems to have already been removed from usage... . see above.... Should this just be [REST Protocol](REST-Protocol.html)?. I blame spotbugs. Came up as a redundant method call. I don\u2019t know why it\u2019s getting flagged in this PR and not in master.. I'll clean it up entirely... There's no reason to be doing it this way really.... I take that back... no better way to do it.. Spotbugs didn't like that. It wants a static field.. Yup. The junit5 style includes a error if junit4 classes are used. Is there a better way to make a hard cut like that? There should only be two during the transition period.. Not entirely sure why but the test fails without the file in the same jar as the test. . File removed and it's passing locally.... Will do. It needs some clean up for consistency anyway. Mind if I do away with that class/test condition?. @jgribonvald Definitely do not worry about clogging CI or anything like that. Take a look at the build history for PRs... It's a mess. If there's something you want to kill off or anything like that just hit us up in gitter or whereever.... ",
    "luneo7": "Build failures fixed\n. I searched cas 4.1.0 for references of vt-crypt and I found that dependency only in cas-server-support-x509, so it is not used anywhere else.\n. Nope, you can't do that. You need to double check that if it is encapsulated as an ASN1 tagged object, and get the inner object to see what type of string it is. You need that due to a java bug, sometimes it is tagged twice, so (ASN1TaggedObject) seq.getObjectAt(1) and that first if (ASN1TaggedObject.getInstance(((ASN1TaggedObject) prim)).getObject();) does that.\n. In the first try catch block can be thrown IllegalArgumentException, for example, due to invalid distribution point, or when Cryptacular tries to read the data it can throw IllegalArgumentException due to an IOException when exception parsing ASN.1 data.\n. Yeap, we can chance that catch to a RuntimeException\n. Ok, I've done that.\n. ",
    "RaphC": "Sorry for the wrong target\n. Sorry wrong manipulation. Hi @mmoayyed,\nDid you see my commit on ServiceTicketRequestWebflowEventResolver ? (https://github.com/apereo/cas/pull/3264/commits/197522e02bfd90adec430c4bee64abc976e8b817)\nI wanted to commit with another PR. Do you want I revert this change ?\nRegards,. ",
    "arbner": "Working with the LDAP service registry in version 5.1.x I encountered the same issues with editing services again.\nDebugging and reviewing the code I found that this commit here hasn't survived post-4.1.x. \nSkipping the delete in the FormController seems to have solved the issue for my case, I didn't run all the test cases though.. \"We\" is TU Darmstadt, Germany ;). Sure, might I ask the specific reason?. Thanks, works perfectly. Thanks for your help so far.\nI noticed those commits too. I've learned a lot about git through this project, but not quite enough.\nHow exactly would I accomplish the rebase/restart to get rid of them?. ok, done. I believe this is what I've been doing all along. It seems the commits are still there, no?. I'm doing pretty good.\nGetting decisions from release attributes doesn't work, because that way new decisions are not updated after global login. So I'm rebuilding that to fetch from LDAP whenever consent is triggered. Storing, merging, reading works well on the LDAP level, config also. Tests and Docs are to be done.\nUnfortunately, I'm waiting for a legal go ahead to push my stuff. I hope it's ok to review in one chunk, since it's not that big.\n. Good timing! fighting with git... but here it is. I'm happy for comments.. I'll merge to give it a last try. If this fails, feel free to make any changes.. Ok, I gave it another try. How about it?. Thanks for the comments, I'm reviewing right now.\nOne question:\nPac4J security for admin pages is relying on the authentication profile being available in the session. When entering via the consent page, the admin endpoint roles are not resolved, so visiting the status dashboard in the same session fails. Starting from the status pages, everything works fine.\nI thought about making the admin pages' AuthorizationGenerator available for the consent client, so roles are resolved there too. What do you suggest?\nedit: I resolved this issue by reusing the config from CasSecurityContextConfiguration. see c4b790e. Thanks for the comments, I'm reviewing right now.\nOne question:\nPac4J security for admin pages is relying on the authentication profile being available in the session. When entering via the consent page, the admin endpoint roles are not resolved, so visiting the status dashboard in the same session fails. Starting from the status pages, everything works fine.\nI thought about making the admin pages' AuthorizationGenerator available for the consent client, so roles are resolved there too. What do you suggest?\nedit: I resolved this issue by reusing the config from CasSecurityContextConfiguration. see c4b790e. > Or perhaps you envision that I, as an admin, would log into the consent views editing someone's records and then navigating to /cas/status?\nAt the moment I'm only seeing a self-service. No admin can change the decisions for users. \nThe error only occurs when an admin logs into consent to manage his or her account, and then tries to access admin pages in that session. As an admin I think I wouldn't expect it to be a problem.\nThe solution to logout and login again with the right service does not seem intuitive to me.\n\nWhy should I logging in as a user be able to navigate to /cas/status endpoint and such?\n\nA regular user would not be able to go to the status pages, since he's missing the roles.\nDo you see any problems arising with sharing the config? I see that there's a little overhead because of the resolution of roles for 99% of users not owning any, but apart from that?. > Or perhaps you envision that I, as an admin, would log into the consent views editing someone's records and then navigating to /cas/status?\nAt the moment I'm only seeing a self-service. No admin can change the decisions for users. \nThe error only occurs when an admin logs into consent to manage his or her account, and then tries to access admin pages in that session. As an admin I think I wouldn't expect it to be a problem.\nThe solution to logout and login again with the right service does not seem intuitive to me.\n\nWhy should I logging in as a user be able to navigate to /cas/status endpoint and such?\n\nA regular user would not be able to go to the status pages, since he's missing the roles.\nDo you see any problems arising with sharing the config? I see that there's a little overhead because of the resolution of roles for 99% of users not owning any, but apart from that?. Logout functionality is something I thought about as well. Would it simply be a redirect to /logout?\n\nI imagine controlling that service in the registry via extra policies would amount to the same thing, reducing overhead (i.e. everyone with attribute blah can get to this page, otherwise no).\n\nI'm not sure I understand. Do you mean replacing the method that adds the consent service to the service registry by some logic in the registry classes? You mean some attribute that proves authentication has happened?. Logout functionality is something I thought about as well. Would it simply be a redirect to /logout?\n\nI imagine controlling that service in the registry via extra policies would amount to the same thing, reducing overhead (i.e. everyone with attribute blah can get to this page, otherwise no).\n\nI'm not sure I understand. Do you mean replacing the method that adds the consent service to the service registry by some logic in the registry classes? You mean some attribute that proves authentication has happened?. I just realized attributes and names are hashed and encrypted, so there's no way to get plain text information back to the UI here. I would have liked to show exactly what attributes and values are currently released for each decision.\nAs a resort, I could add currently resolved user attributes to the display.\nAny thoughts regarding this?. I just realized attributes and names are hashed and encrypted, so there's no way to get plain text information back to the UI here. I would have liked to show exactly what attributes and values are currently released for each decision.\nAs a resort, I could add currently resolved user attributes to the display.\nAny thoughts regarding this?. This sounds very good to me.. This sounds very good to me.. Ok, this seems to work very well. Thank you!. I think it's possible, but not for certain. I'd stick to it for now and should be able to tell more by next week, if that's ok with you.. Almost at a point where I can submit.\nI think the review page could make use of the service display name... Do you think it could be added to the ConsentDecision?\nI noticed that ConsentDecision is still using java.concurrent.TimeUnit, so that some (most?) time units cannot be handled by the (regular) consent view.\nApart from that I'm doing some cleanup and should be ready by the end of the week. Please have a look through the changes.. >>I  noticed that ConsentDecision is still using java.concurrent.TimeUnit, so that some (most?) time units cannot be handled by the (regular) consent view.\n\nThat is true and I think we'd be OK with that. If someone decides to keep consent decisions for 3 nano/milli seconds(!), that person would need to also find a solution for the review page as well.\n\nSorry, I meant that when selecting, for example, months in the consent page, there is an error, which I believe occurs because there is no support for it in the ConsentDecision class.. I want to quickly recap where this is at.\nAs far as I see, I've made all the you changes that you proposed. I've also fixed some minor issues that I found.\nApparently, coveralls is failing now. I'm having trouble discerning any good spots to write new tests for. I thought maybe take an existing consent repo for this. What do you think?\nAppearance/layout is always a question of taste... I 'm not super happy, but a good start. Please make any adjustments you see fit.\nApart from that, I think it's ready now!. > One minor problem: if I don't have any consent decisions and go to the review page, I get a JS error.\n\nIs this something you may want to fix?\n\nDefinitely. I couldn't reproduce this though. Without consent decisions, I get the There are no consent decisions registered for you. message.\n. Regardless of this, thanks for the remarks, reviews and all. It's been an honor and a pleasure working on this feature. I look forward to contributing again and to the upcoming release.\nI think you're doing a great job encouraging contributions :). I've also noticed this.\nThey're part of the overlay's application.properties:\n```\n\nCAS Authentication Attributes\n\ncas.authn.attributeRepository.stub.attributes.uid=uid\ncas.authn.attributeRepository.stub.attributes.givenName=givenName\ncas.authn.attributeRepository.stub.attributes.eppn=eppn\n```. I agree, that is my understanding of it as well. I can take a dive into it this or next week.. So, at least I found out what happens.\nUrlResourceMetadataResolver creates a FileBackedHTTPMetadataResolver for each request.\nFileBackedHTTPMetadataResolver looks at the file and loads metadata from there if present, if not via HTTP; schedules refresh of metadata after 5 seconds; schedules refresh after ~3 hours; lives on for what seems to be forever and continues refreshing. One resolver for each file. If I use one file per service, there are many resolvers on one file for each service def. In any case, there is a new refresh Timer for each request.\nTwo solutions I have in mind:\n keep a list of resolvers in UrlResourceMetadataResolver so that each service has one file and one timer\n somehow delete resolvers after requests\nI currently have no idea how the service metadata expiration and global metadata cache expiration  properties are affecting the behaviour.\nStrangely, I cannot find any access to cached metadata in the logs at all.\nDo you have any suggestions or thoughts?. Here's the CAS config, service def and service metadata.\nconfig.zip\n. Regarding the second bullet: yes, I would prefer consent to show the friendly names to the users. As far as I can tell, the urn's are only in use by the SAML protocol. Therefore, I'd say: use them in the protocol  only and work with the resolved attribute names everywhere else.\nI've tried to incorporate the idea into the docs:\nhttps://github.com/arbner/cas/blob/a993f29b4a6dc5cb835d046b2e07634469a0df10/docs/cas-server-documentation/installation/Configuring-SAML2-Authentication.md#attribute-names\nThe global config would look like that for nameformats:\ncas.authn.samlIdp.response.attributeNameFormats=attributeName->basic|uri|unspecified|custom-format-etc,...\ncas.authn.samlIdp.response.attributeNames=attributeName->urn:oid:1.2.3,.... Sound good to me. If I understand correctly, the attribute release or consent policy would have a block with this information. The consent module would use it for UI purposes only.\nOne question remains for me: how to specify SAML friendly names? Would the SAML response be built with the friendly names from that block, if any exist? I saw a lot has happend to SAML attribute release. Would it fit in there?. Ok. Thinking about and discussing this, I believe my use case has faded away. It might pop back up some time in the future. Thanks for you time.\nSo I guess what remains is to put those friendly names on the mgmt webapp form?. We're using ignite for our tickets cache in 5.2.5. Works very well in a clustered 2-node environment. Please consider keeping it.. Andy, thank for this PR. I think I remember some details about this.\nI believe FlashScope is needed because here, \"service\" is resolved as the SAML (or other service), which is needed to find the consent decision. \nIn the flow though, the service is the callback endpoint, which needs to be used for redirection. I believe I remember putting the resolved service in flash scope was \"only\" for UI purposes.\nFor regular CAS services (redirection = consent service), the flash and flow scopes will be the same, but for SAML this makes a difference.\n. I think the alternative here might be to put a new element to flowscope which is then exclusively used by consent, e.g. \"consentService\".\nI found the old PR: https://github.com/apereo/cas/pull/2925\nBack then, we chose to do it exactly this way.. Unfortunately, I deleted the original attempt in the PR.. I'll give it a try. Sorry for my germanish english...\nThe moment consent is displayed, the service in the flow is the service redirected to. In the case of SAML (and possibly other protocol implementations), this is the callback endpoint. Using this service for consent is however not appropriate, since the user has to give consent for attribute release to the saml service. \nThe implementation of the consent action etc. takes this into account correctly, so no problems here. \nOn the interface side, the service for which the user is asked for consent should of course be displayed. Now, using the flow's service attribute in UI would display the callback endpoint, but, in the background, consent is granted for the SAML service. Therefore, ConsentAction has to somehow pass the \"real\" service to the view to be displayed to the user.\nIn my opinion, one way is to overwrite the service attribute for the view alone (flashScope), the other would be to pass a new attribute.. Are we only waiting for port forward?. Can you confirm that this patch has made it to the gradle overlay? I use ./build.sh update, cas Version 6.0.0-RC4-SNAPSHOT but still get the error:\n```\n$ java -jar build/libs/cas.war\nWARNING: sun.reflect.Reflection.getCallerClass is not supported. This will impact performance.\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (jar:file:/.../cas-overlay-template/build/libs/cas.war!/WEB-INF/lib/groovy-2.5.4.jar!/) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)\nWARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\n2018-11-27 12:22:22,925 ERROR [org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter] - <\n\nAPPLICATION FAILED TO START\n\nDescription:\nConfiguration property name 'cas.server.basicAuthn.enabled' is not valid:\nInvalid characters: 'A'\nReason: Canonical names should be kebab-case ('-' separated), lowercase alpha-numeric characters and must start with a letter\n\nAction:\nModify 'cas.server.basicAuthn.enabled' so that it conforms to the canonical names requirements.\n\n```\n\nAny error on my side?. Review looks great, thanks. I saw you added a \"real\" UID for the repository. I didn't really know where to get one from, but here it's the same thing I believe.. This should be a core module then, right? Would it fit in cas-server-core-web (org.apereo.cas.web.pac4j)? Else I'd suggest a new core module cas-server-core-pac4j.. True. I'd say a new core package then?. It's here, no?. Ah ok. I thought the pac4j support modules were specifically for delegation. I'm not super familiar with the project structure. I'll move it there then.. I thought about this as well. Since the principal is passed, I decided to use http POST. I could drop this and use DELETE with only the decision id.\nWhat's your preference?. Are you refering to the specific AttributeReleasePolicy, or to disabling consent for this service?. Maybe so:\n/<decisionId> appended to URL. Haven't thought about it. I somehow thought this was the default. No extra attributes are needed, so I'll review this.. It has become /consentReview/callback. ",
    "agaikwad": "Yes, I saw the changes in the code. I added it to my notes to make that\nchange.\nThanks,\nAbhijit.\n. @mmoayyed Done. The build was successful.\n. ",
    "PetrGasparik": "can you apply this change to 4.1.x so I can see it on wiki?\n. thank you. should I always make such doc PR on master, or is it better in branch like 4.1.x?\n. This is not linked to #1321, why?\nI would like to make corrections to master doc also, but I don't know the URL where I can see current master wiki. Or, if there is none, how to visualize the .md file?\n. Misagh, can you rerun this travis, so we can check output in doc?\nhttps://travis-ci.org/apereo/cas/builds/211358884. Unfortunately, it did fail again:\nCaused by: org.gradle.internal.resolve.ArtifactNotFoundException: Could not find opensaml-storage-api.jar (org.opensaml:opensaml-storage-api:3.3.0).\nSearched in the following locations:\n    https://repo1.maven.org/maven2/org/opensaml/opensaml-storage-api/3.3.0/opensaml-storage-api-3.3.0.jar\nCan you resolve that in artifactory and rerun build? Thanks!. Hi, I am from the same project team as \"fedon\".\nMotivation behind this change is: \n- CAS enables X.509 authentication via REST (our previous PR)\n- CAS does not enables X.509 authentication via webflow\n- CAS enables LDAP authentication via webflow\nWe could not find how to do this in configuration. If it is possible without modifying Apereo CAS Java classes, please, give us a clue. We will look into OAuth implementation, in meanwhile.. \nWhat? Why are there nonrelevant changes to my wiki update?\n\nCodecov Report\n\nMerging #3863 into 6.0.x will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3863      +/-\n============================================\n- Coverage     48.97%   48.91%   -0.07%   \n+ Complexity     5153     5146       -7   \n============================================\n  Files          1456     1456            \n  Lines         31130    31130            \n  Branches       2905     2905            \n============================================\n- Hits          15247    15227      -20   \n- Misses        14451    14475      +24   \n+ Partials       1432     1428       -4\n```\nImpacted Files   Coverage \u0394  Complexity \u0394  \n...ava/org/apereo/cas/util/io/PathWatcherService.java 35.18% <0%> (-31.49%) 5% <0%> (-4%)\n...ava/org/apereo/cas/util/io/FileWatcherService.java 30.76% <0%> (-7.7%) 3% <0%> (-1%)\n...yThrottledSubmissionHandlerInterceptorAdapter.java 93.75% <0%> (-6.25%) 9% <0%> (-1%)\n...ereo/cas/monitor/AbstractCacheHealthIndicator.java 69.69% <0%> (-3.04%) 8% <0%> (-1%)\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 04a7ff0...7595535. Read the comment docs.\n\n\n. with $cas.version, it does not compile, saying that there is no such version.\nwhat is supposed action now? I redo it and make another PR?\n. ok.\n. there should be a  :) see https://apereo.github.io/cas/development/protocol/REST-Protocol.html#add-x509-support. ",
    "kirill-vlasov": "I found the violations by using SonarQube analyzing tool.\n. @leleuj Yes, you are right. SonarQube may run PMD, Findbugs, Checkstyle tools as external plugins. Internally and by default sonar checks for its own \"squid\" prefixed rules.\n@mmoayyed I've seen many projects with embed PMD, Findbugs, Checkstyle for build process. But for SonarQube you have to work with hosted version (sonar server). I even not sure if it can be run with Travis CI.\n. @mmoayyed definitely yes, sonarqube server at heroku (or at any other cloud services) should be available to travic ci host. Then it is easy to set up sonar-runner tool to remote sonarqube instance.\n. @mmoayyed There's a public free instance of Sonar at http://nemo.sonarsource.org You can ask at the user mailing list to host your open source project there.\n. Yes, the result of getAuthenticationAttributesAsMultiValuedAttributes is wrapped and there is no issue with that. But I just removed line below which seemed like a mistake to me:\nnew HashMap<>(getAuthenticationAttributesAsMultiValuedAttributes(model));\nCould you please explain to me where I am wrong here?\n. ",
    "mateofacu": "That's right. I tested on a working test cas environment we use before production . Throttling is working as expected now for jdbc auditing.\nAll test cases run ok too. I had some problems on a json service registry test case. But not related to this functionality and probably some issue on my development environment.\n. ",
    "jbjonesjr": "Note: I'm not quite sure why 212 other files came along with my Pull Request targeting cas-server-documentation/installation/X509-Authentication.md, but they did.  I'm happy to update this PR if someone has a suggestion on what branch I should be targeting with this PR.\n. I apparently did not. Is master the correct branch to be committing this to, or 4.1.X?\n. ok, this was originally branched from the 4.1.x branch. got the compare to work correct and now it's pointing at the right spot in #1435 . Closing this one.\n. ",
    "hlbraddock": "+1\n. ",
    "mkornipati": "Do we know when we can expect 4.3.0 be released?\n. ",
    "ardias": "I just have a jax-rs service using openid4java that i'm using for testing. Let me see if i can make a proper client.\n. I closed the PR to the 4.2.x branch. Made another PR to master as per the conversation on the other PR. Sorry if this not the correct way to do this.\n. I'll have to do another PR. I had originally branched from 4.2.x so now the\nmerge from master is just enormous and there's too much conflict. I'll\nclose this one and do another. Sorry about that.\nOn Thu, Feb 18, 2016 at 2:49 PM, Misagh Moayyed notifications@github.com\nwrote:\n\nNo you did fine. Just need to sync changes.\nIn your local clone, pull from master into your master branch. Then switch\nto your topic branch for this issue, merge with master. Then push back to\nyour branch. This will bring you up to speed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1556#issuecomment-185731754.\n. I'm putting my test code into a decent format. I'll push it to my repo and\ngive you the link.\n\nOn Thu, Feb 18, 2016 at 3:18 PM, Misagh Moayyed notifications@github.com\nwrote:\n\nNo worries. Thanks for your persistence.\nI had a brief look at the response builder and I think your original\nsuggestion of creating a second ticket for the client might work. Will need\naccess to a client to fully test and confirm though so if you have one\nready, that would be very helpful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/1556#issuecomment-185741897.\n. Yes, my patch makes 3 also validate the ticket.\nI'm still trying to make my way around all the classes involved. But the main thing is that in stateless mode the ST is used as the association handle, and in OpenIdServiceFactory it's used as the service artifactId. The verification phase goes through the OpenIdValidateController that delegates to the AbstractServiceValidateController and it's here that the ticket is validated again because it's the service \"artifactId\". It's all a bit confusing for me at the moment.\n\nAnyway, another option might be not returning the ST as the assocation handle in stateless mode, and change the OpenIdValidateController to do a proper validation of the OpenId parameters like it's specified here: http://openid.net/specs/openid-authentication-2_0.html#check_auth\nSo yes, maybe we don't need to validate the ST in non-assoc mode. Per the spec, i think CAS only need to validate the signature\n. Btw i uploaded a test client to my repo. It's here: https://github.com/ardias/cas-openid-client\n. Thanks, happy to contribute. \n. Ok i will. From the looks of it it should, but i'll try it.\n. Yeah, i applied the changes to  my local server and yes it did work.\nNow what's missing is the real 'validation' of the request parameters. I believe in openid4java, the ServerManager can do that validation. It has a method 'verify', that check the various paremeters. \n. Yes, on the server. The client does a verify when it's in association mode. When it's not is association mode, the client has to send a verification request to the server. \nhttp://openid.net/specs/openid-authentication-2_0.html#verification (section 11.4.2)\n. I could work on this but i can't commit to a very strict release/ready date. I'm doing this in my company's time because we're evaluating various auth/sso solutions, and i have a lot of other stuff to do. If there's not a big hurry, i could dedicate some of my free-time.\nAnd, yes if you could merge it, i would appreciate it.\n. Ok, cool. I'll keep you posted\n. Btw, sorry about the formatting changes. My IntelliJ is configured to format code according to the company rules, so it changes the order of the imports.\n. Yes, it should work in both modes.\n. Sure.\n. No, they're private to the parent. I can change them to protected or add a getter. Since there are already setters, i'm going to opt for getter since it makes it more 'bean-like'.\n. ",
    "aukevanleeuwen": "Sorry I updated the original comment, but I'm really pressed for time right now. Just thought this was the quickest way to let you know exactly what I was talking about.\n. I can probably do it next week.\n. Closing this PR in favor of #1600.\n. :+1: \n. :+1: \n. @mmoayyed : hmm I found more issues with this implementation that break the Spring Webflow way of doing things. According to http://docs.spring.io/spring-webflow/docs/current/reference/htmlsingle/#webflow-event-link you should be able to use  \n<a href=\"${flowExecutionUrl}&_eventId=cancel\">Cancel</a>\nto signal the next transition (cancel in this case) to the webflow. However with the CasDefaultFlowUrlHandler implementation I get this url for that link: \n/rs-web/create?execution=e5s4&_eventId=submit&_eventId=cancel\nwhereas with the (SWF) DefaultFlowUrlHandler I get:\n/rs-web/create?execution=e5s4&_eventId=cancel\nApparently adding all the requests parameters (which is basically what the CasDefaultFlowUrlHandler adds as functionality) isn't such a great idea? What is it used for in the first place? \n. Oh btw: this doesn't really change anything for this PR per se, because that fixes completely different (encoding) issues. But it does go to show that if this hasn't worked properly (I mean it would for all request parameters always have outputted a toString() for all the request parameters (i.e. [Ljava.lang.String;@221ebc09). \nMakes me wonder if this method is useful for CAS in the first place?\n. Well as far as I read the code (and you can see the test code as well) this always failed. The 'single value' test case that I added also failed before I started implementing:\n```\n@Test\npublic void verifyCreateFlowExecutionUrlWithSingleValuedAttributes() throws Exception {\n    setupRequest(\"/cas\", \"/app\", \"/foo\");\n    request.setParameter(\"bar\", \"baz\");\n    request.setParameter(\"qux\", \"quux\");\n    final String url = urlHandler.createFlowExecutionUrl(\"foo\", \"12345\", request);\nassertEquals(\"/cas/app/foo?bar=baz&qux=quux&execution=12345\", url);\n\n}\n```\nThis is because as far as I know the HttpServletRequest.getParameterMap() method has always returned a Map<String, String[]> although in the pre-generic days that was only specified in the JavaDoc and not so much in the return value.\nBasically: I can't see how this has worked? Apart from the fact that it would have worked without any request parameters?\n. Sorry I didn't answer all your questions: \n- Yes this happens if you specify redirect=\"true\", also if you use org.springframework.webflow.context.ExternalContext#requestFlowExecutionRedirect in your actions and (untested) probably also if you change <webflow:always-redirect-on-pause value=\"false\"/> which is defined in webflowContext.xml to the value true. \n- This also happens if you use the aforementioned <a href=\"${flowExecutionUrl}&_eventId=cancel\">Cancel</a> in your views.\n- flowExecutionKey is normally only the identifier for the 'conversation' that SWF uses on the server (if you have session based registry). This key has been upgraded by CAS to contain the complete compressed encrypted 'conversation state' as far as I can see.\nThat last point pretty much breaks any usage of redirection of any of the aforementioned kinds. (This is because it will generate URLs of lengths that are no longer 'sane' for the current browsers en server environments) This is at best slightly annoying for people such as me trying to extend the webflows in different ways.\n. Well I guess in that case nothing really needs to change. I've just overridden the loginFlowUrlHandler in cas-servlet.xml:\n<bean id=\"loginFlowUrlHandler\" class=\"org.springframework.webflow.context.servlet.DefaultFlowUrlHandler\"/>\nI did leave the logoutFlowUrlHandler to use the CAS version though because it sets an explicit flowExecutionKeyParameter to RelayState. Although that probably doesn't matter for me because I don't use Front-channel SLO.\nIt does make me wonder though if that Front-channel SLO is going to work with the flowExecutionKey value set to such a big (in query string length) value. Maybe the conversation state for the logout flow is not as big as that of the login flow (since it doesn't have, for example, a org.jasig.cas.authentication.RememberMeUsernamePasswordCredential stored in there), but it does really seem tricky to transfer all that state via an HTTP GET possibly crossing the boundaries of what those services still find a 'sane' url length.\n. By the way, all of this is a bit off topic for this actual pull request since, as I mentioned before, this redirect functionality is broken as it is because it will output values such as [Ljava.lang.String;@221ebc09 if there are any (multi-valued or single-valued) parameters. If you only add the test cases that I wrote and run them against master or 4.2.x, those will certainly fail.\n. @mmoayyed : this #1597 is the forward port btw\n. @leleuj : this thread is a bit convoluted I suppose, let me try to re-iterate:\n1. This PR is actually only about the fact that if there are any parameters (single-valued or multi-valued) apart from the flowExecutionKey and this CasDefaultFlowUrlHandler is hit, this will produce an invalid url. Again: run the the added tests on the master or 4.2.x branch.\n2. Other then that I noticed that the value of the flowExectionKey actually exceeds the 8192 characters in some of my cases. This is bigger than (for example) the Tomcat default maxHttpHeaderSize and caused problems in my case. This is of course because the value of that parameter is actually a compressed encrypted state of the spring webflow 'conversation state'. The more you put in the conversation state (flowScope) the bigger that value is going to be.\nPlease merge this PR because of (1). \nIn regard to (2): this is something that you decided you would use and maybe you didn't oversee some of the limitations that this would cause for people extending the spring webflow within CAS. See this comment. \nIn regard to the front channel SLO. This is essentially the same as (2), since the RelayState parameter is the flowExecutionKey AFAICT. My understanding is that Front channel logout works with browser redirects (i.e. HTTP 302) and therefore you might hit the same situation as (2). Then again: as long as the conversation state is small enough this will probably produce small enough URLs.\n. Apparently they don't expect a Map<String, String[]>, but simply a Map<String, String> or Map<String, Object>. The fact that the CAS implementation puts this line in:\nfinal Map<String, Object> flowParams = new LinkedHashMap<String, Object>(request.getParameterMap());\nThat's where it goes wrong.\n. @mmoayyed by whom? \n. Okay, just checking :-)\n. Done, sorry about that\n. ",
    "devpreview": "Sorry\nSee https://github.com/Jasig/cas/compare/4.2.x...devpreview:a8c9a7c\n. Wildfly 10 deploy error:\n\nCaused by: java.lang.RuntimeException: java.lang.IllegalArgumentException: object is not an instance of declaring class\n        at org.jasig.cas.CasVersion.getDateTime_aroundBody2(CasVersion.java:63)\n. @frett  Yes now I try\nbuild will take some time\n. @frett Thanks!\nBuild successful and delpoyed.\n. For my Wildfly 10 build and delpoyed successful.\n. \n",
    "chaegumi": "ticketRegistry also have this problem\n. I am so sorry.\nMaybe I forgot copy some dependency jar into lib.\nFinally I replace all jar in lib.\nIt now works fine.\nthanks.\n. ",
    "rkorn86": "I dont know yet what logs i should expect. If it is something like\n```\nSearch Subject for Kerberos V5 ACCEPT cred (HTTP/fqdn@REALM, sun.security.jgss.krb5.Krb5AcceptCredential)\nNo Subject\nFound KeyTab Default keytab\nEntered Krb5Context.acceptSecContext with state=STATE_NEW\nLooking for keys for: HTTP/fqdn@REALM\nAdded key: 23version: 1\nFound unsupported keytype (3) for HTTP/fqdn@REALM\nFound unsupported keytype (1) for HTTP/fqdn@REALM\n\n\n\nEType: sun.security.krb5.internal.crypto.ArcFourHmacEType\nUsing builtin default etypes for permitted_enctypes\ndefault etypes for permitted_enctypes: 18 17 16 23.\nEType: sun.security.krb5.internal.crypto.ArcFourHmacEType\nMemoryCache: add 1461241256/000062/XXXXXXXXXXXXXXXXXXXXXXXXXX/user@REALM to user@REALM|HTTP/fqdn@REALM\nMemoryCache: Existing AuthList:\n\n\n\n1: 1461241231/000056/YYYYYYYYYYYYYYYYYYYYYYYYYYY/user@REALM\n```\nthen yes.\n. My log entry above has gone when I disabled sun.security.krb5.debug.\n. Not sure if my setup is somehow broken, but I needed to enable sun.security.krb5.debug via JAVA_OPTS on Tomcat container level. Enabling sun.security.krb5.debug on JcifsConfig seems not work in my setup.\n. I wont touch switch statement in Beans.java, as this style bug is out of this PR scope.\n. Dont think so, im on weekend already. My TZ is Europe/Berlin ;-)\nIm back in office on monday.\nAm 15. Juli 2016 5:49:31 nachm. schrieb Misagh Moayyed \nnotifications@github.com:\n\n@rkorn86 in light of M3 coming up, do you think you'd get a chance to \nrevisit this PR some time today,  by Monday EOD?\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/apereo/cas/pull/1890#issuecomment-232990081\n. I will have a closer look at it next week, but I dont know how fast the \nldaptive guys are.\n\nDanke sch\u00f6n! :-)\nAm 15. Juli 2016 5:58:36 nachm. schrieb Misagh Moayyed \nnotifications@github.com:\n\nGotcha. What might be reasonable timeline for you to review this next \nweekend? Alternatively, we could proceed with M3 and review this afterwards \nbut I don't see a whole lot of sense in that.\nsch\u00f6nes Wochenende!\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/apereo/cas/pull/1890#issuecomment-232992597\n. PR https://github.com/vt-middleware/ldaptive/pull/112 was successfully merged, so i merged the https://github.com/Unicon/cas/tree/ldaptive1.2 branch into mine. Result is, that this PR is the same as https://github.com/apereo/cas/pull/1510 + usage of the custom ldap password attribute.\n. I will do today evening.\n\nAm 22. Juli 2016 11:07:05 vorm. schrieb Misagh Moayyed \nnotifications@github.com:\n\n@rkorn86 could you merge with master once please?\n\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub:\nhttps://github.com/apereo/cas/pull/1890#issuecomment-234493306\n. Last merge done. No Problem!:+1: \n. Without calling the initialize method of LdaptivePersonAttributeDao the returned LDAP attributes stay null.\n. Ooops, sorry.\n\nAm 2. Dezember 2016 3:58:26 nachm. schrieb Misagh Moayyed \nnotifications@github.com:\n\nFound a few javadocs issues that broke the build. Fixed. Going to push \nupstream to let travis ci resume.\n--\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub:\nhttps://github.com/apereo/cas/pull/2156#issuecomment-264472675\n. Should I fix the failing test in an extra commit, too?.  Test fixed. Travis should build now.. Same class, but second step in ecp flow with call to another SAML URL. My scenario is https://wiki.powerfolder.com/display/PF/Client+and+Mobile+App+SAML+ECP+Authentication and https://doku.tid.dfn.de/de:shibidp3ecp (german only) \nA great ECP Test Client is here: https://wiki.shibboleth.net/confluence/download/attachments/4358416/ecp.sh?version=5&modificationDate=1461767814341&api=v2&download=true. 2018-11-07 19:59:30,840 ERROR [org.apereo.cas.security.ResponseHeadersEnforcementFilter] - <RegisteredServiceResponseHeadersEnforcementFilter is blocking this request. Examine the cause in this stack trace to understand why.>\njavax.servlet.ServletException: RegisteredServiceResponseHeadersEnforcementFilter is blocking this request. Examine the cause in this stack trace to understand why.\n        at org.apereo.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:233) ~[cas-server-security-filter-2.0.10.2.jar:2.0.10.2]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.apereo.cas.security.AddResponseHeadersFilter.doFilter(AddResponseHeadersFilter.java:94) ~[cas-server-security-filter-2.0.10.2.jar:2.0.10.2]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:111) ~[spring-boot-actuator-1.5.16.RELEASE.jar:1.5.16.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:96) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:109) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.apereo.cas.logging.web.ThreadContextMDCServletFilter.doFilter(ThreadContextMDCServletFilter.java:91) ~[cas-server-core-logging-5.3.5.jar:5.3.5]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:103) ~[spring-boot-actuator-1.5.16.RELEASE.jar:1.5.16.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:130) ~[spring-boot-1.5.16.RELEASE.jar:1.5.16.RELEASE]\n        at org.springframework.boot.web.support.ErrorPageFilter.access$000(ErrorPageFilter.java:66) ~[spring-boot-1.5.16.RELEASE.jar:1.5.16.RELEASE]\n        at org.springframework.boot.web.support.ErrorPageFilter$1.doFilterInternal(ErrorPageFilter.java:105) ~[spring-boot-1.5.16.RELEASE.jar:1.5.16.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.3.20.RELEASE.jar:4.3.20.RELEASE]\n        at org.springframework.boot.web.support.ErrorPageFilter.doFilter(ErrorPageFilter.java:123) ~[spring-boot-1.5.16.RELEASE.jar:1.5.16.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.apereo.inspektr.common.web.ClientInfoThreadLocalFilter.doFilter(ClientInfoThreadLocalFilter.java:66) ~[inspektr-common-1.8.3.GA.jar:1.8.3.GA]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.apache.logging.log4j.web.Log4jServletFilter.doFilter(Log4jServletFilter.java:71) ~[log4j-web-2.11.0.jar:2.11.0]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:199) ~[catalina.jar:9.0.12]\n       at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:668) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[catalina.jar:9.0.12]\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[catalina.jar:9.0.12]\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) ~[tomcat-coyote.jar:9.0.12]\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) ~[tomcat-coyote.jar:9.0.12]\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:770) ~[tomcat-coyote.jar:9.0.12]\n        at org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.doRun(AprEndpoint.java:2336) ~[tomcat-coyote.jar:9.0.12]\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-coyote.jar:9.0.12]\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_181]\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_181]\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-util.jar:9.0.12]\n        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]\nCaused by: java.lang.NullPointerException\n        at org.apereo.cas.support.saml.authentication.principal.SamlServiceFactory.createService(SamlServiceFactory.java:59) ~[cas-server-support-saml-5.3.5.jar:5.3.5]\n        at org.apereo.cas.support.saml.authentication.principal.SamlServiceFactory.createService(SamlServiceFactory.java:28) ~[cas-server-support-saml-5.3.5.jar:5.3.5]\n        at org.apereo.cas.web.support.DefaultArgumentExtractor.lambda$extractServiceInternal$0(DefaultArgumentExtractor.java:46) ~[cas-server-core-web-api-5.3.5.jar:5.3.5]\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_181]\n        at java.util.ArrayList$ArrayListSpliterator.tryAdvance(ArrayList.java:1359) ~[?:1.8.0_181]\n        at java.util.stream.ReferencePipeline.forEachWithCancel(ReferencePipeline.java:126) ~[?:1.8.0_181]\n        at java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:498) ~[?:1.8.0_181]\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:485) ~[?:1.8.0_181]\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_181]\n        at java.util.stream.FindOps$FindOp.evaluateSequential(FindOps.java:152) ~[?:1.8.0_181]\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_181]\n        at java.util.stream.ReferencePipeline.findFirst(ReferencePipeline.java:464) ~[?:1.8.0_181]\n        at org.apereo.cas.web.support.DefaultArgumentExtractor.extractServiceInternal(DefaultArgumentExtractor.java:52) ~[cas-server-core-web-api-5.3.5.jar:5.3.5]\n        at org.apereo.cas.web.support.AbstractArgumentExtractor.extractService(AbstractArgumentExtractor.java:34) ~[cas-server-core-web-api-5.3.5.jar:5.3.5]\n        at org.apereo.cas.services.web.support.RegisteredServiceResponseHeadersEnforcementFilter.getRegisteredServiceFromRequest(RegisteredServiceResponseHeadersEnforcementFilter.java:118) ~[cas-server-core-web-api-5.3.5.jar:5.3.5]\n        at org.apereo.cas.services.web.support.RegisteredServiceResponseHeadersEnforcementFilter.shouldHttpHeaderBeInjectedIntoResponse(RegisteredServiceResponseHeadersEnforcementFilter.java:94) ~[cas-server-core-web-api-5.3.5.jar:5.3.5]\n        at org.apereo.cas.services.web.support.RegisteredServiceResponseHeadersEnforcementFilter.decideInsertCacheControlHeader(RegisteredServiceResponseHeadersEnforcementFilter.java:74) ~[cas-server-core-web-api-5.3.5.jar:5.3.5]\n        at org.apereo.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:225) ~[cas-server-security-filter-2.0.10.2.jar:2.0.10.2]\n        ... 66 more. Here is the ECP SAML Request Body which causes the NPE:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n        <samlp:AuthnRequest xmlns:samlp=\"urn:oasis:names:tc:SAML:2.0:protocol\" AssertionConsumerServiceURL=\"https://powerfolder.gfz-potsdam.de/Shibboleth.sso/SAML2/ECP\" ID=\"_74220e244710fbd166ab26952834e5e3\" IssueInstant=\"2018-11-08T12:00:24Z\" ProtocolBinding=\"urn:oasis:names:tc:SAML:2.0:bindings:PAOS\" Version=\"2.0\">\n            <saml:Issuer xmlns:saml=\"urn:oasis:names:tc:SAML:2.0:assertion\">https://powerfolder.gfz-potsdam.de/shibboleth</saml:Issuer>\n            <samlp:NameIDPolicy AllowCreate=\"1\" />\n            <samlp:Scoping>\n                <samlp:IDPList>\n                    <samlp:IDPEntry ProviderID=\"https://idp-dev.gfz-potsdam.de/cas/idp\" />\n                </samlp:IDPList>\n            </samlp:Scoping>\n        </samlp:AuthnRequest>\n    </S:Body>\n</S:Envelope>\n\nBy looking more closely, it seems the service id could be extracted from the saml:Issuer. Didnt notice that before, as ignoring the service in the first step and extracting it at a later time worked out of the box.. Dont know. Should we?\n. Did not have closer look on ldaptive. Maybe that is already integrated in a higher version, which we dont use yet. I see a PR for ldaptive 1.2. Maybe we should update ldaptive before?\n. Opened issue https://github.com/vt-middleware/ldaptive/issues/111 and created PR. How long should we wait for answer? \n. ",
    "zawn": "It has been modified\n. Although references have changed, but I'm here garbled @mmoayyed ,response not set to UTF-8 encoding\n. @mmoayyed Can you help solve garbled protocol/oauth/confirm page\nthank you\n. \nCurrently OAuth confirm page garbled.\n. @mmoayyed Other pages are good, this is the only page garbled.\n\n. \nOther responses write are UTF-8\n. @mmoayyed https://www.apereo.org/licensing/agreements/icla submitted\n. ok\uff0c\nCurrently I try to use the latest version of the code, JPA Ticket has BUG, submitted later\n. merged\n. Original method can not handle user-defined Token\u3002\nFor example, I have a RandomCode extends OAuthCode\u3002it will return  this.entityManager.find(ServiceTicketImpl.class, ticketId);\uff0c this is not right\u3002\n. Sorry\uff0cthere is no part of the code submitted.\nI think the OAuth TOken  should be seen as a Ticket\n. I defined a new OAuth2 Grant Flow, used to complete the phone sms verification code login.Verification code sent via SMS equivalent OAuthCode, are used to exchange the AccessToken. So I need to define a Token Type\n. The Access Token as a Ticket, you can use an existing CAS Client Verification issued OAuth2 AccessToken,\n. currently CAS OAuth provides no way the server to verify AccessToken(use profile endpoint via OAuth is not a good idea),\nSo i did some changes, reuse cas client to complete the process.\n. \nWhen using the Access Token to access the resources server , of course, resources server need to verify the validity of OAuth2 AccessToken\n. RFC6749 does not define how Resource Server communicates with the Authorization Server ,\nMy business server as a Resource Server , CAS as an authentication server. They complete communication using CAS protocol or SAML protocol provided by the CAS\u3002\nUse of existing CAS can be achieved in the process\uff0c directly to the Access Token as a ST\uff0cno need to make any modifications to protocol\uff0cand java cas client\u3002\n. CAS as an authentication server \uff0cneed to implement the figure of A, B\uff08use OAuth20 protocol\uff09\u3002\nBack to the beginning of the problem\uff0cI implemented a custom of A flow \uff08Authorization Grant Flow\uff09\uff0cSo it is necessary to generate the necessary code \uff08RandomCode\uff09\uff0cand use code exchange an access token\u3002\nI do not know whether you know what I mean\u3002\n. Okay\uff0cthanks\n. /oauth2.0/profile can be used to verify the token, but this is not good.\nOAuth2 protocol does not define how the resource server to communicate with the authentication server,So this process better using existing CAS.\n. Use profile endpoint, we will not verify the identity of Resource Server,Once the resource server caches the token verification result, the authentication server can not notify the resource server after token abandoned. Resource server  In response to the Access Token access, need to use Profile endpoint achieve additional set of authentication logic.\nThese are more than just the CAS been implemented good,So take advantage of existing implementations,R esources Server  only need to extract the Access Token, and as ST pass to cas client can verify.\nSimple, just add a filter, you can support using CAS authentication WEB access, and use OAuth2 authentication API access\n@leleuj \n. It has been said above,use /oauth2.0/profile we can not provide a sound server authentication mechanism.OAuth protocol does not define this process, it should be reused CAS,\nWithout providing a new endpoint existing CAS protocol flow to meet.\n. \nOnly  need AccessToken class extends Service Ticket, without making other changes, the process can be achieved,why use /oauth2.0/profile\nServer resources without concern for what User-Agent protocol (CAS or OAuth) authorized, resource server can use all the  CAS feature to processing OAuth client's request.\n. Thanks\n. \norg.apereo.services.persondir.support;\nwhen user does not configure the property ,casProperties.getAuthn () getAttributeRepository () getAttributes () should return null, can not  return empty\u3002If it is empty then discard\n. Sorry, English is not very good, especially to describe the technical terms\n. The latest code has changed\uff0cclosed\n. Forget to change the reference \n. Sorry, I forgot this endpoint,\nIt has been modified.\n. \nYes, I configured a client through the spring, of course I want to be displayed on the screen.\nEven a little ugly does not matter, at least I know my configuration is correct.\n. \nWithout this conversion, the database field type will be oid\uff0c but we hope that timestamp\n. I also do not think that is null, but it does occur\n. We need ZonedDateTimeConverter work to convert ZonedDateTime to java SQL type\uff0cwe want the database column type is timestamp\uff0cnot oid\u3002\n. add ZonedDateTimeConverter to scan path it will work\n. ",
    "yisiqi": "@mmoayyed I just tried exactly same as what you said. \nBut still NOT works. \n\n. @mmoayyed There is two bean definition for OAuth20AccessTokenController. One's name is 'accessTokenController', another is 'oauth20AccessTokenController'. Actually, the first one is defined by CasOAuthConfiguration and the other one defined by @Controller annotation.  Both of them have the same request mapping.\nHere is the log\uff1a\n2016-07-13 15:40:48,518 ERROR [SpringApplication] - <Application startup failed>\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'requestMappingHandlerMapping' defined in class path resource [org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration$EnableWebMvcConfiguration.class]: Invocation of init method failed; nested exception is java.lang.IllegalStateException: Ambiguous mapping. Cannot map 'accessTokenController' method \nprotected org.springframework.web.servlet.ModelAndView org.apereo.cas.support.oauth.web.OAuth20AccessTokenController.handleRequestInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception\nto {[/oauth2.0/accessToken],methods=[POST]}: There is already 'oauth20AccessTokenController' bean method\nprotected org.springframework.web.servlet.ModelAndView org.apereo.cas.support.oauth.web.OAuth20AccessTokenController.handleRequestInternal(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.lang.Exception mapped.\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1578) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE]\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482) ~[spring-beans-4.3.1.RELEASE.jar:4.3.1.RELEASE]\n. The JpaTicketRegistry always throw this:\njava.lang.IllegalArgumentException: Unknown entity: org.apereo.cas.support.oauth.ticket.code.OAuthCodeImpl\n    at org.hibernate.jpa.spi.AbstractEntityManagerImpl.persist(AbstractEntityManagerImpl.java:1149) ~[hibernate-entitymanager-5.1.0.Final.jar:5.1.0.Final]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_92]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_92]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_92]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_92]\n    at org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:298) ~[spring-orm-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n    at com.sun.proxy.$Proxy171.persist(Unknown Source) ~[?:?]\n    at org.apereo.cas.ticket.registry.JpaTicketRegistry.addTicket(JpaTicketRegistry.java:58) ~[cas-server-support-jpa-ticket-registry-5.0.0.RC1-SNAPSHOT.jar:5.0.0.RC1-SNAPSHOT]\n    at org.apereo.cas.ticket.registry.JpaTicketRegistry$$FastClassBySpringCGLIB$$84ce3a7e.invoke(<generated>) ~[cas-server-support-jpa-ticket-registry-5.0.0.RC1-SNAPSHOT.jar:5.0.0.RC1-SNAPSHOT]\n    at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n    at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720) ~[spring-aop-4.3.2.RELEASE.jar:4.3.2.RELEASE]\n...\nI checked the JpaTicketRegistryConfiguration. The EntityManagerFactory will only scan entities under org.apereo.cas.ticket and org.apereo.cas.adaptors.jdbc.\nI think move org.apereo.cas.support.oauth.ticket to org.apereo.cas.ticket will resolve this.\n. Ok, the build failures fixed.\n. ",
    "wallon-ines": "you're welcome\n. ",
    "cslzchen": "@mmoayyed thanks for the quick comments.\naddCookie() directly creates a new cookie and adds it to the response. The constructor does not take any effects for this cookie. Your mentioning the container check is very helpful and probably we can add it to the addCookie()?\nIn addCookie(), if RememberMe not set, it calls super.addCookie() which does set HttpOnly (if CookieGenerator has it). However, if RememberMe set, it never set HttpOnly no matter what. I guess this part of the code attempts to do what super.addCookie() does. At the time it was written, there is no setHttpOnly() in the CookieGenerator.\n. No, it does not. Here is the reference.\nIn my temporary fix for our own server, we override the createCookie() instead of addCookie(), which is easier. But for a long term fix for CAS, I suggest that we put it in the addCookie(). Need more investigation on whether to remove the check from constructor.\n. Here is what I learned after further investigation. Hope it is helpful :).\nCookieGenerater itself is just a helper class (not the cookie class itself). Most fields in this class are just flags. We need to create a real cookie and explicitly set those flags to the cookie based on these fields. For example:\nsuper.setCookieHttpOnly(true); only sets the flag,\ncookie.setHttpOnly(true); does the job.\nThe container check need to be removed from the constructor and be placed at wherever we set HttpOnly on the real cookie. super.setCookieHttpOnly(true); is also removed since this should come from the config xml (or params in constructor).\nif (isCookieHttpOnly()) {\n    final Method setHttpOnlyMethod = ReflectionUtils.findMethod(Cookie.class, \"setHttpOnly\", boolean.class);\n    if(setHttpOnlyMethod != null) {\n        cookie.setHttpOnly(true);\n    } else {\n        logger.debug(\"Cookie cannot be marked as HttpOnly; container is not using servlet 3.0.\");\n    }\n}\n. Sure.\n. Ready for review.\n. Sure, I can do both. I will let you know if I run into any issues.\n. @[Updated] From TGC to CASPRIVACY:\nCASPRIVACY does not have HttpOnly issue by default since remember me is not enabled. Before the fix, HttpOnly is always true (super.setCookieHttpOnly(true);), but it will depend on the configuration when the fix is in place (default is false). Need to explicitly set cookieHttpOnly to true in warnCookieGenerator.xml\n. In 4.2.x, TGCCookieRetrievingCookieGenerator is added with spring feature @autowired. I decide not to add overriding setter setCookieHttpOnly() since CookieGenerator may not have it. Still need to use bean xml configuration.\n. [Updated] SincewarnCookieGenerator.xml is removed and  WarnCookieRetrievingCookieGenerator is added. I guess it is now the users' job to create the xml configuration for CASPRIVACY similar to TGC.\n. Just realize you have merged the master fix as well. But it didn't passed the travis test. I had a WorkInProgress tag :). Although the change is similar to 4.2.x, I am not sure why it failed the test.\n. Current JSESSIONID is not protected by HttpOnly.\nBefore:\n\nAfter:\n\n. Sure.\n. :)\n. Closed for tests.\n. Many tests have failed. I will reopen this as soon as I have fix them. Don't want unfinished PR lingering around. :)\n. ",
    "CLAassistant": " All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.0 out of 2 committers have signed the CLA.:x: \ufffd\ufffd\ufffd\u658c:x: \u5f20\u658c\ufffd\ufffd\ufffd\u658c, \u5f20\u658c seem not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.major sapp seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.J\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.J\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.J\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.J\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.3 out of 5 committers have signed the CLA.:white_check_mark: PetrGasparik:white_check_mark: mmoayyed:white_check_mark: leleuj:x: vhungad:x: NicolasMarcottevhungad seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.J\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.J\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 3 committers have signed the CLA.:white_check_mark: mmoayyed:x: David Rodriguez:x: Christoph BeisingDavid Rodriguez, Christoph Beising seem not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.\n.  All committers have signed the CLA.\n.  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Robert Ohajda seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Robert Ohajda seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.\n.  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: DavidRG13:x: David RodriguezDavid Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: DavidRG13:x: David RodriguezDavid Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: DavidRG13:x: David RodriguezDavid Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.kavithaZiontech seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: DavidRG13:x: David RodriguezDavid Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: DavidRG13:x: David RodriguezDavid Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.David Rodriguez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Matthew Samuels seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.2 out of 5 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: leleuj:x: J\u00e9r\u00f4me LELEU:x: philippberger:x: RaphCJ\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.5 out of 6 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: dima767:white_check_mark: mindblender:white_check_mark: charlesheidemann:white_check_mark: atticus88:x: zawnYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Adria Febrer seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.3 out of 9 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: leleuj:white_check_mark: jtgasper3:x: serac:x: battags:x: Eric Domazlicky:x: fjollberg:x: laszlovandenhoek:x: J\u00e9r\u00f4me LELEUEric Domazlicky, J\u00e9r\u00f4me LELEU seem not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.4 out of 5 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: dima767:white_check_mark: mindblender:white_check_mark: jtgasper3:x: JjJj seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.root seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.4 out of 9 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: jkacer:white_check_mark: pdrados:white_check_mark: lsenecaux:x: leebake:x: lidonghe:x: PavlikPolivka:x: klewczuk:x: jhitt25You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Pavlos Drandakis seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: tsschmidtYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Lewis.Henderson seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Oliver Hinckel seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Marcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.0 out of 2 committers have signed the CLA.:x: Marcus Watkins:x: marwatkMarcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 3 committers have signed the CLA.:white_check_mark: mmoayyed:x: Marcus Watkins:x: marwatkMarcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: rrenomeronYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 3 committers have signed the CLA.:white_check_mark: mmoayyed:x: Marcus Watkins:x: marwatkMarcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: marwatk:x: Marcus WatkinsMarcus Watkins seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mindblender:x: tsschmidtYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Nalawade, Devendra | Deven | ESD seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: code-4-fun:x: Nalawade, Devendra | Deven | ESDNalawade, Devendra | Deven | ESD seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: gledsonrabeloYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.4 out of 5 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: dacurry-tns:white_check_mark: hdeadman:white_check_mark: pdrados:x: kawhiiYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.4 out of 5 committers have signed the CLA.:white_check_mark: dacurry-tns:white_check_mark: mmoayyed:white_check_mark: hdeadman:white_check_mark: pdrados:x: kawhiiYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.6 out of 8 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: dacurry-tns:white_check_mark: hdeadman:white_check_mark: pdrados:white_check_mark: leleuj:white_check_mark: arbner:x: kawhii:x: tsschmidtYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.3 out of 5 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: rkorn86:white_check_mark: mindblender:x: J\u00e9r\u00f4me LELEU:x: leleujJ\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.7 out of 12 committers have signed the CLA.:white_check_mark: hdeadman:white_check_mark: dacurry-tns:white_check_mark: mmoayyed:white_check_mark: pdrados:white_check_mark: tsschmidt:white_check_mark: cifren:white_check_mark: arbner:x: kawhii:x: leleuj:x: deel77:x: marqc:x: johnlisterYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.leleuj seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.2 out of 5 committers have signed the CLA.:white_check_mark: RaphC:white_check_mark: mmoayyed:x: leleuj:x: J\u00e9r\u00f4me LELEU:x: philippbergerJ\u00e9r\u00f4me LELEU seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.7 out of 8 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: sbearcsiro:white_check_mark: fmartelli:white_check_mark: auxepaul:white_check_mark: tsschmidt:white_check_mark: williame-uah:white_check_mark: swlyons:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.10 out of 12 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: tsschmidt:white_check_mark: fmartelli:white_check_mark: auxepaul:white_check_mark: sbearcsiro:white_check_mark: williame-uah:white_check_mark: frett:white_check_mark: swlyons:white_check_mark: uprego:white_check_mark: fcrespel:x: leleuj:x: devefxYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Alin Tomoiaga seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: code4china:x: lidongyaolidongyao seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: Jason WangJason Wang seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.2 out of 3 committers have signed the CLA.:white_check_mark: ilgrosso:white_check_mark: mmoayyed:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: viswatejan:x: Viswa Teja NariboinaViswa Teja Nariboina seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: viswatejan:x: Viswa Teja NariboinaViswa Teja Nariboina seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.2 out of 3 committers have signed the CLA.:white_check_mark: eisverticker:white_check_mark: mmoayyed:x: Alexander NoackAlexander Noack seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Anthony Lofton seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Anthony Lofton seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 3 committers have signed the CLA.:white_check_mark: mmoayyed:x: Anthony Lofton:x: miller79Anthony Lofton seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.0 out of 2 committers have signed the CLA.:x: Anthony Lofton:x: miller79Anthony Lofton seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.0 out of 2 committers have signed the CLA.:x: Anthony Lofton:x: miller79Anthony Lofton seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: MartinBoehmerYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.16 out of 18 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: sbearcsiro:white_check_mark: tsschmidt:white_check_mark: pdrados:white_check_mark: viswatejan:white_check_mark: NgSekLong:white_check_mark: gregamu:white_check_mark: gagarski:white_check_mark: jtgasper3:white_check_mark: swlyons:white_check_mark: oxcafedead:white_check_mark: jgraglia:white_check_mark: ruckc:white_check_mark: mindcrime:white_check_mark: deejamin:white_check_mark: Golestandt:x: miller79:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.6 out of 7 committers have signed the CLA.:white_check_mark: catherinesnow:white_check_mark: tsschmidt:white_check_mark: mmoayyed:white_check_mark: hdeadman:white_check_mark: mindblender:white_check_mark: frett:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Sivakumar P Kandasamy seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.9 out of 11 committers have signed the CLA.:white_check_mark: catherinesnow:white_check_mark: tsschmidt:white_check_mark: hdeadman:white_check_mark: mmoayyed:white_check_mark: davidgelhar:white_check_mark: arbner:white_check_mark: mindblender:white_check_mark: frett:white_check_mark: junagrole:x: leleuj:x: MartinBoehmerYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.f0lk seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: apereocas-botYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: MartinBoehmerYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.7 out of 8 committers have signed the CLA.:white_check_mark: mmoayyed:white_check_mark: NgSekLong:white_check_mark: auxepaul:white_check_mark: jacalata:white_check_mark: gagarski:white_check_mark: hdeadman:white_check_mark: tduehr:x: leleujYou have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.1 out of 2 committers have signed the CLA.:white_check_mark: mmoayyed:x: marcinromanYou have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Juan David s\u00e1nchez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.Juan David s\u00e1nchez seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please add the email address used for this commit to your account.You have signed the CLA already but the status is still pending? Let us recheck it..  All committers have signed the CLA..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our Contributor License Agreement before we can accept your contribution.You have signed the CLA already but the status is still pending? Let us recheck it..  Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our Contributor License Agreement before we can accept your contribution.6 out of 7 committers have signed the CLA.:white_check_mark: pawwal:white_check_mark: tsschmidt:white_check_mark: jgribonvald:white_check_mark: mmoayyed:white_check_mark: MartinBoehmer:white_check_mark: juancho85:x: Maven85You have signed the CLA already but the status is still pending? Let us recheck it.. ",
    "ghost": "No, I have not signed the ICLA, this the first pull request I sent\nOn Fri, Jun 3, 2016 at 8:24 AM Misagh Moayyed notifications@github.com\nwrote:\n\nCool. You probably should also update the docs.\nAnd have you signed the ICLA? I forget.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/1819#issuecomment-223609596, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/ABdcAKY431lV1kLinV8C7ET3THNONsoxks5qIEcRgaJpZM4Ito3M\n.\n. I am in a fairly new position.  It is unclear if I am able to sign the\nrelease on my own for work done with university resources and time.  We\nhave sent it up the chain and have not heard back yet.  You may want to\ncancel the pull and make the change yourself, since it is quite small.  We\nintend to get the release signed and filed so that we can contribute back\nlarger changes in the future.\n\nSorry for the delay.\nOn Wed, Jun 8, 2016 at 7:51 AM Misagh Moayyed notifications@github.com\nwrote:\n\nStatus check: @tsschmi https://github.com/tsschmi were you able to sign\nthe doc?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/1819#issuecomment-224614338, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe/ABdcALj-UdKCaNM2W55oE-IhRfDEi2Lqks5qJtcEgaJpZM4Ito3M\n.\n. Sorry about that.  Looks like I messed up a  merge on my end or something\nand changed that id for some reason.\n\nMy apologies.\nTravis\nOn Tue, May 16, 2017 at 8:39 AM Misagh Moayyed notifications@github.com\nwrote:\n\nThis patch breaks the CAS configuration, as the correct bean id is in fact\noauth20AuthenticationRequestServiceSelectionStrategy. With the new\nchange, CAS starts to complain about the missing bean id.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2604#issuecomment-301822749, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABdcADvVMnA42-_zV5D6uOcUQJcq2PpTks5r6cMUgaJpZM4NUeZG\n.\n. So is it OidcConfiguration need to change then?\n\n@Autowired\n@Qualifier(\"oauth20AuthenticationServiceSelectionStrategy\")\nprivate AuthenticationServiceSelectionStrategy\noauth20AuthenticationServiceSelectionStrategy;\nOn Tue, May 16, 2017 at 8:47 AM Travis Schmidt travis.schmidt@gmail.com\nwrote:\n\nSorry about that.  Looks like I messed up a  merge on my end or something\nand changed that id for some reason.\nMy apologies.\nTravis\nOn Tue, May 16, 2017 at 8:39 AM Misagh Moayyed notifications@github.com\nwrote:\n\nThis patch breaks the CAS configuration, as the correct bean id is in\nfact oauth20AuthenticationRequestServiceSelectionStrategy. With the new\nchange, CAS starts to complain about the missing bean id.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2604#issuecomment-301822749, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABdcADvVMnA42-_zV5D6uOcUQJcq2PpTks5r6cMUgaJpZM4NUeZG\n.\n\n\n. Never mind that was the error I introduced.  Now I have it straight\n\nOn Tue, May 16, 2017 at 9:02 AM Travis Schmidt travis.schmidt@gmail.com\nwrote:\n\nSo is it OidcConfiguration need to change then?\n@Autowired\n@Qualifier(\"oauth20AuthenticationServiceSelectionStrategy\")\nprivate AuthenticationServiceSelectionStrategy\noauth20AuthenticationServiceSelectionStrategy;\nOn Tue, May 16, 2017 at 8:47 AM Travis Schmidt travis.schmidt@gmail.com\nwrote:\n\nSorry about that.  Looks like I messed up a  merge on my end or something\nand changed that id for some reason.\nMy apologies.\nTravis\nOn Tue, May 16, 2017 at 8:39 AM Misagh Moayyed notifications@github.com\nwrote:\n\nThis patch breaks the CAS configuration, as the correct bean id is in\nfact oauth20AuthenticationRequestServiceSelectionStrategy. With the new\nchange, CAS starts to complain about the missing bean id.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2604#issuecomment-301822749, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABdcADvVMnA42-_zV5D6uOcUQJcq2PpTks5r6cMUgaJpZM4NUeZG\n.\n\n\n. So here is the actual serialization exception:\n\n\ncom.hazelcast.nio.serialization.HazelcastSerializationException:\njava.lang.ClassCastException: cannot assign instance of\norg.springframework.beans.factory.support.StaticListableBeanFactory to fi\neld org.springframework.aop.scope.DefaultScopedObject.beanFactory of type\norg.springframework.beans.factory.config.ConfigurableBeanFactory in\ninstance of org.springframework.aop.scope.DefaultScopedObject\n        at\ncom.hazelcast.internal.serialization.impl.SerializationUtil.handleException(SerializationUtil.java:61)\n~[hazelcast-3.8.1.jar:3.8.1]\n        at\ncom.hazelcast.internal.serialization.impl.AbstractSerializationService.toObject(AbstractSerializationService.java:190)\n~[hazelcast-3.8.1.jar:3.8.1]\n        at\ncom.hazelcast.map.impl.proxy.MapProxySupport.toObject(MapProxySupport.java:1088)\n~[hazelcast-3.8.1.jar:3.8.1]\n        at\ncom.hazelcast.map.impl.proxy.MapProxyImpl.get(MapProxyImpl.java:114)\n~[hazelcast-3.8.1.jar:3.8.1]\n        at\norg.apereo.cas.ticket.registry.HazelcastTicketRegistry.getTicket(HazelcastTicketRegistry.java:137)\n~[cas-server-support-hazelcast-ticket-registry-5.1.0.jar:5.1.0]\nSo if you login to a service from one cluster and the serviceValidate is\nrun on another cluster then this exception appears.  Running on the same\nhosts works fine, so the object is being serialized, but if you try and\nde-serialize or read in on a host that did not create the object then the\nscoped proxy is not the same and this error is hit.\nRemoving @RefreshScope removes this proxy and allows the object to be\nserialized to any host.  There may be a config that allows it to remain\n@RefreshScope, but I was not able to find a working solution to it.  Others\nsuggested maybe setting the application name and application index to the\nsame values would work, but that was not my experience.\nTravis\nOn Wed, Jun 7, 2017 at 1:41 PM Misagh Moayyed notifications@github.com\nwrote:\n\nhmmm...I see your point. Is this because the policy is proxied and HZ has\nissues with deserializing it? Serialization (goes into the cache) works but\nnot the opposite? Or maybe it never actually goes into the cache to begin\nwith?\nI haven't looked at others, but do other policies need adjusting like this\none?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2661#issuecomment-306918236, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABdcAHz8miFLcWXYbKnkWDVTNqEzGXmqks5sBwrogaJpZM4NzD0U\n.\n. I just changed the config to instantiate the Domain instead of Default.\n \"servicesManager\" is set as an @ConditionalBean, so I was thinking someone\nwould just need to set up a Domain instance first to override the default.\nIs that right?\n. \n",
    "charlesheidemann": "I signed electronically. What more do I need?\n. ",
    "gangyang7": "Was this problem fixed? 5.1.0-RC1 still exhibits the same behavior. Should an issue be created for 5.1.0?. ",
    "codacy-bot": " Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 110\nAdded 50\n\nClones added\n\ncas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/mfa/MultifactorAuthenticationProperties.java  1\ncas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/couchbase/ticketregistry/CouchbaseTicketRegistryProperties.java  1\ncas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/couchbase/ticketregistry/CouchbaseServiceRegistryProperties.java  1\ncas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/radius/RadiusProperties.java  1\ncas-server-support-duo/src/main/java/org/apereo/cas/adaptors/duo/DuoAuthenticationMetaDataPopulator.java  1\ncas-server-support-yubikey/src/main/java/org/apereo/cas/adaptors/yubikey/YubiKeyAuthenticationMetaDataPopulator.java  1\ncas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/web/flow/PrincipalFromRequestUserPrincipalNonInteractiveCredentialsActionTests.java  1\ncas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/web/flow/PrincipalFromRequestRemoteUserNonInteractiveCredentialsActionTests.java  1\n\nClones removed\n\ncas-server-support-saml-idp-core/src/main/java/org/apereo/cas/support/saml/services/SamlRegisteredService.java  -1\ncas-server-support-jdbc/src/test/java/org/apereo/cas/adaptors/jdbc/QueryDatabaseAuthenticationHandlerTests.java  -1\ncas-server-support-jdbc/src/test/java/org/apereo/cas/adaptors/jdbc/QueryAndEncodeDatabaseAuthenticationHandlerTests.java  -1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 1\nAdded 1\n\nClones removed\n\ncas-server-support-radius/src/main/java/org/apereo/cas/adaptors/radius/authentication/handler/support/RadiusAuthenticationHandler.java  -1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 1\n\nClones removed\n\ncas-server-support-radius/src/main/java/org/apereo/cas/adaptors/radius/authentication/handler/support/RadiusAuthenticationHandler.java  -1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 16\nAdded 69\n\nClones added\n\ncas-server-integration-mongo/src/test/java/org/jasig/cas/services/MongoServiceRegistryDaoTests.java  2\ncas-server-integration-mongo/src/test/java/org/jasig/cas/services/MongoServiceRegistryDaoCloudTests.java  1\ncas-server-integration-ignite/src/test/java/org/jasig/cas/ticket/registry/IgniteTicketRegistryTests.java  3\ncas-server-integration-ignite/src/main/java/org/jasig/cas/ticket/registry/IgniteTicketRegistry.java  1\ncas-server-integration-ehcache/src/test/java/org/jasig/cas/ticket/registry/EhCacheTicketRegistryTests.java  1\ncas-server-integration-ehcache/src/main/java/org/jasig/cas/ticket/registry/EhCacheTicketRegistry.java  1\ncas-server-webapp-validation/src/test/java/org/jasig/cas/web/AbstractServiceValidateControllerTests.java  5\ncas-server-support-ldap-service-registry/src/test/java/org/jasig/cas/adaptors/ldap/services/LdapServiceRegistryDaoTests.java  1\ncas-server-support-jpa-service-registry/src/test/java/org/jasig/cas/services/JpaServiceRegistryDaoImplTests.java  1\ncas-server-support-couchbase-service-registry/src/test/java/org/jasig/cas/services/CouchbaseServiceRegistryDaoTests.java  1\ncas-management-webapp-support/src/test/java/org/jasig/cas/services/web/RegisteredServiceSimpleFormControllerTests.java  2\n\nClones removed\n\ncas-server-core/src/main/java/org/jasig/cas/AbstractCentralAuthenticationService.java  -1\ncas-server-webapp-validation/src/main/java/org/jasig/cas/web/AbstractServiceValidateController.java  -1\ncas-server-support-trusted/src/test/java/org/jasig/cas/adaptors/trusted/web/flow/PrincipalFromRequestUserPrincipalNonInteractiveCredentialsActionTests.java  -1\ncas-server-support-trusted/src/test/java/org/jasig/cas/adaptors/trusted/web/flow/PrincipalFromRequestRemoteUserNonInteractiveCredentialsActionTests.java  -1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 3\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nClones added\n\ncas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/RadiusAuthenticationMetaDataPopulator.java  1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nClones added\n\ncas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/RadiusAuthenticationMetaDataPopulator.java  1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 4\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 139\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 20\nAdded 24\n\nClones added\n\ncas-server-core-util/src/main/java/org/jasig/cas/util/BinaryCipherExecutor.java  1\n\nClones removed\n\ncas-server-webapp-throttle/src/main/java/org/jasig/cas/web/support/AbstractInMemoryThrottledSubmissionHandlerInterceptorAdapter.java  -1\ncas-server-support-jpa-ticket-registry/src/main/java/org/jasig/cas/ticket/registry/JpaTicketRegistry.java  -1\ncas-server-integration-mongo/src/test/java/org/jasig/cas/services/MongoServiceRegistryDaoTests.java  -1\ncas-server-core-tickets/src/main/java/org/jasig/cas/ticket/registry/DefaultTicketRegistry.java  -2\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 9\n\nClones added\n\ncas-server-support-redis-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/RedisTicketRegistryTests.java  7\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 26\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 2\nAdded 1\n\nClones removed\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/refreshtoken/OAuthRefreshTokenExpirationPolicy.java  -1\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/support/HardTimeoutExpirationPolicy.java  -1\n\n```\nSee the complete overview on Codacy\n. \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        .  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 3\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 5\n\n```\nSee the complete overview on Codacy\n.  Here is an overview of what got changed by this pull request:\n``` diff\nIssues\n\nSolved 1\n\n```\nSee the complete overview on Codacy\n. \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 6\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 6\n\nClones removed\n\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/FrontChannelLogoutActionTests.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 2\n\nClones added\n\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/web/flow/AuthyAuthenticationWebflowEventResolver.java  1\nsupport/cas-server-support-gauth/src/main/java/org/apereo/cas/adaptors/gauth/web/flow/GoogleAuthenticatorAuthenticationWebflowEventResolver.java  1\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusAuthenticationWebflowEventResolver.java  1\nsupport/cas-server-support-yubikey/src/main/java/org/apereo/cas/adaptors/yubikey/web/flow/YubiKeyAuthenticationWebflowEventResolver.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 14\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 3\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\nClones added\n\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/RadiusAuthenticationMetaDataPopulator.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 6\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 36\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones added\n\nsupport/cas-server-support-jdbc/src/test/java/org/apereo/cas/adaptors/jdbc/QueryAndEncodeDatabaseAuthenticationHandlerTests.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones removed\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones removed\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones added\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/radius/RadiusProperties.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 3\nAdded 1\n\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-authentication/src/main/java/org/apereo/cas/integration/pac4j/authentication/handler/support/AbstractWrapperAuthenticationHandler.java  1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/handler/support/HttpBasedServiceCredentialsAuthenticationHandler.java  1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/handler/support/AbstractPreAndPostProcessingAuthenticationHandler.java  1\n\nComplexity decreasing per file\n\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/AbstractAuthenticationHandler.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/AbstractAuthenticationHandler.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 3\n\nComplexity decreasing per file\n\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/handler/support/HttpBasedServiceCredentialsAuthenticationHandler.java  -1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/AbstractAuthenticationHandler.java  -2\n\nClones removed\n\nsupport/cas-server-support-jdbc/src/main/java/org/apereo/cas/adaptors/jdbc/config/CasJdbcAuthenticationConfiguration.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 71\nAdded 1\n\nClones removed\n\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/AbstractResourceBasedServiceRegistryDaoTests.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 43\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 34\n\nComplexity decreasing per file\n\nsupport/cas-server-support-gua/src/main/java/org/apereo/cas/web/flow/AcceptUserGraphicsForAuthenticationAction.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 31\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core/src/test/java/org/apereo/cas/CentralAuthenticationServiceImplTests.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-x509/src/main/java/org/apereo/cas/adaptors/x509/config/X509AuthenticationConfiguration.java  3\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/x509/X509Properties.java  4\nsupport/cas-server-support-x509/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SerialNumberPrincipalResolver.java  4\nsupport/cas-server-support-x509/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SerialNumberPrincipalResolverTests.java  3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/web/flow/SamlIdPMetadataUIAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/CasConfigurationJasyptDecryptor.java  3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/Saml10ObjectBuilder.java  3\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/AbstractSaml20ObjectBuilder.java  1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/AbstractSamlObjectBuilder.java  -5\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones removed\n\nwebapp-mgmt/cas-management-webapp/src/main/resources/static/js/app/app-angular.js  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nwebapp/cas-server-webapp-tomcat/src/main/java/org/apereo/cas/config/CasEmbeddedContainerTomcatConfiguration.java  2\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/core/CasServerProperties.java  12\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  2\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/jpa/AbstractJpaProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones added\n\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasValidationConfiguration.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 7\n\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/core/web/MessageBundleProperties.java  2\ncore/cas-server-core-web/src/main/java/org/apereo/cas/config/CasCoreWebConfiguration.java  2\n\nComplexity decreasing per file\n\nwebapp/resources/static/js/cas.js  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 109\nAdded 137\n\nComplexity decreasing per file\n\nwebapp/resources/static/js/consent.js  -1\nwebapp/resources/static/js/statisticsview.js  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/Beans.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/core/authentication/AuthenticationProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 13\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-dynamodb-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/DynamoDbTicketRegistryTests.java  2\nsupport/cas-server-support-mongo-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/MongoDbTicketRegistryTests.java  2\nsupport/cas-server-support-redis-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/RedisTicketRegistryTests.java  2\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/registry/DefaultTicketRegistryTests.java  2\nsupport/cas-server-support-infinispan-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/InfinispanTicketRegistryTests.java  2\nsupport/cas-server-support-ehcache-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/EhCacheTicketRegistryTests.java  2\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/registry/AbstractTicketRegistryTests.java  6\nsupport/cas-server-support-memcached-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/MemCacheTicketRegistryTests.java  1\nsupport/cas-server-support-hazelcast-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/HazelcastTicketRegistryTests.java  2\nsupport/cas-server-support-ignite-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/IgniteTicketRegistryTests.java  2\n\nComplexity decreasing per file\n\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/registry/AbstractTicketRegistry.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-throttle-jdbc/src/main/java/org/apereo/cas/web/support/InspektrThrottledSubmissionByIpAddressAndUsernameHandlerInterceptorAdapter.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao.java  4\n\nComplexity decreasing per file\n\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/ServiceRegistryConfigWatcher.java  -8\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j/src/main/java/org/apereo/cas/support/pac4j/config/support/authentication/Pac4jAuthenticationEventExecutionPlanConfiguration.java  1\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/pac4j/Pac4jProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 20\nAdded 12\n\nComplexity decreasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/util/OAuth20Utils.java  -2\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/profile/OidcProfileScopeToAttributesFilter.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/util/OidcAuthorizationRequestSupport.java  -1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/principal/resolvers/ChainingPrincipalResolver.java  -4\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/ConfigurationStateController.java  -1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/services/AbstractRegisteredServiceAttributeReleasePolicy.java  -1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/web/idp/profile/AbstractSamlProfileHandlerController.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authentication/support/DefaultAccountStateHandler.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-audit-jdbc/src/main/java/org/apereo/cas/audit/config/CasSupportJdbcAuditConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 5\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenAuthorizationCodeGrantRequestExtractor.java  1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenRequestDataHolder.java  2\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenRefreshTokenGrantRequestExtractor.java  1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AccessTokenControllerTests.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-token-authentication/src/main/java/org/apereo/cas/token/authentication/TokenAuthenticationHandler.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-mongo-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/MongoDbTicketRegistry.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/jpa/AbstractJpaProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenPasswordGrantRequestExtractor.java  1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenRequestDataHolder.java  1\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/AbstractMetadataResolverAdapter.java  1\nsupport/cas-server-support-audit-jdbc/src/main/java/org/apereo/cas/audit/config/CasSupportJdbcAuditConfiguration.java  1\nsupport/cas-server-support-throttle-jdbc/src/main/java/org/apereo/cas/web/support/InspektrThrottledSubmissionByIpAddressAndUsernameHandlerInterceptorAdapter.java  1\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/jpa/AbstractJpaProperties.java  2\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authentication/support/DefaultAccountStateHandler.java  1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/SamlMetadataUIInfo.java  22\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 5\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/registry/DefaultTicketRegistryCleaner.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\nsupport/cas-server-support-mongo-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/MongoDbTicketRegistry.java  -2\nsupport/cas-server-support-hazelcast-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/HazelcastTicketRegistry.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp/src/main/resources/static/js/app/app-angular.js  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/IgniteTicketRegistry.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/pac4j/Pac4jProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 54\n\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/config/CasManagementWebAppConfiguration.java  2\n\nComplexity decreasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/RegisteredServiceSimpleFormController.java  -1\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/ManageRegisteredServicesMultiActionController.java  -4\n\nClones removed\n\nwebapp-mgmt/cas-management-webapp-support/src/test/java/org/apereo/cas/services/web/RegisteredServiceSimpleFormControllerTests.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/cipher/BaseBinaryCipherExecutor.java  4\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/EncodingUtils.java  4\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/BinaryCipherExecutorTests.java  1\n\nComplexity decreasing per file\n\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/gen/DefaultRandomStringGenerator.java  -4\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/DefaultRandomStringGeneratorTests.java  -1\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/SamlCompliantUniqueTicketIdGenerator.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 3\n\nComplexity increasing per file\n\nsupport/cas-server-support-rest/src/test/java/org/apereo/cas/support/rest/TicketsResourceTests.java  3\nsupport/cas-server-support-rest/src/main/java/org/apereo/cas/support/rest/TicketsResource.java  4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/RegisteredServiceThemeBasedViewResolver.java  8\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j/src/main/java/org/apereo/cas/support/pac4j/config/support/authentication/Pac4jAuthenticationEventExecutionPlanConfiguration.java  16\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/pac4j/Pac4jProperties.java  32\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/principal/ShibbolethCompatiblePersistentIdGeneratorTests.java  1\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/DigestUtils.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/ignite/IgniteProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/authentication/handler/support/JcifsSpnegoAuthenticationHandler.java  1\nsupport/cas-server-support-spnego/src/test/java/org/apereo/cas/support/spnego/authentication/handler/support/JcifsSpnegoAuthenticationHandlerTests.java  2\n\nComplexity decreasing per file\n\nsupport/cas-server-support-spnego/src/test/java/org/apereo/cas/support/spnego/MockJcifsAuthentication.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/saml/SamlCore.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/saml/SamlCoreProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow/SAML2ClientLogoutAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow/SAML2ClientLogoutAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/beans/RegisteredServiceSamlTypeEditBean.java  6\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-authentication-attributes/src/main/java/org/apereo/cas/services/AbstractRegisteredServiceAttributeReleasePolicy.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/config/CasThemesConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/consent/ConsentProperties.java  12\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java  1\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/ldap/LdapAuthenticationProperties.java  2\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java  1\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/ldap/LdapAuthenticationProperties.java  2\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java  2\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/ldap/LdapAuthenticationProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/SamlMetadataUIInfo.java  4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 60\nAdded 53\n\nComplexity increasing per file\n\ncas-server-core-tickets/src/main/java/org/jasig/cas/ticket/registry/encrypt/EncodedTicket.java  1\ncas-server-webapp-throttle/src/main/java/org/jasig/cas/web/support/AbstractThrottledSubmissionHandlerInterceptorAdapter.java  1\ncas-server-webapp-throttle/src/main/java/org/jasig/cas/web/support/AbstractInMemoryThrottledSubmissionHandlerInterceptorAdapter.java  1\ncas-server-webapp-themes/src/main/java/org/jasig/cas/services/web/RegisteredServiceThemeBasedViewResolver.java  2\ncas-server-webapp-cookie/src/main/java/org/jasig/cas/web/support/TGCCookieRetrievingCookieGenerator.java  1\ncas-server-webapp-actions/src/main/java/org/jasig/cas/web/flow/InitialFlowSetupAction.java  2\ncas-server-webapp-actions/src/main/java/org/jasig/cas/web/flow/CasDefaultFlowUrlHandler.java  9\ncas-server-support-saml/src/main/java/org/jasig/cas/support/saml/web/view/AbstractSaml10ResponseView.java  2\ncas-server-support-saml-mdui/src/main/java/org/jasig/cas/support/saml/web/flow/mdui/SamlMetadataUIParserAction.java  1\ncas-server-support-jdbc/src/main/java/org/jasig/cas/adaptors/jdbc/QueryAndEncodeDatabaseAuthenticationHandler.java  1\ncas-server-integration-pac4j/src/main/java/org/jasig/cas/integration/pac4j/authentication/handler/support/UsernamePasswordWrapperAuthenticationHandler.java  1\ncas-server-integration-pac4j-core/src/main/java/org/jasig/cas/authentication/principal/ClientCredential.java  3\ncas-server-extension-clearpass/src/main/java/org/jasig/cas/extension/clearpass/ClearPassController.java  5\ncas-server-core/src/test/java/org/jasig/cas/CentralAuthenticationServiceImplTests.java  1\ncas-server-core/src/test/java/org/jasig/cas/AbstractCentralAuthenticationServiceTests.java  1\ncas-server-core/src/main/java/org/jasig/cas/CasVersion.java  1\ncas-server-core-util/src/main/java/org/jasig/cas/util/http/SimpleHttpClientFactoryBean.java  2\ncas-server-core-tickets/src/main/java/org/jasig/cas/util/HostNameBasedUniqueTicketIdGenerator.java  5\ncas-server-core-tickets/src/main/java/org/jasig/cas/ticket/support/RememberMeDelegatingExpirationPolicy.java  3\ncas-server-core-tickets/src/main/java/org/jasig/cas/ticket/registry/AbstractTicketDelegator.java  1\ncas-server-core-tickets/src/main/java/org/jasig/cas/ticket/AbstractTicket.java  1\ncas-server-core-services/src/test/java/org/jasig/cas/services/DefaultRegisteredServiceAccessStrategyTests.java  2\ncas-server-core-services/src/main/java/org/jasig/cas/services/JsonServiceRegistryConfigWatcher.java  1\ncas-server-core-services/src/main/java/org/jasig/cas/services/DefaultRegisteredServiceAccessStrategy.java  3\ncas-server-core-logging/src/main/java/org/slf4j/impl/CasLoggerFactory.java  5\n\nComplexity decreasing per file\n\ncas-server-support-ldap-service-registry/src/main/java/org/jasig/cas/adaptors/ldap/services/LdapServiceRegistryDao.java  -11\ncas-server-support-ldap-service-registry/src/main/java/org/jasig/cas/adaptors/ldap/services/DefaultLdapRegisteredServiceMapper.java  -2\ncas-server-integration-ignite/src/main/java/org/jasig/cas/ticket/registry/IgniteTicketRegistry.java  -3\ncas-server-core-tickets/src/main/java/org/jasig/cas/util/DefaultUniqueTicketIdGenerator.java  -8\ncas-management-webapp-support/src/main/java/org/jasig/cas/services/web/factory/DefaultProxyPolicyMapper.java  -2\n\nClones added\n\ncas-server-support-rest/src/test/java/org/jasig/cas/support/rest/TicketsResourceTests.java  1\ncas-server-integration-ehcache/src/test/java/org/jasig/cas/ticket/registry/EhCacheTicketRegistryTests.java  1\ncas-server-core-tickets/src/test/java/org/jasig/cas/ticket/registry/DistributedTicketRegistryTests.java  1\n\nClones removed\n\ncas-server-webapp-throttle/src/main/java/org/jasig/cas/web/support/AbstractInMemoryThrottledSubmissionHandlerInterceptorAdapter.java  -1\ncas-server-support-jpa-ticket-registry/src/main/java/org/jasig/cas/ticket/registry/JpaTicketRegistry.java  -1\ncas-server-integration-mongo/src/test/java/org/jasig/cas/services/MongoServiceRegistryDaoTests.java  -1\ncas-server-core-tickets/src/main/java/org/jasig/cas/ticket/registry/DefaultTicketRegistry.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\nsupport/cas-server-support-consent-webflow/src/main/java/org/apereo/cas/web/flow/AbstractConsentAction.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/SamlMetadataUIInfo.java  4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/RegexRegisteredServiceTests.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 789\n\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/factory/DefaultRegisteredServiceFactory.java  6\n\nComplexity decreasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/RegisteredServiceSimpleFormController.java  -1\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/ManageRegisteredServicesMultiActionController.java  -4\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/config/CasManagementWebAppConfiguration.java  -5\nwebapp-mgmt/cas-management-webapp-support/src/test/java/org/apereo/cas/services/web/RegisteredServiceSimpleFormControllerTests.java  -6\nwebapp-mgmt/cas-management-webapp-support/src/test/java/org/apereo/cas/services/web/ManageRegisteredServicesMultiActionControllerTests.java  -3\n\nClones removed\n\nwebapp-mgmt/cas-management-webapp-support/src/test/java/org/apereo/cas/services/web/RegisteredServiceSimpleFormControllerTests.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/resolver/impl/RankedAuthenticationProviderWebflowEventResolver.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\nComplexity increasing per file\n\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/credentials/OneTimeTokenAccount.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity increasing per file\n\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/credentials/OneTimeTokenAccount.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 5\nAdded 69\n\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/ManageRegisteredServicesMultiActionController.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 10\nAdded 14\n\nComplexity increasing per file\n\ncore/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/DomainServicesManager.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-memcached-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/support/kryo/KryoTranscoderTests.java  5\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/actions/PasswordChangeAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/actions/PasswordChangeAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\nComplexity increasing per file\n\nsupport/cas-server-support-mongo/src/main/java/org/apereo/cas/authentication/MongoAuthenticationHandler.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\nComplexity increasing per file\n\nsupport/cas-server-support-mongo/src/main/java/org/apereo/cas/authentication/MongoAuthenticationHandler.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/ServiceRegistryInitializer.java  1\ncore/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServiceRegistryDao.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/ServiceRegistryInitializer.java  1\ncore/cas-server-core-services-registry/src/main/java/org/apereo/cas/services/AbstractServiceRegistryDao.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/AbstractServiceRegistryDao.java  1\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/ServiceRegistryInitializer.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/AbstractServiceRegistryDao.java  1\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/ServiceRegistryInitializer.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java  11\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java  11\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/config/CasCoreAuditConfiguration.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/config/CasCoreAuditConfiguration.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/CasConfigurationProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-redis-core/src/main/java/org/apereo/cas/redis/core/RedisObjectFactory.java  6\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/redis/BaseRedisProperties.java  6\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 6\n\nComplexity increasing per file\n\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/web/idp/profile/builders/enc/BaseSamlObjectSigner.java  5\nsupport/cas-server-support-saml-idp-core/src/main/java/org/apereo/cas/support/saml/services/SamlRegisteredService.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity increasing per file\n\nsupport/cas-server-support-rest-authentication/src/main/java/org/apereo/cas/adaptors/rest/RestAuthenticationHandler.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 19\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 37\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasValidationConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 26\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/oauth/OAuthProperties.java  2\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java  4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/oauth/OAuthProperties.java  2\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java  4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-jpa-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/JpaTicketRegistry.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 34\nAdded 39\n\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/ManageRegisteredServicesMultiActionController.java  1\n\nComplexity decreasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/config/CasManagementWebAppConfiguration.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow/DelegatedClientAuthenticationAction.java  3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/actions/SendPasswordResetInstructionsAction.java  1\nsupport/cas-server-support-pm-webflow/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementWebflowConfigurer.java  2\ncore/cas-server-core-web/src/main/java/org/apereo/cas/web/support/WebUtils.java  5\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/pm/PasswordManagementProperties.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 161\nAdded 873\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 97\nAdded 38\n\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/beans/FormData.java  24\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-logging/src/main/java/org/apereo/cas/logging/web/ThreadContextMDCServletFilter.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 20\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 12\n\nComplexity increasing per file\n\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/beans/FormData.java  5\nwebapp-mgmt/cas-management-webapp-support/src/main/java/org/apereo/cas/mgmt/services/web/ManageRegisteredServicesMultiActionController.java  9\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/core/authentication/AuthenticationProperties.java  2\ncore/cas-server-core-web/src/main/java/org/apereo/cas/config/CasCoreWebConfiguration.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/handler/support/SimpleTestUsernamePasswordHandlerTests.java  1\n\nComplexity decreasing per file\n\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/handler/support/SimpleTestUsernamePasswordAuthenticationHandler.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 46\nAdded 11\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/resolver/impl/AbstractCasWebflowEventResolver.java  -46\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/web/flow/WsFederationAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\ncore/cas-server-core-web-api/src/main/java/org/apereo/cas/web/SimpleUrlValidatorFactoryBean.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 4\n\nComplexity increasing per file\n\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/cache/resolver/UrlResourceMetadataResolver.java  1\nsupport/cas-server-support-hazelcast-core/src/main/java/org/apereo/cas/hz/HazelcastConfigurationFactory.java  7\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SpringWebflowReportController.java  1\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/ServiceThemeResolver.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/support/JpaLockingStrategyTests.java  -2\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/JpaTicketRegistryTests.java  -1\n\nClones added\n\napi/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/support/JpaBeans.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 4\n\nComplexity increasing per file\n\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/cache/resolver/UrlResourceMetadataResolver.java  1\nsupport/cas-server-support-hazelcast-core/src/main/java/org/apereo/cas/hz/HazelcastConfigurationFactory.java  7\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SpringWebflowReportController.java  1\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/ServiceThemeResolver.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcSecurityInterceptor.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcSecurityInterceptor.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nClones added\n\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/config/IgniteTicketRegistryTicketCatalogConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-jdbc-authentication/src/main/java/org/apereo/cas/adaptors/jdbc/BindModeSearchDatabaseAuthenticationHandler.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\nsupport/cas-server-support-pm/src/main/java/org/apereo/cas/pm/jdbc/JdbcPasswordManagementService.java  -4\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pm-jdbc/src/main/java/org/apereo/cas/pm/jdbc/JdbcPasswordManagementService.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 3\nAdded 19\n\nComplexity increasing per file\n\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/event/SurrogateAuthenticationEventListener.java  1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/cache/resolver/UrlResourceMetadataResolver.java  1\nsupport/cas-server-support-hazelcast-core/src/main/java/org/apereo/cas/hz/HazelcastConfigurationFactory.java  7\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SpringWebflowReportController.java  1\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow/DelegatedClientAuthenticationAction.java  1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/PersonDirectoryAttributeResolutionController.java  1\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/ServiceThemeResolver.java  1\n\nClones added\n\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/config/IgniteTicketRegistryTicketCatalogConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-shell/src/main/java/org/apereo/cas/shell/commands/EncryptPropertyCommand.java  2\n\nComplexity decreasing per file\n\napi/cas-server-core-api-configuration/src/main/java/org/apereo/cas/configuration/support/CasConfigurationJasyptCipherExecutor.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-x509-webflow/src/main/java/org/apereo/cas/web/flow/config/X509AuthenticationWebflowConfiguration.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 757\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 13\n\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow/DelegatedClientAuthenticationAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-discovery-profile/src/main/java/org/apereo/cas/discovery/CasServerProfileRegistrar.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 49\n\nClones removed\n\nwebapp/resources/static/js/cas.js  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\nComplexity increasing per file\n\nsupport/cas-server-support-radius-core/src/main/java/org/apereo/cas/adaptors/radius/JRadiusServerImpl.java  4\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusAuthenticationWebflowEventResolver.java  4\n\nClones removed\n\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusAuthenticationWebflowEventResolver.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/JpaTicketRegistryTests.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 19\nAdded 13\n\nComplexity increasing per file\n\nwebapp/cas-server-webapp-tomcat/src/main/java/org/apereo/cas/config/CasEmbeddedContainerTomcatConfiguration.java  1\ncore/cas-server-core-events-configuration/src/main/java/org/apereo/cas/support/events/listener/CasConfigurationEventListener.java  1\nsupport/cas-server-support-trusted-mfa-mongo/src/main/java/org/apereo/cas/trusted/authentication/storage/MongoDbMultifactorAuthenticationTrustStorage.java  1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-jdbc/src/main/java/org/apereo/cas/adaptors/jdbc/config/CasJdbcAuthenticationConfiguration.java  -1\n\nClones added\n\nsupport/cas-server-support-grouper/src/test/java/org/apereo/cas/grouper/services/GrouperRegisteredServiceAccessStrategyTests.java  1\nsupport/cas-server-support-grouper/src/test/java/org/apereo/cas/grouper/services/GrouperRegisteredServiceAccessStrategyRegistryTests.java  1\n\nClones removed\n\nsupport/cas-server-support-pac4j-webflow/src/test/java/org/apereo/cas/web/flow/DelegatedClientAuthenticationActionTests.java  -2\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AuthorizeControllerTests.java  -3\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20ProfileControllerTests.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 4\n\nClones added\n\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20ProfileControllerTests.java  6\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AccessTokenControllerTests.java  3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-services-authentication/src/main/java/org/apereo/cas/authentication/DefaultMultifactorTriggerSelectionStrategy.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 2\nAdded 6\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 331\nAdded 407\n\nComplexity increasing per file\n\nsupport/cas-server-support-consent-core/src/main/java/org/apereo/cas/config/CasConsentCoreConfiguration.java  2\nsupport/cas-server-support-consent-core/src/main/java/org/apereo/cas/consent/DefaultConsentEngine.java  3\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/SurrogatePrincipalResolver.java  1\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/credentials/BaseOneTimeTokenCredentialRepository.java  1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationPolicyConfiguration.java  1\nsupport/cas-server-support-rest-services/src/main/java/org/apereo/cas/support/rest/config/RestServicesConfiguration.java  2\n\nComplexity decreasing per file\n\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/service/CasRegisteredServicePreDeleteEvent.java  -2\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/profile/OidcRegisteredServicePreProcessorEventListener.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/service/CasRegisteredServiceLoadedEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/service/CasRegisteredServicePreSaveEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/service/CasRegisteredServicesLoadedEvent.java  -1\nsupport/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/SamlAttributeEncoderTests.java  -1\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/mapping/DefaultOidcAttributeToScopeClaimMapper.java  -2\nsupport/cas-server-support-consent-jdbc/src/main/java/org/apereo/cas/config/CasConsentJdbcConfiguration.java  -5\nsupport/cas-server-support-consent-webflow/src/main/java/org/apereo/cas/config/CasConsentWebflowConfiguration.java  -1\nsupport/cas-server-support-consent-webflow/src/main/java/org/apereo/cas/web/flow/ConsentWebflowConfigurer.java  -4\nsupport/cas-server-support-consent-webflow/src/main/java/org/apereo/cas/web/flow/CheckConsentRequiredAction.java  -8\nwebapp/resources/static/js/consent.js  -1\nwebapp/cas-server-webapp-bootadmin-server/src/main/java/org/apereo/cas/CasSpringBootAdminServerWebApplication.java  -1\nsupport/cas-server-support-shibboleth/src/main/java/org/apereo/cas/config/ExternalShibbolethIdPAuthenticationServiceSelectionStrategyConfiguration.java  -1\nsupport/cas-server-support-shibboleth/src/main/java/org/apereo/cas/support/saml/ShibbolethIdPEntityIdAuthenticationServiceSelectionStrategy.java  -2\nwebapp/cas-server-webapp-init/src/main/java/org/apereo/cas/web/CasWebApplicationContext.java  -1\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/config/CasCoreTicketsSchedulingConfiguration.java  -3\ncore/cas-server-core-events-configuration-cloud-bus/src/main/java/org/apereo/cas/support/events/listener/CasCloudBusConfigurationEventListener.java  -1\ncore/cas-server-core-events-configuration/src/main/java/org/apereo/cas/support/events/listener/CasConfigurationEventListener.java  -4\nwebapp/cas-server-webapp-eureka-server/src/main/java/org/apereo/cas/CasEurekaServerWebApplication.java  -1\nsupport/cas-server-support-saml-sp-integrations/src/main/java/org/apereo/cas/config/BaseCasSamlSPConfiguration.java  -2\ncore/cas-server-core-logout/src/test/java/org/apereo/cas/logout/DefaultSingleLogoutServiceLogoutUrlBuilderTests.java  -2\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/AbstractX509CertificateTests.java  -27\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SerialNumberPrincipalResolverTests.java  -5\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/revocation/checker/AbstractCRLRevocationChecker.java  -7\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/ldap/LdaptiveResourceCRLFetcher.java  -15\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/handler/support/CRLDistributionPointRevocationCheckerTests.java  -6\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SubjectPrincipalResolverTests.java  -2\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/ResourceCRLFetcher.java  -5\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509CertificateCredential.java  -4\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/util/X509CertificateCredentialJsonSerializer.java  -2\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SubjectAlternativeNameUPNPrincipalResolverTests.java  -2\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SerialNumberPrincipalResolver.java  -3\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/handler/support/AbstractCRLRevocationCheckerTests.java  -3\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/handler/support/X509CredentialsAuthenticationHandler.java  -24\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/handler/support/ThresholdExpiredCRLRevocationPolicyTests.java  -2\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/handler/support/ResourceCRLRevocationCheckerTests.java  -2\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/revocation/policy/ThresholdExpiredCRLRevocationPolicy.java  -1\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SubjectDNPrincipalResolverTests.java  -2\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/AbstractX509PrincipalResolver.java  -3\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SubjectAlternativeNameUPNPrincipalResolver.java  -12\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SubjectPrincipalResolver.java  -8\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/handler/support/X509CredentialsAuthenticationHandlerTests.java  -6\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/util/MockX509CRL.java  -20\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/ExpiredCRLException.java  -11\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/revocation/checker/ResourceCRLRevocationChecker.java  -19\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/revocation/RevokedCertificateException.java  -12\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SubjectDNPrincipalResolver.java  -1\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/handler/support/AbstractX509LdapTests.java  -3\nsupport/cas-server-support-x509-core/src/test/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SerialNumberAndIssuerDNPrincipalResolverTests.java  -2\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/revocation/checker/CRLDistributionPointRevocationChecker.java  -22\nsupport/cas-server-support-x509-core/src/main/java/org/apereo/cas/adaptors/x509/authentication/principal/X509SerialNumberAndIssuerDNPrincipalResolver.java  -4\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/config/SurrogateAuthenticationMetadataConfiguration.java  -1\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/config/SurrogateAuthenticationConfiguration.java  -11\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/surrogate/JsonResourceSurrogateAuthenticationService.java  -1\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/surrogate/SimpleSurrogateAuthenticationService.java  -2\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/support/RegisteredServiceMappedRegexAttributeFilterTests.java  -6\nsupport/cas-server-support-gauth-mongo/src/main/java/org/apereo/cas/config/GoogleAuthenticatorMongoDbConfiguration.java  -5\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenAuthorizationCodeGrantRequestExtractor.java  -7\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenPasswordGrantRequestExtractor.java  -2\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20CasAuthenticationBuilder.java  -7\ncore/cas-server-core-logout/src/test/java/org/apereo/cas/logout/DefaultLogoutManagerTests.java  -10\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/OAuth20DefaultCasClientRedirectActionBuilder.java  -1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenRequestDataHolder.java  -7\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/util/OAuth20Utils.java  -17\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/OAuth20AccessTokenResponseGenerator.java  -6\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenRefreshTokenGrantRequestExtractor.java  -3\ncore/cas-server-core-configuration-cloud-jdbc/src/main/java/org/apereo/cas/config/JdbcCloudConfigBootstrapConfiguration.java  -7\ncore/cas-server-core-configuration-cloud-dynamodb/src/main/java/org/apereo/cas/config/DynamoDbCloudConfigBootstrapConfiguration.java  -10\nsupport/cas-server-support-saml-googleapps-core/src/main/java/org/apereo/cas/support/saml/authentication/principal/GoogleAccountsServiceFactory.java  -2\nsupport/cas-server-support-saml-googleapps-core/src/main/java/org/apereo/cas/support/saml/util/GoogleSaml20ObjectBuilder.java  -6\nsupport/cas-server-support-saml-googleapps-core/src/main/java/org/apereo/cas/support/saml/authentication/principal/GoogleAccountsServiceResponseBuilder.java  -19\nsupport/cas-server-support-saml-googleapps-core/src/main/java/org/apereo/cas/support/saml/authentication/principal/GoogleAccountsService.java  -8\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/authentication/SecurityTokenServiceAuthenticationMetaDataPopulator.java  -7\ncore/cas-server-core-logging-config/src/main/java/org/apereo/cas/logging/LoggingUtils.java  -1\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/metadata/WSFederationMetadataWriter.java  -3\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/util/CryptoUtils.java  -2\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/web/flow/WSFederationMetadataUIAction.java  -1\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/config/CoreWsSecuritySecurityTokenServiceConfiguration.java  -20\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/authentication/SecurityTokenServiceClientBuilder.java  -5\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/web/flow/WSFederationWebflowConfigurer.java  -1\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/config/CoreWsSecurityIdentityProviderConfiguration.java  -7\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/web/WSFederationValidateRequestController.java  -5\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/realm/RealmPasswordVerificationCallbackHandler.java  -1\nsupport/cas-server-support-ws-idp-api/src/main/java/org/apereo/cas/ws/idp/services/WSFederationClaimsReleasePolicy.java  -4\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/web/WSFederationValidateRequestCallbackController.java  -9\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/ticket/DefaultSecurityTokenTicketFactory.java  -2\nsupport/cas-server-support-dynamodb-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/DynamoDbTicketRegistry.java  -5\nsupport/cas-server-support-dynamodb-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/DynamoDbTicketRegistryFacilitator.java  -10\nsupport/cas-server-support-dynamodb-ticket-registry/src/main/java/org/apereo/cas/config/DynamoDbTicketRegistryTicketCatalogConfiguration.java  -3\nsupport/cas-server-support-dynamodb-ticket-registry/src/main/java/org/apereo/cas/config/DynamoDbTicketRegistryConfiguration.java  -13\ncore/cas-server-core-logging-config/src/main/java/org/apereo/cas/logging/CasAppender.java  -2\nwebapp/cas-server-webapp-config-server/src/main/java/org/apereo/cas/CasConfigurationServerWebApplication.java  -1\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/config/CasCoreBootstrapStandaloneConfiguration.java  -25\nsupport/cas-server-support-oidc-services/src/test/java/org/apereo/cas/services/OidcRegisteredServiceTests.java  -3\nsupport/cas-server-support-oidc-services/src/main/java/org/apereo/cas/services/OidcRegisteredService.java  -30\nsupport/cas-server-support-oauth-services/src/main/java/org/apereo/cas/support/oauth/services/OAuthRegisteredService.java  -22\nsupport/cas-server-support-oauth-services/src/test/java/org/apereo/cas/support/oauth/services/OAuthRegisteredServiceTests.java  -4\nsupport/cas-server-support-jpa-ticket-registry/src/main/java/org/apereo/cas/config/JpaTicketRegistryTicketCatalogConfiguration.java  -1\nsupport/cas-server-support-oauth-core/src/main/java/org/apereo/cas/config/OAuthProtocolTicketCatalogConfiguration.java  -3\nsupport/cas-server-support-hazelcast-ticket-registry/src/main/java/org/apereo/cas/config/HazelcastTicketRegistryTicketCatalogConfiguration.java  -5\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/config/CasCoreTicketCatalogConfiguration.java  -4\nwebapp/resources/static/js/statisticsview.js  -11\nwebapp/resources/static/js/duo/Duo-Web-v2.min.js  -33\nwebapp/cas-server-webapp-tomcat/src/main/java/org/apereo/cas/config/CasEmbeddedContainerTomcatConfiguration.java  -23\nwebapp/resources/static/js/cas.js  -16\nwebapp/resources/static/js/viewConfig.js  -2\nwebapp/resources/static/js/attrresolution.js  -2\nwebapp/resources/static/js/loggingDashboard.js  -16\nwebapp/cas-server-webapp-init/src/main/java/org/apereo/cas/CasEmbeddedContainerUtils.java  -2\nwebapp/resources/static/js/ssosessions.js  -19\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/config/CasConfigurationDeletedEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/CasAuthenticationTransactionStartedEvent.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/adaptive/CasRiskBasedAuthenticationMitigationStartedEvent.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/audit/CasAuditActionContextRecordedEvent.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/ticket/CasTicketGrantingTicketDestroyedEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/ticket/CasProxyTicketGrantedEvent.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/CasAuthenticationTransactionFailureEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/CasAuthenticationPrincipalResolvedEvent.java  -1\nsupport/cas-server-support-events-memory/src/main/java/org/apereo/cas/support/events/dao/InMemoryCasEventRepository.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/ticket/CasServiceTicketValidatedEvent.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/CasAuthenticationTransactionSuccessfulEvent.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/ticket/CasServiceTicketGrantedEvent.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/config/CasConfigurationCreatedEvent.java  -2\nsupport/cas-server-support-events-memory/src/main/java/org/apereo/cas/support/events/config/CasEventsInMemoryRepositoryConfiguration.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/CasAuthenticationTransactionCompletedEvent.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/config/CasConfigurationModifiedEvent.java  -6\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/service/CasRegisteredServiceDeletedEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/adaptive/CasRiskBasedAuthenticationEvaluationStartedEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/CasAuthenticationPolicyFailureEvent.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/service/CasRegisteredServiceSavedEvent.java  -2\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/ticket/CasTicketGrantingTicketCreatedEvent.java  -2\ncore/cas-server-core-events/src/main/java/org/apereo/cas/support/events/dao/NoOpCasEventRepository.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/adaptive/CasRiskyAuthenticationMitigatedEvent.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/authentication/adaptive/CasRiskyAuthenticationDetectedEvent.java  -3\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/ticket/CasProxyGrantingTicketCreatedEvent.java  -2\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/MetricsController.java  -7\nsupport/cas-server-support-duo-core/src/main/java/org/apereo/cas/adaptors/duo/web/flow/action/DuoAuthenticationWebflowAction.java  -1\nsupport/cas-server-support-duo-core/src/main/java/org/apereo/cas/adaptors/duo/authn/DuoAuthenticationHandler.java  -10\nsupport/cas-server-support-jdbc-authentication/src/test/java/org/apereo/cas/adaptors/jdbc/QueryAndEncodeDatabaseAuthenticationHandlerTests.java  -18\nsupport/cas-server-support-yubikey-core/src/main/java/org/apereo/cas/adaptors/yubikey/web/flow/YubiKeyAuthenticationWebflowEventResolver.java  -2\nsupport/cas-server-support-pac4j-core-clients/src/test/java/org/apereo/cas/support/pac4j/authentication/handler/support/ClientAuthenticationHandlerTests.java  -3\nsupport/cas-server-support-jdbc-authentication/src/main/java/org/apereo/cas/adaptors/jdbc/SearchModeSearchDatabaseAuthenticationHandler.java  -1\nsupport/cas-server-support-duo-core/src/main/java/org/apereo/cas/adaptors/duo/web/flow/action/PrepareDuoWebLoginFormAction.java  -1\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/ClientAuthenticationMetaDataPopulator.java  -2\nsupport/cas-server-support-yubikey-core/src/main/java/org/apereo/cas/adaptors/yubikey/web/flow/YubiKeyMultifactorTrustWebflowConfigurer.java  -1\nsupport/cas-server-support-duo-core/src/main/java/org/apereo/cas/adaptors/duo/web/flow/DuoAuthenticationWebflowEventResolver.java  -2\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/GoogleAuthenticatorAuthenticationHandler.java  -1\nsupport/cas-server-support-sms-textmagic/src/main/java/org/apereo/cas/support/sms/TextMagicSmsSender.java  -1\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/repository/credentials/JsonGoogleAuthenticatorTokenCredentialRepository.java  -1\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/repository/credentials/RestGoogleAuthenticatorTokenCredentialRepository.java  -4\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/web/flow/GoogleAuthenticatorMultifactorTrustWebflowConfigurer.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettingsFactory.java  -3\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/OAuth20CasCallbackUrlResolver.java  -2\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SingleSignOnSessionStatusController.java  -2\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/OidcCustomScopeAttributeReleasePolicy.java  -2\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/OidcProfileScopeAttributeReleasePolicy.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/profile/OidcProfileScopeToAttributesFilter.java  -4\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/BaseOidcScopeAttributeReleasePolicy.java  -11\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/OidcPhoneScopeAttributeReleasePolicy.java  -1\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/OidcAddressScopeAttributeReleasePolicy.java  -1\nsupport/cas-server-support-oidc-core/src/main/java/org/apereo/cas/oidc/claims/OidcEmailScopeAttributeReleasePolicy.java  -1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/views/OAuth20ConsentApprovalViewResolver.java  -6\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20CallbackAuthorizeEndpointController.java  -1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AccessTokenEndpointController.java  -11\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java  -21\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/controllers/OidcDynamicClientRegistrationEndpointController.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcCallbackAuthorizeViewResolver.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/controllers/OidcWellKnownEndpointController.java  -2\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/dynareg/OidcClientRegistrationRequestSerializer.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/flow/OidcAuthenticationContextWebflowEventEventResolver.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/token/OidcIdTokenGeneratorService.java  -4\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcHandlerInterceptorAdapter.java  -3\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/config/OidcConfiguration.java  -32\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/util/OidcAuthorizationRequestSupport.java  -19\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/token/OidcIdTokenSigningAndEncryptionService.java  -11\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/jwks/OidcDefaultJsonWebKeystoreCacheLoader.java  -14\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/controllers/OidcAccessTokenEndpointController.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/flow/OidcRegisteredServiceUIAction.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/dynareg/OidcClientRegistrationRequest.java  -10\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/flow/OidcWebflowConfigurer.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/controllers/OidcAuthorizeEndpointController.java  -5\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/jwks/OidcServiceJsonWebKeystoreCacheLoader.java  -13\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcConsentApprovalViewResolver.java  -4\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcCasClientRedirectActionBuilder.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/controllers/OidcJwksEndpointController.java  -1\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/jwks/OidcJsonWebKeystoreGeneratorService.java  -2\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/discovery/OidcServerDiscoverySettings.java  -21\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcAccessTokenResponseGenerator.java  -1\nsupport/cas-server-support-configuration/src/main/java/org/apereo/cas/config/CasConfigurationSupportUtilitiesConfiguration.java  -2\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authorization/BaseUseAttributesAuthorizationGenerator.java  -4\nsupport/cas-server-support-gua/src/main/java/org/apereo/cas/web/flow/PrepareForGraphicalAuthenticationAction.java  -1\nsupport/cas-server-support-gua/src/main/java/org/apereo/cas/web/flow/GraphicalUserAuthenticationWebflowConfigurer.java  -1\nsupport/cas-server-support-gua/src/main/java/org/apereo/cas/gua/config/GraphicalUserAuthenticationConfiguration.java  -4\nwebapp/cas-server-webapp-config-security/src/main/java/org/apereo/cas/web/security/CasLdapUserDetailsManagerConfigurer.java  -6\nwebapp/cas-server-webapp-config-security/src/main/java/org/apereo/cas/web/ldap/LdapAuthenticationProvider.java  -2\nwebapp/cas-server-webapp-config-security/src/main/java/org/apereo/cas/web/security/CasJdbcUserDetailsManagerConfigurer.java  -1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/OneTimePasswordCredential.java  -3\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/util/ControllerUtils.java  -3\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/PersonDirectoryAttributeResolutionController.java  -1\nsupport/cas-server-support-pm/src/main/java/org/apereo/cas/pm/BasePasswordManagementService.java  -3\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/scim/v1/Scim1Provisioner.java  -4\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/scim/v2/Scim2Provisioner.java  -5\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/scim/v1/Scim1PrincipalAttributeMapper.java  -1\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/web/flow/ScimWebflowConfigurer.java  -1\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/config/CasScimConfiguration.java  -4\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/web/flow/PrincipalScimProvisionerAction.java  -1\nsupport/cas-server-support-scim/src/main/java/org/apereo/cas/scim/v2/Scim2PrincipalAttributeMapper.java  -2\nsupport/cas-server-support-azure/src/main/java/org/apereo/cas/adaptors/azure/web/flow/AzureAuthenticatorMultifactorTrustWebflowConfigurer.java  -1\nsupport/cas-server-support-azure/src/main/java/org/apereo/cas/adaptors/azure/web/flow/AzureAuthenticatorMultifactorWebflowConfigurer.java  -1\nsupport/cas-server-support-azure/src/main/java/org/apereo/cas/config/support/authentication/AzureAuthenticatorAuthenticationEventExecutionPlanConfiguration.java  -10\nsupport/cas-server-support-azure/src/main/java/org/apereo/cas/adaptors/azure/web/flow/AzureAuthenticatorGenerateTokenAction.java  -1\nsupport/cas-server-support-azure/src/main/java/org/apereo/cas/config/AzureAuthenticatorConfiguration.java  -2\nsupport/cas-server-support-azure/src/main/java/org/apereo/cas/adaptors/azure/AzureAuthenticatorAuthenticationHandler.java  -1\nsupport/cas-server-support-gauth-jpa/src/main/java/org/apereo/cas/adaptors/gauth/JpaGoogleAuthenticatorTokenCredentialRepository.java  -4\nsupport/cas-server-support-gauth-mongo/src/main/java/org/apereo/cas/adaptors/gauth/MongoDbGoogleAuthenticatorTokenCredentialRepository.java  -6\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/credentials/BaseJsonOneTimeTokenCredentialRepository.java  -4\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/credentials/BaseInMemoryOneTimeTokenCredentialRepository.java  -4\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/config/OneTimeTokenAuthenticationConfiguration.java  -5\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/credentials/OneTimeTokenAccount.java  -17\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/web/flow/rest/OneTimeTokenQRGeneratorController.java  -2\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/authentication/OneTimeTokenCredential.java  -9\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/token/OneTimeTokenRepositoryCleaner.java  -1\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/token/CachingOneTimeTokenRepository.java  -4\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/token/BaseOneTimeTokenRepository.java  -2\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/web/flow/OneTimeTokenAccountSaveRegistrationAction.java  -1\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/repository/token/OneTimeToken.java  -15\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/web/flow/OneTimeTokenAuthenticationWebflowAction.java  -1\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/web/flow/OneTimeTokenAuthenticationWebflowEventResolver.java  -2\nsupport/cas-server-support-generic/src/main/java/org/apereo/cas/adaptors/generic/config/FileAuthenticationEventExecutionPlanConfiguration.java  -3\nsupport/cas-server-support-generic-remote-webflow/src/main/java/org/apereo/cas/adaptors/generic/remote/RemoteAddressAuthenticationHandler.java  -12\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/authentication/WSFederationAuthenticationServiceSelectionStrategy.java  -7\nsupport/cas-server-support-ws-idp-api/src/main/java/org/apereo/cas/ws/idp/services/WSFederationRegisteredService.java  -25\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/authentication/SecurityTokenServiceClient.java  -2\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/ticket/DefaultSecurityTokenTicket.java  -5\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/web/BaseWSFederationRequestController.java  -22\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/claims/WrappingSecurityTokenServiceClaimsHandler.java  -4\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/metadata/WSFederationMetadataController.java  -1\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/services/DefaultRelyingPartyTokenProducer.java  -9\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/saml/SamlAssertionRealmCodec.java  -3\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/realm/UriRealmParser.java  -1\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/x509/X509TokenDelegationHandler.java  -2\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/validation/CipheredCredentialsValidator.java  -1\nsupport/cas-server-support-ws-idp/src/main/java/org/apereo/cas/ws/idp/web/WSFederationRequest.java  -15\nsupport/cas-server-support-ws-sts/src/main/java/org/apereo/cas/support/validation/SecurityTokenServiceCredentialCipherExecutor.java  -1\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/services/DynamoDbServiceRegistryDao.java  -6\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/services/DynamoDbServiceRegistryFacilitator.java  -14\nsupport/cas-server-support-dynamodb-service-registry/src/test/java/org/apereo/cas/services/DynamoDbServiceRegistryTests.java  -2\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/config/DynamoDbServiceRegistryConfiguration.java  -13\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/validator/OAuth20AuthenticationServiceSelectionStrategy.java  -4\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/config/SamlIdPAuthenticationServiceSelectionStrategyConfiguration.java  -1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthAuthenticationServiceSelectionStrategyConfiguration.java  -1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/config/SamlIdPWebflowConfiguration.java  -1\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/config/support/authentication/OpenIdServiceFactoryConfiguration.java  -1\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/config/CasDefaultServiceTicketIdGeneratorsConfiguration.java  -1\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/config/authentication/support/SamlUniqueTicketIdGeneratorConfiguration.java  -1\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/config/support/authentication/DigestAuthenticationEventExecutionPlanConfiguration.java  -2\nsupport/cas-server-support-yubikey/src/main/java/org/apereo/cas/config/support/authentication/YubiKeyAuthenticationEventExecutionPlanConfiguration.java  -7\nsupport/cas-server-support-generic-remote-webflow/src/main/java/org/apereo/cas/adaptors/generic/remote/RemoteAddressCredential.java  -2\nsupport/cas-server-support-gauth/src/main/java/org/apereo/cas/config/support/authentication/GoogleAuthenticatorAuthenticationEventExecutionPlanConfiguration.java  -13\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/config/authentication/support/SamlServiceFactoryConfiguration.java  -1\nsupport/cas-server-support-generic-remote-webflow/src/main/java/org/apereo/cas/config/CasRemoteAuthenticationConfiguration.java  -4\nsupport/cas-server-support-generic-remote-webflow/src/main/java/org/apereo/cas/adaptors/generic/remote/RemoteAddressNonInteractiveCredentialsAction.java  -1\ncore/cas-server-core-services/src/main/java/org/apereo/cas/config/support/CasWebApplicationServiceFactoryConfiguration.java  -1\nsupport/cas-server-support-generic/src/main/java/org/apereo/cas/adaptors/generic/config/RejectUsersAuthenticationEventExecutionPlanConfiguration.java  -3\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/config/support/authentication/RadiusTokenAuthenticationEventExecutionPlanConfiguration.java  -6\nsupport/cas-server-support-pac4j/src/main/java/org/apereo/cas/support/pac4j/config/support/authentication/Pac4jAuthenticationEventExecutionPlanConfiguration.java  -59\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/config/authentication/support/SamlAuthenticationEventExecutionPlanConfiguration.java  -1\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/config/support/authentication/OpenIdAuthenticationEventExecutionPlanConfiguration.java  -3\nsupport/cas-server-support-duo/src/main/java/org/apereo/cas/adaptors/duo/config/DuoSecurityAuthenticationEventExecutionPlanConfiguration.java  -7\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/config/support/authentication/AuthyAuthenticationEventExecutionPlanConfiguration.java  -8\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/config/support/authentication/WsFedAuthenticationEventExecutionPlanConfiguration.java  -6\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationMetadataConfiguration.java  -4\nsupport/cas-server-support-spnego-webflow/src/main/java/org/apereo/cas/web/flow/config/SpnegoWebflowActionsConfiguration.java  -4\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationSupportConfiguration.java  -3\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationPrincipalConfiguration.java  -1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationHandlersConfiguration.java  -11\nsupport/cas-server-support-gauth-jpa/src/main/java/org/apereo/cas/config/GoogleAuthenticatorJpaConfiguration.java  -6\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/InMemoryServiceRegistryTests.java  -4\nsupport/cas-server-support-jdbc/src/main/java/org/apereo/cas/adaptors/jdbc/config/CasJdbcAuthenticationConfiguration.java  -12\ncore/cas-server-core-configuration-cloud-mongo/src/main/java/org/apereo/cas/config/MongoDbCloudConfigBootstrapConfiguration.java  -7\nsupport/cas-server-support-couchbase-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/CouchbaseTicketRegistry.java  -17\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/refreshtoken/OAuthRefreshTokenExpirationPolicy.java  -8\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/TimeBasedRegisteredServiceAccessStrategyTests.java  -3\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/IgniteTicketRegistry.java  -26\nsupport/cas-server-support-pac4j-authentication/src/main/java/org/apereo/cas/integration/pac4j/authentication/handler/support/AbstractWrapperAuthenticationHandler.java  -8\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/adaptive/geo/GeoLocationResponse.java  -7\nsupport/cas-server-support-jdbc-monitor/src/main/java/org/apereo/cas/monitor/config/CasJdbcMonitorConfiguration.java  -2\nsupport/cas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/authentication/handler/support/PrincipalBearingCredentialsAuthenticationHandlerTests.java  -1\nsupport/cas-server-support-rest-authentication/src/test/java/org/apereo/cas/adaptors/rest/RestAuthenticationHandlerTests.java  -4\nsupport/cas-server-support-pac4j-authentication/src/main/java/org/apereo/cas/integration/pac4j/authentication/handler/support/AbstractTokenWrapperAuthenticationHandler.java  -4\nsupport/cas-server-support-yaml-service-registry/src/main/java/org/apereo/cas/services/config/YamlServiceRegistryConfiguration.java  -3\nsupport/cas-server-support-openid-webflow/src/main/java/org/apereo/cas/web/flow/OpenIdWebflowConfigurer.java  -2\ncore/cas-server-core-validation/src/test/java/org/apereo/cas/validation/Cas20ProtocolValidationSpecificationTests.java  -7\nsupport/cas-server-support-captcha/src/main/java/org/apereo/cas/web/flow/ValidateCaptchaAction.java  -2\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/authentication/handler/support/NtlmAuthenticationHandler.java  -3\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/authentication/principal/OpenIdServiceFactory.java  -2\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/web/view/Saml10FailureResponseViewTests.java  -1\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/authentication/handler/support/OpenIdCredentialsAuthenticationHandlerTests.java  -4\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/config/CasCoreAuditConfiguration.java  -21\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/HttpBasedServiceCredentialTests.java  -4\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusMultifactorTrustWebflowConfigurer.java  -1\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/authentication/principal/OpenIdCredential.java  -4\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/handler/support/SimpleTestUsernamePasswordHandlerTests.java  -4\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/flow/GatewayServicesManagementCheck.java  -1\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/util/ReverseDNSRunnable.java  -4\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/authentication/handler/support/JcifsConfig.java  -31\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/config/SamlIdPConfiguration.java  -26\nsupport/cas-server-support-generic/src/test/java/org/apereo/cas/adaptors/generic/FileAuthenticationHandlerTests.java  -11\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/AnonymousRegisteredServiceUsernameAttributeProviderTests.java  -2\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/web/flow/AuthyAuthenticationWebflowEventResolver.java  -2\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/util/TrustedProxyAuthenticationTrustStoreSslSocketFactoryTests.java  -2\nsupport/cas-server-support-jpa-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/JpaTicketRegistry.java  -12\nsupport/cas-server-support-spnego/src/test/java/org/apereo/cas/support/spnego/authentication/principal/SpnegoCredentialsTests.java  -3\napi/cas-server-core-api-services/src/main/java/org/apereo/cas/services/UnauthorizedServiceException.java  -3\napi/cas-server-core-api-services/src/main/java/org/apereo/cas/services/UnauthorizedServiceForPrincipalException.java  -2\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/principal/WebApplicationServiceFactoryTests.java  -4\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/view/Cas20ResponseView.java  -1\nsupport/cas-server-support-trusted-mfa-mongo/src/main/java/org/apereo/cas/trusted/config/MongoDbMultifactorAuthenticationTrustConfiguration.java  -4\nsupport/cas-server-support-x509/src/main/java/org/apereo/cas/adaptors/x509/config/X509AuthenticationConfiguration.java  -26\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/AbstractResourceBasedServiceRegistryDaoTests.java  -21\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/authentication/principal/OpenIdServiceResponseBuilder.java  -12\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/authentication/SamlAuthenticationMetaDataPopulator.java  -4\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasWebAppConfiguration.java  -14\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/principal/SimpleWebApplicationServiceImplTests.java  -6\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/code/DefaultOAuthCodeFactory.java  -3\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/web/flow/MultifactorAuthenticationSetTrustAction.java  -1\nsupport/cas-server-support-trusted/src/main/java/org/apereo/cas/adaptors/trusted/authentication/handler/support/PrincipalBearingCredentialsAuthenticationHandler.java  -2\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/cache/CachingPrincipalAttributesRepositoryTests.java  -1\nsupport/cas-server-support-ldap-service-registry/src/test/java/org/apereo/cas/adaptors/ldap/services/LdapServiceRegistryDaoTests.java  -11\nsupport/cas-server-support-couchbase-service-registry/src/main/java/org/apereo/cas/config/CouchbaseServiceRegistryConfiguration.java  -1\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/config/MultifactorAuthnTrustConfiguration.java  -8\nsupport/cas-server-support-json-service-registry/src/main/java/org/apereo/cas/config/JsonServiceRegistryConfiguration.java  -3\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/authentication/handler/support/OpenIdCredentialsAuthenticationHandler.java  -2\nsupport/cas-server-support-captcha/src/main/java/org/apereo/cas/web/flow/config/CasCaptchaConfiguration.java  -1\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/config/IgniteTicketRegistryConfiguration.java  -1\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/AbstractServiceValidateController.java  -49\nsupport/cas-server-support-validation/src/test/java/org/apereo/cas/web/AbstractServiceValidateControllerTests.java  -23\nsupport/cas-server-support-jpa-service-registry/src/main/java/org/apereo/cas/services/JpaServiceRegistryDaoImpl.java  -7\napi/cas-server-core-api-services/src/main/java/org/apereo/cas/services/UnauthorizedSsoServiceException.java  -2\nsupport/cas-server-support-trusted/src/main/java/org/apereo/cas/adaptors/trusted/web/flow/PrincipalFromRequestUserPrincipalNonInteractiveCredentialsAction.java  -1\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/authentication/principal/OpenIdServiceFactoryTests.java  -2\nsupport/cas-server-support-throttle/src/test/java/org/apereo/cas/web/support/AbstractThrottledSubmissionHandlerInterceptorAdapterTests.java  -4\nsupport/cas-server-support-generic-remote-webflow/src/main/java/org/apereo/cas/web/flow/RemoteAddressWebflowConfigurer.java  -1\nsupport/cas-server-support-trusted-mfa-jdbc/src/main/java/org/apereo/cas/trusted/authentication/storage/JpaMultifactorAuthenticationTrustStorage.java  -7\ncore/cas-server-core/src/test/java/org/apereo/cas/AbstractCentralAuthenticationServiceTests.java  -9\nsupport/cas-server-support-ehcache-ticket-registry/src/main/java/org/apereo/cas/config/EhcacheTicketRegistryConfiguration.java  -2\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/support/RememberMeDelegatingExpirationPolicyTests.java  -3\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/authentication/MultifactorAuthenticationTrustCipherExecutor.java  -1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationConfiguration.java  -2\nsupport/cas-server-support-yubikey/src/main/java/org/apereo/cas/config/YubiKeyConfiguration.java  -4\nsupport/cas-server-support-mongo-service-registry/src/main/java/org/apereo/cas/config/MongoDbServiceRegistryConfiguration.java  -4\nsupport/cas-server-support-ehcache-monitor/src/main/java/org/apereo/cas/monitor/EhCacheStatistics.java  -10\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/RootCasException.java  -4\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/JpaTicketRegistryTests.java  -17\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/authentication/storage/BaseMultifactorAuthenticationTrustStorage.java  -5\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/registry/DistributedTicketRegistryTests.java  -12\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/RegexRegisteredServiceTests.java  -4\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/http/SimpleHttpClientTests.java  -11\nsupport/cas-server-support-jdbc-authentication/src/main/java/org/apereo/cas/adaptors/jdbc/BindModeSearchDatabaseAuthenticationHandler.java  -1\nsupport/cas-server-support-duo-core/src/main/java/org/apereo/cas/adaptors/duo/web/flow/config/DuoMultifactorWebflowConfigurer.java  -2\nsupport/cas-server-support-yubikey-core/src/main/java/org/apereo/cas/adaptors/yubikey/web/flow/YubiKeyAuthenticationWebflowAction.java  -1\nsupport/cas-server-support-jdbc-authentication/src/main/java/org/apereo/cas/adaptors/jdbc/AbstractJdbcUsernamePasswordAuthenticationHandler.java  -2\nsupport/cas-server-support-jdbc-authentication/src/main/java/org/apereo/cas/adaptors/jdbc/QueryAndEncodeDatabaseAuthenticationHandler.java  -5\nsupport/cas-server-support-yubikey-core/src/main/java/org/apereo/cas/adaptors/yubikey/web/flow/YubiKeyMultifactorWebflowConfigurer.java  -1\nsupport/cas-server-support-jdbc-authentication/src/test/java/org/apereo/cas/adaptors/jdbc/SearchModeSearchDatabaseAuthenticationHandlerTests.java  -6\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/handler/support/ClientAuthenticationHandler.java  -2\nsupport/cas-server-support-jdbc-authentication/src/main/java/org/apereo/cas/adaptors/jdbc/QueryDatabaseAuthenticationHandler.java  -2\nsupport/cas-server-support-jdbc-authentication/src/test/java/org/apereo/cas/adaptors/jdbc/QueryDatabaseAuthenticationHandlerTests.java  -12\nsupport/cas-server-support-yubikey-core/src/main/java/org/apereo/cas/adaptors/yubikey/YubiKeyAuthenticationHandler.java  -6\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FAccountSaveRegistrationAction.java  -1\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FStartAuthenticationAction.java  -1\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/storage/BaseU2FDeviceRepository.java  -4\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FStartRegistrationAction.java  -1\nsupport/cas-server-support-gua/src/main/java/org/apereo/cas/gua/impl/LdapUserGraphicalAuthenticationRepository.java  -1\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/config/support/authentication/U2FAuthenticationEventExecutionPlanConfiguration.java  -5\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/U2FAuthenticationHandler.java  -3\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/storage/U2FInMemoryDeviceRepository.java  -3\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FAuthenticationWebflowEventResolver.java  -2\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/config/U2FConfiguration.java  -9\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FMultifactorWebflowConfigurer.java  -1\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FAccountCheckRegistrationAction.java  -1\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/web/flow/U2FAuthenticationWebflowAction.java  -1\nsupport/cas-server-support-gua/src/main/java/org/apereo/cas/web/flow/DisplayUserGraphicsBeforeAuthenticationAction.java  -1\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/web/flow/GoogleAuthenticatorMultifactorWebflowConfigurer.java  -1\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/repository/credentials/InMemoryGoogleAuthenticatorTokenCredentialRepository.java  -1\nsupport/cas-server-support-sms-clickatell/src/main/java/org/apereo/cas/support/sms/ClickatellSmsSender.java  -1\nsupport/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/SamlRegisteredServiceTests.java  -4\ncore/cas-server-core/src/main/java/org/apereo/cas/AbstractCentralAuthenticationService.java  -18\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/web/view/Saml10FailureResponseView.java  -1\nsupport/cas-server-support-couchbase-service-registry/src/main/java/org/apereo/cas/services/CouchbaseServiceRegistryDao.java  -11\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/config/WsFederationAuthenticationConfiguration.java  -1\nsupport/cas-server-support-trusted/src/main/java/org/apereo/cas/adaptors/trusted/web/flow/PrincipalFromRequestRemoteUserNonInteractiveCredentialsAction.java  -2\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AccessTokenControllerTests.java  -52\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/AbstractSaml20ObjectBuilder.java  -22\ncore/cas-server-core-audit/src/test/java/org/apereo/cas/audit/spi/ThreadLocalPrincipalResolverTests.java  -5\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/web/flow/AuthyAuthenticationRegistrationWebflowAction.java  -1\napi/cas-server-core-api-ticket/src/main/java/org/apereo/cas/ticket/InvalidTicketException.java  -2\nsupport/cas-server-support-throttle-jdbc/src/main/java/org/apereo/cas/web/support/config/CasJdbcThrottlingConfiguration.java  -1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/handler/ConvertCasePrincipalNameTransformerTests.java  -2\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapAuthenticationHandler.java  -21\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/authentication/principal/SamlServiceResponseBuilder.java  -6\ncore/cas-server-core-configuration-cloud-mongo/src/main/java/org/apereo/cas/MongoDbPropertySourceLocator.java  -1\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AuthorizeControllerTests.java  -15\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/UnauthorizedSsoServiceExceptionTests.java  -2\ncore/cas-server-core-logout/src/main/java/org/apereo/cas/logout/config/CasCoreLogoutConfiguration.java  -4\nsupport/cas-server-support-ldap/src/test/java/org/apereo/cas/util/LdapTestUtils.java  -6\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/InitialFlowSetupActionTests.java  -1\nsupport/cas-server-support-saml-googleapps/src/test/java/org/apereo/cas/support/saml/authentication/principal/GoogleAccountsServiceTests.java  -5\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/util/LdapUtils.java  -11\ncore/cas-server-core-validation/src/main/java/org/apereo/cas/validation/config/CasCoreValidationConfiguration.java  -2\nsupport/cas-server-support-saml-core/src/main/java/org/apereo/cas/support/saml/SamlUtils.java  -10\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/authentication/principal/OpenIdServiceTests.java  -5\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/RememberMeAuthenticationMetaDataPopulatorTests.java  -3\ncore/cas-server-core/src/test/java/org/apereo/cas/CentralAuthenticationServiceImplTests.java  -36\nsupport/cas-server-support-trusted-mfa-mongo/src/main/java/org/apereo/cas/trusted/authentication/storage/MongoDbMultifactorAuthenticationTrustStorage.java  -8\nsupport/cas-server-support-saml-core/src/main/java/org/apereo/cas/config/CoreSamlConfiguration.java  -6\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/DefaultRandomStringGeneratorTests.java  -2\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/web/mvc/SmartOpenIdControllerTests.java  -2\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/support/TimeoutExpirationPolicyTests.java  -4\ncore/cas-server-core-configuration-cloud-mongo/src/main/java/org/apereo/cas/MongoDbPropertySource.java  -2\nsupport/cas-server-support-saml-googleapps/src/test/java/org/apereo/cas/support/saml/authentication/principal/GoogleAccountsServiceFactoryTests.java  -3\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authentication/support/LdapPasswordPolicyConfiguration.java  -2\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/authentication/handler/support/JcifsSpnegoAuthenticationHandler.java  -8\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/mock/MockTicketGrantingTicket.java  -25\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/config/SpnegoConfiguration.java  -7\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/config/CasSupportActionsConfiguration.java  -14\nsupport/cas-server-support-oauth-core/src/main/java/org/apereo/cas/ticket/refreshtoken/RefreshTokenImpl.java  -2\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/support/ThrottledUseAndTimeoutExpirationPolicyTests.java  -5\nsupport/cas-server-support-radius-core/src/main/java/org/apereo/cas/adaptors/radius/RadiusClientFactory.java  -3\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/DigestCredential.java  -11\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/TicketGrantingTicketImplTests.java  -20\nsupport/cas-server-support-pac4j-core/src/main/java/org/apereo/cas/authentication/handler/support/AbstractPac4jAuthenticationHandler.java  -2\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/flow/ServiceAuthorizationCheck.java  -1\nsupport/cas-server-support-spnego-webflow/src/main/java/org/apereo/cas/web/flow/client/LdapSpnegoKnownClientSystemsFilterAction.java  -13\nsupport/cas-server-support-generic/src/main/java/org/apereo/cas/adaptors/generic/FileAuthenticationHandler.java  -2\nsupport/cas-server-support-geolocation-maxmind/src/main/java/org/apereo/cas/support/geo/maxmind/MaxmindDatabaseGeoLocationService.java  -7\nwebapp/cas-server-webapp-session-hazelcast/src/main/java/org/apereo/cas/config/HazelcastSessionConfiguration.java  -1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/UsernamePasswordCredentialTests.java  -2\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/UnauthorizedServiceExceptionTests.java  -1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SingleSignOnSessionsReportController.java  -16\nsupport/cas-server-support-spnego-webflow/src/main/java/org/apereo/cas/web/flow/client/BaseSpnegoKnownClientSystemsFilterAction.java  -14\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/adaptive/geo/GeoLocationRequest.java  -16\nsupport/cas-server-support-generic/src/main/java/org/apereo/cas/adaptors/generic/RejectUsersAuthenticationHandler.java  -1\nsupport/cas-server-support-ldap-service-registry/src/main/java/org/apereo/cas/adaptors/ldap/services/config/LdapServiceRegistryConfiguration.java  -1\nsupport/cas-server-support-token-webflow/src/main/java/org/apereo/cas/web/flow/TokenWebflowConfigurer.java  -1\nsupport/cas-server-support-pac4j-authentication/src/main/java/org/apereo/cas/integration/pac4j/authentication/handler/support/UsernamePasswordWrapperAuthenticationHandler.java  -8\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/PrincipalAttributeRegisteredServiceUsernameProviderTests.java  -3\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/DefaultRegisteredServiceUsernameProviderTests.java  -3\nsupport/cas-server-support-yaml-service-registry/src/main/java/org/apereo/cas/services/YamlServiceRegistryDao.java  -2\nsupport/cas-server-support-rest-authentication/src/main/java/org/apereo/cas/config/CasRestAuthenticationConfiguration.java  -7\ncore/cas-server-core-services/src/main/java/org/apereo/cas/config/CasCoreServicesConfiguration.java  -13\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/MessageBundleAwareResourceResolver.java  -1\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/AbstractRegisteredServiceTests.java  -13\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/authentication/SamlAuthenticationMetaDataPopulatorTests.java  -5\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/AuthenticationTransaction.java  -9\ncore/cas-server-core-validation/src/test/java/org/apereo/cas/mock/MockValidationSpecification.java  -1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/StatisticsController.java  -18\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/config/OpenIdConfiguration.java  -7\nsupport/cas-server-support-saml-idp-core/src/main/java/org/apereo/cas/support/saml/services/SamlRegisteredService.java  -41\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/ProxyController.java  -5\ncore/cas-server-core-util/src/main/java/org/apereo/cas/config/CasCoreUtilConfiguration.java  -5\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/DefaultDigestHashedCredentialRetriever.java  -1\nsupport/cas-server-support-spnego-webflow/src/main/java/org/apereo/cas/web/flow/SpengoWebflowConfigurer.java  -5\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/web/flow/DigestAuthenticationWebflowConfigurer.java  -1\ncore/cas-server-core-validation/src/test/java/org/apereo/cas/validation/Cas20WithoutProxyingValidationSpecificationTests.java  -5\napi/cas-server-core-api-services/src/main/java/org/apereo/cas/services/UnauthorizedProxyingException.java  -2\nsupport/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/flow/config/Pac4jWebflowConfiguration.java  -1\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasApplicationContextConfiguration.java  -5\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/web/mvc/SmartOpenIdController.java  -4\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/flow/GenerateServiceTicketAction.java  -3\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/AbstractOpenIdTests.java  -2\nsupport/cas-server-support-json-service-registry/src/test/java/org/apereo/cas/services/JsonServiceRegistryDaoTests.java  -1\napi/cas-server-core-api-ticket/src/main/java/org/apereo/cas/ticket/AbstractTicketException.java  -2\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/PreventedException.java  -1\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/web/flow/WsFederationAction.java  -16\nsupport/cas-server-support-captcha/src/main/java/org/apereo/cas/web/flow/CasCaptchaWebflowConfigurer.java  -1\nsupport/cas-server-support-radius-core/src/main/java/org/apereo/cas/adaptors/radius/JRadiusServerImpl.java  -3\nsupport/cas-server-support-events-jpa/src/main/java/org/apereo/cas/config/JpaEventsConfiguration.java  -5\nsupport/cas-server-support-pac4j-core/src/main/java/org/apereo/cas/authentication/principal/ClientCredential.java  -6\nsupport/cas-server-support-events-mongo/src/main/java/org/apereo/cas/config/MongoDbEventsConfiguration.java  -4\nsupport/cas-server-support-rest/src/main/java/org/apereo/cas/config/CasRestConfiguration.java  -5\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/authentication/principal/OpenIdPrincipalResolver.java  -2\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/RegisteredServiceAuthenticationHandlerResolverTests.java  -2\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/accesstoken/DefaultAccessTokenFactory.java  -3\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/authentication/api/MultifactorAuthenticationTrustRecord.java  -17\nsupport/cas-server-support-oauth-core/src/main/java/org/apereo/cas/ticket/accesstoken/AccessTokenImpl.java  -2\nsupport/cas-server-support-basic/src/main/java/org/apereo/cas/web/flow/BasicAuthenticationWebflowConfigurer.java  -1\nsupport/cas-server-support-jpa-service-registry/src/test/java/org/apereo/cas/services/JpaServiceRegistryDaoImplTests.java  -6\nsupport/cas-server-support-spnego-webflow/src/main/java/org/apereo/cas/web/flow/client/HostNameSpnegoKnownClientSystemsFilterAction.java  -1\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/AuthenticationViaFormActionTests.java  -7\nsupport/cas-server-support-basic/src/main/java/org/apereo/cas/web/flow/BasicAuthenticationAction.java  -1\nsupport/cas-server-support-trusted/src/main/java/org/apereo/cas/adaptors/trusted/authentication/principal/PrincipalBearingCredential.java  -2\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/authentication/principal/SamlServiceFactoryTests.java  -1\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/adaptive/UnauthorizedAuthenticationException.java  -3\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/web/support/OpenIdPostUrlHandlerMappingTests.java  -4\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/util/DefaultUniqueTicketIdGeneratorTests.java  -2\ncore/cas-server-core-logging/src/main/java/org/apereo/cas/logging/web/ThreadContextMDCServletFilter.java  -5\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/web/flow/DigestAuthenticationAction.java  -1\nsupport/cas-server-support-electrofence/src/test/java/org/apereo/cas/impl/calcs/IpAddressAuthenticationRequestRiskCalculatorTests.java  -2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/api/AuthenticationRiskScore.java  -5\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/notify/AuthenticationRiskEmailNotifier.java  -1\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/IpAddressAuthenticationRequestRiskCalculator.java  -1\nsupport/cas-server-support-electrofence/src/test/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculatorTests.java  -2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/UserAgentAuthenticationRequestRiskCalculator.java  -1\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/plans/BaseAuthenticationRiskContingencyPlan.java  -2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/notify/BaseAuthenticationRiskNotifier.java  -3\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/web/flow/RiskAwareAuthenticationWebflowEventResolver.java  -3\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  -1\nsupport/cas-server-support-electrofence/src/test/java/org/apereo/cas/impl/mock/MockTicketGrantingTicketCreatedEventProducer.java  -5\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/engine/DefaultAuthenticationRiskEvaluator.java  -2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/config/ElectronicFenceConfiguration.java  -18\nsupport/cas-server-support-electrofence/src/test/java/org/apereo/cas/impl/calcs/UserAgentAuthenticationRequestRiskCalculatorTests.java  -2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/web/flow/RiskAwareAuthenticationWebflowConfigurer.java  -1\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/RegexUtilsTests.java  -1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/DefaultPasswordEncoderTests.java  -3\nsupport/cas-server-support-gauth/src/main/java/org/apereo/cas/config/GoogleAuthenticatorConfiguration.java  -2\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/ConfigurationStateController.java  -5\nsupport/cas-server-support-grouper/src/main/java/org/apereo/cas/web/flow/GrouperMultifactorAuthenticationPolicyEventResolver.java  -1\nsupport/cas-server-support-oauth-webflow/src/main/java/org/apereo/cas/support/oauth/web/flow/OAuth20WebflowConfigurer.java  -1\nsupport/cas-server-support-oauth-webflow/src/main/java/org/apereo/cas/support/oauth/web/flow/OAuth20RegisteredServiceUIAction.java  -1\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/SamlMetadataUIInfo.java  -7\nsupport/cas-server-support-saml-mdui/src/main/java/org/apereo/cas/support/saml/mdui/web/flow/SamlMetadataUIWebflowConfigurer.java  -1\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/MetadataUIUtils.java  -5\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/AbstractMetadataResolverAdapter.java  -16\nsupport/cas-server-support-saml-mdui/src/main/java/org/apereo/cas/support/saml/mdui/web/flow/SamlMetadataUIParserAction.java  -7\nsupport/cas-server-support-saml-mdui/src/test/java/org/apereo/cas/support/saml/mdui/web/flow/SamlMetadataUIParserActionTests.java  -2\nsupport/cas-server-support-saml-mdui/src/test/java/org/apereo/cas/support/saml/mdui/web/flow/SamlMetadataUIParserDynamicActionTests.java  -1\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/DynamicMetadataResolverAdapter.java  -3\nsupport/cas-server-support-saml-mdui/src/main/java/org/apereo/cas/support/saml/mdui/config/SamlMetadataUIConfiguration.java  -6\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/ChainingMetadataResolverAdapter.java  -1\nsupport/cas-server-support-saml-mdui-core/src/main/java/org/apereo/cas/support/saml/mdui/StaticMetadataResolverAdapter.java  -2\nsupport/cas-server-support-duo/src/main/java/org/apereo/cas/adaptors/duo/config/DuoSecurityConfiguration.java  -2\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/util/MockOnlyOneTicketRegistry.java  -8\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/DefaultAuthenticationTests.java  -1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/ChainingPrincipalResolverTests.java  -1\ncore/cas-server-core-validation/src/test/java/org/apereo/cas/validation/CoreValidationTestUtils.java  -2\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/RegisteredServiceTestUtils.java  -10\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/SimplePrincipalTests.java  -1\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/DefaultMultifactorTriggerSelectionStrategyTests.java  -9\nsupport/cas-server-support-x509-webflow/src/main/java/org/apereo/cas/web/flow/X509CertificateCredentialsNonInteractiveAction.java  -1\nsupport/cas-server-support-x509/src/test/java/org/apereo/cas/adaptors/x509/authentication/ldap/LdaptiveResourceCRLFetcherTests.java  -3\nsupport/cas-server-support-x509-webflow/src/test/java/org/apereo/cas/adaptors/x509/web/flow/X509CertificateCredentialsNonInteractiveActionTests.java  -1\nsupport/cas-server-support-pm/src/main/java/org/apereo/cas/pm/PasswordResetTokenCipherExecutor.java  -2\nsupport/cas-server-support-pm/src/main/java/org/apereo/cas/pm/config/PasswordManagementConfiguration.java  -25\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/AuthenticationEventsController.java  -2\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/TrustedDevicesController.java  -3\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/web/MultifactorAuthenticationTrustController.java  -1\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasSecurityContextConfiguration.java  -20\nsupport/cas-server-support-ldap/src/test/java/org/apereo/cas/authentication/LdapAuthenticationHandlerTests.java  -5\nsupport/cas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/web/flow/PrincipalFromRequestRemoteUserNonInteractiveCredentialsActionTests.java  -1\nsupport/cas-server-support-mongo-service-registry/src/main/java/org/apereo/cas/services/MongoServiceRegistryDao.java  -11\ncore/cas-server-core-events/src/test/java/org/apereo/cas/support/events/AbstractCasEventRepositoryTests.java  -1\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/AbstractCasEvent.java  -1\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/web/DelegatingController.java  -3\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/PersonDirectoryPrincipalResolverTests.java  -6\nsupport/cas-server-support-validation/src/test/java/org/apereo/cas/web/view/Cas30ResponseViewTests.java  -10\nsupport/cas-server-support-radius/src/main/java/org/apereo/cas/adaptors/radius/authentication/handler/support/RadiusAuthenticationHandler.java  -1\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasMetricsConfiguration.java  -4\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/handler/support/MockLoginModule.java  -4\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20ProfileControllerTests.java  -5\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/DefaultLongNumericGeneratorTests.java  -5\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/registry/DefaultTicketRegistryTests.java  -1\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/config/CasCoreWebflowConfiguration.java  -15\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/WsFederationConfiguration.java  -26\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/support/RegisteredServiceRegexAttributeFilterTests.java  -5\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/authentication/principal/SpnegoPrincipalResolver.java  -2\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/authentication/principal/WsFederationCredentialsToPrincipalResolver.java  -6\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/support/JpaLockingStrategyTests.java  -25\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/web/flow/OpenIdSingleSignOnActionTests.java  -3\nsupport/cas-server-support-throttle/src/main/java/org/apereo/cas/web/support/config/CasThrottlingConfiguration.java  -4\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/Saml10ObjectBuilder.java  -15\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/AbstractOAuth20Tests.java  -1\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/config/SamlConfiguration.java  -4\nsupport/cas-server-support-audit-jdbc/src/main/java/org/apereo/cas/audit/config/CasSupportJdbcAuditConfiguration.java  -5\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/authentication/principal/OpenIdService.java  -9\nsupport/cas-server-support-saml-sp-integrations/src/main/java/org/apereo/cas/util/SamlSPUtils.java  -9\nwebapp/cas-server-webapp-init/src/main/java/org/apereo/cas/web/CasWebApplication.java  -1\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/UnauthorizedProxyingExceptionTests.java  -2\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/authentication/principal/SamlServiceTests.java  -6\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/web/mvc/OpenIdValidateController.java  -3\nsupport/cas-server-support-spnego/src/main/java/org/apereo/cas/support/spnego/authentication/principal/SpnegoCredential.java  -18\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/accesstoken/OAuthAccessTokenExpirationPolicy.java  -9\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/view/Cas30ResponseView.java  -4\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/authentication/principal/SamlServiceFactory.java  -7\nsupport/cas-server-support-radius-core/src/main/java/org/apereo/cas/adaptors/radius/RadiusUtils.java  -1\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/ThreadLocalPrincipalResolver.java  -4\nsupport/cas-server-support-x509-webflow/src/main/java/org/apereo/cas/web/flow/X509WebflowConfigurer.java  -1\nsupport/cas-server-support-json-service-registry/src/main/java/org/apereo/cas/services/JsonServiceRegistryDao.java  -2\ncore/cas-server-core-events/src/main/java/org/apereo/cas/support/events/config/CasCoreEventsConfiguration.java  -1\ncore/cas-server-core-monitor/src/main/java/org/apereo/cas/monitor/SimpleCacheStatistics.java  -8\nsupport/cas-server-support-rest-services/src/main/java/org/apereo/cas/support/rest/RegisteredServiceResource.java  -17\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/proxy/support/Cas20ProxyHandlerTests.java  -4\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/web/view/AbstractSaml10ResponseView.java  -2\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/util/MultifactorAuthenticationTrustUtils.java  -5\nsupport/cas-server-support-themes/src/test/java/org/apereo/cas/services/web/ServiceThemeResolverTests.java  -3\nsupport/cas-server-support-ldap-service-registry/src/main/java/org/apereo/cas/adaptors/ldap/services/LdapServiceRegistryDao.java  -21\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/SimpleServiceTests.java  -3\nsupport/cas-server-support-jpa-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/support/JpaLockingStrategy.java  -18\nsupport/cas-server-support-rest-services/src/test/java/org/apereo/cas/support/rest/RegisteredServiceResourceTests.java  -7\nsupport/cas-server-support-couchbase-ticket-registry/src/main/java/org/apereo/cas/config/CouchbaseTicketRegistryConfiguration.java  -2\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/web/view/Saml10SuccessResponseViewTests.java  -3\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/AbstractSamlObjectBuilder.java  -28\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/CredentialsAsFirstParameterResourceResolver.java  -2\nsupport/cas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/authentication/principal/PrincipalBearingCredentialsToPrincipalResolverTests.java  -2\nsupport/cas-server-support-basic/src/main/java/org/apereo/cas/web/config/CasBasicAuthenticationConfiguration.java  -2\nsupport/cas-server-support-audit-jdbc/src/main/java/org/apereo/cas/audit/entity/AuditTrailEntity.java  -15\ncore/cas-server-core-validation/src/test/java/org/apereo/cas/validation/Cas10ProtocolValidationSpecificationTests.java  -7\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/authentication/storage/MultifactorAuthenticationTrustStorageCleaner.java  -1\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/config/CasThemesConfiguration.java  -15\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/AuthyAuthenticationHandler.java  -1\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/support/MultiTimeUseOrTimeoutExpirationPolicyTests.java  -5\nsupport/cas-server-support-saml-googleapps/src/main/java/org/apereo/cas/support/saml/config/SamlGoogleAppsConfiguration.java  -3\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/handler/support/HttpBasedServiceCredentialsAuthenticationHandlerTests.java  -7\nsupport/cas-server-support-couchbase-service-registry/src/test/java/org/apereo/cas/services/CouchbaseServiceRegistryDaoTests.java  -1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/FileTrustStoreSslSocketFactoryTests.java  -6\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/handler/support/JaasAuthenticationHandlerTests.java  -4\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/LogoutActionTests.java  -7\nsupport/cas-server-support-rest-authentication/src/main/java/org/apereo/cas/adaptors/rest/RestAuthenticationApi.java  -2\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/TicketGrantingTicketCheckActionTests.java  -2\nsupport/cas-server-support-spnego/src/test/java/org/apereo/cas/support/spnego/MockJcifsAuthentication.java  -6\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/proxy/support/Cas10ProxyHandlerTests.java  -1\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/web/flow/AuthyAuthenticationWebflowAction.java  -1\napi/cas-server-core-api-authentication/src/main/java/org/apereo/cas/authentication/AuthenticationException.java  -6\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/AcceptUsersAuthenticationHandlerTests.java  -9\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/cache/AbstractCachingPrincipalAttributesRepositoryTests.java  -6\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusAuthenticationWebflowEventResolver.java  -2\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/TestOneTimePasswordAuthenticationHandler.java  -2\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/InitialFlowSetupActionCookieTests.java  -2\nsupport/cas-server-support-oauth-core/src/main/java/org/apereo/cas/ticket/code/OAuthCodeImpl.java  -12\nsupport/cas-server-support-infinispan-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/config/InfinispanTicketRegistryConfiguration.java  -3\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/registry/AbstractTicketRegistryTests.java  -32\nsupport/cas-server-support-saml-core/src/main/java/org/apereo/cas/support/saml/OpenSamlConfigBean.java  -6\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/ServiceTicketImplTests.java  -11\nsupport/cas-server-support-infinispan-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/InfinispanTicketRegistry.java  -5\nsupport/cas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/web/flow/PrincipalFromRequestUserPrincipalNonInteractiveCredentialsActionTests.java  -1\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/web/view/Saml10SuccessResponseView.java  -3\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/TicketAsFirstParameterResourceResolver.java  -1\nsupport/cas-server-support-ldap/src/test/java/org/apereo/cas/authentication/principal/PersonDirectoryPrincipalResolverLdaptiveTests.java  -2\nsupport/cas-server-support-hazelcast-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/HazelcastTicketRegistry.java  -13\nsupport/cas-server-support-mongo/src/main/java/org/apereo/cas/authentication/config/CasMongoAuthenticationConfiguration.java  -2\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/GenericSuccessViewActionTests.java  -1\nsupport/cas-server-support-geolocation-googlemaps/src/main/java/org/apereo/cas/support/geo/google/GoogleMapsGeoLocationService.java  -8\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/AbstractOpenSamlTests.java  -3\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/config/CasReportsConfiguration.java  -14\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/CasHttpSoap11Encoder.java  -1\nsupport/cas-server-support-trusted-mfa-rest/src/main/java/org/apereo/cas/trusted/authentication/storage/RestMultifactorAuthenticationTrustStorage.java  -9\nsupport/cas-server-support-validation/src/test/java/org/apereo/cas/web/view/Cas20ResponseViewTests.java  -5\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/web/flow/AuthyMultifactorWebflowConfigurer.java  -1\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/SendTicketGrantingTicketActionTests.java  -5\nsupport/cas-server-support-couchbase-core/src/main/java/org/apereo/cas/couchbase/core/CouchbaseClientFactory.java  -5\nsupport/cas-server-support-events-jpa/src/main/java/org/apereo/cas/support/events/jpa/JpaCasEventRepository.java  -9\ncore/cas-server-core-monitor/src/main/java/org/apereo/cas/monitor/MemoryMonitor.java  -3\nsupport/cas-server-support-spnego/src/test/java/org/apereo/cas/support/spnego/authentication/principal/SpnegoCredentialsToPrincipalResolverTests.java  -2\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/util/DigestAuthenticationUtils.java  -4\nsupport/cas-server-support-wsfederation/src/test/java/org/apereo/cas/support/wsfederation/authentication/principal/WsFederationCredentialTests.java  -6\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/config/RadiusMultifactorConfiguration.java  -4\napi/cas-server-core-api-events/src/main/java/org/apereo/cas/support/events/dao/CasEvent.java  -27\nsupport/cas-server-support-radius/src/main/java/org/apereo/cas/config/RadiusConfiguration.java  -5\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/ServiceAuthorizationCheckTests.java  -4\nsupport/cas-server-support-openid/src/test/java/org/apereo/cas/support/openid/web/support/DefaultOpenIdUserNameExtractorTests.java  -2\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/GenerateServiceTicketActionTests.java  -5\nsupport/cas-server-support-trusted/src/main/java/org/apereo/cas/adaptors/trusted/config/TrustedAuthenticationConfiguration.java  -5\nsupport/cas-server-support-spnego-webflow/src/main/java/org/apereo/cas/web/flow/SpnegoCredentialsAction.java  -9\nsupport/cas-server-support-wsfederation-webflow/src/main/java/org/apereo/cas/web/flow/WsFederationWebflowConfigurer.java  -2\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/authentication/principal/WsFederationCredential.java  -19\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/LoggingConfigController.java  -11\nsupport/cas-server-support-wsfederation/src/test/java/org/apereo/cas/support/wsfederation/WsFederationHelperTests.java  -8\nsupport/cas-server-support-ldap-service-registry/src/main/java/org/apereo/cas/adaptors/ldap/services/DefaultLdapRegisteredServiceMapper.java  -9\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/DefaultRegisteredServiceAccessStrategyTests.java  -21\nsupport/cas-server-support-ehcache-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/EhCacheTicketRegistry.java  -11\nsupport/cas-server-support-trusted/src/test/java/org/apereo/cas/adaptors/trusted/authentication/principal/PrincipalBearingCredentialsTests.java  -2\nsupport/cas-server-support-mongo-service-registry/src/test/java/org/apereo/cas/services/MongoServiceRegistryDaoCloudTests.java  -3\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/util/SamlCompliantUniqueTicketIdGeneratorTests.java  -1\nsupport/cas-server-support-spnego-webflow/src/test/java/org/apereo/cas/web/flow/client/LdapSpnegoKnownClientSystemsFilterActionTests.java  -2\nsupport/cas-server-support-spnego/src/test/java/org/apereo/cas/support/spnego/authentication/handler/support/JcifsSpnegoAuthenticationHandlerTests.java  -4\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/DefaultPrincipalFactoryTests.java  -2\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasProtocolViewsConfiguration.java  -12\nsupport/cas-server-support-ldap-monitor/src/main/java/org/apereo/cas/monitor/config/LdapMonitorConfiguration.java  -1\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java  -11\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/authentication/handler/support/WsFederationAuthenticationHandler.java  -2\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/SamlCompliantUniqueTicketIdGenerator.java  -5\nsupport/cas-server-support-validation/src/test/java/org/apereo/cas/web/view/Cas10ResponseViewTests.java  -2\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/authentication/storage/InMemoryMultifactorAuthenticationTrustStorage.java  -5\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/config/AuthyConfiguration.java  -4\nsupport/cas-server-support-oauth-webflow/src/main/java/org/apereo/cas/config/CasOAuthWebflowConfiguration.java  -1\nsupport/cas-server-support-jpa-service-registry/src/main/java/org/apereo/cas/config/JpaServiceRegistryConfiguration.java  -5\nsupport/cas-server-support-trusted/src/main/java/org/apereo/cas/adaptors/trusted/authentication/principal/PrincipalBearingPrincipalResolver.java  -2\ncore/cas-server-core/src/main/java/org/apereo/cas/config/CasCoreConfiguration.java  -2\nsupport/cas-server-support-generic/src/test/java/org/apereo/cas/adaptors/generic/RejectUsersAuthenticationHandlerTests.java  -6\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/InitialFlowSetupActionSsoTests.java  -1\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/view/Cas10ResponseView.java  -1\nsupport/cas-server-support-jpa-ticket-registry/src/main/java/org/apereo/cas/config/JpaTicketRegistryConfiguration.java  -5\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasFiltersConfiguration.java  -1\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/principal/ShibbolethCompatiblePersistentIdGeneratorTests.java  -1\ncore/cas-server-core-util/src/test/java/org/apereo/cas/util/BinaryCipherExecutorTests.java  -1\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/authentication/RadiusTokenAuthenticationHandler.java  -5\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/DigestAuthenticationHandler.java  -2\nsupport/cas-server-support-yubikey/src/test/java/org/apereo/cas/adaptors/yubikey/YubiKeyAuthenticationHandlerTests.java  -4\ncore/cas-server-core-monitor/src/main/java/org/apereo/cas/monitor/SessionMonitor.java  -3\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/web/support/WebUtilTests.java  -1\nsupport/cas-server-support-digest-authentication/src/main/java/org/apereo/cas/digest/config/DigestAuthenticationConfiguration.java  -2\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/DashboardController.java  -1\nsupport/cas-server-support-hazelcast-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/DefaultHazelcastInstanceConfigurationTests.java  -3\nsupport/cas-server-support-mongo-ticket-registry/src/main/java/org/apereo/cas/config/MongoDbTicketRegistryConfiguration.java  -2\nsupport/cas-server-support-mongo-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/MongoDbTicketRegistry.java  -16\nsupport/cas-server-support-mongo-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/MongoDbTicketRegistryTests.java  -1\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authorization/LdapUserGroupsToRolesAuthorizationGenerator.java  -1\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authorization/LdapUserAttributesToRolesAuthorizationGenerator.java  -1\nsupport/cas-server-support-digest-authentication/src/test/java/org/apereo/cas/digest/DefaultDigestHashedCredentialRetrieverTests.java  -1\nsupport/cas-server-support-redis-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/RedisTicketRegistryTests.java  -2\nsupport/cas-server-support-redis-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/RedisTicketRegistry.java  -12\nsupport/cas-server-support-redis-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/TicketRedisTemplate.java  -1\nsupport/cas-server-support-redis-ticket-registry/src/main/java/org/apereo/cas/config/RedisTicketRegistryConfiguration.java  -6\nsupport/cas-server-support-saml-sp-integrations/src/main/java/org/apereo/cas/config/CasSamlSPInCommonConfiguration.java  -1\nsupport/cas-server-support-hazelcast-ticket-registry/src/main/java/org/apereo/cas/config/HazelcastTicketRegistryConfiguration.java  -10\ncore/cas-server-core/src/main/java/org/apereo/cas/DefaultCentralAuthenticationService.java  -16\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/validator/OAuth20Validator.java  -7\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/OAuth20HandlerInterceptorAdapter.java  -4\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/notify/AuthenticationRiskTwilioSmsNotifier.java  -1\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/engine/DefaultAuthenticationRiskMitigator.java  -2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/BaseAuthenticationRequestRiskCalculator.java  -4\nsupport/cas-server-support-electrofence/src/test/java/org/apereo/cas/impl/calcs/GeoLocationAuthenticationRequestRiskCalculatorTests.java  -2\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/FrontChannelLogoutActionTests.java  -2\ncore/cas-server-core-events/src/main/java/org/apereo/cas/support/events/listener/DefaultCasEventListener.java  -10\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/refreshtoken/DefaultRefreshTokenFactory.java  -3\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/mock/MockServiceTicket.java  -15\ncore/cas-server-core/src/test/java/org/apereo/cas/MultifactorAuthenticationTests.java  -8\nsupport/cas-server-support-trusted-mfa-jdbc/src/main/java/org/apereo/cas/trusted/config/JdbcMultifactorAuthnTrustConfiguration.java  -5\nsupport/cas-server-support-ldap/src/test/java/org/apereo/cas/util/ldap/uboundid/InMemoryTestLdapDirectoryServer.java  -11\nsupport/cas-server-support-saml-googleapps/src/test/java/org/apereo/cas/support/saml/authentication/GoogleAppsSamlAuthenticationRequestTests.java  -2\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/web/flow/OpenIdSingleSignOnAction.java  -4\nsupport/cas-server-support-trusted-webflow/src/main/java/org/apereo/cas/web/flow/TrustedAuthenticationWebflowConfigurer.java  -1\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusAuthenticationWebflowAction.java  -1\nsupport/cas-server-support-validation/src/test/java/org/apereo/cas/web/ProxyControllerTests.java  -4\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/config/CasCoreTicketsConfiguration.java  -21\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/util/TicketEncryptionDecryptionTests.java  -3\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/ServiceResourceResolver.java  -1\nsupport/cas-server-support-grouper/src/test/java/org/apereo/cas/grouper/services/GrouperRegisteredServiceAccessStrategyRegistryTests.java  -1\nsupport/cas-server-support-events-mongo/src/main/java/org/apereo/cas/support/events/mongo/MongoDbCasEventRepository.java  -12\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasValidationConfiguration.java  -9\nsupport/cas-server-support-wsfederation/src/test/java/org/apereo/cas/support/wsfederation/WsFederationAttributeMutatorTests.java  -1\nsupport/cas-server-support-trusted-mfa/src/main/java/org/apereo/cas/trusted/web/flow/MultifactorAuthenticationVerifyTrustAction.java  -1\ncore/cas-server-core-events/src/main/java/org/apereo/cas/support/events/dao/AbstractCasEventRepository.java  -6\ncore/cas-server-core-services/src/test/java/org/apereo/cas/authentication/principal/ResponseTests.java  -6\nsupport/cas-server-support-saml-core/src/main/java/org/apereo/cas/support/saml/SamlException.java  -1\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/ticket/support/TicketGrantingTicketExpirationPolicyTests.java  -3\nsupport/cas-server-support-authy/src/main/java/org/apereo/cas/adaptors/authy/web/flow/AuthyMultifactorTrustWebflowConfigurer.java  -1\nsupport/cas-server-support-radius-mfa/src/main/java/org/apereo/cas/adaptors/radius/web/flow/RadiusMultifactorWebflowConfigurer.java  -1\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/authentication/SamlAuthenticationRequestTests.java  -1\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/authentication/principal/SamlService.java  -1\ncore/cas-server-core/src/test/java/org/apereo/cas/CentralAuthenticationServiceImplWithMockitoTests.java  -19\nsupport/cas-server-support-wsfederation/src/main/java/org/apereo/cas/support/wsfederation/WsFederationHelper.java  -24\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/principal/SimplePrincipalFactoryTests.java  -1\nsupport/cas-server-support-memcached-ticket-registry/src/main/java/org/apereo/cas/config/MemcachedTicketRegistryConfiguration.java  -4\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/PolicyBasedAuthenticationManagerTests.java  -11\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java  -32\ncore/cas-server-core-validation/src/test/java/org/apereo/cas/validation/ImmutableAssertionTests.java  -6\n\nClones added\n\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/config/CasCoreTicketsSchedulingConfiguration.java  1\ncore/cas-server-core-logging-config/src/main/java/org/apereo/cas/logging/CasAppender.java  1\nsupport/cas-server-support-hazelcast-ticket-registry/src/main/java/org/apereo/cas/config/HazelcastTicketRegistryTicketCatalogConfiguration.java  2\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/repository/credentials/RestGoogleAuthenticatorTokenCredentialRepository.java  1\nsupport/cas-server-support-gauth-mongo/src/main/java/org/apereo/cas/adaptors/gauth/MongoDbGoogleAuthenticatorTokenCredentialRepository.java  1\nsupport/cas-server-support-generic/src/test/java/org/apereo/cas/adaptors/generic/FileAuthenticationHandlerTests.java  1\nsupport/cas-server-support-validation/src/test/java/org/apereo/cas/web/AbstractServiceValidateControllerTests.java  8\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AccessTokenControllerTests.java  4\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/v3/V3ServiceValidateController.java  1\nsupport/cas-server-support-jpa-service-registry/src/test/java/org/apereo/cas/services/JpaServiceRegistryDaoImplTests.java  1\ncore/cas-server-core-services/src/test/java/org/apereo/cas/services/RegisteredServiceTestUtils.java  1\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20ProfileControllerTests.java  7\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/AbstractOAuth20Tests.java  1\nsupport/cas-server-support-saml/src/test/java/org/apereo/cas/support/saml/web/view/Saml10SuccessResponseViewTests.java  2\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/ProxyValidateController.java  1\ncore/cas-server-core-authentication/src/test/java/org/apereo/cas/authentication/AcceptUsersAuthenticationHandlerTests.java  1\nsupport/cas-server-support-grouper/src/test/java/org/apereo/cas/grouper/services/GrouperRegisteredServiceAccessStrategyTests.java  1\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/ServiceValidateController.java  1\nsupport/cas-server-support-mongo-ticket-registry/src/main/java/org/apereo/cas/config/MongoDbTicketRegistryConfiguration.java  1\nsupport/cas-server-support-saml-idp/src/test/java/org/apereo/cas/support/saml/SamlIdPConfigurationTests.java  2\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/LegacyValidateController.java  1\nsupport/cas-server-support-grouper/src/test/java/org/apereo/cas/grouper/services/GrouperRegisteredServiceAccessStrategyRegistryTests.java  1\n\nClones removed\n\nsupport/cas-server-support-dynamodb-ticket-registry/src/main/java/org/apereo/cas/config/DynamoDbTicketRegistryConfiguration.java  -1\nsupport/cas-server-support-otp-mfa/src/main/java/org/apereo/cas/otp/authentication/OneTimeTokenCredential.java  -2\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/config/DynamoDbServiceRegistryConfiguration.java  -1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/ticket/refreshtoken/OAuthRefreshTokenExpirationPolicy.java  -1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/config/SamlIdPConfiguration.java  -4\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/config/U2FConfiguration.java  -1\nsupport/cas-server-support-oauth/src/test/java/org/apereo/cas/support/oauth/web/OAuth20AuthorizeControllerTests.java  -5\nsupport/cas-server-support-wsfederation/src/test/java/org/apereo/cas/support/wsfederation/AbstractWsFederationTests.java  -1\nsupport/cas-server-support-yubikey/src/test/java/org/apereo/cas/adaptors/yubikey/YubiKeyAuthenticationHandlerTests.java  -1\nsupport/cas-server-support-saml-googleapps/src/test/java/org/apereo/cas/support/saml/authentication/GoogleAppsSamlAuthenticationRequestTests.java  -1\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasValidationConfiguration.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\nComplexity decreasing per file\n\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/support/JpaLockingStrategyTests.java  -2\nsupport/cas-server-support-jpa-ticket-registry/src/test/java/org/apereo/cas/ticket/registry/JpaTicketRegistryTests.java  -1\n\nClones added\n\napi/cas-server-core-api-configuration-model/src/main/java/org/apereo/cas/configuration/support/JpaBeans.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 3\nAdded 7\n\nComplexity increasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/config/CasWebflowContextConfiguration.java  3\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/storage/BaseResourceU2FDeviceRepository.java  2\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/event/SurrogateAuthenticationEventListener.java  1\ncore/cas-server-core-services-api/src/main/java/org/apereo/cas/services/RegisteredServiceAccessStrategyUtils.java  1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/cache/resolver/UrlResourceMetadataResolver.java  1\nsupport/cas-server-support-hazelcast-core/src/main/java/org/apereo/cas/hz/HazelcastConfigurationFactory.java  7\nsupport/cas-server-support-pm-jdbc/src/main/java/org/apereo/cas/pm/jdbc/JdbcPasswordManagementService.java  1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SpringWebflowReportController.java  1\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/services/DynamoDbServiceRegistryFacilitator.java  1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/PersonDirectoryAttributeResolutionController.java  1\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/BaseTicketSerializers.java  2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\nsupport/cas-server-support-cookie/src/main/java/org/apereo/cas/web/support/CookieRetrievingCookieGenerator.java  1\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/util/LdapUtils.java  2\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/PolicyBasedAuthenticationManager.java  1\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/ServiceThemeResolver.java  1\n\nComplexity decreasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/resolver/impl/mfa/AuthenticationAttributeMultifactorAuthenticationPolicyEventResolver.java  -1\n\nClones added\n\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/config/IgniteTicketRegistryTicketCatalogConfiguration.java  1\n\nClones removed\n\nsupport/cas-server-support-ehcache-ticket-registry/src/main/java/org/apereo/cas/config/EhcacheTicketRegistryTicketCatalogConfiguration.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity decreasing per file\n\ncore/cas-server-core-cookie-api/src/main/java/org/apereo/cas/web/support/DefaultCasCookieValueManager.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\nwebapp/cas-server-webapp-tomcat/src/main/java/org/apereo/cas/config/CasEmbeddedContainerTomcatConfiguration.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 41\nAdded 22\n\nComplexity increasing per file\n\nsupport/cas-server-support-x509/src/main/java/org/apereo/cas/adaptors/x509/authentication/revocation/checker/ResourceCRLRevocationChecker.java  22\nsupport/cas-server-support-pm/src/main/java/org/apereo/cas/pm/web/flow/PasswordManagementWebflowConfigurer.java  2\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/services/AbstractMultifactorAuthenticationProvider.java  12\nsupport/cas-server-support-cookie/src/main/java/org/apereo/cas/web/support/CookieRetrievingCookieGenerator.java  4\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/ldap/AbstractLdapProperties.java  55\nsupport/cas-server-support-mongo/src/main/java/org/apereo/cas/authentication/MongoAuthenticationHandler.java  8\nsupport/cas-server-support-audit-jdbc/src/main/java/org/apereo/cas/audit/config/CasSupportJdbcAuditConfiguration.java  5\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/web/mvc/OpenIdValidateController.java  3\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/view/Cas30ResponseView.java  8\ncore/cas-server-core-services/src/main/java/org/apereo/cas/authentication/support/DefaultCasAttributeEncoder.java  8\nsupport/cas-server-support-jdbc/src/main/java/org/apereo/cas/adaptors/jdbc/config/CasJdbcConfiguration.java  11\ncore/cas-server-core-audit/src/main/java/org/apereo/cas/audit/spi/config/CasCoreAuditConfiguration.java  14\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/config/SamlIdPConfiguration.java  21\nsupport/cas-server-support-saml-googleapps/src/main/java/org/apereo/cas/support/saml/authentication/principal/GoogleAccountsServiceFactory.java  18\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/web/idp/profile/builders/enc/SamlObjectEncrypter.java  11\nsupport/cas-server-support-ldap-service-registry/src/test/java/org/apereo/cas/adaptors/ldap/services/LdapServiceRegistryDaoTests.java  13\nsupport/cas-server-support-saml-mdui/src/main/java/org/apereo/cas/support/saml/web/flow/config/SamlMetadataUIConfiguration.java  5\nsupport/cas-server-support-couchbase-service-registry/src/main/java/org/apereo/cas/config/CouchbaseServiceRegistryConfiguration.java  1\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/DefaultAuthentication.java  14\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/AbstractServiceValidateController.java  49\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasPersonDirectoryAttributeRepositoryConfiguration.java  28\nsupport/cas-server-support-throttle/src/test/java/org/apereo/cas/web/support/AbstractThrottledSubmissionHandlerInterceptorAdapterTests.java  4\nsupport/cas-server-support-ehcache-ticket-registry/src/main/java/org/apereo/cas/config/EhcacheTicketRegistryConfiguration.java  4\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/config/CasCoreAuthenticationConfiguration.java  33\nsupport/cas-server-support-mongo-service-registry/src/main/java/org/apereo/cas/config/MongoDbServiceRegistryConfiguration.java  4\nsupport/cas-server-support-saml-mdui/src/main/java/org/apereo/cas/support/saml/web/flow/mdui/DynamicMetadataResolverAdapter.java  4\nsupport/cas-server-support-saml/src/main/java/org/apereo/cas/support/saml/util/AbstractSaml20ObjectBuilder.java  18\ncore/cas-server-core-audit/src/test/java/org/apereo/cas/audit/spi/ThreadLocalPrincipalResolverTests.java  5\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/support/ConnectionPoolingProperties.java  7\nsupport/cas-server-support-hazelcast-monitor/src/main/java/org/apereo/cas/monitor/HazelcastMonitor.java  11\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/config/CasSupportActionsConfiguration.java  14\nsupport/cas-server-support-ldap-service-registry/src/main/java/org/apereo/cas/adaptors/ldap/services/config/LdapServiceRegistryConfiguration.java  1\ncore/cas-server-core-services/src/main/java/org/apereo/cas/config/CasCoreServicesConfiguration.java  12\nsupport/cas-server-support-openid/src/main/java/org/apereo/cas/support/openid/web/mvc/SmartOpenIdController.java  4\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/flow/GenerateServiceTicketAction.java  5\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/HealthCheckController.java  2\nsupport/cas-server-support-throttle-jdbc/src/main/java/org/apereo/cas/web/support/InspektrThrottledSubmissionByIpAddressAndUsernameHandlerInterceptorAdapter.java  16\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasWebflowContextConfiguration.java  28\nsupport/cas-server-support-jpa-service-registry/src/test/java/org/apereo/cas/services/JpaServiceRegistryDaoImplTests.java  7\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/AuthenticationViaFormActionTests.java  7\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/cookie/CookieProperties.java  11\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/handler/support/AbstractUsernamePasswordAuthenticationHandler.java  7\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/registry/DefaultTicketRegistrySupport.java  5\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/CasBanner.java  4\nsupport/cas-server-support-infinispan-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/config/InfinispanTicketRegistryConfiguration.java  1\nsupport/cas-server-support-actions/src/test/java/org/apereo/cas/web/flow/SendTicketGrantingTicketActionTests.java  5\nsupport/cas-server-support-jdbc/src/test/java/org/apereo/cas/adaptors/jdbc/QueryDatabaseAuthenticationHandlerTests.java  10\nsupport/cas-server-support-radius/src/main/java/org/apereo/cas/config/RadiusConfiguration.java  5\nsupport/cas-server-support-ldap-service-registry/src/main/java/org/apereo/cas/adaptors/ldap/services/DefaultLdapRegisteredServiceMapper.java  6\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/FileTrustStoreSslSocketFactory.java  17\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/ldap/LdapAuthenticationProperties.java  29\nsupport/cas-server-support-ldap/src/main/java/org/apereo/cas/config/LdapAuthenticationConfiguration.java  21\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/authentication/support/DefaultAccountStateHandler.java  12\nsupport/cas-server-support-jpa-service-registry/src/main/java/org/apereo/cas/config/JpaServiceRegistryConfiguration.java  5\ncore/cas-server-core/src/main/java/org/apereo/cas/config/CasCoreConfiguration.java  3\nsupport/cas-server-support-cookie/src/main/java/org/apereo/cas/web/config/CasCookieConfiguration.java  5\nsupport/cas-server-support-jpa-ticket-registry/src/main/java/org/apereo/cas/config/JpaTicketRegistryConfiguration.java  5\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/DefaultAuthenticationSystemSupport.java  10\ncore/cas-server-core-tickets/src/test/java/org/apereo/cas/mock/MockServiceTicket.java  14\ncore/cas-server-core/src/test/java/org/apereo/cas/MultifactorAuthenticationTests.java  9\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/AbstractResourceBasedServiceRegistryDao.java  26\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasValidationConfiguration.java  10\nsupport/cas-server-support-memcached-ticket-registry/src/main/java/org/apereo/cas/config/MemcachedTicketRegistryConfiguration.java  3\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java  2\nwebapp/cas-server-webapp/src/main/resources/static/js/cas.js  15\n\nComplexity decreasing per file\n\nsupport/cas-server-support-rest-authentication/src/main/java/org/apereo/cas/adaptors/rest/RestAuthenticationHandler.java  -5\nsupport/cas-server-support-cookie/src/main/java/org/apereo/cas/web/support/DefaultCasCookieValueManager.java  -1\nwebapp/cas-server-webapp-config/src/main/java/org/apereo/cas/config/CasEmbeddedContainerConfiguration.java  -3\ncore/cas-server-core-services/src/main/java/org/apereo/cas/services/DefaultRegisteredServiceProperty.java  -8\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/core/authentication/AuthenticationExceptionsProperties.java  -1\n\nClones added\n\ncore/cas-server-core-configuration/src/main/java/org/apereo/cas/configuration/model/support/pac4j/Pac4jProperties.java  2\nsupport/cas-server-support-validation/src/main/java/org/apereo/cas/web/config/CasValidationConfiguration.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/authentication/DelegatedClientFactory.java  7\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 31\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 4\nAdded 7\n\nComplexity increasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/config/CasWebflowContextConfiguration.java  3\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/storage/BaseResourceU2FDeviceRepository.java  2\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/event/SurrogateAuthenticationEventListener.java  1\ncore/cas-server-core-services-api/src/main/java/org/apereo/cas/services/RegisteredServiceAccessStrategyUtils.java  1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/cache/resolver/UrlResourceMetadataResolver.java  1\nsupport/cas-server-support-hazelcast-core/src/main/java/org/apereo/cas/hz/HazelcastConfigurationFactory.java  7\nsupport/cas-server-support-pm-jdbc/src/main/java/org/apereo/cas/pm/jdbc/JdbcPasswordManagementService.java  1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SpringWebflowReportController.java  1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenAuthorizationCodeGrantRequestExtractor.java  3\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/services/DynamoDbServiceRegistryFacilitator.java  1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/PersonDirectoryAttributeResolutionController.java  1\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/BaseTicketSerializers.java  2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\nsupport/cas-server-support-cookie/src/main/java/org/apereo/cas/web/support/CookieRetrievingCookieGenerator.java  1\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/serialization/TicketIdSanitizationUtils.java  1\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/util/LdapUtils.java  2\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/PolicyBasedAuthenticationManager.java  1\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/ServiceThemeResolver.java  1\n\nComplexity decreasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/resolver/impl/mfa/AuthenticationAttributeMultifactorAuthenticationPolicyEventResolver.java  -1\n\nClones added\n\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/config/IgniteTicketRegistryTicketCatalogConfiguration.java  1\n\nClones removed\n\nsupport/cas-server-support-ehcache-ticket-registry/src/main/java/org/apereo/cas/config/EhcacheTicketRegistryTicketCatalogConfiguration.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-core/src/main/java/org/apereo/cas/web/pac4j/SessionStoreCookieSerializer.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-webflow/src/main/java/org/apereo/cas/web/DelegatedClientWebflowManager.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/CasThymeleafOutputTemplateHandler.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-actions/src/main/java/org/apereo/cas/web/flow/logout/TerminateSessionAction.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/controllers/OidcRevocationEndpointController.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity increasing per file\n\nsupport/cas-server-support-pac4j-webflow/src/test/java/org/apereo/cas/web/flow/DelegatedClientAuthenticationActionTests.java  3\ncore/cas-server-core-authentication-api/src/main/java/org/apereo/cas/authentication/DefaultAuthenticationServiceSelectionPlan.java  1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 4\nAdded 9\n\nComplexity increasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/config/CasWebflowContextConfiguration.java  3\nsupport/cas-server-support-u2f/src/main/java/org/apereo/cas/adaptors/u2f/storage/BaseResourceU2FDeviceRepository.java  2\nsupport/cas-server-support-surrogate-authentication/src/main/java/org/apereo/cas/authentication/event/SurrogateAuthenticationEventListener.java  1\nsupport/cas-server-support-saml-idp-core/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/SamlRegisteredServiceServiceProviderMetadataFacade.java  1\ncore/cas-server-core-services-api/src/main/java/org/apereo/cas/services/RegisteredServiceAccessStrategyUtils.java  1\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/support/saml/services/idp/metadata/cache/resolver/UrlResourceMetadataResolver.java  2\nsupport/cas-server-support-saml-idp/src/main/java/org/apereo/cas/config/SamlIdPMetadataConfiguration.java  1\nsupport/cas-server-support-hazelcast-core/src/main/java/org/apereo/cas/hz/HazelcastConfigurationFactory.java  7\nsupport/cas-server-support-pm-jdbc/src/main/java/org/apereo/cas/pm/jdbc/JdbcPasswordManagementService.java  1\nsupport/cas-server-support-token-tickets/src/main/java/org/apereo/cas/token/authentication/principal/TokenWebApplicationServiceResponseBuilder.java  1\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/SpringWebflowReportController.java  1\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/response/accesstoken/ext/AccessTokenAuthorizationCodeGrantRequestExtractor.java  3\nsupport/cas-server-support-dynamodb-service-registry/src/main/java/org/apereo/cas/services/DynamoDbServiceRegistryFacilitator.java  1\nsupport/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow/DelegatedClientAuthenticationAction.java  1\nsupport/cas-server-support-gauth-core/src/main/java/org/apereo/cas/adaptors/gauth/GoogleAuthenticatorAuthenticationHandler.java  6\nsupport/cas-server-support-reports/src/main/java/org/apereo/cas/web/report/PersonDirectoryAttributeResolutionController.java  1\ncore/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/BaseTicketSerializers.java  2\nsupport/cas-server-support-electrofence/src/main/java/org/apereo/cas/impl/calcs/DateTimeAuthenticationRequestRiskCalculator.java  2\nsupport/cas-server-support-cookie/src/main/java/org/apereo/cas/web/support/CookieRetrievingCookieGenerator.java  1\ncore/cas-server-core-util/src/main/java/org/apereo/cas/util/serialization/TicketIdSanitizationUtils.java  1\nsupport/cas-server-support-ldap-core/src/main/java/org/apereo/cas/util/LdapUtils.java  2\ncore/cas-server-core-authentication/src/main/java/org/apereo/cas/authentication/PolicyBasedAuthenticationManager.java  1\nsupport/cas-server-support-themes/src/main/java/org/apereo/cas/services/web/ServiceThemeResolver.java  1\n\nComplexity decreasing per file\n\ncore/cas-server-core-webflow/src/main/java/org/apereo/cas/web/flow/resolver/impl/mfa/AuthenticationAttributeMultifactorAuthenticationPolicyEventResolver.java  -1\n\nClones added\n\nsupport/cas-server-support-ignite-ticket-registry/src/main/java/org/apereo/cas/config/IgniteTicketRegistryTicketCatalogConfiguration.java  1\n\nClones removed\n\nsupport/cas-server-support-ehcache-ticket-registry/src/main/java/org/apereo/cas/config/EhcacheTicketRegistryTicketCatalogConfiguration.java  -1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 6\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 2\n\nComplexity increasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20ClientAuthenticator.java  3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity decreasing per file\n\ncore/cas-server-core-logout-api/src/main/java/org/apereo/cas/logout/LogoutHttpMessage.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 9\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\nAdded 1\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nAdded 1\n\nComplexity increasing per file\n\nsupport/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20CallbackAuthorizeEndpointController.java  2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 1\n\nComplexity decreasing per file\n\ncore/cas-server-core-authentication-api/src/main/java/org/apereo/cas/authentication/principal/resolvers/ChainingPrincipalResolver.java  -3\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nIssues\n\nSolved 11\nAdded 7\n\nComplexity decreasing per file\n\nsupport/cas-server-support-rest-service-registry/src/test/java/org/apereo/cas/services/RestfulServiceRegistryTests.java  -1\nsupport/cas-server-support-couchdb-service-registry/src/test/java/org/apereo/cas/services/CouchDbServiceRegistryTests.java  -1\nsupport/cas-server-support-yaml-service-registry/src/test/java/org/apereo/cas/services/YamlServiceRegistryTests.java  -2\nsupport/cas-server-support-json-service-registry/src/test/java/org/apereo/cas/services/JsonServiceRegistryTests.java  -2\nsupport/cas-server-support-couchbase-service-registry/src/test/java/org/apereo/cas/services/CouchbaseServiceRegistryTests.java  -1\ncore/cas-server-core-services/src/main/java/org/apereo/cas/config/CasServiceRegistryInitializationConfiguration.java  -1\n\nClones removed\n\nsupport/cas-server-support-couchdb-service-registry/src/test/java/org/apereo/cas/services/CouchDbServiceRegistryTests.java  -2\nsupport/cas-server-support-ldap-service-registry/src/test/java/org/apereo/cas/adaptors/ldap/services/BaseLdapServiceRegistryTests.java  -1\nsupport/cas-server-support-jpa-service-registry/src/test/java/org/apereo/cas/services/JpaServiceRegistryTests.java  -1\nsupport/cas-server-support-couchbase-service-registry/src/test/java/org/apereo/cas/services/CouchbaseServiceRegistryTests.java  -2\n\n```\nSee the complete overview on Codacy\n        . \n Here is an overview of what got changed by this pull request:\n```diff\nComplexity increasing per file\n\nsupport/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcCasClientRedirectActionBuilder.java  3\n\n```\nSee the complete overview on Codacy\n        .  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Too many fields\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Too many fields\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Too many fields\n.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you\n.  Issue found: Too many fields\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Document empty method body\n.  Issue found: Too many fields\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Document empty method body\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: Too many fields\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: Too many fields\n.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found: A getX() method which returns a boolean should be named isX()\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Too many fields\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: Too many fields\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: A getX() method which returns a boolean should be named isX()\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: Too many fields\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: Too many fields\n.  Issue found: Document empty method body\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Too many fields\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 70\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found: Too many fields\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 70\n.  Issue found: Too many fields\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Document empty method body\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: A getX() method which returns a boolean should be named isX()\n.  Issue found: Too many fields\n.  Issue found: Document empty method body\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you\n.  Issue found: Too many fields\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Document empty method body\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: Too many fields\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Too many fields\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Too many fields\n.  Issue found: This class has too many methods, consider refactoring it.\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: Perhaps 'filterConfig' could be replaced by a local variable.\n.  Issue found: Document empty method body\n.  Issue found: Avoid unused private fields such as 'filterConfig'.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: Too many fields\n.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you\n.  Issue found: Too many fields\n.  Issue found: Too many fields\n.  Issue found: Too many fields\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: Use opposite operator instead of the logic complement operator.\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found: Avoid unused private fields such as 'applicationContext'.\n.  Issue found: The String literal \"supportsTrustStoreSslSocketFactoryHttpClient\" appears 5 times in this file; the first occurrence is on line 202\n.  Issue found: The String literal \"servicesManager\" appears 8 times in this file; the first occurrence is on line 160\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: The String literal \"test\" appears 4 times in this file; the first occurrence is on line 64\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: The String literal \"test\" appears 4 times in this file; the first occurrence is on line 64\n.  Issue found: The String literal \"test\" appears 4 times in this file; the first occurrence is on line 64\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: Avoid unused private fields such as 'ANSI_WHITE'.\n.  Issue found: Avoid unused private fields such as 'ANSI_PURPLE'.\n.  Issue found: Avoid unused private fields such as 'ANSI_BLUE'.\n.  Issue found: Avoid unused private fields such as 'ANSI_GREEN'.\n.  Issue found: Avoid unused private fields such as 'ANSI_YELLOW'.\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: The String literal \"test\" appears 4 times in this file; the first occurrence is on line 64\n.  Issue found: The String literal \"test\" appears 4 times in this file; the first occurrence is on line 64\n.  Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: 'array initialization' child have incorrect indentation level 20, expected level should be 16.\n.  Issue found: The String literal \"serviceRegistryDao\" appears 5 times in this file; the first occurrence is on line 46\n.  Issue found: Avoid unused imports such as 'org.apereo.cas.configuration.support.Beans'\n.  Issue found: This abstract class does not have any abstract methods\n.  Issue found: Switch statements should have a default label\n.  Issue found: Parameter cf should be final.\n.  Issue found: Parameter passwordAttributeName should be final.\n.  Issue found: 'lambda arguments' have incorrect indentation level 16, expected level should be 12.\n.  Issue found: The String literal \"value2\" appears 4 times in this file; the first occurrence is on line 59\n.  Issue found: The String literal \"value1\" appears 5 times in this file; the first occurrence is on line 38\n.  Issue found: The String literal \"principalId\" appears 5 times in this file; the first occurrence is on line 40\n.  Issue found: The String literal \"attr2\" appears 5 times in this file; the first occurrence is on line 52\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'member def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'if' child have incorrect indentation level 24, expected level should be 12.\n.  Issue found: 'if' child have incorrect indentation level 32, expected level should be 16.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'if' have incorrect indentation level 24, expected level should be 12.\n.  Issue found: 'catch' child have incorrect indentation level 24, expected level should be 12.\n.  Issue found: 'method def rcurly' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'if' child have incorrect indentation level 24, expected level should be 12.\n.  Issue found: 'method def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'method def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'member def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'if' have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'if' have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'if rcurly' have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'if' have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'member def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: Avoid unused private fields such as 'LOGGER'.\n.  Issue found:  tag should be placed immediately before the first word, with no space after.\n.  Issue found: The String literal \"${host.name:cas01.example.org}\" appears 4 times in this file; the first occurrence is on line 87\n.  Issue found: Avoid throwing raw exception types.\n.  Issue found: Empty line should be followed by  tag on the next line.\n.  Issue found: Ensure you override both equals() and hashCode()\n.  Issue found: Ensure you override both equals() and hashCode()\n.  Issue found: Parameter ticketId should be final.\n.  Issue found: Parameter client should be final.\n.  Issue found: Parameter ticketId should be final.\n.  Issue found: Parameter ticket should be final.\n.  Issue found: 'static' modifier out of order with the JLS suggestions.\n.  Issue found: Parameter ticket should be final.\n.  Issue found: Use explicit scoping instead of the default package private level\n.  Issue found: The String literal \"TEST\" appears 12 times in this file; the first occurrence is on line 56\n.  Issue found: The String literal \"Exception caught.  None expected.\" appears 4 times in this file; the first occurrence is on line 70\n.  Issue found: The String literal \"Caught an exception. But no exception should have been thrown.\" appears 8 times in this file; the first occurrence is on line 60\n.  Issue found: The String literal \"TGT\" appears 4 times in this file; the first occurrence is on line 219\n.  Issue found: 'method def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'member def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'method def modifier' have incorrect indentation level 8, expected level should be 4.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8.\n.  Issue found: 'method def modifier' have incorrect indentation level 16, expected level should be 8.\n.  Issue found: Parameter maxActive should be final.\n.  Issue found: Parameter maxWait should be final.\n.  Issue found: Parameter maxIdle should be final.\n.  Issue found: Parameter minIdle should be final.\n.  Issue found: Parameter maxActive should be final.\n.  Issue found: Parameter maxWait should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter maxIdle should be final.\n.  Issue found: Parameter minIdle should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter ticketId should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter ticketId should be final.\n.  Issue found: Parameter ticketId should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: 'array initialization' child have incorrect indentation level 16, expected level should be 12.\n.  Issue found: Parameter pool should be final.\n.  Issue found: Parameter port should be final.\n.  Issue found: Parameter database should be final.\n.  Issue found: Parameter host should be final.\n.  Issue found: Parameter timeout should be final.\n.  Issue found: Parameter password should be final.\n.  Issue found: Parameter connectionFactory should be final.\n.  Issue found: The String literal \"ST1\" appears 6 times in this file; the first occurrence is on line 252\n.  Issue found: The String literal \"TGT\" appears 5 times in this file; the first occurrence is on line 44\n.  Issue found: These nested if statements could be combined\n.  Issue found: The String literal \"psw0\" appears 9 times in this file; the first occurrence is on line 115\n.  Issue found: At-clauses have to appear in the order '[@author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated]'..  Issue found: Avoid long parameter lists..  Issue found: 'lambda arguments' have incorrect indentation level 20, expected level should be 16..  Issue found: The String literal \"test\" appears 5 times in this file; the first occurrence is on line 38.  Issue found: The String literal \"31415\" appears 5 times in this file; the first occurrence is on line 89.  Issue found: Parameter host should be final..  Issue found: Parameter pool should be final..  Issue found: Parameter port should be final..  Issue found: Parameter timeout should be final..  Issue found: Parameter database should be final..  Issue found: Parameter password should be final..  Issue found: Parameter redis should be final..  Issue found: The String literal \"No redis client is configured.\" appears 4 times in this file; the first occurrence is on line 49.  Issue found: Parameter connectionFactory should be final..  Issue found: The String literal \"Caught an exception. But no exception should have been thrown.\" appears 8 times in this file; the first occurrence is on line 80.  Issue found: The String literal \"TEST\" appears 12 times in this file; the first occurrence is on line 76.  Issue found: The String literal \"TGT\" appears 8 times in this file; the first occurrence is on line 239.  Issue found: The String literal \"Exception caught.  None expected.\" appears 4 times in this file; the first occurrence is on line 90.  Issue found: The String literal \"ST1\" appears 6 times in this file; the first occurrence is on line 246.  Issue found: The String literal \"attr1\" appears 5 times in this file; the first occurrence is on line 77.  Issue found: The method doAuthentication() has an NPath complexity of 522.  Issue found: Avoid unused imports such as 'org.apereo.cas.authentication.principal.Principal'.  Issue found: Avoid unused imports such as 'org.apereo.cas.authentication.principal.DefaultPrincipalFactory'.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: Avoid unused local variables such as 'p'..  Issue found: Avoid unused local variables such as 'parent'..  Issue found: ')' is preceded with whitespace..  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: 'lambda arguments' have incorrect indentation level 16, expected level should be 12..  Issue found: The String literal \"testAttribute\" appears 4 times in this file; the first occurrence is on line 71.  Issue found: Avoid throwing raw exception types..  Issue found: 'else rcurly' have incorrect indentation level 24, expected level should be 16..  Issue found: 'if' child have incorrect indentation level 32, expected level should be 20..  Issue found: 'if' have incorrect indentation level 24, expected level should be 16..  Issue found: 'block' child have incorrect indentation level 24, expected level should be 16..  Issue found: Use of !important.  Issue found: Strings must use doublequote. (quotes).  Issue found: Use of !important.  Issue found: Use of !important.  Issue found: Avoid long parameter lists..  Issue found: Avoid long parameter lists..  Issue found: Avoid long parameter lists..  Issue found: Avoid long parameter lists..  Issue found: 'while' child have incorrect indentation level 13, expected level should be 12..  Issue found: 'array initialization' child have incorrect indentation level 16, expected level should be 12..  Issue found: 'if' child have incorrect indentation level 11, expected level should be 12..  Issue found: Avoid unused local variables such as 'cred'..  Issue found: 'loadjQueryUI' was used before it was defined. (no-use-before-define).  Issue found: 'loadjQueryCookies' was used before it was defined. (no-use-before-define).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: 'resourceLoadedSuccessfully' was used before it was defined. (no-use-before-define).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Expected '!==' and instead saw '!='. (eqeqeq).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Expected method shorthand. (object-shorthand).  Issue found: Expected method shorthand. (object-shorthand).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Avoid unused imports such as 'java.io.IOException'.  Issue found: Avoid unused imports such as 'org.springframework.data.util.StreamUtils'.  Issue found: Avoid unused imports such as 'org.springframework.core.io.support.PropertiesLoaderSupport'.  Issue found: Avoid unused imports such as 'java.io.UncheckedIOException'.  Issue found: Avoid unused imports such as 'org.springframework.util.ResourceUtils'.  Issue found: Avoid unused imports such as 'org.springframework.beans.factory.annotation.Qualifier'.  Issue found: Avoid unused imports such as 'org.springframework.beans.factory.annotation.Autowired'.  Issue found: Avoid unused imports such as 'java.util.Properties'.  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Strings must use doublequote. (quotes).  Issue found: Parameter commonNames should be final..  Issue found: Parameter rbacContextId should be final..  Issue found: Parameter name should be final..  Issue found: Avoid unused imports such as 'org.slf4j.LoggerFactory'.  Issue found: Avoid unused imports such as 'org.slf4j.Logger'.  Issue found: Parameter originalPassword should be final..  Issue found: Parameter accessManager should be final..  Issue found: Parameter usernamePasswordCredential should be final..  Issue found: Ensure that resources like this ResultSet object are closed after use.  Issue found: Position literals first in String comparisons.  Issue found: Position literals first in String comparisons.  Issue found: Avoid unused imports such as 'org.apereo.cas.ticket.ServiceTicket'.  Issue found: Avoid long parameter lists..  Issue found: The String literal \"ticketGrantingTicket\" appears 4 times in this file; the first occurrence is on line 110.  Issue found: Position literals first in String comparisons.  Issue found: The String literal \" where id = ?\" appears 4 times in this file; the first occurrence is on line 71.  Issue found: Avoid unused imports such as 'org.apereo.cas.ticket.TicketGrantingTicketImpl'.  Issue found: Avoid unused imports such as 'org.junit.Test'.  Issue found: Avoid unused imports such as 'org.apereo.cas.serializer.JacksonJsonSerializer'.  Issue found: Avoid unused imports such as 'org.junit.Before'.  Issue found: Avoid unused imports such as 'org.apereo.cas.utils.TicketCreatorUtils'.  Issue found: Avoid unused local variables such as 'releasers'..  Issue found: 'block rcurly' have incorrect indentation level 16, expected level should be 12..  Issue found: 'lambda arguments' have incorrect indentation level 16, expected level should be 12..  Issue found: 'lambda arguments' have incorrect indentation level 16, expected level should be 12..  Issue found: 'else rcurly' have incorrect indentation level 20, expected level should be 16..  Issue found: 'block' child have incorrect indentation level 20, expected level should be 16..  Issue found: 'if' have incorrect indentation level 20, expected level should be 16..  Issue found: 'else' child have incorrect indentation level 24, expected level should be 20..  Issue found: 'if rcurly' have incorrect indentation level 20, expected level should be 16..  Issue found: 'if' child have incorrect indentation level 24, expected level should be 20..  Issue found: 'lambda arguments' have incorrect indentation level 16, expected level should be 12..  Issue found: 'lambda arguments' have incorrect indentation level 28, expected level should be 24..  Issue found: 'if' child have incorrect indentation level 10, expected level should be 14..  Issue found: '\"\\nCAS is configured to accept a static list of credentials for authentication. \"' have incorrect indentation level 12, expected level should be 14..  Issue found: 'if' child have incorrect indentation level 10, expected level should be 14..  Issue found: 'method def' child have incorrect indentation level 6, expected level should be 8..  Issue found: 'if' child have incorrect indentation level 10, expected level should be 14..  Issue found: 'method def' child have incorrect indentation level 9, expected level should be 8..  Issue found: Parameter clientType should be final..  Issue found: 'method def modifier' have incorrect indentation level 3, expected level should be 4..  Issue found: 'method def' child have incorrect indentation level 7, expected level should be 8..  Issue found: Avoid unused private fields such as 'LOGGER'..  Issue found: The String literal \" where id = ?\" appears 4 times in this file; the first occurrence is on line 71.  Issue found: Avoid long parameter lists..  Issue found: Ensure that resources like this ResultSet object are closed after use.  Issue found: The String literal \"delete from \" appears 5 times in this file; the first occurrence is on line 64.  Issue found: Expected method shorthand. (object-shorthand).  Issue found: Expected method shorthand. (object-shorthand).  Issue found: Expected method shorthand. (object-shorthand).  Issue found: Avoid unused imports such as 'org.springframework.web.bind.annotation.ResponseStatus'.  Issue found: Missing vendor-prefixed CSS gradients for Firefox 3.6+, Old Webkit (Safari 4+, Chrome)..  Issue found: New exception is thrown in catch block, original stack trace may be lost.  Issue found: JUnit tests should include assert() or fail().  Issue found: JUnit tests should include assert() or fail().  Issue found: JUnit tests should include assert() or fail().  Issue found: Avoid unused private methods such as 'cleanupResources()'..  Issue found: Avoid unused private methods such as 'createMongoClient()'..  Issue found: Avoid unused private fields such as 'LOGGER'..  Issue found: Avoid unnecessary if..then..else statements when returning booleans.  Issue found: 'method def modifier' have incorrect indentation level 20, expected level should be one of the following: 12, 16..  Issue found: 'method def' child have incorrect indentation level 24, expected level should be one of the following: 16, 20..  Issue found: 'if' have incorrect indentation level 24, expected level should be one of the following: 16, 20..  Issue found: 'if' child have incorrect indentation level 28, expected level should be one of the following: 20, 24..  Issue found: 'if rcurly' have incorrect indentation level 24, expected level should be one of the following: 16, 20..  Issue found: 'object def rcurly' have incorrect indentation level 16, expected level should be one of the following: 8, 12..  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y).  Issue found: The String literal \"TGT\" appears 4 times in this file; the first occurrence is on line 83.  Issue found: Avoid throwing raw exception types..  Issue found: Avoid throwing raw exception types..  Issue found: Avoid unused private methods such as 'postConstruct()'..  Issue found: Avoid using implementation types like 'HashSet'; use the interface instead.  Issue found: The String literal \"cas\" appears 4 times in this file; the first occurrence is on line 144.  Issue found: The String literal \"phone\" appears 4 times in this file; the first occurrence is on line 109.  Issue found: Avoid unnecessary if..then..else statements when returning booleans.  Issue found: These nested if statements could be combined.  Issue found: 'ctor def' child have incorrect indentation level 16, expected level should be 8..  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: missing whitespace.  Issue found: Missing semicolon.  Issue found: expected nospace before colon in call-signature.  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: Missing semicolon.  Issue found: 'method def' child have incorrect indentation level 16, expected level should be 8..  Issue found: 'method def rcurly' have incorrect indentation level 8, expected level should be 4..  Issue found: Avoid unused imports such as 'org.apereo.cas.services.RegisteredService.LogoutType'.  Issue found: Missing semicolon.  Issue found: The String literal \"casuser\" appears 4 times in this file; the first occurrence is on line 92.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Parameter domain should be final..  Issue found: Parameter query should be final..  Issue found: Missing semicolon.  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Parameter domain should be final..  Issue found: Assignment of parameter 'domain' is not allowed..  Issue found: Avoid reassigning parameters such as 'domain'.  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: Avoid unused private methods such as 'cleanupResources()'..  Issue found: Avoid unused private methods such as 'createMongoClient()'..  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Avoid unused private fields such as 'id'..  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Redundant 'static' modifier..  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Unexpected token '/' at line 13, col 1..  Issue found: Use of !important.  Issue found: missing whitespace.  Issue found: Missing semicolon.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: Parameter signingCredentialType should be final..  Issue found: '}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally)..  Issue found: ')' is preceded with whitespace..  Issue found: '(' is followed by whitespace..  Issue found: Position literals first in String comparisons.  Issue found: Position literals first in String comparisons.  Issue found: New exception is thrown in catch block, original stack trace may be lost.  Issue found: Use of !important.  Issue found: Unexpected token '/' at line 1, col 1..  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: 'package def' have incorrect indentation level 8, expected level should be 0..  Issue found: missing whitespace.  Issue found: == should be ===.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: == should be ===.  Issue found: Missing semicolon.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: == should be ===.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: != should be !==.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Use of !important.  Issue found: missing whitespace.  Issue found: missing whitespace.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: Array should contain trailing comma..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: Parameter value should be final..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be 8..  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Avoid unused imports such as 'java.net.HttpURLConnection'.  Issue found: Avoid unused imports such as 'org.apereo.cas.util.serialization.AbstractJacksonBackedStringSerializer'.  Issue found: Avoid unused imports such as 'org.apereo.cas.util.http.HttpClient'.  Issue found: Avoid unused imports such as 'org.apereo.cas.util.http.HttpMessage'.  Issue found: Avoid printStackTrace(); use a logger call instead..  Issue found: Avoid unused imports such as 'java.lang.reflect.Array'.  Issue found: Avoid unused imports such as 'java.io.InputStreamReader'.  Issue found: Avoid unused imports such as 'java.io.BufferedReader'.  Issue found: Avoid printStackTrace(); use a logger call instead..  Issue found: Parameter serviceTypes should be final..  Issue found: Parameter providers should be final..  Issue found: 'method def' child have incorrect indentation level 7, expected level should be 8..  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: The method createDiscoveryJoinConfig() has an NPath complexity of 515.  Issue found: Avoid unused method parameters such as 'config'..  Issue found: Avoid unused method parameters such as 'config'..  Issue found: Avoid unused private fields such as 'connectionTimeoutSeconds'..  Issue found: Avoid unused imports such as 'org.apereo.cas.authentication.principal.Service'.  Issue found: Avoid unused imports such as 'org.springframework.webflow.execution.repository.NoSuchFlowExecutionException'.  Issue found: Missing semicolon.  Issue found: Avoid unused imports such as 'org.apereo.cas.services.RegisteredService'.  Issue found: Avoid unused private fields such as 'connectionTimeoutSeconds'..  Issue found: Avoid unused imports such as 'org.apereo.cas.services.RegisteredServiceAccessStrategy'.  Issue found: Avoid unused private fields such as 'LOGGER'..  Issue found: Avoid unused imports such as 'org.apereo.cas.web.support.WebUtils'.  Issue found: Avoid unused method parameters such as 'config'..  Issue found: Avoid unused imports such as 'javax.servlet.http.HttpServletRequest'.  Issue found: Avoid unused imports such as 'org.apereo.cas.services.UnauthorizedServiceException'.  Issue found: Avoid unused imports such as 'org.apache.commons.lang3.StringUtils'.  Issue found: Redundant import from the same package - org.apereo.cas.web.flow.InitialFlowSetupAction..  Issue found: ' should be \".  Issue found: Redundant import from the same package - org.apereo.cas.web.flow.CasWebflowConstants..  Issue found: ' should be \".  Issue found: Avoid unused method parameters such as 'config'..  Issue found: Method names should not start with capital letters.  Issue found: The method createDiscoveryJoinConfig() has an NPath complexity of 515.  Issue found: Parameter casProperties should be final..  Issue found: Possible unsafe assignment to a non-final static field in a constructor..  Issue found: 'case' child have incorrect indentation level 8, expected level should be 12..  Issue found: Avoid assignments in operands.  Issue found: The String literal \"truststore.jks\" appears 5 times in this file; the first occurrence is on line 40.  Issue found: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be one of the following: 8, 50, 52..  Issue found: 'array initialization' child have incorrect indentation level 24, expected level should be 20..  Issue found: 'catch' child have incorrect indentation level 11, expected level should be 12..  Issue found: 'array initialization' child have incorrect indentation level 16, expected level should be 12..  Issue found: Redundant 'final' modifier..  Issue found: Redundant 'final' modifier..  Issue found: 'method def' child have incorrect indentation level 6, expected level should be 8..  Issue found: Avoid unused private fields such as 'LOGGER'..  Issue found: 'array initialization' child have incorrect indentation level 12, expected level should be one of the following: 8, 56, 58..  Issue found: The String literal \"LOGIN\" appears 10 times in this file; the first occurrence is on line 72.  Issue found: Ensure you override both equals() and hashCode().  Issue found: Redundant 'final' modifier..  Issue found: The String literal \"attr2\" appears 4 times in this file; the first occurrence is on line 61.  Issue found: Redundant 'final' modifier..  Issue found: JUnit tests should include assert() or fail().  Issue found: Unnecessary parentheses around expression..  Issue found: 'block' child have incorrect indentation level 12, expected level should be 16..  Issue found: The String literal \"${host.name:cas01.example.org}\" appears 4 times in this file; the first occurrence is on line 150.  Issue found: You may have misspelled a JUnit framework method (setUp or tearDown).  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: New exception is thrown in catch block, original stack trace may be lost.  Issue found: Avoid unused imports such as 'org.apereo.cas.services.UnauthorizedServiceException'.  Issue found: Avoid unused imports such as 'org.apache.commons.lang3.StringUtils'.  Issue found: Avoid unused private fields such as 'LOGGER'..  Issue found: Avoid unused imports such as 'org.apereo.cas.authentication.principal.Service'.  Issue found: Redundant import from the same package - org.apereo.cas.web.flow.CasWebflowConstants..  Issue found: Method names should not start with capital letters.  Issue found: Avoid unused imports such as 'org.apereo.cas.services.RegisteredService'.  Issue found: Avoid unused imports such as 'javax.servlet.http.HttpServletRequest'.  Issue found: Avoid unused imports such as 'org.apereo.cas.authentication.principal.WebApplicationService'.  Issue found: Avoid unused imports such as 'org.apereo.cas.services.RegisteredServiceAccessStrategy'.  Issue found: Redundant import from the same package - org.apereo.cas.web.flow.InitialFlowSetupAction..  Issue found: Avoid unused imports such as 'org.apereo.cas.web.support.WebUtils'.  Issue found: Avoid unused imports such as 'org.springframework.webflow.execution.repository.NoSuchFlowExecutionException'.  Issue found: The method authenticate() has an NPath complexity of 5632.  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Avoid unused private fields such as 'servicesManager'..  Issue found: Use of !important.  Issue found: Expected RBRACE at line 37, col 3..  Issue found: Use of !important.  Issue found: Expected RBRACE at line 14, col 3..  Issue found: Use of !important.  Issue found: Use of !important.  Issue found: Use of !important.  Issue found: Expected RBRACE at line 32, col 3..  Issue found: Expected RBRACE at line 12, col 3..  Issue found: Expected RBRACE at line 21, col 3..  Issue found: Expected RBRACE at line 35, col 3..  Issue found: Use of !important.  Issue found: Expected RBRACE at line 10, col 3..  Issue found: Expected RBRACE at line 24, col 3..  Issue found: Expected RBRACE at line 20, col 3..  Issue found: Expected RBRACE at line 26, col 3..  Issue found: Use of !important.  Issue found: Expected RBRACE at line 30, col 3..  Issue found: Expected RBRACE at line 11, col 3..  Issue found: Expected RBRACE at line 31, col 3..  Issue found: Expected RBRACE at line 16, col 3..  Issue found: Expected RBRACE at line 25, col 3..  Issue found: Expected RBRACE at line 22, col 3..  Issue found: Expected RBRACE at line 27, col 3..  Issue found: Expected RBRACE at line 9, col 3..  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Avoid unused local variables such as 'p'..  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: ')' is preceded with whitespace..  Issue found: Avoid unnecessary constructors - the compiler will generate these for you.  Issue found: Avoid unused local variables such as 'parent'..  Issue found: Avoid long parameter lists..  Issue found: Avoid long parameter lists..  Issue found: The String literal \"casuser\" appears 4 times in this file; the first occurrence is on line 49.  Issue found: '}' has incorrect indentation level 0, expected level should be 4..  Issue found: Singleton is not thread safe.  Issue found: The field name indicates a constant but its modifiers do not.  Issue found: Use explicit scoping instead of the default package private level.  Issue found: Avoid unused method parameters such as 'config'..  Issue found: The method createDiscoveryJoinConfig() has an NPath complexity of 515.  Issue found: ' should be \".  Issue found: ' should be \".  Issue found: Missing semicolon.  Issue found: Avoid unused method parameters such as 'config'..  Issue found: Avoid unused private fields such as 'connectionTimeoutSeconds'..  Issue found: Avoid unused private methods such as 'newNoSqlEntityManagerFactoryBean(JpaConfigDataHolder,AbstractJpaProperties)'..  Issue found: Avoid unused private methods such as 'newNoSqlEntityManagerFactoryBean(JpaConfigDataHolder,AbstractJpaProperties)'..  Issue found: Parameter authnRequestExtensions should be final..  Issue found: Parameter authnRequestExtensions should be final..  Issue found: 'try' has incorrect indentation level 24, expected level should be 8..  Issue found: Redundant import from the same package - org.apereo.cas.services.web.ServiceThemeResolver..  Issue found: 'if' has incorrect indentation level 32, expected level should be 12..  Issue found: 'ctor def' child has incorrect indentation level 16, expected level should be 8..  Issue found: 'ctor def rcurly' has incorrect indentation level 8, expected level should be 4..  Issue found: ')' is preceded with whitespace..  Issue found: 'if' has incorrect indentation level 48, expected level should be 20..  Issue found: 'try' child has incorrect indentation level 32, expected level should be 12..  Issue found: Avoid unused imports such as 'java.util.Locale'.  Issue found: 'if' has incorrect indentation level 48, expected level should be 20..  Issue found: 'method def' child has incorrect indentation level 16, expected level should be 8..  Issue found: Avoid unused imports such as 'org.apereo.cas.support.oauth.OAuth20Constants.CLIENT_ID'.  Issue found: 'if' child has incorrect indentation level 48, expected level should be 20..  Issue found: Avoid unused imports such as 'java.util.ResourceBundle'.  Issue found: 'try' child has incorrect indentation level 32, expected level should be 12..  Issue found: 'catch' child has incorrect indentation level 24, expected level should be 12..  Issue found: 'ctor def' child has incorrect indentation level 16, expected level should be 8..  Issue found: 'if' child has incorrect indentation level 48, expected level should be 20..  Issue found: 'if' has incorrect indentation level 40, expected level should be 16..  Issue found: Parameter servicesManager should be final..  Issue found: 'for' has incorrect indentation level 40, expected level should be 16..  Issue found: Avoid unused imports such as 'org.springframework.context.support.ResourceBundleMessageSource'.  Issue found: 'try' child has incorrect indentation level 24, expected level should be 12..  Issue found: 'if' child has incorrect indentation level 40, expected level should be 16..  Issue found: 'try' child has incorrect indentation level 32, expected level should be 12..  Issue found: Missing semicolon.  Issue found: The method createDiscoveryJoinConfig() has an NPath complexity of 515.  Issue found: Avoid unused method parameters such as 'config'..  Issue found: ' should be \".  Issue found: Avoid unused method parameters such as 'config'..  Issue found: ' should be \".  Issue found: Avoid unused private fields such as 'connectionTimeoutSeconds'..  Issue found: 'block rcurly' has incorrect indentation level 8, expected level should be 16..  Issue found: Avoid unused imports such as 'java.util.Collections'.  Issue found: Missing semicolon.  Issue found: Avoid unused private fields such as 'LOGGER'..  Issue found: Avoid unused method parameters such as 'config'..  Issue found: ' should be \".  Issue found: Avoid unused method parameters such as 'metadataResource'..  Issue found: ' should be \".  Issue found: Avoid unused private fields such as 'connectionTimeoutSeconds'..  Issue found: The method createDiscoveryJoinConfig() has an NPath complexity of 515.  Issue found: Avoid unused method parameters such as 'config'..  Issue found: 'if' child has incorrect indentation level 16, expected level should be 12..  Issue found: 'method def' child has incorrect indentation level 16, expected level should be 8..  Issue found: StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable..  Issue found: Prefer StringBuffer over += for concatenating strings.  Issue found: Avoid long parameter lists..  Issue found: Use explicit scoping instead of the default package private level.  Issue found: The String literal \"casuser\" appears 7 times in this file; the first occurrence is on line 29.  Issue found: Avoid unused private methods such as 'oneTimeTokenAuthenticatorTokenRepository()'..  Issue found: Avoid unused local variables such as 'couchDb'..  Issue found: Avoid unused local variables such as 'factory'..  Issue found: Avoid unused private methods such as 'googleAuthenticatorAccountRegistry(IGoogleAuthenticator,CipherExecutor)'..  Issue found: Avoid unused private methods such as 'casEventRepository()'..  Issue found: '}' has incorrect indentation level 0, expected level should be 4..  Issue found: Avoid unused local variables such as 'couchDb'..  Issue found: Avoid unused constructor parameters such as 'id'.. ",
    "lsenecaux": "you are welcome\n. Sorry, but I 'm not a (java) developer.\nI just have a few ideas in development.\nHowever, if I can help, I would do it\n. Perhaps is it not instantiated before the viewLoginForm action state ?\n. Yes, I tried it, and there is a loop when I try to authenticate.\nThen, I add manually the 2 action states, remove the module, and it works\n. Sorry, but I could not.\nI am not at office until September 5th, and I haven't got a dev machine at home.\n. you are welcome\n. I just followed the documentation for version 4.0 and I applied it to the 4.2\n. Yes, I'll try to submit this to the master branch in few days.\nCan I include  your changes (issues #2735, #2740) in branch 5.1.x too ?. Great !. Thanks, that's an honor ;-). See also #2735 . excuse me, I am lost since we can no longer post a issue.. I would just post an issue, not a PR.\nHow can I do ?. Default attributes like \"eppn\", \"givenname\" and \"uid\" are always present in attribute release form.\nHowever, these are not defined in my config file, or are not present in ldap directory (i.e EPPN).. When I set the windowSize, for example to 7, and I use the last possible token, the registry is flushed before the token is really expired. Sorry but I don't have enough time right now.\nAnd I only use Google Auth in my tests.. ",
    "olexus": "This is the level of radius authorization and it could be string by rfc.\n05.07.2016 23:35, Misagh Moayyed \u043f\u0438\u0448\u0435\u0442:\n\nWhat is the NAS identifier you mean to use that requires String anyway?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub \nhttps://github.com/apereo/cas/pull/1868#issuecomment-230594749, or \nmute the thread \nhttps://github.com/notifications/unsubscribe/AFbzRA1at0ZO-It4Yj2_vAjdokI-goVPks5qSsABgaJpZM4JFJqE.\n. \n",
    "nagai-takayuki": "The patch I wrote was for 5.0.0.M2, and could not pass travis test for master branch.\n. Wait for a moment. I can write a new one, but I need to set up a test environment for cas-5.0.0.M3 to check if radius-mfa really works with my patch.\n. ",
    "wcrowell": "Argh, my bad.  Give me 5 seconds and I'll issue again.\n. The build failed though because of some checkstyle issues.  Should I fix?\n. I think I have all of the checkstyle issues fixed, but I am getting warnings on a few classes (e.g. org.jasig.cas.ticket.ServiceTicketImpl and org.jasig.cas.ticket.TicketGrantingTicketImpl that declared an equals and not a hashCode function.  I will not be able to fix some of these because these classes inherit from org.jasig.cas.ticket.AbtractTicket which declares hashCode as final method.  I could remove the final keyword, but I am not sure that is something you want.\nI noticed there are sometimes failures in org.jasig.cas.ticket.proxy.support.Cas20ProxyHandlerTests, but I do not believe it is related to any of my changes.  I think this test makes a call to Google's site.  I am assuming this is ok to ignore.\nI will start taking a look at the Couchbase Lite Java Listener again tomorrow.\n. My cas-functional-tests all do pass.  I am going to check those into the 5.0.x branch of: https://github.com/wcrowell/cas-functional-tests\n. Yes, I can do that.  One thing I noticed in the unit tests is that when you create a TGT and then an ST off it and then a PGT, the call to deleteTicket is 2.  I started debugging through it last night and saw the same thing.  The PGT ends up being deleted already from the cache.  I noticed this with the EHCache ticket registry tests.  Just odd.\n. There is still something that does not look right here.  I am continuing to look at this.  \nIn this test I ran there should be 4 deleted tickets but the log shows 3.  The 4 tickets are:\nPT-2-dXQFicsSO9Q1se4eQcRV-cas01.example.org\nPGT-******_2BYKAaXTBc-cas01.example.org\nTGT-*_*******uHyxQxEgK2-cas01.example.org\nST-1-KJD6gJAwUokZriRtsFJP-cas01.example.org\nLog:\n2016-08-29 09:19:24,294 DEBUG [org.jasig.cas.ticket.registry.TicketRegistryCleaner] - <Cleaning up expired service ticket [PT-2-dXQFicsSO9Q1se4eQcRV-cas01.example.org]>\n2016-08-29 09:19:24,294 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Attempting to retrieve ticket [PT-2-dXQFicsSO9Q1se4eQcRV-cas01.example.org]>\n2016-08-29 09:19:24,294 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Ticket [PT-2-dXQFicsSO9Q1se4eQcRV-cas01.example.org] found in registry.>\n2016-08-29 09:19:24,294 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Removing ticket [PT-2-dXQFicsSO9Q1se4eQcRV-cas01.example.org] from the registry.>\n2016-08-29 09:19:24,294 DEBUG [org.jasig.cas.ticket.registry.TicketRegistryCleaner] - <Cleaning up expired ticket-granting ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org]>\n2016-08-29 09:19:24,307 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Attempting to retrieve ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org]>\n2016-08-29 09:19:24,307 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org] found in registry.>\n2016-08-29 09:19:24,307 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Removing proxy-granting ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org]>\n2016-08-29 09:19:24,307 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Removing children of ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org] from the registry.>\n2016-08-29 09:19:24,307 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Unable to remove ticket [PT-2-dXQFicsSO9Q1se4eQcRV-cas01.example.org]>\n2016-08-29 09:19:24,307 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Removing ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org] from the registry.>\n2016-08-29 09:19:24,308 DEBUG [org.jasig.cas.ticket.registry.TicketRegistryCleaner] - <Cleaning up expired ticket-granting ticket [TGT-**********************************************uHyxQxEgK2-cas01.example.org]>\n2016-08-29 09:19:24,309 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Attempting to retrieve ticket [TGT-**********************************************uHyxQxEgK2-cas01.example.org]>\n2016-08-29 09:19:24,309 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Ticket [TGT-**********************************************uHyxQxEgK2-cas01.example.org] found in registry.>\n2016-08-29 09:19:24,309 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Removing children of ticket [TGT-**********************************************uHyxQxEgK2-cas01.example.org] from the registry.>\n2016-08-29 09:19:24,309 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Unable to remove ticket [ST-1-KJD6gJAwUokZriRtsFJP-cas01.example.org]>\n2016-08-29 09:19:24,309 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Attempting to retrieve ticket [PGT-**********************************************2BYKAaXTBc-cas01.example.org]>\n2016-08-29 09:19:24,309 DEBUG [org.jasig.cas.ticket.registry.DefaultTicketRegistry] - <Removing ticket [TGT-**********************************************uHyxQxEgK2-cas01.example.org] from the registry.>\n2016-08-29 09:19:24,309 INFO [org.jasig.cas.ticket.registry.TicketRegistryCleaner] - <3 expired tickets found and removed.>\n. Ok, I think I see what is happening.  The Proxy Granting Tickets are not included in the final total because they are not separate entries in the cache implementation.  They are part of the Service Ticket.  Service Tickets and TGTs are separate entries.  I can increment the deleted ticket count when I encounter a Proxy Granting Ticket if you want.  Let me know.\n. Will do.\n. Fixed.\n. Did I mess this one up?  I believe I set it to merge with master.\n. That is odd.  That endpoint worked when I submitted the PR, and I just tested it again.  I am getting the same message as you are.  I will check on it.\n. Yes, you are correct.  My mistake.  I will fix.  Thanks!\n. ",
    "izerui": "Ok, I will try to fixed .\n. Which one I should be added to the branch ?I didn't see the doc about cas5 branch , Later I will add \ud83d\udc4d \n. Ok, I see !\n. i have add some docs , please review!\n. ok. I closed it, and in #2233 opened again\nthanks!. I have submitted the test case \uff0c  RedisTicketRegistryTests \n. ",
    "netwolfuk": "Great. Glad to help - even if just a little bit.\n. Great. Glad to help - even if just a little bit.\n. Oops. Thanks for finding that. \n. ",
    "marcoleong": "I made a mistake on closing it. This changes are valid\n. ",
    "thinkfull": "i want merge code from orignal!\n. ",
    "marcmos": "I just checked out this particular file to commit a4116d3b7971c389e250f74df87534d374b49ea7 (you can check its contents here). I'm not sure whether this answers your question.\n. I just checked out this particular file to commit a4116d3b7971c389e250f74df87534d374b49ea7 (you can check its contents here). I'm not sure whether this answers your question.\n. I have just noticed that other files in this directory have --%> comment-closing tag left unbalanced. Don't you think those should be removed too?\n. I have just noticed that other files in this directory have --%> comment-closing tag left unbalanced. Don't you think those should be removed too?\n. Removed in eebc2909ee75a40a2105c75c067b22015ada9f54.\n. ",
    "marcinroman": "Fixes bug introduced in bcf7365f72e9bb4264e74c07a8b9fec6846c519d .\n. ",
    "DavidRG13": "We are using our own TicketRegistry that stores tickets in Cassandra \n. It should be tested by everyone that introduce a new implementation of any of the interfaces Tickest are waiting. I think this should be tested in the module of the implementation, what do you think?\nI will add tests for the current implementations that verify the serialization works. \nAs another test, I would like to test the serialization of tickets with the most common Principal, Authentication, ... implementations, do you know which one they are?\n. All the changes needed for the JSON serialization support and the changes requested are done.\nCould you please review this?\nWe'll create a separate branch for the cassandra-ticket-registry\n. Yes, we have. branch cassandra-ticket-registry on our fork. \n. We are adding tests to it, trying to make cassandra-unit (https://github.com/jsevellec/cassandra-unit) work.\nQuick question, for not-inmemory ticket/services registries, how do you test them? Do you have a runing instance of MongoBD for example?\nWe think that having an embedded Cassandra is a must, as you don't need to install it to run a build.\n. Hi,\nThis is ready to be reviewed.\nI had a look into travis and the reason is the same I'm having locally, how can we solve that?\n. I did it already, but the bot seems not to refresh it, am I missing something?\n. I added tests for the CassandraDao class where the ticket registry delegates the storage calls, but maybe I should add some tests for the ticket registry itself, is that what you mean?\n. Given the Codacy errors, how do you guys test interactions?\n. hey @mmoayyed , if we remove the ExpirationCalculator how could we know a ticket's expiration date?\n. This can be reviewed and merged if everything is fine\n. Some changes done. Please let me know what remains.\nI don't know how to fix the build error. When it happens in local I commented out some gradle lines . Thanks a lot @mmoayyed , fixed all the Cassandra dependencies but now :support:cas-server-support-saml-core has the same error\nAny suggestion to fix the codacy error? Just wrote it like List.java. Did you have any chance to review this?. Could we please give this a higher priority?\nLet me know what's standing, and I'll try to sort it out asap. @mmoayyed:\n\nmaster has been merged\nwhich commits?\nAlready testing against an embedded Cassandra, using CassandraUnit\nwhere should we write the docs?. 2. but if I squash the commits I need to create another remote branch, right? maybe I'm missing something. I think build should be fine, apart from the dependencies error. I can't see org.apache.ant on the output, are we sure is caused by this module?. @mmoayyed, docs finished, please let me know your opinion\n\nThanks!. @mmoayyed how should I declare an utility class? Using final makes checkstyle fail, not using final too . @mmoayyed please do the changes you consider. Hi @mmoayyed, let me know if I could help. Hi @mmoayyed,\nI had a look into this and worked around this issue:\n- In https://github.com/akka/apps/blob/master/akka-cluster-testapp/sigar/ you can find the needed .so files\n- Add the libsigar library to java.libraty.path (you can see default values for each OS in http://stackoverflow.com/questions/20038789/default-java-library-path)\nAsked the creators of the cassandra test library: https://github.com/jsevellec/cassandra-unit/issues/225\nStill getting the exception:\nhttp://stackoverflow.com/questions/20038789/default-java-library-path. The other exception seems to be versions related (http://stackoverflow.com/questions/7076414/java-lang-illegalaccesserror-tried-to-access-method).\nCould we force gradle to pick the versions CassandraUnit needs? . @dima767 I would like to, but I saw there checkstyle rules that doesn't allow it. Maybe we should create another thread to talk about it, and specify further steps.\n@mmoayyed sure, I'll review it and fix it\n. From my investigations, Maps can have a comparator of the same type as the Key\nProbably the best solution is to have 2 collections (see next commit)\n- map, for accessing by id\n- and ordered collection by evaluation order that is not recreated but adding or removing services\nFYI, we create around 1K ST per minute on IDLE, and we modify aour registered services twice a month the most.\n. I think build fail is not related to this change\n. Totally my fault... forgot that it's accessed concurrently...\nBuilding fine locally\n. My problem is that when createPattern() is called, the pattern is compiled twice\n. Once on the isValidRegex and another on the createPattern\n. Cool, already created a method for that.\nBut, I think that's better to return a non valid pattern than returning an empty. No checks for empty needed, if it's not valid it wouldn't match. https://en.wikipedia.org/wiki/Null_Object_pattern\n. Please review this, so I can do any change if needed and continue improving the product ;). @mmoayyed, that's interesting, this morning with a different PC it master was failing for the same reason and I thought that it was some configuration problem, but now master is failing with error:\n\"null value in entry: archivePath=null\"\nany ideas?\nIt doesn't make sense this errors, I didn't change any test. Yeah. As far as I know, @RequestMapping if doesn't specify a method, creates endpoints for all the HTTP methods. So, I created the rule looking for that methods and replaced with the \"new\" annotations that @RequestMappings with only 1 HTTP method specified\nJust to be sure, could the rule match anything not related with this? I mean, what about changing the regex to something like @RequestMapping.*method = RequestMethod. Yeah, I think that too. Let's stay like this and modify it in the future if needed\n. @mmoayyed could you please confirm that the error has something to do with my changes?\nThanks a lot!. Not sure mate, still getting net.sf.ehcache.CacheException: Problem starting listener for RMICachePeer //95.131.186.35:41001/org.apereo.cas.ticket.TicketCache. Initial cause was Connection refused to host: 95.131.186.35 and rror creating bean with name 'mongoDbEventsRepository': Invocation of init method failed; nested exception is org.springframework.dao.DataAccessResourceFailureException: Timed out after 30000 ms while waiting for a server that matches WritableServerSelector.\nAm I missing any configuration? Also happening in master. Nothing changed mate... Now master is failing because of missing dependencies...\n```\nlocation: class DefaultOAuthCasClientRedirectActionBuilder\n/home/davidrodriguez/dev/casApereo/support/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/OAuthCasClientRedirectActionBuilder.java:24: error: cannot find symbol\n    RedirectAction build(CasClient casClient, WebContext context);\n```\nWill wait until I can build master fine to merge with this and fix it. \nMaybe this failure is related to any spring config, that can't inject typed lists... (I was considering to revert this and do smallest steps). Given that I can't find the reason for this to fail and that doing #2184 I'll touch lot of classes I'm doing this unchecked warning cleaning there, so we can close this.\nWhen #2184 is finished we should review unchecked again, and clean the remainings. Only 1 setter missing, SendTicketGrantingTicketAction.setCreateSsoSessionCookieOnRenewAuthentications, tests fail because of this.\nIf you know how to set that property as false for tests please let me know. Yeah, a lot more...  :) . Don't worry mate, working on another module. I think this error i snot related to the change, is it?. Having an issue with the regex:\nlineNumber: 533; columnNumber: 48; The value of attribute \"value\" associated with an element type \"property\" must not contain the '<' character.\nany ideas?\nFound it!\nI have to scape <> simbols like &lt; and &gt;\n. Please check if I'm right:\nI changed the test as we can't ensure the order of the valid provider. We expect to be resolved as anything except the invalid, right?. When this PR is fine to merge #2212 should be closed as we are not longer using Guava collections.. Build failure not related with the changes, tight?. Removing the message? using just\nThrowables.propagate(e);. Build fail related to the changes?. Looks like it's failing because of some dependency issue, right? I think I didn't change anything related to this error. Still failing... Building fine locally for me, could you please try in local?. Same error than the other PR, please review this carefully as it's the authentication module. @mmoayyed, could you please give me a hand here? Looks like an easy one, but I know nothing about certificates. Hi @mmoayyed, unfortonately not. Given all this conflicts, I guess it's worthy doing it from scratch again. I'll try to find some time this week and finish this. I think failure is not related with the changes. Yeah, all tests passing in local. let's wait for CI to be back. Please add/suggest more test cases if needed.\nAlso, this was used in several places, would it be useful to create a new method in TicketGrantingTicket for this? getRootAuthentication(). All classes implementing TicketGrantingTicket  should implement getRoot(), why not creating the new method there?. tbh, I don't see any benefit on adding the method to a different class than TGTImpl, adding another import...\ntgt.getRoot().getAuthentication() is not that long\nup to you mate, let me know, I'll do the change. lets use the long form :). Hi, \nany idea about the build error? install task failed, pom-default.xml is empty. Anything missing in the module?. Sorry, I messed this up... I deleted the branch to recreate it after a rebase with master\nCould this be reopened?\nAlso, I'm able to run tests because of a missing bean logoutManager could you please help me?. I will create another one (sorry..)\nI think I added the needed dependencies as other ticket registries modules do. @mmoayyed could you please help me here with the missing dependency?\nAlso do not forget to review the expirationCalculation.. Hi @mmoayyed, any news here?. That's what I meant, could you please look at the remaining bits shortly?\nI'll push a fix for the checkstyle errors today. How could we bypass the ToDo comment error?. Do you know how to make Codacy ignore it?. Please have a look to the changes, it will not pass the build, I am working on it. Any ideas on how to fix the build error?. the pom is empty as Gradle is failing before generating it. I am getting this exceptions:\n```\nCaused by: org.gradle.api.UncheckedIOException: Could not write to file '/home/davidrodriguez/dev/casApereo/support/cas-server-support-cassandra-ticket-registry/build/poms/pom-default.xml'.\nCaused by: org.gradle.api.InvalidUserDataException: The configuration to scope mapping is not unique. The following configurations have the same priority: [org.gradle.api.artifacts.maven.Conf2ScopeMapping@3a2b913f, org.gradle.api.artifacts.maven.Conf2ScopeMapping@cf1498fa]\n```\nCould you please give me a hand here? I tried several solutions a nothing worked. Hi @mmoayyed,\nI removed all the non-needed dependencies but I'm still getting the same issue with the pom. Any luck with this? could I help to get this progressed?\n. Done, thank you. @mmoayyed now it's compiling :)\nThanks!!. Hi all, \nI have change this module to use the cassandra-core module for creating the Cluster and Session objects, and also for the properties. . @mmoayyed I can't see the ticket. Don't know if it is because of access permissions, but I get \"ticket not found\" . Looks like the error is not related to the change. Given that right now it returns a Collection, we could just do .stream() and return it.\nIt's not a big change. Of course, it would be a good moment to improve the way registries do the getTickets method ;)\nI think a good starting point would be having a look to all the registries and \"prepare\" for the change. What do you think?. Yeah, I was thinking in something like this:\ndefault Stream<Ticket> getTicketsToBeCleaned() {\n    return getTickets().stream();\n}\nAnd use this getTicketsToBeCleaned() method in the cleaner, what do you think?. That's the same name as the Collection<Ticket> getTickets(), we'll get a same erasure error. Other name?. Yeah, I tried... \nIf you are happy with getTicketsStream I'll add it to the TicketRegistry interface. No more changes right?. Don't worry about it mate, I will take care of it :) . You are totally right, I put it back\n. Is there any reason for not to use a constructor with both fields as parameters and do this PostConstruct check on it?\nIf I'm right, all the field != null checks are not needed since the constraint is applied after construction\n. You're totally right. Added tests for the version in master branch, isValidRegex(\"$$$$\") returns true, seems to be a valid regex, but \"***\" is not. \n. Really? Please let me know which regex matches it. From my understanding, it means 'a' followed by the beginning of a string, which is already started, so it's not possible to match it.\n. I would not like to. I  prefer to keep both of them and let the implementations decide how to do that serialization.\nFrom my point of view, it give us more flexibility. Totally agree, check for types is a code smell, that's why I suggest https://github.com/apereo/cas/issues/2130\nThe point is that we need to know anyhow which table query from the ticket ID. From my perspective, it would be way better to add that methods to the TicketRegistry and let ticket registry implementations override them as they want to. \nFor me creating a new ticket type and have to add new getXYZ method to the registry is not a big deal, each registry has to know how/where store it. Yes please, share your alternatives. For us the NoSqlTicketRegistry was an alternative to the CAS one, as we were testing Riak and Cassandra we created this NoSql registry that receive a DAO.\nFor me there is no problem on merging both classes or maintaining it for futures implementations. Sorry, I didn't get that. \n\"2. Call matches on the service created.\" \nwhat do you want me to pass to that method\n\"3.Check the serviceId. The result should remain to be the same invalid serviceId set to 1. \"\nWhich serviceId?? That method returns a boolean. I added it in AbstractRegisteredServiceTests, let me know if that was the test expected. Yeah, but that are properties from the parent class and I will do it in a separate change. it is not. Should it?. Resolved :)\nAdded the static import just because it's shorter, forgot about the consistency. Just wrote a tests for that. They are, but when deserialized using: List.class as the type, the list is of type ArrayList.\nWe are fine, right?. Probably... just added a commit formatting it ;). I can change if you want to, but I, personally, don't like the way you have to use ratainAll:\nfinal Set<String> difference = new HashSet<>(this.requiredAttributes.keySet());\n        difference.retainAll(principalAttributes.keySet());\nIt looks like 2 separate operations, when it's only 1, for me stream is much clearer. should we do it in a separate PR? just to keep it on topic. #2243 created. not needed else removed\n. using the existing method instead. There are, I was fighting against them for a while.... If I refactor it, you will lose logs, is it fine?. Should we do this in a separate PR? just to be on topic. Done, check if you need more logs. what ever you prefer, choose one and make it the standard. Cool, feel free to assign it to me. @mmoayyed, as you can see in this change, I tried with and without the final modifier. What am I missing?. ahh, that was what I missed.... We basically needs the getExpiredTgts() method for the cleaner. The deleteTicketGrantingTicket could go away. It's difficult as it's on the keyspace where you can declare the replication and many other configurations.Of course we could find a way of doing it, but is it worthy? In any case, I would do it in a future version, \"now you can copy paste this\". That's the version where the errors we were having in the other PR have been fixed. I'm chasing them to release a new version.. so, could we use TicketDefinition as Hazelcast does to specify the table where the ticket will be stored/retrieved?\nI'm not sure if I get it completely, Hazelcast only configure STs and TGTs, right? how are the rest of the tickets configured?\nAlso, I don't see where OIDC or OAuthToken are configured in CasCoreTicketCatalogConfiguration.java. We would like to be able to use different serializers, you could plugin on the configuration class (now that I have extracted that bean as you suggested). Maybe we could make use of the TicketDefinition to see the ticket class, right?. I tried adding it to the build file inside the module, but it seems that it's excluded, as the parent build file says. Any ideas?. Don't think so... I submitted a patch to cassandra-unit, the embedded cassandra project, not to the official cassandra DB project, where the problem is as they expect a logback logger.\nIn my opinion my solution was fine, exclude logback for all the subprojects except cassandra that needs it. Actually I would like to exclude it only for testCompile configuration. Fine, we'll think about it. Let's focus on finishing the other suggestions. I totally agree with you two but, the problem is that there is important configuration at the keyspace level like the replication.\nCurrently we are using CAS with cassandra in a single datacenter and a single keyspace but we are planning to go multi-datacenter. We would have 2 keyspaces, one for TGTs (and all the subtypes) that would be replicated to the others datacenters, and antoher keyspace for STs, not replicated.\nThat's why we implemented the getTgtTable() method, in order to make configurable the keyspace configuration as the table name would be keyspaceName.tableName.\nI guess for any storage system CAS supports the user could configure replication, backups, failover, ... How is it done?. Cool, could you please help me here? As I said, I tried adding the dependency within the module but I didn't work. Just double checking, are we keeping the Schema definition out of CAS?. I mean that by this approach there is no need to pass applicationEventPublisher all around. Just use the publish consumer that expect an AbstractCasEvent or even better a Supplier<? extends AbstractCasEvent>.\nIf this makes sense, this publish consumer should live somewhere accessible from everywhere. How ToDos comments are created in javadoc? I can't find anything. From my point of view, it should be done in a separate PR, do you agree?. done :). Because a ticket object should be returned not a string, it's fine right?. Currently we this ticket registry doesn't support the deleteAll operation and I did this in order to make test pass (I know this is awful... but I saw ticket registry methods that are only used in test scope... a code smell..) \nI could override the test and return 0 here if it's better. Are there any other ticket type that is not a subtype of TGT or ST? I'm dealing with this 2 types just to store in different keyspaces that have different configuration like replication.\nI'm OK removing if stamements, but this logic will remain in a different place. I wrote this for a previous implementation where a specific Cassandra cleaner was in place. Now we are using the default one, so probably this section is not needed. @mmoayyed could you please point me to a ticket registry that uses tables and columns and need to differentiate tickets for storing/retrieving  them in a different way? \nI don't see how to remove ticket type checking when we need to store them in separate tables with different columns.. Hello @mmoayyed and happy new year!\njust had a look to the MongoDB and DynamoDb registries but still have a question. For that 2 registries the way the tickets are stored is the same (id, json) but for Cassandra we need the expiration date for TGTs (and similar) so we need a way to differentiate them.\nprobably we could have this different query saved within the ticketCatalog? how does it sound?. it's for making the cleaner a bit more smart, retrieving from DB just the possible expired tickets.\nThe cleaner will check anyway if the ticket is actually expired or not.\nOtherwise, the cleaner will fetch ALL the tickets, right? for us this is not possible... correct me if I'm wrong,\n- storing creationDate is not optimal as the SELECT * WHERE creationDate < now - 20minutes could return loads of tickets not expired.\n- In the other hand, if you can store and update the ticket by expirationDate, the amount of tickets returned will be smaller. Sounds better, right? I don't see the drawbacks of this. ",
    "pampelix": "Hi, \nWe'd like to propose some improvements for CAS ticket cleaning. \nWe're using CAS in a very large scale (12 application servers, up to 40.000 Tickets per minute) and the default implementation of ticket cleaning isn't doing it for us. Retrieving all tickets with each run of ticket cleaning and checking one by one if it's expired or not doesn't seem a very cautious use of resources. \nAlso, we use Cassandra as database backend and would like to make our implementation of the TicketRegistry available to the community. \nWe'd like to propose some changes to make this more efficient.\n- Ticket interface, instead of having one boolean method \"isExpired\", should have a method \"getExpiryTime\" that calculates the expiry time of the ticket based on the values of timeToLive and timeToIdle. This value can be stored in the database, and depending on the database implementation, a query can be executed that returns only expired tickets. \n- TicketCleaner, instead of retrieving tickets for cleaning by calling the method \"getTickets\" should be calling a method like \"getExpiredTickets\" that in the AbstractTicketRegistry can call \"getTickets\", but depending on the implementation can return a set of tickets that are expired. \nWe'll gladly provide implementations and a pull request if you agree you'll consider adding them to the codebase. \n. Nice, I'll create a new issue and a new branch for that then. \nFYI we're WilliamHill, a UK based sportsbetting company. \nOur current CAS deployment is based on CAS 3.5.2 with some modifications. We use JdbcTicketRegistry in live but are looking forward to switch to our Cassandra implementation soon. \nWe have in total 9 different environments for dev,test,performancetest,disaster recovery and live. \nI think we've been using CAS for about 3 years now... :) \n. We hit a road block with the JSON serialization when it came to GoogleAuthenticator services. \nClass GoogleAccountsServiceResponseBuilder contains java.security.PrivateKey and java.security.PublicKey variables that we cannot modify with the given annotations. \nDo you have an idea what can be done? \n. Hi Misagh,\nI added you as collaborator. Is there anybody else you'd like me to add?\nRegards,\nChristoph\nOn Wed, Oct 26, 2016 at 9:26 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nAlso one other thing: we would like to be able to make adjustments along\nwith you on this changeset and help you out, and not have to ask you to fix\nthis and that. We can do this in 2 ways: you can add us as collaborators on\nyour branch, or we could target this for another branch here other than\nmaster so others can have rights to make changes.\nhttps://github.com/blog/2247-improving-collaboration-with-forks\nhttps://help.github.com/articles/adding-outside-\ncollaborators-to-repositories-in-your-organization/\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2055#issuecomment-256269929, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/APQq8UiZg-1O5l6BvM_KdM3WoS8Ulh4Qks5q3wCxgaJpZM4KaraI\n.\n. \n",
    "rohajda": "i am ok to port it once you are ok with changes.\n. in order to port - should i use same issue or create new?\n. thanks, i will work on port now to master branch\n. We cannot encode it using passwordEncoder (at least in case of * BCryptPasswordEncoder* is used as passwordEncoder ) . passwordEncoder.matches require rawPassword to go as first parameter therefore we cannot encoded \n. password is encoded when it is stored to database. If I understand correctly in this routine we just query and compare password from user with password stored in database and for that we should not use encode and compare strings rather use matches method of PasswordEncoder\n. ok, i will work on it during tomorrow\n. yup, i will do it\n. sure , i will try to fight it first on my own and if no movement i will approach you. I will continue tomorrow.\n. One more thought. If password encoder is used then CAS should use matches method to compare it with encoded value and it does not matter which type of of encoder is used NONE|DEFAULT|STANDARD|BCRYPT . so fix should ensure matches are used always and encoding of password in abstract class should be removed (my opinion). Only cases where there is no passwordEncoder used like for example in QueryAndEncodeDatabaseAuthenticationHandler and there is other routine like digestEncodedPassword should CAS use it instead of passwordEncoder. My personal opinion they should be changed to implement PasswordEncoder as well to unify security and way how to compare password.\nWhat is your opinion?\n. How about to add this to \nuserPass.setUsername(transformedUsername);\n             // encode only if BCRYPT is not used. BCRYPT option should be\n             // handled individually in handlers using matches\n        if(!(this.passwordEncoder instanceof BCryptPasswordEncoder)){\n            userPass.setPassword(this.passwordEncoder.encode(userPass.getPassword()));    \n        }        \n        return authenticateUsernamePasswordInternal(userPass);\nThis way all will work as it is until now and we just need to add routine like matches which i did so any authentication handler can do logic like\nif(! (this.matches(..,..) || <original way of check>)){\n   throw new FailedLoginException(\"Password does not match value on record.\");\n}\nthis way it is minimum impact on existing and we just need to ensure that there is test with BCRYPT for all possible handlers and fix the issue\n. ok, i used same what password encoder is having but i will put more clear name\n. fixed\n. fixed\n. corrected for new tests verifyBCryptSucces and verifyBCryptFail\n. fixed\n. fixed\n. fixed\n. ",
    "philliprower": "I can create the PR for 5.0.x.  I want to build that branch locally so I have this fix to use.. I opened a ticket with Codacy about there report.  @PreDestroy and @PostConstruct methods can be private and should be if your intentions is to encapsulate those lifecycle calls.  I'm aware of no reason why it would be desirable for something other than the container to call those methods.  See JSR 250.\nMy codacy ticket:\nhttps://support.codacy.com/hc/requests/1519. I opened a ticket with Codacy about there report.  @PreDestroy and @PostConstruct methods can be private and should be if your intentions is to encapsulate those lifecycle calls.  I'm aware of no reason why it would be desirable for something other than the container to call those methods.  See JSR 250.\nMy codacy ticket:\nhttps://support.codacy.com/hc/requests/1519. Sorry, I haven't checked this pull request in sometime.  I'll take a look at creating pull requests for the other branches.. Ok.\n. I updated both classes from commons lang to lang3.\n. First time I ever merged with a forked project.  I don't think I did it the ideal way either.  I'll try and see if that works merge with master works but I may need to just drop my fork.  Re fork and create a topic branch with this change.  If I need to no problem I don't want to mess up  commit history in your project.\n. Spring can call the private methods during the appropriate lifecycle time designated by the annotation.. Spring can call the private methods during the appropriate lifecycle time designated by the annotation.. I was addressing vulnerabilities with brute forcing password grant type.  It should also cover brute forcing a code grant too.  I'm struggling to see how authorize path since it redirects to CAS for authentication could be used to get a token, if throttling is configured for CAS authentication too.  I suppose that path could be exploited in a DOS attack.  The /profile path maybe exploited to try to brute force getting a auth token and profile data as well.  That more difficult to exploit given size of the token.  I could see wanting to have different throttling rules with /profile path as this is used to verify the token.  Given stateless nature of apps using OAuth this may happen often.  (I personally don't see how an oauth token isn't just another form of a session id.)\nCommunity should really examine this in detail.  I was trying to plug one hole, but there probably other concerns here.  Honestly, I don't think throttling should be optional.  I think if it is an option it should be possible to disable it but by default it should really be enabled.  Having some reasonable defaults to throttling and having it enabled by default would reduce CAS vulnerability to brute force attacks.. Updated the documentation.. ",
    "petracvv": "Thanks for the merge. I think I'll subscribe to the list at this point; I forgot to check that when looking into this issue.\nI also realized that I had a typo; to include profiles it is spring.profiles.include not spring.profile.include. (http://docs.spring.io/autorepo/docs/spring-boot/current/reference/html/boot-features-profiles.html). Since it's already merged, would you mind making the change? Of course, I can make another pull request if you prefer.\n. Sure thing.. ",
    "Condor70": "I started implementing MFA and the CAS management application an ran into more classes that specify illegal field lengths:\norg.apereo.cas.adaptors.gauth.GoogleAuthenticatorRegistrationRecord\norg.apereo.cas.services.OidcRegisteredService\norg.apereo.cas.support.events.dao.CasEvent\norg.apereo.cas.support.saml.services.SamlRegisteredService\norg.apereo.cas.trusted.authentication.api.MultifactorAuthenticationTrustRecord. ",
    "zebalu": "Thank you!. ",
    "dodok1": "@mmoayyed I will review changes in master and prepare new PR.. Changed place and method of testing as required.. should I provide another PR for 5.1 branch?. OK, actually is that not needed as I have to maintenance either another set of changes for supporting MFA on RSA SecurId on 5.1. . Removed warning, anyway, as I haven't checked all RCx release notes, I lost this information (and several hours).. Changed to proposed wording - anyway, is there way to check implementation? . Unfortunately, there are more aspects of this specific problem:\n- implementation requires deeper analysis - as most MFA webflows require additional data stored on credential (not provided by surrogated one) and potential change could involve a lot of modules\n- for my use case surrogate authentication is only testing tool\n- therefore I don't have enough involvement to develop the change. I can avoid to use that with MFA, anyway it took me some time to investigate reason of stacktrace_\n- therefore it would be beneficial for other implementators avoid such pitfalls\nThere are other bugs involved in surrogate authentication, at least I have found also it not injecting properly into LdapAuthenticator, but it was in older version. Not sure whether it persist, as I overcome that using additional file based directory of superusers.\nI think that another solution would be to mark surrogate module as experimental.\n. Codacy warnings corrected with forced push.. I have realized that this change is working only for Radius MFA, not RADIUS as primary authentication as there is not appropriate webflow handling.\nIdeally I should had possibility to provide the fixed part of password in first screen and if validation will succeed with AccessChallenge, enforce that MFA follow-up screen.. Recommendations are implemented.\nI cannot promise those tests in next weeks, but I will think about it meanwhile. Point me to some example.\nI have actually freeradius server running for test in virtual - not docker, as on windows it is rather clumsy.. ",
    "johnlister": "Hi, apologies I added the changes you requested, but I've struggled to get the build to run successfully locally. If I follow the instructions it builds fine, but if I use the build commands on travis I get a number of failures - either findBugs or checkStyle. These are in completely unrelated modules.\nClearly my local setup is broken somewhere...\nThanks for picking it up - any questions about the behaviour let me know. I totally agree, I put in the basics for what I needed currently, but we have internally been talking about adding allowed time fields, password expiry dates, etc I stopped short of putting those in now as would require more work to generalise the password management side as well. I look forward to seeing what you come up with\n. Definitely, it should be straightforward to implement, just kicking myself I can't get the main branch to build locally.... 5.2.x and master pull requests created . ",
    "yellowcola": "Yes, based on PR I submitted last night.\nhttps://github.com/pac4j/pac4j/pull/819\nOn Fri, Feb 3, 2017 at 12:02 PM, Misagh Moayyed notifications@github.com\nwrote:\n\nThanks. Does pac4j plan on releasing a 1.9.6?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2373#issuecomment-277302854, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAKJas46sZHda0Vwc8MvOIo_BlpkqzDiks5rY12ngaJpZM4L2j_L\n.\n. Got it. Thanks!\n\nOn Fri, Feb 3, 2017 at 12:05 PM, Misagh Moayyed notifications@github.com\nwrote:\n\nGreat. Excellent work. When 1.9.6 is released, please update the PR and we\ncan perfectly merge :)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2373#issuecomment-277303639, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAKJatIFhj_dPAhLhmRIkETWkg_z2v87ks5rY15ggaJpZM4L2j_L\n.\n. Thanks, @leleuj . Thanks, @leleuj . \n",
    "acidjames": "Well i found that a bit confusing because i'm used to browsing docs on github and not on website :). Well i found that a bit confusing because i'm used to browsing docs on github and not on website :). Well thanks for your kind words @mmoayyed, and thanks for this app. We have been using it for more than 10 years at University of Toulouse, France. I'll be reading and probably be testing Oauth any time soon so if i find anything i'll be happy to contribute :). Well thanks for your kind words @mmoayyed, and thanks for this app. We have been using it for more than 10 years at University of Toulouse, France. I'll be reading and probably be testing Oauth any time soon so if i find anything i'll be happy to contribute :). ",
    "raymondBourges": "With this commit:\n\n. ",
    "leebake": "In previous version of CAS 4.2.1 \nhttps://github.com/vt-middleware/ldaptive/blob/v1.1.0/beans/src/main/java/org/ldaptive/beans/spring/NamespaceHandler.java#L278. I think that @maelstr is not right. Creating new connection pool is correct. Please look at line that create search-pool  and then line that create bind-pool. Both is passed to the same Authenticator. \nBelow example from CAS 4.2.1\nldap.pool.minSize=1\nldap.pool.maxSize=10\nLogs: \n\n2017-02-22 09:47:08,182 DEBUG [org.ldaptive.pool.BlockingConnectionPool] - \n...\n2017-02-22 09:47:08,679 DEBUG [org.ldaptive.pool.BlockingConnectionPool] - \n\nTwo connections are created\nhttp://screenshooter.net/p/screen/4243267/eufkkcx. Why these configurations have been merged ? SASL implementation did not have the requirement for baseDn. You can not use AUTHENTICATED now because it has the mentioned requirement.\nSee #2374. Not for everything, for AUTHENTICATED. As I mentioned in #2374 \n\nThere may be a case in which every entry in AD is in a different directory, so you can't determine the baseDn\n\nfor AUTHENTICATED also. After a careful analysis, I figure that in my case baseDn is included in url, so I can move it to the baseDn.\nldaps://ldap.example.com:636/dc=example,dc=com\nbaseDn=\nis equal to \nldaps://ldap.example.com:636\nbaseDn=dc=example,dc=com\nSorry for the confusion and @mmoayyed thanks for your question. This allowed us to explain it. Is it not a bug? Why? Now, I can't turn off warning if password expired coming soon. It fix of course, but I wanted to ask, why it is improvement, not a bug? I mean the version. Yes, it will really helps me if it will be a bug and will be released in the next PATCH version. Thank you in advance. Ok, thank you for the explanation. Why the release date is planned for June 23 ?. ",
    "maelstr": "Hi, sorry for my mistake, I do understand now the need for 2 distinct pools. I've been misguided by the unique ldap settings in the cas.properties, shouldn't this two different pools be made more explicit in the configuration file ?. Thinking about it I don't need different pool settings for pool-search / pool-bind (but I don't know if it can be useful for others ?), and defining the LDAP only once is quite convenient, so yes maybe just a note in the docs. ",
    "hdeadman": "This is my first time building any recent version of CAS, I just have had it in Eclipse for the purpose of looking at code and stepping through the debugger (when attached to cas running out of the overlay). I am running \"gradlew.bat install\", I will try your command in the future, I think my build should be done soon. . Yeah I will fix them.\n. I eventually got the CAS build to run after installing node.js, doing the grails install gulp, then manually installing \nnpm install gulp-sass --save-dev\nnpm install gulp-autoprefixer --save-dev\nI still haven't tested it because I am having trouble getting my overlay project to run with the latest cas snapshot and the new spring boot. Doesn't seem to load the org.springframework.boot.loader.WarLauncher \nbut I am not sure why. Have you tried the latest war overlay with cas.version 5.1.0-RC3-SNAPSHOT and springboot.version 1.5.2.RELEASE? . I built snapshot locally and got a little farther but the Tomcat jars don't seem to be getting into the war so the EmbeddedServletContainerFactory isn't being created. My overlay template isn't 100% clean but I am not doing anything to pom.xml other than change cas.version and springboot.version. \njava\n2017-03-10 11:53:59,963 WARN [org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext] -\n <Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Unable to start embedded container; nested exception is org.springframework.context.ApplicationContextException: Unable to start EmbeddedWebApplicationContext due to missing EmbeddedServletContainerFactory bean.>\n2017-03-10 11:53:59,971 WARN [com.ryantenney.metrics.spring.config.annotation.MetricsConfigurerAdapter] - <Problem stopping reporter>\n. I have my own overlay (with same problem) but I am getting the error I posted with a clone of https://github.com/apereo/cas-overlay-template.git. The pom just references:\nxml\n            <groupId>org.apereo.cas</groupId>\n            <artifactId>cas-server-webapp</artifactId>\nNo changes to pom other than: \n    <cas.version>5.1.0-RC3-SNAPSHOT</cas.version>\n    <springboot.version>1.5.2.RELEASE</springboot.version>\n\nI suppose the snapshot is one I built locally rather than pulled from repo but the build completed without errors. \nI do have a copy of bootstrap.properties in src/main/resources (that I had to update) but that shouldn't impact what gets into the war. There are no files in /web-inf/lib-provided, which is previously where the tomcat jars lived along with spring-boot-starter-tomcat*.jar. To your question about embedded tomcat, yes, that is what I am trying to use. I don't use embedded tomcat when running cas in our dev environment and don't plan on using it in production, but I use embedded tomcat when testing locally. . Is there an explanation of the new standalone profile? Previously in 5.0.x I was able to do this:\nspring.cloud.config.server.native.searchLocations=file:./etc/cas/config\nand have config read from an etc folder in my project. That doesn't seem to work anymore even if I enable standalone and native profiles. If I turn on spring.cloud.config.enabled it starts looking for a cloud config server on localhost:8888. . Thanks, that helps. I think the priority of properties vs. yaml might have changed from when spring cloud config was doing it? Before I had application.yml with : \nserver:\n  ssl:\n    keyStore: file:./etc/cas/thekeystore\nbut that was being overridden by the bundled application.properties. I was able to put property in cas.properties but since you bundle properties file in cas.war, would it make sense to have yml files take precedence? . In the docs you say:\nYou are advised to not overlay or otherwise modify the built in application.properties file\nI am just saying that you can't use application.yml to override certain properties in there (since you aren't supposed to include an application.properties to override the whole file). It isn't a big deal b/c you can override it with other things like cas.properties, cas.yml or application-.properties, etc. \nI think in Spring-boot yaml does take precedence over properties but I can't find that documented anywhere and it might just be a coincidence of the order the property sources are loaded in. . The application.yml file I am referring to is in my overlay in src/main/resources so it isn't external. I finally found something on-line that documents the precedence of application.properties vs. application.yaml and I was mistaken, properties files win over yaml. They discuss it towards the end of this issue:\nhttps://github.com/spring-projects/spring-boot/issues/5844\n\"When you run without a profile, the properties in application.properties and application.yml that apply are both normal so it's 10 vs 10 in the list. As a tiebreaker the properties file wins.\". Sorry for continually using this old PR still trying to test, but after adjusting for the new attribute repository config (using ldap  attribute repository to look up x509 user), I am getting this exception after authentication (during tgc generation). I had tgc encryption and signing keys defined but I commented that out to see if they were bad, but I still get error with the generated keys:\n2017-03-10 20:45:37,003 WARN [org.apereo.cas.util.cipher.BaseStringCipherExecutor] - <Secret key for encryption is not defined for [Ticket-granting Cookie]; CAS will attempt to auto-generate the encryption key>\n2017-03-10 20:45:37,013 WARN [org.apereo.cas.util.cipher.BaseStringCipherExecutor] - <Generated encryption key [5wV6wDJ-Qb8sRqhlix7k7cYcfgYhv7E0i5VIbOTt3Fw] of size [256] for [Ticket-granting Cookie]. The generated key MUST be added to CAS settings.>\n2017-03-10 20:45:37,014 WARN [org.apereo.cas.util.cipher.BaseStringCipherExecutor] - <Secret key for signing is not defined for [Ticket-granting Cookie]. CAS will attempt to auto-generate the signing key>\n2017-03-10 20:45:37,015 WARN [org.apereo.cas.util.cipher.BaseStringCipherExecutor] - <Generated signing key [7oDNgABH0LvM5-mwlIy4PRDpaV8fvACBcF2XIUpXGlMQqT1fgbX-kMd0cUraItzfH_JJ1QYN9tqaVZbU30s2Lg] of size [512] for [Ticket-granting Cookie]. The generated key MUST be added to CAS settings.>\n2017-03-10 20:47:28,096 WARN [org.apereo.cas.web.flow.resolver.impl.InitialAuthenticationAttemptWebflowEventResolver] - <Ensure that you have installed JCE Unlimited Strength Jurisdiction Policy Files. Invalid key for dir with A128CBC-HS256, expected a 256 bit key but a 384 bit key was provided.>\njava.lang.RuntimeException: Ensure that you have installed JCE Unlimited Strength Jurisdiction Policy Files. Invalid key for dir with A128CBC-HS256, expected a 256 bit key but a 384 bit key was provided.\n        at org.apereo.cas.util.cipher.BaseStringCipherExecutor.encryptValue(BaseStringCipherExecutor.java:158) ~[cas-server-core-util-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.util.cipher.BaseStringCipherExecutor.encode(BaseStringCipherExecutor.java:103) ~[cas-server-core-util-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.util.cipher.BaseStringCipherExecutor.encode(BaseStringCipherExecutor.java:28) ~[cas-server-core-util-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]\n        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at com.sun.proxy.$Proxy149.encode(Unknown Source) ~[?:?]\n        at org.apereo.cas.ticket.factory.DefaultTicketGrantingTicketFactory.produceTicketIdentifier(DefaultTicketGrantingTicketFactory.java:85) ~[cas-server-core-tickets-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.ticket.factory.DefaultTicketGrantingTicketFactory.create(DefaultTicketGrantingTicketFactory.java:52) ~[cas-server-core-tickets-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.DefaultCentralAuthenticationService.createTicketGrantingTicket(DefaultCentralAuthenticationService.java:369) ~[cas-server-core-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.DefaultCentralAuthenticationService$$FastClassBySpringCGLIB$$b02e48f2.invoke(<generated>) ~[cas-server-core-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204) ~[spring-core-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:721) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apereo.inspektr.audit.AuditTrailManagementAspect.handleAuditTrail(AuditTrailManagementAspect.java:134) ~[inspektr-audit-1.7.GA.jar!/:1.7.GA]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]\n        at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:629) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:618) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.aspectj.AspectJAroundAdvice.invoke(AspectJAroundAdvice.java:70) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:168) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) ~[spring-tx-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apereo.cas.DefaultCentralAuthenticationService$$EnhancerBySpringCGLIB$$9cbedbad.createTicketGrantingTicket(<generated>) ~[cas-server-core-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]\n        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99) ~[spring-tx-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:282) ~[spring-tx-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) ~[spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at com.sun.proxy.$Proxy151.createTicketGrantingTicket(Unknown Source) ~[?:?]\n        at org.apereo.cas.web.flow.resolver.impl.AbstractCasWebflowEventResolver.grantTicketGrantingTicketToAuthenticationResult(AbstractCasWebflowEventResolver.java:229) ~[cas-server-core-webflow-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.web.flow.resolver.impl.InitialAuthenticationAttemptWebflowEventResolver.resolveInternal(InitialAuthenticationAttemptWebflowEventResolver.java:95) [cas-server-core-webflow-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.web.flow.resolver.impl.AbstractCasWebflowEventResolver.resolve(AbstractCasWebflowEventResolver.java:469) [cas-server-core-webflow-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apereo.cas.web.flow.resolver.impl.AbstractCasWebflowEventResolver.resolveSingle(AbstractCasWebflowEventResolver.java:474) [cas-server-core-webflow-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]\n        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at com.sun.proxy.$Proxy178.resolveSingle(Unknown Source) [?:?]\n        at org.apereo.cas.web.flow.AbstractAuthenticationAction.doExecute(AbstractAuthenticationAction.java:58) [cas-server-core-webflow-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.action.EvaluateAction.doExecute(EvaluateAction.java:77) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.action.AbstractAction.execute(AbstractAction.java:188) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.execution.ActionExecutor.execute(ActionExecutor.java:51) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:101) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.State.enter(State.java:194) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Transition.execute(Transition.java:228) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.State.enter(State.java:194) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Transition.execute(Transition.java:228) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.State.enter(State.java:194) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Transition.execute(Transition.java:228) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.DecisionState.doEnter(DecisionState.java:51) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.State.enter(State.java:194) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Transition.execute(Transition.java:228) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.State.enter(State.java:194) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Transition.execute(Transition.java:228) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.execute(FlowExecutionImpl.java:395) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.execute(RequestControlContextImpl.java:214) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.TransitionableState.handleEvent(TransitionableState.java:116) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Flow.handleEvent(Flow.java:547) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.handleEvent(FlowExecutionImpl.java:390) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.RequestControlContextImpl.handleEvent(RequestControlContextImpl.java:210) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.ActionState.doEnter(ActionState.java:105) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.State.enter(State.java:194) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.Flow.start(Flow.java:527) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:368) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.engine.impl.FlowExecutionImpl.start(FlowExecutionImpl.java:223) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.webflow.executor.FlowExecutorImpl.launchExecution(FlowExecutorImpl.java:140) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_121]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_121]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_121]\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_121]\n        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:333) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213) [spring-aop-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at com.sun.proxy.$Proxy172.launchExecution(Unknown Source) [?:?]\n        at org.springframework.webflow.mvc.servlet.FlowHandlerAdapter.handle(FlowHandlerAdapter.java:263) [spring-webflow-2.4.4.RELEASE.jar!/:2.4.4.RELEASE]\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:687) [javax.servlet-api-3.1.0.jar!/:3.1.0]\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) [spring-webmvc-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [javax.servlet-api-3.1.0.jar!/:3.1.0]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) [tomcat-embed-websocket-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55) [spring-boot-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apereo.cas.web.support.AuthenticationCredentialsLocalBinderClearingFilter.doFilter(AuthenticationCredentialsLocalBinderClearingFilter.java:29) [cas-server-core-web-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apereo.cas.security.RequestParameterPolicyEnforcementFilter.doFilter(RequestParameterPolicyEnforcementFilter.java:261) [cas-server-security-filter-2.0.6.jar!/:2.0.6]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apereo.cas.security.ResponseHeadersEnforcementFilter.doFilter(ResponseHeadersEnforcementFilter.java:238) [cas-server-security-filter-2.0.6.jar!/:2.0.6]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apereo.inspektr.common.web.ClientInfoThreadLocalFilter.doFilter(ClientInfoThreadLocalFilter.java:64) [inspektr-common-1.7.GA.jar!/:1.7.GA]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:108) [spring-boot-actuator-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apereo.cas.logging.web.ThreadContextMDCServletFilter.doFilter(ThreadContextMDCServletFilter.java:90) [cas-server-core-logging-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:105) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:81) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:106) [spring-boot-actuator-1.5.2.RELEASE.jar!/:1.5.2.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.3.7.RELEASE.jar!/:4.3.7.RELEASE]\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:474) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.valves.SSLValve.invoke(SSLValve.java:171) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.valves.AbstractAccessLogValve.invoke(AbstractAccessLogValve.java:624) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.valves.RemoteIpValve.invoke(RemoteIpValve.java:677) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:783) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:798) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1434) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [?:1.8.0_121]\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [?:1.8.0_121]\n        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.5.11.jar!/:8.5.11]\n        at java.lang.Thread.run(Thread.java:745) [?:1.8.0_121]\nCaused by: org.jose4j.lang.InvalidKeyException: Invalid key for dir with A128CBC-HS256, expected a 256 bit key but a 384 bit key was provided.\n        at org.jose4j.jwe.DirectKeyManagementAlgorithm.validateKey(DirectKeyManagementAlgorithm.java:75) ~[jose4j-0.5.4.jar!/:?]\n        at org.jose4j.jwe.DirectKeyManagementAlgorithm.validateEncryptionKey(DirectKeyManagementAlgorithm.java:62) ~[jose4j-0.5.4.jar!/:?]\n        at org.jose4j.jwe.JsonWebEncryption.getCompactSerialization(JsonWebEncryption.java:250) ~[jose4j-0.5.4.jar!/:?]\n        at org.apereo.cas.util.cipher.BaseStringCipherExecutor.encryptValue(BaseStringCipherExecutor.java:155) ~[cas-server-core-util-5.1.0-RC3-SNAPSHOT.jar!/:5.1.0-RC3-SNAPSHOT]. The thing is that bean.setMinimumIdle() is not about timeouts, it is really\nmore of the minimum size. How many idle connections should the pool keep\nopen? I think minimum size is an OK name for the property. The question is\nwhat to do with the maximum idle timeout property which is documented but\nnot used. It is probably the same as the idletimout property.\nOn Thu, Mar 16, 2017 at 9:15 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nbtw Travis is being a bit weird lately, and so don't be alarmed if the PR\nfailed. We'll restart and work together to get it merged of course.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2462#issuecomment-287052890, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKVtV5EdsjqW-c_z1pEEm4206RcaRks5rmTXjgaJpZM4MfRiP\n.\n. I removed maxidletime from all the references in the docs that were jdbc/jpa related, but I also removed it from one ldap related property. I don't see \"maxidletime\" anywhere in the code now so I don't think it's used but if there is any reflection or copying of bean properties from one bean to another (e.g. beanutils.copyproperties) then I could be missing that. . One other thing, I think the hikari datasource ignores any minimum size greater than the max and just sets the min=max. I had maxIdleTime set to 1000 (assuming it was ms) but it was setting the min size of the pool so the connection pool size (min) was equal to the max size for the pool. In my case I had a cas user in postgresql with a connection limit on the database of 30 and I looked into this when I saw an error in the cas logs about it exceeding the connection limit (set in DB). (I had three cas servers running (local and a cluster) and the max pool size was 15).\n\nMight be worth merging to 5.0 branch. . whoops, i will fix, having git problems. I made the updates and squashed the commit. I wasn't sure if the default flow would kick in if there was an unhandled exception but it's probably better to let that go to some global error handler anyway, so I removed it. . @mmoayyed I am getting an error on startup while testing with latest master. It can't find this bean: casCoreEventsConfigEnvironmentConfiguration when it's making the casConfigurationSupportUtilitiesConfiguration bean. Do I need to add cas-server-core-events-configuration to my war or should that be brought in by default?. @mmoayyed Shouldn't CasConfigurationPropertiesEnvironmentManager have some sort of component or bean annotation so it can be autowired? I think that is the bean it can't find. Not sure what I was referring to with those other bean names. \n. Nevermind, i see the bean annotation elsewhere. Will continue to look at my problem... . I see problem, I wasn't running standalone profile on the local server I am trying to test this on. Normally I don't run tomcat locally and just use spring boot for local CAS or maven jetty for other projects. . This worked for me in testing where I defined a resource-ref in web.xml:\n<resource-ref>\n        <res-ref-name>jdbc/casDataSource</res-ref-name>\n        <res-type>javax.sql.DataSource</res-type>\n        <res-auth>Container</res-auth>\n    </resource-ref>\nI had datasource in Tomcat config:\n<Resource name=\"jdbc/casDataSource\"\n   auth=\"Container\"\n   type=\"javax.sql.DataSource\"\n   driverClassName=\"org.postgresql.Driver\"\n   url=\"jdbc:postgresql://casdbpsql.xyz.org:5432/xyz_db\"\n   username=\"cas\"\n   password=\"xyz\"\n   initSQL=\"SET search_path TO cas;\"\n   testWhileIdle=\"true\"\n    testOnBorrow=\"true\"\n    testOnReturn=\"false\"\n    validationQuery=\"select 1\"\n    validationInterval=\"30000\"\n    timeBetweenEvictionRunsMillis=\"30000\"\n    factory=\"org.apache.tomcat.jdbc.pool.DataSourceFactory\"\n    minIdle=\"0\"\n    maxIdle=\"5\"\n    initialSize=\"0\"\n    maxActive=\"20\"\n    maxWait=\"10000\" /> \nAnd I configured JPA ticket registry with \ncas.ticket.registry.jpa.dataSourceName=java:/comp/env/jdbc/casDataSource\nI had to wrap the Tomcat datasource in a HikariDatasource bean or I was getting an error with CGLIB trying to generate a proxy when the datasource was used to get a connection. I don't know why it was generating a proxy, possibly for metrics, but the stack trace was like a book and it had noclassdef and classnotfound for the same spring proxy class, so it seemed something might have trying to do a cglib proxy on a dynamic proxy. Since it is a Hikari datasource no matter what, I didn't really need to rename the method from newHikariDatasource, should I rename it back?\nRight now the code is falling back to trying to create a datasource with other parameters if the datasource doesn't exist in JNDI. Users could probably use profiles to config one way or the other so it would probably be more consistent to just throw IllegalArgumentException if a datasourceName is specified and not found in JNDI. I can change that too. \nThe datasourceName property is different from others because the default is blank, also if you use it, other properties don't apply. Since there was no default/sample value and its used in several places I made the datasourceName a link to a note at the bottom of the page. Is there a better way to handle that? \n. Thanks for the feedback. I left the method renamed to newDataSource and I moved the documentation to where you suggested. I don't know if the container specific examples are useful or if it wouldn't be better to just link to Tomcat and Jetty pages that tell people how to define a datasource. \nI hesitate to rename the property to jndiDataSourceName because I don't know if a resource name and a jndi name are always the same thing. I know with Weblogic app servers you could bind a datasource to a jndi name (e.g. datasource.cas) but then the resource reference from web.xml would need to get mapped to the JNDI name in weblogic.xml with an entry like this:\nweb.xml\n<resource-ref>\n        <res-ref-name>jdbc/casDS</res-ref-name>\n        <res-type>javax.sql.DataSource</res-type>\n        <res-auth>Container</res-auth>\n    </resource-ref>\nweblogic.xml\n<resource-description>\n        <res-ref-name>jdbc/casDS</res-ref-name>\n        <jndi-name>datasource.cas</jndi-name>\n    </resource-description>\nSpring will let you lookup up that dataource with either \njava:/comp/env/jdbc/casDS\nor\ndatasource.cas\nbut I think one is a resource name and one is a jndi name. Maybe other containers don't differentiate but that is why I was trying to use a generic name like dataSourceName since it should work with either the resource reference name or the jndi name. It does seem pretty common to refer to either syntax as a jndi name so if you think it would be clearer I can go ahead and change the name to jndiDataSourceName or maybe dataSourceJndiName. \nLet me know if you want me to make any more changes and I will squash the commits before you merge. \n. I had requested a webjar for editable-table and it looks like he accepted\nit. I will update it the pull request once I can verify it is in maven\ncentral.\nhttps://github.com/webjars/editable-table\nhttps://github.com/webjars/webjars/issues/1590\nI am going to be off-line for rest of day so I will review and respond to\nyour other comments later.\nThanks, Hal\nOn Mon, May 15, 2017 at 11:38 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nThere was no webjar for editabletable js and it was pointing at the master\ncopy of a js file on the github.com cdn. In theory someone could come\nalong to that project and commit something new and CAS deployments would\npick up the new code right away. Since there was no webjar and the project\ndoesn't look like it is going to change anything, I copied the js file into\nCAS.\nNo problem. Could you please create a separate issue for this one please\ntoo? We do need to perhaps find a better alternative and eventually remove\nthe JS file from CAS. For the time being, please also rename the JS file\nlocal to CAS to something more sensible a bit.\nThere was also no webjar for the Gloria Hallelujah font used on the error\npages so I changed the font. I also updated the error pages to be more\nboring. I figured most people can jazz them up on there own with their own\ncompany's personality. I can revert that if you would rather leave them\nalone.\nAll good.\nThe version for each webjar is duplicated in the resource url in the\nmessages.properties entries and in the gradle.properties so if you were to\nupgrade a javascript library you would have to change the version number in\na couple places, but that is potentially fewer places than if the\njavascript file was used in several html files.\nThis is excellent, though I recommend you remove the versions from the\nmessages.properties file. That's not quite the right place for it; Seems\nlike we might need some other file buried within in CAS, sort of, that\nhouses all UI component versions.\nI moved some head.load() stuff out of cas.js and put it into bottom.html.\nI did this to put the CDN urls in something that thyme could generate from\nthe message bundle. As far as I could tell it was working when I did that\nin my overlay but I don't really know what head.load is doing so I can't be\nsure it is still working when done in the bottom.html script block.\nI'll review more thoroughly.\nOne thing I learned about webjars is that there are a couple types. There\nis the classic kind which involves someone using Maven to download a\nlibrary and package it as a webjar. There are also npm and bower webjars\nand I think anyone can create one of those if the javascript library exists\nin npm or bower format. You request a version on the webjar website and I\nthink an automated process creates the webjar and pushes it to maven\ncentral.\nAwesome. Should be something we can do for that local JS file?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2616#issuecomment-301513558, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKQWE4z901WOxZJUaeoBjpV1h0KS3ks5r6HFbgaJpZM4NaQev\n.\n. OK there is a webjar now for editable-table so I updated the pull request to use that.\n\nIf the versions were not in messages.properties, how would one make another property file available in the context when thyme evaluates the templates? Would I need to add another base name to MessageBundleProperties? I am not familiar with all the ways to make those URI properties available to thyme. I know they aren't technically messages but those keys would never have to be translated in other bundles and I think things would fall back to messages. \n. I will look into #3, but I can't think of a reason why anyone should ever\ncustomize messages.properties. It should probably be documented that if you\nwant to adjust values from that file that you do so by putting them in\ncustom_messages.properties.\nOn Tue, May 16, 2017 at 2:55 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nValid point. The trouble is, as a brand new deployment if I were to\ncustomize the messages.properties I'd be grabbing all the messages and\nthe versions altogether which ends up polluting my environment and if we\nend up bumping a JS lib version from 1 to 2, that deployer on the next\nupgrade would miss that bit. This is an internal implementation detail that\nshould not be exposed to deployers at all.\nI guess we have a number of options here:\n\nAs you say, another base name.\nMove these into application.properties or such, and then use\n   @environment. (Don't remember the syntax, and do not like this either,\n   personally)\nThis looks promising\n   http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/support/AbstractMessageSource.html#setCommonMessages-java.util.Properties-\n   .\n\nI like #3 https://github.com/apereo/cas/pull/3 best.\nPinging @danielfernandez https://github.com/danielfernandez to see if\nhe shed light on this.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2616#issuecomment-301692550, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKTTYYXOQ6zDoNrNaIrRCfSWgwXe8ks5r6Uh2gaJpZM4NaQev\n.\n. @mmoayyed Can you comment on what I am trying to do in CasCoreWebConfiguration. I moved the webjar URIs out of messages.properties and into a file called static-uris.properties and I am auto-wiring it in to the messageResources bean as the common properties, per your suggestion. I am using a PropertiesFactoryBean since it would allow other property files to be added, but technically it's not necessary right now since there is only one property file. Theoretically the list of property files merged into common properties could be configurable (or users could add to static list via config) but I can't think of reason why they would need to do that. \n\nI haven't tested this in the app yet but the unit tests were failing because static-uris.properties is not on the classpath. I tried to add it to the test classpath by modifying build.gradle but if I am doing that right, it isn't working. The commonMessages bean can't be created b/c static-uris.properties isn't in unit test classpath. I think it would be fine in webapp since the resources are in web-inf/classes. If I configure the PropertiesFactoryBean to ignore missing resources then the bean would get created even if it couldn't find the file. \nDid you want the property file to be in a jar somewhere so people wouldn't think it was meant for modifying in the overlay?\n. I just tested the basic cas login experience and found one issue where I was using the wrong message key in bottom.html. I also saw I was using wrong version variable for one of the urls (but it was for a different jar that used same version so it worked). I fixed those issues but I still need to test the admin webapp.\n. I fixed a couple issues in the management app. I think the builds are failing due to some stuff unrelated to this pull. I can squash some of the commits tomorrow before you merge, but I left them in case you want to see what changed since the last time you looked. \nOne gotcha with using filters is that if you update a webjar version in gradle.properties, it won't be picked up in the already filtered common-messages.properties file in the jar of cas-server-core-web unless you clean that sub-project. I put a comment warning about that in gradle.properties but if you know a way to tell gradle that cas-server-core-web*.jar is dependent on gradle.properties, that comment could go away. \nUnrelated to this pull request:\nThe out of the box cas-overlay-template can't be used to authenticate to the cas-services-management-overlay without some pain.  One issue is that cas-overlay-template lacks the cas-server-support-json-service-registry dependency so the classpath:/services json files aren't used. Another issue is various forms of SSL trust and hostname verification that prevent the management app from validating the service ticket. Finally, there are port conflicts running both via spring-boot, which I got around by putting mgmt on port 8444 instead of 8443. Is having those both run locally via spring-boot without significant pain a worthy goal? I could submit pull requests if so, although users would probably need to create a host file entry or update some config files with their IP in order to get it to work. . The list of common message files is now configurable as part of the message bundle configuration. I know they aren't technically bundles but they are used in basically the same way as far as user is concerned, not that they will be. I renamed the property files to use underscores like the custom_messages and made the internal common bundle cas_common_messsages.properties so the other defaults (internal and external) are common_messages.properties. \nThe build should pick up changes to gradle.properties now and it could probably be improved by someone that knows more about gradle. . I just added another change, casAzureAuthenticatorLoginView.html was importing lato fonts but it uses layout.html so they should already be loaded from there. \nI think fonts.google.com is a little different than the typical CDN in that it lets you specify a custom set of fonts via parameters and lato css from webjars is probably downloading all the lato fonts. Not as efficient but it should be cached by browser and if it is issue for someone they can make fonts configurable. . Closing this, i will do it from new branch so the old commits aren't there. . I fixed the issue with missing linefeed at end of file. The ldap tests failed this last time:  javax.naming.CommunicationException: localhost:1380 [Root exception is java.net.ConnectException: Connection refused (Connection refused)]\nI see you did some changes on master regarding not  running tests in parallel and also on the ldap tests?  Should I try to merge those over to 5.2? If so I can look at this evening.. I merged these changes to master and they are included as a commit in the\nother pull request I have to port forward the script dao changes.\nOn Mon, Sep 24, 2018 at 10:38 AM Misagh Moayyed notifications@github.com\nwrote:\n\nThank you! A cursory look suggests that master does marginally better in\nthis area; If you prefer, I can port the changes forward or you're welcome\nto do that?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3552#issuecomment-423997100, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKUodID2pep8cMxiA_SZvvt89Ck7oks5ueO5lgaJpZM4W2yOL\n.\n. I squashed the commits and made an attempt at addressing your feedback. \n\nWould you rather fallbackPrincipalAttribute be principalAttributeFallback? There is already a property called principalAttribute and a variable in the java code called principalAttributeName (for the principalAttribute property).\nI moved some methods to the abstract x509 base class and added the fallback support to the EDIPI principal resolver. I don't think it applies to the other principal resolvers b/c they never return null (or at least they don't check for null). \nI will update docs shortly. \nIf you don't think the property should be defined in X509Properties, I don't understand where it would go.\n. > I think this sort of change should really be applied to the entire class, using static inner classes to better group related settings. If you'd like, I can take a stab at the overall reorg some time next week and then you'd have grounds to better house the new field.\nIf this alternatePrincipalName attribute applies to the SUBJECT_ALT_NAME and EDIPI resolver, and each resolver has its own config bean, would their config beans need to each duplicate that property? \nThe properties in X509Properties that are specific to the resolvers are: \nprincipalSNRadix and principalHexSNZeroPadding for SERIAL_NO\nserialNumberPrefix and valueDelimiter for SERIAL_NO_DN\nalternatePrincipalName for SUBJECT_ALT_NAME and EDIPI\nWould that mean four resolver config inner classes?\nI renamed property to alternatePrincipalName but I saw after I did it you said alternativePrincipalName? Do you have a strong preference?\n. Also, there is a an unrelated change to UmaAuthorizationRequestEndpointController.java in this commit. I changed it b/c I saw a build fail b/c the scopes variable was unused and I changed the code to pass the variable instead of an empty set, but I probably shouldn't have changed it b/c I don't know anything about that code... . I made attempt to break the principal resolver property objects into their own nested properties classes. . One thing about the current version of this class is that profiles that start with application-.ext are processed before cas.properties (and therefore overridden by cas.properties) while profiles with names like .ext are likely (if they start with a letter after \"c\") to be processed after cas.properties and therefore override cas.properties. Normally profiles override non-profile properties in all cases. Also the order of the profiles in Spring boot is such that the last one listed overrides earlier ones, while in the current version of this file the profiles are processed alphabetically. \nThis test from spring boot shows the order:\ntwoProfilesFromProperties\nI know CAS can do it's own thing and doesn't have to follow what springboot or spring do exactly but having some profiles override cas.properties and some not, and then having profiles processed in an order based on their name doesn't seem right. One could argue that if we are going to process \"cas.properties\" in addition to \"application.properities\", which is something spring would do if spring.config.name were set to \"cas\" rather than the default \"application\", then maybe we should also process cas-.ext. That would be easy to add (with cas-.ext overriding application-.ext). \nI added yaml as extension in addition to yml b/c spring supports both and yaml is the preferred extension of yaml.org: faq\n. When I was updating the docs for this I realized that on windows this code and the previous code would both load cas. twice since it is loading both cas.properties and CAS.properties which are both going to exist on windows if any form of \"cas\" exists. One way to avoid that might be to call getCanonicalFile() on the files that are created and then add another distinct() call in the getProperties() method that loops through and loads the Files. That is overhead for everyone for something that does no harm and takes no time and only happens on windows. Might be better to use what you have here or just load the lowercase .properties only and not do any distinct() calls. Anybody running on Linux with a CAS.properties they want loaded?. I thought I ran tests locally but apparently it wasn't clean and must not have been using new dependencies. To fix this failing test I think I need to port over some mongo changes from master but not all the changes b/c some require spring-data 2.x which requires spring 5.x. . This was more changes than I intended to make and it may not be worth the risk. For my own purposes I was able to remove the vulnerability from showing up in a vulnerability scan by overriding the spring-data dependency in my overlay but I don't use mongo so that is unlikely to break things. To make the tests work I needed to add ZonedDateTimeCodecProvider which I pulled from master and that meant pulling over the MongoClientOptions.builder() code so the provider could be registered. At that point it was saving the data but when it pulled back the data it was trying converted the zoned datetime string to a regular date (b/c object it was populating used regular date) so I added a string to date converter for that (but maybe I could have changed the type in the target object to zonedatetime).  . If we want audit to not go to the console, we can add the file appender to the audit logger and turn off additivity. I don't think it matters much b/c this log4j config is mainly used early in startup before there is anything being audited. The external log4j config controls config long-term once CAS loads it. . Yeah, I submitted this a bit early and hadn't written test yet. I also had forgotten that spring boot was the one reading logging.config initially. When I tried writing a test it didn't look like setting the system property was causing the loggers to be re-created after reconfigure as AsyncLoggers (although it works if set from command-line via -D) I will probably revert the second of these two commits and then look into your actuator suggestion. . I will look at the other backends to see if it makes sense for them. I\nfigured if they have stored the acceptance persistently then they might not\nbe set up to store multiple acceptances or update the acceptance for each\nauthentication.\nOn Tue, Nov 6, 2018 at 7:25 AM Misagh Moayyed notifications@github.com\nwrote:\n\nForgot to ask: it seems like the new scope setting only applies to the\ndefault AUP repository implementation, correct? Would it make sense to\napply the setting to all repositories since the behavior is a feature of\nCAS and not specific to a backend technology?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3632#issuecomment-436234903, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKbuH3j6Bi6IDu2MqQl_gFIHXmuqmks5usX-4gaJpZM4YOeKu\n.\n. Would it be better to catch the parse exception and log the xml that isn't parsing at higher level (info or warn) so someone could leave the logging turned on at that level (without getting debug)? You could then re-throw the exception. . This doesn't work, I will try something else to have server startup if ldap monitor fails. . I tested this out last night and it appeared to work - added one of the removed properties to cas.properties and the server failed to start with a message pointing at the new property. \n\nI am going to work on getting a complete list of properties that are no longer around, but what is the appropriate module to put this in? I have it in core configuration but it could go in api or in the webapp resources folder. Anywhere in the classpath should work. . The following properties (with slashes removed and lowercase) are in the metadata for 5.3.5 but not in the metadata generated with the code in this pull request when I build locally (and the metadata for current version includes deprecated properties from the addition-*.json which get merged in somehow). \nIn the case of the couchdb properties, they aren't showing up in the current metadata (in my local build), possibly because all the properties are in BaseCouchDbProperties? In the case of properties that end in .pool like cas.audit.jdbc.pool, those are showing up in new metadata as a \"group\" but in the 5.3.5 metadata they were showing up as a group and a property (without the child properties that should be there) so those are just errors in the old metadata and not things people could have used. \nAnyway, I don't know if we want to put all these properties in the additional metadata or if we should just take a few properties from each group that are likely to be used if that feature is being used and then use those to point the user at the right group of properties. The properties fall into a few broad categories so some of it could be handled in release notes. \nAnyway, I would rather merge this sooner rather than later and work on adding more stuff later. I have a little javascript program that made the following list and I could probably work on it to generate most of the json needed for the addition*.json file, but tracking down the different replacements will take some time. \ncas.acceptableusagepolicy.jdbc.pool\ncas.adminpagessecurity.adminroles\ncas.adminpagessecurity.alternateipheadername\ncas.adminpagessecurity.jaas.loginconfig\ncas.adminpagessecurity.jaas.logincontextname\ncas.adminpagessecurity.jaas.refreshconfigurationonstartup\ncas.adminpagessecurity.jdbc.autocommit\ncas.adminpagessecurity.jdbc.batchsize\ncas.adminpagessecurity.jdbc.datasourcename\ncas.adminpagessecurity.jdbc.datasourceproxy\ncas.adminpagessecurity.jdbc.ddlauto\ncas.adminpagessecurity.jdbc.defaultcatalog\ncas.adminpagessecurity.jdbc.defaultschema\ncas.adminpagessecurity.jdbc.dialect\ncas.adminpagessecurity.jdbc.driverclass\ncas.adminpagessecurity.jdbc.failfasttimeout\ncas.adminpagessecurity.jdbc.healthquery\ncas.adminpagessecurity.jdbc.idletimeout\ncas.adminpagessecurity.jdbc.isolateinternalqueries\ncas.adminpagessecurity.jdbc.leakthreshold\ncas.adminpagessecurity.jdbc.password\ncas.adminpagessecurity.jdbc.passwordencoder.characterencoding\ncas.adminpagessecurity.jdbc.passwordencoder.encodingalgorithm\ncas.adminpagessecurity.jdbc.passwordencoder.secret\ncas.adminpagessecurity.jdbc.passwordencoder.strength\ncas.adminpagessecurity.jdbc.passwordencoder.type\ncas.adminpagessecurity.jdbc.pool\ncas.adminpagessecurity.jdbc.properties\ncas.adminpagessecurity.jdbc.query\ncas.adminpagessecurity.jdbc.roleprefix\ncas.adminpagessecurity.jdbc.url\ncas.adminpagessecurity.jdbc.user\ncas.adminpagessecurity.ldap.allowmultipledns\ncas.adminpagessecurity.ldap.basedn\ncas.adminpagessecurity.ldap.bindcredential\ncas.adminpagessecurity.ldap.binddn\ncas.adminpagessecurity.ldap.blockwaittime\ncas.adminpagessecurity.ldap.connectionstrategy\ncas.adminpagessecurity.ldap.connecttimeout\ncas.adminpagessecurity.ldap.derefaliases\ncas.adminpagessecurity.ldap.dnformat\ncas.adminpagessecurity.ldap.enhancewithentryresolver\ncas.adminpagessecurity.ldap.failfast\ncas.adminpagessecurity.ldap.idletime\ncas.adminpagessecurity.ldap.keystore\ncas.adminpagessecurity.ldap.keystorepassword\ncas.adminpagessecurity.ldap.keystoretype\ncas.adminpagessecurity.ldap.ldapauthz.allowmultipleresults\ncas.adminpagessecurity.ldap.ldapauthz.basedn\ncas.adminpagessecurity.ldap.ldapauthz.groupattribute\ncas.adminpagessecurity.ldap.ldapauthz.groupbasedn\ncas.adminpagessecurity.ldap.ldapauthz.groupfilter\ncas.adminpagessecurity.ldap.ldapauthz.groupprefix\ncas.adminpagessecurity.ldap.ldapauthz.roleattribute\ncas.adminpagessecurity.ldap.ldapauthz.roleprefix\ncas.adminpagessecurity.ldap.ldapauthz.searchfilter\ncas.adminpagessecurity.ldap.ldapurl\ncas.adminpagessecurity.ldap.maxpoolsize\ncas.adminpagessecurity.ldap.minpoolsize\ncas.adminpagessecurity.ldap.name\ncas.adminpagessecurity.ldap.poolpassivator\ncas.adminpagessecurity.ldap.principalattributepassword\ncas.adminpagessecurity.ldap.providerclass\ncas.adminpagessecurity.ldap.pruneperiod\ncas.adminpagessecurity.ldap.responsetimeout\ncas.adminpagessecurity.ldap.saslauthorizationid\ncas.adminpagessecurity.ldap.saslmechanism\ncas.adminpagessecurity.ldap.saslmutualauth\ncas.adminpagessecurity.ldap.saslqualityofprotection\ncas.adminpagessecurity.ldap.saslrealm\ncas.adminpagessecurity.ldap.saslsecuritystrength\ncas.adminpagessecurity.ldap.searchentryhandlers\ncas.adminpagessecurity.ldap.searchentryhandlers[].caschange\ncas.adminpagessecurity.ldap.searchentryhandlers[].caschange.attributenamecasechange\ncas.adminpagessecurity.ldap.searchentryhandlers[].caschange.attributenames\ncas.adminpagessecurity.ldap.searchentryhandlers[].caschange.attributevaluecasechange\ncas.adminpagessecurity.ldap.searchentryhandlers[].caschange.dncasechange\ncas.adminpagessecurity.ldap.searchentryhandlers[].dnattribute\ncas.adminpagessecurity.ldap.searchentryhandlers[].dnattribute.addifexists\ncas.adminpagessecurity.ldap.searchentryhandlers[].dnattribute.dnattributename\ncas.adminpagessecurity.ldap.searchentryhandlers[].mergeattribute\ncas.adminpagessecurity.ldap.searchentryhandlers[].mergeattribute.attributenames\ncas.adminpagessecurity.ldap.searchentryhandlers[].mergeattribute.mergeattributename\ncas.adminpagessecurity.ldap.searchentryhandlers[].primarygroupid\ncas.adminpagessecurity.ldap.searchentryhandlers[].primarygroupid.basedn\ncas.adminpagessecurity.ldap.searchentryhandlers[].primarygroupid.groupfilter\ncas.adminpagessecurity.ldap.searchentryhandlers[].recursive\ncas.adminpagessecurity.ldap.searchentryhandlers[].recursive.mergeattributes\ncas.adminpagessecurity.ldap.searchentryhandlers[].recursive.searchattribute\ncas.adminpagessecurity.ldap.searchentryhandlers[].type\ncas.adminpagessecurity.ldap.searchfilter\ncas.adminpagessecurity.ldap.subtreesearch\ncas.adminpagessecurity.ldap.trustcertificates\ncas.adminpagessecurity.ldap.type\ncas.adminpagessecurity.ldap.usessl\ncas.adminpagessecurity.ldap.usestarttls\ncas.adminpagessecurity.ldap.validateoncheckout\ncas.adminpagessecurity.ldap.validateperiod\ncas.adminpagessecurity.ldap.validateperiodically\ncas.adminpagessecurity.ldap.validatetimeout\ncas.adminpagessecurity.ldap.validator.attributename\ncas.adminpagessecurity.ldap.validator.attributevalues\ncas.adminpagessecurity.ldap.validator.basedn\ncas.adminpagessecurity.ldap.validator.dn\ncas.adminpagessecurity.ldap.validator.scope\ncas.adminpagessecurity.ldap.validator.searchfilter\ncas.adminpagessecurity.ldap.validator.type\ncas.adminpagessecurity.loginurl\ncas.adminpagessecurity.service\ncas.adminpagessecurity.users\ncas.audit.jdbc.pool\ncas.authn.cassandra.shufflereplicas\ncas.authn.mfa.azure.allowinternationalcalls\ncas.authn.mfa.azure.bypass.authenticationattributename\ncas.authn.mfa.azure.bypass.authenticationattributevalue\ncas.authn.mfa.azure.bypass.authenticationhandlername\ncas.authn.mfa.azure.bypass.authenticationmethodname\ncas.authn.mfa.azure.bypass.credentialclasstype\ncas.authn.mfa.azure.bypass.groovy.location\ncas.authn.mfa.azure.bypass.httprequestheaders\ncas.authn.mfa.azure.bypass.httprequestremoteaddress\ncas.authn.mfa.azure.bypass.principalattributename\ncas.authn.mfa.azure.bypass.principalattributevalue\ncas.authn.mfa.azure.bypass.rest.basicauthpassword\ncas.authn.mfa.azure.bypass.rest.basicauthusername\ncas.authn.mfa.azure.bypass.rest.method\ncas.authn.mfa.azure.bypass.rest.url\ncas.authn.mfa.azure.bypass.type\ncas.authn.mfa.azure.configdir\ncas.authn.mfa.azure.failuremode\ncas.authn.mfa.azure.id\ncas.authn.mfa.azure.mode\ncas.authn.mfa.azure.name\ncas.authn.mfa.azure.phoneattributename\ncas.authn.mfa.azure.privatekeypassword\ncas.authn.mfa.azure.rank\ncas.authn.mfa.gauth.jpa.pool\ncas.authn.mfa.trusted.jpa.pool\ncas.authn.mfa.u2f.jpa.pool\ncas.authn.mfa.yubikey.jpa.pool\ncas.authn.mongo.collectionname\ncas.authn.mongo.mongohosturi\ncas.authn.pac4j.bitbucket.usepathbasedcallbackurl\ncas.authn.pac4j.cas[].usepathbasedcallbackurl\ncas.authn.pac4j.dropbox.usepathbasedcallbackurl\ncas.authn.pac4j.facebook.usepathbasedcallbackurl\ncas.authn.pac4j.foursquare.usepathbasedcallbackurl\ncas.authn.pac4j.github.usepathbasedcallbackurl\ncas.authn.pac4j.google.usepathbasedcallbackurl\ncas.authn.pac4j.hiorgserver.usepathbasedcallbackurl\ncas.authn.pac4j.linkedin.usepathbasedcallbackurl\ncas.authn.pac4j.oauth2[].usepathbasedcallbackurl\ncas.authn.pac4j.oidc[].autoredirect\ncas.authn.pac4j.oidc[].azuretenantid\ncas.authn.pac4j.oidc[].clientname\ncas.authn.pac4j.oidc[].customparams\ncas.authn.pac4j.oidc[].discoveryuri\ncas.authn.pac4j.oidc[].id\ncas.authn.pac4j.oidc[].logouturl\ncas.authn.pac4j.oidc[].maxclockskew\ncas.authn.pac4j.oidc[].preferredjwsalgorithm\ncas.authn.pac4j.oidc[].principalattributeid\ncas.authn.pac4j.oidc[].scope\ncas.authn.pac4j.oidc[].secret\ncas.authn.pac4j.oidc[].type\ncas.authn.pac4j.oidc[].usenonce\ncas.authn.pac4j.oidc[].usepathbasedcallbackurl\ncas.authn.pac4j.orcid.usepathbasedcallbackurl\ncas.authn.pac4j.paypal.usepathbasedcallbackurl\ncas.authn.pac4j.saml[].usepathbasedcallbackurl\ncas.authn.pac4j.twitter.usepathbasedcallbackurl\ncas.authn.pac4j.windowslive.usepathbasedcallbackurl\ncas.authn.pac4j.wordpress.usepathbasedcallbackurl\ncas.authn.pac4j.yahoo.usepathbasedcallbackurl\ncas.authn.passwordless.accounts.groovy\ncas.authn.passwordless.accounts.rest\ncas.authn.passwordless.tokens.rest\ncas.authn.pm.jdbc.pool\ncas.authn.policy.all.enabled\ncas.authn.policy.notprevented.enabled\ncas.authn.policy.uniqueprincipal.enabled\ncas.authn.samlidp.metadata.jpa.pool\ncas.authn.spnego.cachepolicy\ncas.authn.spnego.jcifsdomain\ncas.authn.spnego.jcifsdomaincontroller\ncas.authn.spnego.jcifsnetbioswins\ncas.authn.spnego.jcifspassword\ncas.authn.spnego.jcifsservicepassword\ncas.authn.spnego.jcifsserviceprincipal\ncas.authn.spnego.jcifsusername\ncas.authn.spnego.kerberosconf\ncas.authn.spnego.kerberosdebug\ncas.authn.spnego.kerberoskdc\ncas.authn.spnego.kerberosrealm\ncas.authn.spnego.loginconf\ncas.authn.spnego.timeout\ncas.authn.spnego.usesubjectcredsonly\ncas.authn.surrogate.jdbc.pool\ncas.authn.throttle.jdbc.pool\ncas.consent.jpa.pool\ncas.events.jpa.pool\ncas.metrics.influxdb.batchinterval\ncas.metrics.influxdb.consistencylevel\ncas.metrics.influxdb.database\ncas.metrics.influxdb.dropdatabase\ncas.metrics.influxdb.password\ncas.metrics.influxdb.pointstoflush\ncas.metrics.influxdb.retentionpolicy\ncas.metrics.influxdb.url\ncas.metrics.influxdb.username\ncas.metrics.loggername\ncas.metrics.mongo.authenticationdatabasename\ncas.metrics.mongo.clienturi\ncas.metrics.mongo.collection\ncas.metrics.mongo.conns\ncas.metrics.mongo.databasename\ncas.metrics.mongo.dropcollection\ncas.metrics.mongo.host\ncas.metrics.mongo.idletimeout\ncas.metrics.mongo.password\ncas.metrics.mongo.port\ncas.metrics.mongo.replicaset\ncas.metrics.mongo.socketkeepalive\ncas.metrics.mongo.sslenabled\ncas.metrics.mongo.timeout\ncas.metrics.mongo.userid\ncas.metrics.mongo.writeconcern\ncas.metrics.opentsdb.connecttimeout\ncas.metrics.opentsdb.readtimeout\ncas.metrics.opentsdb.url\ncas.metrics.redis.database\ncas.metrics.redis.host\ncas.metrics.redis.key\ncas.metrics.redis.password\ncas.metrics.redis.pool\ncas.metrics.redis.port\ncas.metrics.redis.prefix\ncas.metrics.redis.sentinel\ncas.metrics.redis.timeout\ncas.metrics.redis.usepool\ncas.metrics.redis.usessl\ncas.metrics.refreshinterval\ncas.metrics.statsd.host\ncas.metrics.statsd.port\ncas.metrics.statsd.prefix\ncas.monitor.endpoints.enabled\ncas.monitor.endpoints.sensitive\ncas.monitor.jdbc.pool\ncas.server.ajp.allowtrace\ncas.server.ajp.asynctimeout\ncas.server.ajp.attributes\ncas.server.ajp.enabled\ncas.server.ajp.enablelookups\ncas.server.ajp.maxpostsize\ncas.server.ajp.port\ncas.server.ajp.protocol\ncas.server.ajp.proxyport\ncas.server.ajp.redirectport\ncas.server.ajp.scheme\ncas.server.ajp.secure\ncas.server.basicauthn.authroles\ncas.server.basicauthn.patterns\ncas.server.basicauthn.securityroles\ncas.server.clustering.channelsendoptions\ncas.server.clustering.clustermembers\ncas.server.clustering.enabled\ncas.server.clustering.expiresessionsonshutdown\ncas.server.clustering.managertype\ncas.server.clustering.membershipaddress\ncas.server.clustering.membershipdroptime\ncas.server.clustering.membershipfrequency\ncas.server.clustering.membershiplocalloopbackdisabled\ncas.server.clustering.membershipport\ncas.server.clustering.membershiprecoverycounter\ncas.server.clustering.membershiprecoveryenabled\ncas.server.clustering.receiveraddress\ncas.server.clustering.receiverautobind\ncas.server.clustering.receivermaxthreads\ncas.server.clustering.receiverport\ncas.server.clustering.receivertimeout\ncas.server.csrf.enabled\ncas.server.extaccesslog.directory\ncas.server.extaccesslog.enabled\ncas.server.extaccesslog.pattern\ncas.server.extaccesslog.prefix\ncas.server.extaccesslog.suffix\ncas.server.http.attributes\ncas.server.http.enabled\ncas.server.http.port\ncas.server.http.protocol\ncas.server.httpproxy.attributes\ncas.server.httpproxy.enabled\ncas.server.httpproxy.protocol\ncas.server.httpproxy.proxyport\ncas.server.httpproxy.redirectport\ncas.server.httpproxy.scheme\ncas.server.httpproxy.secure\ncas.server.remoteaddr.allowedclientipaddressregex\ncas.server.remoteaddr.deniedclientipaddressregex\ncas.server.remoteaddr.enabled\ncas.server.rewritevalve.location\ncas.server.sslvalve.enabled\ncas.server.sslvalve.sslcipherheader\ncas.server.sslvalve.sslcipheruserkeysizeheader\ncas.server.sslvalve.sslclientcertheader\ncas.server.sslvalve.sslsessionidheader\ncas.serviceregistry.couchdb.caching\ncas.serviceregistry.couchdb.cleanupidleconnections\ncas.serviceregistry.couchdb.connectiontimeout\ncas.serviceregistry.couchdb.createifnotexists\ncas.serviceregistry.couchdb.dbname\ncas.serviceregistry.couchdb.enablessl\ncas.serviceregistry.couchdb.maxcacheentries\ncas.serviceregistry.couchdb.maxconnections\ncas.serviceregistry.couchdb.maxobjectsizebytes\ncas.serviceregistry.couchdb.password\ncas.serviceregistry.couchdb.relaxedsslsettings\ncas.serviceregistry.couchdb.retries\ncas.serviceregistry.couchdb.sockettimeout\ncas.serviceregistry.couchdb.url\ncas.serviceregistry.couchdb.useexpectcontinue\ncas.serviceregistry.couchdb.username\ncas.serviceregistry.jpa.pool\ncas.serviceregistry.redis.usepool\ncas.serviceregistry.stream.hazelcast.config.cluster.discovery.aws\ncas.serviceregistry.stream.hazelcast.config.cluster.discovery.azure\ncas.serviceregistry.stream.hazelcast.config.cluster.discovery.jclouds\ncas.ticket.registry.hazelcast.cluster.discovery.aws\ncas.ticket.registry.hazelcast.cluster.discovery.azure\ncas.ticket.registry.hazelcast.cluster.discovery.jclouds\ncas.ticket.registry.jpa.pool\ncas.ticket.registry.redis.usepool. The errorprone compiler plugin is complaining about:\n```\n* What went wrong:\nExecution failed for task ':api:cas-server-core-api-audit:javadoc'.\n\nJavadoc warning: [ERROR] [system.err] /home/travis/build/apereo/cas/core/cas-server-core-authentication-mfa/src/main/java/org/apereo/cas/authentication/AbstractMultifactorAuthenticationProviderFactory.java:44: warning: [TypeParameterUnusedInFormals] Declaring a type parameter that is only used in the return type is a misuse of generics: operations on the type parameter are unchecked, it hides unsafe casts at invocations of the method, and it interacts badly with method overload resolution.\n  \n```\nbut that probably isn't your change that is causing that, although it is odd that another pull request to the same branch passed the tests right after yours. \n. You could wait for a review from @mmoayyed but assuming he approves he will ask you to \"port it forward\" to the master branch. That builds with Java 11 and is using lombok so things like the local variable declarations will need to be changed to the use the \"val\" keyword instead of e.g. \"final String\". . I assume this will get merged, but you will need to submit another pull request for the master branch under the \"port it forward\" policy. Out of curiosity, what is the use case where this property is useful?. Thanks, I tested the case where I put an invalid property in and it suggested the replacement but I must not have tested the case where the properties were all valid. I will merge when the tests finish running. . I tried the 6.0.0-RC4 release build (which should be same the\n6.0.0-SNAPSHOT since there have been no code changes) and it started up in\na standalone Tomcat 9.0.13. I didn't use any modules and built without the\n-tomcat. What modules are you using in your build?\n\nCAS Version: 6.0.0-RC4\nCAS Commit Id: bf57d147788d2503dd593a2d271bc3bb4838acc4\nCAS Build Date/Time: 2018-12-02T22:13:18Z\nSpring Boot Version: 2.1.1.RELEASE\nSpring Version: 5.1.3.RELEASE\nJava Home: c:\\progra~1\\java\\jdk-11\nJava Vendor: Oracle Corporation\nJava Version: 11\nJVM Free Memory: 171 MB\nJVM Maximum Memory: 2 GB\nJVM Total Memory: 278 MB\nJCE Installed: Yes\nNode Version: v8.12.0\nNPM Version: N/A\nOS Architecture: amd64\nOS Name: Windows 10\nOS Version: 10.0\nOS Date/Time: 2018-12-02T19:05:28.207804500\nOS Temp Directory: C:\\temp\\apache-tomcat-9.0.13\\temp\nOn Sat, Dec 1, 2018 at 11:57 PM tfrancois notifications@github.com wrote:\n\nUPDATE: New Issue as of Nov-1-2018 build (update to 6.0.0-SNAPSHOT):\n`NOTE: Picked up JDK_JAVA_OPTIONS:\n--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED\n--add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED\n02-Dec-2018 04:47:27.084 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Server version:\nApache Tomcat/9.0.13\n02-Dec-2018 04:47:27.087 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Server built: Nov 2\n2018 14:27:55 UTC\n02-Dec-2018 04:47:27.087 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Server number:\n9.0.13.0\n02-Dec-2018 04:47:27.087 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log OS Name: Linux\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log OS Version:\n3.10.0-862.9.1.el7.x86_64\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Architecture: amd64\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Java Home:\n/usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log JVM Version:\n11.0.1+13-LTS\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log JVM Vendor: Oracle\nCorporation\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:\n/opt/tomcat\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:\n/opt/tomcat\n02-Dec-2018 04:47:27.090 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: --add-opens=java.base/java.lang=ALL-UNNAMED\n02-Dec-2018 04:47:27.090 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: --add-opens=java.base/java.io=ALL-UNNAMED\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument:\n-Djava.util.logging.config.file=/opt/tomcat/conf/logging.properties\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djdk.tls.ephemeralDHKeySize=2048\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Xmx2000m\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Xms1000m\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dignore.endorsed.dirs=\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dcatalina.base=/opt/tomcat\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dcatalina.home=/opt/tomcat\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djava.io.tmpdir=/opt/tomcat/temp\n02-Dec-2018 04:47:27.093 INFO [main]\norg.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based\nApache Tomcat Native library which allows optimal performance in production\nenvironments was not found on the java.library.path:\n[/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib]\n02-Dec-2018 04:47:27.133 INFO [main]\norg.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler\n[\"http-nio-80\"]\n02-Dec-2018 04:47:27.145 INFO [main]\norg.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared\nselector for servlet write/read\n02-Dec-2018 04:47:27.149 INFO [main]\norg.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler\n[\"https-jsse-nio-443\"]\n02-Dec-2018 04:47:27.629 INFO [main]\norg.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared\nselector for servlet write/read\n02-Dec-2018 04:47:27.640 INFO [main]\norg.apache.catalina.startup.Catalina.load Initialization processed in 1156\nms\n02-Dec-2018 04:47:27.714 INFO [main]\norg.apache.catalina.core.StandardService.startInternal Starting service\n[Catalina]\n02-Dec-2018 04:47:27.714 INFO [main]\norg.apache.catalina.core.StandardEngine.startInternal Starting Servlet\nEngine: Apache Tomcat/9.0.13\n02-Dec-2018 04:47:27.732 INFO [main]\norg.apache.catalina.startup.HostConfig.deployWAR Deploying web application\narchive [/opt/tomcat/webapps/cas.war]\n02-Dec-2018 04:47:27.760 INFO [main]\norg.apache.catalina.startup.ExpandWar.expand An expanded directory\n[/opt/tomcat/webapps/cas] was found with a last modified time that did not\nmatch the associated WAR. It will be deleted.\n02-Dec-2018 04:47:32.298 INFO [main]\norg.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned\nfor TLDs yet contained no TLDs. Enable debug logging for this logger for a\ncomplete list of JARs that were scanned but no TLDs were found in them.\nSkipping unneeded JARs during scanning can improve startup time and JSP\ncompilation time.\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by\norg.codehaus.groovy.vmplugin.v7.Java7$1\n(file:/opt/tomcat/webapps/cas/WEB-INF/lib/groovy-2.5.4.jar) to constructor\njava.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)\nWARNING: Please consider reporting this to the maintainers of\norg.codehaus.groovy.vmplugin.v7.Java7$1\nWARNING: Use --illegal-access=warn to enable warnings of further illegal\nreflective access operations\nWARNING: All illegal access operations will be denied in a future release\n\ufffd[36m\n\n/ / / _\n| / \\ / | \\ \\ | | | | / _ \\ _ \\ | | | | | | / ___ \\\n) | | | | | | // \\ |/ | | _\\ //\nCAS Version: 6.0.0-SNAPSHOT\nCAS Commit Id: 6a770bd\nhttps://github.com/apereo/cas/commit/6a770bdff3824dff14195d11141e266e83e05b9d\nCAS Build Date/Time: 2018-12-02T04:01:36Z\nSpring Boot Version: 2.1.1.RELEASE\nSpring Version: 5.1.3.RELEASE\nJava Home: /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64\nJava Vendor: Oracle Corporation\nJava Version: 11.0.1\nJVM Free Memory: 513 MB\nJVM Maximum Memory: 1 GB\nJVM Total Memory: 1002 MB\nJCE Installed: Yes\nNode Version: N/A\nNPM Version: N/A\nOS Architecture: amd64\nOS Name: Linux\nOS Version: 3.10.0-862.9.1.el7.x86_64\nOS Date/Time: 2018-12-02T04:47:37.314426\nOS Temp Directory: /opt/tomcat/temp\n\ufffd[0m\n\ufffd[32m2018-12-02 04:47:37,346 INFO\n[org.apereo.cas.configuration.DefaultCasConfigurationPropertiesSourceLocator]\n- \ufffd[m\n\ufffd[32m2018-12-02 04:47:37,451 INFO\n[org.apereo.cas.web.CasWebApplicationServletInitializer] - \ufffd[m\n02-Dec-2018 04:47:37.740 SEVERE [main]\norg.apache.catalina.core.ContainerBase.addChildInternal\nContainerBase.addChild: start:\norg.apache.catalina.LifecycleException: Failed to start component\n[StandardEngine[Catalina].StandardHost[localhost].StandardContext[/cas]]\nat\norg.apache.catalina.util.LifecycleBase.handleSubClassException(LifecycleBase.java:441)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:198)\nat\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)\nat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\nat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\nat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\nat\norg.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\nat\njava.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\nat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\nat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\nat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\nat\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\nat\norg.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\nat\norg.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\nat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\nat\norg.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\nat\norg.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat org.apache.catalina.startup.Catalina.start(Catalina.java:695)\nat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\nMethod)\nat\njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat\njava.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.base/java.lang.reflect.Method.invoke(Method.java:566)\nat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\nCaused by: java.lang.NullPointerException\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.detectMapValueReplacementType(PropertiesMigrationReporter.java:140)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.isRenamed(PropertiesMigrationReporter.java:115)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$mapPropertiesWithReplacement$1(PropertiesMigrationReporter.java:88)\nat java.base/java.lang.Iterable.forEach(Iterable.java:75)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.mapPropertiesWithReplacement(PropertiesMigrationReporter.java:88)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$getReport$0(PropertiesMigrationReporter.java:74)\nat java.base/java.util.Map.forEach(Map.java:661)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.getReport(PropertiesMigrationReporter.java:73)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationPreparedEvent(PropertiesMigrationListener.java:69)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:57)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:44)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)\nat\norg.springframework.boot.context.event.EventPublishingRunListener.contextLoaded(EventPublishingRunListener.java:93)\nat\norg.springframework.boot.SpringApplicationRunListeners.contextLoaded(SpringApplicationRunListeners.java:66)\nat\norg.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:393)\nat\norg.springframework.boot.SpringApplication.run(SpringApplication.java:314)\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:157)\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:137)\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:91)\nat\norg.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)\nat\norg.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5098)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n... 38 more\n02-Dec-2018 04:47:37.741 SEVERE [main]\norg.apache.catalina.startup.HostConfig.deployWAR Error deploying web\napplication archive [/opt/tomcat/webapps/cas.war]\njava.lang.IllegalStateException: ContainerBase.addChild: start:\norg.apache.catalina.LifecycleException: Failed to start component\n[StandardEngine[Catalina].StandardHost[localhost].StandardContext[/cas]]\nat\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:747)\nat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\nat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\nat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\nat\norg.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\nat\njava.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\nat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\nat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\nat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\nat\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\nat\norg.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\nat\norg.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\nat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\nat\norg.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\nat\norg.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat org.apache.catalina.startup.Catalina.start(Catalina.java:695)\nat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\nMethod)\nat\njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat\njava.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.base/java.lang.reflect.Method.invoke(Method.java:566)\nat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\n02-Dec-2018 04:47:37.742 INFO [main]\norg.apache.catalina.startup.HostConfig.deployWAR Deployment of web\napplication archive [/opt/tomcat/webapps/cas.war] has finished in [10,011]\nms\n02-Dec-2018 04:47:37.743 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/ROOT]\n\ufffd[1;31m2018-12-02 04:47:37,739 ERROR\n[org.springframework.boot.SpringApplication] - \ufffd[m\njava.lang.NullPointerException: null\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.detectMapValueReplacementType(PropertiesMigrationReporter.java:140)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.isRenamed(PropertiesMigrationReporter.java:115)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$mapPropertiesWithReplacement$1(PropertiesMigrationReporter.java:88)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.mapPropertiesWithReplacement(PropertiesMigrationReporter.java:88)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$getReport$0(PropertiesMigrationReporter.java:74)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat java.util.Map.forEach(Map.java:661) ~[?:?]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.getReport(PropertiesMigrationReporter.java:73)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationPreparedEvent(PropertiesMigrationListener.java:69)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:57)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:44)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.boot.context.event.EventPublishingRunListener.contextLoaded(EventPublishingRunListener.java:93)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.SpringApplicationRunListeners.contextLoaded(SpringApplicationRunListeners.java:66)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:393)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.SpringApplication.run(SpringApplication.java:314)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:157)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:137)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:91)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)\n~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5098)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\n~[catalina.jar:9.0.13]\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n~[?:?]\nat java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n~[tomcat-util.jar:9.0.13]\nat\njava.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\n~[?:?]\nat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\n~[catalina.jar:9.0.13]\nat java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n~[tomcat-util.jar:9.0.13]\nat\njava.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n~[?:?]\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.Catalina.start(Catalina.java:695)\n~[catalina.jar:9.0.13]\nat jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n~[?:?]\nat\njdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n~[?:?]\nat\njdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n~[?:?]\nat java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]\nat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\n~[bootstrap.jar:9.0.13]\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\n~[bootstrap.jar:9.0.13]\n02-Dec-2018 04:47:37.782 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/ROOT] has finished in [34] ms\n02-Dec-2018 04:47:37.782 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/docs]\n02-Dec-2018 04:47:37.797 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/docs] has finished in [14] ms\n02-Dec-2018 04:47:37.797 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/examples]\n02-Dec-2018 04:47:37.954 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/examples] has finished in [156]\nms\n02-Dec-2018 04:47:37.954 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/host-manager]\n02-Dec-2018 04:47:37.974 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/host-manager] has finished in\n[20] ms\n02-Dec-2018 04:47:37.975 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/manager]\n02-Dec-2018 04:47:37.990 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/manager] has finished in [14] ms\n02-Dec-2018 04:47:37.994 INFO [main]\norg.apache.coyote.AbstractProtocol.start Starting ProtocolHandler\n[\"http-nio-80\"]\n02-Dec-2018 04:47:38.009 INFO [main]\norg.apache.coyote.AbstractProtocol.start Starting ProtocolHandler\n[\"https-jsse-nio-443\"]\n02-Dec-2018 04:47:38.014 INFO [main]\norg.apache.catalina.startup.Catalina.start Server startup in 10373 ms\n`\nWhen running the build using the ./build.sh run command-line option, I get\nthe following:\n[image: image]\nhttps://user-images.githubusercontent.com/5649433/49335878-60217280-f5c4-11e8-90a4-7aa4d6ea0342.png\nI prefer to run the WAR file in my own tomcat external container (and have\nremoved the -tomcat) argument from the appServer setting in the\ngradle.properties file but it still fails to start with the default option\nas well. I don't think is an issue with my config as I actually reset my\npull request to the latest and the error persists.\n@mmoayyed https://github.com/mmoayyed Can you look into this again\nplease? It looks like this might be a new issue that has popped with the\nlatest build.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443481681, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKcZ5eWuOobk6pKU1kjfr2GuCF-v-ks5u013VgaJpZM4Yuosc\n.\n. Just because it was easy, I also tried the 6.0.0-SNAPSHOT and that worked\ntoo. It's either something in one of the cas modules you are using or maybe\nthe cas.war you built isn't clean, or the exploded tomcat webapps\\cas\nfolder isn't clean (i.e. has some old cas jars in it).\n\nOn Sun, Dec 2, 2018 at 7:12 PM Hal Deadman hal.deadman@gmail.com wrote:\n\nI tried the 6.0.0-RC4 release build (which should be same the\n6.0.0-SNAPSHOT since there have been no code changes) and it started up in\na standalone Tomcat 9.0.13. I didn't use any modules and built without the\n-tomcat. What modules are you using in your build?\nCAS Version: 6.0.0-RC4\nCAS Commit Id: bf57d147788d2503dd593a2d271bc3bb4838acc4\nCAS Build Date/Time: 2018-12-02T22:13:18Z\nSpring Boot Version: 2.1.1.RELEASE\nSpring Version: 5.1.3.RELEASE\nJava Home: c:\\progra~1\\java\\jdk-11\nJava Vendor: Oracle Corporation\nJava Version: 11\nJVM Free Memory: 171 MB\nJVM Maximum Memory: 2 GB\nJVM Total Memory: 278 MB\nJCE Installed: Yes\nNode Version: v8.12.0\nNPM Version: N/A\nOS Architecture: amd64\nOS Name: Windows 10\nOS Version: 10.0\nOS Date/Time: 2018-12-02T19:05:28.207804500\nOS Temp Directory: C:\\temp\\apache-tomcat-9.0.13\\temp\nOn Sat, Dec 1, 2018 at 11:57 PM tfrancois notifications@github.com\nwrote:\n\nUPDATE: New Issue as of Nov-1-2018 build (update to 6.0.0-SNAPSHOT):\n`NOTE: Picked up JDK_JAVA_OPTIONS:\n--add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED\n--add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED\n02-Dec-2018 04:47:27.084 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Server version:\nApache Tomcat/9.0.13\n02-Dec-2018 04:47:27.087 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Server built: Nov 2\n2018 14:27:55 UTC\n02-Dec-2018 04:47:27.087 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Server number:\n9.0.13.0\n02-Dec-2018 04:47:27.087 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log OS Name: Linux\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log OS Version:\n3.10.0-862.9.1.el7.x86_64\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Architecture: amd64\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Java Home:\n/usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log JVM Version:\n11.0.1+13-LTS\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log JVM Vendor: Oracle\nCorporation\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:\n/opt/tomcat\n02-Dec-2018 04:47:27.088 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:\n/opt/tomcat\n02-Dec-2018 04:47:27.090 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: --add-opens=java.base/java.lang=ALL-UNNAMED\n02-Dec-2018 04:47:27.090 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: --add-opens=java.base/java.io=ALL-UNNAMED\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument:\n-Djava.util.logging.config.file=/opt/tomcat/conf/logging.properties\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djdk.tls.ephemeralDHKeySize=2048\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\n02-Dec-2018 04:47:27.091 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Xmx2000m\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Xms1000m\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dignore.endorsed.dirs=\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dcatalina.base=/opt/tomcat\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Dcatalina.home=/opt/tomcat\n02-Dec-2018 04:47:27.092 INFO [main]\norg.apache.catalina.startup.VersionLoggerListener.log Command line\nargument: -Djava.io.tmpdir=/opt/tomcat/temp\n02-Dec-2018 04:47:27.093 INFO [main]\norg.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based\nApache Tomcat Native library which allows optimal performance in production\nenvironments was not found on the java.library.path:\n[/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib]\n02-Dec-2018 04:47:27.133 INFO [main]\norg.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler\n[\"http-nio-80\"]\n02-Dec-2018 04:47:27.145 INFO [main]\norg.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared\nselector for servlet write/read\n02-Dec-2018 04:47:27.149 INFO [main]\norg.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler\n[\"https-jsse-nio-443\"]\n02-Dec-2018 04:47:27.629 INFO [main]\norg.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared\nselector for servlet write/read\n02-Dec-2018 04:47:27.640 INFO [main]\norg.apache.catalina.startup.Catalina.load Initialization processed in 1156\nms\n02-Dec-2018 04:47:27.714 INFO [main]\norg.apache.catalina.core.StandardService.startInternal Starting service\n[Catalina]\n02-Dec-2018 04:47:27.714 INFO [main]\norg.apache.catalina.core.StandardEngine.startInternal Starting Servlet\nEngine: Apache Tomcat/9.0.13\n02-Dec-2018 04:47:27.732 INFO [main]\norg.apache.catalina.startup.HostConfig.deployWAR Deploying web application\narchive [/opt/tomcat/webapps/cas.war]\n02-Dec-2018 04:47:27.760 INFO [main]\norg.apache.catalina.startup.ExpandWar.expand An expanded directory\n[/opt/tomcat/webapps/cas] was found with a last modified time that did not\nmatch the associated WAR. It will be deleted.\n02-Dec-2018 04:47:32.298 INFO [main]\norg.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned\nfor TLDs yet contained no TLDs. Enable debug logging for this logger for a\ncomplete list of JARs that were scanned but no TLDs were found in them.\nSkipping unneeded JARs during scanning can improve startup time and JSP\ncompilation time.\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by\norg.codehaus.groovy.vmplugin.v7.Java7$1\n(file:/opt/tomcat/webapps/cas/WEB-INF/lib/groovy-2.5.4.jar) to constructor\njava.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)\nWARNING: Please consider reporting this to the maintainers of\norg.codehaus.groovy.vmplugin.v7.Java7$1\nWARNING: Use --illegal-access=warn to enable warnings of further illegal\nreflective access operations\nWARNING: All illegal access operations will be denied in a future release\n\ufffd[36m\n\n/ / / _\n| / \\ / | \\ \\ | | | | / _ \\ _ \\ | | | | | | / ___ \\\n) | | | | | | // \\ |/ | | _\\ //\nCAS Version: 6.0.0-SNAPSHOT\nCAS Commit Id: 6a770bd\nhttps://github.com/apereo/cas/commit/6a770bdff3824dff14195d11141e266e83e05b9d\nCAS Build Date/Time: 2018-12-02T04:01:36Z\nSpring Boot Version: 2.1.1.RELEASE\nSpring Version: 5.1.3.RELEASE\nJava Home: /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64\nJava Vendor: Oracle Corporation\nJava Version: 11.0.1\nJVM Free Memory: 513 MB\nJVM Maximum Memory: 1 GB\nJVM Total Memory: 1002 MB\nJCE Installed: Yes\nNode Version: N/A\nNPM Version: N/A\nOS Architecture: amd64\nOS Name: Linux\nOS Version: 3.10.0-862.9.1.el7.x86_64\nOS Date/Time: 2018-12-02T04:47:37.314426\nOS Temp Directory: /opt/tomcat/temp\n\ufffd[0m\n\ufffd[32m2018-12-02 04:47:37,346 INFO\n[org.apereo.cas.configuration.DefaultCasConfigurationPropertiesSourceLocator]\n- \ufffd[m\n\ufffd[32m2018-12-02 04:47:37,451 INFO\n[org.apereo.cas.web.CasWebApplicationServletInitializer] - \ufffd[m\n02-Dec-2018 04:47:37.740 SEVERE [main]\norg.apache.catalina.core.ContainerBase.addChildInternal\nContainerBase.addChild: start:\norg.apache.catalina.LifecycleException: Failed to start component\n[StandardEngine[Catalina].StandardHost[localhost].StandardContext[/cas]]\nat\norg.apache.catalina.util.LifecycleBase.handleSubClassException(LifecycleBase.java:441)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:198)\nat\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)\nat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\nat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\nat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\nat\norg.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\nat\njava.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\nat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\nat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\nat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\nat\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\nat\norg.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\nat\norg.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\nat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\nat\norg.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\nat\norg.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat org.apache.catalina.startup.Catalina.start(Catalina.java:695)\nat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\nMethod)\nat\njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat\njava.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.base/java.lang.reflect.Method.invoke(Method.java:566)\nat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\nCaused by: java.lang.NullPointerException\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.detectMapValueReplacementType(PropertiesMigrationReporter.java:140)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.isRenamed(PropertiesMigrationReporter.java:115)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$mapPropertiesWithReplacement$1(PropertiesMigrationReporter.java:88)\nat java.base/java.lang.Iterable.forEach(Iterable.java:75)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.mapPropertiesWithReplacement(PropertiesMigrationReporter.java:88)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$getReport$0(PropertiesMigrationReporter.java:74)\nat java.base/java.util.Map.forEach(Map.java:661)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.getReport(PropertiesMigrationReporter.java:73)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationPreparedEvent(PropertiesMigrationListener.java:69)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:57)\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:44)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)\nat\norg.springframework.boot.context.event.EventPublishingRunListener.contextLoaded(EventPublishingRunListener.java:93)\nat\norg.springframework.boot.SpringApplicationRunListeners.contextLoaded(SpringApplicationRunListeners.java:66)\nat\norg.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:393)\nat\norg.springframework.boot.SpringApplication.run(SpringApplication.java:314)\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:157)\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:137)\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:91)\nat\norg.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)\nat\norg.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5098)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n... 38 more\n02-Dec-2018 04:47:37.741 SEVERE [main]\norg.apache.catalina.startup.HostConfig.deployWAR Error deploying web\napplication archive [/opt/tomcat/webapps/cas.war]\njava.lang.IllegalStateException: ContainerBase.addChild: start:\norg.apache.catalina.LifecycleException: Failed to start component\n[StandardEngine[Catalina].StandardHost[localhost].StandardContext[/cas]]\nat\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:747)\nat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\nat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\nat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\nat\norg.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\nat\njava.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\nat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\nat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\nat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\nat\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\nat\norg.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\nat\norg.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\nat org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\nat\norg.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\nat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\nat\njava.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\nat\norg.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat\norg.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\nat org.apache.catalina.startup.Catalina.start(Catalina.java:695)\nat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\nMethod)\nat\njava.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat\njava.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.base/java.lang.reflect.Method.invoke(Method.java:566)\nat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\n02-Dec-2018 04:47:37.742 INFO [main]\norg.apache.catalina.startup.HostConfig.deployWAR Deployment of web\napplication archive [/opt/tomcat/webapps/cas.war] has finished in [10,011]\nms\n02-Dec-2018 04:47:37.743 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/ROOT]\n\ufffd[1;31m2018-12-02 04:47:37,739 ERROR\n[org.springframework.boot.SpringApplication] - \ufffd[m\njava.lang.NullPointerException: null\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.detectMapValueReplacementType(PropertiesMigrationReporter.java:140)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.isRenamed(PropertiesMigrationReporter.java:115)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$mapPropertiesWithReplacement$1(PropertiesMigrationReporter.java:88)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.mapPropertiesWithReplacement(PropertiesMigrationReporter.java:88)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$getReport$0(PropertiesMigrationReporter.java:74)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat java.util.Map.forEach(Map.java:661) ~[?:?]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.getReport(PropertiesMigrationReporter.java:73)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationPreparedEvent(PropertiesMigrationListener.java:69)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:57)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:44)\n~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)\n~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.springframework.boot.context.event.EventPublishingRunListener.contextLoaded(EventPublishingRunListener.java:93)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.SpringApplicationRunListeners.contextLoaded(SpringApplicationRunListeners.java:66)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:393)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.SpringApplication.run(SpringApplication.java:314)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:157)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:137)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:91)\n~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\nat\norg.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)\n~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]\nat\norg.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5098)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\n~[catalina.jar:9.0.13]\nat\njava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n~[?:?]\nat java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n~[tomcat-util.jar:9.0.13]\nat\njava.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\n~[?:?]\nat org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\n~[catalina.jar:9.0.13]\nat java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]\nat\norg.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n~[tomcat-util.jar:9.0.13]\nat\njava.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n~[?:?]\nat\norg.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat\norg.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n~[catalina.jar:9.0.13]\nat org.apache.catalina.startup.Catalina.start(Catalina.java:695)\n~[catalina.jar:9.0.13]\nat jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n~[?:?]\nat\njdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n~[?:?]\nat\njdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n~[?:?]\nat java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]\nat org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\n~[bootstrap.jar:9.0.13]\nat org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\n~[bootstrap.jar:9.0.13]\n02-Dec-2018 04:47:37.782 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/ROOT] has finished in [34] ms\n02-Dec-2018 04:47:37.782 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/docs]\n02-Dec-2018 04:47:37.797 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/docs] has finished in [14] ms\n02-Dec-2018 04:47:37.797 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/examples]\n02-Dec-2018 04:47:37.954 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/examples] has finished in [156]\nms\n02-Dec-2018 04:47:37.954 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/host-manager]\n02-Dec-2018 04:47:37.974 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/host-manager] has finished in\n[20] ms\n02-Dec-2018 04:47:37.975 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deploying web\napplication directory [/opt/tomcat/webapps/manager]\n02-Dec-2018 04:47:37.990 INFO [main]\norg.apache.catalina.startup.HostConfig.deployDirectory Deployment of web\napplication directory [/opt/tomcat/webapps/manager] has finished in [14] ms\n02-Dec-2018 04:47:37.994 INFO [main]\norg.apache.coyote.AbstractProtocol.start Starting ProtocolHandler\n[\"http-nio-80\"]\n02-Dec-2018 04:47:38.009 INFO [main]\norg.apache.coyote.AbstractProtocol.start Starting ProtocolHandler\n[\"https-jsse-nio-443\"]\n02-Dec-2018 04:47:38.014 INFO [main]\norg.apache.catalina.startup.Catalina.start Server startup in 10373 ms\n`\nWhen running the build using the ./build.sh run command-line option, I\nget the following:\n[image: image]\nhttps://user-images.githubusercontent.com/5649433/49335878-60217280-f5c4-11e8-90a4-7aa4d6ea0342.png\nI prefer to run the WAR file in my own tomcat external container (and\nhave removed the -tomcat) argument from the appServer setting in the\ngradle.properties file but it still fails to start with the default option\nas well. I don't think is an issue with my config as I actually reset my\npull request to the latest and the error persists.\n@mmoayyed https://github.com/mmoayyed Can you look into this again\nplease? It looks like this might be a new issue that has popped with the\nlatest build.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443481681, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKcZ5eWuOobk6pKU1kjfr2GuCF-v-ks5u013VgaJpZM4Yuosc\n.\n\n\n. Looking at the spring boot method where the NPE occurs it looks like it is\npulling a property out of a map and not checking if the property was found\nbefore it tries to call a method on the property object. Could it be a\nparticular property you have in your config that is causing the problem?\n\nhttps://github.com/spring-projects/spring-boot/blob/c393f6262ea68d99e18578b3ea2a1e9e33ca798c/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java#L140\nOn Sun, Dec 2, 2018 at 8:17 PM tfrancois notifications@github.com wrote:\n\nHi thank you for your reply. I removed all modules and cleaned out my CAS\nfolder. The only difference I'm seeing is that my Java version is\njdk-11.0.1. Could that be the issue? It just looks like it might be Java\nrelated.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443561418, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKeXEDRrE4cHTvll_e2xXYz7-nj5Mks5u1HupgaJpZM4Yuosc\n.\n. If I could replicate the issue I would attach with debugger and see what\nproperty it was happening on.\n\nI did just notice something in here:\nhttps://github.com/apereo/cas/blob/master/api/cas-server-core-api-configuration-model/src/main/resources/META-INF/additional-spring-configuration-metadata.json\nThe \"cas.admin-pages-security.actuator-endpoints-enabled\" property should\nprobably be \"cas.admin-pages-security.actuator-endpoints.enabled\". The code\nthat is getting the NPE is looking for everything up to the last dot so\nmaybe that is causing a problem.\nI think that property was added fairly recently. Maybe the snapshot you\nwere working with predated that addition which was 5 days ago.\nOn Sun, Dec 2, 2018 at 9:11 PM tfrancois notifications@github.com wrote:\n\nNot sure. And I am disappointed to report that i have completely removed\nJava 11.0.1 and downgraded to JDK-11 and the issue persists. The only\ndifference now between my config and yours above is I'm running on RedHat.\nThe interesting thing is that this config was working PERFECTLY on the last\n6.0.0-RC4-Snapshot. Upon updating to the latest build released on 11/30 the\nproblems began. Going on over 20+ hours trying to find the issue. Can you\nelaborate more on what you're guessing. Again, keep in mind nothing changed\nin my config. Where would I find the offending property?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443567718, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKVGmuyibcrmjs2R6ZJVmfDs9Zjekks5u1Ig_gaJpZM4Yuosc\n.\n. Actually nevermind, that property is correct as it is.\n\ncas.adminPagesSecurity.actuatorEndpointsEnabled=true\nOn Sun, Dec 2, 2018 at 9:24 PM Hal Deadman hal.deadman@gmail.com wrote:\n\nIf I could replicate the issue I would attach with debugger and see what\nproperty it was happening on.\nI did just notice something in here:\nhttps://github.com/apereo/cas/blob/master/api/cas-server-core-api-configuration-model/src/main/resources/META-INF/additional-spring-configuration-metadata.json\nThe \"cas.admin-pages-security.actuator-endpoints-enabled\" property should\nprobably be \"cas.admin-pages-security.actuator-endpoints.enabled\". The code\nthat is getting the NPE is looking for everything up to the last dot so\nmaybe that is causing a problem.\nI think that property was added fairly recently. Maybe the snapshot you\nwere working with predated that addition which was 5 days ago.\nOn Sun, Dec 2, 2018 at 9:11 PM tfrancois notifications@github.com wrote:\n\nNot sure. And I am disappointed to report that i have completely removed\nJava 11.0.1 and downgraded to JDK-11 and the issue persists. The only\ndifference now between my config and yours above is I'm running on RedHat.\nThe interesting thing is that this config was working PERFECTLY on the last\n6.0.0-RC4-Snapshot. Upon updating to the latest build released on 11/30 the\nproblems began. Going on over 20+ hours trying to find the issue. Can you\nelaborate more on what you're guessing. Again, keep in mind nothing changed\nin my config. Where would I find the offending property?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443567718, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKVGmuyibcrmjs2R6ZJVmfDs9Zjekks5u1Ig_gaJpZM4Yuosc\n.\n\n\n. I was able to recreate the error with this property:\n\ncas.admin-pages-security.ip=127.0.0.1\nMy guess is that the replacement value uses array syntax and spring boot\nmust not like that.\n{\n  \"name\": \"cas.admin-pages-security.ip\",\n  \"type\": \"java.lang.String\",\n  \"description\": \"Enable actuator endpoints.\",\n  \"defaultValue\": \"127.0.0.1\",\n  \"deprecation\": {\n    \"replacement\": \"cas.monitor.endpoints.endpoint.defaults.access[0]\",\n    \"reason\": \"management endpoints security under\ncas.monitor.endpoints.endpoint.*.\",\n    \"level\": \"error\"\n  }\n}\nOn Sun, Dec 2, 2018 at 9:36 PM Hal Deadman hal.deadman@gmail.com wrote:\n\nActually nevermind, that property is correct as it is.\ncas.adminPagesSecurity.actuatorEndpointsEnabled=true\nOn Sun, Dec 2, 2018 at 9:24 PM Hal Deadman hal.deadman@gmail.com wrote:\n\nIf I could replicate the issue I would attach with debugger and see what\nproperty it was happening on.\nI did just notice something in here:\nhttps://github.com/apereo/cas/blob/master/api/cas-server-core-api-configuration-model/src/main/resources/META-INF/additional-spring-configuration-metadata.json\nThe \"cas.admin-pages-security.actuator-endpoints-enabled\" property should\nprobably be \"cas.admin-pages-security.actuator-endpoints.enabled\". The code\nthat is getting the NPE is looking for everything up to the last dot so\nmaybe that is causing a problem.\nI think that property was added fairly recently. Maybe the snapshot you\nwere working with predated that addition which was 5 days ago.\nOn Sun, Dec 2, 2018 at 9:11 PM tfrancois notifications@github.com\nwrote:\n\nNot sure. And I am disappointed to report that i have completely removed\nJava 11.0.1 and downgraded to JDK-11 and the issue persists. The only\ndifference now between my config and yours above is I'm running on RedHat.\nThe interesting thing is that this config was working PERFECTLY on the last\n6.0.0-RC4-Snapshot. Upon updating to the latest build released on 11/30 the\nproblems began. Going on over 20+ hours trying to find the issue. Can you\nelaborate more on what you're guessing. Again, keep in mind nothing changed\nin my config. Where would I find the offending property?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443567718, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKVGmuyibcrmjs2R6ZJVmfDs9Zjekks5u1Ig_gaJpZM4Yuosc\n.\n\n\n. If you remove that property:  \"cas.admin-pages-security.ip\" then the\nproblem should go away.\n\n\nOn Sun, Dec 2, 2018 at 9:41 PM tfrancois notifications@github.com wrote:\n\nThank you for your help! This is driving me crazy. I am at a loss as to\nwhat could be causing the issue on my RHEL/Redhat instance. It was working\njust fine until I updated. If I'm having this issue, I'm sure others will\ntoo as I didn't change any of my config...all I did was update. Stumped. Do\nyou have any other guesses?\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443571804, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKeH5Bf5mcTfFlNDwRx4x8c4_dG2Lks5u1I90gaJpZM4Yuosc\n.\n. Glad it's fixed now. I just submitted a pull request so once that gets\nbuilt I can merge it and the snapshots should at least be fixed. Maybe we\nshould put something in the notes for RC4 that if you get that NPE then\nit's probably b/c of that property. I put the stack trace in the pull\nrequest so maybe google will lead people to the fix.\n\nOn Sun, Dec 2, 2018 at 9:54 PM tfrancois notifications@github.com wrote:\n\nSIR...I don't even now how to thank you. I have been on this issue for the\nbetter part of 2 days. That was the culprit. Commenting it out and the CAS\nserver has started without issue.\nMany others are going to have this problem! Hopefully they fall onto this\nforum for the solution. How can I thank you?!!!!!!\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3672#issuecomment-443573631, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKeg4eZw4MkpcKdwOL3-PKNkfd3Ywks5u1JJ8gaJpZM4Yuosc\n.\n. Sure I will do that.\n\nOn Fri, Dec 7, 2018 at 2:31 PM Misagh Moayyed notifications@github.com\nwrote:\n\n@hdeadman https://github.com/hdeadman This might be a good one for\n5.3.x as well. If you could backport, that would be great or else let me\nknow and I'll do it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3687#issuecomment-445340543, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKYQJ43SP2zKJRilRCvfNtgoLWML1ks5u2sImgaJpZM4ZHzWQ\n.\n. Sure I will do that.\n\nOn Fri, Dec 7, 2018 at 2:31 PM Misagh Moayyed notifications@github.com\nwrote:\n\n@hdeadman https://github.com/hdeadman This might be a good one for\n5.3.x as well. If you could backport, that would be great or else let me\nknow and I'll do it.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3687#issuecomment-445340543, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABfBKYQJ43SP2zKJRilRCvfNtgoLWML1ks5u2sImgaJpZM4ZHzWQ\n.\n. @mmoayyed should this get merged to master before 6.0? Seems like if it is going to be in 5.3.7 then it ought to be in 6.0? It's pretty low risk.... @mmoayyed should this get merged to master before 6.0? Seems like if it is going to be in 5.3.7 then it ought to be in 6.0? It's pretty low risk.... What will the messages look like on startup if we have an encrypted property requiring unlimited strength crypto and we don't have that enabled in the JVM? Right now in 5.3 we get something like this:\n2018-12-08 11:12:39,386 ERROR [org.apereo.cas.CipherExecutor] - <Could not decrypt value [{cipher}asdfasdfasdfasdfasdfasdfasdfasdf=]>\norg.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine\nShouldn't there be something generic in the DecryptionException to give people hints as to why their decryption failed? What is the harm of passing along the original exception message? Is it that current message includes the encrypted value?. What will the messages look like on startup if we have an encrypted property requiring unlimited strength crypto and we don't have that enabled in the JVM? Right now in 5.3 we get something like this:\n2018-12-08 11:12:39,386 ERROR [org.apereo.cas.CipherExecutor] - <Could not decrypt value [{cipher}asdfasdfasdfasdfasdfasdfasdfasdf=]>\norg.jasypt.exceptions.EncryptionOperationNotPossibleException: Encryption raised an exception. A possible cause is you are using strong encryption algorithms and you have not installed the Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files in this Java Virtual Machine\nShouldn't there be something generic in the DecryptionException to give people hints as to why their decryption failed? What is the harm of passing along the original exception message? Is it that current message includes the encrypted value?. I think it's probably better to put the space in the templates, otherwise it would mean updating 25 or so bundles and multiple properties in each. It would have to use the html entity for space or comment the fact that the space at end of the message is important, and if it uses the entity then it relies on the template doing an unescaped output (which I think it is doing currently). If someone is using a custom template then I think comparing it with new versions is part of the upgrade process, and the bug of the missing space is fairly minor at the end of the day so they could fix it fairly easily in their version of the template. . I think it's probably better to put the space in the templates, otherwise it would mean updating 25 or so bundles and multiple properties in each. It would have to use the html entity for space or comment the fact that the space at end of the message is important, and if it uses the entity then it relies on the template doing an unescaped output (which I think it is doing currently). If someone is using a custom template then I think comparing it with new versions is part of the upgrade process, and the bug of the missing space is fairly minor at the end of the day so they could fix it fairly easily in their version of the template. . Looks good to me. I thought I had seen this added before but I must have been thinking of X509RestMultipartBodyCredentialFactory (not sure what that is, but since the various ways to get the cert are all configurable, it shouldn't hurt to let people do it this way. I personally can't envision a scenario where you would run a production CAS server that wasn't behind some load balancer that was terminating the client SSL connection and I don't know of a way that load balancers can pass that client cert through to CAS other than via HTTP headers. I suppose a load balancer could be proxying the traffic at the TCP level and then this would work (although if it is at TCP level load balancer then doing sticky sessions with cookie insertion is out and you are left with source ip or maybe ssl session?). \n\n. Looks good to me. I thought I had seen this added before but I must have been thinking of X509RestMultipartBodyCredentialFactory (not sure what that is, but since the various ways to get the cert are all configurable, it shouldn't hurt to let people do it this way. I personally can't envision a scenario where you would run a production CAS server that wasn't behind some load balancer that was terminating the client SSL connection and I don't know of a way that load balancers can pass that client cert through to CAS other than via HTTP headers. I suppose a load balancer could be proxying the traffic at the TCP level and then this would work (although if it is at TCP level load balancer then doing sticky sessions with cookie insertion is out and you are left with source ip or maybe ssl session?). \n. You can request a client cert from haproxy, or apache httpd, or a BigIP F5, etc and then the proxy will pass the base64 encoded client cert back to the app behind the proxy via an http header. Tomcat has an SSLValve that knows how to process that header (and CAS can use that or it has it's own copy of the code that only runs on the /cas/login endpoint and isn't specific to tomcat). If you go here: https://apereo.github.io/cas/5.3.x/installation/Configuration-Properties.html and search for haproxy you can see example of the proxy config. I have an F5 i-rule i use that renegotiates the SSL session with client (and asks for cert) when the url is /cas. F5 can be configured to do the cert validation and the CA bundles that determine which certs are used and it can do OCSP checking or CRL revocation, etc. \nCAS PropertiesCAS - Enterprise Single Sign-On for the Web\n. I think this is about 12 minutes faster (39 minutes vs 51 or 52 from recently runs), probably mostly b/c it excludes configurations that aren't runtime or implementation. Another way to make this faster would be to set the \"skip\" parameter for all api and core projects. I think it probably pretty safe to say that the \"support\" modules would cover all dependencies since they depend on the core and api modules and so would pull in the dependencies transitively. I haven't tried that yet though and I am not sure my gradlefu is strong enough to try that... . I fixed the comments but I am not sure that last change to disable the check in core & api made much of a difference, a little over a minute. It makes me wonder if it did anything. \nDo you think it is worth trying to copy the runtime/implementation dependencies into a single folder and running the command line scanner? I think the command line scanner would only take a couple minutes, but I am not sure how long copying the dependencies from the gradle cache would take.\n. > \n\nIs there anything left to do here?\nThe current CI build fail has reasons beyond this PR:\n\nCaused by: org.gradle.api.resources.ResourceException: Could not get resource 'https://jcenter.bintray.com/com/jcraft/jsch.agentproxy.jsch/0.0.9/jsch.agentproxy.jsch-0.0.9.pom'\n\n\nI restarted the build so if this passes I can merge it.\n\n. I think this looks good and because it is relatively small and appears backwards compatible so I vote to merge it to 5.3.x. I agree a test case would be appropriate. . If you merged master to your branch and push it to this PR the test might finish and I could merge this. @mmoayyed may be able to merge it without the tests checks all passing but I can't. \n-- edit - at the moment it looks like there is still a different unused import in that class.. This is using a docker container to run ruby (and a ruby script) which is not typical for the CAS build. I suppose the travis build image could include ruby and a shell script could install the needed gems but I think this is faster and it is easier to run the document check locally. Another option might be jruby from gradle but I am not sure whether all gems are available for that or not (I haven't worked with jruby directly). \nThis is command I use to run this locally on windows (w/ docker for windows):\nset CAS_DIR=c:\\users\\hdead\\git\\cas\ndocker run --name=html-proofer --rm --workdir /root -v %CAS_DIR%\\docs\\cas-server-documentation:/root/docs -v %CAS_DIR%\\docs\\cas-server-documentation\\build\\out:/root/out -v %CAS_DIR%\\ci\\html-proofer-docs.rb:/root/html-proofer-docs.rb --entrypoint /usr/local/bin/ruby hdeadman/html-proofer /root/html-proofer-docs.rb\nIf you are OK running this via a docker, we could move image under apereo if you prefer. \n. The advantage of moving it to build is that it could run in parallel with the build, but then a documentation error would prevent publishing the build artifacts to the snapshot repo (but that isn't an issue for PRs b/c that publish jars shouldn't run on pull requests and documentation should be valid prior to a merge). \nMaybe I should make the script smarter to only run validate documentation if /docs is modified? \n. This pull request fixes a couple remaining bad links and after that I think everything is good (on master) except for the CAS-Protocol-Specification.md which has lots of \"bad\" anchor links and so I specifically avoid validating that file.  I could probably turn that on now (and since this pull request updates some docs it will be a good test that it still runs). I fixed my problem and was able to authenticate to Linkurious via OIDC. Somehow I had missed the scopes attribute for my service and noticed it on a re-reading of the OIDC docs page. \nAfter I get feedback on this pull request I will port it to master and 5.3 if applicable. . I am not seeing the unboundid-ldapsdk in the latest 6.0.x snapshot - https://oss.sonatype.org/content/repositories/snapshots/org/apereo/cas/cas-server-webapp-tomcat/6.0.1-SNAPSHOT/cas-server-webapp-tomcat-6.0.1-20190129.102459-18.war\n\n. Yeah, you are right, I was confused, but the link you posted to the pom is showing the unboundid-ldapsdk as test scope so I am still not getting it pulled into my overlay which is referencing cas-server-support-ldap. \nxml\n<groupId>com.unboundid</groupId>\n<artifactId>unboundid-ldapsdk</artifactId>\n<version>4.0.9</version>\n<scope>test</scope>. I will add a test later, but it's probably not critical b/c this is just some code that avoids a harmless WARN message so as long as the existing tests work it's probably doing no harm. I feel a little bad changing tests right now while @tduehr is busy upgrading to junit5. . I probably won't be able to test out that out until this evening, but I was able to replicate it last night outside of the overlay (on master) so I should be able to do that test of backing off spring boot version changes fairly easily. Were you able to replicate this issue? I have seen it at both home and work so I don't think it some strange gradle cache issue or something wrong with my local environment. \nDo you agree that it makes sense that the current code doesn't work? The only way I can think that it would work as-is would be if beans were lazy by default. I also don't like the mystery of why it works in 6.0.x. . OK I will make those changes. We might want to back port the change to 6.0.x just in case whatever mysteriously caused it on master starts happening on 6.0.x (as things are upgraded or backported). I can also look into a test that would catch this. . I just cherry-picked the test to 6.0.x (without any fixes) and it passes there. I then ran it with:\n@TestPropertySource(properties=\"cas.authn.x509.crlFetcher=ldap\")\n and somehow that passed too so I will step through debugger and find out how that happened.  I will also fix the checkstyle issues on the test. . It looks like it passes on 6.0.x b/c there is a default ldap config inside the x509 config and it has an ldap url set to \"ldap://localhost:389\" so that must be what changed. At least that mystery is \"solved\" but I haven't dug into what commit changed that. . Do you have the stack trace of the NPE? Is there something in that method that could be checked to avoid the NPE?. If I am not mistaken, these tests show is that the enhanceWithEntryResolver=true property is not doing what is supposed to do with the UnboundID provider. The ActiveDirectoryBindDnSSLLdapAuthenticationHandlerTests test is using SSL and UnboundID but it will fail with: \nerrorMessage='Unable to parse string 'admin@cas.example.org' as a DN because it does not have an equal sign after RDN attribute 'admin@cas.example.org'.'\n<authenticate response=[org.ldaptive.auth.AuthenticationHandlerResponse@2020883928::connection=[org.ldaptive.DefaultConnectionFactory$DefaultConnection@1284161223::config=[org.ldaptive.ConnectionConfig@1298780808::ldapUrl=ldap://localhost:10636, \nconnectTimeout=PT5S, responseTimeout=PT5S, sslConfig=[org.ldaptive.ssl.SslConfig@1131577797::credentialConfig=[org.ldaptive.ssl.KeyStoreCredentialConfig@397828864::trustStore=file:/tmp/adcacerts.jks, trustStoreType=JKS, trustStoreAliases=null, keyStore=null, keyStoreType=null, keyStoreAliases=null], trustManagers=null, hostnameVerifier=org.ldaptive.ssl.AllowAnyHostnameVerifier@787178b1, hostnameVerifierConfig=null, enabledCipherSuites=null, \nenabledProtocols=null, handshakeCompletedListeners=null], useSSL=true, useStartTLS=false, connectionInitializer=[org.ldaptive.BindConnectionInitializer@614785733::bindDn=Administrator@cas.example.org, bindSaslConfig=null, bindControls=null], connectionStrategy=org.ldaptive.DefaultConnectionStrategy@27da994b], providerConnectionFactory=\n[org.ldaptive.provider.unboundid.UnboundIDConnectionFactory@1173504479::metadata=[ldapUrl=ldap://localhost:10636, count=1], providerConfig=[org.ldaptive.provider.unboundid.UnboundIDProviderConfig@255259469::operationExceptionResultCodes=[SERVER_DOWN], properties={}, controlProcessor=org.ldaptive.provider.ControlProcessor@72e36677, connectionOptions=null, socketFactory=null, sslSocketFactory=null, searchIgnoreResultCodes=[TIME_LIMIT_EXCEEDED, SIZE_LIMIT_EXCEEDED, REFERRAL]]], providerConnection=org.ldaptive.provider.unboundid.UnboundIDConnection@6b86826a], result=false, \nresultCode=INVALID_DN_SYNTAX, message=LDAPException(resultCode=34 (invalid DN syntax), errorMessage='Unable to parse string 'admin@cas.example.org' as a DN because it does not have an equal sign after RDN attribute 'admin@cas.example.org'.', ldapSDKVersion=4.0.9, revision=29290), controls=null] for dn=admin@cas.example.org with request=[org.ldaptive.auth.AuthenticationRequest@407254816::user=[org.ldaptive.auth.User@1693375960::identifier=admin, context=null], returnAttributes=[sAMAccountName, cn], controls=null]>\nThe ActiveDirectoryBindDnLdapAuthenticationHandlerTests test works because it is using the JndiProvider but that is not using LDAPS or startTLS due to the JDK-8217606 bug. \nThat leaves users of Active Directory that login via sAMAccountName in a bind of not being able to use encryption (which could be required by the DC) unless I am missing some configuration that would work with UnboundID. (That is certainly possible, I just know the config that was working for me with JndiProvider doesn't work as-is with UnboundIDProvider.)\nNow that I have a way to recreate the issue I can try to debug what is going on. \n@tduehr I know you are working on refactoring the tests and I haven't looked to closely at what you are doing but the tests I am adding certainly have lots of duplication across the properties so if you are doing something to alleviate that, I will adopt it once it is merged. I can adapt this stuff to whatever you are doing. \nI also want to create a test user in the AD/samba directory that has different values for cn, userPrincipalName, and sAMAccountName because now they are all \"admin\" and in real life that isn't usually true. I can bind to this directory in Apache Directory Studio as cas\\admin, admin@cas.example.org and cn=admin,cn=Users,dc=cas,dc=example,dc=org but some of the tests that are doing that in CAS with ldaptive don't seem to be returning attributes even though they can authenticate. \n. One thing I have learned is that I should probably be using AUTHENTICATED instead of AD (even though I am using Active Directory). There is probably a better name for the AD type and it may have some valid use cases (e.g. authenticating without a separate bind user to look up the DN of the user authenticating and using the AD specific auth formats domain\\user and user@domain.xyz) but I think it has some bugs (e.g. it doesn't seem to be able to return attributes as part of the authentication). \nI also don't think the UnboundID provider makes sense for the AD type b/c it would require a dnFormat that mapped to the full DN of users in a specific folder in AD. That would require all users to be in a single folder or OU. Trying to use a dnFormat without an equals sign in it will fail with UnboundID when Ldaptive creates and UnboundID DN. \nI still have some cleanup and more tests to work on but this samba container makes it must easier to play around with AD. . This shouldn't be needed if I move the static-uris.properties file into a jar, presumably the same jar where it is used. I will try to update the pull request sometime in the next few days. . Right now those variables are used in dependencies.gradle but the same version numbers are also hard coded in the URIs of most of the js/css artifacts in static-uris.properties.  Aren't all dependency versions set via a variable in gradle.properties? I was trying to follow that pattern. At one point I had also thought to filter those variables into the URIs contained in static-uris.properties so that one could change the version in one place. If I move static-uris.properties to another jar (instead of resources) then filtering would only need to be turned on for that one module's resource directory, but as a maven user it will probably take me some time to figure out how to do it in gradle so if you don't like filtering, I won't look into it. . It's possible, although I am not sure what you mean by creating it internally. You can only set one properties object as the common messages so I was trying to use a PropertiesFactoryBean to set it up so that it would be easier for other properties files to be included later (I know that violates a principal of writing code for requirements that don't currently exist). If I manually make a PropertiesFactoryBean rather than letting Spring make it as a bean, then I have to invoke methods from the InitializingBean interface and the FactoryBean interface that spring does automatically. I thought making it a bean was a little cleaner. If I am only trying to support a single property file then it probably makes it cleaner to not create a bean and just set it directly on the message resources. . I still haven't tested things in the webapp, but now the unit tests are passing, and I have the versions being filtered into static-uris.properties. I moved static-uris.properties to the same jar where it is used. Someone could always override it by putting a copy in their overlay (web-inf/classes/static-uris.properties would override version in jar) but that isn't really something anyone would want to do. They could also override individual values in static-uris.properties by putting the key in custom_messages.properties (also not something I see a reason anyone would do).\nRegarding testing, I was planning to test the overlay once 5.1.0 was released so I could try out the new overlay. How are you planning to deal with 5.1.0 in the overlay project? Will the changes go in to master or in a 5.1 branch? \n. I don't see how I could cleanly call bean.setCommonMessages(Properties props) and use a PropertiesFactoryBean without using auto-wiring. (I am using PropertiesFactoryBean to make it easier to add additional properties files in the future). I can see how to do it uncleanly but it would involve calling getObject() on the PropertieFactoryBean (and dealing with checked exception) and I would also have to call afterPropertiesSet() when I was creating the PropertieFactoryBean. Both of those methods are called by Spring if I make it a bean. \nI set the autowired property to required=false so if the CasReloadableMessageBundle was used somewhere that the casCommonMessages bean wasn't available then it wouldn't be fatal. . I realize it's not necessary for this requirement to use a PropertiesFactoryBean instead of just a regular Properties object, but I don't think using a PropertiesFactoryBean is that abnormal. If Spring sees a bean implementing FactoryBean interface then it just calls 'Properties getObject()' and the returned Properties object is the bean, there is no proxy involved. This is just one bean being autowired into another bean. Below is an example where multiple property files are merged into one by the PropertiesFactoryBean and then implementors could put entries in a custom-common-messages.properties file that would be available to ThymeLeaf templates. \n@Bean\n    public PropertiesFactoryBean casCommonMessages() {\n        final PropertiesFactoryBean properties = new PropertiesFactoryBean();\n        final Resource[] propertyResources = new Resource[] {\n            new ClassPathResource(\"/static-uris.properties\"),\n            new ClassPathResource(\"/custom-common-messages.properties\"),\n        };\n        properties.setLocations(propertyResources);\n        properties.setSingleton(true);\n        properties.setIgnoreResourceNotFound(true);\n        return properties;\n    }\nI will update the pull request to create and load a regular Properties object and set that, but it seems odd to have \"static-uris.properites\" as THE common messages property file. Maybe I should rename it to common-messages.properties or non-i18n-messages.properties? \nMy secret goal in using PropertiesFactoryBean is avoiding the checked IOException but I guess I can use UncheckedIOException to re-throw it, or maybe I should log it... \ntry {\n            Properties p = new Properties();\n        p.load(new ClassPathResource(\"/static-uris.properties\").getInputStream());\n        bean.setCommonMessages(p);\n    } catch (IOException e) {\n        throw new UncheckedIOException(e);\n    }. Yeah, I was going to mention that the includeBC doesn't really make sense on that command, I can remove includeBC. I think the other commands have to add or remove it based on the option otherwise once it is added it stays added. \n. I haven't addressed this yet. What about this is not a good idea? Autowiring a an optional bean into an Action? When you suggest making a new Action, do you mean have x509check() method return a different Action depending on the feature being enabled?\nThanks.. There are a lot of enginenames and many support multiple names (e.g. js and javascript and ecmascript and rhino are all aliases for same engine). jython and python both work as engine names and people could use .jy or .py as the extensions. \nI could dynamically get a list of engines supported by the current classpath and validate the enginename against the various shortnames for all the engines that are found by: \nScriptEngineManager manager = new ScriptEngineManager();\n        List<ScriptEngineFactory> engines = manager.getEngineFactories();\nThis shows sample of getting all the engine aliases:\nhttp://www.drdobbs.com/jvm/jsr-223-scripting-for-the-java-platform/215801163?pgno=1\nI wouldn't want to slow down everyone's startup if that is at all expensive but I could try it out. Regarding typos, they will probably get an error message or warning from person directory when it tries to use an invalid engine name. \n. I guess I could just try to get the engine name they entered to see if it is valid, rather than building a full list. That wouldn't penalize anyone that wasn't using the property. . If by opportunity you mean opportunity for me to learn the streams api better, then yes, let's call it an opportunity... but after converting it to streams or in the process of doing so I noticed in the debugger that I was looking for CAS.properties which was working on windows but not on linux (since the file is named cas.properties in the unit tests) so that is why test was working for me locally and not on in travis. . I guess it's not required if I follow your second suggestion to call the setter in the constructor used by the monitor. I was trying not to change the default value for the other users of the base class. In terms of the reason I want to do this at all, I don't want the server to not start up if there is a misconfiguration of ldap or a possible ldap outage at the time CAS is starting up. \nI had an issue where I had a typo in the bindDn and in that case the server started but the exception on startup caused the server to not finish its config and it wasn't listening on port 8443 in the container. Anyway, I made the mistake of trying to figure out why it wasn't listening on the port rather than troubleshooting the ldap issue which turned out to be the cause of ssl issue. If I add various ldap modules to an overlay they all allow the server to startup with exception of the ldap monitor which will cause server to fail startup if it not configured correctly (or can't connect to ldap). Setting the minsize to zero allows the server to come fully up. \nI will update per your suggestion. . There is a maxWait property added to the monitor's ldap properties class but there is also a maxWait property on the nested thread pool config class. I think the former is being used, but should I delete that property and change the code to use the property from the pool? If not I need to remove the cas.monitor.ldap.pool.maxWait from the documentation I added in this pull request (because it isn't used). . Actually, the two maxWait entries have different default times (5s vs 2s) so it might be easier to just leave the code alone and not use the property in the thread pool config. . I removed those and a webapp.gradle change I accidentally checked in, should I go ahead and merge or do you want to?. I don't think I would mind personally. If I am upgrading my CAS overlay to 5.3.7, I wouldn't expect it to be too hard to change the spring boot version in the overlay, and if they updated a dependency  that fixed a vulnerability on a vulnerability scan then I would appreciate that.  If this gets merged I could probably try it out in my overlay once the snapshots are published. . I made this change but I will look into adding a test for it to see how a missing service is handled.. ",
    "fedon": "Sure, I'll update settings docs.. Travis failed on support:cas-server-support-validation:test which I didn't touch. It was docs commit :). To disable x509 Webflow and allow only REST for x509 auth. In addition it conflicts with SPNEGO non-interactive Webflow.. Customer wants.. REST needs x509 credentials which are in webflow. What refactoring are you talking about?. Test fails on verifyThrottle response status. Which has nothing to do with my commit. And the test error was introduced in be38a29bb2.. Do you expect me to revert be38a29? Or fix the test? On which status 403 vs 423? 423 is locked which seems to match better.. Conflict is too complex to resolve. I better provide brand new forward port.. Unluck with the first fix. I had to introduce minimal overhead into REST endpoint directly.. ticketRegistrySupport.getAuthenticationFrom(tgtId) returns NULL for invalid TGT not Exception. But I can not fix it there see the first fix, because other uscase rely on it.\nAnd failed test case is not in the 5.1.x branch. Local test runs without fail.. Any discussion is better than blind close as the first thing.\nThe root cause TicketRegistrySupport is designed to return NULL (see the first fix) and the bug is TGT is not validated before generating ST, but expecting InvalidTicketException. Which will never happen without validation. So, I put validation as the first step. It is just one additional map get.. I have lost /p /div for warning block. I have already fixed the bug in my clone repo. Should I create one more PR?. ",
    "cifren": "It is what I thought... But theory without practical examples is hard to understand correctly. Where do you suggest to add that kind of thing ?. 1. Sorry for the typo on P4j...\n\n\nThere is an initial action for the class initialFlowSetupP4jAction.java, it is initialFlowSetupAction.java, I didn't know if it was working, it needed only the context values. I could improve it and extend the initialAction instead of copy a part of it. Let me know what you think about it.\n\n\nI will do this when it is done with this part. I tried to override, but private method gives a little less flexibility. It means it didn't change that much the class except we know where it comes from. :). Changes have been applied. I made the changes on master https://github.com/apereo/cas/pull/3172. I didn't take the time to do it and I went traveling... I'll take care of it in the next days. Yes tell me how to test it ? How should I do ? \n\n\nOn my part, I use the gradle overlay, I test all my files by putting them into src. After that I have copied one by one those files into the repository apereo/cas, for me everything was good. I suppose that is not the way I should process... Must I generate a war from that modified apereo/cas and copy it over the overlay ?. If I only copy the files how can I test like @mmoayyed does ?\nHow would you \"rebuild and install only the necessary modules\" in CAS project ?. Ok never mind the last question, I cloned CAS project and I ran \"./gradlew -q :support:cas-server-support-pac4j-authentication:build\" and gave me the jar\nIs it working now ?. Yes thank you very much for this explaination, the solution I found kind of did the same. I could not make the overlay work with my solution, but it should be ok, the compilation worked.. Sorry, it took me a while to get time to work on it.\nI made it perfect (as much as I could)\nI ran the checkstyle, javadoc and created a jar that I sent to an overlay and all is working fine !!\nIs it good on your part ?. How to re-open the pull request ? Should I create a new one ?\nI did a git rebase 5.2.x is it good ?. I dont have the \"Reopen and comment\" button, I am not sure why\n. See https://github.com/apereo/cas/pull/3293. Ok, I might adapt it quickly another day with another git technique  :)\nDon't bother to do anything on that pull request yet.. Closed, I created another PR https://github.com/apereo/cas/pull/3172. You are right, sorry for the dependency part.\nHowever, the complements could be added, what do you think ?. I updated for the requested changes\nThe master branch will need more work because changes have been made and some files have been deleted and created elsewhere or renamed. Git does not seem to know how to deal with those so I will need to adapt the code to the new master changes.. I catch only the exception I need in that case and I redirect it to the proper page, if I catch more, I am not sure the page will represent really the exception. As you wish, tell me and I'll make it.. I kind of copy that part, but the message from \"RegisteredServiceAccessStrategyUtils.ensurePrincipalAccessIsAllowedForService\" is 'LOGGER.warn(\"Cannot grant access to service [{}] because it is not authorized for use by [{}].\", service.getId(), principalId);', It was pretty close for me which comes from the initial error.\nI will remove and add a simpler one. . Done. Done. Done. For what I see, they all need to be protected because those variables will be accessed by configureWebflowContextForService and the constructor. I will try do my best. I don't know what it does... Do you have a suggestion ?. Because on Pac4j you dont need configureCookieGenerators(context); configureWebflowContext(context); to be executed. you are right. ",
    "leeyc0": "TGT serialization/deserilzation occurs when CAS is writing/reading the ticket to/from MongoDbTicketRegistry. Actually, the whole JSON serialization issue in #2538 is about writing to MongoDB.\n(Actually, I believe some other persistent storage will have same problem.). TGT serialization/deserilzation occurs when CAS is writing/reading the ticket to/from MongoDbTicketRegistry. Actually, the whole JSON serialization issue in #2538 is about writing to MongoDB.\n(Actually, I believe some other persistent storage will have same problem.). That's exactly the problem. No matter how I configure OIDC scope NO attribute would be released, and I figured out if I change it to ReturnAllAttributeReleasePolicy then the attributes will be released according to OIDC scopes.\nMaybe the bug is in somewhere else then.. That's exactly the problem. No matter how I configure OIDC scope NO attribute would be released, and I figured out if I change it to ReturnAllAttributeReleasePolicy then the attributes will be released according to OIDC scopes.\nMaybe the bug is in somewhere else then.. After reading the source code, it seems that I am supposed to configure the scope in service definition, but I cannot find such setting in CAS management. Correct me if I am wrong.\nI am still figuring if I can do such configuration. After reading the source code, it seems that I am supposed to configure the scope in service definition, but I cannot find such setting in CAS management. Correct me if I am wrong.\nI am still figuring if I can do such configuration. My mistake. Seems I found this option, and will test. If it is correct I will abandon this PR. My mistake. Seems I found this option, and will test. If it is correct I will abandon this PR. really my mistake, missing required scope config in cas-management. I will close this pr. huh? I did not close it either. Argh, force push closes it.... It did not merge?. Sorry for the trouble, a new PR is submitted. ",
    "tsschmidt": "This same bug is in the 4.2.x branch as well.  . Addressing the last two comments you made.  Other than that I think it is ready.  I tested this morning to make sure the current CAS Mgmt Webapp still worked as expected.. Changes pushed.. That was not form a change I made as far as I can tell.   I think it is just from what is failing in master. My apologies, that is the correct fix.  I have never hit this problem\nbefore because there has always been a default service loaded.  I think the\ntest runs in an order before a default is loaded or it is not set to\npopulate the registry.  Either way the changes are what is needed.\nThanks\nTravis\nOn Fri, Jul 7, 2017 at 2:25 PM Misagh Moayyed notifications@github.com\nwrote:\n\nThis is what I ended up doing to make the test pass. Not sure yet why;\ncould have been a faulty test:\nhttps://github.com/apereo/cas/blob/master/core/cas-server-core-services/src/main/java/org/apereo/cas/services/DomainServicesManager.java#L120\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2770#issuecomment-313796785, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvbiAgzVq2l_7DpIodNFS9-Ackn0iks5sLqIsgaJpZM4OQMGo\n.\n. > When running the application, Angular notifies in console that it is running in development mode, not production mode.\n\nIf using Spring bootRun, I think this is normal since it is not compiled to javascript until run in the browser for debugging.  This should go away if building into a war deploying to a server.\nAlso is there a way I can respond directly to comments? . >> If using Spring bootRun, I think this is normal since it is not compiled to javascript until run in the browser for debugging.\n\nIt is bootRun. Could we perhaps integrate and wire that step into the build so it works for all cases? Majority of development happens via bootRun and it would be great to make it all consistent with no exceptions.\n\nI am confused as to what the issue is.  The bootRun step is wired to do a buildDev that will include source maps and metadata so errors found during dev can be linked directly to the TypeScript source.  The console warning is just to let you know it is a dev build.  Building a war will compile with --prod and all code will be compiled fully to javascript and optimized and this warning will not appear in the console. \n. Latest push addresses all the errors mentioned by reviewers except the SAML2 Provider service Type.  I forgot I didn't finish that screen.  \nbootRun as far as I can tell is not building with --prod.  Sorry to be thick about this, but are you saying it should compile with --prod so it is the same as building for a war?\nA problem I have also noticed with Tooltips, and I am not sure of the cause or the fix, is that they sometimes on the first showing do not correctly show the text.  Moving cursor off and back on again it shows correctly.\nKeep the bugs coming and also let me know if there are any over all design/layout/architecture changes that would improve the PR.\n. Latest pushes contain changes for running angular unit tests with Karma.  Admittedly the test are basically just stubs at the moment that ensure a component can be instantiated. It is something we can hopefully build on.  I added an angularTest task to run that executes the test, but is outside of the gradle build for now since I am not sure if/how the Travis CI can run Karma tests.. Ah yes.  My last commit before needed some changes to test code and a small compile error was introduced that stopped the ng build --prod from succeeding.  Those issues should be fixed with the latest push and hopefully you can build now.\nIf a feature branch works best or makes it easier for everyone to work on these changes, that is fine by me.\nHere are some things to consider for this PR and planned features:\n\n\nThings that need to be looked at closely is functionality that required JQuery in the original screens.  We need to either find a way to integrate JQuery back in or retool the components that relied on it.  Right now I think the SAML2 screen is not fully functional.\n\n\nI am not completely happy with the up and down arrows that I came up with for ordering services, but I wasn't a big fan of the DnD that was there before either.\n\n\nDates right now are reliant on the HTML5 browsers for Datepicker functionality, so older browsers are not fully supported.  \n\n\nA scrollable Tab bar would also be ideal.\n\n\nFor the UI isuues above, ultimately I would like to move on to using these: https://material.angular.io/components\nThe recently added Datatable and the Datepicker are nice additions and the srolling Tab bar looks great too. \nSince we have made the DomainServicesManager the default in CAS it may make sense to add the Domain screen with this PR, since that is how the services are accessed by CAS now.  Everything still works as expected with just the Services screen though and it could be introduced in a later PR.\nThe JSON Payload refactor I think could be done as part of this merge or a separate PR later.  . Fix is pushed.. I would say go ahead and merge this when you are ready. So here are some TGTs we saw in the logs before the change:\nTGT-****DmbT6MIcKY-sjBH6oZAHvlhrZGLu8TKDIAqrH4E1toOwJQ-ssodev3\nTGT-**********KwF0SL5EyE-ssodev3\nTGT-*XHZCy5zXKW-BYy1wpGBQpIDQL9-8J2EjwnasgXIe-RKDeG8DFzQEkxFoBT6SkZQo-ssodev3\nTGT-*********b9TUEOde7c-ssodev3\nTGT-**********qvu8sOxzGI-ssodev3\nTGT-6-QzGkfOYZ-xosZDVVlOL6rIC5gIFuaMyX5HPMJKeT29SHgr4x1pI5J-T1RYisvBscrH0-ssodev3\nTGT-********AvQwaEBleY-ol9E-ssodev3\nHere are some after deploying the change:\nTGT-2-********3bCF0aWreU-ssodev3\nTGT-3-********7mxrrACUMA-ssodev3\nTGT-4-*********yDclpc9Zzk-ssodev3. I think the issue comes from being bypassed by Duo and not a CAS process.  So Auth Provider needs to set bypass attributes in the authn when Duo returns allow from in the getDuoUserAccount.. In DefaultDuoMultifactorAuthenticationProvider, I think this will fix the issue:\nif (acct.getStatus() == DuoUserAccountAuthStatus.ALLOW) {\n        LOGGER.debug(\"Account status is set for allow/bypass for [{}]\", principal);\n        authentication.addAttribute(AUTHENTICATION_ATTRIBUTE_BYPASS_MFA, Boolean.TRUE);\n        authentication.addAttribute(AUTHENTICATION_ATTRIBUTE_BYPASS_MFA_PROVIDER, getId());\n        return false;\n}\nAnother option would be create a DuoBypassProvider the extends DefaultMFABypassProvider and adds a REST call to Duo to see if the user is marked as bypass.  I can't remember how to log in to our Duo admin so I can set up a test for this\n. I think the entire method supportsInternal(...) can go away in DefaultDuoMultifactorAuthenticationProvider and this can be handled in DetermineDuoUserAccount.  Currently we call this endpoint to Duo twice for each duo provider in the resolved list.  I also have a need for this change, soon, and was getting ready put PR together to refactor DetermineDuoUserAccount for handling Duo outages.  Should have some to review by tomorrow, targeting 5.3.x. Cool, I will get the small stuff changed and pushed in the morning.  . Are we able to set active mfa provider here: SelectiveAuthenticationProviderWebflowEventEventResolver?  Then would we not need \"duoInitializeLoginAction\"?. Got a handle on this late in the day working with multiple Duo instances.  I will try and finish up tomorrow morning and get an update committed.. Latest commits add supporting multiple instances of Duo.  The final resolved provider is decided in multiple places.  If SelectiveAuthenticationProviderWebflowEventEventResolver returns multiple events then the decision is passed on to the MultfactorFactorProviderSelector that is configured.  For this reason I kept the addition  of adding the resoloved provider into the webflow conversation scope.. > if SelectiveAuthenticationProviderWebflowEventEventResolver returns multiple events then the decision is passed on to the MultfactorFactorProviderSelector that is configured.\nI think the scenario is  mfa-duo-1 is resolved as the global MFA Provider, but the service is MFA policy resolves to mfa-duo-2.  Then both are returned from Selective resolver and the decision is then made by the configured MultifactorProviderSelector for the MFA flow.  There are currently two instances: RankedMFAProviderSelector and GroovyMFAProviderSelector.\n. If Selective resolves to only one provider, then the method in CAS resolver\nwhere the Selector is executed is not called.  So we would need to put the\nwebutils put call in multiple places.  I am working on a different approach\nthat would solve this.\nOn Tue, Sep 4, 2018, 12:15 PM Misagh Moayyed notifications@github.com\nwrote:\n\nThen both are returned from Selective resolver and the decision is then\nmade by the configured MultifactorProviderSelector for the MFA flow.\nRight. So how about we simply move the\nputActiveMultifactorAuthenticationProvider right after the selector picks\na provider? That way, the behavior applies to all MFA providers, and isn't\njust a feature of duo.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3498#issuecomment-418485353, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvVLlCWt31Pto_38t2B_0tTWFpbK1ks5uXtFOgaJpZM4WSUPR\n.\n. The latest commit removes the use of the Variegated provider from Duo in favor of registering a Bean for each provider created in to the ApplicationContext.  This also shifts the resolving of handling and providers to a place where other MFA providers can use the same configuration to offer multiple instances.  Key additions and changes are:\n- MfaCredential \n    This is an interface that can be implemented to mark the Credential as a created from a MFA provider.\n    Adds getter/setter requirements for the provider id that created the credential.\n- MfaAuthenticationHandler \n    This is an interface used to mark the AuthenticationHandler that it used to authentic instances of MfaCredential.  Adds getter for provider id and a default supports() method that checks if the passed Credential was created by the same provider the AuthenticationHandler uses\n- ByCredentialTypeAuthenticationHandlerResolver \n   Added implementation for resolve() that filters the list of handlers by passing the credential to the handler supports() method.\n- MfaInitializeAction\n   This action will pull the corresponding MultifactorAuthenticationProvider from the ApplicationContext for the active flow.\n- AbstractCasMultifactorWebflow \n  Added an ActionState to call MfaInitializeAction in the MFA based on on STAT_ID_INIT_LOGIN_FORM\n\n. > Do we need to remove the Variegated provider API altogether then, if we have no use for it?\nDuo was the only authn method currently using it.  If this approach is preferred then I believe it can be removed if we see no future use for it.\n\nI am guessing that these two need to be implemented by all credentials and providers for MFA, and not just duo, right?\n\nIt would need to be implemented by all MFA providers that are able to be configure multiple instances of itself.  So far that is only Duo.  If it makes no sense to provide multiple instances of  provider or the provider just can't support it then there is no need to implement these interfaces\n\nHow does this point in the webflow deal with this? Does it impact the REST API when MFA is attempted?\n\nSo non browser Duo use should work as it is currently coded.  The REST API, I will need to look into further.\nFor breaking changes, if we only do this for Duo in the current releases then there are no breaking changes, that I foresee.  Duo configuration already supports defining multiple instances and that is the only breaking change I see if we added to other MFA providers(i.e. authy[0] is not supported).\nScope wise, only applying this PR to Duo still fits within expected behavior of current releases, and only adds the functionality that rank order among Duo instances is now respected and guaranteed.  Applying this pattern to other MFA providers should be handled in future releases, but this would give someone a template to use if they needed to implement this behavior locally.\n. Latest commit address comments in the last review.  \nI was not able to find any affect on the REST API, as far as I can tell.  . I am starting the master refactor now, waiting for IDE gradle refresh, Pushing one more  commit to fix Codacy issues\n.  Ability to rank MFA providers of the same type..  Ability to rank MFA providers of the same type.. > The reference is only there to provide that constant (which is likely not good). Could you clarify?\nThat is exactly why I removed it. We can put it back after the saml core refactor and remove the static final from here if that would be preferred. \n.  Break core-webflow module to remove all MFA-related actions to a specific webflow-mfa module instead. Make sure all MFA modules that deal with webflow include the new module by default..  Ability to rank MFA providers of the same type.. Anybody else feel that \"MultifactorAuthentication\" can be refactored to \"Mfa\" in all class and method names to save screen space and keystrokes? . Sure, I think this one other change I need to port into here as well\nOn Fri, Oct 5, 2018 at 9:46 AM Misagh Moayyed notifications@github.com\nwrote:\n\nTravis, could merge with master once please? This should be near ready to\nmerge.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3508#issuecomment-427428677, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvVemKMMBJb96pWqhh2qqvI04tZwuks5uh40DgaJpZM4WgfCv\n.\n. I prefer the solution that I have in #3518 currently, so if we merge that PR we can close this one.. Closing in favor of solution in #3518. Latest commit removes the MfaInitializeAction that caused issues with MFA Providers not set up to use multiple instances.\nAdded a MFA Provider Factory feature that creates multiple instances of a MFA provider, that can be refreshed.. I had originally tested this functionality with delegating to another instance of CAS and then doing Duo as the second factor auth.  Is this the same scenario you desribe above?. #3521 should fix this error.  Sorry should have tried this with something other than my Duo changes.. So it looks like Beans marked with @RefreshScope can not be put into the conversation scope.  Ugh.. I will push a commit shortly that removes MfaInitializeAction into PR #3521.  I will revisit this with the other reactor PRs.. I think it boils down to putting a non-serializable object into the flow scope.  I have pushed changes to #3521 that bypasses MfaInitialize for now, we will revisit in the refactor PRs. Thanks you.\n\nOn Fri, Sep 14, 2018, 9:25 AM LELEU J\u00e9r\u00f4me notifications@github.com wrote:\n\nI'll re-test your fix.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3519#issuecomment-421411494, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvWXGpNc8m0BCLL67LGWIqnKG9Fbdks5ua9hhgaJpZM4WousV\n.\n. Working on it.. Also starting hz throttle port . On it.\n\nOn Fri, Sep 28, 2018 at 1:22 AM Misagh Moayyed notifications@github.com\nwrote:\n\nCould you take a look at the CI failure here?\nhttps://travis-ci.org/apereo/cas/jobs/434341045\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3565#issuecomment-425360551, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvWgPSzsAzSnVGEw2ofbqx_lKS2egks5ufdwogaJpZM4W9MfS\n.\n. Changed.\n\nOn Mon, Oct 1, 2018 at 12:23 AM Misagh Moayyed notifications@github.com\nwrote:\n\n@mmoayyed commented on this pull request.\nIn\nsupport/cas-server-support-throttle-hazelcast/src/main/java/org/apereo/cas/web/support/config/CasHazelcastThrottlingConfiguration.java\nhttps://github.com/apereo/cas/pull/3570#discussion_r221512905:\n\n@@ -37,7 +38,7 @@\n     @Bean\n     public IMap throttleSubmissionMap() {\n         final HazelcastTicketRegistryProperties hz = casProperties.getTicket().getRegistry().getHazelcast();\n-        final int timeout = Integer.parseInt(casProperties.getAuthn().getThrottle().getSchedule().getRepeatInterval());\n+        final int timeout = Duration.parse(casProperties.getAuthn().getThrottle().getSchedule().getRepeatInterval()).toStandardSeconds().getSeconds();\n\nBeans.newDuration(). Cant break the existing defaults.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3570#pullrequestreview-160176519, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvSYOsUcGYXiK85sOEQeXoiBeONKWks5ugcMNgaJpZM4XBWVI\n.\n. I am thinking this has to do with my change to use memory stats.  I have started looking into changing the test use a mock for memory stats.  This will get us by until I can get that redone.. I think it is mostly due to Jdk 11.  If this has really bean around since 5.2, then most likely jdk 8 is selecting a non-blocking algorithm by default.  . Ok, yeah, I didn't really look close enough to what I was modifying.  I\nthink where I am seeing the issue is only when using default jackson mapper\nwith  Spring when sending the service over the wire between the client and\nthe server.  Looks like I need to find a way to configure Spring to use the\nproblem handler when serializing/de-serializing services for REST endpoints?\n\nOn Mon, Dec 24, 2018 at 7:15 AM Misagh Moayyed notifications@github.com\nwrote:\n\n... or write a mapper to set NOT_SET to UNDEFINED.\nThis is not necessary because the very same\nRegisteredServiceMultifactorPolicyDeserializationProblemHandler.java you\nmodified here should handle scenarios where NOT_SET can be translated to\nUNDEFINED. Everything that passes through that handler should be caught,\nand there is a test case that demonstrates this. If you find other\nregistries that don't pass through the Jackson library, those are the ones\nyou should review and fix.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3707#issuecomment-449745208, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AS0kvSbVbOmMl_GhFoPUkucRotccQoneks5u8O-EgaJpZM4ZdN9_\n.\n. Closing, wrong approach.  Will fix by customizing Jackson mapper in CAS Management to use the problem handler. Will do. What do you think makes more sense here:\n  Change the expectation that Response and Grant types will use enum names in the service entries instead of type values? (i.e IDTOKEN_TOKEN instead of 'id_token token')\n\nChange CAS Management to write the enum type values into the registered service?\nTo use the type() values we would probably need to add a valueByType() method to the enums.  The documentation doesn't set an expectation either way at the moment, but to change to enum names would be a breaking change to anyone who has set this by hand using the values.  Vice versa these won't appear correctly in CAS Managment at the moment if the values are set instead of enum names.\n. Cool, I think it will be easier if I close this PR and submit a new one coordinated with CAS Management changes.. This is needed because the services are no longer stored in an ordered collection.  They are stored only in HashMaps, so the sorted is needed to ensure evaluation order is kept, especially in the current CAS Management app that still uses single list to present services and not by domain.. That was my lame attempt to publish locally using \"gradle publishToMavenLocal\" task until I reached out.  I will remove it.. Sorry to be dense, but I am not following where the injection would come from.. Absolutely agree and I spent a lot of time trying to make it that way, but it always failed as an exception that mfaDenied  or mfaUnavailable is not in the set of defined states.  Can a sub-flow define terminal states for a calling flow?  Only thought I had to make it work was to create DeniedException and UnavailableExcpetion from the sub-flow.  . Probably not, I probably confused it with some JPQL or EJBQL or some other parameter format.. Yeah, I forgot to exclude from the commit.. Wish I knew, only way I figured out how to get the end states in to CAS flow.  . Will do\n. I had the same thought and went looking down that path first.\n- There is no bypassProvider created currently unless one is defined in cas.properties \n- The bypassProvider is called and evaluated before MFA flow starts, before /ping or /preAuth are called.  We would need to repeat the endpoint calls again, or call bypassProvider a second time or something.\n- Current bypassProvider is custom logic for specific installations, we are trying to handle bypass either from the Provider itself or because of failure mode policy.. Looks like I have this figured out.  Commit coming soon.. I was able to remove.  Commit coming soon.. Needed to unwrap providers if Variegated Provider is found. . This would fail when the context contained more than one provider.. Use the id of the specific provider as credential metadata so it can be matched correctly in ContextValidator.. I believe I was able to clear this up by not using VariegatedMFA Provider and registering multiple authentication handlers into the application context with their specific provider passed to each in the constructor.  Submitting it this way for now to limit the scope of changes for a single PR.   . Used currently in DuoAuthenticationMetadaPopulator. could be made protected and still work for the current solution.. Agreed, there are probably better ways to handle, and made easier if some other decisions are made like dropping VariegatedMFAProvider. . Will do. Will do. Will do. Ok, should we move the same constants in AbstractMultifactorTrustedDeviceWebflowConfigurer to CasWebflowConstants as well?. No need, I will remove.  Something I think I was going to try and forgot to back it out.. Should we do the same with cas-sever-core-webflow-api, that has MFA implementations?  Create cas-server-core-webflow-mfa and cas-server-core-weblfow-mfa-api and refactor all MFA classes to these two?. I will look into this along with the entire MFA refactor, MFAUtils not currently in the build for this module.. Sounds good. Not that I found in my testing.  It calls the overloaded default method in MfaAuthenticationHandler interface.. Yes, it has been refactored into a duplicate of AuthenticationContextAttributeMetaDataPopulator as I worked through the changes.  I will remove it.. Done.. I can't find that method.. Done.. This is included in PR #3498 in 5.3.x, so it should be part of 5.3.4 release. Thanks for the catch, pushed a change to correct.. Set this to the repeatInterval for the Throttle scheduler right now.  Would make the scheduled cleaner unnecessary.  Add specific property for this? . Agreed, this was my biggest concern as well.  The intent is to create beans that are registered at run time due to configuration, and have them participate in @RefreshScope.  This was the only way I was able to find to make it happen.    . A bit of scope for this review, but refactoring NOT_SET to UNDEFINED could cause some headaches with existing Service Registries.. Not sure.  At least everywhere I have used it, the values are always sourced from the mfa properties configuration.  Changing to equalsIgnoreCase I think would be fine.. The only function I see isAvailable() providing is a basic ping() to the mfa provider to ensure that it is up.  The default code that previously referenced service is now a part of the mfa failure action in the webflow, and perhaps there we should move some of that logic back into the Provider to allow customization without having to provide a custom failure flow action.\nI think custom bypass providers are a good place for any decisions that need to be made based on service properties.\nMy thought is that the details on how to connect to a mfa provider, should not change based on service requested.  . Yes, the delegated authn flow configurer and all the mfa subflow configurers as far as I know start by calling getLoginFlow(), and use the webflow.xml as a starting template.  If that template changes or someone creates a flow that is not built from that template there could be issues.. I think interface should work.. This relates to the custom bean definition registries in DuoProviderRegistrationConfiguration.  Autoconfigured bean with @RefreshScope is created without a specific Duo instance.  It's BeanDefiintion is then cloned and the a duo instance is passed to it.  \nHopefully some collective brain power came up with a better solution.  I fell in some deep dark holes on this one.. > Anybody else feel that \"MultifactorAuthentication\" can be refactored to \"Mfa\" in all class and method names to save screen space and keystrokes?\nI am guessing you don't feel the same?. Yes and no.  I tested in the 5.3.x version using pac4j to delegate to a different CAS server and then the did Duo on the return.  Then Jerome pointed out the issue with the serialization in refreshable providers (mfa-gauth specifically)  and the same  code was removed with mfaInitialization.  It is a good point and getStartState() seems to be a better solution, so that is what is committed now. . I have no problem with restoring it.. Refactored this interface away. Refactored this interface away. I previously had this in MultifactorInstanceCredenential and MultifactorInstanceHandler (names like that), but you said that was confusing in earlier review.  \nEssentially we need one additional piece of info in the Credential (interface being most accessible ) so that we can match the mfa provider instance that created the credential to be able to resolve the handler that can authenticate it.\nWhat I really wanted was some low level java feature that I could attach metadata to the object instance that would be an identifier to the provider that created it, like their is with File.  . I went down that hole too, and that was what the previous mess with creating BeanDefinitions used to create the beans.  The issue with using AbstractFactoryBean is:\n\nComes with a lot of Spring baggage.\ncreateInstance() or getObject() depending if you use the abstract class or interface does not take parameters and relies on properties set in the bean at creation. \nBecause of 2 you have to configure bean definitions on the fly, and if you want it refresh, it gets ugly.\n\nThe intent of the bean is to be an overridable interface that end deployers can customize if needed for their providers.  Would some other term besides \"Factory\" resolve potential confusion?. Refactoring these out into a separate interface is indeed a good call and I am all for it.  I like the idea of making it broader and not so branded to mfa.  CredentialMetadata seemed like a place this could be added to and already exists, or some other standard java interface(s),  but I came up empty. . You mean just add \"Bean\" to the end of the class name and not revert back to previously agreed code that induced vomiting on sight?. It Does. No, this gets called as part of PolicyBasedAuthManger handler resolve for finding a handler that can auth the credential. So it could get passed Credentials of any kind, also MFA credentials created by other MFA providers than the one used by this one.. I changed it to api so it would be made available to init-tomcat that project would not need to add any dependencies.  Maybe I am using api wrong then?. ",
    "danielfernandez": "\nPinging @danielfernandez to see if he shed light on this.\n\nSorry for the late response, but... what would be the scenario, specifically? I mean, could you please detail what is the situation wrt Thymeleaf that might raise concerns here?. > Pinging @danielfernandez to see if he shed light on this.\nSorry for the late response, but... what would be the scenario, specifically? I mean, could you please detail what is the situation wrt Thymeleaf that might raise concerns here?. It depends on what you mean with \"application-level properties\". Thymeleaf has message expressions, so that #{some.key} will output the value of a some.key property in a .properties file somewhere. In a Spring-based application (i.e. using the SpringTemplateEngine object), the origin of those properties would be the Spring-configured MessageSource objects. So if Spring is properly configured to access all the needed properties, Thymeleaf will be able to access them. More on the different kind of expressions: http://www.thymeleaf.org/doc/articles/standarddialect5minutes.html\nIf with \"application-level properties\" you mean servlet-context attributes, which are sometimes refered in the JSP world like that, you can access them in any variable expression with the application. prefix, like ${application.myattribute}.\nAll these kinds of expressions can in turn be used inside link expressions so that the URLs generated in link expressions can be dynamic, or get URLs from Message.properties files. See http://www.thymeleaf.org/doc/articles/standardurlsyntax.html for more info.\n. It depends on what you mean with \"application-level properties\". Thymeleaf has message expressions, so that #{some.key} will output the value of a some.key property in a .properties file somewhere. In a Spring-based application (i.e. using the SpringTemplateEngine object), the origin of those properties would be the Spring-configured MessageSource objects. So if Spring is properly configured to access all the needed properties, Thymeleaf will be able to access them. More on the different kind of expressions: http://www.thymeleaf.org/doc/articles/standarddialect5minutes.html\nIf with \"application-level properties\" you mean servlet-context attributes, which are sometimes refered in the JSP world like that, you can access them in any variable expression with the application. prefix, like ${application.myattribute}.\nAll these kinds of expressions can in turn be used inside link expressions so that the URLs generated in link expressions can be dynamic, or get URLs from Message.properties files. See http://www.thymeleaf.org/doc/articles/standardurlsyntax.html for more info.\n. I'm not sure I understand the context here\u2026 #strings.replace(...) is a sort of replace all occurrences function, but it does not allow regex, if that's what you are asking for. Anyway it is not a wrapper around Java's String#replace or String#replaceAll, but a custom implementation.\nThe reason for this is that in most cases replace all occurrences (as a functionality) is used without any need for regex. But String#replace and especially String#replaceAll have huge hidden costs in that they create and compile a regex java.util.Pattern each time they are called. If this happens a significative number of times, it can be a huge performance killer in any app (well, not really in the case of replace because such Pattern is in LITERAL mode, but still not 100% ideal).\nSo in order to avoid nasty surprises at the view side we left #strings.replace(...) implemented as a replace all occurrences function with no regex capabilities. Right now there is no regex-capable equivalent, and to be honest I would have some reserves about adding such a function if it means compiling a Pattern with each execution, as this type of cost is something unknown for many users (and would be a nasty surprise for the undocumented user).\nAnyway, I might not be completely understanding the thing here\u2026 is regex what you need? note that if it is a matter of adding CSS classes to existing values you could use th:classappend or th:classprepend.... ",
    "yudhik": "Do you have any IDE formatting rules to be import to my IDE?. Hi @mmoayyed,\nCurrently i'm still busy with the office stuff until 16 this week, i'll resume my work after it.\nNo, it is fine.. i know what to do, only need time to test and work on it.\nThanks for following this up @mmoayyed.\n. @mmoayyed, is that ok create a test with mock?\nSince at the integration mode you can not deploying fortress-rest so it might be difficult to use integration one like spring runner.. @mmoayyed, where should i put the documentation for this issue?\nthe user need some \"ceremony\" first before they can use this authentication mechanism.. @mmoayyed, sorry my daughter was hospitalize so i directly goes to hospital after work.\nI did successfully integrate it, however the documentation still not yet done.\nI'll try to finish the documentation before Monday.. added documentation and tested good with the overlay..\n@mmoayyed, please let me know if the documentation is not clear enough.\nHopefully you can try this plugin by yourself, so you can give me some feedback about this.\nHonestly for me, creating a good documentation is more difficult rather than understanding other code :). ok, will do and fix it.. ",
    "pavelhoral": "I can do similar modification in 5.0.x branch if you feel this is a valid change.. @mmoayyed I have just checked whether the same fix can be applied in 5.0.x and 5.1.x and it can. Not sure if it is necessary to create additional PRs if commit from this PR can be directly cherry-picked.. Found out the actual underlying bug for the issue I was trying to fix here. Expired TGT should have been removed by login flow initialization but AbstractTicketRegstry and it's subclasses are not encoding ticketId when deleting tickets. I will create another PR for that.. @mmoayyed I can try to write something, but I would appreciate some consultation. Is it possible to get in touch somewhere? Gitter maybe?. I am on gitter :). The topic I want to discuss is what the overall approach should be...\nLooking at the registry structures, the encoding is reponsibility of the subclasses. So ideally every test should be run with no-op encryption and with a real encryption. I am able to achieve this by parametrizing AbstractTicketRegistryTests (working gist example). \nPossible issues with described approach:\n\nThis will double the registry tests being run (not sure if that is an actual issue).\nSome tests are not extending the abstract test (MemCache registry tests)... maybe they should be refactored to extend the abstract test class.\nSome registries are probably not using encryption (Jpa?)... Those might just run non-parametrized.\n\nP.S.: Found new issues in EhCacheTicketRegistry just by playing around with the tests :).\n. I have rebased branch on top of the current master. I was not able to properly refactor MemCacheTicketRegistryTests as the registry does not support enumerating stored tickets. Also there are several issues with ticket encryption and I had to disable the tests for few registries as fixing them is not trivial (Ignite and Mongo).\nI personally feel like the whole TicketRegistry layer should be a bit refactored. I was thinking about for example doing TicketRegistry and IterableTicketRegistry (allowing for deleteAll, sessionCount, serviceTicketCount and getTickets). Also the common superclass AbstractTicketRegistry might be split into a common superclass and a superclass with encryption support. If encryption is something every repo should support, then I would possibly introduce template methods and not leave the (de|en)cryption to subclasses.\nWell... lots of thoughts and all of them are definitely out-of-scope for this PR :).. > I this something, that we should backport to 5.1.x?\nWell, the symptoms of incorrect deletion are fixed by #2660 . So the only real issue is that registries might experience ticket \"memory leak\". But that is not that severe because (as far as I understand it) tickets are usually stored with expiration / TTL. Also I did not fix every registry :/ (I left few FIXME comments in unit tests).\n\nplease open up PRs as early as possible so we all could get an idea what you wish to accomplish\n\nI will create gist or PR if I find time to pitch something more specific.\nThank you for the merge.. ",
    "dmalia1": "In my opinion, it probably should be backported to 5.0.x and 5.1.x. ",
    "jkacer": "Already signed the CLA and added another email address to my account, so hopefully the checks will pass.... Circle CI says:  died unexpectedly\nI don't know what I can do to solve that.... Hi @mmoayyed ! Sure, no problem, I'll create both at work on Monday and let you know here.. Pull request for branch 5.1.x: https://github.com/apereo/cas/pull/2670\nPR for master is on the way.... Pull request for branch 'master': https://github.com/apereo/cas/pull/2671. Thank you very much for accepting this PR, Misagh, as well as the two other PRs!. Checkstyle errors, I'll fix them.... Hi Misagh! For branch 5.1,x, I have created this PR: https://github.com/apereo/cas/pull/2686\nThe MR for master will come shortly.... And here is the PR for master: https://github.com/apereo/cas/pull/2687. Thank you very much for accepting these PRs!. Oh, I see you fixed it in master just a few minutes ago, in 0162a170aa295dd0532b4215fec034577b95b770.\nYou were faster than me :-) So I'm not going to push anything for master...\nThank you!. There are some Codacy and CheckStyle violation, I'll fix them later. Some of them have been already fixed.. Hi Misagh, sure, I'll prepare it for master. This will take some time.... Hi Misagh, GitHub does not allow me to change the source branch from my repository, so I am going to close this PR and open a new one instead. The new one will be targeted at master.. And here is the new pull request that goes against master: #3063.. I'll fix the compilation errors and Codacy warnings tomorrow...\nNot sure yet why some classes cannot be found, there is probably a difference between how Gradle and my IDE compiles it.. Finished the port from the previous pull request for 5.1.x. The Scrutinizer check is failing because Sonar analysis cannot be started.\nStill missing:\n- Changes in PAC4J configuration\n- Storage / retrieval of PAC4J profiles during login / logout. At the moment, ProfileService is used there but this needs to be changed, ProfileService cannot probably do what I need.. I've updated the configuration. The Logout flow should be now enriched with a few new actions when PAC4J is used.\nRemaining tasks:\n- PAC4J profile storage and retrieval; this won't be probably doable with the existing ProfileService\n- A complete test, perhaps on an uber-WAR (or is there a better option?). For the profile storage and retrieval, I finally used the InMemoryProfileService. As of PAC4J 2.1 (currently in master), this is the only implementation able to save CommonProfile, all other implementations are bound to a particular profile type. This means the solution is currently limited to a single-node deployment and will not work well in a cluster. Something better can be used later...\nFinally I realized that ProfileService can be generally used to save and retrieve profiles. I had two doubts:\n\nWhat key should be used. Finally I used the TGT as Linked ID. The service provides a lookup-by-linked-ID method, I set the TGT ID to the profile before I save it.\nWhat password should be used for save. I realized from the source code null is OK too, so I used null.\n. The build fails on a unit test but I see it's broken in master too, so I'll wait for a fix and merge it then.\norg.apereo.cas.support.pac4j.web.flow.DelegatedClientAuthenticationActionTests > verifyFinishAuthentication FAILED\norg.apereo.cas.support.pac4j.web.flow.DelegatedClientAuthenticationActionTests > verifyStartAuthentication FAILED\nApart that, I should be in sync with master now.\n\nMay I ask for a code review now, @mmoayyed, to be able to get out of the WIP state? Thank you!. Hi Misagh, I think I have addressed all issues you found during the last code review, can you please have a look once more, when you have time?\nAdditionally, I have changed the implementation of PAC4J profile storage and retrieval, as Jerome suggested in the mailing list here: https://groups.google.com/d/msg/pac4j-dev/I2VdDIYgVNE/2QjA6H_TBwAJ\nI have switched it from PAC4J ProfileService to a simple PAC4J Store. It does exactly what is needed: saves and retrieves objects. We use a Guava in-memory implementation now, deployers can override the configuration and provide its own implementation.. Hi Misagh, is there anything else I should do now, except periodically merging changes from master in?\nIf not, can you please review?\nI'm going to remove the \"WIP\" prefix to indicate it's \"ready\".... Hi Jerome! I believe it's something different than you think. The main problem we are trying to solve here is a missing PAC4J user profile in the moment of logout. Because CAS does not maintain a HTTP session between login and logout, when logout (SAML Single Logout) occurs, PAC4J Profile Manager cannot obtain any profile and fill in user details in the Logout Request.\nSo we now save the profile into a storage (independent of the HTTP session) during login and retrieve it later during logout. The Profile Manager is then happy, the Logout Request is valid and contains all necessary information.\nIn order to implement this in PAC4J, I think the Profile Manager would have to work differently. Now it can only work with the request and session but this is not enough in this particular case. We decided to the changes in CAS because it seemed easier and more straightforward. Or maybe there is yet another solution I'm not aware of.... Hi Jerome, yes, exactly, that is it!\nWhat you propose could work, I believe. I don't know the exact relation between a PAC4J profile and CAS authentication yet but that's probably somehow solvable.\nWould you prefer this over the current solution with saving the profile independently in a PAC4J store? . Thank you for this hint, Jerome. I'll try to re-implement it as you suggest and drop the PAC4J store. I'll also bring it up to date by merging in master and fix all things found by Misagh.. Hi Jerome, I have modified the code in the way you suggested. The PAC4J Delegated Authentication action does not do anything special now. The Logout Preparation action takes the current authentication, extracts the principal and the authentication attributes and tries to re-create the PAC4J user profile using ProfileHelper. The profile is then passed to PAC4J Profile Manager, as before.\nAnd I have kicked out the PAC4J Store completely, it's not used anymore.\nThe formal type of the new profile is CommonProfile, not SAML2Profile. This comes from the fact we have no profile definition for SAML2Profile; but I believe this is OK because SAML2Profile uses authentication attributes only to store new properties, and these should be recreated.\nHere is the corresponding commit, in case you want to have a look: https://github.com/apereo/cas/pull/3063/commits/20d234e3bbc6be183c7d81d1497cb2872362c1c2\nAny comment is welcome :-). When I look at CommonProfile in PAC4J 2.2.1, it uses just 'attributes' (so probably principal attributes), e.g. here:\npublic String getUsername() {\n    return (String) getAttribute(Pac4jConstants.USERNAME);\n}\nSAML2Profile, on the other hand, seems to be using authentication attributes, e.g. here:\npublic DateTime getNotBefore() {\n    return (DateTime) getAuthenticationAttribute(SAML2Authenticator.SAML_CONDITION_NOT_BEFORE_ATTRIBUTE);\n}\nSo, we may not do that correctly in either way. With principal attributes, we will restore attributes for CommonProfile but not for SAML2Profile. With authentication attributes, we will only restore attributes for SAML2Profile. Or am I  wrong? What do you think? What if I merge the two attribute maps together before passing them the ProfileHelper? Can this work?. Thank you, Jerome! I am looking at the PAC4J task now. I'll try to prepare something.... It's done for 2.2.x, please see the PAC4J issue page...\nIf you are OK with it, I will prepare the same fix for master.. Assert inside a method called in the test.. Assert inside a method called in the test.. Assert inside a method called in the test.. Yes, you are right! We originally created this class for our customization because we could not touch TerminateSessionAction. Now we can.\nI added a boolean property that can be configured via a setter. It will be set from the PAC4J configurator.\nIf you meant adding it to LogoutProperties, that would also be possible, I'm just not sure if I can then modify it at runtime from the PAC4J configurator. Because I wouldn't like the deployer to have to do that in properties, this can be done automatically.\nThe corresponding commit has been pushed.. I think I got an error from CheckStyle; I don't normally put JavaDoc on setters/getters. But I'll remove it.... OK!. It's set in the constructor, like other attributes, so in theory it could be null. I will add an Assert.notNull() check to the constructor and remove this if(). Just notice the other attributes are not checked either, so maybe we should add more checks to keep a consistent approach to all.. Finally I added checks for all constructor arguments, as all attributes should be non-null. And I adapted the unit test little bit.. Changed to static final LOGGER everywhere. Where needed, I used name LOGGER2 because my internal Sonar was complaining about a name clash with the parent class's logger.. Done, commented below.. OK, moved to: interface CasWebflowConstants. You are right, this can be replaced by a mock easily. Done.. The whole constructor has gone with the introduction of Lombok.. This has gone with the introduction of Lombok.. Hmm, the already existing actions are in the same module and package.\nHave a look here: https://github.com/apereo/cas/tree/master/support/cas-server-support-pac4j-core-clients/src/main/java/org/apereo/cas/support/pac4j/web/flow\nAnd project 'cas-server-support-pac4j-webflow' contains just a configurer and configuration.\nI would rather leave all actions at the same place. Or do you plan to move the existing ones?. This has gone with the intoduction of Lombok.. OK, will be removed on next commit.. Comments removed, JavaDoc is present at class level.. Sorry, is this needed? I call a method on the action, if I change it into Action, I will have to typecast back to to the desired type. Isn't it better to have the proper type?. Is there a reason why it can't stay? I use it in the case when we cannot invalidate the HTTP session yet during logout because of PAC4J Manager, so I postpone the invalidation. And it's only used with PAC4J here: Pac4jWebflowConfigurer#doInitialize(). It's not meant as a duplicate of TerminateSessionAction.. A possible solution would be to move the normal TerminateSessionAction to the end of the flow in Pac4jWebflowConfigurer. I would not need this action then. Not sure what is better / worse.. Changed to cas-server-core-configuration-api, thanks!. Right, this was indeed useless, dropped. Thanks!. ",
    "PavlikPolivka": "Not sure what is failing here. It looks like check style on files I did not touch. . ",
    "mindblender": "It would be better to just change the message reference instead of introducing another view into the flow.  I would wrap the message element with a conditional and display the appropriate text string.. It would be better to just change the message reference instead of introducing another view into the flow.  I would wrap the message element with a conditional and display the appropriate text string.. Travis,\nSeeing errors in the console when I change the service type from \"CAS Client\" to \"SAML2 Service Provider\" or \"OpenID Connect Client\".\nThanks!. Travis,\nSeeing errors in the console when I change the service type from \"CAS Client\" to \"SAML2 Service Provider\" or \"OpenID Connect Client\".\nThanks!. Travis, if the karma tests are setup as a NPM task, then Travis CI should be able to run them.  Not sure if we run tests normally though since Travis CI has limited build time.. Travis, if the karma tests are setup as a NPM task, then Travis CI should be able to run them.  Not sure if we run tests normally though since Travis CI has limited build time.. @mmoayyed No it would not cause any problems since the files are not referenced.  I wen ahead and removed them from this PR.. @mmoayyed No it would not cause any problems since the files are not referenced.  I wen ahead and removed them from this PR.. Tested locally and no issues.. Tested locally and no issues.. @mmoayyed When viewing it as a normal Thymeleaf page, from the context of within CAS, the CSSis loaded via the layout.html file, not from the individual templates.  The only reason to have the static mapping, \"../../static/css/cas.css\" is for viewing the page outside the context of CAS, i.e. as a stand alone view.  Even in that case, one would only see what that particular template showed them, and not the complete theme.  After applying the templates to multiple overpays, I noticed that Thymeleaf was pulling in the cas.css file multiple times and had the potential of overriding custom css that was put in the layout.html file.. @mmoayyed Please go ahead and merge when you get a chance.. I updated links for \"development/master\" in PR #3543, but I can do another check.. Isn't this the functionality that was removed in #3489?\nAlso, I would not put the script code in the html files, but in the cas.js for maintainability.. @oxcafedead Perhaps a more elegant solution could be put in place.  Since this functionality would most likely be applied to any form on the page, it would make sense to wire it so that it applies to all forms.  So instead of referencing the #id of the form, you could reference the form itself.  As for the translation, I would throw the \"processing\" text into a data-* attribute and then write a global handler to swap out the text accordingly. examples:\nhtml\n<input type=\"submit\" \nclass=\"btn btn-submit\" \nth:attr=\"data-text-processing=#{screen.welcome.button.loginwip}\" \nth:value=\"#{screen.pm.button.submit}\" />\nJavaScript\n$('form').submit(function () {\n    // code to swap out the text goes here\n});\n. Looking better.  What happens if there there is an error with the form not submitting? It appears the submit button would get stuck in the \"disabled/processing\" state.  Should that be handled as well so the user doesn't have to do a page refresh?  Just thinking out loud here.. @oxcafedead Nope, sounds good to me.. I just pushed a new branch for Gulp v4 changes.  Closing this one.. @marwatk I'd be interested in seeing what you come up with for handling this. Please keep me/us posted!. I would refactor this to a true/false format instead of matching a string.  That way if the template name ever changes, we don't have to update the name in multiple places.. Same as above. That would work, but ideally the backend would send a flag, but creating a variable in the page would be the easiest to implement.  Just want to make it as easy as possible to update in the future if needed.  Thanks!. - [x] Update documentation. Duplicate line as line 5. @daramos Any reason for removing the th:replace=\"tag\" attribute?  Same for the one below.. ",
    "gbatalski": "I've done three manual tests (please don't laugh ;-)) for true, false and missing property. In all three cases i've got STs sucessfully. Do we have an automated test suite? Of course i would propose a submition to it.. @mmoayyed ok, thank you. I've closed the pull request for now and awaiting the feedback from @leleuj about the pac4j mod. . ",
    "klewczuk": "Actually you did this change in master, I only added some small improvement to it. I have made manual tests and it works the same in master and 5.1.x branch right now.. ",
    "WhiteMarlin": "You're welcome, and thank YOU.. Sorry... how do I delete this PR? Just click the Close button?. You're welcome, and again, thank YOU for all the handholding! Nope, on FB, but not Twitter.. Awwwww... thanks!. ",
    "fmartelli": "Hi Misagh, I think I have addressed your comments (not sure about the documentation).\nPlease, review and let me know.\nRegards. ",
    "bbooth": "@mmoayyed It should go into master as well, but I was not sure exactly the process for that.  I can definitely put up another PR to merge this into master as well.. Weird my previous comment isn't showing up.  Very strange.  I am putting up that PR now.. The PR for master is https://github.com/apereo/cas/pull/2802. ",
    "doodelicious": "Hi Travis,\nI'm doing a code review to prepare this PR for merge into master, and the tooltips are not working in the forms found under services management (tested on macOS Sierra v10.12.5, Chrome 59.0, Safari 10.10.1, Firefox 54.0.1).. When running the application, Angular notifies in console that it is running in development mode, not production mode.. When inside a service, 'Username Attribute Provider' tab, and selecting 'Principle Attribute' radio button, getting console errors (file attached):\nUsernameAttributeProvider-PrincipleAttribute_console.log.zip\n. When inside a service, in the 'Service Type' tab, service 'OAauth2 Client' selected in dropdown, please left-align 'OAuth Client ID' form label.. When selecting 'Manage Services' in the header navigation (upper-right hand side), getting console error: ZoneAware Error (error log attached):\nManageServicesNavigation_console.log.zip. Hi Travis,\nAttached is a screenshot for the tabs. At one point, this was looking fine but the latest code updates have made them uneven again.\n\n. In looking at the changes to this PR that have been made this week, there are still some issues. I had several build issues when pulling down the latest updates. They seemed to be the npm cache and npm install scripts in Gradle. I don't know if it was an issue with downloading packages, as each build error did not reproduce after running again. At this time, this PR is a bit unstable given the amount of updates and fixes required to get it stable. I recommend creating a new branch with these new changes, applying them and doing a thorough developer test to validate all screens are working, all functionality is working, and the styling is consistent with the Apereo master branch before submitting the pull request. If you have any questions regarding my request, feel free to email me jmuramoto|at|unicon|dot|net.. ",
    "stanfran": "This change causes an issue with MOD_AUTH_CAS.  Using url-safe BASE64 has added the possibility of underscores in service tickets.  MOD_AUTH_CAS doesn't consider underscores to be valid characters in service tickets.  See https://github.com/apereo/mod_auth_cas/issues/134\nMaybe add a config setting to determine which implementation of RandomStringGenerator to use so MOD_AUTH_CAS clients can downgrade until a fix is implemented there.\nThanks!. ",
    "swoeste": "Hi, sorry i did not explain that point. We deploy CAS as part (WAR) of an EAR and /authentication is the context of that WAR. In other words the CAS WAR file is called authentication.war and therefore /authentication is the root context of CAS.\nTo the side effect, if a deployment has \"cas.theme.defaultThemeName\" defined, it is currently not applied to \"all\" services just the ones which are \"registered\". The \"non-registered\" services, like /authentication in our case, will use no theme. If someone estimates that no theme is applied to \"non-registered\" services this will change now, it will now use the configured default theme. \nI will have a look at the formatting problems ... . Thanks for your assistance, that was the quickest and easiest contribution to a project i have done so far.\nPlease apologise me for my inconsistent builds, I am just getting used to work with gradle ... \nAnd to answer your previous question:\n\"We\" are my colleagues and me from an internal development department of the zeb group.\ngreetings from Germany :). Thanks for your feedback, I will have a look into that and try to implement it that way.. Is there a way I could execute all the checks for the changed modules locally? - I tried to build everything but then the execution stops early with some findbugs errors in some modules I didn't touch. . ",
    "sbearcsiro": "@mmoayyed I've reworked this change to use i18n messages instead and as a side effect it allows overriding all twitter, fb, etc login names.  Note that #2826 contains the same changes for the master branch.. @mmoayyed thanks - I missed the addition of the deleteDescendantTickets property.  I think this PR and #3207 can be closed then.  But I still think there is an issue with the ticket registry cleaner and the JPA ticket registry (at least).  As @teddyber points out, you don't want to delete refresh tokens, etc that can outlive the TGT but there doesn't appear to be a way (as far as I can tell) for a descendant ticket to veto the TGT deletion attempt, so the logs will fill up with database foreign key errors whenever the cleaner runs.\nI think I'm also missing something here: RefreshTokens are considered expired when their linked TGT is expired (via isExpired() in AbstractTicket), and therefore a RefreshToken won't allow a new OAuthToken to be generated when the TGT has already expired regardless of the refresh token TTL?\n. Last time I looked the corresponding duration changes weren't in 5.2.x, might have changed in the meantime though :). Looks good - it might be worth extracting the anonymous class into a CasTomcatContainerFactory or similar class so that implementations that wish to override the TomcatContainerFactory can use it as a base / delegate to it?. I'm happy to submit a patch. @mmoayyed as discussed in #3220.  I'm not sure if the extracted factory package / method visibility is correct, any thoughts?\nI also pulled the configureContextForSessionClustering method out of the customiser and into the container factory as it was related and IMHO there's not much point running it without the corresponding tomcat container changes.. @leleuj thanks for the comment - in the latest changes, CAS is generating a TransientSessionTicket for a delegated client login request.  For other protocols, eg oauth2, it uses the state param to pass the TST id back through to the login callback.  For Oauth 1 providers (eg Twitter), the latest CAS version would fail logging in because the TST id wasn't available after the callback.  In the absence of a way of receiving the TST id in the callback from the OAuth1 provider (though I'd be happy to hear of a way of achieving this, I don't think the UserProfile applies as the user isn't logged in yet), I've add a simple work around by storing the TST ID in the session, similar to the way it is already done for the SAMLClient (which will be serialised to a cookie later in the DelegatedClientNavigationController).\nNote that I've also added a change to rename the constants for clarity.. @mmoayyed thanks for the suggestion, I'll look into the ObjectProvider.  I, too, am none too fond of breaking with convention to work around framework limitations.... @mmoayyed it seems like this can be achieved by simply making the @Bean definition static.  I'll close this and resubmit with the static change instead.. OK, I think I've addressed the issue with the manual service param, but the locale, theme and method params are still manual and updated the tests.  I still am yet to test this against a SAML client but I'll do that and let you know.... @mmoayyed so I've been attempting to run a SAML11 client against this but even without the delegated auth I'm having issues with SAML Validation - the POST body to the CAS SAML Validation Controller is consumed (presumably by a filter) before the request is handed to the controller.  Error is: \n2018-05-11 01:00:22,892 TRACE [org.apereo.cas.support.saml.authentication.principal.SamlServiceFactory] - <Could not obtain the saml request body from the http request>\njava.io.UncheckedIOException: java.io.IOException: Stream closed\n    <snip Java SDK>\n    at org.apereo.cas.support.saml.authentication.principal.SamlServiceFactory.getRequestBody(SamlServiceFactory.java:115) ~[cas-server-support-saml-5.3.0-RC4-SNAPSHOT.jar!/:5.3.0-RC4-SNAPSHOT]\nHaving said that, the URL for the callback to the SP after the delegated authentication succeeds contains both SAMLart and ticket parameters, eg: https://example.org/test/foo?ticket=ST-asdfasdfasdfHostname&SAMLart=ST-asdfasdfsadf%2B0%2Fasdfasdfasdfasdf#, I'm not sure why but I'm guessing that's not what we want. Great - thanks.  So it turns out that I missed a few redirects, the flow is like this (obviously SSO is enabled) now that SAML validation works:\nSAML SP -> CAS: /cas/login?TARGET=/foo/bar\nCAS -> CAS clientredirect: /cas/clientredirect?client_name=...&service=/foo/bar <- problem seems to be here, service is read as a SimpleWebApplication in clientredirect controller\nCAS clientredirect -> IdP: https://idp.org/...?redirect_uri=https://example.org/cas/login?client_name=IdP&state=TST-...\nIdP -> CAS: /cas/login?client_name=IdP&state=TST-...&code=...\nCAS -> SAML SP: /foo/bar?ticket=ST-1...\nSAML SP -> CAS: /cas/login?TARGET=/foo/bar?ticket=ST-1... <- ticket param means nothing to SAML SP so filter tries to authenticate (again)\nCAS -> SAML SP: /foo/bar?ticket=ST-1...&SAMLart=... <- SAML token validated\nSAML SP -> SAML SP: /foo/bar?ticket=ST-1...\nSo, it seems like the DelegatedClientNavigationController needs to change in some way to pick up the full Service.  I'm not sure what the way forward is from here:\n - pass the entire Service object to clientredirect\n - pass all /login request params to clientredirect\n - make clientredirect part of the webflow\nAny suggestions?. @leleuj I was just looking at that as well, it seems like this change could slot in to 5.2.x almost as is, I'll submit that as a PR... it would also be much nicer than doing something like this:\n```kotlin\n    private fun patchDelegatedAuthAction(flow: Flow) {\n        val clientAction = flow.getState(DelegatedClientAuthenticationAction.CLIENT_ACTION) as ActionState\n        createTransitionForState(clientAction, CasWebflowConstants.TRANSITION_ID_AUTHENTICATION_FAILURE, CasWebflowConstants.STATE_ID_HANDLE_AUTHN_FAILURE)\n        val eventExecutingExceptionHandler = object : FlowExecutionExceptionHandler {\n            override fun canHandle(exception: FlowExecutionException) = findException(exception) != null\n        override fun handle(exception: FlowExecutionException, context: RequestControlContext) {\n            val authException = findException<AuthenticationException>(exception) ?: throw IllegalStateException(\"$exception was not caused by a AuthenticationException\")\n            val event = EventFactorySupport().event(\n                (context.currentState as? ActionState)?.actionList?.firstOrNull(),\n                CasWebflowConstants.TRANSITION_ID_AUTHENTICATION_FAILURE,\n                LocalAttributeMap(CasWebflowConstants.TRANSITION_ID_ERROR, authException)\n            )\n            context.handleEvent(event)\n        }\n\n        inline fun <reified T> findException(exception: Throwable): T? {\n            var e: Throwable? = exception\n            do {\n                if (e is T) return e\n                e = e?.cause\n            } while (e != null)\n            return null\n        }\n\n    }\n    clientAction.exceptionHandlerSet.add(eventExecutingExceptionHandler)\n}\n\n```\nalthough would the FlowExecutionExceptionHandler (or something similar) be useful as a flow global exception handler?. What sort of test are you thinking?  A test to ensure that a DefaultAuthenticationResultBuilder can be serialised using JDK serialisation?  That might be sufficient to guard against regressions.  I'm not sure what other options exist for web flow testing, I'll take a look.. I've pushed a WIP commit that makes the CasWebflowClientSessionContextConfigurationTests pass.\nIt didn't pass before because:\n - The @Autowired beans can't be put into flow / conversation scope because they're all @RefreshScope and can't be serialised (which was the original problem this patch was fixing :))\n- The authentication transaction always throws an UnauthorizedSsoServiceException because there is no RegisteredService in the ServiceRegistry that matches the given Service (there are also 0 RegisteredServices in the ServiceRegistry)\nI also added the following to the test:\n- Added an AuthenticationResultBuilder, AuthenticationResult and Authentication to the scope using the WebUtils methods.\n. I can confirm that AllWebflowTests pass now.\nI was looking at putting TGTs and STs into the flow scope(s) but by the looks of it WebUtils only ever puts them in by their String id, so I'm not sure there's much point testing that?. @NgSekLong since this PR is already merged you should probably just submit a new PR with the additional change(s).. FWIW that checkstyle rule that failed probably shouldn't apply to static fields since they shouldn't be serialised.. It looks like the mongo types have changed due to an updated mongo driver and / or spring mongo, I'll close this one and resubmit separately for 5.3.x and master. @mmoayyed done. I couldn't see a reason in the commit history that || service.isGenerateRefreshToken() was added to isConsentApprovalBypassed but if there was please feel free to close this PR.. Yep, for sure.  Happily that already happens in the super method (which is invoked for the final return).. Thanks for the comment - what's the rationale behind making the name configurable?  If it's anything but \"Google\" (perhaps GoogleClient would be better) then the btn-google class from bootstrap-social won't match (when using the default fragment).\nThis is due to the line:\nfinal String name = client.getName().replaceAll(\"Client\\\\d*\", StringUtils.EMPTY);\nin DelegateClientAuthenticationAction, where that name variable goes on to be used as both the name and type in a ProviderLoginPageConfiguration. @mmoayyed I created #2826 for the master branch.\nDo you want the name externalised before integrating this change?  If so what's the best way to do so? via config as a name attribute?  via messages.properties?. My reasoning for no log message is this:\n\nSAML2ClientLogoutAction is always added to the logout flow when using delegated auth, even if no SAML2Clients are registered.\nThe SAML2ClientLogoutAction code was already expecting client could be null\nclient.findClient(...) never returns null, only throws a TechnicalException if no client is registered\nIt seems likely that not handling the exception was an oversight, expecting it to return null if no client was found, and therefore the TechnicalException can be ignored.\nWithout handling the TechnicalException specifically a spurious log message is created on every logout.\n\nIf, after hearing all that, you'd still like a log message, I'm happy to add one - which level do you think is appropriate?. Yes it was, but the configurationDirectory was lower priority than the classpath, so I rearranged the property sources so that they were simply added to the compositePropertySource in priority order.. That will require an instanceof and cast.  Happy to add them if you think it's worth it.. SAML isn't part of our setup and I'm not too familiar with it to be honest, so I can't really say.  I've updated the PR with all the parameters that the DelegatedClientWebflowManager.store method knows about however.. ",
    "rrenomeron": "So I've rebased to a relatively recent commit and pre-compiled the search-and-replace pattern to address the concerns about performance.  I'd like to re-open, please, esp if there's a chance this could get into 5.2.0-GA.. I initially had some thymeleaf code that did this, but found it a bit awkward to read; something like\nth:classappend=\"${#strings.replace(entry.name, ' ', '-')}\"\n(but I never found out if #strings.replace took a character class).  Even though doing it in Java is a much bigger patch, it seems more logical to me.  That said, I don't really have a strong opinion on this, so if you'd rather do it that way, I can, provided the thymeleaf replace function works the way I think it should.. Pfft.  Thymeleaf's #strings.replace is a wrapper around Java's String.replace, and there doesn't appear to be an equivalent for String.replaceAll, so the tradeoff amounts to this:\n\nA simpler, Thymeleaf-only patch that either only escapes spaces or gets really ugly really quick (unless there's some clever trick I'm missing); or\nA more complex Java patch (like this one), which can escape the \\W character class, and perhaps leave the door open to different strategies for mapping the provider name to a CSS class.\n\nI suppose patching Thymeleaf to add a #strings.replaceAll() is an option, which I'm open to doing, but that will take a bit of time, and would end up pushing this down on my priority list.\nWhat do you think?. I think I need the regex.  What I'm trying to do is take an arbitrary string coming from the app configuration and create a valid CSS identifier from it, which I would then tack on to the class using th:classappend.  I need to replace all non alphanumeric characters other than - and _ with something (I somewhat arbitrarily chose '-').  Using String.replaceAll('\\\\W\", '-')\nin Java is a nice simple way to do it, although point taken on the performance issues.\nHowever, for my specific problem, there's no need to compile the regex over and over and over again.  I can easily see how to do this with the in-CAS Java solution (just make the Pattern a static part of DelegatedClientAuthenticationAction.ProviderLoginPageConfiguration and compile it on init), but I'm not sure how to do it in Thymeleaf.. ",
    "jaredk-beta": "@mmoayyed Thanks for the feedback, this is mostly new to me and I'm figuring it out as I go along. I'll submit another PR for the master branch soon.. ",
    "Al1K4zu": "In OneTimeTokenAccount, the id is set to Integer.MAX_VALUE (2147483647) and is never changed.\nI use mongodb repository and each time a new user is coming, cas replaces the existing one in mongodb collection.\nexample\nfirst user = mongoReplCas:PRIMARY> db[\"MongoDbGoogleAuthenticatorRepository\"].find()\njson\n{ \"_id\" : NumberLong(2147483647), \"_class\" : \"org.apereo.cas.adaptors.gauth.repository.credentials.GoogleAuthenticatorAccount\", \n\"secretKey\" : \"UQYMMXRE7ZJFTFBJ\", \"validationCode\" : 816033, \n\"scratchCodes\" : [ 27147845, 47267547, 73735658, 53856834, 83711853 ], \"username\" : \"user1\" }\nsecond user = mongoReplCas:PRIMARY> db[\"MongoDbGoogleAuthenticatorRepository\"].find()\njson\n{ \"_id\" : NumberLong(2147483647), \n\"_class\" : \"org.apereo.cas.adaptors.gauth.repository.credentials.GoogleAuthenticatorAccount\",\n \"secretKey\" : \"MVRJ2ZHXAOB6MWLQ\", \"validationCode\" : 802999, \n\"scratchCodes\" : [ 21196666, 99519535, 63367006, 99220901, 93312634 ], \"username\" : \"user2\" }\nwith my modification, the id is the timestamp\nexample :\njson\n{ \"_id\" : NumberLong(\"1504536320781\"), \"_class\" : \"org.apereo.cas.adaptors.gauth.repository.credentials.GoogleAuthenticatorAccount\", \n\"secretKey\" : \"IABQ5EO3EZ4BEPZ7\", \"validationCode\" : 117895, \n\"scratchCodes\" : [ 96391108, 52454688, 22294482, 71170984, 57882634 ], \"username\" : \"user1\" }. I don't know what to change because the error message is  not explicit.\nI think the probleme is not in my modification.\nWhat I see in the log file : \n[ant:checkstyle] [INFO] /home/travis/build/apereo/cas/core/cas-server-core-tickets/src/main/java/org/apereo/cas/ticket/ServiceTicketImpl.java:123:5: Definition of 'equals()' without corresponding definition of 'hashCode()'. [EqualsHashCode]\nI am not familiar with git so I do what I can.. I removed the variable v.\nThere's a new compilation error, not due to my modification : \norg.apereo.cas.authentication.MongoAuthenticationHandlerTests > verifyAuthentication FAILED\n    javax.security.auth.login.FailedLoginException: Failed to validate credentials: No account found for: u1\n:support:cas-server-support-mongo:test FAILED\n. all checks have passed\nCan you merge ?\nthank you. I don't understand why it's so complicated to integrate a simple bug fix.\nI will not do test cases or any other task for this pull request.\nYou did not create those test cases by yourself when you created this method and, now,  you ask me to do it.\nFor a simple code line,  is it normal to spend so much time ?\nI corrected some others bugs (and there are plenty) but I will not do pull requests anymore.\nBye.. ",
    "puntakana": "Hi @mmoayyed \nI think Al1K4zu corrects this MAJOR bug : https://groups.google.com/a/apereo.org/forum/?utm_medium=email&utm_source=footer#!msg/cas-user/vDEfJ6SxlwY/I5pTug9ODQAJ\nHow can I help to add this test case because I test Al1K4zu's patch and it's OK with it !!\nThanks.. Hi @mmoayyed \nI see you merge my modification but I can't see this modification in the branch master (sorry, I don't know very well git & github)\nSo all is it OK for version 5.2 ?\nCan I bring modification in branch 5.1 ?\nThanks. Humm, there are some failing in check.\nBut, it's OK. My change works.\nSo, what do we do ?. Oupss.\nSorry, I corrected.. ",
    "SRieckhoff": "Example for the \"inappropriate\" log message:\n[null] http-/0.0.0.0:8080-2 19.08.2017 03:17:18,013 WARN [org.apereo.cas.authentication.PolicyBasedAuthenticationManager] Authentication has failed. Credentials may be incorrect or CAS cannot find authentication handler that supports [UsernamePasswordLocaleCredential [locale=de_DE, getUsername()=michgibtesnicht]] of type [UsernamePasswordLocaleCredential], which suggests a configuration problem.\n[null] http-/0.0.0.0:8080-2 19.08.2017 03:17:18,057 ERROR [org.apereo.cas.support.rest.TicketsResource] [1 errors, 0 successes] Caused by: [[FailedLoginException]]\norg.apereo.cas.authentication.AuthenticationException: 1 errors, 0 successes\nat org.apereo.cas.authentication.PolicyBasedAuthenticationManager.evaluateProducedAuthenticationContext(PolicyBasedAuthenticationManager.java:173)\nat org.apereo.cas.authentication.PolicyBasedAuthenticationManager.authenticateInternal(PolicyBasedAuthenticationManager.java:153)\nat org.apereo.cas.authentication.AbstractAuthenticationManager.authenticate(AbstractAuthenticationManager.java:140)\nat org.apereo.cas.authentication.AbstractAuthenticationManager$$FastClassBySpringCGLIB$$12a86894.invoke(<generated>)\nat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\nat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:738)\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\nat org.springframework.aop.aspectj.MethodInvocationProceedingJoinPoint.proceed(MethodInvocationProceedingJoinPoint.java:85)\nat org.apereo.inspektr.audit.AuditTrailManagementAspect.handleAuditTrail(AuditTrailManagementAspect.java:134). ",
    "bsandiford": "Misagh - this went a bit beyond what I mentioned.  I changed all the memcached tests to test a double deserialize, rather than just single deserialize.  That surfaced a number of other classes that needed to be registered (and could be done without changing any dependencies), so you'll see a bunch of new classes in KryoTranscoder register calls.  See the commit comment for more details.. Misagh - what's the policy / approach for getting branch changes like this put into master.  Should I be looking at master to create a PR there also?  Does someone else look at making sure roll-ups take place?. In THAT case - I would much rather fix this by removing the \"this.kryo.setAutoReset(false)\" in KryoTranscoder.  That's the source of the problem, compounded by the \"this.kryo.setRegistrationRequired(false)\" so that missing registrations are NOT found at Serialization time, but rather can have a bad deserialization.  That WOULD mean a small increase in overhead for serializing and deserializing (both space and processing) an object containing an unregistered class.  But - I'd much rather that, than having a very fragile (IMO) approach as now, where programmers have to know that any class that could be serialized needs to be registered with Kryo, and there's no safety net when that doesn't happen.  Thoughts?. Sorry - not following you in the details here.  If there's an option, what should the default be?  Under what conditions would the alternative be invoked?  From inside CAS or from someone overriding from a cas overlay project?. Thanks, that helps.  I'm still learning my way around the whole CAS code base, and also around Gradle which is new to me.  Is there anything comparable that already exists that I could take a look at?  e.g. some property that is exposed through the War Overlay, that is used inside the CAS code?\n. Well duh on me for the property question - of course adding a new property for memcached, accessible through MemcachedTicketRegistryProperties, is easy.  I just didn't make that connection for some reason :(\nOK - here's my revised proposal to resolve this issue:\n1) Change KryoTranscoder so that setRegistrationRequired is true instead of false.  That would work well with the AutoReset(false) - so that we detect any non-registered class at serialization time, rather than have problems at deserialization time.\n2) Change KryoTranscoder so that it can have classes specified by name (e.g. \"org.apereo.cas.ticket.accesstoken.OAuthAccessTokenExpirationPolicy\"), and if Class.forName(xxx) doesn't throw a ClassNotFoundException, then register it with Kryo.  Use that approach for the three OAuth classes, and remove that Gradle dependency on cas-server-support-oauth.  So - that way - KryoTranscoder can still have the code to register all those classes - but will do so only if the user has included that OAuth dependency for their build.   (I thought of trying to access Kryo from inside those other modules so the registration could be local to the modules where the serializable classes are defined - but then that introduces a new dependency on the memcached module :()\n3) Add a new property cas.ticket.registry.memcached.additionalSerializerClasses which takes a comma delimited list of fully qualified class names (e.g. \"com.xxx.cas.MySerializableClass,com.xxx.cas.MySecondSerializableClass\").  Use the same approach as with the other classes specified by name - i.e. if Class.forName doesn't throw a ClassNotFoundException, then register it with Kryo.  Perhaps on this one, throw a IllegalStateException (\"No such class \" + className) since the user should only use this config with classes that actually exist.  Better to throw the exception to help them debug, than to silently fail to register a class because they spelled the name wrong or something...\nSo - I think that addresses everything:\n- More explicit failure of detecting an unregistered class at Serialization time.\n- Add in the various potential CAS classes to the registered set, without introducing new cross-module dependencies.\n- Allow for custom classes to be added to the Kryo registration.\nThoughts?. um.\n1. It's BROKEN as it is.  Leaving it as is is not a valid option, IMO.  Why are you against that suggestion of throwing an exception if an unregistered class is encountered at Serialization time, given that the Deserialization is seriously broken right now?\n\nWhat's the performance side effect?  This gets done once, at startup time.  It's not as though any performance hit would continue through the life of the running app.\n\nI'm completely out of ideas on how to have the various modules handle their own registration, without introducing the cross-module dependencies that you want to avoid.  In fact - the current model doesn't follow this pattern.  The existing registration is for classes from other modules, but coded into the memcached module.\n\nSee my #2.. I'm good in the short term with removing the OAuth dependencies.  That will STILL end up fixing my explicit issue (the fact that the nested classes in MultiTimeUseOrTimeoutExpirationPolicy aren't registered with Kryo), without messing with the dependencies.  It just doesn't give any general ability to fix other, similar 'missing' classes from the registration.\n\nWorking on a more general approach in master, though, does sound good to me also.\nThanks!\nBob.. Hey - I just found that Kryo allows not only for an EXCEPTION to be thrown if an unregistered class is encountered, but also allows for a WARNING to be logged. What would you think about me adding:\n         //  However, we would like at least a warning in the logs.\n        this.kryo.setWarnUnregisteredClasses(true);\nright after the:\n          this.kryo.setRegistrationRequired(false);\nThat would at least help debug problems in the future, with the only noticeable change being that an additional warning is generated...  (You can see the Kryo handling in Kryo.java method getRegistration(), at about lines 501-509.  That's the only place in Kryo that uses that setting).. I'd be happy to redo this bit - but the SingletonSet and SingletonMap classes in Collections are private - to register those all I could think of was to instantiate one of each, and do a getClass() on the results.... p.s. - the warning for unregistered classes works great - it made it easy to figure out what additional classes needed to be registered when I doubled up on the deserializations in the test code :). ",
    "marwatk": "Fixed. Let me know if there are any other changes you'd like me to make.. Is that log from CAS 6 when attempting a normal password reset? If so I'm seeing similar behavior with our migration, too. (Password resets unable to find user or email). I'm going to take a look today and see what I can find.. I think I found the problem. These two variables both have the same value. I think this clobbers the password reset flow in favor of the forgot username flow. Switching one of the values (or both, to be less generic) should fix it.\nI'll have to set up a build environment to test the change and submit a pull request, may take a couple of days. Unless you want to take a look at it, @mmoayyed?. In my head there was a perfect connection between this and the discussion we were having two days ago, but now I'm realizing most of the connections we're in my head :)\nThis is for password question management.\nHere's the original discussion: https://github.com/apereo/cas/issues/2950\nWhen implenting it, I realized there's no good reason to just leave it at password questions. Providing for those gets you 99% of the way to editing (mostly) any attribute. So this PR is a generic version of attribute management.\nIt's almost a direct copy of the aup module, with the distinction that there are two repository types. EditableAttributeRepository stores settings about the attributes (see the changes made to the config doc). EditableAttributeValueRepositories store the actual values in the user (via ldap, rest or jdbc modules).\nThere is an associated web flow module, view and properties object to accommodate everything. \nI'm not sure how we could break it up into smaller chunks, though. This is pretty much the smallest implementation that would support various drivers. I could remove the drivers and config hooks, allowing only for custom implementations? Open to suggestions there.... That makes sense, though it's worth pointing out that while it touches a lot of files, it's really not much more complex or involved than the aup or consent modules. And it certainly doesn't aim to replace any of them. \nBut it absolutely could end up never being used outside of our implementation. We don't run a separate identity management system, it's overkill for our needs. But we do require password question answers (and couple other attributes) so we end up having to create that management ourselves.\nI'd be willing to back it up to only deal with password management if you feel that would be a better fit. After all, that's really the same code just with less configuration. Ideally I could hook it such that it would be possible to extend.. I've been thinking about it all night and I'm having trouble coming up with a less complicated solution, even for just embedding it in the pm module. I think I'd end up touching the exact same number of files either way. The crux of the issue comes back to storage and validation of available password questions.\nWhen simply displaying them it's easy, you just grab what's there and present it. But for editing you can't just have a predefined set of 3 questions -- some users' mothers may not have a maiden name, for example. So the allowable questions need to be stored somewhere resulting in another storage mechanism somewhere. Then you need to ensure they fill it out properly (not choosing the same question twice, etc) so you need a validator in there somewhere. Plus each driver needs to know how to update them, etc, etc.\nWhen all is said and done you're at the same place we are here with this module. :/\nHere's a breakdown of the files modified, why they're needed, and if/where they'd still be needed in an add-on to pm:\nNew File | Purpose | Associated pm change\n-- | -- | --\nCasConfigurationProperties | Map settings to cas properties | None\nEditableAttributeProperties | Store settings | PasswordManagementProperties\nConfiguration-Properties.md | Docs change | Same\nsettings.gradle | Link to new modules | None\nbuild.gradle | Module build file (core) | None\nEditableAttributeRepository | Interface to retreive available questions | New equivalent\nDefaultEditableAttributeRepository | Default implementation of above | New equivalent\nEditableAttributeValueRepository | Interface to retrieve question answers | PasswordManagementService\nAbstractPrincipalEditable AttributeValueRepository | Abstract version of above with utility | None?\nDefaultEditableAttribute ValueRepository | Default implementation of above | BasePasswordManagementService\nEditableAttributeValueValidator | Interface to validate questions/answers | New equivalent\nDefaultEditableAttributeValueValidator | Default implementation of above | New equivalent\nbuild.gradle | Module build file (jdbc) | None\nJdbcEditableAttributeValueRepository | JDBC driver | JdbcPasswordManagementService\nCasEditableAttributeJdbcConfiguration | JDBC Configuration | PasswordManagementProperties\nspring.factories | (jdbc) | None\nJdbcEditableAttributeValueRepositoryTest | Test cases | New equivalent\nbuild.gradle | Module build file (ldap) | None\nLdapEditableAttributeValueRepository | LDAP Driver | LdapPasswordManagementService\nCasEditableAttributeLdapConfiguration | LDAP Configuration | PasswordManagementProperties\nspring.factories | driver loader | None\nbuild.gradle | Module build file (rest) | None\nRestEditableAttributeValueRepository | Rest driver | RestPasswordManagementService\nCasEditableAttributeRestConfiguration | Rest configuration | PasswordManagementProperties\nspring.factories | driver loader | None\nbuild.gradle | Module build file (flow) | None\nCasEditableAttribute WebflowConfiguration | Web flow configuration | PasswordManagementWebflowConfiguration\nEditableAttributeFormAction | Form action for saving answers | New equivalent\nEditableAttributeWebflowConfigurer | Configure web flow | PasswordManagementWebflowConfigurer\nspring.factories | driver loader | None\nmessages.properties | Button labels | Same\ncasEditableAttributesView.html | View for displaying form | Same\nOf the 32 new/edited files 10 are build files or related (spring.factories, build.gradle, etc). 19 would still be required in some form whether directly in the pm or a sub module, leaving only 2-3 fewer new/changed files. The total lines of changed code would be roughly equivalent, except now they'd be sprinkled in with existing code instead of isolated into their own module.\nI'm willing to try it, but I feel like it's not an obviously 'better' solution, or even more likely to be accepted. For us it's worse because we'd have to modify the result in an overlay to support our use case. \nI hope I didn't dissuade with the misuse of 'framework' in the title, it's really not very complicated and would support question management with only simple config changes.\n. Hmm, where did report it? I can check it out and see if there's a better solution.. That allows them to reset it by going through the reset flow (getting an email, answering questions, etc). But most of the time our users change it during the warnings like \"Your password will expire in X days,\" before it actually expires, to avoid the whole security question rigmarole.. I'll make these changes tomorrow and adds some doc verbiage. Let me know if you think of anything else!\n-Marcus. Ok, changes are in. Let me know if you have any other notes. \nI also snuck a utility method into SendPasswordResetInstructions.java that makes it easier and safer to customize.. Good catch. I didn't notice the member version. I fixed the ones from my past commits as well.. Ok, finally got a build working and can confirm this fixes the reset flow and still allows the forgot username flow.. For sure! Thanks for continuing to maintain it!. I'm having trouble duplicating the test failure that travis is reporting and found a better way to do this for our needs, so I'm going to close this out.. TL;DR I pulled ThemeTemplateResolver into its own support module that we include in our overlay because I wasn't happy with how it turned out when embedded in support-themes. I'd be happy to submit that isolated (and optional) module as an MR if you're interested (cas-server-support-themed-fragments, maybe?).\nHere were the problems I had with my MR:\n\nI had to disable caching of fragments in order to load them dynamically\nsupport-themes shouldn't need a ViewResolver anymore, but when removed none resolved\nIt seems to have broken tests that I can't duplicate locally\n\nI looked into ways to solve 1 but there didn't seem to be any. The cache key is the requested resource, not the resolved one. There's no way for the resolver to say \"cache this as foo/bar instead of foo\". So in order to have dynamic fragments based on theme you lose caching (or you could reimplement the cache, but that seemed a bridge too far). We're ok with losing caching (we don't have enough load for it to make a material difference) but pushing it out at the product level seemed like a bad idea. (That said, for themed views caching is disabled as well for the same reason, so maybe the upstream product would be ok with it).\nFor 2, I couldn't find a place where CAS was intentionally disabling Spring's built in ViewResolver, but when I remove the (now redundant) ViewResolver there are none left to do the resolution (resulting in NPEs during doRender). So I left a stub in there pointing at the nonCachingResolver, that felt unclean.\nFor 3 I have no idea what's going on there. Looking at the travis log it appears something is relying on themeTemplateResolver, but I couldn't duplicate the issue locally, and since I already had reservations I decided it wasn't worth it to investigate further.\nI ended up pulling these changes out into a super simple module (themed-fragments) that we include in our overlay. It means we have to maintain it, but I wasn't happy with the cleanliness of putting it in the base.\nAt any rate, if upstream is ok with the loss of caching and would like to see this functionality I can keep working on it. Or if you'd prefer a separate optional module that enable themed fragments I have that already and I can submit a MR going that way. Just let me know.... Forgot to @mindblender. I don't think so, and there's a catch for any exceptions there, but without a throws it's hard to tell that it can be thrown and handled properly without seeing all the use cases.. Sorry, were you asking me to add something? I didn't catch that. There are @throws in the javadoc for the methods, am I missing one somewhere?. Ah. I'm an eclipse user and this is my first java work in a very long time. I'm noticing conventions have changed a lot. :). In general I'd agree, but in this case the consumer of this exception (PasswordChangeAction) doesn't know/care the reasons behind it, it's really just a glorified return value. For logging purposes the actually implementer would be responsible.. This is WebUtils :). Same here.... Yeah, I wasn't sure on that. I've noticed a few cases of module specific actions being in the modules, so I erred on the side of fewer files touched. But for extensibility I'd prefer them in CasWebflowConstants. If you have no objections I'll move them over.... Yeah, during my first few attempts that was much longer. I'll move it back inline.. I almost left it, but when it was /pwsrst?t=<token> it was easy to see what was going on. Now that it's a subflow having it be /login?t=<token> was less clear, so I opted to change it so that even from the URL it's clear what's going on. I'm good either way, though.. Will do.. Good catch. I didn't notice there was a member for that. I switched the ones from my past changes as well.... ",
    "fazla043264": "this is the log\nWHO: audit:unknown\nWHAT: [event=success,timestamp=Mon Nov 26 14:08:04 MYT 2018,source=RankedMultifactorAuthenticationProviderWebflowEventResolver]\nACTION: AUTHENTICATION_EVENT_TRIGGERED\nAPPLICATION: CAS\nWHEN: Mon Nov 26 14:08:04 MYT 2018\nCLIENT IP ADDRESS: 0:0:0:0:0:0:0:1\nSERVER IP ADDRESS: 0:0:0:0:0:0:0:1\n=============================================================\n\n2018-11-26 14:08:15,432 DEBUG [org.apereo.cas.web.view.CasReloadableMessageBundle] - \n2018-11-26 14:08:15,440 DEBUG [org.apereo.cas.web.view.CasReloadableMessageBundle] - \n2018-11-26 14:08:15,447 DEBUG [org.apereo.cas.web.view.CasReloadableMessageBundle] - \n2018-11-26 14:08:15,448 DEBUG [org.apereo.cas.web.view.CasReloadableMessageBundle] - \nHibernate:\n    select\n        abstractre0_.id as id2_0_,\n        abstractre0_.access_strategy as access_s3_0_,\n        abstractre0_.attribute_release as attribut4_0_,\n        abstractre0_.description as descript5_0_,\n        abstractre0_.evaluation_order as evaluati6_0_,\n        abstractre0_.expiration_policy as expirati7_0_,\n        abstractre0_.informationUrl as informat8_0_,\n        abstractre0_.logo as logo9_0_,\n        abstractre0_.logout_type as logout_10_0_,\n        abstractre0_.logout_url as logout_11_0_,\n        abstractre0_.mfa_policy as mfa_pol12_0_,\n        abstractre0_.name as name13_0_,\n        abstractre0_.privacyUrl as privacy14_0_,\n        abstractre0_.proxy_policy as proxy_p15_0_,\n        abstractre0_.public_key as public_16_0_,\n        abstractre0_.required_handlers as require17_0_,\n        abstractre0_.responseType as respons18_0_,\n        abstractre0_.serviceId as service19_0_,\n        abstractre0_.theme as theme20_0_,\n        abstractre0_.username_attr as usernam21_0_,\n        abstractre0_.assertionAudiences as asserti22_0_,\n        abstractre0_.encryptAssertions as encrypt23_0_,\n        abstractre0_.encryptAttributes as encrypt24_0_,\n        abstractre0_.encryptable_attrs as encrypt25_0_,\n        abstractre0_.metadataCriteriaDirection as metadat26_0_,\n        abstractre0_.metadataCriteriaPattern as metadat27_0_,\n        abstractre0_.mdCriteriaRmEmptyEntities as mdCrite28_0_,\n        abstractre0_.mdCriteriaRmRolelessEntities as mdCrite29_0_,\n        abstractre0_.metadataCriteriaRoles as metadat30_0_,\n        abstractre0_.metadataExpirationDuration as metadat31_0_,\n        abstractre0_.metadataLocation as metadat32_0_,\n        abstractre0_.metadataMaxValidity as metadat33_0_,\n        abstractre0_.metadataSignatureLocation as metadat34_0_,\n        abstractre0_.nameIdQualifier as nameIdQ35_0_,\n        abstractre0_.reqAuthnContextClass as reqAuth36_0_,\n        abstractre0_.requiredNameIdFormat as require37_0_,\n        abstractre0_.spNameIdQualifier as spNameI38_0_,\n        abstractre0_.signAssertions as signAss39_0_,\n        abstractre0_.signResponses as signRes40_0_,\n        abstractre0_.signingCredentialType as signing41_0_,\n        abstractre0_.skipGenAssertionNameId as skipGen42_0_,\n        abstractre0_.skipGenSubConfInRespTo as skipGen43_0_,\n        abstractre0_.skipGenSubConfNameId as skipGen44_0_,\n        abstractre0_.skipGenSubConfNotBefore as skipGen45_0_,\n        abstractre0_.skipGenSubConNotOnOrAfter as skipGen46_0_,\n        abstractre0_.skipGenSubConRecipient as skipGen47_0_,\n        abstractre0_.expression_type as expressi1_0_\n    from\n        RegexRegisteredService abstractre0_\n2018-11-26 14:08:24,227 INFO [org.apereo.cas.services.AbstractServicesManager] - \n2018-11-26 14:08:34,206 INFO [org.apereo.cas.ticket.registry.DefaultTicketRegistryCleaner] - <[0] expired tickets removed.>\n2018-11-26 14:08:49,306 WARN [com.zaxxer.hikari.HikariConfig] - \n2018-11-26 14:08:49,306 WARN [com.zaxxer.hikari.HikariConfig] - \n2018-11-26 14:09:04,065 WARN [org.apereo.cas.util.io.CommunicationsManager] - \n2018-11-26 14:09:04,068 ERROR [org.apereo.cas.pm.web.flow.actions.SendForgotUsernameInstructionsAction] - \n2018-11-26 14:09:04,102 WARN [org.apereo.cas.web.view.CasReloadableMessageBundle] - \nHibernat. Yes that is the log of CAS 6. @marwatk. In both the prerelease CAS 6.0.3 and CAS 6.0.4. @marwatk @mmoayyed  Thank you! . \n",
    "CobraFlow": "No problem. Thanks for the great project!\nLewis Henderson\nDirector\nCobraFlow Limited\nM:0788 7788 436\nSkype:CobraFlow\nwww.cobraflow.com\nOn 21 Sep 2017 12:57, \"Misagh Moayyed\" notifications@github.com wrote:\n\nPorted back to 5.1.x. Thanks again\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2941#issuecomment-331134917, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADc0dgODL8TKr44kdVCvLRfUpFp2WfH3ks5skk9FgaJpZM4PfL_g\n.\n. No problem. Thanks for the great project!\n\nLewis Henderson\nDirector\nCobraFlow Limited\nM:0788 7788 436\nSkype:CobraFlow\nwww.cobraflow.com\nOn 21 Sep 2017 12:57, \"Misagh Moayyed\" notifications@github.com wrote:\n\nPorted back to 5.1.x. Thanks again\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/2941#issuecomment-331134917, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADc0dgODL8TKr44kdVCvLRfUpFp2WfH3ks5skk9FgaJpZM4PfL_g\n.\n. \n",
    "strnadpetr": "Well, now it's failing on YamlServiceRegistryDaoTests which I didn't touch. ",
    "owski": "The changes have been made. \nInitiating a request now exposes the following headers (this will be different per-implementation) as MDC variables.\n- accept\n- accept-encoding\n- accept-language\n- connection\n- content-type\n- cookie\n- dnt\n- host\n- referer\n- upgrade-insecure-requests\n- user-agent\n- x-forwarded-for\nI verified that MDC variables with dashes rendered as expected (ex: %X{x-forwarded-for}).\nThere is one potential limitation worth mentioning - according to the javax.servlet.http.HttpServletRequest documentation, getHeaderNames() may return null if the servlet container does not allow this method. I added a null check which should be sufficient in this case.\n\nan enumeration of all the header names sent with this request; if the request has no headers, an empty enumeration; if the servlet container does not allow servlets to use this method, null. That's a great idea. I'll work on that. Thanks for the feedback.. The change has been submitted, hopefully the third time is the charm :). Thank you again for the feedback... I am primarily a Python and Perl dev so I am not overly familiar with Java one-liners and idiosyncrasies. . \n",
    "marqc": "@frett with this settings enabled i'm receiving Service access denied due to an unsatisfied authentication policy. even when i'm providing correct username/password (from requiredHandler)\nscenario is as below:\n1. Configure CAS with 2 authentication handlers (eg. 2 LDAPs). Name one handler \"admins\" and second handler \"minions\".\n2. Configure regexp service for https://adminsonly.* with requiredHandlers = [\"admins\"]\n3. Login to /cas/login (defaut service) with \"minions\" user. You will be authenticated and gain TGT\n4. Login again to /cas/login?service=https://adminsonly1 - You will receive \"Service access denied\" as expected and login form as expected. But when i provide username and password from admin handlers i will still receive \"Service access denied due to an unsatisfied authentication policy\". i must remove cookies and reenter login page to authenticate succesfully\nIt doesn't work, because policy is resolved (and breaks auth chain) before currently provided authentication occurs https://github.com/apereo/cas/blob/5.1.x/core/cas-server-core/src/main/java/org/apereo/cas/DefaultCentralAuthenticationService.java#L151\nhere currentAuthentication contains only successes extracted from TGT from not allowed handler. It doesn't contains info from currently provided username/pass.\n-there is also NPE stack trace in server output- -> it is just null message, not NPE. Hi. I returned to this issue after a while and managed to achieve my goals with different approach.\nI injected custom  \"authenticationPolicyFactory\" bean with implementation very similar to RequiredHandlerAuthenticationPolicyFactory but with \"anyMatch()\" instead of \"allMatch()\" at the end of it's implementation. My previous auth problems was with allMatch, as i expected RequiredHandlers to work differently, than it turned out.. ok, I closed this to early. Problem occurs only when username in different users databases id the same.. Ok. I managed to find root source of this problem. Logic checking if two authentications are the same checked only Principal.uid. When uid's were same, but succesful handlers were different it wrongly assumed auths were same and didn't create new TGT. I commited patch fixing this comparison.. @frett @mmoayyed Can you look at this patch? Is there any chance it gets merged and released?. @mmoayyed I reviewed your previous comments, reverted my original changes and commited fix for the real bug. What else do I need to do to include this changes in 5.1.8 release at 2018-01-26?\n. @mmoayyed the key change is if on abstractwebfloweventresolver class. It originally only compared if auth.principal are equal, which is not enough as successes may be different. I tried replacing it with auth.equals(other) but they always differ in authDate. That's why I introduced equalsIgnoreDate. I understand you don't want to break API. Will it be acceptable if I move equalsIgnoreCase logic to private method of abstractwebfloweventresolver class and use it only for this single comparison? It will fix problem and keeps API unchanged. Sorry for shortcuts and wrong character case in this comment. I'm writing with my phone.. I will try to summarize what I know in this single comment, to make it easier to understand what (and why ) is the issue.\nAt the beginning we must agreed that following is true:\n- CAS supports multiple authentication handlers (multiple databases of users)\n- CAS supports multiple services for authenticating users\nThis two statements has consequences:\nMultiple handlers can contain user with same login/uid - it can be either same person using same browser or two completely different persons (name this \"jsmith\"). Service to be sure it allows correct \"jsmith\" to enter uses \"requiredHandlers\" in service definition with property enabled cas.authn.policy.requiredHandlerAuthenticationPolicyEnabled=true\nHow this works in code (where is the bug):\nIn method boolean AbstractCasWebflowEventResolver::shouldIssueTicketGrantingTicket(final Authentication authentication, final String ticketGrantingTicket) system determines if it should create new TGT with passed authentication, or use current TGT with authentication assigned to it. To determine that it performs check:\n} else if (authentication.getPrincipal().equals(authenticationFromTgt.getPrincipal())) {\n                 issueTicketGrantingTicket = false;\nif this comparison is true, new TGT is NOT created, and current TGT is used in following phases of authentication flow. In particular it uses authenticationFromTgt to check if requiredHandlers policy is fullfilled.\nWhat this if is really doing (DefaultPrincipal::equal) is checking if login/uid of two principals is the same. As we assumed \"jsmith\" may be 2 different entries it is actually incorrect and may lead to use wrong authentication than provided (from different authenticationHandler).\nI believe someone wanted to do comparison\n} else if (authentication.equals(authenticationFromTgt)) {\n                 issueTicketGrantingTicket = false;\nwhich compares not only principal, but all authentication data (including successful handlers used later to determine if requiredHandler policy is fullfilled). But he didn't do this, because this if will allways be false, as DefaultAuthentication::equals compare not only authorization data and result but also authroizationDate which is set at each request.\nWhat we should really do is check if all \"real\" authentication data (principal, credentials, succesfulhandlers, attributes) are the same. We can achieve it by removing authenticationDate from comparison in DefaultAuthentication::equal method but I can't predict consequences of this action (considering equal is method overridden from java.lang.Object and may be used in many libraries and not only cas code - eg. cache ticket storage). That's why i want to patch this issue introducing new method for Authentication comparison for purpose of this check only.\nI believe implementation of DefaultAuthentication::equals and DefaultPrincipal::equals (checks only uid, not attributes) should be reviewed again by someone who knows system better than I (cas is rather complex system) before next major release (5.3.x).\n@mmoayyed I hope this comment will help you understand the issue and refer to my proposition to patch this introducing private method for Authentication comparison in AbstractCasWebflowEventResolver.class. @mmoayyed thx I pushed changes, resulting to change only resolver class. Please take a look at code. If it looks good to you, I will prepare PRs for 5.2.x and master branches as well. ",
    "Chuchitrung": "\n. ",
    "kawhii": "@mmoayyed Hi~ \nI find cas-management can not save from copy service.\nWhy closed issues panel\uff1f\naha, I'm going crazy.\nAfter the repair, can we advance the milestone. ",
    "dacurry-tns": "So... I'm not sure what to do when the Travis CI build fails on the file I patched, but for something that I didn't touch (an unneeded import)? Am I supposed to fix that? Happy to do so, but don't want to overstep.... Fixed the checkStyle errors.... Working on the checkStyle issues right now. You can tell I'm not a Java programmer. :-)\n. Fixed the checkStyle errors. Should be good to merge again.\nI also fixed them on the 5.2.x branch (PR 3147).. ",
    "mbenson": "Sorry; I had a bit of a false start with PR #3092. Not sure if the Travis failure that is showing somehow related to that.. I'm seeing the last question with a strikethrough font, so I'm not sure if you've somehow retracted it. I admit to having had a bit of difficulty understanding the existing switch parameters among the build. I wanted to install the snapshot to my local Maven repo/cache, so I used publishSnapshots to trigger bom creation; however this had the effect of disabling the spring boot repackaging. I ended up adding the new switch for my own purposes. Long story short my intent was that your existing snapshot and release publishing builds should continue to work, producing the new \"full BOM\" with the property being necessary only when installing locally. I'll be around on gitter today if we need/you have time to discuss further. I will go ahead and move the property up to the root build as you request.\nThanks,\nMatt. ",
    "uprego": "I see you cherry picked it from the master and 5.2.x branches, and those commits got the GitHub pages branch (gh-pages) receiving one commit updating the /development/ online docs and another updating the /5.2.x/ online docs. But a rev updating the /5.1.x/ online docs has not been generated. Why could that be? Is the docs auto update disabled/broken for the 5.1.x branch? Is it waiting for a commit of yours @mmoayyed?. It seems the bot updated it at last several hours ago :grin:.. ",
    "ilgrosso": "Forgot to mention: I initially followed the guide but found that it wasn't working; then, with debug, I've reached up the statement I'm proposing to change with this PR.. Oh, I see now there is already #3346 for the same problem, though with a different fix.. ",
    "thinijeya": "I've upgraded CAS to 5.2.2, but I'm still seeing \"eppn\", \"givenname\" and \"uid\" in \"Return Allowed\" Attribute Release Policy. ",
    "3cdota": "Leave a comment. I create another pull request. travis-ci's log like this .But I did not  make any  other changes except changes described in the pull request . \njava\n:support:cas-server-support-yubikey-mongo:test NO-SOURCE\n:webapp:cas-server-webapp:test NO-SOURCE\n:webapp:cas-server-webapp-bootadmin-server:test NO-SOURCE\n:webapp:cas-server-webapp-config:test\norg.apereo.cas.config.CasWebflowContextConfigurationTests > verifyExecutorsAreBeans FAILED\n    org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.apereo.cas.config.CasWebflowContextConfigurationTests': Unsatisfied dependency expressed through field 'flowExecutorViaClientFlowExecution'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.webflow.executor.FlowExecutor' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=flowExecutorViaClientFlowExecution)}\n        Caused by:\n        org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.webflow.executor.FlowExecutor' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=flowExecutorViaClientFlowExecution)}\norg.apereo.cas.config.CasWebflowContextConfigurationTests > verifyFlowExecutorByServerSession FAILED\n    org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'org.apereo.cas.config.CasWebflowContextConfigurationTests': Unsatisfied dependency expressed through field 'flowExecutorViaClientFlowExecution'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.webflow.executor.FlowExecutor' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=flowExecutorViaClientFlowExecution)}\n        Caused by:\n        org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'org.springframework.webflow.executor.FlowExecutor' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true), @org.springframework.beans.factory.annotation.Qualifier(value=flowExecutorViaClientFlowExecution)}\n. point out the code bellow have bugs ,but I don't have a good solution for it . and maybe you will fix it. if it's useless, i will delete it.\n``` java\n  final Set prompts = authorizationRequestSupport.getOidcPromptFromAuthorizationRequest(ctx);\n        /\n         *  when prompt=login,the following code will result in a loop of authentication and this SecurityInterceptor  will return\n         *  FALSE forever.\n         / \n        if (!clearCreds) {\n            clearCreds = prompts.contains(OidcConstants.PROMPT_LOGIN);\n        }\n    if (clearCreds) {\n        clearCreds = !prompts.contains(OidcConstants.PROMPT_NONE);\n    }\n\n    if (clearCreds) {\n        manager.remove(true);\n    }\n\n```\nwhen the request have parameter \"prompt=login\",the code above  will result in a loop of authentication\u3002Because when callback after re-authentication ,the request still contains the parameter \"prompt=login\" ,and then clear the user profile ,and then re-authentication..... thanks .. ",
    "fq67922": "\nSo, at least I found out what happens.\nUrlResourceMetadataResolver creates a FileBackedHTTPMetadataResolver for each request.\nFileBackedHTTPMetadataResolver looks at the file and loads metadata from there if present, if not via HTTP; schedules refresh of metadata after 5 seconds; schedules refresh after ~3 hours; lives on for what seems to be forever and continues refreshing. One resolver for each file. If I use one file per service, there are many resolvers on one file for each service def. In any case, there is a new refresh Timer for each request.\nTwo solutions I have in mind:\n* keep a list of resolvers in UrlResourceMetadataResolver so that each service has one file and one timer\n\n* somehow delete resolvers after requests\n\nI currently have no idea how the service metadata expiration and global metadata cache expiration properties are affecting the behaviour.\nStrangely, I cannot find any access to cached metadata in the logs at all.\nDo you have any suggestions or thoughts?\nSo, at least I found out what happens.\nUrlResourceMetadataResolver creates a FileBackedHTTPMetadataResolver for each request.\nFileBackedHTTPMetadataResolver looks at the file and loads metadata from there if present, if not via HTTP; schedules refresh of metadata after 5 seconds; schedules refresh after ~3 hours; lives on for what seems to be forever and continues refreshing. One resolver for each file. If I use one file per service, there are many resolvers on one file for each service def. In any case, there is a new refresh Timer for each request.\nTwo solutions I have in mind:\n* keep a list of resolvers in UrlResourceMetadataResolver so that each service has one file and one timer\n\n* somehow delete resolvers after requests\n\nI currently have no idea how the service metadata expiration and global metadata cache expiration properties are affecting the behaviour.\nStrangely, I cannot find any access to cached metadata in the logs at all.\nDo you have any suggestions or thoughts?\n\nI also encountered this situation. I find refresh saml service \uff0ccas-server think it is a new cache saml-service ,to new a Timer  .Causing unlimited expansion of threads. ",
    "daramos": "Thanks for reviewing.\nDo you have any suggestions on how I can rework the patch to meet expectations? \nWould you prefer I move the DataSource creating logic to CasJdbcAuthenticationConfiguration.bindModeSearchDatabaseAuthenticationHandler() I see how that would be cleaner. \nI will also get rid of Class.forName. I believe that leftover from me trying to figure out why the Oracle jdbc driver wasn't being loaded during my testing.. @mmoayyed If you mean create some test cases, then no problem. Let me see what I can come up with next week.. ",
    "plajko": "My AuthenticationHandlers were clearly not in the predefined order, that's why I investigated it. I missed checking DefaultAuthenticationEventExecutionPlan, because api returns a Set so my first thought was that does not respect order.\nNow I checked DefaultAuthenticationEventExecutionPlan.getAuthenticationHandlersForTransaction() and think it's not correct because Collectors.toSet() does not preserve order. (As it collects to a HashSet)\nI don't know if its a good idea to expect a Set to be sorted, maybe indicating it with using SortedSetwould be slightly better.\n. My AuthenticationHandlers were clearly not in the predefined order, that's why I investigated it. I missed checking DefaultAuthenticationEventExecutionPlan, because api returns a Set so my first thought was that does not respect order.\nNow I checked DefaultAuthenticationEventExecutionPlan.getAuthenticationHandlersForTransaction() and think it's not correct because Collectors.toSet() does not preserve order. (As it collects to a HashSet)\nI don't know if its a good idea to expect a Set to be sorted, maybe indicating it with using SortedSetwould be slightly better.\n. ",
    "stale[bot]": "This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically closed because it has not had recent activity. If you wish to resume work, please re-open the pull request and continue as usual. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. This patch has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.\n. ",
    "KharitonOff": "Great, it's surely the better solution than mine \ud83d\ude04 . ",
    "alexdp": "Thank you very much for your message.  I understand and will submit patch\non the corresponding branch instaed of master next time.\nBest Regards,\nAlex\nLe 24 janv. 2018 15:49, \"Misagh Moayyed\" notifications@github.com a\n\u00e9crit :\n\nbtw, for future reference please note that your target branch for this PR\nwas to master which is not marching towards 5.2 anymore. I backported\nyour change to 5.2, but you may want to readjust the target branch next\ntime if you indeed want a change to go into 5.2 first (and then possibly do\nanother PR for master as well). The results are more or less the same; just\nwanted to make sure you recognize the branching strategy here.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3162#issuecomment-360158473, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ADXNDzq7ccCcIuPOQVS5NAvjWhSKI4VSks5tN0LugaJpZM4Rq77m\n.\n. \n",
    "thomasreiser": "Any chances that this will be part of 5.3.0?. ",
    "cisiqo": "Thanks. The repo has no this problem, the correct url just from the repo. \ud83d\ude04. ",
    "peyo": "I update my PR with the master sources.. ",
    "bosim": "@dodok1 @mmoayyed Would really be great so see this upstreamed. I am struggling with exactly the same problem, where I need to cope with Access-Challenge. . @dodok1 @mmoayyed Would really be great so see this upstreamed. I am struggling with exactly the same problem, where I need to cope with Access-Challenge. . @mmoayyed maybe you could give me a hint on why the build is failing?. @mmoayyed maybe you could give me a hint on why the build is failing?. > but that probably isn't your change that is causing that, although it is odd that another pull request to the same branch passed the tests right after yours.\nThanks for your reply. Seems like a problem with the travis job. Changed a bit in the commit message and the test seems to pass now. \n. > but that probably isn't your change that is causing that, although it is odd that another pull request to the same branch passed the tests right after yours.\nThanks for your reply. Seems like a problem with the travis job. Changed a bit in the commit message and the test seems to pass now. \n. > You could wait for a review from @mmoayyed but assuming he approves he will ask you to \"port it forward\" to the master branch. That builds with Java 11 and is using lombok so things like the local variable declarations will need to be changed to the use the \"val\" keyword instead of e.g. \"final String\".\nDone see #3665. > You could wait for a review from @mmoayyed but assuming he approves he will ask you to \"port it forward\" to the master branch. That builds with Java 11 and is using lombok so things like the local variable declarations will need to be changed to the use the \"val\" keyword instead of e.g. \"final String\".\nDone see #3665. > I think we might have an issue here:\n\nif (xFrameOptions != null) {\n            super.setXFrameOptions(xFrameOptions);\n        }\nConsider this:\n1. Service S1 has custom header options for x-frame. It gets set.\n\n2. Service S1 has no custom header options. So CAS tries to fall back onto the default value. The default value is changed for the filter via #1, so every service gets that value.\n\nThis needs to make sure that the filter value is reset to the original, if no service option is found.\n\nI will look into it right away. Would it be sufficient to do\nif (xFrameOptions != null) {\n             super.setXFrameOptions(xFrameOptions);\n         } else {\n             super.setXFrameOptions(\"DENY\");\n         }. > I think we might have an issue here:\n\nif (xFrameOptions != null) {\n            super.setXFrameOptions(xFrameOptions);\n        }\nConsider this:\n1. Service S1 has custom header options for x-frame. It gets set.\n\n2. Service S1 has no custom header options. So CAS tries to fall back onto the default value. The default value is changed for the filter via #1, so every service gets that value.\n\nThis needs to make sure that the filter value is reset to the original, if no service option is found.\n\nI will look into it right away. Would it be sufficient to do\nif (xFrameOptions != null) {\n             super.setXFrameOptions(xFrameOptions);\n         } else {\n             super.setXFrameOptions(\"DENY\");\n         }. > Yes that's perfect, except that DENY should not be a hard-coded value. You should get the default from the settings instead.\nSure :). > Yes that's perfect, except that DENY should not be a hard-coded value. You should get the default from the settings instead.\nSure :). @mmoayyed So stuff seems to work ok. There is just a minor catch with the recent change. CAS does not take the default httpHeaderEnableXFrameOptions into account. So when you are overriding the header via the service file you need to provide both httpHeaderEnableXFrameOptions = true and httpHeaderXFrameOptions. We should probably provide getStringProperty(httpServletRequest, RegisteredServiceProperties.HTTP_HEADER_XFRAME_OPTIONS) to super.decideInsertXFrameOptionsHeader.. @mmoayyed So stuff seems to work ok. There is just a minor catch with the recent change. CAS does not take the default httpHeaderEnableXFrameOptions into account. So when you are overriding the header via the service file you need to provide both httpHeaderEnableXFrameOptions = true and httpHeaderXFrameOptions. We should probably provide getStringProperty(httpServletRequest, RegisteredServiceProperties.HTTP_HEADER_XFRAME_OPTIONS) to super.decideInsertXFrameOptionsHeader.. > OK. We should be good to go here. Fixed via 82385f3\nReally neat @mmoayyed !. > OK. We should be good to go here. Fixed via 82385f3\nReally neat @mmoayyed !. Ah makes sense. Totally forgot about the possibility of overriding via cas.properties. Definitely the right thing to do to change the security filter implementation.. ",
    "teddyber": "hello,\ndoes this mean that when a TGT is deleted (logout or expired) associated\nOauth tokens are not valid anymore? (that is debatable for access tokens\nand surely not desirable for refresh tokens in most cases)\nOn Thu, Feb 15, 2018 at 10:07 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nThis is perfectly good in nature. I think the design needs to be\nreformatted to align with the rest of the codebase. Dynamic registration of\ncomponents based on auto-wiring injections where the underlying container\nis a Collection of sorts that is passed around here and there is not a good\nidea and tends to cause issues down the road, in particular when it comes\nto controlling the execution order of the components in that Container\n(List) in your example. So over time, we have been moving away from this\nmodel and switching to a more NPE-resistant compile-time-controlled\napproach with more explicit control.\nGiven the nature of the change, I am not 100% sure if we can merge this\nfor 5.2.x as it's sort of beyond the scope of a patch release but having\nlooked at the patch briefly, I did not see any breaking changes per se...so\nI suspect we are good.\nI am in the process of writing a blog post to outline the intentions\nbehind the above-recommended strategy. If you could, I'll ping this thread\nonce the post is done so you can get an idea of what I have in mind as an\nalternative. If you are eager, however, I could point to specific examples\nin the codebase and you can take it from there?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3206#issuecomment-365865317, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ABDn2Y-a3n1JsdMh5fntggUCyQgervwoks5tU_PRgaJpZM4SGYnJ\n.\n. \n",
    "luis100": "@leleuj @mmoayyed I tried to select and approach with the least impact, but @mmoayyed solution seems more adequate. But I would need some guidance to be able to program that.. I'm using the Portuguese National Authentication service pre-production system. This is a national implementation of the European eID system:\n https://www.eid-stork2.eu/\n https://ec.europa.eu/digital-single-market/en/e-identification\nI am currently implementing the CAS support for that system, but it seems the only supported binding is HTTP-POST.. Fixed some checkstyle issues and rebased with master.. Yes, that is actually what would work better for me. It would allow me to continue my integration tests without having to use a customized version. I've already seen that there will be the need for more changes to cope with all configuration needs, like allowing to define extensions on the saml auth request, but that would be the subject of another pull request.. Besides being blocked by a pac4j pull request, this code currently fails due to the following error:\n2018-04-12 11:36:31,454 WARN [org.apereo.cas.web.flow.resolver.impl.InitialAuthenticationAttemptWebflowEventResolver] - <No authentication result builder can be located in the context>\njava.lang.IllegalArgumentException: No authentication result builder can be located in the context\nThe code works on CAS version 5.2.3, integration code available at branch https://github.com/luis100/cas/tree/keeps_supportEuropeanEID_5.2.3. @mmoayyed the error message doesn't seem to be related to my changes, it does the same error when I try signing in with Google, I'm testing the code using bootRun, which worked well on 5.2.x. Are there any changes on configuration or on the bootRun setup since 5.2.x version?. Those are because my changes on the pac4j Library, which were already merged in pac4j's master and 2.2.x branches, are not yet integrated here. Guess we'll have to wait for them to be release on the 3.0.0-RC3 release.. @mmoayyed the pac4j RC2 was released with my changes, so I can resume work. Could you re-open this pull request so I don't miss the review story?. ",
    "lackern": "Hi,\nIs there a guide for this or example on how to do this upstream?\nRegards,\nLackern\nSent from my iPhone\nOn 2 Mar 2018, at 5:39 PM, Misagh Moayyed notifications@github.com<mailto:notifications@github.com> wrote:\nPlease re-organize the pull request to only contain your changes by properly merging with then upstream. Thank you!\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/apereo/cas/pull/3229#issuecomment-369871970, or mute the threadhttps://github.com/notifications/unsubscribe-auth/ADRCY8YygsyVd76O9EXjn1jFIQYDkFEAks5taRM5gaJpZM4SZhu-.\n. ",
    "jsimomaa": "@leleuj Thank you for the comments\n\nit took me quite some time to understand your solution: grab the Oidc state, save it into session for all Oidc clients, when called back, check the state from the session, get the states from the session, retrieve the right Oidc client... Maybe you could do something easier: override the OidcRedirectActionBuilder class and generate a state which is the client name, set it to all OidClient, when called back, check the state from the session to get the client_name...\n\nYes, overriding he OidcRedirectActionBuilder was another option I evaluated but it would have required changes also to the Pac4J-libraries as well. The reason why I chose this approach was to prevent unnecessary changes to the Pac4J-library and it was possible to implement the required functionality by only modifying the internal logic of DelegatedClientAuthenticationAction. \nThe client_name could be included to the state itself but some random salt should also be added together with the client_name and properly encoded. Any ideas regarding this?. @mmoayyed thank you for the information, any schedule for the prepared fixes?. ",
    "swlyons": "So what did I mess up on? I'd love to fix it.. What do you mean by pinging the PR? Like I just don't know what that means.\nIf I understand you correctly with the OAuth and the SAML on the tickets I don't think we have a reason to customize the names on those at the moment but when I start integrating SAML I may start doing that. We wanted to customize Dynamo Table names since we wanted Stage and Prod to be in the same amazon account but for them not to use the same tables.\nI'll go ahead and add it to the master branch and create another pull request I should've thought of doing that when doing this in the first place.\nWell the error in Travis CI is \"Checkstyle rule violations were found. See the report at: file:///home/travis/build/apereo/cas/core/cas-server-core-configuration/build/reports/checkstyle/main.html\" Although I'm unfamiliar with Travis so I don't really know what I'm looking at to fix it. It appears that when I go to more options and click on Requests I see the list of travis builds and it seems like it did this build correctly (#3246 3bf30fc) but when I click details on the link above it says it's errored. So this confuses me and I'm probably just not understanding it. What's going on? I'm fine pinging the PR and figuring this out I just don't who PR is and how to do it.. K I created another pull request for the master branch, I'll take a look on Monday at what's going on with the Codacy/PR Quality Review and the coverage/coveralls, along with seeing if travis managed to build the master branch. Thanks for helping. It took a while to get my IntelliJ to start using checkstyle but I got it up and running now.. For the Codacy/PR Quality Review when I try to look at the logs I'm seeing a 404 ERROR on the request \"URL:https://github.com/login/oauth/authorize?client_id=cdf4908794347d83c413&redirect_uri=https%3A%2F%2Fapp.codacy.com%2Flogin%2FGithubReadOnly%3Fcodacy_skip_ga%3D1&state=NiruKOMjrQ5CdrW7ubJ6Y07OESbCON6sYSPXd5E1&utm_nooverride=\".  For the coverage/coveralls.....I'm lost. I don't know what it's saying. For the master branch I'm trying to run the command that failed in travisci (seems to have timed out or something). My computer for some reason thinks that it's running Gradle 5.0 so I'll try to bang my computer around some more until it can run it to make sure it works before sending it out (I think it will, just want to make sure my computer stops freaking out).. I'm going to try getting checkstyle working on my cpu again for a bit and then I'll go do the documentation and stuff. I realized I forgot about that when I was headed home last Friday.. What do you mean by RequiresModule annotation?\nFound out what was happening. I had JAVA_HOME config wrong (.....smack head.....). Afterwords Intellij was giving me this in the event logs\n\"The Checkstyle rules file could not be parsed.\ncannot initialize module TreeWalker - Unable to instantiate 'LambdaParameterName' class, it is also not possible to instantiate it as .LambdaParameterName, LambdaParameterNameCheck, .LambdaParameterNameCheck. Please recheck that class name is specified as canonical name or read how to configure short name usage http://checkstyle.sourceforge.net/config.html#Packages. Please also recheck that provided ClassLoader to Checker is configured correctly.\nThe file has been blacklisted for 60s.\"\nCommenting out LambdaParameterName fixes it, I'll try not to commit it though.. Updated it to version CheckStyle-IDEA 5.22.0. Same error but that one's not a big deal.. Got it. That fixed it.. Got it. I was getting to it, just stuff came up last week that required my attention a bit more. Thank you. ",
    "NgSekLong": "@mmoayyed Sorry for not testing with the latest version before submitting this PR.\nI have now tested it with the 5.3.0-RC3 and CAS OAuth theme definitely works, thanks!\nI will close this ticket now. Sure thing!\nIt probably will takes me a while since I am not familiar with the testing framework used by CAS, \nI will tried to start when I get back to my working computer, thanks.. If release schedule is tight, please help finish the test case\nI have already started on 6/8,\nbut I spent a few days installing intellij and studying CAS, since I am still not familiar with CAS and I haven't done unit test before. \nI am quite new to the world of programming :) CAS is my first task given in my career, which is few months back.\nYesterday day end I finally set everything up and created a dummy test case on OAuth directory. I hope I can finished this tmr. \nI will update here more frequently for my working status, thanks!. I use logger to print out the value of \ntoken.getService().getId();\nAnd it is showing me clientid instead of serviceid, as to why, I havn't trace back the variable initialize point yet. Thanks!! That should be very helpful for my development.. Sure, I am on my way to my office, will get back to you once my computer is up and running, thanks. I passed the test on OAuth20AuthorizationCodeGrantTypeTokenRequestValidatorTests , however I think the problem might be on how OAuthCode is generated, maybe in the real case OAuthCode was generated differently then in the test case?\nfor oauth test client do you means an CAS OAuth endpoint for you to point to? I can't give you that because it is on our intranet.\nI have the service tho, change up a bit of course:\n{\n  \"@class\" : \"org.apereo.cas.support.oauth.services.OAuthRegisteredService\",\n  \"clientId\": \"TheClientID\",\n  \"clientSecret\": \"XXXXXXXXXXXXXXXXXXXXX\",\n  \"bypassApprovalPrompt\": false,\n  \"generateRefreshToken\": true,\n  \"serviceId\" : \"https://www.example.com/oauth\",\n  \"name\" : \"Test OAuth\",\n  \"id\" : 4001,\n  \"evaluationOrder\" : 4001,\n  \"supportedResponseTypes\" : [ \"java.util.HashSet\", [ \"code\" ] ],\n  \"supportedGrantTypes\" : [ \"java.util.HashSet\",  [ \"authorization_code\" , \"refresh_token\"] ],\n  \"attributeReleasePolicy\" : {\n    \"@class\" : \"org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy\",\n    \"allowedAttributes\" : [ \"java.util.ArrayList\", [ \"uid\", \"name\", \"email\" ] ]\n  },\n  \"accessStrategy\" : {\n    \"@class\" : \"org.apereo.cas.services.DefaultRegisteredServiceAccessStrategy\",\n    \"ssoEnabled\" : false\n  },\n  \"theme\" : \"ihaveatheme\"\n}\nI am now most curious about why \ntoken.getService().getId();\nis showing clientID instead of serviceID. \nTake into account that, after Logger out  code.getService() in build() in  OAuth20AuthorizationCodeAuthorizationResponseBuilder, it is still showing the clientID instead of serviceID\nI am doing some research on it now.\n. Ok I found this:\nhttps://github.com/apereo/cas/blob/master/support/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/authenticator/OAuth20CasAuthenticationBuilder.java\n/**\n     * Build service.\n     *\n     * @param registeredService the registered service\n     * @param context           the context\n     * @param useServiceHeader  the use service header\n     * @return the service\n     */\n    public Service buildService(final OAuthRegisteredService registeredService, final J2EContext context, final boolean useServiceHeader) {\n        String id = null;\n        if (useServiceHeader) {\n            id = OAuth20Utils.getServiceRequestHeaderIfAny(context.getRequest());\n            LOGGER.debug(\"Located service based on request header is [{}]\", id);\n        }\n        if (StringUtils.isBlank(id)) {\n            id = registeredService.getClientId();\n        }\n        return webApplicationServiceServiceFactory.createService(id);\n    }\nSince the service is created like this:\nhttps://github.com/apereo/cas/blob/master/support/cas-server-support-oauth/src/main/java/org/apereo/cas/support/oauth/web/endpoints/OAuth20AuthorizeEndpointController.java\nfinal Service service = this.authenticationBuilder.buildService(registeredService, context, false);\nIf I am not mistaken, the above code is to help generate the token.getService().getId() , \n By that logic token.getService().getId(); will return clientId instead of serviceId.\nI see if I can tweek the test case to reflect upon this issue, thanks. Work in progress:\n- Try to use oAuthCodeFactory.create(holder.getService(), holder.getAuthentication(), holder.getTicketGrantingTicket(), holder.getScopes()); to generate OAuthCode \n- instead of  final OAuthCode oauthCode = mock(OAuthCode.class);\n- The above assume that RegisteredServiceTestUtils.getService().getId() will give out serviceId, but in practice it is returning clientId. I didn't have an example application for now, just using API tools (i.e. Postman) to simulate the OAuth flow. Thank you @mmoayyed . I saw that you have change the serviceId to clientId. May I ask if the problem in this PR is fixed in the Master? If so I will test it out tomorrow to see if the fix is finished.\nMay I also suggest, instead of using:\nfinal OAuthCode oauthCode = mock(OAuthCode.class);\nwhen(oauthCode.getId()).thenReturn(\"OC-12345678\");\n......\nMaybe we can use:\nfinal Service oauthCasAuthenticationBuilderService = \n        this.oauthCasAuthenticationBuilder.buildService(registeredService,  null, false);\nfinal OAuthCode oauthCode = oAuthCodeFactory.create(oauthCasAuthenticationBuilderService, \n        RegisteredServiceTestUtils.getAuthentication(),\n        new MockTicketGrantingTicket(\"casuser\"),   new HashSet<>());\nAs seen in the latest commit to this PR.\nFrom what I can understand, the bottom one will be more realistic than the upper one, due to the OAuthCode is actually generated from the buildService itself. What do you think, @mmoayyed ? \n. I actually thought that status endpoint is the preferred way to monitor general health check based on the documentation.\nI have tried status/health endpoint before, but I didn't know it is capable of returning description.\nNow that you've mentioned it so I tried again, I agree that status/health is able to do what I need for status, hence I will close this PR. Thanks!\nI also added a PR to CAS documentation, #3361 , to inform reader to use status/health instead of status\n. After looking at it again, there is some syntax problem. \nMy previous commit is using\n<div class=\"alert\"> .....   `/status`\ninstead of \n<div class=\"alert\"> .....    <code>/status</code>\nSo it is not highlighting properly (see blue box in https://apereo.github.io/cas/development/installation/Monitoring-Statistics.html)\ncan this PR be reopen and let me touch it up a bit? Thanks!\n. Yup, you are correct, let me open a new PR then. FYI, I have tested this in 5.3.0 and can confirm that this issue is fixed, thanks!. Ah, I see you already fix that in master too. \nApparently this bug is also in the 5.2.x doc, all sslEnabled is set as ssEnabled for all mongo setting, need fixing too?\nhttps://apereo.github.io/cas/5.2.x/installation/Configuration-Properties.html. I click the wrong button, sorry. > How is the behavior in #3256 tested\nI think the test case for #3256 was not implemented by me, let me double check the implementation and get back to you.. Work in progress, I am waiting for Travis to run so I can see if the test cases are valid. Thanks.. It seems the test is passed, you can merge it now, thanks!. > users generally assume that they should just log into places seamlessly without getting prompted at all.\nAfter reading you paragraph, I do now also think the above is true.\nHowever, I still think the behavior is weird, but I understand somewhat why it is set to true.\nI think what I will do, is bring this to the community forums, if there is more argument supporting to set it to false, then I will make another PR about this.\nI will close this for now. Thanks!\n. I am not familiar with Spring scoping, from what I can see:\nIn 5.2.x, it is using flashScope, and in 5.3.x it changes to flowScope. \nAnd in 5.3.x, the following flow:\n* CAS Login > Attribute Consent > SAML\nWill failed at the flow from \"Attribute Consent\" to \"SAML\".\nIf I am going to guess it, I think flashScope is needed because from \"Attribute Consent\" to \"SAML\" the flowScope \"service\" is lost somehow. I am really not sure about why without flashScope it will not work.\n. I agree with @mmoayyed. \nHowever I might needs to seek help from other contributor/ need more time to study Spring flow before implementing the better fix.\nFor this bug, I found the problem mostly by trial and error. . How about this, we fix this bug by setting the flashScope for service in 5.3.x branch. So at least the bug is fixed in the production branch.\nThen we can find an actual solution to this problem, so we don't need to add service to flashScope in CAS 6.x branch.\nDoes the above sounds like a feasible plan?. On my phone now, will do that tmr if possible.. My mistake, I have changed that to final field. ",
    "kripalsingh": "I encounter a similar issue when i tried to Use JWT token creation , here is the link to the thread\nhttps://groups.google.com/a/apereo.org/forum/#!topic/cas-user/ombZHuXqyuc\nGoogle GroupsGoogle Groups allows you to create and participate in online forums and email-based groups with a rich experience for community conversations.\n. ",
    "jimmytheneutrino": "I think it would be hard to get rid of the proxy because of RefreshScope annotation (I did not test master yet though). Since OidcServerDiscoverySettings is actually lightweight, I think it is 100% ok to produce one on every request. So I think the way to go is to ditch the FactoryBean approach and make OidcServerDiscoverySettingsFactory a producer of simple objects (essentially like in the current PR but cleaner).\nI'll update the PR on ~weekend.. This seems to be fixed by https://github.com/apereo/cas/commit/54cfc542542bf389e16212367b193a3f9957d50e#diff-bb7d2e20b2c0c98a12ba20407c4f2e91L514. ",
    "hongliming": "not yet. Oauth2 is currently only CAS 5.2.4 available.. ",
    "defrox": "Something is wrong with Travis, can't build tests. Done!. ",
    "tomoiasa84": "Hi @mmoayyed, could you please provide some details on why the proposal was declined?\nIt is my first attempt at submitting a pull request here, but I do think my report points to a real problem.\nIf I am wrong, would please provide some details on why the proposal was declined.. Hi @mmoayyed, thank you for your answer, I appreciate your feedback, indeed my comment does not fix anything.\nWould you please consider the following:\n- I do believe the fact that different classloaders are causing an error is a bug, not a configuration issue\n- I am asking for help to locate the main cause and offer to fix it once I understand it better\n- I have successfully worked with cas 3 for several years, have successfully deployed cas5 and integrated it with shibboleth and adfs; the pull request was not my knee jerk reaction to the first problem I encountered. I have tried various avenues: google groups, chat room, stack overflow options listed on the support page as well as the the cxf support page; on google groups, others have reported this same issue.\n- I have the cas server running from source on my machine and can consistently step through the code and reproduce the error. \nSo please take a look over my initial comment again: is it not a bug that the first remote call to the ws-fed STS service is causing a ClassCastException?\nThank you again,\nAlin\n. Ok @mmoayyed, thank you. \nIf at some point you come across another person working on this or any issue that may be relevant, please also forward the information to me. I will continue to work on it.. ",
    "yangchiaying": "I have resolved the conflict.  Thank you for your consideration!. I have restored the deleted block, but did have to tweak it slightly so I can log it properly.  Also fixed a mistake in the unit test.  Thanks!. I will need some help to fix the latest Travis CI error.  Thanks!. Thank you very much for your comment. In hindsight I should have tried this first! I did a quick test and it seems like cas.authn.attributeRepository.expirationTime=0 disables caching for components that make use of this value.\nI've contacted a couple of CAS users about testing this value in their settings, but have yet to get a confirmation that 0 works for them.  However, I did some digging in Caffeine and confirmed that 0 is acceptable and should disable caching.\nI think the source of my problem is:\n- it would have been very helpful if the documentation has explicit instructions on how to disable caching, i.e. set the appropriate property to 0 or supply a duration of 0.\n- there are multiple stages and components related to attributes -- principal resolution vs. attribute resolution stage, attribute repository vs. attribute release, etc. If caching is not turned off for all applicable components then one may draw the conclusion there is a bug or the setting does not work.  Again, a reminder in the documentation would really help.\nThat leaves CasCoreAuthenticationPrincipalConfiguration.globalPrincipalAttributeRepository().  Since it is impossible to specify a negative cacheTime, should this code be changed to check for (cacheTime == 0) instead?. In progress.. In progress.. ",
    "jasonwang8": "How do I find out what failed in the Travis CI Build?  I am curious why this test failed.  The a few lines in JavaScript (cas.js) changes should not cause any issues.  I tested it in my local overlay project by pointing to this modified cas.js file in cas-theme-default.properties. . ",
    "codecov[bot]": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@21b4189). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3406   +/-\n========================================\n  Coverage          ?      0%         \n========================================\n  Files             ?    1413         \n  Lines             ?   30330         \n  Branches          ?    2828         \n========================================\n  Hits              ?       0         \n  Misses            ?   30330         \n  Partials          ?       0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 21b4189...6e2d424. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@225f681). Click here to learn what that means.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3583   +/-\n=========================================\n  Coverage          ?   48.33%         \n  Complexity        ?     4924         \n=========================================\n  Files             ?     1404         \n  Lines             ?    30380         \n  Branches          ?     2840         \n=========================================\n  Hits              ?    14684         \n  Misses            ?    14318         \n  Partials          ?     1378\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...efaultCasConfigurationPropertiesSourceLocator.java | 92.68% <100%> (\u00f8) | 21 <0> (?) | |\n| ...rincipal/X509CommonNameEDIPIPrincipalResolver.java | 81.57% <60%> (\u00f8) | 13 <1> (?) | |\n| ...ation/principal/AbstractX509PrincipalResolver.java | 66.66% <62.5%> (\u00f8) | 8 <5> (?) | |\n| ...509SubjectAlternativeNameUPNPrincipalResolver.java | 69.38% <75%> (\u00f8) | 12 <1> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 225f681...e51f01c. Read the comment docs.\n. # Codecov Report\nMerging #3586 into master will increase coverage by 10.75%.\nThe diff coverage is 96.55%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3586       +/-\n=============================================\n+ Coverage     48.27%   59.03%   +10.75%   \n- Complexity     4903     5789      +886   \n=============================================\n  Files          1404     1404             \n  Lines         30350    30359        +9   \n  Branches       2842     2842             \n=============================================\n+ Hits          14652    17921     +3269   \n+ Misses        14319    10668     -3651   \n- Partials       1379     1770      +391\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...efaultCasConfigurationPropertiesSourceLocator.java | 92.4% <96.55%> (-0.46%) | 20 <9> (+6) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...c/main/java/org/apereo/cas/util/ResourceUtils.java | 40.29% <0%> (+1.49%) | 14% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 79.62% <0%> (+1.85%) | 13% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 34% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...pal/ShibbolethCompatiblePersistentIdGenerator.java | 76.31% <0%> (+5.26%) | 10% <0%> (+1%) | :arrow_up: |\n| ...cation/support/DefaultLdapAccountStateHandler.java | 61.11% <0%> (+5.55%) | 5% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+5.55%) | 11% <0%> (+2%) | :arrow_up: |\n| ... and 196 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0595e58...992b75f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@b9e4f25). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3588   +/-\n========================================\n  Coverage          ?      0%         \n========================================\n  Files             ?    1413         \n  Lines             ?   30369         \n  Branches          ?    2833         \n========================================\n  Hits              ?       0         \n  Misses            ?   30369         \n  Partials          ?       0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b9e4f25...b1e2baa. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@ee4a5d3). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3599   +/-\n=========================================\n  Coverage          ?   48.81%         \n  Complexity        ?     4962         \n=========================================\n  Files             ?     1419         \n  Lines             ?    30393         \n  Branches          ?     2828         \n=========================================\n  Hits              ?    14837         \n  Misses            ?    14166         \n  Partials          ?     1390\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...efaultCasConfigurationPropertiesSourceLocator.java | 92.1% <100%> (\u00f8) | 19 <1> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ee4a5d3...3fe8e95. Read the comment docs.\n. # Codecov Report\nMerging #3605 into master will decrease coverage by 58.71%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3605       +/-\n============================================\n- Coverage     58.71%      0%   -58.72%   \n============================================\n  Files          1431    1413       -18   \n  Lines         30302   30330       +28   \n  Branches       2815    2823        +8   \n============================================\n- Hits          17791       0    -17791   \n- Misses        10785   30330    +19545   \n+ Partials       1726       0     -1726\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/pm/JdbcPasswordManagementService.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...g/apereo/cas/pm/RestPasswordManagementService.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| .../cas/pm/JsonResourcePasswordManagementService.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...as/pm/GroovyResourcePasswordManagementService.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...g/apereo/cas/pm/NoOpPasswordManagementService.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...g/apereo/cas/pm/LdapPasswordManagementService.java | 0% <0%> (-53.34%) | 0 <0> (-6) | |\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ... and 1198 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd21b36...e843273. Read the comment docs.\n. # Codecov Report\nMerging #3606 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3606      +/-\n============================================\n- Coverage     48.86%   48.83%   -0.03%   \n+ Complexity     4969     4965       -4   \n============================================\n  Files          1419     1419            \n  Lines         30399    30399            \n  Branches       2829     2829            \n============================================\n- Hits          14854    14845       -9   \n- Misses        14158    14165       +7   \n- Partials       1387     1389       +2\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...eo/cas/support/geo/AbstractGeoLocationService.java | 15.62% <0%> (-37.5%) | 3% <0%> (\u00f8) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 66.66% <0%> (-9.26%) | 9% <0%> (-5%) | |\n| ...i/src/main/java/org/apereo/cas/util/HttpUtils.java | 53.42% <0%> (-1.37%) | 20% <0%> (-1%) | |\n| ...lMultifactorAuthenticationPolicyEventResolver.java | 44.44% <0%> (\u00f8) | 5% <0%> (\u00f8) | :arrow_down: |\n| .../cas/ticket/registry/InfinispanTicketRegistry.java | 100% <0%> (+7.14%) | 10% <0%> (+1%) | :arrow_up: |\n| ...pport/geo/google/GoogleMapsGeoLocationService.java | 42.1% <0%> (+36.84%) | 2% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86cdb21...9e9d13a. Read the comment docs.\n. # Codecov Report\nMerging #3612 into master will decrease coverage by 48.77%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3612       +/-\n============================================\n- Coverage     48.77%      0%   -48.78%   \n============================================\n  Files          1423    1419        -4   \n  Lines         30472   30400       -72   \n  Branches       2835    2829        -6   \n============================================\n- Hits          14863       0    -14863   \n- Misses        14211   30400    +16189   \n+ Partials       1398       0     -1398\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...java/org/apereo/cas/services/OidcSubjectTypes.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/authn/UmaRequestingPartyTokenAuthenticator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...apereo/cas/services/AbstractRegisteredService.java | 0% <0%> (-100%) | 0% <0%> (-7%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rg/apereo/cas/adaptors/yubikey/YubiKeyAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...t/ClientIpDeviceFingerprintComponentExtractor.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 1014 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update de27eb8...926697b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@683bb83). Click here to learn what that means.\nThe diff coverage is 49.12%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3616   +/-\n========================================\n  Coverage          ?   8.76%         \n  Complexity        ?    1072         \n========================================\n  Files             ?    1437         \n  Lines             ?   30488         \n  Branches          ?    2830         \n========================================\n  Hits              ?    2672         \n  Misses            ?   27560         \n  Partials          ?     256\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/services/RegexRegisteredService.java | 60% <\u00f8> (\u00f8) | 4 <0> (?) | |\n| ...ml/services/idp/metadata/SamlMetadataDocument.java | 71.42% <\u00f8> (\u00f8) | 2 <0> (?) | |\n| ...services/idp/metadata/SamlIdPMetadataDocument.java | 38.88% <\u00f8> (\u00f8) | 5 <0> (?) | |\n| ...ava/org/apereo/cas/web/view/Cas10ResponseView.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...pi/principal/ChainingAuditPrincipalIdProvider.java | 45.45% <0%> (\u00f8) | 1 <0> (?) | |\n| .../apereo/cas/services/CouchbaseServiceRegistry.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...o/cas/aws/AmazonEnvironmentAwareClientBuilder.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...bGoogleAuthenticatorTokenCredentialRepository.java | 72.72% <100%> (\u00f8) | 6 <0> (?) | |\n| ...edential/OneTimeTokenAccountCouchDbRepository.java | 33.33% <16.66%> (\u00f8) | 2 <0> (?) | |\n| ...s/yubikey/registry/BaseYubiKeyAccountRegistry.java | 25% <50%> (\u00f8) | 4 <1> (?) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 683bb83...ce4fe68. Read the comment docs.\n. # Codecov Report\nMerging #3619 into master will increase coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3619      +/-\n============================================\n+ Coverage     48.77%   48.79%   +0.01%   \n- Complexity     4970     4971       +1   \n============================================\n  Files          1423     1423            \n  Lines         30472    30471       -1   \n  Branches       2835     2834       -1   \n============================================\n+ Hits          14863    14867       +4   \n+ Misses        14211    14207       -4   \n+ Partials       1398     1397       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...h20RefreshTokenGrantTypeTokenRequestValidator.java | 81.08% <0%> (+2.13%) | 8 <0> (\u00f8) | :arrow_down: |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...rg/apereo/cas/support/oauth/util/OAuth20Utils.java | 60.63% <0%> (+3.19%) | 29% <0%> (+1%) | :arrow_up: |\n| ...lback/OAuth20ClientCredentialsResponseBuilder.java | 100% <0%> (+50%) | 2% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update de27eb8...a10f48b. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@85c3204). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3622   +/-\n========================================\n  Coverage          ?   8.09%         \n  Complexity        ?     885         \n========================================\n  Files             ?    1422         \n  Lines             ?   30238         \n  Branches          ?    2814         \n========================================\n  Hits              ?    2448         \n  Misses            ?   27505         \n  Partials          ?     285\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...entication/policy/RestfulAuthenticationPolicy.java | 80.64% <100%> (\u00f8) | 10 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 85c3204...d39daa4. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@ca67ad9). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3625   +/-\n=========================================\n  Coverage          ?   20.72%         \n  Complexity        ?     2061         \n=========================================\n  Files             ?     1422         \n  Lines             ?    30238         \n  Branches          ?     2814         \n=========================================\n  Hits              ?     6268         \n  Misses            ?    23259         \n  Partials          ?      711\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...reo/cas/adaptors/u2f/U2FAuthenticationHandler.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ca67ad9...01b88f9. Read the comment docs.\n. # Codecov Report\nMerging #3628 into master will increase coverage by 9.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3628      +/-\n============================================\n+ Coverage     48.53%   57.58%   +9.05%   \n- Complexity     4927     5668     +741   \n============================================\n  Files          1430     1428       -2   \n  Lines         30286    30256      -30   \n  Branches       2814     2811       -3   \n============================================\n+ Hits          14700    17424    +2724   \n+ Misses        14199    11123    -3076   \n- Partials       1387     1709     +322\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...eo/cas/support/geo/AbstractGeoLocationService.java | 14.7% <0%> (-41.18%) | 3% <0%> (\u00f8) | |\n| .../CasConfigurationPropertiesEnvironmentManager.java | 31.25% <0%> (-16.58%) | 4% <0%> (-1%) | |\n| ...on/event/SurrogateAuthenticationEventListener.java | 31.03% <0%> (-13.8%) | 4% <0%> (\u00f8) | |\n| ...DisplayBeforePasswordlessAuthenticationAction.java | 59.25% <0%> (-3.71%) | 2% <0%> (\u00f8) | |\n| .../web/flow/DelegatedClientAuthenticationAction.java | 60.6% <0%> (-3.25%) | 18% <0%> (-2%) | |\n| ...i/src/main/java/org/apereo/cas/util/HttpUtils.java | 52.05% <0%> (-1.37%) | 19% <0%> (-1%) | |\n| ...cas/authentication/principal/ClientCredential.java | 100% <0%> (\u00f8) | 3% <0%> (\u00f8) | :arrow_down: |\n| ...n/handler/support/ClientAuthenticationHandler.java | 76.19% <0%> (\u00f8) | 3% <0%> (\u00f8) | :arrow_down: |\n| ...ava/org/apereo/cas/support/sms/NexmoSmsSender.java | 0% <0%> (\u00f8) | 0% <0%> (\u00f8) | :arrow_down: |\n| ...ain/java/org/apereo/cas/MongoDbPropertySource.java | 0% <0%> (\u00f8) | 0% <0%> (\u00f8) | :arrow_down: |\n| ... and 153 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb18e75...321f306. Read the comment docs.\n. # Codecov Report\nMerging #3630 into master will decrease coverage by 10.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3630       +/-\n=============================================\n- Coverage      58.5%   48.46%   -10.04%   \n+ Complexity     5732     4929      -803   \n=============================================\n  Files          1431     1431             \n  Lines         30302    30302             \n  Branches       2815     2815             \n=============================================\n- Hits          17728    14687     -3041   \n- Misses        10858    14233     +3375   \n+ Partials       1716     1382      -334\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...claims/OidcProfileScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../apereo/cas/cassandra/CassandraSessionFactory.java | 0% <0%> (-100%) | 0% <0%> (\u00f8) | |\n| ...org/apereo/cas/audit/MongoDbAuditTrailManager.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...as/oidc/discovery/OidcServerDiscoverySettings.java | 0% <0%> (-100%) | 0% <0%> (-9%) | |\n| ...c/claims/OidcEmailScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ml/idp/metadata/MongoDbSamlIdPMetadataLocator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 145 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d57de5d...db899e2. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@f27d4a2). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3641   +/-\n========================================\n  Coverage          ?   8.75%         \n  Complexity        ?    1074         \n========================================\n  Files             ?    1438         \n  Lines             ?   30548         \n  Branches          ?    2836         \n========================================\n  Hits              ?    2675         \n  Misses            ?   27616         \n  Partials          ?     257\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f27d4a2...9feb1d4. Read the comment docs.\n. # Codecov Report\nMerging #3645 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3645      +/-\n============================================\n- Coverage     60.67%   60.63%   -0.04%   \n+ Complexity     6014     6011       -3   \n============================================\n  Files          1438     1438            \n  Lines         30552    30552            \n  Branches       2838     2838            \n============================================\n- Hits          18537    18525      -12   \n- Misses        10225    10237      +12   \n  Partials       1790     1790\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...tion/api/MultifactorAuthenticationTrustRecord.java | 100% <\u00f8> (\u00f8) | 3 <0> (\u00f8) | :arrow_down: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (-3.95%) | 15% <0%> (\u00f8) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3eda80d...e125985. Read the comment docs.\n. # Codecov Report\nMerging #3646 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3646      +/-\n============================================\n- Coverage     60.67%   60.66%   -0.01%   \n+ Complexity     6014     6013       -1   \n============================================\n  Files          1438     1438            \n  Lines         30552    30552            \n  Branches       2838     2838            \n============================================\n- Hits          18537    18535       -2   \n- Misses        10225    10227       +2   \n  Partials       1790     1790\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...src/main/java/org/apereo/cas/util/RandomUtils.java | 82.35% <100%> (\u00f8) | 4 <1> (\u00f8) | :arrow_down: |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3eda80d...d639484. Read the comment docs.\n. # Codecov Report\nMerging #3647 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3647      +/-\n============================================\n- Coverage     48.96%   48.95%   -0.01%   \n+ Complexity     5046     5045       -1   \n============================================\n  Files          1439     1439            \n  Lines         30586    30586            \n  Branches       2843     2843            \n============================================\n- Hits          14976    14974       -2   \n- Misses        14203    14205       +2   \n  Partials       1407     1407\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0761951...78bf05e. Read the comment docs.\n. # Codecov Report\nMerging #3649 into master will increase coverage by 10.44%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3649       +/-\n=============================================\n+ Coverage      48.9%   59.34%   +10.44%   \n- Complexity     5040     5913      +873   \n=============================================\n  Files          1439     1439             \n  Lines         30586    30587        +1   \n  Branches       2843     2843             \n=============================================\n+ Hits          14959    18153     +3194   \n+ Misses        14224    10661     -3563   \n- Partials       1403     1773      +370\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...va/org/apereo/cas/configuration/support/Beans.java | 71.42% <100%> (+16.42%) | 5 <1> (+1) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 79.62% <0%> (+1.85%) | 13% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 70.37% <0%> (+3.7%) | 19% <0%> (+2%) | :arrow_up: |\n| ...g/apereo/cas/services/AbstractServicesManager.java | 73.5% <0%> (+5.12%) | 31% <0%> (+1%) | :arrow_up: |\n| ...pal/ShibbolethCompatiblePersistentIdGenerator.java | 76.31% <0%> (+5.26%) | 10% <0%> (+1%) | :arrow_up: |\n| ... and 179 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77df6d6...8bf0697. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@091afac). Click here to learn what that means.\nThe diff coverage is 94.11%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3650   +/-\n=========================================\n  Coverage          ?   59.13%         \n  Complexity        ?     5897         \n=========================================\n  Files             ?     1439         \n  Lines             ?    30599         \n  Branches          ?     2845         \n=========================================\n  Hits              ?    18094         \n  Misses            ?    10736         \n  Partials          ?     1769\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/rest/resources/ServiceTicketResource.java | 83.87% <94.11%> (\u00f8) | 4 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 091afac...1d7746b. Read the comment docs.\n. # Codecov Report\nMerging #3652 into master will increase coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3652      +/-\n============================================\n+ Coverage      60.8%   60.86%   +0.05%   \n- Complexity     6069     6080      +11   \n============================================\n  Files          1447     1447            \n  Lines         30726    30733       +7   \n  Branches       2853     2854       +1   \n============================================\n+ Hits          18683    18705      +22   \n+ Misses        10245    10228      -17   \n- Partials       1798     1800       +2\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/services/CouchDbServiceRegistry.java | 62.79% <\u00f8> (+2.32%) | 10 <0> (+1) | :arrow_up: |\n| ...as/adaptors/ldap/services/LdapServiceRegistry.java | 67.05% <100%> (+3.64%) | 16 <0> (+1) | :arrow_up: |\n| ...b/services/RegisteredServiceCouchDbRepository.java | 65.38% <100%> (+15.38%) | 8 <0> (+2) | :arrow_up: |\n| ...eo/cas/support/geo/AbstractGeoLocationService.java | 14.7% <0%> (-41.18%) | 3% <0%> (\u00f8) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...i/src/main/java/org/apereo/cas/util/HttpUtils.java | 49.42% <0%> (-1.15%) | 22% <0%> (-1%) | |\n| .../apereo/cas/services/CouchbaseServiceRegistry.java | 73.68% <0%> (+1.75%) | 11% <0%> (+1%) | :arrow_up: |\n| .../adaptors/redis/services/RedisServiceRegistry.java | 55.88% <0%> (+2.94%) | 10% <0%> (+1%) | :arrow_up: |\n| ...rg/apereo/cas/services/MongoDbServiceRegistry.java | 66.66% <0%> (+5.55%) | 7% <0%> (+1%) | :arrow_up: |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5f17b5...1285146. Read the comment docs.\n. # Codecov Report\nMerging #3653 into master will increase coverage by 10.37%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3653       +/-\n=============================================\n+ Coverage     50.47%   60.85%   +10.37%   \n- Complexity     5236     6075      +839   \n=============================================\n  Files          1447     1447             \n  Lines         30726    30726             \n  Branches       2853     2853             \n=============================================\n+ Hits          15509    18697     +3188   \n+ Misses        13768    10226     -3542   \n- Partials       1449     1803      +354\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...pport/geo/google/GoogleMapsGeoLocationService.java | 5.26% <0%> (-36.85%) | 1% <0%> (-1%) | |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+0.93%) | 35% <0%> (+1%) | :arrow_up: |\n| ...i/src/main/java/org/apereo/cas/util/HttpUtils.java | 50.57% <0%> (+1.14%) | 23% <0%> (+1%) | :arrow_up: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 72.72% <0%> (+3.03%) | 9% <0%> (+1%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 70.37% <0%> (+3.7%) | 19% <0%> (+2%) | :arrow_up: |\n| ...g/apereo/cas/services/AbstractServicesManager.java | 73.5% <0%> (+5.12%) | 31% <0%> (+1%) | :arrow_up: |\n| ... and 156 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3579e11...37b709e. Read the comment docs.\n. # Codecov Report\nMerging #3656 into master will increase coverage by 0.07%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3656      +/-\n============================================\n+ Coverage     60.79%   60.87%   +0.07%   \n- Complexity     6068     6076       +8   \n============================================\n  Files          1447     1447            \n  Lines         30726    30726            \n  Branches       2853     2853            \n============================================\n+ Hits          18681    18704      +23   \n+ Misses        10246    10217      -29   \n- Partials       1799     1805       +6\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (+1.31%) | 15% <0%> (+1%) | :arrow_up: |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 72.72% <0%> (+3.03%) | 9% <0%> (+1%) | :arrow_up: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 66.66% <0%> (+31.48%) | 9% <0%> (+4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df6fd23...b53a3bb. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c81ff0e). Click here to learn what that means.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3660   +/-\n=========================================\n  Coverage          ?   60.57%         \n  Complexity        ?     6054         \n=========================================\n  Files             ?     1447         \n  Lines             ?    30732         \n  Branches          ?     2853         \n=========================================\n  Hits              ?    18616         \n  Misses            ?    10322         \n  Partials          ?     1794\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ort/rest/resources/UserAuthenticationResource.java | 72.22% <100%> (\u00f8) | 3 <0> (?) | |\n| ...t/rest/resources/TicketGrantingTicketResource.java | 95.23% <100%> (\u00f8) | 6 <0> (?) | |\n| .../support/rest/resources/ServiceTicketResource.java | 83.87% <100%> (\u00f8) | 4 <0> (?) | |\n| .../cas/support/rest/resources/RestResourceUtils.java | 80.76% <71.42%> (\u00f8) | 4 <1> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c81ff0e...c218c5b. Read the comment docs.\n. # Codecov Report\nMerging #3663 into master will decrease coverage by 11.97%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3663       +/-\n=============================================\n- Coverage     60.79%   48.82%   -11.98%   \n+ Complexity     6068     5058     -1010   \n=============================================\n  Files          1447     1447             \n  Lines         30726    30726             \n  Branches       2853     2853             \n=============================================\n- Hits          18681    15002     -3679   \n- Misses        10246    14321     +4075   \n+ Partials       1799     1403      -396\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| .../cas/couchdb/u2f/CouchDbU2FDeviceRegistration.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 208 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df6fd23...9b43694. Read the comment docs.\n. # Codecov Report\nMerging #3665 into master will decrease coverage by 1.5%.\nThe diff coverage is 40%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3665      +/-\n===========================================\n- Coverage      60.8%   59.3%   -1.51%   \n+ Complexity     6069    5916     -153   \n===========================================\n  Files          1447    1447            \n  Lines         30726   30743      +17   \n  Branches       2853    2858       +5   \n===========================================\n- Hits          18683   18232     -451   \n- Misses        10245   10747     +502   \n+ Partials       1798    1764      -34\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...steredServiceResponseHeadersEnforcementFilter.java | 80.48% <40%> (-13.07%) | 16 <3> (+1) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../cas/couchdb/u2f/CouchDbU2FDeviceRegistration.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...db/saml/SamlMetadataDocumentCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...rrogate/SurrogateCouchDbAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| ...ml/idp/metadata/CouchDbSamlIdPMetadataLocator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 57 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e5f17b5...a691f85. Read the comment docs.\n. # Codecov Report\nMerging #3669 into master will increase coverage by 17.18%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3669       +/-\n=============================================\n+ Coverage     31.63%   48.81%   +17.18%   \n- Complexity     2460     5066     +2606   \n=============================================\n  Files          1139     1447      +308   \n  Lines         23971    30752     +6781   \n  Branches       2161     2856      +695   \n=============================================\n+ Hits           7583    15012     +7429   \n+ Misses        15595    14335     -1260   \n- Partials        793     1405      +612\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| .../cas/couchdb/u2f/CouchDbU2FDeviceRegistration.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 1070 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 195d9c9...a55248a. Read the comment docs.\n. # Codecov Report\nMerging #3671 into master will increase coverage by 12.03%.\nThe diff coverage is 44.73%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3671       +/-\n============================================\n+ Coverage     48.87%   60.9%   +12.03%   \n- Complexity     5073    6093     +1020   \n============================================\n  Files          1447    1448        +1   \n  Lines         30752   30770       +18   \n  Branches       2856    2857        +1   \n============================================\n+ Hits          15030   18741     +3711   \n+ Misses        14314   10222     -4092   \n- Partials       1408    1807      +399\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...t/pac4j/authentication/DelegatedClientFactory.java | 78.39% <100%> (+0.15%) | 48 <0> (\u00f8) | :arrow_down: |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <20%> (\u00f8) | 1 <1> (?) | |\n| .../web/flow/DelegatedClientAuthenticationAction.java | 61.01% <45.16%> (-2.84%) | 20 <2> (\u00f8) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 79.62% <0%> (+1.85%) | 13% <0%> (\u00f8) | :arrow_down: |\n| ... and 211 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f30fba4...f0cb2c9. Read the comment docs.\n. # Codecov Report\nMerging #3672 into master will increase coverage by 11.99%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3672       +/-\n=============================================\n+ Coverage     48.87%   60.86%   +11.99%   \n- Complexity     5073     6086     +1013   \n=============================================\n  Files          1447     1447             \n  Lines         30752    30752             \n  Branches       2856     2856             \n=============================================\n+ Hits          15030    18718     +3688   \n+ Misses        14314    10232     -4082   \n- Partials       1408     1802      +394\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 35.18% <0%> (-31.49%) | 5% <0%> (-6%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 79.62% <0%> (+1.85%) | 13% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 70.37% <0%> (+3.7%) | 19% <0%> (+2%) | :arrow_up: |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 4.76% <0%> (+4.76%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 207 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f30fba4...63c009d. Read the comment docs.\n. # Codecov Report\nMerging #3673 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3673   +/-\n=========================================\n  Coverage     60.92%   60.92%         \n  Complexity     6091     6091         \n=========================================\n  Files          1447     1447         \n  Lines         30752    30752         \n  Branches       2856     2856         \n=========================================\n  Hits          18737    18737         \n  Misses        10207    10207         \n  Partials       1808     1808\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fe674c4...b5ad3c7. Read the comment docs.\n. # Codecov Report\nMerging #3674 into master will decrease coverage by 12.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3674       +/-\n============================================\n- Coverage     60.85%   48.8%   -12.06%   \n+ Complexity     6088    5067     -1021   \n============================================\n  Files          1448    1448             \n  Lines         30770   30770             \n  Branches       2857    2857             \n============================================\n- Hits          18724   15016     -3708   \n- Misses        10244   14349     +4105   \n+ Partials       1802    1405      -397\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| .../cas/couchdb/u2f/CouchDbU2FDeviceRegistration.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 206 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f8b7959...75ee9e0. Read the comment docs.\n. # Codecov Report\nMerging #3677 into master will increase coverage by 11.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3677       +/-\n=============================================\n+ Coverage      48.8%   60.62%   +11.81%   \n- Complexity     5080     6087     +1007   \n=============================================\n  Files          1448     1448             \n  Lines         30839    30839             \n  Branches       2864     2864             \n=============================================\n+ Hits          15052    18696     +3644   \n+ Misses        14382    10346     -4036   \n- Partials       1405     1797      +392\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 72.5% <0%> (+0.5%) | 80% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 70.37% <0%> (+3.7%) | 19% <0%> (+2%) | :arrow_up: |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 4.76% <0%> (+4.76%) | 1% <0%> (+1%) | :arrow_up: |\n| ...g/apereo/cas/services/AbstractServicesManager.java | 73.5% <0%> (+5.12%) | 31% <0%> (+1%) | :arrow_up: |\n| ... and 202 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39ecd90...f7b18b6. Read the comment docs.\n. # Codecov Report\nMerging #3683 into master will decrease coverage by 28.82%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3683       +/-\n=============================================\n- Coverage        61%   32.17%   -28.83%   \n+ Complexity     6132     2526     -3606   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24134     -6766   \n  Branches       2867     2179      -688   \n=============================================\n- Hits          18849     7766    -11083   \n- Misses        10245    15536     +5291   \n+ Partials       1806      832      -974\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...on/loader/GroovyConfigurationPropertiesLoader.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 890 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 10d3fd8...9d96e58. Read the comment docs.\n. # Codecov Report\nMerging #3683 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3683      +/-\n============================================\n- Coverage        61%   60.98%   -0.02%   \n+ Complexity     6132     6130       -2   \n============================================\n  Files          1451     1451            \n  Lines         30900    30900            \n  Branches       2867     2867            \n============================================\n- Hits          18849    18845       -4   \n- Misses        10245    10247       +2   \n- Partials       1806     1808       +2\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../cas/ticket/registry/InfinispanTicketRegistry.java | 92.85% <0%> (-7.15%) | 9% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 15.38% <0%> (+15.38%) | 1% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 10d3fd8...9d96e58. Read the comment docs.\n. # Codecov Report\nMerging #3685 into master will decrease coverage by 54.43%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3685       +/-\n============================================\n- Coverage        61%   6.56%   -54.44%   \n+ Complexity     6133     627     -5506   \n============================================\n  Files          1451    1141      -310   \n  Lines         30900   24134     -6766   \n  Branches       2867    2179      -688   \n============================================\n- Hits          18849    1585    -17264   \n- Misses        10246   22380    +12134   \n+ Partials       1805     169     -1636\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...onfigurer/plan/DefaultCasWebflowExecutionPlan.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...n/java/org/apereo/cas/ticket/ExpirationPolicy.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...cipher/WebflowConversationStateCipherExecutor.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ... and 1212 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6489a88...593b4bf. Read the comment docs.\n. # Codecov Report\nMerging #3685 into master will increase coverage by 0.05%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3685      +/-\n============================================\n+ Coverage        61%   61.05%   +0.05%   \n- Complexity     6133     6138       +5   \n============================================\n  Files          1451     1451            \n  Lines         30900    30900            \n  Branches       2867     2867            \n============================================\n+ Hits          18849    18865      +16   \n+ Misses        10246    10227      -19   \n- Partials       1805     1808       +3\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 66.66% <0%> (+31.48%) | 11% <0%> (+6%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6489a88...17888aa. Read the comment docs.\n. # Codecov Report\nMerging #3686 into master will decrease coverage by 0.79%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster   #3686     +/-\n==========================================\n- Coverage        61%   60.2%   -0.8%   \n+ Complexity     6133    6063     -70   \n==========================================\n  Files          1451    1451           \n  Lines         30900   30911     +11   \n  Branches       2867    2869      +2   \n==========================================\n- Hits          18849   18610    -239   \n- Misses        10246   10511    +265   \n+ Partials       1805    1790     -15\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/adaptors/rest/RestAuthenticationHandler.java | 0% <0%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rvices/CouchbaseRegisteredServiceDeletedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...g/apereo/cas/audit/CouchbaseAuditTrailManager.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| ...persondir/support/CouchbasePersonAttributeDao.java | 0% <0%> (-75.87%) | 0% <0%> (-10%) | |\n| .../apereo/cas/services/CouchbaseServiceRegistry.java | 0% <0%> (-75.41%) | 0% <0%> (-12%) | |\n| ...o/cas/ticket/registry/CouchbaseTicketRegistry.java | 0% <0%> (-71.77%) | 0% <0%> (-16%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 0% <0%> (-71.06%) | 0% <0%> (-15%) | |\n| ...authentication/CouchbaseAuthenticationHandler.java | 0% <0%> (-48.15%) | 0% <0%> (-6%) | |\n| ...DefaultPersonDirectoryAttributeRepositoryPlan.java | 50% <0%> (-37.5%) | 3% <0%> (-1%) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...b3d5edc. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@5617542). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3686   +/-\n=========================================\n  Coverage          ?   60.87%         \n  Complexity        ?     6127         \n=========================================\n  Files             ?     1452         \n  Lines             ?    30957         \n  Branches          ?     2881         \n=========================================\n  Hits              ?    18846         \n  Misses            ?    10297         \n  Partials          ?     1814\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/adaptors/rest/RestAuthenticationHandler.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5617542...09654b0. Read the comment docs.\n. # Codecov Report\nMerging #3686 into master will decrease coverage by 0.79%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster   #3686     +/-\n==========================================\n- Coverage        61%   60.2%   -0.8%   \n+ Complexity     6133    6063     -70   \n==========================================\n  Files          1451    1451           \n  Lines         30900   30911     +11   \n  Branches       2867    2869      +2   \n==========================================\n- Hits          18849   18610    -239   \n- Misses        10246   10511    +265   \n+ Partials       1805    1790     -15\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/adaptors/rest/RestAuthenticationHandler.java | 0% <0%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rvices/CouchbaseRegisteredServiceDeletedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...g/apereo/cas/audit/CouchbaseAuditTrailManager.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| ...persondir/support/CouchbasePersonAttributeDao.java | 0% <0%> (-75.87%) | 0% <0%> (-10%) | |\n| .../apereo/cas/services/CouchbaseServiceRegistry.java | 0% <0%> (-75.41%) | 0% <0%> (-12%) | |\n| ...o/cas/ticket/registry/CouchbaseTicketRegistry.java | 0% <0%> (-71.77%) | 0% <0%> (-16%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 0% <0%> (-71.06%) | 0% <0%> (-15%) | |\n| ...authentication/CouchbaseAuthenticationHandler.java | 0% <0%> (-48.15%) | 0% <0%> (-6%) | |\n| ...DefaultPersonDirectoryAttributeRepositoryPlan.java | 50% <0%> (-37.5%) | 3% <0%> (-1%) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...b3d5edc. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@5617542). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3686   +/-\n=========================================\n  Coverage          ?   60.87%         \n  Complexity        ?     6127         \n=========================================\n  Files             ?     1452         \n  Lines             ?    30957         \n  Branches          ?     2881         \n=========================================\n  Hits              ?    18846         \n  Misses            ?    10297         \n  Partials          ?     1814\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/adaptors/rest/RestAuthenticationHandler.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5617542...09654b0. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@5617542). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3687   +/-\n=========================================\n  Coverage          ?   59.48%         \n  Complexity        ?     5967         \n=========================================\n  Files             ?     1451         \n  Lines             ?    30900         \n  Branches          ?     2867         \n=========================================\n  Hits              ?    18380         \n  Misses            ?    10748         \n  Partials          ?     1772\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5617542...a714dc4. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@5617542). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3687   +/-\n=========================================\n  Coverage          ?   59.48%         \n  Complexity        ?     5967         \n=========================================\n  Files             ?     1451         \n  Lines             ?    30900         \n  Branches          ?     2867         \n=========================================\n  Hits              ?    18380         \n  Misses            ?    10748         \n  Partials          ?     1772\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5617542...a714dc4. Read the comment docs.\n. # Codecov Report\nMerging #3689 into master will decrease coverage by 35.86%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3689       +/-\n=============================================\n- Coverage        61%   25.13%   -35.87%   \n+ Complexity     6133     2026     -4107   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24138     -6762   \n  Branches       2867     2181      -686   \n=============================================\n- Hits          18849     6066    -12783   \n- Misses        10246    17466     +7220   \n+ Partials       1805      606     -1199\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...apereo/cas/util/cipher/AbstractCipherExecutor.java | 21.05% <\u00f8> (-68.95%) | 5 <0> (-9) | |\n| ...c/main/java/org/apereo/cas/util/EncodingUtils.java | 51.48% <14.28%> (-22.75%) | 16 <0> (-13) | |\n| ...ereo/cas/util/cipher/BaseBinaryCipherExecutor.java | 64.28% <20%> (-28.31%) | 7 <0> (-4) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...apereo/cas/ticket/BaseIdTokenGeneratorService.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 979 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...29911ad. Read the comment docs.\n. # Codecov Report\nMerging #3689 into master will decrease coverage by 35.86%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3689       +/-\n=============================================\n- Coverage        61%   25.13%   -35.87%   \n+ Complexity     6133     2026     -4107   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24138     -6762   \n  Branches       2867     2181      -686   \n=============================================\n- Hits          18849     6066    -12783   \n- Misses        10246    17466     +7220   \n+ Partials       1805      606     -1199\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...apereo/cas/util/cipher/AbstractCipherExecutor.java | 21.05% <\u00f8> (-68.95%) | 5 <0> (-9) | |\n| ...c/main/java/org/apereo/cas/util/EncodingUtils.java | 51.48% <14.28%> (-22.75%) | 16 <0> (-13) | |\n| ...ereo/cas/util/cipher/BaseBinaryCipherExecutor.java | 64.28% <20%> (-28.31%) | 7 <0> (-4) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...apereo/cas/ticket/BaseIdTokenGeneratorService.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 979 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...29911ad. Read the comment docs.\n. # Codecov Report\nMerging #3692 into master will decrease coverage by 37.9%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3692       +/-\n=============================================\n- Coverage        61%   23.09%   -37.91%   \n+ Complexity     6133     1854     -4279   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24122     -6778   \n  Branches       2867     2177      -690   \n=============================================\n- Hits          18849     5570    -13279   \n- Misses        10246    17987     +7741   \n+ Partials       1805      565     -1240\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ication/credential/UsernamePasswordCredential.java | 29.41% <\u00f8> (+12.17%) | 2 <0> (\u00f8) | :arrow_down: |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...apereo/cas/ticket/BaseIdTokenGeneratorService.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 1025 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...993e5ee. Read the comment docs.\n. # Codecov Report\nMerging #3692 into master will decrease coverage by 37.9%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3692       +/-\n=============================================\n- Coverage        61%   23.09%   -37.91%   \n+ Complexity     6133     1854     -4279   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24122     -6778   \n  Branches       2867     2177      -690   \n=============================================\n- Hits          18849     5570    -13279   \n- Misses        10246    17987     +7741   \n+ Partials       1805      565     -1240\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ication/credential/UsernamePasswordCredential.java | 29.41% <\u00f8> (+12.17%) | 2 <0> (\u00f8) | :arrow_down: |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...apereo/cas/ticket/BaseIdTokenGeneratorService.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 1025 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...993e5ee. Read the comment docs.\n. # Codecov Report\nMerging #3692 into master will decrease coverage by 37.9%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3692       +/-\n=============================================\n- Coverage        61%   23.09%   -37.91%   \n+ Complexity     6133     1854     -4279   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24122     -6778   \n  Branches       2867     2177      -690   \n=============================================\n- Hits          18849     5570    -13279   \n- Misses        10246    17987     +7741   \n+ Partials       1805      565     -1240\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ication/credential/UsernamePasswordCredential.java | 29.41% <\u00f8> (+12.17%) | 2 <0> (\u00f8) | :arrow_down: |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...apereo/cas/ticket/BaseIdTokenGeneratorService.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 1025 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...993e5ee. Read the comment docs.\n. # Codecov Report\nMerging #3692 into master will decrease coverage by 37.9%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3692       +/-\n=============================================\n- Coverage        61%   23.09%   -37.91%   \n+ Complexity     6133     1854     -4279   \n=============================================\n  Files          1451     1141      -310   \n  Lines         30900    24122     -6778   \n  Branches       2867     2177      -690   \n=============================================\n- Hits          18849     5570    -13279   \n- Misses        10246    17987     +7741   \n+ Partials       1805      565     -1240\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ication/credential/UsernamePasswordCredential.java | 29.41% <\u00f8> (+12.17%) | 2 <0> (\u00f8) | :arrow_down: |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...apereo/cas/ticket/BaseIdTokenGeneratorService.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 1025 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8a9ae0d...993e5ee. Read the comment docs.\n. # Codecov Report\nMerging #3694 into master will decrease coverage by 13.74%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3694       +/-\n=============================================\n- Coverage     32.07%   18.32%   -13.75%   \n+ Complexity     2517     1513     -1004   \n=============================================\n  Files          1141     1141             \n  Lines         24125    24125             \n  Branches       2180     2180             \n=============================================\n- Hits           7738     4421     -3317   \n- Misses        15558    19209     +3651   \n+ Partials        829      495      -334\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...n/java/org/apereo/cas/ticket/ExpirationPolicy.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...t/saml/idp/metadata/JpaSamlIdPMetadataLocator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...bstractInspektrAuditHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...rvices/CouchbaseRegisteredServiceDeletedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/yubikey/YubiKeyAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...uchdb/surrogate/CouchDbSurrogateAuthorization.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...uthenticationRegistrationRecordCipherExecutor.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...as/couchdb/services/RegisteredServiceDocument.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 248 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 807026f...34f3729. Read the comment docs.\n. # Codecov Report\nMerging #3694 into master will decrease coverage by 13.74%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3694       +/-\n=============================================\n- Coverage     32.07%   18.32%   -13.75%   \n+ Complexity     2517     1513     -1004   \n=============================================\n  Files          1141     1141             \n  Lines         24125    24125             \n  Branches       2180     2180             \n=============================================\n- Hits           7738     4421     -3317   \n- Misses        15558    19209     +3651   \n+ Partials        829      495      -334\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...n/java/org/apereo/cas/ticket/ExpirationPolicy.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...t/saml/idp/metadata/JpaSamlIdPMetadataLocator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...bstractInspektrAuditHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...rvices/CouchbaseRegisteredServiceDeletedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/yubikey/YubiKeyAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...uchdb/surrogate/CouchDbSurrogateAuthorization.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...uthenticationRegistrationRecordCipherExecutor.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...as/couchdb/services/RegisteredServiceDocument.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 248 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 807026f...34f3729. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@0115ac5). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3697   +/-\n=========================================\n  Coverage          ?   32.08%         \n  Complexity        ?     2518         \n=========================================\n  Files             ?     1141         \n  Lines             ?    24125         \n  Branches          ?     2180         \n=========================================\n  Hits              ?     7741         \n  Misses            ?    15555         \n  Partials          ?      829\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0115ac5...e2e7313. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@0115ac5). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3697   +/-\n=========================================\n  Coverage          ?   29.44%         \n  Complexity        ?     2332         \n=========================================\n  Files             ?     1141         \n  Lines             ?    24125         \n  Branches          ?     2180         \n=========================================\n  Hits              ?     7103         \n  Misses            ?    16239         \n  Partials          ?      783\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0115ac5...e2d5a73. Read the comment docs.\n. # Codecov Report\nMerging #3698 into master will decrease coverage by 1.89%.\nThe diff coverage is 58.33%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #3698     +/-\n===========================================\n- Coverage     61.98%   60.09%   -1.9%   \n+ Complexity     6210     6074    -136   \n===========================================\n  Files          1452     1452           \n  Lines         30946    30952      +6   \n  Branches       2879     2879           \n===========================================\n- Hits          19183    18601    -582   \n- Misses         9905    10544    +639   \n+ Partials       1858     1807     -51\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/services/CouchDbServiceRegistry.java | 65.38% <58.33%> (+0.16%) | 12 <3> (+1) | :arrow_up: |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...et/registry/DynamoDbTicketRegistryFacilitator.java | 0% <0%> (-94.24%) | 0% <0%> (-16%) | |\n| ...eo/cas/ticket/registry/DynamoDbTicketRegistry.java | 0% <0%> (-92.86%) | 0% <0%> (-10%) | |\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-91.67%) | 0% <0%> (-7%) | |\n| ...b/flow/decorator/RestfulLoginWebflowDecorator.java | 0% <0%> (-91.67%) | 0% <0%> (-2%) | |\n| ...s/services/DynamoDbServiceRegistryFacilitator.java | 0% <0%> (-90%) | 0% <0%> (-13%) | |\n| ...ereo/cas/dynamodb/AmazonDynamoDbClientFactory.java | 0% <0%> (-81.49%) | 0% <0%> (-4%) | |\n| ...impl/token/RestfulPasswordlessTokenRepository.java | 0% <0%> (-78.73%) | 0% <0%> (-6%) | |\n| ...o/cas/aup/RestAcceptableUsagePolicyRepository.java | 0% <0%> (-78.58%) | 0% <0%> (-3%) | |\n| ... and 33 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86c4e26...4bf280e. Read the comment docs.\n. # Codecov Report\nMerging #3698 into master will decrease coverage by 1.89%.\nThe diff coverage is 58.33%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #3698     +/-\n===========================================\n- Coverage     61.98%   60.09%   -1.9%   \n+ Complexity     6210     6074    -136   \n===========================================\n  Files          1452     1452           \n  Lines         30946    30952      +6   \n  Branches       2879     2879           \n===========================================\n- Hits          19183    18601    -582   \n- Misses         9905    10544    +639   \n+ Partials       1858     1807     -51\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/services/CouchDbServiceRegistry.java | 65.38% <58.33%> (+0.16%) | 12 <3> (+1) | :arrow_up: |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...et/registry/DynamoDbTicketRegistryFacilitator.java | 0% <0%> (-94.24%) | 0% <0%> (-16%) | |\n| ...eo/cas/ticket/registry/DynamoDbTicketRegistry.java | 0% <0%> (-92.86%) | 0% <0%> (-10%) | |\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-91.67%) | 0% <0%> (-7%) | |\n| ...b/flow/decorator/RestfulLoginWebflowDecorator.java | 0% <0%> (-91.67%) | 0% <0%> (-2%) | |\n| ...s/services/DynamoDbServiceRegistryFacilitator.java | 0% <0%> (-90%) | 0% <0%> (-13%) | |\n| ...ereo/cas/dynamodb/AmazonDynamoDbClientFactory.java | 0% <0%> (-81.49%) | 0% <0%> (-4%) | |\n| ...impl/token/RestfulPasswordlessTokenRepository.java | 0% <0%> (-78.73%) | 0% <0%> (-6%) | |\n| ...o/cas/aup/RestAcceptableUsagePolicyRepository.java | 0% <0%> (-78.58%) | 0% <0%> (-3%) | |\n| ... and 33 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86c4e26...4bf280e. Read the comment docs.\n. # Codecov Report\nMerging #3702 into master will decrease coverage by 12.98%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3702       +/-\n============================================\n- Coverage     61.98%     49%   -12.99%   \n+ Complexity     6210    5116     -1094   \n============================================\n  Files          1452    1452             \n  Lines         30946   30946             \n  Branches       2879    2879             \n============================================\n- Hits          19183   15166     -4017   \n- Misses         9905   14355     +4450   \n+ Partials       1858    1425      -433\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 230 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86c4e26...e7faa3a. Read the comment docs.\n. # Codecov Report\nMerging #3702 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3702      +/-\n============================================\n- Coverage     61.98%   61.97%   -0.02%   \n+ Complexity     6210     6206       -4   \n============================================\n  Files          1452     1452            \n  Lines         30946    30946            \n  Branches       2879     2879            \n============================================\n- Hits          19183    19178       -5   \n- Misses         9905     9907       +2   \n- Partials       1858     1861       +3\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| .../cas/ticket/registry/InfinispanTicketRegistry.java | 92.85% <0%> (-7.15%) | 9% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 62.96% <0%> (-3.71%) | 7% <0%> (-3%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 86c4e26...e7faa3a. Read the comment docs.\n. # Codecov Report\nMerging #3703 into master will decrease coverage by 12.11%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3703       +/-\n=============================================\n- Coverage      61.1%   48.98%   -12.12%   \n+ Complexity     6150     5113     -1037   \n=============================================\n  Files          1452     1452             \n  Lines         30952    30952             \n  Branches       2879     2879             \n=============================================\n- Hits          18913    15162     -3751   \n- Misses        10190    14365     +4175   \n+ Partials       1849     1425      -424\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...b/gauth/credential/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 223 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fbf0f05...d4ea4e3. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c206b00). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3703   +/-\n=========================================\n  Coverage          ?   48.99%         \n  Complexity        ?     5113         \n=========================================\n  Files             ?     1452         \n  Lines             ?    30952         \n  Branches          ?     2879         \n=========================================\n  Hits              ?    15164         \n  Misses            ?    14362         \n  Partials          ?     1426\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c206b00...4722249. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@23e778b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3704   +/-\n=========================================\n  Coverage          ?   51.93%         \n  Complexity        ?     5343         \n=========================================\n  Files             ?     1452         \n  Lines             ?    30936         \n  Branches          ?     2877         \n=========================================\n  Hits              ?    16067         \n  Misses            ?    13373         \n  Partials          ?     1496\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 23e778b...fefa60f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@23e778b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3704   +/-\n=========================================\n  Coverage          ?   51.93%         \n  Complexity        ?     5343         \n=========================================\n  Files             ?     1452         \n  Lines             ?    30936         \n  Branches          ?     2877         \n=========================================\n  Hits              ?    16067         \n  Misses            ?    13373         \n  Partials          ?     1496\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 23e778b...fefa60f. Read the comment docs.\n. # Codecov Report\nMerging #3706 into master will decrease coverage by 26.27%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3706       +/-\n=============================================\n- Coverage     60.04%   33.76%   -26.28%   \n+ Complexity     6015     2640     -3375   \n=============================================\n  Files          1452     1142      -310   \n  Lines         30937    24173     -6764   \n  Branches       2877     2189      -688   \n=============================================\n- Hits          18575     8163    -10412   \n- Misses        10559    15127     +4568   \n+ Partials       1803      883      -920\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...on/loader/GroovyConfigurationPropertiesLoader.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ... and 943 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9ffe756...9da7156. Read the comment docs.\n. # Codecov Report\nMerging #3707 into master will decrease coverage by 28.24%.\nThe diff coverage is 25%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3707       +/-\n=============================================\n- Coverage     61.99%   33.74%   -28.25%   \n+ Complexity     6215     2637     -3578   \n=============================================\n  Files          1452     1142      -310   \n  Lines         30939    24173     -6766   \n  Branches       2878     2189      -689   \n=============================================\n- Hits          19181     8158    -11023   \n- Misses         9900    15133     +5233   \n+ Partials       1858      882      -976\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ultifactorPolicyDeserializationProblemHandler.java | 28.57% <0%> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...ctions/MultifactorAuthenticationFailureAction.java | 6.25% <0%> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| ...s/services/RegisteredServiceMultifactorPolicy.java | 100% <100%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 889 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 776a6ba...84a0cfe. Read the comment docs.\n. # Codecov Report\nMerging #3707 into master will decrease coverage by 28.24%.\nThe diff coverage is 25%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3707       +/-\n=============================================\n- Coverage     61.99%   33.74%   -28.25%   \n+ Complexity     6215     2637     -3578   \n=============================================\n  Files          1452     1142      -310   \n  Lines         30939    24173     -6766   \n  Branches       2878     2189      -689   \n=============================================\n- Hits          19181     8158    -11023   \n- Misses         9900    15133     +5233   \n+ Partials       1858      882      -976\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ultifactorPolicyDeserializationProblemHandler.java | 28.57% <0%> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...ctions/MultifactorAuthenticationFailureAction.java | 6.25% <0%> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| ...s/services/RegisteredServiceMultifactorPolicy.java | 100% <100%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 889 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5ec7c4...0a22dc6. Read the comment docs.\n. # Codecov Report\nMerging #3708 into master will decrease coverage by 47.74%.\nThe diff coverage is 0%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3708       +/-\n=============================================\n- Coverage     61.99%   14.24%   -47.75%   \n+ Complexity     6215     1205     -5010   \n=============================================\n  Files          1452     1141      -311   \n  Lines         30939    24141     -6798   \n  Branches       2878     2187      -691   \n=============================================\n- Hits          19181     3440    -15741   \n- Misses         9900    20408    +10508   \n+ Partials       1858      293     -1565\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...apereo/cas/services/web/ThemeTemplateResolver.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...onfigurer/plan/DefaultCasWebflowExecutionPlan.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...n/java/org/apereo/cas/ticket/ExpirationPolicy.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ... and 1141 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 776a6ba...795eda1. Read the comment docs.\n. # Codecov Report\nMerging #3708 into master will decrease coverage by 47.74%.\nThe diff coverage is 0%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3708       +/-\n=============================================\n- Coverage     61.99%   14.24%   -47.75%   \n+ Complexity     6215     1205     -5010   \n=============================================\n  Files          1452     1141      -311   \n  Lines         30939    24141     -6798   \n  Branches       2878     2187      -691   \n=============================================\n- Hits          19181     3440    -15741   \n- Misses         9900    20408    +10508   \n+ Partials       1858      293     -1565\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...apereo/cas/services/web/ThemeTemplateResolver.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...uchdb/yubikey/YubiKeyAccountCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...onfigurer/plan/DefaultCasWebflowExecutionPlan.java | 0% <0%> (-100%) | 0% <0%> (-5%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...n/java/org/apereo/cas/ticket/ExpirationPolicy.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ... and 1141 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 776a6ba...795eda1. Read the comment docs.\n. # Codecov Report\nMerging #3713 into master will decrease coverage by 0.35%.\nThe diff coverage is 44.82%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3713      +/-\n===========================================\n- Coverage     61.96%   61.6%   -0.36%   \n+ Complexity     6211    6188      -23   \n===========================================\n  Files          1452    1452            \n  Lines         30947   30980      +33   \n  Branches       2878    2882       +4   \n===========================================\n- Hits          19177   19086      -91   \n- Misses         9910   10042     +132   \n+ Partials       1860    1852       -8\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...org/apereo/cas/ticket/registry/TicketRegistry.java | 100% <\u00f8> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...pereo/cas/ticket/registry/RedisTicketRegistry.java | 0% <0%> (-77.97%) | 0 <0> (-14) | |\n| ...eo/cas/ticket/registry/AbstractTicketRegistry.java | 81.98% <100%> (+0.5%) | 39 <3> (+1) | :arrow_up: |\n| .../ticket/registry/DefaultTicketRegistryCleaner.java | 67.85% <100%> (\u00f8) | 6 <1> (\u00f8) | :arrow_down: |\n| ...ereo/cas/AbstractCentralAuthenticationService.java | 62.96% <100%> (+0.69%) | 15 <1> (\u00f8) | :arrow_down: |\n| ...on/policy/UniquePrincipalAuthenticationPolicy.java | 77.77% <92.3%> (+2.77%) | 6 <3> (+1) | :arrow_up: |\n| .../adaptors/redis/services/RedisServiceRegistry.java | 0% <0%> (-63.16%) | 0% <0%> (-12%) | |\n| .../org/apereo/cas/redis/core/RedisObjectFactory.java | 0% <0%> (-58.47%) | 0% <0%> (-4%) | |\n| ...er/support/AbstractPac4jAuthenticationHandler.java | 37.73% <0%> (-0.57%) | 8% <0%> (\u00f8) | |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8071f70...f38c252. Read the comment docs.\n. # Codecov Report\nMerging #3716 into master will decrease coverage by 28.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3716      +/-\n============================================\n- Coverage     61.96%   33.77%   -28.2%   \n+ Complexity     6211     2640    -3571   \n============================================\n  Files          1452     1142     -310   \n  Lines         30947    24181    -6766   \n  Branches       2878     2189     -689   \n============================================\n- Hits          19177     8167   -11010   \n- Misses         9910    15132    +5222   \n+ Partials       1860      882     -978\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...on/loader/GroovyConfigurationPropertiesLoader.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...t/OAuth20UserProfileDataAuditResourceResolver.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 887 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8071f70...dcfc984. Read the comment docs.\n. # Codecov Report\nMerging #3716 into master will decrease coverage by 28.19%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3716      +/-\n============================================\n- Coverage     61.96%   33.77%   -28.2%   \n+ Complexity     6211     2640    -3571   \n============================================\n  Files          1452     1142     -310   \n  Lines         30947    24181    -6766   \n  Branches       2878     2189     -689   \n============================================\n- Hits          19177     8167   -11010   \n- Misses         9910    15132    +5222   \n+ Partials       1860      882     -978\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...on/loader/GroovyConfigurationPropertiesLoader.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...t/OAuth20UserProfileDataAuditResourceResolver.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 887 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8071f70...dcfc984. Read the comment docs.\n. # Codecov Report\nMerging #3723 into master will decrease coverage by 14.79%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3723      +/-\n============================================\n- Coverage     48.83%   34.03%   -14.8%   \n+ Complexity     5127     2668    -2459   \n============================================\n  Files          1452     1142     -310   \n  Lines         31062    24270    -6792   \n  Branches       2894     2198     -696   \n============================================\n- Hits          15170     8261    -6909   \n- Misses        14468    15115     +647   \n+ Partials       1424      894     -530\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...isteredServiceAccessStrategyAuditableEnforcer.java | 1.51% <0%> (-84.85%) | 1 <0> (-11) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ... and 1102 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e886014...3cf4d20. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@e9301e1). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3723   +/-\n========================================\n  Coverage          ?   8.67%         \n  Complexity        ?     779         \n========================================\n  Files             ?    1143         \n  Lines             ?   24307         \n  Branches          ?    2201         \n========================================\n  Hits              ?    2108         \n  Misses            ?   22006         \n  Partials          ?     193\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...isteredServiceAccessStrategyAuditableEnforcer.java | 1.47% <0%> (\u00f8) | 1 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e9301e1...93b5139. Read the comment docs.\n. # Codecov Report\nMerging #3734 into 6.0.x will increase coverage by 6.71%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3734      +/-\n============================================\n+ Coverage     27.05%   33.76%   +6.71%   \n- Complexity     2174     2642     +468   \n============================================\n  Files          1142     1142            \n  Lines         24208    24208            \n  Branches       2191     2191            \n============================================\n+ Hits           6549     8174    +1625   \n+ Misses        16992    15151    -1841   \n- Partials        667      883     +216\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cipalAttributeAcceptableUsagePolicyRepository.java | 71.42% <100%> (\u00f8) | 4 <1> (\u00f8) | :arrow_down: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| ...onse/accesstoken/OAuth20DefaultTokenGenerator.java | 0.84% <0%> (+0.84%) | 1% <0%> (+1%) | :arrow_up: |\n| ...i/src/main/java/org/apereo/cas/util/HttpUtils.java | 48.27% <0%> (+1.14%) | 22% <0%> (+1%) | :arrow_up: |\n| .../org/apereo/cas/util/scripting/ScriptingUtils.java | 14.89% <0%> (+1.41%) | 10% <0%> (+2%) | :arrow_up: |\n| ...back/OAuth20TokenAuthorizationResponseBuilder.java | 2% <0%> (+2%) | 1% <0%> (+1%) | :arrow_up: |\n| ...cas/oidc/util/OidcAuthorizationRequestSupport.java | 2.12% <0%> (+2.12%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ver/BaseSamlRegisteredServiceMetadataResolver.java | 51.61% <0%> (+2.15%) | 11% <0%> (+1%) | :arrow_up: |\n| ... and 138 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bdf7a28...76a209f. Read the comment docs.\n. # Codecov Report\nMerging #3734 into 6.0.x will increase coverage by 6.71%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3734      +/-\n============================================\n+ Coverage     27.05%   33.76%   +6.71%   \n- Complexity     2174     2642     +468   \n============================================\n  Files          1142     1142            \n  Lines         24208    24208            \n  Branches       2191     2191            \n============================================\n+ Hits           6549     8174    +1625   \n+ Misses        16992    15151    -1841   \n- Partials        667      883     +216\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cipalAttributeAcceptableUsagePolicyRepository.java | 71.42% <100%> (\u00f8) | 4 <1> (\u00f8) | :arrow_down: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| ...onse/accesstoken/OAuth20DefaultTokenGenerator.java | 0.84% <0%> (+0.84%) | 1% <0%> (+1%) | :arrow_up: |\n| ...i/src/main/java/org/apereo/cas/util/HttpUtils.java | 48.27% <0%> (+1.14%) | 22% <0%> (+1%) | :arrow_up: |\n| .../org/apereo/cas/util/scripting/ScriptingUtils.java | 14.89% <0%> (+1.41%) | 10% <0%> (+2%) | :arrow_up: |\n| ...back/OAuth20TokenAuthorizationResponseBuilder.java | 2% <0%> (+2%) | 1% <0%> (+1%) | :arrow_up: |\n| ...cas/oidc/util/OidcAuthorizationRequestSupport.java | 2.12% <0%> (+2.12%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ver/BaseSamlRegisteredServiceMetadataResolver.java | 51.61% <0%> (+2.15%) | 11% <0%> (+1%) | :arrow_up: |\n| ... and 138 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bdf7a28...76a209f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@d103dab). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3737   +/-\n=========================================\n  Coverage          ?   34.08%         \n  Complexity        ?     2673         \n=========================================\n  Files             ?     1143         \n  Lines             ?    24308         \n  Branches          ?     2202         \n=========================================\n  Hits              ?     8286         \n  Misses            ?    15125         \n  Partials          ?      897\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d103dab...1f7935e. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1e4a02b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3737   +/-\n=========================================\n  Coverage          ?   34.05%         \n  Complexity        ?     2672         \n=========================================\n  Files             ?     1144         \n  Lines             ?    24327         \n  Branches          ?     2203         \n=========================================\n  Hits              ?     8284         \n  Misses            ?    15144         \n  Partials          ?      899\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e4a02b...7124ef0. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@c5cce24). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3739   +/-\n=========================================\n  Coverage          ?   34.01%         \n  Complexity        ?     2672         \n=========================================\n  Files             ?     1144         \n  Lines             ?    24327         \n  Branches          ?     2204         \n=========================================\n  Hits              ?     8276         \n  Misses            ?    15152         \n  Partials          ?      899\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...CodeResponseTypeAuthorizationRequestValidator.java | 3.22% <0%> (\u00f8) | 1 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c5cce24...958aa4f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1e4a02b). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3739   +/-\n=========================================\n  Coverage          ?   34.05%         \n  Complexity        ?     2674         \n=========================================\n  Files             ?     1144         \n  Lines             ?    24330         \n  Branches          ?     2204         \n=========================================\n  Hits              ?     8286         \n  Misses            ?    15145         \n  Partials          ?      899\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ordSynchronizationAuthenticationPostProcessor.java | 69.44% <\u00f8> (\u00f8) | 4 <0> (?) | |\n| ...CodeResponseTypeAuthorizationRequestValidator.java | 2.94% <0%> (\u00f8) | 1 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1e4a02b...39eee9d. Read the comment docs.\n. # Codecov Report\nMerging #3740 into 6.0.x will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n6.0.x   #3740      +/-\n==========================================\n- Coverage     33.8%   33.8%   -0.01%   \n+ Complexity    2646    2645       -1   \n==========================================\n  Files         1142    1142            \n  Lines        24208   24208            \n  Branches      2191    2191            \n==========================================\n- Hits          8184    8183       -1   \n- Misses       15140   15142       +2   \n+ Partials       884     883       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e9f249...bd94794. Read the comment docs.\n. # Codecov Report\nMerging #3740 into 6.0.x will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\n6.0.x   #3740      +/-\n==========================================\n- Coverage     33.8%   33.8%   -0.01%   \n+ Complexity    2646    2645       -1   \n==========================================\n  Files         1142    1142            \n  Lines        24208   24208            \n  Branches      2191    2191            \n==========================================\n- Hits          8184    8183       -1   \n- Misses       15140   15142       +2   \n+ Partials       884     883       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7e9f249...bd94794. Read the comment docs.\n. # Codecov Report\nMerging #3745 into master will increase coverage by 13.17%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3745       +/-\n=============================================\n+ Coverage     48.87%   62.05%   +13.17%   \n- Complexity     5137     6255     +1118   \n=============================================\n  Files          1455     1455             \n  Lines         31127    31127             \n  Branches       2903     2903             \n=============================================\n+ Hits          15213    19315     +4102   \n+ Misses        14487     9939     -4548   \n- Partials       1427     1873      +446\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 72.5% <0%> (+1.5%) | 80% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 70.37% <0%> (+3.7%) | 19% <0%> (+2%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 74.07% <0%> (+3.7%) | 13% <0%> (+1%) | :arrow_up: |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 4.76% <0%> (+4.76%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 232 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43aa3ac...b750337. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@a2ddfe9). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3745   +/-\n=========================================\n  Coverage          ?   62.05%         \n  Complexity        ?     6255         \n=========================================\n  Files             ?     1455         \n  Lines             ?    31127         \n  Branches          ?     2903         \n=========================================\n  Hits              ?    19315         \n  Misses            ?     9939         \n  Partials          ?     1873\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a2ddfe9...52d3cf7. Read the comment docs.\n. # Codecov Report\nMerging #3746 into 6.0.x will decrease coverage by 0.25%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3746      +/-\n============================================\n- Coverage     33.78%   33.52%   -0.26%   \n+ Complexity     2644     2621      -23   \n============================================\n  Files          1142     1142            \n  Lines         24208    24213       +5   \n  Branches       2192     2192            \n============================================\n- Hits           8178     8117      -61   \n- Misses        15146    15228      +82   \n+ Partials        884      868      -16\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...as/web/flow/CasWebflowExecutionPlanConfigurer.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...as/aup/MongoDbAcceptableUsagePolicyRepository.java | 0% <0%> (-75%) | 0% <0%> (-3%) | |\n| ...o/cas/aup/LdapAcceptableUsagePolicyRepository.java | 0% <0%> (-73.69%) | 0% <0%> (-4%) | |\n| ...as/aup/CouchDbAcceptableUsagePolicyRepository.java | 0% <0%> (-34.89%) | 0% <0%> (-4%) | |\n| ...cipalAttributeAcceptableUsagePolicyRepository.java | 42.85% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...thentication/PseudoPlatformTransactionManager.java | 75% <0%> (-25%) | 3% <0%> (-1%) | |\n| .../ticket/registry/DefaultTicketRegistrySupport.java | 0% <0%> (-20%) | 0% <0%> (-2%) | |\n| ...icket/registry/AbstractMapBasedTicketRegistry.java | 31.25% <0%> (-12.5%) | 4% <0%> (-1%) | |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 18% <0%> (-6.5%) | 16% <0%> (-6%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ... and 5 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0252182...2455068. Read the comment docs.\n. # Codecov Report\nMerging #3748 into 6.0.x will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x   #3748      +/-\n===========================================\n+ Coverage     33.78%   33.8%   +0.02%   \n- Complexity     2644    2646       +2   \n===========================================\n  Files          1142    1142            \n  Lines         24208   24208            \n  Branches       2192    2192            \n===========================================\n+ Hits           8178    8184       +6   \n+ Misses        15146   15140       -6   \n  Partials        884     884\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0252182...91fd1b9. Read the comment docs.\n. # Codecov Report\nMerging #3748 into 6.0.x will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x   #3748      +/-\n===========================================\n+ Coverage     33.78%   33.8%   +0.02%   \n- Complexity     2644    2646       +2   \n===========================================\n  Files          1142    1142            \n  Lines         24208   24208            \n  Branches       2192    2192            \n===========================================\n+ Hits           8178    8184       +6   \n+ Misses        15146   15140       -6   \n  Partials        884     884\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0252182...91fd1b9. Read the comment docs.\n. # Codecov Report\nMerging #3749 into master will decrease coverage by 14.83%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3749       +/-\n=============================================\n- Coverage     48.87%   34.04%   -14.84%   \n+ Complexity     5137     2671     -2466   \n=============================================\n  Files          1455     1144      -311   \n  Lines         31127    24327     -6800   \n  Branches       2903     2204      -699   \n=============================================\n- Hits          15213     8281     -6932   \n- Misses        14487    15147      +660   \n+ Partials       1427      899      -528\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/CasAuthenticationTransactionSuccessfulEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rt/events/ticket/CasServiceTicketGrantedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 1105 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43aa3ac...e3840d7. Read the comment docs.\n. # Codecov Report\nMerging #3749 into master will decrease coverage by 14.83%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3749       +/-\n=============================================\n- Coverage     48.87%   34.04%   -14.84%   \n+ Complexity     5137     2671     -2466   \n=============================================\n  Files          1455     1144      -311   \n  Lines         31127    24327     -6800   \n  Branches       2903     2204      -699   \n=============================================\n- Hits          15213     8281     -6932   \n- Misses        14487    15147      +660   \n+ Partials       1427      899      -528\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/CasAuthenticationTransactionSuccessfulEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rt/events/ticket/CasServiceTicketGrantedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 1105 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 43aa3ac...e3840d7. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@a5dacc3). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3750   +/-\n=========================================\n  Coverage          ?   24.21%         \n  Complexity        ?     1961         \n=========================================\n  Files             ?     1150         \n  Lines             ?    24519         \n  Branches          ?     2210         \n=========================================\n  Hits              ?     5937         \n  Misses            ?    17978         \n  Partials          ?      604\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...resource/AbstractResourceBasedServiceRegistry.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a5dacc3...cc56f8d. Read the comment docs.\n. # Codecov Report\nMerging #3764 into 6.0.x will increase coverage by <.01%.\nThe diff coverage is 7.14%.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x    #3764      +/-\n===========================================\n+ Coverage     33.5%   33.51%   +<.01%   \n- Complexity    2621     2622       +1   \n===========================================\n  Files         1143     1143            \n  Lines        24223    24238      +15   \n  Branches      2193     2196       +3   \n===========================================\n+ Hits          8117     8123       +6   \n- Misses       15239    15248       +9   \n  Partials       867      867\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../slo/SamlIdPSingleLogoutServiceMessageHandler.java | 14.7% <0%> (-0.92%) | 2 <0> (\u00f8) | |\n| ...lo/SamlIdPSingleLogoutServiceLogoutUrlBuilder.java | 12.82% <0%> (-1.07%) | 2 <0> (\u00f8) | |\n| ...ile/slo/SamlProfileSingleLogoutMessageCreator.java | 21.73% <23.07%> (+2.29%) | 2 <0> (\u00f8) | :arrow_down: |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2443b5...af122a7. Read the comment docs.\n. # Codecov Report\nMerging #3766 into master will increase coverage by 13.39%.\nThe diff coverage is 16.66%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3766       +/-\n=============================================\n+ Coverage     48.32%   61.71%   +13.39%   \n- Complexity     5161     6328     +1167   \n=============================================\n  Files          1476     1476             \n  Lines         31618    31633       +15   \n  Branches       2933     2936        +3   \n=============================================\n+ Hits          15279    19522     +4243   \n+ Misses        14896    10216     -4680   \n- Partials       1443     1895      +452\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...idp/services/DefaultRelyingPartyTokenProducer.java | 1.53% <\u00f8> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| .../slo/SamlIdPSingleLogoutServiceMessageHandler.java | 14.7% <0%> (-0.92%) | 2 <0> (\u00f8) | |\n| ...lo/SamlIdPSingleLogoutServiceLogoutUrlBuilder.java | 48.71% <0%> (-4.06%) | 5 <0> (\u00f8) | |\n| ...ile/slo/SamlProfileSingleLogoutMessageCreator.java | 82.6% <53.84%> (-11.84%) | 4 <0> (+1) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ... and 245 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 232bcd3...fe4b8f2. Read the comment docs.\n. # Codecov Report\nMerging #3767 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3767      +/-\n============================================\n- Coverage     61.73%   61.72%   -0.02%   \n+ Complexity     6333     6329       -4   \n============================================\n  Files          1476     1476            \n  Lines         31633    31633            \n  Branches       2936     2936            \n============================================\n- Hits          19529    19525       -4   \n- Misses        10208    10212       +4   \n  Partials       1896     1896\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 77.77% <0%> (-5.56%) | 9% <0%> (-3%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99b4a7c...ea4a01d. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@08b92fb). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3767   +/-\n=========================================\n  Coverage          ?   61.72%         \n  Complexity        ?     6329         \n=========================================\n  Files             ?     1476         \n  Lines             ?    31633         \n  Branches          ?     2936         \n=========================================\n  Hits              ?    19525         \n  Misses            ?    10212         \n  Partials          ?     1896\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08b92fb...0bc05ef. Read the comment docs.\n. # Codecov Report\nMerging #3768 into 6.0.x will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x    #3768      +/-\n===========================================\n+ Coverage     33.5%   33.51%   +0.01%   \n- Complexity    2622     2623       +1   \n===========================================\n  Files         1143     1143            \n  Lines        24238    24238            \n  Branches      2196     2196            \n===========================================\n+ Hits          8121     8124       +3   \n+ Misses       15249    15246       -3   \n  Partials       868      868\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...src/main/java/org/apereo/cas/util/SamlSPUtils.java | 42.18% <100%> (\u00f8) | 3 <0> (\u00f8) | :arrow_down: |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7820e1...62a6ccf. Read the comment docs.\n. # Codecov Report\nMerging #3768 into 6.0.x will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x    #3768      +/-\n===========================================\n+ Coverage     33.5%   33.51%   +0.01%   \n- Complexity    2622     2623       +1   \n===========================================\n  Files         1143     1143            \n  Lines        24238    24238            \n  Branches      2196     2196            \n===========================================\n+ Hits          8121     8124       +3   \n+ Misses       15249    15246       -3   \n  Partials       868      868\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...src/main/java/org/apereo/cas/util/SamlSPUtils.java | 42.18% <100%> (\u00f8) | 3 <0> (\u00f8) | :arrow_down: |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7820e1...62a6ccf. Read the comment docs.\n. # Codecov Report\nMerging #3769 into 6.0.x will increase coverage by 28.3%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x    #3769      +/-\n===========================================\n+ Coverage     33.5%   61.81%   +28.3%   \n- Complexity    2622     6220    +3598   \n===========================================\n  Files         1143     1454     +311   \n  Lines        24238    31039    +6801   \n  Branches      2196     2893     +697   \n===========================================\n+ Hits          8121    19186   +11065   \n+ Misses       15249     9997    -5252   \n- Partials       868     1856     +988\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...org/apereo/cas/web/flow/ConsentReviewEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ... and 892 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7820e1...a1a579a. Read the comment docs.\n. # Codecov Report\nMerging #3769 into 6.0.x will increase coverage by 28.3%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\n6.0.x    #3769      +/-\n===========================================\n+ Coverage     33.5%   61.81%   +28.3%   \n- Complexity    2622     6220    +3598   \n===========================================\n  Files         1143     1454     +311   \n  Lines        24238    31039    +6801   \n  Branches      2196     2893     +697   \n===========================================\n+ Hits          8121    19186   +11065   \n+ Misses       15249     9997    -5252   \n- Partials       868     1856     +988\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...org/apereo/cas/web/flow/ConsentReviewEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ... and 892 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e7820e1...a1a579a. Read the comment docs.\n. # Codecov Report\nMerging #3771 into master will decrease coverage by 27.74%.\nThe diff coverage is 100%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3771       +/-\n=============================================\n- Coverage     61.73%   33.98%   -27.75%   \n+ Complexity     6333     2723     -3610   \n=============================================\n  Files          1476     1163      -313   \n  Lines         31633    24771     -6862   \n  Branches       2936     2228      -708   \n=============================================\n- Hits          19529     8419    -11110   \n- Misses        10208    15446     +5238   \n+ Partials       1896      906      -990\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...src/main/java/org/apereo/cas/util/SamlSPUtils.java | 42.18% <100%> (\u00f8) | 3 <0> (\u00f8) | :arrow_down: |\n| ...n/CasAuthenticationTransactionSuccessfulEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-100%) | 0% <0%> (-10%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ... and 895 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 99b4a7c...9afa631. Read the comment docs.\n. # Codecov Report\nMerging #3772 into master will increase coverage by 14.38%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3772       +/-\n=============================================\n+ Coverage     33.95%   48.33%   +14.38%   \n- Complexity     2718     5169     +2451   \n=============================================\n  Files          1163     1476      +313   \n  Lines         24771    31633     +6862   \n  Branches       2228     2936      +708   \n=============================================\n+ Hits           8411    15290     +6879   \n+ Misses        15455    14902      -553   \n- Partials        905     1441      +536\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-100%) | 0% <0%> (-8%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 1118 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08b92fb...b1065f3. Read the comment docs.\n. # Codecov Report\nMerging #3772 into master will increase coverage by 14.38%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3772       +/-\n=============================================\n+ Coverage     33.95%   48.33%   +14.38%   \n- Complexity     2718     5169     +2451   \n=============================================\n  Files          1163     1476      +313   \n  Lines         24771    31633     +6862   \n  Branches       2228     2936      +708   \n=============================================\n+ Hits           8411    15290     +6879   \n+ Misses        15455    14902      -553   \n- Partials        905     1441      +536\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-100%) | 0% <0%> (-8%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 1118 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 08b92fb...ecc114e. Read the comment docs.\n. # Codecov Report\nMerging #3773 into master will decrease coverage by 13.38%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3773       +/-\n=============================================\n- Coverage     61.69%   48.31%   -13.39%   \n+ Complexity     6327     5162     -1165   \n=============================================\n  Files          1476     1476             \n  Lines         31633    31633             \n  Branches       2936     2936             \n=============================================\n- Hits          19517    15283     -4234   \n- Misses        10219    14906     +4687   \n+ Partials       1897     1444      -453\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-100%) | 0% <0%> (-8%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 239 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 44db6d1...306f8cc. Read the comment docs.\n. # Codecov Report\nMerging #3774 into 6.0.x will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3774      +/-\n============================================\n- Coverage     61.85%   61.84%   -0.02%   \n+ Complexity     6223     6221       -2   \n============================================\n  Files          1454     1454            \n  Lines         31039    31039            \n  Branches       2893     2893            \n============================================\n- Hits          19200    19196       -4   \n- Misses         9978     9981       +3   \n- Partials       1861     1862       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 06a04dd...eee19b0. Read the comment docs.\n. # Codecov Report\nMerging #3774 into 6.0.x will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3774      +/-\n============================================\n- Coverage     61.85%   61.84%   -0.02%   \n+ Complexity     6223     6221       -2   \n============================================\n  Files          1454     1454            \n  Lines         31039    31039            \n  Branches       2893     2893            \n============================================\n- Hits          19200    19196       -4   \n- Misses         9978     9981       +3   \n- Partials       1861     1862       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 06a04dd...eee19b0. Read the comment docs.\n. # Codecov Report\nMerging #3775 into master will increase coverage by 27.87%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3775       +/-\n============================================\n+ Coverage     33.83%   61.7%   +27.87%   \n- Complexity     2731    6382     +3651   \n============================================\n  Files          1174    1487      +313   \n  Lines         25009   31883     +6874   \n  Branches       2235    2944      +709   \n============================================\n+ Hits           8462   19674    +11212   \n+ Misses        15631   10303     -5328   \n- Partials        916    1906      +990\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| .../cas/cassandra/DefaultCassandraSessionFactory.java | 61.11% <0%> (-1.86%) | 5% <0%> (-1%) | |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ... and 908 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cb1b58c...cba1b39. Read the comment docs.\n. # Codecov Report\nMerging #3777 into master will increase coverage by 9.52%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3777      +/-\n============================================\n+ Coverage        52%   61.53%   +9.52%   \n- Complexity     5515     6340     +825   \n============================================\n  Files          1485     1485            \n  Lines         31733    31733            \n  Branches       2939     2939            \n============================================\n+ Hits          16503    19527    +3024   \n+ Misses        13630    10306    -3324   \n- Partials       1600     1900     +300\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 77.77% <0%> (-7.41%) | 9% <0%> (-5%) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 71.6% <0%> (+3.7%) | 20% <0%> (+2%) | :arrow_up: |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 4.76% <0%> (+4.76%) | 1% <0%> (+1%) | :arrow_up: |\n| ...cation/support/DefaultLdapAccountStateHandler.java | 61.11% <0%> (+5.55%) | 5% <0%> (+1%) | :arrow_up: |\n| ... and 160 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6fad911...b18c9f3. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@0cc60ce). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3778   +/-\n=========================================\n  Coverage          ?   61.66%         \n  Complexity        ?     6351         \n=========================================\n  Files             ?     1485         \n  Lines             ?    31733         \n  Branches          ?     2939         \n=========================================\n  Hits              ?    19568         \n  Misses            ?    10264         \n  Partials          ?     1901\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...til/RegisteredServiceYamlHttpMessageConverter.java | 16.66% <0%> (\u00f8) | 1 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0cc60ce...9361589. Read the comment docs.\n. # Codecov Report\nMerging #3779 into master will increase coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3779      +/-\n============================================\n+ Coverage     33.79%   33.84%   +0.04%   \n- Complexity     2726     2733       +7   \n============================================\n  Files          1173     1173            \n  Lines         24969    24969            \n  Branches       2234     2234            \n============================================\n+ Hits           8439     8451      +12   \n+ Misses        15620    15610      -10   \n+ Partials        910      908       -2\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...entication/policy/RestfulAuthenticationPolicy.java | 89.28% <100%> (+42.85%) | 10 <0> (+7) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dce9d59...5836691. Read the comment docs.\n. # Codecov Report\nMerging #3781 into master will decrease coverage by 27.62%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3781       +/-\n=============================================\n- Coverage     61.53%   33.91%   -27.63%   \n+ Complexity     6350     2729     -3621   \n=============================================\n  Files          1485     1172      -313   \n  Lines         31749    24888     -6861   \n  Branches       2940     2232      -708   \n=============================================\n- Hits          19538     8440    -11098   \n- Misses        10308    15539     +5231   \n+ Partials       1903      909      -994\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/CasAuthenticationTransactionSuccessfulEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rt/events/ticket/CasServiceTicketGrantedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 904 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b69571...d44a2fe. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@415cc87). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3781   +/-\n=========================================\n  Coverage          ?   33.91%         \n  Complexity        ?     2729         \n=========================================\n  Files             ?     1172         \n  Lines             ?    24888         \n  Branches          ?     2232         \n=========================================\n  Hits              ?     8440         \n  Misses            ?    15539         \n  Partials          ?      909\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 415cc87...0149488. Read the comment docs.\n. # Codecov Report\nMerging #3785 into master will increase coverage by 0.03%.\nThe diff coverage is 65.21%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3785      +/-\n============================================\n+ Coverage     34.01%   34.05%   +0.03%   \n- Complexity     2748     2753       +5   \n============================================\n  Files          1174     1174            \n  Lines         25009    25017       +8   \n  Branches       2235     2237       +2   \n============================================\n+ Hits           8508     8520      +12   \n+ Misses        15586    15577       -9   \n- Partials        915      920       +5\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/services/RegexRegisteredService.java | 60% <0%> (\u00f8) | 5 <0> (+1) | :arrow_up: |\n| .../apereo/cas/services/CouchbaseServiceRegistry.java | 72.46% <68.18%> (-4.59%) | 13 <4> (+1) | |\n| ...b/services/RegisteredServiceCouchDbRepository.java | 57.69% <0%> (-7.7%) | 7% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 64.81% <0%> (-7.41%) | 8% <0%> (-3%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (+1.31%) | 15% <0%> (+1%) | :arrow_up: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n| ...org/apereo/cas/services/OidcRegisteredService.java | 47.36% <0%> (+31.57%) | 5% <0%> (+3%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea919b6...4f5b022. Read the comment docs.\n. # Codecov Report\nMerging #3786 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3786      +/-\n============================================\n+ Coverage     61.52%   61.54%   +0.01%   \n- Complexity     6366     6370       +4   \n============================================\n  Files          1486     1486            \n  Lines         31864    31864            \n  Branches       2944     2944            \n============================================\n+ Hits          19605    19610       +5   \n+ Misses        10357    10353       -4   \n+ Partials       1902     1901       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 79.62% <0%> (+1.85%) | 12% <0%> (+3%) | :arrow_up: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...15bfee7. Read the comment docs.\n. # Codecov Report\nMerging #3787 into master will decrease coverage by 27.63%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3787       +/-\n============================================\n- Coverage     61.53%   33.9%   -27.64%   \n+ Complexity     6350    2726     -3624   \n============================================\n  Files          1485    1172      -313   \n  Lines         31749   24888     -6861   \n  Branches       2940    2232      -708   \n============================================\n- Hits          19538    8438    -11100   \n- Misses        10308   15542     +5234   \n+ Partials       1903     908      -995\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/CasAuthenticationTransactionSuccessfulEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rt/events/ticket/CasServiceTicketGrantedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 905 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b69571...06c7e0a. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@415cc87). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3787   +/-\n========================================\n  Coverage          ?   33.9%         \n  Complexity        ?    2726         \n========================================\n  Files             ?    1172         \n  Lines             ?   24888         \n  Branches          ?    2232         \n========================================\n  Hits              ?    8438         \n  Misses            ?   15542         \n  Partials          ?     908\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 415cc87...b89e389. Read the comment docs.\n. # Codecov Report\nMerging #3788 into master will decrease coverage by 27.62%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3788       +/-\n=============================================\n- Coverage     61.53%   33.91%   -27.63%   \n+ Complexity     6350     2729     -3621   \n=============================================\n  Files          1485     1172      -313   \n  Lines         31749    24888     -6861   \n  Branches       2940     2232      -708   \n=============================================\n- Hits          19538     8440    -11098   \n- Misses        10308    15539     +5231   \n+ Partials       1903      909      -994\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/CasAuthenticationTransactionSuccessfulEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../AuthenticationPasswordPolicyHandlingStrategy.java | 0% <0%> (-100%) | 1% <0%> (-1%) | |\n| ...ntication/CasAuthenticationPolicyFailureEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ort/saml/mdui/ChainingMetadataResolverAdapter.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...te/JsonResourceSurrogateAuthenticationService.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rt/events/ticket/CasServiceTicketGrantedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 905 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2b69571...e05c966. Read the comment docs.\n. # Codecov Report\nMerging #3788 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3788      +/-\n===========================================\n+ Coverage     33.79%   33.8%   +0.01%   \n- Complexity     2726    2729       +3   \n===========================================\n  Files          1173    1173            \n  Lines         24969   24969            \n  Branches       2234    2234            \n===========================================\n+ Hits           8439    8442       +3   \n+ Misses        15620   15616       -4   \n- Partials        910     911       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 68.51% <0%> (+3.7%) | 10% <0%> (+2%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dce9d59...d6aff89. Read the comment docs.\n. # Codecov Report\nMerging #3789 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3789      +/-\n============================================\n+ Coverage      33.8%   33.81%   +<.01%   \n- Complexity     2726     2729       +3   \n============================================\n  Files          1173     1173            \n  Lines         24961    24961            \n  Branches       2233     2233            \n============================================\n+ Hits           8439     8440       +1   \n+ Misses        15612    15611       -1   \n  Partials        910      910\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 66.66% <0%> (+1.85%) | 11% <0%> (+3%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5e49161...1ccd2d3. Read the comment docs.\n. # Codecov Report\nMerging #3790 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3790      +/-\n============================================\n- Coverage     61.52%   61.51%   -0.02%   \n+ Complexity     6366     6364       -2   \n============================================\n  Files          1486     1486            \n  Lines         31864    31864            \n  Branches       2944     2944            \n============================================\n- Hits          19605    19600       -5   \n- Misses        10357    10363       +6   \n+ Partials       1902     1901       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 75.92% <0%> (-1.86%) | 9% <0%> (\u00f8) | |\n| ...util/cipher/JsonWebKeySetStringCipherExecutor.java | 54.94% <0%> (+2.19%) | 13% <0%> (+1%) | :arrow_up: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...8099a69. Read the comment docs.\n. # Codecov Report\nMerging #3790 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3790      +/-\n============================================\n- Coverage     61.52%   61.51%   -0.02%   \n+ Complexity     6366     6364       -2   \n============================================\n  Files          1486     1486            \n  Lines         31864    31864            \n  Branches       2944     2944            \n============================================\n- Hits          19605    19600       -5   \n- Misses        10357    10363       +6   \n+ Partials       1902     1901       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 75.92% <0%> (-1.86%) | 9% <0%> (\u00f8) | |\n| ...util/cipher/JsonWebKeySetStringCipherExecutor.java | 54.94% <0%> (+2.19%) | 13% <0%> (+1%) | :arrow_up: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...8099a69. Read the comment docs.\n. # Codecov Report\nMerging #3791 into master will decrease coverage by 0.1%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3791      +/-\n===========================================\n- Coverage     33.61%   33.5%   -0.11%   \n+ Complexity     2711    2704       -7   \n===========================================\n  Files          1173    1173            \n  Lines         24969   24969            \n  Branches       2234    2234            \n===========================================\n- Hits           8393    8367      -26   \n- Misses        15665   15702      +37   \n+ Partials        911     900      -11\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 0% <0%> (-88%) | 0% <0%> (-17%) | |\n| ...apereo/cas/influxdb/InfluxDbConnectionFactory.java | 0% <0%> (-69.39%) | 0% <0%> (-10%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (+1.31%) | 15% <0%> (+1%) | :arrow_up: |\n| .../java/org/apereo/cas/CasEmbeddedValueResolver.java | 88.23% <0%> (+5.88%) | 5% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+7.4%) | 11% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n| ...h/token/GoogleAuthenticatorJpaTokenRepository.java | 21.73% <0%> (+21.73%) | 4% <0%> (+4%) | :arrow_up: |\n| ...aGoogleAuthenticatorTokenCredentialRepository.java | 58.82% <0%> (+58.82%) | 7% <0%> (+7%) | :arrow_up: |\n| ...credentials/OneTimeTokenAccountCipherExecutor.java | 100% <0%> (+100%) | 3% <0%> (+3%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 76094fe...9311d82. Read the comment docs.\n. # Codecov Report\nMerging #3793 into 6.0.x will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3793      +/-\n============================================\n+ Coverage     33.48%   33.49%   +0.01%   \n- Complexity     2621     2622       +1   \n============================================\n  Files          1143     1143            \n  Lines         24246    24246            \n  Branches       2197     2197            \n============================================\n+ Hits           8118     8121       +3   \n+ Misses        15260    15257       -3   \n  Partials        868      868\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4e45069...86dce0d. Read the comment docs.\n. # Codecov Report\nMerging #3796 into master will increase coverage by 31.97%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3796       +/-\n=============================================\n+ Coverage      29.7%   61.68%   +31.97%   \n- Complexity     2476     6387     +3911   \n=============================================\n  Files          1174     1487      +313   \n  Lines         25009    31883     +6874   \n  Branches       2235     2944      +709   \n=============================================\n+ Hits           7429    19667    +12238   \n+ Misses        16854    10310     -6544   \n- Partials        726     1906     +1180\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ... and 936 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...38d21f6. Read the comment docs.\n. # Codecov Report\nMerging #3800 into master will decrease coverage by 13.44%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3800       +/-\n=============================================\n- Coverage     61.52%   48.08%   -13.45%   \n+ Complexity     6366     5191     -1175   \n=============================================\n  Files          1486     1486             \n  Lines         31864    31864             \n  Branches       2944     2944             \n=============================================\n- Hits          19605    15321     -4284   \n- Misses        10357    15098     +4741   \n+ Partials       1902     1445      -457\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-100%) | 0% <0%> (-8%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 241 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...d0e4f9b. Read the comment docs.\n. # Codecov Report\nMerging #3800 into master will decrease coverage by 13.44%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3800       +/-\n=============================================\n- Coverage     61.52%   48.08%   -13.45%   \n+ Complexity     6366     5191     -1175   \n=============================================\n  Files          1486     1486             \n  Lines         31864    31864             \n  Branches       2944     2944             \n=============================================\n- Hits          19605    15321     -4284   \n- Misses        10357    15098     +4741   \n+ Partials       1902     1445      -457\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-100%) | 0% <0%> (-8%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 241 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...d0e4f9b. Read the comment docs.\n. # Codecov Report\nMerging #3801 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3801      +/-\n============================================\n+ Coverage     61.52%   61.53%   +<.01%   \n- Complexity     6366     6368       +2   \n============================================\n  Files          1486     1486            \n  Lines         31864    31864            \n  Branches       2944     2944            \n============================================\n+ Hits          19605    19606       +1   \n  Misses        10357    10357            \n+ Partials       1902     1901       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 83.33% <0%> (+5.55%) | 12% <0%> (+3%) | :arrow_up: |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 100% <0%> (+6.25%) | 10% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...ce1f27a. Read the comment docs.\n. # Codecov Report\nMerging #3801 into master will increase coverage by 13.55%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3801       +/-\n=============================================\n+ Coverage     48.09%   61.64%   +13.55%   \n- Complexity     5198     6382     +1184   \n=============================================\n  Files          1487     1487             \n  Lines         31880    31880             \n  Branches       2943     2943             \n=============================================\n+ Hits          15332    19654     +4322   \n+ Misses        15111    10322     -4789   \n- Partials       1437     1904      +467\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 4.76% <0%> (+4.76%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 71.6% <0%> (+4.93%) | 20% <0%> (+3%) | :arrow_up: |\n| ...g/apereo/cas/services/AbstractServicesManager.java | 73.5% <0%> (+5.12%) | 31% <0%> (+1%) | :arrow_up: |\n| ... and 241 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 785f234...1aea2d6. Read the comment docs.\n. # Codecov Report\nMerging #3802 into master will not change coverage.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3802   +/-\n=========================================\n  Coverage     61.52%   61.52%         \n  Complexity     6366     6366         \n=========================================\n  Files          1486     1486         \n  Lines         31864    31864         \n  Branches       2944     2944         \n=========================================\n  Hits          19605    19605         \n- Misses        10357    10358    +1   \n+ Partials       1902     1901    -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 75.92% <0%> (-1.86%) | 9% <0%> (\u00f8) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (+1.31%) | 15% <0%> (+1%) | :arrow_up: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 100% <0%> (+6.25%) | 10% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f4f5e09...89bfe4c. Read the comment docs.\n. # Codecov Report\nMerging #3803 into master will increase coverage by 13.45%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3803       +/-\n=============================================\n+ Coverage     48.09%   61.55%   +13.45%   \n- Complexity     5198     6385     +1187   \n=============================================\n  Files          1487     1487             \n  Lines         31880    31934       +54   \n  Branches       2943     2960       +17   \n=============================================\n+ Hits          15332    19656     +4324   \n+ Misses        15111    10374     -4737   \n- Partials       1437     1904      +467\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| .../idp/profile/builders/enc/SamlIdPObjectSigner.java | 56.06% <0%> (-17.42%) | 15% <0%> (\u00f8) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...as/aup/CouchDbAcceptableUsagePolicyRepository.java | 0% <0%> (\u00f8) | 0% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 244 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 785f234...97811ce. Read the comment docs.\n. # Codecov Report\nMerging #3803 into master will increase coverage by 31.97%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3803       +/-\n=============================================\n+ Coverage      29.7%   61.67%   +31.97%   \n- Complexity     2476     6384     +3908   \n=============================================\n  Files          1174     1487      +313   \n  Lines         25009    31883     +6874   \n  Branches       2235     2944      +709   \n=============================================\n+ Hits           7429    19664    +12235   \n+ Misses        16854    10314     -6540   \n- Partials        726     1905     +1179\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ... and 936 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...efdc5f5. Read the comment docs.\n. # Codecov Report\nMerging #3808 into master will increase coverage by 13.53%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3808       +/-\n=============================================\n+ Coverage     48.09%   61.63%   +13.53%   \n- Complexity     5198     6381     +1183   \n=============================================\n  Files          1487     1487             \n  Lines         31880    31880             \n  Branches       2943     2943             \n=============================================\n+ Hits          15332    19648     +4316   \n+ Misses        15111    10328     -4783   \n- Partials       1437     1904      +467\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 4.76% <0%> (+4.76%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 243 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 785f234...4b48271. Read the comment docs.\n. # Codecov Report\nMerging #3809 into master will increase coverage by 13.55%.\nThe diff coverage is 0%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3809       +/-\n=============================================\n+ Coverage     48.09%   61.64%   +13.55%   \n- Complexity     5198     6381     +1183   \n=============================================\n  Files          1487     1487             \n  Lines         31880    31881        +1   \n  Branches       2943     2943             \n=============================================\n+ Hits          15332    19654     +4322   \n+ Misses        15111    10322     -4789   \n- Partials       1437     1905      +468\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../SamlRegisteredServiceMetadataHealthIndicator.java | 4% <0%> (-0.17%) | 1 <0> (\u00f8) | |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 93.75% <0%> (-6.25%) | 9% <0%> (-1%) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 244 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 785f234...88132ee. Read the comment docs.\n. # Codecov Report\nMerging #3809 into master will increase coverage by 13.55%.\nThe diff coverage is 0%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3809       +/-\n=============================================\n+ Coverage     48.09%   61.64%   +13.55%   \n- Complexity     5198     6381     +1183   \n=============================================\n  Files          1487     1487             \n  Lines         31880    31881        +1   \n  Branches       2943     2943             \n=============================================\n+ Hits          15332    19654     +4322   \n+ Misses        15111    10322     -4789   \n- Partials       1437     1905      +468\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../SamlRegisteredServiceMetadataHealthIndicator.java | 4% <0%> (-0.17%) | 1 <0> (\u00f8) | |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 93.75% <0%> (-6.25%) | 9% <0%> (-1%) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 244 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 785f234...88132ee. Read the comment docs.\n. # Codecov Report\nMerging #3810 into master will increase coverage by 30.43%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3810       +/-\n=============================================\n+ Coverage      29.7%   60.13%   +30.43%   \n- Complexity     2476     6248     +3772   \n=============================================\n  Files          1174     1487      +313   \n  Lines         25009    31883     +6874   \n  Branches       2235     2944      +709   \n=============================================\n+ Hits           7429    19173    +11744   \n+ Misses        16854    10828     -6026   \n- Partials        726     1882     +1156\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...org/apereo/cas/audit/MongoDbAuditTrailManager.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ml/idp/metadata/MongoDbSamlIdPMetadataLocator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ain/java/org/apereo/cas/MongoDbPropertySource.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...bThrottledSubmissionHandlerInterceptorAdapter.java | 0% <0%> (-95.66%) | 0% <0%> (-3%) | |\n| .../idp/metadata/MongoDbSamlIdPMetadataGenerator.java | 0% <0%> (-88.24%) | 0% <0%> (-4%) | |\n| ...rg/apereo/cas/services/MongoDbServiceRegistry.java | 0% <0%> (-81.82%) | 0% <0%> (-9%) | |\n| ...ors/yubikey/dao/MongoDbYubiKeyAccountRegistry.java | 0% <0%> (-78.58%) | 0% <0%> (-7%) | |\n| ...org/apereo/cas/mongo/MongoDbConnectionFactory.java | 0% <0%> (-77.1%) | 0% <0%> (-24%) | |\n| ... and 961 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...c242405. Read the comment docs.\n. # Codecov Report\nMerging #3812 into master will increase coverage by 13.62%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3812       +/-\n=============================================\n+ Coverage     48.06%   61.69%   +13.62%   \n- Complexity     5194     6388     +1194   \n=============================================\n  Files          1487     1487             \n  Lines         31883    31883             \n  Branches       2944     2944             \n=============================================\n+ Hits          15326    19669     +4343   \n+ Misses        15117    10308     -4809   \n- Partials       1440     1906      +466\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...o/cas/ticket/registry/HazelcastTicketRegistry.java | 83.58% <0%> (-1.5%) | 18% <0%> (\u00f8) | |\n| .../adaptive/intel/IPAddressIntelligenceResponse.java | 86.66% <0%> (\u00f8) | 6% <0%> (+1%) | :arrow_up: |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 71.5% <0%> (+0.5%) | 79% <0%> (\u00f8) | :arrow_down: |\n| ...c/main/java/org/apereo/cas/util/DateTimeUtils.java | 67.46% <0%> (+1.2%) | 29% <0%> (+1%) | :arrow_up: |\n| ...apereo/cas/aws/ChainingAWSCredentialsProvider.java | 71.18% <0%> (+1.69%) | 15% <0%> (+1%) | :arrow_up: |\n| ...tThrottledSubmissionHandlerInterceptorAdapter.java | 76.78% <0%> (+1.78%) | 15% <0%> (\u00f8) | :arrow_down: |\n| ...main/java/org/apereo/cas/util/CollectionUtils.java | 78.5% <0%> (+1.86%) | 35% <0%> (+2%) | :arrow_up: |\n| .../actions/SendForgotUsernameInstructionsAction.java | 3.44% <0%> (+3.44%) | 1% <0%> (+1%) | :arrow_up: |\n| ...ization/AbstractJacksonBackedStringSerializer.java | 71.6% <0%> (+4.93%) | 20% <0%> (+3%) | :arrow_up: |\n| ...g/apereo/cas/services/AbstractServicesManager.java | 73.5% <0%> (+5.12%) | 31% <0%> (+1%) | :arrow_up: |\n| ... and 244 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 70ba553...fdaeac5. Read the comment docs.\n. # Codecov Report\nMerging #3814 into master will increase coverage by 31.99%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3814       +/-\n============================================\n+ Coverage      29.7%   61.7%   +31.99%   \n- Complexity     2476    6389     +3913   \n============================================\n  Files          1174    1487      +313   \n  Lines         25009   31883     +6874   \n  Branches       2235    2944      +709   \n============================================\n+ Hits           7429   19672    +12243   \n+ Misses        16854   10304     -6550   \n- Partials        726    1907     +1181\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...tors/generic/RejectUsersAuthenticationHandler.java | 100% <0%> (\u00f8) | 3% <0%> (?) | |\n| ... and 935 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...254a18c. Read the comment docs.\n. # Codecov Report\nMerging #3814 into master will increase coverage by 31.99%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3814       +/-\n============================================\n+ Coverage      29.7%   61.7%   +31.99%   \n- Complexity     2476    6389     +3913   \n============================================\n  Files          1174    1487      +313   \n  Lines         25009   31883     +6874   \n  Branches       2235    2944      +709   \n============================================\n+ Hits           7429   19672    +12243   \n+ Misses        16854   10304     -6550   \n- Partials        726    1907     +1181\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...tors/generic/RejectUsersAuthenticationHandler.java | 100% <0%> (\u00f8) | 3% <0%> (?) | |\n| ... and 935 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...254a18c. Read the comment docs.\n. # Codecov Report\nMerging #3815 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3815      +/-\n============================================\n- Coverage      61.7%   61.68%   -0.02%   \n+ Complexity     6387     6384       -3   \n============================================\n  Files          1487     1487            \n  Lines         31883    31883            \n  Branches       2944     2944            \n============================================\n- Hits          19672    19668       -4   \n- Misses        10304    10308       +4   \n  Partials       1907     1907\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 93.75% <0%> (-6.25%) | 9% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2cedcf...7c1f992. Read the comment docs.\n. # Codecov Report\nMerging #3816 into master will increase coverage by 31.99%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3816       +/-\n=============================================\n+ Coverage      29.7%   61.69%   +31.99%   \n- Complexity     2476     6386     +3910   \n=============================================\n  Files          1174     1487      +313   \n  Lines         25009    31883     +6874   \n  Branches       2235     2944      +709   \n=============================================\n+ Hits           7429    19671    +12242   \n+ Misses        16854    10305     -6549   \n- Partials        726     1907     +1181\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...tors/generic/RejectUsersAuthenticationHandler.java | 100% <0%> (\u00f8) | 3% <0%> (?) | |\n| ... and 935 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...7057c34. Read the comment docs.\n. # Codecov Report\nMerging #3816 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3816      +/-\n============================================\n- Coverage      61.7%   61.69%   -0.01%   \n- Complexity     6387     6388       +1   \n============================================\n  Files          1487     1487            \n  Lines         31883    31883            \n  Branches       2944     2944            \n============================================\n- Hits          19672    19671       -1   \n- Misses        10304    10307       +3   \n+ Partials       1907     1905       -2\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...lback/OAuth20ClientCredentialsResponseBuilder.java | 50% <0%> (-50%) | 1% <0%> (-1%) | |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 72.72% <0%> (+3.03%) | 9% <0%> (+1%) | :arrow_up: |\n| ...reo/cas/ticket/registry/CachingTicketRegistry.java | 92.85% <0%> (+3.57%) | 3% <0%> (\u00f8) | :arrow_down: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 79.62% <0%> (+3.7%) | 12% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n| ...src/main/java/org/apereo/cas/util/SocketUtils.java | 100% <0%> (+33.33%) | 1% <0%> (\u00f8) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2cedcf...f400c2f. Read the comment docs.\n. # Codecov Report\nMerging #3817 into master will increase coverage by 32%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3817      +/-\n===========================================\n+ Coverage      29.7%   61.7%     +32%   \n- Complexity     2476    6385    +3909   \n===========================================\n  Files          1174    1488     +314   \n  Lines         25009   31890    +6881   \n  Branches       2235    2944     +709   \n===========================================\n+ Hits           7429   19678   +12249   \n+ Misses        16854   10304    -6550   \n- Partials        726    1908    +1182\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ereo/cas/client/CasBackchannelTicketValidator.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 41.17% <0%> (\u00f8) | 4% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 20% <0%> (\u00f8) | 1% <0%> (?) | |\n| ... and 937 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aefc672...a3ebaff. Read the comment docs.\n. # Codecov Report\nMerging #3818 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3818      +/-\n===========================================\n+ Coverage      61.7%   61.7%   +<.01%   \n- Complexity     6387    6389       +2   \n===========================================\n  Files          1487    1487            \n  Lines         31883   31883            \n  Branches       2944    2944            \n===========================================\n+ Hits          19672   19673       +1   \n  Misses        10304   10304            \n+ Partials       1907    1906       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 72.72% <0%> (+3.03%) | 9% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 79.62% <0%> (+3.7%) | 11% <0%> (+2%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c2cedcf...0cec590. Read the comment docs.\n. # Codecov Report\nMerging #3818 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3818      +/-\n===========================================\n- Coverage     61.64%   61.6%   -0.04%   \n+ Complexity     6386    6381       -5   \n===========================================\n  Files          1487    1487            \n  Lines         31898   31898            \n  Branches       2948    2948            \n===========================================\n- Hits          19662   19652      -10   \n- Misses        10325   10335      +10   \n  Partials       1911    1911\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 0% <0%> (-15.39%) | 0% <0%> (-1%) | |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 52.77% <0%> (-11.12%) | 4% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 77.77% <0%> (-3.71%) | 13% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...o/cas/ticket/registry/HazelcastTicketRegistry.java | 85.07% <0%> (+1.49%) | 18% <0%> (\u00f8) | :arrow_down: |\n| ...reo/cas/ticket/registry/CachingTicketRegistry.java | 92.85% <0%> (+3.57%) | 3% <0%> (\u00f8) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3590b4e...2296e80. Read the comment docs.\n. # Codecov Report\nMerging #3819 into master will increase coverage by 1.21%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3819      +/-\n============================================\n+ Coverage     32.83%   34.05%   +1.21%   \n- Complexity     2683     2753      +70   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8211     8516     +305   \n+ Misses        15898    15580     -318   \n- Partials        900      913      +13\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ached/kryo/serial/RegisteredServiceSerializer.java | 1.66% <0%> (+1.66%) | 1% <0%> (+1%) | :arrow_up: |\n| ...thentication/principal/AbstractServiceFactory.java | 46.15% <0%> (+7.69%) | 7% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 75.92% <0%> (+11.11%) | 14% <0%> (+6%) | :arrow_up: |\n| ...pereo/cas/memcached/kryo/serial/URLSerializer.java | 16.66% <0%> (+16.66%) | 1% <0%> (+1%) | :arrow_up: |\n| ...cas/memcached/kryo/serial/ThrowableSerializer.java | 18.18% <0%> (+18.18%) | 2% <0%> (+2%) | :arrow_up: |\n| ...g/apereo/cas/monitor/MemcachedHealthIndicator.java | 22.5% <0%> (+22.5%) | 4% <0%> (+4%) | :arrow_up: |\n| .../java/org/apereo/cas/memcached/MemcachedUtils.java | 36.36% <0%> (+36.36%) | 2% <0%> (+2%) | :arrow_up: |\n| ...java/org/apereo/cas/ticket/code/OAuthCodeImpl.java | 52.94% <0%> (+52.94%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b982aa...065d77d. Read the comment docs.\n. # Codecov Report\nMerging #3819 into master will increase coverage by 1.21%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3819      +/-\n============================================\n+ Coverage     32.83%   34.05%   +1.21%   \n- Complexity     2683     2753      +70   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8211     8516     +305   \n+ Misses        15898    15580     -318   \n- Partials        900      913      +13\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ached/kryo/serial/RegisteredServiceSerializer.java | 1.66% <0%> (+1.66%) | 1% <0%> (+1%) | :arrow_up: |\n| ...thentication/principal/AbstractServiceFactory.java | 46.15% <0%> (+7.69%) | 7% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 75.92% <0%> (+11.11%) | 14% <0%> (+6%) | :arrow_up: |\n| ...pereo/cas/memcached/kryo/serial/URLSerializer.java | 16.66% <0%> (+16.66%) | 1% <0%> (+1%) | :arrow_up: |\n| ...cas/memcached/kryo/serial/ThrowableSerializer.java | 18.18% <0%> (+18.18%) | 2% <0%> (+2%) | :arrow_up: |\n| ...g/apereo/cas/monitor/MemcachedHealthIndicator.java | 22.5% <0%> (+22.5%) | 4% <0%> (+4%) | :arrow_up: |\n| .../java/org/apereo/cas/memcached/MemcachedUtils.java | 36.36% <0%> (+36.36%) | 2% <0%> (+2%) | :arrow_up: |\n| ...java/org/apereo/cas/ticket/code/OAuthCodeImpl.java | 52.94% <0%> (+52.94%) | 1% <0%> (+1%) | :arrow_up: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7b982aa...065d77d. Read the comment docs.\n. # Codecov Report\nMerging #3820 into 6.0.x will decrease coverage by 28.38%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@              Coverage Diff              @@\n6.0.x    #3820       +/-\n=============================================\n- Coverage     61.82%   33.44%   -28.39%   \n+ Complexity     6226     2619     -3607   \n=============================================\n  Files          1455     1144      -311   \n  Lines         31063    24264     -6799   \n  Branches       2894     2198      -696   \n=============================================\n- Hits          19206     8114    -11092   \n- Misses         9996    15282     +5286   \n+ Partials       1861      868      -993\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...auth/GoogleAuthenticatorAuthenticationHandler.java | 16.21% <\u00f8> (-62.17%) | 2 <0> (-8) | |\n| ...uilders/subject/SamlProfileSamlSubjectBuilder.java | 72.97% <\u00f8> (\u00f8) | 10 <0> (\u00f8) | :arrow_down: |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <\u00f8> (-100%) | 0 <0> (-2) | |\n| ...so/request/DefaultSSOSamlHttpRequestExtractor.java | 7.14% <\u00f8> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <\u00f8> (\u00f8) | 4 <0> (-1) | :arrow_down: |\n| ...cipalAttributeAcceptableUsagePolicyRepository.java | 42.85% <\u00f8> (-21.43%) | 3 <0> (-1) | |\n| ...nse/soap/SamlProfileSamlSoap11ResponseBuilder.java | 12.9% <\u00f8> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...ers/enc/validate/SamlObjectSignatureValidator.java | 56.48% <\u00f8> (\u00f8) | 9 <0> (\u00f8) | :arrow_down: |\n| ...as/aup/CouchDbAcceptableUsagePolicyRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| .../idp/profile/builders/enc/SamlIdPObjectSigner.java | 77.77% <66.66%> (-1.36%) | 12 <0> (\u00f8) | |\n| ... and 901 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0820206...7b4e31d. Read the comment docs.\n. # Codecov Report\nMerging #3820 into 6.0.x will decrease coverage by 28.38%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@              Coverage Diff              @@\n6.0.x    #3820       +/-\n=============================================\n- Coverage     61.82%   33.44%   -28.39%   \n+ Complexity     6226     2619     -3607   \n=============================================\n  Files          1455     1144      -311   \n  Lines         31063    24264     -6799   \n  Branches       2894     2198      -696   \n=============================================\n- Hits          19206     8114    -11092   \n- Misses         9996    15282     +5286   \n+ Partials       1861      868      -993\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...auth/GoogleAuthenticatorAuthenticationHandler.java | 16.21% <\u00f8> (-62.17%) | 2 <0> (-8) | |\n| ...uilders/subject/SamlProfileSamlSubjectBuilder.java | 72.97% <\u00f8> (\u00f8) | 10 <0> (\u00f8) | :arrow_down: |\n| ...eb/flow/YubiKeyAccountCheckRegistrationAction.java | 0% <\u00f8> (-100%) | 0 <0> (-2) | |\n| ...so/request/DefaultSSOSamlHttpRequestExtractor.java | 7.14% <\u00f8> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <\u00f8> (\u00f8) | 4 <0> (-1) | :arrow_down: |\n| ...cipalAttributeAcceptableUsagePolicyRepository.java | 42.85% <\u00f8> (-21.43%) | 3 <0> (-1) | |\n| ...nse/soap/SamlProfileSamlSoap11ResponseBuilder.java | 12.9% <\u00f8> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...ers/enc/validate/SamlObjectSignatureValidator.java | 56.48% <\u00f8> (\u00f8) | 9 <0> (\u00f8) | :arrow_down: |\n| ...as/aup/CouchDbAcceptableUsagePolicyRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| .../idp/profile/builders/enc/SamlIdPObjectSigner.java | 77.77% <66.66%> (-1.36%) | 12 <0> (\u00f8) | |\n| ... and 901 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0820206...7b4e31d. Read the comment docs.\n. # Codecov Report\nMerging #3821 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3821      +/-\n============================================\n+ Coverage     34.03%   34.05%   +0.01%   \n- Complexity     2747     2751       +4   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8512     8517       +5   \n+ Misses        15583    15577       -6   \n- Partials        914      915       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+7.4%) | 11% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c289dcb...6a61eea. Read the comment docs.\n. # Codecov Report\nMerging #3821 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3821      +/-\n============================================\n+ Coverage     34.03%   34.05%   +0.01%   \n- Complexity     2747     2751       +4   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8512     8517       +5   \n+ Misses        15583    15577       -6   \n- Partials        914      915       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+7.4%) | 11% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c289dcb...6a61eea. Read the comment docs.\n. # Codecov Report\nMerging #3822 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3822      +/-\n============================================\n+ Coverage     34.03%   34.04%   +<.01%   \n- Complexity     2748     2751       +3   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8513     8515       +2   \n+ Misses        15581    15578       -3   \n- Partials        915      916       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+7.4%) | 11% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd9fcc3...723f12c. Read the comment docs.\n. # Codecov Report\nMerging #3824 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3824      +/-\n============================================\n+ Coverage     34.03%   34.05%   +0.01%   \n- Complexity     2748     2752       +4   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8513     8518       +5   \n+ Misses        15581    15575       -6   \n- Partials        915      916       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+7.4%) | 11% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd9fcc3...16c1265. Read the comment docs.\n. # Codecov Report\nMerging #3824 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3824      +/-\n============================================\n+ Coverage     34.03%   34.05%   +0.01%   \n- Complexity     2748     2752       +4   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8513     8518       +5   \n+ Misses        15581    15575       -6   \n- Partials        915      916       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 72.22% <0%> (+7.4%) | 11% <0%> (+3%) | :arrow_up: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 38.46% <0%> (+7.69%) | 4% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd9fcc3...16c1265. Read the comment docs.\n. # Codecov Report\nMerging #3825 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3825      +/-\n============================================\n- Coverage     34.03%   34.03%   -0.01%   \n+ Complexity     2748     2747       -1   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n- Hits           8513     8512       -1   \n- Misses        15581    15583       +2   \n+ Partials        915      914       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../idp/profile/builders/enc/SamlIdPObjectSigner.java | 72.38% <\u00f8> (\u00f8) | 15 <0> (\u00f8) | :arrow_down: |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd9fcc3...444c756. Read the comment docs.\n. # Codecov Report\nMerging #3826 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3826      +/-\n============================================\n- Coverage     34.03%   34.02%   -0.02%   \n+ Complexity     2748     2747       -1   \n============================================\n  Files          1174     1174            \n  Lines         25009    25016       +7   \n  Branches       2235     2237       +2   \n============================================\n- Hits           8513     8512       -1   \n- Misses        15581    15590       +9   \n+ Partials        915      914       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...resource/AbstractResourceBasedServiceRegistry.java | 0% <0%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd9fcc3...ca6b87b. Read the comment docs.\n. # Codecov Report\nMerging #3826 into master will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3826      +/-\n============================================\n- Coverage     34.01%   33.99%   -0.03%   \n+ Complexity     2748     2747       -1   \n============================================\n  Files          1174     1174            \n  Lines         25009    25016       +7   \n  Branches       2235     2237       +2   \n============================================\n- Hits           8508     8505       -3   \n- Misses        15586    15596      +10   \n  Partials        915      915\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...resource/AbstractResourceBasedServiceRegistry.java | 0% <0%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 66.66% <0%> (-5.56%) | 10% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (+1.31%) | 15% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea919b6...646d94a. Read the comment docs.\n. # Codecov Report\nMerging #3827 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3827      +/-\n============================================\n+ Coverage     34.01%   34.03%   +0.01%   \n+ Complexity     2748     2747       -1   \n============================================\n  Files          1174     1174            \n  Lines         25009    25009            \n  Branches       2235     2235            \n============================================\n+ Hits           8508     8512       +4   \n+ Misses        15586    15583       -3   \n+ Partials        915      914       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 64.81% <0%> (-7.41%) | 8% <0%> (-3%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 88% <0%> (+6%) | 17% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ea919b6...1f45b96. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (6.0.x@9e8bc3a). Click here to learn what that means.\nThe diff coverage is 68.18%.\n\n\n```diff\n@@           Coverage Diff            @@\n6.0.x    #3830   +/-\n========================================\n  Coverage         ?   33.46%         \n  Complexity       ?     2623         \n========================================\n  Files            ?     1144         \n  Lines            ?    24279         \n  Branches         ?     2202         \n========================================\n  Hits             ?     8126         \n  Misses           ?    15283         \n  Partials         ?      870\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../apereo/cas/services/CouchbaseServiceRegistry.java | 72.46% <68.18%> (\u00f8) | 13 <4> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9e8bc3a...62e5ade. Read the comment docs.\n. # Codecov Report\nMerging #3831 into master will decrease coverage by 13.62%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3831       +/-\n=============================================\n- Coverage     61.62%   47.99%   -13.63%   \n+ Complexity     6385     5191     -1194   \n=============================================\n  Files          1487     1487             \n  Lines         31898    31898             \n  Branches       2948     2948             \n=============================================\n- Hits          19658    15311     -4347   \n- Misses        10329    15152     +4823   \n+ Partials       1911     1435      -476\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...g/apereo/cas/services/DynamoDbServiceRegistry.java | 0% <0%> (-100%) | 0% <0%> (-8%) | |\n| .../src/main/java/org/apereo/cas/MongoDbProperty.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...services/CouchbaseRegisteredServiceSavedEvent.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 245 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3ac0a2...2b9d518. Read the comment docs.\n. # Codecov Report\nMerging #3832 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3832      +/-\n============================================\n+ Coverage     61.62%   61.63%   +<.01%   \n+ Complexity     6385     6383       -2   \n============================================\n  Files          1487     1487            \n  Lines         31898    31898            \n  Branches       2948     2948            \n============================================\n+ Hits          19658    19661       +3   \n  Misses        10329    10329            \n+ Partials       1911     1908       -3\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/consent/GroovyConsentRepository.java | 86.66% <0%> (-13.34%) | 6% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 75.92% <0%> (-7.41%) | 9% <0%> (-3%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 93.75% <0%> (-6.25%) | 9% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 72.72% <0%> (+3.03%) | 9% <0%> (+1%) | :arrow_up: |\n| ...resource/AbstractResourceBasedServiceRegistry.java | 58.22% <0%> (+3.79%) | 22% <0%> (+2%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f3ac0a2...c058a66. Read the comment docs.\n. # Codecov Report\nMerging #3836 into 6.0.x will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3836      +/-\n============================================\n- Coverage     33.47%   33.45%   -0.02%   \n+ Complexity     2624     2622       -2   \n============================================\n  Files          1144     1144            \n  Lines         24279    24279            \n  Branches       2202     2202            \n============================================\n- Hits           8127     8123       -4   \n- Misses        15281    15286       +5   \n+ Partials        871      870       -1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 69.73% <0%> (-1.32%) | 14% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c8c9a27...0cbc01c. Read the comment docs.\n. # Codecov Report\nMerging #3839 into 6.0.x will increase coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3839      +/-\n============================================\n+ Coverage     33.43%   33.46%   +0.02%   \n- Complexity     2621     2623       +2   \n============================================\n  Files          1144     1144            \n  Lines         24279    24279            \n  Branches       2202     2202            \n============================================\n+ Hits           8118     8124       +6   \n+ Misses        15290    15284       -6   \n  Partials        871      871\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...DisplayBeforePasswordlessAuthenticationAction.java | 0% <0%> (\u00f8) | 0 <0> (\u00f8) | :arrow_down: |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6fdf1b4...8d1b6a9. Read the comment docs.\n. # Codecov Report\nMerging #3840 into master will decrease coverage by 61.3%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3840       +/-\n============================================\n- Coverage      61.3%      0%   -61.31%   \n============================================\n  Files          1506    1205      -301   \n  Lines         32339   25723     -6616   \n  Branches       2989    2299      -690   \n============================================\n- Hits          19826       0    -19826   \n- Misses        10596   25723    +15127   \n+ Partials       1917       0     -1917\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...pereo/cas/util/ProxyGrantingTicketIdGenerator.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...as/oidc/discovery/OidcServerDiscoverySettings.java | 0% <0%> (-100%) | 0% <0%> (-9%) | |\n| ...SamlProfileAttributeQueryFaultResponseBuilder.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...cipal/DefaultPrincipalResolutionExecutionPlan.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...cas/web/flow/resolver/CasWebflowEventResolver.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| .../discovery/OidcServerDiscoverySettingsFactory.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...thentication/principal/GroovyPrincipalFactory.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../fingerprint/DefaultDeviceFingerprintStrategy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...ion/principal/SimpleWebApplicationServiceImpl.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...ereo/cas/web/flow/login/InitializeLoginAction.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 1344 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 411fbe6...52ce3c1. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@09290c0). Click here to learn what that means.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3845   +/-\n=========================================\n  Coverage          ?   33.78%         \n  Complexity        ?     2824         \n=========================================\n  Files             ?     1205         \n  Lines             ?    25724         \n  Branches          ?     2299         \n=========================================\n  Hits              ?     8691         \n  Misses            ?    16107         \n  Partials          ?      926\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...rg/apereo/cas/support/oauth/util/OAuth20Utils.java | 12.76% <0%> (\u00f8) | 5 <0> (?) | |\n| ...apereo/cas/support/oauth/OAuth20ResponseTypes.java | 100% <100%> (\u00f8) | 2 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09290c0...43fcb5e. Read the comment docs.\n. # Codecov Report\nMerging #3847 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3847      +/-\n============================================\n+ Coverage      61.5%   61.52%   +0.01%   \n- Complexity     6485     6487       +2   \n============================================\n  Files          1509     1509            \n  Lines         32398    32398            \n  Branches       2988     2988            \n============================================\n+ Hits          19926    19932       +6   \n+ Misses        10550    10544       -6   \n  Partials       1922     1922\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...o/cas/ticket/registry/MemcachedTicketRegistry.java | 81.48% <0%> (+3.7%) | 14% <0%> (+1%) | :arrow_up: |\n| ...cached/MemcachedPooledClientConnectionFactory.java | 63.88% <0%> (+11.11%) | 5% <0%> (+1%) | :arrow_up: |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 15.38% <0%> (+15.38%) | 1% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09290c0...f1be68c. Read the comment docs.\n. # Codecov Report\nMerging #3847 into master will decrease coverage by 33.58%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3847       +/-\n=============================================\n- Coverage      61.5%   27.91%   -33.59%   \n+ Complexity     6485     2968     -3517   \n=============================================\n  Files          1509     1509             \n  Lines         32398    32399        +1   \n  Branches       2988     2988             \n=============================================\n- Hits          19926     9045    -10881   \n- Misses        10550    22394    +11844   \n+ Partials       1922      960      -962\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...wsfederation/web/WsFederationCookieSerializer.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...aptors/yubikey/DenyAllYubiKeyAccountValidator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...on/AbstractCasProtocolValidationSpecification.java | 0% <0%> (-100%) | 0% <0%> (-7%) | |\n| ...a/org/apereo/cas/adaptors/radius/RadiusServer.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 798 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09290c0...d20bb70. Read the comment docs.\n. # Codecov Report\nMerging #3848 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3848      +/-\n============================================\n- Coverage      61.5%   61.48%   -0.02%   \n+ Complexity     6485     6481       -4   \n============================================\n  Files          1509     1509            \n  Lines         32398    32399       +1   \n  Branches       2988     2988            \n============================================\n- Hits          19926    19921       -5   \n- Misses        10550    10555       +5   \n- Partials       1922     1923       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...apereo/cas/support/oauth/OAuth20ResponseTypes.java | 100% <100%> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 79.62% <0%> (-3.71%) | 10% <0%> (-2%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 15.38% <0%> (+15.38%) | 1% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09290c0...bf97159. Read the comment docs.\n. # Codecov Report\nMerging #3848 into master will decrease coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3848      +/-\n============================================\n- Coverage      61.5%   61.48%   -0.02%   \n+ Complexity     6485     6481       -4   \n============================================\n  Files          1509     1509            \n  Lines         32398    32399       +1   \n  Branches       2988     2988            \n============================================\n- Hits          19926    19921       -5   \n- Misses        10550    10555       +5   \n- Partials       1922     1923       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...apereo/cas/support/oauth/OAuth20ResponseTypes.java | 100% <100%> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...support/events/dao/InfluxDbCasEventRepository.java | 82% <0%> (-6%) | 16% <0%> (-1%) | |\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 79.62% <0%> (-3.71%) | 10% <0%> (-2%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n| ...Auth20ResourceOwnerCredentialsResponseBuilder.java | 15.38% <0%> (+15.38%) | 1% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 09290c0...bf97159. Read the comment docs.\n. # Codecov Report\nMerging #3850 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster   #3850      +/-\n===========================================\n- Coverage     27.92%   27.9%   -0.02%   \n  Complexity     2968    2968            \n===========================================\n  Files          1509    1511       +2   \n  Lines         32398   32414      +16   \n  Branches       2988    2988            \n===========================================\n- Hits           9046    9045       -1   \n- Misses        22392   22408      +16   \n- Partials        960     961       +1\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...itIdTokenAndTokenAuthorizationResponseBuilder.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...okenResponseTypeAuthorizationRequestValidator.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...dcImplicitIdTokenAuthorizationResponseBuilder.java | 38.46% <0%> (\u00f8) | 2 <0> (\u00f8) | :arrow_down: |\n| ...okenResponseTypeAuthorizationRequestValidator.java | 66.66% <0%> (\u00f8) | 1 <0> (\u00f8) | :arrow_down: |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ...reo/cas/couchbase/core/CouchbaseClientFactory.java | 71.05% <0%> (+1.31%) | 15% <0%> (+1%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 93300a9...0a8890b. Read the comment docs.\n. # Codecov Report\nMerging #3851 into master will decrease coverage by 0.42%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3851      +/-\n============================================\n- Coverage     27.87%   27.45%   -0.43%   \n+ Complexity     2962     2917      -45   \n============================================\n  Files          1513     1513            \n  Lines         32438    32438            \n  Branches       2988     2988            \n============================================\n- Hits           9042     8905     -137   \n- Misses        22436    22607     +171   \n+ Partials        960      926      -34\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...pereo/cas/pm/PasswordResetTokenCipherExecutor.java | 0% <0%> (-100%) | 0% <0%> (-4%) | |\n| ...eb/flow/actions/VerifySecurityQuestionsAction.java | 0% <0%> (-84.22%) | 0% <0%> (-3%) | |\n| ...as/pm/web/flow/PasswordManagementWebflowUtils.java | 0% <0%> (-82.61%) | 0% <0%> (-8%) | |\n| .../impl/GroovyResourcePasswordManagementService.java | 0% <0%> (-66.67%) | 0% <0%> (-4%) | |\n| .../factory/DefaultTransientSessionTicketFactory.java | 0% <0%> (-66.67%) | 0% <0%> (-1%) | |\n| ...flow/actions/VerifyPasswordResetRequestAction.java | 0% <0%> (-59.38%) | 0% <0%> (-3%) | |\n| ...s/pm/web/flow/actions/InitPasswordResetAction.java | 0% <0%> (-53.85%) | 0% <0%> (-2%) | |\n| ...w/actions/SendPasswordResetInstructionsAction.java | 0% <0%> (-52.09%) | 0% <0%> (-4%) | |\n| .../org/apereo/cas/util/io/CommunicationsManager.java | 4.25% <0%> (-38.3%) | 3% <0%> (-8%) | |\n| ...n/java/org/apereo/cas/util/io/GroovySmsSender.java | 71.42% <0%> (-28.58%) | 3% <0%> (-1%) | |\n| ... and 16 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5e823ec...73b1a15. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@8f45a7b). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3854   +/-\n=========================================\n  Coverage          ?   23.35%         \n  Complexity        ?     2601         \n=========================================\n  Files             ?     1517         \n  Lines             ?    32526         \n  Branches          ?     2997         \n=========================================\n  Hits              ?     7598         \n  Misses            ?    24132         \n  Partials          ?      796\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...s/discovery/CasServerDiscoveryProfileEndpoint.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8f45a7b...5d551fc. Read the comment docs.\n. # Codecov Report\nMerging #3857 into master will decrease coverage by 35.26%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3857       +/-\n=============================================\n- Coverage     57.95%   22.69%   -35.27%   \n+ Complexity     6213     2536     -3677   \n=============================================\n  Files          1517     1517             \n  Lines         32526    32526             \n  Branches       2997     2997             \n=============================================\n- Hits          18851     7381    -11470   \n- Misses        11857    24368    +12511   \n+ Partials       1818      777     -1041\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...rg/apereo/cas/adaptors/yubikey/YubiKeyAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...wsfederation/web/WsFederationCookieSerializer.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...aptors/yubikey/DenyAllYubiKeyAccountValidator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...on/AbstractCasProtocolValidationSpecification.java | 0% <0%> (-100%) | 0% <0%> (-7%) | |\n| ... and 820 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 328948c...8f09af6. Read the comment docs.\n. # Codecov Report\nMerging #3858 into master will increase coverage by 51.35%.\nThe diff coverage is 68.29%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3858       +/-\n=============================================\n+ Coverage     10.31%   61.67%   +51.35%   \n- Complexity     1084     6551     +5467   \n=============================================\n  Files          1214     1519      +305   \n  Lines         25933    32625     +6692   \n  Branches       2318     3008      +690   \n=============================================\n+ Hits           2676    20122    +17446   \n+ Misses        23003    10554    -12449   \n- Partials        254     1949     +1695\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../org/apereo/cas/redis/core/RedisObjectFactory.java | 74.6% <68.29%> (+74.6%) | 11 <6> (+11) | :arrow_up: |\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...ion/AbstractMultifactorAuthenticationProvider.java | 25% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 11.76% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...eb/authn/UmaRequestingPartyTokenAuthenticator.java | 100% <0%> (\u00f8) | 3% <0%> (?) | |\n| ... and 1195 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49253aa...6d209b6. Read the comment docs.\n. # Codecov Report\nMerging #3859 into master will decrease coverage by 33.54%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster   #3859       +/-\n============================================\n- Coverage     61.54%     28%   -33.55%   \n+ Complexity     6514    2995     -3519   \n============================================\n  Files          1517    1518        +1   \n  Lines         32554   32605       +51   \n  Branches       2996    3004        +8   \n============================================\n- Hits          20036    9130    -10906   \n- Misses        10580   22497    +11917   \n+ Partials       1938     978      -960\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...reo/cas/util/crypto/GlibcCryptPasswordEncoder.java | 0% <0%> (\u00f8) | 0 <0> (?) | |\n| ...ication/support/password/PasswordEncoderUtils.java | 11.36% <0%> (-19.41%) | 2 <0> (-2) | |\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...wsfederation/web/WsFederationCookieSerializer.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...aptors/yubikey/DenyAllYubiKeyAccountValidator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 810 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 386c93e...39a532d. Read the comment docs.\n. # Codecov Report\nMerging #3860 into master will decrease coverage by 33.56%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3860       +/-\n=============================================\n- Coverage     61.58%   28.01%   -33.57%   \n+ Complexity     6515     2989     -3526   \n=============================================\n  Files          1517     1517             \n  Lines         32557    32557             \n  Branches       2998     2998             \n=============================================\n- Hits          20049     9121    -10928   \n- Misses        10564    22459    +11895   \n+ Partials       1944      977      -967\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...wsfederation/web/WsFederationCookieSerializer.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...aptors/yubikey/DenyAllYubiKeyAccountValidator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...on/AbstractCasProtocolValidationSpecification.java | 0% <0%> (-100%) | 0% <0%> (-7%) | |\n| ...a/org/apereo/cas/adaptors/radius/RadiusServer.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 802 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 27c44b4...fc6c280. Read the comment docs.\n. # Codecov Report\nMerging #3860 into master will decrease coverage by 33.56%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3860       +/-\n=============================================\n- Coverage     61.58%   28.01%   -33.57%   \n+ Complexity     6515     2989     -3526   \n=============================================\n  Files          1517     1517             \n  Lines         32557    32557             \n  Branches       2998     2998             \n=============================================\n- Hits          20049     9121    -10928   \n- Misses        10564    22459    +11895   \n+ Partials       1944      977      -967\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...tication/principal/TokenWebApplicationService.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...rg/apereo/cas/adaptors/generic/CasUserAccount.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...n/principal/PrincipalBearingPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...hentication/principal/OpenIdPrincipalResolver.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...ava/org/apereo/cas/web/view/Cas20ResponseView.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...wsfederation/web/WsFederationCookieSerializer.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...aptors/yubikey/DenyAllYubiKeyAccountValidator.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ...on/AbstractCasProtocolValidationSpecification.java | 0% <0%> (-100%) | 0% <0%> (-7%) | |\n| ...a/org/apereo/cas/adaptors/radius/RadiusServer.java | 0% <0%> (-100%) | 0% <0%> (-1%) | |\n| ... and 802 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 27c44b4...fc6c280. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@49253aa). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #3862   +/-\n========================================\n  Coverage          ?   6.35%         \n  Complexity        ?     862         \n========================================\n  Files             ?    1519         \n  Lines             ?   32622         \n  Branches          ?    3007         \n========================================\n  Hits              ?    2072         \n  Misses            ?   30352         \n  Partials          ?     198\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49253aa...f2b8d5b. Read the comment docs.\n. # Codecov Report\nMerging #3863 into 6.0.x will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3863      +/-\n============================================\n- Coverage     48.97%   48.91%   -0.07%   \n+ Complexity     5153     5146       -7   \n============================================\n  Files          1456     1456            \n  Lines         31130    31130            \n  Branches       2905     2905            \n============================================\n- Hits          15247    15227      -20   \n- Misses        14451    14475      +24   \n+ Partials       1432     1428       -4\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 35.18% <0%> (-31.49%) | 5% <0%> (-4%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 93.75% <0%> (-6.25%) | 9% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 04a7ff0...7595535. Read the comment docs.\n. # Codecov Report\nMerging #3863 into 6.0.x will decrease coverage by 0.06%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff              @@\n6.0.x    #3863      +/-\n============================================\n- Coverage     48.97%   48.91%   -0.07%   \n+ Complexity     5153     5146       -7   \n============================================\n  Files          1456     1456            \n  Lines         31130    31130            \n  Branches       2905     2905            \n============================================\n- Hits          15247    15227      -20   \n- Misses        14451    14475      +24   \n+ Partials       1432     1428       -4\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ava/org/apereo/cas/util/io/PathWatcherService.java | 35.18% <0%> (-31.49%) | 5% <0%> (-4%) | |\n| ...ava/org/apereo/cas/util/io/FileWatcherService.java | 30.76% <0%> (-7.7%) | 3% <0%> (-1%) | |\n| ...yThrottledSubmissionHandlerInterceptorAdapter.java | 93.75% <0%> (-6.25%) | 9% <0%> (-1%) | |\n| ...ereo/cas/monitor/AbstractCacheHealthIndicator.java | 69.69% <0%> (-3.04%) | 8% <0%> (-1%) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 04a7ff0...7595535. Read the comment docs.\n. # Codecov Report\nMerging #3864 into master will increase coverage by 17.79%.\nThe diff coverage is 36.36%.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3864       +/-\n=============================================\n+ Coverage     10.31%   28.11%   +17.79%   \n- Complexity     1084     3014     +1930   \n=============================================\n  Files          1214     1519      +305   \n  Lines         25933    32633     +6700   \n  Branches       2318     3009      +691   \n=============================================\n+ Hits           2676     9176     +6500   \n+ Misses        23003    22476      -527   \n- Partials        254      981      +727\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...e/src/main/java/org/apereo/cas/util/LdapUtils.java | 50.63% <36.36%> (+50.63%) | 52 <0> (+52) | :arrow_up: |\n| ...ion/AbstractMultifactorAuthenticationProvider.java | 25% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...eb/authn/UmaRequestingPartyTokenAuthenticator.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...t/pac4j/logout/CasServerSpecificLogoutHandler.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ... and 764 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49253aa...28c267f. Read the comment docs.\n. # Codecov Report\nMerging #3865 into master will increase coverage by 51.27%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3865       +/-\n=============================================\n+ Coverage     10.31%   61.59%   +51.27%   \n- Complexity     1084     6539     +5455   \n=============================================\n  Files          1214     1519      +305   \n  Lines         25933    32627     +6694   \n  Branches       2318     3007      +689   \n=============================================\n+ Hits           2676    20095    +17419   \n+ Misses        23003    10582    -12421   \n- Partials        254     1950     +1696\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| .../support/AbstractWrapperAuthenticationHandler.java | 73.68% <0%> (\u00f8) | 5% <0%> (+1%) | :arrow_up: |\n| ...uthentication/adaptive/geo/GeoLocationRequest.java | 66.66% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...ion/AbstractMultifactorAuthenticationProvider.java | 25% <0%> (\u00f8) | 2% <0%> (+1%) | :arrow_up: |\n| ...s/web/report/ExportRegisteredServicesEndpoint.java | 0% <0%> (\u00f8) | 0% <0%> (?) | |\n| ...ain/java/org/apereo/cas/grouper/GrouperFacade.java | 11.76% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...aptors/generic/remote/RemoteAddressCredential.java | 100% <0%> (\u00f8) | 2% <0%> (?) | |\n| ...ntication/principal/X509CertificateCredential.java | 80% <0%> (\u00f8) | 5% <0%> (?) | |\n| ...reo/cas/pm/jdbc/JdbcPasswordManagementService.java | 61.76% <0%> (\u00f8) | 6% <0%> (?) | |\n| ...eb/authn/UmaRequestingPartyTokenAuthenticator.java | 100% <0%> (\u00f8) | 3% <0%> (?) | |\n| ...tion/revocation/checker/NoOpRevocationChecker.java | 100% <0%> (\u00f8) | 1% <0%> (?) | |\n| ... and 1194 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 49253aa...71dc340. Read the comment docs.\n. \n",
    "welcome[bot]": "Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. Congratulations on merging your first pull request here! :tada: Excellent work! Keep'em coming.\n. Thank you so much for opening your first pull request here!\n. ",
    "gagarski": "@mmoayyed done. I've got rid of vals.. Regarding the first, I don't understand the reasons for failing test. Guess I'll have to undo my changes to OAuthRegisteredService (bring HashSet back) but I am not sure.. Regarding the example, here it is: https://github.com/gagarski/cas-overlay-template. I've slightly adjusted config locations for this example so you don't have to copy anything to /etc: etc dir in the project root is a root for config for this overlay. To run it you just have to do mvn clean package and java -jar target/cas.war. The YAML service storage is in ./etc/cas/services.\nFirst of all, I've started it and ensured that casuser:Mellon are the only valid credentials.\nThen I did the following requests:\n```\n$ curl -k -X POST -d \"client_id=whatever&client_secret=totallysecrettrustme&grant_type=password&username=casuser&password=Mellon\" https://localhost:8443/cas/oauth2.0/accessToken\n{\"access_token\":\"AT-3-SJswJRSEd7fwDGEWHpt1Hoe4beuMBBsH\",\"token_type\":\"bearer\",\"expires_in\":28800}%                                                                                                          \n$ curl -k -X POST -d \"client_id=whatever&client_secret=totallysecrettrustme&grant_type=password&username=johndoe&password=helloworld\" https://localhost:8443/cas/oauth2.0/accessToken\n{\"access_token\":\"AT-4-jaXM33Mm7YRYB9eRJiAmBnNzlqaPmA4A\",\"token_type\":\"bearer\",\"expires_in\":28800}%                                                                                                          \n$ curl -k -X POST -d \"client_id=whatever&client_secret=totallysecrettrustme&grant_type=password\" https://localhost:8443/cas/oauth2.0/accessToken \n{\"access_token\":\"AT-5-NISzdpVTn09CzQcFs48-UGZZC-pFOtnU\",\"token_type\":\"bearer\",\"expires_in\":28800}%                                                                                                          \n$ curl -k -X GET \"https://localhost:8443/cas/oauth2.0/profile?access_token=AT-3-SJswJRSEd7fwDGEWHpt1Hoe4beuMBBsH\"\n{\n  \"attributes\" : { },\n  \"id\" : \"whatever\"\n}%                                                                                                                                                                                                          \n$ curl -k -X GET \"https://localhost:8443/cas/oauth2.0/profile?access_token=AT-4-jaXM33Mm7YRYB9eRJiAmBnNzlqaPmA4A\"\n{\n  \"attributes\" : { },\n  \"id\" : \"whatever\"\n}%                                                                                                                                                                                                          \n$ curl -k -X GET \"https://localhost:8443/cas/oauth2.0/profile?access_token=AT-5-NISzdpVTn09CzQcFs48-UGZZC-pFOtnU\"\n{\n  \"attributes\" : { },\n  \"id\" : \"whatever\"\n}%                                                                                                                                                                                                        \n```\n. @mmoayyed What should I do to run all the tests locally? It seems like both ./gradlew build and ./gradlew test skip it and using CI to debug my changes step by step is not very convenient.. > Things might work well on your machine and pass all fine, but CI is the reference :)\nYeah, of course. I just meant that I want to debug it on my local machine before pushing again.\nThanks for your response.. Regarding OAuth flows. It seems like the password flow in CAS does the same as client_credentials (but for the latter it's correct behavior). One thing that confuses me a bit is that for client_credentials it returns client_id in the id profile field. It may be the intended behavior, yet I thought it worth mentioning.. We just tried to user password flow for quick debugging purposes and included client_secret \"because we can\". Yeah it seems to work properly without client_secret on my example project (I get right id), I'll check attribute fetching later. But I am still not sure if the behavior with client_secret present in the request is correct. Isn't a confidential client with password flow a valid case?\nAbout this PR: I'll try to finish my work this or next week.. I've dug a little more into CAS source code.\nSeems like grant_type checking is intended to be implemented in the following classes:\n - OAuth20ClientCredentialsGrantTypeAuthorizationRequestValidator\n - OAuth20PasswordGrantTypeAuthorizationRequestValidator\n - OAuth20RefreshTokenGrantTypeAuthorizationRequestValidator\nFor some reason the instances of these validators are passed into OAuth20AuthorizeEndpointController. The thing is that /authorize endpoint should never receive grant_type parameter, but token endpoint should have it.\nSo, my guess for now is to add the logic for grant type checking to GrantTypeTokenRequestValidator as I did (perhaps reusing your logic from OAuth20Utils) and get rid of the classes listed above (they are just useless). Is that right?. No. Here is how authorize endpoint controller created in master:\nhttps://github.com/apereo/cas/blob/b90bdf6a224fa4625c38e311e5e47155b7f55dbf/support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java#L670-L687\nAnd here are oauthAuthorizationRequestValidators:\nhttps://github.com/apereo/cas/blob/b90bdf6a224fa4625c38e311e5e47155b7f55dbf/support/cas-server-support-oauth/src/main/java/org/apereo/cas/config/CasOAuthConfiguration.java#L499-L509\nAs you can see, all *GrantTypeRequestValidators are added to this controller.\nFor now I've removed them (but haven't pushed it yet) and trying to make tests work on my machines. But maybe I miss something in OAuth protocol? \n\nEach validator operates on the request/thing it can validate. If it can't, it will ignore it and move on.\n\nYeah, this kinda saves us from breaking the whole OAuth 2.0 support apart because of missing grant_type in /authorize controller.. A reminder to myself: take a look on OIDC endpoints. The same things can probably happen there.. Didn't manage to make ./run-tests-simple.sh run on my machine It fails with a test unrelated to my changes.\n```\norg.apereo.cas.DefaultPrincipalAttributesRepositoryTests > checkDefaultAttributes FAILED\n    java.lang.AssertionError: expected:<3> but was:<0>\n        at org.junit.Assert.fail(Assert.java:88)\n        at org.junit.Assert.failNotEquals(Assert.java:834)\n        at org.junit.Assert.assertEquals(Assert.java:645)\n        at org.junit.Assert.assertEquals(Assert.java:631)\n        at org.apereo.cas.DefaultPrincipalAttributesRepositoryTests.checkDefaultAttributes(DefaultPrincipalAttributesRepositoryTests.java:80)\n```\nHowever, I've managed to run tests only for specific module and they've passed. Hope it will work with CI.. > Validators operate based on the request that can be operated on and one that can support. If they can't support the request and they don't recognize it, they will skip it and move on, allowing the next validator in the chain to handle the processing. \nI understand that. My point is /authorize endpoint never receives grant_type parameter -> supports always returns false -> validate is never called. Since *GrantTypeAuthorizationRequestValidators are not used anywheere else, they are effectively dead code. That's why I've removed them and related tests and I think they should probably removed rom the master too. But I can restore them if I am wrong.\nRegarding *GrantTypeTokenRequestValidators (without Authorize): i found a commit that does the same (20dae32233a84b66e543a197525eecaf8554f676). The code there does quite the same yet a bit differently. It might be better to backport it here, yet I'd fix some issues there (grandType -> grantType and using OAuth20Utils.isAuthorizedGrantTypeForService() instead of reimplementing it).\nThe rest of changes is tests that verify the new behaviour. I think they could be ported to master as is. . So, that how I see the further work here now:\n\n[x] Fix typos and code duplication for /token validators in master branch (separate PR).\n[x] Port /token validators changes from master to this branch, replacing current implementation to reduce the difference in code base.\n[x] Copy tests from this PR to master branch (for now they seem more complete) (separate PR).\n[x] Remove redundant validators for /authorize endpoint in master (if they are really redundant).\n~~[ ] Restore validators for /authorize endpoint in this PR (if they are actually not redundant or if we want to keep then for some other reasons).~~\n\nCould you please give a feedback on all these points when you are ready?\n. Now this PR is basically a combination of the following ported to 5.3 branch:\n - 20dae32\n - #3471\n - #3472\n - #3473\n - #3474. So, I've done everything I've planned here and these changes are ready for the review (seems like tomorrow this PR will be marked as @stale).. Here is the way how it merges the principal attributes, so, no it does not work this way and it will probably kill the whole point of impersonation.\nBut maybe it should work this way in other cases when we have multiple authentications (I don't know these cases unfortunately).\nSo in my opinion, the only right final attributes for surrogate flow is:\n{\n  \"b\": \"5\",\n  \"c\": \"6\"\n}. >  If the current behavior in either scenario doesn't match either description, an improvement would be in order.\nIt seems like both scenarios do not work now. CAS always overrides the attributes with putAll. \nRegarding the surrogate problem: it seems for me that the most clear solution would be not to add an authentication object with SimplePrincipal in SurrogatePrincipalBuilder. Would it break anything?. > Second, would you have time to submit something similar for the master branch, or would you rather we handle that on our own?\nI'll probably be able to do it next week. If you can do it earlier, it's OK, I guess it's not such a big patch to wait.. It's just a port of #3695 to 5.3.x. It's just a port of #3695 to 5.3.x. I've implemented proper stream for Redis keys and added try-with-resources. Also I've replaced getTickets().stream() call to getTicketsStream() everywhere except tests. \nI've briefly looked into other TicketRegistry implementations and it seems like most of them are sufferring from this problem. I probably can't fix all of them so I'll probably just port these changes onto master branch after CI is passed.. > I remember creating a DirectCasClient which has the same behavior as the CasClient but without keeping the profile in session.\nI am not sure I understand how it is supposed to work.\nNow during the redirect chain we go twice through /ouaht2.0/callback: first time being \"unauthenticated\" (in terms of oauth) and second time with stored session. When the user is not authenticated in CAS, the user also should type his credentials between these requests. This redirect chain relies on the stored session, I am not sure how is it possible to remove it (I had this idea too initially).. OK, I've made some simple zero-configuration example based on latest cas-overlay-template (with CAS 6.1.0-RC1).\nI have two services here (see etc/cas/services):\n - A that is allowed to release attrs a, b, c\n - B that is allowed to release attrs a and b\nThe values for these attrs are set by stub attr repo (see etc/cas/cas.properties)\nHere are the steps to reproduce:\n\n./gradlew build\n0.5. You do not have to copy anything to /etc or anywhere, just stay in cas-overlay-template directory.\nRun java -Djavax.net.ssl.trustStore=/full/path/to/your/cas-overlay-template/etc/cas/thetruststore -Djavax.net.ssl.trustStorePassword=changeit -jar build/libs/cas.war (we have to add self-signed cert to CAS trust store so CAS trusts itself)\nIn your browser go to https://localhost:8443/cas/oauth2.0/authorize?client_id=aid&response_type=code&redirect_uri=http://localhost:8000/callback (start authn for A)\nThen go to https://localhost:8443/cas/oauth2.0/accessToken?client_id=aid&client_secret=asecret&grant_type=authorization_code&redirect_uri=http://localhost:8000/callback&code={THE_OC_OBTAINED_IN_STEP1}. Save the acquired AT for later. (you have to act quickly here)\nGo to https://localhost:8443/cas/oauth2.0/authorize?client_id=bid&response_type=code&redirect_uri=http://localhost:9000/callback (start authn for B)\nGo to https://localhost:8443/cas/oauth2.0/accessToken?client_id=bid&client_secret=bsecret&grant_type=authorization_code&redirect_uri=http://localhost:9000/callback&code={THE_OC_OBTAINED_IN_STEP4}. Save the acquired AT for later. (you have to act quickly here)\nGo to https://localhost:8443/cas/oauth2.0/profile?access_token={THE_AT_OBTAINED_IN_STEP3}. Look at the profile. It has a, b and c attrs. It's OK. \nGo to https://localhost:8443/cas/oauth2.0/profile?access_token={THE_AT_OBTAINED_IN_STEP5}. Look at the profile. It has a, b and c attrs. It's not OK. c should not be here.\n\nYou may restart CAS and conduct another experiment but with permuting steps. Do 1, 4, 5, 2, 3. In 6 and 7 you will see a and b attrs, but in 6 there should also be c.\n. @mmoayyed OOps, sorry, I forgot to attach the link: https://github.com/gagarski/cas-overlay-template\n GitHubgagarski/cas-overlay-templateApereo CAS WAR Overlay template. Contribute to gagarski/cas-overlay-template development by creating an account on GitHub.\n. I've created an example for 5.3.8-SNAPSHOT, same repo, 5.3 branch (note that in uses Maven here as does the previous commit there), so the step 0 would be mvn clean package and path to war in step 1 would be target/cas.war. @mmoayyed \nI thought about adding JUnit test that at least follows the chain of redirects and obtains OC so we can compare expected attrs with actual. However it seems like we have to recreate quite big part of CAS inside the test. I didn't find any inspiration examples among existing tests.. Looks strange. I'll take a look at it tomorrow. \n@dima767 Could you please tell me what's the proper way to test my local CAS build against the overlay? Should I run some command to publish CAS build to ~/.m2?. > or we just merge it\nNo, this is a bad idea. I've managed to reproduce it on my pC but now I have no idea what's going on. I am investigating.. Now I have overlay working with snapshot from Sonatype repo but not working (with SOE) even with my local 5.3.x branch builds. Still digging into the problem.. My current suggestions is that Gradle ignores my local hacks  (and probably yours too) to temporary switch from JDK 11 to JDK 8. Checking this suggestion now.. That's the command that created working local builds in ~/.m2: ./gradlew clean assemble install -x test -x javadoc -x check -Dorg.gradle.java.home=/usr/lib/jvm/java-8-jdk/.\nProbably the thing that do the trick is assemble, setting JDK home is probably unnecessary unless it is not properly set in your environment.\n. I was looking for other usages of ProfileManager in CAS and found a few usages related to OAUth/OIDC. Most of them are in controllers which is fine: after interceptors we have properly authenticated request and only one profile (since we do not use multiProfile).\nOne usage bothers be a bit:\nhttps://github.com/apereo/cas/blob/5.3.x/support/cas-server-support-oidc/src/main/java/org/apereo/cas/oidc/web/OidcSecurityInterceptor.java#L40\nBut it still looks OK for me: we only remove a profile here. However it is possible to use client id aware profile manager here and make remove also client_id aware.\n. > Also sounds fine. Let's do that in a separate PR, if you are interested?\nIf it is OK as it is, let's leave it. If it does not work properly then we probably should do it here. @leleuj any thoughts about this?\n. @mmoayyed It seems like you already ported in onto 6.0 and 6.1. Thanks!. I am not familiar with SAML, though I'll need proper support for it soon. Is there any standard way to serialialize complex attributes in SAML (AFAIK it is also based on XML)?. > Just to clarify, are you saying that using this patch, one cannot start with an OAuth client, submitting a request to CAS 1, redirect that request to a different CAS 2 server, get back to CAS1 and produce a response from the original OAuth client?\nThis should work as far as I understand. This patch only affect validation of service ticket that starts OAuth flow. So we still have a chain of redirects: OAuthClient->Cas1->Cas2->Cas1->OAuthClient. By now we have a ST in Cas1 and now we use centralAuthenticationService bean to validate it (instead of using CAS HTTP API to validate it).\nWhat I meant is that you can't have OAuth on Cas1 and directly delegate oauth authentication to Cas2.. Closing it in favor of #3817 since we do not want it on 5.3 branch.. I still did not properly look over XML profile building loginc for SAML. Will replacing CAS client be sufficient? Does this logic support serializing POJOs?. @leleuj I gave it a try with SAML on my local CAS overlay (by overriding ssoPostProfileCallbackHandlerController). This wasn't as good as expected.\nFirst of all SSOSamlProfileCallbackHandlerController wants not just simple TicketValidator but AbstractUrlBasedTicketValidator (it calls setRenew() method here). Well, OK, I've created my copy of SSOSamlProfileCallbackHandlerController that would be happy with any TicketValidator (ignoring setRenew for now). And it did not solve the problem: POJOs and maps are still serialized using toString (even though validateRequestAndBuildCasAssertion returns an assertion that is still type-aware):\n<saml2:Attribute FriendlyName=\"wsAsuPublic\" Name=\"wsAsuPublic\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n  <saml2:AttributeValue>{user_id=00000, first_name=John, last_name=Doe, middle_name=X, icon_profile=null, structure=[{type=Student, dep=Dept, sub_dep=Subdept}, {type=Student, dep=Dept2, sub_dep=Subdept2}]}</saml2:AttributeValue>\n</saml2:Attribute>\n<saml2:Attribute FriendlyName=\"permissions\" Name=\"permissions\" NameFormat=\"urn:oasis:names:tc:SAML:2.0:attrname-format:uri\">\n  <saml2:AttributeValue>Permission(type=LOGIN, serviceGroup=*, targetUser=null)</saml2:AttributeValue>\n  <saml2:AttributeValue>Permission(type=IMPERSONATE, serviceGroup=*, targetUser=.*)</saml2:AttributeValue>\n  <saml2:AttributeValue>Permission(type=ADMIN, serviceGroup=null, targetUser=null)</saml2:AttributeValue>\n</saml2:Attribute>\nGuess we still need to hack SAML assertion XML-building logic.\nAny ideas?\n. Disclamer: I've conducted the experiment on CAS 5.3.7. Maybe something changed in assertion building between 5.3.7 and master? Can you remember @mmoayyed @leleuj ?. @mmoayyed Now SAML profile renderer gets CAS profile using centralAuthenticationService bean so the types are properly preserved now while retrieving attributes from CAS. The part about serialization using toString is regarding rendering SAML profile.. https://github.com/apereo/cas/blob/54751f23c556d81fd4a6b4ad4b6ddeacd92fbef1/support/cas-server-support-saml-core-api/src/main/java/org/apereo/cas/support/saml/util/AbstractSamlObjectBuilder.java#L307-L312\ntoString converter seems to happen here. My idea is to use Jackson XmlMapper here. It seems quite flexible and allows to customize serialization on per-class basis.\n\nOpenSAML has a few encoders I suspect that one might be able to better serialize attribute values?\n\nWorth taking a look.\n\nIf the object type is complex, expect such objects to implement proper serialization for values? Use reflection to invoke a method, much like the semantics of readObject()?\n\nJackson allows to customize object serialization. Not sure about OpenSAML encoders.\n\nExpect the toString() of the object to encode the value correctly\n\nIt's not possible to change toString for Map (for example). Only some inheritance tricks might do the work.. Hi!\nI honestly thought that I have removed redundant config class, but I forgot to commit and push it, sorry.\nRegarding serialization you're probably right it would be better to address this issue separately.\nRegarding using backchannel client in SAML, there are some problems:\n\nFirst of all SSOSamlProfileCallbackHandlerController wants not just simple TicketValidator but AbstractUrlBasedTicketValidator (it calls setRenew() method here).\n\nRetrofitting CasBackchannelTicketValidator to AbstractUrlBasedTicketValidator is neither right nor possible (in any not funky way):  it definitely isn't url-based and validate here is declared final. Controller wants AbstractUrlBasedTicketValidator because it calls setRenew(true) there. I have briefly looked at setRenew usages inside TicketValidators and did not find any, but maybe I missed something, so I need a second look here. \n. I'd personally prefer to make a proper stream without materializing it to List. But we should make this stream closeable to properly close the Cursor. If we do it we should wrap getKeysStream and getKeys(Predicate) to try-with-resources everywhere. I can do it if it is OK.. I did not find any tabs in my code.. You're right. I've changed it.. Maybe we should enforce multiProfile here.\nNow If we subsequently authenticate into A, then into B, then into A, then into B, we go through full redirect chain (authorize -> callbackAuthorize -> login -> authorize) each time. Multiprofile might prevent it but I am not sure that this is a good idea. . Yeah, you are probably right.. ",
    "miller79": "The columnDefinition part of the annotation Column is optional for DDL generation.  When it is not included it will default to the inferred type (https://docs.oracle.com/javaee/7/api/javax/persistence/Column.html#columnDefinition--).  Comparing this to other entities with ZonedDateTime within the CAS framework, this appears to be the only one that has this definition defined.  I'm supposing this was just missed during a migration in the past.  Here's an example of the Entity for Tickets that does not have that set (https://github.com/apereo/cas/blob/d7625070c99e10afb53e26feee6df79a706b9de5/core/cas-server-core-tickets-api/src/main/java/org/apereo/cas/ticket/AbstractTicket.java)\nI would think it would not affect anything as its using the framework to make the decision but unfortunately I cannot confirm or deny without some deep integration testing.  But I can confirm that this breaks Microsoft SQL Server as it is now.. Sorry I just did a search for columnDefinition through the repo and looks like there are a few others that have that definition.  We aren't using those modules so I missed them but maybe in a future release need to change those as well as I'm not sure if they are needed.. Thanks for the suggestion.  I will do that in future.. Fixing. Closing and reopening to allow travis-ci to run again as it failed for some other reason.. Closing and opening to allow Travis-CI to rebuild as it failed for a different reason.. ",
    "14251104246": "Yes,I will do it.. I can't reappear ConversionFailedException in my test. \nConversionFailedException only happened in cas-management when i save a RegisteredService to mongoDB.\nI am so sorry that i can't find the real reason.. ",
    "rzukow": "+1 !. ",
    "sharomank": "@mmoayyed, should I create a separate pull request for merging this fix to 5.3.x?. I got it, thanks.. ",
    "201314": "Sorry,the right url is \"/oauth2.0/accessToken?grant_type=authorization_code&client_id=ID&client_secret=SECRET&code=CODE\".No matter grant_type is  authorization_code or refresh_token,the request send the param 'client_secret',but program don't check the 'client_secret' is right or not.. I see it.CasSecurityInterceptor and OAuth20ClientAuthenticator have done it.. ",
    "ruckc": "The only comment I didn't try to address was the test cases.  I would need to figure out how to mock an HttpServletRequest object.. The only comment I didn't try to address was the test cases.  I would need to figure out how to mock an HttpServletRequest object.. If everything is good, I can close this PR, rebase and submit with a single commit if that is preferred.. If everything is good, I can close this PR, rebase and submit with a single commit if that is preferred.. I can't figure out why the test is failing, and for some reason gradle is skipping tests locally.  So there may be multiple updates trying to use travis-ci testing.. I can't figure out why the test is failing, and for some reason gradle is skipping tests locally.  So there may be multiple updates trying to use travis-ci testing.. Yea, even updating the test and adding an @ToString shows the test \"should\" be succeeding.  its just a simple instanceof test like the other tests class.. Yea, even updating the test and adding an @ToString shows the test \"should\" be succeeding.  its just a simple instanceof test like the other tests class.. your right, it should be assertTrue, on both test cases.. your right, it should be assertTrue, on both test cases.. all of the travis test failures are from the merge with master, just updated again to see if they are fixed.. all of the travis test failures are from the merge with master, just updated again to see if they are fixed.. I have no clue how to troubleshoot this x509 webflow failure: \norg.apereo.cas.adaptors.x509.web.flow.X509CertificateCredentialsRequestHeaderActionTests > verifyCredentialsResultsInAuthnFailure FAILED\n    org.junit.ComparisonFailure: expected:<[authenticationFailure]> but was:<[error]>\n        at org.junit.Assert.assertEquals(Assert.java:115)\n        at org.junit.Assert.assertEquals(Assert.java:144)\n        at org.apereo.cas.adaptors.x509.web.flow.X509CertificateCredentialsRequestHeaderActionTests.verifyCredentialsResultsInAuthnFailure(X509CertificateCredentialsRequestHeaderActionTests.java:45)\nIt also seems something in the changes this past week has now broken local builds for me, even if I completely clean slate the build environment.\n`\n\nTask :webapp:cas-server-webapp-jetty:nodeSetup FAILED\n\nFAILURE: Build failed with an exception.\n\n\nWhat went wrong:\nFailed to capture snapshot of output files for task ':webapp:cas-server-webapp-jetty:nodeSetup' property 'nodeDir' during up-to-date check.\n\nCould not list contents of '/home/ruckc/Repositories/apereo-cas-6/webapp/cas-server-webapp-jetty/.gradle/nodejs/node-v8.11.2-linux-x64/bin/npm'. Couldn't follow symbolic link.\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.`\n\n\nAny suggestions would be appreciated.. I have no clue how to troubleshoot this x509 webflow failure: \norg.apereo.cas.adaptors.x509.web.flow.X509CertificateCredentialsRequestHeaderActionTests > verifyCredentialsResultsInAuthnFailure FAILED\n    org.junit.ComparisonFailure: expected:<[authenticationFailure]> but was:<[error]>\n        at org.junit.Assert.assertEquals(Assert.java:115)\n        at org.junit.Assert.assertEquals(Assert.java:144)\n        at org.apereo.cas.adaptors.x509.web.flow.X509CertificateCredentialsRequestHeaderActionTests.verifyCredentialsResultsInAuthnFailure(X509CertificateCredentialsRequestHeaderActionTests.java:45)\nIt also seems something in the changes this past week has now broken local builds for me, even if I completely clean slate the build environment.\n`\n\nTask :webapp:cas-server-webapp-jetty:nodeSetup FAILED\n\nFAILURE: Build failed with an exception.\n\n\nWhat went wrong:\nFailed to capture snapshot of output files for task ':webapp:cas-server-webapp-jetty:nodeSetup' property 'nodeDir' during up-to-date check.\n\nCould not list contents of '/home/ruckc/Repositories/apereo-cas-6/webapp/cas-server-webapp-jetty/.gradle/nodejs/node-v8.11.2-linux-x64/bin/npm'. Couldn't follow symbolic link.\n\n\n\nTry:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.`\n\n\nAny suggestions would be appreciated.. I don't know how to address the issue that showed up in the CI build, https://travis-ci.org/apereo/cas/jobs/417679833 \nIt's more frustrating that those failures don't show up in local gradlew builds.. I don't know how to address the issue that showed up in the CI build, https://travis-ci.org/apereo/cas/jobs/417679833 \nIt's more frustrating that those failures don't show up in local gradlew builds.. I don't know how to get the tests to pick it up.  When i run \"gradlew test coveralls\" locally it works...\nIt may be the lack of public on the new @Configuration class.. I don't know how to get the tests to pick it up.  When i run \"gradlew test coveralls\" locally it works...\nIt may be the lack of public on the new @Configuration class.. alright, i'll get it working then submit next commit.  then i'll update the master branch's PR for these changes.. alright, i'll get it working then submit next commit.  then i'll update the master branch's PR for these changes.. somehow the CI job got cancelled, and in my attempt to play nice, i don't want to just make a commit to trigger the CI job.\nI believe this should work.  Running the CI tests locally failed utterly at \njava.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertFalse(Assert.java:64)\n        at org.junit.Assert.assertFalse(Assert.java:74)\n        at org.apereo.cas.audit.CasSupportJdbcAuditConfigurationTests.verifyAuditManager(CasSupportJdbcAuditConfigurationTests.java:59). somehow the CI job got cancelled, and in my attempt to play nice, i don't want to just make a commit to trigger the CI job.\nI believe this should work.  Running the CI tests locally failed utterly at \njava.lang.AssertionError\n        at org.junit.Assert.fail(Assert.java:86)\n        at org.junit.Assert.assertTrue(Assert.java:41)\n        at org.junit.Assert.assertFalse(Assert.java:64)\n        at org.junit.Assert.assertFalse(Assert.java:74)\n        at org.apereo.cas.audit.CasSupportJdbcAuditConfigurationTests.verifyAuditManager(CasSupportJdbcAuditConfigurationTests.java:59). as far as I can tell this is fully ready, minus the lack of the Codacy check.. as far as I can tell this is fully ready, minus the lack of the Codacy check.. On this, in 6.0 i'd ask we break the functionality (as it's insecure).  But in the 5.3.x backport i'd keep the functionality the same.. Then the X509CredentialExtractor would need to move to another module.  Suggestions?. In the mechanism I used in 3.6, our X509 authentication requests didn't contain a body, it was just a POST request with the client authentication.  Without this required=false, spring throws an exception as the RequestBody is required by default.. ",
    "jgraglia": "Hi, you are right it's a placeholder. But what I wanted to say is that this reference is noted\ntheme_name (with an underscore) in the 2 lines aboved, and that in this line it is theme-name with a - (dash)\ncas.standard.css.file=/themes/[theme_name]/css/cas.css\ncas.javascript.file=/themes/[theme_name]/js/cas.js\ncas.admin.css.file=/themes/[theme-name]/css/admin.css. ",
    "mindcrime": "Aargh... I actually didn't intend to reformat... I thought the Formatter I had configured in Eclipse matched the existing code.  Anyway, I'll go back and fix that.  \nAs for submitting this to the master branch... I'll check, but I'm not sure this would even apply there, since it seems that in the more recent code this part of the code-base has changed a lot.  I'll check though.\n . OK, I'll take a look at master later and see if the same issue still exists, and what it will take to fix it there if it does.  If you think it's OK, I'll just leave this PR alone and not worry about fixing the formatting issues for now.   . I haven't had time to look at it.  I'll try to take a stab at it this\nweekend.\nPhil\nOn Wed, Aug 29, 2018 at 2:14 PM Misagh Moayyed notifications@github.com\nwrote:\n\nHello, have you made any progress here on porting this patch over to\nmaster? Do you need help?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/apereo/cas/pull/3480#issuecomment-417051929, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAOHqmJeT2rAJ5koQoxEaWHYSdnkUqsJks5uVtoFgaJpZM4WDPWB\n.\n. \n",
    "atticus88": "```\nCAS Version: 5.2.4\nCAS Commit Id: 67d7e128955437619534b5af4819f2379b934353\nCAS Build Date/Time: 2018-04-13T21:46:16Z\nSpring Boot Version: 1.5.12.RELEASE\n\nJava Home: /usr/lib/jvm/java-8-openjdk-amd64/jre\nJava Vendor: Oracle Corporation\nJava Version: 1.8.0_181\nJVM Free Memory: 95 MB\nJVM Maximum Memory: 990 MB\nJVM Total Memory: 213 MB\nJCE Installed: Yes\n\nOS Architecture: amd64\nOS Name: Linux\nOS Version: 4.4.0-130-generic\nOS Date/Time: 2018-08-14T09:22:13.889\nOS Temp Directory: /tmp/tomcat8-tomcat8-tmp\n\n```\nHere are the logs of a login of a user that is in bypass on the Duo side:\n```\n2018-08-14 09:23:09,480 INFO [PolicyBasedAuthenticationManager] - \n2018-08-14 09:23:09,481 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\n=============================================================\nWHO: klintduotest\nWHAT: Supplied credentials: [klintduotest]\nACTION: AUTHENTICATION_SUCCESS\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:09 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n\n2018-08-14 09:23:09,786 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\nWHO: klintduotest\nWHAT: [event=mfa-duo,timestamp=Tue Aug 14 09:23:09 MDT 2018,source=RegisteredServicePrincipalAttributeMultifactorAuthenticationPolicyEventResolver]\nACTION: AUTHENTICATION_EVENT_TRIGGERED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:09 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,198 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\nWHO: klintduotest\nWHAT: TGT-1-*********H4tIURR-L4-te-casdev1\nACTION: TICKET_GRANTING_TICKET_CREATED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:10 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,255 INFO [DefaultCentralAuthenticationService] - \n2018-08-14 09:23:10,256 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\n=============================================================\nWHO: klintduotest\nWHAT: ST-1-Fetae-ngqx0SA86AFbVFmdkssFM-te-casdev1 for https://hadoopdev1.weber.edu/casdev1/\nACTION: SERVICE_TICKET_CREATED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:10 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,382 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\nWHO: klintduotest\nWHAT: ST-1-Fetae-ngqx0SA86AFbVFmdkssFM-te-casdev1\nACTION: SERVICE_TICKET_VALIDATED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:10 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.35\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,393 WARN [DefaultAuthenticationContextValidator] - \n```\n\nCAS Response:\n<cas:serviceResponse xmlns:cas='http://www.yale.edu/tp/cas'>\n   <cas:authenticationFailure code=\"INVALID_AUTHENTICATION_CONTEXT\">The validation request for [&#39;ST-1-Fetae-ngqx0SA86AFbVFmdkssFM-te-casdev1&#39;] cannot be satisfied. The request is either unrecognized or unfulfilled.</cas:authenticationFailure>\n</cas:serviceResponse>\nBypass (Not Working)\n2018-08-15 09:12:38,663 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintduotest]>\n2018-08-15 09:12:38,921 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"result\": \"allow\", \"status_msg\": \"Logging you in automatically...\"}, \"stat\": \"OK\"}]>\n2018-08-15 09:12:38,921 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Found duo user account status [org.apereo.cas.adaptors.duo.DuoUserAccount@49754dc2[status=ALLOW,enrollPortalUrl=<null>]] for [klintduotest]>\n2018-08-15 09:12:38,921 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Account status is set for allow/bypass for [klintduotest]>\nNormal User not in bypass by Duo:\n2018-08-15 09:13:27,126 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintholmes]>\n2018-08-15 09:13:27,222 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"devices\": REMOVED}>\n2018-08-15 09:13:27,222 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Found duo user account status [org.apereo.cas.adaptors.duo.DuoUserAccount@a0af2d9[status=AUTH,enrollPortalUrl=<null>]] for [klintholmes]>\n2018-08-15 09:13:27,222 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintholmes]>\n2018-08-15 09:13:27,335 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"devices\": REMOVED}>\n2018-08-15 09:13:27,335 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Found duo user account status [org.apereo.cas.adaptors.duo.DuoUserAccount@5e565608[status=AUTH,enrollPortalUrl=<null>]] for [klintholmes]>\n2018-08-15 09:13:27,336 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintholmes]>\n2018-08-15 09:13:27,424 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"devices\": REMOVED}>\n2018-08-15 09:13:39,281 DEBUG [BasicDuoSecurityAuthenticationService] - <Calling DuoWeb.verifyResponse with signed request token '[AUTH|REMOVED|REMOVED|REMOVED|REMOVED'>\n2018-08-15 09:13:39,281 DEBUG [DuoAuthenticationHandler] - <Response from Duo verify: [klintholmes]>\n2018-08-15 09:13:39,281 INFO [DuoAuthenticationHandler] - <Successful Duo authentication for [klintholmes]>\n2018-08-15 09:13:39,281 INFO [PolicyBasedAuthenticationManager] - <Authenticated principal [klintholmes] with attributes [{}] via credentials [[[username=klintholmes,signedDuoResponse=AUTH|REMOVED|REMOVED|REMOVED|REMOVED]]].>\nFound some more logs that might help find where the issue is happening. Looks like DefaultDuoMultifactorAuthenticationProvider does not support the the bypass on the Duo side.\n2018-08-15 15:19:13,943 DEBUG [AbstractMultifactorAuthenticationProvider] - <[DefaultDuoMultifactorAuthenticationProvider] voted does not support this authentication request>\n.......\n2018-08-15 15:19:14,052 DEBUG [DefaultAuthenticationContextValidator] - <Attempting to match requested authentication context [mfa-duo] against [[]]>\n2018-08-15 15:19:14,052 DEBUG [DefaultAuthenticationContextValidator] - <No authentication context could be determined based on authentication attribute [authnContextClass]>\n2018-08-15 15:19:14,052 WARN [DefaultAuthenticationContextValidator] - <No satisfied multifactor authentication providers are recorded in the current authentication context.>\n2018-08-15 15:19:16,572 DEBUG [WebApplicationServiceFactory] - <No service is specified in the request. Skipping service creation>\n. ```\nCAS Version: 5.2.4\nCAS Commit Id: 67d7e128955437619534b5af4819f2379b934353\nCAS Build Date/Time: 2018-04-13T21:46:16Z\nSpring Boot Version: 1.5.12.RELEASE\n\nJava Home: /usr/lib/jvm/java-8-openjdk-amd64/jre\nJava Vendor: Oracle Corporation\nJava Version: 1.8.0_181\nJVM Free Memory: 95 MB\nJVM Maximum Memory: 990 MB\nJVM Total Memory: 213 MB\nJCE Installed: Yes\n\nOS Architecture: amd64\nOS Name: Linux\nOS Version: 4.4.0-130-generic\nOS Date/Time: 2018-08-14T09:22:13.889\nOS Temp Directory: /tmp/tomcat8-tomcat8-tmp\n\n```\nHere are the logs of a login of a user that is in bypass on the Duo side:\n```\n2018-08-14 09:23:09,480 INFO [PolicyBasedAuthenticationManager] - \n2018-08-14 09:23:09,481 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\n=============================================================\nWHO: klintduotest\nWHAT: Supplied credentials: [klintduotest]\nACTION: AUTHENTICATION_SUCCESS\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:09 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n\n2018-08-14 09:23:09,786 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\nWHO: klintduotest\nWHAT: [event=mfa-duo,timestamp=Tue Aug 14 09:23:09 MDT 2018,source=RegisteredServicePrincipalAttributeMultifactorAuthenticationPolicyEventResolver]\nACTION: AUTHENTICATION_EVENT_TRIGGERED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:09 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,198 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\nWHO: klintduotest\nWHAT: TGT-1-*********H4tIURR-L4-te-casdev1\nACTION: TICKET_GRANTING_TICKET_CREATED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:10 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,255 INFO [DefaultCentralAuthenticationService] - \n2018-08-14 09:23:10,256 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\n=============================================================\nWHO: klintduotest\nWHAT: ST-1-Fetae-ngqx0SA86AFbVFmdkssFM-te-casdev1 for https://hadoopdev1.weber.edu/casdev1/\nACTION: SERVICE_TICKET_CREATED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:10 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.176\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,382 INFO [Slf4jLoggingAuditTrailManager] - <Audit trail record BEGIN\nWHO: klintduotest\nWHAT: ST-1-Fetae-ngqx0SA86AFbVFmdkssFM-te-casdev1\nACTION: SERVICE_TICKET_VALIDATED\nAPPLICATION: CAS\nWHEN: Tue Aug 14 09:23:10 MDT 2018\nCLIENT IP ADDRESS: 192.168.1.35\nSERVER IP ADDRESS: 192.168.1.25\n=============================================================\n2018-08-14 09:23:10,393 WARN [DefaultAuthenticationContextValidator] - \n```\n\nCAS Response:\n<cas:serviceResponse xmlns:cas='http://www.yale.edu/tp/cas'>\n   <cas:authenticationFailure code=\"INVALID_AUTHENTICATION_CONTEXT\">The validation request for [&#39;ST-1-Fetae-ngqx0SA86AFbVFmdkssFM-te-casdev1&#39;] cannot be satisfied. The request is either unrecognized or unfulfilled.</cas:authenticationFailure>\n</cas:serviceResponse>\nBypass (Not Working)\n2018-08-15 09:12:38,663 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintduotest]>\n2018-08-15 09:12:38,921 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"result\": \"allow\", \"status_msg\": \"Logging you in automatically...\"}, \"stat\": \"OK\"}]>\n2018-08-15 09:12:38,921 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Found duo user account status [org.apereo.cas.adaptors.duo.DuoUserAccount@49754dc2[status=ALLOW,enrollPortalUrl=<null>]] for [klintduotest]>\n2018-08-15 09:12:38,921 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Account status is set for allow/bypass for [klintduotest]>\nNormal User not in bypass by Duo:\n2018-08-15 09:13:27,126 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintholmes]>\n2018-08-15 09:13:27,222 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"devices\": REMOVED}>\n2018-08-15 09:13:27,222 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Found duo user account status [org.apereo.cas.adaptors.duo.DuoUserAccount@a0af2d9[status=AUTH,enrollPortalUrl=<null>]] for [klintholmes]>\n2018-08-15 09:13:27,222 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintholmes]>\n2018-08-15 09:13:27,335 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"devices\": REMOVED}>\n2018-08-15 09:13:27,335 DEBUG [DefaultDuoMultifactorAuthenticationProvider] - <Found duo user account status [org.apereo.cas.adaptors.duo.DuoUserAccount@5e565608[status=AUTH,enrollPortalUrl=<null>]] for [klintholmes]>\n2018-08-15 09:13:27,336 DEBUG [BaseDuoSecurityAuthenticationService] - <Contacting Duo to inquire about username [klintholmes]>\n2018-08-15 09:13:27,424 DEBUG [BaseDuoSecurityAuthenticationService] - <Received Duo admin response [{\"response\": {\"devices\": REMOVED}>\n2018-08-15 09:13:39,281 DEBUG [BasicDuoSecurityAuthenticationService] - <Calling DuoWeb.verifyResponse with signed request token '[AUTH|REMOVED|REMOVED|REMOVED|REMOVED'>\n2018-08-15 09:13:39,281 DEBUG [DuoAuthenticationHandler] - <Response from Duo verify: [klintholmes]>\n2018-08-15 09:13:39,281 INFO [DuoAuthenticationHandler] - <Successful Duo authentication for [klintholmes]>\n2018-08-15 09:13:39,281 INFO [PolicyBasedAuthenticationManager] - <Authenticated principal [klintholmes] with attributes [{}] via credentials [[[username=klintholmes,signedDuoResponse=AUTH|REMOVED|REMOVED|REMOVED|REMOVED]]].>\nFound some more logs that might help find where the issue is happening. Looks like DefaultDuoMultifactorAuthenticationProvider does not support the the bypass on the Duo side.\n2018-08-15 15:19:13,943 DEBUG [AbstractMultifactorAuthenticationProvider] - <[DefaultDuoMultifactorAuthenticationProvider] voted does not support this authentication request>\n.......\n2018-08-15 15:19:14,052 DEBUG [DefaultAuthenticationContextValidator] - <Attempting to match requested authentication context [mfa-duo] against [[]]>\n2018-08-15 15:19:14,052 DEBUG [DefaultAuthenticationContextValidator] - <No authentication context could be determined based on authentication attribute [authnContextClass]>\n2018-08-15 15:19:14,052 WARN [DefaultAuthenticationContextValidator] - <No satisfied multifactor authentication providers are recorded in the current authentication context.>\n2018-08-15 15:19:16,572 DEBUG [WebApplicationServiceFactory] - <No service is specified in the request. Skipping service creation>. Thanks, let me know if you need anything else from me.. I tested the above option and it does authenticate successfully with the user in bypass.. ",
    "Golestandt": "Thanks for your feedback. The build failure should be fixed. I am wondering what test cases you would like to see. I assume you are refering to Unit Tests. I saw your commit of OneTimeTokenAccountTests in the master. Those should be just what is needed. Do you still need more test cases?\n(Or did you mean a textual description of the actual and the expected behavior?). Hi. I have backported your Testcase to my patch-1 branch. I hope copying it was the right way to do it! I'm not too familiar with github.\nI couldn't find any TestSuite to add the testcase, like you did in the master. I hope the tests are collected automatically... :-)\nDo you need anything else?. ",
    "yedaodao": "@mmoayyed Thank you! It's my fault. I thought that the master is 5.3.x before. I'll close this issue. Thank you for your patience. . ",
    "jtrutwin": "We are running into this issue in the 5.2 branch - is it possible to apply the fix there as well please?. ",
    "MartinBoehmer": "Absolutely. Would be great to have this in CAS 6 as well.. In the login view, all OAuth clients have buttons with their specific logos. I would like to add a signature button for this new client as well. Two questions on this:\n- I have a PNG file with the logo of this client. Where would I place this image file? My guess would be webapp/resources/static/images\n- I need to add some CSS. Where does this go? I tried to do that in webapp/resources/static/themes/apereo/css/cas.css, but this file seems not to be picked up. I also tried to add it in webapp/resources/static/css/cas.css, but this file actually get overridden during build and my changes disappear.. Okay, thanks. I will keep this the UI adjustments in my overlay. Looking forward to the pac4j 3.2.0 release to finally get this PR ready to be merged.. @mmoayyed Are you expecting the port forward to be completed prior to closing this PR? As far as I see it, there is nothing more to do in terms of 5.3.x, right?. Sorry, I haven't been able to work on the docs until now. I created PRs to update the 5.3.x branch (#3593) and the head (#3594).. I created a port forward: #3714 . I would like to see the non-bugfix changes in a future 5.3 release as this is our production environment. Would that be possible?. Okay. I'll split this into separate PRs. However, I would like to see the non-bugfix changes in a future 5.3 release as this is our production environment. Would that be possible?. Sorry, last post was an unintended duplicate. I reverted all non-bugfix changes from this PR and created a new PR for them: #3733. Thanks, I already created branches for ports to 6.0 and master.. Is there anything left to do here?\nThe current CI build fail has reasons beyond this PR:\n\nCaused by: org.gradle.api.resources.ResourceException: Could not get resource 'https://jcenter.bintray.com/com/jcraft/jsch.agentproxy.jsch/0.0.9/jsch.agentproxy.jsch-0.0.9.pom'\n\n\n. Thanks, but that's an easy one :-) Done. #3731. > \n\nPS If you have not already signed the CLA, I recommend that you do.\n\nI already did this weeks ago for my first contribution. But I chose the Apereo website over the CLA bot.. I picked up the review comments and merged the current 5.3.x branch into this to PR to be up to date.. Is there anything left to do here?\nThe current CI build fail is outside the changes of this PR:\n\n[ant:checkstyle] [ERROR] /home/travis/build/apereo/cas/support/cas-server-support-ldap/src/main/java/org/apereo/cas/authentication/LdapPasswordSynchronizationAuthenticationPostProcessor.java:19:8: Unused import - java.util.Optional. [UnusedImports]. So, @mmoayyed, if this PR looks alright for you, I would start porting it to master. Any changes required?. When defining the name sqlUpdateAUP I had a look at other modules, particularly Password Management. There are two similarly named query attributes sqlFindEmail and sqlChangePassword. I personally dont mind how the AUP attribute is named. So, would you like me to change it to your suggestion? If so, I would also do that in 5.3.x PR.\n\nCherry picking is exactly what I would have done to create the master PR. If you could do that, that's welcome.. @mmoayyed, could you check if this error also exists in 6.0.x and master branches and provide forward ports of this PR. Your support would be greatly appreciated!. Okay, I will look into your suggested changes. I'll try the 6.0 PR but I have a damn slow dev environment, so I feel very very unproductive doing it.... > I'd like to ask you to reposition the pull request to have it point to the master branch\nI am still running on CAS 5.3.x and will keep it like that for several reasons. So, I would appreciate, if this could be part of 5.3.10. Happy to provide a forward port for 6.0.x and master. Would that be possible?\n\nwork through the CI failures to make all checks pass\n\nWill do.\n\nPS please also remember to add test cases demonstrating the feature.\n\nSure.\n. Will do soon.. CI failed due to a HTTP read timeout on the Spring repo. Any change you can re-start the CI!?\nI cannot figure out a way to do it.. Yes, the behaviour is exactly as you described. this setting is sort of a last resort for special situations. The use case I had in mind for that setting is normalising the username value to upper/lower case, if required. So, I could easily change the query to UPDATE %s SET %s=true WHERE lower(%s)=lower(?). I came across this when setting up PM Password Resets, where it was essential to be able to change the update query like this. \nIf you think this scenario is too odd, I could replace this by a setting for username transformation (NONE,UPPER, LOWER) to adjust the query. From my point of view, this limits the configuration flexibility and may cause issues with some SQL dialects, not support whatever change is made to the query.. Okay. I would have found this reference generally helpful, because from a user-only perceptive I would not know to look in the sources (locating the correct file can be a struggle already).. Okay. I agree. So, my suggestions for both cases would be to throw IllegalStateExceptions inside the to-be created method to determine the principal ID.\nWhat do you think?. Okay. True.. Okay.. Done.. Okay, but an empty value would still be an error. Please see my changes.. Okay, moved the test. Is it alright now? If so, I would start working on the 6.0 PR.. ",
    "codecov-io": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@45270b3). Click here to learn what that means.\nThe diff coverage is 19.87%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3508   +/-\n=========================================\n  Coverage          ?   48.14%         \n  Complexity        ?     4892         \n=========================================\n  Files             ?     1412         \n  Lines             ?    30306         \n  Branches          ?     2821         \n=========================================\n  Hits              ?    14591         \n  Misses            ?    14360         \n  Partials          ?     1355\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...eMultifactorAuthenticationPolicyEventResolver.java | 26.66% <\u00f8> (\u00f8) | 2 <0> (?) | |\n| ...eo/cas/adaptors/duo/authn/DuoDirectCredential.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...g/apereo/cas/adaptors/duo/authn/DuoCredential.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...eMultifactorAuthenticationPolicyEventResolver.java | 25% <\u00f8> (\u00f8) | 1 <0> (?) | |\n| ...flow/SwivelAuthenticationWebflowEventResolver.java | 50% <\u00f8> (\u00f8) | 1 <0> (?) | |\n| ...eb/flow/DuoAuthenticationWebflowEventResolver.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...main/java/org/apereo/cas/web/support/WebUtils.java | 73.09% <\u00f8> (\u00f8) | 79 <0> (?) | |\n| ...on/DefaultMultifactorTriggerSelectionStrategy.java | 89.55% <\u00f8> (\u00f8) | 22 <0> (?) | |\n| ...resolver/impl/AbstractCasWebflowEventResolver.java | 51.85% <\u00f8> (\u00f8) | 12 <0> (?) | |\n| ...low/YubiKeyAuthenticationWebflowEventResolver.java | 50% <\u00f8> (\u00f8) | 1 <0> (?) | |\n| ... and 66 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 45270b3...45812a2. Read the comment docs.\n. # Codecov Report\nMerging #3550 into master will decrease coverage by 0.07%.\nThe diff coverage is 61.22%.\n\n\n```diff\n@@             Coverage Diff              @@\nmaster    #3550      +/-\n============================================\n- Coverage     48.29%   48.21%   -0.08%   \n+ Complexity     4914     4909       -5   \n============================================\n  Files          1404     1404            \n  Lines         30354    30355       +1   \n  Branches       2836     2837       +1   \n============================================\n- Hits          14658    14635      -23   \n- Misses        14318    14345      +27   \n+ Partials       1378     1375       -3\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...edential/OneTimeTokenAccountCouchDbRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...bGoogleAuthenticatorTokenCredentialRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...ken/GoogleAuthenticatorCouchDbTokenRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...hdb/gauth/token/OneTimeTokenCouchDbRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...ereo/cas/gauth/token/GoogleAuthenticatorToken.java | 100% <\u00f8> (\u00f8) | 1 <0> (?) | |\n| ...l/BaseGoogleAuthenticatorCredentialRepository.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...h/token/GoogleAuthenticatorJpaTokenRepository.java | 25% <\u00f8> (\u00f8) | 4 <0> (?) | |\n| ...o/cas/couchdb/gauth/token/CouchDbOneTimeToken.java | 0% <\u00f8> (\u00f8) | 0 <0> (?) | |\n| ...auth/GoogleAuthenticatorAuthenticationHandler.java | 16.21% <\u00f8> (\u00f8) | 2 <0> (?) | |\n| ...AuthenticatorRestHttpRequestCredentialFactory.java | 70% <\u00f8> (\u00f8) | 4 <0> (?) | |\n| ... and 25 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2032ccf...cc5b4fe. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1fa7671). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #3569   +/-\n=========================================\n  Coverage          ?   48.32%         \n  Complexity        ?     4908         \n=========================================\n  Files             ?     1401         \n  Lines             ?    30341         \n  Branches          ?     2845         \n=========================================\n  Hits              ?    14663         \n  Misses            ?    14298         \n  Partials          ?     1380\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1fa7671...d99f403. Read the comment docs.\n. # Codecov Report\nMerging #3585 into master will decrease coverage by 10.74%.\nThe diff coverage is n/a.\n\n\n```diff\n@@              Coverage Diff              @@\nmaster    #3585       +/-\n=============================================\n- Coverage     58.99%   48.25%   -10.75%   \n+ Complexity     5785     4903      -882   \n=============================================\n  Files          1404     1404             \n  Lines         30350    30350             \n  Branches       2842     2842             \n=============================================\n- Hits          17906    14644     -3262   \n- Misses        10677    14327     +3650   \n+ Partials       1767     1379      -388\n```\n| Impacted Files | Coverage \u0394 | Complexity \u0394 | |\n|---|---|---|---|\n| ...ogate/SurrogateAuthorizationCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...pereo/cas/adaptors/rest/RestAuthenticationApi.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...pereo/cas/couchdb/core/CasObjectMapperFactory.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...org/apereo/cas/monitor/MongoDbHealthIndicator.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| ...o/cas/couchdb/audit/CouchDbAuditActionContext.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...couchdb/saml/SamlIdPMetadataCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...claims/OidcAddressScopeAttributeReleasePolicy.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| .../cas/couchdb/gauth/CouchDbOneTimeTokenAccount.java | 0% <0%> (-100%) | 0% <0%> (-3%) | |\n| .../cas/couchdb/u2f/CouchDbU2FDeviceRegistration.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ...db/saml/SamlMetadataDocumentCouchDbRepository.java | 0% <0%> (-100%) | 0% <0%> (-2%) | |\n| ... and 198 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bb94a62...48ad002. Read the comment docs.\n. \n",
    "jhawkesworth": "I tested this with our groovy-based configuration and found it resolved the issue reported here: https://groups.google.com/a/apereo.org/d/msg/cas-user/PnTSaNri2Fk/38u7PnRzBwAJ\nMany thanks for this fix.\nJon. ",
    "request-info[bot]": "The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. The maintainers of this repository would appreciate it if you could provide more information.. ",
    "sivajankan": "Thanks!. ",
    "junagrole": "Sorry for the mistake. It's my first time working with pull requests.\nThank you for your guidance, I made another pr that seems to be working.. ",
    "oxcafedead": "\nIsn't this the functionality that was removed in #3489?\nAlso, I would not put the script code in the html files, but in the cas.js for maintainability.\n\nNo, they aren't related if I didn't miss anything.\nThe #3489 is about forbidden empty fields submission and here we're disabling submit button when it was clicked first time to avoid duplicating requests to server.\nI  will extract this to the generic js file, however, I doubt someone will ever reuse it :). @mindblender I'm afraid we cannot generalize this function and have it in cas.js as:\n- the function depends on form name which is #fm1 in two cases but #passwordManagementForm in third one;\n- it depends on \"alt message\" which is displayed after click and is populated by thymeleaf on backend (as it is translated).\n. I think mentioned case can happen when server's unavailable. But in such case page will be changed to default browsers 'site is unavailable' page or, if there's a proxy in CAS setup, to 503/502/etc.\nI can't think of a case when there was an error after submitting the form and the current page remained.\nThe case can probably take place if we are talking about AJAX stuff, but AFAIK in CAS there's\nno dynamic AJAX requests (correct me if I'm wrong).. Hi @mindblender - do you still have any concerns? We can discuss more if you want.. Not sure why some unit tests are failing. In the scope of this PR only html templates were changed. @mmoayyed the point is not to have unit tests for some base impl classes? \ncould you point me to some unit test guidelines for CAS if we have any? (haven't found yet). ",
    "auxepaul": "Very useful in v5.3.x because MFA-U2F is broken (v5.2.x seem to be OK) \n@mmoayyed The PR will be merged?. > \n\nPlease describe the problem you're solving in the PR description, add test cases that show before/after and port over to master.\n\nI put a PR description with examples. I can't test CAS pre-6.0 because I don't use gradle deploiement and JDK 11 at the moment (I use and test CAS 5.2.x and CAS 5.3.x). . Maybe because there is this thymeleaf exception : \nERROR [org.thymeleaf.TemplateEngine] - <[THYMELEAF][ajp-nio-8109-exec-4] Exception processing template \"error\": Error resolving template \"tag\", template might not exist or might not be accessible by any of the configured Template Resolvers (template: \"casU2fLoginView\" - line 46, col 71)>\norg.thymeleaf.exceptions.TemplateInputException: Error resolving template \"tag\", template might not exist or might not be accessible by any of the configured Template Resolvers (template: \"casU2fLoginView\" - line 46, col 71)\n    at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:870) ~[thymeleaf-3.0.9.RELEASE.jar:3.0.9.RELEASE]\n    at org.thymeleaf.engine.TemplateManager.parseStandalone(TemplateManager.java:250) ~[thymeleaf-3.0.9.RELEASE.jar:3.0.9.RELEASE]. Some fixes : https://archive.apache.org/dist/httpcomponents/httpclient/RELEASE_NOTES-4.5.x.txt. I test the spring boot update with the overlay https://github.com/apereo/cas-overlay-template/tree/5.3 and I haven't seen bugs at the moment.\nThe release updates Spring-security and others dependencies : https://github.com/spring-projects/spring-boot/releases/tag/v1.5.17.RELEASE. ",
    "sadt": "The rest login request is a http post request. Is that a problem to pass TGTs as a param to a post request ? Would it be better to use a http header ?. I propose to replace this PR with #3650.\n. I personally don't use any load balancer at this moment in my system as CAS traffic is not very high. I only use some kind of active-passive clustering technology for HA purpose. So the CAS server is directly reachable from CAS clients, that are browsers using the \"normal\" (non REST) CAS requests and non browser software using REST CAS requests. \nAnd also, I haven't see any mean of authenticating a user using a browser application, with a tls client key/cert, other that directly connecting the browser to the CAS server, but I may have missed something ? \nSo, the Idea was to be symmetric between non REST and REST requests.\n. Thanks, I had not indeed noticed this relatively recent feature. So, it is possible to validate a client key/cert both with or without a proxy in front of the CAS server. This PR will permit the same both possibilities for the REST protocol. And as it is probably a bad idea to use both possibilities at the same time, I've added a config check and a warning.. This had been addressed by #3744.. Sorry for the missed items and thanks for completing! I can of course do some more work if needed. Just let me know.. In docs/cas-server-documentation/protocol/REST-Protocol.md there is a \"usage warning\" about allowing connections to the CAS server only from trusted hosts. At this moment, the warning applies to the \"bodyAuth\" method but in my opinion, it should also apply to the \"headerAuth\" method, as both methods allow obtaining TGTs without proof of private key ownership.\nOn the contrary, tlsClientAuth method needs a direct connection from CAS client to CAS server (for tls hand-check to occur, which forces to provide a proof of private key ownership) . The idea is to warn about the incompatibility of the first two methods with the last one.. ",
    "bplessis": "Personally I would be OK with that.\nThe only thing I can see is that the \"parse exception\" I got was a... \nNullPointerException so not really specific... (for a missing space between \ntwo xml attributes)\nLe 7 novembre 2018 18:47:59 Hal Deadman notifications@github.com a \u00e9crit :\n\nWould it be better to catch the parse exception and log the xml that isn't \nparsing at higher level (info or warn) so someone could leave the logging \nturned on at that level (without getting debug)? You could then re-throw \nthe exception.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n. ",
    "philippberger": "\nWhich environment is that exactly?\n\nRepackaged CAS to run in an OSGI environment as web application bundle, which requires a web.xml in which the org.springframework.web.servlet.DispatcherServlet is defined with the CAS configurations.\n. > Thank you for the explanation. Would you want to port this to master in another pull request, or do you need help with that?\nPR #3639 for master. ",
    "christophermccurdy": "I believe it's all versions prior to 12.2.\nSee Oracle 12c Release 1 (12.1) documentation bullet 1.\n\n\nNames must be from 1 to 30 bytes long with these exceptions:\nNames of databases are limited to 8 bytes.\nNames of database links can be as long as 128 bytes.\n\n\n. It looks like the limit is increased to 128 bytes in 12.2\nLong Identifiers in Oracle Database 12c Release 2 (12.2)\n\n\nOracle 12.2 increases the maximum size of most identifiers from 30 to 128 bytes, which makes migration from other database engines easier.\n\n. ",
    "V3ndetta": "\nI assume this will get merged, but you will need to submit another pull request for the master branch under the \"port it forward\" policy. \n\nThis could be a problem, as i'm currently unable to build the master branch and so i'm unable to test any code changes. Anyway, i still keep trying.\n\nOut of curiosity, what is the use case where this property is useful?\n\nWith multiple LDAP-Entries with the same uid you'll get an error from the entry resolver. Generally it should be possible to fully control the behaviour of used libraries like ldaptive. . Looks like it is updated in master branch already:\nhttps://github.com/apereo/cas/commit/c7e2e338437597f611851c07bf05ffcfd7515fd3#diff-8e4bce3af56d9ffe0418213856e8af88. ",
    "tfrancois": "I'm still having the same issue as @arbner.  Is there something I need to correct on my end?\n@mmoayyed  Can you offer any assistance here please sir?  This issue has rendered my CAS server un-startable.  (And I have just updated to the latest update you just posted that updated Gradle.). EXCELLENT!!! Thank you so much!!!. Thank you @mmoayyed!  After updating my snapshot, my instance started up without issue.  Thanks for your continued diligence and support.. UPDATE: New Issue as of Nov-1-2018 build (update to 6.0.0-SNAPSHOT):\n```\nNOTE: Picked up JDK_JAVA_OPTIONS:  --add-opens=java.base/java.lang=ALL-UNNAMED --add-opens=java.base/java.io=ALL-UNNAMED --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED\n02-Dec-2018 04:47:27.084 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server version:        Apache Tomcat/9.0.13\n02-Dec-2018 04:47:27.087 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server built:          Nov 2 2018 14:27:55 UTC\n02-Dec-2018 04:47:27.087 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Server number:         9.0.13.0\n02-Dec-2018 04:47:27.087 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Name:               Linux\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log OS Version:            3.10.0-862.9.1.el7.x86_64\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Architecture:          amd64\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Java Home:             /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Version:           11.0.1+13-LTS\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log JVM Vendor:            Oracle Corporation\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_BASE:         /opt/tomcat\n02-Dec-2018 04:47:27.088 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log CATALINA_HOME:         /opt/tomcat\n02-Dec-2018 04:47:27.090 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.base/java.lang=ALL-UNNAMED\n02-Dec-2018 04:47:27.090 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.base/java.io=ALL-UNNAMED\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: --add-opens=java.rmi/sun.rmi.transport=ALL-UNNAMED\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.config.file=/opt/tomcat/conf/logging.properties\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djdk.tls.ephemeralDHKeySize=2048\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.protocol.handler.pkgs=org.apache.catalina.webresources\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dorg.apache.catalina.security.SecurityListener.UMASK=0027\n02-Dec-2018 04:47:27.091 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xmx2000m\n02-Dec-2018 04:47:27.092 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Xms1000m\n02-Dec-2018 04:47:27.092 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dignore.endorsed.dirs=\n02-Dec-2018 04:47:27.092 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.base=/opt/tomcat\n02-Dec-2018 04:47:27.092 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Dcatalina.home=/opt/tomcat\n02-Dec-2018 04:47:27.092 INFO [main] org.apache.catalina.startup.VersionLoggerListener.log Command line argument: -Djava.io.tmpdir=/opt/tomcat/temp\n02-Dec-2018 04:47:27.093 INFO [main] org.apache.catalina.core.AprLifecycleListener.lifecycleEvent The APR based Apache Tomcat Native library which allows optimal performance in production environments was not found on the java.library.path: [/usr/java/packages/lib:/usr/lib64:/lib64:/lib:/usr/lib]\n02-Dec-2018 04:47:27.133 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"http-nio-80\"]\n02-Dec-2018 04:47:27.145 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n02-Dec-2018 04:47:27.149 INFO [main] org.apache.coyote.AbstractProtocol.init Initializing ProtocolHandler [\"https-jsse-nio-443\"]\n02-Dec-2018 04:47:27.629 INFO [main] org.apache.tomcat.util.net.NioSelectorPool.getSharedSelector Using a shared selector for servlet write/read\n02-Dec-2018 04:47:27.640 INFO [main] org.apache.catalina.startup.Catalina.load Initialization processed in 1156 ms\n02-Dec-2018 04:47:27.714 INFO [main] org.apache.catalina.core.StandardService.startInternal Starting service [Catalina]\n02-Dec-2018 04:47:27.714 INFO [main] org.apache.catalina.core.StandardEngine.startInternal Starting Servlet Engine: Apache Tomcat/9.0.13\n02-Dec-2018 04:47:27.732 INFO [main] org.apache.catalina.startup.HostConfig.deployWAR Deploying web application archive [/opt/tomcat/webapps/cas.war]\n02-Dec-2018 04:47:27.760 INFO [main] org.apache.catalina.startup.ExpandWar.expand An expanded directory [/opt/tomcat/webapps/cas] was found with a last modified time that did not match the associated WAR. It will be deleted.\n02-Dec-2018 04:47:32.298 INFO [main] org.apache.jasper.servlet.TldScanner.scanJars At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by org.codehaus.groovy.vmplugin.v7.Java7$1 (file:/opt/tomcat/webapps/cas/WEB-INF/lib/groovy-2.5.4.jar) to constructor java.lang.invoke.MethodHandles$Lookup(java.lang.Class,int)\nWARNING: Please consider reporting this to the maintainers of org.codehaus.groovy.vmplugin.v7.Java7$1\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\n\u001b[36m\n    _      _      _   \n  / /  / |    / \\    / |  \\ \\ \n | |  | |       / _ \\   ___ \\   | |\n | |  | |   /  \\   ) |  | |\n | |   _| //   _\\ |____/   | |\n  _\\                           // \nCAS Version: 6.0.0-SNAPSHOT\nCAS Commit Id: 6a770bdff3824dff14195d11141e266e83e05b9d\nCAS Build Date/Time: 2018-12-02T04:01:36Z\nSpring Boot Version: 2.1.1.RELEASE\nSpring Version: 5.1.3.RELEASE\nJava Home: /usr/lib/jvm/java-11-openjdk-11.0.1.13-3.el7_6.x86_64\nJava Vendor: Oracle Corporation\nJava Version: 11.0.1\nJVM Free Memory: 513 MB\nJVM Maximum Memory: 1 GB\nJVM Total Memory: 1002 MB\nJCE Installed: Yes\nNode Version: N/A\nNPM Version: N/A\nOS Architecture: amd64\nOS Name: Linux\nOS Version: 3.10.0-862.9.1.el7.x86_64\nOS Date/Time: 2018-12-02T04:47:37.314426\nOS Temp Directory: /opt/tomcat/temp\n\n\u001b[0m\n\u001b[32m2018-12-02 04:47:37,346 INFO [org.apereo.cas.configuration.DefaultCasConfigurationPropertiesSourceLocator] - \u001b[m\n\u001b[32m2018-12-02 04:47:37,451 INFO [org.apereo.cas.web.CasWebApplicationServletInitializer] - \u001b[m\n02-Dec-2018 04:47:37.740 SEVERE [main] org.apache.catalina.core.ContainerBase.addChildInternal ContainerBase.addChild: start: \n org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/cas]]\n    at org.apache.catalina.util.LifecycleBase.handleSubClassException(LifecycleBase.java:441)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:198)\n    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743)\n    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\n    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\n    at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\n    at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\n    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n    at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n    at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\n    at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\n    at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\n    at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\n    at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\n    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n    at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\n    at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\n    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\n    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n    at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n    at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\n    at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.startup.Catalina.start(Catalina.java:695)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\n    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\nCaused by: java.lang.NullPointerException\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.detectMapValueReplacementType(PropertiesMigrationReporter.java:140)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.isRenamed(PropertiesMigrationReporter.java:115)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$mapPropertiesWithReplacement$1(PropertiesMigrationReporter.java:88)\n    at java.base/java.lang.Iterable.forEach(Iterable.java:75)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.mapPropertiesWithReplacement(PropertiesMigrationReporter.java:88)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$getReport$0(PropertiesMigrationReporter.java:74)\n    at java.base/java.util.Map.forEach(Map.java:661)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.getReport(PropertiesMigrationReporter.java:73)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationPreparedEvent(PropertiesMigrationListener.java:69)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:57)\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:44)\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165)\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139)\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127)\n    at org.springframework.boot.context.event.EventPublishingRunListener.contextLoaded(EventPublishingRunListener.java:93)\n    at org.springframework.boot.SpringApplicationRunListeners.contextLoaded(SpringApplicationRunListeners.java:66)\n    at org.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:393)\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:314)\n    at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:157)\n    at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:137)\n    at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:91)\n    at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171)\n    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5098)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    ... 38 more\n02-Dec-2018 04:47:37.741 SEVERE [main] org.apache.catalina.startup.HostConfig.deployWAR Error deploying web application archive [/opt/tomcat/webapps/cas.war]\n java.lang.IllegalStateException: ContainerBase.addChild: start: org.apache.catalina.LifecycleException: Failed to start component [StandardEngine[Catalina].StandardHost[localhost].StandardContext[/cas]]\n    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:747)\n    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719)\n    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695)\n    at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986)\n    at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858)\n    at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n    at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n    at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118)\n    at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772)\n    at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426)\n    at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585)\n    at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308)\n    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123)\n    at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424)\n    at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367)\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972)\n    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432)\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422)\n    at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n    at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)\n    at java.base/java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140)\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944)\n    at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.core.StandardService.startInternal(StandardService.java:422)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)\n    at org.apache.catalina.startup.Catalina.start(Catalina.java:695)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350)\n    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492)\n02-Dec-2018 04:47:37.742 INFO [main] org.apache.catalina.startup.HostConfig.deployWAR Deployment of web application archive [/opt/tomcat/webapps/cas.war] has finished in [10,011] ms\n02-Dec-2018 04:47:37.743 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/opt/tomcat/webapps/ROOT]\n\u001b[1;31m2018-12-02 04:47:37,739 ERROR [org.springframework.boot.SpringApplication] - \u001b[m\njava.lang.NullPointerException: null\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.detectMapValueReplacementType(PropertiesMigrationReporter.java:140) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.isRenamed(PropertiesMigrationReporter.java:115) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$mapPropertiesWithReplacement$1(PropertiesMigrationReporter.java:88) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.mapPropertiesWithReplacement(PropertiesMigrationReporter.java:88) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.lambda$getReport$0(PropertiesMigrationReporter.java:74) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at java.util.Map.forEach(Map.java:661) ~[?:?]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationReporter.getReport(PropertiesMigrationReporter.java:73) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationPreparedEvent(PropertiesMigrationListener.java:69) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:57) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.context.properties.migrator.PropertiesMigrationListener.onApplicationEvent(PropertiesMigrationListener.java:44) ~[spring-boot-properties-migrator-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\n    at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:127) ~[spring-context-5.1.3.RELEASE.jar:5.1.3.RELEASE]\n    at org.springframework.boot.context.event.EventPublishingRunListener.contextLoaded(EventPublishingRunListener.java:93) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.SpringApplicationRunListeners.contextLoaded(SpringApplicationRunListeners.java:66) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.SpringApplication.prepareContext(SpringApplication.java:393) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:314) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.run(SpringBootServletInitializer.java:157) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.createRootApplicationContext(SpringBootServletInitializer.java:137) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.boot.web.servlet.support.SpringBootServletInitializer.onStartup(SpringBootServletInitializer.java:91) ~[spring-boot-2.1.1.RELEASE.jar:2.1.1.RELEASE]\n    at org.springframework.web.SpringServletContainerInitializer.onStartup(SpringServletContainerInitializer.java:171) ~[spring-web-5.1.3.RELEASE.jar:5.1.3.RELEASE]\n    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5098) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:743) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:719) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.StandardHost.addChild(StandardHost.java:695) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.startup.HostConfig.deployWAR(HostConfig.java:986) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.startup.HostConfig$DeployWar.run(HostConfig.java:1858) ~[catalina.jar:9.0.13]\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) ~[?:?]\n    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]\n    at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-util.jar:9.0.13]\n    at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:118) ~[?:?]\n    at org.apache.catalina.startup.HostConfig.deployWARs(HostConfig.java:772) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.startup.HostConfig.deployApps(HostConfig.java:426) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.startup.HostConfig.start(HostConfig.java:1585) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.startup.HostConfig.lifecycleEvent(HostConfig.java:308) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.fireLifecycleEvent(LifecycleBase.java:123) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.setStateInternal(LifecycleBase.java:424) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.setState(LifecycleBase.java:367) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:972) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1432) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1422) ~[catalina.jar:9.0.13]\n    at java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[?:?]\n    at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75) ~[tomcat-util.jar:9.0.13]\n    at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:140) ~[?:?]\n    at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:944) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:261) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.StandardService.startInternal(StandardService.java:422) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:801) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183) ~[catalina.jar:9.0.13]\n    at org.apache.catalina.startup.Catalina.start(Catalina.java:695) ~[catalina.jar:9.0.13]\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]\n    at jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:?]\n    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]\n    at java.lang.reflect.Method.invoke(Method.java:566) ~[?:?]\n    at org.apache.catalina.startup.Bootstrap.start(Bootstrap.java:350) ~[bootstrap.jar:9.0.13]\n    at org.apache.catalina.startup.Bootstrap.main(Bootstrap.java:492) ~[bootstrap.jar:9.0.13]\n02-Dec-2018 04:47:37.782 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/opt/tomcat/webapps/ROOT] has finished in [34] ms\n02-Dec-2018 04:47:37.782 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/opt/tomcat/webapps/docs]\n02-Dec-2018 04:47:37.797 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/opt/tomcat/webapps/docs] has finished in [14] ms\n02-Dec-2018 04:47:37.797 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/opt/tomcat/webapps/examples]\n02-Dec-2018 04:47:37.954 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/opt/tomcat/webapps/examples] has finished in [156] ms\n02-Dec-2018 04:47:37.954 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/opt/tomcat/webapps/host-manager]\n02-Dec-2018 04:47:37.974 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/opt/tomcat/webapps/host-manager] has finished in [20] ms\n02-Dec-2018 04:47:37.975 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deploying web application directory [/opt/tomcat/webapps/manager]\n02-Dec-2018 04:47:37.990 INFO [main] org.apache.catalina.startup.HostConfig.deployDirectory Deployment of web application directory [/opt/tomcat/webapps/manager] has finished in [14] ms\n02-Dec-2018 04:47:37.994 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"http-nio-80\"]\n02-Dec-2018 04:47:38.009 INFO [main] org.apache.coyote.AbstractProtocol.start Starting ProtocolHandler [\"https-jsse-nio-443\"]\n02-Dec-2018 04:47:38.014 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 10373 ms\n```\nWhen running the build using the ./build.sh run command-line option, I get the following:\n\nI prefer to run the WAR file in my own tomcat external container (and have removed the -tomcat) argument from the appServer setting in the gradle.properties file but it still fails to start with the default option as well.  I don't think is an issue with my config as I actually reset my pull request to the latest and  the error persists.\n@mmoayyed Can you look into this again please?  It looks like this might be a new issue that has popped with the latest build.\n. Hi thank you for your reply.  I removed all modules and cleaned out my CAS folder.  The only difference I'm seeing is that my Java version is jdk-11.0.1.  Could that be the issue?  It just looks like it might be Java related.. Not sure.  And I am disappointed to report that i have completely removed Java 11.0.1 and downgraded to JDK-11 and the issue persists.  The only difference now between my config and yours above is I'm running on RedHat.  The interesting thing is that this config was working PERFECTLY on the last 6.0.0-RC4-Snapshot.  Upon updating to the latest build released on 11/30 the problems began.  Going on over 20+ hours trying to find the issue.  Can you elaborate more on what you're guessing.  Again, keep in mind nothing changed in my config.  Where would I find the offending property?. Thank you for your help!  This is driving me crazy.  I am at a loss as to what could be causing the issue on my RHEL/Redhat instance.  It was working just fine until I updated.  If I'm having this issue, I'm sure others will too as I didn't change any of my config...all I did was update.  Stumped.  Do you have any other guesses?. SIR...I don't even now how to thank you.  I have been on this issue for the better part of 2 days.  That was the culprit.  Commenting it out and the CAS server has started without issue.  If you only knew how many things I tried...it was never ending.  I went down the LOOOOONNNGGGG road thinking the issue was because I was using the external Tomcat option when I wasn't messing with Java settings.\nMany others are going to have this problem!  Hopefully they fall onto this forum for the solution.  How can I thank you?!!!!!!. ",
    "larsgrefer": "@mmoayyed Why has @apereocas-bot added this to the 6.1.0-RC1 milestone but #3686 was added to the 6.0.0 milestone?. @mmoayyed Please review again. @mmoayyed Please review again. Done \ud83d\udc4d . The messages are rendered under the headline Authentication Succeeded with Warnings and will be styled by the alert alert-warning css classes. Therefore I thought warnings is the correct word here.. According to https://tools.ietf.org/html/rfc7230#section-3.2 header names are case insensitive, so it should not matter, but the RFC's use Upper-Case-With-Dashes for all their headers, so I used it here too.. An Instant itself has no timezone.. Your checkstyle rules allow both lombok.val and var :https://github.com/apereo/cas/blob/3d6092ffc210a312b8eaa8b081429ffe743fb568/style/checkstyle-rules.xml#L549\nWhy do you prefer lombok.val over the java-native var keyword?. ",
    "renovate[bot]": "PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### Renovate Ignore Notification\nAs this PR has been closed unmerged, Renovate will ignore this upgrade and you will not receive PRs for any future 4.x releases. However, if you upgrade to 4.x manually then Renovate will then reenable updates for minor and patch updates automatically.\nIf this PR was closed by mistake or you changed your mind, you can simply rename this PR and you will soon get a fresh replacement PR opened.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over then you can add the label rebase to this PR and Renovate will reset/recreate it.. ### PR has been edited\n:construction_worker: This PR has received other commits, so Renovate will stop updating it to avoid conflicts or other problems. If you wish to abandon your changes and have Renovate start over you may click the \"rebase\" checkbox in the PR body/description.. ",
    "jribette": "This pull request allow to change the response mode and response type parameters for oidc client delegation. \nPriori to this change, the response mode and type could not be set and the default pac4j values where used.\nThe change is backward compatible and does not change the default response mode and type.. Are the javadoc comments extracted in the Configuration-Properties page ? I didn't find the parameter documentation in the file Configuration-Properties.md.. Hi, \nI just updated the pull request for the 5.3.x and the master branch, with new javadocs and a documentation change.\nDoes it suits you ?\nShould I also create a PR for the 6.0.x branch ?. ",
    "semkyi": "Hi Misagh\nThank you for your reply. I'm sorry, I'm new to github. I have been \nworking with mercurial for the last past years.\nI have checked out the branch 5.3.x and created a branch which now \ncontains the changes. Unfortunately I'm not able to push the branch to \ngithub because of missing write access.\nCould you please help me with that?\nThank you in advance\nBest Regards\nArtur\nAm 21.01.2019 17:22, schrieb Misagh Moayyed:\n\n\nI would like to fix this problem\n\nSurely, you must realize that the pull request submitted here is not\nvalid; it contains about 300 commits and 500 changed files. If you're\nunsure how to put together a PR, please ask, and do please review your\nsubmitted changes before actually submitting them. Makes it easier for\neveryone to review and assist.\n--\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub [1], or mute the\nthread [2].\nLinks:\n[1] https://github.com/apereo/cas/pull/3756#issuecomment-456128790\n[2]\nhttps://github.com/notifications/unsubscribe-auth/Asp0uuGakOer3Ns6ENcZDf6qe5m8ohpYks5vFek_gaJpZM4aKj6E\n. Hi Misagh\n\nOf course, with pleasure. I\u2018ll do it tomorrow. I\u2018m in UTC+1 zone.\nThank you for asking :-)\nbest regards\nArtur\n\nAm 22.01.2019 um 20:25 schrieb Misagh Moayyed notifications@github.com:\n@pa55ionbub do you think you'd be able to submit the same PR to either the master or 6.0.x branches as well?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Hi Misagh\n\nI've checked the 6.0.x and the master branch. The affected code has been \nchanged since 5.3.x\nThere is no need for a PR in this case.\nBest regards\nArtur\nAm 22.01.2019 20:25, schrieb Misagh Moayyed:\n\n@pa55ionbub [1] do you think you'd be able to submit the same PR to\neither the master or 6.0.x branches as well?\n--\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub [2], or mute the\nthread [3].\nLinks:\n[1] https://github.com/pa55ionbub\n[2] https://github.com/apereo/cas/pull/3763#issuecomment-456529611\n[3]\nhttps://github.com/notifications/unsubscribe-auth/Asp0uvDOYyCFy0b_92iV0pvi_P7csCk7ks5vF2WggaJpZM4aMvdG\n. \n",
    "ftreguer": "So, I've removed applicationId, it's only used for JWT token generation for phone call with private key. Added signatureSecret for signed sms and updated documentation.. My bad, private key is for phone call. I'll add secret signature for sms. ",
    "doomviking": "Made a port forward at https://github.com/apereo/cas/pull/3844. ",
    "jgribonvald": "Is there a way to add a test with the creation of a ticket (TGT + PT) corresponding of a such service declaration ? It's only to be able to reproduce the problem from a test.. sorry here are logs:\nlog\n00:00  WARN: [kryo] Unable to load class E\u0004 with kryo's ClassLoader. Retrying with current..\n2019-03-08 14:28:51,658 ERROR [org.apereo.cas.ticket.registry.MemcachedTicketRegistry] - <Failed fetching [PGT-1-*****XXXXXXXXXXXX] >\njava.lang.RuntimeException: Exception waiting for value\n    at net.spy.memcached.MemcachedClient.get(MemcachedClient.java:1236) ~[spymemcached-2.12.3.jar!/:2.12.3]\n    at net.spy.memcached.MemcachedClient.get(MemcachedClient.java:1256) ~[spymemcached-2.12.3.jar!/:2.12.3]\n...\nCaused by: java.util.concurrent.ExecutionException: com.esotericsoftware.kryo.KryoException: com.esotericsoftware.kryo.KryoException: Unable to find class: E\u0004\nSerialization trace:\nprincipalAttributesRepository (org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy)\nservice (org.apereo.cas.authentication.credential.HttpBasedServiceCredential)\ncredentialMetaData (org.apereo.cas.authentication.DefaultAuthenticationHandlerExecutionResult)\nsuccesses (org.apereo.cas.authentication.DefaultAuthentication)\nauthentication (org.apereo.cas.ticket.ProxyGrantingTicketImpl)\n    at java.util.concurrent.FutureTask.report(FutureTask.java:122) ~[?:?]\n    at java.util.concurrent.FutureTask.get(FutureTask.java:191) ~[?:?]\n    at net.spy.memcached.transcoders.TranscodeService$Task.get(TranscodeService.java:97) ~[spymemcached-2.12.3.jar!/:2.12.3]\n    at net.spy.memcached.internal.GetFuture.get(GetFuture.java:70) ~[spymemcached-2.12.3.jar!/:2.12.3]\n    at net.spy.memcached.MemcachedClient.get(MemcachedClient.java:1229) ~[spymemcached-2.12.3.jar!/:2.12.3]\n    ... 135 more\nAt the first authentication I'm getting this log before:\nlog\n00:15  WARN: Class is not registered: org.apereo.cas.authentication.principal.DefaultPrincipalAttributesRepository\nNote: To register this class use: kryo.register(org.apereo.cas.authentication.principal.DefaultPrincipalAttributesRepository.class);\nWith the latest version from master branch (after rebased) I had also one more same error with Object[].class.\nAfter my problem with providing a test case is on how to contruct a ticket from a such service declaration example (from service registry of my test)\njson\n{\n  \"@class\" : \"org.apereo.cas.services.RegexRegisteredService\",\n  \"serviceId\" : \"^(https|imaps)://.*\",\n  \"name\" : \"local\",\n  \"id\" : 10001,\n  \"evaluationOrder\" : 99999,\n  \"desciption\" : \"Tous les services de la plateforme en test\",\n  \"usernameAttributeProvider\" : {\n    \"@class\" : \"org.apereo.cas.services.PrincipalAttributeRegisteredServiceUsernameProvider\",\n    \"usernameAttribute\" : \"uid\",\n    \"canonicalizationMode\" : \"NONE\"\n  },\n  \"attributeReleasePolicy\" : {\n    \"@class\" : \"org.apereo.cas.services.ReturnAllowedAttributeReleasePolicy\",\n    \"allowedAttributes\" : [ \"java.util.ArrayList\", [ \"cn\", \"mail\", \"isMemberOf\" ] ]\n  },\n  \"proxyPolicy\" : {\n    \"@class\" : \"org.apereo.cas.services.RegexMatchingRegisteredServiceProxyPolicy\",\n    \"pattern\" : \"^(https|imaps)://.*\"\n  }\n}\nNote the first commit doesn't permit to reproduce the error, but it should help if we have a test case to generate an error if an authentication is made, it will generate an error instead of a warning like in logs provided.. you're welcome :smiley: . This is in a WIP state as I can't reproduce the travis conf on my fork env to avoid to make PR before test passed !\nAfter I didn't succeed to run locally with a such conf, it seems there is a bug.... @mmoayyed or anyone: do you know what is wrong with my commit for travis ? I can't succeed to run the script that should run the docker-compose for a sentinel + redis context.\nThanks\nBWT: could you provide settings that I should do to run travis on my fork before to make the PR to avoid spam/annoying stuff on the main CAS project ?. @mmoayyed tanks for all pointers.\nI'm not testing it locally (as I didn't succeed to run test case locally - some grade fails on gradle's plugins). So I try only to translate my deployed test case with redis + sentinel to provide a unit test on Travis and to reproduce the error that I get before to try to solve it. In my mind the error come from the spring-data-redis lib update (+ maybe missing update on can side).\nAfter yes I've got the spring.io problems that blocked my work.. Ok so this time unit test reproduce errors !. Hi, a first review would be appreciated before I continue to provide some configuration possibilities, if you are good for it ? \nI could provide the configuration to be able to configure with the redis cluster mode, and also I have to watch the lettuce library as it seems we can have more features without sentinel needs.. On my last commit I purpose a property to be able to set READs on slaves or other strategy permitted by lettuce library.\nI don't think that I will purpose a redis cluster configuration as it seems not to be an efficient way of using REDIS for HA/failover.. So I didn't get how are running different test :cry: \nIf i change this class with the tag that you provide, it will run as usual ?\nAlso could you provide the command to run test locally ?\nI tried ../../gradlew --build-cache -DtestCategoryType=Redis test --parallel -x check --debug from the package and from the project root path but I'm getting errors. @mmoayyed thanks for the explanations, at least locally I can run now the test and I reproduce the error, but how to set system properties to set a local CI env ? I ran ./ci/tests/redis/run-tests-redis.sh but seems doesn't work, so ?. So with @tduehr we've found incorrect configuration on redist test and so I've made an other commit to enable/disable redis test on CI or on local from the rigth context.. ",
    "juancho85": "Hi,\n\nThe @RequestMapping annotation is capable of handling these HTTPs methods: GET, PUT, POST, DELETE, and PATCH, so indeed we are allowing more methods that we should. I'll update the Pull request with this approach, but I'll have to rebuild, deploy and test again\n\n@RequestMapping(method = { RequestMethod.GET, RequestMethod.POST })\n\nI have not tested with any other providers, but in the case some returned with HTTP GET instead of a HTTP POST, it would stilll be accepted with this approach.. I've tested on my environment with the changes and it is still OK.\n\nI have a message \"license/cla Pending \u2014 Contributor License Agreement is not signed yet.\"  but I've already signed the agreement. Does it take some time to mark it as checked?. ",
    "mikeroda": "Unfortunately this part of the protocol isn't covered in spec and differs among providers. But this change makes the support a bit more flexible. I just committed a fix for the build failure.\n. Yes, sorry if I wasn't clear. Different oauth providers implement this\ncallback differently since it's not part of the spec. spring-security-oauth\n(via RemoteTokenServices) does a POST and sends the token in the form data\nwith name \"token\" instead of \"access_token\", plus it expects a client_id\nback in the response. spring-cloud-oauth, which builds on\nspring-security-oauth, provides another implementation which does a GET and\nprovides the token in the Authorization header. This is exactly what the\ngithub oauth service uses btw. I think this second method is closer to what\nthe CAS oauth service does so I decided to map it here so that library\ncould be used to access the oauth2 support in CAS.\nOn Sat, Oct 11, 2014 at 11:10 AM, Misagh Moayyed notifications@github.com\nwrote:\n\nIn\ncas-server-support-oauth/src/main/java/org/jasig/cas/support/oauth/web/OAuth20ProfileController.java:\n\n@@ -71,7 +71,14 @@ public OAuth20ProfileController(final TicketRegistry ticketRegistry) {\n     protected ModelAndView handleRequestInternal(final HttpServletRequest request, final HttpServletResponse response)\n             throws Exception {\n-        final String accessToken = request.getParameter(OAuthConstants.ACCESS_TOKEN);\n-        String accessToken = request.getParameter(OAuthConstants.ACCESS_TOKEN);\n-        if (StringUtils.isBlank(accessToken)) {\n-            // try getting the bearer token from the authorization header\n-            String authHeader = request.getHeader(\"Authorization\");\n-            if (authHeader != null && authHeader.startsWith(\"bearer \")) {\n\nNot sure I follow. You seem to be describing a use case related to\nspring-cloud/spring-cloud-security. Care to elaborate? Is this header\nsomething that is set by either of those two library? Do they have\nexact/specific names? Can we collect a list and retrieve them here?\ncalling a substring of 7 characters on something that starts with \"bearer\"\nis very confusing at best in the log run. Before building any kind of\nsupport for this, we should make clear why this is needed.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/Jasig/cas/pull/721/files#r18742039.\n. \n",
    "jasonchw": "Can you point me to the code that is storing the \"username+password\" into the AUD_USER   column in COM_AUDIT_TRAIL table?\n. The constructUsername() method still need to be modified, because the database is storing \"username\" not \"[username: username]\";\n. ",
    "mduszyk": "You are right, I have missed this. The problem was that hazelcast registry which I was testing wasn't returning proxied ticket instance from getTicket method. Fixed this and rolled back changes related to addition of updateTicket:\nhttps://github.com/mduszyk/cas/commit/3496d4fe737ede4a6c90329b07fb5a3a4567879d#diff-8f60343d0dc3c9f1ea4d75ddcfef314fR127\n. The problem I experienced here is that service ticket weren't removed from cache registry when TGT ticket was removed. Discussed this with mmoayyed and he agreed we should remove service tickets together with TGT. Look here:\nhttps://github.com/Jasig/cas/issues/1183\n. As I understand and mmoayyed confirmed service tickets shouldn't exist if TGT is removed. I experienced issue where they where left intact after TGT was deleted. We agreed they should be deleted:\nhttps://github.com/Jasig/cas/issues/1183\n. Yes, I wanted to make it work the same for each registry type: memory, jpa, hazelcast etc.\n. There is also possibility of leaving ST and making sure they are always considered invalid in this state. For instance they could be left in cache and later while validating, the check to see if TGT exist is made, plus another check to see if ST is in TGT's internal map.\n. @leleuj pointed out that ticket update is done by proxy object. I analyzed it and found out that the root cause of ticket not being updated in case of hazelcast registry was that it wasn't returning proxy object, while other registries do.\n. Changing this makes it unnecessary to add updateTicket method to public registry API. \n. Added this, pushing new changeset.\n. Sure, I removed this because this only deletes service tickets on local copy of TGT which has effect on registry only in case of memory registry (direct modification of the object kept in registry map). Second, this sync block works as intended only in case of memory registry because for cache based registry the TGT object pulled from registry will be diff object each time getTicket is called. Cache based registry will pull serialized data from cache and then build new object - this behaviour may be diff depending on actual cache used but I think it is safest to assume this scenario.\n. The similar locking issue is here:\nhttps://github.com/Jasig/cas/blob/4.1.x/cas-server-core/src/main/java/org/jasig/cas/CentralAuthenticationServiceImpl.java#L437\nBut it seems to be separate topic and it does no harm in my opinion, except this locking doesn't serialize any access in case of cache based registries.\n. Added javadoc for 2 methods I found, which synchronize on tickets pulled from registry.\n. ",
    "marob": "I'm afraid that making sure the current event id is appropriately returned would require to radically modify the webflow.... ",
    "michalmmx": "Done.. ",
    "eisverticker": "I have assumed, that It should be enough to cast one operator to double in order to make the division an floating point operation. Thus the result should be double.. A test would be great but due to lack of time for setting up a proper development environment on my machine, I would prefer to leave it like that at the moment. But maybe this should be backportet to 5.3.x too?. "
}