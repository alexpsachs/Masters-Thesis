{
    "wesj": "Not the PR I wanted. Fixing up.\n. I accidentally made a new PR with this. Closing\n. Lets talk about the Locking at the work week\n. Closing this. I'm pulling it apart.\n. I think we'll still do something like this, but with the new sqlite backend, it will look different. Closing this for now\n. I think we'll still do something like this, but with the new sqlite backend, it will look different. Closing this for now. The rest of the requests on top of this should actually not change much (i.e. they should be backend independent). We'll see how that goes...\n. Doing this in a new PR\n. Doing this in a new PR\n. This has some issues if you actually use FMDB in it (just stuff missing from the project files). I fixed them up in the next pull request, and this should be fine (since it doesn't actually use FMDB).\n. This landed in a60bc0917bbbd7c12298247747095a6af018d927\n. I merged these over on top of the SwiftData stuff. I'm closing this and will put up a new PR, but since there are no real changes, I'm not going to re-ask for review on it.\n. Wound up on a new branch here. Put up a separate PR. Sorry :(\n. I'm deprecating this with https://github.com/mozilla/firefox-ios/pull/131\n. Should be fine. History methods always call back on the main thread right now. If we ever find good ways to assert if you're on the wrong queue, I'd love to use them.\n. Taking my r+. We can address any more comments in follow ups?\n. Yeah, we don't really have any mockups from UX on this yet. I was looking at making these a unified list in https://github.com/mozilla/firefox-ios/pull/104 but this feels pretty clean (and both seem a lot better than whats in right now).\nOne nice thing about the single cursor is that we can intermix different types of rows and use accessory icons/views on the right hand side to designate the row type (that's what we do on Android right now as well...) I wonder if we can UX to weigh in on what they'd like to move towards.\n. Sure. Right now this looks like: https://www.dropbox.com/s/ecvhntd7r6h1r5d/sections.png?dl=0\nWe can (obviously?) customize the section headers, or probably hide them if we want. That would bring us in line with Android (after I finish adding bookmarks in here)\n. Yeah. That should be fixed in https://bugzilla.mozilla.org/show_bug.cgi?id=1128363 if it ever gets reviewed. If you reset you simulator, it should also work.\n. I didn't see you updated this. I rebased it and all appears good! I'm going to land the rebased version.\n. This landed in bug 1134050 https://github.com/mozilla/firefox-ios/commit/7f3c18dbf0bc1840aa7c3d970d1e40b89e3c5036\n. Merging this because the travis CI things seem unrelated (and it fixes one of them).\n. I had to move Bytes.generateGUID to use it. I'm not sure if you'll like that or not. Easy to move back!\n. I landed some other fixes that made this better. I'm going to close this for now. We should put some indexes on the db someday though, just not in this PR.\n. I updated this to address some questions. Using our own cache for it actually causes some problems. Namley, imageView.sd_loadFromUrl(...) won't look there! There's no good fix I could find, so I actually just forked the method into a new:\nimageView.moz_loadFromCache(url, cache, completion)\nmethod. Its drastically simplified, but works well for this simpler use case.\n. This looks pretty good Aaron. Can you file a bug and add it as an attachment?\n. I moved the Curve code back into the urlbar file. TBH, I think in that case the encapsulation IS nice. i.e. we don't need to leak that info to everyone. But moving it out for me is actually more of a \"There's too much crap in this URLBarView file\" than anything.\nI also split up the transitionToEditingMode() function to try and make it easier to read. Ideally, I'd like to take everywhere we have isToolbarShown checks and subclass urlbarView with them, but I spent a morning trying to switch correctly between the two views on rotation before I gave up.\nFor the share overlay, there seems to be an issue with telling the popover that it should point to the button. It works if I use the backButton, but nothing on the right side of the screen. I fixed it by actually anchoring it to the urlbar. That actually worked better (since otherwise, the arrow was pointing left/right instead of up).\nI also had to create a member variable for the aboutHome state.\n. You might need to clear all the Derived data in Swift (and clean the project)? http://stackoverflow.com/questions/18933321/deleting-contents-from-xcode-derived-data-folder\n. Closing this. Nick split out the settings bit. I've got the ClearPrivateData bits in a separate PR. Sorry about that again :(\n. This looks really good to me. A few little changes. I'll merge when you make them :)\nSorry it fell by the side. We typically track things in Bugzilla (but also do some here). If you want to file a bug on bugzilla.mozilla.org and adding this PR as an attachment, it will make the people who track this stuff happy.\n. Updated. Thanks for the comments. All of the moving of the TabManager I put off here. We'll have to do that another time. There are a few changes in the existing commits (because I removed a bunch of commits here). The rest of the comments are addressed in the last one I think.\n. We fixed this in PR #413. Also, I need better commit messages there... Next time.\n. No problem. Looks good. Thanks\n. Fixed up the comments. Also added some code to keep these out of history. Sadly, that has to be in BrowserViewController. Putting it in Storage means making Storage aware of the Error Pages, which also required making it aware of the WebServer. Trying to put it in Profile also failed (once you make the Profile know about WebServer the project won't build (because Profile is used in Extensions and Extensions have no AppDelegate which GCDWebServer requires).\n. lttm\n. lttm\n. No one seems to be able to tell me how to actually see these errors. All I can do is guess and push. Can we either turn this off or find something better st3fan?\n. Thanks. It looks like this isn't finding a sqlite to link against. Is it possible that the builder isn't updating Carthage? Thinking....\n. lttm\n. lttm\n. lttm\n. lttm\n. lttm\n. lttm\n. Closing. I rebased this in a different branch to fix the buildbot errors. They're all working now (I manually imported sqlcipher and changed some of its build settings). I'm going to land the other branch since this was r+ until we hit those problems.\n. I wanted to first look at making Reader inherit from the SiteTableViewController stuff. Maybe that's impossible though. For now, I can add this same line there as well.\n. Argh. ReaderPanel doesn't use Cursors (because why not just ignore all our code patterns), it uses Result<[]>. I just updated the dividers. I wonder if SiteTableViewController can use SequenceType instead...\n. Not sure why I'm seeing this but others aren't. It can't hurt to have around though.\n. Just to be clear, because of the way error pages work in #466, they will try to reload the original page when restored. In fact, without storing the error page urls they won't store the failed url and wouldn't try to reload it (i.e. WKWebView doesn't store failures in its back-forward history).\n. Yes. Either url or display url should work once that patch is in.\n. I started down that path originally, but we access the webView in didCreateTab, which basically makes the laziness worthless. As soon as you start trying to move away from that you basically end up here. In fact, there's no code in BrowserViewController.didCreateTab anymore. I thought about removing it, but left it in for now. didAddTab actually does touch the webView as well I think. Those are all optional-? accesses now, but with lazy vars, they'd also wind up having to know about the state of the tab.\n. I'm not really clear what the webview does under memory pressure. i.e. the webview itself seems to exist, but has to be reloaded, right? I don't mind dropping that bit here. Was looking for an easy way to test this (firing a memory pressure event manually).\n. There's some questions there about the overhead of creating a webview but not loading anything in it that I really don't know much about. But we'd essentially end up with resurrect/zombify methods in that case that flipped some boolean to switch modes? What do we gain at that point?\n. Well memory isn't even the real consideration here. Its startup speed. I still imagine that might be faster if we can somehow avoid webview process creation (although we use one process for all webviews, so I don't even know that that is the problem)... but creating and attaching the webviews to the browserviewcontroller IS slow.\nEven ignoring that I still don't think we gain much. The zombify method isn't used much here, (and wouldn't be necessary if we removed the memory warning stuff, but I think its nice for symmetry). We'd still have a resurrect-type method. We already have the stored url here (we don't have to use it as a boolean either, which means we can evict a webview at any time we want).\nWe have to store the navDelegate here as well as the wkWebViewConfiguration. The rest of this patch is basically what you describe, plus a lot of ?'s. We have to add a dontLoadUrl(url) method to load a zombie url I guess. We could delay attaching the webview until its selected. At some point its easier to just not create it be really explicit here instead of trying to hide what's happening IMO.\n. Argh! I was looking for something like that. Scrolled the wrong direction I guess :)\n. Hmm.. We originally were a bit... half-hazard when it came to consts like this. Now we've been trying to pull them out into widget-specific UX-structs like this one:\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/URLBarView.swift#L10\nI think we should try to do that here and use the same (shared?) constants in both BrowserLocationView and URLBarView. i.e. I see some offset(8) calls in here:\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserLocationView.swift#L80\nthat I'm guessing are related to this problem? Overall, this transition (i.e. flipping between two completely different TextView/Labels is kinda janky anyway. Maybe we should file another bug to improve it more. I always wish there was just one textview for the whole thing...\nFor numbers used throughout the app, we've actually been putting things in here:\nhttps://github.com/mozilla/firefox-ios/blob/master/Utils/AppConstants.swift\nI tried/thought about putting a consistent \"padding\" value in there at one point (I think it is in there?) but I'm not sure its worth it or been successful.\n. Yeah. If you want to try that here sounds good.\n. > The highlight is sometimes \"off\".\nHTML-Transforms sometimes aren't reflected in these things, but I don't see any on FoxNews.\n. Webkit supports a -webkit-tap-highlight-color that pages can use here\nI know I saw it in the CSS on the Mozilla site you pointed out.\n. lttm\n. The test is already busted. I'll look into it here, but merging this for now.\n. lltm\n. lttm\n. I pushed this down to 1 second. We could try lower if its wanted, but 1s seems pretty quick for a page to load and the user click on something.\n. I timed the query for this and found it adds 2ms (with a large synced profile). We spend 500ms requerying the database to show the updated rows in the UI, so that seems pretty insignificant.\nI also found that we can crash (debug only maybe?) if you have more than 100 history entries and delete one. The tableView code notifies the list that it should delete, but doesn't notify it about insertions that will happen (at the bottom of the list). I added those.\n. I'm going to add some more tests for the crash above in a bit, but I want to actually do a bit more work on favicon expiration as well (i.e. remove old favicons when you visit a site that has changed, avoid downloading/adding icons that are already stored).\n. lttm\n. Rnewman gave a verbal r+ to this change in triage. Taking it!\n. lttm\n. lttm\n. I'm going to merge this since the tests are failing and its really just a change in the currying style.\n. lttm\n. lttm\n. lttm\n. Tests don't seem to be running. Going to land this to fix the build.\n. Seems fine!\n. We fixed (some) of this via a different approach (also, I think this just hid the problem).\n. lttm\n. I wound up doing this in some other patches. Closing.\n. I'm fine not clearing prefs for now. I... think we should try the prefs for now. Not clearing your search settings or something seems like it could be confusing. I'm going to land with it on (easy to turn off if we determine we don't like it?)\n. lol. uhh, yeah. in case there's confusion, i did change my mind halfway through writing that.\n. I think rnewman has this now. Closing.\n. https://www.dropbox.com/s/zcct28hrqdrig07/iOS%20Simulator%20Screen%20Shot%20Jul%2021%2C%202015%2C%203.42.03%20PM.png?dl=0\n. Same thing without the top sites changes:\nhttps://www.dropbox.com/s/6rgnchi6yubtzto/iOS%20Simulator%20Screen%20Shot%20Jul%2021%2C%202015%2C%203.54.37%20PM.png?dl=0\n. Oh thanks. That doesn't really need to be here, but I added it and updated this again. Try again?\n. Keeping this around in case its decided that people want it.\n. SearchTests isn't passing with or without this patch.\n. This sounds good. But I don't want to do it here. This coupling is already present (in fact, its lessened here by moving knowledge about what panels exist outside of the TabBarViewController. Lets use a second bug to develop this sort of interface if we want it.\n. I was at one point to unregister something I think.\nBut I left it in because I think it should be there. I don't understand why we'd make this API asymmetric. There's no way to know who is logging out here without access to it. i.e. Since this is passed to the initializer, its awkward to try and closure it in.\n. Hmm.. This is autogenerated, but I'm fine making it more specific if we can.\n. Storing the images there vs storing file paths or something? I agree....\n. I like this style from promises TBH. Its harder to ignore the error callback than it is to ignore an error parameter. But it also ruins nice looking block code:\ni.e. you wind up with method({ result in }) { error in }\ninstead of method { (result, error) in }\n. I think was just a typo on my part (the optional part here). I saw a crash at one point because of a separate error, and made this optional while trying to sort things out. Can undo\n. AFAIK, it should be safe as long as we're not using the main for whatever thread we're on. In this particular case, we ask for the Site OMT. MagicalRecord is smart and uses the right context for us automatically in that fetch:\nhttps://github.com/magicalpanda/MagicalRecord/blob/4a332d9ea5360b6e2837e04a52bcc8acef00da46/MagicalRecord/Categories/NSManagedObject/NSManagedObject%2BMagicalFinders.m#L144\nWhile we're still on that thread, we update the model and push it back to CoreData. There we do the save in a block (which has its own context, we could probably remove that and use the current background thread context, but its more boilerplate code that MR is trying to hide from us). Then we actually send the model back on the main thread. That bit should probably actually pass across the stored ObjectID instead, and then regrab the object in the parent context.\ngetAll() is the scarier piece there. We could wrap these ID's on one of our cursors to hide some of that work... I'll look into it.\n. Yeah, this runs into a Swift problem that I haven't found a good solution to yet (its also why our Cursors aren't generic). i.e. https://stackoverflow.com/questions/24888560/usage-of-protocols-as-array-types-and-function-parameters-in-swift\nBasically, if you make a protocol generic, it isn't useful anymore outside of a constraint on a class definition. You can declare a class that implements the protocol Table, but you can't store an array of Table[] anymore. I've tried to get around this a few times. For instance, declaring base-class that implements the protocol and having everyone inherit from that, but even then storing an array of BaseTable where T varies from obj to obj isn't possible (AFAICT). That's why I've just taken to passing around a lot of Any types here. Its as clean as I can seem to make things...\nAn alternative idea I had: remove the array of tables entirely from BrowserDB and do things more like we are in tests? i.e.\nBrowserDB.insert(tableName, object) would become:\nBrowserDB.withConnection(.ReadWrite) { conn in table.insert(conn, object) }\nLet me give that a shot.\n. The way this is written now, querying the HistoryTable would do that. Querying the JointHistoryVisitsTable would (I think) not (I'll add a test for that!). I've been using QueryOptions as a way to change that behavior if you wanted. i.e. to get all the History entries with zero visits, you'd query the JointHistoryVisitsTable with some option set.\n. r.e. the second dot here: I'd like to keep some implementation details like the foreign key bits invisible to users. i.e. they'd at best have a url or Site to pass us. I did the other two though, and I can stop using guid's in favor of a numeric ID...\n. You don't have to declare the type here.\n. I keep screwing it up, but I think our consts are just CamelCase in iOS. i.e. SignupUri. You might as well make these private too (and the top one isn't used?)\n. You probably don't need NSTextAlignment here. i.e. error.textAlignment = .Center\n. You made self.spinner a ! property, so I don't think you need this. I don't like ! properties (i.e. I keep finding that every time I need to use !, I'm covering up bugs the compiler could have found for me), but I can't come up with anything much better for these ViewController ones (I guess a solution that put all of this into a special view instead of a generic Container could fix that?)\n. I'd probably just use println here, but I'd actually rather hide all this logging behind some build-time const.\n. response seems like a strange name here at first. I think the method name is just what confused me.\n. No need for the !\n. St3fan: There's a generic container: UIView here though right? I'm curious, is there any reason not to add these view's in its init() method? Then the viewDidLoad method here would just be addSubview(SpecialView(delegate: self)) and the rest of this logic would move into the SpecialView class? I guess having to have the extra delegate kinda sucks :(\n. Does it need to be defined on the protocol? I couldn't see anywhere where we had a protocol object we were initializing.\n. Yeah. Originally I had all this transition code in its own separate class, but now that the view controllers handle the transitions themselves, we can just use them. Thanks :)\n. BrowserViewController uses that cell (all the table rows are CustomCell objects) in its transition It keeps the urlbar lined up with the view (and fading out) as it moves so that the two look connected. Unfortunately, because its behind the TabsTray, it slides behind it and disappears rather quickly. Even if we move the browser in front of the tabs tray, I'd like some way to pass information back and forth between the two view controllers for the transition. i.e. we'd want to tell the BrowserViewController (\"the webview should overlap this frame\")\nWe could call the options list namedViews or something, since essentially its used to find views that should have matching positions before/after the transition. That's more restrictive, which I don't love here.\n. Sorry, its taken me a bit to come back to this. I tried to do this initially, but Swift doesn't allow default parameter values in protocols. There's no way to do this that I know of....\n. This is working around Swift compiler bugs. i.e. the wrong methods get called with out. There's a Note in Generic Table about the problem.\n. It takes an argument (the files accessor). Storing a reference to it in every favicon would break our current setup here.\n. This is probably a stylistic thing a bit, but I wanted to make sure we always returned an object (not undefined or null). It also means we don't need an if (!res) res = {} line in the loop, but its mostly the former that seems like a pain.\n. The way this works right now, this view basically just lays out its subviews (in layoutSubviews now instead of in addButtons) to all take equal space inside its frame. It doesn't care what the subviews are. Its a little like a UIToolbar I guess, except without the abstraction between the UIBarButtonItem and the UIViews (and without support for spacers).\nDo you still want to handle non-button subviews differently?\n. You could make this non-optional and instead just set it to an empty cursor when its not assigned. Those can even have some \"state\", so we could do things like \"Loading\".\n. These are leaked to webdevs. Be careful not to leave them in in releases...\n. There's actually a diff of the two files in the bug. Its substantial, but not a crazy amount. I could done a little less if we wanted, but I think Desktop's Password code is actually going to be basically thrown out and rewritten soon.\n. Can we just use ToolbarHeight here and stay consistent.\n. We should probably just make an ImageUtils for stuff like this.\n. I have a patch that makes a generic Toolbar UIView that does some of this for us. We should switch over to something like that eventually.\n. The bookmarks panel still shows a \"Recent bookmarks\" header. The tabs panel does as well (although since we don't support syncing, you never see them). The history panel uses them in https://github.com/mozilla/firefox-ios/pull/172.\n. I defaulted these to 44 for now. We could reverse that and have you opt into headers. I'll do that if you like, but I wanted it this way so that we could have a consistent height/look for headers in these panels. Otherwise, everyone has to be careful to use the same height (or a constant).\n. Yeah, I knew people would cry about this. All I care about is making the lists consistent so that we're not continually having to update them all. We can rename (I don't like that the Search stuff is in Frontend/Browser though, and I don't like that its owned by the BVC, which needs to move away from owning everything anyway).\n. I don't understand why you want a special delegate for this. Can we not just have a UrlPickerDelegate? What do you anticipate is special about the search panel compared to the normal home panels? Why is it worth this effort to keep it separate?\n. The name delegate is proving too generic. You might as well name this something better now.\n. Why are you moving things like this outside the class?\n. We should probably rename this delegate as well.\n. again, why move these outside the class?\n. All of these table views we have are ways to show lists of urls or sites. I guess I don't see them as attached to views, but if you wanted to view it that way, they're all attached to SiteTableViewControllers. We did that intentionally because they all support shared display types and shared functionality.\nThese ViewControllers shouldn't care where they're displayed, if its on Home or in some other place. They're not really HomePanels. HomePanels are (IMO) just a convenience for generating these ViewControllers and maintaining a list of which ones to show on about:home.\n. I've been doing this intentionally. If you want to do add a History entry or something, you create one with a url and title, but the db is responsible for giving it an ID. It will look one up if it needs it (and assign it to you for future reference).\n. Yeah, this is just legacy from the original code.\n. Again, a bit legacy. BookmarkNodes technically don't need a url (for folders). I think we started with the assumption that you have to assign a title though i.e. non-null. I needed an ID here in the original patch to do linking against the icons (but I don't even really need that in this patch anymore).\n. Can we move this Settings stuff into a Settings folder (maybe it is in XCode's view?)\n. To be clear, this is from old code. I agree these guids should be optional (and private for now since no one outside of Storage needs them, although that will probably change). Storage can fill them in.\nBUT, for now I just forced them to be initialized in the constructor as we had done before. I'll file a bug to make them optional. I'm not sure about titles. It seems like a bookmark without a title (even an empty one) is broken.\n. I removed the default constructor here. You always have to pass in a value for the title of a bookmark to the constructor (i.e. implicit unwrapping is evil).\n. Lol. Its an Android widget. We could use something like NotificationBar or InfoBar?\n. I worried about this but didn't run into problems. Maybe I was just lucky though. Digging for some info...\n. Hmm.. The BVC one is a list of visible bars, but we could use the Browser's list for that I think. It still makes it a bit hard. \"Get all the bars after this one\" requires getting the list, getting the index of this bar, and then iterating over that sublist... I made this change. Will try to clean it up a bit and send it that way.\nThis actually should get much easier when the Browser is a UIViewController. It can just add these to itself.\n. I didn't see your reply go by. Github's awful for this stuff.\nYeah, I just wanted a SiteView and SiteViewDelegate here to save us from having an entire delegate interface for nothing, and save all the HomePanels from caring that they're \"HomePanels\". i.e. they just become reusable ViewControllers that we can place where we want, when we want. It also kills off 4 interfaces and replaces them with two. It saves us from writing a HomePanelDelegate implementation and a SearchViewDelegate implementation that we have to keep in sync all the time because they do the exact same thing. It also let us reuse more code between the SiteTableViewControllers, saving us from differences popping up between them, but still letting new implementations have the freedom to do whatever they want.\nI don't think I understand what problem you're trying to solve that you pointed to? What do we gain from keeping the SearchViewDelegate and HomePanelDelegate separate?\n. This seems like a bug. Worth logging at least? Or should we use ! here and fail if this happens?\n. We should probably document whether this is width/height or height/width.\n. I'm confused about the difference between the aspect ratio and the one used in TopSitesPanel. Are they different? Just by the label height on the bottom of the thumbnail?\n. url should be the same as webView.URL at this point.\n. We set left and right above. What does setting width do here?\n. You actually don't need this cast in this function\n. If there's no browser passed here, we'll just use whatever image was already in this cell. Is that intended?\n. Unrelated stuff? Also, is an empty title not valid? What do we do with them on Android? I always waffle back and forth on this, but probably title should always return the title and \"displayTitle\" or something should be used if we want to return the url...\n. Do you need this ?? nil\n. Ahh, this is why title works they way it does. Still, this should probably be:\nbrowser?.title ?? browser.displayURL?.absoluteString\n. I wish we didn't need this controller here, but it'll do for now. Every alternative I can think up involves making the HomeViewController a singleton of some sort... We could do that I guess. Or just hang an instance off the Application or something.... That seems reasonable given that the entire reason we're doing things this way is to avoid creating two instances of it.\n. Since this isn't a constant, I would probably just make it optional. Unwrapping it here just keeps the compiler from helping us. \n. This should just be optional too.\n. SDWebImage was designed to do this. i.e. If a different image is applied to the cell while a request is processing, it will cancel the original request.\n. SDWebImage has an optional completion block. I'll try to hijack it to use setup the alignment correctly if the image load succeeded.\n. Yeah, these tests actually run on the current profile, which is bad. We need to force them into a mock profile. I'm not sure the best way to do that...\n. You could probably write this using ReaderModeFontSize(rawValue: self.rawValue - 1), but I guess that would require some min-max clamping as well... Not a big thing.\n. You should be able to find this height with constraints.\n. We actually have a Toolbar class that takes a few buttons and spaces them out evenly inside it. Might be a little useful here (I guess that's what setupButtons does...). Follow up sometime if we've got repeated code there?\n. This function is long enough it might be nice to split up. i.e.\nvar row = addFontTypeRow()\nrow = addFontSizeRow(below: row);\nrow = addFontThemeRow(below: row);\naddBrightnessRow(below: row);\nwould be slightly easier on the eyes. Given that they all start with the same code, it could also probably be refactored out. i.e.\naddRow(below: view) -> UIView {\n  let row = UIView()\n  view.addSubview(row)\n  row.snp_makeConstraints(...)\n  return row\n}\n. Does this need to be localized?\n. Argh. I hate these view initializers being screwed. Above you used a default value. Here you're using explicit unwrapping. Probably best to be consistent.\n. the url parser likes it. I was a little worried about using http url's because sdwebimage might try and download them at a later date.\n. Can we wrap this data in the enum somehow?\n. I'm a little confused by these background colors. i.e. it seems like the dialog would have one color, and then rows (like the theme buttons or the fontsize-row, would opt into a different one if they want it.\nVLC's decoder actually doesn't even show the font-size-row color difference. Strange (I like it).\n. The font differences here are a bit strange. You should probably just use 15 or 16 for both this and the FontTypeTitle's. I'd like to use things from AppConstants here, but I know this is a bit specialized I guess. Watch for them appearing again and move them then?\n. Should this all be in an updateConstraints method?\n. Are we comfortable using System fonts for the Cancel/Add buttons and hardcoded ones here? Same for sizes?\n. I switched to passing the string.\n. Cruft. Removed.\n. If you want, bnicholson will cry if you don't fix the spacing here.\n. Same here. Line up the *'s\n. Redoing a second query on the db for every keypress seems pretty wasteful. Can we reuse the cursor we have?\n. Using if let here would be more swifty.\n. I wonder if you could just use a didSet-method on the text attribute and do basically the same thing here (then you don't have to stomp on this delegate).\n. Neat.\n. I really worry that we're being lazy with these colors and dimens all over the place. We did the same thing on Android and untangling it was a mess (and still isn't done).\n. I really think we need to stop clogging up BrowserViewController with this stuff. This is driven by the SearchViewController, so it seems like a better owner.\n. I guess if you're using didSet, you'll hit loops here where you'll have to be careful to bail earlier.\n. Yeah, I think you can still keep these decoupled but let the SearchViewController register itself as an autocomplete provider (or delegate, or whatever you have here). Then the BVC just needs to hook the two together when they're created.\n. The SVC can implement more than one protocol. I don't think you want to confound these two into one large one. i.e. SVC should implement a URLSelector Protocol (whatever we decided to call it) and a separate AutoCompleteDataSource one (or whatever we call that) \n. Heh. This number should be dynamic (and smaller in landscape). I changed it here once, but changed it back when things got hairy. Forgot the let->var change.\n. When I started to do this, I created a separate URLBarView implementation for landscape, and needed to reuse this on it. I pulled it out for reuse. (I still kinda wish I had those separate implementations, but the view/constraint lifecycle on iOS doesn't make it trivial to trade out views on rotation). I don't have super strong opinions, but I don't think the encapsulation granted here really gains us anything so I didn't put it back. i.e. we don't gain anything by saying \"No one except the urlbar should ever use this widget for anything!\" (as opposed to, \"no one outside should know about or change this variable/method\")\n. Keep this on one line. Oh. I didn't realize it was copy-paste :) Still, I'd put it on one line.\n. Same here\n. XCode likes to indent these, but I usually push them back one level\n. We use this label for some KIF tests. Make sure they still pass.\n. Add a comment. Also, we always name selectors starting with \"SEL\" so they're easy to identify.\n. Return nil instead?\n. Originally I did this here, but I've been moving away from it. i.e. the UI can decide if url and title are interchangable, but the model shouldn't.\n. Why are you flipping this?\n. I don't understand this comment\n. If this isn't a Favicon, something is wrong. I hate this. I'm hoping the Swift fixes will make it better to switch to using more generics. I just gave up originally because they resulted in so many segfaults.\n. Title is non-null in the schema here.\n. I'm surprised you need optionals here (and in the Favicons one). i.e. we've checked that the cursor has a result. When would it not be a Site?\n. Same title thing.\n. thank god for this.\n. Same. Hostname can't be nil...\n. Nice :) I have no idea why I wrote this like that...\n. Can you put a space here or does that break some awesome doc feature that I never use?\n. Why not use a subscript?\nEDIT: Argh. Brainfart (but this class should have a subscript). This should probably be \"append\" though to be consistent with arrays.\n. I'm fine doing those things. Android has a whitelist for things to not prompt for (including SMS). I'm a little nervous about the app store links (i.e. Its a lot easier to get back to Safari from the store than it is to get back to Firefox), and we shouldn't need them (i.e. the App Store redirects to itms:// urls, but apparently they do it incorrectly sometimes).\nI'll file some follow ups for this stuff though. This gets us to the point where everything should work (except the evil app store links that aren't using itms://).\n. Why are you making this implicitly unwrapped? Why are we creating it in init and not just when its needed?\n. s/current/currently/\n. Why is url declared out here?\n. Is this right? Usually we'd show a \"top sites\" like list if there's no query.\n. Oh, it looks like we did use an empty one...\n. I usually just said that the data-Cursor couldn't be null. Then it always returns a zero length anyway (and we can put a StatusMessage in it if we want to show something in the UI like \"Loading...\" or \"Oops... Something is busted\".\n. Oh, we already did this as well :)\n. Hmm... Good point about the ordering, although I don't think I really thought of append that way (or insert for that matter). I think I'd still take some consistency over a new different api. I've been annoyed enough with count(), size() and length() in Java.\n. It seems strange to me that we're leaking the URLBarView to this class.\n. And strange that this Loader holds Autocomplete stuff in it. Why can't the urlbar be a loaderListener?... looking at your comments, but I'm not quite sure if they mention this.\n. Its only used while the SearchViewController is open though right? Why keep it around all the time?\n. So basically you can't declare:\nprotocol CursorLoader: LoaderListener\nLoader\n? I probably wouldn't have made Loader generic. Do you have some other use for it?\nEDIT: And yeah, then I would probably have just made the urlbarView (or the autocompleteTextView) responsible for listening to the loader. Or you could subclass the AutocompleteTextView to do this (since its would be extending LoaderListener, its basically subclassed anyway). This method just feels really random to have in here.\nI guess I'm bucking MVC a little bit, because we seem to basically have one controller that controls everything in the app, and it makes for a huge messy class that basically is a \"do everything\".\n. Yeah. The point of the Loader seemed to me to be to abstract away loading the data from the views that needed it. By tying the loader to a particular view, it feels like we've lost that to me (i.e. the loader knows more about who's listening than \"that guy implements a LoaderListener protocol\").\n. Move this to its own class (unless it has dependencies it needs in here for some reason, I prefer the isolation)\n. What are these numbers?\n. Nit: Spaces around }else{ -> } else {\n. You could use let here now.\n. We've got some font stuff in AppConstants that I'd prefer to use here, but its all UIFonts. You might need to split it up a bit. i.e. AppConstants.SmallFontSize and/or AppConstants.DefaultFontName and/or AppConstants.DefaultSmallFontAttrbitues\n. Part of me wants to make this a little more... configurable. i.e. we can have an array:\nHeader: [HeaderFields] = [HeaderField.Url, HeaderFile.None, HeaderField.PageNumber]\nbut until we have a way to configure it, that's useless! Maybe file a follow up to look into this sometime...\n. Do we need the printInfo here? I removed it locally and things seem fine (but I don't have an AirPrint compatible printer).\n. With constants like this, we've been using UX-structs at the top of the file. If you move this to its own file, something like:\nstruct BrowserPrinterUX {\n    let PageInsets = 36\n}\n. These versions don't mean anything AFAIK anymore, do they? Versioning is per-table?\n. You might as well just use withConnection, since this readable/writable stuff is basically lies now (i.e. we only have one connection and its always read/write/create).\n. It probably doesn't matter here, but we should call super.drawRect() as well.\n. Ahh. I wrote that, so it all comes back around to me.\n. We should probably make this a \"for password in data\", but I remember hitting some swift errors originally when i implemented that maybe it doesn't work. Still data[i] should not be nil here. If it is, something is busted.\n. Guids should not be exposed anywhere... maybe that's impossible to fix.\n. Can you file a bug to make history dynamically fetch more data as you scroll? I don't really mind a limit on TopSites, but having one on History feels kinda bad to me.\n. Not to say I can't live with it for now. :)\n. I think I'd like to move all of the guid/folders to an enum, but i'm fine with lots of small follow ups for non user facing stuff.\n. I have a feeling that doing sha encryption and aes encryption of the same string with the exact same key is probably more dangerous than using different keys, even if they're known. The sync code you pointed me to does something like this actually:\nHMAC_INPUT = \"Sync-AES_256_CBC-HMAC256\"\ninfo = HMAC_INPUT + username\nT(1) = HMAC-SHA256(sync_key, info + 0x01)\nT(2) = HMAC-SHA256(sync_key, T(1) + info + 0x02)\nencryption_key = T(1)\nhmac = T(2)\n. Rather than 6 line notes about this, a single one with \"I don't think we should offer a no-encryption option\" would probably do the same thing. I don't have strong opinions. I just want to make sure the type/version of encryption is tracked so that we can change it as we need to.\n. Its the simplest way I found to know when the insert animation had ended. That's the only reason its there.\n. If an animation is interrupted (by another animation or because you set an animating field during the animation), the completion block is still called.\n. Didn't mean to remove. Just a bad merge.\n. Yep\n. I'm a bit nervous to use something that's dependent on another framework for SwiftData. Having SQLite.swift in the tree makes things... confusing here.\n. Setting the url = nil above will call through here and set it already. I was just trying to avoid some churn.\n. Oh you're right! Neat. I don't even think that's documented in the Swift docs. They have a note for setting things during init() but here its just \"If you assign a value to a property within its own didSet observer, the new value that you assign will replace the one that was just set.\"\n. I don't think it is. Just felt more \"correct\"\n. This would actually be pretty easy to unit test\n. Argh. Why did we do that? We already pay for storage for these. Now we're storing them twice?\n. I forgot those are half size. I'd still rather we just stored them normal size once than this. i.e. one place. one api. etc.\n. Good idea. At one point I had the tabs doing some jumps through hoops to store and restore these, but I just decided it was easier to use the callbacks and let these do it themselves. I'll make this non-optional.\n. Yeah it is. Good point.\n. This is a little tricky. Result might not have been filled in (if the query didn't run), so we need to check that its not nil. If err is nil it doesn't really matter.\n. We end up passing this to JSON(), which doesn't like the Optional values.\n. I do this every time just for you.\n. I don't think so. We pass in the original (toplevel) page here. I'm not sure when its scheme or host could ever need escaping...\n. Should be. Do you want an assert or something?\n. Heh. Swift! I renamed one to error for you so that its a little clearer who you've got in each context.\n. Desktop (and Android's) behavior is a bit nuts, but the point of this is to not highlight ANY subdomains (since they allow for easy spoofing i.e. www.google.com.realsite.com). There's a huge list of tld's here that desktop and Android use for that: https://publicsuffix.org/list/effective_tld_names.dat\n. I don't think we want to do that, do we? That would erase even the bookmarks favicons. Clearing the history should cascade to delete the favicons we want...\n. I would not assume this is true. We lazily create the webviews on startup for session restore. Its possible this tab was never touched.\n. I really just wanted to reduce complexity and avoid a lot of duplicated code here. i.e. only a single line of the 16 in addThemeBackgroundTo() involves setting the actual image. Likewise, when the theme image changes, we'd have to have every ViewController implement a duplicate applyTheme method. i.e. keeping them all in sync is a bit rough. I'm going to try just making a separate ThemeImageView: UIView class and see if that can absorb most of this...\n. Argh. Yeah, I was fighting with #ifndef for a long time before deciding it doesn't work here. Thanks.\n. db.runWithConn runs on the BrowserDB thread. Shouldn't block anymore.\n. Heh. No. I have some data in my syncing profile that tickles this and causes crashes. I'll remove it.\n. Yeah. I moved all this to a separate PR since its not really required here.\n. I'd like to make something a little nicer, but I'm fine getting there incrementally.\n. I... don't think it is. Basically we want to show 4 in portrait on tablets and 5 in landscape, but neither the horizontal (or vertical) size class changes there. I did switch the order of the checks here so that regardless of orientation, if a tablet moves into horizontal-size-class == .Compact, we'll switch to showing 3.\n. I'm going to remove this entire commit from here. Its better in a separate PR I think.\n. Oh. I didn't even see the deleteOrUpdate difference. I'll put this back :)\n. Should be. I don't really like trusting callers to always do this, but we should take it in the constructor if that's the case. Let me do that (if possible), otherwise I'm happy to do what you're suggesting.\n. This could fire if editing was started some way besides tapping the text field? Seems like it could be confusing some day.\n. I think I like began better than ended, but since its a change, just want to make sure its what we want.\n. I'm not a big fan of this \"overlay\" terminology. I liked editing though.\n. From the commit, what's this change? UX-review?\n. Its probably better to just make this stretch the height of the container (i.e. so it detection works regardless of if the toolbarheight changes). i.e. make.top.bottom.equalTo(self.locationContainer)\n. This method name is strange. \"AndToolbar\"?\n. From previous comments. Should this move to the end? Or even after the animation finishes?\n. I wonder if editingTextField would be more descriptive here.\n. Infinite AFAICT :) I ran a test here with the Alexa top 1000 to see how many good icons I could find. I set the test timeout at 100s (originally at least) and still wound up timing out.\nThis is just a random number. Happy for suggestions (but I don't think it should be very long).\n. Yeah, the way I originally wrote this the fetcher kept some state internally, so we needed separate instances. It could almost be class functions after this, but it does keep a little bit of state still. I'll see if I can remove it.\n. I really only put these options in for testing reasons (i.e. you can't test the upgrade from v1 to v10 if you don't have the v1 scehma around somewhere). I really just put the tests in because I was sick of having to manually downgrade/upgrade. Maybe we should punt on that test? Ideally maybe we'd copy these schema's over to the testing files, but in our case that would mean copying BrowserDB over as something like:\nclass BrowserDBv1 : BrowserDB  {\n  override var createTableX: String;\n}\nThat probably means some further refactoring to ensure that everything we want to override is overridable (i.e. the list of expected tables/views for each version for example). Worth it? Or just scrap the test?\n. I wanted a way to detect failure in tests. I wouldn't mind detecting failure in the app (and not crashing, but just not storing history), but I think we voted for this type of behavior instead (i.e. crash). Right now, we crash and you'll restart with a (hopefully working) DB? We should probably design a small UI for that sort of situation.\n. normalize = remove www/m/mobile? I'm down with moving to Site.\n. Oops. This comment was left over from earlier, but I do need to update this for the different frecency model we talked about.\n. I added one in here I think?\nfor i in 0...BrowserTable.DefaultVersion {\n        let history = SQLiteHistory(db: db, version: i)\n        XCTAssertNotNil(history)\n    }\n. I assumed this was some sort of parse error. Why return success that something didn't happen? This lets the UI decide if it wants to ignore the error...\n. I was trying to figure this out for a bit too! But frecency is already based on the grouping (i.e. the total number of visits and time of the last visit for this group). I don't think we need to sum, do we? (We already sum local and remote frecency).\nIf we switch to desktop's model where each visit gets a frecency of its own, we'd need this to get a composite for all the visits. I have a feeling computing a frecency for each visit will be costly though (still kinda want it).\n. ",
    "st3fan": "This looks good. Let's merge it in.\n. Manually merged.\n. NSDictionary takes AnyObject? and I think the JSON serialization does proper checks on that. The test for nil is just there because the backend expects a string and not a nil value.\n. Other than the Locking code I think this is good to merge. I'm no against the Locking code but I think we need to figure out if we really need it.\n. Looks good to me.\n. Not looking at details of the actual code, I think this is fine. Brute force away.\n. This is an interesting solution but I think doing it with a UIScrollView subclass is too complicated.\nHow about this instead:\n- Create a plain container UIView and put the login items in there\n- Add the container to the viewcontroller\n- Start listening for keyboardWillShow and keyboardWillHide notifications\n- When you receive a show or hide notification, resize the containerview: decrease/increase its height with the height of the keyboard. (the notification's userInfo contains the keyboard height and also animation settings - if you animate the containerView height change with the same settings you get a nice synchronous resize of the login dialog while the keyboard goes up)\n- In the container view you can use just constraints to make sure the dialog items are properly positioned. If they all fit in the top part when the keyboard is showing then there should be no dynamic changes needed. Otherwise you can also show/hide or reposition items in the notification handlers. \nIf you want to use autolayout for the container view, then you can add constraints to it to snap to the viewcontroller's view as usual. For the constraint at the bottom, keep a reference to the NSLayoutConstraint instance that you created and then instead of changing the container's view frame, just change the constraint's constant property. (Which should be padding between the bottom of the viewcontrollers view and the container view. Changes to constraints are animated if done within an animation block.\n. Would you be calling the (expensive) system layout size methods more than once? - This is a straw man. It takes a few milliseconds to layout a screen like that. Performance is not an issue.\nBut let's merge this in. Or was this fixed with another bug? I saw something keyboard related flying by.\n. Looks good to me! Merge it!\n. @ncalexan I can't comment inline on TokenServerClient because it was already in the repo so here are a few things that I noticed:\n- I think TokenServerToken.uid should be a int64. The SQL schema for our server uses a BigInteger which is int64 on Postgres.\n- Maybe you already have something in mind for error handing, but I was thinking of adding a isUserRecoverable or canBeRetried flag to errors that are returned. This does not make sense in case of malformed JSON of course, but if there is something like a temporary network error or a HTTP 5xx Try Later then we can set that flag which can result in code that retries later or some UI popping up asking the user to try it again at a later time. Right now it is difficult to see what is fatal and what is not.\n- For all the different NSErrors, should we assign a unique code?\n- Do we need to localize those errors? Not sure if they will be presented to a user. If true then  we simply need to use NSLocalizedString() for the error message.\n- Should every client have it's own Alamofire.Manager ? Or should we share a single instance that can be used for all http clients in this project? (I don't know)\n- Instead of TokenServerClient.tokenFromJSON .. maybe it is nicer to have a TokenServerToken.init(json: JSON)? If that initializer returns an optional then it can also do the validation and simply return null if the JSON is invalid or incomplete.\nThe tests look good. Are we going to add integration tests later that talk to a real token server? I have some at https://github.com/st3fan/bookmarks/blob/master/FirefoxAccountsTests/FXATokenClientTest.m - We can ask Services to spin up an instance on EC2 and run the token server.\n(To make testing this stuff easier I have written a REST API to generate MockMyID assertions. That means we can skip the MockMyIDFactory and just obain an assertion and key pair from a simple REST API and then submit that to production and staging token servers to see if our code is compatible against those. See https://github.com/st3fan/moz-mockmyid-api/blob/master/README.md)\n. I also see Apple sample code use arc4random.\nSee https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man3/arc4random.3.html - which has a note:\n\nThere is no need to call arc4random_stir() before using arc4random() functions family, since they auto-matically automatically matically initialize themselves.\n. This looks like a great first iteration. Lets merge it.\n. Thank you very much for the contribution @TBonnin. I think @thebnich would probably want to deal with this PR since he is currently refactoring the surrounding code to deal with multiple tabs.\n. I have updated the delegate method and some variable names so that it is more clear what the individual strings mean. I'm keeping the LocationTextField because I think we mostly prefer the longer more descriptive names.\n. @wesj Yeah I think you are right about doing async operations. Unless we can somehow guarantee that lookups are within a certain time range. (But maybe our history API is async anyway, which means we have no choice)\n\nNot entirely sure yet how to map async lookups to the text field yet. We may have to cancel previous lookups if keystrokes happen before a running query is finished. (How likely is that?)\n. @wesj Not having the caret when the completion is active seems sad. Follow up to fix? - I've followed the visual design of completion in Safari.\n. This needs to be rewritten with all the recent changes regarding the location field. \n. Looks good!\n. This is obviously work in progress. Looks good to me.\n. I am going to close this PR and create a new one. I am also going to remove the (toolbar) UI bits from this PR and submit a separate PR for a new location bar that includes a Reader Mode button.\n. Just a quick note that I'll take a look Monday to see if we can merge this\n. I'll look at this bug tonight.\n. I am going to merge this with the comment that this is not perfect but it will give us a much better idea of what kind of usable information WebKit errors contain. I am also going to file a followup but to turn these error messages into a more final design.\n. Just a quick note that on second thought we think it is better to revert this merge. There are a couple of things in the changes that we want to do in a different way and we need to give this some more thought.\n. Yeah I like that idea. I'll write some utility functions or a subclass to deal with that.\n. With regard to namespacing .. can we do a similar thing as in https://github.com/mozilla/firefox-ios/pull/116/files#diff-2 ? I am also going to follow that pattern for the ReaderMode.js code.\n. I think that setting needs to be in the project that generates the framework? So in Storage/Storage.xcodeproj/project.pbxproj ?\n. The extensions should already have it. I am pretty sure I fixed that a while ago because I saw the same errors.\nWhat the flag does is set some preprocessor flag that trigger warnings when you use some specific APIs when compiling your framework code. (An extension is a framework). This is why it needs to be part of the target that builds the framework and not in the target that consumes the built framework.\n. Confusion resolved. I did not get the warning for the extensions but for the dependencies:\nhttps://github.com/mozilla/firefox-ios/search?utf8=\u2713&q=APPLICATION_EXTENSION_API_ONLY\nSnappy and Alamofire.\n. Looks like checking the state for Began is a common way to do this when having a UILongPressGestureRcoginzier on a UIButton. Looks good.\n. We inject our code as a user script that runs when the page has loaded.\n. Looks good to me. I'm not a reviewer for this bug but I would give a +r :-)\n. @shaleengarg Hi there! All our bugs and tasks are in Bugzilla. We currently do not have a whole lot of bugs that are marked as good starter bugs, but we will work on that. If you want to make a contribution then I would suggest to start playing around with the Swift programming language.\n. Just a quick note that besides the Fennec Aurora build, I can also still successfully run the app in the simulator and on the device.\n. I'm getting a build failure:\n```\n/Users/sarentz/Mozilla/firefox-ios-thebnich/Client-Bridging-Header.h:6:9: error: 'SWXMLHash/SWXMLHash.h' file not found\nimport \n    ^\n\n:0: error: failed to import bridging header '/Users/sarentz/Mozilla/firefox-ios-thebnich/Client-Bridging-Header.h'\n```\n. Btw. This is awesome. Lets work through the build failures and get this going. We can also do this side by side next tuesday if that is easier. I don't want to rush it because keeping the builds working is high priority.\n. It looks like this patch or Carthage changes the default Build Configuration for the Archive phase back to Release instead of FennecAurora.\nI changed the Client scheme to change it back to AuroraNightly, but then the project does not build because the dependencies pulled in by Carthage are built using the Release build configuration while our app is using the FennecAurora one.\nI solved that by simply making our dependent projects aware of the FennecAurora configuration but I don't know if that is possible with this new setup because we basically pull the dependencies in as-is and cannot make changes to those projects.\n. Also see https://github.com/Carthage/Carthage/issues/314\n. @sleroux Just a quick note that I will review and merge this today or tomorrow. Proooobably tomorrow.\n. Yeah I'm asking our product manager to provide the email and a small piece of template text that we can put in the email  by default.\n. @ncalexan yes, Fennec is the local developer build.\n. No, close it. At one point we do need to deal with this. I am not happy with the way things are currently implemented in the app. But lets close this.\n. @jhugman can you also please commit the Cartfile.resolved after you have run carthage checkout --no-build --no-use-binaries - Our build systems expect the Cartfile.resolved to be up to date. (Right now the entry for XCGLogger is missing)\n. @rainforest1155 We have instructions at https://github.com/mozilla/firefox-ios/blob/master/BUILDING.md\nI would suggest to start by trying to get a build going in the Simulator. If that works then you can try to run on your own device. This does require changing bundle identifiers. But it should be possible, even with a free developer account.\n. When i try to build this, it fails on not finding FirefoxAccountConfiguration. Maybe this patch needs to be rebased?\n. @ncalexan do you know what happened here? Is FirefoxAccountConfiguration missing?\n. Note that the change to Storage/ThirdParty/SwiftData.swift is part of the PR that this one builds on. Please review #202 first.\n. I squashed and merged this manually.\n. @tecgirl i think only half of these changes mde it into the project. is it easy for you to see which ones still need to be imported? I think it is just the reading view button image?\n. Here is an alternative fix that replaces the UIToolbar with a UINavigationBar - https://github.com/mozilla/firefox-ios/pull/275 - I think that is more appropriate than fidgeting with image offsets.\n. I moved this PR to https://github.com/mozilla/firefox-ios/pull/294\n. I think this is a good idea except for things like UIFont.DefaultMediumFont(). Two reasons. I think it is very confusing to add things to standard classes like this. What is ours, what is from the system. I think it also defeats the point of having things in a central location.\nSo + on AppConstants but - on adding extensions to things like UIColor and UIFont.\nI would rather see AppConstants.DefaultButtonFont or AppConstants.HighlightColor.\n. Why is this not implemented with the State Preservation and Restoration infrastructure that is part of the UIApplication lifecycle?\nThis is documented at https://developer.apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/StrategiesforImplementingYourApp/StrategiesforImplementingYourApp.html#//apple_ref/doc/uid/TP40007072-CH5-SW2\nThere is no need to manually send notifications around because the application delegate will receive the following two callbacks:\n- application:shouldSaveApplicationState:\n- application:shouldRestoreApplicationState:\nAnd for UIViewController instances there is the UIViewControllerRestoration protocol that needs to be implemented.\nI think it is a bad idea to reinvent this.\nSpecially because the application can also launch in the background for different reasons. Like periodic sync or network callbacks made from app extensions. In those cases we do not actually want to restore the UI. And I think the current approach does do that. While if we follow the official protocols for this, iOS will prevent that from happening because the state management is done by the OS at the right time.\n. This is wonderful. Do you think we can apply the same technique to a UICollectionView? Asking because @darrinhenein has a patch in progress that replaces the current UITableView with a UICollectionView.\nI'll add some comments to the PR anyway.\n. @darrinhenein @wesj what do you think of merging this in already? i think people will appreciate this change. i think we can do it before we switch to a UICollectionView.\n. @darrinhenein it does. but lets fix that as a followup. i'd love to get this in the Aurora build I'm sending out today to get feedback.\n. @sleroux I moved this branch to https://github.com/mozilla/firefox-ios/pull/293 so that I could add an additional change to it. I did two things:\n- To fix the offset issue I assigned self.startLocation to self.animatingView.center instead of self.originalCenter.\n- I changed the logic to decide if the tab should bounce back or not a little bit. Previously it was possible to slowly move the tab to the left or right and then upon release it would slowly continue moving off the screen. I changed it so that is now takes the velocity into account. You really have to give the tab a push AND be past the treshold. Otherwise it just bounced back.\n. Going to close this one and merge #293 \n. Closing this for now. Can be reopened when we re-nom this bug.\n. I like this shortcut. Lets ask @darrinhenein if this is something we want to include?\nNote that this crashes on iPad. I have not looked at the crash in detail but I assume this is because the Action Sheet is not allowed to be shown full screen on iPad.\nTake a look at how we display the similar UIActivityViewController from BrowserViewController. You need to configure the popoverPresentationController so that it will do the right thing on both iPhone and iPad devices.\n. Thank you for your contribution Matthew!\n. @ilhanadiyaman let us know if you want to finish this patch. Like Wes said, with a few minor changes we will take this patch. I think it would be really great to have this in the product for v1, it will make a lot of people happy.\n. @ilhanadiyaman no worries. let us know if you need help with anything.\n. This PR has been replaced with https://github.com/mozilla/firefox-ios/pull/369\n. Thank you this looks good. I'm going to merge this.\n. Replaced with PR https://github.com/mozilla/firefox-ios/pull/387\n. I marked this as a duplicate because I implemented this recently in bug 1171599 - but now I see https://github.com/mozilla/firefox-ios/pull/384 which also did that. That PR was not attached to this bug however :-(\nClosing this PR.\n. @dusek Done. Thanks for spotting that.\n. As a nice side-effect of using the built-in gestures, things like long pressing on a phone number will also work much better. See https://www.dropbox.com/s/z5ubi6pwz4t0fzt/Screenshot%202015-04-28%2016.01.27.png?dl=0\n. As per discussion: We keep the Add to Reading List item, but we point it our own. Also removed all traces of old LongPressBrowserHelper.\n. This looks good but before we use this I want to make sure that this functionality is not already provided by iOS through NSDateFormatter.doesRelativeDateFormatting.\n. Ok thanks for the explanation @sachin004\n. Thanks for the quick fix. Ready to merge?\n. Thanks!\n. Yeah lets leave it as is. Thanks again!\n. I'll try to do a write-up today. I have the project up and running under my personal dev account, I just need to trace my steps back and explain the steps taken.\nI'm moving this to https://bugzilla.mozilla.org/show_bug.cgi?id=1153618 which we already had.\n. @toonetown Can you give https://github.com/mozilla/firefox-ios/blob/st3fan/BuildDocumentation/BUILDING.md a try?\n. @wesj will this PR be obsoleted by https://github.com/mozilla/firefox-ios/pull/470 ?\n. Looks pretty good. I'll give this a try tomorrow morning.\n. This does not work for me. I did a clean checkout and ran ./checkout.sh. In the project I now see a readability under Third-Party Source that has Readability.js in it. But, that file is marked red. And when I look at the path for it, it says /Users/sarentz/Mozilla/firefox-ios/Readability.js. Not sure what is going on here.\nDo you want me to fix this?\n. I'm picking this up. Going to close this PR and create a new one.\n. lttm\n. lttm\n. lttm\n. This looks pretty good. One thing I found: In the simulator when I toggle the In-Call Status Bar (which is a double height status bar), the tab tray controller is correctly pushed down to make room, but it never goes back up when the bar goes away. This does work in the browserviewcontroller.\n. @thebnich I don't know if #466 needs the same logic. I dont think we want to remember error pages but instead just remember the original url and try to load it again in the tab when the app is restored?\n. @wesj Ok so we do want the error page URLs to go into the tab state? @thebnich has a point earlier about just storing all http://localhost urls, since those are our internal ones. That can work for reader mode. And makes sense for error pages too then?\n. lttm\n. Result of integration 1\nIntegration took 6 minutes and 42 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Also, when measuring memory usage, remember two things: first, that a large chunk is happening outside of the main application process. You may actually be able to see the external processes that are being created. (On OS X they will have the site name in their process name). Second, the behaviour (of memory in general and webviews specifically) and memory usage is different on the simulator. Be sure to check on a real device.\n. lttm\n. Result of integration 1\nIntegration took 6 minutes and 52 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. lttm\n. Result of integration 1\nIntegration took 6 minutes and 40 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. @dusek i think we want to land this. are you happy with the state of these patches or do you want to improve them a bit more?\n. lttm\n. @dusek Hi Boris, yes please move this to the AppDelegate.\n. lttm\n. This is good but you will have to undo the signing identity changes.\n. @sleroux fixed the default\n. lttm\n. @xusader can you please rebase this? it does not compile on master for me.\n. @xusader I don't think the rebase worked out well because I still get some compile errors when I try to compile your PR branch. But it is ok, those errors were pretty minor and not in your code. I merged your patch.\nNo more green switches in the search settings! Thank you very much for the contribution.\n. Moving this past v1.0\n. lttm\n. lttm\n. CLosing because not relevant anymore.\n. Closing this PR because I cherry-picked the new assets into https://github.com/mozilla/firefox-ios/pull/534\n. We use the built-in WKWebView. I am curious why you ask. Do you have an interest in disabling the Same-Origin Policy or have you found a case where it fails to enforce it?\n. lttm\n. Bad PR. Can't fix this.\n. lttm\n. Can you explain a bit more about the use-case for this feature? I will then create a more complete Bugzilla bug for it.\n. (Closing because we track this one in Bugzilla)\n. @thebnich You asked this before: https://github.com/mozilla/firefox-ios/pull/491#discussion_r30848654\nMy response was this:\n\nNo we still need it. Otherwise when you move the app to thr background and back to foreground, with the app not being hard-suspended, the server port changes and the WKWebViews stay alive, which means that the webviews have internal state that points to URLs that may not exist anymore. This option prevents that.\n\nSo there was a reason that we set it. I don't know if that is still relevant though. Needs some more testing I think. See what happens with this option set to false when you switch out and in the app when a reading mode or error page is open. Specifically, can you still reload those pages? And what happens to older items in the BackForwardList that still point to the old port?\n. Thanks joel. Before we change this, lets wait a day or two and see if a new SDWebImage release comes out.\n. @sleroux I changed the code like this:\n```\ndiff --git a/Client/Frontend/Browser/BrowserViewController.swift b/Client/Frontend/Browser/BrowserViewController.swift\nindex 3b82fc2..191c699 100644\n--- a/Client/Frontend/Browser/BrowserViewController.swift\n+++ b/Client/Frontend/Browser/BrowserViewController.swift\n@@ -1482,7 +1482,7 @@ extension BrowserViewController: WKUIDelegate {\n         }\n     if let url = error.userInfo?[\"NSErrorFailingURLKey\"] as? NSURL {\n\n\nErrorPageHelper().showPage(error, forUrl: url, inWebView: webView)\nwebView.loadAlternateHTMLString(\"Error\", baseURL: nil, forUnreachableURL: url)\n         }\n     }\n```\n\nAnd I think that shows that this does exactly what we need compared to loadHTML() and loadRequest().\n. lttm\n. Screenshots for @darrinhenein \n- https://www.dropbox.com/s/y9lfnwb58r3ib1j/Screenshot%202015-06-16%2013.10.17.png?dl=0\n- https://www.dropbox.com/s/3nvadwxyzexx3yf/Screenshot%202015-06-16%2013.10.39.png?dl=0\n. @BigxMac This looks good. Can you also present the settings in a similar way when you hit the 'Sign In to Firefox' button on the Intro page? From there it opens the settings in full screen.\n. lttm\n. lttm\n. lttm\n. This has landed as https://github.com/mozilla/firefox-ios/pull/637\n. Fixed nits.\n. Obsolete\n. @kar1m I don't have a good feeling about this because there is so much state that we need to track. I am wondering if we can do this in a different way.\nFor example, the WKWebView has a loading property. What do you think of using that? We could use KVO to receive loading state changes and based on that show/hide the spinner. Then there is just one thing we need to look at.\nYou could use loading as a trigger. If it changes to true then you know you need to start the spinner. If it changes to false then you could loop over all WKWebView instances that we have and quickly see if any one of them is still loading or not. And do the same check after a tab is closed.\n. Closing this one in favor of https://github.com/mozilla/firefox-ios/pull/680\n. When switching to Search settings and back, I see this:\n\n(About label on top of the Sign In cell)\nMaybe a case of view recycling?\n. There is a fix in https://github.com/mozilla/firefox-ios/pull/639 .. either merge that small fix in here or land both (if no conflicts?) ?\n. Looks great. Much simpler!\n. @wesj The framework @allenngn is talking about is Photos.framework which is a built-in one. So no worries about Carthage here.\n. @allenngn We are still flexible with strings. I'll take a peek at this patch and see if we can land it today.\n. Closing this PR in favor of the forked PR at https://github.com/mozilla/firefox-ios/pull/689\n. This has landed as https://github.com/mozilla/firefox-ios/commit/99f2c601a5b706c7b9758d690f0ecc31e101c841 thank you @thebnich \n. If you rebase this we can land this.\n. @jyaif Where are these Gamepad APIs documented? Is this something common in other browsers?\n. As part of this fix, shouldn't we also change the strings to uppercase so that the localizers know that they need to uppercase their versions?\n. This has been done some time ago. Closing.\n. This has been resolved as of 3.0\n. Should be all good now.\n. Closing this one because it is already part of https://github.com/mozilla/firefox-ios/pull/1115\n. Pretty sure this does not happen anymore and that this was a bug related to us doing too much work for keyboard content offsets.\n. Done and Done.\n. I'm having trouble at the very beginning of the build https://gist.github.com/st3fan/ba3f818b2dd6a341d82d\n. Sorry if this is nitpicking but I would prefer if the branch name and directory name did not contain funny characters like ( and ) - how about changing:\n\nfirefox-ios-ios-aurora-1.3(1301)\n\nto:\n\nfirefox-ios-ios-aurora-1.3-1301\n\nThere is also a double ios in there.\n. The import locales step for an l10n build should not use the --skip-incomplete option. That is only for app store builds. For all other builds we want to see all locales, including the ones in progress / not complete.\n. Targeted for v5.0\n. Please try again with Xcode 7.3 final and the latest version of the project.\n. @schrorg We would love to see a PR for this. Do you want to work on this?\n. Yes, I am going to close this issue now that https://github.com/mozilla-mobile/firefox-ios/pull/3088 has landed. I think it has only landed on master though. @vbudhram is #3088 something we want to uplift to 9.0?. If brave uses the same port number, please change it.\n. This is on our roadmap. See bug https://bugzilla.mozilla.org/show_bug.cgi?id=1259252\n. That will only mean we will not include the incomplete ar localization. We will still render badly on an RTL system as shown in the screenshot. I think we need to fix that, even without ar localizations.\n. Closing because we are tracking this in Bugzilla now.\n. Maybe we can ask Google to add our modified UA to their list for GMail. Marking as needing a bug in Bugzilla.\n. Closing now this is tracked in Bugzilla.\n. This is out of our control since we depend on WebKit. But having said that, a reload should not always happen. You should see the exact same behaviour as on Mobile Safari, which certainly caches pages.\nMarking as needs bug so that we can investigate.\n. I'm going to have a better patch for this.\n. Hi @mystic123, thank you for your patch. We have decided to not land this because are including a feature that will let you add any site to the search engines. You can follow this feature at https://bugzilla.mozilla.org/show_bug.cgi?id=1205877\n. Please try again with Xcode 7.3 final and the latest version of the project.\n. Is this something that this patch should address?\nFailed to write to /Users/sarentz/Library/Developer/Xcode/DerivedData/Client-awmzgkgtcmxgnmfytuwcisolbdou/Build/Products/Debug-iphonesimulator/WebImage.framework.dSYM: Error Domain=NSCocoaErrorDomain Code=516 \"\u201cResources\u201d couldn\u2019t be copied to \u201cContents\u201d because an item with the same name already exists.\" UserInfo={NSSourceFilePathErrorKey=/Users/sarentz/Projects/firefox-ios/Carthage/Build/iOS/WebImage.framework.dSYM/Contents/Resources, NSUserStringVariant=(\n    Copy\n), NSDestinationFilePath=/Users/sarentz/Library/Developer/Xcode/DerivedData/Client-awmzgkgtcmxgnmfytuwcisolbdou/Build/Products/Debug-iphonesimulator/WebImage.framework.dSYM/Contents/Resources, NSFilePath=/Users/sarentz/Projects/firefox-ios/Carthage/Build/iOS/WebImage.framework.dSYM/Contents/Resources, NSUnderlyingError=0x7fe1d870d7c0 {Error Domain=NSPOSIXErrorDomain Code=17 \"File exists\"}}\nCommand /bin/sh failed with exit code 1\n. When I build again, SendTo fails with this. When I build again after that, I am back to the previous error.\nfatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: -remove arm64 specified but fat file: /Users/sarentz/Library/Developer/Xcode/DerivedData/Client-awmzgkgtcmxgnmfytuwcisolbdou/Build/Products/Debug-iphonesimulator/WebImage.framework.dSYM/Contents/Resources/DWARF/WebImage does not contain that architecture\n. This is part of v4.0. If you want to test this functionality ahead of the release then please sign up for the TestFlight beta at https://docs.google.com/a/mozilla.com/forms/d/1VG9pOntPVhfZWH18ETAZDOahyA6SCbNEpCxBVI-XNJM/viewform\n. @rikola @egirsova You can ignore all the warnings that are printed when running ./checkout.sh. We will address them at on point but they should not actually cause any troubles.\n. @egirsova I'm confused about the Download the 9.2 simulator in Xcode part that you wrote. Does this mean you are running the Xcode 7.3 beta? If not, aren't the 9.2 simulators installed by default?\n. The checkout.sh script is deprecated in favor of bootstrap.sh. Please follow the instructions in the most recent BUILDING.md. Feel free to open a new issue if you run into problems.\n. Tis may not be good. Need more time.\n. Regarding onAfterPrint/onBeforePrint: https://bugzilla.mozilla.org/show_bug.cgi?id=1247848#c6\n. @fluffyemily I started documentation at https://github.com/mozilla/firefox-ios/wiki/Screenshot-Tests\n. @fluffyemily I could not get the fastlane lane to work. I'll give it another shot. When it works we can get rid of the shell hack I did.\n. Thanks Emily! Merged this into my PR. So it can land as part of that one.\n. @fluffyemily what do we need to do with this one?\n. Created a bug https://bugzilla.mozilla.org/show_bug.cgi?id=1275318\n. @irew what was wrong with the original patch? Did that not do the trick?\n. Closed and moved to https://github.com/mozilla/firefox-ios/pull/1681\n. The checkout.sh script is deprecated in favor of bootstrap.sh. Please follow the instructions in the most recent BUILDING.md.\n. This should work in Firefox 3.0. What version did you test this on?\n. @yayang @AllLuckly Can you please do the following and let us know if that works or not:\n```\nbrew update\nbrew upgrade\nbrew install carthage \ngit clone https://github.com/mozilla/firefox-ios\ncd firefox-ios\n./bootstrap.sh\n```\nAfter that you can open Client.xcodeproj and build and run the app. Try running in the Simulator first.\n(This is essentially what BUILDING.md documents to be our build process.)\n. (Please open this issue again if the BUILDING.md instructions do not work for you )\n. Honestly, I don't think it matters when pings happen right now. We have a lot of network chatter going on. Page loads, favicons, thumbnails, etc. Right now it is completely unpredictable when what is happening. If we can tightly schedule networking then maybe we can optimize it, but we are very far away from that.\n. @pvinis Yes, you can sign up at https://docs.google.com/a/mozilla.com/forms/d/1VG9pOntPVhfZWH18ETAZDOahyA6SCbNEpCxBVI-XNJM/viewform\n. Do not land. See comments in bug.\n. I think this is a great start. We can do buffering of pings later.\n. Love to do this but unfortunately the iOS Keychain is not accessible to apps. Only Safari can get in there.\n. Random note: using standard controls like UICollectionView means that things will mostly just do the right thing when it comes to accessibility and RTL support.\n. I just want to give a thumbs up for the name of this PR \ud83d\udc4d . @shree007 Is it possible to configure a proxy in an iOS application? We were under the impression that it is only possible to set a proxy system-wide. If there is an API to do it per-app, can you point us to it?. I tried configuring the NSURLSession but it did not work on iOS. I think this may only work on macOS? That StackOverflow article you link to says that it is actually impossible for WKWebView. So not sure where to go from here.. Unfortunately we depend on Carthage, which is currently not supported by the Swift Source Compatibilty Suite project. We are more than happy to be included and do work on our side to make that happen.. Good comment. I will look at other parts of the app that potentially listen to  NotificationProfileDidFinishSyncing ... it looks like the other things that listen to this notification will not exist in an app extension - Panels and ViewControllers.. I see in the logs that youa re compiling with Xcode_8.2.1 - Please upgrade to 8.3.3, which is a requirement for the master and v8.x branches.. @farhanpatel I suggest to @vbudhram to enable this feature via the feature flag. I agree that the flag can go completely if we land this for reals. How about we keep it for a while in the beta period so that we can do testing and if this is good we remove the flag, if not we can still disable the feature before shipping to the App Store.. I doubt this attribute is useful: If Leanplum says this should be a number then we cannot use CFBundleShortVersionString since 8.1.1 is not a number. Why can't we depend on the build number, which is already known to Leanplum.. I cherry-picked the individual commits up to Bug 1393634 - Update SnapshotHelper.swift.\n. @vbudhram No, enable this for all builds please. I think it will be very useful if Release and Beta can also use this.. @joeyg @jhugman This is great initiative, but for a feature like this we do have to run this past our product team to find out if this is something we are willing to include in the product. It is not a light decision since it will result in maintenance, extra dependencies, testing, ux work, continuous improvements, etc.\nI don't want to discourage you, since it is rare that we get patches like this, but I must say that it is not a given that this can land in the product.\nLivemarks are an odd feature, and we have to find out if this is something that desktop is also willing to support in the longer term. Which is very unclear at this point.. @jhugman can you please create a Trello card in the backlog for this feature and bring it up in the next funnel meeting? Also please know that I have no objections. I just want it to be a calculated choice instead of a drive-by feature.. Relevant: http://fieldguide.gizmodo.com/why-rss-feeds-still-beat-facebook-and-twitter-for-track-1800722740. Looks good, just needs the update to Cartfile.resolved if this lands today. Was this crash verified? We don't get undefined behaviour by returning nil ?. It would be really nice if this worked well. Before we land this we just need to make sure our extensions work correctly from Firefox, Safari, Chrome, Twitter & a few other that share URL data. Specially make sure the behaviour is the same - that we get both title and url.. Not sure if we need to do this on master. The builds we do from master include all locales by default, even ones that are incomplete. Let me know if you had something else in mind with this patch.. Do our sync tests cover this code well enough?. Are you reporting this issue for Firefox Mobile for iOS?. I closed this PR because this was fixed not with project changes but by letting BB generate the right provisioning profiles on its own. I connected my iTC account.. Closing this patch because the bug is actually in the import script. I fixed it here https://github.com/mozilla-mobile/ios-l10n-scripts/commit/1ae6c41d4300c2978d0abf278ed30afc3a7d51e9. I am not sure if this is the right fix:\n\nBackgrounding the app shuts down the app-internal web server. Tab restoration is performed by sending requests to this web server, so the request gets killed when the server is shut down, and the tab never restores properly.\n\nInstead of changing the behaviour of the web server, can't we wait with tab restoration until the web server is back up and running?\nI'm a little concerned because I remember that this AutomaticallySuspendInBackground option was set for a very specific reason. I am not sure if this is going to result in regressions in other parts of the app.\n. Can we enable this code? I disabled it because it did not work for some reason. But I think it will be good if we can open bookmarks in Safari.\n. Yeah I don't think the accountManager should be so deeply integrated in the TabBarViewController. Ideally the TabBarViewController is just a generic component very much like the standard UITabBarController is. I think it should just manage a bunch a view controller and a button bar but not know anything about the details of those view controllers.\nThis also means that all the view controllers can simply be UIViewController instances instead of ToolbarViewController instances. (Why would the Bookmarks view have to know anything about the account manager?)\nI think we need to design things, specially view controllers, as much as standalone components that you can take and use in a different app. Not that we would do that at this point, but if that is possible then it is a good indication that you have decoupled it correctly.\n. It is better to add and remove observers in the viewWillAppear and viewWillDisappear lifecycle methods I think.\n. How about giving TabViewController an API that lets us move all the application specific logic into the class that owns the TabBarViewController? (Probably the app delegate)\nI think our AppDelegate would then also be the observer of PanelsNotificationName notifications, and simpy instal the new panels on the TabBarViewController.\n. Was the lowercase K intentional?\n. I'm a bit worried that we need locking. Ideally the things that are now protected with locks are only accessed from the main thread/queue. Which is serial, so there would be no locking or concurrency issues. If we think that we are accessing those resources from multiple threads then maybe it is better to add an assertion that triggers if the code is called from the wrong thread. Then we can fix the calling code?\n. I don't think it should be optional. It is better to be forced to set a descriptive name so that we can see those threads correctly named in the debugger if needed.\n. Also, I don't think testUser is a valid username. Firefox Accounts expects email addresses.\n. Shouldn't all those strings be NSLocalizableString()s?\n. It is required because the InitialViewController is set as the PrincipalClass in the extension's Info.plist.\n. That is how xcode completes callbacks. Is there an actual difference between the two?\n. It is used in both extensions. Since they are separate binaries they can only share code if it is factored in its module module. It is specific for UIViewControllers since that is where the extensionContext lives. I'm also happy turn turn it into a global function if that is more appropriate. Could be something like extractSharedItemFromExtensionContext(...)\n. Will do. Sorry, i created it in 'Shared' and thought that was a folder reference. Seems it is not.\n. I think it is fine to create global identifiers in a top level project. Apple used to recommend that you prefix classes and category methods with something like MOZLoginViewController or moz_categoryMethod but they stopped doing that with Swift. They even removed the 'Class Prefix' field in the New Project wizard.\nI think the rule is: do whatever you want in your application but if you create a module or file that is supposed to be used in other projects, then namespace it. Since this is something we may want to use in other projects later on, lets move it to a ExtensionUtils struct.\n. This one is entirely on @wesj because I copied his Bookmarks.swift as a template for this file, haha :-)\n. These are file references, so probably because ExtensionUtils is used in the main app, tests and extension targets.\n. This file is only used in the Send To Extension, which is separate from the application. So they are already separate Swift modules that do not interfere.\n. Curious why @objc is needed here.\n. I think this is more swifty:\nswitch bookmark {\n    case let item as BookmarkItem:\n        // Open the link\n    case let folder as BookmarkFolder:\n        // Decent into the folder\n}\n. Why did you lift this out of the ExtensionUtils struct? We were using that struct as an artificial namespace.\n. Can this fail? What if this code is executed at the same time as a sync session and that indexPath.row does not exist anymore? Should this code work on a snapshot of the data? Or is it already doing that?\n. What happens if it fails? We show an empty cell? Shouldn't we work with a consistent  snapshot of the data so that it is impossible to fail?\n. To simplify that a little bit: live changes in the tableview, while you are watchingbrowsing it, are extremely annoying from a UX POV and should probably be avoided. I think the only time we refresh a tableview that you already have or had open is when you:\n- Go back to the view because you had the app in the background or you had selected a different view in the app previously\n- Manually pull to refresh\n. No the UIAppFonts were already in there. See complete diff.\n. @rpowelll is correct. This message is shown once when the first site requests location data. Individual sites will also trigger a followup doorhanger that the WKWebView will show.\n. If we bring back the tabs, that means people who are now working on the browser part will be in trouble. We also don't want the login to be required. What would be a good way to deal with this?\n. These folder names would be good candidates for an enum\n. SEMICOLONS! :-)\n. If the compiler requires a default case that means that the bookmark could resolve in something other than BookmarkItem or BookmarkFolder. Maybe that means the type needs to be more strict? Dunno, maybe that is impractical.\n. These Javadoc style comments don't work. If you use the /// style as this code previously did, Xcode will actually generate nice inline/popup documentation for you.\n. I think this should be 'createDefaultFaviconorPlaceholderinstead of using the termMockhere?\n. Would it make sense to turn this into an optional initializer that return nil if any of the input values are invalid?\n. Would it make sense to use the SwiftSequenceprotocol here? Then you can usefor node in folder. And instead ofget()we could dosubscript(index: Int) -> BookmarkNode- which fails hard on out of index, which is more correct than returning an optional I think.\n. Or at least constants if an enum is not approprite.\n. I think we need to figure out of storing these in the database is a good idea. Maybe we can create a test to run on a device and then check with Instruments.app what the consequences are. Instruments has good inspections of Core Data Fetches and Memory Usage.\n. WhyAnyObjectand not something more specific like evenNSData?\n. There are a lot ofprintln()s in this code.\n. Also, even though this message is in Info.plist, it can be localized. I'll file a bug for that so that we don't forget.\n. Please get rid of this empty method.\n. This is simply the delegate (Objective-C) way of naming things. Read it as:locationTextField:suggestionForPartialLocation:- this is pretty much how all UIKit delegates are named.\n. Why a setter? Isn't that non-idiomatic for Swift? I thinksearchViewController.searchEngines = mySearchEnginesis preferred?\n. IfdidEnterURLis called with an optional, then what does it mean if url isnil` ? I think what you originally had is more correct.\n. Maybe it is nicer if all this is done just once before the tableview is shown? Now you loop through the list for every cell. I don't think that is noticable in performance but from a code point of view it is nicer to build the list table contents once at view controller setup.\nAlso, my documentation says that NSIndexPath.item is for the UICollectionView, and that it is not available in Swift? I think you want to use NSIndexPath.row instead.\n. Same here, I think this should be indexPath.row .. It may work, but officially item is for the UICollectionView.\n. In the SearchSuggestClient you can capture the Alamofire request it is currently executing and cancel it or set a flag so that it will ignore the results.\n. This is nice. I had previously used a setter/getter in combination with a shadowed 'real' variable. Much easier with didSet.\n. Filed bugs for moving them out of this file.I think it will be good to have them available non-private because that means we can use them in future unit tests for example.\n. The intrinsic size is just the 'ideal' size. Auto layout constraints will override these. I took the height from the existing control. If that is not correct or if we need different values for different orientations then we can configure that. The cool thing about intrinsic size is that autolayout also looks at it. So you can set less constraints. The width is obviously wrong, but it is just a suggestion, so in our case autolayout makes sure the control is stretched correctly horizontally while keeping the control's preferred height.\n. I was counting on native code for the interface.\n. Yes. I'll file bug.\n. Why did you move this out of setupWebServer() ? Oh I see the name of the commit now. Is it not possible to add more handlers after startWithPort has been called? If that is the case, can you rename setupWebServer to startWebServer then?\n. I don't see resultString being used. Is this just for debugging or do you intent do include it on the page?\nI think it would be interesting to display all those values on the page: that will give us a good idea of what is actually relevant and then we can decide what we want to show in a more final version.\n. Have you tried putting this in viewWillAppear or viewDidAppear?  Isn't that a more logical place?\n. I saw your note about the order of creating/initializing things being important. Are you sure this did not work before? Because I am successfully adding user scripts to the webView.configuration.userContentController from the ReaderMode helper without issues.\n. What happens if a tab in the background requests one of these alerts?\n. I don't know if this has changed in iOS8 but it used to be so that you cannot call reloadData() from any thread other than the main thread. I don't know who ultimately calls this but you may want to verify that or add a check for the current thread + dispatch to main thread.\n. I think ideally i'd like to keep Reader.css in sync with aboutReader.css in the gecko project. For example the small tweaks that I added for WebKit could probably also go back into a shared version. Have to talk to @leibovic to see how much of that is possible. I am for example not sure how we can do conditional CSS things like those resources.\nHmm maybe we can split up the CSS and move toolbar specific styles out of the main file.\n. @leibovic I filed https://bugzilla.mozilla.org/show_bug.cgi?id=1125839 as a reminder to merge back changes we make for iOS.\n. Why can't we make the locationview simply the right height and instead of doing something relatively low level like hitTest instead just install the tapGestureRecognizer on the whole BrowserLocationView instead of the locationLabel ? Then the whole thing from top to bottom is a hit target. Teh label needs to have its userIntractionAllowed removed then so that clicks pass through it.\n. Thanks this is a good suggestion. I'll rejig the code.\n. Print is really Sepia. I also think the name is confusing but we can argue about that in a different bug.\n. I forgot about the context menu. Either what you suggested or I'll think of something better. I think it is nicer to not have the recognizer hang around all the time.\n. Unfortunately not, because we can't predict the port number.\n. We start the server with port 0 so that the OS will allocate it a random available port. If we use a hardcoded port number then we have to deal with the possibility that the port is not available and that we have to use a different port. And then we are back to dynamically changing the port in things like this.\n. I don't think the FxASignInViewController should be a WKNavigationDelegate. It is nicer to give the FxASignInWebViewControllerDelegate a signInWebViewController(:didFailWithError:) delegate method. Then you hide more details and VCs also know less internals about eachother than (There is no need that the SignInViewController knows that the FxASignInWebViewController uses a WKWebView. It just needs to know that a login failed, cancelled or errored)\n. It is common to give delegate methods more descriptive names like:\nfunc signInWebViewControllerDidCancel(signInWebViewController: FxASignInWebViewController)\nfunc signInWebViewControllerDidLoad(signInWebViewController: FxASignInWebViewController)\nfunc signInWebViewControllerDidSignIn(signInWebViewController: FxASignInWebViewController, withAccount account: JSON)\nI know this is all very verbose but it is how most things in Cocoa work. One of the advantages of passing self to the delegate methods is that the class that implements the delegate then does not have to keep a reference to the viewcontroller calling the delegate. May not be relevant here but I think it is good to follow Cocoa/UIKit style.\nIt also prevents name conflicts. You can have a signInWebViewController(:, didFailWithError:) together with a getStartedViewController(:, didFailWithError:) without having to worry about name conflicts of a single didFailWithError delegate function.\n. I don't think you need to to do this because when your viewcontroller is popped of the navigationvc, it will be deallocated for you. It also makes not difference since you added the webView as a subview, so you are just nilling out webView but it will still be alive in the view hierarchy.\nI think past iOS6 it is very uncommon to manually destroy views part of a viewcontroller.\n. CGRectZero is a nice shortcut :-)\n. You don't need the ! here.\n. The if let url = url is weird. Instead I would just make the function signature more strict to only accept a non-Optional NSURL private func loadWebView(url: NSURL) - It makes no sense for this function to take a nil NSURL right?\n. It is silly that neither Xcode or AppCode catches this.\n. This is a good candiate for an enum with raw values: enum RemoteCommand { case Load = \"load\", Login = \"login\" ... } - Then you can do this: if let command = RemoteCommand(rawValue: commandName) { ... } (command will be nil if commandName does not map to a enum case) - Keeps the constants in a better place I think and is more formal/strict.\n. What if this fails? Dereferencing a nil optional results in a hard app crash. Honestly I don't know what to do with this. We have many other cases where we do this and it feels wrong. Maybe if there is a way to abort gently we should?\n. Delegate methods use didFoo, shouldFoo, willFoo while actions (Selectors) should use SELclickLogout style names. Easier to see what is what then. (I don't know where the SELfoo naming came from but @thebnich keeps bugging me about it - Brian, was this in the Ray Wenderlich coding style?)\n. Why do these need to be in their own class? Can't they be part of the SettingsViewController directly?\nI think it makes more sense to name these:\nfunc signInViewControllerDidCancel(vc: FxASignInViewController)\nfunc signInViewController(vc: FxASignInViewController, didSignIn account: JSON)\nAnd include them directly in SettingsViewController. It is very uncommon to do that extra level of indirection.\n. Use NSLocalizedString() so that these end up in the string files.\n. This is nice. Just a note for myself that I need to restructure ReaderMode.js to use a similar setup. The anonymous function trick is nice. https://bugzilla.mozilla.org/show_bug.cgi?id=1127853\n. whitespace nit\n. Missing semi? Is that a problem? I am so confused between Swift and JS.\n. How about runScriptFunction(function: String, fromSource source: String, callback...) or something similar that makes it more clear what this does.\n. If we do this after every location change then I think we should inject it via a UserScript and move it to a BrowserHelper implementation like ReaderMode is. Then it will automatically and more quickly be injected in web content.\n. It could become a FaviconHelper that finds FavIcons upon page load and then uses the WKUserScriptMessage API to push that back to the FaviconHelper which can then post a notification or call a delegate to notify 'the thing that deals with icons.\n. Yeah the problem is that you can't use non-optional properties really for things like views because you have to folow theUIViewControllerlifecycle and allocate views inviewDidLoadand not ininit()`. This is a bit of a disconnect between Cocoa and Swift. I bet Apple is thinking hard about this for iOS 9 or so. I would not be surprised if the APIs became way more Swift friendly by then.\n. How reliable is this? Is there no alternative way to do this?\n. I understand. Some time in the future we should experiment with doing the long tap detection in JS I think.\n. @wesj I think the problem is that init() is not part of the UIViewController lifecycle. You are supposed to setup your views in viewDidLoad. Now many times this doesn't make a huge difference, but I think it is good to follow the conventions UIKit uses?\nhttps://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ViewLoadingandUnloading/ViewLoadingandUnloading.html\nUnder 'initializing a view controller' it specifically says:\n\n\"When a view controller is first instantiated, it creates or loads objects it needs through its lifetime. It should not create its view hierarchy or objects associated with displaying content. It should focus on data objects and objects needed to implement its critical behaviors.\"\n. Why did you remove this initializer? ReaderMode.swift depends on it. Hm actually now that I look at it again. I think it is fine if this is not part of the protocol. Helpers can decide if they need it or not, of if they need a different initializer. (Although it makes no sense to not have the browser reference I thing)\n. Can this be func createSizedFavicon(icon: UIImage) -> UIImage instead? So that it is the callers responsibility to pass in a valid favicon and make decision about what to do when it does not have a favicon?\n. Ha you already check if img is nil or not. So there is no need for createSizedFavicon to take an UIImage optional.\n. I know this is just test cod but I think it is better style to have func getDir(name: String?, basePath: String? = nil) -> String? .. then you can leave out all the basepath: nil params where they are not used.\n. Why does item have to be an inout ?\n. You can probably combine filter and filterType into a single Enum with associated values. That will make the code more strict.\n. If you don't care about visit then you can do this: if let (site, _) = cursor[index] as? (Site, Visit).\n. Is there a reason this is not a read-only lazy var img: UIImage? { get { ... } } ?\n. Isn't it easier to get rid of foundIcons and just if (res) ?\n. Needs MPL license.\n. Why not if let elementsDict = message.body as? [String: AnyObject] { ...  } ? More concise.\n. Not for the user.\n. ReaderMode is an implementation that uses it. But it does not matter. I think we can leave it out.\n. This is very error prone. Who guarantees that the buttons are the only thing added to the view? Would it not be better to move the addView inside addButtons and loop over the array of buttons instead of all the subviews?\n. I don't think the selected.title ?? url bit is correct. If it is good practice to attach the URL if a title is missing (i don't know if it is, we should check what safari does probably) then we should attach url.absoluteString instead. Otherwise we are just attaching two similar items of type public.url and the receiving extension would not see the difference between them.\n. If you really want to follow the UIKit conventions then the first argument should also be a reference to the object calling the delegate. I know that does not always make sense in cases where there is just one instance alive, but .. that is what UIKit does.\n\n(It does help with state management. Specially when presenting viewcontrollers, it means that you don't have to keep a reference to the viewcontroller around. You can just use the reference that you get in your delegates.)\n. Is this part of the scroll bug?\n. Is this part of the scroll bug?\n. Is this part of the scroll bug?\n. Don't use selectAll() .. use this instead:\ntextField.selectedTextRange = textField.textRangeFromPosition(textField.beginningOfDocument,\n    toPosition: textField.endOfDocument)\nAccording to the documentation selectAll() is part of UIResponderStandardEditActions but is not supported in Swift. It also is a much higher level thing it seems, that UIResponder subclasses should implement to support the Select All option from the text context menu.\n. nit - local variables should not start with uppercase\n. There is so much hardcoded here. Wouldn't it be nicer to have someting like a HistorySection struct or class to keep all the state in? Then you can probably also get rid of the hardcoded numbers, etc.\n. This class is the ideal candidate for a struct i think. Because it is pretty much a read-only value type.\n. If you add associated types to this enum:\nenum FilterType {\n    case DateRange(DateRange)\n}\nThen you can do something like this:\nlet filter = FilterType.DateRange(DateRange(start: xxx, end: yyy))\nAnd where you use the filter:\nswitch filterType {\n    case DateRange(let range):\n        /// filter on range.start, range.end\n}\nNow you don't need an extra var filter: AnyObject? in QueryOptions anymore. This is much more type safe then what we do now. \n. These delegate functions need to include the Browser I think, since we have more than one Browser instance alive. I think we also need to use the more common naming that UIKit uses. So something like:\nfunc browser(browser: Browser, didAddSnackbar bar: Snackbar)\nfunc browser(browser: Browser, didRemoveSnackbar bar: Snackbar)\n. I like snacking but I have no idea what a Snackbar is. Do we have a better name that is more informative?\n. I don't know if this will work because you are modifying the array that you are looping over. This is a common error to do in Objective-C with NSMutableArray and since a Swift array is basically mapped on top of NSMutableArray I would not be surprised if it would raise similar errors.\n. Why do we need two copies  of the [SnackBar] array? One in the BrowserViewController and one in Browse. This, combined with realRemoveBar and realAddBar don't give me a good feeling about this code.\n. Nit - I think a better name for this class would be PasswordHelper and then the associated JS file can be PasswordHelper.js\n. If you use /// here then Xcode will pick it up as code docmentation that will show up in the Quick Help Inspector.\n. If you use /// here then Xcode will pick it up as code docmentation that will show up in the Quick Help Inspector.\n. You should not setup constraints in layoutSubviews but override updateConstraints instead.\n\nCustom views that set up constraints themselves should do so by overriding this method. When your custom view notes that a change has been made to the view that invalidates one of its constraints, it should immediately remove that constraint, and then call setNeedsUpdateConstraints to note that constraints need to be updated. \n. You should not setup constraints in layoutSubviews but override updateConstraints instead.\nCustom views that set up constraints themselves should do so by overriding this method. When your custom view notes that a change has been made to the view that invalidates one of its constraints, it should immediately remove that constraint, and then call setNeedsUpdateConstraints to note that constraints need to be updated. \n. If you make SnackButton a UIControl subclass, the addTarget() can move into the SnackButton code. I think that is where it belongs, since it is a local concern of the button to handle taps on it.\n. Does this title need to be localized or does it need a label for accessibility? Same question for the other ToolbarItem instances that are created here.\n. Localized string.\n. Do we really need to cache this already? It makes me nervous because I don't see code to evict items from the cache. Which probably means that at one point this cache will return invalid items. For example when the collection view is reloaded. Or when the device orientation is changed and the attributed need to be recalculated.\n\nI would get rid of this cache until we actually see a performance problem. Also, knowing Apple, they probably cache the result of this delegate method already. And probably have all the logic in the collectionview to know when it needs to be calculated again.\n. This does not need to be an explicit optional if init() takes a non-optional Cursor.\n. This should really be in the initializer of this class and not in layoutSubviews.\n. I think for master it is fine to not specify any pinned version and just grab the most recent one. If things break because libraries get updates, we can deal with it. Either by updating our code or by pinning to a prevous version if that is more appropriate.\nBut this raises an intersting issue: I think every time we do a distribution build (aurora or release) we should actually pin the versions in the Cartfile. So that we can have reproducible builds that do not need any guesswork. (With what version of SDWebImage was this compiled when we released this 3 weeks ago!?)\n. Ah yes of course. So, we don't pin the Cartfile, but we do commit the Cartfile.resolved to the repo. I think that is good enough.\n. Why did you remove the if let here? If the rawValue: gets an invalid value, the app will crash. Better to not show anything then instead I think. I know it is an edge case but we should take advantage of type safety features. Even if 'it can never happen'.\n. This makes no sense at all to me. A crasher in something as high level and important as the search view controller will result in an unusable application that the user will likely uninstall and never look back at. An incorrectly rendered UI on the other hand is still something that we can notice and deal with. And most likely retain the user.\nMaybe crashing is a common practice in Android land, where it results in a stack trace that you can record and recover from.\nOn iOS it results in a hard crash. The app exits, the user loses their session.\nWe really need to take advantage of swift's safety belts and not ignore them. If we are afraid that we miss cases where things go wrong then we need to find an alterntive reporting mechanism. Crashing is not it. Instead we could log or fhr or something better.\nI'm happy with assertions in debug builds.\n. What you are saying about implicitly unwrapped optionals in classes also really worries me. Swift provides us with tools to make sure that code is proven correct when it comes to memory management.\nOne of number one crashers in Android are NullPointerExceptions. Why is that? Because dealing with state is one of the most difficult problems when writing software.\nSwift gives us tools that force us to write code that is correct. If you use those features then there cannot be a case of \"where we forgot to assign them\" - simply because that is not possible.\n. Because I can then reuse the BrowserHelper infra that is attached to it. About 'full-blown' ... it is a tiny wrapper class :-) There is nothing in there that makes it heavyweight.\n. Note that you cannot set cell.imageView asynchronously. The reason is that the cells are reused/recycled. So there is a change that when thumbnails.get() finishes, it is setting cell.image for a cell that is not the same cell as you started with.\nIt currently only works because our collectionview is pretty simple. (But I think we have this same issue for table views where we show favicons)\nIt is odd that SDWebImage shows this exact usage on their Github project homepage as an example, because it is most definitely a bug to do that.\nThe correct way to do this is to have some check inside the thumbnails.get() completion block to find out if the cell is actually still the right one. For example by comparing the URL of the thumbnail. Another approach that you often see is using notifications to notify a cell that its image has become available in the cache. The cell then registers/unregisters for these notifications when it is being added/removed to/from the collection view.\n. Good catch. I think this can be simplified by just setting sourceView to button and not set sourceView at all. Double checking if there was a reason I chose the current code.\n. Nope. This is for a reason. This is the only way the popover is correctly positioned.\n. I would love to see status and statusMessage folded into one enum like this:\nenum CursorStatus {\n    case Success, Failure(String), Closed\n    var message: {\n        switch self {\n            case Success:\n                return \"Success\"\n            case Closed:\n                return \"Closed\"\n            case Error(let message):\n                return message\n        }\n    }\n}\nThen the whole concept of status and a status message is nicely captured in one testable thing. No need anymore to use or test for/with hardcoded strings like \"Success\". More formal protocol.\nThen in case of .Failure you can set the status to:\nvar someStatus: CursorStatus = .Failure(\"Thing thing did not work\")\nAnd to check for failure:\nif status == .Failure {\n    println(status.message)\n}\nOr in a switch:\nswitch status {\n    case Success:\n        break\n    case Failure(let message):\n        println(message)\n}\n. With the suggested enum, there will be no need to keep two state variables in sync anymore.\n. A nil aspect ratio is weird and error prone. Why not aspectRation: Float = 1.0 instead? It is better to choose a good default then to allow nil values imo. Specially for value types like floats.\n. I would turn aspectRatio into CGFloat because where you use this you actually convert to CGFloat anyway. Everything related to graphics in UIKit uses CGFloat, including point sizes, aspect ratios, positions, etc. (And CGFloat is actually a Float on 32 bit but a Double on 64 bit - but that is an implementation detail)\n. I don't think this will work. The problem is that when you open more than about 6 tabs, WebKit will start suspending the content process. And as a result, the screenshot here will be gray. We already had bug reports of that.\nWhy don't we screenshot, and cache, before the user navigates away from a tab? Then we always have the most recent screenshot of what the user last saw. From a live tab that we know is in good state to screenshot.\n. Ah here is the implementation :-) I would turn aspectRatio and quality into CGFloat types. Then you can get rid of all the casting that you do in both versions of screenshot() and things will be equal to UIKit graphics code.\n. I think the name is misplaced because both IApplicationDidEnterBackgroundNotification and UIApplicationWillTerminateNotification exist. This one should clearly be the former.\nActually, there is no need to send this notification manually at all. Other objects interested in the UIApplication lifecycle events can simply listen to the system-provided UIApplicationDidEnterBackgroundNotification notification which does exactly what you do here.\n. Xcode has a Automatically trim traiing whitespace setting in the Text Editing settings. Please enable that to get rid of whitespace only changes like these.\n. This should use return NSData.dataWithContentsOfFile(absolutePath, options: NSDataReadingOptions.allZeros, error: error) - that will also return nil if it fails but will also set the error correctly. Then you can get rid of the exists() check which will be covered already.\n. I guess returning .None for optionals can work but I have never seen that. I would prefer to return simply nil.\n. The data argument should not be an optional. Makes no sense to write nil data. Better to catch this in the caller, and not let the caller even supply a nil NSData than to make it a special case here. Compiler can catch it earlier. Stricter code will be written. This is one of the huge advantages of Swift.\n. This should be a return data.writeToFile(absolutePath, options: .DataWritingAtomic, error: error) instead. Same result except that the error is filled in. The if let goes away if data is not an optional anymore. Everything becomes simpler if you can make the contract of a function stricter :-)\n. But please read my comment on the commit about using the system provided state preservation/restoration APIs. I don't think this is the right approach.\n. Can you make all these start with an uppercase letter. That is what we do in the other *UX structs too, to note that these things are constants.\n. Nit: You don't need the break in Swift if there is at least one line of code in the case.\n. Is it possible to do as much as possible using the CGFloat type in the above code for .Changed and .Ended ? There is a lot of casting between CGFloat, Double and Int going on and I think most of that can go away.\n. I know this is not ideal but at least there is very little that can go wrong this way :-)\n. I could not get this to work with just constraints. Even with all constraints in place I have to set UIViewController.preferredContentSize to get the right popover size.\n. I am not sure and I mostly followed the design spec. But @tecgirl can play with the colors if they are not correct.\n. Yeah I want to do a pass over all *UX structs and let shared constants point to AppConstants. Will be a followup though.\n. I'll refactor it when I move it all to use Snap.\n. We've made the decision to use Helvetica Neue everywhere, which is the same as the system font. However, we sometimes need variants like Medium or an odd point size for which there is no UIFont convenience method.\nI agree that this is confusing and I am not entirely sure how to deal with this.\n. Shouldn't this also be called PasswordHelper then?\n. I am not sure if we should look at the UIWebView. Are we 100% sure that it's user agent string will always match that of the WKWebView? I would not count on it.\n. Would you mind also setting stopReloadButton.accessibilityLabel and stopReloadButton.accessibilityHint here, based on loading status?\n. If you change the a11y strings, it also needs to happen here. Because setting the loading property from init() has no effect. (The didSet will not be called)\n. I don't like this. I think we should follow what Safari does for at least a few specific url schemes:\n- tel shows an alert: +1234567890 Cancel / Call\n- sms opens the SMS app directly (no harm because nothing happens until you confirm there)\n- facetime shows an alert: myapple@id.com Cancel / FaceTime\n- There is also a special case for App Store links (there are a ton of special links) that we should handle in a non-generic way I think?\nFor other schemes i think it is good to show something generic.\n. Do we need a type alias for a sync timestamp type?\n. Needs to be an NSLocalizedString()\n. This just prints the time as a numeric value right? Shouldn't we use a NSDateFormatter here to turn that timestamp into something human readable? (It can also format to strings like '5 minutes ago')\n. I think this Aurora specific code needs to move to didFinishLaunching: because it triggers a dialog.\n. This assumes imageLement.text is always present. Is that true? I guess malformed search engine xml files are not common. But it is easy to include it as another check in the if let.\n. Both imageWidth and imageHeight are optionals, so this check may not do what you intended. Like, it will pass if both are nil.\n. Is it safe to call reloadData() here? On what thread will it run? Will it run during an animation, possibly interfering with its framerate? Would systemLayoutFittingSizeDidChangeForChildContentContainer be better?\n. I love map/reduce/filter but I think a simpler for loop would also work here. But lets leave it.\nCan you just remove the println() before I merge this?\n. This is not really a comment on this change, but I find the name Password a bit odd here. Specially with Password.password. Maybe at one point we can rename it to Credentials or Login. maybe?\n. Let's get rid of the println() and just do a silent return.\n. Would you mind changing this into localizedDescription instead? I would like to keep description reserved for what the Printable protocol is supposed to do. (Which is a non-user-facing technical description of objects)\n. I don't think there is anything related to localization. Maybe it is best to simply call it accessibilityLabel? That way it is immediatly clear what it is for and similar to UIAccessibility.accessibilityLabel.\n. Doesn't SnapKit do the setTranslatesAutoresizingMaskIntoConstraints already? Or is this a special case where we do need to call it?\n. Can't do this with SnapKit? Maybe file a bug with them to see if they can support this? I know they do the hugging and compression resistance but maybe not per axis? Was that the problem?\n. Thanks!\n. Too many exclamation marks. I think specially for things that come from JS we should do strict validation. Right now if usernam or password is missing or nil, the app hard crashes.\nFor Reading View I use wrap the data in a struct with a failable initializer. More code but it is impossible to get bad data. https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Reader/ReaderMode.swift#L105\n. No no no. We should fail and not leave a default without for no encryption in there.\n. 'Default with no encryption' should not be a thing that exists.\n. No fallback to No Encryption. Bad Idea.\n. This should be turned around to if encType != EncryptionType.AES256 and then fail and not store anything.\n. Nope :-) No NONE.\n. This will crash if secretKey fails. Which I guess is possible since SecRandomCopyBytes can return nil or an error.\n. Same here, this can crash if SecRandomCopyBytes fails.\n. This is tricky. By reusing pass it is possible that encryption fails and that we store an unencrypted password. Better to use a new variable, encryptedPass, and use that. And not store antyhing in case of failures.\n. shaW? Typo?\n. All these exclamation marks. This will crash if any of the above operations fail and return nil. Needs to go into an if let to not crash. Since sha256 returns an optional there is no reason to do this. Check to be safe and return nil in case of failures.\n. This can fail and crash.\n. Options is a bitmask so values should be 'or'ed instead of '+'ed.\n. Every time you use force unwrap something you introduce a possible crash. Better to if let for more stable and predictable code.\n. All these decodeObjectForKey calls can fail. Need to go in an if let with as?. Why not return an optional tuple from decodeData so that this function can fail?\n. decoding Base64 can fail. In which case this code crashes below where data is passed to decodeData.\n. I don't know if adding \"Salt\", a fixed string, to the key actually adds anything from a crypto point of view. My gut feeling says it is meaningless. We should ask one of our in-house crypto gurus I think.\n. Ha! No this is just confusing because of the way the images are named. If the article state is unread then we want to show the MarkAsRead button image.\n. @thebnich \nThis is here because this seemed to be the best place to run something when we have switched back to the web view after showing the home panels. Is it causing problems? Maybe we should introduce a callback for it?\n. Can you please remove the parentheses? And I think it is a good idea to also check if the selectedIndex is not greater than the number of tabs. (Be aware that the selectedIndex is zero-based). If the selectedIndex is not in range then just open the first tab. If there is one.\n. Why must this be in UIApplication? Can't this live in a XCTestCase base class?\n. Why is this here? Aren't you using the server that is created in AppDelegate?\n. I think it could be nice if we had an enum containing the Build or Channel type. What do you think?\n. This patch also upgrades other dependencies. I think that is fine in this case because they are all minor version increments, but we should be careful with that.\n. We don't want all these files in the project. They are also part of the Client target which means they are processed/copied to the packaged build. Can you remove all of them except Readability.js? It is fine that Carthage checks them out, we just don't want them in the project.\n. @b-andris I'm going to grab this PR and fix it up so that we can merge it. Thanks for your contribution!\n. Can't we use the SQLCipher.framework that is part of SQLite.swift?\n. No we still need it. Otherwise when you move the app to thr background and back to foreground, with the app not being hard-suspended, the server port changes and the WKWebViews stay alive, which means that the webviews have internal state that points to URLs that may not exist anymore. This option prevents that.\n. I assumed we dont want to restore empty about:home tabs. Is there a good reason to do so? I dont think so?\n. Yeah these are good suggestions. Let me think about it.\n. I'm not sure if this is happening actually. I tested this code and selectTab(nil) does open a new about:home tab I think. Will try again. I don't think an empty screen is a good first impression.\n. Oops good catch!\n. Yeah so lets do it. I'll fix this patch.\n. Do you think we can do some kind of visual effect here? Like do a css animation to show a box with rounded corners around the link element that faded away in like 0.25 seconds? Would that be a good alternative to the native link highlighting that WebKit does?\n. People have also been asking for \"Open in new Background Tab' I think. Should we add that also?\n. Is it possible to take this straight out of the WKWebView instead of doing a network request?\n. I think this class needs a more descriptive name. How about AccessibilityAction instead?\n. The only unique field in the reading list database is the URL. So if you can check for SQLITE_CONSTRAINT then that is enough to know that the page was already in the reading list.\n. In the JavaScript helper code you also access the element that was clicked on. So doesn't that mean you could get the data out? Just curious.\n. But isn't the user content script injected in each and every frame? That means it runs in the context of that specific frame. Without origin issues.\n. I don't think NSFoundationVersionNumber is the right thing to check. I'm looking at the headers and the value is the same for NSFoundationVersionNumber_iOS_6_0 and NSFoundationVersionNumber_iOS_6_1.\nI think  UIDevice.systemVersion is probably better. Assuming it contains a version number with 3 components (like 6.3.1).\n. not: semicolon\n. nit: you don't need the : String?\n. I think this is fine, but maybe it is better to use viewWillAppear and viewWillDisappear to register/unregister these?\n. To be closer to the touch point I would do CGRectInset(origin: ..., size: CGSizeZero), -8, -8) .. then the rect is around the touch point.\n. This creates a reference loop. In the docs, the delegate is marked as unowned(unsafe) .. is that similar to weak?\n. Great test :-)\n. No this is a special case where ActionViewController is referenced from the Info.plist file. Without it, iOS cannot find the NSExtensionPrincipalClass. I'll double check if this is still the case now with Swift 1.2.\n. I don't think this works as expected. Because self.profile is weak, a new instance will always be created if the caller of getProfile does not hang on to it. For example right after the call below to applicationDidBecomeActive, self.profile will be set to nil.\n. The code is there because the reloadData() call does not work otherwise. It just shows a blank table that redraws (not refreshes, redraws) as soon as you touch it. Which is a typical side-effect of doing UIKit things on the wrong thread.\nI'll see if i can force the upon to run on the main thread.\n. Replacing the upon() call with uponQueue(dispatch_get_main_queue()) seems to do the trick.\n. If it does then it does not work as expected because I had to change it to uponQueue(dispatch_get_main_queue()) to get block to execute on the main thread.\n. Only the HomePanelViewController implement the delegate right now, which implements the whole thing.\nI do think those two methods could go in a separate delegate. I tried that initially but I ran into code that was just too hard to deal with and would require a major refactoring.\n. This also needs a removeObserver() counterpart in TabManager.deinit(). I know we probably never deallocate the TabManager instance,but still ...\n. I can't find the code that sends the prefsDidChange notification. Does that need to be added to the Prefs code?\n. Looks good. Cool Swift Tip: Since 1.2 you can do this:\nif let url = webView.URL where ErrorPageHelper.isErrorPageURL(url) == false {\n   ...\n}\n. Is this necessary? Doesn't this happen in the navigation delegate?\n. Since the alertBody is coming from an unknown source (the network), I think we should check if the NSURL can actually be constructed. Just put it in the if let and not do anything if the incoming URL was invalid/malformed?\n. Was this a UX request? I'm not sure if it makes sense to have an Add To Reading List button in the notification banner. @darrinhenein @tecgirl what do you think? The interaction is a bit odd. Because you receive the notification in a different app. Then tap 'Add to Bookmarks / RL', which does that, but also activates Firefox and does not actually show the page. You have to see this in action I think.\n. Same here. Every time you force unwrap a value, be really really sure that it is fail safe. In this case it is not because alertURL could be malformed. Which means we crash.\n. Debug logging. Either change to log.debug or remove.\n. The space for these buttons is pretty tight which may not work out well for some languages. You should probably mention that in the comment. Sometimes I upload a screenshot to Bugzilla or DropBox and put a link to that in the comment so that the localizers have a good idea what it will look like.\n. This change, and any of the changes below should not be committed. The defaults in the project file should really just work? No? Are you using multiple dev accounts on your machine? Maybe we need to be more specific in the defaults then so that they default to Mozilla?\n. If no new files were added to the project, looks like you can just remove this whole file from the commit.\n. What is this OpenInFirefoxHelper.swift file? I don't actually see it in the project.\n. Don't commit this.\n. Don't commit any of these code signing changes please. If no new files were added to the project then you can probably remove this file from the commit completely.\n. You can drop the local instance on line 36 and just immediately do tabManager = TabManager(...)\n. Instead of doing this with rangeOfString, use the NSURLComponents class. That will take a string and will parse the URL and and query for you.\n. The forced unwrapping of NSURL(string: ...) is problematic. If another app sends a bad URL, then NSURL(string:) will return nil and that will cause a crash when it is passed to NSURLRequest(URL:). Every time you force unwrap (using !) you have to ask yourself, can this operation fail or am I 100% sure that it is safe. If you are not sure then use a conditional like if let to make the code more robust.\n. Why was this removed?\n. Ahh I see. Looks like Xcode just cleaned it up. No worries then :-)\n. Why is this removed? This has nothing to do with your patch?\n. Don't commit this :-)\n. Great. This is pretty fail-safe I think. I'm fine with it, but if you want to simplify this if let \"pyramid\" .. since Swift 1.2 you can do this:\nif let components = NSURLComponents(URL: url, resolvingAgainstBaseURL: false) where components.scheme == \"firefox\" && components.host == \"open-url\" {\n    if let query = components.query, item =  components.queryItems?.first as? NSURLQueryItem {\n        ... \n    }\n}\nSo you can combine multiple if let conditionals. The expression will fail as a whole as soon as one unwrap fails so it is safe to use previously unwrapped values. The where clause lets you do some basic conditional checks at the end.\nI'm fine with how this looks now because it is pretty clear, but if you want to bring the number of lines down then you can use the above technique :-)\n. Maybe introduce a PrefsKeys that has all of these?\n. Maybe run this through a JSON formatter so that it is not one huge line that is difficult to diff?\n. Is this correct? I thought we completely got rid of about: style URLs actually. Did they not get replaced with http://localhost:*/ style URLs?\n. Yeah I don't see any references to about: in the current code anymore. For example about:home has now become http://localhost:1234/about/home/#panel=0 instead.\n. @jhugman See bove. Can you use that utility class?\n. Would it make sense to make this a lazy variable? Then we don't have to create the path every time we draw it?\n. This is too simple.\nFor example, when the WKWebView fails to load and finishes via didFailNavigation:, the network spinner is never stopped.\nAlso, when a page loads and is put in the background because you open a new tab, the navigation delegate for the BrowserViewController is switched around so you will never receive a didFinish or didFail. So it may be better to do this in the TabManager which is a WKNavigationDelegate for all open tabs.\nI think we should use an atomic counter to keep track of the state of all open tabs combined. So that multiple tabs can increment and decrement the spinner state counter and then networkActivityIndicatorVisible can be configured based on that.\nJust keep in mind that there are many tabs loading at the same time.\n. A completion handler in a delegate method is odd. Is that really needed?\nWhat happens when success is false? Will isHandlingLongPress then stay true?\nCan't you cancel the gesture instead of keeping that state? Maybe you can get rid of shouldRecognizeSimultaneouslyWithGestureRecognizer too then?\nI'm just worried that this is fragile because there is so much extra state now.\n. Why is the completion called when one of the action sheet buttons is called? Doesn't all that happen after we have recoginized the long press? What needs to be completed here? I don't see why that needs to be a concern of this code.\n. Please get rid of tabsNetworkActivity. It introduces a huge memory leak since you are holding on to WKWebView instances forever. And it is not actually used in any way to start/stop the network activity spinner. I think having the counter is enough.\n. I think you also need to take closing tabs into account. Can you test this with a page that takes a long time to load, close the tab while it is loading, and then see if the above delegate methods are being called? I'm not sure if they will be.\n. This needs to be > 0 because it reflects the total number of tabs that are in a loading state.\n. Will file a followup bug.\n. This was supposed to be removed from the patch. Unfortunately removing this also breaks the patch with the old behaviour being back. So I am not sure if attaching the event handlers from touchStart really made a difference.\n. sharedApplication() is not available in extensions. Did you mean !TARGET_IS_EXTENSION ?\n. Yeah I mostly want feedback. I think this patching of window.close is a decent approach to start until we can use the official API in iOS 9 but you know more about the JS side than I do. So I was wondering what you thought of the process in general.\n. You mean change it to AtDocumentStart ? Also, I see now that forMainFrameOnly: is set to true. I wonder if Persona specifically runs stuff in iframe, which would mean this code is never injected! That could actually be the fix for Persona.\n. I think it is good practice for delegates, for which we do not know on which thread they run, to call back on the main thread. Then the caller does not have to worry about it. Should probably wrap it in a check to see if we are already on the main thread or not.\n. Swift string subtitution can't be done in localized strings. This needs to be a formatted string instead. Like\nswift\nerror.text = String(format: NSLocalizedString(\"Could not connect to %s\",\n    comment: \"Error message that is shown in settings when there was a problem loading\"),\n        settingsTitle.string)\n(Also cannot be used in the comment)\n. Please remove tableName. This can go into the global strings table.\n. Thank you that looks nice. I am not a great shell scripter.\n. Good catch, i'll fix that.\n. Dont' localize the URLs. Just the titles. The URL will auto-redirect to the correct locale. There is nothing to localize for the L10N team there.\n. I think I can't do that because I need to find the actual Browser instance that owns the WKWebView.  Which may or may not be the current selected one.\n. This will not work. We are past string freeze. The idea is to re-use the existing Sync your Devices. string. But now I can't find this string anymore. Weird I was so sure we had a string in the product that we could re-use for this.\n. We should have this string .. http://viewvc.svn.mozilla.org/vc/projects/l10n-misc/trunk/firefox-ios/en-US/firefox-ios.xliff?view=markup#l230\nUnless it was removed.\n. You can also create a serial NSOperationQueue for this and let the screenshotting run on there in the background. Then they will just go one-by-one and as fast as possible without delays in between.\nIf you put the screenshot logic into a ScreenshotTask class, with a weak reference to the tab then you can prevent taking screenshots from tabs that may not be there anymore.\nThis could work really well combined with using a notification to signal the TabTrayController that a new screenshot ready.\n. Agree with @sleroux  .. I wrote that code in the Swift 1.0 era and I don't know if the way we do the shared instance of WebServer is correct now actually. Can we try this first:\nclass WebServer {\n    static let sharedInstance = WebServer()\n}\nThat is the documented way to do singleton instances. I don't think there is a reason that instance can ever be deallocated.\n. I'm also worried about the try! there. Can we also wrap that in a do {} catch {} and log if it raises an error? With the current code, obviously auto-converted, we would hard crash during startup. We can make it more robust and still run with a broken internal web server. (Which will lead to better bug reports than a possible startup crash)\n. Can this be simplified to static let sharedInstance = WebServer() ? It is the same thing with less code.\n. Can you pin this to their 1.6.4 tag? Which is the most recent version in the add-framework-support branch?\n. Or is this pinned at that commit for a specific reason?\n. Nit, classes need to start with an uppercase letter, AccountServiceSetting \n. This needs to become conditional, because we do not want to show this for people not in China. Possibly depends on https://bugzilla.mozilla.org/show_bug.cgi?id=1228043\n. This is too generic and needs to become something like useChinaSyncServices I think.\n. I don't think this should default to true. If the pref does not exist (default) then we want to default to regular sync services.\n. I'm a little worried about this body p .. does that mean we grab the full text of the page? I'm worried that can be a lot of data. Isn't the title and the meta description enough to get decent results?\n. These logger calls can go away, i don't think they add anything?\n. This log entry prints the URL to the log files stored on disk. We should not leak that. Please remove.\n. Why are Favicon changes part of the spotlight work? Should this be a separate bug? Or at least a separate commit so that it clear what these changes are for?\n. Why a JPEG? Aren't those blurry due to compression?\n. Did Xcode 7.2 make this change automagically?\n. I don't know how well the l10n scripts handle table names with spaces in them. Because they translate to file names. If this turns out to be an issue after string freeze then we can handle it in l10n scripts probably.\n. I think just activity.contentAttributeSet is iOS 9 only?\n. Please also update this comment to reflect the logic change that is done below.\n. If there is a shared instance of HandoffManager, we don't need to have a reference to it permanently in BrowserViewController. I would just replace all occurrences of handoffManger to HandoffManager.sharedInstance.\n. return extensionPointIdentifier != UIApplicationKeyboardExtensionPointIdentifier ? :-)\n. Why not check for http and https here to lock it down to URLs that the NSUserActivity supports? I think there are a number of schemes that we can open, including data and javascript.\n. How about using \"latestAppVersion\" here instead of IntroViewControllerSeenProfileKey ? I don't think this logic should be connected to the Intro. Better, create a LatestAppVersionProfileKey.\n. This is not correct. If LatestAppVersionProfileKey is not set, which it is not when you upgrade from 1.4, we set it to 2.0, which means that we never detect the upgrade. Because both LatestAppVersionProfileKey and AppInfo.appVersion will be 2.0 now.\n. I think the logic here should be: *If this is an upgrade, (if the profile already existed), AND if LatestAppVersionProfileKey is not equal to AppInfo.appVersion, then show the What's New.\nThe check if the profile already exists is needed because we did not set LatestAppVersionProfileKey in 1.4. That means that we need to look at some other profile preference to determine that this is not a clean install. What is a good preference that we always set on first run?\n. Is this why you checked for IntroViewControllerSeenProfileKey in your first patch? Sorry I asked you to change that, I obviously did not think that through.\n. Yeah see https://bugs.swift.org/browse/SR-1049 - The compiler can't figure out what to infer and gives up. I must admit that I just put the most hints in there as possible and not tried to simplify it back from there. Not sure if that is worth it.\n. Yeah I think that will be nice. Should that be part of this patch or a followup bug?\n. Doesn't a later commit in this patch cover this? I don't see a warning for this one anymore.\n. Yeah I think you are right. I think this should be:\nif index < children.count {\n    index += 1\n    return children[index]\n}  else ...\n. Will do.\n. I checked where runBlockIfNotInCache is used and made sure the behavior is the same. I thought this made a code a bit more robust because it is now up to the caller to provide a good instance of an SDImageCache.\n. Yes this is not awesome. I'll make this better in the next iteration.\n. Why no TodayViewControllerUX struct like we do for other components?\nExample https://github.com/mozilla/firefox-ios/blob/master/Extensions/ShareTo/ShareViewController.swift#L29\n. Remove commented code please.\n. Remove logging please.\n. This needs escaping. See https://github.com/mozilla/firefox-ios-open-in-client/blob/master/OpenInFirefoxClient/OpenInFirefoxControllerSwift.swift#L29\n. Is there a constant for 257? Maybe at least add a comment about what this is?\n. I think this should be an if let .. we cannot trust data coming in via JS. Better to ignore bad URLs than to crash on them.\n. Is this intentionally a bad URL? I think this will get parsed as a bad IP address?\n. Also needs ::1 for IPv6 localhost. And do we know for sure that http://LOCALHOST/ gets turned into a lowercase localhost ?\n. Typo in Show Prebious Tab.\n. Two notes: we need both a Back and a Forward item. But these cannot be added statically. You have to take a look at the current Tab's and ask it if it is actually possible to go back or forward.\n. I am going to suggest that we drop iOS8 support. We will drop it globally from the app soon. Don't invest in it.\n. For the URL, use the SupportUtils class to generate a URL just like we do for What's New. You can ask Joni Savage to create a placeholder page on SUMO so that we already know the final URL. (The SupportUtils generate a proper SUMO link based on a topic that you provide. It will put things like app version and locale in the URL for you.)\n. Are we getting rid of Aurora completely? Or will Aurora still exist, it wll just not use the AuroraAppDelegate anymore?\n. Can you change this to defaultMailClient ? This is what we already submitted to the Telemetry people to include in the dashboarding.\n. What happens if this pref is not set? Does that mean we crash? Is there a possibility that it is not set? If so, then this should be in a if let.\n. Hard to see what section this is. Is the 9G8J6YA743 ok here? Maybe this is for our Enterprise account? Same below.\n. Should this be in this patch?\n. Looks good. How can we test this? Can we test this on a BuddyBuild build? Or does it have to go through TestFlight?\n. Oh odd. These two files should not be in this PR actually. That is what the followup PR is for. I'll try to remove them.\n. Will this crash if fxaQuery does not contain any of those fields?. (Not sure if looking up an non existent entry will abort/crash or not). I don't think it is a good idea to use NSCoding.  That API is still throwing uncatchable (by Swift) exceptions in case of issues when encoding or decoding. Why not use JSON instead?. I think this should be @interface NSData (Push) ?. Should check return value here. If it fails, return nil.. Should check return value here. If it fails, return nil.. Check return value.. Check return value.. Check return value. Also, BN_dup() can return NULL. I know the original code did not check for errors but we really should.. This can fail. Lets return nil if it does.. Let's check if any of the returned valued are NULL.. @justindarc Is this the right thing to do? If json.rawString() returns nil, this will crash. Why does a force unwrap fix this regression? Should we not wrap this in an if let if rawString() returns an optional?. @justindarc @sleroux  I want to suggest an alternative solution:\nif let resource = NSURL(string: path)?.lastPathComponent {\n    server.addGETHandler(forPath: \"/\\(module)/\\(resource)\", filePath: path as String,\n        isAttachment: false, cacheAge: UInt.max, allowRangeRequests: true)\n} else {\n    ...log that we are unable to register path...\n}\nThe original patch dereferences resource (an Optional) and if it is nil then it will use the empty string \"\" as resource. But I don't think that makes sense. Because we are then registering a handler with invalid path. There is no point in doing that.\n. @rnewman Is this a fix or just a nice improvement?. Does this suffer from the same issue as isString()? Do we need to fix isArray() in a similar way?. Don't we have tests that depend on tabs being restored between sessions?. Why don't we keep this? I think the NSKeyedArchiver also still throws exceptions, right? Did we not see stack traces where it threw exceptions? Better to wrap it in a handler then?. @jhugman Please change this back :-). Is it a good idea to have spaces in the event names?. You can avoid the as URL if you create a URL(string: ...) I think.\n. How about instead of using a String here, use an enum. Then it is more strictly controlled and there will also be  less chance of typos.\nWe do the same for the Adjust integration in Focus. See:\n\nhttps://github.com/mozilla-mobile/focus/blob/master/Blockzilla/AdjustIntegration.swift#L8\nhttps://github.com/mozilla-mobile/focus/blob/master/Blockzilla/AdjustIntegration.swift#L93\n\n. I don't think we have a better way to do this. Ideally we do not put any API tokens in Git. For the production builds we must have them in secret BuddyBuild variables that can be replaced in a buddybuild_prebuild.sh script. Let me know if I can help with that.. There is so much logic here on one line. How about a shouldShowFocusUI() function?. Please change this into an if let so that we can get rid of the explicit unwrap.. Same here with the explicit unwraps. The assumption is probably that they always work but it is better to be safe and always use if let.. What are these changes? Is this MMA related?. Can be private if not used anywhere else in the app. Please revert all the team changes. The team needs to be 43AQ936H96. This is hard to do with Xcode after the fact. Easiest way is to open the project file with a text editor and change these values back.. Why are we linking against LeanplumLocationAndBeacons.framework and LeanplumLocation.framework if we do not use that functionality? Can we remove these?. Double checking with @sleroux that these MOZ_GROUP_SUFFIX changes are correct.. Can we pin these to 2.0.1 so that we get a predictable version?. Does this need a check for iPad? We do not have a tab manager there, and no empty state. Or is the TabManager simply not used on iPad at all?. We should also do the development key via BuddyBuild. And not leave it in the repo.. @sleroux Is this supposed to go in v7.x?. Fine with this, but I am curious why this was needed. Was this  LeanPlum issue or did carthage fail on KSCrash ?. Yes, but we fixed that with the unarchiver.decodingFailurePolicy = .setErrorAndReturn right? It would just return nil.. I am pretty sure this was put in for a reason?. Lets take a quick look at this, I don't know what  the intend here is. Not sure if this is incorrect.. If I understand correctly, there is start() for app startup. And LeanplumIntegration.sharedInstance.setEnabled() for then the user flips the Send Anonymous Usage Data switch.\nI think this is good. My only request here is that we make sure that flipping Send Anonymous Usage Data actually disables LeanPlum. And that it does not wait until the app is cold-booted again. (I think it does, but maybe we can verify and make sure that events are not tracked / sent as soon as we flip that switch?). I don't think this is good enough. There is a user expectation that when they turn off Send Anonymous User Data that at that point they are opted out from data collection. We make this happens for Telemetry and Adjust, so Leanplum still collecting and sending data back cannot happen after this toggle has flipped to No.\nI understand this will take effect the next time the user starts the application, but we have to be strict here. On a modern phone it is possible that Firefox runs for days or even weeks without being actually restarted.\nIs there anything in the LeanPlum SDK that we can call to pause or stop the data collection?\n(I know we have shouldSendToLP() but LP also does its down session tracking outside of calls to Leanplum.track()). Please revert this file and just add one line:\ngithub \"Leanplum/Leanplum-iOS-SDK\" \"2.0.1\"\n. Why is there no direct mapping from the locale identifier to the enum key? This is just a nit, but I find this mapping confusing. And since we only check of Locale.current.identifier maps to an enum value but then don't actually do anything with it, this could also have been a simple private SupportedLocales = [\"en_US\", ...] I think.\nNot asking to fix this, but maybe later we can simplify this.. This is not a good use for guard. This should simply be a if !enabled { ... Use guard in cases where you need to unwrap an optional and then use that value past the guard statement. It is not a replacement for a simple conditional if.. It is weird that both setEnabled() and start() manage self.enabled. Who is authoritative?. In a future iteration of this code I would love to see a safeguard here that checks if this is an App Store build or not. To prevent that we accidentally enable development mode.. Why not have an enum also for these attribute names just like LeanPlumEventName? It is too easy to introduce a spelling mistake.. I think I asked this before, but are we sure that event and attribute names with spaces are not going to cause trouble? I have no problem with this per se, but experience tells that spaces are evil.. I don't know if it matters, but this should probably go into one of the UIApplicationDelegate methods. To catch the case where someone starts Firefox, then switches to the App Store app to install Focus. Firefox won't know that it is installed until it cold-starts again, which could take a while. Maybe this doesn't matter, I don't know.. Now that I look at this again, this is not correct. The attribute is Focus Installed but canInstallFocus() will return false if it is installed. So that does not match up. See canInstallFocus() below.. See comment above about using this. My suggestion is to rename this to something like hasKlarInstalled() and hasFocusInstalled() (and update the canOpenURL check).. Let's also remove the development keys from Git.. Note that this is not the only place where people can open new tabs. We also have the + button in the toolbar, which goes through a different path I think? I am not sure. May be worth to check.. This always fires when the user taps a tel:, facetime: or facetime-audio: link. The event name says Telephone. So is that correct?\nAlso, I wonder if this event should only fire if the user actually hits OK in the dialog that we show to confirm opening the link.. Everywhere in the app we call this Save Image. Why is the event name Download Image ?. @Sdaswani Just keep them around in your local checkout. We can also investigate if we can include them in like a Local.xcconfig that is ignored by Git. THen you can just keep that file around for local Fennec builds and have all the settings in there. (Also useful for other things like Sentry and Adjust). Looks fine if the logic is correct now.. This would have been caught if this was set to [String: Any].. Another option is to make your enum a CustomStringConvertable.\nenum Foo: String, CustomStringConvertable {\n    case foo = \"Foo\"\n}\nvar description: String {\n    return self.rawValue\n}\nMore Swifty.. @Sdaswani What is the problem with $(LEANPLUM_ENVIRONMENT) ? Or was this changed already?. The indentation is weird here. Swift prefers switch and case at the same indentation level. Why is this not consistent with the default?. I don't know the SwiftRouter API, but it looks like we are supposed to return whether we handled the route succesfully. Should this default case actually return false ?. What happens if we are already in the settings? Will this open the settings again?. I'm not happy with how we now have three different things under the firefox:// scheme:\n\nfirefox://fxa-signin?signin=<token>&someQuery=<data>...\nfirefox://open-url?deep-link=https%253A...\nfirefox://anything-here-does-not-matter?deeplink=https%253A...\n\nThis reflects in the code, which is handling the last two cases combined and seems all over the place. And the URL style for the last two is not enforced .. you can actually replace open-url with anything. This is not strict enough.\nI would like to ask for three things:\n1) Introduce a firefox://deep-link?url= style url\n2) Enforce a firefox://open-url?url= style for the public API\n3) Refactor this code to have three clear separate blocks to handle firefox://fxa-signin, firefox://open-url and firefox://deep-link.\n. I see this in the Leanplum documentation:\n+ (void)track:(NSString *)event withParameters:(NSDictionary *)params\nwhich I think is a better alternative for info? Like we could send more structured event data\n{\"source\":\"menu\"}\n. The fxa-signin case below uses url.getQuery() .. isn't that nicer? Then you can just do:\nif let url = query[\"url\"], let private = query[\"private\"] ?? false {\n   ...\n}\n. What is this () ?. All the above events have a new style, why does telemetryOptIn not have that? Not needed?. Why not return self.profile?.prefs.stringForKey(PrefsKeys.KeyMailToOption) == \"mailto:\". This is actually correct. When you flip the 'Use stage servers' button, all build flavours should talk to stage.. Ah yes, this was for a previous version of the patch. I'll revert it.. What are the full URLs that Adjust is giving us? Is deep_link something they decided on?. This code needs to be hardened. The ! there means an explicit unwrap, which will crash the application if strUrl is invalid and URL(string:) returns nil.\nif let deepLink = url.getQuery[\"deep_link\"]?.removingPercentEncoding, let url = URL(string: deepLink) {\n    browserViewController.switchToTabForURLOrOpen(loadUrl, isPrivileged: true)\n    return true\n}\nUsing explcit unwraps is always a red flag. It is almost never needed.. Are these final? Just making sure we ship with the right links.. What is this SafariKeychain ? I have never seen this before .. got a link to documentation?. This crashes because self.account is nil.. You can write this as completion?(nil). This is in a catch, can we include the error message in the logging?. What type is err here? Are we confident it will print enough detail?. Is this something we want to log? Or does this bubble up to a different point where we log it?. This is also a change in behaviour, not doing the _v2 version anymore?. Maybe we should clarify this error and make clear that this was attempted with close_v2?. Can we also add the filename to this event message?. Why was this change made? Doesn't this mean that if the user decides to stop using FxA, the attribute will never reset to false ?. Yeah, \"should never happen\" - but if it does (???) we default to not showing a dialog.. Could this send PII or will this just contain GUIDs?. Same question here about PII.. This is really odd. Can you write that in simpler if let ... { statement?. I know this is a small change, but if that belongs to a different bug, please do two separate pull requests. We usually don't combine things like this, and also the commit message is way too long if yuo just append & Bug ... to it.\n. This .rawValue can be removed if you call LeanplumIntegration.track() instead. Is there a reason not to do that?. I know this is a small change, but if that belongs to a different bug, please do two separate pull requests. We usually don't combine things like this, and also the commit message is way too long if yuo just append & Bug ... to it.\n. This won't work. CFBundleShortVersionString is a free-form string, which can also be 8.1.1 (as it is currenty) or even 9.0b1 - neither are numbers. Float(\"8.1.1\") will result in nil.\nAlso, that explicit cast is not allowed. It will crash the app if the value cannot be turned into String. THat is unlikely, but we we have to be strict, so use an if let with as? String please.. For this to work, the pocket:// url scheme also needs to be added to the Info.plist like you did for the Focus and Klar checks.. Yes, @Sdaswani this delegate needs a better check. Probably something like LeanplumIntegration.shared.shouldEnableForCurrentLocale or so. Something that does not talk to the LP servers.. Doesn't compile without the == true. Does Swift require an expression?. The three dots should probably be \u2026 (option-;). Please remove the \\ns from all strings. That will not work out well with dynamic font sizes and different width devices.. I don't think we should reload tabs at all. What if I was typinh an email in a tab. I'd lose my work after chaning the settings. That is not expected by users I think.\nI think it will be totally fine from a user expectation point of view, that this change will be in effect for new tabs, or when you reload an existing tab. Also, this is not something people do all the time. You typically enable it and then don't look at it ever again.\nStrongly suggest to simplify this.. This try! cannot be here. It will crash the app if an exception happens. Same below.. Let's call this addAttributes if it merges?. Is this going to give us trouble when mixing existing and new reports? In terms of search queries? I understand it is incorrect but maybe leave it?. Do we need the stack trace here?. This should not be here. This should be under the UIImageWriteToSavedPhotosAlbum on line 2830. At that point the user has actually saved an image to the album.. This onStartResponse should either be wrapped in an .shouldSendToLP() { or moved into LeanplumIntegration where that is done for every call to Leanplum.\nDoes this delay startup time?\nWe've had a lot of concurrency problems with the profile being opened/accessed from different threads. So before we approve this we need to understand on what thread that onStartResponse callback is executed.\nCc to @justindarc - I want to be sure that is is safe to do.. I don't want this hack in the code. This is a horrible workaround. This also does not work, since it depends on a static group identifier. Instead the group should be taken from AppInfo.sharedContainerIdentifier.\nThere must be a better way to do this.. By this hack I mean communicating via settings. We need a better way for this whole patch. Or just not count bookmarks that have been added via the share extension for now. cc @Sdaswani . The context menu part of this patch is good. Why don't we change the bug to reflect that. And file a separate bug for the share extension. I don't want to rush that.. This can also be a simple 3 line for loop that is a bit more concise.  I don't know if this is a good idea becaue track() will do a DispatchQueue.main.async(execute:) - so what happens if you have multiple bookmarks. will they all run at the same time?. To be consistent with other events, the name of this event should be savedImage.. Yes.. Oops. Will remove.. @garvankeeley looks like it - but this commit is months old .. is it causing trouble?. No because self in this method actually points to a WKContentView.. Can we wrap this with a check to only log this in Beta? This could be extremely high volume in production if something goes wrong with the telemetry service. Either check here or in SentryIntegration.send() (i think there already is a check to make sure Storage and SwiftData is only logged on Beta.. This needs to be false. What is the reason for wrapping it in an async operation? Is that really going to make a difference? We still need to finish this amount of work in the same (undefined) period of time and then run the callback.. profile?.shutdown() :-). Can this block go away since we already do that two lines up? At this point we are already executing on the main thread right?. Measure it first please before complicating this code.. I don't think this code is actually used, this is supposed to be triggered with a long press on an incoming notiifcation, but I don't think that works.\nThe .shareExtension would be via the incoming queue I think. Or it would have to be measured in the actual extension.. I think you can drop this whole onVariablesChanged block. Basically you are asking what the value of useFxAPrePush and then assigning that same value to it. I don't think this has any effect.. Please revert. We leave Leanplum on, on both BETA and FENNEC.. Same as above.. Yeah this should not be a pref key. It can be determined at runtime, and is not stored in prefs.. Oh I see what is happening now, this useFxAPrePush is different than self.useFxAPrePush.\nI think you can still get rid of this block if you change the self.useFxAPrePush from a bool to LPVar. There is no need to wrap the LPVar with a block like this. An LPVar will automatically update and always reflect the current state.. If self.useFxAPrePush becomes an LPVar, this can change into:\nreturn AppConstants.MOZ_FXA_LEANPLUM_AB_PUSH_TEST && useFxAPrePush?.boolValue()\n. Changing the name of the field is fine, but the identifier in the NSLocalizedString will cause the string to be deleted in the L10n workflow I think. It is probably better to leave this as is.. I think that when you include telemetry for a new feature, we should also try to make it a habit to immediately create a dashboard or at least a very simple query. I think we should have a dashboard that simply has one query per feature or telemetry attribute set so that you (and QA) can very easily verify that the telemetry is working as expected.. Do we need a rolling a release_notes.txt in our project? So that we do not have to scramble the week before a release to get a What's New (app store or mozilla.org) together?. The need for this has become more clear after we had to do an emergency fix for the screen size telemetry. We would have caught that sooner had we added a simple query to that dashboard.\nI'm not thinking 'deep insight' here - just a query that returns a table with the new attributes that we collect.. Why not make this a more traditional singleton? NDScenario.shared.foo(). Then you can get rid of all the if !initialized checks.. Is it not better to wrap this in a #if NIMBLEDROID?. Is it not better to check if we are running in the nimbledroid test environment instead? This would for example also enable this code in the .beta BuildChannel, which is what runs via TestFlight on end user devices. I think we need to narrow this down more to just when we need it.. Why are all these tests disabled?. This code should be conditional. This should not be run on any other builds than the one that is used for NimbleDroid.. This will need a better check because the Fennec Scheme is also used for every Pull Request. I think we probably need an additional check here to make sure that we only do this on a specific branch? (Master?)\nHow much time does this add to the build process?. @isabelrios \nI'm not sure about this .. i thought these entitlements had no prefix at all, but if they already had $(SRCROOT) then that should be turned into an absolute path?\n(I don't know if $(PROJECT_ROOT) is actually a thing - i was just using that as an example)\n. ",
    "thebnich": "Looks good to me. Should probably squash most/all of these commits unless they make sense individually.\n. We'll probably want something like this eventually for all cases where the keyboard can obscure the view, but the login screen is gone for now, so closing this PR.\n. Landed with b8455c81b016e86657fcda6069c241d5324e5607.\n. Thanks for the fix. Can you please squash your changes into a single commit?\n. Closing as dupe of #30.\n. Changed FxWebView to Browser, which now uses composition to wrap a WebView instead of subclassing.\n. The sentence is correct as is. There are two independent clauses, so a coordinating conjunction (\"so\") is needed to avoid a comma splice.\n. Looks good to me!\n. Several style nits, but I think this approach looks good. But I'd prefer to wait for tab support to land first since we'll have to figure out how to make the toolbar work with multiple WebViews.\n. Also, can you please squash your commits together (either into a single commit, or two commits: one for the progress bar UI, and one that uses KVO to update that UI)?\n. @Chuongv You just need to rebase your branch onto the firefox-ios master branch. Try doing \"git rebase origin/master\" (assuming origin is the name of your mozilla/firefox-ios remote). You'll have to fix the merge conflicts, then you \"git add\" them, followed by \"git rebase --continue\". Feel free to ping me in IRC!\n. PR #44 landed, so if you're interested in rebasing this PR to be tab-aware, we'll still happily accept it! I'm not working on this particular bug myself ATM.\n. Thanks, this mostly looks good, but I think the current plan is to expose the WebView in Browser to avoid forwarding delegates. Can you please make the following changes?\n1) Rename Browser \"view\" to \"webView\", and return WKWebView rather than UIView.\n2) Have BrowserViewController implement WKNavigationDelegate directly, assigning the delegate to Browser.webView.navigationDelegate.\n. Looks great. Thanks!\n. As @Chuongv mentioned, this will change a bit since we've exposed the webView on Browser. Please implement the KVO handling in BrowserViewController instead, attaching to tab.webView whenever a tab is added.\n@palewar I'd do this in a separate PR since that isn't directly related.\n. See this thread for a discussion on this abstraction: https://mail.mozilla.org/pipermail/mobile-firefox-dev/2014-December/001010.html\nSince we're building a full web browser, we might as well expose the entire WebView since we'll likely hook into nearly every method in the API anyway. The idea is that BVC is already so tightly coupled to the WebView that it might as well have access to it directly. But we intend to (manually) limit the number of consumers that access the WebView -- currently just BrowserViewController -- to prevent leaking the WebView API everywhere.\nOther components, like the toolbar, need only know about a basic Tab interface (with a URL, title, back/forward state, etc.). If we can figure out a clean way to prevent these components from accessing the WebView at all (perhaps a more restricted Tab interface that Browser implements), I think we will; for now, we're simply making sure we don't touch the WebView outside of BVC.\nAlso, apologize for the late response to this PR. Most of us have been on vacation for the past couple of weeks!\n. Closing this since it will be fixed by #59.\n. Thanks for the contribution! Looks good to me -- I think this can be merged once it's rebased again.\n. Rather than setting the progress to 0 when switching tabs, we might be able to improve this slightly by reading the estimatedProgress from the WebView every time the select tab changes, and updating the toolbar with that value. That way, we don't need the WebView's estimatedProgress to update again before the progress bar shows the correct value (which will likely be a problem only on slow loading pages).\nBut this is great for now. Thanks!\n. Looks good, though it'd be nice to see this rebased on the latest master with comments fixed before r+.\n. This works pretty will from some light testing. One change I recommend is not including \"http://\" or \"www\" at all in the autocompletion, but instead autocompleting only after they've entered part of the domain. Some examples:\nw -> wikipedia.org (currently matches www.apple.com)\nwww -> nothing (currently matches www.apple.com)\nhttp:// -> nothing (currently matches http://www.apple.com)\nThis would follow desktop's and Android's behavior.\n. Newer implementation in #300.\n. Looks good. Thanks for the investigation/explanation about the navigation state!\n. Merged 0444b4eb80f67547831896347a7be6b49f72398b.\n. Thanks for taking care of this!\n. Thanks for working on this! I'd like to see another iteration here first before granting review. Also, please rebase your updated PR on the latest master branch -- I noticed your commits are based on commits that are nearly a month old that won't be easy to merge.\n. As you pointed out, this suggestion won't work exactly as described since the gesture recognizer holds a weak reference to the handler, which immediately goes out of scope.\nHow about making a WebViewLongPressGestureRecognizer class that extends UILongPressGestureRecognizer and implements the UIGestureRecognizerDelegate protocol? Your WebViewLongPressGestureRecognizer init would accept a webView (weak reference), it would call super.init(self, \"didLongPress\"), and it would set delegate = self. Then your code in BVC would simply be:\nlet recognizer = new WebViewLongPressGestureRecognizer(webView: tab.webView)\ntab.webView.addGestureRecognizer(gestureRecognizer: recognizer)\n. Hey @codestergit, are you still looking at this? Happy to answer any questions here or in IRC, if needed!\n. Thanks, this is looking a lot better! I'll add my feedback in a moment -- I think this can be merged after one more iteration.\nCan you please squash all of your commits into a single commit rebased onto master? We prefer to avoid a bunch of temporary/merge commits to keep the git history as clean as possible. Here's one way to do this easily:\ngit pull origin master\ngit reset --soft origin/master\ngit commit -m \"Customize behavior when long-pressing a link\"\n. Looks great, thanks for all the hard work! There is a race condition here with the JS response since we assume we get the response before we disable other delegates, and the other recognizers may be triggered first. But we can handle this in a follow-up and merge this now.\n. @hirohisa, can you please file a bug and update this PR to reference that bug # (instead of \"XXX\")?\n. Thanks! Can you post the steps to reproduce the NSRangeException that your first commit fixes?\n@wesj might be a good reviewer for this since I think he wrote the settings button handling.\n. Looks OK to me (after rebase).\n. Lots of this is redundant with the search engines work, so closing for now. Might be worth trying again if UX wants to allow filtering within individual panels.\n. Looks good to me. Thanks!\n. CocoaPods just recently added Swift support a couple weeks ago with the 0.36 beta. Once our libs have been updated to work with CocoaPods, I think we'll consider it.\n. @rnewman What's the status of this PR? Still relevant?\n. Addressed comments.\n. Thanks for the PR! Can you please file a bug, then update the title of this PR to reference that bug #? You can use the other open PRs as a reference if helpful.\n. Thanks for the contribution!\nUnfortunately, it looks like this got bitrotted by #100. Would you mind rebasing this PR so we can merge it?\n. Looks great, thanks!\n. Like you, I'm not too thrilled about the way Browser is coupled to the reader code; it'd be nice if we could pull this out into BVC or some separate class. But I'd also be OK with doing this in a follow-up just to get this landed since you already have other WIP stuff based on this.\n. Thanks for the comments. Updated.\n. Heh, I saw this got merged early again. Not worth reverting again, but please at least comment on or file follow-ups for my last couple comments.\n. I've been trying to test VoiceOver, but the phone (not just the app) becomes unresponsive after swiping through the elements in the page on http://www.mozilla.org -- specifically, whenever I reach the pink \"become a webmaker\" section. I have to wait several minutes for things to unfreeze before I can do anything again...it's completely unusable.\nInterestingly, this happens on Safari too, but not on Chrome. I'm assuming there's some bug with WKWebView + Voice Over that Chrome isn't hitting since they use UIWebView. Known issue?\n. Thanks for researching this! Merged https://github.com/mozilla/firefox-ios/commit/13799553ec2f9c778ca724481eeddea1372f5463.\n. Thanks. We should probably create a theme class to group this stuff together instead of having colors/accessibility checks spread out everywhere, but this should be OK for now.\n. Had to change a few things because of the way createWebViewWithConfiguration works. The returned WKWebView must use given configuration, or else we crash, which is why I added the configuration parameter to addTab (and Browser init). Also, the configuration cannot be changed once we assign it to a WebView, so the line webView.configuration.userContentController = WKUserContentController() had no effect before. Now, we create the WebView only after setting up the configuration.\nAlso had to change the way the initial tab URL was loaded. We don't want to load mozilla.org in tabAdded since new tabs may be opened for different URLs. I fixed this by adding another optional parameter to addTab, which falls back to the default URL if none is provided.\n. Also, was going to include test cases here, but we don't currently have support for UI tests. Might try out KIF, and do the tests in a follow-up.\n. Landed ff5e14d3089f7954e64eb7b07129b041f5fd188c and f0e4d4a9f4ab97d6ff0722efe5a41cd722b68975.\n. Could this also be solved by content hugging priority? Setting width to the toolbar height feels kind of hacky, and it's not obvious what it's for -- could you add a comment in the code?\n. Weird that we have to do this. Sounds like an iOS bug, though the accepted answer there says it should be fixed in iOS 7...\n. No longer needed with the backout (#112).\n. Looks good to me. Minor nit: XCode -> Xcode.\n. Merged c934e5d with nit fixed.\n. Looks OK, but:\n- Can we point directly to the webserver in our CSS files so we don't need the code hacks?\n- Yikes, 12MB of fonts! Can we remove unneeded ones now instead of a follow-up to avoid polluting the git repo?\n- Please squash before merging so we don't have unnecessary merge commits and temporary commits in the history.\n. Merged 4219726.\n. Hm, what problem are you having? You should be able to just do\ngit pull --rebase\ngit push -f\nto update your PR branch.\n. Yeah, the above should work here. It's common (and preferred) to rebase your pull request rather than introducing merge commits and follow-up commits on top of it. You'll just need to use git push -f after rebasing since it rewrites your history.\n. Thanks for the fixes! When making this last change, could you try rebasing your commit as suggested here? After rebasing, your commits should show only two entries: load page of suggestion url, not search url., and Not about this bug, just BrowserToolbar doesn't need follow UITextFie\u2026.\nIf you're having trouble, you can ask here or on irc.mozilla.org in the #mobile channel. My nick is bnicholson :)\n. Looks OK as an initial implementation, though your comment in bug 1129631 confuses me:\n\nAlso fixed the delay using a dispatch to the main thread.\n\nWhere? I don't see any dispatches in this. If it's not needed anymore, how did you fix it?\n. Unfortunately, I just hit this bug again with the PR applied. :(\n. I can't reproduce this reliably, so I don't have great STR. I'm doing things erratically to introduce as much variation as possible, such as waiting different time intervals between changing pages, reloading in the middle of redirecting, going to other sites (yahoo.com) in between, etc.\n. Fixed by #133.\n. Before I look too much at the JS, would you be able to include LoginManagerContent.jsm in an initial commit, then apply these commits on top? Git should then recognize that Passwords.js is a modified version of that file, and it would show a diff from the original. This would be helpful for both reviewing and blame context.\n. Merged f9f159ab8a2d3db40c913888b73bc7f40da44883.\n. @dusek, I filed bug 1134757 to use accessibilityIdentifier when appropriate. I think we should continue to use accessibilityLabel whenever possible since the idea behind KIF (and most UI automation tests) is that the tests should be run \"as a user\"; accessibilityLabel is a user-facing label, but accessibilityIdentifier is not. As mentioned in the bug, one element we may want to change is the URL bar's \"Address and Search\" label -- this should likely be used as the identifier instead.\n. Note the build error here.\n. Thanks, looks good! Merged af817f1.\n. Merged 9e07b94.\n. Hi @MichaelKohler, thanks for the PR. We actually just removed the settings XIB in PR #149, so this PR is no longer needed. In general, we're killing off all of our XIBs in favor of programmatically defining our layouts.\nIf there are any unassigned iOS bugs that look interesting to you, please let us know and we can help advise you :)\n. Looks OK to me.\n. Thanks! Sorry for the review delay. This looks good to me with the suggested change above.\n. Thanks, this is looking good! This should be ready to go with a few additional changes.\n. Looks good, thanks! Merged d0b9046.\n. To get a working project with these changes:\n1. Install Carthage.\n2. Run carthage update --no-build.\nSome notes:\n- We still have a swift-json git submodule sitting in the tree. Looks like it was unused, so removed.\n- Snappy was renamed to Snap. Updated the code accordingly.\n- We were importing SWXMLHash.swift directly before, and we were using some non-public APIs. Moving it to a subproject encapsulates those methods and caused build errors, so I updated the code to use the equivalent public APIs.\n- I imagine this will break Travis CI. I'll leave that to @st3fan :) Note that when testing this, I had to delete the ~/Library/Developer/Xcode/DerivedData directory whenever removing a project since it stays cached in Xcode. Travis might continue to pass for the same reason.\n- We'll also want to update the README. I can tack on a commit doing that before landing this, but figured I'd get some feedback on this first.\n. > I'm getting a build failure:\nDid you try deleting DerivedData? Everything is working for me with a clean build. Though I did just find another Snappy -> Snap change that I had to make from the recent Settings XIB PR, which is fixed now.\n. Thanks for the PR! I made a build using this and added some extra buttons here so that the toolbar overflowed, but I'm not able to scroll horizontally. Is that what this PR is for, or something else?\n. The specs for bug 1131284 have changed quite a bit since it was filed, and scrolling is no longer necessary for the V1 release. That said, it would still be useful to have for the future since you already have an open PR for it. I moved this scrolling to a separate bug (bug 1134282).\n. > I notice that the buttons are getting laid out manually in the container's layoutSubviews call here\nYeah, this file is one of the older artifacts from our very early prototype implementation (before deciding that we were even making a web browser!). It doesn't work well at all across different devices; on my smaller iPod touch, the icons don't even fit on the screen. I have a mostly complete patch I'll put up today that refactors most of this code, including autolayout :)\n. That's probably the easiest way forward since the spec changed for V1, but thanks for the contribution! Here's a full list of unassigned bugs if you want to find something else :)\n. Looks good as an initial implementation. r=me with comments addressed.\nRather than hiding the webView, loading the page, then showing the webView again, another option could be to load the reader URL/do the parsing in a separate (hidden) webView. This might give us a bit more flexibility with transitions since we could show the previous page longer, or show some loading animation directly in the about:reader HTML while we wait for the result.\n. Added these follow-up commits to #153.\n. Thanks for digging into this!\nAs you said, the issue here is that the site is providing an invalid URL with invalid characters missing the necessary encodings. We need a way to encode these invalid characters. Breaking the URL down into components might be one way to do that, but what if we use stringByAddingPercentEncodingWithAllowedCharacters to escape these characters instead? Then we don't need to touch LongPress.js at all, and we save some complexity overall.\nAFAICT, there's no built-in character set that includes all valid URL characters, so we'd have to roll our own. Perhaps something like this:\n// top-level define in LongPressGestureRecognizer.swift\nprivate let URLCharacterSet = NSCharacterSet(charactersInString: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~:/?#[]@!$&'()*+,;=%\")\n...\n    let encodedString = hrefStr.stringByAddingPercentEncodingWithAllowedCharacters(URLCharacterSet)\n    if let linkURL = NSURL(string: encodedString!) {\n...\n. Also, note that image src URLs could have the same issue, so we should do the same thing a few lines below for imageElement.\n. > Now to figure out why the CI failed. :disappointed:\nNot your issue, we're still getting things sorted out since we just added Carthage support :) Thanks for the fix, looks great!\nMerged 7d9ad93.\n. Looks OK with cleanup. I know the PR for the first two commits landed, but I'm not sure about the third (Create a Join table for bookmark favicons). I guess this needs to wait for that commit since this depends on JoinedHistoryVisitsTable.swift?\n. Looks like my comments got clobbered again, so still lots of questions/comments...\n. @st3fan What's the status of this PR? Still relevant?\n. Thanks, looking good! In addition to the png file, we should also remove the entire leaf.imageset asset directory.\n. Also fixed HomePanelDelegate to include a reference to itself as the first argument like other delegates.\n. Looks good to me. Glad we're finally getting rid of this code!\n. Argh, I found that this still doesn't work the first time the keyboard is shown. What's happening here is that KeyboardWatcher.defaultWatcher isn't getting created until we access it for the first time, after which the keyboardWillShow notification has already been fired. A semi-hackish fix would be to touch KeyboardWatcher.defaultWatcher in AppDelegate so it gets created ASAP, but I'll try to think of something better.\nI already tried fixing it by doing this:\n```\nprivate let DefaultKeyboardWatcher = KeyboardWatcher()\nclass KeyboardWatcher: NSObject {\n    class var defaultWatcher: KeyboardWatcher {\n        return DefaultKeyboardWatcher\n    }\n...\n```\nThat doesn't work either because apparently globals in Swift are always computed lazily. Yet another lesson learned in this bug!\n. I can't think of a way to make defaultWatcher automatically register itself to receive notifications, so I put the NSNotificationCenter handling in a startObserving method, which is called at startup in AppDelegate.\n. Merged 09c5ba0.\n. > Using these formatted strings for localized strings is probably a bad idea. It removes the ability to reorder the arguments.\nFiled bug 1138711.\n\nThese wil need an active/hover state. Make sure its filed at least.\n\nFiled bug 1138713.\n. Merged 3220566 with review comments addressed.\n. Updated to use a wrapping flow layout instead of a scrollable one. Like the other search UI bug, this turned out to be much more effort than I had hoped.\n- I spent awhile trying to do the wrapping in a UICollectionView with a UICollectionViewFlowLayout, and got pretty far (with cells wrapped and positioned properly using UICollectionViewLeftAlignedLayout). But I got stuck when trying to limit the suggestions to a certain number of rows, and ended up switching to manually setting the layout in layoutSubviews.\n- One issue was that heightForRowAtIndexPath is called before cellForRowAtIndexPath, so we need some way to calculate the height of the suggestion view. I ended up keeping a reference to suggestionCell around so that we could trigger an early layout to find its height before it's added. Let me know if you have any better ideas.\n. Added two additional commits addressing some of the questions answered by UX this morning (not including the default engine at the bottom, and using the user-entered query if there are no suggestions).\nI also threw in a fix that ellipsizes suggestions that are too long to fit on their row -- @darrinhenein, is this how you want these handled?\n. @darrinhenein Thanks, updated with the new assets!\n. @jhugman, any reason you closed this?\n. Ah, I see. Looks like this got moved to #201. I know it's annoying, but make sure Bugzilla stays in sync! The bug is still pointing to this PR, and there's mention anywhere that a new one was opened.\n. Thanks for the pull request! I'll wait until UX has made a decision in bug 1135814 before reviewing this.\n@tecgirl, @darrinhenein: it's still a work in progress, but maybe using the PR here as a prototype would be helpful.\n. Lots has changed since this bug was filed, and UX never signed off on the proposed changes here. I suggest we just close this now.\n. Looks like this needs to be rebased onto master, but other than that, this looks good. Note: your commit comment Bug111837 is missing the last 8.\n. I was wondering the same thing. I had a WIP commit that switched title over to nil everywhere, then changed my mind. Is it useful for us to differentiate between empty titles and nil ones? I can't think of any situations where it would be.\nWe'd have to check nil and empty strings everywhere (though that's admittedly less painful with optionals), and it's unclear to me when we'd use one over the other: if a user edits a bookmark and removes the title, should we consider that \"no title\" or \"empty title\"? And unless all of our other platforms support null titles, that difference would be lost syncing anyway...\n. Blah, just realized I'm looking at an old PR. Should be safe to close then, right?\nEdit: Nope\n. > For the left and right swiping of the row (for Mark as Read/Unread and Delete) I have imported the SWTableCellView dependency. This did not work as a Carthage dependency so I imported the sources straight into the ThirdParty directory.\nAs discussed on IRC, we could still import it and add the files directly instead of the .xcodeproj (which is what we do for GCDWebServer). That still gives us the versioning benefits of Carthage.\n. Thanks, works great! Merged 0fdaa8d.\n. Nice. Merged 46647ae.\n. Pushed 25e3ddb0d5eb245579b1915827a6658ff9a95711.\n. I'll take a look to see if we can get this sorted out.\n. Sounds like this PR is no longer needed, so closing it out.\n. Playing around with this a bit, I noticed that the keyboard gets dismissed when I tap Yes or No to enable search suggestions. We wouldn't want to do that since the user is in the process of typing a query, and there's a good chance they'll continue to type after making their preference.\nI think there's only one view that we care about hiding the keyboard when touched, and that's the home panel top bar. Rather than a catch-all approach where we hide the keyboard whenever anything below the URL bar is tapped, it might be safer to explicitly attach to the view(s) that should trigger the keyboard to hide. The potential downside is that we'll have to reimplement this behavior whenever we add other views that we'd want to hide the keyboard, but we can cross that bridge when (or if!) we come to it.\nSo as an alternative fix, I suggest attaching a touch listener to the buttonContainerView in HomePanelViewController, then dismissing the keyboard from there. I'm not sure whether there's a good way to resign the first responder without having a reference to the view, so this might require adding a homePanelHandleDismissKeyboard callback to HomePanelDelegate.\n. Thanks for the updated PR! Instead of doing the dance with URLBarView and BrowserViewController, I wonder if it would be more straightforward for HomePanelViewController to simply dismiss the keyboard directly, without caring who the responder is.\nPerhaps we could simply add a generic \"close keyboard\" snippet, similar to what we do here. Sorry for not suggesting that before -- that bit was added after my last comment as part of #267. Does that approach make sense to you?\n. Thanks, looks great! Squashed and pushed 3f44232.\n. Merged 8014a55.\n. Merged 59b2abd.\n. Hey @dusek, thanks for the pull request! Unfortunately, it looks like something has landed since you opened this that causes a number of conflicts in these files. Would you mind rebasing this on the latest master?\n. Thanks! Merged 60e5dda.\n. Another question: we should be able to delete FileThumbnails since this replaces it, right?\n. Thanks for the pull request! In addition to the changes mentioned above, would you mind going ahead and also adding a label to readerModeButton a few lines below?\n. Very sorry for the delay -- it's been a busy week. These changes look good to me. Thanks!\nFor future reference, it's a good idea to squash commits to keep git history clean. I'll go ahead and take care of that for you this time.\n. Merged f240867.\n. Thanks for the pull request! This looks pretty good. I'd like to fix a few of the comments like extracting the vars to TabTrayControllerUX, and renaming the selector before this lands.\nUX will also probably want to change the interaction some, but we can handle that in a polish follow-up if they don't have time to give feedback right now.\n. @sachin004 thanks for the updates, and sorry for the delay! Your PR got buried by all the other open PRs :)\nFor the future, one tip that will make sure your PR gets reviewed quickly is to flip the attachment flag to \"review? bnicholson\" (or someone else) in Bugzilla every time you update the pull request. This adds it to the reviewer's queue so it doesn't get overlooked.\n. Thanks, this looks great! Squashed and pushed 74c739a.\n. Urgh -- having a shared Cursor between SearchViewController and the URL bar turned into a much bigger ordeal than I had hoped.\nFor one, we were using a \"pull\" data source model for AutocompleteTextField, where the text field would query its data source for domains. This doesn't mix well with sharing a query since we have two separate functions that trigger queries -- didTextChange and suggestionForText -- and there's really no good way to combine them so that the SVC query/domain query can happen in the same callback. I had to jiggle the AutocompleteTextField implementation to be \"push\" based, killing off the AutocompleteTextFieldDataSource and the callback and replacing it with the setAutocompleteSuggestion function.\nAlso, it doesn't make much sense for SVC to pass back the domain autocompletion results. SVC doesn't do anything with these domains, so putting the implementation there just because it already has the cursor is kind of a hack. In the end, it seemed better to go the opposite direction and pull the cursor out of SVC, into a shared \"loader\" that can push the data to SVC and the URL bar. The Loader logic to handle this is simple enough, though I needed these first 4 patches of cleanup/minor refactoring to get it to work.\n. Merged 3e0762f.\n. Added a simple test to verify the WKWebView user agent.\n. Looks good! Pushed c743b30.\n. Thanks for the PR. Looks good, except for the iPad crash as Stefan mentioned. You should be able to reproduce this easily by long pressing the URL bar in the iPad simulator, but here's the error:\nTerminating app due to uncaught exception 'NSGenericException', reason: 'Your application has \npresented a UIAlertController (<UIAlertController: 0x78fbeb30>) of style \nUIAlertControllerStyleActionSheet. The modalPresentationStyle of a UIAlertController with this style is \nUIModalPresentationPopover. You must provide location information for this popover through the alert \ncontroller's popoverPresentationController. You must provide either a sourceView and sourceRect or a \nbarButtonItem.  If this information is not known when you present the alert controller, you may provide it \nin the UIPopoverPresentationControllerDelegate method -prepareForPopoverPresentation.'\n. Thanks for the PR. Since we're making this change solely for accessibility, I wonder if it would be more appropriate to use accessibilityElementsHidden instead of hidden?\nWe should also definitely get some KIF tests for this behavior since it's easy to break without noticing. I filed bug 1152579 so we can start looking into this.\n. Hey @dusek -- sorry to make you do this again, but would you mind rebasing this onto the latest master? Some pretty significant changes have landed over the last few days (including Swift 1.2 and the merged landscape toolbar/URL bar) that have likely bitrotted this commit.\n. hidden works for me!\n. Thanks! :)\nMerged f708ba9.\n. Cool. Merged be7c9da.\n. Pushed 4338c7b.\n. Merged 5303d45 with optionals fixed.\nThanks for the contribution, @sachin004!\n. Merged e0a070e.\n. Fixed by #472.\n. Merged 223ff0f.\n. Merged ae1df17.\n. Can we just use getIndex(tab: Browser) in TabManager so we don't have to make all these delegate changes?\nEdit: I guess we can't since tab has been removed. But what's wrong with reloadData?\nEdit #2: wesj mentioned that reloadData breaks the animation.\n. We should definitely add a close tab test and a clear private data test soon, too.\n. Ack, this wasn't quite ready to merge yet, so I reverted. There are some code changes here that will need review. But sounds like UX approves!\n. No biggie -- opened #373 for review.\n. Nothing really changed from #372, so I guess we can just leave that merge in the tree.\n. Thanks for the pull request! Would you mind linking this to Bugzilla and squashing these commits as detailed in the contributor guidelines?\n. Hey @b-andris, still working on this?\n. Some questions/comments:\n- Rather than disable it, can we override it to point to our own reading list?\n- We might want to remove LongPressBrowserHelper from the tree since it's now unused.\n. Merged 6a17e18.\n. Merged aa2c202.\n. Merged d14de77.\n. @dusek, how does this interact with Dynamic Type? Should we be scaling these sizes based on the user's setting there?\n. @st3fan any tips? Might be worth adding to the README if we have a way to do this.\n. I ended up dropping .lproj plugins for a couple of reasons:\n1. The Xcode interaction is annoying. Every time we want to add a new search plugin, we need to drag the <locale>.lproj/SearchPlugins directory into Xcode, making sure to make it a folder reference.\n2. We're going to have to do manual lookups anyway. Even if we decided to use Xcode's .lproj structure, we'd need to implement our own fallback behavior for engines listed in list.txt. And once geo-based lookup is implemented, that's another override we'll need.\nImplementing our own language-based lookup is only a few lines, and it's much nicer to work with since we can simply add directories to SearchPlugins as we go along without touching the project.\n. @sleroux thanks for the quick review!\nYou can \"officially\" flag a patch as r+'d by going to the bug in Bugzilla, clicking the Details link next to the PR attachment, then flipping review from ? to +.\nSorry for the cumbersome system...we tie everything back to Bugzilla since that's what product/release management, QA, and most of the company pay attention to.\n. No problem -- you can mark patches as obsolete by clicking Details, edit details, then checking the obsolete checkbox (I just did that in the bug). That'll make it hidden.\n. Nice, transitioning the URL bar to dark gray when hiding seems much more natural to me. The sudden change from a dark gray background with white text to a light translucent background with black text didn't feel very smooth.\nA few questions/comments from trying this out:\n- Was removing the translucent effect in the URL bar intentional? Just wanted to be sure since I don't see any comments in the bug about this change.\n- Do we want to fade to dark gray in landscape orientation? It makes sense in portrait since we\u2019re transitioning to a dark URL bar, but in landscape it feels out of place since there's nothing dark to fade into.\n- I noticed the URL bar doesn't immediately start fading away if I scroll from the top of the page -- I have to scroll a small distance first. We should probably start scrolling from the top like we did before (and like Safari does).\n- Scrolling to the bottom causes the page to jitter and get stuck.\n. Nice, this looks and feels great! Only remaining question is whether we want the dark gray transition in landscape orientation, but I'll leave that for @darrinhenein.\n. Nice, looks good!\nUnless @wesj has additional comments, feel free to go ahead and merge, then close out the bug by switching the bug Status to RESOLVED FIXED.\n. Squashed and rebased, merged bc6a91b.\n. No significant code changes, so landing with Darrin's f+.\n. We've looked into doing this before, but unfortunately, it's a bit tricky. I think the current frame is the only thing that's actually rendered (as a performance optimization). If you scroll the page down before opening the tabs tray, you'll see that the thumbnail is gray when we try to capture coordinates outside the frame.\n. Yuck, this is a gross hack, but nice find!\n. Moved to #473.\n. Oops, looks like I clobbered your comment with a force push. Pasting your comment from my email:\n\nThis uses the fact that NSNotFound is a large integer. Make this explicit in the block, and order by shortName if both engines are not found. I'd rather use find, which is natural Swift. If you prefer indexOfObject, I'd suggest casting to NSArray in the let above.\n\nThanks for the quick review!\n. Merged f066139 with updated tests.\n. Thanks for the PR. At one point, we had something similar on Android, but it was difficult to maintain. How does iOS determine accessibility order? If possible, we should update our view layout to conform to best practices so that the correct order is determined automatically, rather than manually maintaining this order ourselves.\n. > I described it in the commit message\nAh, missed that :)\nFair enough -- I don't think adjusting the accessibilityFrame is really an attractive alternative. Looks like yet another thing to add to the testing to-do list!\n. No, there is no set release date yet. Where did you hear about a cut-off date?\n. Ah, you can ignore that page for now :) Currently, our timeline is \"when it's ready\".\n. Thanks for the quick review! Merged 23f1bd2.\n. @st3fan, I updated to use a BuildChannel enum with Aurora and Developer cases, and we can add others as we need them. I decided not to include the test state in this enum since testing isn't mutually exclusive from the channel; that is, we might be running tests on an Aurora build. Is this what you had in mind?\n. This adds some pieces from the older autocomplete PR (#55). For multistage inputs, it simply doesn't show suggestions, which is what Chrome does.\nWhile here, I threw in a fix for bug 1136219.\n. > This actually updates both the top sites and other panels to always use the same color (except reader view which apparently decided to do its own thing... argh).\nDoes that mean we should also be setting AppConstants.SeparatorColor in the reader panel?\n. Hm, so audio will still pause if VoiceOver is turned on, right? Is that expected?\n@dusek landed this last week for parity with Safari. I wonder if Safari pauses audio with VoiceOver enabled.\n. We should drop a note in #466 that error pages will need the same hacks when that lands.\n. A few questions/comments before I review:\nZombifying tabs on low memory does seem like something we should do -- but it's already done for us. That was the cause of bug 1145402.\nWith that in mind, it might be reasonable for us to drop zombify()/resurrect() entirely, letting the OS handle zombification, and letting the fix in bug 1145402 handle resurrection. The only thing we really need is a way for the webview to be lazily loaded at startup. Could this all be simplified to making Browser's webView lazy? (Not literally a lazy var; we probably touch the webView too much for that to work.)\n. Yeah, the webview instance doesn't die, just the actual page content. I found that it kills only the number of webviews needed to get out of the low memory state, rather than killing them all at once, which was kind of neat.\nFor whatever reason, I found that the OS zombification doesn't happen when the app is connected to the Xcode debugger (making it a pain to test).\n. > [...] but with lazy vars, they'd also wind up having to know about the state of the tab.\nYeah, I didn't literally mean lazy vars, just webViews that are lazily loaded. That is, we could create the Browser/webView which holds its restore URL, but loads it only once it's actually selected (similar to bug 1145402). Will that work?\n. > But we'd essentially end up with resurrect/zombify methods in that case that flipped some boolean to switch modes?\nNot sure what you mean -- we wouldn't have \"zombify\" at all (since it's done by the OS). The \"resurrect\" would be a one-liner \"load this pending restore request if it's set\". Would we need more?\n. > There's some questions there about the overhead of creating a webview but not loading anything in it that I really don't know much about.\nYeah -- my guess that an unloaded webView uses an inconsequential amount of memory, but that should be easy to verify using the Allocations instrument (just do a before/after memory comparison after initializing 10 empty webViews or something).\n. Rather than guessing the cost, I added this little chunk to the bottom of viewDidLoad:\nlet start = NSDate.timeIntervalSinceReferenceDate()\n        for i in 0..<10 {\n            let webView = WKWebView()\n        }\n        let stop = NSDate.timeIntervalSinceReferenceDate()\n        println(\"BRN: startup cost: \\(stop - start)\")\nThat chunk took over 700ms (over 70ms per view!) just to create them -- that's without even adding them to the view hierarchy. So it looks like you're right: the \"simple\" path won't be good enough here.\n. Nice, this looks good to me, though you'll have to do a bit more rebasing after #521 (sorry). That PR adds a testWebViewDisposed to make sure the webview gets disposed when the browser is removed, so it'd be good to make sure that still passes with this (especially considering you moved some deregistration into the Browser deinit).\n. Wonderful, thanks!\n. Fix makes sense to me, though maybe we should put this in TabManager.removeTab()? TabManager.addTab() attaches the delegate, so there'd be more parity if TabManager removed it, too.\n. After merging the PR, the final step is to close the bug by marking it as RESOLVED -> FIXED; I can go ahead and do that now for bug 1163118. Sorry for all of the confusing processes!\n. @wesj might also want to take a look since I think you've worked on similar stuff on the Android side. Curious if there are any solutions to the issues mentioned above...\n. > Injecting content into the DOM feels pretty dangerous to me. Why wouldn't we use native UI for this?\nBy \"dangerous\", do you mean security-wise for the browser, or just breaking page compat? I'm not worried about the former in this case since the divs we're injecting are just a visual cue that we don't interact with. I am a bit concerned about things breaking in general, though...if the page does something as simple as window.onscroll = ..., it will clobber our listener :-\\ But using native UI wouldn't help in that case, unless we had some way to attach the listeners natively...\n\nWebkit supports a -webkit-tap-highlight-color that pages can use here\n\nYeah, I found that property too. Unfortunately, the value was always \"\" when I checked the broken cases I mentioned, so I guess those active effects are coming from somewhere else.\n. Merged 315a6aa. Let's see what happens.\n. Hm, I see it too when I look at the CSS rules inspector for the button, but then $0.style.webkitTapHighlightColor returns an empty string.\n. Also, the seemingly unrelated == -> === changes are due to removing NSObject as the parent class of Browser.\n. Ah, I hadn't even noticed that these changes were going into a new SwipeAnimator file. This makes a lot more sense looking at it a second time. Looks good to me!\n. Merged 01bce83.\n. Merged bbc6e3b.\n. Since you know the cause, are you able to reliably reproduce? If so, this is the kind of fix that would make a good candidate for adding a unit test: the fix is relatively fragile, and it's something that we wouldn't immediately notice if it were to break again.\n. @bkmunar, can you squash these together before we merge? We don't want to include the \"temporary\" starting rotatingState commit in history, which had a bunch of changes that were reverted in the second commit.\n. Thanks!\n. Note that we'll have to update this check that decides whether to show the \"Enter search or address\" placeholder in the URL bar; we don't want this ugly URL to be exposed to the user. We'll need something similar to what was mentioned above (isAboutHomeURL()), so perhaps it's a better idea to just go ahead and create a separate AboutUtils.swift class with this helper method. That way, it'll be accessible to both BVC and Browser.swift.\n. This looks good to me, but can we add a UI test? Should be fairly straightforward to include a minimal page that triggers a popup (like in the test case mentioned in the bug), then testing it for both pref cases.\n. Also, git nit: please rebase onto master and drop the last Merge branch ... commit.\n. @st3fan Updated.\n. Yuck, I hate arbitrary timeouts. You said you tried something else -- was that using didReceiveServerRedirectForProvisionalNavigation by any chance? I wonder if we could use that to determine whether to ignore the next navigation.\n. It looks like we have the exact same block of code here and in didCommitNavigation. Can you create a private helper method that's called in both places to avoid the redundancy?\n. Those issues you mentioned there are exactly the issues we're seeing with this bug :)\nSo I think we agree GCDWebServerOption_AutomaticallySuspendInBackground needs to be set; it just needs to be set to the opposite of its current value. We don't want it to \"automatically suspend in background\", we want it to stay alive. The docs I mentioned above are consistent with this: GCDWebServerOption_AutomaticallySuspendInBackground is true by default, so it's implied that we can change the default behavior by switching it to false.\nI can confirm that reading list URLs, home URLs, and back/forward URLs all work as expected with this fix.\n. Thanks for the report, but this GitHub repo is for Firefox on iOS (mobile devices). It looks like you found the bug for this issue, so that's the best place to watch for updates.\n. Part 1 landed; part 2 no longer relevant AFAIK due to iOS 9 changes.\n. This likely needs a full rewrite at this point, so closing it out.\n. lttm\n. > Can one view the reason of failure?\nUnfortunately, I think you need an account with the Xcode server to see the errors. I checked, and the error is simply: \"Could not test because none of the devices configured for this bot were available.\" sleroux's guess is that this is related to the recent Xcode 6.4 update, so we'll need to make some changes for buildasaur. In any event, it's nothing to worry about here.\n. Nice, looks good. For the hardcoded string, the convention we've been using is to extract it to a private constant at the top of the file (see lines 9 and 10 for examples).\n. Also, here's the discussion thread for anyone interested: https://mail.mozilla.org/pipermail/mobile-firefox-dev/2015-July/001279.html\n. > @thebnich do we expect to get v1.1 out before (or together with), or after iOS 9 (say half of September)?\nBy v1.1, do you mean v1, or the release following v1? I think we're shooting to release v1 before iOS 9 (hopefully August). I don't think there's an estimated date for the following release yet, but I imagine it will be after iOS 9.\n\nAlso, as I have at least one more PR in mind (intro view) that could need new strings but I will definitely not have it ready this week \u2013 could I submit a PR that would \"preemptively\" add only the new strings I am contemplating (in some variables or returned by functions) so that they would make it into the string freeze and be translated, so that I could later (say 1-2 weeks from now) use those variables with localized messages when actually making the another (proper) PR with the full change?\n\nA preemptive strings PR sounds fine to me, especially if you're estimating a 2 week delay for the actual change. Let's see if @st3fan agrees. Thanks!\n. Your plan sounds good to me, though I'm curious what changes you're anticipating for the \"first run\" wizard. Planning on giving some accessibility-related hints as part of the walkthrough, perhaps?\nI'm not too familiar with our localization scripts -- you might want to try pinging or NEEDINFO'ing @st3fan (EDIT: fixed!).\n. Thanks for the pull request! Can you please attach this PR to the bug and flag the attachment for review as outlined in the contributor guidelines?\n. Please switch Xcode to indent using spaces (tab width: 4) and update the commit. We use spaces everywhere for indentation; if you look at the diff, you'll see that alignment is broken for your changes. Thanks!\n. Looks good with trailing whitespace fixed. Only other request is that you please squash your commits (as mentioned in guidelines) to get rid of the iterative \"fixup commits\". Thanks!\n. Hey @BigxMac, still working on this?\n. Sorry, I lost track of this. In the future, I'd recommend flipping the Bugzilla attachment back to review? after making changes in the PR so that it shows up in my review queue again.\nThis looks good to me. Thanks!\n. Merged 05fc9c2.\n. Also: tests incoming. Have to add some missing KIF functionality to get them to work, so I just threw this up first.\n. Awesome. Thanks!\n. Note that according to the Alert docs, the cancel button should be on the right for destructive actions (and clearing all private data is certainly destructive!). Would make a good follow-up bug.\n. Looks good, though I'm curious about the differences between portrait and landscape orientations. The former has a separate toolbar at the bottom that you add as a group here; the latter moves them all into the top URL bar. We do this to save visual space, but from an a11y perspective, I imagine we'd want the navigation to be consistent: either a \"virtual\" bottom bar for a11y users, or the buttons are always grouped into the top URL bar for both orientations. Not sure how feasible this would be though. Thoughts?\n. @dusek ^\n. Well, that sounds terribly complicated :) Thanks for the explanation! Your PR works for me if it works for you.\n. Can you explain these changes, maybe adding some comments? I understand the insertText -> SELtextDidChange if insertText isn't working, but I'm not clear on what all the other changes are doing.\n. This seems to work well on English keyboards, though I found a regression switching to Japanese.\nSteps:\n1. Switch to Japanese keyboard.\n2. Click URL bar.\n3. Type \"ha\".\nThis should show the Hiragana symbol for \"ha\" (\u3042); however, it shows h\u3042, so it looks like this change is breaking text composition somehow. I filed bug 1183914 to get some automated tests for non-English text entry -- it's very fragile!\n. lttm\n. Looks good to me, but please remove the HEAD is now at 9f67f17 part of your commit message ;)\n. This looks OK on its own, but this could fail when run as part of the test suite. Right now, we don't clear history between each test run, so the top sites panel will be full of thumbnails from past tests when this one begins :(\nMaybe this would be a good time to figure out how to fix that...\n. Also, please fold your asdf commit ;)\n. As mentioned above, we reset the reader state for the URL bar in didStartProvisionalNavigation. Could the fix for this be as simple as a one-liner change where we add self.hideReaderModeBar(animated: false) right under that?\n. Fixed in #1149.\n. Closing since this will likely need to be rewritten.\n. Resolved as WONTFIX in bug.\n. Not sure why we have both classes and ids (<div id=\"reader-content\" class=\"content\">, <div id=\"reader-content\" class=\"content\">, etc.)...we should probably remove those at some point.\n. Nice, this all looks good. While fixing tests, can you also update SearchTests.swift to account for the debounce? I think it's failing for the same reason (see comment).\n. > SearchTests isn't passing with or without this patch.\nI know -- it was a regression from debounce. You fixed AutocompleteTests in this PR (which also broke from debounce), so I thought we could fix SearchTests while here.\n. Looks good, but since you added recursion to decodeURL, can you remove the other loop in that helper that does the same thing?\n. Looks good, thanks!\n. Also reduced the urlTextField's compression resistance priority so this works properly on the 4s.\n. > Don't need this anymore.\nThat depends on how we want it to look on the 4S.\nWithout reducing compression resistance:\n\nWith reducing compression resistance:\n\nNote that the latter is how we currently look on master. I wouldn't be opposed to the more compressed version, though, given the very limited screen real estate on the 4S...though that's @darrinhenein's call.\n. @codestergit, feel free to give feedback if you want since you have a lot of experience with this code :)\n. @codestergit, thanks for the feedback!\n\nWe can also remove this line https://github.com/thebnich/firefox-ios/blob/autocomplete-quick-delete/Client/Frontend/Widgets/AutocompleteTextField.swift#L74\n\nI don't think we can remove this one. If I type \"y\", then touch the text field to complete to \"yahoo.com/\", we want the bottom search results to update for \"yahoo.com/\".\n\nhttps://github.com/thebnich/firefox-ios/blob/autocomplete-quick-delete/Client/Frontend/Browser/URLBarView.swift#L622\nwhich was previously added for clearing cached search query.\n\nThanks, removed.\n. Rebased and opened #871.\n. Closing since this will likely need to be rewritten.\n. Nope -- this bug is caused from error entries pushed in the back/forward stack that haven't yet been loaded. Bug 1187171 won't change that since those entries won't trigger the didFinishNavigation until they're actually loaded.\n. Merged 2430a8a.\n. I was originally going to use SDImageCache for the screenshot store, but ended up writing my own store for a couple reasons:\n1. No fine-grained expiry control. SDImageCache has no way to enumerate the cache keys, meaning we need to set a general time expiration for all screenshots. That won't work very well in this case, since some old screenshots may still be valid (especially with zombified tabs), and newer screenshots will quickly become stale for active tabs.\n2. We don't want a memory cache since we already hold onto the screenshots in the Browser instances. AFAICT, there's no way to create a disk-only cache using SDImageCache.\n. This might not work well when run with other tests since history/top sites aren't cleared between each one. I guess that's a separate bug, though.\n. @bkmunar, could you rebase this by removing the merge commit/\"nitz\" commit?\n. @rnewman, do you want to do anything with this?\n. Ugh, KVO management is a pain. Rather than worrying about all this dynamic KVO registration based on restoring, what if KVOURL is always registered like the others, then we just did something like this?\ncase KVOURL:\n    if restoring { break }\n    ...\n. Needs more work as mentioned in the bug, and current PR is bitrotten quite a bit. Closing.\n. OK, cool :+1: \n. Fixed a minor unrelated issue in Logins.swift where we weren't checking for a nil scheme that might result in strnage behavior. Other than that, everything else looks fine.\n. @rnewman Both work, but I agree that it makes more sense to pull the path from a file URL than to construct an NSURL that's not actually a URL. Updated.\n. Merged 7eb679a.\n. > As a general question, for features like PB mode, should these be folded into master piece by piece or part of a feature branch?\nI'd vote to treat it like any other feature (merging into master ASAP) since keeping the branch up-to-date can be a pain, and we have it marked as a 1.1+ blocker anyway, so we shouldn't expect to ship until it's done.\n. @fluffyemily, looks like this didn't land because of some extra SQL stuff that was done. Can we split this into PRs as mentioned in https://bugzilla.mozilla.org/show_bug.cgi?id=1168849#c7, land the UI bits, and close this one out?\n. Merged 29fe5813819ea50251ad29e8bb4f0e7f95adae29.\n. Updated the PR just to show my progress and in case anyone wants to try this out. This PR gets us closer to the UX mockups by adding a current/total match counter. There are lots of robustness fixes, and it now also highlights every match on the page at the same time.\nIn a nutshell, this works by calling window.find() and for all matches on the page, where we get the selection and draw translucent highlight rects over the results (very similar to what we do for the context menu touch down highlight). Currently, the highlight rects are all appended to the top-level document, but this results in some quirks since the rects can appear when the elements they're highlighting aren't actually visible (e.g., content scrolling behind a static overlay div). I'm experimenting with changing that so that the highlight rects are at the same level as the elements they're highlighting.\n. I think we're going with the approach in #1296. Rather than an overlay <div> that contains all of the highlight rects, each highlight will be an inline <span>.\n. Filed as bug 1210111. Unfortunately, WKWebView is not compatible with content blockers, and SFSafariViewController is far too restrictive. Downgrading to UIWebView would be the only way we'd be able to implement our own content blocking, but that would be a pretty large effort and would hurt performance. We're hoping Apple soon exposes networking APIs for WKWebView so that we can implement this.\n. A couple of UX nits:\n- The image for the private toggle selected state jumps down slightly from the non-selected state.\n- The centered \"empty\" view seems like it's a bit below the vertical center (probably because the status bar/toolbar blend in with the overall view).\n. One more nit: please fix the bug numbers in the commits -- should be 1201504 not 1201501!\n. Looks pretty good overall -- just lots of cleanup comments (many of which you ended up fixing in following commits). Since the follow-up commits are mostly incremental/fixup commits that that revert things in previous commits, I suggest folding them all together to make this easier to review/blame.\n. Tried this out. Still some questions/issues to iron out:\n1. The big one is that it doesn't seem to actually work :) As @tecgirl said, I see the \"Open in...\" bar, but nothing happens when I click it. iPod touch 5th gen, iOS 9.\n2. Needs to match the existing string in BVC and remove the existing string as mentioned in IRC.\n3. Found a few UI issues. For one, clicking the tabs tray button with the bar visible will cause the bar to briefly persist while the tabs tray is shown, which looks janky. Secondly, switching tabs and then returning to the tab with the PDF file will result in an empty gray space at the top where the bar should be.\nEdit: I'm blind. Removed second point about Info.plist.\n. Cleaning didn't help. Logs when I open the PDF:\n2015-09-24 11:42:12.371 [Error] [OpenPdfHelper.swift:70] init(url:) > Unable to create local version of PDF file at file:///var/mobile/Containers/Data/Application/110A3B87-9C1E-4721-9CD0-7C3808D95000/Documents/pdfs/type.pdf\nWhen I click the button:\nview doesn't have a superview so can't open anything\n. This seems to fix the issue for me:\n-            if fileManager.createFileAtPath(filePath.absoluteString, contents: contentsOfFile, attributes: nil) {\n-                let openInURL = NSURL(fileURLWithPath: filePath.absoluteString)\n-                docController = UIDocumentInteractionController(URL: openInURL)\n+            if let path = filePath.path where fileManager.createFileAtPath(path, contents: contentsOfFile, attributes: nil) {\n+                docController = UIDocumentInteractionController(URL: filePath)\nI think fileManager.createFileAtPath() is looking for an absolute directory path (e.g., /var/...) rather than a file:/// URL, which we get when using filePath.absoluteString. Like you, I'm quite confused as to how this was working for you and not us, though...\n. > Why not make self.files a 'let'? Because it holds a reference to the profile itself, so it has to be a var.\nAssuming you're talking about ProfileFileAccessor, it doesn't actually hold the ref; it simply uses profile.localName() to construct the path. Could we restructure that init to not take a full-blown profile, then fix things as you described in your commit message?\n. These are pretty sweet animations. Sometimes when switching from private -> normal mode, though, I see a flicker that causes the thumbnails to jump. Do you see this, too?\nThis only happens when showing the empty private browsing placeholder (i.e., no private tabs are open).\n. Was seeing flicker on the tab thumbnail, but that seems to be gone now with this PR :+1: Was just using the simulator.\n. Landed in 82fb1cfc80fdba9961224ef650f1971f4bb6335d.\n. Good idea, but I probably won't get to this before v1. I added a note in bug 1170696 as a follow-up.\n. Merged f13934a.\n. Merged in 65302b4.\n. Looks like this landed in 82fb1cfc80fdba9961224ef650f1971f4bb6335d.\n. This is kind of strange. Did you notice if there are particular strings/values being passed back that are problematic? Or does this always crash when these lines of code get executed?\n. Merged in b6787e56a8595075d6002c3a79f5cc1648c0f724.\n. Hm, this looks pretty much the same as the branch linked to in comment 9 (rebased commit here). We didn't land that because of the issues mentioned in that comment, and I imagine this PR has the same issues. Can you try those STR and see if you can figure out what's going on?\n. Merged in 98ae79c.\n. Merged in 7b5cf8a.\n. For comparison's sake: on Android, we simply remember the search term whenever using a search engine, and we show the query in the URL bar for the first result page only (we also account for any redirects to that page). If we do another search from that result page, or if we land on a search result page any other way outside of searching from the URL bar (e.g., going back), we show the full URL again.\nThe method you're using here is more clever than that since it tries to extract the query from the URL. It's pretty sweet when it works, though it will also fail at times when the Android approach wouldn't. In the two cases mentioned above, the \"Android way\" would work on Wikipedia, and it would show the full URL for the second Google search (not ideal, but still more correct than showing an old query).\nGiven the tradeoffs, I'm not sure which approach we want to go with. Maybe @darrinhenein or @tecgirl have opinions?\n. Nice -- this seems like a decent compromise between both approaches. Since you're using the pre-redirect URL, this should work for at least the first result page for all searches, which was my biggest concern before.\nThis still isn't working for Google searches for me where I do subsequent searches from the result page (since Google uses a fragment identifier for follow-up searches), but I'm not sure there's much you can do about that as long as you're using the \"intelligent\" query parsing.\n. @jhugman Updated the PR. I moved the ScreenshotHelper implementation into ScreenshotHelper.swift, along with the other state and methods. Is this what you had in mind?\n. Landed fa0fd4e.\n. Hm...I wonder if webView.backForwardList.currentItem?.initialURL will give us the pre-redirect URL in these cases? If so, it might be worth considering using loadRequest with that URL instead of reload.\n. > It could be that the user agent resetting in didCommitNavigation undoes the spoofing too early in some case.\ndidCommitNavigation is called when the content starts to arrive, so that might not actually be the best callback to use. Sorry for suggesting the wrong method! didFinishNavigation sounds more appropriate -- maybe give that one a try?\n. > To overcome this, I switched to calling reload when the URL is not changed due to redirects and it appears to work as expected now.\nNote that NSURLRequest also has a cachePolicy initializer argument where you could pass NSURLRequestReloadIgnoringLocalAndRemoteCacheData. I think this is preferable to a separate reload so that we handle all loads consistently.\nRegarding the m. subdomains: this is an issue across all browsers, and one that we've tried to hack around in the past on Android by removing the m. prefix. We found that sites don't consistently map mobile domains to non-mobile domains, however, so this hack wasn't reliable. It's something we have to live with for now; the longer term fix is to evangelize modern responsive design techniques to sites that use UA sniffing so we won't need this feature to begin with :)\n. > I wasn't sure if you also wanted me to remove the argument from defaultUserAgent. I think it would make sense but wanted to check back with you first.\nYes, please :)\nEverything looks great! If you don't mind making that change, I'll go ahead and merge with the updated PR.\n. > Since the defaults argument in defaultUserAgent is needed in ClientTests.swift\nIs it actually needed, or could we just cut it out like you did here? It looks like ClientTests.swift uses AppInfo.sharedContainerIdentifier() as the suite name, which is what we're using everywhere else, right?\n. Awesome, thanks a ton for the patch and all of the follow-up fixes! :)\n. Merged into v1.x: 09129e4\n. Merged the highlight portion of this (bug 1208564) in 5b15103.\n. Sorry for the late review (again). Just tried this out and it works great. Thanks for also including tests!\n. This might be an iOS bug -- after some research, I found the same issue reported in the HanekeSwift repo. If we want, we could use the solution from there (using a fine-grained lock around this initializer).\n. Works for me. Thanks!\nMerged 889206b.\n. Filed as bug 1210111. Unfortunately, WKWebView is not compatible with content blockers, and SFSafariViewController is far too restrictive. Downgrading to UIWebView would be the only way we'd be able to implement our own content blocking, but that would be a pretty large effort and would hurt performance. We're hoping Apple soon exposes networking APIs for WKWebView so that we can implement this.\n. Found one more issue: we don't validate the response, so responseError will be nil even for HTTP errors. One-line fix is to add a validate() line before handling the response.\n. Nice catch. Ugh, as simple as it seems on the surface, UIPasteboard is one of the most convoluted, poorly-documented APIs I've run into on iOS. Added a few follow-up commits -- here's the process I used to get there:\n1. After some experimentation, I noticed that switching from kUTTypeImage to kUTTypePNG seems to magically work for all images I try (PNG, JPEG, and GIF). Not really clear what's going on here, but I'm guessing that UIImagePNGRepresentation is being called internally somewhere when giving kUTTypePNG. Even less clear is what we're supposed to do in this case, but this seems good enough.\n2. Pasting the image into the message body in the Mail app, I noticed that it was pasting both the image and its URL. Turns out that UIPasteboard supports multiple representations of each item, and it supports multiple items so that you could copy/paste several different things at once. We want the former (single item, multiple forms).\nI tried using UIPasteboard setValue(), instead, but that just did the same thing as setting .image (replaced the existing item). So then I tried setting both the text and the image again using .items, and that finally seems to work as expected: it pastes only an image when supported, and falls back to text if needed.\nSo in short, UIPasteboard has at least four ways to set the image: .image, .addItems, .setValue, and .items. What a cluster!@#$.\n3. I then noticed that when pasting into the To: field, I could paste the image URL copied from Firefox, but not from Safari. I found that setting the URL to pasteboard.URL instead of pasteboard.string fixes this. I'm guessing the To: field in the Mail app uses a certain kind of UIKeyboardType, and iOS is smart enough to know that it doesn't match a URL type.\nAfter staring blankly at UIPasteboard for so long, I also noticed that it has a changeCount property that's updated each time the pasteboard is changed. I figured this was a slightly more proper condition to guard against rather than comparing the URL itself.\n. Master: 60a3b28ee5e800ed884f19b6c90c9981fe2899be\nv1.x: a0be117\n. Currently in development; see bug 1164067 and its dependencies.\n. From the App Icon guidelines:\n\nAvoid transparency. An app icon should be opaque. If the icon\u2019s boundaries are smaller than the recommended sizes\u2014or you use transparency to create \u201csee-through\u201d areas\u2014the resulting icon can appear to float on a dark background, which tends to look especially unattractive on the beautiful wallpapers that users choose. \n. > Not sure if its a convention but I find I use the 'Return' button to cycle through results. If we can FindInPageBar to be the text field's delegate, we can detect the return action using textFieldDidReturn and have it navigate to the next result without the need to reach up to the next arrow.\n\nInteresting idea -- I can try this in a follow-up if @tecgirl approves.\n\nTapping the next/previous arrows for the first time makes the keyboard animate down. This is probably intended but I find myself tapping these arrows multiple times so when I tap on it twice in quick succession I usually end up hitting a page element by accident. Would it make sense to not dismiss the keyboard while find-in-paging?\n\nYep, I ran into the same issue myself (see comment 15 in the bug). I think @tecgirl said she wants to try keeping this behavior, but I just filed bug 1235860 to keep this on the radar in case we decide to change it.\n. Landed with a test.\nv1.x: 5b16834a4cb6d94035af34335e64f4dec498560e\n. Landed without whitespace changes to baidu.xml to reduce churn: c4bc938\n. master: 531f59c\nv1.x: d7255be154327e3b748219b25b12b6f1f6c4076e\n. Looks good to me, though I want to understand this better before giving r+.\nWhen I set a breakpoint at getFaviconForCell in my local build, the breakpoint never gets hit. I think that's because we call getFaviconForCell only when a site doesn't have a cached favicon already, so we have to download it using the FaviconFetcher. In other words, once we've downloaded the favicon and it's in the cache, we shouldn't hit this bug again since we won't call getFaviconForCell again.\nBut in Aaron's comment, his first step is: \"Sync. Visit top-sites, everything looks OK.\". This is where I would have expected the bug to occur: there are newly-synced sites with no favicons, so we have to download them when we visit Top Sites. Instead, he says the bug occurs after closing the browser and opening Top Sites again.\nThis is where I'm confused: shouldn't the favicons be cached at this point? If so, how does changing getFaviconForCell fix the bug, since that method wouldn't be called for cached favicons?\n. @rnewman, do you want to do anything with this?\n. Kinda sucks that we have to do all this manually. Would be very happy if we could find some styling framework (NUI or similar) that would allow us to separate the view from the styles.\n. Sorry, didn't get a chance to look through this very thoroughly yet. On PTO/vacation until Monday, so feel free to redirect review if you want this done sooner!\n. @sleroux I found one minor bug: Click Edit, then Select All, then go back, then click Edit again. The button says Deselect All even though nothing is selected.\nOther than that, LGTM besides the layout question above.\n. One more note: it's a good idea to include the bug # in the commit message and PR so it's easy to link back to the bug report.\n. I noticed that if I changed the login for accounts.google.com to accounts.google.com2, then go back, the login disappears from the list. What's happening here?\nI think we should really reevaluate whether we want to allow users to edit the domains, though, since it seems like more of a footgun.\n. There's one issue I found when testing this, which is that if you try to select text while the find-in-page bar is already visible and focused, the selected text menu won't have Find in Page as an option. I think this is because the web view isn't the first responder, so it doesn't get asked which items to show.\nMaybe we could set the web view to the first responder right on touch down? Not sure what the best solution is yet...let me know if you have any ideas. Will probably push the fix off to a follow-up bug.\n. Merged f31a5ba\n. I'm seeing strange behavior when I try this PR locally in the simulator/iPod touch. When I click Touch ID & Passcode, clicking any of the 4 rows just highlights the row without doing anything. All I can do is toggle the Use Touch ID switch, which doesn't seem to do anything.\nI assume this is because the simulator/iPod touch doesn't support Touch ID. I think we'll want to add some kind of support detection so we can hide this setting on unsupported devices.\n. OK, I see -- I should have read more first :)\n. Do you anticipate that other settings VCs (i.e., SearchSettingsTableViewController and ClearPrivateDataTableViewController) will also subclass SettingsTableViewController eventually? If not, what determines whether a setting VC will or will not subclass SettingsTableViewController?\n. Merged da61c69.\n. Not needed; see https://bugzilla.mozilla.org/show_bug.cgi?id=1248069#c2.\n. > We actually already have this in the UITests bundle. I wonder if it make sense to duplicate it?\nThanks, didn't know that was there. I'll see if we can include the list in both targets.\n\nAlso, what about Bryan's Alexa Top Sites patch?\n\nThose just use 5 hardcoded sites (see bug 1233034), so I don't think there's much overlap here.\n. First commit isn't directly related, but I'm pretty sure we don't want KIF in the Copy Frameworks phase for Client.\n. :+1: \n. Note that the SearchOverlays/wikipedia.xml overlay (which includes an updated Wikipedia icon) and the SearchOverlays/zh-CN/list.txt override (which changes the list of zh-CN engines) should probably be pushed upstream to the Android repos since these don't seem iOS-specific.  I'll make sure the appropriate bugs are filed.\n. > Is this sufficient? I'm particularly thinking of Java's need to translate Hebrew (iw :arrow_right: he), Indonesian (in :arrow_right: id), and Yiddish (ji :arrow_right: yi).\nGood observation; filed bug 1253045.\n. Merged with comments addressed and some basic tests: ca841af\n. And also thank you for the quick turnaround for addressing the comments!\n. Yup, this is exactly the issue we hit in Focus. For the fix there, I ended up using heightForRowAtIndexPath to manually go through each view in the cell and add up their heights -- and I went as far as using boundingRectWithSize to get the rect of wrapping text for that calculation. Not fun.\nIIRC, the main reason I didn't just switch to using AutoLayout to redefine the cell was because we wanted to keep the built-in \"readable content\" margins that center the cell contents on tablets. Is that something we have to worry about here, or are we OK because settings isn't a full-screen view controller?\n. Also, I noticed the section under \"Sign In to Firefox\" is cut off. Can we apply the same fix there?\n. Nice catch -- I emptied my sites from testing deleting so much and forgot to try on a full set of sites ;)\n. Though that presents another question: what do we show?\nIf our cache is larger than the number of thumbnails that fit, we can use the next site in the list to fill the gap (though there's no guarantee it will be the same site after the actual requery). Best case, it matches. Otherwise, it doesn't, and the top sites change on us after we click Done.\nWorse: what happens if the cache isn't larger than the number of thumbnails? We'll end up with gaps where the deleted sites are, and they won't be filled until we click Done.\n. This is some gnarly stuff, but here goes (going out of order for ease of explanation):\nPart 2: First, we move the refresh to happen after the deletion. This gives us a consistent data set to work with during the deletion while making sure we also keep our buffer up-to-date if we delete more. To prevent multiple quick deletions from conflicting with each other, we hold the userInteractionEnabled from start to finish. When we delete a site, we pull the replacement from last visible index in our data source.\nBut there's a problem: since we pull in the latest sites after each deletion, and since the sites/order can change for any Sync updates or location changes, we have no guarantees about which site we're getting back from the last visible index. It's possible that some new sites have shown up in the meantime, pushing down the existing visible sites, so the \"new\" site we're pulling in is actually a site we're already showing. That's where Part 1 comes in: we now update, rather than replace, the existing data source -- preserving the order in the process. That means any new sites will always be appended to the existing set of sites.\nFinally, Part 3 is a simple extension to this userInteractionEnabled lock by ignoring any refreshes if the lock is set. We update after each deletion, so a refresh is right around the corner anyway.\n. Thanks for testing. Yeah, I came across similar issues last night.\nTwo more parts:\nPart 4: Since we were merging suggested sites each time the sites were updated, deleting a site could still cause jank (a reflow) if a new site came in while the panel was open. The reason is that our suggested sites merge logic puts suggested sites at the end, so a new site would jump ahead of any suggested site tiles at the end. This commit makes sure that updates move new sites to be after suggested tiles after deletion. In the case of deletions, I think we want new sites to come after suggested sites, since the alternative is reflow jank. But if we're doing a full sites refresh (e.g., after Sync), I think a reflow is expected, so we should handle that separately (see below).\nPart 5: After adding Part 4, I noticed that new sites would always appear after suggested sites unless I opened Top Sites a second time (open the panel, Cancel, open the panel again). The reason is that we do two queries to the DB when we open the panel: the first pass gets the stale set of sites, and the second pass gets the updated set of sites. But since we hold onto the position of the suggested sites after the first pass, the setHistorySites merging will then put any new sites at the end for the second pass. The fix here is to invalidate our sites list whenever our cache is updated, meaning setHistorySites should do a replace, not a merge. Consequently, this also handles the case where we want to reflow after syncs as mentioned above (since a Sync will cause the cache to be updated).\nSo, long story short: we should never show suggested sites before normal sites if we're simply loading the panel (unless your top history sites actually include a suggested site domain, of course). Deletions may cause suggested sites to appear before normal sites because we want the animation to be smooth, and new sites may have been added to the DB since the panel was open. But that will fix itself the next time we open Top Sites. Depending what we decide for bug 1257592, that could also have an effect here.\nAlso, it was possible to hit duplicates because the performBatchUpdates could happen in parallel with the reloadTopSitesWithLimit since performBatchUpdates is async. Fixed this in Part 2 by returning a Deferred, filled when performBatchUpdates hits its completion handler.\n. Speaking of testing, I'll throw in a few UI tests that can verify some of the things here (order of incoming sites after deletions, maintaining the positioning of suggested sites, etc.).\n. @sleroux Yeah, I see the flicker when deleting here. This happens because we now call reloadData() after the deletion, which invalidates and recreates all of the thumbnails. I think the simple thing to do is simply not call reloadData() after updating the data source with deletions (we'll still fetch the latest sites from the DB, we just won't invalidate the view). With this PR series, we take careful steps to make sure the data source and the thumbnails are always in sync during deletions, so there's no need to reload set of sites. Made this change in Part 6.\n@rnewman Related: what's happening is we often fetch (and call reloadData()) twice each time we refresh Top Sites (which we do every time we open the panel). This will happen any time we're browsing and a new domain is added to history since that will invalidate the Top Sites cache -- and we don't update the cache until we're actually showing the panel.\nSeparate bug, but obvious options are:\n1. Don't do a double load. If the cache is invalidated, wait until we have the updated cache before calling reloadData(). This means the Top Sites panel might be blank for a short period before we show anything, but that still might be better than flicker.\n2. Building on option 1, we could auto-update the cache as domains are added to history so that we don't need to rebuild the cache while the panel is visible. We'd have to be careful how we do this -- we don't want a sync to trigger hundreds of top site requeries!\n. Merged with tests and comments addressed: f39f2d8\n. Hi @tiagomartinho, do you mind filing a bug and linking the bug number to this PR? See this section in the README for more information. Thanks!\n. Looks good. Thanks!\nMerged 6d5d83b5faa59e80d02f7986607e4a1cfa82d590.\n. Oops, I noticed this too and forgot to fix it before posting the PR. The issue is just that I'm using a placeholder <a href=\"#\"> in the links, so clicking them adds a # to the URL, creating a new history entry. Simple fix is to just...not do that!\n. @sleroux Updated with review comments addressed. I folded another change into this, which just using a guard early in the handler method rather than having the entire function be in an if statement.\n. Merged b3a3cc9.\n. Nit: change commit message to bug 1258727\n. > Don't think we'd block on this bug for this work but something we should consider for technical debt. @thebnich, is there anything I'm missing with this?\nYeah, those TwoLine* classes are pretty ugly. A lot of that work was done before we really knew how AutoLayout and tables interacted (and it is still pretty fuzzy to me). Would be nice to clean all of that up!\nThe good news is that the messy code in that file is very self-contained, so it doesn't actually bother me too much right now as long as it's working...\n. Wish we didn't need the hasBorderView boolean in TwoLineCellHelper, but if we need different margins for bordered/unbordered favicons, I guess it's OK.\n. Nice abstractions. Much easier to follow! :+1: \n. I went with the following:\nMain settings button: settings.clearprivatedata.title\nTitle for the CPD screen: settings.clearprivatedata.subsection.title\nButton to clear data: settings.clearprivatedata.clearbutton.label\nLet me know if you have any suggestions for tweaking these -- it'd be good to reach a consensus on formatting/naming conventions before we hit 4.0. As part of bug 1261431, I'll make sure any new strings with keys follow consistent naming before we do the export.\n. Thanks -- updated.\n. @sleroux Yup, updated.\n. Sorry for the late review -- suddenly had a lot come up at once, and I'm still catching up! Just dumping my thoughts here:\nOn Android, each activity has an onCreateOptionsMenu method that takes a Menu object and populates it with items specific to that activity. Translating that to iOS, this design would have BrowserViewController, TabTrayController, and HomePanelViewController each implement a MenuProvider protocol such that each of these VCs directly updates the menu state to match the VC state.\nWith your approach, VCs instead build objects containing the minimum necessary state needed for the menu to make its decisions, and MenuConfiguration does all of the heavy lifting translating this state into UI. There's more coupling with this implementation since each VC that wants to participate in menu handling needs to provide a (somewhat arbitrary) VC-specific state object. The Android approach might be a bit more open-source-friendly since (IIUC) apps wanting to use the menu code in this PR with multiple VCs will need to reimplement a similar state system. On the other hand, it's nice that the menu code is all in one place, and you're able to reuse shared actions such as New Tab and Settings.\nSo, comparisons aside, LGTM! It'll be interesting to see how this pans out over time compared to the menu we're using on Android.\n. Confused about the last commit here. Why would we want to remove authentication for setting the interval? That would allow someone borrowing a phone to secretly change it from \"Immediately\" to \"1 hour\", for example, and if they borrow the phone again later, the owner would be unknowingly giving access to their unlocked logins.\n. Hi @chenzhikang,\nAs you mentioned, this project is for Firefox on iOS, so we won't be much help for desktop-specific questions. If you have an issue, you can file a desktop bug here. Or, if you just have a question, you can try asking the #fx-team channel on Mozilla's IRC network (irc.mozilla.org).\n. Haven't done a full look-over yet, but from what I've seen, it looks like you decided to drop the idea self-contained actions in favor of an action delegate where each VC is responsible for handling the actions given to it. \ud83d\udc4d for this -- I had a few lingering questions about how actions would work in different contexts (e.g., \"new tab\" from the tab tray requires tab-tray-specific animations; \"new tab\" from the context menu would have to open tabs in the background; \"new tab\" from window.open would require the WKConfiguration of the parent window; etc!).\n. Looks good. Thanks!\n. Looks good!\nBefore merging, please add Bug 1258695 - to the beginning of the commit message/PR. This makes it easier to trace back to the bug in the future when using git log or git blame.\n. Picked this up in #1832.\n. I'm confused about the fix/commit message. In both lines here, we're currently passing a closure that strongly captures self, so when these callbacks execute, self is already guaranteed to exist. By adding [unowned self], the task service/sync manager won't own a reference to self, allowing AppDelegate to be disposed if there are no other strong references to it. That seems like the opposite of what the commit message here is saying?\nNote that using [unowned self] can actually cause a crash if the closure is ever executed after self is released since it force-unwraps self.\n. A couple more questions:\n1. I don't see how the first commit with the [unowned self] relates to the fix you described above. Is this commit still needed? If so, why?\n2. > We sometimes fail to connect to the DB when we query bookmarks when we move to the background from multitasking\nWhy? Are we closing the DB somewhere we shouldn't be? Seems strange that going to the background would break DB access, so just want to make sure we aren't papering over some bigger underlying issue.\n. A lot of this is still fuzzy to me. Are you saying [unowned self] doesn't actually fix the crash, but it improves the stack trace somehow? I don't know what could be going on there -- is it possible that adding [unowned self] just introduced a new crash?\n. Hm...not sure what you're referring to. If I look at the Commits tab for this PR in GitHub, the first commit I see is 2182e2f4cbe727e11ff0f771266ea55b98b1c4c7. Looking at the Files Changed tab, I still see this and this change.\nWere you looking at git log? Perhaps the commit got buried under more recent commits after a merge.\nI guess that explains some of the confusion here!\n. Hi @aelawson -- thanks for the changes!\nThese changes look good for the most part, but note that you're working off of a very old HEAD (the parent commit to your changes is f5ab6aa7ca0ebdb417a80f4459a206b0de4ef641, from April 2015). Please rebase your changes onto the latest master and force push to update this PR. Also, please squash all of these commits into one; they're all related to a single follow-up, so no need to split them.\nAfter that, I think this should be good to go!\n. Looks good. Thanks!\nMerged 05946639b1eb2326a3f94e2a2edf31f085eb6d7c\n. One benefit of the stricter load rules is that we no longer need \"live\" tests to check this since localhost pages and remote pages now behave identically.\n. Merged 78df359.\n. master: e7adf6823cd2f3bd7be4497c8c6c31dc517865cf\nv4.x: 809f745\n. Sample ping from my iPod touch:\nURL:\nhttps://incoming.telemetry.mozilla.org/submit/telemetry/FFAA7855-02CA-4E51-AE1A-A65DA75FCB54/core/Fennec/5.0.0/developer/1\nBody:\n{\n  \"arch\": \"arm\",\n  \"locale\": \"en\",\n  \"device\": \"Apple-iPod5,1\",\n  \"clientId\": \"E33FA481-33DF-4A30-9DBB-858E8BD2C5CC\",\n  \"osversion\": \"9.2.0\",\n  \"os\": \"iOS\",\n  \"profileDate\": 16892,\n  \"v\": 3,\n  \"defaultSearch\": \"Yahoo\",\n  \"seq\": 3\n}\n. Since the ping involves network and (possibly) disk I/O, it seemed like a good idea to help reduce startup contention.\n. From my testing, I noticed that the ping is sent almost immediately (before any UI), even on the background thread. Because most startups will involve session restore, I think we're more likely to overlap with pageloads and other events without the delay since those will happen right away.\nThat said, this was just speculative caution since we have no data on startup times. Hopefully we'll eventually report that with, well, telemetry!\n. Merged. Also updated the script to ignore :hidden engines and did a fresh import.\nmaster: f9e8311087ac7c9895d6ca76b3c80017e8bebbde\nv4.x: 1467228206094b4d7a0fd7a7b0e9d40eda1019c5\n. No, since the new IDs would mean localizers would have to go through and update the strings for each language. At some point in the future, we hope to go through and batch update all of these places that use the obsolete string format.\n. Looks pretty good overall, but one thing I noticed is that we don't really have a clear model for recent tabs. The entire structure lives in prefs, meaning BVC, HistoryPanel, and RecentTabsPanel are all individually querying the profile prefs to get the recent tabs state, which isn't very maintainable.\nInstead of using prefs at all, one approach you may want to consider is creating a RecentTabs store attached to the profile. You could make the store implement NSCoding so that the tabs can be serialized to disk. That would allow you to do things like profile.recentTabs.add(tab), so the entire model/persistence layer would be abstracted away from all of these VCs.\n. > Ignoring.\n\nNone of this is yet landed on master.\n\nNot sure what you mean by this -- the Settings.HomePage.X and HomePage.Set.X strings have landed on master since they're showing up in the diff here. Do you mean that we haven't done a string export on master?\nEdit: Nevermind, I see this is a PR to a separate branch. Carry on :)\n. If possible, please squash/rebase these commits so that each commit contributes a specific, well-defined piece of the overall PR. For example, perhaps one commit to do the search engine form parsing, one commit for the add engine UI, another commit for settings, another commit for tests, etc. It helps reviewers if they can see each part added incrementally.\nIf that's too much work, just go ahead and squash them all together into a single commit!\n. Lots of code here, so I'll continue this review tomorrow. Feel free to make any of the suggested changes in the meantime!\nI didn't want to fill up the comments here with too many style nits, but for the sake of readability and consistency with the rest of the codebase, I suggest looking over the raywenderlich style guide (which we use for Firefox on iOS, linked to from our README).\nFor the most part, the overall approach looks good! I have some thoughts about moving some of the code out of BVC, and some other restructuring thoughts in general, but I'll go into more detail tomorrow :)\n. Thanks for addressing the previous comments so quickly. Code is looking great!\n. No biggie -- I'd say your code was solid enough that it didn't take much effort. But thanks, these do look beautiful now \ud83d\udc4d  Should help a bit for the final look-through tomorrow :)\n. @farhanpatel, not sure if you're ready for re-review or are still working on this -- feel free to reset the review? flag in the bug when you're ready for me to take a look!\n. @farhanpatel Ah, realized you're gone until next week. I think this is just about ready to land -- just needs a few minor changes that I can make now. Namely:\n- Using NSLocalizedString for strings\n- Making engineID optional for custom engines (and comparing the engines themselves when deleting instead of their IDs)\n. Merged 3c8f33c with fixes mentioned above.\nNice job, @farhanpatel! \ud83d\udc4d \n. Hm, I actually didn't know about NSExtensionActivationRules, and I agree that it'd be better to filter these URLs before showing the share option if possible. Looking at the set of rules, though, I don't see any rules that would allow us to filter URLs (or, more generally, any rules at all that support dynamic validation based on the item).\n. @jhugman Interesting, thanks for the pointers. Unfortunately, I haven't been able to find a way to pull the actual attachment data. Since loadItemForTypeIdentifier is async, I'm guessing there's no equivalent form at the activation rules layer.\n. @user640378 Sorry, I missed your comment here! Force pushing is fine -- the comments are no longer relevant anyway if they're fixed :)\n. BTW, I think this really boils down to an iOS bug. It doesn't make sense that url.host for http://[::1] would return ::1, yet inversely constructing an NSURL with ::1 as the host component doesn't add the brackets.\n. I wonder if we might also want to limit the scheme list to simply \"http\" and \"https\". I don't think we support any others, do we?\nEdit: Nevermind; I forget that we open external apps for a number of schemes we don't explicitly support.\n. Looks good to me! Please squash these together into a single commit, then feel free to merge :)\n. Very nice!\n. Would it make sense to just remove if finished { ... } condition wrapping this block? I don't understand why we'd only want to do everything there if the animation finished.\n. > an usual thing to have done in the first place, that maybe there was a specific reason for it\nHeh, our codebase is full of unusual things without good reason ;)\nI'd lean toward removing if condition if possible, testing the code to make sure the fix doesn't break anything. I'm not sure it makes sense set homePanelController to nil if the VC is still attached, and I can imagine some unusual regressions as a result.\nBut to be sure, it'd be good to verify this theory by testing both versions of the PR. If you made the animation duration longer (either by modifying the duration in code or using \u2318 + T), then press home and wait for the animation to finish, I think that callback will be executed with finished set to false. If so, hopefully that will present a bug with one of the two fixes.\n. > Just for stylistic reasons?\nYeah, we tend to prefer ? everywhere unless there's a good reason to explicitly unwrap.\n. I'm surprised data URIs load after this change since we have this check, used here and here. Do data URIs work even if we return false there, or are we still returning true somehow?\n. Oh -- I think that's because we set isPrivileged to true for any user-typed data URIs. I'm guessing this will fail for any data URIs that aren't explicitly loaded (e.g., the page links to a data URI, or there's a data URI image embedded in the page, etc.).\n. This feels really nice! I did a find a bug: If you long press a tab and then release without dragging, that tab will stay expanded/partially transparent.\nOne other (minor) tweak that would be nice might be to remember the view-relative offset of the touch down position, then add that offset to the drag position. That way, if I long press a tab in the corner, the middle of the tab won't snap to my finger when I move.\n. Filed bug 1301787 for the menu arrow issue.\n. Looks good! Thank you for the pull request.\n. Picking this up in #2056.\n. > The topSites will be a UICollectionViewCell with a UICollectionView inside itself.\nThat sounds unusual to me -- we might face some challenges with the sizing/scrolling of the outer cell. Why not flatten the structure so that all views are at the top collection view level? UICollectionView is flexible enough that you can define the layout on a per-cell basis. We actually did this with the original TopSitesPanel, where we had thumbnails at the top with a scrollable list underneath (code here).\n. Hm, on second thought after looking through the screenshots more, nested collection views might make sense to keep the design more modular. I think your design sounds good so far -- we're essentially creating a composable list of widgets.\n. LGTM!\n. Ah, much better if that works \ud83d\udc4d \n. Merged: 6a18631\n. Rebased and merged: 80b8d9a\nThanks for all the reviews and feedback!\n. Yup!\n. Hm, we should already be blocking unprivileged requests, but loading arbitrary URLs from the firefox:// scheme should definitely not be privileged, so I think the real fix for this problem is a bit deeper. \nThis load eventually ends up calling openURLInNewTab in BVC, which is where we wrap the URL in a PrivilegedRequest. It looks like I did this as part of bug 1268871, but I was a bit careless since I didn't thoroughly look at all the ways we can end up routing through that method.\nI think the best way to fix this would to be explicit about exactly when we need a privileged request, denying it in all other cases. I'd probably either 1) change openURLInNewTab to take an NSURLRequest instead of an NSURL, or 2) add an isPrivileged parameter to the existing method.\n. That should be fine for now...I don't expect many apps will be trying to share these schemes.\n. Thanks for the updated PR!\n. Er, I don't understand this commit. You aren't replacing Readability.js anywhere; you're just dropping in a new file. Where is this getting used?\n. > It looks like iOS has more search locales than Fennec does. I'll update list.json to include those.\nHow is that possible? The iOS search locales come directly from Android (list pulled from here). If anything, Android should have more since there are locale codes that may not be supported on iOS.\n. Any reason to define these here instead of simply as an NSLocalizedString? That way, each translator can provide the Amazon-specific URL for their locale, and we wouldn't have to maintain this list ourselves.\n. Ack, good find. There are probably a number of other places in the codebase where we do something similar (like here), which is concerning. These will be a pain to track down since everything still builds with stringified optionals. Maybe we should go through every usage of scheme and other new optionals to see if there are more inside strings...\nJust to double check, we can guarantee that the URL given to getAudienceForURL will always have a scheme, right?\n. Awesomesauce. Good stuff!\n. As mentioned in IRC, there's a test case for this crash here. Simply open that URL and press the home button; you should crash within seconds.\nI've verified that this PR fixes the crash.\n. Thanks for the PR and all the updates. This looks good! \ud83d\udc4d . Hrm OK, I thought we had fixed that. Thanks for the ping!. Closing since we're doing UIWebView content blocking work in Focus. We may reopen these in the future if we decide to port that work to Firefox.\n. Going to attach bug 1306044 here since these are tied together.\nThis imports our Focus block lists and creates an NSURLProtocol that blocks them on UIWebView.\n. Note for testing: if you want to switch between UIWebView and WKWebView in the browser, the best way to do that for now is to change the line here to either UIShimWKFactory or WKShimWKFactory, respectively.\n. Closing since we're doing UIWebView content blocking work in Focus. We may reopen these in the future if we decide to port that work to Firefox.\n. @mauryat we recently added Danger, and there are currently some issues with PRs from forks. Sorry -- hopefully we'll have that resolved soon! It won't affect anything when the PR is landed, so I'll try to get this PR reviewed today.\nI'd love to give you read rights on Buddybuild, but looking through the settings, I'm not sure this is even an option. It is a pain that contributors can't see these errors :( @farhanpatel, any ideas on how we can improve this?\n. Interestingly, Buddybuild just announced today that you can now set up read-only accounts, which is what I was looking for. We'll have to discuss whether this is something we can set up for contributors.\n. Opened #2166 since danger seems to be having issues building branches from forks.\n. Question about this line:\nself.tableView.deleteRowsAtIndexPaths([indexPath], withRowAnimation: UITableViewRowAnimation.Left)\nIf we're removing indexPath at row N, won't indexPath be wrong if sync deleted anything indexPath will then be out of bounds.\n. > I suppose the simple solution to reloading prior to deletion won't work. The only way I can see this working is if we generate a diff or change set from reloading and update the index path accordingly. This was the approach I was initially thinking of doing but tried to avoid it as it involves changes to how we handle data flow from bookmarks.\nFWIW, that's what we ended up doing on TopSitesPanel here. If we can't figure out a better fix, maybe we can at least extract this code to be more generic so we can use it everywhere.\n. > It parses out the actual URL later in cellForRowAtIndexPath\nAh, OK. I was noticing error page URLs in my back/forward list, but that must have been a product of the other issue (error pages pointing to error pages).\nUnfortunately, that issue wasn't entirely resolved. Error pages no longer restore other error pages, but they still restore reader mode URLs and the home page. And since we show error URLs, we see this:\n. \ud83d\udc4d LGTM!. I don't really know the context of these changes, but I guess this makes sense if we're already using 2 elsewhere. Do we need to use 2 instead of 0 because of the difference in times between accepting the touch ID and calling requiresValidation?. > I can't think of a way of importing files directly from a user-script.\nHm, what have you tried? A couple of ideas:\nimportScripts looks like it's available in Safari.\nAlternatively, I believe XHRs work in the web worker scope, so we could make an XHR to the imports hosted on localhost and eval the result (edit: though we'll be limited by SOP, so this probably won't work).\nEdit: idea 3: what if we postMessage the script body to the worker just like you're doing with the document body?\nIf none of the above work for some reason, could we at least have a script that generates ReaderWorker.js from these files so that we can pull in updates easily from the readability repo?. Sorry, I've been missing GitHub notification emails for awhile, but looks like I've fixed it now. Thanks for merging, AaronMT!. > Should these urls have an url param with a runtime-generated GUID to block them being called externally?\nYes, and we do :)\nhttps://github.com/mozilla-mobile/firefox-ios/blob/241395c334241abf3ddbf2ba10d0de642dbaff3a/Client/Application/WebServer.swift#L27. The existing autocomplete code is rather confusing, so it's hard to determine exactly what effects this change will have. Please test extensively with the standard system keyboard.\nSome things to test before landing:\n Type \"g\", see \"google.com\"\n Type \"g\", hit backspace to clear the autocompletion, hit backspace again to delete \"g\", then type \"g\" again to see \"google.com\"\n Type \"g\", hit backspace to clear the autocompletion, type \"o\", see \"google.com\"\n Type \"g\", see \"google.com\", then tap the input field to accept the completion. I'm mixed on this. It's nice to enforce an Account being set on construction, but we break compatibility with anything relying on this constructor. This reminds me of Android's View, where it has only the context/attrs/defStyle params, and you have to use separate setters for anything else you need to pass in.\nAlthough I'm generally against storyboards over code, I think they are occasionally useful for throwing together quick prototypes. Blocking off this constructor prevents IB compatibility altogether. Are we OK with that?\n. Nit: If we're following the conventions at https://github.com/raywenderlich/swift-style-guide#classes-and-structures, we should drop the space before the colon (\"cell: \" and not \"cell : \"). Here and throughout.\n. I think we changed these to be set in the initializer. Rebase?\n. Nit: no semicolons (here and elsewhere). Also, make this private?\n. A bit nicer to use 'for i in 0..panels.count'.\n. Nit: newline\nnewline\nnewline\nnewline\n. What's this data2? Doesn't look like you're using it.\n. Nit: newline\nnewline\nnewline\nnewline\n. Nit: fix missing EOF newline\n. What's going on here? Why would we want to allow setting nil items?\n. Blegh, when will _selectedButtonIndex be -1? Can we force it to always be set to something? This code is quickly growing complex.\n. Missing an override here? Or do you not include override for protocols? (I don't remember and I can't test it now).\n. Can you add a few comments in the block above describe what this is doing (sorting the items based on prefs, I think)? It's not immediately clear what's happening here.\n. Dispatch async to background thread, then dispatch async to the main thread. I've seen this somewhere before! :)\nFile a bug to factor this out into something AsyncTask-ish? We'll probably be using this pattern a lot.\n. This isn't threadsafe is it? The Controllers array and the actual controllers in this array are manipulated on the UI thread. Also worried about self.accountManager below. If we're going to start throwing things onto other threads, we need to be sure those things are built with thread safety in mind.\n. Nit: Put init at the top of the class\n. viewWithTag() is pretty terrible here since we have to use magic numbers to get refs to these views. If we must use nibs, can we set up IBOutlets? Otherwise, just set this up in code and hold the ref?\n. Nit: semicolons!\n. The label in dispatch_queue_create is optional, so change this to \"String?\"?\n. Hardcoding these in AccountManager adds complexity and couples these values to the test. Can we create an internal subclass of AccountManager used only for the test?\n. What's this for? Remove it?\n. Nit: Leave this as is.\n. Why modify logoutCallback to take an account? I don't see you using this anywhere.\n. Semicolons!\n. What's the point of this @objc annotation?\n. Nit: We generally use trailing braces instead of putting them on a new line.\n. Any reason to prefer \"(item, error) -> Void\" over just \"item, error\"?\n. A comment would be useful here -- it's difficult to tell what's going on in this big code blob.\n. For the sake of future-proofing, maybe this should be using account prefs instead of using NSUserDefaults directly. Maybe a TODO item once we have an Account here that we can use?\n. Ack, NSLayoutConstraint is nasty. Any reason you aren't using Snappy for these?\n. Nit: Not sure what these empty \"//\" lines mean -- I'd just remove them.\n. Can you file these as follow-up bugs, marked blockers of this bug, and then put the bug # in the comments?\n. Wow, I hate boilerplate stuff like this. Doing some brief Google searching, it looks like this is the accepted way to detach view controllers. Maybe we can start creating some Swift extensions to factor out redundant code.\n. Why not use Snappy for all of these?\n. Yeah, hence the TODO right above it. :)\nI figure this is best left for bug 1092387 once we've established a localization plan.\n. As mentioned in https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/CustomizingExistingClasses/CustomizingExistingClasses.html, under \"Avoid Category Method Name Clashes\", it's recommended to use a 3-character prefix to avoid namespace collisions for other libs extending the same classes (e.g., see Snappy's snp_ prefix). I'd say moz_ seems like the obvious choice :)\nI'm iffy on whether this should be an extension at all, though. Is this something most UIViewControllers would want to use, or is it more specific? Since this is used only in ActionViewController, would it make sense to keep this function local to that class? Or do you expect to be using this in other places?\n. Nit: I'd use icon: nil instead of icon: \"\".\n. Can we make these classes private? It'd be nice to avoid exposing LoginViewController outside of this file if it's not used anywhere else (especially since we already have a class called LoginViewController in Client, which could get confusing).\n. Nit: drop semicolon\n. Nit: I think you could simplify this to just \"loginCallback: { _ in () }\" if you want to remove the extra line/empty return.\n. Yeah, maybe inside of a struct so it's still not completely global? So you could use it like ExtensionUtils.extractSharedItemFromExtensionContext(...) or something. At least that's what we would do on Android to prevent polluting the global namespace -- I'm not sure what the iOS conventions are.\n. Can we create a Utils/ folder for this instead of putting it at the top level? We'll probably be adding a lot more util-like classes in the future.\n. I'll never understand these generated XML files...any idea why it adds ExtensionUtils 4 times here?\n. Weird, what's this (null) entry?\n. Nit: I don't think there's generally a newline after doc comments\n. Same newline nit\n. // -> ///\n. Shorthand: object[\"title\"] = item.title ?? \"\"\n. Nit: No space before \":\"\n. Nit: Remove this newline\n. Nit: Remove this newline\n. Nit: No space before \":\"\n. Nit: Space before and after \"{\"\n. Nit: Remove newline\n. Nit: Space before \"{\"\n. When is this message shown to the user? If this is an on-demand message that appears when the site requests location data, we should probably change this to something like \"Would you like to share your location data with this site?\"\n. Unrelated change? I'd leave this out to keep the diff small :)\n. Yeah, I'm talking about moving this block in the file. Any reason for it?\n. Looks good then. Thanks for the clarification.\n. Nit: No parens around if condition (here and elsewhere).\n. The callback pattern I've seen so far (here, and in Alamofire) use a single callback with different variables for the result. Should we do the same, instead of having multiple callbacks?\n. Nit: Please remove these MARK comments.\n. Nit: No space before colons.\n. Nit: Please use \"URL\" over \"Url\" throughout.\n. Nit: indentation (I don't know why Xcode insists on breaking this every time we paste it)\n. Nit: indentation again (here and throughout)\n. Nit: no space before colon (here and throughout)\n. Nit: prefer let over var (here and elsewhere)\n. Nit: prefer let over var\n. Nit: semicolons! (here and throughout)\n. As discussed in IRC, we probably don't want the OrCreate version here just for a getter.\nSide note: I can't find any documentation on some of these methods, and Xcode's autocompletion is broken for me for all MR-related code. Sigh.\n. Nit: no parens around condition (here and throughout)\n. So what's the reason a site holds multiple favicons? Is it because it can serve them at different resolutions? We could just save the highest res favicon we need and use that like everywhere to avoid managing a set of favicons per site, especially since our designs have trending away from favicons recently.\nAlso, should Favicon be storing dimensions, or will we need to pull that from the image?\n. Please use /** style comments so this documentation shows up in Xcode for classes (here and throughout).\n. s/throws/throw/\n. I can imagine us passing this into places that expect a GenericCache that try to set a value, and nothing will happen. Maybe add an assertionFailed() as the setter body?\n. Nit: drop the unused assignment\n. needsUpdate is unused.\n. Oh, I guess a failed assertion won't work if we're doing this.\n. Do we really want getForUrl() to return a set of favicons? Getting an array of favicons vs. a single favicon can cause things to get messy, leading to things like this (arbitrarily using the first item in the array).\nI'd probably prefer just storing a single favicon per site as mentioned above, but if we don't do that, can we still make getForUrl() return a single icon that best matches the parameters given to it? For example, the options could include a preferred size.\n. Since we only return after a cache hit, we lose the benefit of an LRU cache for cache misses. Have you considered restructuring things a bit to remove the default cache, and instead having the master cache update the LRU cache with the default item for misses?\n. Nit: I think you can leave the \"_ in\" off the end of these callbacks.\n. ?\n. What's the point of this check? Where/why would we save the default favicon?\n. I'm sad GitHub doesn't show trailing whitespace since \"git show\" shows them as big nasty red blocks. In general, I think it's good style to not commit trailing whitespace. Can you rebase this with --whitespace=fix? It would also be good to enable Xcode's \"Automatically trim trailing whitespace\" with \"Including whitespace-only lines\".\nOn a related note, I saw that 799b2fd8b36501d8997703f9058f10b7324ea238 introduced a lot of whitespace, which I just clean up in ba7055cd1ac40c3eb41da2633076fc1d0070ffdf. I wish there were a good way to enforce this for contributors somehow...\n. Wes and I discussed using https://github.com/raywenderlich/swift-style-guide#constants as a basis for style conventions over IRC. Not sure if you were part of those discussions, but it recommends using CamelCase for constants instead of ALL_CAPS. If you agree with those conventions, we should probably update the README and try to enforce them rigorously to keep our code more uniform.\nAlso, I'd defined this as a \"static\" private let outside of the class so it's not created every time this method is called (and keeps the method body a bit shorter).\n. \"locationTextField\" doesn't seem like a very useful method name. Rename this to \"getSuggestion\"? Then you could reduce \"suggestionForPartialLocation\" down to \"partialLocation\".\n. Why dispatch_async here? A comment would be useful to explain why it's needed.\n. Nit: Please define all variables at the top of the class.\n. Nit: If we're using the aforementioned style guide, we should avoid unnecessary uses of \"self\".\n. Nit: indentation\n. Note that you'll have to rebase this again since some of this BrowserToolbar code has been moved into TabBarViewController. Sorry for all the churn -- things are changing pretty fast :)\n. Nit: I believe the \"_ in\" is unnecessary.\n. Since we update the progress bar only for KVO changes, the progress bar will be out-of-sync if we switch between two tabs while one of them is loading. We could fix this by updating the progress bar with the selected WebView's progress every time the selected tab changes. I'd be fine with pushing this to a follow-up.\n. Please remove all trailing whitespace (here and throughout).\n. Please use \"update\" instead of \"set\" for consistency with other methods here.\n. Nit: We're following the style conventions listed at https://github.com/raywenderlich/swift-style-guide, which means no space before colons (here and throughout). I'll have to update the README so our conventions are more explicit :)\n. All files use the standard MPL format as of bug 1114294, so please use that instead.\n. Shouldn't we be avoiding the OrCreate* versions in getters?\nEdit: Reading where this is used below, I guess not. This is basically a lazy getter, which makes sense.\n. I wouldn't have expected lastVisit to be optional. When will we add history entries that don't have a date? If possible, making this required will likely be helpful for avoiding special cases when sorting, syncing, etc.\n. Unused?\n. I still need to spend a day or two experimenting with MagicalRecord/Core Data, but from what I've been reading [1][2], I'm not convinced this is safe. Every thread has its own NSManagedObjectContext, and you're implicitly using multiple contexts here for the same object.\n[1] http://stackoverflow.com/a/4264793\n[2] http://stackoverflow.com/a/23769540\n. Progresss -> Progress\n. I don't think we want to update the back/forward state every time the load progress amount changes. Perhaps UIWebViewDelegate#webViewDidStartLoad would be a suitable place to handle this.\n. Nit: Please remove newline\n. Please remove newline (we generally do not add extra lines before or after curly braces).\n. Please fix indentation (the \"*\"s should line up vertically).\n. No newline (etc., here and everywhere else below).\n. Please undo this change -- the stars should be aligned :)\n. Please remove all trailing whitespace (git rebase HEAD^ --whitespace=fix).\n. Undo this change\n. All new files need to include the Mozilla license header, so please add that here (copy it from any other Swift file).\n. Nit: Please add spaces after colons and commas (url: NSURL, location: CGRect). Here and throughout.\n. You can drop the comment here -- I don't think this code is ambiguous at all.\n. Nit: Space after \"//\" or \"///\" (here and throughout).\n. Rather than wrapping all of the WebView methods in delegates, we've been simply adding the delegates directly to the WebView in BrowserViewController (example). Please use the same pattern here -- remove this delegate, and have BVC assign the gesture recognizer directly (tab.webView.addGestureRecognizer(...)).\nEdit: To elaborate, I recommend something like this in BVC when a tab is added:\n    let recognizer = UILongPressGestureRecognizer()\n    recognizer.delegate = BrowserLongPressHandler(tab.webView)\n    tab.webView.setGestureRecognizer(recognizer)\nThen you can remove the BrowserLongPressHandlerDelegate protocol, plus all gesture recognizer-related code from Browser.\n. Rename longPressGesture -> longPressGestureRecognizer.\nAlso, same here about being non-optional. It's assigned in init(), so it should never be nil.\n. Remove \"//\", just have an empty line here.\n. Nit: space after \"if\"\n. didLongPress -> SELdidLongPress (we've been prefixing all selectors with SEL).\n. Make this private (along with all other methods below that aren't called outside of this class).\n. Spaces after commas\n. I'd leave this change out of the patch. It might be worth putting in another PR, but it's not related to the issue here.\n. This should be non-optional since it's being assigned in init() (and can never become nil after that). Also, please make this variable private since it's not used externally.\n. Delegates should be declared using \"weak var\" to prevent any accidental ref cycles.\n. I don't really see the value of doing this. Why not just unconditionally call findHrefLinkAtPoint/findImageSrcLinkAtPoint?\n. Why are you calculating these rects? I don't see them actually used anywhere.\n. What's going on here? Why are you disabling other gesture recognizers? If you're simply trying to override the built-in gesture recognizers, have you considered doing this?\n. This looks like an ugly hack. We should definitely look for an alternative approach here.\n. Why only accept \"http\" and \"https\" schemes? This may be useful in the Open In New Tab case for schemes the browser can't handle, but I may still want to copy the URL for other schemes, for example. To keep this patch simpler, just omit this and accept all schemes for now.\n. Shorthand: you can replace these with just \"make.edges.equalTo(headerView)\".\n. Currently, Browser just holds state, and the controller logic, acting on the WebView, is all done by BVC. If possible, it'd be nice to keep this toggling logic separate from Browser and have it in BVC or some ReaderMode class tied to the WebView.\n. Since the WebView (and now Browser) pass themselves along in their delegates, maybe we should just leave these delegates attached all the time? When they're called, we can just bail if webView != selectedTab.webView (or browser != selectedTab).\n. Missing license header.\n. Can we just throw here instead? Hopefully this will get caught by your completionHandler error callback?\n. Would it be possible to:\n1) Return the raw article data in mozReaderize() instead of the template,\n2) Replace your template %READER-KEY%s with elements that have those keys as IDs,\n3) Load the template string using loadHTMLString(),\n4) Then pass in JS with the article, along with a method that uses document.getElementById() to load the article into the template?\n. Nit: indentation\n. I think it's generally a good idea to make delegates weak -- that's what iOS does everywhere. I don't think you have a ref cycle in this case, but it'd be a good change anyway for the sake of future proofing.\n. ...but there is one here as mentioned in IRC. ReaderMode -> Browser -> helpers -> ReaderMode.\n. We keep having a hard time keeping these comments indented properly. You guys should use my Mozilla Xcode Swift template!\n. Can we keep this private since it's not used outside this file?\n. Same here (private).\nOr maybe keep the internal access level and move BrowserLocationView to its own file? Since it's a self-contained view with a delegate and all, maybe it'd be cleaner to keep this separate.\n. This line concerns me a bit. Where did these values come from? What happens on different orientations/devices?\n. Can you change this to didSet? Then you can get rid of both the getter and the second var.\n. Added a cancel method.\n. According to the docs, UIAccessibilityScreenChangedNotification expects a parameter, \"which is either an NSString object that VoiceOver speaks or an accessibility element that VoiceOver moves to\".\nCould passing nil here be causing the strange behavior you're seeing? What happens if you explicitly choose the element?\n. I assume this will break going from landscape -> portrait (or vice-versa). I guess we'll need some orientation change listener?\n. Are we planning on having the reader theme controls be native or shown as an element in the page? Android does the latter -- if we followed, then these could all be defined in the JS instead, and the page would just send a JSON string to Swift whenever the user changes prefs (and Swift wouldn't need to actually parse the string).\n. Yep, see initial PR comment and the comment in code. viewWillAppear is still too early and crashes. viewDidAppear works, but it's delayed -- there's noticeable lag before the text is highlighted and the keyboard appears.\n. Good question -- it shows the dialog, but the selected tab doesn't change (same behavior as Safari). To be consistent with desktop/Android, we should probably switch to the alerting tab. I'll file a follow-up.\n. Should have MPL license header.\n. Yuck. I'd prefer doing this instead:\nlet stylePath = ...\nlet css = ...\nif stylePath == nil || css == nil || ... {\n    return nil\n}\njust to avoid all this nesting, but your call.\n. Can you file a follow-up for removing/fixing all of these invalid resources?\n. The reader button is part of BrowserLocationView, so wouldn't that interfere with it?\n. Since this is going into the global scope, please rename this to LongPressElementType so its purpose is more clear.\n. Rather having an array of enums, I think it would be cleaner to use a dictionary of type [LongPressElementType: NSURL] instead since the collection will have either 0 or 1 of a given type. Please remove the NSURL part of these cases and rename them to Image and Link.\nSo, in summary:\nenum LongPressElementType {\n    case Image\n    case Link\n}\n. For consistency with the ReaderMode helper, let's remove the Browser prefix and just call this LongPressGestureDelegate.\n. For consistency, please rename browser -> longPressRecognizer, and pass a LongPressGestureRecognizer instead of a Browser. Also, with the dictionary changes above, the elements type should change to a [LongPressElementType: NSURL] dictionary.\nSo, in summary:\nfunc longPressRecognizer(longPressRecognizer: LongPressGestureRecognizer, \n    didLongPressElements elements: [LongPressElementType: NSURL])\n. Nit: only one space after private.\n. Since this is a private one-line function that isn't used anywhere else, you can just inline this into the SELdidLongPress callback above.\n. Nit: only one space after elementsDict.\n. With the dictionary changes mentioned above, this will become var elements = LongPressElementType: NSURL, and your append calls below will turn into elements[LongPressElementType.Link] = linkURL.\n. I still strongly dislike doing this, and I'm not even sure you need it. Testing this PR locally, I removed this dispatch and called disableGestures.map({ $0.enabled = true }) immediately after calling the delegate above. It still seems to work fine -- so can we remove this delayed dispatch altogether?\n. Nit: remove extra space after self.\n. Please pass nil as the title instead of an empty string. Also, go ahead and pass nil for message too -- we don't need to show the browser name in this dialog.\n. Not needed -- you can remove this line.\n. Please change this to \"(dialogTitleURL!.absoluteString!)\" so we show the actual URL of the element being tapped.\nEdit: I see that @wesj said not to do this originally. I just tested Safari and Chrome, though, and they do show the full URL, even for very long items. I think it's OK if we do the same for now. We can improve this later if UX doesn't like it, but I think it's fine to simply match the behavior of other browsers in the meantime.\n. Note that disabling all gesture recognizers unconditionally will break the default gesture recognizer for other long press actions, namely text selection. Thankfully, the fix for this should be simple: just move this chunk of code (along with the disableGestures.map(...) that follows) into the if condition below. That way, if there are context menu elements, we show the context menu; otherwise, we still allow the default text selection handler to kick in.\n. With the dictionary changes mentioned earlier, this function will become a bit nicer. Instead of iterating over the array with the switch statement, you'll need to only do if let linkURL = elements[LongPressElementType.Link] {...} for each.\n. I know this code is temporary, but it seems quite fragile since it will break with other gesture recognizers attached to the webview (including the context menu PR). As a more robust temporary fix, can we attach this recognizer permanently, then just bail in SELshowReaderModeStyle if the readerMode state is not Active?\n. Remove this\n. Nit: spaces around operators / and -\n. It's nice that you're able to use a rows array to reuse logic in certain places, but it's not so nice that you have a bunch of magic indices everywhere. Would you object to something like this?\nlet fontTypeRow = UIView()\nlet fontSizeRow = UIView()\nlet themeRow = UIView()\nlet sliderRow = UIView()\nlet rows = [fontTypeRow, fontSizeRow, themeRow, sliderRow]\nThen instead of for idx in 0...3, you would have for row in rows. And instead of things like inRow: rows[0], you could do inRow: fontTypeRow. So things are more named this way, but you still have the benefits of your row array.\nEdit: although I guess you can't really use for row in rows if you want to do things like self.rows[idx-1] that you have below.\n. What is this \"Print\" theme?\nAlso, we have \"Auto\" on Android, which switches between light and dark depending on the ambient light. I wonder if that's possible on iOS.\n. Rather than doing this at runtime, is there any reason we can't choose a fixed port to run our webserver on, then add localhost: directly to the stylesheets?\n. Can't we use startWithPort like we do here?\n. I can't think of another way. The gesture recognizer works in UIView coordinates, and we need to give page coordinates to the JS.\n. Heh, nope...just made that convention up. We can change it to anything else if there's a more common convention, but I do think it's useful to mark them so it's clear how they're used.\n. Arbitrary timeouts kind of suck. Looking at the issue mentioned above, it looks like a \"loaded\" event was added, so can this be removed now?\n. This will break suggestions that aren't URLs. I think you'll want to add this line above the existing line, then do the following searchURLForQuery only if url is still nil.\nAlso, please use suggestion instead of searchSuggestions[indexPath.row].\n. Remove this from this PR (along with tabs_private.png)? Not related, and not used anywhere.\n. This should be a separate extension like the other delegates on BVC.\n. Nit: put this with the other vars at the top, and make it private\n. Remove comment\n. Remove comment. Hopefully iOS is better than Android in that it doesn't try to draw views that are behind!\n. Not sure why you created these, but I'd remove them. TabTrayController already holds a tabManager.\n. Please make this a getter so that external classes can't modify it. Bad things would happen if they do.\n. opts -> options, vc -> viewController. iOS convention is to use full names for things.\n. Yuck, we especially don't want to be doing this. Using GeckoApp as a huge sink and referencing it everywhere is what got us into trouble on Android.\nBut we shouldn't need to, right? We can just use the tabManager directly?\n. Same here.\n. Can you create a title property in browser that forwards the webView title like we do with URL? I've been trying to avoid exposing webView wherever possible. It would be nice if we had a way to make webView exposed only to BVC instead of manually enforcing this...\n. Thanks to optionals, no need for this if/else:\nbackground.image = self.tab?.screenshot()\ntitle.text = self.tab?.title\n. Looks like TransitionOptions/Transition/TransitionManager are generic, and not specific to TabTrayController. Can you move them to a separate Transitions.swift file?\n. Couple of thoughts on this class:\n- Do we need it at all? We already get a nice transitionContext from the UIViewControllerAnimatedTransitioning protocol. Can't we just forward this context along?\n- Having a String-keyed dict for this seems like overkill, and we get less compiler checks making mistakes easier. If you don't want to get rid of this class, can you just explicitly add the option fields as part of this class (i.e., the same way the original transitionContext is defined)? Currently, it looks like that would just be a single container: UIView?.\nEdit: Bleh, I see you also have a \"cell\" that is a CustomCell, which won't work since this is a generic class. I'll have to think about this.\nEdit 2: So is there any reason we can't just create the CustomCell be a property of TabBarController, and define that cell in viewDidLoad? Then we can get rid of this overly generic TransitionOptions class.\n. Nit: push this up to the top with the other init\n. completion: nil instead of an empty callback with a mysterious question mark\n. private\n. You'll need an initViews here too.\nEdit: Maybe not, if super calls the frame version.\n. private\n. Er, what's this for? If we have a problem with initViews being called multiple times, we should fix that problem instead of papering around it with a boolean.\n. It'd be nice if we could be more consistent about Url vs. URL. It seems like in most places, we use the latter, and so does iOS. So maybe change this to URLBar?\n. The function taking a string to do layout like this is kind of awkward. Suggestion:\n- Remove the position argument\n- Return the effect\n- Set the constraints on the effect in viewDidLoad\n. You can replace all four of these lines with make.edges.equalTo(effect) (plus the obligatory return since it's a one-liner).\n. Please move this comment into the if block with the other line, since it applies to that line. Also, please remove braces around if condition. So:\nif url == nil {\n    // Assume that only the default search engine can provide search suggestions.\n    url = searchEngines?.defaultEngine.searchURLForQuery(suggestion)\n}\n. Yeah, we should get in the habit of doing it right. PR updated.\n. Sorry, the refactoring PR probably bitrotted some of this. To stay consistent with the delegate pattern we're using everywhere now, could you rename these?\nfunc transitionableWillShow(transitionable: Transitionable, options: TransitionOptions)\nfunc transitionableWillHide(transitionable: Transitionable, options: TransitionOptions)\nfunc transitionableWillComplete(transitionable: Transitionable, options: TransitionOptions)\n. Nit: map -> This\n. Maybe we could start doing something like this for all functions defined in content scripts?\nDon't have to do this here, just thinking about ways to make this better.\n. How much did you have to change from desktop to get this working here? I'd hate to end up with a bunch of different forks of mostly-the-same code that we need to keep in sync. I think @st3fan was working on a way to pull reader code from moz-central -- perhaps we can do the same here.\nEdit: Not a blocker though. I was talking to MattN, and he said they'd be willing to change (or accept a patch that changes) the password module to be more platform-friendly. We'll also probably want to stub some things, like Services and Components, to make pulling in modules easier for the future. Just something to think about as we continue to import more from Gecko.\n. Unused\n. Nit: I hope the next version of Xcode fixes these paste issues. Note that several of your new files here don't have these stars lined up.\n. To keep this a little simpler and to avoid duplicating tab selection handling, please change this to getTab(forWebView: WKWebView) -> Browser, then call selectTab(tab: Browser?) on the result.\n. Nit: : Bool unnecessary.\n. This isn't great since webViews are stacked, meaning going into reader mode actually shows the tab behind the current one. Sounds like you're planning on changing this, so this is fine for now, but please file a follow-up so this doesn't get forgotten.\n. Can't you just pass nil instead of making an empty callback?\n. This condition seems broken. What if the user clicks something in the reading list that isn't actually readable? For exmaple, pages that are readable on Android but not mobile, pages that require sign-in, clicking a reading list entry while the user is behind a captive portal, etc. Then reader mode won't be enabled, and we'd end up auto-entering reader mode the next time the user does encounter a readable page, which is broken.\nOne fix would be to remove && state == ReaderModeState.Available so that activateImmediately will be set to false unconditionally. Note that enableReaderMode() already checks the reader mode state, so checking ReaderModeState.Available here is redundant. Maybe we should rename the method to enableReaderModeIfAvailable()?\n. Are you planning on including additional events here? If not, having an enum for a single value seems odd.\n. Suggestion: shorten this to return self.readingListItemsCursor?.count ?? 0.\n. Can't for a couple of reasons:\n1. Our Target Membership is a bit broken right now. Because of PanelTests, HomePanelViewController is in the ClientTests target, but BVC is not. Adding BVC to ClientTests means we'd need to add a slew of other classes to ClientTests.\n2. The mockups show that the button bar height is a little smaller than the URL bar height.\n. Do any of our panels even show headers? I'd remove this until we use it.\n. Unnecessary override...0 is the default value already.\n. Same here.\n. Fix indentation. I really recommend using this (extract it to ~/Library/Developers/Xcode) to make this annoyance go away.\n. No need for the as UIView! here -- you're checking the optional below anyway.\n. Unnecessary? There are no headers.\n. I think this is unnecessary.\n. Nit: /** so that the docs show up in Xcode.\n. NSURL(string: site.url)! -> url\n. No need for this as UIView! cast.\n. Result is already a UITableViewCell, no need to cast.\n. Remove redundant cast\n. No cast\n. We don't show headers, do we need either of these overrides?\n. Eh, this doesn't really make sense since SearchViewController isn't a HomePanel. In fact, HomePanelController is completely decoupled from SearchViewController: SearchViewController is created and owned by BVC (and it's in Frontend/Browser, not Frontend/Home).\nOptions I can think of:\n1. Rename HomePanelTableViewController to SiteTableViewController (or something similar) so that it's not specific to home panels.\n2. Don't have SearchViewController extend HomePanelTableViewController.\n3. Couple SearchViewController to home (although it still technically wouldn't be a panel).\nI think I'd prefer them in that order, but your call. I wouldn't block on this, but please file a follow-up to clean this up if you don't want to do it here.\n. Nit: Don't (or just remove the comment since it doesn't really add much).\n. Please remove this change. It's OK for no tab to be selected, and we still want to go through the code below that that fires the delegate when this happens, so we don't want to return early here.\n. Nit: Please drop the extra line between these lines.\n. Nit: Please remove the extra spaces inside the parentheses (here and below).\n. Unused var\n. Yeah, I agree that selectAll should probably be reserved for the context menu...that sender argument was throwing me off. But where do you see that it's not supported in Swift?\n. Looks like you forgot to use offset here :(\n. Traditionally, at least from what I've seen so far, delegates are associated with a view. If we made a URLPickerDelegate, who would own it? I would expect it to be associated with a URLPicker. Having protocols floating around in the ether, then arbitrarily associating them with classes because the classes match that behavior doesn't really seem like good design. We have the concept of a HomePanel, so it's paired with a HomePanelDelegate. We have a SearchViewController, so we pair it with a SearchViewControllerDelegate. Isn't that how we've defined all of our delegates so far?\n. Oops, this was supposed to be in a later patch where SiteTableViewController is changed to extend UIViewController instead of UITableViewController (which is fine since UIViewController has no delegate that would be shadowed). So yeah, shouldn't make this change here since shadowing the UITableViewController's delegate could be an issue.\n. Defining it outside the class makes it \"static\" since it's only defined once for all instances of the class. Isn't that how we've been defining all of our \"static\" vars? [1][2][3], etc. I think you implemented that third one -- what's different in that case?\nDon't feel strongly about it though, though, so I'll revert this. I assume we'll be changing these all to proper statics anyway when Swift supports them.\n. I guess we can, even though there's no conflict here.\n. Nit: Indentation (if you're interested, I made a template that you can extract to ~/Library/Developer/Xcode which includes the Moz header in all new Swift files).\n. > All of these table views we have are ways to show lists of urls or sites. I guess I don't see them as attached to views, but if you wanted to view it that way, they're all attached to SiteTableViewControllers. We did that intentionally because they all support shared display types and shared functionality.\nBut we can't just replace HomePanel with a SiteTableViewControllerDelegate. That unnecessarily restricts panels to be a certain kind of view. Specifically, this abstraction will break once we introduce a top sites panel since that won't be a SiteTableViewController.\n\nThese ViewControllers shouldn't care where they're displayed, if its on Home or in some other place. They're not really HomePanels. HomePanels are (IMO) just a convenience for generating these ViewControllers and maintaining a list of which ones to show on about:home.\n\nSo what are they? SiteTableViewControllerDelegate is too specific for the reasons mentioned above. We could create another layer of abstraction, a SiteViewController protocol and a SiteViewControllerDelegate, then have SiteTableViewController implement SiteViewController, then have the panels and SearchViewController all use SiteViewControllerDelegate. Would that work for you? I'm just not sure what that buys us -- we could always create this abstraction layer later if we actually need it (which I bet we won't).\nTo see the problem I'm trying to solve now, take a look at this line in BVC. Is that for handling the history or bookmarks panel? Nope, those are handled by the HomePanelViewControllerDelegate. The only thing it does handle is the SearchViewController. And that's not even a home panel! The abstraction is clearly broken as is.\n. Why is id optional? When will a bookmark node not have an id?\n. Why is title not optional? Semantically, an empty string means it has a title, but that title is an empty string. nil means it has no title. Shouldn't we prefer the latter if titles aren't required? Or, if bookmarks must have a title, this should be implicitly unwrapped with no default value.\n. Remove\n. Optional chaining is your friend! This whole block can simply be args.append(item.icon?.id).\n. Again, chaining simplifies this.\n. Defaulting to an empty string seems like a bad idea here. Am I correct in assuming that all nodes will have a GUID? If so, make this implicitly unwrapped so we don't mask errors in our code. If not, make it optional.\n. Since this is now a global var, it should be named HomePanelContainerHeight to make its purpose clear and prevent namespace collisions.\n. Remove this -- it doesn't change anything.\n. Nits: seperator -> separator\n. Don't think this should be localized\u2026just looks like a non-user-facing error message to me.\n. Didn't we kill off leaf?\n. What's going on here? What \"index\" are we getting, and at what \"position\"? Comments would help a lot.\n. cell2? Surely there's a more appropriate name here\u2026\n. TopSitesDelegate is unused (and empty).\n. Unnecessary return\n. Why is this in TwoLineCell.swift? TopSitesRow is specific to top sites and not used anywhere else, so shouldn't it be a private class in TopSitesPanel.swift?\n. Why is this in TwoLineCell.swift? It's not related to TwoLineCell. Put this in its own file?\n. thumbSecHeight? What does that mean?\n. Remember, super.init() already calls init(frame: CGRect). You're doing a double initialization here.\n. Careful. super.init() already calls init(frame: CGRect).\n. That said, why wouldn't we just use TwoLineCell here? Because UITableViewCell doesn't subclass UICollectionViewCell? Urgh. Seems like we should just create a generic TwoLineCellContents that we can put inside empty cells of either type.\n. This locks us into 1.8, meaning carthage update won't bump the version unless we do it manually, right? None of our other dependencies do this -- any reason we want to do that for XCGLogger specifically?\n. Isn't that what Cartfile.resolved is for? When you run carthage checkout, the versions are still pinned to Cartfile.resolved and won't change until you run carthage update.\n. > If the rawValue: gets an invalid value, the app will crash. Better to not show anything then instead I think.\nIs it? Either way, there's a bug in the app that we need to fix. If it crashes right away, we immediately notice and get a stack trace of the exact failure location. If we paper over it, we might not notice as soon, and when we do it will take longer to track down. Same thing with implicitly unwrapped optionals that must be set in classes: we could make them all optional and check for cases where we forgot to assign them, but it's easier to be sure things are working when we just assume they're set.\nI like to use assertions liberally for the same reason. As useful as testing is, it's nearly impossible to get code coverage for every nook and cranny. Having these built-in checks helps to prevent broken edge cases from slipping by unnoticed.\n. There's a tradeoff here between developer time and user experience. Compare crashes to things like history results intermittently not appearing, or favicons occasionally showing the wrong image. It can take a lot of effort to find reliable STR, and then a lot more effort tracking down the cause in the code.\nAlso consider how often we hit NPEs (or any other exception) while we're developing (a lot!). Now imagine finding and tracking down each of those instances with no stack trace, but instead glitchy app behavior. Now all of those NPEs become our friend.\n\nSwift gives us tools that force us to write code that is correct. If you use those features then there cannot be a case of \"where we forgot to assign them\" - simply because that is not possible.\n\nNot crashing != correct. And I don't know what you mean in your second sentence -- of course we can still forget to assign things, whether we check them or not. And if something requires something be set to function properly as a precondition, I might as well enforce it, no?\nFor this case in particular, consider what could cause this to break. We have an enum with two specific int values, and we're converting back to that enum from ints from that enum. This isn't some obscure code hidden deep in some callback chain. We have a very clear understanding of what's going on here, so I'm comfortable strongly asserting that this should never happen.\nTo be clear, I'm not advocating force-unwrapping optionals everywhere. They should be used judiciously. What are the chances this particular case will be wrong? Very low, and if it is wrong, it's almost certainly because of a newly introduced change as a developer -- and I would want to catch it immediately.\n. Note that as of PR #191, we already weed out the default engine when building this list, so it looks like you can remove that bit when you rebase this.\n. Nit: space after String:\n. Change allllllllll of these to let since they're constants.\n. Extract this to a constant somewhere?\n. Nit: no need to explicitly type NSNumber? here or below.\n. Nit: newline after\n. Is there a difference between this and just webView.URL?\n. Nit: Space before {\nIt took me a few seconds to figure out what was going on here, so I'd add a couple comments describing what these are doing (reusing existing history entries to avoid cluttering the backstack with reader URLs).\nAlso, why backList.count > 1 here and not backList.count > 0? If there's only one item in my back list and it happens to be the about:reader version of this page, shouldn't we still reuse it?\n. Not sure what the point of this if statement is, but you can remove it and it will have no effect (we'll just end up in the else block below, which does the same thing).\n. Similar notes as above (some comments would be helpful, and I'm curious why this is backList.count > 1 and not 0).\nSince you have the same kinds of checks in both places, it might also be helpful to extract this into a helper method:\nfunc goToImmediateHistoryEntry(url: NSURL) -> Bool { ... }\n. Heh, I just did this same thing for thumbnails. We actually have HashExtensions to make this easier, so this entire function can be reduced to\nreturn url.absoluteString?.sha1.hexEncodedString\n. Prefer .stringByAppendingPathComponent() instead of hardcoding the / yourself.\n. Prefer .stringByAppendingPathComponent() instead of hardcoding the / yourself.\n. This <invalid> bit is kind of funky. Can you extract this query string handling to an outer if let check so that we don't have to use this hack?\n. So we're using localhost as an HTTP URL, which I think should be generally safe in terms of XHRs since we don't host any other content at localhost. Of course, once we add other handlers for serving local data, this could become dangerous again.\nDoing a bit of research on the topic, I found the Content-Security-Policy HTTP header that could be quite useful here. If we can attach the proper header to the data response, I think that should eliminate any XSS security threats. I'll mention this in bug 1143180 too.\n. Nit: put this below init? so the initializers and encode() functions are grouped together.\n. Hm, I'm surprised this is valid. We have two encode() functions with the same name and argument list returning different things? How does the compiler determine which version should be called? Maybe worth renaming to encodeToString and encodeToDictionary just to make things more explicit. This block is kind of confusing since it looks like you'll end up with an infinite recursive loop!\n. It looks like you're adding selectedTab checks for navigation below, so we should move these to tab creation rather than registering/unregistering them when the tab changes.\n. If you want, you could remove a level of nesting on these checks by combining these:\nif tabManager.selectedTab?.webView == webView\n. It looks like you're adding selectedTab checks for navigation below, so we should move these to tab creation rather than registering/unregistering them when the tab changes.\n. Hm, do we even want this check here? Observers might be interested in LocationChange events even if that event happens on a non-selected tab. In fact, the only LocationChange observer we have right now is the one that adds the history entry to the DB. We wouldn't want to exclude background tabs from history, right?\n. If you want, you could remove a level of nesting on these checks by combining these:\nif tabManager.selectedTab?.webView == webView\n. Why use a full-blown Browser for this, and not just a WKWebView?\n. How do these get called? It doesn't look like you attach the navigation delegate to the webView anywhere.\n. Also, I'm not sure this is safe to do. According to the Cocoa thread safety summary: \n\nThe NSView class is generally not thread-safe. You should create, destroy, resize, move, and perform other operations on NSView objects only from the main thread of an application.\n\nI realize NSView != UIView, but the threading considerations section here sounds pretty similar.\n. This all feels really hacky for what we're trying to do. Can we not set up a callback for the ReadabilityOperation, then have Swift load the reader page instead of HTML polling? It'd be cleaner IMO, but also faster (since any time between the load and the next timeout is currently wasted).\n. Nit: indentation is kinda funky here (the line above is on the same level as this brace, and the closing brace below is also misaligned)\n. Hm...well, with this commit, I think it's technically possible to hit if we close the tab before the navigation finishes, then the page loads and fires the navigation delegate. That's because this commit attaches the navigation delegate when the tab is added, but never removes the delegate when the tab is removed. I can fix this by setting the tab delegates to nil when the tab is removed, and then it should be safe to use ! here.\n. Heh, yeah, I changed it here because \"aspect ratio\" is supposed to be width:height, and we had it backwards. I'll add a comment just to be extra clear.\n. Yeah, it is confusing. The aspect ratio here refers to the image; the aspect ratio on TopSitesPanel refers to the actual cell. We need to explicitly specify the former so that we take thumbnails that are the correct size, and I think we need to explicitly specify the latter so the collection view size can be calculated. You implemented the collection view sizing stuff, so happy to hear suggestions for improving this :)\n. Yeah, but url is a string, and thumbnails.set() needs an NSURL. The reason url is a string and not an NSURL is because I didn't want to hold a reference to the URL object (or else the \"URL changed\" check would never fail since the URL would always be equal to itself).\nOr maybe the actual NSURL instance changes when the webView changes, and it would be safe to compare the NSURLs to each other after all? I can investigate.\n. It's setting the aspect ratio. So this line isn't setting the width, but rather setting a constraint to keep the width and height to the correct proportions.\n. When you wish upon a star\nMakes a difference where they are\nIf you find they are aligned\nYour dreams come true\n. (repeat verse)\n. The docs for imageFromDiskCacheForKey say:\n\nQuery the disk cache synchronously after checking the memory cache.\n\nSo it sounds like we should use just imageFromDiskCacheForKey without checking both ourselves.\n. Can you explain how this works? How does sd_setImageWithURL know to use the cache from SDWebThumbnails? And the docs say it downloads the image at the URL, so what happens when you give these custom thumbnail:// URLs and they aren't in the cache?\nIt'd be nice if there were some way to incorporate this into the Thumbnails API rather than going around it. I noticed we don't even use get in the Thumbnails protocol with these changes, which seems odd.\n. Also, this commit breaks the placeholder thumbnail image (test case: thebnich.com, which stays blank since it redirects). It worked before because we have a custom image setter on ThumbnailCell, so I guess we'll need to figure out something else here. I noticed sd_setImageWithURL accepts a placeholderImage, so that might be useful. But the image setter also used a different alignment and contentMode for the placeholder image...I'm not sure how we'll handle that now.\n. What exactly is sourceView for? Why set it to browserToolbar, and not, for example, button?\n. I wouldn't say it's unrelated (although I did split it into a separate commit) -- it fixes the tab to show \"about:home\" instead of an empty title in the tab tray. Both desktop and Android show the URL if the title is empty (test page). But yeah, displayTitle is probably a good idea so we don't mix them up.\n. I can make it optional, but I'm not sure I get your point. If it's optional and we do forget to set it, the tabs tray and top sites thumbnails will be broken (no thumbnails at all!), so we might as well just crash so we can get a stacktrace and fix it, right? Is there any valid reason this would ever be nil?\n. Nope, that doesn't make any sense actually. Thanks.\n. A couple of reasons:\n1. The behavior for nil is to use the aspect ratio of the webView. This \"default\" changes depending on the screen size and layout.\n2. You can't specify defaults in protocols.\nI could make the protocol include two different methods, one where aspectRatio is missing and another where it's non-optional if you guys think that's cleaner. Another option would be making 0 be the \"default\" value since 0 isn't a valid aspect ratio.\n. Definitely, but that's a different bug! This bug is just about adding about:home support for screenshots.\n. Hm, this feels a bit hacky, but maybe this is the right way to do this. Nit: nil instead of \"\"?\n. Darnit\n. Shucks\n. Hm, not sure I like doing this here. I'd prefer each test having the minimal page necessary instead of trying to create on single shared file that tries to do too much. I guess this is fine for now, though -- let's just be careful to prevent this from growing out of control.\n. Nit: not marked selected\n. Should we clear the profile or bookmarks DB before running this test? It'd be nice to prevent past failures from breaking future runs if they leave the DB in an unclean state.\n. This is unnecessary, I think -- the accessibility label defaults to the text in the textview.\n. I think this is wrong for a couple of reasons:\n1. I think people who need accessibility queues will want the same information as people without them. That is, the cell text is the tab title, so wouldn't it make sense to read them the title instead of something else? Page titles are much more \"reader friendly\" than URLs.\n2. But why do we need this change in the first place? We should have tests verify cells based on what the user sees (the tab title) rather than some invisible underlying data.\n. Looks like dt2 is unused, so you can just drop these 3 lines.\n. Maybe use XCGLogger instead, or just drop this line, so we don't pollute the Xcode logger (I noticed it's starting to fill up more, and it's getting harder to find things).\n. I was going to say it might be a good idea to continue using SHA1 hashing here in case there's a long URL (or even a data URI), but since SDImageCache uses NSCache under the covers, maybe this is automatically done for us.\nAnother question: any reason to prepend \"thumbnail://\" like you do here? The cache is already in the thumbnails namespace, so the site URLs themselves seem like reasonable keys.\nThird question: are these \"thumbnail://\" keys even valid URLs? I see you do NSURL(string: key)! above. Doesn't that mean we end up with something like thumbnail://http://www.mozilla.org?\n. The cache key is an internal detail, so it would be nice to not have to expose it to the calling code. Would it make sense to change moz_getImageFromCache to take the site URL and do they key lookup internally, instead of having to make a separate method call for the key here?\nIf not, then a follow-up question I have is whether moz_getImageFromCache should really take a URL at all. Calling SDWebThumbnails.getKey(), then assuming that key will be a URL when we do NSURL(string: key)! is more detail than we should be exposing here -- especially since moz_getImageFromCache() just unwraps the URL anyway with absoluteString!\n. Is this line necessary?\n. Since stop stopReloadButton is a UIButton, I think this line is unnecessary.\n. Note that stopReloadButton is actually a combined button for stopping and reloading, so just \"Reload\" isn't sufficient. Can you move this label down to the loading property, where we set an image when it changes state? Then you can make the label \"stop\" when it's a stop button, and \"reload\" when it's a reload button.\n. Is this line necessary? I thought clear was the default background color.\n. I'd like us to transition this file to use autolayout instead of frames if possible, but I suppose setting the frame is fine for now.\nA couple comments about this line:\n1. Can you add constants to TabTrayControllerUX called CloseButtonMargin and CloseButtonSize, then use those here? I think it would look like this:\ncloseTab.frame = CGRect(x: backgroundHolder.frame.width - TabTrayControllerUX.CloseButtonSize - TabTrayControllerUX.CloseButtonMargin,\n       y: TabTrayControllerUX.CloseButtonMargin,\n       width: TabTrayControllerUX.CloseButtonSize,\n       height: TabTrayControllerUX.CloseButtonSize)\nA bit more verbose, I know, but it's good to have these values extracted into constants. That helps to make sure the margins are equal, for example.\n2. Can you increase the button size and margins -- maybe 15 and 10, respectively, so the button is centered and a bit larger? @darrinhenein and @tecgirl may be able to provide exact values (in addition to an alternate close image).\nAlso, we'll probably want the button to have edge insets set so the tap area is bigger than the visible \"x\" (since the button is fairly small).\n. Nit: Please rename this to SELdidPressClose. We prefix selectors with SEL so it's clear they're selectors.\n. UX may want to add an animation here, but we can probably handle this polish in a follow-up bug :)\n. Why change this from let to var?\n. Heh, this is definitely a tangent. It'd be helpful if you could split up these commits a little more in the future -- it's harder to read PRs that have a number of unrelated changes.\n. Missing license header.\nAlso, is this really a widget? ToolbarTextField implies that it's a view for the toolbar, meaning it has a very specific purpose. You could rename this to something more generic, but the 5 margins used here are kind of arbitrary for a generic widget. I'd just keep this private to the toolbar unless we actually use this somewhere else.\n. Something looks out of place here.\n. Missing license header.\n. Missing license header. You might want to consider making an Xcode template -- it always puts the Moz header at the top of new Swift files (aligned correctly!) so you don't have to worry about this anymore. I can share mine if you want.\nAlso, like below, I'm not sure how this classifies as a widget. This is a very specific piece of code, with a very specific curve, and we only have one real use for it -- the toolbar. Why not just keep it private?\n. Nit: remove\n. Nit: remove\n. Unfortunately, the condition isn't this straightforward. As the comment above says, \"The home controller may change sizes if we tap the URL bar while on about:home.\". That is, if we're on about:home, we show the bottom toolbar since we treat it like any other web page. But once we tap the URL bar, we're in \"home mode\", so the toolbar should disappear.\nThat was the reason the #inline: Bool argument was added to showHomePanelController. The location alone isn't enough information for us to make that decision.\n. It might make more sense to include this protocol at the URLBarView class definition in this case. All of the button getters are define there, so there's some disconnect between those and the methods down here (and I overlooked this extension on the first pass).\n. Why are you duplicating all of these in each initializer? Can't you initialize all of them at the top level? That is:\nlet shareButton = UIButton()\nlet bookmarkButton = UIButton()\n...\nAlso, can you define all of these buttons with let instead of var?\n. Err...I assume there should be something here?\n. Nit: showingToolbar? toolbarIsShown?\nshowToolbar is an action, and sounds like a function.\n. Ugh, this if animated is becoming really hard to read with these changes. One thing I noticed is that this block is identical to the completion block directly above it. It's also very similar to lines 357-362. Instead of duplicating all of this in 3 places, can you extract this to a helper method that takes a boolean and sets these accordingly?\n. Thanks for the feedback. Yeah, I have a TODO comment about reusing the last suggestion if it still fits here (assuming that's what you're talking about). It probably wouldn't be much extra work to add that now, so I can do that.\n. I think I agree. Maybe we should have a global Styles struct, perhaps segmented into different sub-structs, and keep them all together there.\n. Oh, you're probably talking about the cursor for SearchViewController. The URL bar is completely decoupled from SVC right now, so that won't be straightforward, but I agree we try to share it. I'll see if I can figure something out.\n. SVC can't deal with URLBarView directly since it doesn't even know anything about the URL bar (and it shouldn't), so we'd need to get the domain from the SVC protocol, then forward it through BVC to URLBarView. It might be a little funky having the SVC interface returning these domains that it doesn't even use, but that's probably OK for now.\nSide note: It's good we kept the SVC delegate separate from the HomePanel protocol, since we'll now be extending it with other functionality!\n. I'm not really worried about us breaking encapsulation in this case; I'd mostly just prefer it stay in URLBarView for organization reasons. It seems nicer to have one fewer class in the global namespace, and one fewer file in Widgets/. It just adds clutter if we put things in Widgets/ that, well...aren't widgets :)\nTo flip your \"really gains us anything\" statement around, the curve is already committed in the repo as a private class in URLBarView. Do we gain anything by introducing a change to pull it out?\n. I'm not sure that simply reading the text would give us enough information. In particular, shouldChangeCharactersInRange gives us the range, so we easily know 1) which characters are being changed/added/removed, and 2) where those changes are (which we use to set the autocomplete highlight). We might be able to hack our own implementation of this using string diffs to compare the previous/current strings, but I'm not sure it'd be worth it.\n. I'm not sure I understand how you're calculating the x value. Why divide TabTrayControllerUX.CloseButtonSize by 2? And why subtract TabTrayControllerUX.Margin? The end result might look OK right now, but we should make sure the math makes sense instead of arbitrarily putting values together.\nI think the following is more intuitive:\nbackgroundHolder.frame.width - TabTrayControllerUX.CloseButtonSize - TabTrayControllerUX.CloseButtonMargin\n. It doesn't look like tag gets set anywhere, so this won't work. It will always be 0.\n. I'll add a simple test to make sure the app's UA matches the pattern we expect from bug 1147658.\n. Nit: we generally try to avoid using parentheses when not necessary, so I'd remove both sets of them in this case.\n. Unwanted whitespace change\n. Can this not be simplified to return userDefaults.stringArrayForKey(qualifyKey(defaultName)) as? [String]?\n. Are we sure we want to do this substitution at this low of a level? Seems like this might hide bugs. Are there any non-exceptional situations where the cast to String will fail?\nEdit: Heh, looks like you guys are already discussing this.\n. You used as! in most other places, but fall back to default values here. Why? Are you sure that this won't just paper over bugs and make them harder to find?\n. Note that assertions are only enabled in developer builds. Hopefully this isn't a bug that will make release!\n. > but this class should have a subscript\nShould it? As mentioned in the comments, ordering is not guaranteed since we can reuse holes in the array. I'm not sure how useful direct indexing would be. Also, the implementation would be a bit complicated since the index mappings would change as items are deallocated.\n\nThis should probably be \"append\" though to be consistent with arrays.\n\nAlso not sure I agree for the same reason -- ordering isn't preserved. \"Append\" generally means \"add to the end\".\n. Looks like Set uses insert, so I'll use that.\n. Same reason the other variables here are: we want to use let, but we can't since we have an init helper.\nWe need a shared instance that can be used by both the URL bar and the SVC, so we need one class-level loader to reuse the query.\n. If there's no query, we show nothing at all: the SearchViewController goes away and we show home panels instead.\n. Yeah, commit c8f2916 changed this. At one point, I think I had the Loader returning nil. But I don't think this commit is necessary anymore, so I'll drop it.\n. I don't think it's that strange -- this is a data source specific to the SearchViewController and URLBarView, so it needs to know those views to interact with them directly. This could have all just gone into BVC, but I figured you'd want them pulled out to reduce clutter as you mentioned before :)\nI think it's important that the reverse dependencies not be coupled, though (that is, SearchViewController and URLBarView shouldn't know anything about their data sources).\n. A couple reasons:\n1. The URLBarView is just a dumb view that displays its state. I wanted to keep the model separate from the view. I really preferred the dataSource/callback-based API I had in the first version of the PR, but that got bastardized thanks to our query sharing optimization.\n2. We can't, thanks to Swift's broken generics. Note how Loader requires us to name the listener type, and how SearchLoader is a subclass of Loader<Cursor, SearchViewController>. We can't simultaneously subclass Loader<Cursor, URLBarView>.\nHonestly, I'm still not too happy with the way this all turned out, but I haven't been able to come up with much better; the need to reuse the query between completely separate views is a pain. I'll gladly look into any suggestions for improvements in a follow-up.\n. Maybe change this to >=, then bump MaxAuthenticationAttempts to 3? Should be the same behavior, but makes it clear that there are 3 tries, not 2.\n. Remove this\n. Remove this too (or make a debug flag so these don't go to the console by default).\n. You can simplify these two statements into one:\nif !(proposed.user?.isEmpty ?? true) {\nPersonally, I'd also move this statement outside of the if let proposed = credential block to remove a level of nesting, and then we'd just skip over the if let proposed = credential block since credential would be nil...but your call. This block is just kind of confusing with all the levels, early return, and the credential = nil bits hanging at the end.\n. What would you propose -- creating a class variable that we set when opening the SVC, then nilling it out when we close it? We could, I guess, but that just adds some extra housekeeping and complexity. SearchLoader doesn't have any significant memory footprint.\n. > So basically you can't declare:\nNope, since LoaderListener has a typealias T, we get \"Protocol 'CursorLoader' can only be used as a generic constraint because it has Self or associated type requirements\".\n\n? I probably wouldn't have made Loader generic. Do you have some other use for it?\n\nYeah, I guess I could have just gone with a CursorLoader here. I figured it'd be nice to have a generic abstraction so we can slowly shift toward an Android-like Loader implementation that works with any kind of data, but it's probably too soon for that.\nSubclassing AutocompleteTextView (CursorAutocompleteTextView?) isn't a bad idea, and it keeps AutocompleteTextViewseparate from the Storage specifics. I (or you, if you want!) can look into fixing all this when I get a chance.\n. Nit: comment inside if statement for parity with the second comment.\n. Remove or suppress\n. Nit: no newline\n. I don't think this is right. You're doing the substitution before handing the string to NSLocalizedString, so what is the actual string that will be exported?\nI could be wrong, but I think you'll need to have a separate NSLocalizedString for the \"(unknown)\" strings. Then you would do NSString(format: NSLocalizedString(...)) instead of the other way around.\n. Nit: IMO, it's generally more readable to put these NSLocalizedStrings in a variable on their own line so these don't expand so much.\n. Actually, we filter for it in the block above: if imageIndexer.element?.text != nil { ... }\nBut yeah, I think the plan is to eventually support arbitrary XML files, so I agree we need to be as careful as possible.\n. Yep, but note the following if statement: if let imageWidth = imageWidth { ... }\n. This is...terrible. Can you just create a separate page (without a title) for this test? Trying to reuse the same page for every test will just turn it into an unmaintainable mess. We should probably strive for something similar to .sjs on Android/desktop, where each server page is the minimum necessary for a particular test.\n. It will be called on the UI thread (all UI-related methods/callbacks must happen on the UI thread). From testing, the reload happens right before the animation starts. Another option would be to move it to the completion block after the animation ends, though the reload is more noticeable and looks jankier.\nI don't think systemLayoutFittingSizeDidChangeForChildContentContainer would be an improvement since viewWillTransitionToSize already works about as well as we could hope.\n. Rather than creating a new callback to handle this, we should just use the existing methods on BrowserToolbar (updateBookmarkStatus and updateReloadStatus). The browser toolbar shouldn't care about the current URL, so by having BrowserViewController own the disable logic and update the toolbar, we maintain the separation of concerns. We'll need to add updateShareStatus to the toolbar since that doesn't exist yet.\n. I think you should be able to use the actual constraints from tabsButton instead of duplicating them here:\nnewTabsButton.snp_makeConstraints { make in\n    make.edges.equalTo(self.tabsButton)\n}\n. Why rename these?\nEdit: Ah, I see. We're using \"status\" to represent enabled/disabled state, so you're renaming these for consistency. To reduce churn, can we keep these methods untouched, then add only single method named updatePageStatus(isWebPage: Bool) that updates reload/share/bookmark all at once. So similar to your first version, but we still want the \"about\" check to be in BVC.\nApologies for missing this the first time!\n. You can remove this since this check was moved to BVC.\n. Nit: use let over var wherever possible.\n. Nit: Let's name this isWebPage (about: and file:/// URLs are still valid URLs).\n. var -> let. Also, please rename to httpSchemes (see below).\n. Rather than listing schemes that are not web pages, how about we include only the schemes that are? In other words, return true if \"http\" or \"https\"; return false otherwise.\n. Both selected and displayURL can be nil in certain cases. selected can be nil if the user closes all tabs; displayURL can be nil if the webview discards its content (which can happen if the OS is running low on memory). So these should be changed from ! to ?.\n. Same here (re: optional URLs). Everything else looks good, though, so I can just make these changes now and merge.\n. Yeah, I was wondering what this was about too (this is just existing code we had moved into this function). I jiggled some code around and removed it.\n. Nope, and apparently it's been discussed before in this issue. I don't think think they have APIs for hugging and compression at all.\n. I wonder why we're using this instead of viewWillTransitionToSize? If we used viewWillTransitionToSize instead, we could even do something like this to \"undo\" the hack:\noverride func viewWillTransitionToSize(size: CGSize, withTransitionCoordinator coordinator: UIViewControllerTransitionCoordinator) {\n        coordinator.animateAlongsideTransition({ animation in\n            if let tab = self.tabManager.selectedTab {\n                // scroll offset by 1\n            }\n        }, completion: { context in\n            if let tab = self.tabManager.selectedTab {\n                // reset scroll offset\n            }\n        })\n    }\n. Nit: align the *s\n. Nit: align the *s\n. Nit: * alignment (or just use // since this isn't a documentation comment anymore).\n. If you want, you could factor out the if let tab = ... and the let contentOffset = ... to outside the coordinator.animateAlongsideTransition so you don't have to duplicate them in each block. (If you did that, I guess you'd also change contentOffset.y - 1 to contentOffset.y since it would still hold the original value).\n. Do you think these should be moved too? I don't know much about this API -- what triggers a \"trait collection\" change?\n. Can you use a Swift lazy var here?\nEdit: I guess not since you're setting it directly in hidden.\n. Nit: Prefer let over var where possible (same with others below).\n. Nit: * alignment\n. Nit: Prefer let over var where possible (while here, snackBars should also be defined as a constant).\n. Doesn't look like this import is necessary since you extracted out the AV-specific code to AuralProgressBar.swift.\n. I wish our tab handling code wasn't so fragile; having to spread out these tracking calls everywhere makes me nervous that we'll regress something later. Maybe it'd be useful to add a programmatic override for UIAccessibilityIsVoiceOverRunning so that we can create some simple KIF tests.\n. What I meant was having some additional flag that could be set programmatically (e.g., via a unit test) that would enable the AuralProgressBar feedback, as if UIAccessibilityIsVoiceOverRunning were enabled. Of course, KIF can't test for audio, so we'd have to do something like fire notifications when the progress/hidden states are updated. Or we could figure out a way for KIF to get a direct reference to the AuralProgressBar so it can verify the properties as they change.\n. Can we just set this once in init instead of overriding it?\n. Why do we want to include promptImage in this list?\n. What's the batch update here for? I know we need to insert a tab in the didAddTab callback, but it's not obvious what else we're doing. Maybe add a comment describing the operations that happen under the covers here?\n. This finished variable confuses me. Why would the completion block be called if we're not finished?\n. We just added this yesterday -- are you sure it's safe to remove? @dusek, can you give a quick summary of why you're calling this here?\n. Also curious about this one...maybe @st3fan has some context?\n. > Didn't mean to remove. Just a bad merge.\nHeh, OK. Same here I guess?\n. Nope, no problems. Looks like that line was removed accidentally, so you can just ignore my comment.\n. Since we use the same view controller for about:home and the \"editing mode\" screen, the problem with changing this condition is that we'll end up showing the bottom toolbar in editing mode if the page is on about:home. In other words, if you're on about:home and tap the URL bar, the bottom toolbar should disappear.\n. IMO, it makes sense here since we already have the related profile.files.removeFilesInDirectory() right above it. I think we'll also need to add some test-specific prefs here, such as bypassing the first run UI. Those prefs can't be in XCTestCase since the app runs parallel to the tests, and the startup is executed before the test has started running.\n. Nit: alignment\n. Nit: alignment\n. Instead of having a single testX method that calls a bunch of helper functions, can each of these helper methods be a separate test? There are some advantages to having a modular breakdown of tests, like being able to trigger them individually in Xcode.\n. driveby ^\n. Nit: indentation\n. Why return? Don't think you want to do this since you're skipping the setNeedsUpdateConstraints() at the end.\n. Might be worth adding another assertion for the placeholder text too.\n. Are you sure? I didn't think didSet was triggered again if you're setting the value inside of didSet.\n. Is this necessary? If numberOfItemsInSection is returning 0 for this case, I wouldn't expect us to be accessing any indices in the data.\n. Nit: indentation still (there's an extra space on the left)\n. What's the GCDWebServerOption_BindToLocalhost change for?\nAlso, if I understand the fix correctly, the GCDWebServerOption_AutomaticallySuspendInBackground change is unnecessary now, right? That is, if we don't save port-specific URLs anymore, it shouldn't matter if our server port changes.\n. Note: @wesj just landed a change where about:home tabs have a nil displayURL, so we'll need to handle this somehow assuming we want to restore about:home tabs.\n. Alternative suggestion that might be a bit more robust: check for all URLs starting with \"http://localhost:\" and replace it with some special token (about:localhost?). Then, when we restore, replace this token with \"http://localhost:\" again, with the new port.\nA couple advantages to this method:\n1. We don't need special flags (isReaderMode, isErrorPage, etc) for different local page types. That means #466 won't need to make any changes after this lands.\n2. We could use the tab's actual URL instead of the display URL. That means special cases, like about:home mentioned above, will \"just work\".\nWhat do you think?\n. It's safe -- note that we only recently added the feature where a new about:home tab would be created when closing the last tab. Before that, closing all tabs would simply put the tab counter to 0 and show nothing in the content view.\nSo selectTab(nil) should \"work\" in that no tab will be visible, and the user will have to open a new tab, or select an existing tab, to actually see anything.\n. Nit: no need for else\n. s/isReaderMode/isSelected/\n. The point of app serialization/deserialization is to freeze/restore the state as close as possible to the state before the app was killed, so if the user had about:home tabs, it's more accurate to restore them than to forget them.\nSince we only restore the active URL on iOS and not the rest of the tab history, it's not as big of a deal for us as it would be on Android or desktop. There is at least one case where not restoring about:home tabs feels jarring, though: when an about:home tab was selected before the app was killed. Since the tab was selected, but we don't save it, that means we'll arbitrarily select a different tab (the first tab) when we restore.\n. > I'm not sure if this is happening actually. I tested this code and selectTab(nil) does open a new about:home tab I think.\nHm, doesn't do that for me (just tried).\n\nI don't think an empty screen is a good first impression.\n\nYeah, me neither.\n. Do you mean having the page send the data back in the message? There's really no way for the page to get the image due to cross-origin restrictions.\n. Nope -- we can get the image element, but the contents are blocked by SOP (same for iframes). Without that restriction, malicious sites would be able embed an <img> or <iframe>, have them load sensitive data due to the user's cookies, then extract the contents which they wouldn't otherwise have access to.\n. Yeah, but it can't go cross-frame. We can inject a script into frame A and frame B, but frame A cannot directly interact with B (assuming they're on separate domains) due to SOP.\n. We should probably move this webView initialization into the if block below. If https://github.com/mozilla/firefox-ios/pull/492#issuecomment-105705557 is any indication, this could be the most expensive part of this method!\n. @st3fan @darrinhenein We had \"Open In New Tab\", which this PR put back. It sounds like @st3fan is talking about another context menu item that also opens the link in a new tab, but doesn't switch to it. Do we want this? (Note that we don't have such an option on Android.)\n. Maybe worth using ! instead of ? in the helpers? Having an optional webView opens up a new set of bugs where things might be \"skipped\" if the webView isn't created yet. We should probably strongly enforce that Browsers have a valid webView for one-off events like this (when helpers are created) -- otherwise, this init does nothing, and the user scripts never get set on the webView, and the browser is gimped.\nEdit: Or, if we don't like doing that, can we at least assert that the webView isn't nil so we can catch these errors in dev builds? (asserts aren't enabled in release builds).\n. This should probably be private to avoid misusing it (see comments below).\n. Careful, you're setting the configuration of the browser, not the webView. As described in the WKWebView docs, the configuration object is used only to initialize the webView object, after which it's \"dead\". If the webView is already created by the time this helper is initialized, this line will have no effect.\nI recommend making configuration private as mentioned above to help us avoid this.\n. I still think we should avoid doing our own zombification, for a few reasons:\n1. The web view already does it for us. Why reinvent the wheel and potentially introduce new bugs for existing functionality?\n2. As I mentioned before, the OS zombifies each web view on an as-needed basis, rather than all at once. If I have 10 tabs open and I get a low memory warning, it's a much better user experience if only one or two of those tabs are closed as opposed to all of them.\n. resurrect is a bit of a misnomer -- you're \"resurrecting\" some tabs that are brand new. Maybe initializeWebView would be a more appropriate name?\n. The top site thumbnail is a completely different aspect ratio than screenshots, so it might actually look worse than empty tab tray thumbnails -- especially when we select the tab and do the \"zoom to page\" animation (where the screenshot is sized to the whole screen). If you think we should keep it, just make sure to try it first...\nFWIW, @st3fan's recent change in #491 saves the screenshot in the session, so we shouldn't be losing screenshots anymore.\n. Unsafe, tab URL can be nil.\n. What do you mean? We aren't storing screenshots anywhere else -- just the smaller, poorer quality thumbnails for the top sites panel (AFAIK).\n. Heh, they're actually <1/10th the size, so that could be a big difference if we store a lot of thumbnails (taking the top 3:2 thumbnail from a 9:16 screen is 3/8, then half the width and height would be (3/8)/4, or 3/32).\n. Yeah, it's basically an implicitly unwrapped weak.\n. Hm, the location looks correct to me when I test in the simulator. Where are you getting (-8, -8) from?\n. Looks OK to me in the iPad simulator, but please file a follow-up if you see any issues!\n. s/didRemoveTab/willDeleteWebView/\n. Nit: I think this is an unnecessary change since setting cell.background.image to nil is the same as not setting it at all.\n. Should this be webView! like the other helper inits?\n. Can these be lets?\n. Do we plan on having multiple SwipeAnimatorUXs? This abstraction seems like overkill...I'd just bake these constants directly into the struct like we do in other places, unless we have a good reason not to.\n. It's also strange that we're passing the SwipeAnimatorUX into the init here. I think we made these UX structs just as a way to collect constants into a single place, with maybe the eventual goal that they'll be going into some shared constants file.\nI guess you're treating SwipeAnimatorUX as a kind of skin?\n. I think this line is redundant since your're using snp_makeConstraints on newTabsButton below, right? I'm fine with keeping it if you think it helps makes things clearer -- just want to be sure I understand how this all works.\n. You could use make.size instead of make.width.height if you want to save a few characters :)\n. Please undo this change. You'll want to enable both \"Automatically trim trailing whitespace\" and \"Including whitespace-only lines\" preferences in Xcode (under Text Editing)\n. You can probably drop this comment (I think the code below is pretty self-descriptive).\n. Nit: We generally don't add parentheses around if conditions.\n. You probably don't need a comment here either (didSelectPanel is pretty self-descriptive).\n. I think lastHomePanel would be a more appropriate name than previousHomePanel. \"Previous\" makes it sounds like we're on a current panel that's different from the one before, whereas \"last\" simply means the one that was last selected.\n. Nit: var -> let\n. What's this 13 for? Is this the little sliver at the top of the mockup with that empty space before the account email? Maybe add a comment here clarifying this value.\n. Nit: space before {\n. Nit: prefer lets when possible\n. Nit: no space before ,\n. Nit: prefer lets when possible\n. Nit: we generally use the } else { style on a single line\n. Hm, a few questions about this method:\n1. Why is titleLabel being created lazily and attached in layoutSubviews(), as opposed to simply being added as a subview in init()?\n2. Why are we removing it here?\n. Nit: *\n. Wrong comment (and *s)\n. Nit: no newline here\n. Remove trailing whitespace here\n. and here\n. and here\n. Nit: trailing whitespace\n. Nit: trailing whitespace\n. Nit: trailing whitespace\n. I'd remove this comment. It would be useful to have a brief description of what HashchangeHelper is, but that should be added as class documentation in HashchangeHelper.swift instead of here, so it's tied to the implementation.\n. Nit: unindent this body by one level (should only be tabbed once after the if). The alignment does look a bit close the lets, so maybe it would help to put the { on a new line here. Example:\nif let tab = tabManager.selectedTab,\n   let webView = tab.webView\n{\n    urlBar.currentURL = tab.displayURL\n    ...\n}\n. Nit: trailing whitespace\n. Nit: trailing whitespace\n. Nit: trailing whitespace\n. As mentioned above, a class-level documentation comment explaining this helper might be useful here. There are two ways to create \"documentation comments\" in Xcode:\n/**\n * Style 1.\n */\nor:\n/// Style 2.\n(By documentation comments, I mean the description that pops up in Xcode when you option-click a variable or class name).\n. Also, you can remove the UIGestureRecognizerDelegate since this helper doesn't do anything with gestures.\n. Alternatively, you could make clonedTabsButton weak if you wanted so we wouldn't have to explicitly be set to nil (it would be cleared after removing it from its superview).\n. While here, might as well remove let tab = since it's not used. Also, looks like we have an extra space before NSURLRequest.\n. This should be navigationToolbar now that you've landed your other PR.\n. Nit: Don't need these first 2 lines\n. Nit: Make sure these *s all line up.\n. Let's add ?? 0 to the end so that we fall back to the first panel as a default.\nAlso, if you look at HomePanelViewController's didSet handler for selectedButtonIndex, you'll find that setting the panel can be a fairly expensive operation. When HomePanelViewController is initialized, we set the panel to 0 (Top Sites), which will trigger DB queries and load the panel contents, but then we immediately change it again here. To avoid this extra work, we should create an initializer on HomePanelViewController that accepts the panel we'll be showing. \n. Note that we show the home panel when we're on about:home, but also when we're on any other page and the user has tapped the URL bar. In the latter case, we don't want to issue a replaceState since we're on a regular web page, and this will just end up with a DOM security exception (due to the the cross origin URL). We should guard this line by first checking whether the tab's URL is currently on about:home already; if not, do nothing.\n. Check out isReaderModeURL as more robust way of checking this. For now, it's probably good enough to create a similar helper method isAboutHomeURL() that's inside of BrowserViewController.\n. Can you add another class-level comment here briefly explaining why we have this?\n. When doing pbxproj merges, make sure not to include these empty newlines between each file.\n. Same here (and others below).\n. Nit: remove this line\n. Remove this comment\n. Since the argument to updateInContentHomePanel() is of type NSURL?, that means it can be nil, so we don't want to unwrap it here or else we'll crash. Instead, make sure url is non-nil before we try to use it.\n. Nit: while here, please add a newline between these func definitions\n. Same here re: nil URLs. To make life easier, you could make isAboutHomeURL accept an NSURL? instead of an NSURL -- then we wouldn't need to unwrap it.\n. Can you try testing with just #panel=X instead of /about/home/#panel=X? I'm curious whether we even need to include the path here.\n. Nit: no trailing semicolon\n. The Swifty way to do this would be configuration?.preferences.javaScriptCanOpenWindowsAutomatically = .... That way, we can get rid of the outer if statement.\nWhile here, I wonder why request and configuration are implicitly unwrapped optionals instead of regular optionals. Maybe change them here so this can be safer?\n. Nit: for tab in tabs, then drop the index.\n. Any reason you're using this self-executing block syntax to set finishEditingButton rather than just doing this sequentially? That is,\nif editing {\n    ...\n    self.buttonContainerView.layoutIfNeeded()\n    finishEditingButton = button\n}\n. We use \"editing mode\" to refer to the state when the user has tapped the URL bar and the home overlay is shown (as opposed to the user simply being on about:home), so calling this editMode could be confusing. Maybe change this to something like editingThumbnails?\n. Nit: it's -> its\n. Nit: entires -> entries\n. No need for elses since you're returning. And without using else here, you'll be able to calculate rowIndex before this if condition so you don't have to calculate it twice.\n. Pulled that URL from an email as mentioned in the bug. I'll flip this to point to Android.\n. It's nice to keep these resources in alphabetical order. Can you right-click on the folder holding these, then choose \"Sort By Type\"?\n. Remove this\n. Remove this\n. Remove this\n. Remove this\n...and all of the remaining changes in this file.\n. Let's add some comments here explaining what's going on:\n// First, replace the session restore page (this page) with the first URL to be restored.\n. // Then push the remaining pages to be restored.\n. // We'll end up at the last page pushed, so set the selected index to the current index in the session history.\n. // Finally, reload the page to trigger the error redirection, which will load the actual URL. For some reason (maybe a WebKit bug?), document.location still points to SessionRestore.html at this point, so wait until the next tick when the location points to the correct index and URL.\n. /**\n * This file is responsible for restoring session history.\n * It uses the DOM history API to push pages onto the back/forward stack. Since that API\n * is bound by same origin restrictions, we're only able to push pages with the current origin\n * (which is a page hosted on localhost). As a workaround, push all to-be-restored URLs as\n * error pages so that they will redirect to the correct URLs when loaded.\n */\n. Nit: line these up so the text starts at the same indentation level\n. // Pull the session out of the history query argument. The session is a JSON-stringified array of all URLs to restore for this tab, plus the last active index.\n. Let's make a SessionData class or struct that holds these rather than including them as separate variables.\n. [String: AnyObject]()\n. ? -> !\n. Then remove !\n. [NSURL]() -> []\n. You can include that SessionData class mentioned above directly as a variable here, too, rather than having two separate currentPage and urls vars.\n. We still need to handle the double-restore case where tabs are restored with their urls, but that tab never loads. To do that, you can see if the tab's SessionData is non-nil here; if so, just use it directly. If it is nil, look through the back/forward list like you do below.\n. And then these two lines will just become tab.sessionData = savedTab.sessionData.\n. So then you'll want to encode (and decode) the SessionData type here instead of separate urls and currentPage keys.\n. Nit: drop following newline for consistency with our other if statements\n. I think Swift now allows you to use let here (since it's guaranteed to be set once the if statement is done).\n. I think we may want to stick with explicitly checking http:// here rather than removing all schemes. If a page uses HTTPS, we want it to be visible in the URL bar so it's extra clear to the user (at least, this is what we do on Firefox Android and desktop).\nAlso, I think it's possible to have a URL with a scheme that doesn't have :// in the string (e.g., about:home).\n. Don't delete this (the signing parts of the project should remain unchanged). Same with remaining lines in this file.\n. Nit: One more space to the left so that the text is aligned :)\n. Nit: We generally add a newline above each comment line to make the code more readable. This divides the code into logical \"chunks\" annotated by the comments.\n. Nit: Split these longer comments into multiple lines (maybe around the 100 column marker). We often use other editors for JS that don't work as well as Xcode for line wrapping.\n. Other nits for this file:\n- All statements should end in a semicolon.\n- We use 2-space indentation for JS.\n. Add a comment describing what this block is doing.\n. Move this variable down to where you first use jsonDict.\n. var -> let\n. var -> let\n. Don't remove this newline\n. Nit: align the *s\n. This check isn't useful since self.sessionData will always be nil upon initialization. What I think you want to do is see if browser.sessionData is nil. If not, use that value instead of creating a new one here.\n. Nit: license should be at the very top of the file (including above DOCTYPE)\n. AppDelegate shouldn't have any layout dependencies, so remove this.\n. Nit: Newline above here. It helps readability to add newlines after returns, and also before if/while/switch blocks (in this case, you have both).\n. Note that this change makes the reader tests fail, so please update them accordingly (I recommend re-running all UI tests whenever changing any accessibility labels since they're so tightly coupled to KIF).\n. Nit: no parens with switch please\n. How about AccessibleAction (note the subtle suggestion of Accessible vs Accessibility)? That is, rather than saying that the action is for accessibility, we're saying the action is compatible with accessibility. Would we ever want to create actions that aren't accessible?\nThe reason we're against simply using Action is that Swift is namespaced per-target, meaning Action becomes globally visible to all classes in that target (which is the majority of the project). Action might mean something else entirely in a different context (especially a non-UI one), so the class name should be as specific as possible to avoid ambiguity. At the very least, I'd change Action -> UIAction if AccessibleAction isn't suitable.\n. Not sure the cancelButton.enabled is necessary here -- I don't see us modifying its enabled state anywhere.\n. Nit: You could drop this case and just left Left be handled in the default.\nEdit: Nevermind, I see default returns false, not sets the variable.\n. We should also make sure to remove these event listeners so that they don't build up every time an element is touched. Easiest way to do that would be to 1) make this a separate named function, then 2) call element.removeEventListener(...) with it. We should probably remove both listeners in touchend (since there's no guarantee touchmove will be called).\n. There's actually no such thing as a \"script link\" -- it's just a regular <a> element with an onclick event attached to it. For example, the demo on my people page uses #foo rather than #, and it works the same. Or the page could choose to attach an onclick listener to a link that doesn't have an anchor at all.\nhttp://foo.com/#, http://foo.com/#bar, etc. are all valid URLs, so we probably shouldn't treat them any differently from normal links. That is, I'd still show the context menu for such elements (as long as the user actually does a long press).\n. Should this also set the scrollView's delegate to nil?\n. Shorthand: return scrollView?.contentOffset ?? CGPointZero\n. Nit: space before {\n. I think we can remove the true here (for using capture) since we're now attaching the listener directly to the element.\n. Not sure when components can be nil here, but since the url is coming from an external app, we should be careful and avoid force unwrapping. Let's guard this with an if let components = ....\n. Same here: guard on a host nil check; don't force unwrap.\n. This arbitrary indexing into the components query is pretty terrible. What's going on here? Why is this index 1 and not 0, like above? At minimum, we should have verbose commenting here explaining the URL formats, but it'd be even better to figure out a more elegant way to handle this.\n. Nit: please removing trailing whitespace here and all other lines\n. Same here (see whitespace tips in the README for fixing/avoiding this).\n. Nit: Since you're force-unwrapping anyway after this line, just use as!. var -> let.\n. Is this chunk something you're testing, or is it just cleanup? Seems like it's just cleanup, in which case you should be able to remove this block (this should all be taken care of for you in BrowserUtils.resetToAboutHome(tester()) in tearDown).\n. Nit: Just use as! everywhere here. It's often a bad idea to force-unwrap with as!, but unit tests are an exception -- a crash simply means a failure, and it doesn't affect the actual product. Also, var -> let.\n. Then you won't need the ?? true bits here.\n. as!, let\n. No need for this line: we already have the selected tab from the selected argument given to this function.\n. This updates urlBar.currentURL. You can remove the redundant line above (line 1173) that does the same thing.\n. I suggest naming the class ToolbarTests so we can add other (i.e., portrait) tests to this class without having a separate PortraitToolbarTests.\n. And then include landscape as part of the actual test method here instead.\n. Try running this test with all of our other UI tests. Does running this test cause all following tests to be stuck in landscape orientation? If so, we should make sure to reset the orientation once the test finishes.\n. I wonder if this call could go inside the if let webView = selected?.webView { block above. Looks like it's checking the same thing, no?\n. I guess there's no guarantee that the test started out in portrait. Rather than explicitly going to portrait, can you store the initial orientation value in a variable and then use that value here?\n. Creating a fake engine key to keep track of this state is a hack; I'd create a separate preference to track it.\n. Nit: Chracters -> Characters\n. Any reason the enum has to be declared as an Int type here with explicit values?\n. Let's keep the bottom and top constraints together to help avoid similar mistakes in the future. I'd suggest grouping them like this:\nif let state = keyboardState where bars.count > 0 {\n    let view = bars[bars.count-1] as! UIView\n    make.top.equalTo(view.snp_top)\n    make.bottom.equalTo(-(state.height + 20))\n} else {\n    make.top.bottom.equalTo(self.toolbar?.snp_top ?? self.view.snp_bottom)\n}\n. Nit: align\n. nit\n. nit\n. This isn't really \"is about URL\", but rather \"is a sessionrestore or home URL\". I'd change this to return true for any about URL (i.e., return getAboutComponent(url) != nil).\n. These two conditions together don't make sense as written: in English, you're saying, \"If this is not an about: URL and is an about:reader URL\". It works only because your isAboutURL implementation is incomplete; I'd recommend fixing that method and then reordering these conditions appropriately.\n. wel -> we\n. nit: newline before if\n. You can drop the where condition since there's nothing special about about:home.\n. Why are you removing these?\n. Not sure if you want me to give this a full review since you said it's a WIP but flagged for review?. I'll just treat it like a regular review in case you want to land.\nRemove this line (obviously :D)\nAlso, should put the MPL at the top.\n. You were probably planning on it already, but make sure to move this and the class below to a WindowCloseHelper.swift.\n. I wonder if changing this to WKUserScriptInjectionTime.AtDocumentEnd would increase the success rate? Maybe we're hitting some race where Persona is able to trigger window.close() before we monkeypatch it. The documentation isn't very helpful explaining exactly when AtDocumentEnd happens.\n. Remove\n. Why do we need to dispatch_async here? I'd add a comment here explaining why (assuming it's actually necessary).\n. Remove\n. Why is this inside of the dispatch_after block? That block is here only as a workaround for the taking a screenshot.\n. Hm, the bug was about the reader mode bar, so I wasn't expecting to see changes to the URL bar/reader icon. Why is this change needed?\n. Note that we already update to the Unavailable state on didStartProvisionalNavigation, so we don't need this else condition do we?\n. Can this go inside the if statement above? I can't think of any situations where we'd directly load a reader page from a reader page, but it can't hurt to have it in the same place we do the other reader mode update.\n. That would surprise me though, since AFAIK window.close() doesn't work in iframes for any browser.\n. But we're always guaranteed to be on the main thread here, right? I think the callbacks for any view are always run on the UI thread.\n. Remove\n. Is that bad? In general, I assume if the user wants to start editing, we should show the editing mode or else they can't type.\n. OK, but it's confusing to me for a couple reasons. For one, text fields already have an editing property that's basically whether they're focused or not, so it's easy to confuse the two. Second, we're still in \"editing mode\" even when we're interacting with the panels, and we're not actually editing anything...\nThat said, no strong preference here, so I can change it back. Or maybe something else is better? ModalMode? HomeMode?\n. The color should be nearly identical (a very light black on the white background == light gray). Seemed pointless to use transparency here -- I'm guessing it used to be used for something else, given the obsolete comment.\n. Maybe I should make it even longer...updateViewsForOverlayModeAndToolbarChanges :) I was trying to clearly name the factors that affect it, so it's more obvious when to call it. Vague method names make the code a lot more confusing.\n. Sure, probably makes more sense.\n. Didn't make these constraints (just moved them from where they were), but that sounds OK to me.\n. Why 5? What's the default?\n. Note that this method doesn't exist in this PR, but I see it's in the other PR. Just make sure not to land this PR by itself.\n. Eh, I don't really like creating a new FaviconFetcher every time we need to get a Favicon. I'd prefer something like init(userAgent: String) so that each fetcher can have its own UA, then create a defaultInstance or sharedInstance singleton. I see this is already in the tree, though, so I won't complain too much.\n. Nit: align *s on left\n. What's this variable for?\n. I'm not sure we need a manager of any kind to handle the keyboard events. Keyboard shortcuts are context-sensitive, so I think it would make more sense for each UIViewController to be responsible for its own set of shortcuts rather than delegating to a global manager (i.e., Command+T might mean something different in another view controller). So to simplify this PR, can we drop the BluetoothKeyboardManager altogether, then simply attach the view-specific keyCommands where they're needed?\n. Yikes, this is gnarly. Let's drop the TabTrayController middleman here (along with the observers) and handle this directly in BrowserViewController.\n. Cool, glad you could find a way to enter that pesky delete character :)\nSince I would have no idea what \\u{0008} means without studying this code, could you extract this into a deleteCharacterFromFirstResponder (or something similar) method? You could even put this in Global.swift if you want, since we might want to use this in other places.\n. I'd type \"h\" again at this point to confirm that entering more characters after some deletions still works.\nWe could also use a check that deletes all of the characters, then makes sure the search controller disappears.\n. Maybe add a comment here that says we need to wait for the text entered callback due to debouncing?\n. Need more details here. What doesn't work?\n. Not sure I see the value of having containerView. Could you just add the logo and label directly to overlayView?\n. Don't change this line\n. Don't change this line\n. New line before ifs\n. So why specify the bounds? I assume you're talking about UIView(frame: tableView.bounds). You shouldn't need to manually set that frame; Auto Layout will handle it for you.\n. The isErrorPageURL shouldn't be necessary. ErrorPageHelper.decodeURL(url) recursively decodes the URL until it's no longer an error page.\n. We shouldn't need an if let here. Reading your fix, it looks like ErrorPageHelper.decodeURL(url) is returning a bogus error URL, which then gets returned via decodedURL? If that's the case, we should fix this bug by fixing the broken method (decodeURL), not here.\n. Can we use notifyTextChanged?() here to stay consistent?\n. MPL\n. Nit: canAutocomplete for consistency with the rest of the file.\n. Can we also set enteredTextLength = count(self.text) here? We should try to keep it in sync whenever the text changes.\n. Could you make the lazy getter for backgroundEffect optional, returning nil if it's not supported? Then we can just use backgroundEffect?.snp_remakeConstraints { ... } here.\n. Same here plz -- if blur isn't supported, don't set blur in the first place (or add it as a subview).\n. Do we need this change? I think it's safe to just use self.text here.\n. Nit: remove extra space after func\n. Nit: If user-entered text does not start with previous suggestion then remove the completion.\nAlso, please put this comment above the previous line.\n. Some adjustments:\n// Setting the autocomplete suggestion during multi-stage input will break the session since the text\n// is not fully entered. If `markedTextRange` is nil, that means the multi-stage input is complete, so\n// it's safe to append the suggestion.\n. Nit: nil{ -> nil {\n. Nit: } else if ... { on same line\n. OK. I see we are doing this enteredText calculation in lots of places. Maybe it would make sense to just store enteredText directly as a class variable, and remove enteredTextLength? If there are places we still need the entered text length, we could just use count(enteredText). And then we don't need to use substringToIndex everywhere.\n. How about we return early here and remove the if else below? Then, at the very bottom of this function outside of all the if statements, you do removeCompletion? That way, if the setting the suggestion fails for any reason, we always clear the existing completion if there is one.\n. Nit: } else {\n. I'd just reduce this to: // Immediately reuse the previous suggestion if it's still valid.\n. I'm not sure we want to remove this line -- this is what triggers the search results below the text field. That is, if I type \"y\", I should see all my history entries below that contain \"y\". After bug 1166781 this line should be safe to keep hopefully?\n. So we have refresh, refreshData, reloadData, and refetchData? That's rather confusing -- could we either rename them to something more descriptive, or add doc comments explaining what each does? Or maybe consolidate them somehow?\n. Remove comment (this won't make sense outside of this diff context).\n. We should always prefer Auto Layout over frames. Why make this change?\n. If possible, we should avoid creating constraints based on the device. Instead, try to create them using lessThanOrEqualTo, priorities, etc. like you did above.\n. Same here. Can we define these without using the model?\n. If possible, it's best to define constraints just once, rather than destroying and recreating all of them every time updateConstraints is called. titleLabel is one example where we don't need to change the constraints since the constraint definition is the same in both places.\nIn general, keep as many constraints constant as possible, moving them out of updateConstraints, so they only need to be set once.\n. Nit: Comments usually go above the line rather than next to it (to avoid wrapping).\n. Nit: Comment above line please.\n. Hm, why do we need to do this? Every test should restore itself to the startup state once it finishes, so this test (and every other test) should already be in the default state at the beginning. If that's not the case, we should fix whatever test is running before this one.\n. Interesting, I didn't know afterEach existed. I guess it's equivalent to tearDown, but just KIF-friendly?\n. Could you elaborate on this? Why will we sometimes be out of the tab tray here?\n. I need more context about this change. What does this fix? Shouldn't tabTray.collectionView.numberOfItemsInSection(0) always be greater than bvc.tabManager.selectedIndex?\n. I don't think we want to support these shortcuts here -- the settings page is not part of the browsing context.\n. I think we can do this with our existing API:\nif urlBar.inOverlayMode {\n    urlBar.leaveOverlayMode()\n}\n. Hopefully we won't need this (see comment).\n. Shouldn't need the if !editing check anymore since DisplayTextField cannot become the first responder. And if you remove that, I think this getter and setter can also be removed, and you can just set the actions directly?\n. Nit: line up *s\n. Oh, OK. Yeah, that's true of all tests -- tests can cause cascading failures since XCTests all use the same single app instance, which sucks.\nThis change probably isn't terribly useful in the long run since there's no guaranteed order of execution for the tests; if ClearPrivateDataTests are followed by anything else, we'll run into the same problem. Rather than a test-specific beforeAll, we might want to do this in a base test class as part of bug 1191476.\nEdit: Oh, I just noticed that you said within ClearPrivateDataTests. In that case, wouldn't you want to use beforeEach? beforeAll only runs once before executing the first test in the class, whereas beforeEach runs before every test in that class.\nThough with that change, that means we'll be calling BrowserUtils.resetToAboutHome twice between each test. IMO, we'd be better off just using tearDown and fixing any errors that cause failures, but your call.\n. Cool, thanks for the explanation!\n. For the selectedTab == nil case, I think we want to return -1 instead of 0. We start with -1 as unselected by default, and using -1 means we'll be outside the tab range so we can return nil.\n. Hm, these priorities are a bit confusing, and I'm not sure how they work. Could you add some comments describing why the priority levels are set the way they are? But as long as this works, I guess it's fine to me.\n. You could reduce this method to a single line if you wanted: return browser?.loading ?? true\n. snp_updateConstraints is used to update the constants of constraints. Shouldn't this be snp_remakeConstraints?\n. Why remove this? Without this line, I don't see how locationTextField knows its vertical position...\n. These constraints should be defined in updateConstraints.\n. Nit: comment is obsolete now\n. Browser? -> Browser\n. self.browser -> browser\n. Nit: line up *s\n. Interesting. Looking at bug 1183257 again, it would have actually fixed this this vulnerability since it adds the same mainFrame and request checks.\nIt looks like that PR checks the mainFrame for \"request\" messages, but allows any frame to store credentials. This seems safe to me since we don't need to worry about sending credentials to the wrong frame. The \"submit\" messages use the frame's URL, which I don't think can be spoofed.\nThat means iframes can submit form data, but not actually be autofilled. I'm not sure how useful that is, but apparently it's at least enough to fix that bug.\n. Does SearchTest -> testURLBarContextMenu still pass with this change? I think the order here was important...if we become first responder after setting the text, it might highlight the whole string instead of the pasted portion.\n. Nit: I think there's a CGPointZero\n. Why a UITableViewCell? Alerts aren't tables, are they?\n. Just do tabManager.selectedTab?.disableDialogue = switchState.on\n. Do we need this clipsToBounds?\n. Nit: dialogue -> dialog everywhere\nnumOfDialogues -> dialogCount\n. Nit: var -> let everywhere\n. Drop this?\n. Can we add a layout offset instead of using \\ns?\n. I noticed FxAContentViewController delegate is not weak. Can we fix that while here?\n. So how does this fix work?\nIf places lazy initialization is sync, why does it matter when we do it?\nIf places lazy initialization is async, doesn't that mean there's still a race?\n. nit: involves -> involved\n. Can the if webView.UIDelegate == nil { ... } bit above be moved to here?\n. Would really be nice if we could use layout for this instead of string whitespace.\n. Found this. Does that mean we could use snp_topLayoutGuideTop?\n. > Oh snap -\npunny\n. It's thrown again at the bottom of the function.\n. That doesn't handle the case where ReadabilityResult(string: string as String) returns nil, though.\nEdit: Oops, misread that as a guard. Yeah, that should work.\n. Would stringByAddingPercentEscapesUsingEncoding(NSUTF8StringEncoding) also work?\n. Ah, OK. So it looks like you're creating the character set by combining all of the different URL components. The only one I don't understand is NSCharacterSet.symbolCharacterSet().invertedSet -- what's that for?\n. Yeah, but what if we omit that first line and use all the others? I imagine all the other URL character sets would also filter out invalid symbols/characters since they must be URL-compatible. Testing this in a playground, this seems to work still:\n```\nlet characterSet = NSMutableCharacterSet()\ncharacterSet.formUnionWithCharacterSet(NSCharacterSet.URLQueryAllowedCharacterSet())\ncharacterSet.formUnionWithCharacterSet(NSCharacterSet.URLUserAllowedCharacterSet())\ncharacterSet.formUnionWithCharacterSet(NSCharacterSet.URLPathAllowedCharacterSet())\ncharacterSet.formUnionWithCharacterSet(NSCharacterSet.URLPasswordAllowedCharacterSet())\ncharacterSet.formUnionWithCharacterSet(NSCharacterSet.URLHostAllowedCharacterSet())\ncharacterSet.formUnionWithCharacterSet(NSCharacterSet.URLFragmentAllowedCharacterSet())\nlet url = \"https://ja.m.wikipedia.org/wiki/\u7279?abc=123&foo=bar\".stringByAddingPercentEncodingWithAllowedCharacters(characterSet)\n```\n. Also, FWIW, we've solved this in the past by just dumping all allowed URL characters into a single string: https://github.com/mozilla/firefox-ios/pull/166/files#diff-108efb951993bfa3f37b030dccb77ab8R21. That PR was eventually backed out, though.\nI really wish there was just a URLAllowedCharacterSet that just included everything :\\ Maybe it'd be worth putting your set into an extension so we don't need to reinvent this everywhere.\n. > The issue is with the \u7279 character. Try passing that url string into NSURL and see if it returns an NSURL object. I think it returns nil because NSURL blows up when trying to parse it.\nHm, that code snippet above works for me (non-nil URL). Do you see something different?\n. request.query should decode the query by default -- you were probably seeing bug 1201094 here. With that fixed, I don't think you'll want this change.\n. Unneeded change? Won't the XCTFail above make this a no-op?\nEdit: Nope, tests keep running after hitting XCTFails.\n. Nit: you could just return the result here directly without creating the extra urlWithoutSchemeString variable\n. We generally just use force unwrapping in tests, so you could do XCTAssertEqual(url!.absoluteDisplayString(), \"https://google.com\") without any of the if/else stuff (and it will throw/fail either way). But I guess this is fine too if you prefer it.\n. Do we want to remove this check? The self.restoreTabs() below could still fail, so it seems like it'd be safer to leave this in.\n. This makes me nervous since the selected tab could change while we're in the background, and then the alpha would never get reset on the original webView.\nHow about we replace .selectedTab?.webView with webViewContainer? Then all web views will be hidden and we don't need to worry about this getting out of sync.\n. Nit: we used to capitalize the first letter of all file-level constants like this. Seeing log above, we might have dropped that convention somewhere along the way, though I'm not sure it was intentional.\n. I think @darrinhenein and @tecgirl were going to look into showing some kind of dialog, but they wanted this minimal UI first. Worth considering now, though, before the string freeze.\nFWIW, I think the iOS 8 clear private data hacks will quickly become obsolete as everyone upgrades to 9. And with iOS 9, we shouldn't ever fail since we're just using the built-in WKWebView APIs. The assert is more of a sanity check that we can catch on dev builds (since asserts are not triggered in release builds).\n. Some drive-by comments: you can just use document.body here.\n. By looping over all forms on the page, it looks like you'll end up re-triggering the query for all forms every time any kind of DOM manipulation happens. Instead, you can use the MutationObserver to filter out form-specific additions, using the new form nodes directly, and ignore other events. For example:\nvar observer = new MutationObserver(function(mutations) {\n  for (var i = 0; i < mutations.addedNodes.length; i++) {\n    var node = mutations.addedNodes[i];\n    if (node.nodeName === \"FORM\") {\n      findLogins(node);\n    }\n  }\n});\n. I wonder if you also want to include subtree: true here? From the docs, it looks like childList might just be direct descendants. Worth testing, though (speaking of which, it might be a good idea to add a simple test case for dynamic form insertions).\n. Nits: 2-space indentation in JS files, and semicolon at end of lines\n. Yeah, I had considered the same...my initial thought was that we should be fine since MutationObserver is async, but perhaps we could throw in a setTimeout to wait for the next tick, if needed.\nAlternatively, we can look for general changes to <form> elements by checking mutations.target. I'd still recommend to avoid calling findLogins multiple times for the same form, though, since it could cause wonky behavior (e.g., I clear the fields after they're autofilled, but then I think they'd get filled again if there's any kind of DOM manipulation).\n. Delete these; unused vars.\n. Nit: UIEdgeInsetsZero\n. I would still strongly prefer to not have this component touching views and layouts outside of what it owns. Ideally, we would avoid touching webView constraints at all, and instead have the webView layout be defined relative to some header view that we could push views onto. With that approach, OpenInHelper could simply return a view that BVC adds into this header container, and this might allow things to be handled more gracefully in the full-browser context (e.g., switching tabs). That might help deal with some of the aforementioned UI glitches.\nI won't block on doing this if you don't want to change it, but curious to hear your thoughts.\n. This isn't the first time we've had to tiptoe around subtle DB initialization bugs. These hidden side effects are too error-prone -- can we not create something more robust?\n\nThe fix for that is to\u2026 not do that. SearchLoader can access profile.history when it needs it, on the correct thread.\n\nHm, what do you mean by \"correct thread\"? Looks like query is still set on the UI thread.\n. OK, sounds good. Now that I think about it, what do we do for ReaderModeBarView? It seems like the exact same kind of UI (a bar view inserted at the top of specific pages)? I guess one difference is that the \"Open in...\" bar scrolls away with the page, though.\n. What happens to this file after we create it? Does it get deleted anywhere? Would it make sense to use /tmp here?\n. This change seems weird...why wouldn't we want togglePrivateMode.selected to always match privateMode?\n. Could move this outside of the if if you wanted.\n. Nit: you can use forEach here instead of map -- then you won't need the empty let assignment.\n. Use log.error(), or even assert here since this shouldn't ever happen?\n. TabManager has a subscript(webView: WKWebView) -> Browser? -- could we reuse that?\n. Maybe reduce this a bit:\n```\nif indexPath.section == 0 && indexPath.row == 0 {\n    return 64\n}\nif #available(iOS 9, *) {\n    if indexPath.section == 2 && indexPath.row == 2 {\n        return 64\n    }\n}\n```\nOn Android, we simplified these kinds of things even more by extracting preprocessed bits into a single constants file, so then we could just do AppConstants.IsIOS9, or something similar, and it could be used as a regular Bool. Not saying we need to do that here, but just something we might want to think about!\n. For consistency, maybe make this a guard !adjustAppToken.isEmpty && !adjustEnvironment.isEmpty else { ... }?\n. I think you could use private(set) on the existing privateMode if you wanted.\n. Nit: remove\n. Wonder if we should throw an assertionFailure in here so we can break and catch this on debug builds? That's assuming this should never happen, which it doesn't seem like it should.\n. Can we factor this out into a constant somewhere since we have it duplicated here, RemoteTabsPanel, and ReadingListPanel?\n. Unintentional commit?\n. Could we keep the modifications private still with private(set)?\n. Yeah, would probably be a good idea to make custom UIButton views for each of these that hold a reference to the engine they use.\n. Nit\n. That would simplify things, though there are a couple obstacles: neither BookmarksFolderTitleMobile nor BookmarkFolder's initializer are public.\n. I think we'll need something a bit more robust here since matching any part of the search domain, even just one letter, will trigger a \"match\". This could cause conflicts if search engine URLs begin with the same letter. Sites could even theoretically exploit this to spoof URLs; e.g., http://d.haithereimanevilwebsite.com/?q=http%3A//www.duckduckgo.com.\nAlso, this unfortunately won't work for any cases where the search URL doesn't match the template URL. A couple examples:\n1. Do a search on Google, then do a second search from the results page. It looks like the initial search will land us at https://www.google.com/?q=foo, but the second search brings us to https://www.google.com/?q=foo#q=foo+bar. Tapping the URL bar for the second search still shows \"foo\" since Google uses a URL fragment rather than an updated query for follow-up searches.\n2. Any search using the Wikipedia engine. The template uses https://en.wikipedia.org/wiki/Special:Search, but this redirects to https://en.m.wikipedia.org/wiki/foo, which doesn't have the same query argument.\n. Hm, having a UIView reach into UIApplication like this feels like a red flag. Do you think it would make sense to turn thumbnailCols into a computed property that can dynamically calculate the number of thumbnails from the view's current width?\n. Going off the comment from above, could we dynamically calculate this value based on the width rather than hardcoding a bunch of values for every possible configuration? Something like width / preferredThumbnailSize, for example?\n. Same question.\n. I think this can be reduced to make.edges.equalTo(self.contentView).inset(ThumbnailCellUX.Insets)\n. Nit: redundant rule\n. You have make.left.right right above this -- don't think you meant to have right twice.\n. Nit: space after get\n. Nit: space before {\n. Hm, still not very excited about this function. Having to assume that the URL will contain the search engine name is quite fragile, and I'm guessing at least one of our many localized search engines won't pass this test. (Yep, just verified: one arbitrary engine that won't work is SearchPlugins/uz/wikipedia-uz.xml, which has a short name of \"Vikipediya (uz)\").\nCould we pull the host out of the template URL and see if it's the same host as the page in question?\n. This seems really fragile -- won't this crash for URLs that don't have = in the query? For example, http://google.com?a&b\nCan you use the iOS APIs (NSURLComponents.queryItems?) to deconstruct these queries instead of doing it manually?\n. Unused variable\n. Can we merge some of these to reduce nesting? if let progress = progress where !hidden && interruptionOption == .ShouldResume, perhaps?\n. So our iOS UA is:\nMozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/WebKitVersion (KHTML, like Gecko) FxiOS/1.0 Mobile/12F69 Safari/WebKitVersion\nFor desktop, let's try this:\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_11_1) AppleWebKit/WebKitVersion (KHTML, like Gecko) Safari/WebKitVersion\nIn other words, replacing the iPhone string with the Macintosh one and removing the FxiOS and Mobile parts of the UA. I'd put this in a static desktopUserAgent function in UserAgent.swift, right alongside our existing defaultUserAgent.\n. I think we want this to also include navigation from the page (clicking links, submitting forms, etc.), so I don't think finishEditingAndSubmit will be a wide enough net for what we need. How about moving this to didCommitNavigation?\n. The UIKit API isn't thread-safe, so there's no guarantee this will always work as expected. We'll probably be OK, but it's worth keeping any eye out for any weird side effects or regressions for top site images.\nJust curious: I noticed you pinned down the blur as one of causes of bad top sites perf -- how much of a difference does this PR make?\n. It does feel a little weird to add it only to strip it out again, but IMO not worth any refactoring changes for defaultUserAgent (I agree that we'd need to change what we cache).\n. We'll need to use a UIPopoverPresentationController here so that we don't crash on tablets. See browserToolbarDidPressShare in this same file for an example.\n. Even if didCommitNavigation works, didFinishNavigation seems more appropriate, I think, since it's called after the main frame load completes. Logically, that's what we would want to wait for before setting the UA for the next page.\n. Actually, we crash before this -- see line linked in bug. The crash happens on the UIImage(data) init.\n. It doesn't feel right to have to create an NSUserDefaults instance here. Passing the NSUserDefaults instance to UserAgent actually seems like overkill to me; we could have UserAgent create and hold its own NSUserDefaults that we don't need to pass into these methods.\nWould you mind moving this into UserAgent, then removing the suiteName parameter from all the methods currently accepting it?\n. Please remove this string and the string below from UIConstants. We have placeholder strings for these in that file so that they'd be exported and localized so that we can ship this feature sooner. Since you're using the strings here, the placeholders aren't needed anymore.\n. How about just having this be a boolean, desktopSite? It doesn't look like the string is actually used anywhere.\nIn fact, you already have func toggleDesktopSite(on: Bool), so I would merge these together:\nvar desktopSite: Bool = false {\n    didSet {\n        // toggleDesktopSite implementation here\n    }\n}\n. Then this could be reduced to: webView.customUserAgent = on ? UserAgent.desktopUserAgent() : nil.\n. Shouldn't need this anymore if you move this boolean to Browser.\n. SnapKit includes a priorityHigh() -- I think that'd be slightly cleaner than manually defining a priority here.\n. Are these greaterThanOrEqualTo and lessThanOrEqualTo lines necessary?\n. It looks like the problem is caused by asynchronously updating the UI based on the index after doing the requery. The index is fragile since any requery during the async update can cause the indices to change.\nRather than doing the query and then updating the UI, what if we immediately delete the item from the collection (in didRemoveThumbnail), then fill in the gaps after the query is done? Theoretically, that means we wouldn't need to pass around indexPath anymore, which can go stale as we bounce between threads.\n. Would it be possible to do the deletion and replacement separately? That is:\n1. Immediately delete the item from the collection.\n2. Make queries to delete the item and get the updated data.\n3. Fill in top sites with new thumbnails.\nRight now, I know that 1 and 3 happen in the same operation as part of performBatchUpdates, which I think we do because of animations. Is there any way we can split them, doing the deletion before any querying, or does delete/replace need to be atomic?\n. Nit: these can be combined into a single guard statement with the lets separated by commas.\n. Hm...separate bug, but this test isn't completely reliable: any time we open a new tab from long-pressing a link, that tab will only have a single back/forward item (the opened page), and it's not the home page. Probably not a high priority bug since this only happens a) when showing the crash prompt, and b) only if all of the opened tabs have no back/forward history.\nThat said, I think it'd be an easy fix if you changed this to:\n!tabsToRestore.every { $0.sessionData?.urls.count > 1 || !AboutUtils.isAboutHomeURL($0.sessionData?.urls.first) }\n. Maybe try localhost?\n. I think you can just remove this comment -- it will seem out-of-place outside of the context of this PR.\n. MPL\n. Passing an entire BrowserViewController here will introduce unnecessary coupling. Just use the delegate pattern and have BVC do the glue work?\n. Nit: private here and below, and static for these constants. Also, don't forget the comments for NSLocalizedStrings.\n. Note that using this on a private browsing tab will cause that tab to load here without the private process pool, meaning cookies and other data will be leaked. We should either reuse the tab's configuration here or not follow the setupWebView path for private tabs.\n. Red flags are going off here, too. Passing an entire BVC will only make refactoring BVC harder later if we're injecting it everywhere! Best to avoid coupling and either pass an interface that BVC implements or redesign this using delegates, I think.\n. Can you include a comment here? Not really obvious what this code is doing, or why it's needed.\n. delegvate -> delegate\n. Can we prefix these with tabTrayX (tabTrayDidAddBookmark, tabTrayDidAddToReadingList, tabTrayDidPresentViewController, or something similar)? It's helpful when implementing these protocols via autocomplete and makes it easier to see where they came from.\n. Nit: protocol TabTrayDelegate: class above and weak var here to help prevent retain loops.\n. Might be helpful to add a doc-style comment here so it's clear when/where this dangling property is used.\n. OCD nit: *s not lined up\n. Nit: uRL -> URL for consistency with our other usages\n. Can we also sort the subdomains in the cases where the base domains are equal? For instance, if I had hangouts.google.com, mail.google.com, and www.google.com, I'd expect to see them in that order.\n. Nit: temporarly -> temporarily\n. Isn't willShow called before the view is shown? Why do we have to hide it here?\n. Nit: overriden -> overridden\n. Nit: it's -> its\n. Nit: its\n. Nit: its\n. I notice we have this same code in SettingsTableViewController for the Help settings item. It'd be nice if we could create a SettingsDelegate that TabTrayController implemented, which we could call in these places instead of fiddling with the parent view hierarchy here. I think doing that would also allow us to use TabManager.openNewTab() inside of TabTrayController instead of having to pull out a BVC from the app delegate to call openURLInNewTab, which makes me cry a little inside.\nSince we already have this code in our settings, though, we can do this cleanup in a follow-up.\n. Is it common for password fields to speak the obscured password in VoiceOver? It seems like that could be a security problem if passwords were read aloud just because the field is focused, though I'm not familiar with the iOS convention.\n. Just have a habit of using leading/trailing over left/right by default because of RTL compatibility, but left/right is fine with me.\n. We actually do need to call layoutIfNeeded here because the adding the find in page bar will make it become the first responder, which will in turn fire the keyboardWillShowWithState delegate method, and that will animate any new constraints since the last layout pass. That means the constraints set above will be animated in, which we don't want (this causes the bar to slide in from the bottom left corner).\nI'll add a comment since this is a pretty subtle detail.\n. I think we always need to use layoutIfNeeded inside of animateWithDuration for constraints to be animated, right?\n. Yeah, I actually started this convention way back when we first started the project. The goal was to make it obvious that these methods are selectors to prevent us from accidentally removing them when we do cleanup (since there won't be any compile-time errors). This was before we knew about the @objc annotation, though, which is usually a good indicator that the method is a selector (along with the sender argument).\nI'll go ahead and add the prefix here just to follow our current convention. I can bring this up in the next iOS meeting to see if people still find it useful.\n. Yeah, it doesn't require them, it's just we arguably should prefix selectors with @objc private (I forgot the private here, thanks for the reminder!). For one, I think it's always a good practice to restrict method visibility as much as possible -- it'd be weird for a class to directly call another class's selector. Also, using @objc private can make a pretty clear indicator that it's a selector method as mentioned above (as long as we make a habit of using it consistently, anyway).\n. Remove, not comment out\n. Same. Also, delete the comments that talk about mouseup above since you're removing it.\n. Delete these two lines since they're no longer relevant after you remove the mouseup listener.\n. Assuming the changes to this file were all unintentional.\n. Nit: it's -> its, seperator -> separator. Also, finish (or delete) the last sentence.\n. Guess we're not string frozen for now? I haven't really been able to keep up with our l10n status.\nEdit: Oh wait, I think these are just being moved from somewhere else.\n. How useful is it to edit the website a login is associated with? I definitely understand usernames and passwords in case they change or are mistyped, but I can't figure out any scenario where I'd want to change the website as a user.\n. Note that all cases have this line, and it's the first line in each one, so you could simplify this by factoring it out above the if statement (and that would allow you to remove the components.count == 1 case completely).\n. Nit: should probably remove this to reduce noise, or at least put it behind a log.debug().\n. I'd rename this to shouldApplyCompletion or something. applyCompletion does more than just move the caret to the end.\n. Remove\n. Remove extra space\n. Also, a comment above this variable describing the delicate interaction between highlightAll(), touchesBegan(), and touchesEnded() would be useful. I'd just give a small description about why we need this variable.\n. Don't remove this comment or newline\n. Why are you removing this line?\n. weak\n. The delegate shouldn't be aware of what clients are doing with the implementation, so you should use a generic event name (e.g., browserViewControllerDidAppear).\n. This isn't great -- we're making assumptions about the state of BVC (a view) to decide when to add a new tab (our model). Ideally, we'd tease apart the coupling of adding a tab and inserting the web view. This might be OK for now until we can do our BVC refactor.\n. Move the 400 to a constant\n. Why do you have a clearInterval in here?\n. startTime -> time. It's only the \"start\" when it's 0 :)\n. Nit: replace the if/else with just an if:\ntime += SCROLL_INTERVAL_INCREMENT;\nif (time > duration) {\n  clearInterval(scrollInterval);\n}\n. Use var on each line; comma-separated declarations are generally considered poor form.\n. You don't need this -- if you're still in the interval, that means you haven't cleared it yet, so you know time will be <= duration.\n. >=\n. Same nit here, use separate vars.\n. Since this is just another Settings view controller, and since there are no other classes in the AuthenticationManager group you're creating, is there any reason you don't want to just put this in Client > Frontend > Settings with the others?\n. Should these be moved into AppSettingsTableViewController since these are specific to a single settings implementation?\n. Same question here.\n. Nits: let\n. Why do you need an empty override here? Maybe add a comment above explaining what this is for.\n. Went to add it, but it's already there! Looks like someone beat me to it.\n. Why do we need this in viewDidAppear?\nSince this is exactly the same code you have in promptAlertControllerDidDismiss, maybe factor this out into a private helper method?\n. Ah, OK. If you decide to land the mini follow-up that puts this in the helper, would you mind also adding a comment here about this being an alternative to using didSelectedTabChange?\n. WebKit used <body> in all cases I tried, but I'll add a check anyway to be safe.\n. What async block? Capture it how? Don't quite understand your comment!\n. Since we're in the background and presumably not visible, perhaps we should use false here?\n. Maybe use named tuples here so that the code below is a bit more readable -- the magic numbers (i.e., domainsA.2 < domainsB.2) aren't very clear.\n. Looking at the codebase, we don't actually pass checkiOSVersion: false anywhere (and same with this new argument you're adding). I'd probably just get rid of these arguments altogether, but up to you.\n. Nice, bundling these properties together into a single serializeable object seems pretty clean :+1: \n. Nit: snp_centerY is implicit here, so no need to add it (same below with snp_top).\n. Don't think priorityHigh is needed here. We always want the logo to be at least 50px from the top, I think.\n. > But only if a search query is present.\nThat's not a particularly robust test since \"a regular page on maps.apple.com\" could easily contain a query, too. With some experimentation, I found that any query on the root maps.apple.com (e.g., http://maps.apple.com/?foo=bar) will be blank, yet any query with a path (e.g., https://www.apple.com/ios/maps/?foo=bar) will not. It's still hacky, but that means you could harden the test a bit more by also checking that the path is empty.\n. Note that this is an exploit opportunity -- if the person breaking in reboots between every 3 attempts, they won't have to wait for the 15 minute lockout timer.\nThis only matters if the device itself doesn't have a PIN set, though, so this might not be a huge concern.\n. Nit: move this under case .Completed?\n. Why are you changing this instead of BorderStrokeWidth?\n. Why are you using TouchDrag events rather than TouchUp ones?\n. This code is pretty confusing. I'd redesign it:\n1. In TabsButton, create a selected boolean.\n2. Add a didSet observer for the boolean that updates the text, title, and background colors based on the boolean state.\n3. Update the selected boolean based on the control events.\nThat way, the logic is contained in TabsButton and we have real state instead of this confusing UIColor.whiteColor().isEqual(tabsButton.textColor) condition.\n. Use @objc private func for selectors.\n. It's confusing, but this smaller data URI, which is also incorrectly labeled as 16x16 in the <Image>, is actually a larger 96x96 icon (verifiable by copy/pasting the URI into the browser and viewing the image info).\nPerhaps the Android PNGs are compressed/crushed?\n. Yep....I can file an l10n bug to have this fixed, though it doesn't make any practical difference for Android or iOS (other than confusing markup).\n. Doing a comparison on the current theme and then setting the UI based on that theme is exactly what the Theme class is supposed to do. Add these properties directly into Theme -- then we can just do borderColor = theme.TabsHighlightBorderColor, etc.\n. Why do you need this if?\n. previousTheme -> theme. You're updating the theme whenever it's applied, meaning it's the active theme, right?\n. Nit: Bools should describe a state (higlighted or selected) rather than an action (highlightButton).\n. Not sure why these are all optional, but I guess that's a different bug.\n. Nit: private, newline after\n. Nit: Please keep 2-space indentation for JS files. Sorry -- it's confusing! If you aren't already, I suggest using a separate text editor for JS files other than Xcode.\n. Please use the __firefox__ namespace that we use in other content scripts. The initialization pattern we've been using is this:\n```\nif (!window.firefox) {\n  window.firefox = {};\n}\nwindow.firefox.favicons = ...\n```\nThis keeps everything namespaced to a single global object.\n. Nit: revert this change\n. Nit: to follow our formatting conventions, please put the runScriptsOnWebView on a new line (like we do for the log.debug right below here).\n. Didn't even notice some of these fixes you added before. Nice :+1: \n. It doesn't seem like a good idea for deleted top site state to live here, but I'll take a look again once I better understand what you're trying to do.\n. You have NSURL(string: site.url)?.normalizedHost() ?? site.url repeated in lots of places here. This should be factored out into a helper method.\n. This is getting pretty ugly...\n. I wonder if keeping it public but making this non-lazy would also fix the issue? If that worked, you wouldn't have to change as much in the PR, but this is fine too.\n. Nit: revert\n. The docs for textFieldShouldReturn say\n\ntrue if the text field should implement its default behavior for the return button\n\nso this should probably be ?? true if there's no delegate set.\n. Is this check necessary? If we've already deleted a site, we shouldn't show a tile for that domain anymore, so how would we get into a situation where we'd be deleting it again?\n. Don't do this -- return succeed() like before...\n. ...and here, since you're already calling profile.history.removeSiteFromTopSites(site), just do that unconditionally now.\n. Since historySites is really a combination of history sites and suggested sites, we should probably rename this. Maybe just sites?\n. Can you not just do { extractDomainURL($0) != domainURL }?\n. What in tarnation is this?! Certainly you should know how to write a for loop in Swift by now...\n. Again, can't you use extractDomainURL() here to shorten this?\nAlso, it's inefficient to map suggestedSites each iteration of the loop. The result is the same every time, so do it once outside.\n. Don't do this here...do this as part of the step above, since you're already looking at both arrays to compare the sites. Basically:\n1. Call map on historySites, setting the result back to historySites.\n2. For each site, get its domain.\n3. Use if let index = suggestedSites.indexOf(domain) {...} to see if the site's domain is a suggested site.\n4. If so, get a reference to the suggested site using the index, and also remove it from the suggested sites using that index. Then return that suggested site.\n5. Otherwise, simply return the site itself.\n. Nit: I'd just name this mergeSuggestedSites. I think not including suggested sites that the user has removed would implicitly be part of that.\n. Nit: remove ()s\n. Nit: remove ()s\n. Nit: remove ()s\n. Nit: semicolon\n. Nit: separator (while here)\n. Why do we need lessThanOrEqualTo for right?\n. SnapKit supports .offset(UIEdgeInsets), and also .inset(UIEdgeInsets) (haven't looked at the difference carefully). Can we turn all of these into a one-liner using one of those?\n. Same questions.\n. Thanks; I assumed notifications were always dispatched to the main thread.\n. We use UIConstants(rgb: <hex>) elsewhere in UIConstants.swift, so I'd suggest using that just for consistency.\n. Holding callbacks like this without weak is a red flag for retain cycles. Sure enough, I just tested this locally and can verify that this does cause a retain loop -- try adding print(\"deinit\") to the AuthenticationSettingsViewController's deinitializer.\n. Use value :)\n. What does this comment mean?\n. Light? What does that mean?\n. > Yeah I think you are right. I think this should be:\n\nif index < children.count {\n    index += 1\n    return children[index]\n}  else ...\n\nI don't think that's right -- the ++ postfix operator means \"access, then increment\". I think it's correct how it is now: get the result at the current index, then increment the index, then return the result.\nAlternatively, you could use defer as suggested here:\ndefer { index += 1 }\nreturn children[index]\nEdit: Looking back again, you guys might be discussing the correctness of the original code rather than the ++ translation itself. The original code is correct, though: the position of the generator when it's created is before the first element in the list, so next() should return the first element in the list the first time it's called.\n. I assume the compile failure happens when trying to assign self[idx] to a variable before incrementing? A cleaner way to do this would be using defer as mentioned above, which doesn't require a temp variable:\ndefer { idx += 1 }\nreturn self[idx]\n. Almost forgot -- let's use the value parameter for new NSLocalizedStringss.\n. Fair point; I'll keep them separate.\n. No point in carrying this over -- might as well fix bug 1252070 while here by not including the second pane.\n. Why create a separate variable for each one of these? Why not just have a single method that takes a letter, gets the UIImage from the cache (or creates and adds it otherwise), then returns that image?\n. Can this be updated to use value too? Re: IRC discussions, we can try using CamelCase.WithDotsBetween.Label now. Also, it sounds like we don't want to add tableNames to new strings.\nGoing to try to get this all sorted out soon in bug 1261431!\n. It's used in the if errDomain == ErrorPageHelper.MozDomain case -- I just factored out the string to a variable here (since we refer to it later in didReceiveScriptMessage). A bit less error prone if we don't have to retype these strings in multiple places.\n. Looks like we do (probably because it's in a different target): 'CertStore' cannot be constructed because it has no accessible initializers\n. Why can't you just put these directly into SiteTableViewController? If the subclass view controller needs these custom cells, then it can use them; if not, registering cells should have no effect. I don't see the need for a separate VC class?\n. Then you won't need to change these\n. Why do you need to duplicate these in prepareForReuse? The insets/fonts are set in init...they won't change again, will they?\n. Nit: merge this into the else above: else if\n. What do you mean \"empty URL\"? Is this comment outdated?\n. Is SiteTableViewHeader unused now? I don't see it being used in RemoteTabsPanel, either. If so, just put your HistoryTableViewHeader changes directly into SiteTableViewHeader?\n. private\n. Yikes. This layout is turning into a hot mess.\nIf possible, I'd avoid leaking the borderView into TwoLineCellHelper. You only need a border in your HistoryTableViewCell, so create it and do the layout there. I'd suggest doing the normal layout pass, then adjusting the border around the image as part of HistoryTableViewCell's layoutSubviews. Here's a quick example.\n. BorderWidth sounds like, well, the width of the border, so I'd rename this. Maybe BorderFrameSize?\n. Don't think you need this if statement since you guard on it right above.\n. Same here (unnecessary if)\n. It looks like all of these changes to LoginDetailViewController.swift are exact duplicates of the changes to LoginListViewController.swift. Would it be worth creating a shared parent class or helper?\n. Cool, didn't know we could do this.\n. As mentioned over IRC, we probably want to use the same fonts across panels.\n. Nit: space before else\n. Nit: Colour -> Color for consistency\n. I'd follow iOS's UI threading model here, which is that it's the caller's responsibility to ensure that any UI code is touched only on the main thread. Having async dispatches hidden in the method like this can lead to subtle bugs; for example, I call performMenuAction to open a new tab, but the number of tabs won't change right after this call. Generally, I think we're doing something wrong if we have background threads firing off menu actions!\nFor the sake of safety, it'd be good to add assert(NSThread.isMainThread()) at the top of the method (like we do in TabManager) so we can catch cases where we violate this constraint.\n. MPL\n. Historically, we've avoided using product names (Firefox) directly in code. We already have the App prefix (AppConstants and now AppState), so perhaps AppMenuItem/AppMenuConfiguration would work here, too?\n. Might be worth making URLBarViewProtocol a class protocol so we can keep this weak.\n. > we cannot trust data coming in via JS\nIn this case, we can -- we own all of the JS sending these messages (guaranteed by theisLocal guard here), so any bad message is a programmer error.\nThat said, I have an assertionFailure() at the end of this if chain already, so I'm fine switching it to optional since we'll instead fail the assertion if this ever happens.\n. Yep, that's how the exploit works. It loads a new window via window.open() with a bad URL, which causes us to load an error page. From there, the site was able to use win.location.href to set another local URL, which worked because the window was already on the localhost domain (the error page).\n. > Also needs ::1 for IPv6 localhost\nNice catch!\n\nAnd do we know for sure that http://LOCALHOST/ gets turned into a lowercase localhost ?\n\nI can't reproduce any cases where LOCALHOST/LocalHost/etc. are allowed, but I'll add a .lowercaseString just to be safe.\n. did not success -> did not succeed\n. This seems arbitrary putting this here -- what is it supposed to be protecting? From your comments, it sounds like we might be crashing at profile.bookmarks.modelFactory in updateURLBarDisplayURL. Would it make more sense to put the guard there since there are several other places we call updateURLBarDisplayURL?\nBut even then, we access the DB in many places throughout the app, so it's unclear to me what's special about this particular case.\n. Assuming we still want this check, could we replace this flag with UIApplication.sharedApplication().applicationState == .Background?\n. Yeah, I was just saying that if the specific path you hit is problematic, there are a number of other ways we can hit this same code while in the background. For example, we'll call updateUIForReaderHomeStateForTab (which in turn calls updateURLBarDisplayURL) any time the URL changes, which can happen with redirects or delayed events. \nI'd lean toward \"not caring about this commit\" unless we're careful to avoid this code whenever we're in the background (which would probably be difficult, as I imagine there are many other places outside BVC that could trigger similar queries).\n. Indeed. Fixed!\n. Why not define this in Shared/Strings.swift?\nI noticed we've added a number of other new strings with IDs that also weren't put in Strings.swift. Added this as a topic for tomorrow's meeting.\n. Should probably factor this out since it's the exact same string/ID. One reason to use Strings.swift :)\n. Worth moving to Global.swift? Ideally, we'd clear history after every test to put the browser back into a clean of state as possible. If we did that, though, we'd probably want a way to clear even faster than using CPD (e.g., using notifications), so that's probably under the scope of bug 1191476.\n. I guess this comment no longer applies any more :)\n. Curious: any reason you're using repeat-while vs just a regular while loop?\n. Looks like you kept the passcode entry when changing the interval -- does that mean these two lines should stay?\nI tried running the test myself to find out, but I'm just getting a Constant is not finite!  That's illegal.  constant:nan error at this line. Are you having issues running the tests too?\n. Yes, please! For new strings, please use NSLocalizedString with the value parameter, where the first unnamed parameter is a unique, namespaced ID, and the value parameter is the string itself. Here's one example.\n. This is kinda hacky with the invalid:// bit. Maybe just add a guard on string above instead?\n. Why does setHomePage take a closure producing an NSURL rather than just an NSURL directly?\n. I'd make accessibilityIdentifier non-optional unless you can think of a case where we wouldn't want the field to be accessible.\nSame for placeholder, perhaps?\n. Retain cycle: currentTab captures self, and ButtonSetting holds onto isEnabled. That means HomePageSettingsViewController -> ButtonSetting -> HomePageSettingsViewController.\n. Same. I think there's actually two leaks here: one is currentTab (as mentioned above), and the other is setHomePage, which also captures self.\nYou could break the cycles by using weak or unowned, but I'd suggest just removing the closures altogether if possible (see this question).\n. Nits: You can reduce some parenthesage (yes I made that word up) by removing parens around single-argument closures (e.g., (String? -> Void)?).\n. To answer your comment, I'd prefer just removing the key like you're doing here. That way, if we decide to change the default in the future, we don't have to worry about stale defaults being saved.\n. In StringSetting, the settingIsValid parameter is defined as (String? -> Bool)? = nil. Why not do the same here for isEnabled? Then you won't need this always default argument.\n. Nit: /// instead of // so the docs will show up when \u2325-clicking in Xcode.\n. Nit: /// instead of // so the docs will show up when \u2325-clicking in Xcode.\n. I think this change is fine -- it corresponds to the number of results shown in suggestions. We limit that number to 4 anyway in the UI, so this should have no effect. Also worth noting that Android used to have nresults set to 8 when we originally pulled these in, so this was not an iOS-specific change.\n. Thanks -- I always forget to change this.\n. Not sure if it's worth having a separate case for Unknown since it's something that shouldn't happen. Can we just throw an assertionFailure here, and/or fall back to Fennec?\n. IMO, Developer/Debug/Local/etc. would be more intuitive than Fennec. If I see Fennec, I don't immediately know what that means without looking at the other flags and using the process of elimination.\n. NBD, but I think it would have made more sense if I had created a default: \"default\" here instead of these fallthroughs. I mean, it's even called default!\n. Nit: newline before and after this block\n. left.right -> leading.trailing?\n. Since the alpha is a visual side effect of the enabled state, I'd move the alpha parts into a didSet observer on enabled in RecentTabsButton.\nIf you want, that means you could also simplify this block to:\nrecentTabsButton.enabled = (profile.prefs.dictionaryForKey(\"recentlyClosedTabs\")?[\"urls\"]?.count ?? 0) > 0\n. Nit: newlines before and after each of these variable declarations\n. Rather than requiring this check everywhere we want to use a ChevronView, I'd move this interface direction check inside of ChevronView directly. Then, everywhere we pass Left, ChevronView would internally draw a right arrow for RTL (and vice versa).\n. Why do we need a HistoryPanel at all here? See below.\n. Why do you need a HistoryPanel? See below.\n. This looks like the only place you're using historyPanel. Why not just pass self instead (since RecentTabsPanel is a HomePanel), and remove the awkward panel->panel dependency?\n. Nit: No point in adding these identifiers until we're actually using them.\nAnd on that note, this could use some UI tests!\n. Add an assertionFailure() here so this will crash on developer builds. That way, we can find it and fix it if it ever happens.\n. Please add a comment here explaining what this check is for. I'm having trouble figuring out what this 5 is supposed to represent, and what this code is supposed to be doing.\n. Use NSLocalizedString with value for new strings.\n. Simplify to make.edges.equalTo(shareButton)?\n. String changes mean we also need to rev the IDs, so change HomePage.Set.Dialog.OK -> HomePage.Set.Dialog.OK2 and HomePage.Set.Dialog.Cancel -> HomePage.Set.Dialog.Cancel2.\nEdit: This is only true if we've done a string export in the past where these strings were landed. If there's no chance that localizers have translated these strings yet, ignore this comment!\n. Same here re: revving the ID.\n. Not directly related to this bug, but I notice the string here doesn't use all caps like all other settings items. Should probably update that.\n. I think we'll want to use a different icon here. Looking at \"Share\" in the menu, it's a bit blurrier, a bit taller, and a slightly lighter shade of gray than the other menu items:\n\nAlso, we'll want to use separate assets for normal vs private browsing, since it currently looks like this:\n\n. Nit: space before comment\n. Same\n. If we're sticking with prefs as storage, I think it'd be better to store the list as an array of dicts rather than a dict of arrays. That way, we don't have to worry about the arrays being out-of-sync. In fact, I think you can even use NSCoding with NSUserDefaults (see below).\n. Create an actual RecentTab struct or class here rather than returning a dict. To keep type safety and hide the implementation details, it's nice to expose actual objects rather than generic string structures.\n. url shouldn't be optional. No point in storing a closed tab if we don't even have a URL to open!\n. Let's create an in-memory array of RecentTab objects instead of reading/writing prefs here (and getData. That is: only use prefs when adding a new tab or reading the initial list of closed tabs.\n. You're overriding the original implementation, so you probably want to add a super.enabled = enabled here.\n. No need for breaks; Swift implicitly adds them for cases.\n. Nit: Combine this with the previous if statement with an else if here.\n. getData -> getTabs\nAlso, from a client-side perspective, it'd probably be easier to handle this if the return value was non-nil. If we have no tabs, just return an empty array.\n. clearData -> clearTabs\n. Return an array of RecentTabs rather than a dict of arrays (see below).\n. Yeah, it is :( I recommend using an external text editor if you aren't already.\nBut: please remove this comment and replace with the MPL license block header.\n. Why return strings rather than booleans?\n. Is .method always lowercase? Might want to add a toLowerCase() here.\n. Please use ; throughout in JS.\n. Heh, funny comment -- but it'd be useful to have information here on why this might fail.\n. Nit: missing ;\n. Same here re: toLowerCase().\n. Nit: space before {\n. Nit: space after , (here and throughout).\nAlso, I think you'll want to use encodeURIComponent for each of these arguments. The name or value might contain & or =, for instance, which would break your composed URL string.\n. Please add \"use strict\"; here to enable strict mode.\n. Remove this line?\n. I'd return null here unless there's a reason to return an object (here and throughout).\n. Same here re: encodeURIComponent.\n. Each Tab object in Swift has a favicons array containing the set of favicons for the page. Those are provided by Favicons.js, which has a couple other selectors, too (namely, Apple touch icons). I imagine we'd be able to just reuse that when receiving the message instead of having to reimplement favicon logic here.\n. I wouldn't put this here since this could effect other consumers of UIAlertController, like you said. Just override the property in the specific controllers that need it.\n. Hm, I'm not sure UIAlertControllerExtensions is the best place to add these. Generally, I think it's considered good practice to add extensions with generic methods that can be used anywhere, but you'd extending UIViewController for a very specific use case. I think it'd be better if these method were moved into some third-party-search-specific class instead. \n(I see we did this above with deleteLoginAlertWithDeleteCallback, but I think that was also a mistake).\n. Please use NSLocalizedString with value and drop the tableName argument for new strings. See some of the strings defined in Strings.swift for examples.\n. What is this ObjectiveC import for?\n. Instead of a nil check that sets the value if nil, you can just make customSearchEngineButton a lazy var that will instantiate itself the first time it's accessed.\n. left -> leading/snp_right -> snp_trailing is more RTL-friendly.\n. Nit: no need for [weak self]. This block is immediately evaluated and not retained.\n. Nit: undo this change\n. Nit: space after : (here and everywhere else).\n. Nit: no parens around conditional\n. Why takeUnretainedValue()?\n. What is this _nextItem? Maybe add some comments here explaining what's going on.\n. Nit: remove trailing ;\n. NSLocalizedString\n. \"null\" -> nil. The former will be the string \"null\" in JSON, whereas the latter will be null (which is what we want).\n. isPersonal -> isCustomEngine\n. Nice job with all the documentation, by the way!\n. I see that this is set on each profile init if isChinaEdition is true. Doesn't that mean that if a Chinese user tries to change their homepage menu setting, their choice will just be clobbered the next time the app starts?\n. Looks like you're using a placeholder. What's the actual string that we want here?\n. Same here. Please replace the placeholder with the actual string.\n. Since this is a fairly generic method, can this be moved to a UIViewExtensions.swift utils class, removing WebView from the name?\n. Interesting -- makes sense. I don't think I've seen us use this anywhere else!\n. Same here about using the real string (and everywhere that currently has a placeholder).\n. Probably want to increase this to at least 2 seconds or so -- I find that I barely have time to read it right now.\n. Can we add a \"slide back\" animation here so that the view doesn't just abruptly disappear?\n. Serch -> Search\n. We should disable the search button here since the \"is added\" check only works the next time the field is selected. That is, I can currently add the same engine multiple times as long as the field stays focused.\n. I'm getting a crash whenever I try to delete a custom engine. Do you see this too?\n. We should probably use the profile fileAccessor here (by adding it as another init parameter)  to use a document directory that's relative to the profile instead of the device document directory. That way, we won't clobber your custom search engines when running tests, for example!\n. I think you can replace this with let unorderedEngines = SearchEngines.getUnorderedEngines() + getCustomEngines()\n. Nit: newline above this\n. Hopefully we won't need this anymore if custom engines are profile-relative!\n. Shortcut: return form && form.method && form.method.toLowerCase() == 'get';\n. Return null instead of {}?\n. Same\n. Can we use the favicons array when we get this message in Swift rather than repeating the favicon fetching code here?\n. Nit: Prefer to not use parens (i.e., filter { ... } vs filter({ ... }))\n. Unfortunately, the find-in-page layout (and BVC layouts in general) are very delicate, so this hack of adding the search button to the find-in-page bar might not work well.\nSome steps to break it:\n1. Tap a text field to make the bar appear with the \"add search\" button.\n2. Tap the text field again to make the Find in Page option appear.\n3. Tap Find in Page.\n4. Tap anywhere outside the text field to make it lose focus.\nAfter these steps, a black gap will be left at the bottom of the page where the find-in-page bar was.\n. Playing around with this on iPad, it looks like we can append the button to the keyboard -- it's just called the inputAssistantItem instead of the inputAccessoryView. No need for the find-in-page bar hacks!\nEdit: quick code snippet:\nif #available(iOS 9.0, *) {\n    let items = webContentView!.inputAssistantItem\n    let item = UIBarButtonItem(customView: customSearchEngineButton)\n    let group = UIBarButtonItemGroup.init(barButtonItems: [item], representativeItem: nil)\n    items.leadingBarButtonGroups.append(group)\n}\n. My suggestion would be to simply not show the button on iOS 8 iPads. We'd need a non-trivial alternative implementation, and we've been discussing dropping iOS 8 soon anyway, so I'd argue that it's not worth supporting.\n. Can we use SnapKit/AutoLayout instead of directly manipulating the frame?\n. Interesting that you chose to use a struct here instead of creating a ToastView that subclassed UIView. Just curious: what were your reasons for doing this?\nEdit: I noticed all of the methods here are private, and the SimpleToast maintains its own lifecycle, so I suppose this makes sense.\n. Hm, kind of wish we had a toast class here so we could have a real typed parameter instead of a generic UIView.\nEdit: Nevermind, it's private. Not a big deal!\n. var -> let\n. Nit: space after :\n. Nit: single space between methods\n. Nit: keep args on the same line (or break them up more so the first line isn't as long)\n. Nit: keep args on the same line (or break them up more so the first line isn't as long)\n. Keep this as let...\n. ...and move this block before the out dict above, creating a variable for the result like we do for the other fields.\n. Ah, so that's what we should be using for null!\n. OCD nit: separate this var from the rest of the lets here\n. This seems like a hack. What is the title property supposed to be used for? Is it exposed to the user anywhere, perhaps as an accessibility label?\n. Why do you need the title for this rather than just $0 != customSearchBarButton?\n. Maybe throw in an assertionFailure() here before the return? That would cause us to crash on debug builds if webContentView is ever nil, which should never happen AFAICT.\n. Nit: newline above guard\n. We have a return below, so I don't think the handler can be called multiple times.\nIf inputItems.count > 1, it looks like we just use whatever we get first. \n. Sounds OK to me, though I was less concerned about DRY, and thinking more about consistency (i.e., Favicons.js looks for Apple touch icons before falling back to /favicon.ico, for example).\nThere may be a reasonable compromise here: Favicons.js already attaches itself to the window object when the document is loaded, so I think you could simply call that script directly via window.__firefox__.favicons.getAll(). That lets us use our shared favicon fetching code without worrying about the separate Swift favicons context.\nBut if that doesn't work for some reason, I'm fine with this as is!\n. While here, could simplify to self.navigationItem.rightBarButtonItem?.enabled = (self.loginDataSource.count > 0) if you want.\n. Editting -> Editing\n. Note that assertions are only run in developer builds, not release builds. It's good practice to use asserts aggressively since they quickly reveal bugs, with stack traces to boot, and have no effect on the released product.\n. Looks like it. I'm seeing -420, and -420/60 = -7 (where -8 would be PST). But I hadn't thought about it -- good observation!\n. Use NSLocalizedString here (sorry, must have missed this before)\n. Why is this init optional?\n. Remove this if; this init shouldn't fail.\n. Note that the end of the guard is the same as the end of this method: we still want append the closed tab, serialize it, and save it to prefs. So instead of guarding, just make an if statement that creates the array if it doesn't exist, and the code after that can be shared for both cases.\n. Make this a lazy variable called tabs. The first time we access it, it will pull the tabs from prefs. Subsequent accesses can just return the array directly.\n. Just use getTabs here\n. Nit: For consistency with count elsewhere, make this a computed property instead of a function.\n. Hm, I wonder what this container was originally supposed to be for? Kinda weird that we do cell.contentView.addSubview(textField), then container.addSubview(textField) right below with the same textField.\n. Neither of those guards should ever fail (I should probably add assertionFailures() in them), so it shouldn't really matter either way.\n. Oh? Then what are the strings associated with each actually used for? ACTIONBAR(\"actionbar\"), for example.\n. Aside from not requiring telemetry clients to have a prefs handle, another reason for this indirection is the fact that Telemetry.swift and TelemetryEvents.swift are in two different build targets. Telemetry.swift is shared (i.e., it can be accessed from the main app or any of our share extensions). TelemetryEvents.swift is specific to our main client app, meaning it can use any classes that are only in that target.\nI had actually intended for the makeEvent signature to look like this:\nmakeEvent(engine engine: OpenSearchEngine, source: Source) -> TelemetryEvent\nThat is, it accepts an actual typed engine instead of a plain string, which makes it ever-so-slightly less error-prone. This wouldn't be possible if TelemetryEvents.swift was also in the shared target since OpenSearchEngine is client-specific.\nI'll update the PR with this change -- thanks for the reminder!\n. Err, why doesn't this just return tabs.count?\nEdit: in fact, I don't think you need to expose a count at all. If clients need it, they can just do store.tabs.count.\n. Can't this entire section of code be replaced if you just do tabs.append? I don't understand why you're duplicating the logic of looking up recentlyClosedTabs and returning a fallback array here since that's exactly what the lazy tabs is for.\n. If this file is in the Storage target, it should be in Storage and not Client/Frontend/Browser.\n. Not sure there's much value in having a protocol here if we aren't mocking it or have multiple implementations. I'd just remove this.\n. RecentlyClosedTabsStore -> ClosedTabsStore\n. Don't use standardUserDefaults; use the profile prefs. The reason I suggested moving it into the profile in the first place was so that the storage would be profile-specific.\n. Why displayURL and not URL?\n. Can this be generic? public func objectForKey<T>...\n. Remove this.\n. Just return ClosedTabsStore here.\n. General question: are the tabs necessarily \"recent\"? The only time we clear the tabs is when we use Clear Private Data, so it seems like tabs could actually be days/weeks old.\n. And going with the other comment, remove the min here and just return the full set of tabs we have in the store. We should enforce the limit at the store layer, not in the view.\n. How about return URIFixup.getURL(value)?.absoluteString?\nIn addition to adding a missing http://, URIFixup makes sure the URL is actually valid (by converting to an NSURL, triming extra whitespace, etc.)\n. That would be partially redundant with isURL below, though I wonder if we need both settingIsValid and prepareValidValue. Couldn't we just always use the latter to do both the check and the transformation (since there's overlap there anyway), returning nil if invalid?\n. Remove this comment\n. <T> should be here too\n. Don't think you'll need this as! NSData anymore with the generic fixes.\n. Er, thanks. Leftovers from the previous version when this was still in CorePing.swift.\n. @jhugman I don't think it is -- see comment above. There's a return at the bottom of that if statement.\n. For all practical scenarios, correct. We record the usage only when entering the background, and we reset only when we send the core ping (which is on the first startup and for each background, after we record). It's theoretically possible for these to overlap if the user manages to background the app very quickly after starting it for the first time, or if they background multiple times very quickly and have queued core pings fire when resetting, but I'm not convinced this is a real concern.\n. Can we merge this if and guard into a single guard (here and throughout)?\n. We'll want the selected tab check here, too, since toolbar and urlBar are shared between all tabs. If we don't check the selected tab here, a background tab would cause the stop/reload buttons to change, which wouldn't make sense since those buttons only work for the active tab.\n. Also, while here, please replace these two toolbar and urlBar lines to just use navigationToolbar instead like we do in KVOCanGoBack.\n. If we want to have the exact same string and comment everywhere we have \"Cancel\", we might as well just use UIConstants.CancelString everywhere we need it instead of defining new NSLocalizedStrings. I can file a new bug for this if you don't want to make that change here.\n. > looks like commas are allowed only if there are multiple let statements\nTry reversing the conditions so that the let comes second. Not sure where this is actually documented, but I've discovered this through past experimentation!\n. To preserve existing behavior, I'd move this effect to the return line so that we notify only once after all logins are deleted rather than notifying after each batch.\n. Let's extract this result to a private constant outside schemeIsValid so we don't have to generate this list each time it's called.\n. The isEmpty check isn't needed anymore since your schemeIsValid will handle the empty case now.\nHow about we drop the var url above, then declare it locally? That would let us drop these ugly optional decorators:\nif let url = NSURL(string: trimmed) where url.schemeIsValid {\n. Nit: update comment since you removed historical schemes.\n. Nit: newline above this\n. Nit: newline above this\n. stopPropogation -> stopPropagation\n. Can we just use window.location.origin here (and url.origin above)? Simpler, and would also catch different schemes/ports.\n. No need for this dispatch here; UI delegates are always executed on the main thread.\n. While here, might as well wrap this properly and use _close.apply(this, arguments); like you did below.\n. How about we pass the tab to append after rather than a Bool? That will make the API a bit more flexible, and will also help to avoid cases where the selected tab might have changed since receiving the message, or where the message was triggered by a background tab.\nRelated: please change the above:\nguard let currentTab = tabManager.selectedTab else { return nil }\nto:\nguard let currentTab = tabManager[webView]\n. while let tab = tab, so you can remove the unwrapping inside the loop.\nEdit: Meh, that won't actually work since it will just reassign itself to the top-level tab each time.\n. Hm...looking more closely, I think it might actually make more sense to do this in MenuViewController.swift. A few reasons:\n- AppMenuItem.swift is app-specific, whereas this property is defined in MenuItem.swift which is menu-specific. That is, we've discussed eventually moving the generic menu code to a separate library/framework, so it would be nice if the app didn't have to manually handle drawing the disabled state.\n- We also want to grey the text, which we can't do here anyway.\nDoing this in MenuViewController.swift, I think we can tint the UIImageView itself instead of creating a new graphics context. So, basically, something like this:\nfunc menuView(menuView: MenuView, menuItemCellForIndexPath indexPath: NSIndexPath) -> MenuItemCollectionViewCell {\n        if let icon = menuItem.iconForState(appState) {\n            cell.menuImageView.image = icon.imageWithRenderingMode(.AlwaysTemplate)\n            if menuItem.isDisabled {\n                cell.menuImageView.tintColor = menuConfig.disabledTintColor()\n            }\n        }\n    }\nAnd we would also want to use menuConfig.disabledTintColor() for the cell's text label.\nSorry for misleading you before -- I hope this makes sense. Let me know if you have any questions!\n. I think this can be simplified a bit:\nlet menuItem = menuItem = tabState.isBookmarked ? AppMenuConfiguration.RemoveBookmarkMenuItem : AppMenuConfiguration.AddBookmarkMenuItem\nif let errorPageUrl = tabState.url where ErrorPageHelper.isErrorPageURL(errorPageUrl) {\n    menuItem.isDisabled = true\n}\nmenuItems.append(menuItem)\n. This can be simplified to just return !menuItem.isDisabled\n. URLs is fairly generic -- how about OpenURL instead?\n. Missing the namespace here.\n. settings! -> settings?\n. Nit: Let's extract all these magic constants to TabTrayControllerUX.\n. Nit: factor out a let currentTabs = privateMode ? privateTabs : normalTabs\n. Nit: trailing whitespace\n. I think we'll want a separate variable for the percent escapes, using the escaped version in this first check, but using trimmed in the last check before the return. \nThe reason: the last check prepends http:// before the string, so loosening up the URL requirements might make us use URLs for queries that aren't actually URLs. Example: if I search dr. who, the escaped string will be dr.%20who, and with the prepended http://, it becomes http://dr.%20who -- which would probably be interpreted as valid URL rather than a search.\n. Why not just use NSCharacterSet.URLAllowedCharacterSet() instead?\n. Might be useful if this were moved to a computed property (e.g., currentTabs). I think we do this same calculation in a number of other places.\n. I see -- yeah, this is fine as is.\n. We should probably exclude more than just error pages. Reader mode pages or about pages, for example, shouldn't be bookmarkable either. So how about the following test:\nif let url = tabState.url where url.isWebPage(includeDataURIs: false) && !url.isLocal\n. While here, \"use strict\"; would also be useful to help catch any mistakes.\n. While here, perhaps extract this ugly regex into a helper so we don't have to duplicate it.\n. Please remove the leading //s.\n. Extract [Character](\"abcdefghijklmnopqrstuvwxyz0123456789\".characters) to a top-level private let constant. That way, we don't need to recreate the character array every time these are called.\n. Remove this variable; just use self directly below.\n. Same here; no need to create a variable referencing self.\n. Normal way to do this is for (i, part) in labels.enumerate() { ... }. That way, you don't need to maintain the index separately.\n. ++ is being removed in Swift 3, so change this to 0..<pos and add pos += 1 on the next line.\n. Same as above -- remove the ++.\n. Same as above -- remove the ++.\n. if !isValidUnicodeScala(part) {\n. Nit: space before {\n. Nit: space before {\n. Add an if let host = url?.host here.\n. ...then just use stringByReplacingOccurrencesOfString(host, ...) instead of (url?.host)!.\n. Won't this make us drop the path of the URL? I assume http://\u5317\u4eac\u665a\u62a5.\u624b\u673a/foo is a valid URL, but this will lose the /foo since it only returns the host.\n. Same here -- extract locationView.url?.host? using if let so that you don't need the force unwrapping below.\n. I think we might be able to remove this function altogether. What if we instead do something like this:\nstatic func punycodedURL(string: String) -> NSURL? {\n        let components = NSURLComponents(string: string)\n        components?.host = components?.host?.utf8HostToAscii()\n        return components?.URL\n    }\nThat way, we let NSURLComponents handle all the parsing work. We just have to be sure to pass the escaped URL to this function so that the URL parse succeeds.\nIn other words, on line 22 where we do url = NSURL(string: escaped), and on line 36 where we do url = NSURL(string: \"http://\\(trimmed)\"), I think we can replace those with url = punycodedURL(escaped), and then you shouldn't need strToAscii at all.\nThat will also help to preserve the URL path as mentioned above.\n. Please fix the license while here.\n. var -> let?\n. Heh, we also do this in ContextMenuHelper.swift. Mildly tempted to create an extension that adds cancel(), though probably not worth the effort for just 2 lines.\n. Edit: Oh, target: self.\n. To avoid the if/let, how about:\nlet homePanelController = HomePanelViewController()\n...\nself.homePanelController = homePanelController\n. Perhaps throw an assertionFailure in here since This Should Never Happen (TM).\n. > For puny code string use NSURLComponents(string: string) will return nil, can\u2019t get the host. So we just manually analyze it.\nDid you try punycodedURL(escaped), not punycodedURL(trimmed)? From my testing, using the escaped string produces a valid NSURL.\n. There's a chance for bugs here if the host happens to appear anywhere else in the URL. If possible, it'd be nice if we could use NSURL/NSURLComponents as mentioned above.\n. I think it'd make more sense to make this the completion handler for dismissViewControllerAnimated instead of dispatching this separately.\n. Hm, well that's too bad...it feels like a hack doing this in dispatch_async since we're making undocumented assumptions around the execution times, but I don't have anything better to suggest right now.\n. Note that this will crash if escaped is nil. Instead of using !, please replace the line above:\nlet escaped = ...\nwith this:\nguard let escaped = ... else { return nil }\n(That also means we won't need the if let escaped = escaped on line 17).\n. Oops, I had removed this at one point, but must have accidentally reverted it. This is left over from earlier commits where we did registration in FirefoxAccount. It's now handled separately by FxADeviceRegistrator.\nThis reminds me of one of the main questions I had working on this PR: does it make sense to do the device registration step outside of the account marriage, or should we tack on registration as another state in the state machine? I went with the former simply because it's what we do on Android, but I don't know how much sense it makes to use an unregistered device as we adopt these new FxA APIs.\n. \ud83d\udc4d \n. Heh, another artifact from 4 contributors working on the same bug! I created a separate FxADevice class (in FxADevice.swift) that has these fields already, so we should probably just use that here and drop this.\n. Didn't write these methods, but they're following the convention of other methods in this class: if it can be statically defined, do so. I think it's semantically clearer since it reveals that these methods aren't tied to the class instance state (and won't have any side effects).\n. WFM!\n. Yeah, I had that originally, but it's messy once we hand off to registerOrUpdateDevice since it calls out to multiple error handler helpers and we'd have to pass this information along so they'd know what to return. That code is definitely not as straightforward as I'd like it to be (and I threw in a few TODOs since I'm not entirely sure what state we should be in after all the error cases). I'll see if I can clean that up a bit more.\n. Was following the approach we use on Android, but I don't really have a strong preference either way. If we wanted, we could also keep these static and add FxAClient10 as a parameter.\n. Hm, we already handle and log the specific errors above in the switch statement. What else would we want to do with these individual errors outside of this abstraction layer?\n. Yeah, I actually didn't look at this change at all, so thanks for pointing it out.\n. Probably not.\n. Note to self: look at this, too.\n. Yeah, sounds like the same question I have above!\n. We're using the variable below when we pass deferred to recoverFromDeviceSessionConflict. Hopefully this can be cleaned up a bit, though.\n. Nit: guard let instead of if let so we can remove the nesting\n. This should be false (the support URL is on https://support.mozilla.org).\n. Should be false since this is just a blank tab.\n. Edit: Nevermind; I think nil falls back to the user's homepage choice, which could be local.\n. Can make this false; I don't think settings opens any local pages.\n. \ud83d\udc4d I didn't notice when working on this, but this same code is actually used in all six client methods. Lots of redundant code removed. Nice catch!\n. Oops, forgot to include this in the last set of commits.\n. Thanks! While here, I also fixed up a number of unnecessary struct inits we had in this file.\n. Sorry, missed your question!\nIt looks like this function does still take a parameter; see here. Perhaps your branch is outdated?\n\nI assume includeDataURIs: false makes us exclude reader mode pages\n\nReader mode pages are actually pages on the local web server that we run alongside the browser. We don't use data URIs for anything on Firefox for iOS, but the user may navigate to a data URI manually. Thinking about it more, we may want to pass true here instead of false; I can't think of a reason why we shouldn't be able to bookmark a data URI (and desktop allows it).\n\nHow come we still display the actual http url in the address bar though?\n\nA reader mode URL is something like this: http://localhost:1234/reader-mode/reader.html?url=http://www.example.com. That's not a very attractive URL, and there's no reason to expose the localhost URL to the user, so we simply show the URL of the original page (even though that's not the actual URL of the content).\n. Accessibility labels are user-facing strings, so this should use an NSLocalizedString, and the label should be something that helps to identify this cell (such as the title -- see Safari).\n. Since isAccessibilityElement is false, it doesn't really make sense for this element to have a label; semantically, accessibility labels are user-facing strings used in accessibility environments as mentioned above.\nIf you want an ID that is visible to code/tests but not the user, accessibilityIdentifier is probably what you're looking for (though it should be used sparingly; if possible, try to make tests that work with accessibility labels so that we're testing the actual user-exposed parts of the app).\n. Nit: we're using try? to do an optional unwrap, but then force-unwrapping it here. Might as well just do try!.\n. I find this for loop difficult to read since it's unclear what possibility and possibilities mean. Perhaps rename possibilities to possibleLocales?\n. if let regions = json[\"locales\"][possibility].asDictionary{\nThen you can use regions below instead of json[\"locales\"][possibility].\n. Style nit: no parentheses around if condition.\n. Style nit: no trailing semicolons\n. Should have a break in here, right? Otherwise, won't more generic possibilities replace the more specific ones?\n. It'd be nice if we could get the tests to work by using the actual labels instead of IDs, but I suppose this is fine for now if that's not a straightforward change.\n. I'm not sure what these Regular and Prominent styles are, and I can't find much documentation about them. I arbitrarily bucketed them into the light style, but let me know if you can figure out what these are...\n. Nit: no need to define this initializer since this is a struct.\n. Nit: StoragePrefTests -> StoragePerfTests here and throughout\n. Pref -> Perf\n. The localization ID is a clue to help localizers determine the context of where this string is used, so \"AS\" might not be very helpful since localizers won't know what that stands for. I see we already have a number of other string IDs with \"AS\" already, though, so hopefully they'll be able to figure it out.\n. Nit: revert these added trailing whitespace changes\n. This userInteractionEnabled flag feels like a hack. Having a flag works around the bug, but why is this bug happening in the first place?\n. This looks pretty suspicious to me -- I'd bet that this is the problem.\nThe completion callback is called when the updates are done, and the finished flag given to the callback tells us whether the animation finished. We don't actually care whether the animation finished, though; we only care that the updates happened, which means we want to hide the view controller. In other words, even if the animation was interrupted and finished is false here (which is probably what happens when menu is tapped), we still want to pop the view controller when we're done; otherwise, it'll never get removed.\nI see we do similar things in other places of our code (see SELdidTogglePrivateMode in this same file). I'm pretty sure we should remove the if finished condition in all of these -- the post-animation completion code shouldn't be dependent on whether the animation was or wasn't interrupted.\n. OK. Thanks for checking! I would've tested for myself to see if that was the cause, but I'm having trouble reproducing this bug for some reason...\n. Nit: newline for trailing }\n. coply -> copy\n. Nit: This is lazy, but widgetStackView isn't. For the sake of consistency, I'd make them both lazy or non-lazy (don't think it matters much either way).\n. Remove\n. You can reduce this to make.edges\n. I'd reduce this to:\nmake.top.equalTo(button.snp_bottom)\nmake.leading.trailing.bottom.equalTo(self)\n. Prefer leading/trailing over left/right for RTL compatibility.\nAlso, you can chain these together if you want (make.leading.centerY).\n(Same comments for other constraint definitions below.)\n. remake -> make\n. remake -> make\n. Don't think this is the right place to put this -- PrefsTests are about testing the prefs API itself. This would probably make more sense in HomePageTests.\n. readerModeButton already has an accessibility label (\"Reader View\"), so let's use that for tests. In general, it's better to write tests against accessibility labels rather than identifiers since labels are user-facing, and UI tests are designed to simulate user actions.\n. Same\n. Same\n. I also don't think we need to create an ID for HomePageDialog -- can you just look for labels/strings that are visible?\n. Nit: Keep this newline here since there's a comment below.\n. I don't think running UI tests in other languages is one of our goals; these tests are for UI correctness, not string correctness (we have separate screenshot tests with localizer review for the latter). But even if we do decide to run tests in other languages, I don't think identifiers are the right solution. See this thread for more details.\n. This looks like the same code as layoutSubviews. Could we replace this with a layoutIfNeeded() (calling setNeedsLayout() before that if required)?\n. I'm looking at the implementation for extractDomainName, but I'm not exactly sure what it's supposed to do. Here's what I've found:\nwww.google.com becomes google\nsearch.yahoo.com becomes search.yahoo\ngoogle.co.uk becomes google.co\nThese results don't seem very consistent to me -- sometimes the subdomain is stripped out (www.), other times it's not (search.); sometimes the full TLD is stripped away (.com), other times it's not (.co.uk).\nGiven the variability of domain names, I think string parsing alone won't be enough reliably to detect the TLD without more information. Have you tried something like url.publicSuffixFromHost(url.host, withAdditionalParts: 0)? (Not sure why this method takes a host since it's an extension on NSURL, but that's another bug). That uses our effective_tld_names.dat list to strip out known TLDs.\n. I'm having trouble following what this change is for. What does this fix? What's wrong with using locationView.url? Comments might be useful here to clear this up.\n. Makes sense! Would you mind adding a comment in code explaining why we can't use locationText.url directly here?\n. Apparently SLD is a real thing, so that name works for me :)\nNit: how about a dynamic var rather than a func?\n. \nYou can replace this condition with the guard let possibleKeywordQuerySeparatorSpace = ... from below. Then you won't need to check twice for the space, and you won't need to force-unwrap the result.. Nit: Please use named parameters (rather than $0) for multi-line bodies.. I'm confused--what's going on here? At this point, we've already called getURLForKeywordSearch, and we have a URL with the keyword engine (urlString). Why would we pass the URL from the keyword as a query to the default search engine?. I don't understand the changes in this file. If we're doing a keyword \"search\", we should get the URL template from the bookmarks, then replace the %s from the bookmark URL with the search term. We shouldn't need to make any changes to search engines.. > The change in SessionRestore.html was necessary because if you navigated back to the home page and then restarted the browser (so you have some history). Your history would be available but when you went forward the page would not load. I have no freaking clue why. Webkit would just refuse to load error/error.html with no errors or callbacks\nYeah, strange...I can reproduce this too. One of the reasons we have this check is to prevent error pages from snowballing each time the browser is restored; i.e., close/reopen the browser several times, and a new layer of http://localhost:6571/errors/error.html... will be prepended to each page each time.\nIt seems like we need to load error.html for session restore to work, so how about this: rather than using the URL as-is for all localhost origins, only use the URL as-is if it's an error page (that is, check document.location.origin and the path). That way, we're always guaranteed to load an error page, and they won't pile on themselves.. Why filter sites here at all? Shouldn't the back/forward UI match exactly what would happen if we were to use the back/forward buttons?\nRather than showing the full error page URLs, though, we should extract the actual page that the error page is pointing to (using ErrorPageHelper.originalURLFromQuery()). If we show reader mode URLs in this list (which I think we should), we should do the same using ReaderModeUtils.decodeURL().. I think the function you're talking about (getURLFromTemplate) does way more than we need -- it should just be a simple encoding of the search terms. Something like this should be enough:\nlet escapedQuery = query.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.SearchTermsAllowedCharacterSet())\n(SearchTermsAllowedCharacterSet should be moved to NSCharacterSetExtensions.swift).\nKeyword searching isn't related to OpenSearch engines, so we should probably avoid shoehorning this code into OpenSearch.swift.. Same here -- arbitrarily using a different engine to morph it with a different template is a red flag that we're doing something wrong, I think. I suspect this would all be simpler if we just inlined the encoding.. (My other comment is a bit buried; see it here.). Random idea: I wonder if we should add assertionFailure to our log.error implementation so we can always catch errors in debug builds.\nEdit: Except it's XCGLogger's method, not ours, so we'd have to create a separate method to wrap it. Bummer.\nDouble edit: Except log is our custom RollingFileLogger class, which derives from XCGLogger, so we can override it there. Yay!. Yeah, it looks like we use log.error in lots of cases that are bad, but out of our control, so we probably wouldn't want to terminate. XCGLogger actually has a higher severity level, log.severe which we don't use anywhere --  asserting here would make it equivalent to Android's log.wtf.\nThat, or perhaps a separate method or overloaded implementation of error that takes an additional Bool for assertions. Anyway, filed bug 1321331 for this.. Please remove these two lines -- this isn't a search on a search engine, so we shouldn't record it as one (we used to erroneously record URL entries as searches, but this was just fixed today in bug 1319572).. Remove semicolon. While here, might as well do this properly: if searchURL?.isErrorPageURL() ?? true. Just thinking out loud: it'd be nice if getAboutComponent returned an enum rather than a string. Can fix this in a separate bug though.. Should we just get rid of this now? We could just do tab.url?.displayURL everywhere.. I agree this doesn't make sense. Let's just remove it rather than adding a comment about it?. I think the main thing this is supposed to cover is the \"home panels\" case since those URLs will return nil, and returning \"home\" here would be more a11y-friendly than nothing at all. So maybe replace this with an explicit check for a home URL, and return \"home\" in that case?. Wouldn't a computed property make more sense than a function here?. Same. Also, it might not be worth having this in the first place; we only use url.displayString() in one place. Maybe just remove this and use url.displayURL?.absoluteString?. Same question re: computed property.. And here, with all the others below.. Looking through the domainURL implementation, I see a couple of issues:\n1. We use normalizedHost, which drops the www/mobile/m prefix for the domain. This is fine for display, but I doubt we want to do this for the actual URL used for navigation.\n1. We drop the port in domainURL. Not a huge issue since non-80 ports are uncommon, but this will make unit tests more difficult.\nSpeaking of unit tests: will this break any existing tests? If not, that means we aren't testing top sites, so we should probably add some.. Same comment as before -- let's do the right thing rather than leaving a comment that we should change it. I'd be OK even leaving the code as it is, just maybe with a comment about why we're doing this (e.g., \"If the tab doesn't have a displayTitle, we're likely on a localhost page. Set the accessibility label to the about component (e.g., \"home\"), which is more helpful than nothing.\").. Nit: remove. Where? I see tests removed here and in AboutUtilsTests.swift, but I don't see tests added anywhere in this PR.. Some questions:\n\n\nWhy do we need to call setupBookmarkSource in both viewDidLoad and viewWillAppear? You said viewWillAppear isn't always called, but I think viewDidLoad is always called, so I don't see why we'd need to call this in two places.\n\n\nWhen/why isn't viewWillAppear called? I wonder if this is related.\n\n\nWhy were we using viewWillAppear in the first place (rather than viewDidLoad)?. This change could result in us showing some ugly localhost URLs if we make it past this if condition but there's no lastTitle. What about something like this?\n\n\n```\nguard let lastTitle = lastTitle, !lastTitle.isEmpty else {\n    // Don't expose localhost urls.\n    guard let url = self.url, !url.isLocal else { return \"\" }\nreturn url.displayURL?.absoluteString ?? \"\"\n\n}\n``. The four lines above this (with thecount == 0`) are redundant now, so I'd remove them. You'll probably want to change your code to something like this:\nif normalTabs.isEmpty {\n    let tab = addTab()\n    if selectedTab == nil {\n        selectTab(tab)\n    }\n}. No, because if we previously had a private tab selected, we don't want to lose that selection.. You can remove the else conditions here and shorten this to return tabState.url?.isValid ?? false.. I'd like to avoid creating another extension on URL if possible. Isn't isValid equivalent to !isLocal?. I suppose there are cases where isValid would false return where !isLocal would not. I guess we can keep the extension here, but let's name it something more descriptive (local URLs are still valid URLs). How about isExternalWebPage?. ",
    "grgcombs": "That's less complicated than a UIScrollView that adjusts insets?\nConditional visibility of views based on their ability to fit within a view with all the relevant constraints seems like a bigger headache. Would you be calling the (expensive) system layout size methods more than once?  The nice thing about the scroll view approach is that it only lays out content with constraints once and then pushes an inset on keyboard. No conditional visibility logic needed. \nBut maybe I'm over thinking it?\n. ",
    "raheelahmad": "Please use optional chaining instead of forced unwrapping, for the sake of safety.\nSo, this:\nswift\ncell.nameLabel?.text = ...\ninstead of:\nswift\ncell.nameLabel!.text = ...\n. ",
    "nghialv": "Thanks @raheelahmad . I have just changed to optional chaining.\n. ",
    "hikari-no-yume": "This works for me and fixes building, will it be merged?\n. @thebnich whoever merges it could do this, mind\n. ",
    "rnewman": "Thanks for taking the time to do this, but this is third-party code, so we won't take this pull request.\n. Yeah, IIRC arc4random draws from the same entropy pool as SecRandomCopyBytes.\n. This hit a bug:\nhttps://devforums.apple.com/thread/257509\n. @st3fan, any thoughts on this before I land it?\n. Merged.\n. The first commit in that series is on master now; you can rebase with glee.\n. Most of the design hasn't even been nailed down yet. We'll be supporting iPad eventually.\n. And we encourage you to open pull requests for any work you do that you'd like to incorporate into the mainline.\n. These all landed in one form or another.\n. Replaced by #91.\n. I don't believe we'll add support for multiple accounts in the short term, but we might support switchable profiles eventually, which will effectively do the same thing.\n. @wesj your push seems to be missing sqlite itself, at least on some architectures:\nUndefined symbols for architecture x86_64:\n  \"_sqlite3_bind_blob\", referenced from:\n      __TFC6Client18SQLiteDBConnectionP33_C63D02BE667AD05513AD0E66E20BA0D74bindfS0_FTGSaGSqPSs9AnyObject___4stmtVSs14COpaquePointer_GSqCSo7NSError_ in SwiftData.o\n  \"_sqlite3_bind_double\", referenced from:\nCould you append a commit to this pull request that adds whatever you have locally (or otherwise point me to the file)?\n. Deprecates #99.\n. Hmm, poorly worded docs!\n. I think it's safe to leave that flag set for the extensions themselves, so leaving that in the commit.\n. Yeah, the concept makes sense, which is why I was a little confused by the docs in the first place!\nI noticed that Xcode kinda thought the extensions had that setting already, sometimes showing No and sometimes Yes, but after some effort it stuck, and they're new in the diff, so shrug. Yay Xcode.\n. LGTM. This is the same approach we take for measurements in FHR on Android, by the way.\n. Please use Bytes.generateGUID() instead of NSUUID().UUID.\n. This looks good to me. Please run this past @ncalexan; I recall he was doing some profile-related work that might intersect with this.\n. Yeah, generateGUID is super fundamental, so it should be in our earliest utils-ey place.\n. My only real concerns here:\n\u2022 Querying the history table. I need to pull this out and get it into a single query string that I can read, so I can do some analysis and noodle a bit.\n\u2022 Running N queries where one will do. This is particularly bad if you're doing four non-overlapping date ranges, covering the entire DB, but to compute each range requires trawling the whole DB.\n. Worth noting, too: part of optimizing these queries will be adding indices.\n. We have an etherpad here:\nhttps://etherpad.mozilla.org/rnewman-history-sql\n. Pah, one snuck in.\n. This looks good. I don't like the amount of project file churn that's smeared throughout, so if you can fix that I'd be less scared. Otherwise, see comments inline.\n. The only thing I'd suggest thinking about: do we want to allow null titles, given that that's the reality of the data we're modeling?\n. Yeah, I think I agree with you.\nMostly this is a vague feeling that it seems like doing a little bit of an end-run around the type system, and it means that there are some cases where the title is a string, but we're not going to show it.\nI think your point that we'll want to ignore empty titles for other reasons is enough to swing it \u2014 we won't just be switching null checks to empty string checks, because the empty string checks will be there anyway.\nI don't think there's any practical value in distinguishing.\n. This still needs to have the project added in Xcode, but I've run out of time.\n. Landed.\n. I think the 'pre' commits for this can land (maybe not the TokenAndKeys, depending on how quickly you get your account stuff landed, @ncalexan), and maybe everything should land to avoid bitrot. Thoughts?\n. Work so far merged to avoid problems.\nLooks like GH doesn't want me to keep reusing the pull request, though\u2026\n. Merged, complete with moving Bytes into Shared.\n. Merged.\n. fa835ea\n. Merged.\n. This looks good to me. Let's find out if it works!\n. Ship it!\n. Landed.\n. This is enough to get us to a Ready state, where we have keys and meta/global. Doesn't do any of the fancy stuff yet.\n. Landed.\n. Merged.\n. The storagey parts have to live in Storage; Sync is a layer below Client.\nPerhaps pass the FileAccessor from the profile into the persistence layer; get the best of both worlds.\n. I think this needs a rebase/cleanup...\n. This looks nice and simple, with the obvious caveat that next week we're gonna need to use something else to persist tabs (Bug 1153330) so that other parts of the app can get to them, and persist more data than just the URL.\n. Landed.\n. Merged.\n. Now that I'm implementing client and tabs syncing, I'm going further with this, cutting RemoteClient and the RemoteClientsAndTabs interface up to acknowledge that these things appear at different times and different rates. That'll be a later pull request, perhaps.\n. Obsoleted by #328, on top of Sync 1.2 changes.\n. Thanks; switched to using that.\n. Landed. I'll file a good-first-bug to address nits.\n. Merged.\n. Landed. Will shuffle remaining commits into a new PR.\nhttps://github.com/mozilla/firefox-ios/commit/2824e8b62f83a2450b5735efd536f5141b807c81\n. We actually do tie tab storage more explicitly to the account, right there \u2014 you get access to tabs via Sync and only via Sync.\nWe need to finish doing so, but that's as simple as making the no-account state return nothing, rather than falling back to querying the DB.\nEventually we'll realize my vision of having access to most profile data be intermediated by Sync.\n. See #339.\n. This looks good to me.\n. Landed apart from the experimental patch.\n. Ship it!\n. lgtm\n. The client record timestamp is likely to be either a week or two old, or very recent if you use Send Tab.\nThe tabs record timestamp itself will be the time you last synced\u2026 but that's a much bigger change.\nAt least one of the tabs in the tab bundle will be the currently open tab, and thus will have a very very recent timestamp; taking the max of open tabs is the approximate last sync, because sync clients upload tabs on every sync.\nWhat this doesn't account for: the per-tab-item timestamps (lastUsed) are device timestamps, not server timestamps.\nStill, this is a reasonable stopgap, and it also pushes the timestamp logic into ClientAndTabs, where it's easier to switch out for tab record metadata.\nMerged ce8e099.\n. Sounds like that resolves this issue.\nI'd ask that you not 'camp' any app IDs that you don't own \u2014 grab your own namespace.\n. Closing this 'cos it needs work. Tracked in Bug 1154139.\n. Landed.\n. I cherry-picked the UI stuff into rnewman/db. The rest is obsoleted by that branch. Sorry for the churn, wes!\n. Sure!\n. Sorry for taking so long to get to this review!\n. Merged with cleanup: 465c4e4.\n. Superseded by #427.\n. Danke. The original branch in rnewman/db doesn't delete anything until much later; I kept that around to show some side-by-side.\nI'm going to get some more of the few disabled tests back up and running before landing. Thanks for the thorough review!\n. I'm rebasing this for landing here:\nhttps://github.com/mozilla/firefox-ios/tree/rnewman/db-rebase-landing\n. Landed: https://github.com/mozilla/firefox-ios/commit/6db9f8b2a2b9f5cd7b74a941f836c14318d378f6\n. Can we have an easy method for disabling this during development? \"No key, please.\"\nAside from that, some really important questions around lifecycle:\nWhen a user backs up and restores their phone, does the keychain always come with it? I really really want to avoid users saying \"hey, all of my data is gone, how do i get it back?\"\nWhat's the keychain access flag for the key used here? (https://developer.apple.com/library/ios/documentation/Security/Reference/keychainservices/#//apple_ref/doc/constant_group/Keychain_Item_Accessibility_Constants)\nThis answers the question: if the app is inited in the background with the phone locked (e.g., in response to a notification, or for a scheduled sync), can we get the key to access the DB?\n. Some comments on the commits. Higher-level comments:\n\u2022 I think this would feel a little safer if we did it in baby steps: e.g., switch sqlite implementations without adding encryption, then extend and upstream KeychainWrapper, then use both.\n\u2022 I think we need a firmer understanding of backup/iCloud/restore/extension access to Keychain before we commit. @st3fan probably has most of this in his head already, so perhaps chat with him?\n\u2022 And on a related note: we can likely reduce our risk here by putting passwords in a separate database, rather than just a table in BrowserDB.\nNot only does that avoid the need for us to encrypt the whole world, and the need to encrypt the whole world with the same key, but it also will make debugging easier and more polite \u2014 you won't accidentally send your passwords to a developer when asking them to debug your history!\nOn top of that, we get the usual advantages of failures not necessarily destroying both sets of data, avoidance of potential contention, etc. at the cost of a little more memory.\nThoughts?\n. https://ci.fxios.allizom.org/xcode/bots/failed/53EA4E0\n. Landed.\n. Landed.\n. Because we're skipping this for v1, I'm going to close this PR. We'll continue to track this in the bug, and later we can either reopen this PR or rebase and open a new one.\n. Note that this is necessary but not sufficient for Bug 1162773: we also need to blow away FxA/Sync metadata (keychain contents, prefs, etc.).\nWorking on that now.\n. Landed.\n. Part of the reason for moving favicons, history, and bookmarks into a single BrowserTable is because they're deeply intertwined \u2014 that's why desktop just calls them Places.\nFrom that perspective, SQLiteHistory is really a fine place to put this; it's just named \"History\" by accident, and if I'd had time SQLiteBookmarks would be renamed to make it clearer that it's just there to manage the bookmark model that backs the UI, and SQLiteHistory is really SQLitePlaces.\nSo: rather than going up and down the stack, is there a good reason not to add:\nUPDATE \\(TableBookmarks) SET faviconID = ? WHERE url = ?\ninto addFavicon:forSite: and run it unconditionally (eventually within the same transaction)? Much cheaper than calling isBookmarked and then doing the update, and then any time a favicon is set for a site, matching bookmarks will be updated automatically.\n. :moneybag: \n. Three comments that'll make this a fair bit smaller and simpler.\n. With the simplified clearBookmarks, LGTM.\n. Sidenote: if you want to run things in sequence, use walk instead.\n. Wes: I sketched out what might happen: rnewman/clearable.\n. Comments addressed and merged.\n. What happens to the right and left images when running in RTL locales?\nIf we never use the left image (yet), perhaps comment that out to avoid allocating an extra UIImageView per row?\nOtherwise, looks good modulo comments.\n. lttm\n. Done.\n. This looks like the right direction. Don't forget to forbid pull-to-refresh if there's no account!\n. Triage result: let's split this to be two bugs: (a) skip over rapid redirects, and (b) do something smarter for the slow gmail issue.\n. Merged.\n. Superseded by #620.\n. lttm\n. This is done and landed.\n. @ncalexan, @sleroux: could you take over reviewing this?\n. @bkmunar: could you clean up this PR, rebase it, and get some more feedback? It's best if you rebase rather than merging from master.\n. Blank that timestamp in onRemovedAccount in BrowserProfile.\n. No, because you're writing directly into self.profile.prefs. Sync only manages the sync prefs branch under that.\n. lttm\n. Reviewed by @st3fan. Still waiting on @ncalexan.\n. Merged flat and I'll land as part of #660. Thanks for the reviews!\n. It's also possible to move the tab opening into AppDelegate itself. I tried this but the tab counter didn't update, and I couldn't be bothered to fix it. Scream if you prefer that, @st3fan.\n. This was fixed: https://bugzilla.mozilla.org/show_bug.cgi?id=1182620.\n. f+: simplify and add lightness!\n. See #692.\n. Could you rebase this (probably this is trivial if you remove the project file changes), remove the project file changes, and clean up the commit messages? Something like\nBug 1178129 - Truncate long URLs in context menu.\n. Surely top sites and remote tabs both care?\n. Lgtm on a quick skim, modulo obvious comments :D\n. Just a few bits of tidying to do, then you can merge this.\n. Robin's comments:\nChange the color from HighlightBlue to Grey. Change the weight from light to medium so it stands out more as a button. (I may change my mind about the weight, but give it a shot).\nChange the \"Syncing\u2026\" color from DestructiveRed to orange, like we use on the progress bar. \n. I tested this, and it works, but I actually don't know why! We close every tab. We set the index to 0, not to -1. At some point something opens a new about:home tab. But I don't see what does it!\n@sleroux, could you take a second look before merging this?\n. This is fucking solid, Emily. Roll it up, fix those comments, and if it passes tests and manual testing, no need for re-review. Land it and have a coffee.\n. I don't think we can feasibly address this for 1.1. At some point we need to revisit favicons in general.\n. Request: split this into \"add breakpad\" and \"use breakpad\" commits; and see if we can do something less painful than checking in 1000 files of breakpad source.\n. Tests, please!\nIn particular, you want stuff like:\nXCTAssertEqual(\"abcd\u2026fgh\", \"abcdefgh\".ellipsize(maxLength: 7))\n. https://github.com/mozilla/firefox-ios/commit/0c14a49a0ab1761365fe6d39b5f33150765efb7e\n. This worries me a little bit, but I'm fairly sure that it's safe.\nWhat happens when this code runs in an extension? Do we have access to the same profile dir? I assume yes, but\u2026\nCan we log here, too?\nWhat do you think about not clearing general prefs, just the Sync account?\n. Perf difference is now within error bars; we use a covering index for the new query. I added a perf test and another little test for my own sanity.\n. Landed.\n. I do see this.\n. This looks pretty sane to me. Lemme know early tomorrow if you're still not seeing things sync.\n. Looks good to me with those addressed. If it works, ship it!\n. Addressed review comments and fixed a bunch of bugs in #798.\n. Rebased and landed. e0c1fbd\n. Should we be escaping single quotes too?\n. OK, landing this seems less risky than not landing it.\n. 975ee38\n. Merged as https://github.com/mozilla/firefox-ios/commit/59557a69debaac99c362e49db78ba8c3c37c56b0 .\n. Obsoleted by #852.\n. Let's do it, but let's make sure to sit on the upstream issue :)\n. @sleroux you got the bug number wrong. Bug 1188947.\n. @thebnich can you wrap this up and land it, either now or for 1.1?\n. Rebased and landed: afd9981.\n. Needs rebase and a couple of changes, but otherwise a nice minimal fix; thanks!\n. Sounds good, Johennes; thanks!\n. LGTM, Johennes!\n. c2655c3\n. 632df85\n. Did you try a Clean build? Sometimes missing artifacts like this are resolved by just building a couple of times and hoping for the best.\n. See 'Run on a Device' here: https://github.com/mozilla/firefox-ios/blob/master/BUILDING.md\n. Looking good with some changes.\nTry to crush this branch down so you kill that merge commit and the backout \u2014\u00a0just keep the last commit on top of current master.\n. Can you also find a spot to call closeFile() so we don't leave an fd open when we're backgrounded?\n. Looks good with the exception of measuring and improving the roller.\n. Yes. IMO:\n- Change the preamble to the MPL2.0 preamble.\n- Add a comment underneath crediting Nikolai, and pointing to the NRFoundation repo.\n- Copy Nikolai's comment from the issue you filed into the Bugzilla bug.\nThen we're good to go!\n. Fixed indent and merged. bafb839\n. I haven't tested this, but LGTM.\n. 33248b8\n. LGTM.\n. This approach won't work when Sync runs from an extension: our app delegate doesn't exist.\nThis needs to be pull, not push.\n. @atulagrwl: in the interests of time, I cleaned up my nits and merged directly: take a look at 3a910bc to see what I changed. Thanks for the PR, as always!\n. @st3fan I think this one needs your eyes.\n. a33d99c\n. b48f840\n. LGTM\u2026 with a cleaned-up commit message :)\n. 63da9f8\n. @thebnich and @tecgirl r+ed this. Ready to go.\n. 5c49889\n. r=sleroux\n7998bc7\n. See bug comment. I don't think we should take this approach.\n. Code is fine if UI folks are happy.\n. Wow, that is Good To Know. We probably fuck this up elsewhere, too, but this will do for now.\n. r+ from @ncalexan. Ping on one or both of @st3fan and @sleroux, then land.\n. 78a5f73\n. LGTM.\n. 0e839ed\n. Reviewed by @st3fan on IRC.\n. Old : New\n\n. Sounds fair!\n. I presume this is waiting on @mconnorto to review?\n. By which I mean @mconnormoz, of course. \n. Cleaned and landed: 0a649b1\n. e5ddcc6\n. shrug\n. LGTM. Thanks for the patch!\n. LGTM.\n. I'd want to see a query plan and some perf measurements for this before moving forward. Best-case this is still a single table scan, but it's doing a linear string match for each substring, and who knows what the worst case is.\nBug 1194325 is likely to make our perf slightly worse, not better, so we have to be conscious of the costs and benefits.\nI'd also like someone to figure out what our FTS story is.\nIt's also worth thinking about whether or how this can interact with ranking, and whether it's worthwhile introducing the concept of matching the whole entered substring.\n. To flesh that out a little more: whole-entered-substring is what matters when searching in your history for the band \"The The\". (This particular example is also about noise words, but you get the gist.)\n. We reworked the frecency calculation recently, so I decided to try this out using the current query. Timings against my own history DB are comments in the SQL. My history has about 8000 rows, with about 700 matches.\n```\nSELECT *, (((2 + localVisitCount) * (2 + localVisitCount)) * max(2, 100 * 225 / (((1439929399333085 - localVisitDate) / 86400000000.0) * ((1439929399333085 - localVisitDate) / 86400000000.0) + 225)) + remoteVisitCount * max(1, 100 * 110 / (((1439929399333104 - remoteVisitDate) / 86400000000.0) * ((1439929399333104 - remoteVisitDate) / 86400000000.0) + 110))) AS frecency\nFROM (\nSELECT history.id AS historyID, history.url AS url, title, guid,\ndomain_id, domain,\nCOALESCE(max(case visits.is_local when 1 then visits.date else 0 end), 0) AS localVisitDate,\nCOALESCE(max(case visits.is_local when 0 then visits.date else 0 end), 0) AS remoteVisitDate,\nCOALESCE(sum(visits.is_local), 0) AS localVisitCount,\nCOALESCE(sum(case visits.is_local when 1 then 0 else 1 end), 0) AS remoteVisitCount\nFROM history\nINNER JOIN domains ON domains.id = history.domain_id\nINNER JOIN visits ON visits.siteID = history.id \nWHERE\n(history.is_deleted = 0)\nAND\n-- Run Time: real 0.025 user 0.015640 sys 0.003440\n((history.url LIKE \"%Google%\") OR (history.title LIKE \"%Google%\")) AND ((history.url LIKE \"%Search%\") OR (history.title LIKE \"%Search%\"))\n-- Run Time: real 0.030 user 0.016024 sys 0.004565\n--((history.url LIKE \"%Google Search%\") OR (history.title LIKE \"%Google Search%\"))\nGROUP BY historyID)\nWHERE (localVisitCount > 0) OR (remoteVisitCount > 0)\nORDER BY frecency DESC LIMIT 1000;\n```\nYou'll see that the new \"and-or\" approach actually takes less time. I can think of hypotheses for that, but none that make much sense!\n. A pathological example, searching for \"a www\":\n```\nSplit (2,900 results):\nRun Time: real 0.073 user 0.028277 sys 0.003515\nCombined (old) (0 results):\nRun Time: real 0.007 user 0.007046 sys 0.000705\n```\nSo you can see that the split approach is much slower if one of the terms \u2014 probably the first \u2014 is very non-specific, and the combined approach naturally is quicker if it doesn't match many rows.\n. It's probably not worth introducing additional complexity to the splitter. Most of the query time is proportional to the number of results, because once we're doing a table scan \u2014 and we are \u2014 the expense is in ordering and preparing the cursor.\n. I finally \u2014 finally! \u2014 cleaned this up, fixed the behavior, and landed this. Thanks for your patience, Johennes!\n5238e87\n. See #940 for the other approach.\n. We landed #940.\n. We cherry-picked part 1:\nhttps://github.com/mozilla/firefox-ios/commit/b55570b318854b0df63af13e4879291eeedb7536\nand we'll leave part 2 until we need it.\n. a4a24a2\n. LGTM, but should we muffle any other codes?\n. LGTM.\n. This was a testing approach.\n. Wikipedia assets: https://github.com/mozilla/firefox-ios/commit/66f640af7288cfe2a792bbb44d1f9617459cd27f\n. Search engine change: 50df012\n. Thanks for the PR!\n. Worth a shot. (Fold those commits!)\n. a75e0fb\n. This looks sane to me. See comments for two tweaks you might want to make.\n. LGTM with that one change.\n. We should probably not land this until v1.0 is approved.\n. This'll be safe to merge if we don't mind a little pain if we have to resubmit.\n. 1c95a56\n. Landed.\n. N.B., don't just hit the merge button! We need to branch v1, write some docs, do some tagging, etc.\n. We switch on NSURL.scheme in a bunch of other places. Quick audit, please!\n. Otherwise, LGTM.\n. LGTM\n. b44dcec\n. LGTM with possible tidying.\n. LGTM. Don't forget the master version.\n. Apparently that would still be a lurking bug \u2014 the compiler would optimize away the assignment just as we did!\n. f80cd8d\n. v1.0 branch: rnewman/proper-domain-v1\n. Just waiting for thumbs up from @tecgirl.\n. I love it.\n. I don't think this changes anything much functionally from the first version of your PR. It's much easier to read, though!\nThe cursor we return won't yield any results until a second query has run (indeed, we consume it immediately in order to decorate it), so this doesn't asynchronously badge rows \u2014 if the second query takes a while, we won't show anything at all until it's done. This is slightly slower than if we just wrapped the original query in another layer of joins (albeit easier to read and reason about)!\nNeither does it precompute anything about bookmark state, which is the most efficient solution, but as you note would be much more invasive.\nIf you've done timing on, say, an iPhone 5 and can say \"nope, that second query takes a millisecond, so it's not worth changing\", great; just fix these things and land. If this round-trip is adding 100msec to an awesomebar completion for \"www\", then we probably need to go 'round again.\n. Branch patch in rnewman/changes-bandaid-v1.0.\n. v1.0: 8d1d59a\nmaster: d2c1aa2\n. Before and after, so @tecgirl doesn't have to build while she's traveling:\n\n\n. 26e180d\n. Tests fixed!\n. This was landed and re-enabled in 71449b8.\n. Darrin uir+'ed on IRC.\n. https://github.com/mozilla/firefox-ios/commit/2deb2ea2b8faca7eef390ea6edcc0d289e3e53d5\n@tecgirl liked the width change. Looks good from 4s through to 6+.\n. 9a5eecc\n. Filed http://openradar.appspot.com/radar?id=5586457989218304\n. Good idea. I made that change in c7a1b66. It's not immediately enough to simplify things, because there would still be a capture of a self, but we can revisit this. (I don't want to rejig things again right now in case I break something else!)\n. Rebased and landed.\n. Without this patch, launching with a Bluetooth audio device playing from Mac:\n2015-09-29 10:45:49.962 Client[31870:4394762] 10:45:49.962 WARNING:  40: ERROR: couldn't get default input device, ID = 0, err = 0!\n2015-09-29 10:45:49.964 Client[31870:4394762] 10:45:49.964 WARNING:  40: ERROR: couldn't get default output device, ID = 0, err = 0!\n2015-09-29 10:45:49.964 Client[31870:4394762] 10:45:49.964 ERROR:    708: Error finding valid input or output devices!\n2015-09-29 10:45:49.964 Client[31870:4394762] 10:45:49.964 ERROR:    312: error -66680\n2015-09-29 10:45:49.964 Client[31870:4394152] 10:45:49.964 ERROR:    >aurioc> 807: failed: -10851 (enable 2, outf< 2 ch,      0 Hz, Int16, inter> inf< 2 ch,      0 Hz, Int16, inter>)\n2015-09-29 10:45:49.964 Client[318702:4394740] 10:45:49.964 ERROR:    312: error -66680\n015-09-29 10:45:49.993 [Debug] [Profile.swift:579] beginTimedSyncs() > Starting sync timer.\n2015-09-29 10:45:50.125 Client[31870:4394740] 10:45:50.125 ERROR:    130: * * * NULL AQIONode object\n2015-09-29 10:45:50.125 Client[31870:4394740] 10:45:50.125 ERROR:    753: Can't make UISound Renderer\n. LGTM with some capture and guard tweaks.\n. 5372d71 tracks the model stack, not the folder stack. That makes things work correctly.\n. Fixed and landed: 751bfbe\n. I'll chew on this tomorrow. If you don't get to the rebase on top of current master, I'll give it a shot and push to a new branch.\n. The conflicts so far are in DownloadTests, so non-trivial.\n. Untested rebase in https://github.com/mozilla/firefox-ios/tree/rnewman/nalexander-meta.\n. > I haven't tested node re-assignment yet. I think it \"just works\", but we'll need to test it.\nYup \u2014 particularly engine configurations persisting from the previous server's meta/global.\n\nI haven't done X-I-U-S=0 for fresh start yet. We'll have a new RaceAvoidanceRequired terminal state after we handle the 412 results.\n\nThat makes sense.\n\nI haven't handled uploading a modified meta/global at all. I think we can avoid it entirely, like we discussed. Do you concur?\n\nYes. We upload in three situations:\n- When there's a blank server and we know some details from an old m/g.\n- When there's a blank server and we don't. In theory we could get there before another client, resulting in a collision: another client might arrive and enable engines the user had opted out of. In theory, declined should fix that. In practice, we might opt to only upload m/g immediately if we just created a new FxA.\n- When the user makes a change. As we discussed, I think we should download-change-upload entirely separately from the state machine flow.\n\nI could be convinced that tracking meta/global and crypto/keys 'modified' stamp is better than the fetch X-Weave-Timestamp. Better for X-I-U-S, for sure.\n\nI think we should use the collection timestamps to decide on downloads, and either use the record timestamp to avoid needless processing, or not bother doing so at all.\n. There's a shower of comments above. The overall flow looks good to me, so long as we correctly persist state across node reassignments, and this rebases correctly on top of my own use of the MockSyncServer in DownloadsTests.\nTracking resets can be improved, but it's your call whether you want to spend the time to rework what you have.\n. This is part of Nick's stack: https://github.com/ncalexan/firefox-ios/commit/873d8e9511ed3acc6783c376e3021937f3042747\n. This does three things:\n- Removes newer from offset storage requests.\n- Rejigs management of folder children to avoid hitting variable list limits.\n- Turns the feature back on.\n. @tecgirl could you give this a shot?\n. Demonstrating fake strings are subbed in:\n\n. > I'm also getting a test failure: SyncTests -> DownloadTests -> testDownloadBatches -> line 96\n\nNot related to this bug, fortunately, but I\u2019ll file one to fix it :)\n. There's a bit more than that: we're also not setting X-Last-Modified correctly, in that it changes based on the items returned.\n. This is rebased, and GitHub naturally shows the commits in the wrong order. Please take a look at them locally; everything that doesn't have a part number will be folded into the previous commits for landing, but I've kept them broken out for easier review.\n\nThis isn't as well-tested as I'd like: I'll do manual testing tomorrow, but for now we at least touch one of the boilerplate synchronizers and look at the real SQL implementation wiping for clients.\nNote that I made a couple of changes: we don't drop deleted history items on a reset, and we tie together resetting of clients and tabs. Previously we'd clear the storage for both, but not necessarily prefs; that would result in odd behavior. They now clear together, always, and we make the effort to not clear both twice in a row.\n@ncalexan, over to you.\n. This will lose some existing translations, so we can't land this yet.\n. Yes, @sleroux, exactly that. It can follow the usual landing process. (note that you'll want to rebase away all of those merge commits)\n. This is done, but shouldn't land until Bug 1211749 is resolved.\n. Looks sane to me. See note about lazy.\n. Landed in bee6d41.\n. Landed in 93b25c1.\n. 423170a\n. LGTM. Get a second review if you feel it's necessary!\n. Works for me if it works for @tecgirl!\n. +       <key>UIBackgroundModes</key>\n+       <array>\n+               <string>audio</string>\n+       </array>\nin Client/Info.plist.\n. #1180 includes the missing chunk.\n. No warnings with this.\n. I added this commit:\n83552f730bc8886c15ffb785fec00bc939ed5eb7\nand merged:\nafc42553a91f0ce559c9c4481cd00f3687831bec\nThanks!\n. Round one more time, @sleroux \u2026\n. In the commit message, s/model/folder.\n. Landed.\n. You should also run ./update.sh and test+commit the changes to Cartfile.resolved.\n. @st3fan: ping on this? Seems like we could do this one by one if Alamofire is giving us trouble\u2026\n. Merged: 4dbacea\n. LGTM.\n. I'll merge this in a second.\n. Fixed nit and landed: 73bc812\n. @ncalexan: everything new, up to \"Bug 1233193, Bug 1201110 - Majorly rework bookmark tests.\", is ready for a second look \u2014 primarily this makes the tests a lot nicer and more thorough, and correctly implements recursive deletion of folders and all records matching a URL.\nThe tests create a non-trivial mirrored bookmark tree, make some local changes, and then delete a subtree and by URL.\nIgnore the merger work at the end. \n. All review comments addressed, so I'll rebase and truncate off the merger stuff and continue in #1385.\n. @rfk, does \"13 13 44\" seem like a reasonable alternative to \"131 344\" to you?\n. Thanks, @rfk!\n@Johennes: the code looks pretty good to me.\nThe thing I think that could be improved, based on your examples, is the correct handling of in-country prefixes ('0' in the UK and Germany).\n<a href=\"tel:+4412341231234\">012341231234</a>\nshould display as 01234 123 1234, at least for people in the UK. That is: the correct formatting of the number can/should take cues from the title of the link, in particular the use or non-use of the country code.\nThat said, this is already better than we have, so please rebase this and we'll get it landed!\n. Don't worry about using the link text; we can file a new bug with notes, and see if anyone is concerned enough that we should work on it.\nI'll get to this ASAP; some life stuff got in the way. Apologies.\n. 58b1462\n. The last commit, Part 7, avoids confusing \"BookmarksDownloader\" XCGLogger output when history is syncing.\n. Emily, if you can repro this, can you check to see if multiple WebServer or GCDWebServer instances are being inited? That would also cause this bug: the WebServer would be collected, as would the GCDWebServer it retains\u2026\nI don't know enough about ARC's memory model to know if it's possible for racing calls to WebServer.sharedInstance to result in more than one WebServerSharedInstance side-effect\u2026\n. LGTM, but I'd like to see more of the logic lifted out into extension methods. Each should be obvious, and it'll make the logic itself obvious, too.\n. c2b2c2c\n. UIImage is safe to use on any thread. From the docs:\n\nImage objects are immutable, so you cannot change their properties after\ncreation. This means that you generally specify an image\u2019s properties at\ninitialization time or rely on the image\u2019s metadata to provide the property\nvalue. It also means that image objects are themselves safe to use from any\nthread. The way you change the properties of an existing image object is to use\none of the available convenience methods to create a copy of the image but with\nthe custom value you want. \n. If this fixes things, great.\n\nI have a tiny glimmer of fear that it doesn't: CIImage, as far as I can tell, is pretty lazy; that might leave a gap for the same issue to occur. So please test thoroughly before landing!\n. @sleroux: I based this on top of your work, including refactoring some of the extension code down to be more Swifty. Could you review and land if you feel comfortable?\n. LGTM. Preference for switching to let and stacking if we're making this change.\n. A promising start:\n$ ./fastlane/scripts/setup.sh\n./fastlane/scripts/setup.sh: line 19: print: command not found\n\ufeff\ufeffHomebrew already installed, updating\nUpdated Homebrew from 8ef29e6c to 56ef538f.\n. I'm using zsh, FWIW.\n. Error: imagemagick-6.9.0-10 already installed\nTo install this version, first `brew unlink imagemagick'\nCarthage already installed\nInstalling fastlane.\nError: No available formula with the name \"fastlane\"\n==> Searching for similarly named formulae...\nError: No similarly named formulae found.\n==> Searching taps...\nError: No formulae found in taps.\n./fastlane/scripts/setup.sh: line 84: fastlane: command not found\n. @Johennes this needs rebasing, probably because of the project file. Other than that, the code looks good; I'll give it a shot shortly.\n. Looks good with those small changes. Lemme know when you've resolved!\n. This landed in 1e57eac39b9488c3747a76dc63f8b0c58f74c007.\n. r+, @sleroux \n. This needs to be cherry-picked into master, too.\n. I'm gonna assume that mconnor is OK with this.\n. For the record: @sleroux is looking into GCD semaphores for this.\n. Yeah, the moved files will be called .bak-shm. 0fg.\n. LGTM.\n. I'll take your word for it!\n. v1.x:   2b181f1\nmaster: f3aff16\n. Note that this is built on top of some testing and logging commits. Ignore those.\n. b4a0690 and ca13732 are the main new commits here. See also the addressed review comments from #1316.\nNote that Bug 1228611 Part 5 has been omitted. I'll rename 6 and 7 after review.\n. Merged to master. Uplift coming shortly.\n. Now with an automated test that the notification is sent.\n. I manually tested recovery from a corrupt DB with Sync configured.\n[Error] [SwiftData.swift:577] writeCorruptionInfoForDBNamed(_:toLogger:) > Corrupt DB detected! DB filename: /private/var/mobile/Containers/Shared/AppGroup/9525F695-A516-4A8A-A1D0-66CAA60DB32B/profile.profile/logins.db\n\u2026\n[Debug] [SwiftData.swift:424] deinit > deinit: closing connection on thread <NSThread: 0x13551ae60>{number = 1, name = main}.\n\u2026\n[Debug] [BrowserDB.swift:170] createOrUpdate > Attempting to move logins.db to another location.\n[Debug] [BrowserDB.swift:189] createOrUpdate > Moving logins.db-shm and logins.db-wal\u2026\n[Debug] [SwiftData.swift:83] getSharedConnection() > >>> Creating shared SQLiteDBConnection for /private/var/mobile/Containers/Shared/AppGroup/9525F695-A516-4A8A-A1D0-66CAA60DB32B/profile.profile/logins.db on thread <NSThread: 0x13551ae60>{number = 1, name = main}.\n[Debug] [SwiftData.swift:400] init(filename:flags:key:prevKey:) > Opening connection to /private/var/mobile/Containers/Shared/AppGroup/9525F695-A516-4A8A-A1D0-66CAA60DB32B/profile.profile/logins.db.\n[Info] [SwiftData.swift:343] prepareEncrypted(_:key:prevKey:) > Enabling WAL mode.\n[Debug] [BrowserDB.swift:58] createTable(_:table:) > Try create tableList version 1\n[Debug] [Profile.swift:602] onDatabaseWasRecreated > Database was recreated.\n[Debug] [Profile.swift:604] onDatabaseWasRecreated > Database was Optional(\"logins.db\").\n[Debug] [BrowserDB.swift:128] createOrUpdate > Create or update LOGINS version 2 on <NSThread: 0x13551ae60>{number = 1, name = main}.\n[Debug] [BrowserDB.swift:417] tablesExist > 0 tables exist. Expected 2\n\u2026\n[Debug] [Downloader.swift:55] resetDownloaderWithPrefs(_:collection:) > Resetting downloader prefs profile.sync.synchronizer.passwords..downloader.passwords... Previous values: nil, nil.\n[Debug] [Profile.swift:615] onDatabaseWasRecreated > Reset of Optional(\"logins.db\") done: true\n\u2026\n[Debug] [Profile.swift:851] syncSeveral > Syncing logins\u2026\n[Debug] [Profile.swift:767] syncLoginsWithDelegate(_:prefs:ready:) > Syncing logins to storage.\n[Info] [Synchronizer.swift:151] init(scratchpad:delegate:basePrefs:collection:) > Synchronizer configured with prefs 'profile.sync.synchronizer.passwords...'\n[Debug] [LoginsSynchronizer.swift:158] synchronizeLocalLogins(_:withServer:info:) > Synchronizing passwords. Last fetched: 0.\n[Debug] [StorageClient.swift:698] getSince(_:sort:limit:offset:) > Issuing GET with newer = 0.\n[Debug] [StorageClient.swift:329] failFromResponse > Status code: 200.\n. I think this is as confident as we can be without doing a TestFlight upgrade on my own device, where I have a working logins.db.\n(Hypothesis: mine was upgraded all the way from 1.0.x, so maybe nothing works for users who started on 1.2\u2026?)\n. master: f7e8e11\nv1.x: fa72549\n. Possibly relevant: Bug 1231054. I noticed a lot of writes for fetched favicons; seems I could get Firefox to fetch the icons multiple times before it finally settled down. I have one log with 226 database operations to show top sites.\nWe also seem to redisplay twice in some circumstances. Perhaps that's also relevant to both bugs?\n. This PR makes sense to me: when we fetch an icon, find the target cell, and do so on the main thread.\nThis will also make sense as we start batching these things together to save on writes.\n. v1.x: 15d4226\nmaster: d114d5c\n. master: edb7d40\n. v1.x: 42e35c7\nmaster: a9fe225\n. Ship it!\n. LGTM!\n. Landed in #1369.\n. The first commit did not land. If it doesn't, someone needs to do the work in January to prevent bookmark folders from being deleted, because I don't have time to.\nThe relevant commit is hanging out in #1385.\n. I landed this commit:\na1cf994\n. Looks good with those changes, current strings from https://github.com/mozilla/firefox-ios/commit/d5b0d469870a21249af7de9fb21fd62997336612, and a follow-up for more precise conditional.\n. Follow-up is #1370.\n. @sleroux, take a look?\n. This was reviewed by @st3fan and @fluffyemily. Needs testing and merging.\n. Did I already land queryReturnsResults? I don't see my commits from #1370 in this stack.\n. Could you do the thirty-second test of that PR and land it?\n. LGTM.\n. Follow-ups ready for review, @ncalexan.\n. If you use AppConstants in your AppConstants definition you don't\u2026\n. Approach seems sane to me.\n. Desktop does not allow you to edit a hostname. I can imagine situations in which it would be useful, but that's not a justification for allowing users to do so here.\n. This is really hard to debug. \nWhat happens if you try to share while in Airplane Mode?\nDo the usual logs (exported via Xcode's bundle fetch) show any errors?\n. LGTM, and squashing is fine.\n. Note that we need an iPad Pro icon at some point, @tecgirl!\n. @tecgirl, @sleroux: r? please.\n. Move the app version accessor into AppInfo.swift. Then move this logic into BrowserViewController: one single block inside the view callback. If this is a hack, and we're going to have to futz with it later, then we might as well avoid spreading hack-juice over two separate files, defining delegate protocols etc. etc..\n. Looks good apart from that potentially spurious project file change. Rebase onto current master and fix that, and we're good to go.\n. I'm honestly amazed that things still work at all, without backboard/springboard crashes. Those are page thumbnails, and each one represents a webview!\nWe're unlikely to do significant work to support hundreds of tabs on a phone; it's so far outside even the 99th percentile that the effort isn't worthwhile. But in this case it might be enough to disable or tweak animations in the tab tray (for which I'll file a bug, because I see this even with 9 or 10 tabs), or we might address this case with future tab interaction work.\nI'm going to close this issue, and push any specifics into upstream bugs in Bugzilla. Thanks for your feedback!\n. Do we do the same thing anywhere else?\n. Good catch!\n. Beautiful. Merging this.\n. IIRC this is mostly due to string concats.\n. I'll throw up a PR for SQLiteLogins this afternoon.\n. Note that the double-compile stuff is fixed by recent project file changes in Bug 1239514.\n. Oh, hah, didn't notice this was a PR rather than an issue! Feel free to keep your fix, @garvankeeley.\n. You also need to create the indices in create, otherwise new users won't get them.\n. LGTM with those two nits.\n. Easy enough to do. But I suspect what you're looking for is a \"did change\" observer, right?\n. Logins themselves. You want to find out when logins have been added or removed, right? Not all login syncs do so \u2014 they might make no changes, or they might only sync data up, not down \u2014 and it's not only syncing (in theory) that could change the set of logins.\nIn this case, you'd show \"No logins\", then as soon as we're done bulk-inserting the downloaded ones from Sync, we'd refresh the list.\n. Sync would write into loginsM, but speaking more generally \u2014 triggers are pretty granular, and we don't do all of Sync's work in a single transaction, so you'd get N change notifications during a sync.\nAlso you'd need to register a (C) callback function into SQL to use triggers, which is a bit of a pain. Much easier to just have SQLiteLogins expose a little change tracking/notification thing.\n. > If your app had to be launched to open the URL, the app calls the application:willFinishLaunchingWithOptions: and application:didFinishLaunchingWithOptions: methods first, followed by this method.\nThis implies that we're doing something wrong lifecycle-wise: we should come out of application:didFinishLaunchingWithOptions: ready to handle this call.\nWithout digging into BVC, my guess is that we delay-dispatch something important in BVC, and that important setup code doesn't run before the open URL delegate method is called on the main thread.\n. On the surface this is a step in the right direction: inout error parameters are a pain.\nHowever, I have my doubts about this particular change at this particular time.\n1. It'll avoid the crash, but it also means we will now only be able to find the root cause locally by watching logs. That's probably the right choice, but we should be aware that we're making it, and we should consider alternatives (e.g., a FailedConnection that always returns an error \u2014 our code already expects operations to fail). You might consider adding an assertionFailed call to make debug builds die hard.\n2. This leaves us in a really unpleasant halfway house, where we have both inout err and try calls.\n3. Worse, it doesn't rearrange things as they would be arranged in the presence of necessary try: for example, some of these calls would take a connection argument instead, or would use Deferred.\n. 1. All of this reindenting and rewrapping is going to make rebasing a pain :/\nSo my counterproposal: extract a protocol from SQLiteDBConnection, implement it such that methods always fail, and use that if we're unable to get a real connection. That's the smallest change to calling code \u2014 none at all.\n. Lemme show you a branch\u2026\n. I suppose it's worth pointing out: the reason to run the callback rather than just return is precisely because the callback is already expecting to handle a failure during runtime and return a sensible value.\n. @sleroux https://github.com/mozilla/firefox-ios/tree/rnewman/no-connection is what I mean.\n. https://github.com/mozilla/firefox-ios/tree/rnewman/db-check-error doesn't compile yet, but that's a second option.\n. Repeating note from Bugzilla: let's break out the second commit to the separate bug, and put it in a separate PR to merge later once its dependencies are built.\n. Probably gonna need a few protocol tweaks or Concrete insertions. Will fix, ta!\n. Both of those tests fail for me on master, unless Xcode is being super stale.\n. Tests pass now that I fixed the tests!\n@sleroux, @fluffyemily: let me know what you think, in particular whether we want to land Part 4.\n. Landed without the final commit.\n. Excellent progress! I really like the early refactoring.\nThe pattern you've moved towards is to guard the deferred with a lock. I think in this case we might be better off with a dispatch_queue_t which runs closures that decide whether to syncSeveral or syncRemaining, switching out the Deferred accordingly. currentSync would only be accessible to the queue; callers who want to check whether a sync is in progress would either run their logic on the queue, or use dispatch_sync.\n. Lovely work, @jhugman. Let me know if any of my comments are unclear or don't make any sense!\n. This is really good.\nI wrote an extra test in the course of making sure I understood this; I use .value to block the main thread to wait for the result, which is a nice way of checking that all the work really does happen on another queue!\nWhile I was committing that, I addressed my own nits as a few commits: see rnewman/async-reducer. A notable exception is my dDA question: https://github.com/mozilla/firefox-ios/pull/1526#discussion_r57653967\nPlease take a look at those commits and that outstanding question, fold it all down, test the living hell out of it on device, and rock on!\n. I don't know why GitHub used that old title.\n. And here's the non-flattened version. Reading through the commit messages will illustrate some of the edge cases that we carefully work around.\nhttps://github.com/mozilla/firefox-ios/compare/rnewman/bm-merge-review?expand=1\n. @sleroux: ooh, interesting. Are you able to send me your browser.db? (Feel free to drop your history\u2026)\n. Superseded by #1581, which adds some follow-up work and rebases on top of master.\n. LGTM.\n. @sleroux, @fluffyemily, @ncalexan, et al: I think this is ready to go. No telemetry yet (Bug 1251689).\n. Rebased and merged. Thanks, all.\n. Really nice work. :+1: \n. e59062e\n. 34ae579\n. c252ebb\n. Merged (FF): 7259073\n. LGTM!\n. I think not nulling the title is safe, assuming we'll always get a new title after the view loads the right page, yes? \n. LGTM with those nits!\n. I think the most consistent thing to do is that we let you delete whatever you see, and when you exit edit mode we fill in the gaps. But that's annoying: if your results are crap, you will have to re-enter edit mode multiple times to get rid of the junk on your top sites.\nI think the least annoying thing to do, then, is to keep streaming in new results.\nAs @sleroux notes, to handle that you'd need to compute the new results, and in the same animation block switch the data source, diff, remove the deleted item, and then insert the new one.\nWe could more smoothly handle the common case by pre-fetching extras (perhaps we already do?), or pre-fetching the next N as soon as the user enters edit mode or has deleted N-M, with the goal that there's always a filled Deferred waiting with more items for us to futz with directly on the UI thread.\n. I hate to say \"LGTM\" on a PR like this, but: modulo those nits, if it stands up to the testing you've done, this looks fine to me.\n. FWIW on all branches I've seen icons flicker in every time top sites loads, sometimes. We're probably doing something wrong somewhere :/\n. f8c2fc5\n. bcbe52f\n. @fluffyemily: did you miss the review request for this?\n. ae949e63eb9f8d6fa302527131f0284246a3036c\n. Wow, we have a lot of selectors.\nYikes, ++ is really useful.\nLGTM.\n. The direction flag shows whether we're fetching to display (local + mirror)\n\u2014 i.e., normal successful operation \u2014 or the read-only fallback view of the\nbuffer that we use when we haven't downloaded enough data to sync.\nWhen we enable bidirectional sync, we will normally be using .Local here.\nThe change you'll need to make, I think, is to also check to see whether\nwe're fully synced: that is, whether the buffer is empty. If it is, and\nwe're .Local, then we're editable. Otherwise (if we're in a read-only\n.Buffer view or the buffer is non-empty) then we're read-only.\nThe only time we want to allow editing of bookmarks with a non-empty buffer\ntable is if the mirror is empty (i.e., we're unsynced) and the item we're\ntrying to edit is a new local bookmark.\nSo our test cases:\nEmpty buffer: all items editable.\nNon-empty buffer:\n  Empty mirror (hasn't synced ever)? Local items are editable.\n  Non-empty mirror (has synced ever)? Nothing is editable.\nDoes that make sense?\n. @sleroux the model factory should be a singleton in that there should be one per SQLiteBookmarksBase instance. It should be relatively easy to make that a (safe, which lazy vars aren't) per-instance lazy var, no? \n. If it works, ship it!\n. I'm happy to do a review pass on the storage/syncing changes here, with the caveat that I'm AFK all next week.\n. Make sure there's a test! Add 1200 logins, delete 600 of them\u2026\n. Master: d4eb0e9\n. v5.x: 0cb44c3\n. My initial reaction to this is that it's inside out. (It also requires that the caller know the whole set of records up-front, which we don't always, so it doesn't quite work!)\nFor example: LoginsSynchronizer calls getDeletedLoginsToUpload and getModifiedLoginsToUpload, chaining each into the same storage client. With this change those two will be separate batches, which is inconsistent. History does the same thing. Bookmarks might do, too.\nMy suggestion is this.\nWe currently have a storage client, which we then exchange for a collection client via clientForCollection(collection:encrypter:). We can then use that collection client for so long as the encrypter is valid \u2014\u00a0typically the duration of a sync.\nSimilarly, we should ask our collection client for a batch client, and use that for uploads.\nA batch client is created by asking the server for a batch token (presumably also taking the configuration blob as input, when we get around to building that). You can then .post records to the batch client, and it'll split them up into chunks for upload, failing if any fail. The caller then commits the batch (optionally doing so in the last chunk) at the end of the appropriate scope.\nThis has some nice properties:\n- You don't need all the records up-front; just use the same batch client each time.\n- You can have multiple batches going in parallel, should you be that crazy.\n- You can test the batching independently by mocking the collection client itself.\n- If you make Sync15CollectionClient and the batching version both implement the same interface, you can support batch and non-batch modes by having the batch-me version just return itself, and ignore commit calls.\nDefining an interface makes you think about the character of the problem. You don't need a new batchPost API and a conditional switch between the two; you always .post, and then always .commit when you're done, and the client you're using does the right thing.\nMake sense?\n. > Do you see storageClient requesting a Sync15CollectionClient vs Sync15BatchCollectionClient or internally refactor the existing Sync15CollectionClient to use a batch or single client for posting?\nNeither: a batch is a modal operation.\nThis is a lot like a database: you find the database module (storage client), open a particular database (collection client), start a transaction (batch client), then commit the transaction (commit the batch and throw away the client).\nRight now we get a storage client, which controls access to the whole of /storage/, use a collection key to get a collection client from it, and then freely POST and GET that collection. That's like using a database without an explicit transaction.\nI think we should continue to do mostly that, with one change: don't POST directly with that client. Instead, something like this:\ncollectionClient.beginBatch() >>== { batch in\n    return uploadDeletedRecords(batch)\n     >>== uploadModifiedRecords(batch)\n     >>==  batch.commit\n  }\nwith uploadDeletedRecords and friends acting just as they do now:\nfunc uploadDeletedRecords(client: POSTableClient15OrWhatever) -> Deferred<\u2026> {\n    return self.storage.getDeleted(\u2026) >>== client.uploadRecords\n}\n\nRegarding the first question, would this interface lift the existing methods\u2026\n\nBoth, probably. I expect there'd be a shared interface and some code reuse, perhaps even composition.\n\nIn the future, would it be better to document the changes in English instead of code to collaborate on architecture prior to coding?\n\nWhatever works for you.  Sometimes one needs both :)\n. Your understanding of onUpload is correct \u2014\u00a0it should be called when the records have reached the upstream collection. onStored would be better, except we tend to use that word for local storage. onCommit might be better.\nNote that a batch API might thus differ from the non-batch one: for the batch API you would supply the onCommit callback once, when you start the batch; for as-you-go uploads you'd supply it for each call. So be more invasive if you feel it's right.\n. I'll be looking at this today.\n. This is looking really good. One possible bug, some additional necessary test coverage, and some questions.\n. Re X-Weave-*:\nWe will know X-Weave-Bytes, assuming I'm reading the docs correctly, but in the general case we don't know those values at the time that we send the batch=true request. In the case where commit has been called before the first request, we can include them. You'll need to ask for clarification about whether it's possible or worthwhile to include e.g., X-Weave-Total-Bytes in a non-first request.\nWe ought to double check that we send the correct value for each, because the server docs I believe use:\n- \"payload\" = a record\n- \"upload\" = a POST\n- \"batch\" = a collection of uploads followed by a commit\n- no name for a bundle.\n. Re X-I-U-S: we should include the same X-I-U-S on every request within a batch. If concurrent modification to the collection occurs on batch creation, update, or commit, then the batch will fail and we'll get a 412 response.\nWe can sanity-check the X-Last-Modified response header during the batch (already exposed by our Swift storage API), which should match our X-I-U-S.\nThis is why we chain lastModified: it's the modified timestamp for the collection (as opposed to X-Weave-Timestamp, which is the server timestamp at the point of handling the request \u2014 usually the same thing, but not precise). If you want an uninterrupted sequence of uploads, you use the lastModified value from the previous success as the ifUnmodifiedSince condition of the next.\nWithin a batch lastModified won't change unless there's a race.\nNote that for a collection sync as a whole, the lastModified value actually comes at the end of the previous GET!\nNote also that X-I-U-S behaves differently for POST (collection timestamp) and PUT (per-record timestamp). That's only relevant if you start poking at the clients engine.\n. uploadRecords(by) isn't needed once all consumers use the new batching uploader. I think we'd control the flow of records to the server by passing a different record limit to the new uploader.\nYou should ask @rfk or bobm in #sync if they can point you to the right place for a working staging config. It might have changed since that stuff was committed to our repo. If so, commit a fix!\n. Might be a documentation error. Raise with @rfk?\n. LGTM. Do one last pass to make sure all nits are covered (e.g., newline at EOF!), then let's test the shit out of this. \ud83c\udf7b \n. This is a quick skim review. Someone who currently works on iOS should take a look. @thebnich? @fluffyemily?\n@lemonYLX: you'll also need to rebase this on top of current master. \n. Concur that the right thing to do here is not to remove granularity, it's to correctly represent and handle state.\n. I would go so far as to say you should switch over all of the result enums and decide which ones you do want to show messaging for. Some such states will be a problem indicator only if they are prolonged.\n. This looks good to me, in that it fixes the issue, but you might consider a follow-up to address error handling more carefully.\n. Thumbs up for writing for testability, btw. \ud83d\udc4d \n. LGTM.\n. @thebnich, @sleroux: could one of you merge this as appropriate?\n. The shutdown change makes sense to me.\nAlso take a look at #1337.\n. @HellGL: can you get a crash report off the device? Seeing the stacks of every thread, and the termination cause, would be helpful.. On a jailbroken device, I don't know. iTunes or Xcode have device explorers and extract crashes for you. You're probably looking for a crash report for an app named Client, in org.mozilla.*.\nIf you can get a live console from the device, that might show you a stack trace.\nFailing all that, if you have developer tools available, you can build and run the app locally (see the README in this repo), which will give you a full debugger at the point of the crash.. > One question I have with this approach is that the query assumes local_modified and server_modified come from the same clock which isn't true. Are these comparable in any way?\nThey're not comparable, but:\n- A user who doesn't use Sync will only have local_modified.\n- A user who does use Sync, and who is syncing bidirectionally, will eventually have a server_modified for every record, and no local modification time at all. See https://github.com/mozilla/firefox-ios/blob/068ad3cc790247f7d9f2faf1994ec6ca1fe0db43/Storage/SQL/SQLiteBookmarksSyncing.swift#L1039-L1039\n- Usually an iOS user's device will have a somewhat accurate clock, so these will be vaguely comparable.\n. First-pass feedback done, @sleroux. Lemme know when you want me to look again!\n. Figured I'd flesh out my review comment for posterity.\nIn order to use UNION (or even DISTINCT!) to get unique results, you need to either narrow the set of columns so that UNION removes the duplicates (which means discarding all of the stuff that makes bookmarks and history differ!), use an enclosing query to transform the result set, or\u2026\nConceptually you're trying to do a FULL OUTER JOIN: that is, give me things from this set, and things from this set, and if they overlap on a given criterion, merge them together.\nSQLite doesn't support FOJ, and emulating it isn't cheap, but you could do it.\nThe approach you've taken here is an enclosing query, using GROUP BY to collapse rows together when they refer to the same URL. That needs a teensy bit more work, because the behavior when you return a non-aggregate value from a grouped result set is undefined. Comment inline\u2026\n. STR:\n- Send two tabs from iOS to desktop.\n- Tools > Sync Now on desktop.\nCurrent:\n- \"2 tabs received from .\" is displayed.\nExpected:\n- The iOS device name is shown instead of the empty string.\n. Wanna try to get this in for 6.0, @sleroux?\n. @ryanfeeley This fixed an issue just like that, yes. If you're still seeing that issue, and you're using a recent Firefox for iOS, it's probably something else \u2014 for example, if desktop is using the FxA device record instead of the Sync client record, and the sender doesn't have an FxA device registration, then the lookup will fail.\nWorth filing a bug and CCing @eoger and the usual folks. It should be very easy to figure out what's going wrong simply by looking at desktop.. Noting for posterity: @sleroux and I chatted about this, and the best approach is to generate a new model reflecting the action taken, rather than to hope that fetching the new state from disk will be congruent. A fresh model can be loaded from disk next time the view is displayed, or outside the edit action in response to a notification, but that's outside the scope of this bug.\n'Mutating' the model is pretty easy \u2014 have the model clone itself with a clone-but-one of its current folder, then feed into the same method call that Steph's current PR uses.\n. s/recommentation/recommendation.\nDoes this code control the history panel?\n. Also, recent history for me doesn't even appear in the awesomebar by string match, so I think there's another bug.\n. As noted on IRC, a solution like this would indeed ensure that we only return one highlight for each domain\u2026 but it doesn't address the question of which result we should return very thoroughly.\nThat is: if there are multiple candidates for a given domain, which one should we choose?\n(And there's a broader question: if I have two highlights from Medium.com, or two from Wikipedia, perhaps we should show both instead of some lower-scoring highlight from another domain\u2026)\nI can think of various approaches:\n\nChoose the most recently visited. (That's the patch as written, I think.)\nChoose the least recently visited within a timeframe \u2014 resurfacing old hits.\nChoose the one never visited on this device \u2014\u00a0space-shifting.\nChoose the least visited item, count-wise \u2014\u00a0something you missed.\nUse some other kind of score: e.g., the item for which we have the best imagery, or it's in our cache, or it has a known title \u2014\u00a0optimize for display.\n\u2026 and so on.\n\nIn short: this is a product question.. For bookmarks, note that failures can occur at several points:\n\nAn incoming record can be completely invalid, and won't even reach the buffer. (You might have ignored this for other engines.)\nIncoming records can be buffered, but the buffer is known to be inconsistent, so we neither attempt to apply the buffer nor upload any records.\nThe buffer can appear to be valid, but further issues are found while producing the merge tree or walking the merge tree. Again, we abort immediately.\n\nThe resulting merge tree is then walked to produce operations, and those operations are run against the server, mirror, local, and buffer. Any one of those operations can fail due to the records/data, a bug, or external circumstances.\nThe question then becomes: what are you trying to measure?\nThis is my outstanding criticism of the counts that desktop has always logged: they don't really tell you anything. Okay, so we downloaded ten records and failed to apply five. So what?\nWe can identify a collection of different counts for bookmarks:\n\nWe think the record we downloaded was malformed.\nSomething went wrong when handling a downloaded record, prior to buffering.\nSomething went wrong when buffering this batch of N records.\nWe produced an op with 5 things to copy from buffer to mirror, 3 things that were merged in memory, etc. etc.\nThe server rejected 7 of the 15 records we uploaded.\nWe failed to write N changes to one of our operation destinations, aborting the whole sync.\n\nBut there is a bunch of information hiding inside stuff we can't count:\n\nThe buffer is inconsistent. Note that this is an emergent property of a collection of records \u2014\u00a0you can't say we downloaded 23 records and failed to apply 23.\nThe buffer is easy-consistent but we couldn't build a tree out of it. Again, this is an emergent property, and we short-circuit to avoid burning CPU on the same checks every time.\nAn op failed for some reason.\n\nWhat are we trying to measure? Rate of change of bookmarks? Number of retries? Something else?. > I'm not a fan of it either TBH. I had a hard time coming up with alternatives though. Any suggestions? I think the patch is fine for landing but just for curiosity.\nFour possibilities.\n\n\nThis is the classic use for aspects. Rather than add your own timing code, you implement some kind of wrapper/interceptor that calls through to the original code and times it. Unfortunately, you don't just want timing and success, you want detailed operation counts (behavioral logging), and that's difficult.\n\n\nIf you can phrase work done in terms of states, then you can isolate the telemetry. E.g., if record application weren't done record-by-record, but instead work was accumulated to be applied in one shot (similar to the bookmark merge ops), then you can get your succeeded/failed by looking at the inputs and outputs of the process.\n\n\nSimilarly, you could make each 'sink' (e.g., the history store) a kind of stateful source of telemetry data. Have it count the operations performed on it. Now you can get your telemetry data at the end of a sync just by poking storage. This assumes that storage operations are the right granularity: your storage layer now needs to know the kinds of telemetry you gather, rather than the sync engine knowing it. Imagine if your telemetry was \"added database rows\" \u2014 SQLite gives you that already!\n\n\nRather than threading an accumulator through your application code, decouple via notifications/broadcasts or another kind of information 'leakage' channel. For example, you could have a tri-state flag (not touched, failed, succeeded) on each input record, or you could send a notification each time a record was processed. Again, this allows you to do your telemetry work outside the main code. However, you'll note that you need to introduce some kind of scoped/global state \u2014 the message channel \u2014 and implement an ad hoc message dispatch system that dynamically couples the processor and the consumer, so this isn't free.\n\n\nTANSTAAFL.. To be clear, the behavior I saw in Bug 1344612 had no private tabs open.. iPad Pro + Apple keyboard cover should be a top-line supported configuration, and I suggest you pick up one of those keyboards if you don't already have one. Bluetooth might behave differently.. Let me know when you have a fix for the reader mode issue\u2026. > What are some ways we can anonymize this data?\nYou have two main options and one additional way to help.\nThe simple way is to deliberately coarsen the data into buckets to match the telemetry analysis you'll do. Your aim is to get granularity where you need it, so the buckets don't need to be the same 'width'. All users with, say, 1000-1300 bookmarks report '1000-1300'.\nThe complicated way is to bake in some differential privacy: have clients lie in a mathematically sound way, so that in aggregate the data is reliable, but for an individual user the data has a good chance of being deliberately incorrect.\nThe additional way to help is \u2014 as with most fingerprinting remediations \u2014 to limit the association of data: send as little as you can alongside these identifying counts. Naturally this would limit the analysis you can do.\nYou need to get data steward sign-off before adding additional data recording or submission to the product; they might also have suggestions.. Yikes, I'm glad I filed this!. Already landed.. @sleroux, @justindarc: you might want to audit all other uses of .rawString, including via .stringValue(). It apparently does not work correctly.. @sleroux, would you?. I get the same results running against my local profile. I don't get a significant speedup \u2014 260msec versus 298msec \u2014 but every little helps.\n(My profile has 87K visits and 56K URLs.)\nShip it!. Yes please, @Colemalban. Just flip the flag back to r?.. Hey @Colemalban, any news on this?. @Colemalban as far as I can tell, this is still valid; please do wrap it up and we can get it landed! Thanks!. > In endSingleBatch(), in batched mode, is this okay if I return the first POST (not the commit=true one) response? Or is lastModified going to be wrong, and I should instead return succeeded from the first POST response and the lastModified from the commiting one?\nYou need to wait until the commit. X-Last-Modified won't change until you commit. But note that this behavior depends on whether the batch API is enabled! If you upload records with batch=true and the server returns a 200, the records were committed and you do need to handle X-Last-Modified.\nThe only reason to make a second request is (a) if you got a 204 from the first request, and (b) the first request's failed is empty, and thus you want to commit. If the first request didn't result in every record being accepted, or if you got a 200 because the server doesn't support batching, then you either don't want to or don't need to send another POST to commit the batch.. Happy to help! Well done on tackling some tricky code.\nYou'll need to rebase this on top of @st3fan's UA test fix before we can hit the merge button \u2014\u00a0that's the failing test.. Oh! I was just about to hit merge when it occurred to me: this needs a feature flag. We don't want to turn this on until we have a merged UI and the ability to delete, but the code should land so it doesn't rot.\n@eoger, could you take care of that?. Is this still relevant, @justindarc?. > Is there a way we can not invalidate topsites so frequently? Imagine a user with 1k+ visits. Their topsites probably dont change much but we recalculate every single time they visit a new page. Does something like Invalidate after a percentage of new visits have happened. For example, invalidate after visits increases by 2.5% so for someone with 1k visits that would be after 25 visits.\nI do agree that it would be nice to invalidate less frequently, and to do so at more appropriate times. That said, the top sites query takes about 400msec at most, so it's not that bad.\nHowever, it's easy to pick heuristics \u2014 like N% of visits! \u2014 that would cause Top Sites to appear unresponsive. For example, I have about 100,000 visits in my history. Even if we pick 0.5%, I'd still need to visit 500 pages to make a dent\u2026 and if I visit the same domain just 20 times it's likely to have pushed its way into my top sites. Just imagine you spend an hour on Wikipedia, head back to your home screen, and find that it's the same old mix of irrelevant pages. A user who has just started using Firefox will get a new top site every time they visit a new page, and we shouldn't prevent that. (Or should we?)\nThe ideal is that we would recalculate top sites whenever a visit would cause a new site to enter the set, and we always do so before the user loads top sites.\nThe tricky parts:\n\nEach individual visit is not a good predictor about whether the list would change.\nFrecency scores drop off over time. For a given visit and a given set of top sites, whether that visit would push a site onto your top sites depends on when the existing sites were visited.\n\nThere are heuristics we could use:\n\nDon't invalidate if you visit a site that you've already visited on the device. It's unlikely that an existing site that you've visited is on the boundary \u2014\u00a0it's probably either already a top site or in the long tail.\nDon't invalidate after an incremental sync that only adds <N% new URLs. Remote visits are downweighted in frecency anyway.\nRemember the bottom of the iceberg: the domains that didn't quite make it onto top sites. (We already compute these before we trim down for display.) Invalidate if any of these are visited.\n\nAnother approach is to track the minimum frecency needed to get onto top sites. Each time you visit a domain, estimate its frecency. If it's near the minimum (leave some space to account for drop-off over time\u2026\u00a0and we can recalculate the minimum if we remember which top site came last!), recompute top sites.\nI suggest you file a bug for this and dump in all of these comments.. Lemme know when this needs another look, @farhanpatel.\n. Testing local:\n```\nINSERT INTO bookmarksLocal\n(guid, type, parentid, parentName, title, description, bmkUri, tags, sync_status)\nVALUES\n('xxxabcabcabc', 2, 'mobile______', 'Mobile Bookmarks', 'Folder XXX',       'Some folder', null, '[]', 1),\n('xxxdefdefdef', 1, 'xxxabcabcabc', 'Folder XXX',       'Item XXD',         '',            'http://foo.com/', '[]', 1);\nINSERT INTO bookmarksLocalStructure\n(parent, child, idx)\nVALUES\n('mobile______', 'xxxabcabcabc', 0),\n('xxxabcabcabc', 'xxxdefdefdef', 0);\n```. Testing non-mobile desktop bookmarks:\n```\nINSERT INTO bookmarksBuffer\n(guid, type, parentid, parentName, title, description, bmkUri, tags, server_modified)\nVALUES\n('menu_', 2, 'root_', 'Root',             'Menu', null,          null, '[]', 12345678900),\n('unfiled_', 2, 'root__', 'Root',             'Unfiled Bookmarks', null,          null, '[]', 12345678900),\n('toolbar', 2, 'root_', 'Root',             'Bookmarks Toolbar', null,          null, '[]', 12345678900),\n('yyyyyyyyyyyy', 1, 'menu______', 'Menu',      'Item YYY',         '',            'http://yyy.com/', '[]', 12345678900);\nINSERT INTO bookmarksBufferStructure\n(parent, child, idx)\nVALUES\n('menu__', 'yyyyyyyyyyyy', 0);\n```. > I can make time today/tomorrow to do that if you prefer\n@garvankeeley, I would very much appreciate it if you would. I'm pinch-hitting here \ud83d\ude04 .   I filed https://bugzilla.mozilla.org/show_bug.cgi?id=1389292 for test follow-up, @garvankeeley.. Ready to land in three parts, which isn't enabled on this repo, @st3fan.. Oh, pushing to master is enabled now. Done.. It's greyed out because the build hasn't completed. It might have stalled out.\nPush again with that GUID change, and see if the build completes \ud83d\ude01 . The vertical alignment of the user's name above \"Sync Now\", and the avatar above the Sync icon, are close enough to look like they might be supposed to align, but they don't, so at first glance this looks a little weird.\nI haven't tried this on a device, though. @tecgirl, are you happy with how this looks on a real device?. > I'm also wondering if we should drop the \"Manage Account\" line as the asset and caret show that it's tappable.\nThat looks great to me.. I'm hoping this won't be needed \u2014\u00a0looks like @rfk and @mostlygeek are working on Bug 1397357.. Good enough for me, @joeyg \u2014 so long as the user isn't stranded, I'm happy.. That sounds like a question for @jhugman!. Resetting a synchronizer, in general, tells it to act as if it's never fetched before. That flips lastFetched to 0, causing it to download everything again. Additionally, the ClientsSynchronizer treats lastFetched == 0 as a first sync, making sure to upload our record.\nWe don't have to trigger a sync in response to NFADRU. We'd only need to do that if we were getting the notification during or after our first sync, and thus needed to make sure another sync occurred to get our client record uploaded. If that is the case, and we don't trigger a sync, we might not upload our client record until the user backgrounds the app or waits fifteen minutes.. The patch is fine, but have you read every call site to see if it implicitly depends on completion? Or added a fake stall and/or queue dispatch to see if anything misbehaves?\nThere's a lack of commentary here\u2026. Bump the version number here so I can test this with live data!. Rebased on master; will land.. WFM.\n. Uplifted to v10.x yesterday:\nhttps://github.com/mozilla-mobile/firefox-ios/commit/2e2f0e6cd7b3635c97cc8314b11b20596167003b. Could you please hit the DB upgrade tests, and make them upgrade from something very early, like v7 \u2014 we already have BrowserSchemaV7 in the tree \u2014 and make sure a stepwise upgrade (a) reproduces the bug, and (b) with your fix we can get all the way from 7 to 34?. My only requests:\n\nDrop the SearchLoader when the user stops searching. You're going to overwrite it next time they start, so we might as well clean up.\nFollow up with some encapsulation and scoping. It shouldn't be possible to get SQL strings out of a protocol instance (BrowserHistory). It shouldn't be possible to get refreshTopSitesQuery \u2014 which relies on the frecency cache and implicitly creates it \u2014 from SQLiteHistory; that should live on SQLiteFrecentHistory, and the process of updating top sites should live there.\nPlease test this with searches before and after synced history arrives. We don't want users complaining that they have to, e.g., quit the app to make their history search update, if there's a bug hiding here.. Not yet linked to Bugzilla \u2014 it's down.. Howzat, @justindarc?. > 1. go to the parent of this tab\n\nif not go to the last selected tab\nif not go to the previous one in the list\n\n\n\n\nI'm not sure that (2) is correct or desirable, and I think (3) is wrong.\n(2) is pretty much what happens now, and is what motivated me to reawaken the bug; we currently select tabs based on recency (either navigation or display). Desktop doesn't do this because it's uncomfortable and unpredictable.\n(3) is backwards, I think. Desktop selects the next tab, the one to the right. Selecting the tab to the left is only expected if there are no more tabs to the right.\nI think the rules you want (which are the same as desktop's) are:\n\nRarely: go to the parent of this tab. (The definition of 'parent' needs some examination: it's not just navigation/open in new tab, it has to be a popup.)\nUsually: go to the tab with the highest index that's less than or equal to the closed tab's index, which usually means the one to the right (shifted left on close).. Looking at the code, I see that lastExecutedTime is only used to select tabs by recency and to populate Sync records.\n\nSo I agree that we should bump that timestamp when a tab is selected, but I don't think we should use it at all in TabManager to decide on tab selection behavior.. That sounds a little complicated. It's also not what desktop does; the use of parentage is more subtle. Try it:\n\nOpen reddit.com.\nCmd-click three links.\nSelect the middle of the three new tabs.\nHit Cmd-W.\n\nYou'll see the tab to the right is selected, then we'll work left when there's nothing more to the right, even though reddit.com is the tab's parent.\nThere is only one situation that I can see in which Firefox will select a tab other than the tab to the right:\n\nThe current tab was opened as a child of another tab.\nThe current tab was selected immediately after its parent (either automatically or manually).\nThe user didn't select a different tab before closing the tab.\n\nSo if you did this:\n\nOpen reddit.com then foo.com in another tab to the right so you can see what happens.\nSelect the reddit.com tab again.\nCmd-click one link only.\nSwitch to that tab (or turn on switch-immediately).\nHit Cmd-W.\n\nYou'll see we focus the reddit.com tab. If you try opening two tabs this behavior will cease. If you switch tabs other than that initial focus, the behavior will cease.\nThe reason for that specialized behavior is to make a popup dismissal feel natural: it stole your focus, and now you're back where you were.\nMy stab at phrasing this logic:\n\nIf the parent of the current tab was the last prior visited tab (that is, the one with the largest lastExecutedTime other than the tab being closed), select that.\nOtherwise, select the next tab to the right.\nIf there is no tab to the right, select the tab to the left.\nIf there is no tab to the left, open a new blank tab and select it.. If I have, say, 10,000 sites with more than ten visits, will a very recent page with 9 visits \u2014 high frecency, but not in this 5,000-long set \u2014 now be excluded from my top sites?\n\nYou should consider whether you also need to select some subset of very recently visited pages, too. Graphing frecency might help you figure out how to approximate.. Thought exercise: if users can pin, why bother with top sites at all? Your answer to that question might help.. Because I needed it in order for Bookmarks to implement shareItem, and either this or this and ExtensionUtils needed to be public, because the protocol I was defining referred to that type.\n. Compiler complained. You can't use a protocol everywhere you can use a class.\n. Neat!\n. It can fail, which is why it returns an optional.\nBut this kind of failure is why I'm tucking much of this logic down into the bookmarks model: in theory, once ownership of the data is encapsulated like that, we can make sure that changes happen in lockstep, and we can reverse the refreshData channel to be a little more like observation.\n. We will; this is a step along the path.\n(It can't fail right now, any more than the current code does, but I'm assuming background changes.)\nAs this evolves we'll be backing it with something more sophisticated than a tree of simple objects. Mutations will all go via the model, so we'll be driving the refresh from something like an onDatasetChanged callback. It's conceivable that we'll actually be doing that by swapping out the model for a new one, at least for bookmarks \u2014 from that perspective, you can think of BookmarksModel as a snapshot of a particular layer in the folder hierarchy, and navigation will grab a new model.\n. That works for me. Regardless, this should be an uncommon situation.\n. Yeah, I think constants \u2013 it's an open set with some well-knowns.\n. It's because the input is a BookmarkNode, and so this could be a BookmarkItem, a BookmarkFolder, or anything that implements BookmarkNode.\nThere's no good syntactic way to show that; if you try case let thing as BookmarkNode the compiler will complain \"is test always true\". So default here really means \"any other kind of BookmarkNode\".\n. Xcode shows me this regardless of which of those commenting styles I use:\n\nis there another place that it shows docs?\n. I'm going to call it createSizedFavicon, 'cos that's what it actually does!\n. There's one compelling reason not to.\nSequenceType has a Self constraint: \n/// The type of element generated by `self`.\n    typealias Element\nIf we make BookmarkFolder a SequenceType, such that we can have it expose a generator method, then we can't use it as a concrete type (e.g., as the type of a member variable).\nI discovered this the hard way, by implementing it. I'm going to dig a little, see if there's a workaround, but otherwise I'll drop this until we need it.\n. I can make MemoryBookmarkFolder a sequence. WFM.\n. This also isn't likely to play well with Sync for two reasons.\nFirstly, the lastVisit/numVisits approach is expedient, but doesn't match up to Sync's model. On Android we have to jump through horrible hoops to make this work, synthesizing fake visits and such. Additionally, it causes problems with the user experience to not distinguish between local and remote visits, and I will be unbreaking the model in Bug 1046709 to allow for a distinction to be made. We should be sure to draw that same distinction here.\nSecondly, the underlying data model for history will be two sets of data (local and remote), each of which contains a number of visits attributed to different clients, each visit having a type and a timestamp. Your total history is a merge between these two sets, with some sites only being visited locally, others only being visited remotely, some never synced yet. I don't know how that maps to the kind of Core Data view that you want for the frontend; it's doable if something like this NSManagedObject is a virtual entity that's the read-only result of a merged query over both data sources.\n. We probably also want a numeric primary key, so that visits can refer to it without using a GUID or an implicit _rowid.\n. Is it meaningful to query history without also querying visits? E.g., should this return rows that have no visits?\n. I think this is a bit of a bad smell.\n. I think there are a couple of changes here:\n- Visits probably don't need a GUID.\n- The place reference (\"site\" might be misleading?) should probably be a foreign key reference to the numeric ID of the place.\n- Visits should have a type (see Places docs).\n. Add a comment to each table class that you need to come here, bump the version, and explain why if you make a change!\n. I left the comment on the last PR, so here it goes again: site numeric ID, visit type.\n. Any particular reason to use a REAL rather than NUMBER?\nAlso might be worth calling the column date_msec (if that's what it is).\n. to the\n. Maybe this should be SchemaTable or MetaTable? No firm opinion, but something to think about.\n. to the\n. Side comment: are we confident in when our cursors' deinit method will be called? I wonder if we ought to have explicit closure.\n. Future Swift: this can be a let.\n. Pass the name as an arg, not using string substitution.\n. let is your friend, no?\n. Each of these calls hits the database, right?\nI think what you want here is to partition a single stream of records. Run a query for everything (with a limit!), ordered by date, then slice in memory.\nMeasure first, though: stick five or ten thousand visits into the DB, and compare between running these four queries versus just running one for DateRange(start: nilTime, end:nilTime) \u2014 no filter at all.\n. See Stefan's comment. This should really be\nreturn sections[section].title\n. You probably don't!\nLet me think about this some. The risk is that sqlite is going to do a LEFT JOIN over the entire DB, then filter by date in memory, each time you do a date-ranged query. That's crazy; to display the four history chunks on the homepage, it'd dump the entire DB into memory four times.\n. I think we can probably be more specific than that, no?\n. What if this is called multiple times? What's the concurrency contract here? Do callers care if this succeeds?\n. This doesn't seem like the best way to do promise chaining. Can we do better?\n. Synchronous return implies that this blocks the calling thread. That's rarely what you want. Should this take a closure or return a Deferred?\n(This is probably moot when you use lifecycle callbacks correctly, though.)\n. This is fixed in Brian's pull request (which might have already landed?).\n. Yeah, I'll typealias Timestamp.\n. I guess we could change the signature, yeah. But I didn't bother, because we will error out when we hit the assertion \u2014 this return is just there to make the compiler happy!\n. Do you think we should change BookmarkItem to allow a nil title, or return \"\" here?\n. See the comment above! I reworded the function until the compiler stopped segfaulting.\n. No; a guy on the Swift compiler team asked me to file a Radar about that.\nhttps://gist.github.com/rnewman/541a558f143cc64d232f\n. Yeah. A huge amount of the fixes in this PR were casts pulling stuff out of cursors :/\n. But my reason for using the safer optional variants in some cases was this: if a function already allowed returning nil, then I'd rather us return nil than crash the browser if a favicon is malformed in the DB.\n. You have one choice here: crash if it's not a Site (as!), or chain through the nil (as?). Again, given that this function already returned nil in some cases, I opted to just ignore any malformed data.\n. In short: because we've seen malformed password records in the past, and I would rather fall back to a sane value here than crash the browser. sqlite doesn't stop crazy shit like storing strings in numeric columns, and there's always the chance that some version of Sync, at some point in the future, will fuck up and put shit in the DB.\nIn other words: yes, it will paper over bugs, but I'm not convinced that a crash here will make the bug any easier to find.\n. This is upstream code; it's imported wholesale because we don't trust Carthage.\n. We should figure out how to not have multiple SQLite implementations in the tree!\n. We should fixup these in all of our .hs.\n. Follow-up: lift Authorizer out of Sync, use it here.\n. Aieeeee if-let pyramid!\n. lol\n. s/Guid/GUID throughout.\n. s/Int64/Timestamp throughout\n. This whole file can go. import Shared instead.\n. File!\n. Same re Authorizer.\n. Then remove it?\n. I don't think so. 404 in the case of deletions is handled specially.\n. Timestamp\n. unsignedLongLongValue\n. ORLY! Nice.\n. I guess we could add modelForMobileBookmarksFolder or something\u2026 care enough for me to do that?\n. Yeah, good idea.\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1162742\n. So long as this doesn't fall afoul of the Args cast issue in SwiftData \u2014 i.e., when this runs, it works \u2014 lgtm.\n(Extra points if you write a test\u2026)\n. Can we split this into a separate bug? It has some potential side-effects, and I'd like to make sure we can land just the stringy parts.\n. There's no harm in making this timer?.invalidate().\n. Nit: Xcode screws up the leading spaces when you paste.\n. Nit: linebreaks!\n. This shouldn't be a localized string; it's an absolute date, not a relative date, so NSDateFormatter will take care of this for us. Just use the last half of this line on its own.\n. You don't need this nesting.\n. Again, this isn't a relative date; it's a short-form absolute, so you don't need a localized string.\nWhenever you see NSLocalizedString(\"%@\", you can simplify.\n. \"Description for a date more than a week ago, but less than a month ago.\"\n. Again, you don't need the nesting \u2014 just put the sub-condition first.\n. Doesn't this need to be .localizedStringFromDate?\n. \"Description for a tab that was visited within the last few moments.\"\n. Where does the 10 come from? (Where did the 5 come from?!)\n. The Swifty way to do this kind of thing is with if let. So:\nif let firefoxUA = NSUserDefaults.standardUserDefaults().stringForKey(\"UserAgent\") {\n    // Go straight for the fast path, which is short.\n} else {\n    // Compute.\n}\n. This whole method can be expressed as:\npublic func clearBookmarks() -> Success {\n    return self.db.run(\"DELETE FROM \\(TableBookmarks) WHERE parent IS NOT \\(BookmarkRoots.RootID)\")\n}\n. Might as well start with milliseconds directly: NSDate.now()\n. Same.\n. Can we share some of this with run, in a generic function? I didn't reuse code between them because there wasn't much boilerplate, but now there's a little more.\n. Should probably call this deferred to match above.\n. Pah, never mind, too many change points.\n. Nit: let.\nI think this should be serial, not concurrent, until we have the time to be more confident here.\nBy specifying concurrent, we're allowing multiple operations on this DB to be started serially but complete concurrently. I'm concerned that we might have code somewhere that relies on sequential ordering (e.g., inserting an icon then inserting a bookmark with that icon) that don't strongly impose sequencing.\nI think Sync is safe with this, because operations are always chained, but I haven't audited with the changed assumption in mind. I don't know about the UI code with any certainty.\nMore importantly, I'm not confident in how concurrent queues interact with transactions: I would imagine that a queue of operations like\nwrite: begin transaction A\n  write: begin transaction B\n  \u2026\n  write: end transaction A\n  \u2026\n  write: end transaction B\nwill randomly deadlock, depending on how quickly ops proceed, and that in theory we could end up closing transactions before they start, etc. etc.\nAnother way to do this, if you want to boost parallelism further, is to allow run and friends to take an optional queue argument. But let's give this a whirl first: just adding one additional serial queue might be enough.\n. We hand it to the webview, right? I don't see it deinit.\n. Isn't this actually dictated by timing? That is, this operation, once started, will run on some background queue. A few lines below we cancel it, but it might have already completed, no?\n. Lemme make sure I understand this.\nInterrupts don't make sense without a shared connection because we're not keeping a reference to the connection in the Deferred, right?\nSo isn't another way to do this to have two interrupt methods, one of which takes a connection argument? That way we can move towards the best possible world, where we keep the connection in the Deferred, and can thus cancel it directly?\n. Isn't another way to do this simply to set self.connection before calling the block, unset it after calling the block, and here to do:\nself.cancelled = true\nif let conn = self.connection {\n    conn.interrupt()\n}\n? That removes the need for an executing flag, and allows us to cancel individual connections, right?\n. dispatch_async(queue, self.main)\n. Remove double space.\n. Perhaps flip these around so we check err first?\n. Perhaps DeferredDBOperation or DatabaseDeferred?\n. If you have this take the DB first, you can use trailing block syntax.\n. let?\n. let?\n. This probably shouldn't be in here.\n. Oh, Xcode.\n. Re-add the space that Xcode hates!\n. Without a description, I don't know if this logging is worthwhile. With a description, I don't know if it's privacy-respecting\u2026\n. Can we just do a for..in loop here?\n. addUseOf(login) might be less redolent of history\u2026\n. I thought we had Cursor.map, but I'm wrong; we only have .asArray. But .asArray is map(identity), so perhaps we should add it?\nYou can use map(cursor, { $0.toDict() }), though.\n. If we're fine muffling failure and instead prompting (and I agree that that's the sanest thing to do), we can simplify this:\n{ res in\n    let credentials = res.successValue?[0]?.credentials\n    return self.promptForUsernamePassword(\u2026, credentials: credentials, \u2026)\n}\n. Perhaps if !(protectionSpace.realm?.isEmpty ?? true) {\n. You just treated realm as legitimately optional above. ! here seems unwise\u2026\n. LoginData is a \u2026\n. LoginWithUsageData\n. Or get rid of the : LoginData part\n. s/ :/:/\n. LoginUsageData\n. Would it be better to have this return [String: String?] and avoid all of the ?? \"\"s?\n. Do we need escaping here?\n. Use XCGLogger for thread safety.\n. We should probably shift this into a separate source file that's a member of the test targets.\n. Typo in TEXTL?\n. I think this can be null, no? We haven't necessarily ever used it!\n. Bytes.generateGUID() instead.\n. Same.\n. This would be nice if the LoginData could preserve its ID privately and use that in the WHERE clause. Worth a follow-up.\n. We have a typealias of Args that you can use throughout instead of [AnyObject?].\n. Why not just let args: Args = [login.hostname, login.username]?\n. args = [\nlogin.httpRealm,\n\u2026\n]\n. You can omit the withArgs, I think. There's a nil default in the func. (Throughout.)\n. shakes fist at Xcode\nspaces\n. I wonder if we document somewhere that this is only safe because SQLiteRemoteClientAndTabs has\nlet deferred = Deferred<Result<[ClientAndTabs]>>(defaultQueue: dispatch_get_main_queue())\n?\n. Maybe break out this clause into a separate method?\n. This is only necessary if you want to run it on the next event loop tick.\n. Follow-up: don't enter an error state here, show a bar at the top and show your old tabs from the DB.\n. Also this failure might be a ServerInBackoffError, which perhaps we want to handle specially\u2026\n. Is this running off the main thread?\n. So many errs!\n. Let's do this as the first, not last, thing in this block.\n. If we can do that, yeah. Trying to avoid running DB code on the main thread by accident.\n. Pah, yeah. Lemme fix that.\n. This can probably stay, no?\n. I guess it'd change into self.profile.history.clearAllFavicons().\n. I'm pretty sure you need this!\n. Use UNION ALL?\n. Need to figure out a neater way to run multiple DB ops with the same connection. self.db.run() is too nice to lose :/\n. Maybe\nreturn self.db.withWritableConnection() { conn in\n  // Something that returns a Deferred here\n}\nwith wWC returning Deferred and doing so on failure?\n. Oh, I see what you're doing. Yeah!\n. Extract magic constant to KeyLastRemoteTabSyncTime.\n. Also ?? 0 makes the clause below simpler.\n. Idea: rather than if (stale) { fetch } else { load }, let's do\nif (recent) {\n  if (load) {\n    return\n  }\n  fetch\n}\nThe scenario I'm thinking of is something like Clear Private Data or disconnect/reconnect. This'll recover more gracefully.\n. We didn't already have this?!\n. Maybe even consider\nif (recent) {\n  if (load) {\n    return\n  }\n  if (!fetch) {\n    load\n  }\n}\nthe idea being that it's better to fetch if we fail to load, and it's better to show stale than to fail to fetch. Maybe.\n. This bit is my only concern \u2014 if we fail to get cached tabs for some reason, we'll flicker an error view until the remote ones load. Maybe that's no big deal. Otherwise, LGTM.\n. Let's not hard-code 6. Use numOfThumbnails declared right above.\n. Success is a typealias for Deferred<Result<()>>, and succeed() = deferResult(()).\n. deferResult(0)\n. I don't think you need the for loop, right?\n. let commands = items.map(SyncCommand.fromShareItem)\n. Commands don't have a place for a GUID, so let's just kill that field and save a little effort.\ns/clientGuid/clientGUID/\nand as noted above, let's lift this into a factory method on SyncCommand.\n. Replace with our usual license block.\n. I think you might be splitting the difference between generic and specific here.\nGenerically, a command-send is a JSON blob: {command: \"foo\", args: [\"some\", \"args\"]} and a client GUID: what and who.\nSpecifically, a displayURI command is a particular command name and a particular list of args: URL, clientID, title.\nThis table seems to be neither one nor the other. Might be worth deciding if you want to just go full generic and store JSON as the 'value' column, or have command and args, or make this specific.\n. We have Args as a typealias here. And prefer let when you know the contents in advance.\n. I believe this will crash with an unsafe bit cast error. You need to break it out somehow: either\n[item.guid as AnyObject]\nor\nlet args: Args = [item.guid]\n\u2026\n. But we don't need command GUIDs, so \u2026 :)\n. Same.\n. Success.\n. This aspect of Table makes me so unhappy. Compare to #661 :(\n. Kill it.\n. Cargo-culted comment.\n. Kill it :)\n. No need for this comment.\n. Same.\n. This can be simplified a lot. And you should really take a look at ClientsSynchronizer, specifically the Command protocol. The signature of fromName:args: is what a command really looks like, and DisplayURICommand is what you're sending here.\n. Same.\n. GUID\n. Oh hey you did find it!\n. So\u2026 with modified and guid removed, this gets simpler. And I would argue that a command does not own its client GUID \u2014 you can send the same command to multiple clients, and the only place we pair up a command and a destination client GUID is in storage. So I'd revert the changes here.\n. If you really need to pair up a client GUID and a command for a while, and you want that to be SyncCommand, this is the place to do it:\npublic func syncCommandForClientGUID(guid: GUID) -> SyncCommand {\nMaking SyncCommand generic enough to always represent every Command allows you to get rid of the optional result, too.\n. This is a bad sign.\n. Swift optionals:\nself.title = command.title ?? \"\"\n. I do believe this is displayURI.\n. I think you want a sanity guard here to make sure this runs on the main thread.\n. Let's clean this up, not cargo-cult it.\nlet components = NSURLComponents(URL: url, resolvingAgainstBaseURL: false)\nif components.scheme != \"firefox\" {\n    return false\n}\nswitch components.host {\ncase \"firefox\":\n\u2026\ncase \"x-\u2026\"\n}\nYou get the idea. Too much nesting, too confused.\n. There has got to be a better way to do this.\n. Does this update the tab counter? My understanding is that it does not.\n. Don't pyramid. Swift lets you do this:\nif let foo = bar,\n       baz = noo where noo.foo {\n}\n. Invert this check:\nif !UIApplication.s\u2026 {\n    // Can't open this app, so just open the page without the app-back button.\n    return true\n}\n. Break these out into a method: makeBackButtonForApp: or something.\n. This is kinda wrong. You're directly manipulating the tabManager above, and you're manipulating the controller here.\nWhat we really want is either:\n- Make the tab, give it the attribute, and then switch to it \u2014 the right UI elements will appear as a result of switching\n- Ask the BVC to create the tab with the right attribute and display.\nYou're splitting the difference between the two, which means there's code in this AppDelegate that constructs a button, but you also need to understand and touch BVC.\n. self.callbackToAppButton is equivalent to this entire method.\n. That you've had to shed the private nature of this is a sign you're doing something wrong. Don't break encapsulation.\n. Perhaps\nif let callback = self.tabManager.selectedTab?.callbackToAppButton {\n     callback.hidden = false\n     self.urlBar.callbackToAppButton = callback\n} else {\n    if let existing = self.urlBar.callbackToAppButton {\n        existing.hidden = true\n    }\n    self.urlBar.callbackToAppButton = nil\n}\n. Just assign it, don't check.\n. let commands: [JSON] = self.commands?.map { JSON($0.value) } ?? []\nno?\n. This is wrong for the reason I mentioned last week.\nClient A uploads a client record that's missing os. We download it and stuff it into the DB. It ends up as a RemoteClient with os = null.\nWe now want to send a command to that device. We build some JSON\u2026 and here we default it to \"iOS\" + \"mobile\"! A few lines above we also trample the protocol, versions, etc.\nUntil that client uploads a new record, other clients will see it as an iPhone. Worse, any clients that try to use the version lists to decide on behavior will draw the wrong conclusions.\nThese really are optional fields, so they should be omitted unless we downloaded them in the first place.\nThere's another bug hiding here, too, which you should be able to write a test for. What happens if we're sending a second tab to a client that already has one queued? If I'm reading this code correctly, we'll overwrite any existing commands, including the existing displayURI command.\nThat leaves us with two options:\n\u2022\u00a0Make sure that our database stores everything we need to re-upload a client record, including its existing commands array.\n\u2022 Do what other clients do: work with client records at the JSON level, and use our DB only for client picking and display. When we want to send a command, do a two-step download-change-upload, mutating only the command array in the downloaded record.\nI think the latter makes most sense.\n. Careful. This will be run on the background queue, and these look like UI ops to me. You might want to do the same thing as in BookmarksPanel:\n.removeByURL(url).uponQueue(dispatch_get_main_queue()) { res in\n. We should probably document that this will run these all in one transaction and will block the thread; that's usually what we want, but could surprise.\n. Can we make this more readable?\n```\nlet sql =\n\"DELETE FROM (TableFavicons) \" +\n\"WHERE (TableFavicons).id NOT IN (\" +\n\" SELECT faviconID FROM (TableFaviconSites) \" +\n\" UNION ALL \" +\n\" SELECT faviconID FROM (TableBookmarks) WHERE faviconID IS NOT NULL\" +\n\")\"\nreturn (sql, nil) \n```\n. I'm pretty sure we don't want to run a query this heavy on each bookmark unstar, and in any case it's unlikely to help \u2014 most bookmarks with favicons will also be visited history, which will retain the icon.\nCan we just rely on hooking into history cleanup to do the work?\n. Same.\n. What thread are we running this insert on?\n. Same comment as for bookmark.\n. Align.\n. s/Url/URL/g\n. Same\n. self.commands = (self.commands ?? []) + commands\n. No need for else with early return.\n. Yikes, indenting.\n. let\n. let args: Args = [\"\\(filter)\"]\n. Space after colon.\n. This signature, combined with SyncCommand.fromShareItem and the optionality of SyncCommand.clientGUID, suggests that SyncCommand shouldn't have a client GUID; use a tuple or a dictionary where necessary.\n. Or\n. These tests might be simpler if you use Deferred.value:\nlet result = self.clientsAndTabs.deleteCommands(client.guid!).value\nXCTAssertTrue(result.isSuccess)\n\u2026\n. Any reason not to use self.db.runQuery here and elsewhere?\n. nods sagely\n. As mentioned previously, perhaps\n-> Deferred<Result<[GUID: [SyncCommand]]>>\nis a better signature here.\n. If clients ever has more than one element, these uploads will proceed in parallel. Which is interesting, isn't it? It should all work\u2026\nIf you decide not to do so, look at the walk utility.\n. This is a little bit of a code smell. We should fail if an upload fails. So you probably want either:\nreturn all(clients.map { storageClient.get( \u2026\nor to use walk.\n. We should upload ours first or unconditionally. If we screw up sending, we'll never upload our own record, and \u2014 worst case \u2014 we'll re-run commands we've received forever. Ruh roh.\n. s/Url/URL\n. I don't see an implicit proof that dialogTitle is never null, so let's add a line before:\ndialogTitle = dialogTitle ?? \"\"\nHardly perfect, but it'll do.\n. Sorry, it's a Vim/sed command. It means \"substitute\" \"URL\" for \"Url\" in this line. We often use this as shorthand for \"change this\".\nso:\nprivate let maxDialogURLLength = 225\n. Use a real Unicode ellipsis: \"\u2026\". Which should make your calculations a little simpler, because you're splicing a single character.\n. Should be >, otherwise you'll ellipsize a string that's the maximum valid length.\n. This isn't truncation. Truncation means chopping off the end. This is ellipsizing, so this should be called ellipsize. (And in the comment, too.)\n. I notice that this behaves incorrectly when maxLength is odd. That is, I expect the following equation to always be true:\ncount(longString.truncate(maxLength: x)) == x +  1\n(assuming \u2026 not ...), but it's not true.\n. To fix the odd number problem, you need to do one of these things:\n- Change this and line 72 to be Int(ceil(Float(maxLength)\u2026.\n- Fake it by changing maxLength on this line to (maxLength + 1).\nI recommend the latter, with a comment to note that this is essentially integer ceil.\n. In my testing this does not insert a newline. What I suspect you're seeing is the label wrapping, and this is a convenient place to put it. Can you post a screenshot of an ellipsized dialog with this using a real ellipsis character?\n. Does this animate the removal correctly?\n. Remove these two commented lines.\n. If I'm reading the code right, the profile is provided exactly once, immediately after construction (HomePanels.swift).\nAnd once set it doesn't change.\nSo can we achieve the same benefit by having let profile and setting it in the initializer, and eliminate this didSet altogether?\n. (I'm trying this out in a local branch)\n. wfm: https://github.com/mozilla/firefox-ios/commit/dd76b7084a09478ad8285d99cb2c4eeff13c32a6\n. I'm very slightly concerned that this will cause a retain cycle, so maybe unowned here?\n. s/where/WHERE/\n. let clientArgs: Args?\nThen assign nil below.\n. And consider just let with two branches with known-in-advance strings, one for the null case and one for the other.\n. Careful of using .value.\nreturn db.runQuery(\u2026) >>== { deferResult($0.asArray) }\nI think that'll still work for the empty array.\n. return deferResult(optFilter(\u2026))\n. Double-check these assumptions. I'm concerned about us screwing up\u2026\n. Extension on RemoteTab?\n. return clientsClient.put() >>> succeed\n. Don't forget that TODO. \n. optFilter(item.history.map { $0.absoluteString }), I think?\n. Commas sometimes occur in real-world URLs, even though RFCs say they shouldn't. The safest thing to do here is to turn item.history into a JSON string, or null- or newline-separate it, rather than using commas.\n. Let's be safer here. Parsing the URL can fail, and it will if we screw up and split on commas incorrectly!\n. Assuming I'm reading this correctly: you're figuring out whether to create and upload a record by\u2026 downloading the one on the server, creating the local one, and checking if they're the same.\nDon't do that. Let's track (a) when we last uploaded (don't do it if it's too recent), and (b) when we write to the tabs DB, so we know if there are any changes to upload.\n. isEmpty, invert.\n. Shouldn't need to do this. We're the ones who uploaded the existing record! We know exactly what we put in it!\n. Can we show a spinner or something?\n. This looks like a separate bug. Got a bug number and a description?\n. Perhaps instead of a spinner we should change the label to \"Syncing\u2026\" and disable the button. Otherwise you can hammer the button.\n. Aww, I liked that dialog.\n. deleteHistoryTileForSite\n. I'm not at all keen on this change; it still calls into a transaction and creates a Deferred, and it seems like it'll hide errors.\nI'd rather have the subset of callers that might not end up with a query do the check early.\n. Same.\n. There's a lot of complexity here for destination versions. I don't think it makes sense for to to be anything other than the current version. Can we cut that down?\n. domain_id for consistency.\n. If you're just going to ! this at the call sites, is there a point in making this optional?\n. We ought to normalize this, right?\nCan we just add a domain property to Site that does the right thing?\n. INSERT OR IGNORE will return quietly if the row already exists.\n. No need for else; you have an early return right above.\n. I think there are two better ways to do this.\n1. Pass the limit into a particular subquery, if we can arrange it that way.\n2. Push the grouping logic down into SQL, so you get the right rows directly and need to do no grouping in memory at all.\nThe latter should be eminently possible; they're already sorted by frecency and grouped by domain, so you just want to take the greatest-n-per-group solution where n=1.\n. Hm. I'd believe you, but every call site I see in the tests below does SQLiteHistory(\u2026)!\nAm I missing something?\n. Why not just return succeed()? After all, if the URL is missing, it won't show on top sites\u2026\n. Doesn't this need to bump to 7?\n. I thought our style was lowercase method names?\n. No longer true.\n. let\n. God I can't wait until we have guard.\n. We should never be INSERTing a site that already has a GUID.\n. Oh, I see, you've merged in the Sync API.\nI'd rather see this method pulled back into two: one that's a local site, one that's remote with a GUID. More explicit. You can still just chain off an ensureDomain call to pull in the domain ID, right?\n. deferResult\n. This will do weird things if the domain table isn't in the state we expect. Also I think you're setting should_upload to 1, which will be incorrect for the Sync case. These are basically two totally different code paths\u2026\n. Yeah, this is what I meant.\n. This might also need an ORDER BY sum(frecency), to smush together all of the top sites.\n. This whole clause from line 98 on turns into:\ncell.imageView.setIcon(bookmark.favicon, withPlaceholder: self.defaultIcon)\nRead the definition of setIcon.\nTry that. If it works, land it.\n. Do we need to explicitly denote a background operation here (e.g., if we're called from an extension)?\nPlease also test this with a queued tab ready to receive. I believe the stub delegate (that we'll use if this is called from inside an extension) just throws away the incoming displayURI command, and the received command will never be received.\nThis is the first time we'll be triggering a sync from an extension, so there are some new things to address\u2026\n. Yes. \nprivate func getSyncDelegate() -> SyncDelegate {\n        if let app = self.app {\n            return BrowserProfileSyncDelegate(app: app)\n        }\n        return CommandDiscardingSyncDelegate()\n    }\nThere are various approaches to fixing this.\n- Replace CommandDiscardingSyncDelegate with one that stuffs incoming tabs into the \u201cView Later\u201d queue (which didn't exist when it was written). This works around the need to have access to the UIApplication in order to process incoming commands, and partly eliminates the distinction between in-extension and in-app syncs.\n- Don't advance client timestamps when syncing clients from an extension. This is kinda hacky. We'll re-process our own record.\n- Expose a way to do an upload-only clients sync. \"Upload-only\" is a bit of a misnomer, granted.\n- Don't trigger an outgoing sync if we're not sending from inside Firefox. That defeats some of the point of this PR.\n. Invert conditional and early return.\n. Likewise.\n. Urgh!\n. Can we lift out this, and its siblings elsewhere, into a named method?\n. 'insert' or 'INSERT'.\n. 'WHERE'\n. Ah yes, we're selecting places with visitCount and lastVisitDate and then grouping with an aggregate, rather than grouping on a subquery with an aggregate over the computed frecency. Tricksy.\n. Perhaps make whereData optional and include an explicit AND here? Requiring the caller to know that an AND is necessary seems tricky.\n. This might be five thousand history rows, resulting in ten thousand queries being run on database upgrade. I think we need to do better; even at 1msec per query that's ten seconds.\n. I think this should be \"crashreports.send.always\" \u2014\n- Exists: has been prompted.\n- Is true: always send.\n- Is false: never send.\n- Is neither true nor false: prompt.\nWe can add a second pref for number of times prompted or declined at a later date if we choose.\n. Shouldn't this be the right place? We still want to catch crashes, even if we don't upload them.\n. To clarify: I think we should always configure Breakpad unless crash reporting has been explicitly turned off (without the ?? false), so that we catch crashes unless you've opted out, and we should set uploading enabled if it's been explicitly turned on. That gives us the middle ground for most users of catching the crashes but not submitting them, which allows us to prompt later.\n. Yes.\n. Can we just delete this?\n. let\n. Use ? everywhere. But by preference, do this:\nif let cell = self.cell {\n    cell.userInter\u2026\n    cell.textLabel?.\u2026\n}\n. \"Sync succeeded.\" and \"Sync failed.\"\n. Also, use log.debug, cargo-culting the definition of log from elsewhere if necessary. We shouldn't use println anywhere in our codebase.\n. Same point about the ?/! mismatch.\n. if let cs = NSURLCom\u2026 {\n  cs.queryItems?.append(\u2026)\n  \u2026\n}\n. Rather than doing this, let's go in the other direction: compute the string we want.\nFor example, for \nhttp://m.bbc.com/news/world-us-canada-33767775?foo=bar\nwe'd want\nbbc.com/news/world-us-canada-33767775\nThat's something like\npublic func baseDomainAndPath() -> String {\n    return self.baseDomain() + (self.path ?? \"/\")\n}\n. This isn't the right change to be making; this code affects the URL bar.\nTake a look at TopSitesPanel.swift, TopSitesDataSource.createTileForSite. That's where you should be using something other than the raw URL.\n. No. That bug is for the top sites cell, which usually shows the title but falls back to the URL. Top Sites now groups by domain, and has limited space, so we\u2019d like to show just the important bits of the domain and path.\nThe URL bar should always show the actual page you\u2019re viewing.\n. Nit: indenting.\n. Cargo-culted comment.\n. Can we share some implementation between this and FxAContentDelegate, which you cribbed this from?\n. This doesn't seem like it's going to be correct\u2026\n. Likewise.\n. These two settings should share an implementation.\n. The value for writeToFile: can be a String or NSURL. If the file already exists, it will be cleared before we use it.\nSo this is strictly better than we had, but we'll lose the last log every time the app opens. We need a log roller before this is useful.\n. Yeah, but this talks about (and is specific to), the Firefox Accounts content server.\n. Yeah, that works. I was intending to do the same but at the level of a sync \u2014 new log per sync, no saved logs for the rest of the app.\n. Everything under Sync, Storage, Account, or Providers/Profile.swift counts as Sync for our purposes.\n. If the URL doesn't parse, just use it whole:\nsite.title.isEmpty ? (NSURL(string: site.url)?.baseDomainAndPath() ?? site.url) : site.title\n. You've already grabbed the baseDomain, so:\nreturn baseDomain + (self.path ?? \"/\")\n. No need for the else; you're returning from the if block. Just return nil.\n. s/set/sequence\n. Extract all of the code that computes firefoxUA into a method, somewhere in Shared (Utils).\nThen you can just use it once in setUserAgent, and again in StorageClient.\n. This should be an MPL2.0 license header; see the other files in the directory. Be careful to restore the spacing that Xcode will lose when you paste!\n. Using bare functions like this for very specific functionality (as opposed to combining utilities) muddles the top-level namespace. Take a look at DeviceInfo for the pattern to follow: name this file UserAgent.swift, introduce a class here named UserAgent, and call this static method defaultUserAgent().\n. let.\n. Actually, better is to directly call UserAgent.defaultUserAgent() here, and get rid of the userAgent var altogether \u2014 otherwise we do the expensive UA computation eagerly when this class is loaded.\n. Eventually that'll let us split out individual pieces of functionality here for testing, amongst other things.\n. This import can now be removed.\n. let\n. This should be part of defaultUserAgent.\n. Remember I said to watch out for Xcode breaking the indentation here? All of the '*' at the start of the block should be in one vertical line.\n. Pull out the magic constant.\n. We have a UIConstants file, I think.\n. We'll be using these request extensions elsewhere, so I'd like for us to make the choice deliberately each time. And I'd also like for us to tighten up for Sync itself, too \u2014 I just didn't want to thread params around at this stage in the game.\n. You probably want to remove duplicates here, and perhaps even substrings.\n. I think this should be joining with AND, right? You want to match every entered word in either the URL or the title, not any of them.\n. Bug 1183257 is targeted for 1.1. Does this change anything?\n. Do this after the logging, just in case.\n. Should that be unowned, not weak?\n. Is this ever called without oldValue != newValue?\nSeems like this could simplify to:\n// TODO: remove this if it never occurs!\nif oldValue == syncLock {\n    return\n}\nlet notification = syncLock == 0 ? ProfileDidFinishSyncingNotification : ProfileDidStartSyncingNotification\nNSNotificationCenter.defaultCenter().postNotification(NSNotification(name: notification, object: nil))\n. log.debug?\n. It's synchronous. The reason we do it here is that SQLiteBookmarks doesn't depend on places, but places is what pokes BrowserTable and makes the bookmarks table appear!\nSo our two choices are: 1. introduce this side-effect dependency, or 2. init BrowserTable twice, which is a waste. We went for the former under analysis, and this does the same.\n. @fluffyemily commented it out because it was causing her problems. Parts of Sync will be non-functional without this.\n. I don't think this is the right fix \u2014 I think you want\nreturn NSURL(fileURLWithPath: documentsPath).URLByAppendingPathComponent(\"tabsState.archive\").path\n. Move this inside the else. No need to be outside, right?\n. Same.\n. if paths.isEmpty {\n    return nil\n}\n. Then we probably want to do this instead:\nif let (_, contentFilePath) = cachePathsForURL(url) where NSFileManager.defaultManager.fileExistsAtPath(contentFilePath) {\n    \u2026\n}\nthrow error\nright?\n. Make sure this file matches up with Bug 1196768.\n. We really ought to make these build parameters.\n. Yes!\n. I think this name is misleading. We're not including bookmarked items; we're including whether or not the results were bookmarked. Maybe includeBookmarkState?\n. if site.bookmarked ?? false {\n. Perhaps add an optional variant to extension SDRow.getBoolean elsewhere in this file?\n. I have a gentle preference for keeping the zero indent to buy more column width for SQL, and a moderate preference for not breaking blame \u2014 particularly not mixed in with a patch that makes other changes. If you're going to change spacing on lots of lines, do it in a separate commit so the real changes are easier to see.\n. I have my doubts about joining history directly against bookmarks here, particularly using the URL. This is already a pretty expensive query.\nThe obvious long-term solution is to switch to a genuine places-style system with some shared indexed ID.\nOther alternatives are to do a virtual join asynchronously after showing the list (which we should also do for icons), or to very simply\u2026 track bookmark state as a counter in each history item. Bookmarking is a rare event, adding history is a cheap place to do this query, etc. etc.\nCan you do some analysis about the complexity change in the EXPLAIN QUERY PLAN here, and how this affects timing on moderate history DBs (~5000 history items) and moderate bookmark sets (~100)?\n. + on a new line instead.\n. + on a new line instead.\n. + on a new line instead.\n. Musing: could we not just attach this as a listener to ProfileDidFinishSyncingNotification, so we decouple this?\n. Yeah, we (and I think the rest of the Swift community?!) dropped that convention, leaving capitals for classes/structs/enums. This came up in conversation on Wednesday with @jhugman and @fluffyemily, coincidentally.\n(I didn't want to fix the only other use in this file just yet.)\n. It's what was already there for the string. Presumably the InVision link is useful!\n. Nit:\n// Augment the cursor with tuples of IDs and URLs.\n. Can we just take the cursor here?\nThat would also let us do\n```\n\n== (includeBookmarkState ? self.addBookmarkedState : deferMaybe)\n``\n. Same comments.\n. Same.\n. Same.\n. Ooh, relies on implementation detail ofgetBoolean! Let's make this explicitly> 0`, please.\n. Yeah, see subsequent bug comment; this isn't a complete fix.\n\nI'm working in follow-up commits to fix some of the worst bugs in BrowserDB (like opening one connection per table!), and then to make initialization all occur in ordinary sequenced operations on the SwiftData queue.\n. Yup. More importantly, it does so on the thread that's dereferencing the property, so we were doing the lazy init multiple times. My fix elsewhere for the lazy init stuff was to use dispatch_once to ensure safety.\nAll of the bugs fixed in this queue interact, so it's hard to point the finger at just this race versus the creation of multiple SwiftData instances versus\u2026\n. Should we not be calling attachPlayerNodes here?\n. let options: [SDWebImageOptions]\nif browser?.isPrivate ?? false {\n    options = \u2026\n} else {\n    options = \u2026\n}\nor\nlet isPrivate = browser?.isPrivate ?? false\nlet options = isPrivate ? [\u2026] : [\u2026]\n. This might arrive seconds later. I think you probably want to use the captured isPrivate as suggested above.\n. If there's no self.browser, and we're a private tab, we might as well not run this code at all. So:\nguard let browser = self.browser else {\n    return\n}\n. Take a look at 1b6675410dd5c1abd88f217f680958b70ab90ae5\n. This is going to collide with ba4249b4f224f20a4ad0032108a5675dc54dc683\n. We're past string freeze for 1.1, right? Did this string already land somewhere else?\n. MPL header plz\n. Document that this is in seconds.\n. Typo: Fininsh.\n. successful\n. Can we kick this to a background queue? Otherwise we have a file stat on the main thread.\n. Split line\u2026\n. \u2026 and put where into the previous guard instead of doing it here?\n. Log here?\n. These two are never used, presumably because the enum now exists. Remove.\n. Do we need to call through to updateTabCountUsingTabManager as we do on line 439?\n(This is something that worries me about guard. Easy to not fall through when you mean to.)\n. let onlyNoHistoryTabs = !tabsToRestore.every { $0.sessionData?.urls.count > 1 }\nright?\n. Also let's short-circuit out if we didn't previously crash. Here we're walking every tab to restore regardless of whether we crashed.\n. This doesn't need a variable name addition \u2014 they're the same!\n. I think all of your added strings should have named tables. Ask @st3fan what the current style is for doing that.\n. Isn't iOS style to make this the affirmative verb: \"Restore\"? @tecgirl?\n. All of this logic seems like it should be in TabManager.\n. Further to the other crash reporter bug: it seems like TabManager should be in charge of saying \"huh, guess I have no tabs; maybe I'll open a blank one and select it\".\n. Can we actually compute this instead? It'll be\n2 * max(2, Int((self.collectionView?.frame.height ?? self.thumbnailHeight) / self.thumbnailHeight))\nmaximized for both portrait and landscape, which we can figure out, right?\n. I guess we have to worry about split-screen on iPads\u2026\nWhat will this do on an iPad Pro? Is 20 big enough?\n. Yeah, that's why I mentioned \"maximized for both portrait and landscape\" \u2014 i.e., use screen dimensions instead of frame, and figure both orientations at once.\nThe reason why I think this is worth doing: we don't just use this number for numberOfItemsInSection, we also use it as the limit argument to getSitesByFrecencyWithLimit, so this directly affects the number of returned results. It probably doesn't save a ton of time on the inner queries, but it does avoid us e.g., fetching favicons for pages that we'll never show.\nOr, put differently: set this to 1000 and see how slow it goes!\n. Point still stands: we should figure out the max number of tiles we could show on this screen, and just use that as the limit. \n. Nit: hierarchy, not heirarchy.\n. Nit: [GUID], not [String].\n. [GUID] (and throughout).\n. Hierarchy\n. guard\n. guard\n. This doesn't need the log tag decoration: log will log the function name and line number for you.\n. My uninformed speculation would be that this width needs to adapt, rather than aligning the text centered. Can you attach a screenshot, @sleroux?\n. Do we not also need to add audio to a UIBackgroundModes array in Info.plist?\n. I don't like this fix. Let me see if there's a better one.\n. I think adding a comment here pointing back to the bug would help:\n// The view might outlive this view controller thanks to animations;\n// explicitly nil out its references to us to avoid crashes. Bug 1218826.\n. If we never assign nil to this \u2014 making it non-optional \u2014 we could do = BookmarkFolder(BookmarkRoots.MobileFolderGUID, BookmarksFolderTitleMobile) here, and skip the rest of the changes in this diff.\n. Humph. Maybe adjust visibility and signatures so you can do self.source.folderForGUID(\u2026)? Or don't worry about it :)\n. If you don't need the result, use >>>.\nIn this case we probably want to always consider whether to invalidate and reload \u2014 not just if we're successful in querying. (One reason we might be unsuccessful in reloading is because the top sites cache is empty or broken, no?)\n. We probably should rename this to something clearer: refreshTopSites?\n. Note that this runs in the background.\n. Naaaaah. There are a few ways to do this:\n- Compute the max number of cells, just as we do in TopSitesPanel.\n- Get told the max the first time we need to use it, and assume that it'll never change.\n- Make it part of the cache pref, and if it gets larger, invalidate the cache and use the larger value.\n- Figure out the largest for any device we support, and put that here. (The laziest option!)\nWe shouldn't use 100 here, because we'll be needlessly computing 100 top sites when we'll never show more than, say, 16.\n. Notably: the smaller the device, the suckier it is, so we do care about making this as small as we can.\n. ```\nif prefs.boolForKey(\u2026) ?? false {\n    return deferMaybe(false)\n}\nreturn purgeTopSitesCache()\n\n\n== { self.updateTopSitesCacheWithLimit(TopSitesCacheSize) }\n    >>> always(true)\n``\n.>>> succeed`\n. This was the same fear I had when skimming this PR: that this 'distracts' ARC rather than fixing the bug.\n\n\nIf server is somehow being deinited despite being strongly held by a singleton, then something even more scary is happening.\n. This really ought to be self.sizeLimit + 1.\n. Fix leading indent. (shakes fist at Xcode)\n. extension NSURL {\n    public func getResourceValueForKey(key: String) -> AnyObject? {\n        var val: AnyObject?\n        \u2026\n        return val\n    }\n. private func getResourceLongForKey(key: String) -> Int64? {\n. guard (isRegularFile as? Bool) == true \u2026\nor add an extension:\nextension NSURL {\n    public var isRegularFile: Bool {\n        var isRegularFile: AnyObject?\n        try self.getResourceValue(&isRegularFile, \u2026)\n        return isRegularFile as? Bool ?? false\n    }\n. Beautiful.\n. This line is the only one that needs to be run on the main thread, so I think you should roll back the UIImage to NSData change and see if this still fixes the bug.\n. Just stick UIImage(data: data) in here and crack open a lunchtime beer.\n. Incidentally, I'd love to know why this line needs to run on the main thread!\n. Nit: >>> { succeed() } :arrow_right: >>> succeed.\nSubstantive: can we avoid the two pref writes by defining:\n\u2026 SQLiteHistory {\n    public func refreshTopSitesCache() -> Success {\n        let cacheSize = Int(prefs.intForKey(PrefsKeys.KeyTopSitesCacheSize) ?? 0)\n        return self.clearTopSitesCache()\n            >>> { self.updateTopSitesCacheWithLimit(cacheSize) }\n    }\nand using that both here and inside invalidateTopSitesIfNeeded?\n. \u2026 or similar. \nAlso, I think invalidateTopSitesIfNeeded is misnamed. It should really be updateTopSitesCacheIfInvalidated, right?\n. A better name is updateTopSitesCache, and stacking like this makes it clearer:\n```\n    func reloadThumbnails() {\n        self.profile.history.getTopSitesWithLimit(self.layout.thumbnailCount)\n                            .uponQueue(dispatch_get_main_queue()) {\n                                self.deleteOrUpdateSites(result, indexPath: indexPath)\n                            }\n    }\nprofile.history.removeSiteFromTopSites(site)\n\n\n\n\nself.updateTopSitesCache\nreloadThumbnails\n. It's less the `Needed` part and more the `invalidated` part that concerns me \u2014 that method should be called _after_ something has already set the invalidation-needed pref, and it's responsible for dropping the old cache and repopulating it.\n. We don't need to return a value here \u2014 it never escapes `deleteHistoryTileForSite`, and it's not used subsequently within, so you can just use `uponQueue` and not bother with any of the `return`s.\n. You can actually move this before the `self.updateDataSourceWithSites` call, too.\n. Use this in `updateTopSitesCacheIfInvalidated`.\n.\nlet indexPaths = visibleCells.map { \u2026 }\n    .sort { \u2026 }\n```\n\n\n\nHaving this as a var seems kinda misleading now.\n. Same, I guess.\n. Gentle preference for just stacking with a let.\n. You can probably do this:\nXCTAssertTrue(addLogins().value.isSuccess())\nXCTAssertTrue(removeAllLogins().value.isSuccess())\n. I generally prefer that pattern versus using expectations.\n. I think you want contains, not startsWith. Maybe I'm looking for @mozilla.com?\n. Is there any value in taking three different strings as input here?\n. Ol' Bobby Tables is going to have fun here, let alone folks with quotes in their passwords\u2026\n. You can omit args or use nil.\n. We should pin this to a version.\n. Nit: align the *s.\n. Same.\n. Nit: indenting of *.\n. While you're here: refelect => reflect.\n. @tecgirl, how do you feel about this string?\n. Nit: s/refelect/reflect\n. Nit: s/selectedUrl/selectedURL\n. Instead:\nguard let selectedWebView = selectedTab?.webView else {\n    return\n}\n. Then below you don't need to force-unwrap.\n. For the record: sqlite3_close behaves correctly when the input is nil. I still think this is worth logging and returning.\n. Yeah, Xcode can be a pain sometime!\n. Wanna rewrite the existing pragma to use this?\n. SQLITE_CORRUPT is the constant you want.\n. handles\n. And you should add this logic to executeChange, too \u2014 just above.\n. If you do this with an extension you can use\nreturn (url as? NSURL)?.allocatedSizeForFileAtURL() ?? 0\n. After this, we should flush the log and close it.\n. I'd like to add a simple thread-safe flag to make sure we only do this once per DB. No sense spamming this full dump to disk six or seven times every time we hit it.\n. Goddamn Int32, amirite?\n. collection?.indexPathsForVisibleItems()\n           .forEach(updateRemoveButtonStateForIndexPath)\n. guard let here \u2014 that as? can still fail.\n. You should use bindQueue here so you always set the cached cursor on the main thread.\n. I'm trying to think of when this will be true. When they exit edit mode, immediately re-enter it and remove another tile?\n. Comment that this is always called on the main thread.\n. And add an assert for it!\n. Time for an assertIsMainThread helper?\n. Does this log the code? If not, let's do that too. (And eventually we want to record telemetry for this\u2026!)\n. A reminder that in most cases \u2014 those that don't chain through the main thread \u2014 you can do\nwithMachine(\u2026) {\n    \u2026\n    let newState = stateMachine.advanceFromState(engagedState, now: 0).value.successValue\n    XCTAssertEqual(newState.label, engageState.label)\n}\n. This isn't right: it'll make all Top Sites load whichever full URL contributed the most to the tile.\n. Might be time to act on my note elsewhere in this file:\n// The obvious solution here and in collectionView:didSelectItemAtIndexPath: is for the cursor\n        // to return domain sites, not history sites -- that is, with the right icon, title, and URL --\n        // and for this code to just use what it gets.\n. extension Site {\n    var tileURL: NSURL {\n        return NSURL(string: site.url)?.domainURL() ?? NSURL(string: \"about:blank\")!\n    }\n}\nand override in SuggestedSite. Or just dump it straight into the class definitions.\nThen here:\nlet destination = site.tileURL\n. Should row titles be Capitalized?\n. Typo: modified.\nAlso, you should explain in the localization note what the parameter is.\n. I would change these, given #1359 and the strings we sketched out in Bug 1225224, to\nAre you sure?\n    This will permanently delete your saved logins.\n    [Cancel]       [Delete]\nor, if Sync is attached and syncing passwords:\nAre you sure?\n    All logins will be deleted from your connected devices.\n    [Cancel]       [Delete]\nand similar for the selected logins case (\"Selected logins will be deleted from your connected devices.\").\n@tecgirl can opine more.\n. I'd call this clearSyncedHistory; it won't propagate to the server yet.\n. This isn't quite enough. A user who's not syncing history is going to be really alarmed if we tell them that their history will be cleared on their desktop!\nPlease add a note to that effect and file a follow-up bug, and I'll give some guidance in the bug about how to figure that out.\n. UIAlertController.clearCloudHistoryAlert(clearPrivateData)\n. Nono, I mean you have a typo in the comment:\n\u2026was last modifed\"\n. @tecgirl gets the call.\n. ?\n. As with #1370, this isn't correct \u2014 if you're not syncing passwords, you're going to be really alarmed to be told that the logins you delete will be removed from your other devices.\n(Also please steal that review request from @st3fan!)\n. Nope \u2014 deleteByGUID is for Sync to use. Front-end code should use removeLoginByGUID.\nAlso, those deferreds will be firing immediately, and will all end up in the database queue. If you want to do this serially, do this instead:\nwalk(loginsToDelete) { self.profile.logins.deleteByGUID($0.guid, deletedAt: now }\nwhich returns a single Success.\nInstead I'd suggest generalizing that function to removeLoginsWithGUIDs so that this can be done in a single database transaction. Let me know if you need pointers on that.\n. The simplest \u2014 and most accurate \u2014 thing to do is to ask SyncablePasswords if there are any passwords that would propagate as deletions; not only does this avoid trying to extract state from the account, which is complicated and error-prone, but it also correctly muffles the warning if they haven't synced passwords yet, have none saved, or already wiped them. Storage is the source of truth!\nFor history, #1370 calls this hasSyncedHistory, so I'd ape that.\nThis basically comes down to checking if loginsM is non-empty or loginsL has anything with a sync_status that's not New. We're effectively trying to figure out if SQLiteLogins.removeAll will leave deletion sentinel rows in loginsL.\n. This is fine, but in the future you might consider inverting these, which is what we do on Android:\n```\npublic static let MOZ_LOGIN_MANAGER =\nif MOZ_CHANNEL_AURORA\nfalse\nelse\n\u2026\nendif\n```\nWhen these flags proliferate you increase the chances of you writing code that doesn't compile with some sets of flags due to omitted or misnamed vars in one of these branches.\n. ~~You can drop this down to one line.~~ Wait, that's not true.\n. I'm a little concerned that this is prone to races, but I think the impact of races won't be bad, so we're OK.\n. ~~File a follow-up to make this take 1 transaction not N.~~ Oh, this is the mock. Never mind.\n. if guids.isEmpty {\n    return succeed()\n}\n. You should replace the body of removeLoginWithGUID with:\nreturn self.removeLoginsWithGUIDs([guid])\n. I have a preference for IS NOT instead of !=. It works with NULL, and it's a little less prone to typos.\n. let sql = \"\\(checkLoginsMirror) UNION ALL \\(checkLoginsLocal)\"\nreturn self.db.queryReturnsResults(sql)\n. Nit: if you keep the old indentation throughout, it makes this all clearer.\n. Nice.\n. forEach(updateRemoteButtonStateForIndexPath)\n. If you don't need the result, use uponQueue.\n. Perhaps removeSiteFromTopSites should also invalidate the cache?\n. And this doesn't need to be on the main queue, so I think this whole method can be:\n```\nlet newSites = self.profile.history\n                   .removeSiteFromTopSites(site)    // Invalidates cache.\n           >>> { self.profile.history.getTopSitesWithLimit(self.maxFrecencyLimit) }\nreturn newSites.bindQueue(mainQueue) { result in\n    self.deleteOrUpdateSites(result, indexPath: indexPath)\n    self.collection?.userInteractionEnabled = true\n}\n``\n. Newline before.\n.Separator. Same.\n. If this fails, what should we do?\n. Can't that wholemapclause disappear?\n. Same.\n.WHERE is_overridden IS NOT 1 AND guid = ?. Take a quick skim through the existing code (look for1000000`), see if this should be used anywhere else.\n. Can we stay in edit mode?\n. If we're specifying a fixed date format \u2014 i.e., not one that's localized \u2014 then this doesn't need to be a localized string.\nAnd we are, so it doesn't. Just:\nlet formattedLabel = formatter.stringFromDate(NSDate.fromTimestamp(timestamp))\n. Hypothesis is that this bit is unnecessary.\n. restoring of\n. = false ?\n. It just occurred to me that this is wrong for existing sessions; the last URL is not necessarily the current page, because there could be pages in the forward list.\nThis should be\nif let url = sessionData.urls[sessionData.currentPage] {\n. if let p = protectionSpace.`protocol` {\n    return \"\\(p)://\\(protectionSpace.host)\"\n}\nreturn protectionSpace.host\n. let scheme for clarity.\n. We should also be saving the port if it's not 443 or 80.\n. We might consider defaulting this to https.\n. And again, use scheme.\n. Add an extension method on NSURLProtectionSpace to return https://foo.com:8080. Call through to that from Login.hostname.\n. This is async, so:\n.upon { log.debug(\"Removed malformed logins. Success: \\($0.isSuccess)\") }\n. This is async, too, so I'd tag a .value on the end here to force it to complete before we show the prompt.\n. Add a note that we can do this because we only care about the username/password etc., not the scheme.\n. Add to ArrayExtensions's extension on SequenceType:\npublic func find(f: (Self.Generator.Element) -> Bool) -> Self.Generator.Element? {\n    for x in self {\n        if f(x) {\n            return x\n        }\n    }\n    return nil\n}\nAt this point you can also kill the free function find([T], f: T->Bool) -> T? that's hiding in Functions.swift.\nThen here just do\nreturn logins.find { login in \u2026 }\n. Note that this is assuming that cursors can be iterated multiple times. I'd be more comfortable turning logins into a [LoginData] up on line 45 of Authenticator.swift. (Methods written against SequenceType won't care.)\n. flatMap is map + flatten, so you can rewrite this more simply.\nlogins.filter { $0.hasMalformedHostname }.map { $0.guid }\nor\nlogins.flatMap { login in\n    if login.hasMalformedHostname {\n        return login.guid\n    }\n    return nil\n}\n. ||\n. scheme and port in\u2026\n. iOS table stuff makes me so sad.\n. Rework this to bulk query. If we're showing 100 logins, we're going to trigger 100 different queries and ~200 different runnables with 100 different UI updates. At the very least we can grab (url, icon) pairs, cluster them (see my Array.groupBy commit), and skip straight to updating the UI.\n. This'll end up as something like getFaviconsForURLs, returning [String: [String]].\n. Ah, I see you exclude non-visible rows from the UI part. So the DB work will be the majority \u2014 worth batching up.\n. Grab the character then uppercase it?\nWhat happens for an IDN?\n. Does this mean we don't show non-domain entries at all? Is that documented somewhere?\n. Does UIImage cache, or should we save this somewhere for reuse?\n. What for?\n. This makes me really uncomfortable.\n. Use the GUID here instead of the Login instance, and then you don't have to make its Hashable implementation lie.\n. Or, better, key on URL!\n. I am surprised this compiles, but it definitely won't always work at runtime. logins at this point could be a zero-length array, so you'll get a fatal error for array index out of range.\n. If you make this method return Deferred<Maybe<NSURLCredential?>> then you have two possible ways of expressing failure: a failed Maybe for an error, and a nil credential for no match in the DB. And you can do this without manually futzing with Deferred :)\n. Here \u2014 if you switch this to chaining rather than poking a Deferred \u2014 you'd do something like\nguard logins.count >= 1 else {\n    return deferMaybe(nil)\n}\n. You're taking a little bit of your own path here \u2014 you're conflating a database error (upon is given a Maybe with no successValue) with not finding the login. \n. I don't think you still need this given the methods below, right?\n. Add a comment!\n. guard let credentials = result.successValue else {\n    return deferMaybe(result.failureValue ?? LoginDataError(\u2026))\n}\nreturn self.promptForUsernamePassword(\u2026)\n. Use guard, return early, kill the nesting.\n. Rather than this, and the successValue check, you can just use >>== instead of bind.\n. Did you mean this to sneak in?\n. So right here, just do:\nlet appVersion = AppInfo.appVersion\nif profile.prefs.stringForKey(\"latestAppVersion\") != appVersion {\n    self.openURLInNewTab(AppConstants.whatsNewURLForVersion(appVersion))\n    profile.prefs.setString(appVersion, forKey: \"latestAppVersion\")\n}\nNote that you only incur the prefs write if the version changed!\n. Follow-up: check for network connectivity before trying to open the tab. You can use the various Reachability libraries to do this, or import SystemConfiguration yourself, or fetch the page contents here, or add a variant of openURLInNewTab that waits for a successful fetch before opening the tab and running a provided callback.\n. Get rid of all of these unrelated project file changes.\n. Try running this in a Playground:\n```\nfunc x() -> Int? {\n    print(\"I was called\")\n    return 5\n}\nfunc y() -> Bool {\n    print(\"So was I\")\n    return false\n}\nif let xx = x() where y() {\n    print(\"Here\")\n}\n```\nto see what's up with this, then change it to\nif profile.prefs.stringForKey(\u2026) != appVersion && hasConnectivity() {\n    self.openURLInNewTab(AppConstants.whatsN\u2026(\u2026))\n}\n. Move this to DeviceUtils.\n. Just\nreturn NSURL(string: \"\u2026\")\n\u2014 you're testing for an optional and returning the value or nil, which is redundant.\n. Kill this change\u2026\n. \u2026 and this one.\n. And these, and the rest that aren't about Reachability.\n. Put this file in ThirdParty, both the folder and the project group.\n. You don't need this import: DeviceInfo is in Shared.\n. That doesn't seem right.\n. Is this needed?\n. I suggest picking a name other than result here to avoid confusion.\n. If you make getFaviconsForHistoryURLs not return nulls, you can probably fight the type system to avoid this flatMap.\n. This is the worst kind of line-painter problem: for each login you're walking a potentially long list to find the ones that match. This is O(n^2): n logins, walking a list of n or more favicons with the filter.\nYou want this to be O(n) + O(log n) \u2014 so make sure the list of returned favicons is attributed by hostname if you can, then partition them using something like SequenceType.groupBy, then walk the logins doing a lookup in the hash table.\n. Reverse this: look up by index then uppercase the char.\n. How does this work for IDNs?\n. Didn't that land?\n. Each call to sd_setImageWithURL will construct a new UIImage(named: \"faviconFox\"). I suggest you compute that once.\n. If you're calling asArray multiple times, you might as well just use the cursor directly :)\nSave the array, not the cursor.\n. Can we just do a case-insensitive comparison?\n. Same comment re placeholder.\n. We really need to put this somewhere!\n. row.getTimestamp(\"iconDate\")\n. Ugh, Favicon makes me so upset. Still, NSDate.fromTimestamp(iconDate).\n. guard !urls.isEmpty else {\n. Array(count: urls.count, repeatedValue: \"\\(TableHistory).url LIKE ?\").joinWithSeparator(\" OR \")\nOr make an extension method on Any, .repeat(count: Int) -> Array<Self>.\n. We discussed some query approaches on IRC.\nThis particular chunk of code won't really change much; you should still apply a transform to get the cursor into something with sub-linear lookup time.\n. And I'm very happy to not land this work in 2.0.\n. Gentle preference for phrasing this as:\nlet deferred = text.isEmpty ? profile.logins.getAllLogins() : profile.logins.searchLoginsWithQuery(text)\nreturn deferred.bindQueue(dispatch_get_main_queue(), f: reloadTableWithResult)\nbut why not just make SQLiteLogins.searchLoginsWithQuery fall through to getAllLogins when passed an empty string?\n. overridden\n. Put both of these queries on one line. Helps with the compilation speed.\n. Nope nope nope nope\n. You can probably drop this linebreak change altogether, save the blame.\n. s/Overriden/Overridden/g\n. These lines will be called at least once for every login that changes during a sync, which is probably not what you want. Instead, call this once at the end of LoginsSynchronizer.synchronizeLocalLogins.\n. File a bug, leave the pointer here.\n. Interesting approach to bool-with-reason!\n. If we make this change, we should remove the inout err, no?\n. Let's put the catch closer to the try, so we don't have to reindent the world:\nlet children: Cursor<BookmarkNode>\ndo {\n    children = try getChildren(guid)\n} catch {\n    log.error(\u2026)\n    return nil\n}\nI think that'll compile happily \u2014\u00a0perhaps with var, and it basically guards a throwing call.\nWe can also express this as guard let children = try? self.getChildren(guid) else {, which you might prefer.\n. Don't use NotificationDataLoginDidChange! We listen for that to trigger a sync:\nhttps://github.com/mozilla/firefox-ios/search?utf8=%E2%9C%93&q=onLoginDidChange\n. If you do this, you'll get a second sync immediately after the first, and if that adds records you'll get a third\u2026\u00a0and so on.\n. I don't think you need to listen to both. I think you need one and one only, which we might call NotificationDataRemoteLoginChangesWereApplied, and we issue that in the place you currently send LoginDidChange.\n. I don't understand why this needs !. bindQueue doesn't return an optional.\n. Notably, callers tend not to check the error result of withConnection, because they're wrapping it with their own semantics.\n. But we're not redisplaying (undoing the user's edits), right? I'm not sure what the point is of flipping back.\n. And rdar://24571325 for completeness.\n. > When there is no selection, the active element is the page's <body> or null. \nSo I think you want a null check on the activeElement here.\n. In the vein of lifecycle bugs: I think you might want to capture selectedTab or webView itself outside of this async block. It doesn't feel particularly right to be firing off some background work in response to a UI thread change \u2014 a background callback \u2014 that just runs against a potentially different UI state.\n. This needs to be protected by a critical section, and we should use this instead of the lock for sync status. That is: the existence of a non-filled currentSync implies that a sync is in progress. A filled Deferred here, or this being nil, implies that no sync is in progress.\n. The is-sync-in-progress behavior either needs to end up inside syncSeveral or withSyncInputs, or every caller of either of those functions needs to check for the current sync; we don't want only one spot (syncEverything) to be checking.\nNotably there are a few spots where we run partial syncs for a specific purpose: for example, syncClientsThenTabs. We might choose to use a Deferred<Maybe<[EngineIdentifier]>> as currentSync in order to identify what's currently syncing; when that sync is done, we'll know whether it synced what we wanted to sync, and if it didn't we can queue up a partial sync for the rest.\n. Do the version check before constructing the URL.\n. I'd probably phrase this as ?? \"0\".\n. Yeah, we simply omitted the column from the query. It should be there.\n. I would prefer && source?.current.guid == BookmarkRoots.MobileFolderGUID. I don't trust the parent folder stack to always be correct and to be an invariant.\n. Does the en one overlay onto these? I'm concerned that en will get a 96x96 icon but every other locale will now fall back to 16x16!\nThe data URI looks bigger than 16x16, but not as big as 90x90\u2026\n. Shouldn't these be labeled as 96*96?\n. where RemoteTab.shouldIncludeURL(displayURL)\nand below.\n. Nit: remove double spaces.\n. This should have the same filter call as above.\n. They're very similar, in fairness!\n. Nit: ws change.\n. We nil-out syncTerminal within the critical section, immediately after filling it. So we can only ever get here if it's nil or unfilled, right?\n. Document all of these private functions: they must only be called while the sync lock is held.\n. s/Sycing/Syncing\n. Lemme read this back, see if I'm understanding correctly.\nWe start with no syncs ongoing: both currentSync and syncTerminal are nil.\nWhen a sync begins, we assign it to currentSync and put an empty Deferred into syncTerminal.\nWhen another sync wants to join the queue, we chain it off currentSync, and assign the result to currentSync.\nWhen any sync task finishes \u2014 i.e., fills a current or former value of currentSync \u2013 it calls endSyncingMaybe. This is guarded by a critical section so it can't run for more than one task at a time. If we're the last sync \u2014 the current sync has filled \u2014 then we're done.\nWe never leak currentSync, only syncTerminal; any post-sync tasks hang off the latter, so we can seamlessly switch in intermediates.\nRight? If so, can we get a block comment a little like that up by those definitions? This logic is a little complicated!\n(I don't have any good ideas to make it simpler, other than to encapsulate this concept of a task queue with a final result\u2026)\n. (The ones that must only be called when the lock is held, obvs!)\n. You've changed the behavior here.\nWe took the sync lock only to make sure that we didn't run during a sync. With these changes we'll notify begin/end of a sync. Can we simplify this?\n. Use ArrayExtensions's find method.\n. I'm not a big fan of this combination of beginSyncing and currentSync! \u2014 indeed, I'm not a big fan of beginSyncing at all. Can we shift that side-effect into a didSet method on one of the Deferred slots?\n. Also nits: newline after in, and prefer self.currentSync for clarity.\n. I don't think this is quite correct. This means that we'll never actually fail to sync, in the sense of filling the Deferred with an error; instead we'll always report that we haven't started the next set. I think you need a failure version of endSyncingMaybe/endSyncing so you can reject the chain.\nBut if you think about it, that's exactly what a Deferred<Result> is \u2014 it's a pending success or failure. The only reason this entire chunk of code isn't just chaining go into syncTerminal is that we might be inserting another link in the chain, and Deferred isn't set up to unlink the previous!\nMy proposal, then: endSyncingMaybe should take the Deferred that just finished. If it's the last one, fill syncTerminal with its values.\n(Modulo one thing, which I don't think you've handled here; we'll see when I've finished the review!)\n. Another way to do this is to have endSyncingMaybe collect the result statuses for each sync (line 990); that way this function can just skip the ones that are already done.\n. Ah, you handle it below, and my suggestion still fits.\n. You should check isSuccess on the input here. If the removal failed, bail out.\n. I'd break this into a separate appending line, just to avoid implicit order of evaluation/is-this-a-var questions.\n. refreshTopSites is called as a result of notifications, and I believe it's consequently called on an arbitrary queue. You need to synchronously fetch this value on the main thread.\n. Prefer self.sites for clarity.\n. Can we just inline this method? We call sitesInvalidated = false elsewhere\u2026\n. Counter-nit: you're wrong! It's not a possessive or contraction. \"The sheep ate because its stomach was empty, and it's an animal.\"\n. Nit: leading spaces. (shakes fist at Xcode)\n. You can use always(inputValue) to get a Deferred that always resolves to the value.\n. To clarify: this is a system that behaves like an independent sequential reducer, so it needs an initial state () -> S, a sequence of tasks S -> T, and (implicitly) a post-accumulator T, T, T -> [T].\nYou should address \u2014 in comment or code \u2014 why you're choosing to avoid the usual reducer pattern of ([T], (U, T) -> U) -> U. In particular, the tasks you have here take an S as input, and it looks like that S never changes; it's passed to all subsequent tasks.\nIt's worth thinking about whether you're intending that S to be mutable shared state, or whether you're really intending there to be chaining, or if callers need to handle interdependence between tasks themselves.\n. Add a note that it's recommended for callers that might chain tasks at any time to follow a certain pattern of initialization: create, and immediately chain completion to throw away this object when it's done, replacing it as needed.\n. This is the U in a typical reducer. In a typical reducer it's a sequence, not a map. Note that if you give tasks the responsibility for how to reduce, you don't need them to expose their name. (You can do this in a wrapper.)\n. Thinking about it: I'm actually inclined to make sure that this queue doesn't know anything about string labels. Imagine you want to write an image uploader with this \u2014 one image at a time, push in a task that uploads and reports success. You can phrase that with reduce, synchronously, like this:\n```\ntypealias UploadResults = [String: Bool];\nfunc doUploadCollectingResults(var results: UploadResults, file: String) -> UploadResults {\n    // Super lazy for example.\n    results[file] = true\n    return results\n}\n// Then...\nlet uploads = [\"foo.jpg\", \"bar.jpg\"];\nlet results = uploads.reduce([:], doUploadCollectingResults)\n// Returns [\"foo.jpg\": true, \"bar.jpg\": true]\n```\nIf you make each task effectively like reduce's combine function, handling their own accumulation (which you can implement in a wrapper), then you don't need accumulator at all.\n. That is to say: this queue would solely manage chaining tasks, which makes it a lot simpler. If you wish you can then write a little wrapper that knows about SyncResult and a map of labels and doesn't re-run work\u2026\n. for category in self.categories where category.rows > 0?\n. Can't use #selector here?\n. No need for else here.\n. Prefer defer for this.\n. Nit: whitespace snuck in before dict.\n. defer\n. No need for else.\n. No need for s or else:\nif character == \"?\" {\n    defer { idx += 1 }\n    return template + transcode(expressed.bindings[idx])\n}\nreturn template + String(character)\n. Nit: space between ) and {.\n. Nit: indent the start of these lines.\n. s/appeneded/appended\n. index is unnecessary if you pop items off the front of queuedItems as they run \u2014 that array becomes remaining.\n. .uponQueue(dispatchQueue, block: continueMaybe)\n. This is a great opportunity to drop all of the remaining queued items to give ARC a hand.\n. No longer true!\n. I don't think you need dDA \u2014 you don't care about the return value, right? So just dispatch_async will suffice.\n. Same.\n. I'd feel more comfortable about:\nreturn deferMaybe(status?.1 ?? .NotStarted(.Offline))\nor something. It's possible that syncSeveral doesn't return a status for the given label due to a bug, and I'd rather not crash here!\n. s/synch/sync\n. IIRC the separation existed to avoid compiler bizarreness. Might no longer need them; can I punt that to a follow-up?\n. Oh, I remember! Protocol methods have only very limited ability to specify defaults. So we can't clean this up much.\n. \"firefox\" throughout should be a brand reference. I think we're also using string identifiers now; @thebnich?\n. This might be more accurate if you have NoUnmergedRemoteChanges and UnmergedRemoteChanges \u2014 it's the UI that's deciding that those two should be interpreted as RW/RO.\n. I think\nreturn chain(self.buffer.isEmpty()) {\n     $0 ? .NoUnmergedRemoteChanges : UnmergedRemoteChanges\n}\n. That's what the chaining operators do. What am I missing about this change?\n. Again, if validation fails, it'll fill the deferred with a failure, and won't move on to the next step. Why do you need bind?\n. Same.\n. We have a test helper:\nextension Deferred where T: Succeedable {\n    func succeeded() {\n        XCTAssertTrue(self.value.isSuccess)\n    }\n}\nExtend that to have .failed, too, and use it here and throughout.\n. Also add tests before and after the go for the edit state (or whatever you rename it to): it should return read-only both times.\n. I don't see you call this anywhere in this PR. Am I missing something?\nEven so, I question whether this needs to be a separate protocol. This should be hidden within the factory source, no?\n. This runs three SQL queries in order to get the result. You only need one.\n. If direction != .Local, you don't even need to run the first query, right?\nBut even so, here you only need one query!\nSELECT\nifnull((SELECT 1 FROM \\(TableBookmarksBuffer)), 0) AS hasBuffer,\nifnull((SELECT 1 FROM \\(TableBookmarksMirror)), 0) AS hasMirror\ngives you two columns, one for each table.\n. Even better, use exists:\nSELECT exists(SELECT 1 FROM \\(TableBookmarksBuffer)) AS hasBuffer, \u2026\nwhich might be smart enough that you can insert it into your isEditable clause above, and skip this whole function.\n. You're missing a .value here to resolve the deferred. Look for this error throughout.\n. You're correct, Steph.\nTake a look at the existing code for removing a bookmark. You'll see it deletes the local bookmark if it exists, marking the parent as changed. If it's not a local bookmark, it overrides the mirror contents, again updating metadata. The same thing needs to happen here, but even more so: the bookmark you're editing might be a read-only shadow, a merged item in the mirror, a merged item that's already overridden by a changed local version, or a brand-new local item that hasn't been synced yet.\nYou should add tests for each of these situations, just like Steph's isEditable tests.\n. Don't forget to run tests, then fix this when they fail :)\n. Just put this at the top level as a private let two lines above, rather than jumping through the hoops to put it inside the extension.\n. Add parens here to make the precedence clear. Or move back to the old !includeIcon branch above to avoid needlessly evaluating withIcon if the compiler doesn't reorder.\n. The original implementation for all of this was:\n```\nextension SQLiteBookmarks {\n    private func getRecordsWithGUIDs(guids: [GUID], direction: Direction, includeIcon: Bool) -> Deferred>> {\n    let isEditable = (direction == .Local) ? 1 : 0\n    let args: Args = guids.map { $0 as AnyObject }\n    let varlist = BrowserDB.varlist(args.count)\n\n    let values =\n    \"SELECT -1 AS id, guid, type, is_deleted, parentid, parentName, feedUri, pos, title, bmkUri, siteUri, folderName, faviconID, \\(isEditable) AS isEditable \" +\n\n```\nThat is:\n- If the direction is .Buffer, that means we're showing buffer items overlaid on the mirror. None of these are ever editable.\n- If the direction is .Local, all non-folder bookmarks produced from this model are editable.\nThe change you made here was supposed to enhance the latter: we're editable if we're showing (local + mirror), but only if we're not out of synced \u2014 that is, we're editable if .Local and either the buffer is empty or the mirror is empty.\nYou can thus simplify this whole function:\n```\nprivate func isEditableExpression(direction: Direction) -> String {\n    if direction == .Buffer {\n        return \"0\"                     // Always false for the buffer model!\n    }\nreturn \"SELECT exists(\" +\n       \"SELECT exists(SELECT 1 FROM \\(TableBookmarksBuffer)) AS hasBuffer, exists(SELECT 1 FROM \\(TableBookmarksMirror)) AS hasMirror  +\n       \"WHERE hasBuffer IS 0 OR hasMirror IS 0)\"\n\n}\n``\n. Executedb.run` with a single big array of queries, rather than calling it N/1000 times.\nYou'll collect four values into the array each time around the loop, and then call db.run once.\n. Capture the timestamp once, outside the loop. This is particularly relevant in the context of my other comment.\n. One way you can make this change shorter and easier to understand is to pull out the whole chunk you just reindented as a function:\nprivate func getDeletionStatementsForGUIDs(guids: [GUID], timestamp: Timestamp) {\n    let inClause = \u2026\n    \u2026\n    return [\n        (delete, args),\n       \u2026\n    ]\n}\nThen this function becomes incredibly short; something like this:\nlet now = NSDate.now()\nthis.db.run(chunk(guids, by: BrowserDB.MaxVariableNumber).flatMap({ this.getDeletionStatementsForGUIDs($0, now) }))\u2026\n. You should be able to omit the Array call if you just make getDeletionStatementsForGUIDs take ArraySlice<GUID> instead of [GUID]. No point doing all of those extra allocations when you control the private method.\n. How long does this take to run? Developer productivity is important too. Worth adding addLogins to add them in the same DB transaction?\n. It'll take longer on CI. That amount of time makes it worth filing a follow-up [good-first-bug] \u2014 it's an easy API evolution, and the majority of that time is busy work around starting and committing transactions.\n. Is URLByAppendingPathComponent correct? It's supposed to be a query parameter\u2026 and UBAPC encodes its argument.\n. Also, compute the batch collection URI once during init.\n. I expect there will be a significant optimization available on the server if a request is committed immediately, so it behooves us to have a flow that either:\n- Doesn't start a batch at all\n- Commits immediately.\nGive this some thought\u2026\n. This class has some smells: it wraps something and is intimately tied to that thing's internals.\nCan we effectively fold POSTClient15 back into Sync15CollectionClient?\nThat is, Sync15BatchClient would be obtained from a collection client, and would wrap that collection client. All it would do is pass in the batch token and call commit when done; the regular collection client would still do the record encoding, error handling, etc. Something like:\npublic class Sync15CollectionClient {\n    public func postToURI(uri: NSURL, records: \u2026) -> \u2026 {\n    }\n    public func post(records: \u2026) -> \u2026\u00a0{\n        self.postToURI(self.collectionURI, records: records)\n    }\n    \u2026\n    public func beginBatch() -> Deferred<Result<Sync15BatchClient<T>>> {\n        self.getBatchToken() >== { token in\n            return Sync15BatchClient(token: token, post: self.postToURI)\n        }\n    }\n}\nThoughts?\n. I'm not sure if we're able, thanks to generic protocol limitations, but it would be nice if both Sync15CollectionClient and Sync15BatchClient implemented the same protocol.\n. The correct pattern here is:\nif let host = url?.host {\nbut Punycode should probably be an extension on String, so you'd be able to do:\nif let utf8Host = url?.host?.asciiHostAsUTF8 {\n. This needs some work to be converted to idiomatic Swift.\n. Nit: style. Spacing should be func foo(s: Bar) -> Baz {\n. Simply return s.hasPrefix(prefixPunycode)\n. Nit: spaces before { throughout.\n. Swift 3 removes C-style for-loops altogether. You should rewrite this to be more idiomatic.\n. I think IUS should be part of the initializer, no? It's known when the batch begins, and the caller can only call commit once.\nIf multiple entire batches need to be sent (> 10,000 records) then the timestamp will be chained through.\n. Might it not be efficient to serialize to NSData at the point of appending?\n. If the server supports batching, you should consider chaining out batches as they fill, right here. It'll need a little dancing around a Deferred, of course. Follow-up is fine.\n. That would be a leaky abstraction, sure.\n. Early returns.\n. Can't help but feel that there's a more elegant and efficient way to do this\u2026\n. Block comment explaining what this does: translate between fine-grained results of sync operations and coarse-grained display-oriented states for error display.\nFuture: perhaps integrating statuses over time (\"we haven't been able to sync your bookmarks for seven days\").\n. I feel like some of these depend on the application state. If I tap \"Sync Now\" and anything bad happens, tell me. An automatic sync shouldn't complain because I'm offline!\n. If we're syncing while the user deletes their account, or presumably if we have a bug that loses some account state.\n. I would rather see a verbose listing of every case. One of the strengths of Swift's enums is that the compiler will warn you if you missed a case\u2026 but it can't do that if you fall back to default. If we add more statuses, we'll want that help.\n. s/happend/happened\n. s/worst/worse\n. What does this really mean? Would benefit from a comment.\n. BookmarksDatabaseError is probably misnamed at this point. My bad.\n. What other kinds of errors can we get here? How about things like interrupted network connections (host not found, etc.), or TLS errors from captive portals?\nI'm tempted to default to not messaging here, and messaging error states for specific actionable issues.\n. In this case you need to update your version of Firefox for iOS.\n. In this case you need to update your version of Firefox for iOS.\n. This is really painful. You're serializing every record all the way through to bytes\u2026\u00a0twice.\n. See comment on line 30.\n. You already work with strings as soon as you get to batchesFromRecords, and that method immediately serializes. So instead of having this be [Record<T>], I suggest having this be [(GUID, String)]; addRecords will serialize.\n. Future: if we exceed our batch size, kick off an upload chunk right here. That involves chaining off a Deferred.\n. Oh, and you probably should keep a running count of bytes as you go.\n. It's worth noting that this isn't really a nice-to-have: the behavior of this batching uploader is noticeably bad in the presence of large numbers of records. Streaming up chunks is the only reasonable way to cap memory usage, and also allows pipelining of record generation and upload.\n. No need for else.\n. I'm not confident that this is the best error handling approach. It's probably acceptable for history, but totally unacceptable for bookmarks. If we can't serialize a record, there's a bug, and we should enter an error handling flow for that (e.g., disable syncing this engine until we upgrade to our next version).\n. Do this check waaaaaay earlier: at the very moment you try to add the record to the batcher! I shouldn't get a delayed failure in .commit when I can get a synchronous failure at the moment of addition.\n. Someone should check this arithmetic after their first morning coffee! Worth making sure that we'll never produce an empty batch or be unable to enqueue a record that's right at the limit.\n. Newline at EOF.\n. s/specif/specify\n. I think this ifUnmodifiedSince is wrong. You should use the timestamp from the batch that we just uploaded.\n. All of this nonsense becomes unnecessary if you do the work at the point of accumulation.\nThat is: when the caller calls addRecord, serialize the incoming record. If it fails, stop. If it succeeds, figure out how many bytes it'll be. If it's too big for one record, stop. Otherwise, accumulate it into a new or existing batch, and when a batch is full, accumulate that into a new or existing bunch.\nHave tiers like this:\n```\ntypealias UploadRecord = (guid: GUID, payload: String, size: Int)\nclass Payload {\n    let config: InfoConfiguration\n    var records: [UploadRecord] = []\n    var bytes: Int = 0\n    var count: Int = 0\n/** Returns true if the record was added to this payload; false otherwise. */\nfunc add(record: UploadRecord) -> Bool {\n    if (record.size + bytes + 1) > config.maxPostBytes {\n        return false\n    }\n    if count >= config.maxPostRecords {\n        return false\n    }\n    records += record\n    count += 1\n    bytes += record.size + 1     // For newline.\n    return true\n}\n\n}\nclass Batch {\n     \u2026\n}\n```\nand so on. At each level you can keep track of bytes and counts. Note that streaming uploads (a good idea) involves keeping track of request, record, and byte counts so that you can choose when to start a new bunch.\n. Your ideal goal is for an incoming record to be immediately serialized, for a request to be sent as soon as you have enough records, and for a batch to be committed as soon as you run out of records (i.e., commit is called) or the batch is full and a new bunch needs to be started.\n. Newline at EOF.\n. Yes, I see us sending requests before commit, if the server supports batching (and perhaps even if it doesn't, if the caller is willing).\nThe transaction concept still applies. Think about how a database works and its interface. You call BEGIN TRANSACTION, and can then do whatever you like for however long you like. At some point you call ROLLBACK or END TRANSACTION, and you expect the externally visible state of the database to either solidify or return to what it was. That doesn't mean that the database isn't writing stuff to disk during the transaction \u2014 indeed, it almost certainly is!\nThe same applies here. When you have a batch token, it means you can write whatever you want to the server, and it doesn't get committed until you make a request with commit=true. If commit is never called, the batch will be abandoned and will be garbage collected. The sensible thing to do, then, is to start making those HTTP requests as soon as we can \u2014 you might be uploading megabytes of records, and it doesn't make much sense to wait until we have everything before doing so.\nPerhaps the best way to think about this is in terms of Clojure-esque channels and transducers. A channel is a producer-driven queue, like a conveyor belt. A transducer is a worker between two conveyor belts. In this case, our caller is pushing records onto the conveyor belt. We have a transducer that's bundling up records into collections of 50/1MB, and one that's shifting a conveyor belt into different bunches as a limit is reached (similar process). The consumer is uploading each bundle once it arrives. Finally, you tell the destination to commit when the channel is closed.\nIf the server doesn't support batching, then yes, it's unsafe to leave large gaps between uploads. But we do already upload in chunks without batching support, and it's likely that more records will be delivered for upload before our first upload is complete, so the only concern would be if we aborted the entire upload operation due to a malformed record or were interrupted (partial write). That's why we built atomic uploads in the first place, so I wouldn't spend too much time worrying about that.\nFrom the caller's perspective, the contract remains: the records it added to the batcher will be permanently committed to the server at some point between calling commit and the onCollectionUploaded callback being invoked. We just happen to sometimes move them up to the server before commit is called.\n. Perhaps just inline this?\n. > In -O builds (the default for Xcode's Release configuration): if condition evaluates to false, stop program execution.\nYou probably want to return failure here instead.\n. That is: if we push a server config that gets this wrong, making iOS browsers silently crash every few minutes is unlikely to be the best choice.\n. Also I think these should both be <=. But think carefully!\n. You can combine all of these effect blocks, by definition.\n. Similarly: combine.\n. Same.\n. I'm confused. addRecord never allows the Payload to expand beyond its allowable size. So we never need to slice up a payload; we can always upload it here.\nFurthermore, I don't see how an upload happens in the simplest case!\nlet client = Sync15BatchClient<T>(\u2026)\nclient.addRecord(myRecord)\n// 50 times.\nclient.addRecord(anotherRecord)   // 51st, so there's a token\nclient.endBatch()\n\u2026\u00a0looks like that adds the last record to the new empty payload, calls commit, which then sends an empty payload, leaving the final record not uploaded.\n. Insert Swifty _:\nmaxTotalBytes: 104_857_600\n. White-box testing! maxPostRecords + 1 will verify whether my observation above is actually a bug.\n. Spaces and newlines, please :)\n. You need to check how many records were uploaded, too!\n. An unused variable here is a warning sign. The very most important thing this uploader needs to do is make sure that all the records make it to the server, so take a look at lines.\n. Same. Check that we have the right number of records. (Extra points for being thorough and making sure they're the right records, and not just the same payload over and over!)\n. Is this still a TODO?\n. This comment needs to be updated, and we need to make sure if our backoff handling is correct.\nWhat happens if we get an X-Backoff header in response to one of our payloads? Do we give up or blindly continue? How do we make that decision?\n. Sidenote: why is onCollectionUploaded optional?\n. \ud83d\udc4d \n. s/contains/contain\n. Fix comment.\n. This is elegant, but the initial serialization and construction of a batch are all synchronous, so we can be more efficient than this.\nMake serializeRecord throw, map to serialize lines, throw if a record is too big; wrap that all in a catch that rejects.\nNow you have a sequence of UploadRecords. Sequentially accumulate these in currentPayload until you get false. In the best case \u2014 a small number of records \u2014 we create only one Deferred and do no extra work.\n. start should 'steal' currentPayload and (pseudo-atomically) replace self.currentPayload with a new empty payload. You don't want two addRecord calls to end up with self.start being called twice with the same payload\u2026\n. \u2026 and if you split out the payload handling like that, then here you can just chain back into addRecord (or, better, addRecords!).\n. Remove debug statement.\n. Consider using sets here; set intersection should be faster, and we don't care about ordering.\n. Worth defining an overloaded version of deferEmptyResponse?\n. This really confirms my feeling that one spot should be responsible for atomically swapping out a new payload. There should be only two ways to get a new payload:\n- When an upload begins.\n- When a batch boundary is hit.\n. Specifically, I'd like to see addRecords itself look like a synchronous block that consumes all possible records from the sequence, followed by either return succeed() or an upload chained into a recursive call to addRecords. Even something like this (you don't have to agree, but this is illustrative):\n```\npublic func addRecords(records: [Record]) -> Success {\n  if (records.isEmpty) {\n    return succeed()\n  }\n  return self.addRecords(records.makeIterator())\n}\npublic func addRecords(records: Iterator>) -> Success {\n  while let record = records.next() {\n    if let def = self.accum(record) {\n      return def >>> { self.addRecords(records) }\n    }\n  }\n  return succeed()\n}\n// Throws on failure. \n// Returns a Deferred iff we have started an upload and added the provided\n// record to be uploaded.\n// Returns nil if the record was successfully added to the\n// current payload but no upload was triggered.\nprivate func accum(record: Record) -> Success? throws {\n  guard let line = \u2026 {\n    \u2026\n    return nil\n  }\n  \u2026\n}\n``\n. Aye. The two main thrusts of my comments are to make sure we don't accidentally mishandle a payload, and to make the simple case efficient. \ud83d\udc4d \n.count == 0matchesBatch`.\n. The docs say this is opaque:\n\"batch\": \"OPAQUEBATCHID\",\nso this should be a string.\n. This is a GenericTable, so you'll need to override updateTable(db: SQLiteDBConnection, from: Int) and add an ALTER TABLE to add the column, and bump the version var at the top of this class.\nThen test the shit out of it.\n. I don't think so.\n. I think of device registration as an identity-attached service, just like Sync. It's possible to do FxA-ey things without being a registered device. One of the discriminant questions here: if the device registration endpoint is down, should we consider FxA signin to have failed? I don't think so, which implies that it's separate. See SyncStateMachine for one kind of chaining concept here.\n. Note that Sync might introduce a fairly firm dependency on device registration \u2014 e.g., to list connected clients or send a push message \u2014 but that's fine, and doesn't imply using the FxA state machine to do the work.\n. This might warrant an explanatory comment, because I had to stare at it for a minute to figure out why you were comparing across 'domains'.\nYou're saying here that if:\n- The number of records we've already sent, plus another full POST, exceeds the total the server will accept, or\n- The number of bytes we've already sent, plus another full POST, exceeds the total the server will accept, then\n- We can't start another payload in this batch.\nChewing on that for a minute: I think that's safe, but not really optimal. What if the next POST will only include one small record? We'll instead say this batch is full and commit it, moving on to another batch in the bundle, right?\n. Move all of these simple vars to the top of the struct definition.\n. And shouldn't token be a let?\n. As noted on an earlier diff: the batch token is an opaque identifier, and is delivered as a JSON string, according to the docs.\n. Maybe pull these out as static or private let?\n. Rather than consuming the entire generator, concatenating a whole new array, and starting again, do something like this:\nif let uploadOp = accumulateRecord(serializedRecord) {\n    // An upload started. Chain off it to add the triggering record, and pick up\n    // where we left off.\n    return uploadOp >>> {\n        let deferred = accumulateRecord(serializedRecord) ?? succeed()  // Might need type fiddling.\n        return deferred >>> self.addRecords(generator)     // Add the generator variant.\n    }\n. Note that because we only ever recurse with the generator, we're sure that this will terminate!\n. Is there a good reason for delaying reassigning currentPayload until the upload succeeds? ISTM that you could do this right after computing lines, save yourself the memory burden, and avoid the possibility of accidentally adding records to a payload that's already being uploaded.\n. Same here.\n. Same here.\n. Indeed, one might:\nprivate func freeze() -> [String] {\n    let lines = self.currentPayload.records.map { $0.payload }\n    self.currentPayload = Payload(config: self.config)\n    return lines\n}\nthen do\nlet lines = self.freezePayload()\nself.currentBatch = nil\nreturn uploader(lines: lines, \u2026) >>== effect(moveForward)\n. (This would need capturing, certainly)\n. AFAICS modified is no longer set, so it will always be 0. Is that what you want?\n. It's important to aggressively serialize outgoing records.\nIf you take a look at IndependentRecordSerializer, you'll see that if any record we plan to upload is over-sized, we upload nothing.\nThat's not the case with your refactoring here, if the server doesn't support batching (which will be the case for a while): we will accumulate the first fifty records and start an upload without trying to serialize the 51st. If a later record is too large, we will give up, leaving a partial write on the server.\nSo rework addRecords to be like this:\n```\npublic func addRecords(records: [Record]) -> Success {\n    if records.isEmpty {\n        return succeed()\n    }\n    do {\n        let serialized = try records.map { try serialize($0) }     // or however Swift likes it\n        return addRecords(serialized.generate())\n    } catch let e {\n        return deferMaybe(e as! MaybeErrorType)\n    }\n}\npublic func addRecords(records: Generator) -> Success {\n    \u2026\n}\n. Can you just make `markAsDeleted` and `markAsSynchronized` take a `SequenceType` or other abstraction and avoid the `Array` alloc? All it needs is to be able to walk the sequence\u2026\n. Nit: `size: Int` -> `sizeBytes: ByteCount`\n. Lift out of this class.\n. No need for `else` after `return`.\n. Use `commitParam`!\n. But I'm not sure what you're doing here. We're not currently in a batch, because `batchToken` is `nil`. We've been told to end a batch, but there isn't one. Here you're sending query parameters that imply both starting and ending a batch. Why bother? Just send the request with no params!\n. Worth adding a comment to the effect of some of my review comments: we eagerly serialize all records before we queue them, because if we're going to fail we want to do it early.\n.\naddRecords(var generator: \u2026) \u2026\n```\nmeans you don't need mutGenerator.\n. Why the two levels of nesting? Surely\nwhile let record = generator.next() {\n    if let upload = accumulateRecord(record) {\n        return uploadOp >>> { self.addRecords(generator) }\n    }\n}\nreturn succeed()\nis equivalent?\n. We didn't add the record \u2014 it fits in this batch, but the POST would have been too big, so addToPost returned false. Then we get to here and upload the current POST with postInBatch. Don't we lose record here?\n. Oh, is this the source of that confusing double-attempt above? If so, please tidy that up (perhaps moving it here) or comment accumulateRecord to explain!\n. Use the extracted commit param.\n. Shouldn't these be +=?\n. I'd return the error instead:\nreturn deferMaybe(e)\n. Can we invert these?\n```\nguard let token = self.batchToken else {\n    guard addToPost(record) else {\n        throw AccumulateRecordError.Full(uploadOp: self.start())\n    }\n    return\n}\nguard fitsInBatch(record) else {\n    throw AccumulateRecordError.Full(uploadOp: self.commitBatch(token))\n}\nguard addToPost(record) else {\n    throw AccumulateRecordError.Full(uploadOp: self.postInBatch(token))\n}\naddToBatch(record)\n.\n\n\n== { cursor in\n  return deferMaybe((cursor.status == .Success) && (cursor[0] ?? false))\n}\n```\n\n\nis sufficient.\n. Similarly:\n```\n\n\n== { cursor in\n    return deferMaybe((cursor.status == .Success) && (cursor[0] ?? true))\n}\n``\n. You should provide an optional direction argument here, so you can use it correctly from the original place.\n. Fix indenting.\n. You can \u2014 and should \u2014 still returnSuccess` here. Like this:\n\n\nreturn self.isBookmarked(url.absoluteString, Direction.Local)\n    >>== { yes in\n        guard !yes else { return succeed() }\n        return self.insertBookmark(\u2026);\n    }\nNote that the chaining/flatMap operator, >>==, does the success check for you. A sequence like a() >>== b >>== c means \"do these three things in order, passing values from one to the next, until failure or the last one succeeds, and return that failure or success\".\n>>> is the same but for success/failure only.\n. As noted above, you need to pass self.direction in here as an argument.\n. This is a Cursor<Bool>, because the cursor factory just above is taking a row and returning true.\nThe specific implementation here is an ArrayCursor, which implements subscript:\n```\npublic override subscript(index: Int) -> T? {\n    get {\n        if (index >= data.count || index < 0 || status != .Success) {\n            return nil\n        }\n        return data[index]\n    }\n}\n\n```\nwhich reminds me why I didn't add the success check myself! So cursor[0] will return the first item \u2014 which our factory ensures is always true \u2014 if the query returned results and was successful. Otherwise it'll return nil, which ?? turns into false.\nSo you can skip the Success check altogether.\n. I'm pretty sure this isn't actually a fix for the bug.\nI just wrote a Playground that replicates the issue.\n```\nimport Foundation\nclass Foo {\n    func doLater(f: dispatch_block_t) -> Int {\n        let succeeds: Int64 = 100000\n        let fails: Int64 = 10\n        let delay = fails\n        let when = dispatch_time(DISPATCH_TIME_NOW, delay)\n        let queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0)\n        dispatch_after(when, queue, f)\n        return 99\n    }\nfunc attempt() -> Int {\n    print(\"Attempting...\")\n    var x: Int = 0\n    x = doLater {\n        print(\"X is\", x)\n    }\n    return x\n}\n\n}\nlet f = Foo()\nf.attempt()\n```\nWith fails as the time \u2014 essentially instant \u2014 this prints \"X is 0\". With anything larger, this prints \"X is 99\".\nSo I think the change in iOS 10 is that a backgrounding app sometimes has its background tasks run immediately, in which case the task ID has not yet been assigned!\n. Actually, this probably isn't even an issue. By the time we refer to the value, it will have been set. So I rephrase my comment as: this change is not necessary. :)\n. \ud83d\udc4d \n. As mentioned in answer to question, you can drop these changes.\n. strengthen\n. Technically this isn't a Timestamp \u2014\u00a0Alan Eliasen would murder you. It's a factor.\nJust use UInt64.\n. Compute nowMicroseconds() once.\n. Two problems with this.\nFirstly, I think your comparison is backwards \u2014\u00a0you're asking for timestamps that are numerically less than a moment in time, so this will be non-recent history (smaller timestamp).\nSecondly, this is a hopelessly inefficient way of phrasing this. Presumably there aren't many sites visited in the last thirty minutes, so make that your most specific clause. Something like:\nSELECT DISTINCT siteID FROM \\(TableVisits) WHERE date > \\(thirtyMinutesAgo)\nis a nice subquery to give you all recently visited sites.\nBecause you always know the most recent date will be in the candidate rows, you can get the max date for free:\nSELECT siteID, max(date) AS latest FROM \\(TableVisits) WHERE date > \\(thirtyMinutesAgo) GROUP BY siteID;\nYou'd need to join back against the visits table to find the count. You use sum to do this, but I'd use a subquery in the projection:\nSELECT s AS siteID, latest, (SELECT COUNT(1) FROM \\(TableVisits) WHERE siteID = s) AS visitCount\nFROM\n(SELECT siteID AS s, max(date) AS latest\n FROM \\(TableVisits) WHERE date > \\(thirtyMinutesAgo)\n GROUP BY siteID\n LIMIT \\(historyLimit))\nWHERE visitCount <= 3;\n. Check whether you need this wrapper select. But again, you want to push that modified check and visit count as deep into those queries as you can \u2014\u00a0you shouldn't need them outside of the UNION.\nNote that there's already a view that overlays Local on top of Mirror, so use that \u2014 it takes care of handling shadowing. Doing it by hand this way means that if a user locally deletes a highlight bookmark, you'll still show it because it's in the mirror!\n. You could do something like this:\nprivate let localBookmarksView =\n    \"CREATE VIEW \\(ViewBookmarksLocalOnMirror) AS \" +\n    \"SELECT -1 AS id, guid, type, is_deleted, parentid, parentName, feedUri, siteUri, pos, title, description, bmkUri, folderName, faviconID, NULL AS local_modified, server_modified, 0 AS is_overridden \" +\n    \"FROM \\(TableBookmarksMirror) WHERE is_overridden IS NOT 1 \" +\n    \"UNION ALL \" +\n    \"SELECT -1 AS id, guid, type, is_deleted, parentid, parentName, feedUri, siteUri, pos, title, description, bmkUri, folderName, faviconID, local_modified, NULL AS server_modified, 1 AS is_overridden \" +\n    \"FROM \\(TableBookmarksLocal) WHERE is_deleted IS NOT 1\"\nor combine the two into a single modified column and and check is_overridden at point of use if you want to know whether it's a local or server time, and don't ever want both the local modification and server modification time for a locally modified bookmark.\n. Change the bug number.\n. UInt64\n. Move all the limit stuff together.\n. thirtyMinutesAgo is the only dynamic part of this query. If you extract that as a value in args, the compiler should be able to avoid dynamically concatenating this string. (Same below for threeDaysAgo.)\nIn the future, if we need to squeeze more perf out of the system, that will also allow us to pre-parse statements rather than parsing SQL each time we fetch.\n. Implied: do this with string concatenation instead of dynamically using joinWithSeparator. I think the Swift compiler is much better at type analysis now, so this shouldn't blow up compile time, but probably not smart enough to recognize joinWithSeparator on constants.\n. Bear in mind that you'll need to enable bidirectional syncing in order to test this feature.\n. This UNION might not do what you expect.\nYour bookmark highlights always return NULL AS visitDate. Your non-recent history query always returns a max visit date. visitDate is in highlightProjection, so this UNION is always equivalent to UNION ALL, and you're relying on GROUP BY url below to randomly select one of the two rows in the event that you have a bookmark that's been visited more than three times more than 30 minutes ago.\nThe observed result is probably that sometimes you'll have a date in a row, and sometimes you won't.\n. Some of these values come from individual rows, and differ on the row. url is fixed by virtue of being the grouping characteristic, but visitCount might come from the bookmark row, or isBookmarked might come from the history row!\nHere you see why this is really a FULL OUTER JOIN: we want to merge the two together.\nNow, we know there's at most one history row, and at most one bookmark URL, for each URL. If a bookmark row is returned, it'll already be joined against history, so the title etc. will match. The remaining column is isBookmarked, so we can try to phrase this projection in terms of aggregates:\nSELECT historyID, url, title, guid, visitCount, max(visitDate) AS visitDate, max(isBookmarked) AS isBookmarked, iconID, iconURL, iconType, iconDate, iconWidth\nHowever, we're half-way to just doing a FOJ \u2014 you're selecting bookmarks and LEFT JOINing them against history. Another option here, then, is for you to alter the history side of the UNION to be history items that match but are not bookmarked. You can then safely avoid grouping by anything, and just use a UNION ALL.\n. I think this should not be on BookmarksModel. Instead, put it on a new protocol \u2014\u00a0perhaps KeywordSearchSource \u2014 to which SQLiteBookmarks conforms and which Profile.bookmarks requires.\n. I suppose I should rephrase this as \"keyword searching is nothing to do with Model\".\nBookmarksModel exists for one purpose: to back a hierarchical view of bookmark folders.\nOther things about bookmarks live in other protocols.\n. Yes, exactly. \n. If you make SQLiteBookmarks implement KeywordSearchSource, and put the logic there rather than in SQLiteBookmarksModelFactory, then this simply becomes return self.local.getURLForKeywordSearch(keyword).\n. If you really want to know:\nhttps://gist.github.com/rnewman/82c17460161047db38d5\n. You can remove this change.\n. I don't think querying the buffer is the correct choice here.\nThe buffer will \u2014 as soon as bidirectional syncing is enabled \u2014 be empty. That this code works now is almost an accident!\nBecause we don't allow you to edit bookmarks locally, or add keywords to them locally, an acceptable short-term solution here is to query the overlay of remote bookmarks on top of merged bookmarks (ViewBoomarksBufferOnMirror). A longer-term solution is to query everything: use ViewAllBookmarks.\nThose views don't pass through keyword (because we haven't used it so far), so you will need a small database migration to do what you need. Ask @sleroux for help with that.\n. Might as well collapse this into one line.\n. .flatMap(markAsDeletedStatementForGUIDs)\n. s/GUIDS/GUIDs\n. s/GUIDS/GUIDs\n. You should add a warning here. A developer might not know that they screwed up in some cases, and if this called as the UI does, it'll be followed by a crash.\n. This is kinda backwards. You make a copy of the current folder then mutate it! Instead, have removeItemWithGUID return a new MemoryBookmarkFolder, like this:\noverride public func removeItemWithGUID(guid: GUID) -> MemoryBookmarkFolder {\n        let without = self.children.filter({$0.guid != guid})\n        return MemoryBookmarkFolder(guid: self.guid, title: self.title, children: without)\n    }\nthen this can just be:\npublic func removeGUIDFromCurrent(guid: GUID) -> BookmarksModel {\n        return BookmarksModel(modelFactory: self.factory, root: self.current.removeItemWithGUID(guid))\n    }\n. Note that using filter in this way might even allow Swift's copy-on-write struct ownership analysis to turn this into a single mutation. Neat.\n. See above.\n. \u2026 and this can go entirely.\n. I'm not sure it's worth putting this implementation here rather than in MemoryBookmarkFolder. I just noticed that the subscript implementation is already a stub, so there's no advantage to making this abstract class do anything.\nIndeed, I wonder if the language constraint that forced us to make BookmarkFolder a class rather than a protocol still applies?\n. There are two places we might be using a 'folder'.\nOne is as part of a model, in its role as providing a title for the UI and a list of children.\nThe other is as a row in the display list, where it's simply a BookmarkNode subtype.\nThe factory method you spotted, and thus that BookmarkFolder, serves the latter purpose.\nAFAICS both itemFactory and folderFactory could safely be changed to return BookmarkNode: just a thing with an icon and a title.\nUsing SQLiteBookmarkFolder wouldn't work \u2014 that needs a cursor of children, and is intended to play the former role.\n. return self\n. The only reason this can return nil is if it fails to initialize tables. Of course, it will also fail to initialize tables if the DB connection is closed.\nAnd of course SQLiteHistory already knows how to handle being in its post-init state with a closed BrowserDB!\nSo here's my alternative suggestion:\n- Let SQLiteHistory's initializer return non-nil if the provided database is closed. Nothing will work, as we expect.\n- We don't need to alter schemas via createOrUpdate if the DB starts off closed \u2014 the schema won't change at runtime, and a closed DB means we had successfully opened by this process before.\n. I would prefer us to crash here if we feel like we should be doing this work, and it fails.\nSo instead:\nif db.closed {            // You'll need to pass this through in BrowserDB.\n    return\n}\nif !db.createOrUpdate(\u2026) {\n    log.error(\u2026)\n    fatalError()\n}\n. You could also have createOrUpdate return a tri-state value (success, failure, closed).\n. The reason I think we should crash: if the DB is open, but we fail to set up our schema, we're screwed, and continuing will cause a rash of weird errors throughout the app. Better to die and catch it in our crash reporter.\n. This also ties in a little to this.\n. Tweak this log message.\n. Maybe don't log the secret key? \ud83d\udde1 \n. > Inactive\n\nThe app is running in the foreground but is not receiving events. This might happen as a result of an interruption or because the app is transitioning to or from the background.\n\nPerhaps use:\nguard application.applicationState != UIApplicationState.Foreground else {\n    return\n}\nprofile?.shutdown()\ninstead?\n. The reason to have this flag here is that just calling db.forceClose() will create db \u2014 doing a lot of disk access \u2014 in order to immediately shut it down!\nThis will typically be noticed more with the logins DB, which is more lazy.. I think a solution to this bug is to make dbCreated static! After all, if we have a singleton BrowserDB that's shared between Profile instances (which is wrong, of course), then the bug is that each Profile instance has its own separate dbCreated flag.. We should add a little block comment here. Something like:\n/**\n * For safety and efficiency, we only allow each database to be opened once. It\n * looks like you can create multiple Profile instances, each pointing to a\n * different database, but that's not currently the case.\n *\n * These `dbCreated` flags are an implementation detail to avoid opening a DB\n * only to immediately close it -- they reflect whether the singleton DB instances\n * have been assigned.\n */\nThen we should file a follow-up to make an implementation that either memoizes opens for a particular path (self.files), or avoids statics altogether. Things have changed in Swift:\nhttp://stackoverflow.com/questions/24024549/using-a-dispatch-once-singleton-model-in-swift. Yes. The general idea is: the UPDATE above will catch the common usage of INSERT OR IGNORE \u2014 \"insert this unless it already exists\". And after that, there's basically no case in which we will be best served by dropping an incoming record on the floor \u2014 we have no mechanism to go back and re-fetch such a malformed record.\nThe path now will be a failure to buffer, followed by a repeated redownload until success. We're betting that won't happen very often, because we're also in parallel loosening the constraints on incoming records (and I'll push a commit shortly that allows ordinary records to be missing a parent title).. This isn't sufficient. Almost immediately after we call getSharedConnection and we assign it here, we hit a guard let block that takes a strong reference. This weak hold only allows us to close the DB between getSharedConnection and using it.\nDown on 140 and 146 we're passing in the strong reference, captured in a closure, to dispatch_async.\nIn order to do what you're trying to do here, you need those dispatch blocks to have a weak capture list for connection.\nYou also need to invert the rest of this method: the guard let connection = conn\u2026 stuff needs to happen inside the dispatch block, because that's the point at which we might find the connection to be gone.. Note that you won't need to change the signature of cb to be SQLiteDBConnection?, because although weak references must be optionally typed, it's our dispatch blocks that will handle that and create a FailedSQLiteDBConnection to pass back to cb.. I'm not sure this change is worth much. We're only using the var here to escape the dispatch_sync block, and within dispatch_sync we're assigning to sharedConnection and can't be interrupted. There's almost no opportunity here for the weakness to be exploited, and it would be equivalent to the refcount dropping when exiting the function.. Can we not allocate a new one of these on each successful query? Perhaps move this back down inside the guard?. Same.. Please do the small amount of mental legwork to be assured that if I do this:\nlong write X\n   write A\n   write B\n   force close\n   write C\n   reopen\nsome consistent collection of writes is performed \u2014 e.g., none of A, B, C, or only C, or all of A, B, C.. This is less scary than it sounds, because withConnection is used for transactional blocks, and we're pretty good at that. But it's good to be confident in the properties of the model.. I'm not a huge fan of this shared mutable conditional state. Can we not thread this into a sync and back out the end as part of a result?. Perhaps use a server timestamp?. finishAndNotify\u2026. Why not have the SyncDelegate also be the stats delegate, and have the stats API encapsulate the engine part? So these functions would all stay the same, then elsewhere, at point of use, you'd \"check out\" a stats recorder for the implementing engine from the delegate.. I think you should fetch this from the delegate at point of use.. Use effect here to handle side-effects and pass through the result.. effect again. Simplifies recordApplyResult, too.. The first thing that happens in a sync is we fetch info/collections to determine what's changed on the server. That fetch has the server timestamp in a header, and makes for an excellent symbolic beginning to a sync.. If you use the date, you'd need to join again to get the contributing grouped value, or sub select with an order and limit.. I think for these mocks you should have \"mock\" in the string.. s/status's/statuses. If this code exists in more than one place in the code, lift it into a method on profile?. I suspect that we should be capturing self.profile.account in syncSeveral, doing this check there, and passing it as an argument to syncWith, alongside the stats session. That allows us to construct the statsSession from the account directly in syncSeveral, which will make it less likely that someone will forget to set its fields\u2026. \u2026 these.. getInfoCollectionsResponse. Call this SyncNow? There's a separate code path for pull-to-refresh in the History panel.. Still should use effect.. We've talked about this before, no? The context was @thebnich's work (IIRC) around shutdown crashes and reopening DBs. My conclusion was that Profile was a singleton in disguise: it's not safe to create two instances in the same process, because they use dispatch_once (and some statics) to manage the lifecycle of their members.\nWe didn't use lazy in the Swift 1 days because it wasn't thread-safe. Perhaps that's changed?\nThe correct course of action would seem to be to de-singleton Profile: turn these into (thread-safe) per-instance accessors. If that can't be done for some reason, or introduces too much risk, then make these a correct singleton and leave a comment.. Definitely not. This will prevent this code from opening an existing logins DB, and avoids the work entirely for new ones.. Unless you can point me to the docs saying that in Swift 2.x or 3.0 lazy var is now thread-safe, this needs some revisions.. These should be after the if clear block.. If you're thinking about doing this, please file a separate bug to discuss.\nBrowserDB and its SwiftData handle have their own deinitializers to close the DB connection. Shutting down here might break things that expect to keep a DB handle open after the Profile has been released \u2014 e.g., syncing on exit.. I think this is a flawed Swift 3 migration. Careful about landing this fix on top!. In particular, note that getting the logins key can also side-effect generating one; it's important this this not race with itself, hence the comment above.. I was waiting for you or @farhanpatel to notice that this was completely screwed. \ud83e\udd13 I think I commented about this on one of the migration PRs\u2026 be super careful! Read the entire migration diff, see what else might have gotten lost.. No need for else after return. No need for let then immediate return, either.. There might be a subtle little bug here.\nIf we previously called endSyncing with None, we wouldn't change the display state.\nNow we pass the none-Maybe to SyncStatusResolver, which resolves to SyncDisplayState.Bad(message: nil).\nIs this change intentional?. Nit: period.. Make this an Int64. We don't expect a sync to take more than 9,223,372,036,854,775 seconds, and it protects us from clock errors.. Unless you specifically need to report wall clock instants, use uptime here. That way you're guaranteed a monotonically increasing clock, and you won't find syncs taking a negative amount of time just because the device clock shifted.\nE.g.,\nhttps://developer.apple.com/reference/foundation/processinfo/1414553-systemuptime\nor\nhttps://developer.apple.com/reference/dispatch/dispatchtime/2300047-uptimenanoseconds. Note that at this point if the wall clock has jumped backwards, Firefox will crash. Be very, very careful when using UInt64!. Nit: closing periods.. Move these two lines inside the bind, for casual thread safety concerns.. uptimeNanoseconds should be monotonically increasing, so you should never have to handle overflow. But using Int64 is a worthwhile thing to do anyway.. \"Unless you specifically need to report wall clock instants\" applies, then.\nYou should use wall clock to report start time, and you should use a different monotonically increasing clock to calculate duration. You should not use the wall clock to calculate duration.. Why isn't currentQuery a String? \u2014 that is, optional?. If you use nil instead, you can use if let and guard and such.. Put the hostname check first. More common.. Name the parameter: login instead of $0.. Can we avoid this simply by making the query optional with a nil default?. This doesn't immediately make sense to me. Could you comment this line?. You probably need to do something in the guard block above, too.. This is a pretty expensive way of doing this: we take the existing sectioned items, build a new array, filter it, then pass it right back in and compute all the sections again. Can we do better?. Does the SwiftyJSON change also alter the handling of nil \u27a1\ufe0f null in the output? I know they make that an option, but I'm not sure what the old behavior was, or if we rely on it.\nYou should also make this change inside KeyBundle.serializer(\u2026) (in two places). You should consider also making this change in State.swift \u2014 at least the .utf8 part.\nHere in StorageClient.swift, I think you also need to change line 464:\nswift\n    func requestPOST(_ url: URL, body: [JSON], ifUnmodifiedSince: Timestamp?) -> Request {\n        return self.requestPOST(url, body: body.map { $0.rawString()! }, ifUnmodifiedSince: ifUnmodifiedSince)\n    }\nFinally, there are lots of uses of rawString in SyncTests/ that need to be adjusted.. I would be quite happy to have the client crash hard if SRCB returns anything other than errSecSuccess. We shouldn't proceed with whatever needed the value, and that means creating databases, computing GUIDs, or syncing. Crashing is our main way of finding out that there's a problem.\nIf we're building with normal optimizations, then switch assert for precondition.\nIf we're building with -Ounchecked, then you'll need to manually implement precondition using fatalError:\nswift\nif (result != 0) {\n    fatalError(\"Random byte generation failed.\")\n}. That would be fine: precondition and fatalError are mostly equivalent.\nhttps://github.com/apple/swift/blob/adc54c8a4d13fbebfeb68244bac401ef2528d6d0/stdlib/public/core/Assert.swift#L170\nhttps://github.com/apple/swift/blob/adc54c8a4d13fbebfeb68244bac401ef2528d6d0/stdlib/public/core/Assert.swift#L191\nIn a release build, precondition simply int-traps without printing. I don't think we care about that distinction.. @sleroux: it sure beats getting all the bookmarks and counting them!\nI'd be specific about what it's counting, though. Is it counting bookmarks created on this device, or anywhere? Only bookmarks in the Mobile Bookmarks folder? Does it include folders, livemarks, separators? Will it double-count bookmarks that haven't been merged yet, or does it do GUID-based or content-based deduping? And so on.\nFurther, this will be sufficient to uniquely identify some users. What approach are you taking to anonymize these numbers?. Remember that ViewBookmarksLocalOnMirror is only local and fully synchronized bookmarks, but in the regular bookmarks view we also show the buffer if no bookmarks have been merged. For illustration, in my account right now VBLOM has about 15 bookmarks, while in the bookmarks panel I have access to about 3,000.\nIf you don't mind the potential for slight over-counting, we can fairly easily get an estimate of all non-folder items, and I'm happy to help with the SQL.. What's this here for?. Something like that. Perhaps something like:\nsql\nSELECT (\n  (SELECT COUNT(*) FROM bookmarksBuffer WHERE type <> 2 AND is_deleted = 0)   -- Exclude folders\n  +\n  (SELECT COUNT(*) FROM bookmarksMirror WHERE is_overridden = 0 AND type <> 2)\n  +\n  (SELECT COUNT(*) FROM bookmarksLocal WHERE type <> 2 AND is_deleted = 0))\n  AS count;. I renamed this to \"badPayloadGUIDPayload\", and added a comment.\nI also added a sibling check for an altogether missing GUID.. I added an additional check for that, thanks.. I was reading the SwiftyJSON source code as I adjusted these, because I was also concerned.\nAll JSON instances have a dictionary and an array member; having the right type code is the only thing we can check there, because you'll never get a nil array if the type code is .array:\n```\n    //Optional [JSON]\n    public var array: [JSON]? {\n        if self.type == .array {\n            return self.rawArray.map { JSON($0) }\n        } else {\n            return nil\n        }\n}\n\u2026\nfileprivate var rawArray: [Any] = []\n``. Fixed. (It was meant to imply \"invalidPayloadGUIDEnvelope\", but totally did not imply that!). Just a nice improvement. It's a separate commit so it doesn't need to be uplifted unnecessarily, but I was in the area as I searched for all uses ofstringValue\u2026.isArrayandisDictionaryare safe (well, relatively safe) \u2014 the type code is an accurate determination of whether calling.arraywill give you an array ofJSON`.\nThe changes on these two lines are actually in two commits to make reviewing this easier!\nThe change on line 356 is from .stringValue (which gives you the string value of a JSON string if there is one, and thus always returns \"\" for this array) to .stringValue() (which JSON-serializes a complete JSON structure, in this case an array).\nWe should rename our stringValue method to something that isn't so typo-close to a built-in var, but I didn't want to do this here. IIRC this was one @justindarc or @sleroux introduced as a wrapper around SwiftyJSON's serialization call.. I think it makes most sense to take the set of collections that changed as a single lump and hand it to the SyncManager to decide what to do \u2014 after all, that's exactly what it's for.\nI'd probably generalize syncEverything, rather than expose syncSeveral as-is \u2014 sE returns a coarser result type, and the caller needn't concern themselves with finding a SyncFunction. We also want to make sure that clients is synced before tabs, but only synced once.\nSo we'd probably have something like\npublic func syncNamedCollections(why: SyncReason, names: [String]) -> Success {\n    return self.syncSeveral(why: why, synchronizers: \n    names.flatMap { switch $0 {\n        case \"addons\": nil,\n        case \"clients\": (\"clients\", self.syncClientsWithDelegate),\n        \u2026\n    }) >>> succeed\n}\nwith a little extra fiddling in there to do clients first.. Nit: s/merging/grouping.\nNit: s/url/projected url/g. Nit: s/with the/corresponding to the history item with the\nNit: colon after \"frecency\". Nit: s/url/URL\nNit: s/popular/frecent\nNit: s/as the Topsite/for the top sites tile. Yes: the ORDER BY clause doesn't result in a total order. We only order by is_bookmarked and frecencies, so anything after that is arbitrary.\nIf you want to make this consistent, you could add a descending grouping on domain ID or history ID, which will break ties for most recent domain or item.. The only reason to fix this is that your test will break if SQLite returns things in a different order!. That first 'false' needs to go.. Given that this is the risky format, split this up into three lines, and also log the ID.. More briefly, that's\nreturn account.advance().bind(succeed). Quite possibly, yes. I wanted to limit the scope of this change, given the limited duration of testing \u2014 and FxA (and push?) tend not to encode arbitrary strings from the internet!\nI left a note in the PR description or the bug comment suggesting that we look elsewhere, but I'd rather see that done as a follow-up.. I don't think this does exactly what you intend.\nmax(url) will return the lexicographically 'latest' URL. max(title) will return the lexicographically latest title. They won't necessarily be from the same row. Nor will they be the longest.\n```\nsqlite> select * from pages;\ntitle       url                   visitCount\n\nshort       http://long/longlong  3\nlong title  http://short/         6\nshort       http://long/longlong  3\naaa         http://ZZ             11\nsqlite> select *, visitCount, min(visitCount), max(title), max(url) from pages;\ntitle       url                   visitCount  visitCount  min(visitCount)  max(title)  max(url)\n\nlong title  http://short/         6           6           3                short       http://short/\n```\nNote that we got \"short\" as the title, which is lexicographically last but not longest. We got \"http://short/\" as the URL, which is neither longest nor last \u2014 it's the last in the set of rows with the title \"short\". And we got the corresponding title and URL for the row with the URL that was chosen by max(url).. Oh you are kidding me. Might as well change this to history.flatMap { $0.absoluteString } while you're here.. Use <> instead of != \u2014 the former is ANSI SQL.. Kill this file.. Why the change away from UInt64? Seems like using Timestamp here would add some clarity.. Just hard-code \"00000000000000000000000000000000\" if you think this is better than making it an optional field! Less generated code.. Just UUID(), surely?. Ah, good. Looks like this commit cleans up a bunch of stuff in the previous; do fold before landing.. Use a destructuring expression instead of .0 and .1.. Wait a minute.\n```\n    public static func now() -> Timestamp {\n        return UInt64(1000 * Date().timeIntervalSince1970)\n    }\npublic static func nowMicroseconds() -> MicrosecondTimestamp {\n    return UInt64(1000000 * Date().timeIntervalSince1970)\n}\n\n```\nwhen, if not specified, is already milliseconds. Why are you dividing by 1000?\n. To clarify, name this startUptimeNanos.. Get rid of filter, and inline the history part (should_upload = 1) inside the subquery \u2014 before the LIMIT! \u2014 and leave the visit test v1.type <> 0 here.. accumulator. The IDs are all numeric. So is the limit. I think you should compute a number list:\nIN (1, 2, 3, 4)\nrather than a var list with a big argument array.. If you add ORDER BY id, then later your IN is ordered, which probably helps SQLite.. its. You need to skip any places that have an empty visits array. The old implementation guaranteed that by joining against visits \u2014 places with no visits would be excluded by the join.\nYou should be able to do that simply by using flat_map here instead of map.. This should be moved to RemoteClientsTable. Put it in an overriding implementation of updateTable. Leave the BrowserTable version at 24.. Ugh, all of these supposedly optional .stringValue lines \u2014 everything but name \u2014 should be .string. Fucking SwiftyJSON. @sleroux, do you agree?\nThese used to be asString, which was an optional.. You only use this once; just inline and simplify this logic at point of use.. This line isn't necessary. Kill this and land it!. Line 715 will run even if we subsequently refuse to enter NeedsFreshMetaGlobal. That is, we are doing some work when we know we're going to fail.\nI haven't read closely enough to determine whether this could run twice as a result.\nCould you make sure that (a) this is acceptable from an amount-of-work perspective, and (b) that we can pick up where we left off on the next sync, doing the exact same work if we run optimistic then non-optimistic as if we run just non-optimistic?\nIf not, you could/should add a check around line 714 that NeedsFreshMetaGlobal is in our set of acceptable states.. Comment.. I'm not a fan of boolean flags.\nCan we either make this:\nSyncStateMachine(prefs: prefs, allowingStates: SyncStateMachine.OptimisticStates)\nor\nSyncStateMachine.optimistic(prefs: prefs). These are really Allowed or Permitted, not Included.. Is there a good reason to not just use a Set throughout?\n(It'd be nice if Swift had EnumSet to make this cheap\u2026). I'd limit mention of \"HTTP requests\" \u2014 the things we're really concerned about are time and battery, so that's all kinds of things: total HTTP requests, duration, records processed, database writes, fsyncs\u2026. \u2026 and also no chance of blanking any local collections, which is expensive.. I'm okay with it. I would recommend timing it and including the timings in the ping; flying blind and not knowing how long we are spending on every sync would be a risk. . \"refrence\" => \"reference\", on both lines. Closing period.\nWorth noting that we can't use unowned here 'cos thunks aren't class types.. Does this exercise the bug because TestClass won't be deinited if one of its methods is alive as a thunk?\nIf so, weak self in aSimpleFunction would make this test pass if the bug were still present, right?\nIs there a way to write a test that really exercises the leak? Naturally you can't have a weak reference to an array, so we can't check it that way\u2026\nYou also need a little test for what happens if one of the thunks returns failure.. If you're going to eliminate TableHistory and friends in favor of inlining \"history\", be consistent, and don't do it as part of this commit. (Though I appreciate that the change makes the diff easier to read!). Make sure you don't leave this in.. I'm a little surprised that this join gets pulled out far enough to be cheap.. If I'm reading this right, this is a huge change in behavior \u2014 you're eliminating remote-only history from the history panel. If I visit a new page on my desktop, sync, then sync my phone, the remote visit won't appear in history.\nThat'll definitely make the history panel faster, but also makes it pretty useless.\nYou already have an inner join on visits, so it should not be necessary to prune unvisited history.. > The original query was doing this too\u2026\nThen I'm confused, because I see remote-only history in my history panel, and yet this query would seem to exclude them!. Oh! I'm confused. count(visits.is_local) is really \"how many rows are there?\". That's the difference between count and sum. is_local is a red herring.. This shouldn't be here \u2014 it should be in SQLiteBookmarksSyncing.swift \u2014 and it shouldn't use the model, which also means you can get rid of the changes to CachingItemSource and BookmarksModel.\nThe model stuff sits between storage and the UI. Sync is on the other side: it talks directly to storage.\nWe don't currently allow users to bulk-delete in the UI; when we do, then we'll want something like deleteLocalBookmarks:guids.\nConsider also that model-like operations need to do sync-related metadata tracking to ensure that we upload deletions. You expressly want the opposite here: you're dropping records that we just uploaded.\nYou might consider producing a LocalOverrideCompletionOp from your upload, and then applying that with applyLocalOverrideCompletionOp. Set processedLocalChanges to the GUIDs that you uploaded. That method tackles SQL variable batching etc. for you.. You're fetching and materializing potentially hundreds of records so that you can do a containment check. That containment check should only fail if we were interrupted on an upload, and in any case the check is wrong \u2014 you need to make sure the GUID doesn't exist anywhere on the server!\nSo let's use SQL for this: the set of records you want to upload is the set of children of the mobile root in the local table, minus the set of GUIDs in the buffer, minus the set of records in the mirror (which should always be empty, but let's be sure). Call that set newRecordGUIDs.\nIf there's no mobile root in the buffer, create one with children = newRecordGUIDs. Otherwise, take the existing root and append newRecordGUIDs.\nUpload all of the local records in newRecordGUIDs, plus the amended mobile root. You don't need to fetch the existing children as bookmarks at all.. I'm not sure that info.modified will be correct here \u2014 we fetch i/c, then we do some work, then we download bookmarks, and now we upload them. Someone could have uploaded data between the i/c fetch and the bookmarks fetch, and Sync is totally OK with that.\nYou should use the last download timestamp of the bookmarks synchronizer instead \u2014 that is, you want to make sure that this upload happens immediately after the download.. Sorry, I misread a little; you're not materializing all of the child records, but you are cloning unnecessarily. We discussed further on Slack.. It's possible that a record exists both locally and remotely. Rather than trying to handle this case here, where you're explicitly trying to avoid merge logic, you should add:\nAND NOT EXISTS (SELECT 1 FROM \\(TableBookmarksBuffer) buf WHERE buf.guid = bookmarks.guid). We know already that the GUID is unique. You never actually use dictionary lookup; you only ever work with all the GUIDs or all the BookmarkMirrorItems. I suggest you skip this dictifying: just return the array with cursor.asArray().. I think in this case that should be child, not parent, for two reasons:\n\nYou're not uploading folders.\nWe've just moved the record to the buffer, and we're forgetting the local copy. You need this to be child to unlink it.\n\nN.B., with this cleanup it means skipped can leave idx sparse.. Why did you choose this approach \u2014 delete then insert all \u2014 rather than appending the uploaded children?\nMy DB has 102 mobile bookmarks; this means each iOS addition will delete 102 rows and insert 103.. Use if let mobileRoot = maybeMobileRoot.successValue { instead of this pattern.. See Array.append(contentsOf:).. As mentioned earlier, if newBookmarks is an array, and you add\nlet newBookmarkGUIDs = newBookmarks.map { $0.guid }\nyou can kill newChildren later, and skip a bunch of work in several places.. You also need to handle the case of no new data; if you short-circuit here, clients won't upload unless another device has added data.. This betrays a weakness here.\nIf an upload spans several POSTs, as it will if the batching API is disabled (as it currently is), you will be leaving the server inconsistent unless all the POSTs succeed \u2014 we only upload the mobile root once, after all of its new children have been uploaded.\nuploadRecords, which you're using here, is suitable for two kinds of use:\n\nIndependent record synchronizers, where there is no need for inter-record consistency.\nReplayable synchronizers, where the actions of this client alone can recover from an inconsistency due to inter-record relationships.\n\nThe main bookmarks synchronizer is replayable. I'm not sure this one is; it's certainly not if you follow my suggestion earlier of avoiding collisions with remote records, because after each chunk the non-cleaned-up local records are now remote ones with which we'd collide if replayed!\nMy suggestion is to introduce a little simplicity here.\n\nAdd a sibling method to uploadRecords that doesn't have onUpload and is guaranteed to make a single POST.\nExpose the infoConfig field for max batch size as a method on Sync15CollectionClient.\nHere, where you begin to upload records, ask the client how many records we can do atomically (the method above).\nFetch that many new mobile children (minus one, obviously) from the database, and construct a single atomic payload of new children + the mobile folder.\nUpload it in one go, and move those children from the local DB to the buffer.\nFinish.\n\nThis means we'll typically upload 99 mobile bookmarks, safely, each time we sync. This has some advantages:\n\nReduced chance of OOM thanks to buffering all the mobile bookmarks in memory.\nIncremental progress if mobile bookmarks gets too large.\nNo chance of introducing inconsistency.\nMakes this code much more predictable and simpler: no onUpload, no batching, no need for multiple modified times in the buffer op.\n\nWhat do you think?. Here you're switching between the mirror's lastModified and the synchronizer's lastModified.\nBecause you haven't bumped the mirrorer, as far as I recall next time we sync the mirrorer will download the records we just uploaded!\nSee this in the primary synchronizer:\nswift\n                // We need to advance our batching downloader timestamp to match. See Bug 1253458.\n                self.setTimestamp(timestamp)\n                mirrorer.advanceNextDownloadTimestampTo(timestamp: timestamp) . Do these really need to be open? Can they be internal?\nDo these need to be var? I think they can be let.. Comment this function to explain which results will be included and why.. ```\nreturn db.runQuery(\u2026)\n\n\n== { deferMaybe($0.asArray()) }\n``. Return here, just as you do on line1313.. Diagnostic logging here?. This comment is no longer relevant; we're specifying the time.. The timestamp is always numeric. You can avoid the need to do this concatenation by simply substituting the value directly into the string, if you wish.. Add a comment that this will leave theidxcolumn of the local children sparse \u2014 typically dropping the first 99 children.. While you're here: finish the sentence with....`, newline before.. These chained functions end up kinda unreadable. Could you break them out into named functions, so we can express this as:\n\n\n```\nreturn storage.getLocalBookmarksAdditions(limit: \u2026)\n\n\n== fetchOrCreateMobileRoot\n== uploadSomeLocalRecords\n``\n?. If the buffer doesn't contain a mobile root, _local definitely does_. Furthermore, the local one has a localized title and is well-tested code. I suggest you fetch the local record instead of creating one here \u2014 that will avoid duplication of code and the possibility of a strange record magically appearing on the server without ever having existed on disk.. What's theArraycall for? IfnewBookmarksis an array, then.mapwill return an array.. Look at thesucceeded` field in the JSON response body from the upload. Intersect that with this set. Remember, the goal is to make the buffer match the server without having to redownload records, not to match our intent.. We just appended N records to the buffer by copying them from local.\n\n\nWe know the buffer structure is consistent and zero-indexed, because we produced it earlier from an array.\nWe now want to add the same children to the buffer structure, with the contiguous subsequent N elements of the numeric index range.\nOne way to do that is to do it in memory, as you have done here: compute the entire child list using getChildrenArgs, drop most of them, and then build a big INSERT statement with insertStructureIntoTable.\nIf you choose to do it that way, you should augment getChildrenArgs to be lazy, avoiding building all of the arguments for rows we're about to drop.\nAnother way to do it is to copy from the local structure, just as we did the values, in the same order, and renumber by using a sequence. SQL to do that:\nCREATE TEMPORARY TABLE to_move AS\nWITH q as (\n  SELECT child, idx from \\(TableBookmarksLocalStructure)\n  WHERE \u2026      << here you list/pick the children\n  ORDER BY idx ASC)\nSELECT * FROM q;\nINSERT INTO \\(TableBookmarksBufferStructure)\nSELECT parent, child, (rowid - 1 + \\(startIndex))\nFROM to_move;\nDROP TABLE to_move;\nAnd this is even simpler if you create that temporary table as you pick the items.. Move this next to the other functions that freeze (e.g., commitBatch). Use DeferredResponse in the signature.. Use if let instead of a nil check and a force-unwrap. Or, even better, use map:\nlet queryParams = self.batchToken.map { [batchQueryParamWithValue($0) }. Please also see if you can rephrase endBatch in terms of this method.. This is a bit too much like digging around in the guts of the uploader for my tastes. You want two things:\n\nTo know whether all records were uploaded.\nTo only commit (and, ideally, to only upload) if all of the records can fit in a single commit.\n\nIt's possible for even the batch API to span commits (more than 10K records, IIRC), which would mean sadness for us.\nI think this logic could productively belong in the uploader, no?. If the batch API is disabled, this flush results in the records being uploaded to the server. It's not helpful for us then to throw TooManyRecordsError, right? The cat is out of the bag.\nWhat we want is:\n\nTo increase our chances of success by limiting ourselves to the size of a single POST.\nTo upload in no more than a single commit, or no more than a single request, depending on how optimistic we are. The uploader should help us with that.\nIf we supply too many records to the uploader, fail then, not after some have been uploaded! (This is why it's nice to push the count down into the uploader.)\nRegardless of whether batching was enabled, use the list of successfully uploaded records as our source of truth moving on \u2014 drop them from local and add them as children of mobile. If there was some problem with some of the records, and the batching API was disabled, this will leave us slightly out of sync with the server, but in a more recoverable and incremental state than simply failing.\n\nThoughts?. Might as well make this self.source.getBufferChildrenGUIDsForParent(guid). Same amount of code, but it actually does something!. s/send to many/send too many. Perhaps name this one buildMobileRootRecord(local: buffer: additionalChildren). create implies storage side effects.. A closure with only a single statement can omit the return. And consider using .map (untested):\nreturn buffer.getBufferChildrenGUIDsForParent(mobileRoot.guid)\n             .map { $0.map({ (mobileRoot: mobileRoot, children: $0 + newBookmarkGUIDs)) } }. s/GUIDS/GUIDs. Same re return.. Same naming comment.. Yikes. This isn't right.\nendSingleBatch calls moveForward, which advances the ifUnmodifiedSince value to allow for the next upload. But that's a side-effect, and isn't part of the contract! You're just using that to leak the result of the upload. Don't do that \u2014 if you need the timestamp that was chained out of the upload, push it through the API.\nlastTimestamp also typically won't be right. If you need to fall back to that, it means something went awry.. I think you want to return DeferredResponse here, which will give you the timestamp you need.. Why do you need this line? Why not just let the while loop continue?. By definition, you won't have a batchToken if you're doing a singleBatch upload \u2014 you only find out that you're in a batch when you first upload some records.. Use guard let to invert these \u2014 return early if we don't have a batch token. That puts the short branch first.. Do this after you've put the records in the buffer, no? It's an optimization.. There should be no root GUIDs, no? So no need to translate.\nAlso, do this work outside of the callback, right under let records, so that ARC has a chance to drop childrenRecords.. This still concerns me.. If you're going to go from DB to mirror item to record to mirror item, you might as well keep the original mirror item around.. if let or guard let.. Don't send err here \u2014 it might include the key.. Don't use Date.now in tests!. \u2026 because often the first and second post timestamps will be the same.. You need tests for this\u2026. You need tests for this\u2026\nTestSQLiteBookmarks.swift is a good place to start.. Drop these lines altogether. Someone upgrading from 21 will run pageMetadataCreate here, then run highlightsCreate, then drop and recreate highlights, then in the 27 upgrade will drop page metadata and create it again.. Similarly, don't bother with the creation here.. Same.. Do the two drops first for clarity.. Note that no clients will ever have a TablePageMetadata, because it was created as AttachedTablePageMetadata, so there's no need to make one only to drop it.. Just use .value to synchronously wait on the Deferred (which is what succeeded() does under the hood), then do your checks. Much simpler than using expectations.. Use SQLiteBookmarks.addToMobileBookmarks instead of doing this. If you really must go direct, use  insertBookmarkInTransaction. The point is to avoid baking duplicate logic (like sync_status values) into tests that might cause the tests to continue to pass when the upstream logic changes.. In tests, you can flatten these out by using .succeeded() here, and .value.successValue! instead of >>==.. Same comment about not bothering with expectations.. Same point re expectation.. Set these to fixed timestamps, too. After all, you want to make sure that the Mobile Bookmarks timestamp has changed after upload, and the root has not!. What value does crashedLastLaunch add here now?. Isn't this a little pessimistic? We default to true earlier in the patch\u2026. No \u2014 the model that implements this (source.current) knows whether it's the mobile bookmarks folder, and the nodes it's given by the factory know whether they're deletable. This is not the place to add further logic.\n(You probably need to coordinate with @garvankeeley as he works on the models.). Augment the block comment to mention how these are handled \u2014 before or after the move? Etc.. There are two consumers of ViewBookmarksBufferOnMirror: the UI code (getURLForKeywordSearch, valueView in the model) and the validation code (e.g., allBufferStructuresReferToRecords). The latter wants the unfiltered buffer; the former wants to exclude deletions. You need a second view.. Use SQLite's positional args so you only have to supply the arg once, or project the GUID here.. This should never be necessary: whenever you remove an item from the buffer (remote deletion, sign out of Sync, remote wipe), you should also apply that operation to the pending deletions table.. This code suffers the same problem: uTSCIF ends up running a DELETE, then touching prefs, then running an INSERT, then touching prefs.. \u2026 and so this code runs three sequential database transactions, any of which could fail.. Ay, no. Use self.db.run([(clearHighlightsQuery, nil), (query, args)]) to run more than one write in a single transaction.. Ay, no. You're running a SELECT query, pulling all the values into memory, then stuffing them back into an array and inserting them into the cache table in another transaction. That second transaction (down on line 100) can fail. You've taken this code from three transactions down to two.\nUse INSERT INTO \\(TableHighlights) SELECT \u2026 to insert the values from the query directly into the table.\nI think your argument for doing this is 'but we need to compute the cache key!'. But all of these values are derived from the URL, so you shouldn't need to pull everything into memory every time. Use a database function or persist them in the table or use a different cache key mechanism or calculate and memoize the cache key on display. All of these are better than taking two DB transactions and processing all of the rows to do this work.. Either fix this or delete it\u2026. Consider moving uTSCIF and friends from BrowserHistory into HistoryRecommendations, and then figuring out a combination of the two that runs a single transaction.. Make sure this runs on whatever queue it should run on.. I don't think this is used now, right?. self.tab?.url?.displayURL. I think clearTopSitesCache() can be deleted, or moved to testing code, or removed from the interface, or otherwise removed from the public API.. %s/Topsites/TopSites/g. You might want to explicitly specify (historyID, cache_key, url\u2026) here so that if the schema changes this insert will fail rather than silently doing the wrong thing.. No; this only sends query strings, which only contain variable placeholders. . This should really be called refreshIfNeeded.. Why does this need to recompute Top Sites? Seems like you want an enum set here, so you can specify that you want to refresh Top Sites, Highlights, or both, no?. This comment is no longer true. If anything, we check to see if we need to refresh Top Sites.. Why not highlights?. Don't send this if the only things we want to refresh don't need refreshing.. Don't use Date.now() for timing; it can jump around, in which case your invalidation will be wrong. Grep the tree for uptime, and use offsets from uptime.. Hah.. Consider switching additions and deletions in order to imply that deletions happen first.. Deletions first?. I don't think this is the right place to put this logic, and this might need to be reassessed anyway.\nThis function has two call sites. In one of those it doesn't make sense to specify a parentGUID \u2014 getRecordsWithGUIDs. The other already knows its direction and which folder you're populating, and so in principle already knows if it should even call into this function.\nLift this logic up to getChildrenWithParent, and re-evaluate whether the SQL below it still makes sense.. I suspect that isEditable will somehow be wrong here when @garvankeeley lands his combined local + remote Mobile Bookmarks model and all this is turned on.\nRemember that if the direction is .local we want all non-root items to eventually be deleteable. Right now we want the user to be able to delete buffered mobile bookmarks if we're in the fallback mode, and local mobile bookmarks regardless. The only place that knows about whether we're in fallback mode is UnsyncedBookmarksFallbackModelFactory, which knows at the point of creating the model/factory/folder that it's the buffer's Mobile Bookmarks, and can guarantee that they're not overlaid on the mirror.\nConsider whether it makes more sense to implement this logic in itemIsEditableAtIndex on an appropriate class.. A thing I'm trying to avoid: if we turn on proper merging, will we accidentally end up deleting a buffer item that shadows the mirror instead of the local version, or attempt to delete from the buffer a record that's actually present only in the mirror? After all, these are overlay views\u2026. Oh, this scares me. I wish this were transactional. File a follow-up bug, please.. I'm not sure this is phrased correctly. It's possible to have data like:\n```\n| parent    | child     | idx |\n| aaaa      | bbbb      | 5   |\n| aaaa      | cccc      | 8   |\n| aaaa      | dddd      | 19  |\n===============================\n```\nI think your argument names perhaps should change \u2014 startAt really means the offset into the children array, and startIndex means the nextIdx of the new children to add, right?\nThis will be pretty confusing to people in the future, so the clearer you can make the documentation, the better.. Note that we can only upload deletions when we're done syncing, but this UI can show at any time. Consider the UX implications a little. I doubt there's anything we can do.. Also I think purging the pending deletions is less important than the other two, so please put it last.. I think I'd do the deletions first.. Again, this should never occur: prune items from the deletions table in the same transaction in which you apply a downloaded record.. Actually, you don't need to clear pending deletions \u2014\u00a0you have ON DELETE CASCADE, so they're removed automatically when we truncate the buffer. Try it!. Do something like this in SQLiteBookmarksSyncing.swift, around line 482:\nif !deleted.isEmpty {\n    for chunk in chunk(deleted, by: BrowserDB.MaxVariableNumber) {\n        // \u2026 insert usual varlist nonsense here\n        \"DELETE FROM \\(TablePendingBookmarksDeletions) WHERE GUID IN \\(varlist)\"\n    }\n}\nThat way there should never be an entry in TPBD that doesn't correspond to a non-deleted buffer item.. See note elsewhere. I think this can disappear entirely.. You could also do \nDELETE FROM \\(TablePendingBookmarksDeletions) WHERE GUID IN (SELECT guid FROM bookmarksBuffer WHERE is_deleted = 1)\nif you want to avoid the chunking work.. Out of a million users, 1,700 will have a clock that's persistently wrong by more than a minute. If I read your code right, you always invalidate after launch, and then every fifteen minutes thereafter, right? If so, just substitute uptimeMillis for Date.now() everywhere.. No else after return.. Same.. I think you mean main here.. This is going to need some work \u2014 @eoger is working on deletion now, and you two will need to coordinate, probably as a follow-up. Items in both the buffer and local will be deletable.. If you fix removeItemWithGUID to never return nil \u2014 it no longer needs to \u2014 then a safe thing for you to do is to just do:\nreturn ConcatenatedBookmarkFolder(main: main.removeItemWithGUID(guid), prepend: prepend.removeItemWithGUID(guid)). Remember BookmarkRoots.DesktopRoots?. You should really have local come after remote \u2014 the local items will be appended to the upstream folder when we upload them, so if you do it this way they'll reorder themselves after a sync, which is weird.\nYou can do that by just changing prepend to append and flipping some bits around in the implementation, which is probably clearest.. You need to update this comment.. I think you want to use MobileFolderGUID instead of \"mobile\", no?. Add a local bookmark and make sure it appears, too.. Nice.. Perhaps phrase this as \"Drop pending\u2026\". Too many kinds of deletion! \ud83d\ude01 . Also worth noting that there are two approaches here:\n\nKeep local deletions for non-deleted remote changes. You might rename a bookmark on your desktop after you deleted it on your phone, and when your phone comes online it'll remove the bookmark from your desktop.\nDiscard local deletions for both remote deletions and remote changes. Your phone won't try to win any races at all.\n\nHere you've implemented the second, which is simpler. It's a good idea to document that choice.. BrowserDB.varlist.. Can we avoid doing this filter twice?\nPerhaps pass the deleted and non-deleted children separately. After all, they're very different, and come from different places.. Probably still worth mentioning that we don't include Mobile Bookmarks, because we're inverting the tree to put them at the top. Folks won't necessarily read the whole pile of code\u2026. To recap: change the test you copied from, too! Existing flaw. See how TestBookmarkTreeMerging.swift does it.. Yeah, that would work. But I don't think it would touch much code; try it and see how it feels.. On the topic of style: several of us dramatically prefer the Pythonic self.foo style when accessing member variables, because it avoids any chance of variable shadowing.. Er\u2026 foo ? true : x is foo || x.. Do this after the invalidation occurred, just before we call didInvalidateDataSources.. Why bother setting this pref when you're immediately calling with forceTopSites: true?. I'm dubious about Swift's ability to decide that this entire function can be statically computed. Can we just lift this (and others?) into real constants, or even inline it into repopulateAll?. \u2026 cos I'd hate for us to do a bunch of unnecessary string interpolation and allocation here each time, just to run the same fixed SQL.. main.title. Excess double space.. Can we share this logic with createSomeBufferBookmarks, perhaps by breaking out a getApplicationBookmarks method and giving an optional argument to the helper?. Or even return the BookmarkBufferStorage from createSomeBufferBookmarks\u2026. s/it's/its. So you now have a serial queue \u2014 one of these callbacks can run at a time \u2014 and you're doing an unbounded number of one-by-one file deletions that blocks the queue.\nThis is a somewhat risky change: you've limited the throughput of the system dramatically in order to avoid a concurrency issue, and that might cause UIImage instances to stick around for a long time.. If you want to avoid certain kinds of problems, consider using a barrier. A barrier task will temporarily turn a concurrent queue into a serial queue, which might make sense for single-writer multiple-reader.. These are really shouldRepopulateHighlights and shouldRepopulateTopSites.. Label the first argument to repopulateAll.. \u2026 killing that _.. Can we not make this a constant?\nAlso s/Topsites/TopSites.. This isn't the right direction for this arrow. Account is built to be reused without dragging in all of Firefox's storage code. Figure out a delegate or result or notification-based way of returning this data.. If you change this to something like stateCache.value as? TokenState you can avoid a force-unwrap.. Can we do better than an NSError?. Don't force-unwrap: a server bug or malformed records will cause a crash. Use flatMap if you need to skip invalid records.. Consider implementing a static method for RemoteDevice to allow it to be built from the JSON response, rather than inlining that logic here; you should be able to write a test for it.. Use protocol-oriented programming here! Define a protocol for a thing to which you can give a list of devices, and pass that as the argument. That should get rid of your coupling to Storage.. Do you really want to fetch and update the FxA device list every time we even consider syncing clients? Remember that synchronizeLocalClients won't do any work unless we need to, and your updateFxADevices flow here not only hits the network, but also writes to the DB. That's power-hungry.\nConsider reworking this: can you update the device list only if the clients sync actually did work (see the SyncResult)? How does FxA do rate-limiting and backoff?. Oh hey! You already have a protocol for it! \ud83d\udc4d . We are actively working to kill this pattern. Put this in BrowserTable with a migration instead. See Bug 1388147 and talk to @justindarc.. Put the optional field as the last column.. @testable might help you out here.. Make RemoteDevice the base struct of FxADevice, put RemoteDevice in Shared, probably in a new file, change the protocol to take RemoteDevice instead of FxADevice, and then you can kill the import Account throughout Storage, which will keep our incremental build times down.. Naturally this has to stay in Storage.. Match the indentation above.. EXISTS is a condition, not an expression, so please surround it with whitespace.. Do we now keep our own FxA device record in the DB? If not, this function now excludes our own client row automatically. Did you check the consequences of that?. This is just a way of hanging a single method on a class, but you're making an instance out of it. Why not make this extension SQLiteRemoteClientsAndTabs: RemoteDevices? After all, you've now tightly coupled the former with the latter, no?. I've opted to do something like this, but to return self instead. The only purpose of this method is to special-case the 'left' and 'right' sides of a particular nested concatenated folder, and otherwise to fall through.\n(We could make this even more general, and poke at the contents of ConcatenatedBookmarkFolder.main and .append to find out which side to use, but I figure that's probably a step too far.). I'm slightly apprehensive about that !.. I don't think you need this.. File a follow-up: use the server timestamp of the fetch for this? (Perhaps by adding the dates to RemoteDevice.). Would it make more sense to run this prior to line 134, creating the DB, adding the right table, and then making clientsAndTabs?. Add a block comment for this.. These wrappers have to exist because the type signature for a function with optional arguments omitted is not the same as a function without those arguments.. I really don't like the onFirstSync idea. It's an odd bidirectional leak: you're anticipating some internal knowledge of the synchronizer (timestamp is zero implies uploading our record), and you're leaking a side-effect into the synchronizer.\nI suggest you think about what you actually want to do here. Do you want to notify other clients if the clients collection changed? After all, that's what we want to do for sending a command and uploading our record, right?\nIf so, look at the stats the method returns, and do the work here!. Or, if you define this behavior as being an intrinsic part of the clients collection, define a push recipient protocol, and supply an instance to the synchronizer to use as it sees fit. Then you would put those side effects inside the synchronizer.. I don't think you should return the FxANotifyResponse, and I think this interface should be in Sync, not Account. After all, this is a delegate protocol.. Nope! The delegate is an artifact of the moment of beginning a sync.\nThis is a good place for the actual notification logic to live, but that doesn't mean FirefoxAccount is a SyncCollectionChangeNotificationDelegate (which is what this would be called in Java).\nThere's a triangular relationship between an account, a SyncManager, and a synchronizer.. I think this logic should probably live near where maybeUploadOurClientRecord is called. That's the point we decide whether to upload our record, and we know why \u2014 someone sent us a tab, it's more than a week since we uploaded, etc. etc.. Consider pushing this into a queue, rather than blocking the response.. This isn't really a count of server records \u2014 it's a count of aggregate remote state.\nConsider, for example, that someone can HTTP DELETE records from the server, and Sync clients will never see those omissions until they drop all local state and redownload.\nI suggest here something like getUpstreamRecordCount or getNonLocalRecordCount.. I don't think you need the .asArray call.. Abstractions leaking everywhere!\nI suggest you put this next to the implementation of synchronousBufferCount in BookmarksBufferStorage, not in Merged\u2026.. Right here you have buffer. Use that instead.. It's time to invert the conditional into a guard, so that this isn't buried down here.. Let's put all this behind a new flag in AppConstants, and add Sentry logging to record each time when we run a repair. The ideal is that we only validate when we've downloaded new data, and we only repair after we validate, and so we rarely repair.. Call greenLight to check whether we should begin this work. It's likely that we shouldn't start repair if we're in the background.. If this fails \u2014 e.g., because the database is now closed \u2014 we won't include validation stats in the result at all.\nI suggest you bind here rather than chaining, and do something sensible if we can't retrieve the count (e.g., send a sentinel value, or omit the count).. Same.\nIndeed, you might consider returning Deferred<Int?> instead of Deferred<Result<Int>>.. Comment needs to be changed.. By definition it's no longer possible to supply multiple tables here.. There are two things in play here:\n\nMigrating from the SchemaTable approach to a version number approach.\nMigrating from _potentially any earlier SchemaTable version to the current one.\n\nWorth commenting both of those.\n. guard. guard. Clean up whitespace.. I don't see how this works. There's one version number in the store, and it's in use to track whether BrowserTable has inited\u2026. \u2026 without writing the user version.. With the enormous assumption that we never cross-mojinate Schemas across DB files. If you apply FoobarSchema v3 to a BarbazSchema v3 DB, this will complete without error. That's a totally fair assumption, but it might be worth writing it down somewhere!. You should explicitly check for downgrades here, throw a big obvious error message (to Sentry?) for developers to spot in the logs, and bail out.. Buh buh trailing commas are the True Way!. Oh, smart hack.. This really needs a comment to explain what true and false return values mean.. So we return true if there's no table, or if the table is of version 4+ or 0, or if we successfully ran ALTER TABLE. That is, if this function returns true, running CREATE TABLE IF NOT EXISTS will be safe, and if it returns false it means we tried to upgrade but failed.\nCan we just define an enum for the various conditions here?. This would be a clearer change if you left it inside SQLiteLogins.swift, even if that's less 'pure'. You're breaking a bunch of blame here.. File a follow-up. This is a super easy fix.. This is a tricky one. It's really hard for you to continue testing the code that we're trying to test if you make changes like this \u2014 you're essentially creating a database layout that never existed (v6 but not using SchemaTable)!\nAt this point you might be best off running these tests, capturing the intermediate databases, and checking them in as fixtures.. Inside a single-line closure I believe you can routinely omit return, no?. This is nice.. This checks for the existence of tables, no? Why do we still do this here? I think func exists needs to die.\nWe should just be checking the connection user_version again, inside the transaction.\nOr am I misunderstanding?\n. I mean, we'll probably fail to work correctly in all sorts of ways, and this should only happen to developers or users who are using rooted phones and moving files around, so just make sure developers find their own bugs! Crashing is a good way to do that.. I don't think you should do this. user_version will be 0, but you can tell whether the schema table exists, and use that to figure out what version you're at.. intermediate. Hah. Now your comment talks about bools but returns an enum. Changeroo!. You only need to do this if connection.version == 0.. There's nothing after the else, so kill it and just return success here.. Same.. Same.\n(Note that in all of these cases you're escaping from the closure, so you do still need success = \u2026; return success.). Log the reason?. s/as/has. Surely you want to wait to do this until you've actually moved the file?. We have a little type alias hanging around: GUID. Use that instead of String where appropriate, like here.. LOCKED, not LOCK.. I don't get it.\nYou got SQLITE_FULL, indicating a full disk, so you try a backup (which fails), then move the file and move it back.\nYou got SQLITE_LOCKED, which indicates a coding error \u2014\u00a0e.g., simultaneously reading from the DB while dropping a table on the same connection \u2014 and we'll try the same. Probably the backup will succeed, the file will move, and move back, and it shouldn't affect the outcome. Though it might genuinely corrupt the database.\nYou got SQLITE_BUSY, which means another client is writing to or recovering the database, and you attempt to move the files out from under it. If the filesystem implements moves as renames, this'll do nothing at all \u2014\u00a0the file handles will be the same. If it does anything else, it might unpredictably corrupt the files. SQLite probably won't enjoy you moving the file while it's open \u2014 see errors like SQLITE_READONLY_DBMOVED.\nI don't see attempting a move, then attempting a copy and replace, as being the correct course of action for any of these things. For FULL, you just need to abort (or try to clean up disk cache and try again). For LOCKED, we should close the connection and crash when we've done so, with a really descriptive Sentry message. For BUSY, the best thing we can do is wait \u2014 BUSY literally means that someone else is futzing with this very file, so it's not safe to copy!\nAnd below this block of code, where we handle other kinds of errors, we should also be more circumspect. Some of those errors will indicate bugs in our code.. > The SQLITE_LOCKED result code indicates that a write operation could not continue because of a conflict within the same database connection or a conflict with a different database connection that uses a shared cache. \nShared cache mode is disabled by default, so it's a surprise if you got SQLITE_LOCKED.. Technically it's \"When the account enters the Married state\".\nBut I'm not sure this is the right time to do this. This means we will be hitting the account server, and potentially downloading the profile image, every single time we launch the app \u2014 or perhaps every time we sync!\nWhy not do this before we load the Settings UI?\nIf we're going to do this routinely, we should be caching the image.. FxAOAuthResponse.. Is this a URL? If so, call it avatarURL.. Can you point to the document that describes the issuer to use?. Is an empty HTTP body valid here?. There's no need to return here \u2014 the function has no return value.. Document that this sends a notification when it's done, or add a return value.. let profile = FxAProfile(\u2026)\nself.fxaProfile = profile\nprofile.downloadAvatarImage(). You don't need to do all of this work if you just replaced the profile object, right?. avatarURL.. This whole thing might be more clear if you introduce an Avatar, which is a URL, a flag indicating whether the fetch succeeded, and a UIImage.\nWhat happens if my avatar points to a non-image URL? Or the server is down? Or it's a 2GB TIFF?. I'm not sure this specifies a User-Agent, or otherwise constructs requests as we expect. I know this is what our favicon fetches do, but it concerns me.. Where does this come from? Should it live in AppConstants?. Can we use AlamoFire instead, just as we do elsewhere in the codebase?. Why would this request register another device record? Surely there has to be a better way to do this\u2026 can't we specify our existing device ID as part of the request?. Remember: boolean parameters are a sign of a design problem!. Don't bother with expectations; use .succeeded or .value and check isSuccess.. Why do this? As you've written above we already fetch the profile each time we advance the account object\u2026\u00a0so this'll do it twice.. Use reloadRowsAtIndexPaths instead of rebuilding the whole thing.. let.. These look pretty pixelated to me.. Also pixelated.. So there are now three places that do this?. Can we change this to MOZ_SHOW_FXA_AVATAR or something more descriptive?. Nit: update \u27a1\ufe0f updated.. As implied earlier, this would be cleaner if you created the image when you downloaded the data. The reason image is optional is because UIImage(data:) is failable; you get neater code and no fallibility here if you construct the image when you download the data.. You also need to ensure that we don't download content of arbitrary size, and that in normal operation we don't end up download a 250KB JPEG every time the user opens the browser. We should download the avatar image no more than once each time it changes.. OK, so what's the right thing to do here?. I'm pretty sure UIImage doesn't count as a view object. But it is worth checking whether there's a significant memory overhead (or win!) to using UIImage rather than the raw data.. Given that URL is failable, you might as well make avatar non-optional and make it let, and do:\nself.avatar = Avatar(url: avatarStr.asURL). let.. You don't actually use downloadSucceded (typo, btw).\nI think you intend to use it to allow for retries, to support lazy loading, or something like that.\nIf so, it's not enough to have downloadSucceeded. There are six states you could be in:\n\nWe have not yet attempted a download.\nA download has begun.\nThe download failed, and can be retried. (E.g., the connection dropped due to a transient error.)\n4.a. The download failed, and should not be retried in this session. (E.g., 404.)\n4.b. The download failed, and should never be retried.\nThe download succeeded, and we don't have an image (e.g., it was a malformed file).\nThe download succeeded, and we have an image.. Document that you emit this notification twice: once when the profile is updated, and once when its avatar has been loaded from the cache or the network.. I think you probably want more options here.\n\nhttp://cocoadocs.org/docsets/SDWebImage/4.1.0/Constants/SDWebImageOptions.html\nLikely you want:\nSDWebImageLowPriority\nSDWebImageScaleDownLargeImages. If the image is in the cache, this notification might fire very close in time, which might cause racing observers. Should we worry about this?. Just\nelse {\n    return deferMaybe(FxAClientError.local(FxAClientUnknownError))\n}. You can just use optional chaining here:\nif AppConstants.MOZ_SHOW_FXA_AVATAR {\n    profile.getAccount()?.updateProfile()\n}. See e.g., https://github.com/mozilla-mobile/firefox-ios/blob/master/ClientTests/ResetTests.swift#L77\nRemember that you shouldn't make an expectation if you're not going to fulfill it \u2014 if you're getting that error it implies that you haven't cleaned up the old approach.. Use @testable.. This should not occur after opening, no?. I don't see where you use these.. Note that we've evolved into an undesirable situation: the logins DB is always opened and initialized, even if it's not needed. Indeed, so is the browser DB!\nWe started with a lazy var.\nWe then moved to a flag.\nNow we have neither: because BrowserDB isn't in control of the lifecycle of the connection, it needs to make sure that the DB is set up before its initializer returns.\nThat's bad for risk (we always try to read and maybe write two DBs on each app foregrounding), and it's bad for perf (we write to two databases on first run).\nThis is why I suggested pushing down to SwiftData in some way: it would allow us to tie init behavior to connection management. We're confident in our connection management.\nConsider whether you achieve that easily enough via a delegate pattern \u2014 e.g., a closure with a weak ref to the Schema that BrowserDB passes down to SwiftData, which runs it each time it opens a new connection.. You're using reopenIfClosed for the initial opening! That's\u2026 kinda gross. Can we do better, even if only naming-wise?. I think your problem is this.\n>>== is an operator.\nSo is ..\nYou have, effectively, this:\nX >>== Y.value.successValue\nYou want this:\n(X >>== Y).value.successValue. Y in this case is the closure (the bit in {}). You can see that the compiler error message is basically saying \"you can't call .value on a closure-that-returns-Deferred\".. I don't think adding a short timed delay is a good fix, if there is a problem, and if there's no problem it adds unnecessary delay to UI updates. Please just inspect the observer notification handlers to make sure they're ready to receive notifications close in time and from arbitrary threads, and fix them if they're not.. This might occur due to a captive portal\u2026 let's make sure that a user on Starbucks' wifi doesn't end up with a permanent missing avatar. Or does this all reset on next launch?. See earlier comment.. On which thread does SDWebImage run its callback? If the answer is 'main', then this really does just delay by 100msec. If not, then this is a change of behavior \u2014 the notification observers will run their code on the main thread.. Nit: 'a two \u2026' => 'two \u2026 events'.. This notification is not posted on the main thread. You should be consistent about whether it is or not, and what observers need to do.. Nice!. Why is this wait here?. Don't commit these changes.. switch statements in Swift do not implicitly fall through, so you don't need break.\nhttps://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/ControlFlow.html#//apple_ref/doc/uid/TP40014097-CH9-ID130. Consider at this point having SwiftData return a FailedSQLiteDBConnection \u2014 perhaps it'll be better next time?. This is more than .info \u2014 this should never occur in onConnectionCreated!. Comment no longer needed.. Same comment about naming as in the last review.. Comment still stands.. No \u2014 the callback should take the connection. Indeed, this callback should ideally not capture the instance: you're creating a cycle (self -> db -> callback -> self).. The only instance variables used by this function are log and db. Making this static will help to cut the cycle.. Doing this is an attempt to cut the reference cycle.\nHowever, we should re-run the callback when reopening the connection! What if we enter the background and an extension wipes the DB? A user_version check is very, very cheap; we should feel free to do it each time we open a connection.\nThe problem then becomes one of avoiding potential memory leaks from a cycle; see notes above.. You should remove it and make sure that the observer is safe and performant to run on the main thread. If the notification is elsewhere sent from a non-main thread (which I believe it is) you should be prepared for the observers to run twice at the same time. If you don't want that to happen, you need to control which thread sends the notification.. You shouldn't need to add this.. I'd probably call this onConnection or forConnection.. Comment no longer relevant. Consider whether you need didCreateConnection at all; why not simply put\nlet conn = ConcreteSQLiteDBConnection(\u2026)\nif !connectionCreatedCallback(self, conn) {\n    self.closed = true\n    return nil\n} else {\n    self.sharedConnection = conn\n    return conn\n}\nup on line 106?. But transaction calls withConnection, so connection here is normally, but is not guaranteed to be, the connection that was passed as an argument. This is confusing, it's weirdly reentrant, and neither this nor the db argument are needed to do this work.\nThe entire body of transaction's withConnection is a function that takes a connection as an argument. It doesn't even capture self!\nLift out that function, perhaps as a method on SQLiteConnection called transaction, and now SwiftData.transaction simply becomes \"get a connection and call .transaction() on it\", and you can use that method here to work with the connection you're initializing.. I'm not sure this is necessary. It might be here so that we don't try to init a connection that we fetched while we were shutting down.. Any particular reason for doing this on the main thread?\nConsider using the syncQueue or another background queue instead.. I think your mention of a crash is no longer valid.. Any good reason not to make this connection.transaction(transactionClosure)? OOP!. Either fix the comment or don't make the function public\u2026. Wouldn't self.transaction { connection -> Bool in \u2026 } be neater, eh?. Why does this need to be public? Why not just create and update?. Why does this need to be public? Surely it's only used by prepareSchema?. Undo this change.. You can just do\nif let image = profile.getAccount()?.fxaProfile?.avatar.image {. What happened to \"page.\"?. You can make this match the similar pattern below:\n+        if AppConstants.MOZ_SHOW_FXA_AVATAR {\n+            profile.getAccount()?.updateProfile()\n+        }. Did you see @tecgirl's comment about just using a > instead of a detail row?. Does it need to be part of the Schema protocol?. // Animation used to rotate the Sync icon 360 degrees while syncing is in progress.. Nit: excess whitespace before parens in these two functions.. I wonder if we can do this with a transform, rather than switching image.. Did you try setting isRemovedOnCompletion to allow one full rotation to occur and then the animation stop?. I'd rather have this crash than make this code less efficient.\nWe don't expect to ever have this code path hit in production; our database schema makes it impossible, and if we're not willing to trust the data coming out of the DB, without any evidence to suggest that something fishy is happening, then we have lots and lots of other places to wrap in bubble wrap.\nIf you really insist on landing this little part, watch out for the Sentry logging; if you don't see any for a month, put the force casts back in and kill these extra bytes!\nNote also that this error handling will, should there be a bad row, run on every sync \u2014 twice per launch, plus once per fifteen minutes, per bad row.. This line of thinking is more dangerous than it seems.\nIt's tempting to follow the syllogism: if we remove force-unwraps, then we don't get crashes; if we don't get crashes, then things are good, ergo we should eliminate all force-unwraps!\nThere are plenty of shitty force-unwraps in the codebase, often where we pass a message or destructure a URL. That is, places in which we already know that the value might be nil. That's a bug.\nI'm more concerned with incorrect assumptions. IMO the goal of robustness in software is best achieved by documenting assumptions and detecting violated assumptions as soon as possible. This is particularly important where persisted user data is concerned. (Screw up page rendering all you like, show an empty title in a URL bar, I don't care. Let bad data hit disk or reach another client, and analysis and remediation of a bug become way harder.)\nCrashing happens to be an easily diagnosed way of finding a violated assumption. Sending to Sentry is another good way, but most importantly crashing guarantees that no further harm will be done.\nTake this code as an example. If @justindarc had taken the obvious course of action that he'd proposed \u2014 check the unwrap and quietly drop data on the floor \u2014 the query would have continued to be wrong, perhaps forever, quietly fetching extra rows from the DB, ultimately confusing whoever next touches the query.\nIf this were somewhere else in the flow (perhaps these were bookmarks) then the apparently simple fix of not crashing might have skipped a record and thus corrupted the server, breaking Sync for other clients. Assumptions go both ways \u2014 we make assumptions about the structure of the database, and our callers make assumptions about the rows we'll retrieve!\nA row-function like this \u2014 converting from a very generic cursor row into something very specific, within the context of the query \u2014 is, IMO, the very best kind of place to force-unwrap. Force-unwraps are how we tell the compiler: I know something you don't know, and if it turns out that I'm wrong, don't let me do any more harm!. uponQueue means \"when all this work is done, please run this callback on the provided queue\".\nWhat we want to do here is do the repopulation on the non-main queue, and continue to run this callback \u2014\u00a0which does datasource stuff \u2014 on the main queue, no?. I think this should happen inside SQLiteHistoryRecommendations, on line 147.\nOr, indeed, define a sibling method in BrowserDB.swift:\n/**\n     * Runs an array of SQL commands. Note: These will all run in order in a transaction and will block\n     * the caller's thread until they've finished. If any of them fail the operation will abort (no more\n     * commands will be run) and the transaction will roll back, returning a DatabaseError.\n     */\n    func run(_ commands: [(sql: String, args: Args?)]) -> Success {\nthat doesn't block the calling thread. It simply needs to return a Deferred and fill it from the block inside self.transaction(synchronous: false, \u2026).\nThen you can just make repopulate call self.db.runAsync instead of self.db.run.. Yep, good enough!. Nit: Expectations. What happens if you pull to refresh when you're in a subfolder?\nWhat happens if that subfolder is deleted as a result of the sync?\n@joeyg, @jhugman \u2014 did you test this?. This code has gone through several revisions (e.g., #2893), but I think it's fundamentally wrong. FxALoginHelper should not be reaching into sync.scratchpad.\nIf a sync is in progress, this change will get wiped out. If a sync isn't in progress, then this work shouldn't be needed \u2014 the right channel for communication between the FxA state machine and the Sync state machine is the result of advance.\nI suggest:\n\nMaking sure the device registration is part of the account objects. It probably already is.\nHaving the Sync code detect, based on that, whether something material has changed about the account that would warrant a re-sync of e.g., clients.\nHaving the clients synchronizer decide if it needs to reupload the client record for that reason.\nIn the notification handler above, go through profile.syncManager to trigger a sync of clients.. Why is this commented out?. It's OK for the device ID to be in the scratchpad \u2014\u00a0it's just SyncStateMachine that should put it there, providing a single place to write it, persist it, and then recognize that it's changed (either from not existing to existing, or if it changes for some other reason).\n\nRe FxA notifications: don't drive parts of the Sync code itself with notifications. It's 'incorrect' in that it's coupling that doesn't make sense, but it also would introduce a second parallel control flow that could occur at any point during a sync, which is hard to get right. These two state machines exist to manage the very significant complexity that occurs during sign-in and the start of a sync; we should not try to circumvent that.\nInstead, in the SSM we can look at the account state we're given and decide \u2014 by looking at our last scratchpad \u2014 if something has changed. For example, if the device ID has changed from nothing to a valid device ID, then we can reset the clients synchronizer as we advance, ensuring that we'll upload our own record again.\nThis will behave correctly, too: e.g., if an error occurs that causes us not to sync clients, we'll remember to do it next time we sync.\nRe uploading the client record every time we sync: it's needless load on the server, and it's needless load on other clients, too. Every other client will have to download it each time. Not to mention that it causes risk of conflict for sending tabs and other commands, and a year from now some engineer is going to say \"oh, why are we doing this? that's silly, I'll fix it\", and will break whatever fix you introduce here.. Can we narrow this to be deviceID instead of deviceRegistration? We don't use any other aspect of the FxADeviceRegistration.. \u2026 and then here, account.deviceRegistration?.id. Urgh, gross.. \"deviceID\" to match the others.. Almost all clients will have the old method \u2014 a JSON-encoded bundle representing the entire registration. That's the v1 format.\nYou should be looking for that here.\nI'm in two minds whether to ask you to define a V2 format that stores the device ID, instead of hacking this in here.. the we've. Careful here. This is only valid if no failable code in withConnection itself runs after the block the caller provides, which is not something we can capture with the signature. \nIf someone ever adds code like this, it's possible to fill the deferred twice \u2014 once inside the block with success, and again here in the error handler.\nAdd this to the list of problems that Rust makes visible :/. Keep this comment as a block comment on withConnection, now that you've inlined the default. Very few people actually know this, and it's crucial to why we default to .readWriteCreate!. https://github.com/mozilla-mobile/firefox-ios/pull/3197/files?diff=unified#diff-deda0d7cd11ef1ffd067e82f0899bb76R1111 is how we can get an error here after having the inner block succeed.. There are two other fields: the version of the device registration, and the last registration timestamp. Neither of those should be relevant to Sync; they're just there to control when we re-register.. This basically means \"match this against any attachment\". The v1 behavior was \"pass if this matches every attachment\".. If we subsequently unregister, I think we clear the whole prefs branch, but would it be wise to remove \"deviceRegistration\" from prefs before returning?. the first. Stack yer dots.. I don't think we need to log.\nYou might also consider defining conn.tryChange that throws, simplifying this code.. Same.. I (and I think jhugman) have a preference for explicit self.. Is this necessary at the end of a -> Void function?. Again, a try helper would be nice.. Perhaps put this in a defer block after we get it.. I'd prefer to revert this \u2014 keep the blame on the comment.. Presumably cleaned up in a later commit\u2026. Is this necessary?. Space. I will think about whether there's a better way to do this.. Newline after block.. Can you make connection.vacuum() throw, too?. Space before 'If'. Make deleteStructureForGUIDs throw, too?. Same.. Then you can share this block between each of the try steps.. Same.. Put the successful return inside the do below the try. . Why isn't this inside a transaction?. Can you just do return db.transaction(f)? At which point, isn't doWipe just db.transaction? Inline it!. If you throw here, the transaction is rolled back, so you might as well throw immediately, and get rid of all that err stuff!\nBut in any case, TableTabs is ON DELETE CASCADE, so if foreign key support is on \u2014 which it should be \u2014 we shouldn't even need to delete the tabs here.\nSimplify!. Prefer defer, or just return connection.executeQuery(\u2026).asArray().. Same.. You're using value here because withConnection wraps in a Deferred. Just\u2026 put both queries inside the same withConnection, so we dump TableTabs and TableClients in one go, get a single Deferred, and then just call .map to turn the pair into [ClientsAndTabs].. We should probably revisit single-statement transactions. They don't need to be wrapped in BEGIN TRANSACTION, and adding a db.transact(sql: String, withArgs: Args) variant would make a bunch of these functions into one-liners.. See!. defer right after creating the cursor.. Same complaint about .value. Ideally it's never used in non-test code.. Remember that doWipe is now just db.transaction.. Remember that ON DELETE CASCADE? Keep this, though \u2014 it's less work for the foreign key checker.. All this error handling code can go, though.. Follow-up: why doesn't this throw, too?. See earlier comments.. I suspect you can invert the if let into a guard let now.. Finish this cleanup.. We shouldn't need this. Not only because if we know the local client is the one with a null GUID, we should just filter it out in the SQL, but also this should never be the case \u2014 guid is guid TEXT PRIMARY KEY!\nStep through this with the debugger. It should never do anything useful.. Consider whether the processing work is fast enough that it's worth holding the DB connection while we do it.. No longer necessary. Keep cleaning up!. Oh yikes.. Add a comment:\n// If we're taking the local record because it was modified, check to see\n// whether the remote record has a creation date that we want to keep.\nN.B., we also want to do exactly what we do on desktop: if there's no remote creation date, use the server modified time instead, if it's less than the local creation date. So I think this becomes:\nlet dateAddedRemote = remote.dateAdded ?? remote.serverModified\nif (local.dateAdded ?? UInt64.max) > dateAddedRemote {\n    return MergeState.new(\u2026)\n}. Makes you want Rust's .., right?. Do any callers specify synchronous: true? If not, just kill the argument.. Can we switch all of this to use sequential guard instead?. LGTM.. Yeah, I poked @farhanpatel about this \u2014 presumably an oversight or the result of a bad refactor.. I was waiting for you to say that :)\nI put it here 'cos it'll keep the size of Shared smaller. We can move it if we ever want to use this more generally\u2026 at which point we'll likely want to revisit its behavior. Right now it's cheap but aggressive.. Spaces around arrows.. Use string interpolation instead of concatenation.. This is really assuming 'changed', isn't it? What's the harm in simply doing prefs.setBool(enabled, forKey: prefName) here?. I think an ideal choice here is:\n\nIf you just flipped from false to true, sync the selected engine immediately. It might even be ready by the time we leave this UI!\nIf you flipped from true to false, sync the deselected engine when the user leaves the Settings screen. That way if they accidentally uncheck History, we don't immediately delete ten megs of data from the server.. I don't think it's enough to hide or unhide.\n\nIf you have an FxA, but we haven't synced it yet \u2014 we don't have a populated meta/global \u2014 then we can't let you flip these settings. Who syncs the syncers?!. I think passing Prefs in here is fundamentally wrong. I think you should consider modeling this flow (and persisting these choices) via the Scratchpad: that is, when entering the state machine, we might or might not have some pending engine enablements or disablements that need to be reflected.\nThere are a few places that applies:\n\nIf we encounter a blank server, we apply those pending changes to the previous persisted state, and upload.\nIf we encounter a server with a conflicting meta/global, we resolve the conflict.\nIf we encounter a server with an unchanged meta/global, we produce a new m/g and upload it, re-entering the flow in the expected place.. This doesn't feel right at all.. Nit: spaces around arrows.. Question: what happens if I tap-tap on Logins? Do we spend 30 seconds uploading ours to the server, then delete them when we leave the settings screen? Is there a better option?. It's worth commenting what these are, when they're nil or set, and what a missing engine means \u2014 true, false, or something else?. One wonders if it wouldn't be better to have the enablements be two sets, rather than a map.. This is why I suggested taking an optional engine enablement input as part of advancing \u2014 it's \"go to Ready, and if you want to know what the user picked, here it is\". \n\nYou can remove the need to access prefs altogether by doing two things:\n\nProviding a structured enablement input here (e.g., as part of SyncAuthData\nRemoving the value from prefs as a consequence of toReady succeeding, rather than doing it inside the state machine.. stringValue is a non-optional getter, returning \"\" if the value isn't a string. You want here instead to do .flatMap { $0.string }.. Comment why you're doing this!. I'd prefer this to be conditional \u2014 only set it if something has changed \u2014 and for us to log which engines have been enabled or disabled.. Make this a constant, put it next to, and relate it to SyncStateMachine.LocalEngines (which you might want to move somewhere else) so they don't drift.. \u2026 since the last sync. Spaces around arrows.. Also this relies on the account being the account pulled from profile. See if you can fix this to not be implicit.. Can we break this whole block of code out into a named method: func engineEnablementChangesForAccount(account: Account, profile: Profile) -> [String: Bool]?. if let enablements = authStates.enginesEnablements where !enablements.isEmpty {\n    b.enginesEnablements = enablements\n}. It's\u2026 beautiful.. What are these for? I don't see them used.. I think I would rather expose read-only properties on engineConfigurations than duplicate the information.. I believe Swift supports public getter and private setter. Might try that instead, otherwise you might as well just skip this accessor pair\u2026. isEmpty. Reading the code to SwiftyJSON, this might trigger a different code path \u2014 they have one initializer that takes ownership of the provided object, and one that allocates a new dictionary and copies the contents. Make sure you haven't changed the behavior here.. Do we not also need RSA_free(_rsa) here?. Indenting on these first lines.\n\nI was going to suggest writing a block comment instead, but I see commented-out migrations below, so fine.. Does it work if this is V7?. I might be inclined to wrap this matches again, twice: once on selectedTab:\nselectedTab?.usesWebView(webView)\nand then again on TabManager:\nguard tabManager.isSelectedWebView(webView). Which simplifies this to { $0.usesWebView(webView) }.. This string should be in Strings.swift.. \u2026 as should these strings. See the linter comment in the PR.. Have this method take a TokenState as input. Down below, where you extracted this method, use if let to decide whether to call this, only binding stateCache.value once.. getDeviceName is a pretty hacky hack.\nPrior to device registration, there was only one name in this system: the name managed by Sync and stored in the Sync client record.\nThere are now two names: the Sync client name and the FxA device name.\nThose are related, but perhaps not necessarily the same \u2014 this'll be \"Fennec (rnewman) on Richard's iPhone\" \u2014 and certainly it's weird that there's this bidirectional relationship: FxA passes the device ID into Sync, and here we pickle the Sync client name accessor to get the name out for FxA.\nDuring FxA login you end up constructing the default Sync client name anyway.\nIt seems like in this work you're asserting that the FxA device name and the Sync client record entry should be the same. In that case, the right thing to do is to move ownership of that value to FxA, right next to the device registration, complete with the same force-upload logic, and thread it into Sync in exactly the same way: in the sync auth state.\nThat should make this PR much clearer and more understandable, no?. Is it possible for us to drop a value of inProgress on the floor now that these are running asynchronously? After all, we're mutating inProgress from two threads.. I'm sure this is a benefit, and I think we should do it, but three suggestions:\n\nI find it hard to believe that linear search as done by this completionForDomain pattern is as responsive as it could be. Surely we can compute an index?\nDo we get better apparent responsiveness by doing this while the query is running? If we have an index of domains in memory, can we do a quick lookup on the main thread in didSet?\nCan we build a domain index from the user's history and do the same thing?. Might be simpler to just return [] here, and return try String(\u2026) above, if Swift will let you do that.. I'm not 100% convinced that this is safe.\n\nThe inProgress Deferred can be filled on an arbitrary queue. This main dispatch can occur at an arbitrary point in time. It's possible that didSet will fire three times in quick succession, and the three Deferreds can be filled interleaved in that sequence, as will this dispatch. Even if all three Deferreds are filled in the correct sequence, it's possible that this block will run when inProgress has already been replaced by a non-run, non-canceled Deferred, right?\nSo I think here you're trying to achieve one thing: when the last Deferred fills, unhook itself.\nYou can do that in one of two ways.\nguard let inProgress = self.inProgress where inProgress.isFilled || inProgress.cancelled else {\n    // Nothing to do: `inProgress` is still running, and therefore must not be us, so do nothing.\n    return\n}\nself.inProgress = nil\nor the less clear, but a little shorter (the optional coercion might need work):\n// If the in-progress Deferred isn't us, don't clear it.\nif self.inProgress == deferred {\n    self.inProgress = nil\n}. Don't you want to try matching one of the Alexa domains here?. if let session = stateCache.value as? TokenState {. If this fails, what happens? Are we out of sync with our device registration? Will we try again?. You probably want upon, unless you specifically want to wait for the NotificationCenter work to be done before consumers get to act on the Deferred (which I think you don't, 'cos you discard the return value).\nlet d = FxADeviceRegistrator.registerOrUpdateDevice(\u2026)\ndefer { return d }\nd.upon { result in\n    if result\u2026\n}. There's no need for a getter and setter here. Just public var clientName: String?.. You can just if let value = value here.. This is a design smell\u2026. If this doesn't work, is the view controller just going to be blank? What happens?. return !(value?.isEmpty ?? true). If this is optional, why are you returning the default client name?. Swap these: cheapest check first.. inProgress doesn't control DB operations; it only controls whether we cancel the one that was last there. Whenever we get a set, we'll kick off a new DB operation (on the DB queue). They'll run in order, and they'll run independently of the main queue.. It'll use the profile's signInURL, right? I wonder what happens if you're trying to sign in to a custom server\u2026. The thing I'm concerned about is not that \u2014 it's that the .upon that runs after each DB operation can overlap and interleave with the main-queue code, and potentially run out of order.\nMy concern about cancelation is that those .upon blocks nil out inProgress, which might be a non-canceled one (the last one).\nAnd if they run out of order, or their async main blocks run out of order, the UI updates won't correspond to user actions.. I mention this because I think you've changed the behavior.. Remember me mentioning that cancellation support was removed and not replaced? Yeah, that.. assertionFailure exists for this.. Nit: space between , and let.. How 'bout we do most of the work that's inside this block, apart from the final urlBar touch, off the main thread?. Hold on, I'm going to make you cry.\nhttp://blog.benjamin-encz.de/post/main-queue-vs-main-thread/. This definitely needs a big ol' docstring.. If you do:\nlet work = DispatchWorkItem { doWork() }\ndeferred.dispatchWorkItem = work\n\u2026\n    queue.sync(execute: work)\nyou won't need the force-unwrap.. You should probably go a little bit lower-level than this: this call will create one if there's no open connection, and we should never need to do that.\nIt would also be prudent to make sure we have a handle to interrupt.\nConsider\nself.sharedConnectionQueue.sync {\n    if let c = self.sharedConnection {\n        guard let db = c.sqliteDB {       // We do this with a nil check elsewhere, but guard let should work.\n            sqlite3_interrupt(db)\n        }\n    }\n}. Double check that this work happens on the same queue on which self.closed is touched. I see forceClose does it right, but is there anywhere else?. Existing behavior you've changed here:\n\nCallers A, B, C all call withConnection.\nAll of them weakly bind the same connection instance.\nA begins to run. It strongly holds the connection.\nThe app is backgrounded and the connection is queued to close. (I'm a bit wooly right now about how that happens.)\nThe weak references held by B and C are now nil.\nB gets to the front of the queue. In the existing code, B finds that its connection is nil and doesn't perform its write.\nThe app is foregrounded. closed is now false.\nC runs.\n\nI believe the expected behavior is that C doesn't do its work: the database was closed and reopened, so its assumptions might be invalidated (e.g., it implicitly depends on B).\nExisting: C's connection reference is still nil, so it does no work. New arrivals to the DB queue will cause the connection to be opened and be able to do their work, but C never will.\nWith your patch I believe that when C gets to the front of the queue, it'll find that closed is false but sharedConnection is nil, and it'll reopen the DB and perform its writes.\nIn order for this change to preserve behavior, you need to somehow empty the queue (or cancel all of its items) when the connection is closed.\nWhat do you think?. btw, if you make this change, delete getSharedConnection.. One approach to this is to switch SwiftData instances when reopening the DB.. I believe our current closing approach is to call Profile.shutdown, which calls BrowserDB.forceClose, which calls SwiftData.forceClose.\nThat currently calls sharedConnectionQueue.sync. Assuming that doesn't change, it means the DB will only be closed after any existing operations have run.\nIf you comment the hell out of that entry point, this change should be safe \u2014 it's impossible for B and C to run with a closed connection if they were queued with an open connection. But check that!. Is there any value in making the input here weak?. This comment no longer makes sense.. So long as the connection (c.sqliteDB) is not closed when sqlite3_interrupt is called, it's safe to call at any time. Indeed, it simply doesn't make sense for this to be on the queue \u2014 once this is running on the queue, no other query is!. I think it's a good idea to, at the very top of this function, call suspend on the DB queue. That will prevent new tasks from executing.\nThe thing I'm afraid of is that we will enter cancel on a multi-core device, and end up interrupting the wrong operation.\nThe suspend in conjunction with the running check means that a cancel will either affect this databaseOperation or nothing, rather than this one or the next one.\nNaturally we must call queue.resume() after the cancel occurs.. Why not ORDER BY siteID DESC, date DESC? Or do you need to do only date in order to get an index walk?. You're leaking a cursor from inside the withConnection block. That cursor is live, and you'll be accessing it and finalizing it while other users are concurrently accessing the DB. Furthermore, you're passing this out through a Deferred, so you're passing a live cursor to, most likely, a different thread.\nAll of the work you do with a live cursor must happen inside the withConnection block.. You should do this work much earlier in the block \u2014 if you have more than 20 visits for this site, you want to skip through the cursor to the next site ASAP, rather than building a Visit only to drop it on the floor.. Also I think this conditional is wrong, no? When visits is empty, visits[123]?.count ?? visitLimit will be visitLimit, and visitLimit < visitLimit is false, so we will never record any visits!. Oh, we're pre-seeding it. Yeah, that'll make this OK.. should be shorter than visitLimit.. Nit: you have two spaces after the ->.. You should check here whether the cursor is in CursorStatus.failure and signal failure. That means you'll need to slightly extend the signature of block here (perhaps to return Result<[\u2026]>).\nThe reason for this is to avoid a transient or permanent SQLite error from causing dozens of empty history records from being uploaded, as we fail to fetch their visits here.. I think executeQueryUnsafe's cursor implementation is flawed: its init touches every row in the cursor to get a count, because Cursor's makeIterator implementation uses the count and subscripting. This is all kinds of silly.\nI suggest a quick follow-up to define a better makeIterator (and probably other) method implementation for LiveSQLiteCursor so that it doesn't need to consume the whole cursor immediately.. Perhaps we should be using NSISO8601DateFormatter/ISO8601DateFormatter?. This will use the client locale timezone, not UTC. Is that intentional?. Consider phrasing as\nif let localModified = metadata.localModified, localModified > modified {. Same if let.. Same.. Just d >>> succeed should work, no?. You can do\nlet registration: Success\nif let session = \u2026 {\n    registration = self.register\u2026(\u2026)\n} else {\n    registration = succeed()\n}\n    . I have a gentle preference for breaking this out into a descriptive variable:\nlet ourRecordDidChange = self.why == .didLogin || self.why == .clientNameChanged\n\u2026\nand even putting a why.requiresUpload() method on the reason enum to encapsulate this.. What is this supposed to do?. Two suggestions:\nCREATE TEMP TABLE \u2026 IF NOT EXISTS AS SELECT \u2026 FROM \\(ViewAwesomebarBookmarks)?\n  . If it's not being used, then presumably flipping the default to false is an easy immediate step?. Nit: asynchronously. If you, or another developer in the next couple of years, gets anything wrong, CREATE TEMP TABLE will return an error if the table already exists.\nI haven't traced the logic, but I expect that will cause something user-facing to break. Using CREATE TEMP TABLE IF NOT EXISTS means that prior existence isn't a problem, and because the table definition will only change on upgrade, and temp tables don't persist across restarts, this is totally safe.\nAdditionally, consider using DELETE FROM \\(AwesomebarBookmarksTempTable) instead of actually dropping the table. DROP TABLE literally does exactly that then removes the table from the database schema, so you can save a step by not bothering.\n(And that's one step closer to maintaining this materialized view rather than rebuilding it each time.). (Garvan: I accidentally deleted this post, restoring it)\nHence my suggestion of using the type system to ensure that the appropriate preconditions must have been met in order to call that method.\nSpecifically in the implementation above, though:\nI'd prefer this to be phrased more explicitly:\n// In pre-release channels, verify that the bookmarks temp table exists.\nlet shouldAssertTableExists = usePregeneratedTempTable && AppConstants.BuildChannel != .release\nI don't believe that query will err if the table is missing, so I'm not sure this is doing the validation you expect.. From the docs\n\nIf foreign key constraints are enabled, a DROP TABLE command performs an implicit DELETE FROM command before removing the table from the database schema.. > The requirement of this part of the code was that the table must be dropped and then created with fresh data\u2026\n\nIMO the underlying requirement is: by the time we run the first query, the table exists and contains up-to-date data.\nThere are several ways of doing that, ranging in efficiency from best to worst:\n\nKeep the table accurate as we go. No work is done now.\nIncrementally update the data somehow, here and now.\nDelete all of the rows from the table and insert new ones.\nDrop the table, recreate it, and repopulate it.\nClose and reopen the database\u2026\nDelete and recreate the database\u2026\n\nThe reason I suggest not dropping the table and using IF NOT EXISTS is twofold:\n\nIt's more efficient.\nIf other code changes to rely on the existence of your materialized view, and the lifecycle gets more complex than you anticipated, then drop + recreate might allow the introduction of user-facing bugs.\n\nThat is: your code is correct, but future code might not be.\nGiven that it's possible to be just as, or more, efficient, and also cut off the possibility of some sets of bugs, I suggest doing that.. > When the WHERE is omitted from a DELETE statement and the table being deleted has no triggers, SQLite uses an optimization to erase the entire table content without having to visit each row of the table individually. This \"truncate\" optimization makes the delete run much faster.. I think you've taken a little bit of a runtime-ey interpretation of my suggestion, and applied it at the lower levels of abstraction.\nHere's what I think you've done:\n\nSplit some of SQLiteHistory's logic. To do so you've added a leaky abstraction to the History protocol (getOptimizedFrecency, OptimizedFrecency, and its getQuery method) that exposes the SQL queries that are used. \nOne of the methods on the 'unoptimized' side of the split creates an OptimizedFrecency as a side-effect.\n\n\nLeft SearchLoader's lifetime untouched.\nAdded an optional field on SearchLoader, setting that optional field from a UI method.\nRecorded a runtime error if the UI method wasn't called, and do the side effects anyway.\n\nWhat this doesn't do:\n\nSeparate actions that require optimizedFrecency from those that don't \u2014 SQLiteHistory quietly goes off to its OptimizedFrecency to do stuff.\nTie the lifecycle of the in-memory object (OptimizedFrecency and SearchLoader) to the database table.\nMake it impossible to call the methods that require optimizedFrecency if the necessary side effects have not occurred: instead the code has to make a choice between crashing or falling back on other behavior.\nMake it obvious to the programmer what they need to do in order to reach the state where they can perform certain actions.\n\nThe only way the developer knows that they're doing something wrong is if they test this part of the code in a mode where assertionFailure will crash the app. Granted, I hope we do that all the time, but it's better to allow the compiler to help us.\nA more common example of this kind of thinking: you've modeled \"open and read a file\" as a File class with an is_open boolean field and read and close methods, where read will crash if the file isn't open. You've realized that crashing is bad, so you transparently automatically open the file if someone calls read on a closed file.\nThe more modern way to do this is to have an OpenFile class with read and close methods, and to obtain an OpenFile by successfully calling FilePath.open. In that scheme it's impossible to express reading from a file that hasn't yet been opened, and you can tie cleanup to deinit, amongst other things. (Rust goes one step further and makes it so that a closed file is no longer valid, too.)\nWhat I had in mind was something more like:\n\nShorten the lifecycle for SearchLoader to be that of an awesomebar typing session.\nHave the initializer for SearchLoader grab and retain an entity derived from an open SQLiteHistory. That derivation involves ensuring that the table exists and is up to date.\n\nNow you literally can't have a getSitesByFrecencyWithHistoryLimit call occur without the temp table existing; there's no need for fallback code, or a Sentry message, etc. We'd create the SearchLoader when needed.\nI have doubts about this approach, because it seems like the top sites computation depends on this precomputed frecency table. That makes this much more like an ongoing materialized view, just like the Top Sites table, and so a different approach might be warranted.\nDoes that make sense, or have I missed something and gone off on a tangent? How do you feel about this?. Whitespace before groupClause.. Did you run these tests? I think you removed that argument.. This should probably be called something like FrecentHistory.. If I were to implement BrowserHistory on a non-SQL backend, that groupClause and whereData become meaningless. That means this is a dodgy abstraction \u2014 the caller of this public method needs to know the internal SQL table structures of the implementation, and write some SQL fragments to match.\nTry it: go implement MockHistory rather than fatalErroring!. This will leave the table empty.. This table won't exist unless getOptimizedFrecency has been called first. So updateTopSitesCacheQuery will fail unless the user has started an awesomebar search.. It's conceivable that the test bitrotted in a way that didn't cause it to fail; this code has evolved constantly for years. If the behavior makes no sense when both parameters are passed, perhaps gSBFWHL should have a nice informative assert at the top of the method?. I'll only comment on this once, though I've seen this kind of change throughout your PRs (and this one is otherwise an unchanged line).\nI still quite strongly prefer self.load to load. Swift supports free functions, function-typed attributes, closures assigned to variables, and closures as arguments, as well as methods. load could therefore be one of five things, and is subject to lexical shadowing. self.load is unambiguous and unshadowable.\nTo me it's both more readable and less subject to error, and I see no reason to prefer saving five characters over those advantages. I believe @jhugman shares this perspective.. Add two newlines and a * here to make this a three-line doc comment.. Naming convention: TempTableAwesomebarBookmarks, or at least TableAwesomebarBookmarks.. Undo this block of spurious whitespace changes.. Use // for plain ol' comments, and properly formatted:\n/**\n * Foo\n * Bar\n */\ncomments for 'docstrings'.. I think you mean db.transaction.. I believe strictly speaking you want COLLATE NOCASE at the end of this query. Table names are case-insensitive.\nYou might squeeze a tiny, tiny bit more perf by putting the name check first.\nAdding a LIMIT 1 is also a good idea.. I believe this is more efficient than running the query first, given that on each cold start you will be creating the table, and each transaction will be a write, so there's no penalty to starting with a CREATE statement.\nlet create = \"CREATE TEMP TABLE IF NOT EXISTS \u2026\"\nlet empty = \"DELETE FROM \\(TempTableAwesomebarBookmarks)\"\nlet insert = \"\u2026\"\ndb.transaction { connection in\n    try connection.executeChange(create)\n    try connection.executeChange(empty)\n    try connection.executeChange(insert)\n}. I expect that swiftc has fixed the unpleasant concatenation compile time bug that prompted us to do this. Oh, for multi-line strings.. Urgh, put these in the same order in each branch!\nBut even better: implement a private method on FrecencyParams that returns (bookmarksLimit, groupClause, whereData, urlFilter), and just do\nlet (bookmarksLimit, groupClause, whereData, urlFilter) = params.fooBar();. This should be db.transaction.. Undo this.. Undo this.. Perhaps SQLiteFrecentHistory is a better name.. This should not be public; it's allowing a computed query to escape the situation in which it's valid. (Yes, that means that SQLiteHistoryRecommendations might need a small amount of thought.). I don't mind either style of indentation here, but I'd prefer this patch to not change whitespace unnecessarily.. Inconsistent on this line.. Undo this change.. Undo.. Undo.. Ay.. File a follow-up to replace this \"give me your implementation details\" method with \"do this thing\".. I'm not blaming you \u2014 it's not changed in your PR! \u2014 just making an observation!. I haven't run EXPLAIN, but we probably shouldn't be doing this inside the GROUP BY. If you do it inside you'll join icons against every visit; if you do it outside the query with max(date) then you'll reduce the number of rows you'll join. This is exactly what we do when joining against domains. Indeed, do it after we've INNER JOINed on domains!\nAnd yes, flattening our icon stuff, as discussed on Slack, is probably a good idea.. This entire query is fixed. Let's make sure it's a single query string at the top level, and see what the difference is if you prepare the statement once and reuse it for every call. I bet parsing and planning here is taking a few milliseconds.\n(You might want to put a query cache on SwiftData.). Do we also need https here?. I wish we didn't have to open this for users who don't use RL :/. We made the choice to use a single logger for both because almost everything interesting about Sync problems actually happens in storage code, and the two intertwine. Did you make this choice for a reason?. Yes please!. Just do this work once on line 25!. It might be clearer if it were called syncAndStorageLog, indeed :). Oh wow. Isn't software terrible? Can we fsync instead or something?. I am slightly tempted to suggest dropping this idiom for table names inside queries (keeping them for parameters, until switching to enums!). We should never rename them, and if we do we will need to change queries, too. Thoughts?. Is there a reason you chose to do it this way rather than\nsql\n, server_modified INTEGER NOT NULL     -- Milliseconds.. I forgive you for ruining this perfect stacking.. Leave this big comment as a Swift comment \u2014 no point making SQLite parse it every time.. Thanks for catching this!. Don't change the case. We uppercase keywords like SELECT and operators like CASE and NOT, but not function names and aggregate operations. This follows SQLite's style.. Same for these max and sum calls. (And throughout, I guess.). Ooh, is that a footgun in multi-line literals\u00a0\u2014 automatically trimmed?. And this ain't your fault, but max in this function, too! \ud83d\ude04 . Careful. This was here to avoid dumping very large queries in the log and sending them to Sentry \u2014 consider that we sometimes have VALUES (?, 1, 1), (?, 1, 1) clauses 999 items long, resulting in 15KB SQL strings.. Same.. I'm glad I asked! I hadn't thought of that. Good enough for me.. Thumbs up from me.. You should check whether SELECT COUNT(rowid) has a better query plan than SELECT COUNT(*). There's conflicting information in the docs.. Consider altering the query to be SELECT COUNT(rowid) > \\(SQLiteHistory.MaxHistoryRowCount), then use a bool-ish comparison. In theory that can stop counting once it hits the larger number!. Pass these as arguments to checkIfCleanupIsNeeded and cleanupOldHistory.. This is so implicit that it hurts. Just invoke the method with a different threshold, and get rid of the test twiddle in the main code!. Please benchmark this on 250,000 history items with 1-50 visits each. I'm a little worried that executing this query will join into ~450,000 rows, then build a btree for grouping, and run out of memory. Elsewhere we apply reasonable date thresholds to minimize the product of visits and history.. FWIW, history visits aren't uniformly distributed. It doesn't matter too much, though: 200,001 history items with zero visits each won't be too much smaller, because it's the strings that do it.. No need for CASE:\n```sql\nsqlite> select 5 > 4 as foo;\nfoo\n\n1\nsqlite> select 5 < 4 as foo;\nfoo\n\n0\n``. Iflocal_modified` is either null or not null, you can do:\nORDER BY ifnull(local_modified, server_modified)\nIf you want to take the largest (and I think you do!), use max and ifnull together:\n```sql\nsqlite> select * from foo;\na           x           y\n\none         5\ntwo                     6\nthree       2           10\nsqlite> select a, ifnull(x, y), max(x, y) as naive, max(ifnull(x, 0), ifnull(y, 0)) as realmax from foo order by realmax;\na           ifnull(x, y)  naive       realmax\n\none         5                         5\ntwo         6                         6\nthree       2             10          10\n```\nso here:\nsql\nORDER BY max(ifnull(local_modified, 0), ifnull(server_modified, 0)) ASC. I would probably make this a method on Cursor, so here you could just do\nswift\nlet reversed = cursor.reverse()\n\u2014\u00a0it's a bit gritty here to have this higher-level code calling constructors for particular cursor types.. And if you do that, you can get rid of the if:\nswift\nlet folderCursor = reverseOrder ? cursor.reverse() : cursor\nreturn deferMaybe(SQLiteBookmarkFolder(guid: guid, title: title, children: folderCursor)). ",
    "modocache": "I encountered the same issue, but I was using Xcode 6.2 beta. Also, I think this is a duplicate of #30.\n. ",
    "RyanMaciel": "I was on 6.1.1. Also I believe the optional chaining changes were around the same time as in #30, but yes, it is a duplicate.\n. ",
    "ncalexan": "@wesj @thebnich y'all might have opinions too.\n. I'll get back to this eventually.\n. Sorry, I was imprecise.  This looks fine; I have not (yet) tested locally.  I do worry about the hard-coded port -- it will always bite eventually, especially in automation.  Extract a test subclass, randomize the port range, and expose it as a member variable.  Later, we can check for binding failures.\n. @st3fan updated with a pre commit to clean up testing pain.\n. I've pushed the review follow-up -- which was significant -- as a separate patch, but I'm going to fold and land as a single patch.\n. Landed.  Leaving this review commit for posterity.\n. @st3fan has already given r+ to parts 1 through 6.  Those are straight clean-up.  @st3fan or @thebnich, could one of y'all look at Part 7, which imports a modified version of https://github.com/jrendel/SwiftKeychainWrapper.  You can see that I essentially use it as a key-value store for a single key, so I'm not wedded to it and we could easily replace it or roll our own.  Finally, perhaps @rnewman could look at Part 8 and say \"yes, persistence in Swift is awful\".\nI apologize for all the TODO items, but I spent most of 3 days fighting Swift to do a 3 hour task and it's better to iterate than get everything perfect.\n. I think the travis build failure is because I deleted stuff that was maybe a git submodule?  @st3fan might know better?\n. Finally, I tested this in the simulator (and it persists the account across simulator restarts), but I didn't test on a device.  I think we may have issues on device because the extensions (Share and SendTo) require Profiles -> Account -> KeyPair -> the FxA framework, which produces a warning.  Again, I don't know what the way forward is here.\n. Whatever this is, it's no longer appropriate.\n. I have some questions, but this looks reasonable to me.  I haven't tested it locally, but I say land it and let UX play!\n. I skimmed this and it looks reasonable.\nI'm was concerned that this was not extensible, but it appears to not impact our ability to have home panels that do not derive from HomePanelTableViewController.  I was concerned because the settings panel has subsections, which are most naturally handled by a UINavigationController; and I also expect a UITableViewController to not be appropriate for the mooted top sites grid view.\n. This looks basically fine, but I expected basic bookmark favIcon tests.\n. I landed this, but I notified #firefoxios instead of #mobile.\n. In the front-end meeting, I agreed to pick this up.  I addressed the review nits and moved to a HistorySection abstraction, but I ran into significant problems with the actual functionality: tests are failing.  I'll dig in more next week.\n. @sleroux thanks for this -- I saw this locally.  Do you know anything about UI testing?  I wonder if we can ensure this doesn't regress.\n. This has landed.\n. This has landed.\n. This landed.\n. Sync/StorageClient.swift shouldn't be involved in these commits.\nOn Wed, Mar 11, 2015 at 2:13 PM, Richard Newman notifications@github.com\nwrote:\n\nThere are two commits in this that I'm not sure are good; my Xcode is now\nin a working state, but raised eyebrows.\nI filed two issues to get tags in the upstream repos. Using \"master\" isn't\ntoo worrying, because Carthage won't advance without being told.\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/mozilla/firefox-ios/pull/212\nCommit Summary\n- Add Deferred and Result via Carthage.\n- Xcode decided to remove application-identifier from\n  Fennec.entitlements.\n- Xcode decided that CODE_SIGN_IDENTITY and DevelopmentTeam needed to\n  change.\nFile Changes\n- M Cartfile\n  https://github.com/mozilla/firefox-ios/pull/212/files#diff-0 (2)\n- M Cartfile.resolved\n  https://github.com/mozilla/firefox-ios/pull/212/files#diff-1 (2)\n- M Client.xcodeproj/project.pbxproj\n  https://github.com/mozilla/firefox-ios/pull/212/files#diff-2 (185)\n- M Client/Fennec.entitlements\n  https://github.com/mozilla/firefox-ios/pull/212/files#diff-3 (2)\n- A Sync/StorageClient.swift\n  https://github.com/mozilla/firefox-ios/pull/212/files#diff-4 (9)\nPatch Links:\n- https://github.com/mozilla/firefox-ios/pull/212.patch\n- https://github.com/mozilla/firefox-ios/pull/212.diff\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/212.\n. This has been handled in a different way: we rolled Deferred and Result to a new Shared target.\n. Landed.\n. Landed.\n. Closed via #221.\n. This has passed it's useful life; we folded Box and Result into a new Shared target.\n. I am going to say that this address Bug 1135768: https://bugzilla.mozilla.org/show_bug.cgi?id=1135768.\n. I made fairly extensive changes to this and landed it.  More in the ticket and follow-ups.\n. Happy for pre commits to land.  We're always going to tread on each others toes working in such tight spaces.\n. wfm.  It would be nice to move Bytes into Shared now, although I guess Sync will depend on Storage for ever...\n. This landed.\n. I landed this.\n. This is for https://bugzilla.mozilla.org/show_bug.cgi?id=1144917.\n. @sachin004: thanks for the PRs!  We love new contributors.  I'd love to get this landed, hopefully with a calculated value rather than the constant 10.  If you're looking for a good next bug, perhaps you could figure out how to make the Swipe to Delete button look better?  It's tracked at https://bugzilla.mozilla.org/show_bug.cgi?id=1144919.\n. @sachin004 can you try with a unicode plus, and a unicode heavy plus, and whatever else you can find that looks good, and post screenshots?  I'd take a unicode plus just to get this out of the way.  Thanks!\n. @darrinhenein thanks.  @sachin004, can you prepare the patch to make these both use images and we'll wait for the assets to land?  Thanks!\n. Rock and roll for the Pre: patches.\n. On Sun, Mar 29, 2015 at 8:45 PM, brandy2015 notifications@github.com\nwrote:\nI have meet the same error even after I put the framework into the project\nThis landed on master, so you shouldn't see it any more.  I don't\nunderstand what you mean by \"put the framework into the project\" -- you\nshouldn't need to change the project at all.\n. Landed a slightly different version.  Thanks, @sachin004!\n. @rnewman: this makes the Firefox Account itself own writing the internal state into the keychain.  I took your \"random label\" approach; I liked it.  This works well for me locally.  It's not easy to move an Account's state yet, so you'll just have to test the success case -- and see if you hit clock skew or something else.\n\nI wonder if we could tie the tab storage more explicitly to the account.  If you disconnect, you'll see the old tabs hanging around.  Perhaps we can do better?\n. Landed.\n. Landed.\n. Landed.\n. On Sun, Apr 19, 2015 at 6:03 AM, Stuart Levine notifications@github.com\nwrote:\n\nCan anyone tell me how to build this so I can put it on my phone? I'm a\nregistered developer with a valid signing certificate. However, a number of\ncomponents of the source here are signed by a variety of other entities. I\ncould not find anything that could help me online. And when I attempt to\nallow Xcode to fix the issue, it either reports and error or just crashes.\nI think @st3fan and @kearwood may be able to help with this.  I'm not aware\nof docs for this process yet.\n. Sorry for the delay. SHIP IT!\n. Also, we need to update the commit message for landing, say something like:\n\nBug 1154088 - Show remote client last synced time with relative time string.\n. Rebased and landed!  Thanks, @sachin004!  I've NIed you on a good next ticket, but I can mentor other things if you'd like.\n. Landed.  We'll land the debug settings stuff as a separate ticket.\n. Landed.\n. Landed.\n. Good catch!  @wesj, @flod: can you address this?\nOn Sat, May 2, 2015 at 9:50 AM, havarh notifications@github.com wrote:\n\nWhen translating Firefox for iOS i found an english string that I think\nare missing a couple of words.\nIn the file: Client/Frontend/Settings/SettingsTableViewController.swift\nline 384\nThe line reads:\nvar message: String { return NSLocalizedString(\"Are you sure you want all of your data? This will also close all open tabs.\", tableName: \"ClearPrivateData\", comment: \"Message shown in the dialog when clearing everything\")\nShouldn't it read \"Are you sure you want to clear all of your data?\n[\u2026]\"?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/issues/417.\n. This is one heroic patch series.\n\nI cannot guarantee we have not regressed things -- possibly in serious ways -- because of the scope of the patch; the fact that it's very hard to compare before and after when the first patch is to remove everything; and because I am not intimately familiar with the original code.\nHowever, the final result reads better than what I was familiar with -- even the hairy multi-level branching database insertions.\nSHIP IT!\n. I looked at all commits.  Everything save the stub commit looks good!\n. To be clear, I looked at f64efb9..091d547.\n. Comments on the commits.  This was surprisingly easy to read -- thanks for the story order.\n. @bkmunar: this looks busted.  I'll review the structure anyway.\n. lgtm.\n. Correct.  We're building this right now: https://bugzilla.mozilla.org/show_bug.cgi?id=1196238.  This issue is well tracked in our main bug tracker so I'm going to close it.  It'll land in the next few months.\n. Further, I haven't connected the local collection reset requests to the client stores.  Figure you can do that.  I am assuming that we can always act on those resets immediately, so they don't need to be persisted.  I wonder now if it's possible to drop those if we see an error later in the state machine?  I'll have to think about that.  Perhaps we need to persist them in the scratchpad.\n. This still needs the LocalCommand output wired into the system at large.\n. On Fri, Oct 9, 2015 at 5:42 AM, Emily Toop notifications@github.com wrote:\n\nI'm also getting a test failure: SyncTests -> DownloadTests ->\ntestDownloadBatches -> line 96\n`XCTAssertEqual failed: (\"Optional(SyncTests.DownloadEndState.Complete)\")\nis not\nThis should have been addressed when I merged by Sync state machine\npatches.  Ensure you're setting the now: parameter in storeRecords() in\nthose tests.\n. @rnewman This is coming along nicely.  I'm PTO Monday (Canadian Thanksgiving) but if I see your r? I should get to it.\n. Not a bad idea.  @vlad @stomlinson @jgruen: can one of you comment on\nfeasibility of tuning the fxa-content-server for known iDevice sizes and\nfile an fxa-content-server ticket if it's appropriate?\n\nOn Wed, Oct 14, 2015 at 8:18 PM, Arief Bayu Purwanto \nnotifications@github.com wrote:\n\noh, Firefox version 1.1 (1107)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/issues/1161#issuecomment-148270682\n.\n. Sorry, I get lots of GitHub spam so don't always see my @ mentions.  Ship it.\n. @sleroux, @darrinhenein -- first, this is awesome.  I'm assuming this is\nintended to let us prototype quickly, and I support that.\n\nIf we do build more functionality around this, I'd like to plant two\nseeds.  The first is that the FxA + Sync settings should live in such a\nlive panel.  (On Desktop, they do.  On Android, they don't for technical\nreasons only.)\nThe second is that Desktop has built an abstraction for message passing\nbetween \"known, certified endpoints\" (like accounts.firefox.com) and\nbrowser chrome.  It's called WebChannels:\nhttps://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/WebChannel.jsm.\nIt would be nice if we were \"wire protocol identical\" so that things built\nfor Desktop have a hope of working on iOS.\nYay!\nOn Tue, Dec 22, 2015 at 1:00 PM, Stephan Leroux notifications@github.com\nwrote:\n\n@darrinhenein https://github.com/darrinhenein Here's the first pass at\ngetting the web panel stuff working. Right now only history items are\nexposed. Load up http://people.mozilla.org/~sleroux/panel.html to see a\nsuper simple example of this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1383#issuecomment-166728335.\n. On Wed, Dec 23, 2015 at 1:07 PM, Stephan Leroux notifications@github.com\nwrote:\nThanks for the feedback @ncalexan https://github.com/ncalexan!\nFor the first point regarding the FxA and Sync settings, we can definitely\nconsolidate the existing FxAContentViewController and a web-based panel\ninto the same ViewController. This will also enable us to have a foundation\nfor other web-based screens we might want to add in the future.\nExcellent.  Just wanted to seed this -- Accounts is a little special right\nnow but shouldn't be that way forever.\nCombining the second point, this web-based controller would also be able\nto implement the WebChannel.jsm wire protocol which would allow us to\nabstract the API needed for any page we want to render. For example, I\nnotice that in the FxAContentViewController there is some JS <-> Swift code\nfor handling account callbacks. Could this be implemented using WebChannels?\nYes, we'd like to implement the JS <-> Swift part using WebChannels\neventually.  (fx_ios_v2 protocol will be over WebChannels.)  And in fact\nboth Android and Desktop now use WebChannels.\n. I feel like this is addressing the problem at the wrong level.  What should happen is that each sync engine should surface it's state explicitly.  Then it's up to the thing that reduces all of those states into one global state to display properly.  That is, the sync engines should surface the state .DisabledRemotely (which may be new), and then the reduction should handle that like .Good.\n\nI haven't reread this code entirely, but it looks like there are two places the Sync state is displayed in the settings, and both need to handle .DisabledRemotely for engines appropriately.\n@sleroux is that cogent?\n. @farhanpatel how do I request review these days?  Do I do that in Bugzilla?. @farhanpatel back to you.. I extracted an accessor method and added a comment as to why I'm nil checking.\n. I don't need it so I dropped it entirely.\n. Agreed, and dropped.\n. Yeah, but if we can't load JS here, we can't recover. A hard crash with a stack trace is a good outcome.\n. Oh yeah, this wasn't pushed to dev.lcip when I was testing.  And dev.lcip is 503-ing right now.  I may land with or without this temporary hack; not clear yet.\n. Sure.\n. I've removed this.\n. I made this required.\n. I've implemented this, although with the if let and subsequent switch it's not really a win.\n. I disagree.  We do this in Fennec in many places.  A crash in an early channel (Nightly, Beta) leads to much better user outcomes much faster than trying to deal with a busted build.\n. On Thu, Feb 26, 2015 at 9:36 AM, Brian Nicholson notifications@github.com\nwrote:\n\nIn Client/Frontend/SettingsTableViewController.swift\nhttps://github.com/mozilla/firefox-ios/pull/183#discussion_r25446652:\n\n@@ -0,0 +1,17 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n+* License, v. 2.0. If a copy of the MPL was not distributed with this\n+* file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nNit: Indentation (if you're interested, I made a template\nhttps://www.dropbox.com/s/9l38op33lzhx408/Templates.zip?dl=0 that you\ncan extract to ~/Library/Developer/Xcode which includes the Moz header in\nall new Swift files).\nTa, I caught this after pushing as well.  I copy-paste to start all my new\nfiles and Xcode really screws me.\n. On Thu, Feb 26, 2015 at 3:55 PM, wes johnston notifications@github.com\nwrote:\nIn Client/Frontend/SearchSettingsTableViewController.swift\nhttps://github.com/mozilla/firefox-ios/pull/187#discussion_r25477860:\n\n@@ -0,0 +1,175 @@\n+/* This Source Code Form is subject to the terms of the Mozilla Public\n- * License, v. 2.0. If a copy of the MPL was not distributed with this\n- * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n  +\n  +import UIKit\n  +\n  +class SearchSettingsTableViewController: UITableViewController {\n\nCan we move this Settings stuff into a Settings folder (maybe it is in\nXCode's view?)\n\nIt is, but I'm happy to make it a folder on disk as well.\n. Unfortunately, @wesj's code uses as? DateRange, which is not valid with a struct.  I don't intend to address this (really, your substantive comment about FilterType) as part of this pull request.\n. This is valid and I support it, but I don't want to do this as part of this pull request.\n. I like extracting KeyLength = 32, but nbd.\n. nit: space before CGFloat.  How are you calculating 10?  Is this from trial and error?  If so, can we try to figure out a way to deduce this from the toolbar and image height?\n. Can we add a UITest that verifies this is at least reasonable?  We have a range of testers with devices that can ensure this doesn't regress.  In addition, we'll want to test long-press event details eventually.\n. Yes: https://bugzilla.mozilla.org/show_bug.cgi?id=1154088\nOn Mon, Apr 20, 2015 at 7:55 AM, Stefan Arentz notifications@github.com\nwrote:\n\nIn Client/Frontend/Home/RemoteTabsPanel.swift\nhttps://github.com/mozilla/firefox-ios/pull/349#discussion_r28695578:\n\nlet label = NSLocalizedString(\"Last synced: %@\", comment: \"Remote tabs last synced time\")\n-            view.detailTextLabel.text = String(format: label, String(client.modified))\n-            view.detailTextLabel.text = String(format: label, String(timestamp))\n\nThis just prints the time as a numeric value right? Shouldn't we use a\nNSDateFormatter here to turn that timestamp into something human\nreadable? (It can also format to strings like '5 minutes ago')\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/349/files#r28695578.\n. I landed shebangs, so you can now just run ./checkout.sh.\n. nit: frame.size COLON\n. In general, we don't sign comments -- you can find out author and reviewer from the commit log.\n. It does: result.failureValue is an FxAClientError, which is verbose in the case of .Local.  (See the existing logging that appears in your bug report.)\n. Mmm.  I'm not a fan of such implicit threading assumptions, although I guess it tends to be clear why a thing broke.\n. Wish we could do more than log here, but this probably means the server is buggy rather than that the Sync data is corrupt.\n. Log, please.\n. Please add a note about securityOrigin, and why you're testing as you are.  Worth including the details of our conversation on IRC about caveats, etc.\n. I'd like you to say that this doesn't apply to WebChannels and link to https://developer.mozilla.org/en-US/docs/Mozilla/JavaScript_code_modules/WebChannel.jsm.  (We should implement a WebChannel abstraction for Firefox for iOS some day, if another consumer arises.)\n. DidUpdateDeviceRegistration.\n. I find this line hard to read.  I feel the comment is misplaced, as well -- it doesn't describe the branch it is in.\n. We have TokenAndKeys.  Perhaps TokenState?  I don't care too much, but the FxA prefix is verbose.\n. This coupling is not great.  I can think of two alternatives:\n- broadcast that the Account state has changed to the App at large; there's some mechanism for this in iOS (notifications?).  I feel like we don't use this (resource leaks?), but I'd like to understand why we don't.\n- have the things that advance the account (UI bits, unfortunately) do the flushing, much like you did before (but without driving the advancement -- just by checking timestamps, updated flags, etc).\n. Also, prefer to scope the name down -- FirefoxAccountDeviceRegistrationDelegate or whatever.  There may be more than one type of notification, right?\n. > I don't think this UI should show on the iPad though.\n\nI concur; will update when I get a minute.. nit: this comment needs to be updated.. Consider including the list of legal states.. Is there an OrderedSet?  It would be nice to include good error output where I noted below, which would be ordered.. Or even stateLabelSpace, since you're constraining the search space while looking for Ready.. This indentation looks funky.. nit: fix comment (\"we KNOW it\")... and full sentence.  Better:\n// Identical to V1 except `(kA, kB)` have been replaced with `(kSync, kXCS)` throughout.). There's a lot of duplication here, but I guess that comes with the territory.  You could make this more clear by modifying the incoming json in place.... ",
    "Chuongv": "Closing this one due to merge conflicts. Will resolve this one in the next pull request.\n. @thebnich I think I messed up trying to squash my commits since now it says I want to merge 33 commits :fearful: \n. Closing this one since I created a new PR here\n. @apbendi \nThe functionality works great and it looks like you added a KVO for estimatedProgress. However is there a reason why you created a new class just for the KVO instead of placing it within the BrowserViewController? I guess it was because webView was private?\nI think you could take a different approach now since with the latest commit, the webView is actually public. I would recommend rebasing with master and continue from there. I'm curious to hear thoughts from the rest of the team too.\n. @thebnich \nI took your suggestion and made the change to update the progress bar to zero when switching tabs. Also I rebased it correctly this time :laughing:\nThanks\n. @mfinkle \nI just made a slight update checking the ofObject to ensure that the selected tab has the right web view prior to updating the progress bar. Let me know if that is what you are looking for.\nThanks for suggestion!\n. ",
    "TBonnin": "@st3fan I just read the thread about abstracting away WKWebView. https://mail.mozilla.org/pipermail/mobile-firefox-dev/2014-December/001014.html\nFeel free to reject this PR if you prefer to use the KVO approach.\n. No problem. I'll let @thebnich deal with it.\n. I rebased the PR to be tab-aware. Let me know what you think.\n. @thebnich Thanks for your comments.\nI made the changes and squashed to commits.\n. ",
    "palewar": "Buttons should also look pressed when touched. Should we also tackle that small bit with this, although not part of original description?\n. Done.\n. ",
    "apbendi": "\nThe functionality works great and it looks like you added a KVO for estimatedProgress. However is there a reason why you created a new class just for the KVO instead of placing it within the BrowserViewController? I guess it was because webView was private?\n\nBasically, yes. Since the webView was private, I thought I needed to put the KVO of the webView in the Browser. To implement KVO you need to inherit from NSObject, but I didn't think it'd be good to drag NSObject baggage onto the Browser abstraction. Hence the private class.\nUsing callbacks seemed like a clean way to keep KVO boilerplate out of the BrowserViewController. If the decision has been made to go in that direction, then yes, there would be a different approach.\n. Just throwing this up here for the sake of conversation. The updates I've made retain all functionality of the toolbar but:\n1. Keeps KVO out of the BrowserViewController\n2. Avoids implementing WKNavigationDelegate in the BrowserViewController\nGiven this approach, it would actually be possible to keep the webView private to the Browser abstraction (though I did not go all the way back to that here).\nSince the webView is public, I'm struggling to see what the purpose of the Browser class is.\nAnother adavantage to this approach is the BrowserViewController is limited to simply defining how to translate the state of a Browser tab into changes to the BrowserToolbar, and only in one place (the updateToolbarStateForTab(tab: Browser) method). It doesn't have to make fine grained changes to the BrowserToolbar based on specific actions from the webView.\nWould love feedback on this approach and why exposing the webView is a better route, which I'm totally willing to believe it is. Like I said, just throwing this out there. Thanks!\n. Cool, thanks for pointing me in the direction of the thread. Makes sense! Appreciate you taking the time to review. And don't worry, I was on vacation too! Happy New Year =)\n. All cleaned up let me know what you think.\n. I remember thinking the same thing, then trying it via webViewDidStartLoading and having some issue, then deciding it was OK since UIKit optimizes this anyway and it's not expensive unless the state actually changes (I believe).\nI'll dive back in and see if I remember/encounter whatever the issue was and update accordingly. Thanks.\n. Think I have it resolved. To clarify, in the previous comments we both referenced the webViewDidStartLoading method which is part of the UIWebViewDelegate protocol but we obviously both meant to reference the WKNavigationDelegate protocol method ;)\nThe method in that protocol I remembered trying was webView:didStartProvisionalNavigation and the problem was that the webView's canGoBack property does not seem to be updated at the time this delegate method is called (not sure if this is by design or not, but it is the observed behavior). However, it does seem up to date by the time webView:didCommitNavigation is called, so I will update the button statuses there and update the pull request.\n. ",
    "mfinkle": "This pattern does have some code-cleanliness advantages. I like it. \n. How are we injecting the reader JS script? After page load?\n. Just curious. Why a 5 second delay?\n. Delaying the ping could also put the network I/O in the pageload space. Might be better to just use a background thread, but send ASAP.\n. Can we use the \"ofObject\" param to tell which WebView sent this update? If so, we should make sure we only update the toolbar if the progress change is from the selected WebView.\n. | prefix.hasPrefix | seems a little strange. Is \"prefix\" a prefix, or a whole string?\n. Naming thought: LocationTextField -> LocationField and do the same with the delegate?\n. Naming OCD: I'd rather go with SessionStorage (like Desktop and Android) or similar. This storage will also contain closed tabs so we can undo closing a tab. Form data and other bits might make their way into the storage too.\n. In the same naming vein, how about \"sessionstore.json\"? Making it more like Desktop and Android.\n. Update text since you aren't delaying?\n. ",
    "codestergit": "Addressed the comments.\n. @shivamgeek  This is not test repo. Do not spam.\n. @thebnich  added comments. We are doing same thing as previous. In insertText method before inserting any characters we are removing autocompletion. After inserting characters(i.e call to super.insertText) we are calculating autocompletion suggestion.\nPlease let me know if any further clarification needed.\n. @thebnich updated the pull request. Fixed flicker issue and Japanese character issue. Please let me know your thoughts and if any clarification needed.\n. Hi @thebnich,\nupdated the pull request to resolve conflicts. Now can be merged.\n. Hi @thebnich  It also resolve Bug-1183210 flicker issue while entering text.\n. @thebnich  removed debounce added for Bug 1173162 . Done changes for hitting db when required i.e if user enter text does not match with saved suggestion.\n. @thebnich  updated the pull request. Resolved conflicts.\n. @thebnich  updated the pull request to address comments. I have made separate commit for that and squashed in to \"Hitting history db only when required\". I hope that is fine :) .\n. Hi @thebnich \nDue to lag between shouldChangeCharactersInRange and textDidChange event we need to do this. Detailed comment  is here. I have already tried to find some alternative but no success. I need your thoughts further. Thanks for all your help :)\n. @thebnich \nUpdated the pull request. Thanks for your suggestion. I have simplified the patch.\nThanks\n. Hi @thebnich \nUpdated pull request and resolved conflicts.\nDuring testing I have found two issues which is regression of Bug-1166781.\nI have done separate pull request for them also.\nhttps://github.com/mozilla/firefox-ios/pull/807\nhttps://github.com/mozilla/firefox-ios/pull/808\n. @thebnich  Thanks for suggestion. Updated the pull request.\nPlease let me know if any other changes required.\n. @thebnich\nThanks for suggestion. Updated the pull request.\n. Hi @thebnich \nThis patch is really great and we can get rid of search query caching.It's super cool :+1: \nBut while testing I have found while entering first chracter(going again to some site) canAutocomplete will be false as we are entering text at beginning not end so range.location check will fail.\nI think we should remove range.location == count(text) and change it to canAutocomplete = !string.isEmpty as we may also want completion if user enters text in middle of text or copy/paste in between. I have seen this behaviour in safari and we do not need for extra check to handle above case. \nFor eg: user type goole and go back and enters g before l than we should show auto completion. This is behaviour was there on master previous to Bug-1166781\nSafari only remove and not show completion when we are deleting characters.\n. @thebnich \nWe can also remove this line https://github.com/thebnich/firefox-ios/blob/autocomplete-quick-delete/Client/Frontend/Widgets/AutocompleteTextField.swift#L74\nand \nhttps://github.com/thebnich/firefox-ios/blob/autocomplete-quick-delete/Client/Frontend/Browser/URLBarView.swift#L622\nwhich was previously added for clearing cached search query.\n. @thebnich  I have tried all the things but it seems not possible to avoid default longPressHandler with old document.body.style.webkitTouchCallout='none' with WKWebView.Someone already posted on dev forums https://devforums.apple.com/message/1024729#1024729\n. Removes autocompletion before changing any characters.\n. If any character is deleted than we simply returns. We do not want autocompletion.\n. @thebnich  Here we need enteredText because notifyTextChanged  is also called from SELtextDidChange may be after some delay. So self.text may have complete string with auto completion, not the user entered text. So cached query in SearchLoader may save auto- completed string and may give bad results.\n. @thebnich  You always know what is best :).\n Changed enteredTextLength to entredText working good.\nAs we are not calculating enteredTextLength when not in auto-completion mode so if user enters text in between somewhere than it will be calculated in SELtextDidChange so enteredText will work good. Thanks for your suggestion. \n. @thebnich I think we can safely remove this line. On master branch we are using insertText which calls only if we are entering text not deleting it. Here we are using textDidChange event which will call when we are deleting the characters also.In SELtextDidChange we are notifying all changes. However that will call with debounce delay. I do not think that is a problem.\nIf we add the line here and than in SELtextDidChange if we call notifyTextChange  again, than change made in [bug-1166781] will fail and while deletion the text completion will be shown to user(second time newValue is same as query so completion will be shown). So we may need character deletion check in SELtextDidChange.\nPlease let me know if you have other thoughts.\n. Thanks great :+1:. \nDone that\n. ",
    "hirohisa": "@thebnich Thanks, I try to do it\n. @thebnich, Thanks comment. If you import only second commit, it reproduce with same steps.\n. Thanks @wesj for review. I pushed it that include marking to icon into updateButtons.\n. Thanks @wesj ! Sorry, I dont know buttons[selectedButtonIndex].item. It's better! I pushed.\n. ",
    "soulwind": "Can I upload my own modified version of this project to Appstore?\nThank you \n. I understood it\nCan I use some name like Firefox Unofficial ?\nThank you\n. ",
    "andreasgal": "It's open source! Yes you can but you can't use the Firefox name or logo. If you make your own branding you are welcome to fork this and publish it anywhere you like. \n. You cannot use the name \"Firefox\" or the Firefox logos (or Mozilla) in any form or shape but you are welcome to make up your own brand and logo. Be creative! Good luck with your project.\n. ",
    "sveinhal": "Why pull in whole third party libs into the repo? Why not use CocoaPods or git sub modules? This question obviously also relates to already existing code in the repo and not just this pull request.\n. Why use these custom functions at all. Most of these features are available under similar names in Foundation. Eg. startsWith(_:) is identical to hasPrefix(_:) in Foundation. . Also why not \nswift\nself.selectedOverlay.hidden = !selected\nIs this the preferred style in this repo?\n. ",
    "dusek": "Thanks for the quick turnaround. I did:\n- submit the bugs\n- reference them in the title of the PR\n- reference them in individual commit message titles\n- rebased on current master while I was at it\n- added note to this PR that we are OK with MPLv2.0\nPlease let me know if there is anything else to make a contribution properly, it's my first time contributing to Mozilla. :-)\n. I made some updates:\n- rebased to latest code\n- reflected latest code (address field becomes address and search field)\n- added accessibility label to avatar image, secure connection image, reader button, search suggestions for search engines\n. > Would you mind rebasing this PR so we can merge it?\nDone.\n. > I have to wait several minutes for things to unfreeze before I can do anything again...it's completely unusable.\nFor me, turning VoiceOver off helps immediately in such a situation (I have accessibility shortcut set in Settings > General > Accessibility > Accessibility Shortcut > select VoiceOver (and only VoiceOver) - then quick triple-press of Home button turns VoiceOver on/off wherever you are).\nI did hit similar issues in Firefox (iOS) and Safari (iOS), including on this page on our company website, so I am aware of these kind of problems with Safari. I have not reported a rdar, but I guess many VoiceOver users must already have reported it to Apple.\n. > I've been trying to test VoiceOver, but the phone (not just the app) becomes unresponsive\nOne site I used for testing and did not exhibit these problems was wikipedia.org. The other was idnes.cz (but that's in Czech).\n. > Interestingly, this happens on Safari too, but not on Chrome. I'm assuming there's some bug with WKWebView + Voice Over that Chrome isn't hitting since they use UIWebView. Known issue?\nThere is an app that lets one switch between UIWebView and WKWebView, which is nice for testing :-) The problem we are hitting w.r.t. VoiceOver \"freezing\" is really specific to WKWebView; UIWebView works fine. I think Apple has some bug fixing to do :-) Just reported it as <rdar://problem/19590964>\n. My thoughts too about some theme class. More when I consider what will need to be done with fonts, as based on different accessibility (or partly accessibility) settings, we might choose to use:\n- bolder font (accessibility setting to use bold text)\n- bigger font (dynamic type size user setting, and accessibility provides even bigger values for this setting)\nI will log these two as bugs in the coming days.\n. I would recommend working with accessibilityIdentifier instead of accessibilityLabel for unit testing. They serve different purposes: accessibilityLabel should be set if and only if you decide it is good for the user. You should not set it just because you need to reach an element in a test. On the other hand, accessibilityIdentifier was added explicitly to avoid misusing accessibilityLabel for purposes of uniquely identifying UI elements in unit tests. I looked at KIF and it seems to support getting elements based not only on accessibilityLabel, but also accessibilityIdentifier (through KIFUITestActor (IdentifierTests) category).\nA few observations how accessibilityIdentifier is better for testing:\n- stability: accessibilityLabel could be tweaked often to be more understandable for the user (it's a user-facing string), and it would be bad to have to change corresponding tests to reflect the label change each time; on the other hand, accessibilityIdentifier could stay the same through these changes because it does not affect the user at all, no need to \"tweak\" it once it is uniquely set.\n- localization-independent: accessibilityLabel changes based on the localization - should a user with non-English UI run the tests on their machine, then I imagine they would all fail.\n- uniqueness: two views could have the same accessibilityLabel and be distinguished just by the element type (like text field and button), or there could really be two UILabels with same text.\n- code-style: this is a bit subjective to me, but as it is not a user-facing string, you can afford to use \"identifier\"-like values in accessibilityIdentifier, i.e. no spaces, camel-case, e.g. \"webContent\" ;-) At least for me, it is \"nicer\" in tests.\nSo using accessibilityIdentifier is IMHO \"the proper way\" here.\n. @thebnich will do, hopefully this evening\n. @thebnich I rebased and fixed all the conflicts and force-pushed, so right now it will merge without conflicts :-)\n. Fixed and interactively rebased to master with fixups. Please review.\n. (just fixed tabs->spaces in one of the commits now)\n. (now just removed @objc on the selector as it is not needed)\n. (and just added it back as it is really needed; should not code that late in the night :-)\n. I rebased on latest master, also added one (last) commit given there is now a close button on each tab.\n. I was also thinking that now there is a close button that closes tab without any animation. I originally thought if this would happen, it could use the animated close that I am using in the accessibility action. Or the other way: the accessibility close action could use the non-animated close. But I did not make any changes here to not complicate things at this point (i.e. delay merging of this).\n. Again rebased this, fixing conflicts. Please review again.\n. @splewako sorry, will be more diligent about this the next time.\n. > Thanks for the PR. Since we're making this change solely for accessibility, I wonder if it would be more appropriate to use accessibilityElementsHidden instead of hidden?\nIt was certainly a possibility I was considering. In the end I chose hidden so that accessibility behavior is tied to the visual behavior. Whenever a view should not be hidden visually, then it should also not be hidden to accessibility, and vice versa (well, at least most of the time this is true). This would make a developer changing the hidden-ness because of a change in the visual behavior also appropriately change the accessibility behavior, thus raising probability accessibility behavior will be updated properly when compared to a situation where accessibilityElementsHidden is used instead and the developer doing the change will not touch it because that is \"the weird accessibility stuff I better not touch\" :-).\nI also noticed no visual change in the transitions/animations after adding the hidden code (but I might not have been looking too closely :-)\nBut it's a fine line. If you prefer, I can change it to accessibilityElementsHidden in all 3 commits.\n(KIF idea is great btw., even the non-accessibility tests already make sure things have labels, thus adding some basic level of accessibility, even though not sufficient as this PR shows).\n. @thebnich no problem, will do. I was wondering if you are inclining to hidden or accessibilityElementsHidden so that I could reflect that during rebasing and you could merge it (unless you of course have some other issues you want to raise).\n. @thebnich I rebased, fixed merge conflicts, retested.\n. Bug 1151387 (for easy reference)\n. Alamofire 1.2 released with support for Swift 1.2 (no more need to use the xcode-6.3 branch which was merged to master today): https://github.com/Alamofire/Alamofire/releases/tag/1.2.0\n. Thanks.\n. @darrinhenein Yes, you can set accessibilityElementsHidden to true (this is exactly for cases where something is not hidden and is part of view hierarchy, but it is visually clear for the user it should not be interacted with and it is not even possible to interact with it, so it should be hidden from accessibility). Also don't forget to pair it with setting it again to false after stopping showing the home panel :-).\n. @darrinhenein Also transparency should not be used if the user enabled \"Reduce Transparency\" (checkable with UIAccessibilityIsReduceTransparencyEnabled), but that is true probably only in cases where the transparency results in reduction of contrast of content that is being primarily presented (transparent backgrounds usually reduce contrast between themselves and the presented content like text for which they act as a background), so it is up to your consideration if this is the case.\nIf you are interested in the practical examples of situations of adjusting visual aspects of UI to visual accessibility settings like transparency for this PR and also your future work, I would recommend looking at WWDC 2014 session video \"Accessibility on iOS\", the Visual Accommodations part (running from 09:40 to 17:00 - i.e. just 7 minutes :-)).\n. For the record, just tried with and without 43bc010 and confirm 43bc010 really does save accessibility :-) (without it, VoiceOver browses elements from home panel mixed with elements of the hidden webview; with the commit, everything behaves fine \u2013 only elements from the home panel are browsed).\n. My pleasure. Btw. looked at the translucency effect, if the only translucency effect is the home panel bar (where the 5 buttons for switching the panels are), then I don't think it requires removing the transparency when the user has reduce transparency accessibility setting set \u2013 the transparency actually appears very slight to me and does not endanger contrast of the buttons against any color of the underlying webpage I tried (I tried black and red).\n. @st3fan Please also temporarily comment out the corresponding accessibilityHints set on the back/forward buttons in Client/Frontend/Browser/BrowserToolbar.swift (they advertize availability of the back forward list on long press).\n. Yes, please merge.\n. Sorry, I saw your message but only got to it now to fix it. I see it has already been merged. So maybe we can leave it as it is as it is not that big of a deal.\nAnyway I think that any enum has some inherent \"presentable\" values for UI (like if all values from an enum would be presented in a pop-up for the user to choose from), which is a localized string.\n. @thebnich I think the relationship is orthogonal - the user themselves regulate what size they prefer in the reader view (independent of the system setting for dynamic type size).\nAt least this is how Safari does it now anyway - choosing the biggest value in Settings > ((General > Accessibility) | Display & Brightness) > Text size does not get one bigger fonts in reader mode in Safari. I think Safari once did tie the reader mode size to Dynamic type size and did not allow setting text size directly in the reader, but now it is no longer the case.\nWe could also have some range (e.g. current 5 values size1-5) and decide what size range this covers based on the dynamic type (e.g. with biggest dynamic type size setting, size1-5 would mean range of 20-50 px., with the default setting size1-5 could yield range of 10-25 px etc.), but if we provide user the way to set their size in Reader mode as we do now, then we can say they can set any size they want and we don't need to restrict the range ourselves (it would be much work for little practical effect).\nOnly thing we could borrow from dynamic type is boldness - we could use UIAccessibilityIsBoldTextEnabled() to make the font in reader optionally bolder.\nDynamic type from the font size point of view would be nice in Firefox for iOS UI itself (but that is Bug 1124848).\n. I rebased on latest master and addressed all your comments (except for the last one, for which I provided comment).\n. (Bugzilla seems down for me, so no PR attachment in the bug yet, I might not get back to it later today).\n. > Bugzilla seems down for me\nLooks like in Chrome, it's fine. I attached the PR to the bug.\n. I described it in the commit message - VO traverses like when you read a page, top to bottom, each line left to right. So we would have to make sure that the layout is generating frames for all the elements that the above specified order yields a usable order for VoiceOver user, e.g. I thought that this approach would work nicely with the suggestions question. I am also thinking that adjusting accessibilityFrame instead of actual layout might also work (but have not tried it, at it might not be desirable if it would \"fake\" the frame, as low-vision users rely on the accessibility frame to correspond to the outline of the UI elements).\nAlso in principle, there will be cases where for visual reasons one will want the layout to generate frames that do result in wrong VoiceOver order.\n. @thebnich I rebased to latest master and redid the one case in init as you suggested.\nBtw. is May 15 still the cut-off date for v1.0.0 contributions? (I am not sure of a proper place to ask) I simply would appreciate to know until when I can make PRs that have a good chance to get included into v1.0.0.\n. > Where did you hear about a cut-off date?\nI rather interpreted content of April 29 Status Report, the \"Final build available\" date (May-15), where I interpreted \"final\" as \"no new things go in\".\n. > Currently, our timeline is \"when it's ready\".\nThanks for the info, great as there are still quite some a11y fixes and features I would like to see in v1.\n. I am looking into what happens with Safari, but I doubt it would stop audio with (or without) VoiceOver \u2013 being able to listen to music while browsing web feels obvious.\nI think the right thing would be to set something like AVAudioSessionCategoryAmbient, that would allow to mix Safari's sounds (the progress bar) with music from other apps. I will post when I learn more (I guess this weekend).\n. So Safari, as I expected, does not stop audio from external apps when its aural progress indicator is playing with VoiceOver. (But btw. it e.g. stops audio on webpages that had media content (video) - i.e. CNN article with video report, even if you don't play it.) It also plays the aural progress ticks even with silent switch on (Firefox does not play it with silent switch on). Guess I will have to look at all these issues and open a PR :-) Looks like the right thing to mimic that would instead be AVAudioSessionCategoryPlayback (leads to no turning off the audio progress when silent switch is on) along with the AVAudioSessionCategoryOptionMixWithOthers option (leads to no pausing background music from other apps).\n. Yep, I will work on it.\n. One more thing: the commit messages do contain some reasoning, if interested, you can read them too.\n. Just a heads up that I will be finally addressing the review comments here in the coming days (hopefully before weekend).\n. @st3fan I just rebased and retested, seems to still work fine. If there is no hurry, I would like to look into improving them a little bit more w.r.t. review comments over the weekend.\n. @st3fan Sorry for the delay. I finally got to addressing all review comments from you, @thebnich and @rnewman, including:\n- making one delegate method return Bool instead of Bool? and documenting the return value\n- getting rid of URLBarAction and related issues\n- not using string matching to infer whether page could not be added to Reading List because it is already there\nThe only I review comment I did not accept was the one concerning the name of the class Action which I let be as it is, since it really is supposed to be an agnostic abstraction of different types of actions, hence it should be named generally too.\nPlease take a look and/or merge.\n. One more thing:\n\nnot using string matching to infer whether page could not be added to Reading List because it is already there\n\nHere frankly I am waiting and hoping that someone else will provide a way to distinguish this, since that will be also needed when there will be visual notification implemented for adding page to Reading List (Bug 1158503)\n. OK, will do later today.\n. @st3fan Changed and rebased on latest master.\n. Can one view the reason of failure?\n. @thebnich I answered your question in the Bug, I think this is then good to go?\n. > @dusek, what's your opinion on the status of a11y right now? Are there any labels/hints that still need to be updated? It sounds like we want to do the string freeze very soon, so consider any such changes high priority if you're planning on taking them. Sorry for the short notice!\n@thebnich thanks for the info. I will ASAP address review comments in Pull Requests that you reviewed and contain new strings. I submitted one new PR today (has new strings too). I will give it a thought if there is anything more that should be adjusted w.r.t. a11y that would influence strings.\n. @thebnich do we expect to get v1.1 out before (or together with), or after iOS 9 (say half of September)? If after, I would make one new PR today (for stuff that works only on iOS 9 and needs localized strings).\nAlso I will try to address the https://github.com/mozilla/firefox-ios/pull/497 today, seems like one recent PR for long-pressing URL bar made some more involved adjustments necessary than just mere textual conflict resolution.\nAlso, as I have at least one more PR in mind (intro view) that could need new strings but I will definitely not have it ready this week \u2013 could I submit a PR that would \"preemptively\" add only the new strings I am contemplating (in some variables or returned by functions) so that they would make it into the string freeze and be translated, so that I could later (say 1-2 weeks from now) use those variables with localized messages when actually making the another (proper) PR with the full change?\n. @thebnich Right now, I see these changes that I would like for v1 and that require new strings:\n- intro \"first run\" wizard (using \"preemptive\" strings if OK'ed - the real full change requires more design and coding work than usual, definitely not fully doable tomorrow)\n- add a11y label to search engine image in search suggestions\n- revise a11y hints referring to tapping to refer to double-tapping instead - reload/stop button\n- if everything goes well, then also Switch Control-related changes that will speak things like \"navigation bar\", \"home panel\" for the respective group of items (starting in iOS 9, does not work on iOS 8)\nI will be able to do that tomorrow, July 10 (let's say until 21:00 PM CEST = 15:00 PM EDT). Is that soon enough?\nBtw. I am unable to test localized Firefox (wanted to try Czech), I filed Bug 1182306 - l10n cannot be tried out. I would like to give localized Firefox a try tomorrow if I knew how to make it work (run it).\n. I was thinking two things w.r.t. strings: have some descriptions for the images (like for the first screen \"tab bar button is at the top of the screen next to address bar, showing tab count\"), and then scroll status string \"Introductory slide  of 3 \". As I have said, I have not yet made up my mind on how to best make the experience accessible. It is quite important as it is (just like for the sighted users) the very first experience with the app. But right now, I think it is not possible to go from the first page of the wizard to the second. Then I also wanted to make escape gesture perform the \"Start browsing\" action (i.e. dismissing the wizard).\nI now NEEDINFO'ed @st3fan (not @stefan ;-)) in the bug.\n. @thebnich I am very sorry but I hate to say I am running late, won't make it till 15:00 EDT as originally promised, more like 16:00 or 16:30. Sorry for any inconvenience.\n. > @dusek ^\n@thebnich I know :-) I am quite busy, but understand the string freeze deadline. I will try my best to get back to this later today.\n. I think the only way to implement this properly would be in the case of landscape view (and in case of iPad, simply in the case of size class .Regular) to have the subviews of URLBarView divided so that the location view (secure connection image, reader view button, location text field) remain as is, but the toolbar button are grouped into a container subview. This would of course span the whole width of the url bar, but through some proper ordering in the subviews array, would not interfere with the location text field etc. For accessibility, one would then specify this subview as a group with label \"Navigation Toolbar\", and override its accessibilityPath to have a non-rectangular frame, so that it would be like if it was composed of 2 rectangles connected by a line of width 0 (otherwise it might trick Switch Control users to think the location text field is inside this virtual Navigation Toolbar). This would lead to a similar experience like we get with this PR in portrait - have the same buttons in \"Navigation Toolbar\" for accessibility (namely Switch Control in this case), though at the top and at the beginning.\nI also thought about whether to group the URL bar things together (secure connection image, location text field, reader view button, show tabs button), but could not really find a good name for the group (especially the show tabs button somehow does not fit in there), so I decided not to group them at this time. Might be worth reconsidering later too. But maybe we could simply name it \"Address and Search Bar\" (i.e. user-friendly variant of the name \"URL Bar\"). That would then require a subview of URLBarView too for this in landscape, as to have separate groups (on the same level of hierarchy) for the navigation toolbar and address and search bar.\nSo to some it up, lots of thoughts, little resolution, quite some effort to try it all out. :-)\n. Hello @ackratos , I was wondering whether you have some comments on my comments? Thanks.\n. @thebnich I addressed your comments - commented, fixed, rebased, pushed.\n. You're right the docs speak about a parameter. I tried passing the webview, but that selected the whole webview and cursor was stuck at it. On the other at that time I used just ScreenChanged and did not follow it with LayoutChanged (or the other way round). I will try to experiment with it a bit more and get back with results.\nBut it seems that passing nil is OK, as an Apple employee from accessibility team put it on the slides this way (see slide 30 here).\n. Just removed the println (and rebased).\n. Yep, I will (and will also look if I there is  some Swift protocol to adopt to formally mark the localizedDescription property as available). As this will require changes in more than one place etc., I will do it later today to be able to compile/test.\n. Done + rebased.\n. I was nervous too with discovering the various places to put the tracking calls at. I however did not get what you meant by overriding UIAccessibilityIsVoiceOverRunning and how does that relate to KIF tests?\n. Btw. I know I have been behind with testing with all my commits so far, as accessibility is not yet finished so at this point the user will benefit more from more things working in the first released version, and that I will be able to get back to add some tests later.\n. I thought about it. I think we should not decide here whether something is an accessibility element. That should be decided by setting isAccessibilityElement somewhere else. So as a matter of principle, include everything that could be an accessibility element, and leave the ultimate decision to another part of code.\n. Yes, will do.\n. I need to hide the aural progress bar whenever the webview is not showing (when tab tray is showing, home panel is showing etc.) and unhide it whenever it is. Here, start/stop tracking is paired in show/hide the home panel. When home panel is hidden, I need to unhide the aural progress bar. (it is called tracking accessibility status because I hide unhide not only based on visibility of webview, but also based on whether VoiceOver is running which I am tracking).\n. That is not the way I am thinking about it. Action really represents a generic action that has in principle nothing to do with accessibility, and from which both UIAccessibilityCustomAction and UIAlertAction can be generated.\n. I will see if I can dig up the last SQLite error. It was available as a private member of Statement, which I can't access, I will look if I can access it publicly in Database.\n. @st3fan I can't seem to find a way to get at the numeric sqlite error code: Database has public String lastError, but no sqlite error code. Statement has private status, which is exactly what I would need, but it is private.\n. I know it is a bit unfortunate to put it in a file called Accessibility.swift then. But I could not think of a more suitable name :-)\n. Btw. here I broke the syntax guidelines, but IMHO for good reason - including the beginning brace for if on the same line as result = ... would seem to place the switch at a lower indent level than the previous line. The way I did it, it is clear that the switch is inside the if since it is at a higher indent level than the preceding line (containing sole { on the same indent level as the if).\n. I thought about this too :-) seemed better for me to be sure. But as currently we do not disable the button anywhere, let's not confuse ourselves, so I just pushed a revised commit here that just checks hidden and not enabled (I also rebased).\n. done\n. done\n. Good point about the editing which is no longer needed. But the getter (and therefore setter) are still needed - the method accessibilityCustomActionsForView can return different actions over time - see BrowserViewController.locationActionsForURLBar. Basically DisplayTextField is constantly not editing, so you can think that the if branch (with calling the accessibilityCustomActionsForView) is always taken.\n. ",
    "lyle-luan": "Please ignore this, I made a big mistake here.\nI should load HTML to display error, and I am working on it.\nAlso I will test a bit manually for some common scenarios, thanks for Stefan Arentz's suggestion.\n. Load web page to display errors, make it look like the way Safari deals with errors. \n. I am going to merge the tests of GCDWebServer to WebServerTests.swift, Should I working on it?\n. Thank you all the same, it is much better.\n. There are four commits of \"Merge branch...\", I want to make these just one. What you mentioned above works for this situation?\nBefore I push my commits, I should rebase the local repo to make my commits look better?\n. I didn't mean this!\nI will make it right!\n. I will learn more about Git and Github, It's a chance to learn Git.\n. Sorry, I am spending my happy time of Chinese New Year :]\nThank you for the merge, I will come back. ;]\n. Here it is, awesome!\n. Yes, that's what I want to, display these all on the error page, I forget to add a //comment, sorry.\n. Thank you for your review, I will change the func name. :]\n. It was a quick fix, I am sorry for my careless.\nI thought there would always be a url since indexPath.row < searchSuggestions.count.\nI didn't realize suggestions might not be URLs.\n. ",
    "darrinhenein": "@wesj I'd love to weigh in :) Do you think you could attach a screenshot or a clearer description of what the question is? I'm guessing this is regarding the list that appears while editing the url field... I would say on first thought we'd want something similar to desktop and Android, where a combination of history, bookmarks and search results are presented (the goal here is to just let the user get to where they're trying to as quickly as possible).\n. (Firstly, :+1: for screenshots in PRs!)\nI think one design showed the one-off searches as just icons across the top, similar to our one-off search on desktop (no need to repeat the term 10 times)... and I think row decorations for bookmarks/history items probably eliminate the need for section headers. Will get a mockup to you asap.\n. Functionally it looks great, can we move the Done button to the left side? See http://invis.io/M52BE4WD3.\n. A couple of comments:\n- I know I haven't delivered specs for any of this yet, but in my mockup the pills have a height of 26pt (including 0.5pt inner stroke) , with 10pt margin above and below... looks like you're pretty close\n- i don't like the horizontal scrolling \u2013 can we have 2 lines of tags and see how that feels? I suspect for v1 we will ship with either 2 or 3 (maybe even conditional on screen size and # of other results?)\n- nit, but i can provide a magnifying glass (or grab a placeholder from android) to include in the first pill\nupdated mockup (also in InVision):\n\n. @thebnich: Pointed out to you in channel that the first tag's text is a bit blurred.\nAlso, ellipsizing suggestions that exceed the row width, I think thats a reasonable solution for a pretty rare edge case  :+1: \n. FYI these will both be replaced (settings + add) with images soon, so let's plan for that. We should have assets in the next day or two if you're willing to hold off (or fix this and we can open new bugs)\n. :+1: @st3fan works for me. Seems to be nicely refactored for our eventual port to UICollectionView as well.\n. @sleroux does this still have the offset issue on 6/6+? \n. :shipit: Ship it.\n. UX+ from me, https://bugzilla.mozilla.org/show_bug.cgi?id=1145971#c5.\n. Address a11y comments in a5b6e7b.\n. Other issues:\n- can crash if you delete all tabs and try adding a new one [FIXED]\n- we don't preserve scroll position, so transitions back to the tab tray when many tabs are present don't look right [FIXED]\n. Lastly, about:home is still visible during the transition when you have not left that page. I am hiding all of the tabManager's webView instances but need to hide the home panels as well? @wesj @thebnich \n. Thanks @sachin004! I actually noticed both of these issues while rebasing https://github.com/mozilla/firefox-ios/pull/317 and had already fixed them in that PR which will land soon. I moved the tab removal code into the CustomCell itself and call the TabTrayController as a delegate so we have less indexPath issues to worry about.\n. Picked this into 44d44e5c205c.\n. Thanks @dusek! Is there a way to set a view as not-accessible but still visible? The idea of this patch is to keep the webview visible behind the panels, so the user understands the context of the panels and that the page is still there (this will become clear once you try a build). Any suggestions on how this could work?\n. I've added the accessibilityElementsHidden toggle, let's do the blur/transparency checks in a follow-up.\n. Great, thanks @dusek! I don't have much experience (shamefully) with the accessibility APIs so really appreciate your help :)\n. While I know this is the curve we use elsewhere, I think the extra control points add a few sharp-ish corners. I think what we have in trunk is fine for now. \n. Ok, I'll check this out... the anchor was moved on both tabs buttons for the animation that occurs. Both animate/rotate around a common point as defined by the anchor (to get the rolodex 'flip back' effect). I'm not sure this will look the same without the common anchor.\n. Alright, this actually looks ok. ui+ from me.\n. > Ah no it wasn't. I guess the expected behavior is that the area behind the location bar should display the content below blurred (using the effects view it's wrapped in) right?\nYes, the curved URL bar should show the blurred webpage below it once you've scrolled.\n\nHmm ya it does feel out of place when just fading out those elements. I can revert to the same animation we had before where we faded out the entire URLBarView. @darrinhenein any thoughts?\n\nI'll take a look, didn't think about this.\n. Ya, I think this feels great! Land it and we can get some feedback on how the touch targets feel.\n. @ryanfeeley I filed this last week https://bugzilla.mozilla.org/show_bug.cgi?id=1171028\nIt's pretty much the same thin... can you comment there if it's not exactly what you want?\n. LGTM, thanks!\n. Note: my comments in 3cccdf0 seem to be general regressions, unrelated to this PR.\n. Cherry-picked into https://github.com/mozilla/firefox-ios/pull/665\n. @wesj I can't get this branch to build, getting:\n```\nCpResource /Users/dhenein/Development/mozilla/mobile/Downloads/topsites.txt /Users/dhenein/Library/Developer/Xcode/DerivedData/Client-fmrtvitykvtqccaxmwrckupuijrx/Build/Products/Debug-iphoneos/FennecAurora.xctest/topsites.txt\n    cd /Users/dhenein/Development/mozilla/mobile/firefox-ios\n    export PATH=\"/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode.app/Contents/Developer/usr/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    builtin-copy -exclude .DS_Store -exclude CVS -exclude .svn -exclude .git -exclude .hg -resolve-src-symlinks /Users/dhenein/Development/mozilla/mobile/Downloads/topsites.txt /Users/dhenein/Library/Developer/Xcode/DerivedData/Client-fmrtvitykvtqccaxmwrckupuijrx/Build/Products/Debug-iphoneos/FennecAurora.xctest\nerror: /Users/dhenein/Development/mozilla/mobile/Downloads/topsites.txt: No such file or directory\n```\n. @sleroux I think visually, yes. Don't want to lose any nice stuff in here re: open graph images or better icon-finding if it looks valuable, though... (not sure what/if any of this made it in elsewhere)\n. \ud83d\udc4f\n. +:100: this is so much better. Thank you!\n. They will be tappable/collapsible before long, so not sure if it makes sense to change it in the mean time... @tecgirl?\n. This one? https://bugzilla.mozilla.org/show_bug.cgi?id=1205047 https://bugzilla.mozilla.org/show_bug.cgi?id=1205047\n\nOn Oct 27, 2015, at 1:46 PM, Aaron Train notifications@github.com wrote:\nIs this filed in Bugzilla?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/mozilla/firefox-ios/issues/1068#issuecomment-151584143.\n. Note \u2013 the assets in the catalog are named in the order we created them, not the order they may appear in the tour. Please reference the mockup in the bug for the correct ordering of the slides.\n. Ya, I wondered the same, but just followed https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Widgets/Toolbar.swift#L26 as an example.\n. @st3fan if possible, yes! We had this before and removed it, right?\n. Proposing \"No Logins Found\"... @tecgirl?\n. \n",
    "shaleengarg": "Hello Everyone,\nI am a newbie to the world of open source and github.I have just started to\nuse github now and I want to contribute to mozilla.\nI know decent programming in C and have started to learn python.Please\nguide me through . I would be very greatful to all the contributors of\nMozilla.\nThankyou\nOn Fri, Feb 6, 2015 at 7:23 PM, Stefan Arentz notifications@github.com\nwrote:\n\nLooks good to me. I'm not a reviewer for this bug but I would give a +r :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/135#issuecomment-73238993.\n\n\nshaleen\n. ",
    "TomACPace": "Hi @thebnich,  this branch and pull request are updated with the recommended changes.\n. Is this particular whitespace line that important?\n. I will remove these, on your request, although it makes readability easier for me.  I use it when there is multiple nested function calls with arguments, although not necessary for the first level ie getTab(webView).\n. That's cool, I had also felt as you, the nil switching to a blank view is not a major issue, but figured it would be good form or appropriate to add the early return on nil, because the potential nil return in my getTab(webView) method. I'll have this removed. :)\n. ",
    "sleroux": "Ah yup I see the problem. I was doing a test by changing the content size to simulate a larger panel. Let me fix this up.\n. I notice that the buttons are getting laid out manually in the container's layoutSubviews call here: https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Home/HomePanelViewController.swift#L245 which is making the container frame not update it's bounds. Was this to center the buttons? With additional buttons being added, do we need this code anymore? If not I can replace it with autolayout to make the items equally spaced out.\n. Alright sounds good! Feel free to close this PR if you want - I can hunt something else down :+1: \n. No problem. I'll keep an eye out for any changes needed tonight/tomorrow. \n. Before this PR goes into the filing bin, just a quick note that \nAppDelegate.swift:L95 still needs an email to be filled in.\n. Hey Nick, no problem and thanks for merging this in.  For something like this I will normally write a unit test that covers the behavior of the data source / delegate methods and edge conditions. I noticed that KIF is in the project so we could write a test scenario using that or UI automation. \n. @st3fan @ncalexan I extracted the animation code into it's own SwipeAnimator object that takes in any child/parent view relationship and performs the swipe. The animation code will work when this moves over to a UICollectionView as well. Also cleaned up the casting in the panning selector code.\n. Changes look good :+1: \n. Oops I submitted another attachment with review+ so you might see it twice on there.\n. Hey Brian thanks for checking this out.\n\nWas removing the translucent effect in the URL bar intentional? Just wanted to be sure since I don't see any comments in the bug about this change\n\nAh no it wasn't. I guess the expected behavior is that the area behind the location bar should display the content below blurred (using the effects view it's wrapped in) right?\n\nDo we want to fade to dark gray in landscape orientation? It makes sense in portrait since we\u2019re transitioning to a dark URL bar, but in landscape it feels out of place since there's nothing dark to fade into.\n\nHmm ya it does feel out of place when just fading out those elements. I can revert to the same animation we had before where we faded out the entire URLBarView. @darrinhenein any thoughts?\n\nI noticed the URL bar doesn't immediately start fading away if I scroll from the top of the page -- I have to scroll a small distance first. We should probably start scrolling from the top like we did before (and like Safari does).\n\nI think this is being caused by a miscalculation on my part - I'll update it to scroll right away\n\nScrolling to the bottom causes the page to jitter and get stuck.\n\nAw chucks. Let me investigate :)\n. @wesj @thebnich I just pushed up fixes to the PR comments and changed a lot of the way the animations work. Instead of adjusting insets and everything, the bounds now automatically change as the header moves now that I've pinned the web view container to the bottom of the header. Makes the animation code a lot simplier. Also put back in the transparent background.\n. @thebnich Fixed PR comments and squished animation commits ^\n. Cool thanks!\n. Looks good :+1: \n. Argh thats annoying. I spoke with @darrinhenein and I think we can make the thumbnail image scale enough to fill the cell when the screenshot will be too narrow to fill the cell's height. The only downside of this is the right edge of the snapshot on iPhone landscape won't align with the edge of the web page like it does on portrait\n. I'll close this PR in favor of doing the filling another way.\n. Fixed nit pitcks and also moved the logic into willTransitionToTraitCollection instead of traitCollectionDidChange since we have a reference to the animation coordinator there so we can combine both the toolbar logic and web view refresh in the same callback.\n. Missed a commit in rebasing so I cherry-picked over the patch to a clean branch see #444 \n. Yup I'll rename it\n. @wesj Sorry about this - I was a bit too fast on merging this branch. I added the change to this PR #447. Anything else before I merge it down?\n. Obsolete PR - please see #462\n. So I notice that the comments get blown away on rebase + push since the comments are on individual commits instead of the PR. Would to be possible to leave comments in the PR through Files Changed instead of inside each commit?\n. I'm going to close this PR and break down this patch into smaller chunks\n. Closing this PR since #484 was merged.\n. lttm\n. Buildasaur :+1: :+1: \n. lttm\n. @dusek, do you want to continue working on this branch? You have a lot of good ideas on implementing this feature. Let me know and I can assign the bugzilla bug over to you :)\n. Awesome thanks! I'll assign the bug over to you.\n. Thanks for the patch! This feels great. When I compare the scrolling speed vs Safari the normal speed feels a lot less jarring. I'm going to go ahead and merge this in. \n. We're noticing some tiling problems when the web view is rendering content and I think by changing the deceleration rate, some of the assumptions the underlying WKScrollView make regarding when to render content is somehow based on how much the scroll view has decelerated. We've opened a bug to track this (https://bugzilla.mozilla.org/show_bug.cgi?id=1168832) but for now we're going to revert this patch to investigate more what's going on.\n. Yup that makes a lot more sense. I like the concept of 'update if it exists as a bookmark and if not then whatever'. Pretty much makes this PR into a few lines of code. \n. lttm\n. @rnewman Added test case to verify that the favicon gets updated for bookmarks. Where do I get to cash in my bonus points :smiling_imp: \n. Cool - I ended up just extracting it into it's own factories\nhttps://github.com/mozilla/firefox-ios/pull/502/files#diff-9c9692fca616008ad6b1f355165cbb1cR42\n. lttm\n. Looks like on first launch it's using compactTabs although the settings menu shows that compactTabs is not selected. Should the toggle be on by default or are we defaulting to non-compact tabs?\n. lttm\n. On the iPad 2 simulator, whenever the Send Tab popover is shown, the navigation bar seems to be offset by the height of the status bar then jumps into place when the animation is finished. Not sure why but it might have to do with the configuration of the UINavigationController (ActionViewController)\n. lttm\n. @thebnich Just wanted to double check - are you okay with the changes I made to renaming the UX structure? \n. Closing this branch as it includes some code I tried to use for writing Quick tests.\n. lttm\n. lttm\n. I'm seeing some issues with the collection view data state being out of sync and crashing in some cases - especially when taking suggested tiles into consideration. I'm going to continue to work on this and iron out the bugs.\n. lttm\n. So I updated the patch to include changes in the PR comments and refactored out the logic for coloring the URL into extension methods on NSURL and NSAttributedString so I could wrap some of the behavior in tests. To color the host without the subdomains, I'm currently using the last two components of the host, joining them, and coloring that in hopes of excluding any subdomains. Would this work as a workaround? If not, I can look into using the tld.dat list to create special handling and wrap that in some additional tests if needed.\n. I managed to find http://mxr.mozilla.org/mozilla-central/source/netwerk/dns/nsEffectiveTLDService.cpp#224 in Gecko which is the code thats responsible for determining the public suffix/base domain for a given hostname using the public suffix list found here: https://publicsuffix.org/. I implemented the algorithm in Swift as an extension to NSURL so we can match the domain highlighting logic we have on Android/Desktop. I also included some basic test cases to confirm the algorithm's logic.\n. lttm\n. I'm down with merging this in since it does fix the bug but we need to revisit the settings view controller because we're not doing recycling correctly and the code is a bit messy. We might see problems later on as we extend this.\n. @rnewman One last thing before I merge this in - I believe the timestamp already gets removed as part of the clearing of sync prefs here: https://github.com/mozilla/firefox-ios/blob/d7cd0651053493cf7f8ca947d95eedc1cf1d9638/Providers/Profile.swift#L385. Will this pick up the stored timestamp?\n. lttm\n. @rnewman Looks like we set the selectedIndex to -1 when we call selectTab: https://github.com/ackratos/firefox-ios/blob/showIntroAfterClearPrivate/Client/Frontend/Browser/TabManager.swift#L125. What probably is happening is tabs.count is already 0, which will cause the for loop block to not run at all which sets the value of selectedIndex.@ackratos I think the fix for this problem would be to check for this condition inside selectTab.\n. @rnewman Is this still a valid concern? We can probably add this to the 2.0 milestone if it's not important for 1.1.\n. Will clean up commits and open new PR on different branch.\n. I believe we now have a way of clearing history after test runs so we can probably update this to get it working.\n. Actually I merged this already in another PR: https://github.com/mozilla/firefox-ios/pull/1044. Closing this PR.\n. Looks like https://github.com/mozilla/firefox-ios/pull/782 fixed this issue. Closing PR.\n. Updated patch with first round of comments\n. @darrinhenein I think this is the same as the current top sites layout we use right? Can we close this?\n. I looks like refreshHistory (https://github.com/mozilla/firefox-ios/blob/fluffyemily/Bug1186148-top-site-orientation-change-crash/Client/Frontend/Home/TopSitesPanel.swift#L168) is an asynchronous call. I think invalidating the layout / setNeedsLayout would need to be called in the callback block instead of the didRotate callback as the syncHistory could complete after didRotate is fired.\n. A to your Q: Ya we won't see any logging reported through Testflight :( When we add in reporting to crash-stats we'll be able to send other meta data alongside the crash such as logs but nothing for the current beta testing.\n. Some reason hub messed up and made this.\n. Closing as invalid - @thebnich will open up another PR for this.\n. Ah okay - didn't know it affected the layout on smaller devices. In either case, when setting the UILayoutPriority for auto layout axises, you usually never set it to 0. Usually something like 250 is as low as you need to go. Here's a list of the available values as constants (for some reason these don't work in swift yet for some weird reason):\nhttps://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/#//apple_ref/c/tdef/UILayoutPriority\n. When I navigate to the privacy policy, the area below the navigation bar animates and morphs colors for a good 1-2 seconds. Can we look into fixing this and having the background color stay the same as the SettingsTableViewController?\n. Sounds good - hit me up whenever if you want a set of second eyes on that. Also, I noticed that theres 33 commits part of this PR. Did you rebase off master correctly or merged it in?\n. I feel like if the browser.db hasn't been created yet, we should get at least get notified of when it does so we can update what we're seeing in top sites. I don't know if displaying the suggested sites is a complete solution since it seems that the root of the bug is a race condition between the UI for top sites and database creation. @rnewman thoughts?\n. Theres some useful fixes in here (ignore error page restore/tracking last executed time) but does this resolve the issue where we are calling storeChanges() for each history item when we start up the app - causing slow load times on app launch? I wonder if we need to call storeChanges everytime didFinishNavigation gets called or just take a snapshot of the tabs when the user goes into the background.\n. Ah okay cool :+1: \n. I saw in a patch Emily made this morning that avoids storing changes for error pages for tab restore (https://github.com/mozilla/firefox-ios/pull/855/files#diff-221fd685cced62e8c7406c0b5f24ed6cR419). Does this have any effect on this bug?\n. @rnewman Nikolai is giving us permission under MPL2.0 to use the code: https://github.com/NikolaiRuhe/NRFoundation/issues/2. Would we just update the copyright preamble at the top of the source file to MPL2.0?\n. r=st3fan\n. Was already fixed with the above where statement\n. :100: \n. I think there might be something wrong with the math or timing. When I fired up the simulator I get an extra row on the bottom:\n\n. Ya that would probably work better. Guess it's similar to the originally approach I had where I just set the boolean flag on Browser\n. @bkmunar Can we close this or is this still relevant?\n. Patch is pretty inactive and requires updating now with the new panel layout. I'm closing for now and linking this PR to the bug for future reference or if we want to reopen.\n. Looks like these changes were included in https://github.com/mozilla/firefox-ios/pull/917. Closing this PR.\n. @thebnich I've moved the pasting of the text into the async block and also moved the setting of the locationTextField to hidden inside common init instead of it being called all the time.\n. I'm going to go ahead and merge this in. The testURLContextMenu test seems to be passing now and the delayed/caching url text behavior is fixed :dancer: \n. Alright finally got through the changes... I'll follow up with patches for some of these comments on @rnewman's rebased branch https://github.com/mozilla/firefox-ios/pull/980\n. I've resolved the issues I commented on and pushed up to @rnewman's branch. I'll fix the SnapKit issues in a different PR since that's more UI than swift compatibility.\n. Sounds good. I've added the hasAccount change. We'll wait for 1.0.1 since this adds a new string.\n. Now that it's approved, I'll merge this down. I'll also merge down a copy into our v1.0 branch.\n. Yup looks like it - thanks!\n. I've opened https://bugzilla.mozilla.org/show_bug.cgi?id=1200210 to track updating this back to Snapkit.\n. Going to land this since it's r+ and Emily's on vacay.\n. Added an additional patch that un-hides the more info section at the bottom to match the copy in https://bugzilla.mozilla.org/show_bug.cgi?id=1196768\n. Merged in https://github.com/mozilla/firefox-ios/pull/1042\n. Closing since I renamed this branch...\n. Thanks for all the feedback - Im going to close this PR and pull out some commits to add the home panel refactor stuff and leave out the reordering for now.\n. As a general question, for features like PB mode, should these be folded into master piece by piece or part of a feature branch?\n. Ya - we'll go through and update these dependencies for 2.0\n. Closing this PR since it contains bitrot.\n. \n. @thebnich Are you seeing the flicker on the tabs animation or the toggle button? I've updated the toggle button to use a different method of animation and made it circle so that might have fixed any flickering with that. For the tabs, I couldn't replicate any flickering. Which device are you seeing this on?\nAlso, I think @darrinhenein is revising the tabs animation so it might change.\n. Hey Sachin,\nSorry for the delay on feedback on this! This patch/functionality looks fantastic - we definitely want to get some 3D touch in the app. We're just finishing up our next release now so it's been a bit hectic but I'd like to review this and get feedback on it as soon as possible. In the meantime, I know our design folks have been looking into what we want to do around force touch so I'll CC them to this thread to get some of their feedback as well. Thanks for the patch!\n@tecgirl @darrinhenein \n. > will lose some existing translations, so we can't land this yet.\n@rnewman Was this comment from our inability to translate the new string in time for a release? Can we merge this and have it picked up in the next localization cycle?\n. I've rebased this work and landed the changes on this commit https://github.com/mozilla/firefox-ios/commit/cf00c19f86e6b0bc91301d52320618d7b16c981f.\nThanks Aaron and sorry for the delay!\n. Also, the default animation for this isn't too flattering (cross alpha fade). In my refactor branch of top sites panel the items will reflow individually so this is more of a temporary fix for 1.1.\n. I've added a patch that now calculates the maximum number of tiles we need to show for any given orientation for the current device based on the screen size. So for example, if landscape iPhone requires 10 and portrait requires 12, the frecency limit will be 12. The calculation is approximate since we use the screen size and not the collection view size.\n. This something we no longer want to do. Closing PR.\n. From https://bugzilla.mozilla.org/show_bug.cgi?id=1190602, it looks like we're going with a more involved approach than removing the uppercase. Since this PR is pretty old, I'm going to close. If there is any movement or new work feel free to open a new one!\n. Looks like this was resolved with https://github.com/mozilla/firefox-ios/pull/1416. Closing PR.\n. @acenasir Is this PR supposed to be for a particular bug/feature?\n. I've updated the patch and moved the highlight code to the new themes that we use. Should be good!\n. @Johennes This is a neat patch. Seems low risk and adds the benefit of opening reading list links in new tabs. In Bugzilla it was mentioned we should wait until we have a need for this but I don't see the harm in landing this. @st3fan thoughts?\n. Just wanted to check in and see if this was a still something we want to land. If not, would it make sense to close this PR and open the bug up for contributors? It has two r+'s and I don't recall what happened here.\n. @tylerlacroix Does this patch overlap with the work in progress in the bookmarks management UI you worked on last month for https://bugzilla.mozilla.org/show_bug.cgi?id=1243019? If so it would be great to see if we can consolidate this stuff.\n. @tylerlacroix Thanks for taking a look!\n\nI looked over this patch and I'm not sure I can integrate this code because it looks like my patch overlaps this code. The bookmark table code has changed since this was written, and the UI is pretty much done in my patch.\n\nConsidering that this patch is out of date by 9 months and we have a PR open that has these changes against a newer version of the codebase, I'm going to go ahead and close this PR.\n@fruitcoder If you're interested in picking this up again and/or extending it into more UI changes for bookmarks management let me know!\nSee https://github.com/mozilla/firefox-ios/pull/1857 for the additional bookmarks UI work from Tyler's branch.\n. Hey Johennes,\nTried to check this out and run but I'm getting some compile errors. I think it's from the switch to Swift 2.2 / Xcode 7.3. Could you rebase from master?\n. Closing since work from https://github.com/mozilla/firefox-ios/pull/1237 include this.\n. Bitrotted / no longer needed.\n. @rnewman Updated PR with deferred fixes, API clean up, and fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1223538.\n. @rnewman Updated with your termination commit and fixes.\n. Closing this PR as this isn't a good fix for this issue.\n. I think this makes more sense than using applicationDidBecomeActive but I'm a bit worried how this will play out with all of the new NSUserActivity handling code we have for quickActions/TodayWidget. Might be safe to keep it here for now? Unless there is a good reason I'd say we can close this PR and file a larger bug investigating how we want to handle 'background opens' of new tabs.\n. Now that we're on Xcode 7.3.1 I don't think we need this check. I'm going to close this PR but yell at me/reopen the PR if I'm wrong.\n. I just ran the fastlane build script after your fixes and got stuck on sigh doing the code signing since it's connected to your email. Is there a way to configure this to another email?\n. So close! I got it to build using my Apple ID but got a bunch of errors such as:\n\u274c  error: failed to remove /Users/sleroux/Library/Developer/Xcode/DerivedData/Client-cbhfzrpvkymhhqgrbaozbigqzuph/Build/Intermediates/ArchiveIntermediates/FennecAurora/IntermediateBuildFilesPath/UninstalledProducts/iphoneos/ViewLater.appex/id.lproj/InfoPlist.strings: \u201cInfoPlist.strings\u201d couldn\u2019t be removed.\n. Got a different error codesigning Alamofire :(\n\nThe following build commands failed:\nCodeSign /Users/sleroux/Library/Developer/Xcode/DerivedData/Client-cbhfzrpvkymhhqgrbaozbigqzuph/Build/Intermediates/ArchiveIntermediates/FennecAurora/IntermediateBuildFilesPath/UninstalledProducts/iphoneos/Alamofire.framework\n\nI removed the previous two branches that were created by fastlane before running the script\n. @fluffyemily Sent over the logs\n. I ran this after running ./checkout.sh again and I'm getting the missing localise.sh script @st3fan mentioned above but I didn't get the ruby error:\nhttps://gist.github.com/sleroux/ba8e51b54147b12bcdf6\n. Looks like it's there but it's looking in the ../scripts/localise.sh path. Maybe it's relative to the current directory so it should be ./scripts/localisesh?\n. > I'm going to investigate whether this would enable us to have our fastlane implementation in another repository and therefore all branches would get the latest build tools regardless of when they were cut. Thoughts? \nThis sounds awesome! Doesn't really make sense to version our build chain alongside the app. Would we need to make changes to both repos in lockstep at some point like updating dependencies?\n. I checked out the latest and removed any previous branches that we made and getting a different error this time:\nhttps://gist.github.com/sleroux/3293e1973ecfba9cddc9\nThe command I ran was:\nfastlane aurora branch:fluffyemily/fastlane-integration build:1 version:1.0.0 username:sleroux@mozilla.com\n. Yay it worked! I ended up having to git clean -fdx (any cache files locally), cleaning the build folder from Xcode, and re-checking everything out :+1: \n. Would it be possible to split out the marketing snapshot work into it's own PR/branch and keep this one just for fastlane building? You can probably smoosh all of the commits now, reset the commit, then add all the parts except for the marketing snapshots stuff so we'll have a single commit for just the fastlane build integration. After that I can give it a look before merging it in.\nAs far as getting it in 1.x, let's merge it into master for now and set the target milestone flag to 1.3. I'll probably do an uplift pass tomorrow for another TF build so I'll uplift it if it's in master along with the other stuff that needs to go in in one go.\n. If you're not logged into an account, the log out item doesn't appear but the section separator lines still do:\n\nI think to resolve this we'll need to add the log out section only if the user is currently logged in and properly invalidate when the user logs in.\n. Looks like this got out of sync again and needs a rebase. Sorry!\n. Note: Need to add search perf test\n. Looks like the TestAppDelegate's overriden implementation doesn't set the profile property like AppDelegate's implemention does which causes a force unwrap when creating the BVC during tests.\n. I'm just going to fold the login manager work into it's own PR for now\n. Closing since https://github.com/mozilla/firefox-ios/pull/1283 supersedes this fix with a better fix.\n. WIP - Need to clean it up but the general approach I'm going for is:\n1. Instead of TopSitesDataSource using the read-only cursor from the DB query, an array is used instead to allow us to insert/delete items from the data source separately from the queries being made to the database.\n2. Point 1 allows us to separate the deletion and insertion operations on the collection view to happen asynchronously. didRemoveThumbnail now deletes the item from the data source and data array away, makes the new query, then inserts the next top site cells in place of the deleted ones.\n3. The separation in Point 2 helped clean up the methods I had before for deleting items so deletion helper methods are now removed and moved into didRemoveThumbnails.\nStill working out some bugs with fewer than numberOfThumbnails items and a bug where duplicate sites are shown.\n. I've pushed up a cleaned up series of commits that fixes some of the issues I was seeing such as double entries showing up (being caused by a race condition). This PR allows the user to delete multiple items on Top Sites at the same time and rotate without the app crashing or something some weird state. It's kinda neat to see actually. Known issues:\n1. This was happening before but the favicons have a delay and are not always being set in the correct cell. I feel like there's a race going on but I'll resolve that in a different branch.\n. Closing for https://github.com/mozilla/firefox-ios/pull/1394\n. Not sure if it's because of the simulator plugin I'm using to test 3D touch in the emulator but when triggering the quick action without the app in the background, the app freezes up on launch. When the app is backgrounded everything works fine. I can't attach a debugger to it though since it's a first launch thing :( Are you seeing this behaviour on device?\n. Added PR fixes round 2.\n. Okay - everything should be good now.\n. This looks and feels great! Couple of UX nits though:\n- Not sure if its a convention but I find I use the 'Return' button to cycle through results. If we can FindInPageBar to be the text field's delegate, we can detect the return action using textFieldDidReturn and have it navigate to the next result without the need to reach up to the next arrow.\n- Tapping the next/previous arrows for the first time makes the keyboard animate down. This is probably intended but I find myself tapping these arrows multiple times so when I tap on it twice in quick succession I usually end up hitting a page element by accident. Would it make sense to not dismiss the keyboard while find-in-paging?\n. Just noticed something actually when rotating the device in landscape:\n\nLooks like because the footer is fixed it's overlaying the button at the bottom.\n. I think you can fix this by using a static footer assigned here https://github.com/mozilla/firefox-ios/pull/1304#discussion-diff-45872555R59 instead of the dynamic section one.\n. Here are some things I noticed:\n1. After initiating sync for the first time and seeing your Top Sites populate, if you rotate, the favicons are all re-fetched even though they are supposed to be cached. What appears to be happening is that after we download the favicons, we don't invalidate the site data set in the TopSitesDataSource. This causes a refetching each time we get a cell because of this [1]. While this is definitely a bug I don't think that this is the cause of the wrong favicon blurring/icon.\n2. On relaunching from the browser after syncing, not all of the favicons would have properly been fetched. Most of them in my case were there and cached except for one or two which required a refetch. This refetch then goes and downloades the new favicons and asynchronously updates the relevant cells. At the same time there is a refresh that's happening on viewDidLoad [2] to refresh Top Sites. The refresh could finish before the favicons return which would cause the favicons to be set on the wrong cell since we're assuming the same cell we passed in when we called the download method is the one we want to assign favicons to. I think this is the reason that,\n- This issue was not 100% reproducable in all cases since it depends on a refresh and missing icons\n- The reason we're only seeing a few of the icons/blurring wrong instead of all of them being wrong. \nI also added a patch that fixes an issue where when a favicon fails to downloaded we properly set the default icons. They were appearing blank.\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Home/TopSitesPanel.swift#L517\n[2] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Home/TopSitesPanel.swift#L92 (Note: this gets called every time the panel is shown since we deallocate it every time we leave)\n. Looks like there hasn't been movement on this. I see that the bug isn't tracked at the moment so I suggest we tracking+ it and close this PR. I'll log the branch name in the bug for future reference.\n. @rnewman Updated PR with better approach. Thanks Richard!\n. Closing PR for rebased version here: https://github.com/mozilla/firefox-ios/pull/1436\n. Looks like we're not using MOZ_BUNDLE_ID for the app extensions right now. If you take a look at the Client target's build settings under \"Product Bundle Identifier\", it uses the MOZ_BUNDLE_ID correctly but the extensions don't. I've filed a bug to fix this here: https://bugzilla.mozilla.org/show_bug.cgi?id=1236545.\n. Wrong bug number. Closing and remaking PR.\n. Not doing this.\n. Deletion, editing, and menu functions will come in later patches.\n. I'm going to use the same VC for editing. I have another branch I started doing the editing work on where I've swapped out the description UILabels with UITextFields here: https://github.com/mozilla/firefox-ios/commit/a3ea92eecf7d030e360a65c6ac844da737b7e8ed\nI forgot that UITextField has the secureTextEntry property - I'll definitely use that instead of my wonky extension.\n. @thebnich No worries! This can definitely wait until later. Thanks for giving it a look-over.\n. Github seems to have lost the comment when I pushed but the reason the LoginTableViewCell canBecomeFirstResponder = TRUE is in order for the selection menu to appear, the cell needs to be able to handle being selected. In this case, the selection field isn't just the text but the entire cell so it's easier to show the menu. \n. @darrinhenein Here's the first pass at getting the web panel stuff working. Right now only history items are exposed. Load up http://people.mozilla.org/~sleroux/panel.html to see a super simple example of this.\n. Thanks for the feedback @ncalexan!\nFor the first point regarding the FxA and Sync settings, we can definitely consolidate the existing FxAContentViewController and a web-based panel into the same ViewController. This will also enable us to have a foundation for other web-based screens we might want to add in the future. \nCombining the second point, this web-based controller would also be able to implement the WebChannel.jsm wire protocol which would allow us to abstract the API needed for any page we want to render. For example, I notice that in the FxAContentViewController there is some JS <-> Swift code for handling account callbacks. Could this be implemented using WebChannels?\nLastly I feel like this is related to addon support in the future for iOS. CC'ing @jhugman for input!\n. @rnewman I've updated the PR to include the removeLoginsWithGUIDs method and hasSyncableLogins check to properly message the user.\n@tecgirl I've added in the the custom checkmark and fox icons as well.\n. Not yet - I duplicated the code from that PR.\n. Yup\n. Updated with fixes and rebased from master to include fixes from https://github.com/mozilla/firefox-ios/pull/1370\n@thebnich mind taking a quick look at https://github.com/mozilla/firefox-ios/commit/35fddce040589e4b4576ca0476073b2a2fdfda4a? Had to do some hackery to accommodate the custom selection icons we want to use.\n. Thanks for finding that bug. I've added a UITest to check for it as well as a fix.\n. Yup - I would combine these two commits into a single comment and prefix it with the bug number so we can refer back to it in the commit log. Something like:\nBug 1235406 - Refactor ifs to guards using Swift 2 syntax\n. I was able to get it to work but had to wrap the value in a closure which is fine I guess.\n. Hey Takahiko,\nThanks for updating the patch! I've been doing some additional testing on this and found a couple of things:\nI've been able to run into a case where I navigated to an about: url which resulted in the HandoffManager throwing an exception inside updateCurrentURL:\n2016-02-01 10:17:05.791 Client[3533:1228278] *** Terminating app due to uncaught exception 'NSInvalidArgumentException', reason: 'NSUserActivity.webpageURL scheme \"about\" is not allowed.'\n*** First throw call stack:\n(0x182fd1900 0x18263ff80 0x19248ec58 0x1924887ac 0x1001b65f4 0x100326e70 0x100326070 0x1003256d0 0x100326024 0x1838bc804 0x1838bc32c 0x1838a6b44 0x18a82c4e4 0x18a9285ac 0x18a946f34 0x18a7f6fd4 0x18a97cf8c 0x18a7b214c 0x18a7b41f8 0x186793218 0x1867936c4 0x182f88efc 0x182f88990 0x182f86690 0x182eb5680 0x1843c4088 0x187d2cd90 0x10030dd08 0x182a568b8)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\nWe don't support about: urls yet but I think we need to provide some sort of validation on the URL before we pass it to NSUserActivity. For now it would be safe to only allow http/https scheme urls.\nI also noticed that in the scenarios you described above regarding stopping Handoff when in the Tab tray that Handoff still appears. I ran the build on device, opened a new tab and went back into the tab tray and was still able to open using Handoff on desktop.\nLastly, after opening the tab using Handoff on desktop the app becomes unresponsive. I have a feeling that these issues might only be occurring on device and not on the simulator. Are you able to run the app in the device? It can be challenging at the moment with how our configuration works but I can assist in getting that to work if you need help debugging.\n. Thanks for rebasing! Unfortunately we made some large project changes last week that will require some additional rebasing. Let me me know if you run into issues with that.\nI ran this branch again and tried to open the 'What's New' tab that we launch on app updates using Handoff and experienced an assertion error here:\n\nWhat looks like is happening is that the new work we've done for handling Spotlight/3D Touch handling conflicts with the Handoff code since they both use NSUserActivity. The assumption it seems we make is that if an activity is being continued from here [1] we create a new tab which we don't want to happen in the case of Handoff. At the moment, handling NSUserActivities in the app is pretty complicated after implementing 3D Touch/Spotlight for the upcoming release. I think we'll need to figure out how to coordinate adding Handoff along with refactoring how we handle Spotlight/3D Touch to have a unified way of working with NSUserActivities.\n@fluffyemily @jhugman Any thoughts on how we would incorporate Handoff with the existing NSUserActivity work we did?\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Helpers/SpotlightHelper.swift#L115\n. Hey @TETRA2000!\nFigured I would drop in and see how things are going. Looks like it's been pretty quiet for the past few months. Any interest in picking this up further? If not, I'll free up the bug for another contributor and close the PR for later reference.\n. I tried running the marketing lane but I'm getting this error:\nThe scheme 'ClientUITests' has nothing configured to build for Running and has no executable specified to Run. Edit the scheme to configure the Run action.\nI think this got moved to ClientRefTests?\nAlso, I think we should move the marketing/l10n snapshots into their own scheme (ClientSnapshots) instead of ClientRefTests. I'm just afraid that adding them into the RefTests scheme would imply that they are tests when it's really a tool for generating snapshots of the app.\n. Not sure if its just my copy but I tried doing the following after this was merged in:\n1. Modifed fastlane/Fastlane to point to fluffyemily/Bug-1205015-automated-l10n-screenshots\n2. Commited changes\n3. git clean -fx to clean out any previous Carthage/ stuff (similar to re-cloning)\n4. `fastlane marketing'\nI get get the following error:\nThe scheme 'MarketingUITests' has nothing configured to build for Running and has no executable specified to Run. Edit the scheme to configure the Run action.\nI took a look at the schemes for the Marketing/L10N snapshots and they don't seem to have an executable configured https://www.dropbox.com/s/q1e2esds6150kcy/Screenshot%202016-01-25%2009.16.53.png?dl=0&preview=Screenshot+2016-01-25+09.16.53.png/.\nAfter hooking up Client as the executable I was able to run the Marketing snapshots but the snapshot tests failed for the default 'de', 'en-US', 'it-IT' locales:\n```\nTest Suite MarketingUITests.xctest started\nMarketingSnapshotTests\n\u2717 testTakeMarketingScreenshots, UI Testing Failure - No matches found for Button\nMarketingUITests.MarketingSnapshotTests\ntestTakeMarketingScreenshots, UI Testing Failure - No matches found for Button\n/Users/sleroux/development/firefox-ios/MarketingUITests/MarketingUITests.swift:61\n    // go to synced tabs home screen\n    app.buttons.elementBoundByIndex(4).tap()\n    snapshot(\"03SyncedTabs\")\n\nExecuted 1 test, with 1 failure (0 unexpected) in 8.477 (8.480) seconds\n```\nI didn't run the localize string so I could imagine the it-IT and de ones failing but not sure why the en-US one would be.\nFor the L10N run through, I was able to run it right away since the executable was already configured but it only ran the example test so there were no snapshots actually taken. Is this expected?\n```\nL10nSnapshotTests\n09:26:32: \u25b8 \u2713 testExample (3.480 seconds)\n09:26:32: \u25b8      Executed 1 test, with 0 failures (0 unexpected) in 3.480 (3.483) seconds\n09:26:32: Collecting screenshots...\n[09:26:33]: Found 0 screenshots...\n```\nThe snapshots.html file did open afterwards though.\n. @fluffyemily Just one comment - otherwise looks good\n. Looks good :+1: \n. @bkmunar I believe this has been resolved as part of the panel clean up work you did. Is that correct? If so, feel free to close this.\n. Sounds like for now we should not allow modifying the hostname. Ideally it would be nice to have the title be modifiable or default to something more meaningful instead of the domain (Skype instead of https://skype.com) but I don't see us storing the title for websites in logins anywhere.\n. I think the selection problem might be related to it being a web view and not a normal native component. For example, in Mail.app, if I'm in the middle of typing something in the To: field and try to select contents from the body, the responder chain properly resigns/selects the text. My feeling is that the complex layer of touch events in the web view make this sort of transition difficult. I tried the approach of overriding touchBegans on BrowserWebView but that didn't seem to work. Another approach could be to detect the selection though .js, bubble the event to the native side, and resign the current responder that way.\n. I don't know if its a convention but generally I've been naming my branches like so:\nsleroux/Bug1210775-SyncTimestamp\nJust to give some additional context about the branch.\n. :+1: \n. Looks like this is already in master. Closing PR.\n. As mentioned in the email, I think that we should separate 'Speed Dial' from 'Top Sites' for a couple of reasons:\n1. What defines Top Sites is the fact that the more visited sites bubble to the top so having the default sites pinned to the top doesn't really match the use case for this panel.\n2. I'm concerned about having locale checks being embedded in various parts of the data source as this makes it much harder to debug by introducing more code branches to follow.\nAn alternative approach we can take is:\n1. Extract locale checks from TopSitesPanel into HomePanels.swift where we configure which panels to show. Here we can slot in a new 'Speed Dialer' panel without impacting other locales.\n2. Subclass 'TopSitesPanel' for the 'SpeedDialer' and implement the logic for keeping the tiles at the top. Ideally we would refactor 'TopSitesPanel' into a more generic 'Tiled Panel' class but we can address that when we start adding additional functionality to the dialer.\nThoughts?\n. We'll be implementing a new Activity-Stream based replacement for Top Sites which would further differentiate this panel from the notion of a Speed Dailer. I'm going to go ahead and close this PR and file another bug for implementing a speed dialer panel to support the functionality you're looking for.\n. I've since removed the 'enterprise' profiles and have kept in the FennecAurora scheme for now for l10n fastlane compatibility. I'll follow up with reworking the fastlane tools to support various enterprise builds but for now I'd like to get these project settings merged in since it's a real pain to keep it up to date with master :(\nRevised build tools patch to use FirefoxBeta scheme is here: https://github.com/mozilla/firefox-ios-build-tools/pull/20/files\n. Added comment + PR fixes for maybe return type and out-of-range.\n. @rnewman Last update with PR comments. Also, what do you think about squashing all this down into a single commit?\n. r+  - I'll go ahead and merge this in because I too don't want to see all this garbage in my sidebar!\n. @rnewman Updated with better sectioning of logins and a version of bulking the favicons so we do a single query and a single tableView.reloadData call.\nOne issue I ran into with changing the query from singular to bulk is we were relying the relationship of the caller (the single login) to map to the favicons returned since there is no favicon/history/login ID mapping. This is compounded by the fact that logins lives in a totally separate database. One approach I took to avoid adding a favicon/history ID was to do the following:\n1. Provide a list of all the URLs we want to get favicons for and return each favicon with the associated historyURL as a tuple. The query isn't the prettiest (multiple LIKE matching on prefixes)\n2. In Swift, for each of the logins, bundle up the favicons whose historyURL is prefixed by the login's hostname. This is equivalent of the LIKE 'url%' queries being made to find the favicons.\n3. Set the map on the the data source and call reloadData.\nAll of this compresses the fetching and reloading into a single call each.\n. Still needs additional work. Nice to have in the future.\n. So all of the rows in the AuthenticationSettingsViewController actually don't do anything yet. This PR is just to setup the options and UI. I'm working on building the passcode controller next. I've also included the feature flag so we can land this without exposing broken behavior to the user.\n. I can see SearchSettingsTableViewController and ClearPrivateDataTableViewController becoming subclasses of SettingsTableViewController. In general I think any 'settings' page that shares a similar look and feel as the main settings of the app would be subclasses of the SettingsTableViewController. For any new options that require a custom layout, its pretty easy to slot that in as another 'Setting' subclass. That way any custom work we do for a particular screen is easily transferable to other settings screen if we need it.\nIn other words, I see SettingsTableViewController being a part of our toolkit that we can share with the UX team when it comes to designing new settings screens. From the existing designs it looks like there is a common theme to them and creating this subclass will allow us to easily map the UX requirements to code.\n. First off, this is amazing. This feels 'right' and will let us improve our builds time greatly by only focusing on our code instead of our dependencies.\nI ran carthage update --platform ios --no-use-binaries and everything checked out fine. Building the app also worked but when running in the simulator I ran into linking problems. It looks like dyld wasn't able to find the Carthage frameworks. Adding the frameworks to the 'Copy Frameworks' phase resolved this for the simulator.\nWhen running on the device, even after adding the frameworks to the copy phase, dyld wasn't able to link in a library named libclang_rt.asan_ios_dynamic.dylib which was being referenced by GCDWebServer. After some investigation, this library is linked in when the Address Sanitizer flag is enabled in the build scheme. Turns out GCDWebServer 3.3 accidentally shipped with this flag on (which fails to link on iOS devices - supposedly someone filed a radar for) but resolved it with the 3.3.2 release made two days ago: https://github.com/swisspol/GCDWebServer/commit/c6632633f86239cf06a0c060b77d5d23a4f5b6fb\nAnyways after those steps I was able to get everything running smoothly on device and simulator. I've added these changes to a commit on top of your branch if you don't mind so you don't need to add these fixes in. \nBesides the commits and everything looks good :+1:\n. Took another look and added the schemeless host to the query in cases where we still have those in the DB. \nAlso noticed something off with the args/query we were making. The usernameMatch var wasn't being used in the query and the args didn't match up in the case where username IS NULL. Unless I'm missing something I think we should be using usernameMatch in both subqueries?\n. Added UITest for new and new/update scenarios.\n. Sorry about that - I've added a isEmpty check prior to removal now.\n. I've squashed all the commits into one in case we need to back this out later to make things easier.\n. >  Should we be checking the clipboard every time the app becomes active (first starts up) as well?\nThe first launch case doesn't really make sense considering we show the intro tour. However, I think becameForegrounded doesn't get called when the app comes from a cold launch as well. In the second case we would want to check for the URL because we're at the mercy of the OS with regards to being killed when the app is backgrounded. I would latch on to the willActive notification instead.\n\nShould we do some parsing to make sure the URL is a valid one as opposed to \"asdfasdfas\"?\n\nDefinitely. We can simply call \"asdfasdfas\".asURL?\" which will tell us if the copied text is a URL. Remember that the pasteboard can contain any text the user copies so it could be an entire email for example.\nJust a word of note: I would also try to exclude logging that contains any URLs just in case it accidentally gets merged into master but it's obviously fine for debugging :)\n. Since this PR is bitrotten, implements a small part of a feature and is stale, I'm going to go ahead and close. See https://bugzilla.mozilla.org/show_bug.cgi?id=1228089 for any future work.\n. Hey Garvan,\nI haven't done this yet but there some cool instructions here [1] to see what code paths are causing long compile times. We've definitely seen files have various compile times throughout development - especially with the Client target.\n[1] http://irace.me/swift-profiling/\n. Holy smokes...\n@objc dynamic func accessibilityScrollStatusForScrollView(scrollView: UIScrollView) -> String?\nTakes 60 seconds?!\nIt's depressing thinking about the wasted CPU cycles...\nThanks for running this Garvan! Sounds like we could save 2 minutes on builds just by refactoring those two lines.\n. Output of query plan after indexes were added:\nsqlite> EXPLAIN QUERY PLAN SELECT guid, username, password, hostname, httpRealm, formSubmitURL, usernameField, passwordField\n   ...> FROM loginsL\n   ...> WHERE is_deleted = 0\n   ...> UNION ALL\n   ...> SELECT guid, username, password, hostname, httpRealm, formSubmitURL, usernameField, passwordField\n   ...> FROM loginsM\n   ...> WHERE is_overridden = 0\n   ...> ORDER BY hostname ASC\n   ...> ;\n1|0|0|SEARCH TABLE loginsL USING INDEX idx_loginsL_is_deleted_hostname (is_deleted=?)\n2|0|0|SEARCH TABLE loginsM USING INDEX idx_loginsM_is_overriden_hostname (is_overridden=?)\n0|0|0|COMPOUND SUBQUERIES 1 AND 2 (UNION ALL)\n. @rnewman I've updated the PR to include the DB bug fixes and searchWithQuery suggestion.\n. Thanks! I've folded the commits and will land.\n. One problem I've seen is that syncing everything takes a long time but the logins come down pretty quickly. For example, if you were to start syncing, navigate to the logins list, go back then forth, there's a good chance that the logins will already be there. I was stumped as to why the logins took so long to reload after syncing but realized that we only reload the table view when the entire syncing process is finished. Ideally we would reload when login sync is complete which will dramatically improve the time it takes for logins to appear. \nThis doesn't really solve the problem you mentioned though where it might look like a bug to the user. I think an additional UI hint informing the user that we are still syncing might alleviate that concern - like a banner over the status bar or something app-wide to let the user remember that we are in fact still syncing in order to set that expectation that your stuff might not be available yet. I like the idea of showing the no logins screen when the user is syncing because you actually don't have any logins yet. \n. @rnewman Would it be difficult to add start/finish notifications for the each sync engine? I know we leverage the spinLock didSet observer to tell us when a full sync occurs but I'm not sure of the equivalent state change for each synchronizer.\n. @rnewman What would the 'change' be? The change in the login synchronizer state?\n. True. What about using a DB trigger on the loginsL table so that way we get notified on updates/inserts?\n. @rnewman @fluffyemily I added an observer on the existing login change event to the list view. I also attached the login change event to the various sync methods that get called when logins are inserted/updated so now the logins should reload when the logins have been added from sync.\n. @rnewman Good call. I've updated the patch to only notify from the synchronizer:\nhttps://github.com/mozilla/firefox-ios/commit/6f4af964274eddfc1b6db48019f9f817cd70db58\n. @rnewman Updated with comment fixes\n. I'm going to land this after I rebase with the test fixes from https://github.com/mozilla/firefox-ios/pull/1515. Don't feel comfortable landing before I know all these tests pass.\n. @fluffyemily Updated PR with bug fixes and clean up.\n. Going to fold these commits down and merge them in\n. We actually had a test already for checking the normal case above, it's just not in it's own test case:\nhttps://github.com/mozilla/firefox-ios/pull/1497/files#diff-ae0fa7acb8d6a3cb26a48c4401b2961cR164\nI've pulled it out into its own test case so it's more clear.\n. The tests also need to be updated with trys now that BrowserDB's methods throw because StorageTests is throwing errors for all of those methods now.\n. I don't see how we can extract a protocol from SQLiteDBConnection and implement it to always fail when all of the callers of withConnection expect a non-optional result back. Although the callback doesnt get run in the case of an error, we still need to return some value from withConnection that matches the generic type.\n. Ah okay I see now - I was looking at the wrong place. I like this - pretty clever.\n. I don't see anything wrong with the assertion in Part 4. We definitely should assert if we're hitting that callback block with something that isn't a real connection.\nRest of the changes look good and the tests pass for me (except for the ones Emily mentioned not related to this PR).\n. @thebnich Cleaned up the method signature to be update(password:username:)\n. Just noticed that our checkout.sh script won't call the carthage.sh script unless carthage doesn't exist at all. Do we want to call this script on every checkout?\n. Still going through this but I ran it and didn't see my Bookmarks come down. I had one local bookmark, signed into FxA, synced, but no bookmarks came down from the server. I saw this warning in the console though:\n2016-02-25 14:34:44.068 [Warning] [ThreeWayTreeMerger.swift:994] produceMergedTree() > Remote bookmarks not fully rooted when overlayed on mirror. Partial read or write in buffer?\n. Nit: Whenever we display the prompt after selecting the 'Clear Private Data' button, the button is still in the highlighted state after the prompt is shown. Can we add a deselect call somewhere so the button becomes un-highlighted?\n. Looks good but when I run the testClearPrivateData snapshot test it fails entering the fake credentials into FxA sign in by only entering a password but not the email field. Are you seeing this too?\n. Works for me now after the expectation timeout!\n. Good to review now that the other PR has been merged.\n. Based off of https://github.com/mozilla/firefox-ios/pull/1558.\n. @thebnich rubberstamp?\n. @tecgirl Noticed that the string we had requires the lock out time to be an hour. Figured we should add this string in case we want to change it to something else to give us a generic way out. Thoughts?\n. @rnewman @bkmunar Revised PR with comments. One last check?\n. Patch works/looks good! Only question I have is that according to the MDN docs for window.print(), there is also callbacks for onafter/beforeprint [1]. Would these still get invoked if we shim in our own print API?\n[1] https://developer.mozilla.org/en-US/docs/Web/API/Window/print\n. I wonder if we can just get away with replacing the notion of a WrapperCursor with just an array. From what I can see the cursor inside the data source is mostly read-only. We don't really need to move elements within it. It would also clean up all the calls to asArray() we have to convert the cursor into an array anyways. If you go that route, you could follow along with the comments I left about hiding the implementation detail of exposing topSitesCursor behind methods and you'll see how nice it is to refactor without having to worry about changing how external users use the data source :D\n. Lastly, it'd be really great to have some UITests for this once it's flushed out.\n. One thing I noticed is that if I remove the Suggested Site for Facebook, then go to Facebook, a history site appears. Usually the behaviour after deleting a top site tile is that it will never show back up in the Top Sites panel again. I know theres been debate whether or not we should be doing that in the first place but there might be an issue with consistency regardless.\n. When I run the testRemovingSuggestedSites by itself it works fine but when running the other tests in TopSitesTests they all break. Not sure if this is a regression or not but could you investigate why? I feel like it might be caused by a side effect from the new test case.\n. Not part of this bug but we should really have an empty state for Top Sites. Having the first screen the user looks at when clearing Top Sites looks kinda bad :/\n. @bkmunar Left more feedback ^\n. Added a small unit test to verify clearing behaviour on new profile.\n. Fixed PR comments and collapsed commits.\n. Also potentially solves https://bugzilla.mozilla.org/show_bug.cgi?id=1253557\n. I notice that a lot of the code involves the paging view controller, laying out the menu view items with the toolbar, and implementing the data source/delegates for the menu view. I think you could make your life easier by using a UICollectionView and implementing targetContentOffsetForProposedContentOffset to handle the 'paging'. Some advantages:\n1. Cell recycling in the case of switching pages.\n2. A 'layout' abstraction that you can implement if you choose to layout both the toolbar and items in a collection view. Alternatively you can stick with the default flow layout for the items and layout the toolbar separately. I think this would clean up a lot of the code in layoutSubviews you have to calculate heights and such.\n3. Leverage the existing data source/delegate methods UICollectionView gives you.\n. I'm a bit confused as to what purpose the MenuPageView has now that the MenuView has a collectionView containing the items. How does the MenuPageView work?\n. I see what you mean with the 'New Private Tab' button being misaligned. Looks like there's quite a bit of aligning going on with the labels and buttons. Here's an alternative that might be simpler:\n1. Instead of setting the buttonContainer edges to the view, don't set any constraints except for center equal to view. Instead, allow the buttons inside to 'push out' the size needed. This will guarantee the buttons be centered.\n2. Not sure if it's needed but I don't think you need the preferredContentSize set. If the container and buttons get laid out correctly it should calculate the space it needs.\nSome other things I would check out:\n1. Don't think you need to set the view to be an effect view. When I remove it nothing changes. Not sure if it's just caching incorrectly or not.\n2. Instead of having methods for creating the buttons I would just move these to lazy properties. That way they will be created on first access and cleans it up a bit. I would also do the same with the label method.\n. > Also, I noticed the section under \"Sign In to Firefox\" is cut off. Can we apply the same fix there?\nSimilar but different fix I think. Bryan is looking into it for https://bugzilla.mozilla.org/show_bug.cgi?id=1254441. We can probably remove the height delegate calls and just use estimatedSectionFooter/Header height for the auto layout calculations but there are some other rendering issues to contend with there.\n\nIIRC, the main reason I didn't just switch to using AutoLayout to redefine the cell was because we wanted to keep the built-in \"readable content\" margins that center the cell contents on tablets. Is that something we have to worry about here, or are we OK because settings isn't a full-screen view controller\n\nSo running on iPad it looks like the text is slightly offset from the default table view cells.\n\nI bet this is related to the readable content margin you spoke about. I'm torn. Having a custom subclass for cells makes things a lot easier to control but mixing them in with default cells like this is bound to cause issues like this. I think the alternative you did for Focus might be more consistent even if it's a bit jank. I'll investigate.\n. I ended up redoing the patch with the Focus fix since it worked a lot better. PR is here: https://github.com/mozilla/firefox-ios/pull/1636\n. Interesting - are you installing on top of an older versioned build?\n. Filed: https://bugzilla.mozilla.org/show_bug.cgi?id=1257530\n. I was able to combine the two lines into one line using insets. Also I thought I had the lessThanOrEqual because of an issue with ambiguous constraints but testing various devices it doesn't seem to be an issue. Maybe not that the header is using autolayout to calculate it's size it's not longer an issue?\n. The more I think of it, this would happen on a version downgrade if we were testing between v3.x/master. I wonder if that is what caused it.\n. Doesn't seem to be timing out now but I do get an actual test failure that might be related to a race condition or clean up issue:\nhttps://circleci.com/gh/mozilla/firefox-ios/71#tests\ntestProtectorReading - ClientTests.TestLocking\nXCTAssertTrue failed - Multiple read locks were allowed\nClientTests/TestLocking.swift:107\ntestProtectorReading - ClientTests.TestLocking\nXCTAssertTrue failed - Can get two read protectors at once\nClientTests/TestLocking.swift:91\n. I fired up the simulator with an existing synced account, went to delete the first top site, and got a crash:\n_endItemAnimationsWithInvalidationContext:tentativelyForReordering:], /BuildRoot/Library/Caches/com.apple.xbs/Sources/UIKit_Sim/UIKit-3512.30.14/UICollectionView.m:4324\n2016-03-17 14:38:55.193 Client[62167:4877457] *** Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'Invalid update: invalid number of items in section 0.  The number of items contained in an existing section after the update (12) must be equal to the number of items contained in that section before the update (12), plus or minus the number of items inserted or deleted from that section (0 inserted, 1 deleted) and plus or minus the number of items moved into or out of that section (0 moved in, 0 moved out).'\n*** First throw call stack:\n(\n    0   CoreFoundation                      0x00000001070aee65 __exceptionPreprocess + 165\n    1   libobjc.A.dylib                     0x00000001063cedeb objc_exception_throw + 48\n    2   CoreFoundation                      0x00000001070aecca +[NSException raise:format:arguments:] + 106\n    3   Foundation                          0x000000010601b4de -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 198\n    4   UIKit                               0x00000001086b4ac7 -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:] + 15347\n    5   UIKit                               0x00000001086b0d2a -[UICollectionView _updateRowsAtIndexPaths:updateAction:] + 350\n    6   UIKit                               0x000000011a819ce4 -[UICollectionViewAccessibility deleteItemsAtIndexPaths:] + 43\n    7   Client                              0x00000001042bac08 _TFFC6Client13TopSitesPanelP33_C9DFE36B31E426C19626C23F17C1D22924deleteHistoryTileForSiteFS0_FTC7Storage4Site11atIndexPathCSo11NSIndexPath_T_U_FGO6Shared5MaybeT__T_ + 808\n    8   Deferred                            0x000000010996b498 _TPA__TTRGrXFo_iq__dT__XFo_iq__iT__50 + 56\n    9   Deferred                            0x000000010996b152 _TPA__TTRGrXFo_iq__iT__XFo_iq__dT__35 + 50\n    10  Deferred                            0x000000010996b216 _TPA__TFFC8Deferred8DeferredP33_8471EEB727F82F3A241B76FBEA842E6D5_fillurFGS0_q__FTq_14assertIfFilledSb_T_U0_FT_T_ + 118\n    11  libdispatch.dylib                   0x000000010a325e5d _dispatch_call_block_and_release + 12\n    12  libdispatch.dylib                   0x000000010a34649b _dispatch_client_callout + 8\n    13  libdispatch.dylib                   0x000000010a32e2af _dispatch_main_queue_callback_4CF + 1738\n    14  CoreFoundation                      0x000000010700ed09 __CFRUNLOOP_IS_SERVICING_THE_MAIN_DISPATCH_QUEUE__ + 9\n    15  CoreFoundation                      0x0000000106fd02c9 __CFRunLoopRun + 2073\n    16  CoreFoundation                      0x0000000106fcf828 CFRunLoopRunSpecific + 488\n    17  GraphicsServices                    0x000000010d3cdad2 GSEventRunModal + 161\n    18  UIKit                               0x0000000107e4a610 UIApplicationMain + 171\n    19  Client                              0x000000010441e8b6 main + 582\n    20  libdyld.dylib                       0x000000010a37a92d start + 1\n    21  ???                                 0x0000000000000001 0x0 + 1\n)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n(Recorded Frame)\nI have a feeling its crashing because I have more than 12 top sites and the deletion doesn't factor in that a new tile will come in after deleting the first one?\n. I think it might have to do with this removal:\nhttps://github.com/mozilla/firefox-ios/pull/1642/commits/e75ee340d13a5459e2101341c94ce8c7951e10d1#diff-abfc8d88f8fbb974154bce59e22c81a6L218\nIt checks to see if we have enough to add in another tile so instead of just a deletion its a delete + insert.\n. Logically it makes more sense than what was happening before but I was able to find two edge cases where this breaks down:\n1. Starting with the suggested sites, I kicked off a first time sync to pull down my data and when the data came in it appended itself to the end of the suggested sites. The sites should populate ahead of the suggested sites instead of behind.\n\n1. I was able to get duplicate sites when quickly deleting top sites using two thumbs going up and down the list:\n\n[bnicholson: edited to scale down images]\n. Did some more testing and I'm seeing a lot of flickering on the tiles when they are being reloaded. Seems that the tiles that come in after deletion have their favicons flicker on the next deletion. Were you seeing this as well? I'm not sure if this was happening before or not.\n. I tried to turn off the Autoplay setting when navigating to m.youtube.com but when I select a video it still autoplays. Is this intended for YouTube?\n. Also, do you have a test page you were using for the inline video tag? I'd be good to also setup a sample page we can use for a UITest to verify the inline video fix.\n. @cvan Can you rebase this patch with the latest from master? I'll go ahead and land it and file a follow up bug for unit tests so we can get this neat feature in for our 5.0 release.\n. Theres a SharedTests target which contains tests for things like extensions and helpers that live in Utils. We should move the test from ClientTests to there.\n. Looks good. I ran into a weird bug though:\n1. Open badssl.com\n2. Click on the first link (expired)\n3. Select 'Visit Once\n4. Expired page appears\n5. Go back once to error page\n6. Go back again to badssl page\n7. Go forward twice to get back to expired page\n8. Go back\nExpected:\nEither we display the error page again or skip it\nActual:\nExpired page appears again when going back.\nFrom this point on if I go forward and backward the expired page shows up twice in the history.\n. Seeing warnings for two selectors that need to more over:\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Settings/AppSettingsTableViewController.swift#L21\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/TabTrayController.swift#L123\n. Code looks good! Found a couple of bugs though (probably already aware of them from the menu work):\n1. When opening the menu in landscape iPhone and transitioning back to portrait, the popover appears when it shouldn't. Not sure if we want to dismiss the popover and display the modal instead in this case or dismiss the menu.\n2. When displaying the menu, the shadow background animates up along with the modal. Probably something WIP in the menu branch so you can probably ignore this comment.\nLong term, I think we might want to replace the BrowserToolbar we currently have with he native UIToolbar widget. I tried using it for the Tab Tray (https://github.com/mozilla/firefox-ios/pull/1670) and I found it simplified the code quite a bit since it handles the layout for us. I'd love to get your opinion on it and pros/cons.\n. I have mixed feelings over the AppState design/implementation. Some issues I see:\n1. I feel like we're introducing another layer of caching to contend with and abstracting away from the source of truth of when we are in private mode, when the page is bookmarked, etc. I think it might make sense to consider folding these aspects into Browser but I'm not sure how to go about that atm. \n2. Retaining the state as static vars on the AppState enum isn't much different than using globals. Although in a sense we do want some global notion of state, I feel like we can compartmentalize it better and place it alongside existing models like Browser. The other downside of having static vars is it becomes more difficult to mock and test with since we won't be able to inject state.\n3. I'm not sure of the value of having the data live inside the enum. Most places we access the value directly to the static var in the enum which weakens the relationship between the specific enum and it's associated values. I think extracting the data into another abstraction and keeping the enum to just describe the various pages in the app would be cleaner.\nThis problem is definitely a PITA and I'm not sure of the best way to move forward. I think we should bring in the team and brainstorm around it since it seems like a pretty core aspect of the app that we'll want to extend on in the future. Maybe put it on the agenda for tomorrow's team meeting?\n. @thebnich Updated with new string convention.\n. The code in TwoLineCell.swift looks like it could use some love. It looks like we're using layoutSubviews and a private helper class to move around views which seems hacky to me. I'm not sure if this was done on purpose or just some older code that hasn't been modified in a while but it would be nice to 'modernize' this by using autolayout and cleaning up the view setup.\nDon't think we'd block on this bug for this work but something we should consider for technical debt. @thebnich, is there anything I'm missing with this?\n. @thebnich Did you want to update this to use camel casing?\n. This is looking really good overall! I'm excited to see the 'state' lifted out of our classes and into structs. I think this will make it easier to reason about our app.\n\nQuestion: Currently I have set up the BrowserViewController to be the app state delegate for the Tab and Home Panels. Should instead, Tab and home panels maintain a list of delegates that it then runs through and notifies, and the Menu is just one of those? I don't really know if I like this idea. If we want to go that way, we are better off sending out an AppStateChanged notification and allowing any components to register as observers\n\nI think for future-proofing I can see using a NSNotification to be the better option. This way we don't need to worry about linking disparate components of the app together with a delegate. I also tend to avoid using delegates for 1->N relationships since it can get unruly. As long as we're careful about when and how we register/unregister the observers I think this will give us the best flexibility.\nOne minor nit is just the naming of the concrete implementation of the MenuItem to FirefoxMenuItem. I really like the idea of lifting the protocol out to allow for mocking, etc but I think FirefoxMenuItem is also too generic of a name. Maybe something more specific such as PopoverMenuItem, ChromeMenuItem? Not sure what makes sense there.\n. Added https://github.com/mozilla/firefox-ios/pull/1689/commits/ff6a08151d2f4a2be9eaacd6380c087100429d71 to remove the unnecessary authentication for entering 'Require Passcode'  after discussing it with @tecgirl on IRC.\n. @thebnich That's an interesting point. The last commit was added since Robin and I didn't think there was anything sensitive about changing the interval. The scenario you mentioned isn't necessarily 'sensitive' but provides a path for a malicious user to get access. @tecgirl, how do you feel about putting back on the authentication for changing the interval?\n. I don't know if I'm sold on encapsulating logic inside Action, TabAction, etc. It seems that the logic inside the action requires the dependencies to be passed through to it. If we cut out the action all together and just have a function inside BVC that performs the logic it would save us from having to pass these things around. I know the BVC doesn't need anymore code but if the code being executed requires those dependencies and is not used outside the context of the BVC I don't think Action buys us much except for moving the code elsewhere. If we really wanted to move the logic out of BVC we can group up the 'actions' into a single MenuController object and instantiate that inside the BVC to field the calls. \nI'd also like to see if we can leverage more of the Cocoa API for this such as using selectors. I think with the combination of addTarget and a selector we can get the same flexibility but with less, streamlined code. I'm actually thinking a lot about this for the revised URL toolbar I've been working on so I'm down for talking more at length about this.\n. Which files are you missing? Double check that you ran the checkout script in the root directory to pull down any missing dependencies by running ./checkout.sh.\n. Hm I don't recall having that as a dependency in the project. Maybe try recloning a fresh copy of the repo? \n. Thanks for the feedback!\n\nI'd like us to move away from explicitly mentioned button types eventually though, so it becomes easier to start making decisions on which buttons go where based on future requirements (i.e. replacing the share button with the home page button, adding the menu button etc\n\nAre you referring to the class methods constructing the buttons or the need to map the button to the strong types of the existing API? \n\nI'm not much of a fan of the name URLBarView_V2, but I can't really complain about other people's naming attempts when mine are so poor.\n\nYa the name is pretty gross. I also thought of LegacyURLBarView but I'm not sure if that is any clearing. Who knows, maybe at the end of this I'll just end up removing the entire class?\n\nShould we place limits on some of those though? Is there a minimum acceptable location container width? Are there limits to the number of buttons we should display in each of the containers? For example, does it make sense to have 10 buttons on the left of the URL Bar, or 5 in the curve section (if we're going to make this more generic)? Should we have a hard limit that no more than 6 buttons appear in total in the bar? \n\nConstraining this API makes sense but it might be difficult because the limit could depend on the layout. For example, if we use no buttons on the left side, we could fit more on the right sides. If there are no buttons on the right, we could fit more on the left, etc. A possible solution would be to sum up the number of buttons in all containers and assert on a fixed size but even then the location field is flexible.\n. We're not moving the panel icons to the URL bar (for now). Will reopen if this changes.\n. Since you're setting the layer's cornerRadius, you also get the curved portion on the bottom as well:\n\nYou might need to add in a mask layer to the menu's CALayer that contains a CGPath with the rounded corners so it only corners the top half instead of the whole thing.\n. I didn't see it in the PR but could we listen to NotificationProfileDidFinishSyncing and reload the synced tabs view when the sync finishes? \n. Couple of things:\n1. I think I might have mentioned it before but most of the functions in RemoteTabsPanel manipulate various things on the tableViewController instead of RemoteTabsPanel. These functions make more sense as part of a UITableViewController subclass named RemoteTabsTableViewController instead of the parent controller. Not only would this help separate concerns between the two controllers but it will clean up the code a lot.\n2. I ran the app on the iPad 2 and iPhone 6 and I'm seeing different shades of gray for the 'Synced Tabs' button:\niPhone: \n\niPad:\n \nAny idea why this is happening?\n. :clap: :clap: Just a few minor nits for I think we're good to go! Thanks for all the revisions and hard work on this feautre :100: \n. I don't think we actually have this file in the project anymore. @gregstula want to update the patch to remove the Login folder and this VC?\n. Noticed that some of the search input view tests I wrote a while back were having the selector warnings you mentioned in the meeting today. This should fix it!\n. @tecgirl I've updated the PR to include the ellipsis animation if you wanted to verify. Also fixed a layout bug when transitioning to browser from tab tray while sync banner is showing.\n. Looks like there is a regression when I removed that system check code. After rotating, if you try to do the tray -> browser animation it gets messy. I'll investigate.\n. > One question remains. What if someone creates another swift file somewhere else in the codebase and attempts to create a new log file for the corrupt DB logging? (without realizing that one has already been created in SwiftData.swift)\nAn alternative approach would be to change the corruptLogger property definition into a closure like so:\nswift\n    /// Logger used for logging database errors such as corruption\n    static let corruptLogger: RollingFileLogger = {\n        let logger = RollingFileLogger(filenameRoot: \"corruptLogger\", logDirectoryPath: Logger.logFileDirectoryPath())\n        logger.newLogWithDate(NSDate())\n        return logger\n    }()\nStatic vars in swift are lazy-loaded so this won't get called until someone calls corruptLogger. Static vars also use dispatch_once behind the scenes so this shouldn't get called more than once!\n. @rnewman I think I lost your previous comment when I pushed up the new changes. With regards to the comment, I agree that the old commit was lying to the caller saying that the sync operation was not started when in it fact it was - it just failed. I've updated the code to now pass along the error instead of telling the user .NotStarted.\nAlong with that commit I've added a small API to bookmarks that checks to see if there are contents within the buffer for MergedSQLBookmarks. This API returns a list of actions the client can take on the bookmarks. I can simplify this down to Read, Read | Write if we don't want this level of granularity.\n. Ended up changing it to return ReadOnly/ReadWrite states based on if the bookmarks buffer is empty or not.\n. After our chat today I went digging into how the current bookmarks implementation determines what is editable or not. From what I can tell, when fetching folders/children, we inform it of the direction that the request is coming from - either .Local or .Buffer. Currently, we flat out say that all items from the buffer are not editable [1]. I assume that this was because we didn't support bidirectional bookmark sync and were read-only because of it. Now with bidirectional bookmark sync enabled we'll want to make this smarter and only disable deletion if we have unmerged remote bookmarks in our buffer. I don't see using the API I exposed here though. Instead of using the isEditable value from Swift, I was thinking of amending the getChildren query to include the result of the buffer's isEmpty query as the isEditable value. This way the editable value is always true for .Local and determined by the contents of the buffer for buffered bookmarks. Am I way off base here or does this make sense? @rnewman \n[1] https://github.com/mozilla/firefox-ios/blob/master/Storage/SQL/SQLiteBookmarksModel.swift#L303\n. > Does that make sense?\nYup this helps a lot. I'll throw up a patch with these changes. Thanks!\n. @rnewman I've added some logic to perform the checks you mentioned before fetching the bookmarks from the DB. I've also added some unit tests to verify. I believe this should handle all states that you mentioned. \nAn interesting thing I found when writing the tests is that although we discard and create a new database each time using the getSyncableBookmarks method, we actually still retain some state across tests due to the modelFactory being a singleton [1]. This was causing previously added bookmarks to appear in later test cases. Along with feedback for the approach to add in the editable checks, does it still make sense to keep the modelFactory a singleton?\n[1] https://github.com/mozilla/firefox-ios/pull/1780/commits/95e06d1a7cae9404b4589951c2a32e31a080b40f#diff-501066006fdca7138dbe656b8a79d6b6R33\n. @rnewman I've updated the PR to address the feedback. Now,\n1. isEditable is a query that resolves to a scalar value within the existing query - eliminating the other two queries we were making before.\n2. Removed the unused protocol and methods for checking if the buffer contains contents or not since it has been supplanted by the changes to getRecordsWithGUIDs and getChildrenWithParent.\n. Thanks for all the feedback! \n. @user640378 After syncing your fork's master branch, did you also try rebasing master into the branch you were working on? This should overlay your branch commits on top of the updated master. I know the github docs here [1] use merging for updating the fork and you mentioned you rebased but usually if I want a fresh copy of the master from remote I just reset my local copy like so:\ngit reset --hard origin/master\nI always work on feature branches so my master shouldn't have any in-progress commits so this will just reset my master to whatever remote has. From this point I can rebase the feature branch by switching to the branch and running\ngit rebase master\nThis will pull in the master commits and overlay my branch commits on top. Only downside is I then have to force push my branch since the history has been rewritten with the new master commits.\n[1] https://help.github.com/articles/syncing-a-fork/\n. @fluffyemily LGTM!\n. I'm going to go ahead and merge this in so I can pull it up into my passcode branch.\n. Instead of creating a new enum for SyncState, I'm trying to utilize the existing SyncStatus enum the synchronizers use for reporting sync operation status [1]. The original patch I had extended SyncStatus's .NotStarted to include a reason for inconsistent bookmarks but after discussing with Richard it might make more sense to try to infer the current sync engine's state from the data. So instead of keeping a bit stored inside BrowserProfile, we would check the current status of the sync engine by querying the SQLite tables directly. I can see this being used for those times when the user launches the settings screen and you need to know what the current state is. For cases when a sync operation that was running and results in an invalid state, the error would get bubbled up from the merge. Some of this work is here [2].\nAnyways that's more of a long winded way of saying the SyncState enum might change as a result of those changes but for now until that gets sorted out this looks good!\n[1] https://github.com/mozilla/firefox-ios/blob/master/Sync/Synchronizers/Synchronizer.swift#L78\n[2] https://github.com/mozilla/firefox-ios/pull/1780\n. We'll have to coordinate merging this branch with the status bar changes I've made since they both touch NotificationRootViewController. What do you think the best approach would be - merge in this branch first or pull in mine?\n. Looks good! CircleCI seems to be failing though because of the ClientTests target won't compile since you've added the syncDisplayState to the protocol. Just update that and once it's green lit it's good to go.\n. Couple of broader comments:\n1. The bug says this 'Recently Closed Tabs' but the cell and code infers 'Recent Tabs'. Was this intended?\n2. The SyncedTabsButton and RemoteTabsButton look identical. Maybe refactor into one class instead of having two of the same?\n. Looks like the CircleCI pass failed as well. Sometimes changing code in the client can break APIs in the unit tests. Usually running the ClientTests locally should find the issue.\n. When turning on slow mo animations, I notice that the passcode pane view 'scales' in. Looks like the animation from the keyboard observer is firing and the frames aren't setup yet which causes the animation to scale from a frame of 0.\n\nI might be better to add/remove the observers in viewDidAppear and viewWillDisappear instead.\n. Since we already show text to the user telling them to verify their email, I've updated the Sync Now button to be grayed out/not tappable until they verify instead of a Sync Disabled message. I can also replace the text if the gray is not enough. @tecgirl \n\n. @fluffyemily I've updated the PR with the animated property for show/hiding notifications along with some test code to try it out with a mocked out syncFailed call.\n. I can't seem to reproduce this issue on master or this branch but I can't see how this would fix it. From what I can see this patch only changes the scope of the variable from local -> URLBarView but since we always assign countToBe prior to the if condition, the logic hasn't changed.\nAs a side note, I'm noticing other weird behavior when rapidly opening regular/private tabs from the menu inside the Browser. For example, I'll usually see double private tab count buttons appear. In general I think our UI code doesn't handle fast user input well.\n. Additional comments:\n- Instead of calling setupTableView in the init call, I would move it to viewDidLoad to align it better with the view controller\u2019s lifecycle with views. You could also move most of the logic inside the setupTableView call into a lazy load property on the VC. Just need to make sure not to call tableView prior to viewDidLoad.\n- Looking at the menu in RTL pseudolanguage, it looks like the text isn't aligned correctly on the left side\n\n. @tylerlacroix looks like this got out of sync with master. Could you rebase? I'll merge it in afterwards.\n. From a UI perspective:\n1. Looks like the gray used is darker than the lighter gray we use else where for similar screens. I believe the correct gray is UIConstants.TableViewHeaderBackgroundColor.\n2. When setting up constraints, prefer leading and trailing vs left and right as the former respects RTL (right -> left) layouts where as the later doesn't\n3. When testing flexibility of the UI there are a couple of handy debugging tools you can use to simulate the various constraints that can occur in different locales and regions. Under the scheme run options (cmd/alt/r) you can configure the app to use Double-Length Pseudolanguage to simulate really long strings that can occur in localizations and the Right to Left Pseudolanguage  property to simulate the app in regions/languages that use RTL layouts such as Arabic.\n4. A significant challenge in developing UI for this app is that we not only supports iPhones and iPads of various sizes but we also fully support landscape mode as well. A couple of things I noticed is that when in landscape, the editing area is very small and on iPad it seems very large. I'm not sure if there are mock ups for iPad but I can see presenting the edit screen as a form sheet being more effective than a full screen table view.\n5. Lastly, when dealing with form field data like this, UITableViewController handles resizing the scrolling viewport of cells when the keyboard is displayed. At the moment it seems to not be resizing, thus making it difficult to edit while in landscape mode. I would investigate this since it's really nice to use compared to some other methods we've used else where in the app with KeyboardDelegate. and KeyboardHelper.\nI apologize for the large dump of feedback but if you have any questions about anything feel free to swing by and we can go through some of it! Building flexible UIs for with some many constraints can be a real PITA.\n. Couple of additional comments:\n1. I notice that the animation for the toast uses the transform to 'scale' it in from the bottom. During the animation, it looks squished. Instead of scaling, is there a way we can slide it in from either the bottom or from beneath the tool bar? \n\n1. Since we're adding the undo toast to the window, it lacks the knowledge of when the menu is shown. I think managing the toast in the BrowserViewController would be the best option since you'll be able to dismiss when the menu shows and slide in the toast from below the toolbar.\n\n1. Double check for when the title of the toast expands to two lines. Is the Undo button suppose to be top aligned or centered?\n2. Lastly, when checking this out I had a couple of errors from missing strings for Strings.TabsDeleteAllUndoTitle and Strings.TabsDeleteAllUndoAction.\n. Rebase from master and I'll merge this in.\n. Heh looks like this needs another rebase after I merged in your long press back forward list patch :/\n. Looks good! Really like the shouldCloseMenu check instead of the moving-of-the-frame hacl.\n. @st3fan When I was running the fastlane scripts to build FennecAurora I noticed that we didn't update the bundle ID for the Today Widget to be TodayWidget. Is this right?\n. For some reason I couldn't check out this branch but was about to check it out with hub. https://github.com/mozilla/firefox-ios/tree/mozilla-fluffyemily/Bug-1240815-downloads-message-string is the same but rebased from latest master to resolve strings conflict.\n. Merged from https://github.com/mozilla/firefox-ios/pull/1868\n. Nah I was just going to fold them from the github green button so they will show up as the description text to the PR title.\n. I tried running some of the bug cases on my device but every time I lock the device the app crashes behind the device's passcode lock screen. Were you seeing a similar issue?\n. Yup looks like the same crash.\n. Just realized I made a similar patch for the selector bug and forgot about this one https://github.com/mozilla/firefox-ios/pull/1888. I would just remove the selector changes from this patch and I'll give this another test.\n. Looking at the improvements @flodolo did in https://github.com/mozilla/firefox-ios/pull/1885, it might be better to use similar verbiage like \"Label for\" instead of \"Option\" and \"Title\" to clarify the context of the strings.\n. Updated the PR with Richard's comment.\n. Are there any links you were using to test this out? Every .txt page I visit properly renders in the browser :(\n. Looks good - I think just one more nit (topTabsViewController -> lazy loading) and this should be good to go.\n. > I think an optional would help reduce memory for iPhones because it wouldn't have to initiate it unless it's on an iPad.\nlazy would do the same thing since it will only load it when someone first accesses it. The optional makes sense too though - especially if we want to set it nil later on. I don't see us ever assigning it to nil though. I'm good with this :+1:\n. @fluffyemily I've updated the patch to just nil out the message.\n. This is still showing me the bookmark sync warning message notification everytime since the defer call is always showing the notification regardless of what syncMessageForNotification returns [1].\n[1] https://github.com/mozilla/firefox-ios/pull/1910/files#diff-1806bc807450a894013313c45975a48cR248\n. Thats.. what I thought! \ud83d\ude01 Sounds good.\n. Landed! https://github.com/mozilla/firefox-ios/pull/1907\n. TL:DR; Need some more time to investigate converting of old version of our dependencies to Swift 2.3.\nI dove back into this today to see what it would take to land this and get us working on Xcode 8 when it comes out soon and discovered some big issues. Good news is that most of our dependencies have either updated their mainline release to Swift 2.3 or have branches/releases specifically supporting it. Bad news is that because we haven't updated our dependencies in a year or so, some of these libraries have updated their APIs and the Swift 2.3-ported version of the library is the latest-and-greatest.\nFor example, two libraries I've discovered so far that have updated their APIs since we've updated include Deferred (https://github.com/bignerdranch/Deferred/releases) and Alamofire (https://github.com/Alamofire/Alamofire/releases). Taking the older version of Deferred and converting it to Swift 2.3 doesn't require any source changes but I haven't tried it on Alamofire yet which might have issues considering its a pretty large library. I'll continue to investigate and see if we can get by with taking our older snapshots of our dependencies and converting them to Swift 2.3 just so we can use Xcode 8.\nLong term, this is really bad. We need to make sure we keep up to date with these library changes considering changing landscape of Swift. Alternatively we can find Objective-C dependencies instead to avoid binary compatibility issues but that seems like a step backwards. We should probably also clean up where we are getting our dependencies from. Some of our libraries are coming from open branches on people's forks of the original project which isn't a big deal but we should find a way to standardize and organize this (maybe put them under the Mozilla org?).\n. I've updated the Cartfile to point to Swift 2.3 compatible dependencies. As for Alamofire and Deferred,\n- Alamofire 3.5.0 as some API changes from the current version we're using (2.0.2). From what I can tell, the only change is in the completion handler closures and how it passes the response data back. Instead of 3 values, its now just 1 response object containing these three values. We'll need to go through each of our targets and make the updates.\n- For Deferred, I forked the existing fork @fluffyemily had and made a small commit to make the framework that it spits out compatible with Swift 2.3. Since the code didn't need any changes, Deferred should just work without any updates to our codebase. We should eventually look to update though.\nAfter the Alamofire updates we should be good to go for now in Swift 2.3!\n. Overall this PR looks great From a broader code perspective, I would look into splitting up TopTabsViewController into smaller, more specific files. Right now, the cell subclasses and views used inside of them are located in the middle of the file between the extension definitions. It might be a bit unwieldy to create a new .swift file for each cell but maybe a single .swift file containing cell/reusable views along with the views they make use of (BezierView, etc). Moving these internal helper views into private scope would also clean up the API a bit as well.\nAs for the collection view data source/delegates for TopSitesViewController, I think it's OK for them to extend directly off the view controller since the file isn't large after extracting the cell/view subclasses but in the future I would look into breaking these apart from the VC to avoid MVC (Massive View Controller).\n. @tylerlacroix Almost there! Just some more nits and favicon work and I think we're good to go.\n. Also just found a small UI bug. When tapping on the URL bar then going in and out of the tab tray, the share button appears slightly below the input field on the right side..\n\n. Forgot to mention, before merging this we'll need to wrap it in a feature flag so we can turn it off in case we don't ship this feature.\n. Just ran this with your recent changes to add the feature flag. When turning it OFF, the tabs button doesn't seem to be working on iPad.\n. Hey @varkor thanks a ton for picking this up! There were a ton of changes needed to be made in the Client/Sync targets and that was no small task. Really happy to have these changes made so we can just wait for the dependencies to update instead of the other way around!\n. Nice, simple fix! I noticed that along the way you merged in master multiple times. Usually if you're trying to pull in the latest work from masters it's easier/cleaner to rebase instead:\ngit rebase upstream/master\nThis way the commits will get pulled in as is without trying to merge them and overlay the remote commits with any commits you may have locally.\n. I think we need to restructure/rethink how we handle authenticating the user when enter private mode. Having the logic baked into the TabTrayController and used outside of the context of that view controller sounds problematic from a logic separation and memory standpoint. I'm not sure the best way to tackle this but maybe we can jam on vidyo for a bit and see where we can refactor this to make it more modular?\n. > Under what conditions does BrowserViewController not have an associated TabTrayViewController?\nThe TabTrayController should actually be nil most of the time since when navigating back to the browser from the tab tray, the associated view controller is deallocated. \n\nif only it was omnipresent.\n\nYa we had similar issues when implementing the menu since it relies on if we're in private mode or not to display certain menu options. \nActually now that I think of we'll need this check in the BrowserViewController as well since we can toggle private mode from the top tabs area on iPad so we'll need it in at least two places. As far as implementation goes, wrapping the logic in an object which we can inject into both view controllers would be ideal. Looking back, I don't really like how I implemented the static AppAuthenticator object and VC extension on SensitiveViewController as it's difficult to reason about locally and seems too global. \n. Couple of issues I've found so far:\n1. I don't recall the exact steps but I was able to experience a really weird animations (private tab overlapping normal) followed by a crash here [1] by opening regular then private tabs from the bottom menu. After relaunching, the app crashes after being prompted for touch ID.\n2. After opening a blank private mode tab, the colors of the transition looks buggy. Might be related to the background color change you made above:\n\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserTrayAnimators.swift#L125\n. The refactoring you did looks great. I think having the state and check logic in the TabManager makes a lot of sense \ud83d\udc4c.\nI have concerns though about this patch though - not from a code perspective but from a functional one. I feel that this will be a difficult feature to land given the number of ways we can transition between normal/private tabs. All of these ways have a chance of producing regressions - especially the changes needed to the BrowserViewController which was janky to begin with. Add the top tabs work which gives users additional ways of switching on iPad only and it sounds like a mess.\nWith all of that said, I'd like to see if we can get this rock solid before we land it. I think including some UITests would be a must for this to validate against future regressions. Given the work we have planned in the next while, there shouldn't be that much code changing from beneath you so having this branch go a bit long running won't be that bad.\n. Also, I notice that when updating from master you're merging it into your local branch. Instead of producing merge commits, you can rebase from master to overlay your commits on top of the new ones from master without producing these:\ngit fetch to get the latest\ngit reset --hard origin/master to update your master (make sure you're on master locally first)\ngit rebase master to pull in the new commits from master onto your branch (make sure you're on your feature branch)\n. This is looking really great. The tests work well on both iPhone and iPad :+1: I think we can probably land this. I found some bugs with switching modes on iPad but I don't think it's related to the private tab authentication work:\n\nMaybe rebase from the latest master and verify that this branch doesn't add any additional bugs? If not we can go ahead and land this.\n. Sounds good. In that case, I'm going to land this PR then \ud83d\ude2c\n. Seems to work but I'm confused as to why this would prevent the crash. When I tried the reproduce the issue on master, the crash I saw was related to incorrect number of items in a collection view (probably the top tabs) but I don't see how this patch would fix that issue since it doesn't touch the collection view. I wasn't able to reproduce on this PR though. Any ideas?\n. Ah gotcha that makes sense. Thanks!\n. Looks good - just need a rebase before I can merge it in.\n. I'm not sure if we have a good way of enabling/disabling tests based on device since this test should only run on iPads. I think an ideal solution is we toggle tests on/off at the scheme level but that would require creating another testing scheme just for iPad. For now I would just exit the test early if the device is not an iPad.\n. Looking good so far though! Looks like you have some of the simple cases down for switching and checking tabs. I think some other cases that would be useful would be:\n- Close all tabs behaviour\n- Undo closing of all tabs\n- Opening tabs from context menus\n- Closing/opening additional ones and interactions with the tab tray\n. Looks great! If you're finished with this branch I can merge it in.\n. - I notice that when I scroll a page down somewhat slowly, there is a black gap between the bottom of the URL bar and the web content. I think this might have to do with either the change to the header constraint -> offset from top or the calculating occurring at scrollViewWillBeginDragging.\n- I'm able to get the scrolling in a state that hides the URL bar completely while display the black background where the URL bar should be by slowly scrolling a few pixels down on amazon.com and letting go. Might be the changes with the new supressToolbars logic.\n\n. This is a neat approach! I didn't know you can use CADisplayLink in this way. It looks better but I still notice a small white gap between the top of the content when transitioning the URL bar when at the top of the web page but is a lot less noticeable so I'm good with that.\nTaking a step back, I notice the bug is supposed to address showing the URL bar when the user has reached the bottom of the page. Currently the URL bar only animates in if the user pulls down again while at the bottom. I think there might be a way to make this even better by showing the URL bar when we know the user will end up at the bottom instead of requiring them to pull again. I think the delegate method I mentioned before can do this! (https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIScrollViewDelegate_Protocol/#//apple_ref/occ/intfm/UIScrollViewDelegate/scrollViewWillEndDragging:withVelocity:targetContentOffset:). If we see that the targetContentOffset.y value is >= contentSize.height, we know the user will end up at the bottom when the scroll finishes. We could just start the animation right away knowing this so by the time the user is at the bottom the URL bar appears.\nWould that work?\n. I think using the delegate to get the target offset works pretty well and seems more natural. I found another fixed header bug on a site when running the app from this branch vs master. When running this link [1] on master, the fixed header moves to the top of the screen when the URL bar animates away but stays in place on this branch. My gut tells me that this is a side effect of the constraint change made from the URL bar -> top of browser.\nIf we didn't want to do parity with Safari and have the bars animate in using the delegate method, would that simplify this patch down quite a bit? With that, we might not need the CADisplayLink observer or the constraint change. That feels like a lower risk way of accomplishing this bug. \n[1] http://www.nytimes.com/2016/07/24/technology/they-promised-us-jet-packs-they-promised-the-bosses-profit.html?hp&action=click&pgtype=Homepage&clickSource=story-heading&module=mini-moth&region=top-stories-below&WT.nav=top-stories-below&_r=0\n. > What do you mean by not having the bars animate in? How would they appear in that case \u2014 just by suddenly appearing on-screen?\nSorry - should have been more clear. \n\nIf we didn't want to do parity with Safari and have the bars animate in using the delegate method, would that simplify this patch down quite a bit? \n\nI meant instead of trying to emulate Safari's behavior where the user scrolls to the bottom then scrolls again to reveal the URL bar, we forget about mimicking that behavior and stick with showing the URL bars when the targetOffset is past the height of the contentSize with the idea being by not supporting the Safari behavior, this patch becomes simpler because we wouldn't need the changes to the constraints or additional logic to suppress bouncing. \n. I ran through this again and noticed a couple of UI issues:\n\n1. When animating between the web view and tab tray, the minified URL bar view appears during the animation. Note that I initially loaded a private tab first then switched back to a normal tab for the demo gif. Not sure if that matters.\n2. When in private mode, I think the minified URL bar view should take on a private mode theme to match the URL bar view.\n. Awesome! I would have thought it was something else more complicated as well but this works like a charm. Thanks for looking into this long running bug \ud83d\udc4c\n. Shifting work over to this PR https://github.com/mozilla/firefox-ios/pull/2025\n. @rnewman Figured I would open up a PR for consideration early to get your feedback on the code. The code tries to accomplish:\n- A functional wrapping around the stateful nature of the new batch API. Consumers of a Sync15CollectionClient don't need to worry about keeping track of batch state as it is handled internally by the new batchPost API.\n- Replacement for the existing 'chunk' uploading logic in TimestampedSingleCollectionSynchronizer with the new batch API call.\nThings missing:\n- Adding additional X-Weave-* data to the header to aid the server in failing fast. Not sure if we need this on iOS.\n- The current implementation fails when no batch token is present from the batch start call. Not sure of the cleanest way of handling this. Probably fall back to the original implementation of chunk uploading?\n- Tests...\n. Couple of points for clarity:\n\nSimilarly, we should ask our collection client for a batch client, and use that for uploads.\n\nDo you see storageClient requesting a Sync15CollectionClient vs Sync15BatchCollectionClient or internally refactor the existing Sync15CollectionClient to use a batch or single client for posting?\n\nDefining an interface makes you think about the character of the problem. \n\nRegarding the first question, would this interface lift the existing methods of Sync15CollectionClient into a new protocol that is implemented by single and batch variants or do you see this interface as a way for the existing to Sync15CollectionClient to proxy it's post requests to the correct implementation internally?\nThe benefits and every time else makes a lot of sense and sounds like a much better approach to the problem. \nAs an aside, I really like hearing and discussing approaches to writing code for the existing sync codebase. I'd like to try keep the code as consistent with the existing model of implementation as possible. In the future, would it be better to document the changes in English instead of code to collaborate on architecture prior to coding?\n. @rnewman \nPushed up a commit with my first take on the revised transactional-like API discussed in this thread. \n1. Removed batchPost call from the CollectionClient\n2. Added new beginBatch call to CollectionClient which returns an instance of a Sync15BatchClient\n3. Sync15BatchClient has API for committing the transaction (commit) and a call that wraps the posting of records within this batch (uploadRecords).\n4. Factored out shared post-ing logic from CollectionClient into POSTClient15 which is passed into Sync15BatchClient to reduce duplication of post logic/dependency injection for unit testing.\nI've also started to update the synchronizers to use the new batching API. For the most part the API seems to work pretty well but I have a question about the use of the onUpload callbacks that get sent in. It looks like the current use of this callback is to advance the timestamp in the mirrorer for the BufferingBookmarksSynchronizer and to indicate locally when records have been marked for deletion/synchronized in the case of logins. Is it correct to say,\n\nThe semantics of a batch post should match a single post. That is, with regards to timestamp, we shouldn't advance the timestamp or indicate records have been deleted/synchronized until after the batch commit?\n\nIf so, passing in the onUpload callback still makes sense but just needs to be called post-commit on the batch instead of each upload. Unfortunately this muddles the meaning on onUpload from a consumer standpoint. Maybe a rename makes sense? \nAlso, if this is all off base, feel free to let me know!\n. @rnewman  And the saga continues!\nI've pushed up a commit which (I think) addresses all the comments mentioned. Some highlights:\n1. Instead of waiting until the commit before talking to the server, records are sent when the batch client has enough to send.\n2. Serialization and error checking is handled at the point of adding records instead of waiting until the commit.\n3. Payload and BatchMeta encapsulate limit checking and properties for keeping track of how much data we've inputted into the payload and how much we've sent respectively.\n4. Removed explicit non-batch behaviour. When sending records as part of the start, if we don't get back a token, we just did a POST, so we don't need to do anything special. Just invoke the callbacks and move the timestamp and continue onwards.\n5. Move the ifUnmodifiedSince timestamp forward when committing requests to the server.\nI think this cleans up a lot of tangled stateful behaviour I was doing before.\nAlso, I haven't touched the tests yet so that will most likely fail \ud83d\ude2c\n. Related to the headers being sent back and forth,\n1. Should I also include the X-Weave-* headers in our requests from the batch client? This documentation [1] shows sending this information along with the request to give the server a heads up. Shouldn't be difficult to add since we already have those calculations in the client.\n2. My current assumption with how X-If-Unmodified-Since works is that a collection is unmodified until either a batch commits or in the case of unsupported batching, the post completes. The timestamp shouldn't move forward for payloads requests sent during a batch, correct?\n[1] https://github.com/mozilla-services/docs/pull/60/files#diff-f817ccb87b7caca4fb26e0f4dc2036aeR524\n. > My current assumption with how X-If-Unmodified-Since works is that a collection is unmodified until either a batch commits or in the case of unsupported batching, the post completes. The timestamp shouldn't move forward for payloads requests sent during a batch, correct?\nI'm also getting confused by the difference between this and the usage of lastModified in the code. I'm looking at using the new batch client in the IndependentRecordSynchronizer which passes along the lastModified value through the chain and returns a DeferredTimestamp.\n. Pushed up some changes for handling timestamps and started to replace the LoginSynchronizer/IndependentRecordSynchronizer code to use the batching client. Couple of questions:\n1. I've replaced the uploadRecordsinChunks method to use the batching client but haven't touched the uploadRecords(by) code. Looks like the by parameter is used to control the number of records we send per a post but now with batching is this still needed?  I can see us keeping it around to have control over the flow of records to the server instead of always trying to fill payloads to the max but not sure if its worth it.\n2. I'm trying to connect to the staging environment to test out the batching API but none of the existing FirefoxAccountConfigurations seem to work. When I try using the StableDev configuration which uses staging token server, I get back unauthorized from the token server. I feel like I'm missing something here...\n. @rnewman \nAlright I think I got a better version of this for you to look at.\n- I refactored the BatchingClient to better support adding multiple records by making the flow more synchronous in nature. \n- Fixes various bugs that were happening at edge cases. For example, when batching is supported and a single payload was being sent, a batch was started by not completed. In the case of a single upload, batch=true&commit=true are sent.\n- Added more test cases to cover said edge cases.\n- Removed the modified property from POSTResult in favor of using X-Last-Modified instead. Now the ifUnmodifiedSince timestamp moves forward using that instead of the old JSON property.\n- Added a working staging configuration for testing against the actual API. From what I've seen in my tests with syncing bookmarks/logins, it seems to work pretty well \ud83d\udc4d\n- Address other comments such as using Sets for better performance when finding modified/delete records, comment issues, etc\nOne important change I made that's worth mentioning is now the onCollectionUpload callback is called for every batch start and commit instead of just the commit. The start part was missing before which I think is incorrect since we want to update our time stamps with what we received at the start of the batch then move forward when the batch completes.\nLastly, I've included a new Sync scheme so you can run just the Sync unit tests with.\n. Added some more commits to fix up the review comments and a slight rewriting of accumulateRecord to fit records better into batches. I ended up scraping the Batch/Payload structs and replaced them with counts that match more closely to the info/configuration endpoint (postBytes/postCount/totalBytes/totalCount). The payload abstraction was getting in the way of fitting records better and I think this cleans it up even further.\n. Also shout out to my unit tests for letting me constantly refactor this stuff \ud83d\udcaf\n. Addressed the minor comments along with cleaning up the addRecords method. The problem with accumulateRecords before was that it wasn't very explicit. When we were able to accumulate, we returned nil. When we couldn't, we return an upload operation and forgot about the record which required the double-add logic in addRecords. I think this makes it a lot more clear by separating it out a bit. accumulateRecord now throws so now we try to accumulate a record. If we can't, the error contains the upload operation which we execute and chain an accumulateRecord call to for handling the missing record. \n. Also, regarding the OpaqueToken thing for the BatchToken, the server keeps sending it as a Number so whenever I try to parse it as a String from POSTResult it never works. If this is truly not a number, should it be coming from the server as a string instead of a number?\n. I've run through a bunch of manual testing scenarios on both production and staging and feeling pretty good about this. I'm going to go ahead and land this so we can test in our beta audience for the upcoming 6.0.\n. Patch works but I'm a little concerned over the existing code we have for the OpenInHelper feature.\nIn the other cases of passbook/PDF, the openInView is a bar that runs along top (or bottom, I forget) of the browser that provides a button the user can tap on to either save to passbook or iBooks. The ShareFileHelper is unique in that it displays a popover. Looking at the existing code, the helper was not built with iPad in mind since the required sourceView of the popoverPresentationController was never set. Passing in the sourceView into openInView works but breaks the abstraction.\nInstead of shoehorning in the sourceView into the openInView property I propose we rethink the factory abstraction here. Simplest approach would be to take the ShareFileHelper out of the OpenInHelper since doesn't really align with other open in options. \n. When I run this, the downloads prompt displays every time I navigate to a website. I think something related to the logic changes in the decidePolicyForNavigationResponse got mixed up.\nThe more I look at the existing solution of using these helpers, the more I want to rethink the abstraction. One of the motivations behind putting these in helper objects was to try to reduce the amount of code in the BrowserViewController but I think the cost is in weak abstraction over handling unsupported MIME types. I'm not sure what the solution looks like yet though. \nI think the best course forward would be to stick with the original patch and file a follow up to reconsider how we have unsupported MIME types in general.\n. > Do you still think it'd be best just to use the original solution?\nYea I think so.\n. Only thing I would change is having the pop over appear from the share button in the URL bar instead of the text field:\n\n. Thanks for taking a look @ncalexan!\n\nI feel like this is addressing the problem at the wrong level. What should happen is that each sync engine should surface it's state explicitly.\n\nA bit further up the stack we receive an EngineResults object which contains a result for each sync engine [1]. The reducing of the states into a single state happens one stack frame up in displayStateForEngineResults. \n\nThat is, the sync engines should surface the state .DisabledRemotely\n\nWe have something similar we might be able to use. The SyncStatus.NotStarted enum has an associated reason for why it hasn't started. One reason being EngineRemotelyNotEnabled [2]. We can use this to better deduce why we never started the sync operation for a particular collection.\n\n@sleroux is that cogent?\n\nPretty much. We can determine what to show more intelligently by digging into more of the details of each sync and reducing into a state that makes sense for the user instead of this more brute approach of saying everything is good. \nOther than .EngineRemotelyNotEnabled, are there any other NotStarted or Partial states that should not result in a warning? The original approach of saying anything not .NotStarted or .Partial results in an error isn't working. I'd imagine that Android has similar logic to determine what to display when there are issues with syncing. I wonder if it's possible to translate that into our states. \n[1] https://github.com/mozilla/firefox-ios/blob/master/Providers/Profile.swift#L684\n[2] https://github.com/mozilla/firefox-ios/blob/master/Sync/Synchronizers/Synchronizer.swift#L103\n. @farhanpatel I've updated the PR if you want to take another look or if @rnewman / @ncalexan want to feel free.\n\nI would go so far as to say you should switch over all of the result enums and decide which ones you do want to show messaging for. Some such states will be a problem indicator only if they are prolonged.\n\nI was thinking along the same lines. The latest commit I pushed up switches on the various reasons at a more fine grained level to determine what the display status should be. Since the UI only supports showing a single state at this time, I reduce all the errors and pass back the last, worst error. For example, if all engines were successful except for one that was stale and another was offline, the aggregate display state would be the offline one.\nI've also extracted out the sync state resolving code into its own struct for now for easier unit testing. I'm not 100% clear on what each reason should return (warning vs error) so feel free to comment inline if I've missed some.\n. Updated PR with minor nits and fixes. Filed https://bugzilla.mozilla.org/show_bug.cgi?id=1291718 for follow up to handle errors better with contextual info/time.\n. I remember discussing in triage that we wanted to display the back/forward list on larger devices (landscape 6+, iPad) in a popover instead of being full width. Is this still correct? cc @tecgirl \n. @varkor I think this is ready to go. Was there anything else missing? If not I can merge this in.\n. Couple of thoughts:\n- The cell is named ASVerticalScrollCell but it scrolls horizontally. Should it be named ASHorizontalScrollCell? Maybe I'm thinking about it differently.\n- Instead of using a UICollectionView or manually laying out the cells inside your own UIScrollView, a nice balance would be to use a UIStackView for each 'page' and add the pages to the scroll view. Unfortunately stack views are iOS 9 only. There would be some great wins here as far as reducing complexity though since you don't need to lay things out and the page abstraction works nicely with how we're presenting the cells in the UI. Maybe creating a ASHorizontalPageView to encapsulate the layout for now would be something we can do now and replace the implementation with a UIStackView in the future?\n- Usually I find UICollectionView is a great tool for many jobs but I wonder if using a separate view for each device would simplify things greatly instead of trying to make a single UI work for both. Getting a UICollectionView to work like a table view can get annoying - like getting the sticky headers to work. Going with the view per device layout has some other benefits such as enforcing decoupling of the data sources/domain logic from the views. I can also see it being difficult to start building a unique experience for iPad while not causing regressions or changes to the iPhone layout. To handle cell reuse, we can also make cell wrappers and refactor the cells into their own UIView subclasses.\n- Related to the last point, I'd also try keeping the data source/delegates into their own objects where it makes sense. The more we can break the coupling between the view and data source, the easier it will be to wrap some the data-fiddling stuff with unit tests. It'd be nice to start moving away from using UITests to validate data in the UI.\n. You mentioned you already found a couple of bugs but I'll just note the ones I came across here just in case.\n- When the user scrolls the AS panel we should hide the keyboard to show all of the panel. I think the old top sites panel had a tap gesture for this.\n- Since we're not hiding the keyboard when the user scrolls, when reaching the bottom of the panel, there are still items to be scrolled that are hidden behind the keyboard. We should inset the table view to handle the new viewport when the keyboard is up. We have used the KeyboardHelper class in the past to handle that but that's kind of janky. The best way of handling this is to actually convert the panel to a UITableViewController if possible. It will handle all of this for free!\n- Missing highlight tap states for the TopSiteItems\n- Probably noticed already but the background colors of the top site items keeps changing whenever I swipe between pages.\n. @farhanpatel @bkmunar Back to you guys! I would normally add a feedback+ flag but this PR is on 3 different bugs so I'll just say it here.\n. I wonder why the deferreds were causing race conditions. I've seen similar issues when I was working on the top sites layout back in the day and remembering it being caused by the non-serial nature of the deferred tasks. Looking at the code replaced with the completion blocks, I can't see how the computation model differs than the deferred approach but I'll take a closer look later. I'm down with using the completion blocks if it fixes the problems \ud83d\udc4c\nI did some quick testing on the PR and encountered a few bugs:\n- I was able to crash by tapping on the 'Learn More..' link in private mode shortly after authenticating from coming back from the background. Don't think I have a solid STR but it might have to do something with switching between modes and backgrounding that causing reodering/index crash in the collection view.\n- Coming back into the app after being backgrounded with touch ID flashes the contents of the tab tray momentarily before hiding and displaying the authentication prompt. After a few tries I was also able to by pass the prompt entirely. Tapping on the mask button when in the same asks me to prompt for authentication when leaving private mode. I think I got into this state if I tried to background the app before the prompt is shown for touch ID.\n- On iPad, when coming back from the background, the tab tray contents are shown while the prompt is displaying - should be hidden.\n- On iPad, I was able to get into this weird broken state when background the app before the prompt was shown while in BVC:\n\nI think there is still a few gnarly bugs with this feature that we need to work through. Might be best if we back out the patch on master and do some focused testing on a separate branch. Another option we can do is wrap the code that implements the feature in a feature flag so we can toggle it off if we don't feel that it's ready for shipping. I'm worried that this approach might not work though considering the scope of changes that is required by the feature.\n. > Visual issues, because lots of things were being Deferred on the main thread, and so (it seemed) different parts of the UI were being updated on slightly different frames, which led to vertical-wipe effects, rather than all the theme changing at once.\nMakes sense. I can see the reasoning around frames/deferred execution to be tricky here for sure.\n\nThe reason these bugs weren't caught by the UI tests was because I just thought to implement tests with changing the privacy mode, rather than actions that were indirectly affected by the changes (e.g. simply opening new tabs). These would probably have been caught by the top tabs UI tests, but they haven't been set up with CI yet, and I didn't think to run them myself. I'll do that once these bugs have been fixed, this time!\n\nNot a problem at all. There will always be bugs that come up even in the face of extensive UI automation - especially for this feature. A lot of the problems that are coming up are rising from the technical debt we've incurred around the BVC/TabTray. We're starting to reach a point where adding additional features to these components is becoming increasingly difficult.\n\nI think you're probably right about the issues \u2014 it might be best to roll this back and do some more extensive testing. \n\nI think if it wasn't for all the non-verified work we have on master we might be able to get by but keeping it on master and pulling in fixes but I think optimizing here for stability for 6.0 is key considering the distribution of people working on core browser features at this time. I'll go ahead and back out the private authentication stuff. Would you be able to reopen the PR and pull in these bug fixes on top of that branch?\n. Thanks for making the new PR and bringing the fixes over. I haven't taken a look at the code yet but ran some tests on the iPad Air 2 simulator. Found a couple more issues. Not sure how many are already present on master from top tabs work or not though.\n- Launching the app after building the new branch on an iPad Air 2 simulator crashes it to crash when trying to add a tab from the top left add button while in normal mode.\n- When launching a new private tab from the menu on iPad, the background color of the selected tab becomes dark themed slightly after the panel/url bar background does. Not sure if this is related to presenting the touch ID prompt or an existing bug with the top tabs implementation.\n- Backgrounding the app, reentering, and tapping 'Cancel' when the passcode prompt is displayed crashes the app. Looks like it's crashing here [1]\n- Turn on Touch ID for private mode. Navigate to tab tray on iPad Air 2, background the app and come back. Enter a mismatch finger. Navigating to 'Enter Passcode' presents a blank passcode screen and shows the touch ID prompt again. Pressing cancel shows the passcode entry screen as normal. Also, after pressing cancel, the tabs in the background switch to normal mode and entering the passcode doesn't toggle private mode afterwards.\n- Following the above steps but in the browser view causes the app to crash when tapping on the second touch ID prompt.\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserTrayAnimators.swift#L124\n. @mauryat We've recently updated master to work with Swift 2.3 and when I tried to run this branch there seems to be some minor errors. Would you mind rebasing from master and resolving these for Swift 2.3 / Xcode 8? Thanks!\n. Thanks Maurya for the continued work on this!\n. First off, this looks flipping amazing \ud83d\udc4d\ud83d\udcaf I'm really digging the transition off to the side and the showing of the hairline border below. Code looks pretty good - just some nits.\nI found a couple of issues:\n- The console is printing a bunch of ambiguous constraint errors. I think these are probably caused by some of the updates to the constraints your making when transitioning.\n- When the bar is collapsed and you rotate, the positioning gets a bit messed up:\n\n- The lock/url text looks a bit off center. I think this is the case in general but I noticed it while in split view:\n\n- Small thing but I notice that when transitioning on iPhone, the tabs button looks like its going diagonally up instead of off off to the side. Maybe see if we can have this appear going horizontally?\n. Looks good! One minor thing I noticed is that on iPhone, after rotating, the URL bar appears but on iPad it still shows it as minimized. Also, on iPad the text becomes un-centered when rotated. Can we just show the URL bar after rotating on iPad as well?\n. @mauryat Looks like there were changes made to TabScrollController since this patch was created. Could you rebase?. @LiuDeng I'm interested to hear more about some of the problems you're having with the TabTrayViewController. Do you mind opening an issue on Github so we can move the conversation there?. Usually this error indicates the dependencies were not downloaded since the Deferred framework is one of the first ones that's linked in from Carthage. \n1. Double check to see that you ran ./bootstrap from the root of the project.\n2. Currently the codebase only works on Xcode 7. If you've used Carthage with Xcode 8 in the past you may need to switch your xcode build tools to point to the Xcode 7 toolchain instead using xcode-select -s /path/to/xcode7\n. @rnewman Thanks for the suggestion to the view on local bookmarks. With the changes to the query and the adjusted view, this looks a lot simpler and seems to be a much faster query. I'll follow up with some measureBlock tests on the query. When you get a chance, could you give this another pass?\n. Updated query for easier reading: https://gist.github.com/sleroux/07f060b594903eb23bdfc3df642493a9\n\nCheck whether you need this wrapper select. \n\nI guess SQLite doesn't like handling LIMIT on queries that are about to be UNION'ed so the suggestion was to wrap those queries in a SELECT * query to work around that.\n. > Are you planning to add support for Hiding items from Highlights? Similar to how TopSites work.\nGood question. I'm not actually sure. Also makes me think - does highlights also include what we want to show for Top Sites or are we keeping that algorithm the same?\ncc @bryanbell\n. @rnewman I've rebased from master to support Xcode 8/Swift 2.3 and address the UNION issue. I think by using max(visitDate) in with the GROUP BY statement we'll always select the one with the date if there is a bookmark as well. I've also added a isBookmarked flag to more explicitly indicate that the visit is indeed a bookmark instead of relying on a NULL visitDate for that info. \nI haven't tested this yet with remote bookmarks since I'm seeing an issue on iOS 10 with sync but I'll look into that this afternoon.\n. Also noticed that the default icons look squished on the iPhone 6 9.3 simulator:\n\n. > Just to double check, we can guarantee that the URL given to getAudienceForURL will always have a scheme, right?\nLooks like we can since it's used against our own hardcoded URL for the token server https://github.com/mozilla/firefox-ios/blob/master/Account/SyncAuthState.swift#L118 so I think we're good.\nI've found some other places that might be a concern with stringify-ing scheme and added a small patch to fix those too.\n. Oops! Still learning this Github review feature and accidentally hit approve. Probably want to change the string before we merge.\n. > I don't really like this solution - I can't help thinking that there must be a better way to detect trait collection on iPad multi tasking than dismissing and reopening the menu, but I can't think of it right now.\nI think the only minor improvement I can see is using the traitCollection's userInterfaceIdiom property instead of the macro. If we want different behaviour between iPad/iPhone I don't really see a way around it.\n. > (they seemed to disappear once I bookmarked a page and they would never come back)\nMy guess is that if you're able to bookmark the item, it wasn't a bookmark to begin with which means it became a highlight because it matched the criteria for 'non-recent history' [1]. Once you bookmark it, it follows a different algorithm for determining if it is a bookmark [2]. Seems like it's one of those things that's working as expected but doesn't really make sense. It might be better to not invalidate the highlights after bookmarking so you see 'stale' data while you're still on the panel. I'm not sure when the best time to invalidate it is though. Moving away from the panel? Moving in/out of the home overlay?\n@bryanbell, have you seen or had this kind of issue on desktop?\n[1] https://github.com/mozilla-mobile/firefox-ios/blob/master/Storage/SQL/SQLiteHistoryRecommendations.swift#L22\n[2] https://github.com/mozilla-mobile/firefox-ios/blob/master/Storage/SQL/SQLiteHistoryRecommendations.swift#L38\n. @bkmunar I spoke with Bryan and the best thing to do for now is not do a full reload until we move away and come back. If we need to update the row, we can update the individual cell instead of the whole list.\n. Also just noticed: I think we can now update the 'visited' text on the highlight cell with the bookmarked state/icon. Can we add that to this patch?\n. > I'm not quite 100% sure what CGAffineTransformIdentity does.\nCGAffineTransformIdentity resets the transform matrix of the view to the identity matrix - essentially putting it back in it's original place. The reason its call here is if the user rotates while in the tab trab and wants to animate back to a browser, we reset the matrix to identity and move it to the correct starting position for the new orientation.\nI ran this PR and I'm seeing a potentially related issue where if I have one tab open in reader view and another showing the reading list home panel, when switching between the tabs I see the reader bar visible during the animation into the reading list panel. It disappears after the animation is complete but is visible during the animation.\nAn easier fix might be to check to see if the tab we're animating from/to is reader mode enabled and show/hide the reader bar altogether.\n. >  Probably some user prefs being saved or something.\nI'd be interested in seeing whats going on. From what I can tell, the menu's state gets updated in a few places such as when the page changes and when it's dismissed. I have a feeling the culprit is viewDidLayoutSubviews since we don't have control over when that gets called since its a system thing. I wonder why we need to do that on every layout pass.\nBesides that I think the patch is probably something we want to explicitly check for anyways.\n. > I'm not sure I quite have the hang of squashing commits yet\u2014let me know if there's anything additional I should do here.\nNot a problem - Github has a nifty 'Squash and Merge' button that does it automagically.\n. @rnewman I was trying to test this but ran into https://bugzilla.mozilla.org/show_bug.cgi?id=1309581 \ud83d\ude22 Assuming that will work, what's the best way to verify this? Should I see a native notification on desktop about the tab being sent + which device it came from?\n. Yup. I'll update the bug to be in 6.0+.\n. Hey Bunn thanks for the PR! Although this approach works, it might be a more simple fix to add\ntableView.deselectRowAtIndexPath(indexPath, animated: true) directly to the SettingsTableViewController [1] so we don't have to worry about adding a deselect call for each AppOption. This way we don't have to worry about viewWillAppear or any other lifecycle annoyances. \n[1] https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Frontend/Settings/SettingsTableViewController.swift#L531\n. > It's a minor difference but I didn't wanted to change that behavior. Should I do another PR with your suggestion and close this one?\nGood point. I didn't notice that we had the select until move away behavior instead of the deselect immediately. Looks like the system apps use the keep selecting until return method so I think you're approach would be best.\n. One thing I forgot to mention is that it would be great to have some unit tests for the different mail providers and formatting the mail URL. Don't need to do this for this PR though. I would file a follow up bug for that.\n. > If we're removing indexPath at row N, won't indexPath be wrong if sync deleted anything <N? Aside from deleting the wrong item in the UI, I think that would cause a crash if N were at the end of the list since indexPath will then be out of bounds.\nYup this would definitely happen. Thanks for catching this.\nI suppose the simple solution to reloading prior to deletion won't work. The only way I can see this working is if we generate a diff or change set from reloading and update the index path accordingly. This was the approach I was initially thinking of doing but tried to avoid it as it involves changes to how we handle data flow from bookmarks. \nAnother option is to keep the bookmarks panel always in sync with the bookmarks store. This is the more conventional approach where any time a write occurs that would change the contents of the folder, a notification would be fired and the panel would invalidate. I'll dig through the syncing code to see if there is an ideal place for this.\nLastly, the 'cover up' solution would be to just ignore the delete if we see that syncing has changed the bookmarks when we're about to delete. Or disable delete when we're syncing.\n. @rnewman Ready for round 2.\n. @rnewman I've paused on getting the protocol implementation working after having issues on the BookmarkPanel's end where it was expecting everything to be a concrete BookmarkFolder. I've instead continued on with this approach.\nI also found an issue when deleting a bookmark with an account connected with desktop bookmarks. PrependedBookmarksFolder wasn't overriding removeGUID.. so that was causing issues.\n. The optional return value is pretty gross but having the rework the hierarchy feels like a bit of a stretch for this patch. I'll file a follow up.\n. @st3fan Looks like this won't work :( I tried to submit a version to iTunes and got this error:\n\n. No bug attached so I figured I would just assign a few people on it in case someone wants to double check it.\n. Also that SQL change commit is gone. That was for another branch =)\n. I'm going to go ahead and land this for testing in tonight's nightly.\n. > Also, recent history for me doesn't even appear in the awesomebar by string match, so I think there's another bug.\nNope - just the recommendations. \n. Updated the PR to explicitly only have invalidate calls and a reloadAll call.\n. Patch looks great. I like the use of the .Partial result status when the light goes red.\nI tested it with my sync account (probably not nearly as large as yours) and notice a slight delay/flicker in loading the history panel. Even with the flicker it makes the app feel sluggish. I've actually found this to be the case with our other panels as well though but not as severe.\n. @LiuDeng You also have the option to tap in the corner of the cell to remove/close the tab. Is that a better option?. Oh I see. The reach to the top of the screen to close the tab is the issue. I thought you were referring to the amount of distance needed to swipe the cell away.\nI agree. I'd imagine in most cases users would be only a few tabs open on mobile devices so the interaction of reaching to the top of the screen would happen often. I think in this regard Chrome has done a good job by making the tabs full sized for easier reach. I personally find Safari's tab management pretty annoying since you have to try selecting between the other tabs.. UC browser one is pretty nice. It feels very similar to navigating between apps on Android where you can scroll forwards/backs to reveal the tab you want to delete near the bottom of the screen.\nI've filed a bug to investigate option: https://bugzilla.mozilla.org/show_bug.cgi?id=1319421\nThanks for the feedback!. @shree007 This is actually already an option! If you go to settings and turn off 'Compact Tabs' you'll see a single column layout for the cells.. @rnewman Updated with the changes to static.. > I'm happy with this for now, but as the truth comes to light, things are looking pretty gross, no?\nYes, very much so \ud83d\ude2d . Filed follow up https://bugzilla.mozilla.org/show_bug.cgi?id=1323248. @rnewman Moved the guard into the callback so we only strong ref it if it already hasn't been deallocated.. Cleaned up failed connection stuff and added comments for future SwiftData enthusiasts.. I'll see if I can fix this without having to revert so ignore this PR for now.. I'll go ahead and merge this so I can uplift for the build. Oops forgot to leave a comment. Patch looks great! I would try to use the local webserver if possible instead of connecting to the internet for the favicon tests though.. @farhanpatel This should fix the broken tests on BB!. @farhanpatel First in a series of PRs to clean up our codebase a bit. Getting tired of seeing random files laying around. There's more to be done but I'll put those into new PRs so I don't overload one. \nLet me know what your thoughts are on cleaning this up!. @farhanpatel Added the changes. Mind if I merge this into master now that we're starting the 7.0 cycle?. Note: This is built on top of https://github.com/mozilla-mobile/firefox-ios/pull/2293. >  now we'll have didRemoveTab(oldTab) -> selectTab(oldTab,newTab)\nIs what we want though? Like if I'm using top tabs and I remove a tab that I'm not currently on, the selection doesn't change - I stay on the same tab. In this case, we probably don't want the selectTab method firing.\nMaybe not directly related to this patch but I've run into issues in the past with TabManagerDelegate and call ordering. I think the crux of this issue was how we're essentially emulating a broadcast event pattern using many delegates when in Cocoa-land we should probably be using notifications. The logic model that makes more sense here is that TabManager is a singleton/service that the BVC/TabTray subscribe to. It holds the source of truth for where and what tabs are. The use of delegates kind of muddies this up.\nMaking that kind of change might be pretty intrusive but it seems that it not only effects top tabs but tab management from other sources such as Today/View Later tab opens so it might be worth considering. I wonder if it makes sense to use the top tabs work as an excuse to revisit tab manager in general instead of trying to patch it in.\n. LGTM \ud83d\udc4d My highlights are already looking much better!. Also to note:\n\nValidation errors from bookmarks will be in another patch for https://bugzilla.mozilla.org/show_bug.cgi?id=1324558.\nActually sending the telemetry will probably happen else where and will rely on serializing the NSNotification report from the sync client to send to the servers.. > This feels pretty messy, so I'd like to see time spent making it cleaner/clearer/less likely to be wrong.\n\nOne thing I noticed in the desktop implementation is that their collection is only in one central place which handles everything about a collection [1] where-as we have the logic implemented in unique ways across our different engines. I don't think that's necessarily a bad thing since each engine is somewhat unique but it would be nice if we can reduce the amount of similar code across all of these engines to reduce errors. Any thoughts about consolidating this across engines?\n[1] https://dxr.mozilla.org/mozilla-central/source/services/sync/modules/engines.js#748. Comments for re-flagging feedback @rnewman \nI went back to the drawing board with this patch and cleaned up how we were collecting sync stats. Instead of passing through a SyncStatsDelegate to all of the engines, each engine creates a SyncEngineStatsSession [1] which captures the download/upload stats along with timing the sync. When the sync is finished, the session object is passed alongside the .Completed SyncStatus enum as an associated property [2]. Once the engine finishes, all of the results are bubbled through to the existing endSyncing call where the stats are unpacked and logged (for now). Instead of having the SyncOperationStatsSession be a shared mutable property, it gets created and passed through the deferreds from syncSeveral/syncWith. I've also exposed the InfoCollections metadata so I can grab the returned server timestamp to use for stats session. Lastly, I've threaded in a why enum which tells the session why a sync was started.\n[1] https://github.com/mozilla-mobile/firefox-ios/pull/2324/files#diff-a7d3d9920fa098baa4c1802c71828d4aR158\n[2] https://github.com/mozilla-mobile/firefox-ios/pull/2324/files#diff-a7d3d9920fa098baa4c1802c71828d4aR79\n[3] https://github.com/mozilla-mobile/firefox-ios/pull/2324/files#diff-7a45ce0d70d55bdf297fcacd47e4e874R1211\n. Weird. I can't comment on the last comment you made in the review. Anyways,\n\nStill should use effect.\n\nI don't think I can use effect here because I need the result value to check to see if it failed. If the deletion failed then the effect block won't get invoked.\n. > I'm not a huge fan of having to thread this kind of state through a program, but waddaya gonna do?\nI'm not a fan of it either TBH. I had a hard time coming up with alternatives though. Any suggestions? I think the patch is fine for landing but just for curiosity.. Thanks for the indulgence.\n\nThis is the classic use for aspects. Rather than add your own timing code, you implement some kind of wrapper/interceptor that calls through to the original code and times it. Unfortunately, you don't just want timing and success, you want detailed operation counts (behavioral logging), and that's difficult.\n\nI've seen this done in other iOS applications using method swizzling but I agree - keeping track of the sessions would be difficult. I'm also not a fan of swizzlin' as it usually leads to sizzling bugs.\nI had  WIP patch that used NSNotifications to implement (4) but it felt too disjoint from the sync code since it wasn't as clear when a sync as a whole started and ended.\nI like 3/4 though. From what I understand the goal is to move the stateful-ness of telemetry into the stateful layer of the code and make inferences from the app level. To your point of granularity it would seem that this would also be the most accurate approach as well.\n. Addressed all of the non-name change comments and cleaned up Data/json.swift a bit. I've filed a follow up issue here for renaming https://bugzilla.mozilla.org/show_bug.cgi?id=1334131.. Oops - forgot to leave a review comment. Mostly nits. Just a question about the MemoryLayout value.. >  Why are we setting and clearing homepage prefs each time we create the profile?!\nI believe this is to accommodate the changing of what the default home page is for Firefox China vs the rest of world. Looks like this doesn't change the user's preference if they've selected one - just what the default option is. At least that's what I get from the comment and the code that makes use of it.. @farhanpatel looks like this includes some warning fixes from @fluffyemily recent PR. I would rebase from swift-3-migration after that lands to dedupe.. @fluffyemily added the last instance of unchecked bounds. Hey @flodolo,\nSorry - looks like I got mixed up with some of the past w.r.t the localization stuff.\n\nThat's not the reason we have a svn export in the script. It was introduced after we moved to GitHub, not completely sure why. The comment seems to push against the idea of using a submodule too.\n\nI wonder too why we weren't pulling it in as a submodule if it was in git all along. I would think having it as a submodule would make it easier for re-running as you could update the submodule before running easy enough. I generally don't like using submodules in git but I think it might make sense in this scenario. I've only used them for library dependencies and that was a nightmare compared to Carthage/Cocoapods.\n\nUhm, not really. We only have one repository and work against master, that's why we need to ensure strings are not removed between releases, if there's still the risk of shipping a dot release that needs them.\n\nWe'd probably want to pin the commit from the l10n repo for a particular release on that release branch. I'm not sure the best way of facilitating the adding/removing of strings for dot releases though. Maybe formalizing our string deprecation process would solve this? I know so far we've been trying to keep strings we want to remove until the next version and don't outright delete them until then.\nFor example, if ship the string \"Welcome\" in v6.x but aim to remove it after v6.0, we would keep the string in the code base until we branch for the v7.x release. At that point master would be tracking v8.0 and it would be safe to remove the string from the l10n repo because the assumption is the next thing we ship is v7.0\n\nHow do you define shipping locales in this scenario? Would that process remain the same (shipping_locales.txt in root)?\n\nI think so. As the shipping_locales.txt gets updated on the release branch, the beta/release builds would pick that up automatically and exclude non-shipping locales.\n@Delphine - related, are there any pain points from the localizers in the feedback loop from creating the localizations to seeing them live in the app? I know we've used screenshots in the past as a way to get feedback but I wonder if there is something in the automation process we can do to give localizers/contributors a way to modify the locales and see them quickly. @st3fan is more familiar with the screenshotting aspect of this so it's more a question to learn more about how the current feedback loop is setup.. @flodolo @Delphine Thanks for all the feedback. I'm going to rewrite this proposal to only focus on the L10N changes so we can go in depth on that. Closing this for now.. Full commit log https://github.com/mozilla-mobile/firefox-ios/pull/2363. @ncloudioj Pings should now be sent to the production server with the exception of developer builds. There won't be any data until we publish the next nightly build though.. Closing this PR because BB freaked when I changed the base from master to v7.x. . Restoring branch so I can land it in master also once I figure out how it affects contributors.. > Oh gosh. Trying to write any code in BVC causes my macbook to spin up the fans and everything lags \ud83d\ude22\nI wonder how many battery cycles have been spent because of BVC. We should just refactor it for the energy savings!. Updated patch to use for loops and was able to successfully validate a new build/upload to TF without issues. Merging.... We used to do a form of tagging pre-7.0 but that seemed to stop working when I updated our build automation. We should definitely look into this for 8.0.. Thanks for adding this! I completely forgot about the issues with push notifications and personal certs. Just need to revert the references to Xcode 7 and I'll go ahead and merge.. @rnewman I've updated the PR with a new extension on JSON named stringValue which will return the same string value as the old JSON library (sans pretty print). \n\nDoes the SwiftyJSON change also alter the handling of nil \u27a1\ufe0f null in the output? I know they make that an option, but I'm not sure what the old behavior was, or if we rely on it.\n\nSwiftJSON seems to properly convert nils to null so we should be good here as far as mapping to the old behaviour.. Thanks for the quick review!. v7.x version of already-r+'ed https://github.com/mozilla-mobile/firefox-ios/pull/2551. > Please say \"writtingOptionsKeys\" is a typo on your end, not a misspelling in the library\u2026\nNope that's the library. Looks like the author has since updated it and fixed the spelling.\n\nDo you still need the .utf8?\n\nNope. That's a different API :) . I've gone ahead and landed this on v7.x - @rnewman unless there are some additional things you want resolved could you go ahead and approve this? Thanks!. Going to close this in favor of @justindarc's patch which fixes the reader mode issue this patch introduces.. PR referenced in last comment: https://github.com/mozilla-mobile/firefox-ios/pull/2575. The flow works correctly now but I get an unwrapped nil exception crash at launch on https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Helpers/FxALoginHelper.swift#L202 because of accountVerified. This was on a build which I was already logged in but never went ahead and registered for push. Is there a chance that we could end up calling the loginDidSucceed callback without assigning accountVerified? I think there might be some places in didLoadProfile.. Yup changes look good. You'll just need to rebase from master and push that so I can land the patch.. Nope - you can use the same PR \ud83d\ude4c. Hey @jacobwhite  - thanks for the quick fixes! I notice that we have some test cases for the other events that get reported. Would you be interested in adding test cases for these new events? You should be able to follow the same pattern that is setup in ActivityStreamTests. It might be a bit tricky to mock out the actions though.. Just a heads up - If you're looking into adding tests for this, I've recently pushed up some new tests along with additional ways of mocking:\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/ClientTests/ActivityStreamTests.swift\nIf you have any questions about how to approach it feel free to ask!. @jacobwhite We're hoping to land this patch soonish if possible. If you want, would it make sense to split up the tests portion of the work into a new PR? I'm fine with landing this one as is and have the tests be follow up work.. Sounds good - could you rebase this with the latest master? I'll merge afterwards.. Let me know if you can rebase this some time this week since it's something we'd like to put into our next beta release. I don't mind forking the branch and rebasing it as well if you're occupied :D. Not sure what that option is but I notice that you've been merging in master periodically into this branch to keep it up to date. I think merging the latest master into this branch should do the trick.. @jacobwhite Give this a try:\n\nCheck out master on your local repo.\nUpdate your local master copy from the mainline (Mozilla) repo. There is some good documentation on how to set this up here: https://help.github.com/articles/syncing-a-fork/\nSwitch to your feature branch\nRun git rebase master to overlay your commits on top of these commits.. No worries - I'm not sure what happened on this branch either with regards to the merging. I'll cherry pick the commits you made onto a new one and merge that in. Thanks for all the work on getting this PR ready to go!. Sure! Feel free to close this PR and open another for the new branch.. Hey @jacobwhite, I've gone ahead and picked up your commits and put them onto another here just so we can get this in our upcoming 8.0 beta build:\n\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2684\nI'm going to go ahead and close this in favor of the other branch.. No problemo \ud83d\ude04 If you're interested in picking up some other bugs let me know!. Interested in picking up https://bugzilla.mozilla.org/show_bug.cgi?id=1359865?. Seems to be compiling for me but I'm using Xcode 8.3 (thanks for the auto update Apple). Strange that it would be different though. Now that 7.0 is release, should we start migrating BB to use 8.3?. @rnewman Added the new query and added some clarity to the counting bookmarks API. \nSince we don't use TestPilot on mobile and we will probably need to A/B test this with our production audience I'm not sure of the best path forward in landing this with regards to the possible PII issues. What are some ways we can anonymize this data?. Thanks for all the tips @rnewman.\n\nYou need to get data steward sign-off before adding additional data recording or submission to the product; they might also have suggestions.\n\nAgreed. I've filed https://bugzilla.mozilla.org/show_bug.cgi?id=1355564 to track this.. Marking bug as WONTFIX since the query no longer directly affects rendering time.. @isabelrios I think what's going to happen is that once you fix the nightly tests, BB will still fail because of this. Since Github blocks merging unless BB is green, it might make sense to cherry-pick this commit into your test fix branch and close this one.. I mentioned in slack that I would tackle https://bugzilla.mozilla.org/show_bug.cgi?id=1358154 as part of this PR but I'll open a new branch for that. \nBack to you @farhanpatel!. @rnewman I've pushed up the query change and also made this PR point to master so I don't forget to downlift it.. Moved WHERE clause into subquery!. I think the existing highlights tests cover testing this behavior since if we aren't able to generate highlights from this bulk insert, those tests would fail but if there is an additional test case that would be helpful let me know \ud83d\ude2c. Code changes looks good but the tests don't compile because of the changes to the sendItems API. Can you fix that before landing onto master?. @Sdaswani These would be set up directly in Buddybuild. Feel free to ping me the keys and I can get the variables setup!. Going to land https://github.com/mozilla-mobile/firefox-ios/pull/2679 before I merge this in . Cherry-picked commits from https://github.com/mozilla-mobile/firefox-ios/pull/2679 so I'll go ahead and close this PR.. Looks like it complained about the removal of Leanplum and the removal of PLCrashReporter at the same time. Should be fixed up now.. Looks like the latest failure is from an orange test we have so I would ignore that.\nThe failure before that looks to be codesigning related. Could you try rebasing your branch from the latest master? \nIt doesn't look like it's failing because of anything you did though so I wouldn't worry about that.. Looks like the same issue is happening on master. Investigating.... Test looks solid @eoger. When I run locally I see one failing test though that might be related to these changes:\nMetaGlobalTests:testMetaGlobalModified() L537 - Assertion Failure.\nAre you seeing this on your end as well?. Note: The BB integrations will fail for this since it's using the wrong scheme. Here's a previous integration to show that it works:\nhttps://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5911d039fdd4bb0001b83c3f. Not related to the PR but figured I would mention it anyways:\nIf we plan on updating the OpenSSL dependency for ecec we'll need to make sure to compile it withno-async since by default OpenSSL will make use of what iOS considers private APIs. This prevents us from shipping the app to the app store. \nI've found that using https://github.com/x2on/OpenSSL-for-iPhone works great for getting the right flags setup and smooshing together the static libs for use in the simulator and the different device architectures on iOS.. @jhugman Changes look good! I'll go ahead and r+ this on Bugzilla.. @jhugman I've updated the PR to include some discussion items from the bug. Could you take a quick gander \ud83d\udc40\ud83e\udd14. Sync ping docs for reference: http://gecko.readthedocs.io/en/latest/toolkit/components/telemetry/telemetry/data/sync-ping.html. @farhanpatel Just wanted to double check - Did you address the screenshot blurring bug? Wasn't sure if I should revisit this yet or not because I don't see any changes that would effect the blur in your review comments commit.. Ah great. I was looking for something related the screenshot but hiding the menu on rotation works just as well!. I'll land + uplift this.. @justindarc @eoger Thanks for all the great feedback! I've added a few patches that should address all the comments. . I think the source of truth for if we are in private mode is within the tabManager.selectedTab.isPrivate. It's not the most ideal thing but it might be fine to use for now without a larger refactor. A possible hack around the issue is doing something like:\nswift\nextension UIApplication {\n    static var isInPrivateMode: Bool {\n        let appDelegate = UIApplication.shared.delegate as? AppDelegate\n        return appDelegate?.browserViewController.tabManager.selectedTab?.isPrivate ?? false\n    }\n}\nThis would allow you to call UIApplication.isInPrivateMode anywhere in the app. I'm not really a fan of it since it depends on a lot of things and is pretty much just a readonly global variable but might work for now. It also assumes you always have a browserViewController available and that the tabManager is indeed the source of truth. Also I don't know what happens if you're in private mode and you don't have a selected tab. Lots of things to look out for but might be a starting point.. Ya this totally works. I like this better since it keeps the end scroll state unchanged. I updated this PR with a commit that adds this.\n. Ya viewWillTransitionSize and traitCollectionDidChange both get called for almost the same reason. viewWillTransitionSize fires when the screen size has changed which happens on rotation and traitCollectionDidChange gets called when the view controller's size class changes. Since the size class is defined based on an abstract concept involving device + screen size, this also gets called when the screen rotates. I think that using the traitCollection callback makes more sense in this case because we're showing the same UI for the iPhone landscape/iPad portrait views which share the same size class but not the same screen dimensions.\n. Instead of referencing the superview's width inside the widget, we should let the external user of this widget define constraints on it and let that infer the size instead of setting the width to be fixed internally. In the case of needing a width for the label, I believe there's a way you can have the label automatically resize based on it's contents if you set preferredMaxLayoutWidth = self.frame.size.width. I know there was a bug in iOS 6/7 that required you to do the following:\noverride func layoutSubviews() {\n    super.layoutSubviews()\n    self.textView.preferredMaxLayoutWidth = self.width.frame.size.width - (imageSize + padding)\n    super.layoutSubviews()\n}\nBut I think in iOS 8 this might be resolved so you should be able to just set the preferredMaxLayoutWidth.\nreference: http://danielgarbien.com/ios/2013/11/16/preferredMaxLayoutWidth.html\n. Same as the comment above. If we have text that could potentially grow, we shouldn't set a height constraint on the snackbar view from inside the snackbar. The parent view should be responsible for setting up the widget's height.\n. Do you need to override init if it's doing the same as the super init?\n. Don't think you need this if clause if we're conditionally unwrapping it below since if let prev = self.previousScroll results in nil the if block won't run.\n. I actually have a fix for this statement on a branch I'm working on where if the content height is near the size of the frame, scrolling goes all wonky because technically we only want to scroll if offset.y < bvc!.tabManager.selectedTab!.webView.scrollView.contentSize.height - scrollView.frame.size.height\nHere's the bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1154927\nAlso I we can clean this up since we already unwrapped the selected tab so you should be able to use tab directly instead of bvc!.tabManager.selected!\n. Nit: Why not unwrap the bvc in the if statement above to remove the optional?\n. Nit: Could we rename bvc -> browserViewController? bvc is a bit too cryptic. Or even browserVC\n. If we're just calling super we don't need to override this method\n. Don't think you need this since we're nil'ing out self.previousScroll in endDragging()\n. Nit: Don't need the ( ) brackets unless we want to keep them in as per our styleguide?\n. Is this logic backwards? If it's unread, don't we want to set it to .MarkAsUnread?\n. Ah okay cool. I'll update this to support this case.\n. How come we're using the device + orientation instead of this view controller's UITraitCollection's horizontalSizeClass/verticalSizeClass properties to differentiate?\n. I think we might be able to remove this method and call collectionView.invalidateLayout instead.\n. Ah nevermind - this doesn't work\n. Since we're currently using the callbacks for rotation changes in the TabTrayController, let's keep checking the device instead of traitCollection. I think some of the changes I have in my refactor branch will affect this but I can deal with those changes.\n. Ya that would make more sense considering we the status bar updates require the view to be visible. \n. I think you only need to provide the class name in the @objc annotation if it differ from the the swift one, no?\n. I've seen this in other places in the app where we instantiate a new table view cell instead of dequeuing one. Is there a reason we're doing this instead of tableView.dequeueReusableCellWithIdentifier(id, forIndexPath: indexPath)?\n. Oh I see you're adding subviews and constraints below. I guess we're not really winning any gains by dequeuing it then.\n. It's minor but eventually it'd be nice to refactor this into 2 unique subclasses of UITableViewCell so we can dequeue them and move the setup logic into the subclass instead of inside the view controller.\n. Can we remove these comments?\n. Can we move the 250 into the UX structure above?\n. Can be replaced by just .None\n. Yup I can change these over\n. Originally no, but I have a ticket for deleting tiles off the home panel where we're going to be using the swipe animator to swipe off the tiles and the thresholds will be different there. I think renaming this to something not UX would make more sense so it doesn't get mixed up with the eventual app constants.\n. See comment above\n. Nice - yup sounds good\n. Yup looks like SnapKit turns this off when you setup constraints using snp_makeConstraints. I'll remove this.\n. tableView.bounds isn't calculated yet in viewDidLoad because a layout pass hasn't occurred yet. This will set the overlayView's frame to CGRectZero. I don't think that's the related to the issue you were having below with autolayout not working but just wanted to point it out.\n. Ya I'm curious about this as well. I have a feeling it's because a UITableViewController's rootView is a tableView and tableView's have something strange going on with adding non-cell subviews?\n. Actually this doesn't seem to be true in this case and I'm not sure why. I don't use UITableViewControllers often so there might be something going on behind the scenes here?\n. I like that idea better - I'll update it\n. Good catch - Ill update\n. Do we think that ever implementer of this delegate will need these two methods? What do you think about making them optional?\n. Unless specified, does upon run by default on the main queue? I remember seeing in the TopSitesPanel a similar call that was explicitly setting the upon queue to dispatch_get_main_queue. Maybe we should do that instead?\n. I think I was just trying to be clever and avoid using optionals too much but I'll change it to be sequential\n. I'm getting a EXC_BAD_ACCESS here when running this in my iPhone 6 8.3 simulator. Could we be double closing the pointer from the added close call above?\n. Cool - I know I before we were stripping out the https:// but I can change it so that we only strip out http:// but keep https:// to show the user we're displaying a https site\n. I also just noticed that on desktop we don't highlight the www. if it's visible where as in this branch we do. I'll update it to match desktop/android.\n. Nit: Can we remove this commented line if we don't need it?\n. Nit: Remove commented line\n. Nit: Remove commented line\n. Looks like you're listening to the theme changed events from within the LightweightThemeManager so I don't think you need this here.\n. Nit: It would be cool if we could have this sample color code as an extension to UIImage\n. Blank if statement?\n. Nit: Could be replaced with map(imageViews) { $0.image = img }\n. I find this abstraction odd because I think the view controller should be responsible for managing its views itself instead of an external class like this theme manager to do so. Instead of using the view controller directly, it would be cleaner to create a protocol named Themeable that defines a method such as applyTheme. This way you can pass in the Themeable object into this method and have the theme manager invoke the applyTheme method, allowing the protocol implementation to handle managing its own views.\n. See comment above regarding Themeable protocol\n. Nit: Remove comment\n. Nit: Remove comment\n. I think I got rid of this offset in one of my latest patches since I updated the constraints to be along the sides. Do we need this anymore?\n. Nit: Remove println\n. Nit: Don't need to override this method if nothing is happening in onConfigureCell\n. Nit: Don't need return\n. You can pass in a nil completion block if you don't use it\n. Any reason we use a computed property here instead of just assigning to title?\n. I don't know what this change was for but I notice that now the background of the SettingsTableViewController is black when you pull down to refresh. Do we need this?\n. Don't think we need these tabbed out like this\n. @rnewman I've updated the logic to grab the cached tabs, then try to perform a sync if needed, and if the sync fails, the stale tabs will be shown instead of the error state. How does this look to you?\n. Ya I don't like that either. I've moved this down below in the last else statement. So the logic path would be, grab the cached values, if that fails don't do anything until we know we can't sync. If we can't sync and the cached fetch didn't work, fail.\n. I briefly looked into incorporating something like breakpad / PLCrashReporter to allow us to send crash reports to our own servers in a similar way FX desktop does so we don't have to deal with TestFlight weirdness. This might give us some callbacks when we've previously crashed that we can take advantage of.\n. You can delete internal and leave off the modifier since by default this will be internal\n. We should probably check to see if the saving photo caused an error. See https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIKitFunctionReference/#//apple_ref/c/func/UIImageWriteToSavedPhotosAlbum for the selector we need to implement for this. I don't think we need to do anything fancy except for tell the user that something went wrong and the image didn't save and to try again later.\n. Since these are guaranteed to have a value after the else clause, you can change these definitions to let instead of var.\n. Nit: I would move this up into the BrowserViewControllerUX struct just so we can keep all of the style properties in one place\n. Nit: Move these up into the BrowserViewControllerUX struct\n. Nit: Don't need these return statements at the end of the blocks\n. Yup it should - I'll update it\n. Since we're deregistering in the deinit call, we should move the registration to the init call instead of viewDidLoad because there can be a chance that viewDidLoad doesn't get called.\n. Nit: Doesn't really matter since we're in the deinit call but since UIViewControllers observes other system notifications it's usually good practice to only remove self as an observer to the event you don't want to observe anymore instead of removing self as the observer for everything.\n. Nit: Instead of having this conditional logic to check if it's added and create it not created, you can make emptyStateOverlayView a lazy variable and add the view setup code inline like so:\nswift\nprivate lazy var emptyStateOverlay: UIView = {\n    // the codez\n}()\n. I wonder if it's possible to achieve the same logic without using the orientation and only the size classes. Now that we have multi-window mode on iPad I'd like to stray away from relying on orientation if we can. Not sure if it's possible though.\n. Nit: Since we're downloading this url information, could it be possible that it's an invalid url and the force asURL! would crash? Just want to make sure we don't crash if someone feeds us a garbage url.\n. Nit: Remove space between } ()\n. Nit: Remove space between } ()\n. Since we're setting up the constraints below, we probably don't want the didSet handler to get called whenever we set this to 0 here. Instead we set it to 0 in the declaration. \n. Nit: Instead of using snp_remakeConstraints, you can call snp_makeConstraints since you're not remaking them at this point\n. After we call snp_remakeConstraints on the imageView, we should setNeedsUpdateConstraints on the imageWrapper to notify it of the constraint change on it's next layout pass.\n. Also super Nit: but could you move the var declarations up with the other var declarations?\n. What's the significance of 24? Could we move this into the UX struct?\n. Do we need this as part of this patch?\n. I wonder if we should add a Github label to indicate that this PR will cause this effect?\n. This is just moving code right?\n. Just curious, is this how we're handling migrations right now?\n. This method and I think most of NSURLConnection is actually deprecated starting in iOS 9 so we'll need to use NRURLSesson/Alamofire for this instead.\n. Nit: This method returns Void but we're calling the method from the return statement. Can we move this up just to make it more clear?\n. See above nit about returning the callback\n. Nope - I'll just make it a normal enum\n. If you want, you can have optional methods for the protocol by adding @objc in front of public so you don't need the empty delegate methods.\n. Nit: Should this be step 3. instead of 4?\n. willRotate/didRotate are now deprecated in iOS 8. Can we change these to use viewWillTransitionToSize instead? (https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIContentContainer_Ref/index.html#//apple_ref/occ/intfm/UIContentContainer/viewWillTransitionToSize:withTransitionCoordinator:)\n. Nit: Can reduce these lines to\nreturn source?.current.count ?? suggestedSites.count\n. I saw your IRC comment about the bookmark cell still moves to the side for default bookmarks even though there's no edit actions. Instead of setting the editActions below to an empty array when source = nil, you can implement the editingStyle delegate method that tells the tableView if it should edit or not. This will remove that slight jiggle for default bookmarks:\nswift\n    func tableView(tableView: UITableView, editingStyleForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCellEditingStyle {\n        if source == nil {\n            return .None\n        } else {\n            return .Delete\n        }\n    }\n. Nevermind - can't do that since we're passing in a swift struct\n. :+1: \n. Good idea - I was going to store the prompt state elsewhere but I like this separation of state within profile.prefs\n. :+1: \n. We probably don't want to prompt in the case that it doesn't exist since we will prompt the user on app launch everytime in that case\n. So,\n1. If the user has not decided to opt-in or not, log crashes\n2. If the user has opted in, log and upload\n3. If the user has explicitly opted out, never log crashes\nCorrect?\n. Was this for debugging?\n. I wonder if this also fixes the issues users are seeing where on app restore they are seeing localhost domains.\n. Move this check up to https://github.com/mozilla/firefox-ios/pull/852/files#diff-3a015464c840b339778d834499cc82d4R152. This delegate is what tells the table view if we want edit actions or not so we don't need to return an empty array for nothing.\n. I like this pattern of wrapping it in another bookmark folder type :+1: \n. Nit: Are we converting a hex value to UIColor here? Could we put this into a UIColor extension under Utils for reuse else where?\n. Also this will prevent the default bookmark row from jiggling to the side a bit when theres no delete actions.\n. This is strange - how come it's in here twice?\n. I had these changes in my working copy as well but I choose to not include it. I think we want to keep these files no?\n. Was this debug flag for testing locally? If so, do we need it as part of this feature?\n. The color is red but the comment says Firefox orange?\n. Nit: Since we only call this method in one place and it's 3 lines, we might as well just put it directly in didFinishNavigation.\n. Nit: You can set the animation curve in the options parameters in the extended API for animateWithDuration.\n. To address this point, you can create a private helper method in the file scope that sets up and pushes a SettingsContentViewController.\n. What do you think about creating a new log file each cold app start identified by timestamp and we set a cap to the size limit of log files (like 5 mbs) and delete the older logs?\n. Sure - I can split it up. Would it be safe to assume that logging for sync involves any calls to the loggers within any source files under the Sync folder and not Account? Not sure if FxA is considered part of sync.\n. Can you replace this string with the one from the TODO placeholder? We won't be able to localize settingsTitle and inject it into the string.\n. Yup that would work. I'll change it.\n. Nit: Remove commented code\n. I see that we're always passing in true for partial whenever we call this. Is there a reason we would not want the JSON serializer to handle fragments by default?\n. :+1: \n. Ah I guess this could happen since we temporarily select -1 when closing the last tab right?\n. :+1: \n. Nit: Lineup closing brace + () below p of private\n. Actually could we make height non-optional and do:\nreturn self.collectionView?.frame.height ?? self.thumbnailHeight\nSo we don't need to do the optional check on line 216?\n. Ah I think I know the problem with the extra row at the bottom. It looks like viewDidLoad calls height/width and at that point the collectionView's frame hasn't been updated by autolayout yet so it reports a height of 667 which will result in 5 rows. Since these are lazy, height/width will only evaluate once and cache that result. Instead of being lazy, these should be computed properties so we don't cache the height/width values\n. Actually it looks like any tests that involve tapping the url bar by running:\ntester().tapViewWithAccessibilityIdentifier(\"url\")\nSeem to be failing on master at the moment. Would moving the if statement from above into this dispatch_async call work? I'll also see what's going on with these tests.\n. Wait maybe it's working now? I swear these tests start at random places in the test bundle. Still looking.\n. Ha - looks like testURLBarContextMenu fails in landscape but works in portrait...\n. Nit: Do we need to check if it's less than 1.0? I think we can just always assign it 1.0 because if it's not 1.0, we're going to set it to 1 anyways\n. Note: Forgot to mention this in my comments but we should not be holding a strong reference here since the SettingsVC 'owns' these setting objects.\n. Ah yes, that's much nicer - no more optional\n. No - just added it as a safety check in case we fire a double start event or something weird\n. :+1: \n. I agree. I moved this into the tabManager but then found that it caused a bug with updating the tab counter. The BVC and Tab Tray are both delegates and depending on the order of which they get called the count can result in 0. I've added a fix but always setting the count to at least one so we never set the tab count to zero.\n. :+1: \n. I don't think we need to inherit CustomStringConvertible since MaybeErrorType already inherits that type\n. See https://github.com/mozilla/firefox-ios/pull/966/files#diff-e7993812e8ded083c5d2b13f1f46dc18R155\n. Don't need to assign this to anything - especially if we're ignoring it. We can remove the _ = part\n. I'm a bit confused - NSError doesn't implement ErrorType although result.error is ErrorType. Does this casting ever work properly?\n. See https://github.com/mozilla/firefox-ios/pull/966/files#diff-8f1dcc1ac7fa3bfca7bb9ad6e6cb14aeR245\n. Just double checking - do we want this change?\n. See https://github.com/mozilla/firefox-ios/pull/966/files#diff-e7993812e8ded083c5d2b13f1f46dc18R155\n. Just MaybeErrorType\n. Do we want to use mozilla as the owner of these forks? I feel like if we make mozilla the owner it makes it seem that we're going to be maintaining our own fork instead of temporarily using a fork for swift 2.0 changes.\n. Nit: Let's print something to the log indicating that we couldn't do this\n. Nit: Can we rename this method to helperWithName and remove the explicit named parameter to make it more swifty?\n. Question: Is this the preferred way now to check if a optional is not nil?\n. Same nit as above\n. Could we use the guard keyword to avoid these optional unwrapping?\n. I think this needs to be equalTo(self.topLayoutGuide.length)\n. This one is a bit tricky too since SnapKit doesn't support UILayoutSupport's bottomAnchorSupport property yet. Not sure what to do here except for set the constraint to the view itself and account for the offset by taking into account the length of the topLayoutGuide. This is probably why we're seeing the toolbar at the top of the screen. We fix this in another PR/patch.\n. I think in Swift 2.0 we can omit the second let in this expression\n. Nit: Space in front of url in parameter\n. I think we want to keep this line inside the above if statement. Don't see why we want to move it outside.\n. Nit: We should rename this to be more swifty like newTabWithRequest or something. Obviously not important for merging this.\n. Nit: We can remove the closure parameter name as well as the ( , ) and leave this as a trailing closure\n. Nit: we can commit the second let in this expression\n. Nit: Extra space after tab.webView\n. We can remove the _ = \n. Nit: Remove second let in this statement\n. Nit: remove second let\n. Nit: need space between : and NSString\n. For handling this error and assertion, we should move away from ever using NSError unless we need to. We can also condense this do statement:\nlet listFile = try? String(contentsOfFile: index, encoding: NSUTF8StringEncoding)\n        assert(listFile != nil, \"Failed to read search engine list\")\nDoing this also removes the need for the assertion\n. Ni: space in front of request\n. nit: space in front of request\n. Nit: Don't need to declare these types since it can be inferred.\n. Nit: we can remove closure and the brackets and leave this as trailing closure\n. Nit: same here\n. Nit: we can remove these closure parameter names and leave this as a trailing closure\n. Nit: Don't need to declare the type - it can be inferred from UIFont.systemFontOfSize\n. Nit: closure\n. Same nit as above\n. Don't need double y in the parameter name\n. We can remove this error variable\n. And just use the one thats provided to us by the catch expression\n. Also we don't need the if statement since the error we get back from the catch isn't optional\n. We can clean this up a bit and move the NSError instantiation inside the guard statement below since we don't use this error anywhere else in this method.\n. Nit: We can name this error just error and not error1\n. Also just noticed, when using error domains, they are usually in a reverse url format. So likee this one could be com.mozilla.readermodecache.migrator. Might also make sense to create a enum with various error codes so it's easy to track what the errors mean when we throw them.\n. Nit: Don't need to declare these types as they can be inferred.\n. Nit: Don't need to declare type since it can be inferred on these\n. Nit: closures\n. Nit: closures\n. Nit: remove _ =\n. Nit: closure\n. Don't think we need this here since we're not unwrapping anything\n. Nit: Omit second let\n. Nit: Omit second let\n. Nit: Omit second let\n. Nit: Omit second let\n. Nit: Remove _ =\n. Wonder if this would be safer to use try? and a guard?\n. Nits: Remove _ = throughout file\n. Don't think we need the public keyword on this typealias\n. Nit: error domain should be reverse url structure not Migrator\n. Nit: domain\n. Nit: Remove _ =\n. We can replace this do/catch with try?\n. We should clean this up and move the if let error unwrapping below inside the catch block and remove the error declaration since we don't need it anymore.\n. @rnewman Any reason why we have this commented out?\n. Nit: remove _ =\n. Nit: Whitespcae\n. Actually this looks like it's okay because Alamofire does encode it's errora as an NSError :+1:\n. Going to ignore this for now since we don't need to change this at the time.\n. This is false - we need this here.\n. Oh wait this isn't our code nvm\n. Nit: We can probably just do let nameLabel = UILabel() and remove this line\n. Nit: Can we replace the 1000 constant with something more reliable like frame.size.width?\n. Oh snap - I didnt know that existed! Yes, we can use that but it looks like it's broken on SnapKit's swift-2.0 branch but there is a PR open for this here: https://github.com/SnapKit/SnapKit/pull/137. I'm going to file a follow up bug to change these back to Snapkit after that patch is merged in.\n. Can I file another bug for consolidating brand stuff?\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1200386\n. Unfortunately that's deprecated :(\n. That's saying we want to allow any character that isn't a symbol. This will filter out and symbol characters or UTF16/32 characters. Having just this will filter out the & and ? symbols in the URL which is why I also union this with what's acceptable in a URL.\n. The issue is with the \u7279 character. Try passing that url string into NSURL and see if it returns an NSURL object. I think it returns nil because NSURL blows up when trying to parse it.\n. Actually, the symbolCharacterSet line doesn't matter because the union of the allowed URL character sets will automatically filter out any invalid UTF16/32 characters. I can safely remove that line. I'll rename the extension to be URLAllowedCharacterSet :+1:\n. Yup - I like that better\n. I agree - I'll add it back in\n. That's definitely a better approach - I'll revise and try that out.\n. Do we want to assert here instead of showing a failure dialog?\n. Nit: We should be consistent with our camel casing on these properties: bgcolor -> bgColor, imageurl -> imageUrl\n. Not sure if we want to use a link in the comment to describe the context of the string or is this temporary?\n. I think this was from when we had that issues with the way we were saving passwords a few months back. I think we can ignore this comment for now.\n. Was the issue that the history property references the lazy places property which in turn results in the DB creation when first referenced? I'm starting to worry about our use of lazy properties (this is probably my fault as I started to use this pattern). I feel like we should do an audit at some point of where lazy property initialization result in side effects because this isn't the first time I've seen bugs come up from this sort of thing.\n. Ya not sure what happened here. Reverting this.\n. Nit: Could this be simplified to selectedTab == webView instead of iterating through all of the tabs? \n. I've simplified the if statement logic. I think eventually we'll probably want to have each setting tell the delegate method what height it should be instead of hard coding the indexes here. It can be fragile since we're usually adding/removing settings options frequently. I think whenever we revisit the IA of settings we should add this in.\n. Ah - yes I did notice this. I don't think we need to call updateTabCount since the number of tabs is zero so it essentially is a no-op. \n. That's a much better of writing that. I knew there was something better than what I was doing. I'll update.\n. I'll also add the short circuit\n. Cool! I didn't know you can add different access modifiers like that.\n. Actually, every is an extension you added for Sync: https://github.com/mozilla/firefox-ios/blob/master/Sync/Info.swift#L69. Could we move this to our Shared/Utils library?\n. Are you implying we should autoselect the created tab if we add a tab and it's the only one available? Not sure if that's better than selected the tab after it's been created. Before when we had only normal tabs it made sense since we could never have zero tabs but for private mode we can have a situation where we have none to display in the tab tray.\nI can add a convenience method though named 'addTabAndSelect'.\n. I've moved the restore tabs logic we have in the BVC to the restoreTabs method in tabManager\n. I wanted to keep the first param to be explicit when calling the function so it's clear to the external caller that we are assigning the callback to the sendReport action. I know in Swift < 2.0 I could use the # sign to force the explicit first param but as far as I know in Swift 2.0 you just have to duplicate it :(\n. I wonder if we should use Alamofire instead of NSURLSession instead. I know we use it for other things in the app like the FaviconFetcher [1] because we setup an instance with our user agent.\n[1] https://github.com/mozilla/firefox-ios/blob/fluffyemily/Bug-1212860-copy-image-data-to-pasteboard/Utils/FaviconFetcher.swift#L68.\n. What happens if the user copies an image to their clipboard then backgrounds the app right away? I feel like this would be a common use case and I'm not sure if the callback will get called since the app is in the background. Do we need to wrap this with a Background Task handler?\n. Not sure - doesn't seem there is an optimal solution given the constraint of the private API. I see three non-JS options:\n1. Silently download the image and in cases that the image is large or the network is slow, the image doesn't get copied\n2. Block the user with a progress bar until the image is copied\n3. Add a loading indicator to inform the user the image is downloading in the background with a toast of some sort to indicate completion.\nI don't really like any of these options. I think the biggest problem is that copying an image should imply that it's an instant operation which doesn't require a network request and showing the indicator (blocking or non-blocking) removes that illusion. Although a blocking indicator would be intrusive, a non-blocking one would require us to find a place to put it. In the case of failure with option 1, it make it look like the app has a bug and the feature doesn't work. If I had to choose one I'd probably stick with what we have and go with option 1 unless there is a better way in JS.\n. Nit: Don't need to wrap the Alamofire.request call with dispatch_async since the request will happen on it's own background queue internally.\n. The issue with calculating it before hand is that the height/width of the collection view change when the device is rotated. I actually don't see the harm in setting the limit to 100 or something large since the data source's numberOfItemsInSection takes the minimum of the cursor result count and thumbnailCount https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Home/TopSitesPanel.swift#L344\n. Actually, I just noticed in your code you're using 2 * max(...) with the assumption that the number of columns is always two (I see that in TopSitesLayout it's set to two) but this actually changes based on orientation https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Home/TopSitesPanel.swift#L258\n. This is MUCH cleaner than the code I added here before, thanks @jhugman!\n. Not sure what the UI specification is but I believe we had it always fixed to 250 width. The center alignment will center align the text while the 250 width will force the text to be a maximum of 250 px wide. Here's what it looks like on landscape/portrait iPhone 6\n\n\n. :+1:\n. Generally we shouldn't be inferring data from our UI like this. I've seen it cause issues in the BrowserToolbar in the past. I'm okay with leaving it in for now and addressed later though.\n. It shouldn't ever be unsuccessful since we return a simple succeed() at the end so really we the result is ignored anyways.\n. Ya that's much better\n. Should be fine but I'll leave a comment\n. This PR makes only a slight difference but after the query timing, the second highest cost is this blur. If we're unsure about the stability of this, I can look into fixing some of the layout issues as well to see if we can get away with just doing layout fixes.\n. To avoid having to change the method signatures for where removeTab is called, you can simplify this by adding a default parameter for notify. I would it to true so it matches the current behavior but opens up the method to passing in the notify flag in the case of closing private tabs.\n. From what I know about withExtendedLifetime, it guarantees that the parameter passed to it will outlive the length of the function that it calls. In this case, the function calls startWithOptions which is synchronous and returns right away so I don't know how extending the lifetime would help in this case. How would this help keep the callbacks alive? \n. I wonder if changing the local class property server in WebServer to a static declaration would force it to stay alive? We could also replace the sharedInstance class method with the static keyword but I don't know if that would make any difference since static is the same as 'class final'.\n. Ya I suppose we could name it that. I was following the way UIKit names it's invalidation routines like layoutIfNeeded and setNeedsLayout.\n. Makes sense - I'll update\n. MPL 2.0 License\n. Instead of using willRotate/didRotate, we should use viewWillTransitionToSize since these methods are now deprecated. Doesn't look like we already override the method so feel free to add it. To replicate the didRotate part, you can use the completion handler of the coordinator passed into the method. I believe there's a method named\ncoordinator.animateAlongsideTransition {}, completion {} \n. We can simplify this to:\nupdateDisplayedPopoverProperties?()\n. Ya the BrowserViewController is quite the unruly beast. Thanks for breaking this out into a separate extension. We're looking into ways to simplify all of this code and having things broken out into smaller extensions helps alot!\n. I wonder if we need this method to set these properties to nil. Could we instead change these to be weak references so they clear themselves when the pop over goes away?\n. Ah you're right - can't weakify the updateDisplayedPopoverProperties property. I'd just change displayedPopoverController to weak and leave the delegate implementation in there to nil out updateDisplayedPopoverProperties.\n. Nit: I would just name this section \"LogOut\" just to have it be more clear\n. Heh my weak SQL-foo. I should probably sanitize the input...\n. Good point\n. Actually now that I think of it, probably not since we're just doing an OR. I can use the provided string across the three columns instead.\n. Your approach makes a lot more sense and simplifies the logic. One issue though is the way we're querying for Top Sites. We're requesting maxFrecencyLimit number of cells from the cache to display. maxFrecencyLimit is an approximation for the max number of items we'll see in either landscape or portrait orientation. The code currently 'blocks' on the delete until a request is made to get the new set of data from the cache before proceeding. If the user deletes really fast it's easy to get past the number of items we pull from the cache. \nIt's similar to the problem of having an infinite list since we don't know how many items there are in total for the Top Sites panel. I mean, we could technically grab the whole cache but since it's calculated based on history it could be huge. Actually, the more I think about it, the more this maps to a producer/consumer problem. The user is 'consuming' items from the panel while the cache queries are 'producing' more items for the panel to display. \nAny thoughts on solving that pickle?\n. Hmm interesting. We can always do two separate performBatchUpdate calls - one for the deletion and another for the replacement. The only requirement is that the data source be in sync before/after each one. I'm going to give that a try. \nAlso for https://bugzilla.mozilla.org/show_bug.cgi?id=1226201 I'd like to refactor the panel code to make it more testable so I can add a unit test for that bug so I'll probably do that as part of this work.\n. Nit: We can simplify this down to displayedPopoverController?.dismissViewControllerAnimated(true, completion: nil)\n. Same here \n. Do we want to add a return statement at the end of this block in case we add more to this method and don't want to passthrough?\n. Can we use an instance of XCLogger from Loggers.swift instead of print so we can write the log to disk? I think Loggers.browser should work.\n. Ugh - Can't wait to fix this when I invert the BVC. Storing the private state in the TVC is such a hack :(\n. Sure\n. SQLITE_CORRUPT isn't defined here. I think it's only in sqlite3.h.\n. I think this writes right away - there isn't a flush or close call.\n. Smooth.\n. Nit: Now that we're using the header view as a footer it might make sense to rename it to SettingsTableSectionHeaderFooterView just to make it more clear.\n. Nit: These files aren't part of this PR but are in the project file show they are showing up as missing.\n. When I open up the Client scheme it shows ClientUITests missing. Might just be a weird link in the scheme file.\n. Nit: Can we clean up the default template methods or replace them with more meaningful text?\n. refillingTiles gets set to true after deleting a tile and set back to false whenever refillDeletedTiles() finishes [1]. Refreshing the cache takes time and the user could try deleting a tile while we're refilling it. This ensures that won't happen. If we delete a tile while we're still refilling we end up having duplicates and the data source gets out of sync :(\n[1] https://github.com/mozilla/firefox-ios/pull/1283/files#diff-abfc8d88f8fbb974154bce59e22c81a6R164\n. Sadly extension functions/vars can't be overriden yet :( I'll add it to the class and override.\n. Nit: We can condense this a bit by using our asURL extension method:\nif let urlToOpen = userData?[\"bookmarkURL\"]?.asURL\n. Nit: Since we're reaching a few levels deep into browserViewController to get the tab index and select, we should instead refactor this functionality into the tabManager:\nswift\nfunc selectTabWithURL(url: NSURL) -> Browser? {\n    guard let index = tabs.indexOf { $0.url == url }\n          let tab = tabs[index] else { return nil }\n    return selectTab(tab)\n}\n. Why can't you append in the empty case?\n. Don't think you need to make a copy of the dictionary here since dictionaries are passed by value.\n. Can we use one of the XCGLogger instances instead of print?\n. Nit: We can simplify this some more:\n``` swift\nguard var dynamicShortcutItems = application.shortcutItems,\n      let index = dynamicShortcutItems.indexOf { $0.type == type.type } else { return }\n```\n. Interesting I wonder where this is from? Not sure if it matters or not.\n. Nit: Looks like BrowserDB.varlist returns (?, ?, ..., ?) and we're wrapping that with more parens so the query looks like:\nSELECT name FROM sqlite_master WHERE type = 'table' AND name IN ((?, ?, ..., ?))\nI think we can remove the additional parens in this sql.\n. @fluffyemily Created a subclass that contains the check for the environment variable so we don't have to write this in all of our test cases.\n. Designs have them as lowercase:\n\n. Design has modified lowercased but it might make sense to cap case it since that's what we do for 'Last Synced: '\n\n. How about two messages instead for local/connected devices:\nLocal:\nAre you sure?\nDeleted logins will be permanently removed.\n[Cancel][Delete]\nSynced:\nAre you sure?\nDeleted logins will be removed from all connected devices.\n[Cancel][Delete]\n. +1\n. Sounds good - the only reason I title cased it was because I saw that when searching the Mail app, 'No Results Found' is title cased.\n. According to the API, we return true if we handle the URL and false otherwise. Might make sense to change this to return false outside the if statement but return true inside.\n. I think this is a great first pass at extracting interesting info from a page to display in the search index. I came across some documentation for web developers [1] that enable them to enrich their pages with discoverable content that can be used in spotlight. I wonder if it makes sense in the next iteration to tap into this data to add richer spotlight integration.\n[1] https://developer.apple.com/library/ios/documentation/General/Conceptual/AppSearch/WebContent.html#//apple_ref/doc/uid/TP40016308-CH8\n. Nit: Extra space in front of *\n. Nit: Can simplify into\nswift\nreturn tabs.filter { $0.webView?.URL == url } .first\n. Nit: Space needed in front of *\n. Nit: For the App Bundle ID we use \norg.mozilla.ios.firefox instead of org.mozilla.firefox. Might make sense to include the ios here too.\n. Is the spotlight integration an iOS 9 only feature? I wonder if we could wrap this whole helper with a iOS 9 check and conditionally add it to the tab instead of checking the condition here.\n. :tada: \n. um.. Xcode? Let me see if I can remove this.\n. Yup that makes more sense. So the ordering would be:\na.b.f.domain.com\na.b.c.domain.com\nFirst check baseDomain (domain). Then check sub domains left -> right (a.b.f vs a.b.c) resulting in\na.b.c.domain.com\na.b.f.domain.com\n. Ya I think so it's been happening to all my PRs today\n. Most of these deletions are from extracting SavedTab out of the TabManager scope.\n. Since tabsState.archive is a global resource on disk and TabManager is not available when we want to launch the app without initializing anything I moved these to static to allow us to call it without a TabManager instance.\n. You can collapse all of these guard statements into a single statement since they all return the same thing:\nswift\nguard let body = response.valueForKeyPath(\"body\") as? [String:AnyObject],\n      let statusCode = response.valueForKeyPath(\"status\") as? Int,\n      let path = response.valueForKeyPath(\"path\") as? String,\n      let url = NSURL(string: path, relativeToURL: self.response.URL),\n      let headers = response.valueForKeyPath(\"headers\") as? [String:String], \n      let r = NSHTTPURLResponse(URL: url, statusCode: statusCode, HTTPVersion: \"1.1\", headerFields: headers),\n      let recordResponse = ReadingListRecordResponse(response: r, json: body) else {\n    return nil\n}\n. Looks like in VoiceOver the secureTextInput fields say:\n'Secure text field is editing - 10 characters, insertion point is in...'\nIn this case, I won't append the description label when secureTextEntry is TRUE.\n. So on desktop, I can configure what I want to sync so it's not enough to know if they have an account, I also need to know if they've enabled password syncing. \nLooking through the code it seems this configuration is part of the 'sync' prefs branch:\nhttps://github.com/mozilla/firefox-ios/blob/master/Providers/Profile.swift#L685\nLooks like if metaGlobal scratchpad doesn't include the 'passwords' collection, that means that password sync is not enabled (inferred from: https://github.com/mozilla/firefox-ios/blob/master/Sync/Synchronizers/Synchronizer.swift#L177) and this scratchpad lives inside the SyncStateMachine.\nWhat would be the best way to expose this? \n. Might want to rename this property now that it's not using the footer's frame but the urlBar one instead. I notice that we only really want the height and don't care if it's a rect. Maybe rename this to bottomScrollHeight and the header one to topScrollHeight?\n. Nit: Is there a reason for using leading/trailing instead of left/right? The only thing I can think of is layout changes for RTL text but I don't think we need that for the web view container.\n. Same Nit comment as above\n. Usually better to call setNeedsLayout instead of layoutIfNeeded() so the layout will occur on the next layout pass instead of forcing one.\n. I think what you're looking for here is setNeedsLayout. Also its usually good practice to call view.layoutIfNeeded before the animation call to flush out any pending animations.\n. Same comment as above ^\n. Nit: Not sure if we're doing it everywhere but for action selectors I've been prefixing them with SEL just to clarify that they are used as selectors like this.\n. Nit: Move the styling attributes into a UX struct since it seems to be the convention so far.\n. Nit: Can simplify to\nswift\nmake.edges.equalTo(self).inset(UIEdgeInsets(top: 0, left: 8, bottom: 0, right: 8))\n. Just saw this in the Android code base - much nicer. I'll update the PR.\n. Yup you're right - my bad.\n. Oh I didn't know that selectors required @objc - I thought that was only needed for private methods to expose them to the objc runtime. If that's the case I would much rather do away with the SEL prefix if we can. We can talk about it more in next week's meeting though.\n. If I use uponQueue I won't be able to chain into the next call since bind returns a deferred result where-as upon returns nothing.\n. Probably safe to invalidate it in the remote call to keep everything consistent.\n. Two options: \n1. Show an error prompt indicating that the update failed. This would require new strings.\n2. Silently fail.\nIdeally option (1) would be better if we're not 'string-frozen'.\n. We could but without any indication the user might think that the app bugged out if tapping 'Done' doesn't do anything.\n. Nit: Creating NSDateFormatter instances is considered 'expensive' and should be done as infrequently as possible. Since this is a computer property we will be creating a new instance each time we reference status. I'd suggest moving this into a lazy var like so:\nswift\nprivate lazy var timestampFormatter: NSDateFormatter = {\n    let formatter = NSDateFormatter()\n    formatter.dateFormat = \"yyyy-MM-dd HH:mm:ss\"\n    return formatter\n}()\n. Nit: Trailing ;\n. I like this change a lot better than what we're doing now :+1: \n. A potential concern is that the restoring property is referenced in the BVC for signalling when restoration is complete [1] and to check load state [2]. \n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserViewController.swift#L2515\n[2] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserViewController.swift#L840\n. Ya I tried to abstract it away with some stronger types using enums but... ya\n. Yes and no. The only reason I exposed this is to make it easier to provide a mock for the AuthenticatorTests. The alternative is to mock the entire LoginsHelper and use that but that relies on a Browser instance, etc.\n. Calling sd_setImageWithURL will cache the image using the SDWebImage cache.\n. This is actually pretty bad. We should be always returning a login even if we can't extract a baseDomain. For example, schemeless hostnames will result in them not being shown! \n. I like this method :+1: I keep finding myself using something like this in other UITests. Could we move it into a Utils class or tester extension?\n. Eventually there is going to be other view controllers such as the passcode configuration and interval screens. I guess it depends on how we want to group up the classes. We can either make it revolve a theme (Authentication) or have it grouped by function (Settings, Views, ViewControllers).\n. In this case it seems like its only specific to the app settings but I feel like this has the potential to be used in many settings screens. Generally settings are tied to users profiles so I can see this being something we want. The callbacks right now only reload the table views which I think is OK but if we get more complicated logic for these callbacks down the road I'd say we break this out into an Account-based settings base class.\n. Does this actually return the bottom webView? I feel like this would return the first webView that find encounters [1]. What about:\nlet bottomWebView = webViewContainer.subviews.filter { $0.isKindOfClass(WKWebView) } .last\n[1] https://github.com/mozilla/firefox-ios/blob/master/Utils/Extensions/ArrayExtensions.swift#L12\n. Yup you're right - I should probably drink my :coffee: before reviewing :disappointed: \n. The delegate only gets fired on the dismissal of a prompt. In the case of switching to a new tab we need to check to see if there is anything to dequeue. I can probably extract this out into a small helper function.\n. This query made me feel gross writing it. On top of this awful searching the getFaviconsForHistoryURLs query attaches a ton of LIKE statements to bulk find all favicons for the given history URLs. The biggest problem I ran into was being able to link a login entry with a favicon since a login has no identifying property to connect the two. I was trying to avoid having to attach additional information to the login table just to find a favicon considering a login shouldn't have to know about favicons. You also mentioned earlier that they don't even live in the same database so that adds another layer of complexity.\nUnless you have any ideas about another way to simplify this without schema changes I don't know if I feel comfortable shipping this favicon branch for the 2.0 release. I'd prefer to take this back to the drawing board for a better solution for 3.0 and go with favicon-less logins for now.\n. Looking at the other setting boolean toggles we have, it looks like we are namespacing the settings under settings. For example, the Close Private Tabs option prefKey is settings.goToCopiedURL. I see that the other general settings are not namespaced but we should consider moving those under settings later on.\n. When using a lazy var you actually don't need to declare it as an optional if you wrap the result in a block. For example you can change this to:\nswift\nlazy var userActivity: NSUserActivity = {\n    return NSUserActivity(activityType: NSUserActivityTypeBrowsingWeb)\n}()\nNow you don't need to sprinkle questions marks throughout!\n. You can simplify this down since we have this neat extension method on Strings for converting into a URL:\nswift\nguard let url = urlStr?.asURL else {\n    return\n}\n. How come we check the API level for stop but not on start?\n. I noticed that in all of the other calls to stop we also clear the URL but not here. How come? Would it make sense to clear every time we stop?\n. Turns out that the reason canPerformAction wasn't being called is because LoginTableViewCell's canPerformAction was being called instead. It has the same logic as the the table view's canPerformAction so all of that code inside the cell is not needed. Removing that properly calls the tableView's canPerformAction. Good catch :+1: \n. I would move this into AppSettingsViewController and override this method instead of having it here because subclasses probably don't want this functionality.\n. After the failure, we want to reset back to the original state the login was (for now). This isn't the best UX for telling the user that the login was invalid but works for 2.0.\n. Found that GeometryExtensions was in the wrong target so once I moved it we now require pulling in Shared (which makes sense since that file is part of Utils)\n. Nit: You don't need to unwrap the string from sectionSetting.title? since the titleLabel's text is optional anyways. We can rewrite this as:\nheaderView.titleLabel.text = sectionSetting.title?.string\n. Nit: Remove newline\n. I don't think we need this logic here since we override viewForHeaderInSection in AppSettingsTableViewController. Can we move this logic into that method where we dequeue the header? It would remove this string check since we already know when we dequeue the header.\n. Remove this logic - see comment below.\n. When I remove the priorityLow() call I get autolayout constraint errors because we have both this constraint and the one we add during the dequeue call. Reducing the priority seems like a patch over a bigger issue.\nI did some additional digging and found the real problem. For all of these calls where we make right greaterThanOrEqualTo, we should actually be calling lessThanOrEqualTo because the offset we're setting is a negative value. It looks correct because we do want the value to grow but because its a negative value its actually getting smaller. After changing these to less than and remove the constraint in the dequeue call everything works as expected :dancer: \n. Nit: Having the two return headerView is redundant. Can probably clean this up to be:\nswift\nswitch section {\ncase 1:\n...\ncase 2:\n...\n}\nreturn headerView\n. Nit: I wonder if we can simplify this entire method to:\n``` swift\n    func webView(webView: WKWebView, didReceiveAuthenticationChallenge challenge: NSURLAuthenticationChallenge,\n        completionHandler: (NSURLSessionAuthChallengeDisposition,\n        NSURLCredential?) -> Void) {\n    let callableDelegates = delegates.filter { $0.respondsToSelector(\"webView:didReceiveAuthenticationChallenge:completionHandler:\") }\n    guard let delegate = callableDelegates.first else {\n        completionHandler(NSURLSessionAuthChallengeDisposition.PerformDefaultHandling, nil)\n        return\n    }\n    delegate.webView?(webView, didReceiveAuthenticationChallenge: challenge, completionHandler: completionHandler)\n}\n\n```\nThis would filter out any delegates that can't be called and has the check to make sure we call the default handler.\n. Nit: Since we use the string \"settings.allowThirdPartyKeyboards\" here and in the AppSettingsTableViewController, we can store it in a constant and refer to it? This way it will avoid any potential typo errors in the future if we have to type it out somewhere else.\n. Nit: Don't need this comment\n. Nit: I think at this point we can collapse all of these else ifs into a single statement since they all return the same thing (64). Down the road it might be nice to add a height property to Settings so we can throw away the if check all together and just return the setting's height.\n. This makes me nervous. I don't know about adding additional constraints to a existing views constructed by the OS like in this case with UITableView. It seems that these constraints were added to align the title/subtitle labels but since we don't set a constraint on the title label different locales would make these labels not line up.\n. After thinking about this I don't see another easier way of doing the text wrapping without creating a subclass so I think we'll be OK. I would clean this up a bit though by extracting the if outside of the snp_makeConstraints call and pinning to the right of the title so avoid magic numbers:\n``` swift\nif let titleLabel = cell.textLabel {\n    cell.detailTextLabel?.snp_makeConstraints { make in\n        make.left.right.equalTo(title)\n        make.top.equalTo(title.snp_bottom)\n    }\n}\n``\n. Extracting the if so we don't needlessly call makeConstraints if we don't need to.\n. Nit: Could you just pass inokayCallbackinstead of wrapping it in a closure?\n. Nit: Don't need thesereturnss\n. Don't need to set edges and sizes since they set the same thing essentially. In this case you probably just want to usemake.edges.equalTo(self.tableView). I would avoid adding this as a subview to the table view and add it as a subview to the view controller's view but placed above the table view. There isn't necessarily anything wrong with adding it to the table view but I could see issues in the future when table view compatibility since a table view usually controls its subviews/cells using it's delegate.\n. I'm not sure why this is needed or how this works since the centerY and top constraints would conflict. Since the priority on the top is always higher I don't see the centerY constraint ever holding true. Could we remove this top constraint line and the priorities? \n. Nit: You can just pass in overlayView - don't need overlayView.snp_centerY\n. Nit: Don't think you need greaterThan here. Just equals should be fine since there isn't any other conflict constraints.\n. Nit: Don't think you need this line since when didSet is called, selected is already set.\n. Super minor nit: How come the brackets around selected?\n. Good catch -!selectedwould be preferred instead of using the ternary operator to return booleans.\n. I think the only reason the call below toremoveSiteFromTopSitesworks and everything seems okay is that we are essentially doing a no-op since a suggested site doesn't actually exist in the database. I think we should clean this up so we're not always callingremoveSiteFromTopSites` when we don't need to. One way to clean this up could be do bundle up the suggested site deletion into it's own method that adheres to the deferred stuff such as:\nswift\nprivate func deleteTileForSuggestedSite(site: SuggestedSite) -> Success {\n    var deletedSuggestedSites = profile.prefs.arrayForKey(\"topSites.deletedSuggestedSites\") as! [String]\n    deletedSuggestedSites.append(site.url)\n    profile.prefs.setObject(deletedSuggestedSites, forKey: \"topSites.deletedSuggestedSites\")\n   return succeed()\n}\nThen below,\nswift\nlet deletion = site is SuggestedSite ? deleteTileForSuggestedSite(site) :  profile.history.removeSiteFromTopSites(site)\nlet newSites = deletion >> {\n    self.profile.history.getTopSitesWithLimit(self.maxFrecencyLimit)\n}\n. Instead of reaching into the dataSource to get the count from topSitesCursor, we should hide the implementation details of the data source and expose a count method so this can turn into self.dataSource.count.\n. Similar suggestion below. We should try hiding the details of whats inside the data source instead of reaching into the data source to assign topSiteCursor's child.\n. If we're going to name the wrapper cursor class TopSitesCursor then we can name the children suggestedSites/historySites instead. An alternative would be to make this a generic 'wrapper' cursor and use a data structure to infer positioning like an array to store children.\n. You're right - someone could just reset the phone and avoid the lock out timer. This doesn't seem that big of a problem because:\n1. We actually don't tell the user how long they are locked out for - it just says try later. \n2. Restarting the phone still takes a bit of time. I think it takes long enough to prevent any kind of brute force attacks.\nIdeally I'd like to find a better way of handling this but I can't think of any other notion of time we can use that the user can't reset or modify locally. It would be annoying to have to resort to using a server provided timestamp :/\n. I think this needs to happen on init. Since we are calling this method after we have grabbed the history tiles from the DB here [1], when you remove the suggested tiles, switch panels, and come back, the suggested tiles flicker back then away.\n[1] https://github.com/mozilla/firefox-ios/pull/1587/files#diff-abfc8d88f8fbb974154bce59e22c81a6R124\n. Since we've moved this before the animation the name of the delegate method doesn't make sense anymore. We should probably rename it to viewWillExitContainerBounds instead.\n. I have a feeling it might be related to how the SnapKit closures capture the lazy property. Early in my testing if I commented out some of the constraint code it worked. \n. Just to confirm, this will only allow webkit-playsinline videos to play inline correct?\n. Was the intention to also enable Airplay? I think it's a good idea - I don't see why we wouldn't but it wasn't mentioned in the bug. If you did, you'll want to use the allowsAirPlayForMediaPlayback property instead because mediaPlaybackAllowsAirPlay is deprecated in 9.0. You can use Swift's conditional ifs to use the correct one like so:\nswift\nif #available(iOS 9, *) {\n    allowsAirPlayForMediaPlayback\n} else {\n    mediaPlaybackAllowsAirPlay\n}\n. The same thing goes for the mediaPlaybackRequiresUserAction property. In iOS 9 it's now called allowsInlineMediaPlayback. Since you'll need to do this in many places, you can try putting it in an extension on WKWebView to make it less verbose.\n. Reference docs: https://developer.apple.com/library/prerelease/ios/documentation/WebKit/Reference/WKWebViewConfiguration_Ref/index.html#//apple_ref/occ/instp/WKWebViewConfiguration/mediaPlaybackRequiresUserAction\n. Why subclass UIControl instead of UIButton? Seems like using UIButton would save you from having to track touches below.\n. Nit: Can move these alongside the property definitions above. You can also move the setup code for the label into a lazy block to clean up the init call.\n. I'm a bit worried constraining this to two lines. It might be better to have it set to 0 lines and have it flow instead. Not sure how this will work with long text locales.\n. Would it make it easier to setup the constraints so that:\n1. The imageView is pinned to the top by a margin, centered X\n2. Pin the top of the label to the bottom of the image and left/right using a margin then pinning the bottom to a greaterThanOrEqual to bottom self with a margin.\nIf you set the number of lines to 0 and have it flow, the constraints should hold correctly regardless of 1, 2, or 3 lines. Would also clean up the pinning to the width and division by 1.5.\n. Using the revised constraints I think you'll be able to remove this.\n. Nit: Should it be recognizers or recognisers?\n. I noticed that above you're setting the views to nil and removing the constraints. This would cause each cell to have to add and layout the views each time it's recycled which would hurt performance. Is it possible to instead keep the MenuViewItem more static with the views remaining but only have the text/image contents updated? If there is a need for a different layout, it would be better to create another subclass to handle that.\n. I guess the above only applies if you're recycling so it doesn't matter :/\n. Nit: Can clean this up a bit:\nswift\ngestureRecognizers?.filter { $0 is UILongPressGestureRecognizer}. forEach { self.removeGestureRecognizer($0) }\n. If you have these accessor methods for imageView and textLabel you probably don't need to expose those views publicly at all and keep them private.\n. If you're adding the menuItemPageController's view as a subview, I think you also should be following the UIViewControllerContainer steps to adding the view controller as a child as well [1]\n[1] https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html\n. I see. Only think I can think of is putting the label inside a fixed size container and centering the label inside of it. Not sure if that is better than the division math you were doing though. It would look like:\nswift\ncenterContainer.addSubview(textLabel)\ntextLabel.snp_makeConstraints { make in\n    make.center.equal(centerContainer)\n}\n. I can't actually make these weak since they are non-class types. I think the retain cycle occurs because the methods passed in are implicitly bind to self since that's where they are defined. I think the solution is to pass in a closure with [unowned] self and call the method instead of passing it in directly.\n. Not sure where these changes came from\n. Nit: You can just pass in the frame thats passed in above. Not sure what happens if you just set this to CGRectZero.\n. MPL\n. Nit: Don't think you need this line anymore\n. Nope it's good :+1:\n. Nit: Since we have access to stronger custom types in Swift, instead of using a String It'd be nice to use an enum here instead so we can rely on compile time checks. Strings seem error prone.\n. Nit: The compiler can't infer that a, b are NSIndexPaths? Would be a bit cleaner to drop the types.\n. Nit: Since we set this to NO in every target, you can set it in the project setting instead of the each target to avoid duplication.\n. Why not move to the cleaner syntax mentioned last Thursday [1]? Its as good of a time as any since we need to change all of them anyways.\n[1] https://medium.com/swift-programming/swift-selector-syntax-sugar-81c8a8b10df3#.k4aawoosx\n. Nit: We might as well start renaming all of the SEL* selectors to just * since it's not needed anymore. At least now we have compile time checking to make sure we are calling a valid selector if anything goes awry.\n. Nit: Want to double check - Should this return children[index+ 1] or just children[index] then increment after?\n. Nit: This seems weird that we are force unwrapping a param that defaults to nil. Should we change this to be an optional + guard?\n. To retain the same behaviour shouldn't we set the default param for SDImageCache to be the shared instance?\n. Up to you. Either or works!\n. Sorry I commented on the previous line, not the changed line. More of a question about the Selectors in general.\n. Alright just making sure. I like your approach better :+1:\n. Nit: With the new #selector form, would it make sense to start dropping the SEL prefix?\n. Nevermind - makes sense to follow the pattern here and change it later.\n. How come you need an instance of FaviconFetcher when you're using it to call a class method?\n. Same comment from above\n. This seems too indirect - why not just return back the globe icon instead of going through FaviconFetcher?\n. Nit: I would start breaking this out into another file instead of overloading SiteTableViewController.swift\n. Nit: For the above constants you declare the type CGFloat but here you wrap the value CGValue(5). I would just stick with on way of doing it for consistency.\n. Nit: What's the advantage of overriding imageView with _imageView instead of exposing a custom imageView named iconImageView?\n. I had no idea CGSize had a size property! And all this time I've been using CGSizeZero... \n. Nit: Not sure if it matters but usually you should always call super. Would it make sense to move this above and do a plain return here?\n. I wonder if it's possible to move these calculations into the layout? Instead of using self.bounds, you'd use the connected collection view's bounds. I think you can also infer the height info from that too.\n. Can we merge the cellView with the MenuItemCollectionViewCell now that we have the single collection view or do we use the view elsewhere in a different context?\n. Nit: Might want to call super.prepareForReuse here\n. Nit: Comment\n. Super neat API!\n. Nit: We have a find utility function on Arrays now that does this https://github.com/mozilla/firefox-ios/blob/master/Utils/Extensions/ArrayExtensions.swift#L9\n. Nit: Don't need this but I assume it'll be filled in later so doesn't matter\n. I don't see this being used in the links - was that intentional?\n. I agree - it seems odd to have specific button extensions for 'Toolbar' items. I wonder if I can typealias/associatedtype UIButton -> ToolbarButton and extend off that. That way the scope makes sense and the type we pass into the containers for the URLBarView will be constrained to ToolbarButtons instead of anything.\n. I wanted to try avoiding a subclass approach in case we want to use this functionality for another type of view controller (UICollectionViewController, UITableViewController). Instead, I've managed to extract all the logic into a protocol extension with constraints on UIViewController! See the follow up commit.\n. Nit: Remove commented code when finished.\n. Nit: Spacing in tuple params, maybe break this into a new line?\n. Nit: Maybe safer to do optional as with guard?\n. Nit: Remove?\n. Nit: Can we change this to be more flexible? Maybe something like 1/2 of screen or toolbar width?\n. NIt: Newline\n. Nit: Seems a bit clearer if this was a guard statement instead of an if since you're using it to determine a precondition and exit early.\nswift\nguard self.locationInterval else { \n    return false \n}\n. Nit: Is there a way we can replace this with non-explicitly unwrapped optional? Maybe pass in the profile in init? I'd like to see us move away from using these if we can.\n. Nit: HistoryPanelViewController should be responsible for setting it's table's accessibility identifier instead of the parent VC.\n. Whenever adding child view controllers, make sure to also call didMoveToParentViewController. https://developer.apple.com/library/ios/featuredarticles/ViewControllerPGforiPhoneOS/ImplementingaContainerViewController.html has some additional documentation for the best practices when adding/removing child view controllers.\n. Nit: All of the logic inside this notification selector accesses attributes inside the tableViewController. Why not handle the notification inside HistoryPanelViewController instead? Doesn't seem this VC needs to know about the notification.\n. No need to remove and re-add the UILabel. It should be good enough to make it hidden if you don't need it. Also helps performance if you're not modifying subviews like this.\n. If you're not longer removing/adding the subview you can remove this updateConstraints call.\n. Nit: You can clean up this logic a bit by using guard and a conditional instead:\n``` swift\nguard let clientAndTabs = result.successValue,\n      let numberOfDevices = clientAndTabs.filter { $0.tabs.count > 0 } where numberOfDevices > 0 else {\n    self.syncedTabsHeaderCell.descriptionLabel.hidden = true\n    return\n}\nself.syncedTabsHeaderCell.descriptionLabel.text = String(numberOfDevices) + \" \" + Strings.SyncedTabsTableViewCellDescription\nself.syncedTabsHeaderCell.descriptionLabel.hidden = false\n``\n. Nit: I can see being confused between the name of this andHistoryPanelsince they are bothUIViewControllers. Maybe rename this toHistorySiteTableViewControllerto clarify and disambiguate? \n. Should never explicitly unwrap a weak reference. Since weak doesn't retain, you're relying on another object to keep the referred object around.\n. How come we call this here and also in the parent view controllerHistoryPanel? Don't we only need to do this once?\n. Do we want to always make this no more than 2? Did you try running with the double pseudolength locale? I know we've had issues in the past with setting the number of lines to an explicit number instead of 0 to let it floowww \ud83c\udfb5\n. If this is not aUITableViewCellsubclass, removeTableViewCellfrom the name. \n. As a general rule of thumb, try to seeUIViewsubclasses as 'logic-less' as possible. Ideally views should contain layout code and that's about it. I would move this tap gesture selector up into theHistoryPanelclass where you have access tonavigationControllerandhistoryPanelControllerinstead of passing them down to the view.\n. Don't ! weak refs.\n. You can remove these properties. See comment below re:viewWasTapped. As mentioned before, you don't need to remove/re-add the views. You can return the properly setupUILabel` here instead of nil. Also, you don't need to lazy alloc a nil - you can just set it to nil.\n. Nit: This lazy block and the one below are the exact same code. Why not bundle it up into a small function?\n``` swift\nlazy var topBorder = self.createBorderView()\nlazy var bottomBorder = self.createBorderView()\nprivate createBorderView() -> UIView {\n    let view = UIView()\n    view.backgroundColor = SiteTableViewControllerUX.HeaderBorderColor\n    return view\n}\n``\n. Once you keep thedescriptionLabelaround, you shouldn't need thisupdateConstraintscall or anything in the overriddenupdateConstraintsmethod below.\n. Nit: Maybe just a personal thing but I don't really like reaching into an object to setup properties on one of it's properties. The parent shouldn't need to understand the internals of the tableViewController. A simple workaround could be to add a private extension inside this file onUITableViewControllerthat adds a custom class method that contains this setup code. If you find you're making a lot of uses of the tableViewController you can also create a subclasses.\n. See comment above aboutdidMoveToParentViewController.. Nit: Remove\n. Nit: If it's not aUITableViewFooterHeaderViewsubclass, drop theTableViewHeaderand use justView. See comments in previousviewWasTappedmethod.\n. Same nits as otherUIView` subclass.\n. Yup! Didn't see that.\n. Looks like it's not a popover in the mocks you mentioned above so modal all the way!\n. :dancer: \n. Saw the PR for this. I'll remove this bit.\n. Nit: Can clean this up to be more succinct:\nswift\nvar updatedURLs = sessionData.urls.flapMap { WebServer.sharedInstance.updateLocalURL(url) }\n. Nit: Instead of using 20000.0 you can use CGFloat.max\nswift\nlet constraint = CGSize(width: label.frame.width, height: CGFloat.max)\n. I think moving this to Global.swift is only a half-measure to solving https://bugzilla.mozilla.org/show_bug.cgi?id=1191476. For now I'm just going to leave this here and look into the other bug next week on Test Tuesday. I wouldn't want other test cases using this since it's not that optimal.\n. I have no idea actually. I'm just going to replace it with while :)\n. Should never explicitly unwrap weak variables. Since they are weak, you're relying on someone else to manage the retain count of this object.\n. Nit: Whitespace \n. Nit: If we're using this as a button why not just subclass UIButton? It would save you from having to add a custom gesture recognizer. If you want to keep it a view I'd rename this SyncedTabsHeaderView or something since button makes me think it's a UIButton.\n. Nit: Instead of remaking constraints twice on the same view, why not condense this?\nswift\n titleLabel.snp_remakeConstraints { make in\n    make.left.equalTo(imageView.snp_right).offset(TwoLineCellUX.BorderViewMargin)\n    make.centerY.equalTo(self).offset(descriptionLabel.hidden ? 0 : -10)\n}\n. See comment above about SyncedTabsButton.\n. Nit: I would make this private since it doesn't make sense to expose this publicly.\n. Nit: Why not just use optional calling?\nSwift\nhistoryPanel?.updateNumberOfSyncedDevices()\n. Don't force unwrap the weak ref - use ?\n. Nit: Whitespace I think?\n. Nit: Don't think you need the closure here. You can just do = UITableViewController()\n. Nit: You can just pass in refreshTabs as the target selector for the refresh control - don't need this method.\n. Nit: Instead of having a method that you call to setup this view controller, why not use viewDidLoad? Saves you from having to remember to call this.\n. Is having a hardcoded default to mozilla.org better than nothing at all?\n. So interestingly enough, this happens when the KIFTestActor taps on the Menu button. Looks like we're dividing by zero when setting up the height constraint for the menu here [1]. Not sure how this is happening though. Might be early enough in the lifecycle that nothing is setup yet?\n@fluffyemily Have you seen this before?\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Widgets/Menu/MenuView.swift#L330\n. Nit: You can pass in nil instead of a no-op block\n. I have a feeling that this is a retain cycle since the navigation controller will hold onto the UIAlertController but UIAlertController -> Action -> self (Helper)\n. Like add a note saying that if the string gets truncated, ellipsis will appear?\n. Cool thanks for looking into it!\n. I never noticed it before but I ran the current production version (3.0) and I notice that we always load the home panels on fresh launch. We never ran into this issue because the elements we were 'tapping' were ready to go - like the URL bar and show tabs button. So I guess it actually is in a loading state. I think your PR will resolve this.\n. Heh yea that would make more sense!\n. I was afraid of the name differing from the scheme but .Developer makes a lot more sense than .Fennec.\n. Nit: Extra space between\n. Not sure if we'll need to factor in the locale for the URL in future or not.\n. Looks like endSyncing is called after syncReducer.terminal completes [1] but since we're using the >>> operator, the result is ignored. It also means that endSyncing only gets called if syncReducer.terminal was successful [2]. Instead of modifying endSyncing, why not add the flip to onFinishSyncing?\n[1] https://github.com/mozilla/firefox-ios/pull/1796/files#diff-7a45ce0d70d55bdf297fcacd47e4e874R1032\n[2] https://github.com/mozilla/firefox-ios/blob/master/Utils/DeferredUtils.swift#L27\n[3] https://github.com/mozilla/firefox-ios/blob/master/Providers/Profile.swift#L785\n. Same as the below comment - moving this flip into an observer method.\n. Because of the multi-threaded nature of sync I think it's important to keep this lock here to make sure that we are reporting the correct isSyncing boolean value when sync is happening on the various background threads.\n. Whenever registering observers in init, you'll want to pair it up with a removeObserver call in the deinit method so it doesn't linger after the VC is gone.\n. Nit: As a general tip, try to avoid using force unwraps if you can since they can often lead to runtime exceptions. I would try writing this using guard and using optionals instead so it's safer.\nswift\nguard let keyboardFrame = sender.userInfo?[UIKeyboardFrameEndUserInfoKey]?.CGRectValue else {\n    return\n}\n. Nit: I think using a guard statement here and combining the as! with the previous unwrap would make this cleaner/safer\nswift\nguard var recentTabs = profile.prefs.dictionaryForKey(\"recentlyClosedTabs\"), \n      var urls = recentTabs[\"urls\"] as? [String] else {\n    // Do else clause from below here\n}\n. Nit: Move this up into the guard clause\n. This too\n. Nit: Try to find a way to not use !\n. Is the feature supposed to be recently closed tabs or recent tabs? The pref key is named recentlyClosedTabs but we're adding the tab when we add or remove one.\n. Nit: Use ?? 0 instead of ! in case it doesn't exist. Just a bit safer.\n. Don't think you need this here.\n. Nit: Instead of Profile!, we can clean this up a bit by creating a custom initmethod that takes the profile as a parameter. This would change this to let profile: Profile instead so you don't have to worry about the !?!?!\n. Nit: More of an info tip but you don't need to prefix the colors with UIColor anymore. You can actually just do .whiteColor() and the type inference will pick it up. More of a style thing so it doesn't matter but just figured I'd mention it.\n. Nit: No need for the closure - you can just do RecentTabsPanelSiteTableViewController() and it will still be invoked lazily.\n. Nit: Instead of funneling both notifications into this method, I would create two separate methods since each notification results in different logic being performed.\n. Opt for using if with ? instead of !. Also applies to the variable you have on this class.\n. I would rewrite this method bubble up any variables you're force unwrapping into a conditional unwrap in the if clause. Also, the nil check for the image doesn't seem needed since you're setting the icon to nil anyways. Can we just remove the guard all together?\n. Opt for guard and ?. Can also fold in the inner if statement into this one as well to reduce the branching.\n. swift\nreturn min(5, (recentlyClosedTabs[\"urls\"]?.count ?? 0))\n. Instead of checking for nil then force unwrapping, you can use a conditional unwrap:\nswift\nif let selectedTab = tabManager.selectedTab {\n    screenshotHelper.takeScreenshot(selectedTab)\n}\n. Instead of turning off interactions for the whole view, can we disable just the + button? You should be able to reference it from leftToolbarButtons.\n. Nit: Favor conditional optional unwrapping to nil check + explicit unwrap\n. Not sure if this logic needs to be inside this if since it doesn't rely on the screenshot. I would move it out.\n. Couple of things about this method:\n1. The message passing from the NSNotification makes a lot of sense after our talk about bubbling up the error from the syncManager :+1:\n2. I wonder if we can use the defer keyword in this method for the dispatch_async method instead of having it inline in the guard and at the end.\n3. For the 4 second delay, I've done it a bit differently in my PR. Instead of using dispatch_time, I've added a duration parameter to the showNotification call that dismisses after 4 seconds. Internally it keeps a NSTimer on the common run loop this way if a sync finishes within the 4 seconds the notification is showing it dismisses it right away instead of waiting for the 4 seconds. Not sure this matters much though.\n4. I'm a little wary passing in a reference to the SyncManager through the notification. If we're only using the syncDisplayState, could we just pass that instead?\n. Nit: Don't need else to set to nil since it's nil by default.\n. Instead of reaching for syncReducer?.terminal.vaue, since we call endSyncing afterwards like:\nswift\nsyncReducer.terminal >>> endSyncing\nWe can pass through the value:\nswift\nsyncReducer.terminal >>== endSyncing\n...\nprivate func endSyncing(results: [(EngineIdentifier, SyncResult)]) {}\n. Also, in either case, >>>/>>== don't invoke endSyncing in the failure path since both of those operators by pass the callback if failed. \n. Oops just noticed the upon below. Ignore!\n. In general we should avoid using .value on the Deferred objects since if the Deferred isn't filled, this will force it to synchronously be filled if unfilled. Although it's already filled when reaching this statement, if we ever refactor the code around we could be causing performance issues by blocking on this.\n. Nit: Can clean this up a bit\nswift\nlet errorResults: [SyncDisplayState] = results.flatMap { identifier, status in\n    let displayState = self.displayStateForSyncState(status, identifier: identifier)\n    return displayState == .Good ? nil : displayState\n}\nreturn errorResults.first ?? .Good\n. Nit: Don't need the isSuccess check if you're conditionally unwrapping successValue\n. I wonder if this is the right place to coalesce the engine errors into a single sync state. I remember this morning I was advocating for simplifying the reporting of the error into a single 'sync failed' state but I wonder if this is where we should do it. What do you think about keeping a mapping of engine -> sync state and we add a computed property to infer the overall sync status so we don't lose the status of each engine? I'm not sure.\n. Mentioned in the comment above but I think by calling .value within displayStateForSyncResult, this method will block until the synchronizer is complete.\n. Probably don't need to do this on the main queue and just use upon instead of uponQueue.\n. > however with you patch it feels like I can no longer guarantee that a message will already be displayed when the sync result comes in, so I will have to rethink this anyway.\nMy original assumption was the same in that the notification would always be appearing while syncing but it's no longer the case. We only show the 'Syncing...' for 4 seconds and only show it if the user has manually initiated a sync. The case where we update the notification with a new title instead of show would be more of an edge case than showing a new one.\n. > We can't attach the syncDisplayResult as NSNotification only allows us to attach an object. I thought about only attaching the message, but then I lose the information about whether the message is .Bad or .Stale for colouring. I'll try and look at ways of wrapping that enum value as an object to pass instead.\nArgh Objective-C pains. Between the option of wrapping it with some kind of object vs passing in the syncManager I'm not sure what to do. I guess my fear with passing the syncManager is observers retaining a reference to it which could lead to confusing memory management and retain cycles. Or maybe it's a non-issue?\n. > Would I have to dismiss the syncing... message, causing it to animate away, and then animate it back in with the new message for 4 seconds?\nAt the moment yea it seems that if 'Syncing...' is showing we would need to dismiss it and re-show it with the failed message causing the double animation. I can add an animated property to both methods and if we are showing a notification while another one is active we can hide/show animation to give it the appearance of updating.\nThoughts?\n. I think you want this if condition to occur first before the showingNotification one. If we are still displaying a Syncing... notification and we want to show the sync failed one, the existing notification will be dismissed without showing the next one since the show logic is in the else block.\n. Nit: Now that we aren't using result for anything, the changes to put the deferred into the result variable for all these sync methods isn't needed anymore.\n. Nit: Same comment as above\n. Nit: Remove if and use optional unwrap: tab?.isBookmarked = bookmarked\n. Same nit as above\n. Nit: This would be better using a guard since we're checking preconditions that the string is a URL and not localhost.\n. I'm wary on using a regular expression like this to check if something is a URL. For regular applications I can see this working fine but since we're a web browser our URL handling should be more strict. Looking at https://mathiasbynens.be/demo/url-regex makes me worry that this might be enough. Usually NSURL will try to convert a string to a URL and return something invalid if it can't so maybe try using that to see if what we have is good?\n. I'm not sure subclassing UIView here is the best approach for this feature. Generally we want to keep our UIView's as lean as possible by keeping any 'controller' like functionality out of it. This feels more like a UIViewController than a UIView in it's current state. \nAlso, extending the table view protocols on the UIView adds more controller logic to this view that we can probably factor out into new classes. Let's jam on this approach later.\n. In general try to avoid using optionals as much as you can unless you need them to convey an empty state. For example, since we pass in profile in the constructor, that doesn't need to be an optional. Additionally, try to avoid explicit unwrapped optionals. They tend to be a source of exceptions so I find minimizing their use helps a lot. Some solutions include using lazy properties or using regular optionals if you're not sure the value will exist.\n. Nit: Is this the trick to remove the lines past the bottom? I think you can just use UIView() with no frame.\n. Nit: Don't need to call init, just UIColor(blah)\n. Nit: The code in both branches of this if statement are the same. Maybe refactor into a small helper function?\n. Nit: If you don't need a reference to the deferred you can just call sql.getSitesForURLS(urls).uponQueue()\n. There shouldn't be any animation calls inside a layoutSubviews since this method can get call on every rotation and layout validation. We should look into alternative ways of animating the height of the tableView.\n. This reloadData won't do much since the data is asynchronously fetched above. Don't think we need it?\n. Nit: In general this init method does a lot of things. Might be easier to break it apart into small, single purpose functions to bring some clarity.\n. This is the older way of dequeuing cells. If you use the method that takes in an NSIndexPath, you don't need to do the nil check.\n. Also safe to use as instead of as? for the dequeue call.\n. Shouldn't need this.\n. Is this needed if the user taps outside of the table view? I thought the table view was the entire view? Even if it isn't it might be better to just use a UITapGestureRecognizer instead of having to check if a point is within a frame.\n. Nit: Use MPL preamble.\n. Nit: !\n. I would rename this to isCurrentTab to help indicate it's a boolean since we use currentTab across the app to store the current tab instance. \n. Nit: label.textColor = isPrivate ? .whiteColor() : .blackColor()\n. Instead of using sendSubviewToBack, it might be better to add the subviews in the order that you want them to appear.\n. Whenever overriding framework methods like this, I always try to call the super method to make sure the framework does what it needs to do first.\n. \ud83d\udc4c\n. Actually with the changes in the queries below, this isn't needed. I'll remove.\n. My SQL-foo is weak \ud83d\ude1e I'll revise the query with your suggestions below.\n. The isMirrorEmpty resolves the deferred internally but I'll expose it for better readability.\n. Nit: Instead of having the if check here, it would be safer to include this check as a guard inside the scrollTableViewToIndex method in case we call the method from somewhere else and forget to do the check.\n. This method is deprecated. You should use viewWillTransitionToSize: instead.\n. Nit: Don't need this layout if needed.\n. How come you're adding the gesture to the parent view controller and not this view controller?\n. Minor nit: Now that label/images are loaded, you can move the code that setups the properties on them inside a lazy initializer:\nswift\nlazy var label: UILabel = {\n    let label = UILabel()\n    label.text = \" \"\n    label.font = label.font.fontWithSize(BackForwardViewCellUX.fontSize)\n    return label\n}()\n. Instead of adding the view/view controller directly, it might be better to present the back forward list in a similar way we present the menu by presenting the view controller instead of the view. We don't need the fancy animations the menu has but by implementing a custom UIViewControllerAnimatedTransitioning we can store the animation specific code for animating in/out the back forward list separately from the view controller. The MenuPresentationAnimator and BrowserTrayAnimator classes are more complex versions of this but you can use them as a reference for how we show/hide those components.\n. Visually does that mean that the menu would appear on top of the back forward list? I feel like the menu and back forward list would be mutually exclusive, ie., if we're showing the back forward list, dismiss, then show the menu. @tecgirl would we want the menu to overlap on top of the back forward list?\n. Ah I didn't know there were mock ups. If that's the case nevermind!\n. IIRC SiteTableViewController is used to display a list of sites. I think we can use a basic UITableViewController here instead.\n. Using the last enum as the 'count' for the number of enum properties isn't very swift-y. Instead, I would add a static property on it containing the number of rows explicitly. \nAlso I don't think the name DetailPanel is accurate for the way we're using this enum. Maybe something like BookmarkEditField?\n. Nit: Completely a personal preference but instead of listing the various protocols this view controller conforms to here, I like to break each one out (when it makes sense) and add them as extensions to the class. I find it makes the code cleaner, more readable, and encourages thinking about protocols as 'aspects' or 'traits' of a class.\n. If we're editing a bookmark, we should have a BookmarksModel instance from the previous view controller, no? We can pass that into the init call eliminating the optional since it doesn't make sense for the source property to ever be nil if that's what were editing.\n. I'm not sure if it matters and is worth looking into but usually it's better to invoke methods on view objects in viewDidLoad vs init. I think this causes the tableView to load earlier than the VC would like since UIKit lazy-loads it when accessed.\n. Avoid calling value on instances of Deferred. This will force a (usually) asynchronous call to be called synchronously and block the current thread (in this case the main thread) until the execution is complete. In this case, I would chain in the remove call. See https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserViewController.swift#L816 for a similar implementation.\n. Since textFieldDidChange is the delegate method in UITextFieldDelegate and we're assigning ourselves as the delegate we don't need to explicitly call addTarget since the delegate will get called from UITextField.\n. WRT the comment below, we probably don't need this nil check. We probably want to reassign urlField anyways in case it gets recycled.\n. Same comment as above re: value\n. Don't need this\n. Don't need this nil check - you can just go header.delegate = self. No harm in overwriting.\n. Why not set this background color inside the class definition for the header instead of here?\n. Remove ;\n. Nit: Newline\n. Actually we should only be doing this for the 'delete button'. I would replace the delete button with this call to invoke the deletion. Why make life difficult by adding a button in a cell when we can just tap the cell?\n. Nit: I think this would read better as a guard.\n. Why not setup the font inside the header subclass? Would eliminate this method.\n. If you're implementing a UITableViewController I don't think you need this empty here?\n. I don't think you need this. For example, the DisconnectSetting for displaying the Log Out button setting looks just like this but uses the default UITableViewCell with a colored, centered title. Instead of the button, we can handle the taps using didSelectRow...\n. Nit: Move this setup code into a lazy block for doneButton.\n. Make sure to call super.viewWillAppear() here.\n. I'll let @rnewman correct me if I'm missing some details (which I most probably am) but I'll try to take a stab at this.\nI think this needs to be more informed about making changes to the various underlying bookmark tables such as the folder structure and mirror tables. By using the way we update logins as a reference [1], a couple of things come to mind:\n1. The bookmarks we display to the user are not just the local bookmarks but a result set from both the local and mirror tables (mirror containing all of our bookmarks that live on the server). For example, when fetching bookmarks from the .Local direction, we use the SQL view which combines the two.\n2. Along with the split across local/mirror tables, we also have separate tables for storing the hierarchy of the bookmarks. I don't think changes to this are needed if we're modifying the properties of a bookmark but when we start to modify the position and folder a bookmark lives in we'll definitely need to make changes there.\n3. Looking at the logins implementation, there seems to be some differentiation between modifying .New entries vs .Changed entries. Something else we might need to consider.\nI think that when considering making changes to updating a bookmark, it would make more sense to address all possible modifications (moving, editing) vs just editing. I feel the logic we would write for updating an edit would eventually get replaced by the more complicated version anyways. It would be wise to split this chunk of work off into it's own thing separate from this PR since dealing with the intricacies of the bookmark sync engine is a beast of it's own and needs to be well tested.\n[1] https://github.com/mozilla/firefox-ios/blob/master/Storage/SQL/SQLiteLogins.swift#L467\n[2] https://github.com/mozilla/firefox-ios/blob/master/Storage/SQL/SQLiteBookmarksModel.swift#L296\n. Oops! I've been running the tests from a new SyncTests target and forgot to run the client target :(\n. Nit: You can combine these two lines by using a where clause\nswift\nguard let numberOfTabs = tabManager.tempTabs?.count where numberOfTabs > 0 else {\n   ...\n}\n. Nit: Probably better to just use an optional here instead of an empty block and conditionally call it when needed like completionHandler?()\n. Nit: Spacing in parameter names\n. Technically the window you want is the current key window which might not be the same as the first. Instead use UIApplication.sharedApplication().keyWindow.\n. Nit: I would refrain from using underscores to indicate local vars. It's more of a C/C++ convention. Why not tabsCopy?\n. Nit: The ! calls on tempTabs makes me nervous.\n. Careful with pluralized strings. For now I would follow what we do for SyncedTabsTableViewCellDescription and use %d tab(s) closed in the case we fill that value with a one. \n. Just as a convention we've been adding how this string will be used in the value parameter. For example, since these are all labels I would change Bookmarks.FolderLocation to Bookmarks.FolderLocation.Label.\n. Yup\n. Remove brackets and just do if presenting {\n. Nit: Replace any uses of ! with a guard at the top to prevent potential NPEs.\n. Not sure if you need to implement this method anymore.\n. We've run into problems in the pass with wrapping computed properties over UIKit APIs like this in the past when the caller was not on the main thread. Externally this looks like a basic CGFloat when it fact it reaches into UIKit which requires the main thread. I would add an assert(NSThread.isMainThread(), ...) check here to catch any places this might happen.\n. I'm wary of passing a reference to the BVC and retaining it in this BackForwardListViewController. From an ownership perspective, I can see the BVC's navigation controller to own a reference to this but I don't expect this to retain one back. I would make this a weak ref at the very least.\n. If we're setting this view's bounds to the edges either way, do we need to do this check every time we transition size? If we setup the constraints at the start we don't need to re-set them.\n. I might have forgotten but why do we need this call again?\n. We can probably remove this wrapper property and assign directly to self.transitioningDelegate. I don't see the advantage of giving this another name if that's all we're doing.\n. Instead of returning the Deferred from self.profile.getCachedClientsAndTabs(), you're returning a deferred with nothing in it. What's happening is the upon block above that is chained after this method isn't actually called after the getCachedClientsAndTabs call but is called immediately.\nYou'll want to return a Deferred resulting from the completion of the self.profile.getCachedClientsAndTabs().uponQueue. You can do something like:\nswift\nreturn self.profile.getCachedClientsAndTabs().bindQueue(dispatch_get_main_queue()) {\n    ...\n    return succeed()\n}\nbind is similar to upon except that it returns a Deferred at the end instead of a value.\nHowever, I would probably look to clean this further by consolidating the UI changes into a single method instead of having it split across this one and the upon block in viewDidLoad. One way is to slim down the updateNumberOfSyncedDevices call to only fetch the count, then have another method just for UI:\nswift\nfunc fetchSyncedDevicesCount() -> Deferred<Maybe<Int>> {\n    return chainDeferred(self.profile.getCachedClientsAndTabs()) { deferMaybe($0.count) }\n}\nThis way you can eliminate some of the duplication you have in updating the state of the syncedTabsButton.\n. Since this is weak now, there is no guarentee that this will always have a value so we should  ! \u27a1\ufe0f ?\n. Nit: I would clean up the indentation here a bit:\nswift\nUIView.animateWithDuration(SimpleToastUX.ToastAnimationDuration,\n    animations: {\n        ...\n    },\n    completion: { finished in\n        ...\n    })\n. Nit: Don't need the superview check if you're just running a method on it. \nswift\nsuperview?.addGestureRecognizer(gestureRecognizer)\n. Nit: Whitespace between : and [Tab]\n. Nit: Using 'fetch' implies it will return the devices count instead of a blank maybe. I would either rename this method to updateSyncedDevicesCount or have it return the count using Deferred<Maybe<Int>>.\n. Nit: If you're just updating the value and not touching the UI you don't need to be on the main thread. You can update the count in your chainDeferred block.\nswift\nreturn chainDeferred(self.profile.getCachedClientsAndTabs()) { tabsAndClients in\n    self.currentSyncedDevicesCount = tabsAndClients.count\n    return succeed()\n}\n. fetchSyncedDevicesCount is async so the below method may not have the updated count. You'll need to chain the two using uponQueue.\nYou also don't need this since resyncHistory calls these after it's sync it's history [1]\n[1] https://github.com/mozilla/firefox-ios/pull/1874/files#diff-acde690772668c1259217314efbefe8cR239\n. See note below about chaining these since fetchSyncedDevicesCount is async.\n. Nit: If you don't need to chain anything after this method, you can just return Void and replace the bindQueue with uponQueue.\n. Nit: If we're assigning it 0 here and a number elsewhere, it never becomes nil so the optional is meaningless. I would keep this as nil, then assign it the count later on. This way we can use the non-existence of a value as a way of checking to see if we've fetched the value yet. \n. Nit: Would be safer to call this before the setUpHistoryPanelViews call.\n. Nit: Do we need to do this replacement if we've already aliased \\(TableHistory).url in the SELECT clause above?\n. Nit: Can pass in nil for the callback if we don't want to do anything.\n. We should never be explicitly unwrapped a weak var since there is no guarantee that the ref will be held. I would change this to be an optional instead and update any call sites to either use guard checks or optional unwrapping.\n. There's a method in ScreenshotHelper that does just this called takePendingScreenshot.\n. Nit: Looking below as to how both these init calls are being used, I think you can get away with using init(url; NSURL) as your designated initializer and making init(response: NSURLResponse) a convenience one that calls into init(url..). Similar thing can be done for the helperForURL/helperForResponse in that you can make one a helper around the other since they both end up only using the URL anyways.\n. Nit: Using lazy here doesn't do anything since it will lazy load nil into this property and get setup later anyways.\n. Nit: lazy\n. Nit: You can probably make this a let and non-optional since you have everything you need in the init call before calling super to setup this variable.\n. Instead of having a separate setter method, you can override add a didSet block to topTabsIsShowing:\nswift\nvar topTabsIsShowing = false {\n    didSet {\n        curveShape.hidden - topTabsIsShowing\n        updateViewsForOverlayModeAndToolbarChanges()\n    }\n}\nI'm also not sure if we need to call updateViewsForOverlayModeAndToolbarChanges since it just configures the hidden booleans for the toolbar buttons and nothing to do with the curve.\n. Using a UIViewController here is smart \ud83d\udc4d Will help keep the code for the top tabs out of the ever-increasing mess of the BVC.\n. Not sure if it will effect things but we should use leading and trailing for better RTL support.\n. Since tabManager is a let, you should be able to define this as a lazy property instead of an explicit unwrap and the later initialization down in viewDidLoad:\nswift\nlazy var topTabsViewController = TopTabsViewController(tabManager: self.tabManager)\nIf that doesn't work you might need to wrap the initialization in a closure.\n. Nit: Don't need the frame. UIView() calls the designated initializer anyways.\n. I think the name of the parameter is wrong and should be newTraitCollection since that's what were passing in in the updateToolbarStateForTraitCollection method.\n. Nit: Extract this constant into a let variable - maybe in a TopTabsUX structure in TopTabsViewController?\n. Nit: I'm a bit wary on inferring that the view controller has been added by checking the subview count. This seems prone to error since added a subview has the side effect of this not working correctly. A more direct check could be to check topTabsViewController.parentViewController == nil or topTabsViewController.superview == nil.\n. You might run into issues down the road when implementing the views for the tabs if everything is inside this blur wrapper. Not sure though. I'm okay with starting with this and fixing later if thats the case.\n. Is this supposed to be 'Night Mode On' or just 'Night Mode'? Maybe copy-pasta error?\n. Nit: I'm always a bit wary of explicit unwrap like this. Probably safer to use a guard and optional unwrap:\nswift\nguard let hardware = String.fromCString(machine) else {\n    return FORMFACTOR_PHONE\n}\n. Nit: Just for clarity around these constants, I would move them into an enum named something with some more context around what they are used along with a link like:\nswift\n// Sync Object Format (Version 1) for Form Factors http://docs.services.mozilla.com/sync/objectformats.html#id2\nenum SyncFormFactorFormat: String {\n    case largeTablet = \"largetablet\"\n    case smallTablet = \"smalltablet\"\n    case phone = \"phone\"\n}\n. Nit: I wonder if we can tidy this up a bit and define NSSets/Arrays for each of these and use a where clause:\nswift\nswitch hardware {\ncase let _ where phones.contains(hardware):\ncase let _ where largeTablets.contains(hardware):\n}\nThen also adding some naming behind each of the keywords:\nswift\nlet phones = [\n    \"iPhone1,1\", // iPhone 4,\n    \"iPhone1,2\", // iPhone 4S\n]\nThis way it becomes more readable and doesn't require looking up what \"iPhone1,1\" is if we have to come back to this code in the future.\n. Nit: I would just include a link to where you grabbed these from for later reference: http://www.iana.org/assignments/uri-schemes/uri-schemes.xml\n. Nit: Whitespace\n. You might experience a race condition with this notification because technically the favicon hasn't been added to the database yet when this gets fired. On https://github.com/mozilla/firefox-ios/pull/1946/files#diff-1dccca00bfd714476c188b2b63c6e659R76, a Deferred is return which wraps the async write to the database. If you want to make sure that the favicon is in the DB before firing you'll need to add an upon or >>> effect() block to it.\n. Watch out for explicitly unwrapping weak variables.\n. Nit: For these properties, I feel like these were copied from elsewhere to replicate the style we were using in the Tabs Tray. If the code identical, I would refactor this into an extension class method on UIButton/TabsButton to DRY up the code so we don't have it in multiple places.\n. Make sure to call super.viewWillAppear(animated)\n. Nit: Rename to tabsTapped since we don't click on iPads \ud83d\ude1b \n. Nit: For VC lifecycle events, call super prior to the subclass logic.\n. Nit: Clicked -> Tapped\n. Nit: Minor thing but the Cocoa APIs usually include a more precise timing of the events such as Will/Did to the method to clarify exactly when we are interacting with an element. I would just name these to topTabsDidPressNewTab if we called it after pressing the tab button.\n. Nit: Clicked -> Tapped\n. Nit: You can merge this boolean check with the above guard by adding a where clause:\nswift\nguard let currentTab = tabManager.selectedTab, let index = tabsToDisplay.indexOf(currentTab) where !collectionView.frame.isEmpty else {\n    return\n}\n. Nit: isPrivate = (themeNamed == Theme.PrivateMode)\n. Nit: Probably not a problem but safer to wrap in a guard in case.\n. Nit: Don't think the nil check is necessary at the end since the optional will fail in the first expression and result in false.\n. Nit: I would just wrap the right hand expression in brackets just to add a bit of clarity to the statement.\n. Nit: You already have an if statement above checking the inverse of this boolean. Maybe combine the two?\n. Nit: I wonder if there is a case where the favicon URL passed in doesn't result in a proper URL? Best to add this to the optional unwrapping in the if statement.\n. Nit: Why not move this into a property closure like you did with BezierView?\n. Nit: Same comment as above.\n. Nit: Probably should call super here.\n. Nit: Don't need this init if we're not doing anything in it.\n. Does this get called anywhere? Just trying to figure out the motivation for implementing this delegate.\n. Nit: Don't need to override if we don't do anything in it.\n. Nit: I would add Curve to these variables just to add some more clarity like rightCurve and leftCurve.\n. Nit: Instead of overriding layoutSubview to call setNeedsDisplay, you can set the contentMode property in the init method to .Redraw which will do this for you.\n. Actually I think using contentMode = .Redraw will eliminate all of these methods.\n. This looks like the same code and points for the BezierView. Is there a way we can DRY this up instead of having it in multiple places?\n. Probably a new file would make sense\n. Nit: I would move this outside of this class scope. We don't really define our error types inside classes like this.\n. If this if statement fails and we return the deferred, the deferred will never finish since it will never be fulfilled. I would perform this if check outside the scope of this method and pass in the unwrapped values as parameters so you don't have to worry about checking this here.\n. This check will always fail because we append the favicon to tab.favicons a few lines up. I would double check with @jhugman about when/how we're supposed to use the makeFaviconAvailable method since it relates to the Spotlight extension.\n. Nit: I would replace this with a guard and move it to the first line of the closure to fail fast if we don't have an image\nswift\nguard let img = img else {\n    // fail\n}\n// Setup favicon\n. I'm also a bit uneasy calling an async method then running this method afterwards which might depend on each other. calling profile.favicons.addFavicon should probably be the last thing we do.\n. MPL 2.0\n. Also I think the name of this file is a bit confusing since we also have TabsButton. Maybe rename this to TabTrayButtonExtensions and move to the Widgets folder.\n. MPL 2.0\n. Nit: If this isn't used outside of this file make private\n. The file name doesn't really match whats going on in here. Might make more sense to name this 'TopTabViews' and extract the collection view delegate/datasource into their own file or files.\n. Nit: Now that we have a separate file for the views, I would move this and the enum to that file instead of the VC. Also, why not put this as an extension on UIBezierPath?\n. I would keep this string where it was instead of creating a new localization value for it since it will appear as a new string for the localizers. Also theres a type in TopTabs.Tiltle.NewTab.\n. I assume this string was refactored out of an existing button since we already had the text 'New Tab' available. We just can't add any additional strings with a new value for NSLocalizedString.\n. Nit: I would move this OR statement into the showShareButton definition since being in overlay mode is a factor in determining if it should show.\n. Nit: Now that this method is used for touch ID purposes only, I would rename it to presentTouchAuthenticationUsingInfo to help differentiate it from the other passcode authentication methods.\n. @thebnich Does it make sense to keep following this string convention or move to what we do in Strings.swift?\n. Nit: One way to avoid having to type (AuthenicationSetting -> Void)? each time we want to use/declare a block for authentication is to use typealias to name it something more meaningful and less verbose:\nswift\n    typealias AuthenticationCallback = (AuthenticationSetting -> Void)?\nThen you can use that wherever you declare your closures!\nswift\n     private var touchIDSuccess: AuthenticationCallback\n. This worries me since explictly unwrapped variables should never be nil. If there is a possibility of it being nil, like in the default case, I would change it to a regular optional and either use optional changing (authenticationDelegate?.blah()) or guard statements to invoke methods.\n. In most cases, you'll want to keep a weak ref to a delegate instead of a strong one. I think that's what you want here since you don't want the setting to have a strong ref to the delegate.\n. How come you moved this assignment out of the init call and into the onConfigureCell method? If we want to get information out of the keychain when we recycle the cells, why bother caching it in the setting object if we're invalidating it everytime we recycle?\n. Same comment as above. Not sure if we need to re-cache this when we tap the switch. If we need a new value at the moment of tapping probably better off to store in a local var instead. If not, you can used the cached copy.\n. Same comment as above re: caching.\n. Couple of things:\n1. Technically a 'delegate' in Cocoa land is used as a proxy interface to delegate responses and requests to another object. Since this doesn't define any methods this feels more like a regular Swift protocol instead of a delegate.\n2. Protocol-based programming and composition over inheritance are definitely the way to go in most cases but I think it feels out of place here. There's a tight coupling between objects that implement this protocol and the setting object assigned to it. I think this will be cleaner/easier to use by defining AuthenticationForPrivateBrowsingSetting and AuthenticationForLoginsSetting as direct subclasses of AuthenticationSetting instead of using this protocol.\n. More of a design question but would it technically make more sense to have the title just be Prompt for Authentication to access: instead of Use Touch ID & Passcode to access/Use Passcode to access\n. Might make sense to move these strings into Strings.swift cc @thebnich \n. Whats the benefit of having a success/cancel block instead of using the delegate?\n. Nit: Instead of declaring a success variable, you can return directly using bindQueue. Also, I'm a big fan of using guard to decrease branching so it might be better to use a guard instead of the let _ if.    \n``` swift\nfunc switchToPrivacyMode(isPrivate isPrivate: Bool) -> Success {\n        let tabTrayController = self.tabTrayController ?? TabTrayController(tabManager: self.tabManager, profile: self.profile, tabTrayDelegate: self)\n        tabTrayController.changePrivacyMode(isInPrivateMode)\n        return tabTrayController.authorisePrivateMode(self.navigationController).bindQueue(dispatch_get_main_queue()) { result in\n            guard result.isSuccess else {\n                return succeed()\n            }\n            self.applyTheme(isPrivate ? Theme.PrivateMode : Theme.NormalMode)\n            if tabTrayController.privateMode != isPrivate {\n                tabTrayController.changePrivacyMode(isPrivate)\n            }\n        self.tabTrayController = tabTrayController\n        return succeed()\n    }\n}\n\n``\n. This feel strange to me - instantiating a new copy of theTabTrayViewControllerjust to allow for private mode for authentication. We should reconsider how we performing authentication without the needs of a view controller.\n. Nit: Super small thing but moving these Set definitions outside the extension and as a private file scoped variable would prevent the sets from being allocated every time we callformFactorString(). Minor perf improvement :P \n. Nit: I find thisifstatement difficult to parse. It seems weird that each of these would be an exclusive case - like selecting the tab, but then checking the selected tab if it's private. \n. Now that we are caching the last selected tabs for normal/private mode in the VC, we'll want to make sure to respond and act on all possible tab manipulation events. For example, when selecting 'Close all tabs' I don't thin thedidSelectedTabChangedelegate gets fired but thedidRemoveTabone does so we'll want to make sure to implement that as well.\n. This... seems weird that we are passing in a normal tab as the parameter totopTabsDidPressPrivateTab. Either the method needs to be renamed or what you pass to it needs to change.\n. Nit: Are these changes needed? If not its better to keep the changes related to the PR/bug.\n. Nit: I just noticed that this method is actually fired when private mode is toggled, not when a private tab is selected. Probably worth renaming to reflect that. Same with thetabsTappedmethod above.\n. How come the 0 duration animation block? This is probably causing the delay @varkor method in the bug. You should be able to just call the reload and scroll immediately without the animation block.\n. I don't understand why it's necessary to set thecontentOffsetto zero only in the non animated case. Theanimatedboolean should only toggle if the animation occurs or not and I think that's handled by thescrollRectToVisiblemethod calls below.\n. Maybe - I would check with @tecgirl \n. Makes sense. I think that we should stick with one approach though - either callback blocks or a delegate since at the moment they provide the same functionality. I can be convinced of either option. I think one of the benefits of using the delegate is that it's easier to extend with additional callback methods if we need to reflect different states besides success/cancel and can be easier to prevent retain cycles when passing in closures. Downside is you'll need to extend the option setting classes with the delegate. Mind you it might be better to encapsulate that logic inside the setting classes instead of having it inline in thepasscodeEnabledSettings()method.\n. I thinkdidTogglePrivateModeworks.\n. Nit: Best practice to callsuper.setUp()before invoking your own logic.\n. Nit: Tests don't need to be private - they can just be default (package) scoped.\n. Xcode will automatically recognize any functions that start with test\\* as test cases so you don't need to run them all from a since function.\n. Unless you wanted to chain them all together since they rely on previous state - which works too!\n. Usually KIF is pretty forgiving with timing - especially afterwaitForAnimationsToFinished(). You might not need thesewaitForTimeIntervalcalls.\n. Nit: Just personal preference but it's usually easier to read when the tearDown is alongside the setUp method in the file.\n. Nit: I think setting the contentMode to.Redrawshould work instead of manually callingsetNeedsDisplay. This way we can guarantee that we will redraw on every bounds change.\n. Nit: Probably should call tosuper.drawRect(rect: rect). Nit: You can also use the..<operator instead of...` which will do the -1 for you.\n. Nit: You can probably combine this if clause with the above:\n(toolbarState != .Collapsed || contentOffset.y <= topScrollHeight) && !surpressToolbarHiding\n. Nit: Don't think we need UIScrollViewDelegate here.\n. BlurWrapper is used as a container containing a UIVisualEffectView and a view that's passed in to blur. It might make more sense to create the URLBarMinifiedView as a basic UIView subclass and pass it into the constructor like we do for the header/footer view to get the blur - just to keep it more consistent with other uses of BlurWrapper.\n. Nit: Probably don't need to remake the constraints every time the system calls updateConstraints. Since the layout doesn't change, you can just setup initial constraints in the constructor and let it ride.\n. Nit: Don't think this needs to be not private - maybe I'm missing something?\n. Nit: Just noticed that isHeaderDisplayedForGivenOffset isn't used anymore after this deletion. Want to remove the method as well?\n. When I disable the veil, I see a black background behind the URL bar before it animates down to match up with the scroll view. Is this the graphical oddity you saw? If so, it seems that the timing of the animation of the URL bar doesn't match up with the velocity of the scroll view being put back in place. It's easier to see when I turn on slow animations in the simulator. I assume that this worked before when the views were connected by a constraint but now it's set to an offset from the topLayoutGuide.\nI also notice that sometimes theres a bit of white that appears above the black area as well. We explicitly make the web content not clip to the bounds so it's entirely likely that the glitch you're seeing is the web content poking through as well.\n\nI wonder if we can use the velocity from the scroll view snapping back into place to determine the animation speed so that the URL bar animates in at the time without that delay. That might fix these issues you're seeing and avoid the need for a 'viel' subview to hide it.\nThoughts?\n. > Yeah, this was a gnarly issue. \nYup I feel your pain. When I initially worked on getting the URL/toolbars to scroll it was a nightmare - it's not an easy task \ud83d\ude16\n\nThe problem is that previously, the web content was linked by a constraint to the URL bar, and so when the URL bar animated away, the web content would maintain its relative offset to the URL bar, meaning the bar didn't lift off the web content, and the black bar did not appear.\nNow, the URL bar is independent of the content, with regards to its positioning.\n\nGot it. Figured that was what was happening.\n\nA timing based approach would be difficult to pull off. For the graphical issue to be resolved with that approach, we would want to move the URL bar only when the web content starts pushing it. This would not be immediate, and would be variable depending on the amount the user has scrolled up above the page \u2014 this means we would need to start the URL bar animation at a different time to the main animation.\n\nI wonder if we can utilize this delegate method to determine this. If we know where the user will end up and the velocity, we might be able to factor those into when we show the URL bar. Still doesn't solve the problem of scrolling the web view at time T1 and starting the animation at a later time T2 where you don't really know what the delta is between those two times. \n\nWhat's more, the animation is not linear, so in order for it to line up precisely, we would need to start the URL bar animation at a different time, with a different timing function that depended on how far the user had scrolled up (or, equivalent, the velocity of the bounce).\n\nI think the non-linear nature of this makes it more difficult and was something I didn't factor in when considering the timing function. \nAll in all, maybe check to see if you can use that delegate for something (if you haven't already) and if not I'm good with landing the veil approach. Thanks for taking a hard look at this - as I mentioned before it's not easy!\n. Nit: No need to declare this subclass inside the scope of the extension. I would move this outside.\n. Yup I believe we can by using associatedtype and having the generic passed into each implementor (Batch/Collection clients) fill in the associated type for the protocol. I'll give it a shot!\n. I wonder, would it be better to defer the individual batch posting until the commit is called in order to determine if we need to optimize? For example, uploadRecords in the batch client queues up pending requests until commit is called. At the point of commit, we can them add the query param to the last pending request and look for optimizations like doesn't start batch or commits immediately.\n. Maybe I'm missing something but it doesn't seem that the collection client and batch client have much in common except for posting records to the server. Even then, the batch client doesn't implement it's own way of posting - it defers to the provided function.\nDo you see hiding the batching mechanism all together from consumers (like the synchronizers) to not make modifications to the existing code and infer when a commit/batch is finished?\n. Yup this was completely wrong. Should be using the withQueryParams extension you added to NSURLExtensions. \n. Ya I can probably remove the explicit case and just use the default for now.\n. I'm actually not sure if .Partial is something we want to show a warning about either. The messaging should probably not be NotStarted though since the operation did start - it just partially completed. \n. I've renamed this to Warning since that what we display to the user. I don't think the meaning of Stale makes sense here.\n. Nit: Naming this correctHeight makes it sound like a constant when in fact it produces the side effect of setting a constraint. Maybe rename this to setTableViewHeight?\n. What's the need for the dismissing boolean? Were you seeing timing issues betwene willTransitionToTraitCollection and viewWillTransitionToSize?\n. Instead of calling deactivate then snp_makeConstriants, you can just use snp_remakeConstraints.\n. I think in doing so you won't need the verticalConstraints property anymore.\n. Nit: Don't need this case if the default case does the same thing.\n. Nit: I think we can clean this up a bit. Defining nested callbacks inside callbacks inside instantiating a setting inside an array seems a bit messy.\nSince they rely on the navigationController, maybe define private helper functions that spits out each setting. Something like,\n``` swift\nprivate func privateBrowserSetting(navigationController: UINavigationController) {\n    return AuthenticationForPrivateBrowsingSetting(\n                title: NSAttributedString.tableRowTitle(\n                    NSLocalizedString(\"Private Browsing\", tableName:  \"AuthenticationManager\", comment: \"List section title for when to use authentication for private browsing\")\n                ),\n                navigationController: self.navigationController,\n                delegate: nil,\n                enabled: true,\n                touchIDSuccess: { touchIDSetting in\n                    touchIDSetting.toggleTouchID(enabled: false)\n                },\n                touchIDFallback: { [unowned self] touchIDSetting in\n                    AppAuthenticator.presentPasscodeAuthentication(self.navigationController,\n                        success: {\n                            touchIDSetting.toggleTouchID(enabled: false)\n                            self.navigationController?.dismissViewControllerAnimated(true, completion: nil)\n                        },\n                        cancel: nil\n                    )\n                }\n            )\n}\n```\nthen,\nswift\nlet authenticationSection = SettingSection(title: authenticationSectionTitle, children: [\n    privateBrowserSetting(self.navigationController),\n    ...\n])\n. Nit: Don't need internal keyword since class is defined internal. \n. Nit: I think we can name this method. It changes the app state to be the tab tray. Maybe setAppStateForTabTray or something?\n. Nit: Why not combine this with the guard below?\n. Ignore my previous comments - I see you're using it to control the async flow.\n. Nit: result has a isSuccess boolean method you can use instead of assigning to a blank.\n. Also noticed you moved the logic from the method below inline here. Why not move this logic into it's own method? It does a lot of things and might be easier to read if it was in it's own method or broken down a bit.\n. if result.isSuccess\n. Nit: No need to declare this in the AuthenticationKeychainInfo scope. I would pull this out.\n. > But doesn't snp_remakeConstraints remove all existing constraints? I don't want to remove the horizontal constraints, and I'd have to re-add them if I did it this way, wouldn't I?\nAh true. Makes sense. Removing/re-adding the horizontal constraints wouldn't add any additional overhead though. I think I'm just used to always remaking the constraints when something changes. This works too though!\n. You mentioned something similar in a comment above about firing off a batch upload from addRecords when the batch is filled. When you talk about streaming, do you see us performing network requests as we go prior to the commit if our batch is full? I wonder if that has problematic implications from a user-perspective because once we've sent records to the server, we're committing those records to the server before the user calls commit. Maybe the abstraction of a database transaction is incorrect here and we should move more into a streaming model?\n. Thanks for the explanation! I completely disregarded the behavior of not calling commit and it's effect of not finishing the batch. This makes a lot of sense.\n\nPerhaps the best way to think about this is in terms of Clojure-esque channels and transducers. A channel is a producer-driven queue, like a conveyor belt. A transducer is a worker between two conveyor belts. In this case, our caller is pushing records onto the conveyor belt. We have a transducer that's bundling up records into collections of 50/1MB, and one that's shifting a conveyor belt into different bunches as a limit is reached (similar process). The consumer is uploading each bundle once it arrives. Finally, you tell the destination to commit when the channel is closed.\n\nGreat analogy by the way \ud83d\udc4c\n. Probably doesn't need to be. I always thought of the onCollectionUploaded being an optional callback but we're always going to be passing something in from the consuming side so it might as well be non-optional.\n. Ah yup. Looks like I was getting a bit mixed up with payloads vs records.\nThis should just send the current payload instead of an empty one.\n. Also Grisha pointed out on IRC that there is a bug here that the record never gets added to the new payload. I've added a fix for that.\n. Right now the backoff check is done in the post call from the collection client that gets passed in as the uploader function. The post call already handles filling a deferred with the ServerInBackoffError error. Tracing the uploader calls in the BatchingClient shows that this error will propagate up to the addRecord and endBatch. Since the addRecord would return a failure, external clients and bubble this up further following the same logic flow the existing post call has. I don't think any changes need to be done here.\n. Was this throwing a linter warning? Having it all on one line makes it really long and harder to read. \n. Nit: We can remove these ( ) to clean it up further\n. I'm surprised that it doesn't throw a linter error for the lack of whitespace between the if and (. Probably worth just cleaning up the brackets for the methods below too.\n. I like how this breaks down the operations logically into something that more resembles your conveyor belt analogy you used before. Pull off some records, bunch them up, add them while respecting the state of uploading. This would also clean up the current addRecord call but separating the operations a bit. I'll play around with this approach and see what I can do along with the other comments in the PR about atomically swapping out the payload addition.\n. Nit: Remove print\n. Nit: Instead of having to wrap this in a MutableBox instance, you can use a dispatch_timer block instead;\nswift\ndispatch_after(1000 * duration, dispatch_get_main_queue()) {\n    stepResult.value = KIFTestStepResult.Success\n}\n. If we're handling device registration as a failure, does that mean for any successful device registration, we must have a deviceId/deviceRegistrationVersion? I wonder if we can strengthen the property types to be non-optional in this case.\n. Nit: Can we make these more swift-y by making them camel-cased instead of capitalized + underscore?\n. Question: Any need for this to be defined within the scope of the response struct? Since the devices property is non-private, the type will be used outside of this struct. Seems annoying to have to always preface it with FxADevicesResponse.FxADevice if we don't need to.\n. Question: Do these need to be defined as class methods? Looks like we're always using them within this class and inside non-class methods.\n. Nit: Instead of using strings, there is an NSURLQueryItem object [1] you can use to add query params to a URL.\n[1] https://developer.apple.com/library/mac/documentation/Foundation/Reference/NSURLQueryItem_Class/\n. Mentioned above but it's a bit confusing having this named FxADevice as well as the response wrapper. Best to keep them named differently if we can.\n. Nit: Looking back at the some of the code added to the FxAClient10 class, I wonder if we can just fold the isError check into the guard statements instead of having a separate if statement?\n. Nit: Looks like this type isn't used outside of this class. Why not pull it out above and make it private?\n. Oh nevermind it might be used since it gets passed along with the deferreds. Either way - probably makes more sense to pull this out of the class and put it above.\n. Nit: Instead of defining a deferred variable, you can use the handy deferMaybe method to create + fill a deferred:\nswift\nreturn deferMaybe(FXADeviceRegistrationResult.RegisteredOrUpdated)\n. Seems like we're losing information here by simply passing back a device registration failure error. Maybe include an associated type with the enum to pass in the reason why it failed - similar to how we handle it for why syncing fails [1] \n[1] https://github.com/mozilla/firefox-ios/blob/master/Sync/Synchronizers/Synchronizer.swift#L78\n. Nit: Is it possible to split this into two states? Seems kind of weird having a state include an OR between two states. If this is how the server handles it we might not have a choice...\n. Does it make sense to have these methods be static? I wonder if it would be easier to have them as regular methods and pass in the FxAClient10 object as an init parameter (dependency injection). This might make unit testing this easier since you can pass in a mock client.\n. The client.devices method is async but when this is called in the above error handling code it makes it look synchronous. I can see this causing race conditions because we're returning from the error handling potentially before this code finishes. We should make sure to return a deferred here to chain after to keep the timing straight.\n. Same comment as above re: async-ness\n. I notice we have the same code in the BVC. Does it make sense to move this logic into an FxAState? My understanding of how the FxAState works is that it goes step by step through the different authentication states serially. I could also be totally wrong - @ncalexan would know best :)\n. Pretty sure we'll need a DB migration to add this row for existing clients or else bad things will happen. @rnewman would probably know the best way of handling the migration.\n. Just double checking - is this safe? Are we always guaranteed a device ID?\n. > ```\n\nThe number of records we've already sent, plus another full POST, exceeds the total the server will accept, or\nThe number of bytes we've already sent, plus another full POST, exceeds the total the server will accept, then\nWe can't start another payload in this batch.\n```\n\nCorrect.\n\nWhat if the next POST will only include one small record? We'll instead say this batch is full and commit it, moving on to another batch in the bundle, right?\n\nYup that's what would happen. I spoke with Grisha yesterday and he's doing the check at the record/byte level so we're not sending small payloads if they would have fit in the existing batch. This can definitely be made smarter.\n. Yup. Must have been leftover from some in progress work.\n. That would be much better. I think I use them in other places too...\n. Nope no reason. I'll move it before the uploading instead of after.\n. Ohhh I like freeze\n. Nope. I guess the annoying thing was that modified was non-optional before but now because its coming down as a header value its optional. What are your thoughts on force unwrapping the XLM timestamp? Doing this would match the previous behavior of always having a timestamp but introduce the unfortunate effect of a crash if it's not there. There isn't really an empty state for a timestamp.\n. I guess we're using 0 as a default timestamp in case the X-Weave-Timestamp property isn't in the request. We can always do that for the XLM header.\n. Mutable parameters are deprecated in Swift 3 so a warning shows when I do this :(\n. Nope because since we're starting a batch, the assumption is that these are 0 and we're setting them to the size/count of the start POST call to count them towards the batch. I'll add a comment to clarify.\n. Nit: I notice that this HAWK/Crypto stuff also appears in the above devices call. Maybe we can DRY this up and add the logic as an extension to NSMutableURLRequest?\n. Nit: Similar to the above comment, the way we handle the error in all three of these methods is the same. There's this neat pattern Richard did in the Sync code [1] that we might be able to use here to DRY this up. By passing the deferred through an errorWrap function and passing in the endpoint-specific code for formulating the response as a closure I think we can reduce the duplication.\n[1] https://github.com/mozilla/firefox-ios/blob/master/Sync/StorageClient.swift#L331\n. I wonder if we can make this non-optional and default it to false if we never receive anything. Might help with the code a few layers up instead of having to conditional unwrap it later.\n. Nit: I think I mentioned something similar before, but if you pass in an instance of FxAClient10 instead of the account, you'll be able to mock the client out and unit test this function. For external uses, you can wrap the method in another function that takes in the account but does the creation there instead of inside this one.\n. Force unwrap could be dangerous but as mentioned above I think we can make this non-optional and just default to false.\n. Nit: Probably better if this is private. We shouldn't need to access this outside of the panel.\n. Nit: Private\n. Make sure to always call super whenever overriding view controller methods.\n. Nit: Don't need UICollectionViewDelegate anymore\n. Nit: Using lowercased enum cases is a Swift 3 style. Not sure if we want to move to this yet or not. Maybe keep it capital for consistency?\n. Nit: For theses switch statements, prefer exhaustive cases instead of relying on default - even if we're returning nil. This way if we add anything to the enum we can lean on the compiler to yell at us instead of having behaviour we might not want.\n. Might be safer to use a fail-able initializer here instead of forcing the conversion.\n. Such clean-ness \ud83d\udc4c\n. Nit: These are UITableViewDelegate methods but the extension doesn't make that clear and the protocol is used in the extension below. Any chance we could move the delegate methods here from the extension below and separate the delegate from the data source?\n. Nit: Would read a bit better if you didn't use the negative:\nswift\nreutrn topSiteHandler.content.isEmpty ? 0 : 1\n. Nit: Opt for exhaustive cases instead of default\n. How come this is always a bookmark?\n. Nit: default -> .topSites\n. Not sure if this is temporary or not but when logging use an instance of XCLogger from Logger.swift instead of print.\n. Nit: Not sure if it makes a difference but logically I think of this as 'after setting the title, also set the label'  which would be using didSet instead willSet.\n. Looks like this was borrowed from the existing top sites. It's a bit confusing the way we interweave between background/main queue processing when updating sites. I did a minor rewrite of this that might make it more clear. It keeps things that can be done on the background in the background while grouping all the potentially main thread related things in the uponQueue block.\n``` swift\nprivate func reloadRecentHistory() {\n    self.profile.history.getSitesByLastVisit(ASPanelUX.historySize).uponQueue(dispatch_get_main_queue()) { result in\n        self.history = result.successValue?.asArray() ?? self.history\n        self.tableView.reloadData()\n    }\n}\n\nprivate func reloadTopSites() {\n    invalidateTopSites().uponQueue(dispatch_get_main_queue()) { result in\n        let sites = result.successValue ?? []\n        self.topSites = sites\n        self.topSiteHandler.content = self.topSites\n        self.topSiteHandler.urlPressedHandler = { [unowned self] url in\n            self.showSiteWithURL(url)\n        }\n        self.topSiteHandler.currentTraits = self.traitCollection\n        self.tableView.reloadData()\n    }\n}\n\nprivate func invalidateTopSites() -> Deferred<Maybe<[TopSiteItem]>> {\n    let frecencyLimit = ASPanelUX.topSitesCacheSize\n    return self.profile.history.areTopSitesDirty(withLimit: frecencyLimit) >>== { dirty in\n        if dirty || self.topSites.isEmpty {\n            return self.profile.history.getTopSitesWithLimit(frecencyLimit) >>== { topSites in\n                return deferMaybe(topSites.flatMap(self.siteToItem))\n            }\n        }\n        return deferMaybe(self.topSites)\n    }\n}\n\nprivate func siteToItem(site: Site?) -> TopSiteItem? {\n    guard let site = site else {\n        return nil\n    }\n\n    guard let faviconURL = site.icon?.url else {\n        return TopSiteItem(urlTitle: site.tileURL.extractDomainName(), faviconURL: nil, siteURL: site.tileURL)\n    }\n\n    return TopSiteItem(urlTitle: site.tileURL.extractDomainName(), faviconURL: NSURL(string: faviconURL)!, siteURL: site.tileURL)\n}\n\n``\n. Nit: Just noticed you have aconfigureSampleHighglithCellmethod on theSimpleHighlightCell. You can probably get rid of this method and just do the following in the switch. I'd also renamed the configure method to be more specific and less redundant likeconfigureWithSite`.\nswift\nswitch Section(indexPath.section) {\ncase .topSites:\n    let site = history[indexPath.row]\n    (cell as? SimpleHighlightCell)?.configureWithSite(site)\ncase .history:\n    ...\n}\n...\nreturn cell\n. Ah I see now about your comment about the hack in ActivityStreamPanel where you assign the parentTableView to the cell. If I understand correctly (let me know if I'm totally off base),  but this is similar in how we handle layout for cells on the old top sites where the cells scale which in turn inform the number of rows/columns that we show. This in turn dictates how high the ASHoriziontalScrollView should be thus the need to inform our tableView. I know at least in the old top sites logic this was hard to reason about and deal with.\nWhat if we inversed the relationship? Instead of having this chain of cell -> ASHorizontalScrollCell -> UITableView, what if the table view tells the row, fit in X amount space. The scroll view and cells would then adjust accordingly. I think by having the table view dictate the terms of sizing, it will be easier to update the layout based on view controller lifecycle events and trait collections since the table view and view controller are next together in the hierarchy. Also would give us better control over exactly how we want to render top sites for various phones/layouts/sizes.\n. Nit: Seems weird to have a setDelegate method - feels Objective-Cish. Why not make it a property?\nswift\nweak var delegate: ASHorizontalScrollSource {\n   didSet {\n       ...\n   }\n}\nAlso I'm not sure about the side effect of reloading the collection view here. \n. Nit: Use swift versions of CGSizeZero, UIEdgeInsetsZero\nswift\n    CGSize.zero, UIEdgeInsets.zero\n. Try to avoid explicitly unwrapped variables. I think there is a way we can get away with this either not being optional or let it be optional and handle that throughout the code.\n. If you're interested in making this generic, you could consider throwing in a generic parameter for the content property. You might need to create a base protocol for 'things that a cell can configure with' to constrain the generic type into something more meaningful:\nswift\nclass ASHorizontalScrollSource<T: ViewModel>: NSObject, UICollectionViewDelegate, UICollectionViewDataSource, ASHorizontalScrollDelegate { \n    var content: [T] = []\n    ...\n    cell.configureWithViewModel(model)\n}\nBut! If we don't need this to be generic, then we probably shouldn't bother until we need it.\n. > But short of hard coding in default heights for each different device type we are stuck in the same boat as the previous TopSites. \nHow about we hard code the height for the Top Sites section? We could have set of various heights for each trait collection (compact/regular). It would also let us be exact with the measurements from the designs without having to auto-infer anything. If hard coding the heights for the section makes everything else align nicely and fall into place architecturally it might make sense and simplify the code greatly. \n. Nice! This looks like it's much easier to work with instead of the loop we were doing before with reloading the table view.\n. Remove commented print\n. Nit: State seems to generic of a word for this property. Maybe something more precise like transitionValue?\n. Not sure if we want to setNeedsLayout on the superview everytime a scroll happens. The superview for these views is the entire BVC which includes the WKWebView. Is there a way to prevent calling layout on the entire VC?\n. I wonder if we should move this to viewWillAppear instead. reloadTopSites has some logic for not invalidating when not dirty. Would also make changes propagate easier when switching between panels.\n. Also, even though the reload* methods are async, I would feel more comfortable having the adding/setting up of the table view happen before we call reload since they require the table view to be there. Since tableView is also lazy, this means that initialization might happen while reloading instead of the view.addSubview call below.\n. Nit: Super minor but maybe use a more descriptive identifier like HistoryCell?\n. Nit: I would make this private to help identify it has a 'helper' method instead of something that is from the delegate.\n. We already have the dirty check within invalidateTopSites. Does it make sense to have this here?\n. endEditing is optional so we can just get rid of this extension.\n. Make sure to call super on override UIKit methods.\n. Nit: Would read better as a guard since you want the favicon to normally be there but otherwise, just use the default favicon.\n. If we set the delegate to nil this will burn the house down \ud83d\ude1f Probably safer to use ?\n. It's also declared as weak so we have no control over retaining this so it can become nil. Not a problem though since this is didSet.\n. Super\n. Nit: Since this method is only invoked from collectionViewContentSize, can we just remove this method and put the logic in that?\n. Nit: Maybe just personal taste but how come there are double newlines throughout? Do we really need two lines of emptiness? \n. Nit: Simplify return newBounds.width <= 320\nAlso, not all iPhones are 320 in width. The 6 and 6S are larger [1]. Maybe drive the shouldInvalidate when the trait collection differs instead of a fixed width?\n[1] https://www.paintcodeapp.com/news/iphone-6-screens-demystified\n. Try to avoid explicits. You can usually use a guard clause instead and return a default state or add additional logging if you're worried about it being nil.\n. Nit: Swift-ify CGRect.zero\n. In the panel code you used TopSite as a cell identifier and here you used TopSiteCell. Are these supposed to the same? I think this is supposed to be the actual item cell right? In that case I would maybe rename it to TopSiteItemCell to clear it up.\n. Instead of defining closures here for handlers, why not put them into the delegate? It's already defined and would fit in nicely with existing UIKit methods.\n. Nit: I think I mentioned this above but a rule of thumb I generally use for when to use if vs guard is if you're conditioning on the value usually being there, opt for guard so the code you expect to usually run is not buried inside a code branch. I guess in general it just reduces the branching complexity of the code by flattening it out.\n. This kind of feels weird. Why would self.content.count ever be higher than the max number of items? I feel like this was added for safety but shouldn't be needed if we're calculating our layout correctly.\n. Shouldn't normally be an issue but force unwrapping this might become trouble if Apple introduces some weird size class in the future. I think we can move things around to clean this up.\nSince the traitCollection is the main input into determining a set of values, I would toss ASTopSiteSourceUX and create  a data structure to hold the values like this:\nswift\nstruct ASHorizontalScrollSourceAttributes {\n    let verticalItemCount: Int\n    let horizontalItemCount: Int\n    let maxPageCount: Int\n}\n.. and include a static constructor that outputs what you need for a trait collection:\nswift\nstatic func attributesForTraitCollection(traitCollection: UITraitCollection) -> ASHorizontalScrollSourceAttributes? {\n    ...\n}\nLastly, you can then be more declarative by create private local instances of the different attributes you'd want:\nswift\nprivate let wideAttributes = ASHorizontalScrollSourceAttributes(\n    verticalItemCount: 1,\n    horizontalItemCount: 5,\n    maxPageCount: 3\n)\nYou can might be able to even expose the counts as computed properties that wrap an instance of the attributes struct instead of having them as methods in the delegate.\n. What happens if we have a title longer than 3 lines? \n. What happens if this is longer than 1 line?\n. How come you need to set the hugging priority to required for this? Was there issues with the label squishing?\n. Nit: Since the cell is named SimpleHighlightCell have that in the name of the method is a bit redundant. How about configureWithSite?\n. Since we're didn't override prepareForReuse, if this condition fails, the previous image before the recycle will still be here. Let's override prepareForReuse to catch these cases.\n. The explicit unwrap after a condition unwrap makes me nervous. I would guard this instead of !. The default state can be a blank string if it doesn't exist.\n. So there is a built in UIKit class for this named UIPageControl [1]. Feels weird to pull in more third party source just for a couple of dots.\n[1] https://developer.apple.com/library/tvos/documentation/UIKit/Reference/UIPageControl_Class/\n. For any additional third party sources we add, make sure to also update our license page to give credit and display the author's license in Licenses.html\n. This seems almost exactly the same as the method above. Is there any way we can combine them? Maybe adding a concise flag we pass in to rejig the string we get back?\n. > Actually, this probably isn't even an issue. \nYa probably not. Just thought it was a bit odd we were capturing the value while also assigning to it. Either way, this isn't needed to fix the actual springboard crash. I'll revise the PR to just include the shutdown call when we don't have a syncable account.\n. Sorry I think I was getting confused about how these handlers and delegates work. I took a closer look and I think I understand whats going on here. The handlers should be fine but I found a couple of things that were a bit confusing when reading through this.\n1. It might be more clear to also define a ASHorizontalScrollDataSource along with the ASHorizontalScrollDelegate. Since you're following the UICollectionViewDS/Del convention, smooshing both of these under a 'delegate' is a bit of a misnomer.\n2. I would also clarify what the delegate/data source do by separating them out into their own extensions off of ASHorizontalScrollSource. It might be a bit overkill considering that the ASHorizontalScrollView at the moment requires a UICollectionView so you can probably have the protocols extend from the UICollectionView ones.\n3. Minor thing but I would rename topSiteHandler to something more reflective of how it's both a datasource and delegate for the top sites cell since you use the handler prefix for callback methods inside the topSiteHandler. Maybe topSiteSource?\nI also tried to think of how the handlers would work as delegate methods but it's a bit strange because the ActivityStreamPanel needs the tap event while the cell itself needs the page change event. One option could be to define different delegates ASHorizontalScrollInteractionDelegate / ASHorizontalScrollPageDelegate but considering that we have one method for each one that's a bit crazy and pointless so stick with the handlers \ud83d\udc4d\n. Nit: UIEdgeInsets.zero swift style\n. This seems misleading to me. When I assign items to content I don't expect some of the items to not make it into the list. I can see this being confusing for someone trying to assign to this property. I would try to make the side effect known either by moving the check outside this setter at the call site or creating a method instead of a computed property that expresses what happens.\n. Not sure if this was in layoutSubviews before but you should avoid mixing autolayout code with layoutSubviews calls or things can get a bit messy/weird. If you're looking for a frequent way to update the constraints, how about updateConstraints?\n. Actually I meant adding this to our Licenses.html file that we show from the Settings screen. Sorry for the confusion!\n. Works as well and is much smaller :+1: I'll use this instead!\n. Nit: Instead of appending it here, you can add it to the existing list above [1]\n[1] https://github.com/mozilla/firefox-ios/pull/2078/files#diff-95dc5abad5394ff7fd7f3c0975d6f3f7R55\n. Since the profile won't be changed, we don't need to make this a mutable var and can use a let instead.\n. We can do the same thing I mentioned below re: var vs let\n. Yup this makes sense! The next step would be to grab the preference key/value and add some conditions in the code below to enable/disable the scrolling.\n. Nit: Don't need to do an uponQueue if there isn't anything being done in the upon block. Just profile.history.removeHostFromTopSites(host) works.\n. Very nice \ud83d\udc4d \n. Nit: Back this up a tab/4 spaces\n. So this got me thinking. We don't use the existing removeSiteFromTopSites method because we're using TopSiteItem instead of Site in our top sites source. Looking back at where we convert a Site to TopSiteItem [1] it kind of seems pointless. Why not just use Site all the way through? Would also make it more flexible in case we don't want to show a top site but other kinds of sites as well.\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Home/ActivityStreamPanel.swift#L271\n. Nit: alwaays -> always\n. Ugh collection view updating is the worst. Possibly related to the weird timing issue you were seeing but there is a chance of a race condition here.\nThe deleteItemHandler calls an async database method to update the domain table to hide from top sites on a background thread while the main thread performs the UIKit action of removing the cell. Indirectly, the underlying array of this data source is assigned from the result of a database query for top sites which could cause us to be in an awkward state.\nThe safer thing to do is to keep the database the source of truth for this collection view. If we were using Core Data for example, we would connect a NSFetchedResultsController here and have the model change send out a didChange notification to tell us to update the view. Likewise, instead of us initiating the deletion from the manager, it should be driven by the change in the underlying data model (in this case the SQL table). In this case, you'll want to chain the animation or just a basic reload table after removing the site, invalidating top sites, and resetting the data underneath the top sites manager.\n. > I can convert both suggestedSites and Sites into TopSiteItems and compare them that way\nAnother approach to having the concrete type of TopSiteItem is to create a new protocol named TopSite and have extensions of both a SuggestedSite and Site. Then you wouldn't even have to convert it!\n\nsidenote: I was really hoping to just take the asset name of a SuggestedSite icon and set it to the faviconURL and have SDWebImage load it. I'd have to make 0 changes that way. SDWebImage does support loading files locally. But sadly not from xcassets\n\nI wonder if we can use the GCDWebServer instance and serve the tile icons like we do our error pages. That way you'd be able to use urls \ud83d\ude01 \n. > Note that there's already a view that overlays Local on top of Mirror, so use that\nI'd like to use the view but it has no notion of 'modified' time. I suppose I could add it to the projection but then it would combine server_modified and local_modified under the same column. Given that the clocks aren't exact, I'm not sure if that would be safe or not.\nThoughts?\n. Nit: I assume this is temporary? \n. Unfortunately the extractDomainName can be really slow and calling it every map loop and every find lookup can be costly. Might make sense to calculate the domain names and use that instead.\n. Nit: Same perf issue as above\n. Does this need to be a method that gets recalculated each time instead of caching the value?\n. I don't think this method is necessary. I think there's value in keeping the Site separate from the Favicon and if you need the favicon URL you can just use site.favicon.url. I just don't want to bind a Site to a favicon since they are two separate things. In the future we might have the tendency to ignore the Favicon property and just use this instead.\n. Similar comment for the tileURL property (even though its not part of this PR). Looking at the way a SuggestedSite and regular Site is created, I don't think we need this property and we can simply just use the existing url property. Ideally we keep this object pretty slim because all of it's properties get populated from a database query and it might be confusing to conflate non-DB filled values with others.\n. From a transcript of a WWDC talk [1]\n\nSo if you use UIBlurEffectStyleRegular and the system's in light, it will use UIBlurEffectStyle.light.\nIf you use regular and dark, you'll use dark.\nIf you use prominent, it will use .extraLight and .extraDark. \n\nI think for our uses in this method we want to ignore the system blur and just stick with what we were doing.\n[1] http://asciiwwdc.com/2016/sessions/206\n. Nit: Might be safer to guard here. Not sure if it matters though.\n. How come we need to make this private now?\n. Nevermind! I see it gets used above in the methods as a parameter value.\n. I tried to remove this but it complains about not having a public initializer. I think for an init to be made public it needs to be explicitly defined?\n. > Another option here, then, is for you to alter the history side of the UNION to be history items that match but are not bookmarked. You can then safely avoid grouping by anything, and just use a UNION ALL.\nThat's smart. I feel like I can avoid a lot of hassle doing that instead since I know that the bookmark/recent history queries will be mutually exclusive.\nI think I can modify the query to include a bookmark check in the project like so (excludes the date checks):\nSELECT historyID, url, title, latest, visitCount FROM ( \n        SELECT history.id as historyID, url, title, latest, \n            (SELECT COUNT(1) FROM visits WHERE s = visits.siteID) AS visitCount,\n            (SELECT COUNT(1) FROM view_bookmarksLocal_on_mirror WHERE view_bookmarksLocal_on_mirror.bmkUri == url) AS bookmarked\n        FROM (\n            SELECT siteID AS s, max(date) AS latest\n            FROM visits\n            GROUP BY siteID\n        )\n        LEFT JOIN history ON history.id = s\n        WHERE visitCount <= 3 AND title NOT NULL AND title != '' AND bookmarked == 0\n        LIMIT 19\n    )\n. I would put this in the Top Sites section of Strings.swift [1] and follow the same format as the other strings defined there.\n[1] https://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Strings.swift#L34\n. Nit: Would read better as a guard since we're using the if as a guard to the code below.\n. Hmm maybe UIConstants.swift? We have various colours stored there.\n. We have this neat extension on String called asURL! instead of having to do this if you prefer.\n. Smart \ud83d\udc4d \n. You probably don't need to make this public and having it package-scoped gives you the memberwise constructor for free so you shouldn't need this.\n. Is this needed? We shouldn't need a layoutSubviews method if we're using autolayout.\n. We shouldn't need to define these properties as explicitly unwrapped vars when they are things we can pass through the constructor. I would change these to be lets without the unwrap and create an init method that takes them.\n. We can probably make all these properties private as well since we don't want to touch them elsewhere.\n. \ud83d\udc4d or even in another file.\n. Move this NSLocalizedString into Strings.swift and follow the convention used there.\n. Nitpicky but I would just reorder this code to have the constraints setup last and the table view setup code first so the table view is setup before we add it.\n. I wonder if this subclass is needed. With autolayout, I think we can get away with just using the existing SimpleHighlightCell and add some properties to it to show/hide some labels which in turn set the height constraint to 0.\n. I notice that when I trigger the context menu in portrait then rotate to landscape, the background misses the top 10px of the screen. I have a feeling this is because of how we're presenting the view controller. We show the status bar initially but hide it on landscape which the view controller doesn't compensate for. Maybe try playing around with different presentation styles? We might eventually need to do a custom one if we want to do the blur effect fading in.\n. I don't think so since this condition would have always been true if MOZ_MENU was set.\n. Yep. I'll fix that.\n. Oops sorry I misread and thought this was the tab reordering flag. I think it's probably best to keep this off for now since we don't actually store or use the metadata yet on master. \n. @fluffyemily Does it make sense to have showInline always true when we have the menu? \n. Now that @thebnich landed the iOS 8 deprecation patch, we don't need to do these checks anymore \ud83d\ude2c\n. See above comment\n. Nit: Can probably make these private or at least have a private setter\n. Try moving this stuff in the initializer and remove this method and see if it still works so we can get rid of override layoutSubviews\n. Typo in \"share\" and this string should probably be defined in Strings.swift.\n. You can bump it up to 18 and when I go back to the metadata storage stuff I'll set it to 19.\n. One issue with doing the url NOT IN clause here is that we're not always going to return exactly 20 (or whatever limit is set to) results because we're filtering after we've selected our 20 highlights. You're probably better moving this check inside the bookmark and non-recent history queries here and here.\n. I know we're not implementing the expiration logic Android has but having a creation_date column might help us in the future and save a migration. Check out the metadata PR I was working on for some syntax for this.\n. Instead of appending .enterprise here, you'll want to change the MOZ_BUNDLE_ID in the .xcconfig file so that the extensions get it as well. This will also allow the extensions to adhere to the rule that it needs to have the same prefixed bundle ID as the parent application since the extensions are setup to use $(MOZ_BUNDLE_ID).$(PRODUCT_NAME:rfc1034identifier)\n. Oops I was supposed to remove this!\n. @farhanpatel How does this work for simplifying the Onyx reporting?\n. There's a SiteImageViewSize defined in the UI struct above but it's not used here. If these are the sizes, can we assign them to SiteImageViewSize? You can also make it a CGSize instead of two values and use make.size.equalTo() instead.\n. Nit: Don't need to use remakeConstraints since you're not remaking anything. makeConstraints should do.\n. Instead of making this a low priority, it might also work with a greaterThanOrEqualTo constraint. I assume this is the constraint between the bottom of the image and the cell? Also, if the text beside it is set up with constraints which forces the height of the cell we might not even need this constraint at all and it can just be pinned to the top/leading.\n. Nit: I feel like these constraints don't need to have special priority treatment and the priorities can be changed on the label instead since that's what stretches the height. I could be wrong though - always hard to infer from looking at autolayout code.\n. Nit: Theres a nice helper you can use for this -> site.url.asURL! instead of NSURL(...)\n. Any reason why this is in its own method vs being part of the one above?\n. There's a couple of things here that are a bit wonky.\n1. You're creating the ReaddleSparkIntegration.newEmailURLFromMetadata(mailToMetadata) twice: once in the canOpenURL call and again here. You can just call it once them run the check on it.\n2. Having the switch statement here on the scheme seems like duplicated effort since we already have the scheme in a MailSchemes.plist file. I would leverage the fact you already have the schemes listed as strings available to index through. \n3. I would also try to move as much of this code out of the BVC. Maybe put it in a basic class that we instantiate and add to the BVC.\nWith regards to (2 + 3), you can encapsulate the loading of the .plist file and generate an mapping of all the mailto schemes to providers when it initializes and when you want to open the actual mailto link, index into the dictionary to see if it exists instead of running through a switch.\n``` swift\nclass MailtoLinkHandler {\nlet mailSchemeProviders: [String: MailProvider]\nfunc launchMailClientForScheme(scheme: String, url: NSURL) {\n    guard let provider = mailSchemeProviders[scheme] {\n        UIApplication.sharedApplication().openURL(url)\n        return\n    }\nlet mailURL = provider.mailtoFromURL(url)\nif UIApplication.sharedApplication().canOpenURL(mailURL) {\n    UIApplication.sharedApplication().openURL(mailURL)\n} else {\n    UIApplication.sharedApplication().openURL(url)\n}\n\n}\n}\n``\n. Avoid using explicit unwrapped declarations like this. For example, if we tried to access currentChoice prior to viewWillAppear the app will blow up. Just use a normal optional value if the loading is deferred.\n. I would try to avoid callingcanOpenURLhere. If we start adding to this list, the cells would get recycled and we could get a lot of calls. I would cache this value and calculate it in viewWillAppear so we're fresh in the case a user comes back to the screen. Also, we'd probably want to invalidate the cache when we come back from background so it might be useful to add an observer for theDidEnterForegroundnotification just in the case the user backs out and installs the mail app.\n. Update the comment as it references Outlook. Also, I can see this logic being in other newEmailURL... handlers so it might be useful to pull it out into it's own method.\n. Don't need internal - default scoping is internal.\n. This makes me a bit worried because we are taking values the web and building a URL. Not sure if we can guarantee that this will be a valid URL everytime.\n. Looks like the above lines until L30 are repeated throughout each provider. Might be worth pulling this out into a private scoped function at the top of this file that returns a tuple (toParam, queryParams) to keep the code DRY.\n. If we don't need to do anything here, we don't need theelseclause.\n. NIt: Don't need to prefix with SEL anymore since selectors are typed. You can just useappDidBecomeActive().\n. Nit: Maybe just personal preference but this is named a bit weird. MaybeenabledMailSchemes?\n. Nit: I wonder if there is a way to combine theloadMailSchemeswith theenabledCache`. Seems like we're storing the stuff twice. Could this work?\n``` swift\ntypealias MailtoProviderEntry = (name: String, scheme: String, enabled: Bool)\nlet mailProviderSource = MailtoProviderEntry\n...\nmailProviderSource = dictRoot.map {  name, scheme in (name, scheme, enabled: false) }\n```\n. Nit: If you're just returning a new object you don't need the closure block:\nswift\nprivate lazy var mailtoLinkHandler = MailtoLinkHandler()\n. Same nit as above about lazy\n. I don't think this is used anywhere? \n. Sure thing. Since you're going to be modifying a SQL VIEW instead of a SQL TABLE you won't need to do an ALTER TABLE.\nAs Richard mentioned, we already have the keyword field in the bookmark tables [1] but we don't have them part of the ViewBoomarksBufferOnMirror SQL VIEW [2]. Since VIEWs are read-only and are queries on top of existing tables, instead of altering it, you'll need to just DROP the VIEW and recreate it. We've done this in a few places already that you can use as reference [3]. As far as where the migration code should live, you'll want to add another if case to the updateTable in BrowserTable and update the DefaultVersion to DefaultVersion+1 along with an associated bug number [4]\n[1] https://github.com/mozilla-mobile/firefox-ios/blob/master/Storage/SQL/BrowserTable.swift#L299\n[2] https://github.com/mozilla-mobile/firefox-ios/blob/master/Storage/SQL/BrowserTable.swift#L380\n[3] https://github.com/mozilla-mobile/firefox-ios/blob/master/Storage/SQL/BrowserTable.swift#L778\n[4] https://github.com/mozilla-mobile/firefox-ios/blob/master/Storage/SQL/BrowserTable.swift#L110\n. These are added as User-defined variables which are also injected into the Info.plist so we can reference them through the code.\n\n\n. Once landed, we can test it in the nightly build that comes out at 6pm PST today.\n. MPL-ize preamble.\n. Same\n. I was able to reduce this and just implement the removal code in BookmarkFolder so at least that has defined behavior now. The only annoyance is the abstraction doesn't implement SequenceType so I just had to flatMap and run the indices manually.\n. > Indeed, I wonder if the language constraint that forced us to make BookmarkFolder a class rather than a protocol still applies?\nYa 'abstract' classes seem like a smell in Swift. If we can flatten the hierarchy using protocols that seems more sensible and extendible. \nI gave it a shot over here: https://github.com/mozilla-mobile/firefox-ios/commit/6e9d871efb6a0f6764da954a9339c3dba9f7889e#diff-9d58e2ab1ac6a5e9c80ec12a3f087948\nI think the language constraint you might have run into is not being able to add extensions to protocols for default implementations.\nThis looks like it works pretty well except there's this odd BookmarkFolder being created here: https://github.com/mozilla-mobile/firefox-ios/commit/6e9d871efb6a0f6764da954a9339c3dba9f7889e#diff-f01b23db37df0f5be33d74ce21acc51dR628\nHow come we're creating an instance of the 'abstract' class? Should this be a SQLiteBookmarkFolder?\n. Super minor thing: Pluralize customDataTypeIdentifer since it's an array.\n. Just curious, what's the purpose of doing this? Is it so we can have a more accurate round?\n. Seems safer!\n. I'm not sure why Xcode keeps changing this but I'm pretty sure we don't want the teams changing. Maybe it doesn't like the fact that we use two different teams based on scheme?\n. I wonder if we should just call this Nightly instead of Firefox. The icon might be enough for users to know that it's Firefox already.. Instead of using scrollViewDidEndDecelerating, you might be better add this to the scrollViewWillEndDragging(_:withVelocity:targetContentOffset:) method to know where the user will end up when the scrolling is finished. This way you can know before hand if we need to animate in the toolbar. As far as actually animating in the toolbar at the right time to make it look seemless, that might be a bit tricky but I think with the velocity you'll be able to calculate the time at which the top of the scroll view will appear.. This seems like it's been an issue for a while - not with just this PR. I don't think we handle adjusting the toolbars properly whenever the user zooms. A potential fix could be to add an observer on the zoomScale property and update the toolbar position whenever it changes.. My only concern with baking in the assert with the log.error is that I don't think it's always the case that we want to assert if we use log.error. It's not clear from the calling standpoint that calling it will throw an assert. I think the asserts should be explicit in their use.. This will need to be localized so we should wrap it in the NSLocalizedString function and place it in Strings.swift. Placeholders will also need to be localized. See above about Strings.swift. This makes me uneasy seeing us force unwrap an optional here. Can we guard + optional unwrap instead just in case?. Nit: return text != nil && text != \"\". Nit: Instead of calling a function that returns a closure, you can just pass in the function itself if it matches the signature:\n```swift\n... onClick: addCustomSearchEngine)\n...\nfunc addCustomSearchEngine(navController: UINavigationController?) {\n    self.view.endEditing(true)\n    self.spinnerView.startAnimating()\n    if let url = self.urlString {\n        self.addSearchEngine(url, title: self.engineTitle)\n    }\n}\n``.startAnimatingis also called inaddSearchEngine`. We probably don't need to call it twice.\nI would also try to avoid the if below since we should always know the string. Just to avoid the potential case of the optional check failing and being in an infinite spinner state.. How come we call textFieldDidChange here? Doesn't look like anything changed?. New strings should be put into Strings.swift instead of being inlined.. Probably want to localize this as well.. Just to clarify, when we reach an insertion which would cause an IGNORE, we would not add it, violating the FOREIGN KEY constraint right?. So now if we run into the case where we would have IGNORE'ed, we explicitly fail instead, correct?. > some consistent collection of writes is performed \u2014 e.g., none of A, B, C, or only C, or all of A, B, C.\nAt it's core, each write operation is queued up on the sharedConnectionQueue which is a serial dispatch queue. In either the synchronous or async cases of withConnection, the writes have guaranteed ordering since that's what a serial dispatch queue provides us. Therefore, long write X, write A, write B all execute in this order and before the forceClose call. Since queue is serial and forceClose is called after write C, we know that the weak ref'ed connection we use in those writes will hold.. Nit: disappers -> disappears. I'm a bit wary of having a unit test rely on having an internet connection to work as this could cause failures if the network is slow/unavailable. Is there a way we can use our local webserver here instead? If not, we could also find a way to lift the network/async nature of SDWebImage into a protocol and provide a mock instead.. Nit: BrowserDB has a class method named varlist that creates the (?,?,?..?) string you need so you don't need to do this here.. Nit: I would add a comment clarifying that yahoo/google domains are on the blacklist. Without that, it looks like this test doesn't actually do much.. Nit: I would rename this to something more specific like HighlightableButton. CustomButton seems too generic.. Nit: This if statement isn't very Swifty. Probably because it was written a long while ago. Maybe replace this with something like:\nswift\nif let removalIndex = tabs.indexOf({ $0 === tab }) {\n    tabs.removeAtIndex(removalIndex)\n}. Nit: Typo in the d on Delete. Nit: Typo on Tatb. Nit: these -> this. Using MAX here for the query to return a unique, predictable result makes sense but I think we might be able to improve this by using the last visit date instead since ID is somewhat arbitrary. Turns out we already have a view named ViewHistoryVisits that we can query that will tell us this. The only thing missing from the view is the domain ID but I believe we can surface that in the view from the history table we're joining with. When adding the column to the view we'll need to make sure in the migration that we DROP the old view and recreate it. We do this a few times throughout our versions so you can see how we do it there.\nOn a minor note, since we're using the same derived table subquery in both the nonRecentHistory and bookmarkHighlights, we can DRY this up by moving the query string into a variable and inserting it in the query.. @rnewman might have some other thoughts - I'm not the most SQL-savvy \ud83d\ude26. If we amend the derived table subquery to using MAX on the visit date, we should add a test case to verify that the returned unique result is always the latest.. Nit: Also, since this test case just tests removing duplicate highlights, I would clean this up a bit and don't bother adding non-facebook.com sites just to make the case more clear.. I've added a nil default parameter there to allow me to pass in a mocked version of the tracker in the test cases. This doesn't change any of the existing callsites in the app.. Moved this logic into a method which I can call explicitly from the unit test.. This is most of the refactoring I've done here. Instead of combining the creation and presentation of the overlay view controller, I've separated them so I can get a handle to the view controller without worrying about it being displayed.. We shouldn't rely on the telemetry data type to determine which section to show. I've changed this and separated it at the top of the method.. Found this trick here: https://yahooeng.tumblr.com/post/141143817861/using-nsurlprotocol-for-testing. Thought it was pretty neat!. This is essentially most of https://bugzilla.mozilla.org/show_bug.cgi?id=1311408. Once we finalize these we can probably close that bug.. Nit: You can clean this up a tad by using min\nswift\nlet nightModeBrightness = mix(0.2, UIScreen.mainScreen.brightness). I'm not a fan of it either. I'll see if I can weave it in to fit in with the more functional code in this module.. That would be ideal. How would you suggest getting one? Is there a 'start' ping of some sort that can give me a timestamp?. I wasn't sure if I wanted to conflate the two since it wasn't clear what SyncDelegate was around for. Moving the stats stuff into it will clean this PR up quite a bit.. Nit: What's the comment referencing?. I'm a bit confused as to why we need to set isRestoring here. isRestoring is only used within restoreTabs() when we are pulling the tabs from disk but then we reuse the same property for restoring undo tabs. I guess the confusion might be coming from the fact that we are using didRestoreTabs for both undo-able tabs and tabs restored from disk. We might want to find a way to disambiguate this.. Nit: Extract the \"Separator\" string into a variable so you can reference it here and down below when building the attributes.. Nit: I would make this naming more specific since it's exposed to all the source files in the package. Maybe TopTabSeparator? Also just noticed that all instances of seperator->separator. How come this is wrapped in a dispatch_async block? Maybe add a comment?. The name of this delegate method isn't true if we're returning early. Naming it topTabsDidTogglePrivateMode would be better since the naming suggests that it gets called anytime the user taps the private mode button.. Same question as above re: dispatch_async use here.. Nit: Data structures should be capitalized. Also, I think naming this TopTabChangeSet would be more meaningful since tableUpdate is an action and not a noun.. This seems odd using a list of tableUpdates to initialize a since tableUpdate. If you're looking to have a way of combining tableUpdates together, how about overloading the + operator?. Actually, you could even do the diff using the - operator!. Nit: Change to log.debug before landing.. Nit: Might be cleaner to have this as an extension on Tab:\nswift\ntabA.matchesDisplayGroupOf(tabB). Nit: Remove before landing or move to log.debug. ?. private here would be better since we have no intention of using this outside this lexical scope.. Yup that's definitely wonky. The force unwrap is awful but I'm a bit wary of making this change now since I'd ideally like to pass the optional through but existing callers expect an image. I'm not sure if a blank image is a good enough default state.. Is this a typo?. Don't think we need to prefix the variable name with an underscore here? If we want to make it a private setter we can use private(set) var json: JSON. Nit: I saw below that you defined helpers for this in the JSON extension. Could you use those here?. Should the MemoryLayout here use Int8 instead of Void?. I don't think this is equivalent to the dispatch_once used in the Swift 3 code. This would imply that the loginsKey and loginsDB objects would be created lazly per an instance. What we want to do here is use static.\nI started to write a patch to add this but ran into an interesting problem. Within the dispatch_once block we reference self.files. This means that previously we were binding the first created file accessor to our loginsDB which is definitely not correct. I'm a bit wary of just making this a static also because the current assumption is we create one per a profile on purpose.\n@rnewman @farhanpatel @fluffyemily Any thoughts?. Looks like lazy properties are still thread-unsafe\nhttps://bugs.swift.org/browse/SR-1042\nI'll investigate moving these into regular properties and de-singleton Profile.. I wonder how this worked at all? Seems really weird to have the lower be higher than the upper in the first place.... I ran into a similar issue when I was working on fixing another test case in Storage and it was actually being caused by an incorrect migration from NSNumber [1]. Could that also be the case here?\n[1] https://github.com/mozilla-mobile/firefox-ios/commit/71bc3917d27f09a8806d279694368768933cd71f. Note: Date.now() has always produced a Timestamp which is a UInt64 which makes me curious about if this change is needed.. > It strikes me as more Swifty to parse a UInt64 directly than to use an NSNumber to add to an Any in order to convert a UInt64 into a Double.\nYup I agree\n\nTo be honest, I have no idea how this ever worked, if a previous version also passed in a UInt64.\n\nSo I think what was happening before was that the NSNumber gets interpreted as a Double which essentially captures anything a number could be (float, long long, etc). \nI'll make sure to go back to my previous PR and update NSNumber conversion to UInt64 when this lands!. This should be okay. The largest numbers we store are the unix timestamps and those fit.. Nit: Removing extra comment line at the top. Nit: If we don't use the setUp and tearDown methods we might as well remove them for now.. This works but for future tests you can call value on the deferred to have the async call block this thread until it returns to make your test case synchronous.. Also, I assume that since we're not providing a HTTP client we're talking to the development server to get our registration token. Just for clarity I would name this test case in a similar way that we named our Live account tests. Another option would be to mock out the HTTP client and return static responses to avoid the trip to the server.. Looking at where we setup the instance in the AppDelegate, it seems that the assumption is that this shared instance should be available throughout the lifetime of the app and doesn't really make sense if it's nil. Changing this to be non-optional and refactoring the init method to take no arguments and call it inline here might clean this up a bit. Instead of the createSharedInstance call below you could have a new configureFor(application:profile:) that would set the properties you were going to set in the initializer. At least this way you won't have to unwrap the shared instance every time you want to use it when really it shouldn't be nil.. Also, you might be able to make use of assert in cases where it could be developer error (like forgetting to call configure to back up the always-available reasoning of the shared instance. . Nit: NSLog is probably better but for consistency we should use an instance of XCLogger for logs.. When I was reading through the code that uses this deferred it was a bit confusing as to when we returned a failure and when we succeeded because this was defined as Success here. It might be worth it to just create a new deferred in the places that you need and pass that along to the various helper functions so we don't keep referring to this instance property.. This unwrap is worrisome because application is defined as a weak optional variable so we have no control over when this reference lives or dies. I would find a way to either wrap this with a guard or factor in the weakness of this property when considering the flow of the application at this point.. Nit: Move strings to Strings.swift?. Nit: Super small nit but there might be an opportunity to clean this setup code up but moving it to a private extension on UIUserNotificationSettings since it's auxiliary to the logic flow of this helper.. Just a random thought:\nI noticed that most of the methods in this helper map to various states we're in with regards to registering for push notifications. I wonder if it would be more clear and concise to collapse these into a state machine - similar to what we do for the account process - for transitioning between each stage.\nThis might also give this class stronger meaning than being named a 'helper'. It could be called PushRegistrationStateMachine or something.. As noted above, if you wanted to provide a mock version of this for unit testing you would move this to be a protocol and then implement it below with a 'real' HTTP client.. Another option is to mock at the network layer by providing a custom NSURLProtocol. I did something similar for the PingCentreTests https://github.com/mozilla-mobile/firefox-ios/blob/master/ClientTests/PingCentreTests.swift#L25. I don't see us making multiple instances of StagePushConfiguration or DeveloperPushConfiguration so you could probably just make PushConfiguration a struct instead of a protocol and create static instances to refer to.. Since this initializer is failable returning nil here might make more sense as I don't see decoding issues being a fatal error or developer specific error.. Nit: Looks like you've defined this to clean up the parameters for the initializer but then break out each property into an instance property on FxADevice below. Maybe make this a struct and declare it as instance variable?. It seems weird that this would be causing problems because of the migration. I'm a bit concerned that by defaulting to 0 we might be breaking some assumptions with the device registration stuff. Could it be because in Swift 2.3 this was a failable initializer but now in Swift 3 it's not?. Turns out the migration completely removed the code that grabs the key from the keychain. This just looks like it returns a basic string heh. I've added back in the keychain code and made it static.. Be careful with this change. I've had an issue in the past where after moving SavedTab from inside a class/extension scope to the file scope the app was no longer able to decode the tab from disk because technically it becomes a different class (TabManager.SavedTab != SavedTab) from the decoders point of view. The result of this is when users first launch the app from the change their session is gone because the decoding failed but then works on subsequent launches. We'll want to try to keep this class the same.. Since we want milliseconds and ProcessInfo returns seconds I opted for uptimeNanoseconds. I also found this handy function on UInt64 to help with the negative/overflow issue:\nhttps://developer.apple.com/reference/swift/uint64/1541211-subtractwithoverflow\nI'm able to detect the clock jumping backwards to prevent any crashes and log it to the logger.. According to the sync ping spec [1] the ping expects this to be milliseconds from epoch instead of uptime since boot which is what uptimeNanoseconds returns. I've pushed this using uptime but I think I should be using .now() instead...\n[1] http://gecko.readthedocs.io/en/latest/toolkit/components/telemetry/telemetry/data/sync-ping.html. Oddly enough I don't think the previous logic for the None case is ever used. syncReducer's terminal returns a Deferred<Maybe<()>> so the old endSyncing never got called with an optional. . These are left empty and will be filled in during Buddybuilding. Moved the old display name property from the now-removed .xcconfig file to a user defined variable for this target.. I find it odd that the view isn't created when viewWillAppear is called. Moving the reload to viewDidAppear seems to late. Would calling reloadData from viewDidLayoutSubviews work better here?. Is this subject to the issues we had when we did the Swift 3.0 migration?\nhttp://stackoverflow.com/questions/38124480/nskeyedarchiver-does-not-work-in-swift-3-xcode-8/40034694#40034694. Nevermind - since we're casting to NSNumber instead of Int we should be okay.. I think the suggestion was to have the setup code to construct the sentTabsCategory to live in an extension of UIUserNotificationAction instead of having it inline here. Doesn't matter though.. If index is 0, the condition will still pass and getting the -1 entry of the tabs array will fail, no?. Double check to see that users who upgrade to 7.0 won't already be at version 19 of the database. We might need to add this addition to a version 20 migration.. Nit: Doubled up on the assignment to \"pushRegistration\". Nit: Move prints into a XCLogger log . The current, somewhat-broken FxA flow does the following:\n\nUser signs into their FxA account\nIf they've logged in from this IP recently - good to go, account if ready for syncing\nOtherwise, the user is shown a \"Confirm Email\" screen.\n\nThe problem is that when the user sees that confirm email screen, the FxA server immediately send back a token with the account information. The account is set in the needsVerification state instead of the none state. This is the cause of the following bug https://bugzilla.mozilla.org/show_bug.cgi?id=1345597.\nWith that being said, I'm curious about the following scenarios with this code change:\n- When a user requires email confirmation, does the FxA screen immediately after it registers with the push service? \n- When the user requires email confirmation, are we still able to successfully register the device for push even though we haven't actually confirmed yet?. Nit: Probably want to prefix the string identifier with SentTab.* to help disambiguate. Also don't need the bug - maybe a more descriptive sentence about what this string is used for?. Nit: Do we support WebPush with this yet? Might be helpful to remove that from the comment to clarify.. Thought: When we do add in the UI for asking the user to accept pushes, do we want the event to show the UI to be driven by the didLoadProfile event or initiated by part of the UI? For example, if want to show the UI at a particular place in the app, it might be easier to have the view controller request to show the UI and ask the helper if we need to vs having the helper auto-show when the profile loaded.. The purpose of using NavigationTests.self here is to get a reference to the unit test's Bundle instead of the app's Bundle Bundle.main. This is so we can reference resources that are bundled in from the tests instead of the resources bundled with the app. IIRC the test bundle contains the fake .html and .json files we use.\nIn short, as long as the class referenced in the Bundle(for:) call belongs to the test target this should be good!. Nit: Instead of checking if the value is not nil then proceed to optionally and explicitly unwrap the value below, you can set this to be if let range = selectedTextRange and use that below without the ? or !.. I'd be careful with explicitly unwrapping this. It might be the case that setting the offset to -1 when we're already at the beginning returns nil. Wrap this in a guard before continuing on to using the position, otherwise just return.. Should these indices be on AttachedTablePageMetadata?. Nit: Not sure if you need to but you might want to call super.viewWillTransition here as well.. Nit: Remove. Nit: Since you've used the Section enum throughout, why not Section.highlights.rawValue?. Nevermind - probably will use this later.. Nit: Why do we have this function if all it does is call self.collectionView?.reloadData()?. Nit: Newline. Nit: Remove this - don't need it twice!. Nit: Remove?. Do we still need this?. Nit: Newline. Nit: Remove?. Nit: If these helper methods aren't method to be exposed you could make this extension private.. Nit: Is there a way to bake this assumption into this method either through an assert or a guard + throws? Maybe convert to Data and try to base64 encode it or see if we can convert the string to UTF8 using https://developer.apple.com/reference/swift/string/1690779-canbeconverted?. Nit: Since this method already throws, would it make sense to use a guard here as well and throw an error if we can't get a UTF8 representation of the data?. Coocoo cachu! \ud83d\udc33. Should this be Xcode 8 as well?. We can't assume that because we're able to get a handle to the account that it's verified. You might be able to use the actionNeeded property to make sure we're not in a pre-verified state. It's kind of annoying though because we're conflating the .none state with being verified which might not always be true.. For example, if the user logs in but never confirms their account they would be in an unverified state.. I completely missed the .needsVerification state which makes a lot more sense \ud83e\udd18. Q: Do we still want this commented out?. Nit: For some of these CGFloat calculations it might be good to floor() them so we don't end up up in sub-pixel land.. Nice addition - I wonder if this fixes other issues we've had with cell resuse.. This should be inside the scope of the bookmarkAction block instead of function contextMenuForSite or else this will get called every time the context menu is opened.. Also, you would want to duplicate this event - one for removing and another for adding a bookmark.. I see you added .Remove but don't use it anywhere - forgot to add a line somewhere?. The reason we filter out all locally-hosted pages is because we also use the local web server to display error, reader mode pages, and session restore information. In these cases we want to filter out locally server content. Maybe we can let only the about:home page pass through the filter and let the others still be blocked?\nAlso, no need for the additional semicolon \ud83d\ude04 . Nit: No need for this additional space.. I would be careful about hard coding the port we use for local web pages. If we want to change the port later one, it will break this feature and the compiler won't tell us much. Along with the suggestion above, we should try to only whitelist the home page and leave the other about pages not visible.. Nit: Minor style thing but brace on the same line as else. Be careful about using ! on optionals - especially on a property of an optional value. In these cases, always handle the nil case gracefully by either using a conditional if (if let x = x) or a guard (guard let x = x).. Similar story as above. There are rarely times you'll need to check for nil values like this. Opt for using guard/ifs.. This line needs to go into the block above - similar to the .RemoveBookmark case.. Nit: On our desktop version of Activity Stream we use underscores between words to make it more clear. Could we do that here as well?. Made these signatures package scoped so I can poke at them in the test suite.. In order to assign mock versions of history, recommendations, I needed to move these from getter properties into proper variables which default to the old getter version. The only logical difference here is that they are not lazy loaded.. Nope that's fine - we can add the space \ud83d\ude2c. Missing a return here. Once this scope finishes we'll call the image setting code below.. I would break out the let url = urlString into it's own guard clause above so we don't combine the lack of urlString with showing the start page.. Move this to just before return cell.. Nit: Just a personal preference but instead of using a block here I would declare a small function just above and give it a name like homeAndNormalPagesOnly so when future contributors come across this it's more clear what's going on here.. Not yet :(. @rnewman What are your thoughts on exposing a method like this for bookmarks/history? . > Is it counting bookmarks created on this device, or anywhere? Only bookmarks in the Mobile Bookmarks folder? Does it include folders, livemarks, separators? \nProbably the best way to put it is all of the bookmarks the user has read access to on their mobile device. For example, when we generate the highlights for Activity Stream, we use ViewBookmarksLocalOnMirror to give us all of the reconciled bookmarks a user has. This will exclude any bookmarks that are in the buffer but we only generate highlights on the user's view of the bookmark world. I suppose that would also include livemarks and separators as those are stored as items which is fine I think.\n\nFurther, this will be sufficient to uniquely identify some users. What approach are you taking to anonymize these numbers?\n\nGood question. Do we handle this on desktop Activity Stream? /cc @sarracini @ncloudioj\n. Sounds good - I'll push up a pass on the query. I'd imagine it would be similar to how we're pulling in bookmarks in our panel view without the trimming of the result set by folder?. We can remove this from our build settings and use DEVELOPMENT_TEAM instead but for the entitlement files we still need to use AppIdentifierPrefix as that contains the team plus a trailing period.. Forgot to swap out the nightly entitlement to use the enterprise one.... Since we're just grabbing a string from the bundle which should always exist and never fail, we don't need to return an optional anymore.. Having this inside the method should be the same as having it out since static vars are the new Swift 3 singletons.. Nit: can we reduce this whitespacing?. So in this guard case, if we get a verification message but we're already verified, does that mean there is no action needed? Seems like the error might be misnamed since I'm not sure if having no action needed is an error state.. Nit: I think you can shorthand this by doing account.advance() >>> succeed. @rnewman Does it make sense to invoke all on all these sync operations instead of bundling them up and calling a syncSeveral (currently fileprivate) or does it not matter since the internal AsyncReducer will just append the sync ops to the existing lock and reducer?. Looks like handle is a potentially async method since it returns Success. To avoid your test completeing before handle finishes you'll want to call .value on the result to force it to be synchronous. If handle calls methods on the main thread asynchronously the test and handle will deadlock and never complete. In this case you can create a custom XCExpectation and XCTest API waitFor to wait for the operation to fufill the expectation.. Nit: You can use default scoped methods in your tests as long as you import the module with @testable. No need need to use public (unless you want to!). Nit: Could we have an additional line of logging here printing that we failed to attach the DB?. Sorry for not noticing this earlier but since we'll want to translate this sentence for our different locales, we should move this string to Strings.swift. Check out how we've done some of the other strings to see how to add this one as well.. Nit: Typo in passowrds.. Nit: Typo in engineIndetifiers. Would it make sense to move this to an extension on SwiftyJSON so we can use it in other places we .utf8Encoded SwiftJSON values? I see we also do this in FxAClient10.swift and PushClient.swift.. Nit: Move to logger if we want to keep the print around?. > How can we actually make the preserving (encoding) part crash? We do have some vague crashes related to dealloc. But that could be related to the Try/catch block. Hard to say.\nIs this what you were referring to? Finding a way to fail to restore so we can assert some kind of failure condition here? You could try emulating the 7.x tab loss case by creating an archive with a different namespace'd class and try pulling it back out with the current one.. Just to be on the safe side, I would use .upon() instead of >>> here. .upon will always be called and passes the closure a maybe type so you can check for errors. This way we'll always call this logic even if we decide to fail at a later point.. We might want to move this into an else block so if we fail the if check above we always make sure to shutdown and call completeRequest.. NSUUID inherits from NSObject so not entirely sure what NSUUID() would be here. Just to be safe I use the string method.. Yup that's a problem. For some reason I though TimeInterval was already in milliseconds but alas it is not.. Nit: Just if wasClosed { works!. I don't like having APP_IDENTIFIER_PREFIX as a user defined property since it's confusing with AppIdentifierPrefix which is used in the entitlements and contains a period at the end of the team ID where as this does not contain the period. Technically this is just the DEVELOPMENT_TEAM property but Ill introduce that change in another patch.. This doesn't need to be an optional since it should always be there. If it's not something is definitely wrong.. Nice! This makes it all work smoothly :D. Yup I think this is supposed to be .string. We have so many stringifying methods!. Nit: I find this a bit dense to read through. Maybe break it up a bit?\n```swift \n        func idsFor(inconsistency inc: BufferInconsistency) -> () -> Deferred> {\n            return {\n                self.db.runQuery(inc.query, args: nil, factory: inc.idsFactory)\n                    >>== { deferMaybe((type: inc.trackingEvent, ids: $0.asArray().reduce([], +))) }\n            }\n        }\n    let ops = BufferInconsistency.all.map { idsFor(inconsistency: $0) }\n    return accumulate(ops)\n\n``. Nit: extra line. Nit: Don't need to use brackets in swift if statements. Nit: You can just usesucceedinstead of{ succeed() }. Nit: Doesn't need to have a failable initalizer unless we wantRepairResponse.fromJSONto throw something.. Nit: Theifswork well but it might be cleaner to useguardsince you're checking for preconditions before executing the repair logic.. Nit: InsidegetProblemIDswe take the array ofGUIDs and convert it into a set. Then below we convert the set back to an array. Could we just have this return an array?. Nit: Swift is smart enough to infer the enum type here so you can just use.notRepairing. Nope - we don't use this variable anymore. Go ahead an drop it.. Nit: We might as well just remove this method and useKSCrash.sharedInstance().crashedLastLaunchdirectly. I think this is fine. I don't remember why we wanted to not restore blank tabs but I like the idea of getting back exactly what you had open.. Yup!. I'm assuming the reason Leanplum isn't able to get pulled in through Carthage without this is because they haven't put their source up yet to build from - only the frameworks as releases. I don't know if there is a per-dependency way of doing this check.. Did you mean to get rid of theaccountVerified!`?. @rnewman Just to double check - are we okay with running buffer validation on all channels when merging is off so we can collect telemetry data from the sync ping?\nMy end goal is to release this in v8.x to start collecting a baseline of data prior to the bookmark repair work.. Cool thanks! I've already included a took field in the validation stats to tell us how long each validation will take:\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2734/files#diff-1a81823fc27dd5019ba11af19920296fR807. Does it make sense for the image to be named 'new_tap'? Should it be 'new_tab'?. We use this blue throughout the app (home panels, login manager, action overlay). Was the intention to change it in all of these places? . Nit: Do we need this?. By using a screenshot to do the blurring, when the user rotates the device the blur background gets all mixed up because the screenshot was taken from the previous orientation. Could we use the UIVisualEffectView here to blur the background dynamically so we don't need to take the screenshot for the blur?. Sure! The only reason I need to use self in the places I did is because when calling a method from within a closure you need to use self.. I suppose it could but it uses a pretty specific PrefsSyncEvents key for now. I would move it out but it's unclear how it would need to work outside of the sync ping so I might just keep it here for now.. Oh geez yes. Hmm I don't think we want to include the new commits for libraries we didn't update in the Cartfile. Is there a way we can only include the new SwiftRouter commit? Also, how come we updated the Alamofire version to be 4.3.0?. This was an old feature that never made it to release. It was kind of buggy so it might be worth either removing entirely or making the deep links worth with it. Essentially it replaces the UINavigationController we setup with a subclass that shows a notification view in place of the status bar. I think it's fine to keep commented for now but I would just add a comment.. Nit: Could we move this code to somewhere else? Maybe the LeanplumIntegration? Its just that we already have quite a bit of code in the app delegate and whatever we can do to keep it down would help.. The asserts are enabled for development/debug builds so in those cases we would hard crash (which is fine for testing) but will be silent on release builds. \nI'm pretty confident that the delegate method is always called on the main thread but if you're looking to guarantee it we can wrap this with something like:\nswift\nif Thread.isMainThread {\n    ...\n} else {\n    DispatchQueue.main.async {\n        ...\n    }\n}. I don't think this if case is ever called because of the OR statement above no?. Nit: This is a really long line! Could we clean this up a bit:\nswift\nlet PrefKeyIsPrivateMode = \"isInPrivateMode\" \n...\nlet prefs = getProfile(application).prefs\nlet isPrivate = browserViewController.tabManager.selectedTab?.isPrivate ?? prefs.boolForKey(PrefKeyIsPrivateMode) ?? false\nprefs.setBool(isPrivate, forKey: PrefKeyIsPrivateMode)\n. Also, be careful about the force unwrap when you call boolForKey. If we've never set this value in a previous version of the app and we force unwrap we get \ud83d\udca5. Nit: Try to reference a constant for the key instead of the string since we use it more than once. Saves us from any kind of typo errors that might happen. Not a change you made but this being a forced unwrap weak variable is a red flag. We should change this to be an optional.. Nit: Move bracket back up ^. Yea I'm not sure why this was added. Should it have been? @farhanpatel might know better.. Nit: BrowserDB has a handy method named varlist that generates the (?,?,....) for you. Nit: Whitespace. Make sure to move these string into Strings.swift for localization.. Also it probably makes sense to just be 'Pin Site'. Oh and the title should change depending on if the site is pinned or not. If its already been pinned it should say \"Unpin site\" or something.. Nit: You could just bake in the private mode check into the shouldSendToLP method so all of the conditions are in one place.. ",
    "gowansg": "Your suggestion worked perfectly, and as you said simplified things quite a bit. \nI had previously tired using stringByAddingPercentEncodingWithAllowedCharacters with NSCharacterSet.URLFragmentAllowedCharacterSet()  but the fragment character (#) was being percent encoded.  I didn't realize at the time that it was because that character isn't included in the set.\nAnyway, I implemented the change you suggested and applied it to both the hrefElement and the imageElement.\nNow to figure out why the CI failed. :disappointed: \n. ",
    "AaronMT": "Building to device is currently restricted to internal Mozilla staff. I imagine at some point in the future we may open that up. For now, using the Simulator is the best bet.\n. @st3fan ^?\n. ref bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1142998\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1149994\n. I'm going to close and re-open a new pr w/o merge conflicts (and other stuff pulled in), pull #296 \n. Reference bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1151353\n. Ref bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1146838\n. Ref bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1151343\n. Newer submission got merged.\n. Dupe of https://github.com/mozilla/firefox-ios/pull/327\n. I don't even see this anymore. Stupid compiler.\n. Don't like this solution (also need UX input)\n. I don't think we have any plans to do this (CC @darrinhenein).\n. @st3fan close me :)\n. @thebnich review?\n. We are planning this for a bit later \nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1139577\n. We have a bug open here on Bugzilla with some initial thoughts and discussion https://bugzilla.mozilla.org/show_bug.cgi?id=1109806 \n. ping?\n. Wanted to try this out but bit-rot :(\n. I don't see this issue in product.\n. We currently do not build with Swift 2.0 and XCode 7. This is known.\n. Firefox for iOS uses WKWebView (Webkit); GamePad is not implemented.\n. Just going through open issues, @sleroux, do we have to update our cartfile?\n. Is this filed in Bugzilla?\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1205058\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1162174\n. Resolved. This can be closed (I don' have the powers).\n. One liner works for me \ud83d\udc4d\n. RTL support is not ready, we will be temporarily removing Arabic https://bugzilla.mozilla.org/show_bug.cgi?id=1227618\n. High-level bug filed filed as https://bugzilla.mozilla.org/show_bug.cgi?id=1229027\n. ping @sleroux \n. This works for me. I see all available devices available to select from. @rnewman what sort of logging can @fjaguero check for here?\n. This can be closed\n. Thanks for the PR. Does this need product team decision if we want this?\n. Sorry that was a question for the mobile team at Mozilla.\n. Have you tried running a clean on the project?\n. Close me @sleroux \n. https://bugzilla.mozilla.org/show_bug.cgi?id=1185038\n. Sorry for the delay, we should get this reviewed (@thebnich ?)\n. Still an issue?\n. Sorry for the delay. Thanks for the simple fix! Ought to just check this in @sleroux ?\n. Also allow the user to enter https://\n. @farhanpatel @sleroux any ideas?\n. We only support Xcode 8 now. Have you tried re-cloning the project and running ./boostrap.sh to fetch all dependencies?\n. This was already done in https://github.com/mozilla-mobile/firefox-ios/commit/3c1dd304d49969e8bc8318dc1c882a999d72ef40.\n. Unfortunately BuddyBuild does not offer a public dashboard. It would be great if anyone could see the dashboard without needing to be part of our Github organization or even being logged in to Github or signed up to BuddyBuild. A read-only view would be very useful. (Assuming the build logs do not contain anything confidential). The good thing is, we've passed this request over to them and hopefully we'll see a public view soon.\n. Is this with XCode 8.0? Have you tried deleting the contents under ~/Library/Developer/Xcode/DerivedData/ and re-running the bootstrap script?\n. @farhanpatel . Are you executing bootstrap.sh ?\nThis works for me.\n\n$ ./bootstrap.sh \n Fetching readability\n Fetching web_metadata_ios\n Fetching onyx_ios\n Checking out Alamofire at \"3.5.0\"\n Checking out Deferred at \"7d3d3230133db71544e60dfa7fa3d095361398db\"\n Checking out Fuzi at \"0.4.0\"\n Checking out GCDWebServer at \"3.3.2\"\n Checking out ios_sdk at \"v4.10.2\"\n Checking out KIF at \"v3.5.1\"\n Checking out libPhoneNumber-iOS at \"0.8.11\"\n Checking out onepassword-extension at \"d99f5d7a4c7328f8e3a8d1e7aff455d1072e0c19\"\n Checking out onyx_ios at \"0.0.5\"\n Checking out readability at \"ac878bf7c15b47d67e7b947584ca108398dd48a4\"\n Checking out SDWebImage at \"3.7.4\"\n Checking out SnapKit at \"0.22.0\"\n Checking out SwiftKeychainWrapper at \"701a27dfc4502645122f8db5e7be4479e85e831c\"\n Checking out web_metadata_ios at \"0.0.6\"\n Checking out XCGLogger at \"55613b29c09caaf1ff75d930f27e0b69115b7a56\"\n\nand then it enters the building scheme phase . Thanks for the PR. I think this will need to be rebased on latest changes (we migrated the codebase to Swift 3.0).. Wishlist item for many of us no doubt.\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1243019. https://bugzilla.mozilla.org/show_bug.cgi?id=1384159\nNeed a little bit of refactoring but there's no other reason other than we haven't gotten to updating our dependencies in a while. . We should tag, at least with 8.0 forward. Is that something we can do? @sleroux . If you have any particular feature you are looking for feel free to request it and we'll evaluate feasibility but vague issues as this one is not productive. . Are you using Swift 3.1?\n$ xcrun swift -version\n. @farhanpatel Can you comment on what's going on here?. > users restarts app\nThis commit is missing, what I would imagine to be a necessary (Mozilla) prompt or in-line setting summary for the user to inform them that a restart (who even does that these days on iOS) is required.\nUser expectation is that once a setting is flipped, it's flipped, no other interaction required.\n. Issue #2923. Issue #2928. Issue #2944. https://bugzilla.mozilla.org/show_bug.cgi?id=1384159\nOver to the team to debug this compile error\nhttps://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5977644efe869f0001f5ff30\nhttps://github.com/rs/SDWebImage/blob/master/Docs/SDWebImage-4.0-Migration-guide.md. https://github.com/mozilla-mobile/firefox-ios/pull/3088 ?. I think we need a way to clear db or 'reset' the UI on a tear down. The current two tests, e.g, search-settings relies on having the 'Show Tabs' button visible as a first step unless we remember to cancel out of the edit state of the address-bar (just a small example).\n. Do we want to test this upload prior to merge and comment out master?. ",
    "rodmoreno": "Ok, how sad. I'll have to wait, thank you very much.\n. ",
    "shibacomputer": "Has this changed at all as release gets closer?\n. ",
    "rainforest1155": "Is building to device still restricted? The build instructions don't say anything about this. I'm just looking to build this for my iPad so that I'd be able to use my custom sync server as that's not a feature available in Firefox iOS yet.\nI'm hoping that there's a way to still do it, e.g. by changing the appid to my own? \nThanks!\n. Thank you very much, that works great!\n. @raphaelyancey Try tapping 5 times on the version number in the settings. That should enable the debug mode allowing you to set up a custom FxA. There's just no option right now to just use a token syncserver - see #3150.. I was wondering the same thing as the initial reporter of this. It appears that currently Firefox iOS (10.3) does not come with a separate setting to set the token server. The url that you can specify (tapping 5 times on the version number to get into debug mode) appears to be intended to set a custom account server (replacing https://accounts.firefox.com), which is then to read the configuration from the account server's https://accounts.firefox.com/.well-known/fxa-client-configuration file. \nSince I only have a sync server set up on my end, I tried to manually set up the config file like this:\nhttps://zu.rf1155.de/moz-sync-conf/.well-known/fxa-client-configuration\nand adding https://zu.rf1155.de/moz-sync-conf as the custom url in Firefox iOS didn't work out. When trying to log in, I just saw a \"Could not load page.\" error. So it appears that just serving up the fxa-client-configuration isn't enough. \nAny tips on how I can still make this work without having to set up my own account server?\nThanks!. @r-sherwood and @iXo: I\u2019ve briefly tried doing a redirect on the custom account service url to the default Firefox account url and while I couldn\u2019t get that to work, might this be a workaround? Could any of you give that a try if you think this might be a possible workaround?. @dprandzioh I just tried setting up a redirect to the regular Firefox accounts url, but it still doesn't work. So I'm still stuck as well.. @dprandzioch That is correct, this is about having the custom FxA server setting on iOS not rely on having an FxA account server set up. Instead, the feature should be making use of the settings included in the /.well-known/fxa-client-configuration/ file. That would allow me to use the standard accounts.firefox.com server while making use of my own sync_tokenserver. The desktop Firefox supports this kind of set up for a long time, but I can't make use of it due to this shortcoming of the iOS version.\nThanks for your help trying to get this change going!. ",
    "jhugman": "Are we using mergepbx yet? https://github.com/simonwagner/mergepbx\n. Thanks, brutal but fair :)\nReviewing the docs, the preservation process seems to be serializing and deserializing into an OS managed file.\nWe can serialize UIView objects, including WKWebview into that file, or simple key-value pairs. \nIf it is still correct that we want a file we can explicitly see and manipulate outside of this process, then my option seems to be triggering the writing of the session-storage from within the BrowserViewController and ignore the restorationIdentifiers and coders.\nSo if we have to do the file access, where should that go? I put that in Storage, to take advantage of BrowserProfile's FileAccessor.\nEverything would be much cleaner if it was all in Client (putting it in a separate project sounds right from, but isn't), and use the FileAccessor from the profile. \nAdvice please.\n. Closed and continuing on https://github.com/mozilla/firefox-ios/pull/362\n. I've rebased this PR and moved it to https://github.com/mozilla/firefox-ios/pull/1191 . Closing this one although the discussion here is valuable.\n. Addressed nits and merged.\n. Closed in favour of #609\n. Use AboutUtils as suggested.\n. Rebased and merged. Thank you!\n. Obsolete.\n. r+ st3fan\n. Addressed nits and squashed.\n. This could be more efficient thebnich approach, but it's correct.\n. Continuing discussion from https://github.com/AgileBits/onepassword-app-extension/issues/277 .\nWhile we're waiting for LastPass to come back to us, a thought strikes me: if LastPass and our schedules don't coincide, would you accept a PR to open up access to the kUTTypeAppExtension* and OPWebView* constants?\nThat gives me a small amount of code I need to re-write in Swift to construct multiple versions of the NSExtensionItems without multiple calls into the webview's JS.\nIt won't open your API up to anything onerous for you to support since it is already discrete function call which needs a well defined set of pre-conditions and whose output is in the actual format which Containing Apps need to implement.\nBut it does help me give OnePassword users the premium features of OnePassword, while not breaking either onepassword-app-extension or shutting out LastPass users.\nOnce LastPass is up-to-date, that swift code can be reconsidered.\nI have other options, but all of them I like less than this option.\n. @fluffyemily 03254b6 is reasonably big commit for just to be landed without further comment. Please could you give it a quick review before I squash and merge?\n. The FaviconFetcher is a bit crazy.\nWe're downloading the HTML separately from the WebView, then parsing that.\nOnce we have the images, then we download with SDWebImageManager, which uses NSURLCache to cache images. This is the original bug (worrying we were downloading too many images).\nWe do this everytime FaviconFetcher.getIconFor(url:) is called, which is everytime the TopSites is shown.\nWe also parse the HTML but in the WebView, in Favicons.js and prime the image cache in FaviconManager.js. This is done on page load.\n. Fixed up the nits, as discussed.\n.RefreshCache was causing lots of weirdnesses, over and above filling the Deferred twice, so I removed it.\nWill file followups for: investigate caching, new standards for responsive favicons, unifying favicons fetching (so FaviconManager uses FaviconFetcher, perhaps).\nr? @sleroux\n. Addressed nit and merged.\n. Nit: split these up into one PR per bug.\nNit: branch names should be username/BugXXXXXX\u2013ShortPositiveDescriptionOfBugFix\nThese are minor and not worth doing in this case. \n. NamedTaskQueue<S, T> takes a header task which is a thunk that returns a Deferred<Maybe<S>> (S for start).\nIt then has an appendable list of (S) -> Deferred<Maybe<T>> tasks. They're named tasks, because they you can only add them with a String name.\nIt dedupes on the name of the task, which closes off some flexibility, but I'm comfortable with that.\nThe thing I'm really not sure about is the type of the terminal deferred (previously: syncTerminal). Right now this is Deferred<Maybe<[String, Maybe<T>]>>, which is questionable in two ways:\n- Using a dictionary felt like a good idea at the time, but now I'm wondering if I should've gone with a list of tuples.\n- Too many Maybe<_>s. I had originally thought that a deferred collection of Maybe<T> would be useful, then I wanted to reject the whole thing on failure of the starter task.\nThe most obvious thing to do (I think you've already said this) is to reject the whole thing on first failure, but this would mean that tasks that had been completed could not report that it'd been done.\nThis is fine for sync, and matches the semantics of DeferredUtils.all(), so I'm leaning towards  the terminator deferred being a Deferred<Maybe<[(String, T)]>>.\n. Ok, so am thinking along another track. \nswift\nextension Array {\n    func asyncReduce<T>(initial: Deferred<Maybe<T>>, combine: (T, Element) -> Deferred<Maybe<T>>) -> Deferred<Maybe<T>> {\n        return self.reduce(initial) { current, item -> Deferred<Maybe<T>> in\n            return current >>== { combine($0, item) }\n        }\n    }\n}\ngives me an asyncReduce that I can chain. If a sync reduction is going on already, then I just use that as an input to the next sync, and the deduping happens in the combine. Otherwise, I can use the currentSync as input to the next one.\nWhat this approach loses is a terminal Deferred> that that is called after everything has finished, i.e. if a thread calls syncEverything().upon to shutdown the db, and another thread calls sync after that, then the upon block will happen before the sync. This sounds bad, but in practice, I'm not so sure it'll turn out like this.\nI'm also a little bit concerned that where the syncing notification, database reset, and calling the SyncStateMachine.toReady, but I think that'll all come out in the wash.\n. I've converted the NamedTaskQueue<S, T> to an AsyncReducer<T, U>, which still has the properties of a mutable sequence and a terminal, but pushes all the work of running the task and deduping to the combine: (T, U) -> DeferredMaybe<T> closure.\nI'm happier with the locking, (which I wasn't for NamedTaskQueue).\nI'm fairly sure this is down to nits and squashing now.\nhttps://github.com/mozilla/firefox-ios/pull/1526/files\n. Nits addressed.\nMerged. Closed.\nThanks @rnewman for all your help.\n. I really like the way this is going.\nI'm looking forward to seeing actions added. Good work!\n. Build problems: \n(null): error: Couldn't load Info dictionary for <DVTFilePath:0x7f9b57fc6170:'/Users/jhugman/Library/Developer/Xcode/DerivedData/Build/Products/Fennec-iphonesimulator/Client.app/PlugIns/Today.appex'>\n. Build problems fixed.\n. Two WIP things, more tecgirl's remit than mine: \n1. sleroux has already highlighted: the shade coming in from the bottom. Would suggest a fade in.\n2. Pressing the menu button when the menu is open should\u2026 dismiss the menu?\n. I'm finding it hard to like the AppState as an enum. Using it to store a URL seems to be going against the spirit of enumerability.\nI am most concerned about the statics.\nIt feels like this is yet another source of truth that needs to be kept upto data, and impossible to unit test or re-use.\nI think I'd suggest an AppState protocol and an implementation that bridges/adapts the existing objects.\n. Overall, really good.\nI think you've probably made the right decision to not separate out functionality of MenuActions too much (as @thebnich says); I'd like to see it more, this can happen in followup refactorings after this beds in.\nI would like to be able to separate some of the react/redux style things from the MenuView from the browser project, so would strongly suggest that using enums for the AppState be reviewed. i.e. the MenuView shouldn't know that it's in a browser. It may be as simple as using <T: AppState> appState: T rather than appState: AppState in method signatures specific to MenuView.\nSimilarly, I don't think having a FirefoxMenuConfiguration inside the MenuViewController, or having MenuAction be an enum. This would hurt re-use of the menu within the Firefox app itself.\n. ## We had a long conversation over vidyo, then we both went into a meeting loop. Here is the summary of my notes.\nWe should try hard to separate the MenuView code from the rest of the browser, that is: the Browser should be dependent on MenuView, but not vice versa.\nTo this end: \nSeparate out MenuAction from FirefoxMenuAction`\nswift\nstruct MenuAction {\n  let val: String\n}\nor \nswift\ntypealias MenuAction = String\nor \nswift\nprotocol MenuAction {} // marker protocol\nstruct FirefoxMenuAction {}\nIt helps that the action is used and declared in Firefox code: in the MenuActionDelegate.menuAction(withState:) / performMenuAction(action:MenuAction, withState state: AppState).\nThe MenuConfiguration should remain immutable, but be able to generate a copy of itself with an updated AppState. This method could be called cloneWithNew(state: AppState).\nThis is either in the appState setter in MenuViewController, or remove the appState completely, but have a menuConfig setter in MVC, which called menuView.setNeedsLayout().\n\nSeparate out AppState from FirefoxAppState.\nIn order to separate out MenuView from Browser, we also need to move away from concrete implementations of AppState in the MenuView code.\nThis would be a similar approach, and I think we decided using a marker protocol and a concrete implementation using an enum.\nIf we want extra type safety, we'd probably want to be using \n``` swift\nclass MenuViewConfiguration {\n  func cloneWithNew(state: T) -> T {\n}\n}\n```\nFor bonus marks, we should separate out AppState into a separate redux module or framework, or better yet use someone else's ReSwift/RxSwift project, then the Client project use it.\nThis would likely be a follow up bug.\n\nActions as structs\nWe discussed this: MenuActions as reducers of AppState.\nThe biggest problem was \"open new tab\", because of the many objects that needed to be passed in either at init or performAction() time. \nWe talked about new tab as a call to UIApplication.openURL, and how this would simplify 6 of 9 options.\nMost of the MenuActions would reduce down to \nswift\nstruct OpenNewTab: MenuAction<FirefoxAppState, BrowserViewController> {\n  func performAction(bvc: BrowserViewController, withState state: FirefoxAppState) -> FirefoxAppState {} \n}\nI flip flop on this. I really like the implmentation of BVC.performMenuAction to remain small, and fixed, \nswift\nfunc performMenuAction(action: MenuAction, appState: FirefoxAppState) -> FirefoxAppState {\n  // I don't know what the test would be.\n  if let bvcAction = action as? TabMenuAction {\n    bvcAction.performAction(self, withState: appState)\n  }\n}\n\nFurther bugs\n\nhamburger menu seems unresponsive momentarily after opening and closing repeatedly (not fast)\nhamburger icon should goto a close button? \nwhen the hamburger is in the top, in private browsing, the 'speech bubble' connector is the wrong color.\nanimating the shade \u2013\u00a0please make it fade in, rather than move up.\n. This looks pretty straightforward to me.\n\nYou've moved a bunch of files in to Menu and App specific directories, and split off MenuConfiguration into AppMenuConfiguration and MenuConfiguration. There are a couple of other instances of this pattern.\nThe only nit is a naming one: I can see that there is an AppState, and a AppMenuConfiguration. It feels like we're in danger of overloading the App prefix.\nSuggest FxAppState (Fx being the prefix) / FxAppMenuConfiguration (FxApp prefix).\n. This is superseded by https://github.com/mozilla/firefox-ios/pull/1731\n. See PR #1761 for further work.\n. Merged in to #1772 \n. Merged into #1772.\n. Branching from master in error.\n. Fixed tests, and rebased.\n/cc @sleroux \n. Not far now, good work!\n. Ok, great! File followups for:\n- [ ]  cleaning up NoImageMode in the same way you've cleaned up NightMode.\n- [ ] removing No Image mode and Night mode from the menu from the Home Panels\n- [ ] a review of other parts of the app than can be darkened if night mode is on. (e.g. HomePanels, non-private browsing menu, Settings).\n- [x] Adding some tests MenuTests.\nDo you need me to merge this?\n. This is a really nice start to the feature. Good job!\nPlease look at my comments, and if you have any questions, let me know.\n. branched from master in error.\n. I'm not wild about the approach here, but understand that it's a work around at best.\nI'm sure you've tried it, but I think I'd prefer to see a NSExtensionActivationRule based approach (i.e. prevent the option being given to the user in the first place).\n. You can do some quite fancy things with NSExtensionActivationRules but they don't seem very documented. \nOur current activation rule looks like it could be helpful, but I don't know the syntax for getting the content of the attachment.\nIf we can do that we can use a simple BEGINSWITH[c] \"http\" clause to prevent non-webpages from being shared.\n. Overall:\n- there's a lot of duplication of code, most of it redundant. I think you've addressed most of that. My suspicion is that the code will get dramatically simpler once you assume NSURLResponse (I think you've already started that).\n- the factory is doing lots of if/elsing and constructing. The pseudo code I was thinking of:\nFor helper protocol:\nprotocol Helper {\n  static func canOpen(response: NSURLResponse) -> Bool\n  static func open(url: NSURL)\n}\nlet helpers = [HelperA.self, HelperB.self, HelperC.self]\nif let helper = helpers.find { $0.canOpen(response) }.first {\n  return helper.open\n}\n- it's quite Javay: the open helper is an object that is only useful as a single function. e.g.\ntypealias URLOpener = (NSURL) -> ()\nprotocol OpenInFactory {\n    func findOpenIn(response: NSURLResponse) -> URLOpener\n}\n. That's so much cleaner. Good job.\n. I'm really concerned we're trying to do too much in javascript here.\nI'm also really not comfortable making such invasive alterations to content HTML DOM elements.\nOpen questions: \n- what other approaches have we?\n- are there any good night mode extensions or addons out there? How do they do it?\nFilters.\nif we just use -webkit-filter how far can we get?\nOpen up devtools and add a custom rule to your favourite site. Here's what I got after a couple of minutes playing.\nbody {\n  filter: invert(100%) brightness(50%) contrast(100%);\n}\nimg {\n  filter: brightness(50%) contrast(100%);\n}\nhttp://bennettfeely.com/filters/\nWhat are the limits of this? What sites can't use this approach, and why?\nCSSOM\nCan we get anywhere with document.styleSheets.cssRules?\nhttps://developer.apple.com/reference/webkit/stylesheet\nhttps://developer.mozilla.org/en-US/docs/Web/API/Document/styleSheets\n. @lemonYLX I would get rid of block* and watch* functions, and just experiment with the -webkit-filter in CSS. You'll end up with a much smaller JS file, which will be much less invasive.\n@varkor makes a good points, re: inversion and red-shifting.\nWe're no longer in a hurry to ship this for v5.0, so try it, and live with it for a little while.\n. Hey Sumitjain7\nYou wouldn't be the first!\nThe code is open source licensed under the Mozilla Public Licence. You should probably be aware of our trademark policy too. If comply with those two, I don't think you need any further permission.\nBut why fork, when you can contribute, and have far more users run your code? Come talk to us in #mobile to see how we can help.\n. This works really well! Thank you for your contribution.\nEnpass looks really nice too.. > I think if we used something like a struct instead of just a string to define each scene we could pass arguments to scenes while running the test. \nI'd like to hear more about this idea. My biggest concern would be arbitrarily tying the node identifier types to a browser.\n\nAny thoughts on how to handle iPad? \nNot especially, but you imply a great point \u2013 the graph is wired away from the tests, so parts of the graph could be different, nodes could have differing edges, or two or more iPhone screens are laid out in on a single iPad screen.\n\n. This has been superceded by #2418 . Closing.. This has been superceded by #2418 . Closing.. Replied to the questions/addressed nits.\n@sleroux \u2013\u00a0please r? kthnxbailuv J. @isabelrios has this a Bugzilla bug attached to it? Let me know, and I can r+. Otherwise r+, Rebase, merge and squash! Well done.. Looking at the DSAKeyPair code, we don't seem to be using it anywhere. \nWe have:\n\nDSAKeyPair.h, DSAKeyPair.m\nMockMyIDTokenFactory.h and MockMyIDTokenFactory.m\n\nSimilarly, CHUtils.h and CHUtils.m is unused by our code. It is used by one method in CHNumber.m, which we don't use.\nUnless there's a foreseen use, we should probably delete this code, and resurrect it from SCM if we ever find we do need it.. Removed deadcode, and ready for review.. Merged as two separate commits, to make extracting ScreenGraph easier later on.. Thanks for your contribution kspearrin!. Good sleuthing @npark-mozilla ! Nice work @isabelrios !\nWe should probably remove that out of date comment.\n\nThirdPartyTest, ActivityStreamTest\nI am a little puzzled why changing waitForElement fixes these two tests: currently, neither of them use FxScreenGraph.\n\nAlso on waitForElement: there may forcing with a coordinate might be helpful. (see here)\n[3]: https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/BaseTestCase.swift#L84. Upgraded to 4.1.0.. Closed as dupe of https://bugzilla.mozilla.org/show_bug.cgi?id=1349343 . @sleroux fixed that dereference, by assigning accountVerified a value.. This has been resolved by #2745 . Thank you so much, @kitcambridge . @rnewman \u2013\u00a0changes as requested!\n@ncalexan \u2013\u00a0great suggestion! We talked about a time based timebased greenLight() when we get to the sync engines, but counting HTTP requests would be good too.\n@sleroux \u2013\u00a0I've r? you on bugzilla \u2013\u00a0could you check my changes correspond to @rnewman 's changes while\u00a0he's on PTO.. Tied toggling of account & push config back to Fennec scheme as suggested.\n@farhanpatel Please could you re-review?. LGTM. Obsoleted by #2835 \n. Obsoleted by #2835 . Excuse the drive-by review.\nYou should update the FxScreenGraph (which is supposed to be a map of the app) to match the app. \nIf you're changing the Intro, then you'll need to update the two sections here and here.\nAs far as I understand it, the start browsing button has moved to the second intro screen, so you'll have to do something like: \nswift\n    let startBrowsingButton = app.buttons[\"IntroViewController.startBrowsingButton\"]\n    let introScrollView = app.scrollViews[\"IntroViewController.scrollView\"]\n    map.createScene(FirstRun) { scene in\n        // We don't yet have conditional edges, so we declare an edge from this node\n        // to NewTabScreen, and then just make it work.\n        scene.gesture(to: NewTabScreen) {\n            if introScrollView.exists {\n                // go find the startBrowsing button on the second page of the intro.\n                introScrollView.swipeLeft()\n                startBrowsingButton.tap()\n            }\n        }\n        // FirstRun is really an alias for allIntroPages[0]\n        scene.noop(to: allIntroPages[0])\n    }\nWe're trying to ensure all the indexes are locale independent \u2014 i.e. use accessibility identifiers rather than labels.\n2: https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/FxScreenGraph.swift#L73-L105. Merged in to v8.x.. Closed as dupe of #3049 . > * Remove the HomePage button from the toolbar. The way the new menu works we cant replace the share button.\nThis is a regression of a feature much asked for by our Chinese users.. > For review, It'll be easier to look at just this commit\n\nCommits 3, Files changed 684\n\n\ud83d\udc4d. Great \n\nYea, The home button is still accessible via the menu. (It only shows up when you have a home page set up) It is an extra tap though.\n\nSee https://bugzilla.mozilla.org/show_bug.cgi?id=1265389 . The Chinese market really wants to use the home button\u00a0\u2013 more so than the Share button.. Also: have you run the XCUITests yet? There should be a few changes to FxScreenGraph needed, I expect, especially around BrowserTabMenu and BrowserTabMenu2. This looks excellent. I've had a cursory look at the code, but would like to get to it on Monday.\nI've added this to our triage for next week, to start looking at localization and graphic design.\nI've also tagged our UX person to start that conversation.\nWhile this won't make it into next release, we have begun the process to getting into a future process. It may take some time and have to overcome some hurdles, so many many thanks!. Just looking at this now. From the code, I'm trying to work out how to test it. I can't subscribe to a Livemark from the client, but I should be able to do that from the Desktop and then sync one over. \nIs there an easier way?. @joeyg \u2013 sorry this has taken a little while to get back to. \n\nbut let me know if it XCUITest is preferred.\n\nWe're trying to move all our UI tests to XCUITests now. However, the state of the app due to Photon changes means that the tests have not kept up. \n@npark-mozilla is the person who will be leading that charge. I hope it's going to be a relatively simple (if not large) job.\nLet's land this now, and get it shipped in time for 10.0. We can reup the tests when the photon work settles down.. I'd missed that this branch wasn't getting built by BuddyBuild (a prerequisite to landing this PR). SwiftRouter guards against nil \u2013\u00a0it uses optionals liberally, except when it uses fatalError.. Replaced the menu item in the simulator. Waiting for the build.. @rnewman \nI think we're pretty far away from our original starting point now. However, I've changed the way we're getting the fxaDeviceId to getOurClientRecord() to the way you suggest. \nHowever, I'm still unsure of two things: \n\nWhy does resetting our clients engine always resend our client record?\nShould we really be trigger a sync from the  NotificationFirefoxAccountDeviceRegistrationUpdated ? We won't be able to sync until after we have finished the login flow, or the verification flow. Responding to this message like this seems to get in the way of both of these things before they've finished.\n\n. Obsoleted by #3199 . > Make sure you really test this out to make sure there aren't any issues.\nNow you're making me scared. What sort of issues had you in mind?. If you want to test these commits on your existing branch:\ngit fetch origin\ngit cherry-pick afc0c7c4e e99fa2963\nthen rerun the tests.. ### noop\nIf a screen state A has a noop to another state B (or action), then you can goto(A) without going to B. If you ask to goto(B) from A then nothing visible will happen on screen.\nAction chains\nAs I'm coming to understand actions, I'm going to say that:\n\nactions are nodes with only one outward edge.\nthat edge can lead to another action\nthe navigator will always begin and end a goto or performAction on a ScreenState, not on an action.\n\nSo considering:\n```swift\nmap.addScreenState(BrowserTab) { screenState in\n    screenState.tap(app.textFields[\"url\"], to: URLBarOpen)\nscreenState.gesture(forAction: Action.LoadURLByPasting, Action.LoadURL) { userState in\n    UIPasteboard.general.string = userState.url ?? defaultURL\n    app.textFields[\"url\"].press(forDuration: 1.0)\n    app.sheets.element(boundBy: 0).buttons.element(boundBy: 0).tap()\n}\n\n}\n```\nand\nswift\nmap.addScreenState(URLBarOpen) { screenState in\n    screenState.gesture(forAction: Action.LoadURLByTyping, Action.LoadURL) { userState in\n        let urlString = userState.url ?? defaultURL\n        app.textFields[\"address\"].typeText(\"\\(urlString)\\r\")\n    }\n}\nthen LoadURLByPasting and LoadURLByTyping can be performed seperately, or automatically selected depending on where in the app the navigator is.\nBecause we know which state the app will end up in, we can then add:\nswift\nmap.addScreenAction(Action.LoadURL, transitionTo: BrowserTab) { userState in\n    // NOP\n}\nSo, a fully worked example, a single action:\nswift\nnavigator.userState.url = \"https://example.com\"\nnavigator.performAction(Action.LoadURLByPasting)\nwould cause the navigator to:\n\nLoadURLByPasting, where the contents of the userState.url is used.\nLoadURL, the NOP\nBrowserTab, the final screen state of the app.\n\nSidebar: Actions are best thought of as labelled edges between screen states, so we should probably somehow enforce uniqueness of the LoadURLByPasting and LoadURLByTyping. How can we change the API to indicate this?\nIn the case of an action \u2014 or chain of actions \u2014 not explicitly ending at another ScreenState, then the state the action came from is used, as if the state was exited and then returned to.\nSo, without declaring the action LoadURL transitioning to BrowserTab, then performing LoadURLByTyping would land the navigator back at URLBarOpen.\nWe should respect dismissOnUse = true so menus would work as expected:\n```swift\nmap.addScreenState(BrowserTabMenu) { screenState in\n    screenState.dismissOnUse = true\nscreenState.tap(app.cells[\"menu-NightMode\"], forAction: Action.ToggleNightMode) { userState in\n    userState.nightMode = !userState.nightMode\n}\n\n}\n```\nFrom BrowserTab:\nswift\nnavigator.performAction(Action.ToggleNightMode)\nthe navigator would go \n\nBrowserTab\nBrowserTabMenu\nToggleNightMode\nBrowserTab \u2013 because dismissOnUse=true for BrowserTabMenu.\n\nPoint by point\n\nabout ScreenAction, proposal says we can concatenate a series of ScreenActions to change state.\nSo can we say \"go from State A to B, by using ScreenAction 1 and 2 and 3... and n\" or \"go from State A to B, and first action has to be ScreenAction 1, but it's up to you after that?\"  This will clear up the ambiguities and unintentional UI actions.  \n\nCan you give me some examples where this might be useful?\nCurrently we can get the navigator to go to one place, then the other by using consecutive navigator commands. Are you asking to combine those somehow?\nThere may be ways of combining actions, which probably shouldn't be allowed:\nscreenState.tap(app.button(\"menu-NewTab\"), forAction: OpenURLInNewTab, LoadURLByPasting)\nthen:\nswift\nnavigator.userState.url = \"http://www.mozilla.com\"\nnavigator.performAction(Action.OpenURLInNewTab)\nThese break the mental model of actions being labelled edges.\n\nAlso, it would be nice if we can set dismissOnUse() as part of UserState.  There may be cases where going back is possible, but really you shouldn't.\n\nCan you give me some examples where this might be useful? If this is never advisable, then should you just not wire it together like that?\nI'm not wedded to the name userState, but it's meant to be the user's model of a given session or part of a session. In reality, it's a communication channel between the imperative tests and the declarative graph.\n\nCan map.addScreenState() take parameters in addition to the ScreenState name? for example, if  map.createScene(BrowserTab) can somehow take URL parameters via lazy loading of some sort, and do things like navigator.goto(BrowserTab, \"www.mozilla.com\"), then it would make things a lot easy and not assume there is a hardcoded URL.\n\nDo this with the userState. See above examples of LoadURLByPasting which reads userState.url. Hardcoding for within the graph goes away.\nswift\nnavigator.userState.url = \"http://www.mozilla.com\"\nnavigator.performAction(Action.LoadURL)\n\nthis is more of a nice to have, but one of the issues while debugging test with fxscreengraph was that you can't always step through the navigation, since the graph is drawn initially.  It would be nice if we have a separate class that contains the error strings, and we can reference them on fxscreengraph in various places where code might fail.\n\nTwo things:\n\nYou should never see errors is the ScreenGraph class. The errors should be showing up in either the test (where you called the goto, or in the FxScreenGraph class).\nWould a plan or dryRun method help?, e.g. \n\n```swift\nfunc plan(goto: String) -> [String]\nfunc plan(performAction: String) -> [String]\nprint(navigator.plan(goto: SettingScreen))\n ```\n\ncan predicates and screenactions be visualized in the graph converter tool?\n\nYes! \nWas thinking: \n\nthe conditional edges marked as dotted lines, perhaps with the predicate text showing.\nthe actions showing as nodes of a different shape or color to screen states.\n\n@npark-mozilla . >> If a screen state A has a noop to another state B (or action), then you can goto(A) without going to B. If you ask to goto(B) from A then nothing visible will happen on screen.\n\nWhat if you are in B, and you say goto(A)?  would it know that A = B when noop() is specified in A only? (or should I specifiy noop(A) in B's state description as well?\n\nIn the previous usage, noop was a convenient way of doing an include; as in: you can compose screen states in multiple re-usable parts. I started thinking about an include format, but couldn't think of a better syntax as a simple function.\n```swift\nfunc makeURLBarAvailable(_ screenState: ScreenState) {\n  screenSate.press(app.textField[\"url\"], forDuration: 2, to: URLBarLongPressMenu)\n}\nmap.addScreenState(BrowserTab) { screenState in \n  makeURLBarAvailable(screenState)\n  makeToolBarAvailable(screenState)\n}\nmap.addScreenState(NewTabScreen) { screenState in \n  makeURLBarAvailable(screenState)\n}\n```\n\nI just realized that regarding screenaction, my confusion came from this declaration in map.addScreenState(BrowserTab) example above:\nscreenState.gesture(forAction: Action.LoadURLByTyping, Action.LoadURL)\nSo this means \"following set of actions defines Action.LoadURLByTyping, and it leads to Action.LoadURL action\" right?  If so, it would make it more clear if we have to: parameter between, like old Objective-c, like (maybe this syntax is deprecated now): \nscreenState.gesture(forAction: Action.LoadURLByTyping, to: Action.LoadURL)\n\nYeah, adding a name to the argument is definitely possible, but I'm not completely sure what it is yet.\nswift\nscreenState.gesture(forAction: Action.LoadURLByTyping, implementing: Action.LoadURL) { userState in \n  // do the thing.\n}\nShould it be to, implementing, as, alias?\nAlso: currently we can have arbitrarily long chains of actions. In practice, will we ever need more than a chain of two?\n\n\n\nAlso, it would be nice if we can set dismissOnUse() as part of UserState. There may be cases >>where going back is possible, but really you shouldn't.\n\nCan you give me some examples where this might be useful? If this is never advisable, then should you just not wire it together like that?\n\nI was thinking about case where Screengraph decides going back is the optimal path, for example,\nA -> B -> C.\nI want to go to E.\nScreengraph decides that C -> B -> E is faster than C -> D1 -> D2 -> D3 ->E\nBut going back to B will change state.\nBut you're right, I guess in this case, it's simpler to outline the paths to E, rather than having additional logic inside screengraph.\n\nI'm still a bit confused. Could you give me concrete examples from your use with FxScreenGraph and Firefox for iOS.\n\nFor the error strings, I was thinking about something even simpler, like, If I'm in State A, and want to go to B using action C, it should give me error messages when action C fails for whatever reason, and the error message should output the exact UI action that failed, like \"could not go to State B because ui action x failed, last successful UI action was y\" without adding error checks directly into state definitions. BUT in past weeks, I noticed this is already implemented for the most part. \n\nYeah, the failures are reported in FxScreenGraph.swift and the test itself. Unfortunately, Xcode often doesn't report the second place the failure occurred, so you don't get nice reporting within the IDE.\n\nIt would be nice if it had more details, like last successful action, (but this is not absolutely needed)\n\nI can report a lot to the console. It's especially easy to report to NSLog or standard out.\nWhat details would you like?\n. @npark-mozilla no. \nThere is a plan(goto:).\ntransitionTo: is still to: for screen states (n\u00e9e scenes).\nI am still not sure about the implementing: v alias:. I'd like to see how we use it (especially around more then two chained actions).\nLogging can be achieved with a nodeVisitor, but this is only a fix to allow you to help yourself.. LGTM. This is good stuff! Thank you for your help. \nMany apologies for being on the PTO delay. I'd love to land this for 10.0 or 10.1!\nPlease could you rebase this against the current HEAD of master, then needinfo me on bugzilla?\nOnce you do that I can land it.. Look how it's done with requestDesktopSite. There's a Bool in FxUserState, and an action in the ReloadLongPressMenu. \nBonus: IIRC, toggling tracking protection isn't available if tracking protection isn't on from the settings, so you may want to add an if: argument for the Action.toggleTrackingProtection.\nThe simplest explanation of what is going on:\n```swift\n        // navigator is now at BrowserTab.\n        navigator.goto(ReloadLongPressMenu) // now at ReloadLongPressMenu.\n        snapshot(\"13ContextMenuReloadButton-02\", waitForLoadingIndicator: false)\n    // TP off for screenshot\n    app.sheets.buttons[\"Reload Without Tracking Protection\"].tap() // navigator hasn't moved, so thinks we're still at ReloadLongPressMenu.\n    navigator.goto(ReloadLongPressMenu) // Nothing happens, we're already there.\n\n```\nThe simplest work around is to tell the navigator: navigator.nowAt(BrowserTab), but really you should add:\n```swift\nmap.addScreenState(ReloadLongPressMenu) { screenState in\n    \u2026\n    let trackingProtectionButton = app.sheets.buttons[\"Reload Without Tracking Protection\"] // use accessibilityIdentifier please.\n    screenState.tap(trackingProtectionButton, forAction: Action.ToggleTrackingProtection) { userState in\n        userState.trackingProtection = !userState.trackingProtection\n    }\n    \u2026\n}\n\n```\nwith corresponding flags in FxUserState.. \n. Re: threading. \nThere is a potential impedance  mismatch between OperationQueue and DispatchQueue. \nI do feel quite strongly that we should preserve the model of receiver-chooses-thread-queue, which  NotificationCenter supports when you register an observer. My only addition to that would be to define an OperationQueue equivalent of Dispatch.global().. @garvankeeley receiver-chooses-thread-queue\ne.g. example graph of events.\nmetadata parsing --> favicon loading --> database access\n                |                    +-> UI update\n                +--> database access \nLet's make it easy for developers to get off the main thread. :). @st3fan The existing tests for that code path exercises the new code. We can't simulate the OOM very easily in an automated test suite.\nFWIW:  Codecov report has this PR's coverage at 95%.\n2: https://codecov.io/gh/mozilla-mobile/firefox-ios/commit/bc8f95fa2bf5036e8a555f1ca7024fc7632eef70. > The img that is loaded in loadFaviconURL isnt actually used!\nI'm still hoping we can associate a favicon with UserActivity and make it searchable again.\n. > It might be easier to never change the focus from the AutocompleteTextField.\n\nBecause they are shown horizontally, tapping left/right to switch between them wouldnt work because on the textfield that would move your cursor.\n\nYeah, I think you've answered your own question about why we can't do this. \n\nThat way you dont have to worry about show/hiding the keyboard.\n\nUg. I wasn't considering the soft keyboard for UIKeyCodes.. Ok, I think I've cracked it. \nLooking at desktop, they seem to be leaving the cursor with the text view, and you can move it around with the cursor.\nI'm not altogether happy with what we've got here \u2014 but we're limited by the design of the search auto-complete. I'm leaving the horizontal keys for the next follow up bug.. The graph needs changing by adding transitionTo: BrowserTabMenu to the actions that now have switches. \nThis is overriding the default behaviour which is take dismissOnUse into consideration; dismissOnUse = true declares that the app will dismiss the menu when taking a menu option.\nYou'll likely have to do this in FxScreenGraph \u2013\u00a0and ScreenGraphTest.\nYou prompted me to start the wiki page:\nhttps://github.com/mozilla-mobile/MappaMundi/wiki/How-do-I%E2%80%A6%3F \nso, thanks.. Ok, I think the only thing I'm confused about:\nWhy not put the test-fixtures databases in git.\nPerhaps this is not suitable for this PR, which is generating the databases. However, I can see that having a number of pre-populated databases you can run tests on will be very beneficial. \nHaving them lying around will make stress testing the app a lot easier.\nBeing able to generate them for each version of Firefox will be helpful for a upgrade/migration testing.\nObviously, the schema will change over time on master, so should probably be regenerated on a regular basis.. MappaMundi uses NSPredicates to implement conditional edges and conditional waiting. \nThese are predicates applied to the FxUserState which inherits \u2014 eventually \u2014 from NSObject. The one you've found is for the property passcode.\nSince any property can be used in a predicate, your linked article suggests that we should add @objcMembers to the class definition of FxUserState.\nI'm not sure if that need will go away once MappaMundi is updated for Swift4, and the base class MMUserState will have @objcMembers applied to it.\n1: https://useyourloaf.com/blog/objc-warnings-upgrading-to-swift-4/. Could do with an asset for the snackbar, and some design guidance re: settings. \nIs @tecgirl the main person around here? . @sleroux \nI was torn between keeping consistent with the JSON file for android.json and beautiful camel case. :)\n. I like this, though I worry that we'd not catch forms that were assembled in a peculiar/pathological(?) order \u2013\u00a0e.g. add a FORM, add a INPUT & PASSWORD to that form.\n. Fair. Will happily clean up.\n. You're testing if webView is cleaned up by the rest of the codebase, but not prevent that clean up happening simply by observing it in the test.\nCould this use a weak ref to hold webView instead of using an autorelease pool?\n. All logging will be removed.\n. Nit: Comment needed? As the bookmark is about the tab and the title, unsure why you made this change.\n. Nit: Whitespace.\n. Aha!\n. Nit: Whitespace after 0. { return 0}\n. This is adding an instance method to every instance of NSIndexPath, even those not involved in the menu?\nThis feels\u2026 weird, especially if we're considering publishing the menu as a separate component.\n. For all these isPrivate trinaries: something doesn't feel quite right about it.\nAre there any other modes we may feasibly support? e.g. Guest Mode.\n. Using an enum for state seems to be stretching the meaning of an enumerated type.\nAlso: can we move away from calling a tab a browser.\n. Global state smell.\n. At what point do we make BrowserViewController a container for a TabViewController and a tool bar?\n. What gets passed around might be an enum, but what gets baked in to the menu shouldn't be. At the least this should be a marker protocol, that each menu's client casts to a specialst enum.\nswift\nprotocol MenuAction {}\nenum TabMenuAction: MenuAction {}\n. Animation! Nice!\n. I'm not wild about having the configuration determine if an item should be included. But OK.\n. I really don't like this being a enum which is peppered throughout the MenuView code.\n. Nit: This feels very verbose. \nIs there a neater way, e.g. typealias AppMenuAction = String, and use static variables?\n. Naming nit: what is this popping to now?\n. Does this fix the bug?\nThe exit state of this method is that BVC should be top most. However, this assumes that it's the one underneath the current top most. Is this always true?\n. Does this comment still hold?\n. Yeah, I think I was trying to be too clever there.\n. Hardcoded default is temporary until #1761 merges with #1772.\n. Yes, there is a retain chain UIAlertController -> Action -> self (HomePageHelper). However, there is no retain path from the helper to UIAlertController.\nYou can see this by seeing \nswift\n{ [weak self] (action) in\n    guard let _ = self else {\n        return print(\"Homepage not set\")\n    }\n    self?.currentURL = tab.url\n})\nYou can also prove this by adding a deinit which logs to the console.\ncc @sleroux \nFor future Google searches, using unowned to explicit break any cycle (had it existed), and to document what else I found:\nswift\n{ [unowned self] (action) in\n    self.currentURL = tab.url\n})\nCases a runtime crash:\nattempted to retain deallocated object\n. I was worried about using selectedIcon, when perhaps selectedIcon may not be appropriate for the secondaryAction. I was most concerned about using animations.\nWill refactor.\n. Ignoring. \nNone of this is yet landed on master.\n. Same here: none of this is yet landed on master.\n. There are more than one places getPrefs is used in HomePageAccessors, so I was trying to not type Accessors.getPrefs.\nI could've used a private \nswift\nprivate let getPrefs = Accessors.getPrefs\nclass HomePageAccessors {\nor\nswift\nclass HomePageAccessors: Accessors {\nalthough I prefer to not be creating a type hierarchy around simple accessor functions.\n. Nit: whitespace, line 31, 32\n. syncDisplayState is protected by syncLock in other places. This should probably be done in beginSyncing which is part of the critical section, rather than here where it is not.\n. I'm really nervous isSyncing using a display state to tell if we're syncing internally (at L1071 especially). e.g. onStartSyncing seems to affect isSyncing but doesn't do anything outside of change status, and isn't protected by the lock this is.\n. Nit: whitespace\n. Nit: last argument is a closure, so can be added after the end of the argument list. (I get confused with multiple completionHandler args around.\n. The completionHandler is called for every element in inputItems. Is this right? Doesn't sound like a completion handler if it is right.\nWhat happens when inputItems.count > 1? \n. What happens when the item label is really really long?\n. If there are multiple URLs (e.g. one of file scheme, one of http) completionHandler is called twice.\nThis means you'll get the error message and it saves ok. Or the error message twice.\nFile a followup bug to handle calling the error message twice, and land this!\n. Can you be a bit more descriptive with the name of the user script file? e.g. NoImageModeHelper.js.\nAlso, this should go in Client/Assets\n. You do the work of noImageModePrefDidChange in TabManager.prefsDidChange rather than using a separate event (i.e. you don't need a NoImageModeStatusChangedNotification).\n. We're moving towards using static accessor pure functions.\nNoImageModeHelper.swift\nswift\nclass NoImageModeHelper {\n    static func isNoImageModeAvailable(state: AppState) -> Bool\n    static func isNoImageModeActivated(state: AppState) -> Bool\n}\nSee how homepage works with AppState in the menu.\nIn the case of isNoImageModeAvailable, I think this should be keyed off a preference, not the locale, as this is definitely not just desirable in Chinese locales. We should probably loop UX in on this, to see how to handle it in non-cn regions (e.g. a \"Customize Menu\" pref screen and regional defaults).\n. NSLocalizedString for all user facing strings. Even if you don't think this well ever be localized.\n. Nit: naming, setStyle isn't a setter here (esp with no args), but the name suggests it is. Suggest: initializeStyleSheet.\n. Nit: naming. Suggest: watchForImages\n. Nit: naming, use blockImages.\nThe Great Vowel Shortage ended sometime ago :).\n. Use\n``` javascript\nif (!window.firefox) {\n  window.firefox = {};\n}\nwindow.firefox.setNoImageMode = function(enabled) {\n```\n. All this code is visible to every webpage. It's an attack surface which we need to proactively minimize.\nAt minimum, you need to wrap this in a immediately executing closure, and then only attach the setNoImageMode function to the __firefox__ object.\n```\n(function() {\n  if (!window.firefox) {\n    window.firefox = {};\n  }\n  var observers = [];\n  var isEnabled = false;\nfunction initializeStyleSheet()\n  function blockImages (elem, enabled) {}\n  function watchForImages (elem, enabled) {}\nwindow.firefox.setNoImageMode = function (enabled) {}\nwindow.addListener(\"DOMContentLoaded\", function (event) {});\n})();\n```\nThis is the same as other tab helper js files.\n. The pattern we use here is to use add a TabHelper to the Tab in BrowserViewController.tab(tab: Tab, didCreateWebView webView: WKWebView).\nThe tab helper looks after the adding of the user script.\n. From what I can tell, this toggles the noImageMode for every tab, every time the front webView starts receiving content.\nI suggest you move the code to talk to the WebView  into the tab or the tabHelper, the use tabManager.tab[webView] to find the tab.\n. This should be the basis of a NoImageModeHelper tab helper.\nIt can live in Frontend/Browser.\n. You're posting a notification (which updates all tabs) and reloading the current one. Don't we just need to call __firefoxNoImageMode__.setNoImageMode for the one tab?\n. Much of the need goes away following https://github.com/mozilla/firefox-ios/pull/1816 . Rebase and have look how at HomePageAccessors are used.\n. Would prefer to see canOpenFileType and canOpenMimeType here.\ne.g.\nswift\nguard let type = MimeType(rawValue: type) else {\n    // \u2026\n}\nif OpenPassBookHelper.canOpenMimeType(type) {\n    // \u2026\n}\n. Is this code in use anymore?\n. Ok. Gotcha.\nI'm bothered by a lot of the code duplication around this constructors. I'm not convinced that both of them are needed.\n. That's really nice.\n. This is deliberate. In the context of the Menu, I felt the 'On' was redundant.\n. I covered this in the commit message. TL;DR: I don't like how why do setting of pref defaults in the profile.\n. Naming: suggest HideImageModeMenuItem (keep MenuItem suffix).\n. Naming: suggest ShowImageModeMenuItem (keep MenuItem suffix, positive action name).\nUse Strings.MenuNoImageModeTurnOnTitleString (you should probably change the name of that String constant to match the menu show image/hide image convention.\n. Nit: whitespace needed between function name and argument list.\nfunction initializeStyleSheet () {\n. Don't use ToggleNoImageMode, use two different actions.\n. Nit: whitespace. \nclass NoImageModeHelper: TabHelper\n. Nit: comment empty blocks.\n// Do nothing.\n. Naming: separate this into ShowNoImageMode and HideNoImageMode.\n. No longer needed, see Strings.MenuNoImageModeTurnOnTitleString etc.\n. Why :not(.UIButton)?\n. isNightMode should be calculated in an accessor (a class method in a NightModeAccessors class, like NoImageModeAccessors. Also see NewTabAccessors. It could live in NightModeHelper or in its own file in the Accessors folder.\ne.g.\nclass func isNightMode(prefs) -> Bool\nrestoreNightModeBrightness and setNightModeBrightness might also live in NightModeHelper (to keep all of this code roughly together).\n. enabled doesn't need a default.\nAlso, put this as methods in NightModeHelper.\n. Should call super.applicationWillResignActive(application).\n. This will drop out of moving setNightModeBrightness to NightModeHelper to \nNightModeHelper.setNightMode(enabled).\n. Move this method and the one after to a NightModeAccessors class in the same file. \nI should've done this for NoImageMode but I didn't spot it.\n. I'd really prefer it if we did not special case individual websites, or even common frameworks.\nWe should try and generalize this \u2013 it may well be useful to other sites.\nIf we can't generalize this, then raise a bug, and attach the html and css.\nIf you want some help generalizing this, raise a bug with the html and css of a taobao page attached.\n. Nit: use \nif (!newCss) {\n. Nit: use\nif (newCss) {\n. Nit: use \nif isNightMode {\n. Use: NightModeAccessors.isNightMode instead.\n(line 751 should've used accessors too!)\n. Move the setting of the pref to \nNightModeHelper.setNightModeBrightness\n. Need:\nmanager.stateDelegate = appDelegate\nhere.\n. So we can write:\nmanager.storeChanges()\nhere.\n. No content is loaded from the URL, so it doesn't really matter, as long as its a valid URL.\n. What does this function do? It doesn't block background elements.\n. javascript\nvar nightModeClass = elem.classList.contains(\"nightMode\");\n. Is there a better way of doing this (instead of string manipulation)?\n. I am very concerned that this function is doing the job of cascading styles, but in Javascript instead of CSS.\nIs there a way of making the CSS work harder, and the JS less hard?\n. The only likely race could come from https://github.com/mozilla/firefox-ios/blob/76c60f58b9cdf6da65397d819c9cdaf555632b11/Client/Frontend/Browser/BrowserViewController.swift#L747 .\nMerging, given https://bugzilla.mozilla.org/show_bug.cgi?id=1281403#c2\n. What does the .Loading state mean? Is it useful at all?\nI'm still not sure we've paid down the technical debt around AppState and our half in half out implementation of redux.\nThe isPrivate should probably live apart from the state of the tab, and .Loading should be a property of the TabState.\nMost of the time, .Loading is irrelevant or an add-on to .TabState.\nI think this should do, but could you raise a bug to rationalize the UI state into a more formal Redux architecture.\n. Nit: lots of duplication here.\nswift\nlet labelOffset = self.subtitleLabel.hidden ? 0 : self.label.frame.height / 2\nmake.top.equalTo(self.snp_top).offset(TodayUX.verticalWidgetMargin / 2 + labelOffset)\n. Is this ever used?\n. Does this snp_makeConstraints block do anything now?\n. Is updateCopiedLink ever called now?\nI'm not sure how this works now, given that that we don't seem to be checking the clipboard. If that's wrong, could you comment how the whole thing works now?\n. Ah, so webView.loading should definitely not be .Loading.\nCarry on. \ud83d\udc4d \nMoving .isPrivate to an accessor should be done in a separate bug.\n. This looks good now. \nHowever I'm seeing the link justify to the right when the link is longer than the button width.\n. I'm not wild about this construction. Explicit casting may work, but will fail drastically if you try and test the app with a MockProfile. \nSuggest either:\n1. Move isChinaEdition into the Profile protocol, and provide a dummy implementation in MockProfile OR\n2. Explicitly test with a if let to check if it is safe to down cast to BrowserProfile.\n. Nit: whitespace.\n. I've found three classes of error:\n\nif you have tried to navigate to a screen that is not possible to get to from your current position. In this case, somehow there are unreachable nodes in the graph. This is a fault with the the declared graph not reflecting the actual application graph, most likely caused by FxScreenGraph being incomplete. In this case the error is reported at the navigator.goto(UnreachableScreen) line in your test.\nThe XCUIApplication is unable to see the given UIView. Where possible, the error is reported in FxScreenGraph.\nThe application state is such that a screen cannot be legitimately reached. e.g. the PasscodeIntervalSettings screen can't be reached unless a passcode is enabled. Only then is the cell enabled. At this point, the navigator will tap on the table cell, but it's disabled, so nothing will happen, and the navigator will get out of sync with the application. These will manifest as error type (2). \n\nDistinguishing between type 2 and type 3 errors should be fairly simple, but I didn't get round to reliably doing it without changing the element itself.. Yes!. You changed other for loops into a foreach in the previous commit.  Suggest you change this one too.\n. Nit: MethodSpy (with capital M). Did you add\nswift\ntestDelegateMethodWithName(#function, tabs: [tab])\nin a later commit?. Nit: rename to willAdd. Nice!. Lots of repetition of these methodSpy values. Suggest moving most of them to private lets outside of the class.. Nit: suggest adopting the nomenclature of mocks, e.g.\nswift\ndelegate.expect([didRemove, didSelect])\nmanager.removeTab(tab)\ndelegate.verify(\"Not all delegate methods were called\"). swift\ndelegates.forEach { $0.get()?.tabManagerDidRestoreTabs(self) }. Nit: magic number. I'm hesitant to Nit you for magic numbers, however: is there a unifying calculus behind these timings? Are there other timings that this might tie into.. Confused: why is _oldSelectedTab weak, and _oldTabs not an array of weak references?\nNit: Hungarian naming.. This second approach seems the simplest/most elegant \u2013 you don't need to make any changes to ScreenGraph at all then. I'd keep a route open the BrowserTab by having a default URL, just so other tests can get to it without thinking about it.. Nit: whitespace. Nit: whitespace. Nits: whitespace. The whole file's whitespacing needs to be tweaked.\nIndent is four spaces. I think you have some tabs mixed in there too.. YAAS! Good use of nowAt!. dismissFirstRunUI() is deprecated. Use navigator.goto(NewTabScreen) instead.\nFor consistency, you should probably put this each of the test* methods, rather than in setUp() method.. You should probably start this method with navigator.goto(SearchSettings).. These lines (L138 and L140) appear redundant.\nIs this a way to get back to the NewTabScreen without opening a new tab? If this is the case, consider adding a navigator extension method in FxScreenGraph, or add another screen node in FxScreenGraph to open the VKB from either the NewTabScreen or BrowserTab.\ne.g. \nswift\n    map.createScene(URLBarOpen) { scene in\n        scene.typeText(url + \"\\r\", into: app.textFields[\"address\"], to: BrowserTab)\n    }\nThen from both BrowserTab and NewTabScreen you can go to that node with\nswift\n        scene.tap(app.textFields[\"url\"], to: URLBarOpen)\nOnce you've done that, you can then get to the opened URL bar using navigator.goto(URLBarOpen).  This will be useful for other tests and testers! \\o/. L141 \u2013\u00a0I think this should probably go at the top of this method. \nL144 \u2013\u00a0hasn't this already been tapped? Are you testing anything here?. Put all these in changeSearchEngine.. I've outlined the steps to add an OpenURLBar node to the graph below.. My suggestion was to add an extra scene in the graph, so you could re-use the same tab \u2013\u00a0so the tests would run faster. I've put those in #2466.\nThis works, but the function is no longer named accurately: openNewURL doesn't actually open a new URL.\nGiven an OpenURLBar state, I'd add navigator.goto(OpenURLBar) to your deleted typeOnSearchBar(text: String) method and use that.. @isabelrios Merged #2466. \nTag me when you're ready \ud83d\ude04 . Nit: Use the constant, as declared. also:BookmarkFolderChevronLineWidth is 4.0, but you used 2.0.. Lots of magic numbers in this file. Can anyone of them be pull into constants (looking at 23 especially).. Nit: Use HeaderBackgroundColor. Done. \nThis is deadcode: we only use [CHUtils primesUpTo:], which is only used by [CHNumber factors].\nProposed: delete factors and CHUtils.m and CHUtils.h.\nhttps://github.com/davedelong/CHMath. \u2714\ufe0e. \u2714\ufe0e. \u2714\ufe0e. \u2714\ufe0e. \u2714\ufe0e. I've moved away from using a Deferred in favour of a delegate.. I'm puzzled by this suggestion.\nWe need to construct a sentTabsCategory before constructing UIUserNotificationSettings.. I've updated the helper to much less stateful: it doesn't store an UIApplication, and uses the one used when passed in from the AppDelegate and FxAContentViewController.\nThe helper is created when the Profile is initially loaded from disk, which corresponds to the time when the app might need to register for push notifications.\nThis has the effect of: \n\nwe can get rid of the createSharedInstance methods, and optionality.\nwe can get rid of the application optionality.\nonly one assert needs to happen, and that case is guarded against.\n\n. I put this into a separate helper so as to manage these state changes in a separate place.\nIs state complicated enough to warrant transforming this to a state machine?. I'm not sure this is correct.\nTapping on the maskButton takes you to the TabTray in private mode. Suggest you rename this PrivateTabTray (which should look like TabTray), and add another state for NewPrivateTab (which should look like NewTabScreen.\n. ScreenGraph will try to take the shortest path from the current scene to the target \u2013\u00a0according to the graph declared in FxScreenGraph.\nIf a) it finds a shorter route, b) the FxScreenGraph isn't reflected by the implemented app then there'll be a problem.\nSo, there are two things here: \n\nadding an OpenURLBar scene has lengthened to the distance to SettingsScreen via the NewTabScreen. This makes going to SettingsScreen via the TabTray a more attractive option.\nTabTrayMenu to SettingsScreen doesn't seem to be working properly. This is the bug to fix here. \n\nWe can fix this by duplicating getting to the SettingsScreen from the NewTabMenu \u2013 something about the implementation of the menu is that what works for two page menus doesn't work for one page menus.\n. N.B. it should be noted, that there is a limit to ScreenGraph when it comes to state. \ne.g. we you can't just go to the PasscodeIntervalSettings without enabling a passcode to start with. We can do when the state is relatively simple (e.g. is the tab tray in private browsing mode or not), by simply duplicating the nodes in the graph. However, this may get out of hand quickly. . swift\n     map.createScene(TabTrayMenu) { scene in\n-        scene.tap(app.collectionViews.cells[\"SettingsMenuItem\"], to: SettingsScreen)\n+        scene.gesture(to: SettingsScreen) {\n+            // XXX The element is fails the existence test, so we tap it through the gesture() escape hatch.\n+            app.collectionViews.cells[\"SettingsMenuItem\"].tap()\n+        }. Removed.. Renamed to Live, and converted to synchronous variant of Deferred.. Moved to XCGLogger.. Moved application out of the login helper altogether \u2013\u00a0it is now passed in by the callers when it is needed.. Done.. Added a struct FxADevicePushParams.. Added this to FirefoxAccountConfiguration.. Nit: use XCTAssertEqual(privateHistory, 1, \"History entries in private browsing do not match\"). Nit: use XCTAssertEqual(history, 1, \"History entries in regular browsing do not match\"). I'm wondering if we need an additional state for PrivateBrowserTab and a new parameter for openURL(urlString: String, privateBrowsing: Bool = false).\nI'm not really satisfied with this solution (around application state) which is only going to get worse.. This adds to the case for having a PrivateBrowserTab scene \u2013\u00a0once the URL is open, we are not in the NewTabScreen or NewPrivateTabScreen.\nMake a PrivateBrowserTab scene, identical to BrowserTab, except pointing to the PrivateTabTray.\nswift\n    map.createScene(PrivateBrowserTab) { scene in\n        scene.tap(app.textFields[\"url\"], to: URLBarOpen)\n        scene.tap(app.buttons[\"TabToolbar.menuButton\"], to: BrowserTabMenu)\n        scene.tap(app.buttons[\"URLBarView.tabsButton\"], to: PrivateTabTray)\n    }\nThen to open a new private tab with:\nswift\nnavigator.goto(NewPrivateTabScreen)\nnavigator.openURL(urlString: url)\nnavigator.nowAt(NewPrivateBrowserTab)\nYou might want to add private: Bool = false parameter to navigator.openNewURL method, but I'll leave that up to you. \nIn the meantime, I'll think of a more general case.. Nit: is this necessary? Aren't we already at PrivateTabTray?. Testing based on the title of a live webpage out of our control seems very brittle. Expect failures when those pages change, or the tests are run in different locales.\nFile a follow up bug to make this use a local webserver (SimplePageServer).. I considered this; I think for the meantime, let's not worry about changing the openURL method at all.\nThe reason is this: if you change regularBrowsing = false, then despite you calling openURL(urlString: url, regularBrowsing=false) then it is very easy to get into the state where you are not in private browsing, even though you've called a method which says it'll get you to private browsing.\nYou will be able to make this guarantee for openNewURL however.\nSo: let's not change these methods. If you want to open a new private tab, then just use the three line form: \nswift \nnavigator.goto(NewPrivateTab)\nnavigator.openURL(urlString: url)\nnavigator.nowAt(PrivateBrowserTab)\nLet's revisit this once we have gotten sick of typing it. :). See my comment above.\nAs for: regularBrowsing=false versus privateBrowsing=true.\nMy usual approach is to try for a positive framing of a property (so: use isX instead of isNotX) and to mark deviations from normal (so: use hasRemarkableY=true instead of isNormal=false).\n\notherwise it's confusing to me if private is set to false, but we are actually browsing in private mode. \n\nI think this is the same thing I've said above, and the principle reason not to change the openURL method.. Remove duplicate.. Replaced with log.info.. Added SentTab. as prefix for key, more descriptive comments, and removed bug links.. This work is necessary for, but insufficient to support WebPush. \nRemoved comment about WebPush.. We've been asking the permission of the user for these notifications at FxA login. \nWe shouldn't actually display the notification at app start up because it won't be asked for a second time.\nFiled https://bugzilla.mozilla.org/show_bug.cgi?id=1346287 as a followup for prompting the user to go the settings app if she changes her mind.\n. This PR re-implements https://bugzilla.mozilla.org/show_bug.cgi?id=1335491 \u2013\u00a0the only difference is that the the FxALoginFlags struct is passed around instead of the JSON or FxALoginResponse.\nFollowing a successful (even if unverified) login, the push registration dance happens. Once the account is verified, and https://bugzilla.mozilla.org/show_bug.cgi?id=1333780 is implemented, we should be able to start syncing immediately.. @npark-mozilla is correct here: there are multiple edges going to the same node here. The difference is that Closing the Menu takes you back to the existing new tab screen.\nI think what we're edging towards is that the actual states should be ScreenNodes that we create in FxScreenGraph, and that actions (e.g. createNewTab and openURL should be methods on Navigator.\nEach of these actions should almost certainly start with a goto call.. As said by both of you, having the actions explicit on the navigator I think is the way forward. \nIt doesn't completely solve the issue (as it only clears non-private tabs), but this will at least keep you moving.. > Settings screen -> Show tour\nYes, that was possible once as SettingsScreen -> FirstRun; not sure where that ended up. Feel free to add it when you need to.\n\nAdding FxSyncLogin page.\n\nYes that makes sense.\n. As a general policy for this file, can we avoid using English and static texts to navigate. \nStarting soon, we're going to be using this graph for L10n screenshots, so we can't depend on english in our UIViews.\nFor every element there should be an accessibilityIdentifier \u2013\u00a0these aren't localized so we can depend upon them here.. Use the accessibilityIdentifier instead of \"Cancel\".. Use the accessibilityIdentifier instead of \"Show Tour\".\n. Looking further down, is this actually a backAction? \nIf you press Cancel, then it takes you back to the tab, not to tour?\nI'm actually not sure what the correct answer here is; I can identify a number of ways of getting to FxSyncLogin, and the top left button does something different each time:\n\nFirstRun -> Tour -> FxSyncLogin, press Cancel takes you to NewTabScreen.\nBrowserTab -> SettingsScreen -> Show Tour -> Tour -> FxSyncLogin, pressing Cancel takes you back to the BrowserTab.\nTabTray -> SettingsScreen -> Show Tour -> Tour -> FxSyncLogin, pressing Cancel takes you back to the TabTray.\nTabTray -> SettingsScreen -> Sign in to Firefox -> FxSyncLogin, there is no Cancel button, but there is a Settings back button, which takes you back to SettingsScreen.\n\nThere are three approaches here, neither of which I like: \n\nFile a bug against the FxSyncLogin screen that the Cancel button should behave like a back button, so go back to the Tour, if accessed from the tour. @tecgirl should probably have a look.\nfile a bug against ScreenGraph such that \"Enable ScreenGraph model multi level navigation\"\n. I think having this as an enum in FxScreenGraph would be more suitable here.\n\n```swift\nenum BrowserMenuChoice: String {\n   case Settings = \"\u2026\"\n}\n```\n. So I have multiple thoughts on this:\n\nWe are only concerned about the app starting up after it has been logged in and the stopped. You are right that the assumption that the account has been verified does not hold.\nFxALoginFlags are short lived, and are used to tell the FxALoginHelperDelegate after a successful login.\nAt the point we're interested in, at AppDelegate.application(_:didFinishLaunching:), there is no delegate.\nConceptually, if we do have a delegate at that point, then it would be nice to be able to rely on FxALoginFlags to be accurately reporting back the state of the account.\nThere is a .needsVerification enum value, though it's possible that the account could've had its password changed since login and needs verification. \n\nIn the end, I'm opting for: \nswift\naccountVerified = account.actionNeeded != .needsVerification\nbecause though it doesn't cover all overlapping states, it does cover the .needsVerification state better that .actionNeeded == .none.. \ud83d\udc4d . I stared at this for ages, before realising that account.advance returns a Deferred<FxAState> and >>> needs Deferred<Maybe<FxAState>>.\nReplaced with: \nswift\nreturn account.advance().bind { _ in return succeed() }. :+1:. :+1:. Dang, I had considered exposing a syncNamedCollections, but rejected it because I didn't want to have SyncManager dealing with aliasing passwords -> logins.\nI've added the suggested method to syncManager, and a SyncReason.push. Suggest a re-review. /cc @sleroux . I wanted to use that before, however: succeed takes zero args, so you need a closure to swallow the FxAState parameter.\nCannot convert value of type '() -> Success' to expected argument type '(FxAState) -> Deferred<Maybe<Void>>'. \ud83d\udc4d . :+1: Last minute renames.. @isabelrios \n\nyou said three options, but there are only two, what is the third one ;)\nYou're right! I think the third option is to not try and model the app too hard: looking at the four paths, going to FxSyncLogin via the Tour has inconsistent back behaviour, so let's just not include it in the graph. \n\nIf you need to test it's accessible from the tour, then use non-graph actions to get from the tour and back again, and `navigator.nowAt().\n. If you pass the enum around, instead of the string: \nswift\n    func changeBrowserView(view: BrowserMenuChoice) {\n    }\nyou can start doing: \nswift\nnavigator.changeBrowserView(view: .desktop)\nwhich means auto-complete works, and the compiler checks you haven't made any spelling mistakes, and if the production code changes (unlikely), then you change it in one place not loads.. Nit: use drop camel case, i.e.: desktop and mobile.. > you said three options, but there are only two, what is the third one\nYou're right!\nI think the third would be: don't link to the sign up page in FxScreenGraph at all.. nit: use CamelCase for type names\u00a0\u2013\u00a0SelectMenuOption.. Option 1 is better than option 2. However, I think the quick and dirty solution would be to do something like \nswift\nlet page1Options = [ requestDesktop, requestMobile, findInPageOption, \n                                   requestSetHomePage, addBookmarkOption, removeBookmarkOption ]\nlet page2Options = [ \u2026\u00a0]\nif page1Options.contains(view) {\n   goto(BrowserTabMenu)\n   // take the option\n} else page2Options.contains(view) {\n   goto(BrowserTabMenu2)\n   // take the option\n}\nI've written about naming below, to generalise this method. Starting with this sort of if/else if template it should be fairly obvious how to keep going.. swift\nfunc selectOptionFromBrowserTabMenu(_ view: selectMenuOption) {\nSwift tip: if you use _ before the argument name, you don't have to use the named argument when calling:\nswift\nnavigator.selectOptionFromBrowserTabMenu(.requestDesktop)\nSecond: naming.\nRather than rooting the name in the menu you're taking action from, perhaps you can think of something more high level. e.g.\nswift\nnavigator.browserAction(.requestDesktop)\nThis way, you can add non menu options e.g. \nswift\nnavigator.browserAction(.backButton)\nIf you did go down this route, I'd also suggest you change the enum to be called BrowserAction, or BrowserTabAction. With simple names like this, you should make the method and enum use the same word.. Nit: use\nswift\nprivate let log = Logger.browserLogger\nat the top of the file.. This looks\u2026 weird.\nCan we use true and false rather than \"true\" and \"false\". The type of userAttributesDict seems so. . What happens when we explicitly call\nswift\nLeanplumIntegration.sharedInstance.enabled = false\nIs there a corresponding stop()?\nWhich is the interface to expose starting Leanplum from? is it .enabled = true or .start()? Suggest making one of them (e.g. start()) fileprivate.. Long lines obscuring detail.\nRepeated code: \nswift\nlet focus = URL(string: \"focus://\"), let canOpenFocus = UIApplication.shared.canOpenURL(focus)\nCan this go in its own method?\n. Nit: long lines.. Put in a computed property.. I am deeply uncomfortable using this track method in privateMode.. Nit: put this in a fileprivate calculated property.\nAlso; could you change feature_switches/ to feature_switches. (replace / with .)? I made a mistake initially \u2013\u00a0but this should be isomorphic with prefs.branch(\"feature_switches\").. Lovely.. Nice. Not sure I know the answer to this: should this be written as \nswift\nfunc setMembership(_ isEnabled: Bool, for pref: Prefs)\nor something like it?. How do I disable it if I hate the new feature? Another reason do this once in a general FeatureSwitchSetting.. Suggest wrapping this up into a FeatureSwitchSetting, extending BoolSetting and have EnableActivtyStreamSetting derive from that.\nI expect you'll need to refactor the line: \nswift\ncontrol.isOn = prefs.boolForKey(prefKey) ?? defaultValue\nand \nswift\n    @objc func switchValueChanged(_ control: UISwitch) {\n        prefs.setBool(control.isOn, forKey: prefKey)\n        settingDidChange?(control.isOn)\n    }. Nit: use a local variable.. Nit: use local variable profile that is already defined and in scope.. Put this in another PR please.. Nit: put each of the lets on different lines.. These guards and canOpenURL: they should be done before line the .track call on L475: there is no need to show the button if deepLink isn't a valid link that the device can open.. Yes! It turns out that accountVerified is checked by account.advance(). Additionally, the registration of the device (including push) only happens on advance(). \nThus, we can't push on verification unless we pre-verify advance.\n. Nice!\nMinor/style: if you're going to be using signature (encryptionHeader: String, cryptoKeyHeader: String, ciphertext: String) multiple times, perhaps consider a typealias. e.g. \nswift\ntypealias AesgcmPayload = (encryptionHeader: String, cryptoKeyHeader: String, ciphertext: String)\nor even a struct (for passing it around more easily).. Two things:\n\nyou can probably just use .ascii \u2013\u00a0instead of String.Encoding.ascii\nDoes this have to be .ascii? \u2013\u00a0can a base64 string ever be another encoding?. Needs moar Beatles!. Hmm. In the case where 100% of the cohort get the new feature, then I guess we'll remove the setting?\n\nThe feature switch is about early access to a new feature, rather than giving users ultimate choice about features. They get to choose if they are involved in the testing or not.\nI'm slightly queasy about giving users an irreversible choice without even a confirmation dialog.. Nit: subclass.. Nit: this starts to get messy quickly. Avoid checking for prefKey by using the type system. e.g.\n```swift\nfunc displayBool(_ control: UISwitch) {\n   control.isOn = prefs.boolForKey(key) ?? defaultValue\n}\nfunc writeBool( control: UISwitch) {\n    prefs.setBool(control.isOn, forKey: prefKey)\n}\nAnd in the `FeatureSwitch` variant:swift\nfunc displayBool( control: UISwitch) {\n   control.isOn = self.featureSwitch.isMember(prefs)\n}\nfunc writeBool(_ control: UISwitch) {\n    self.featureSwitch.setMembership(control.isOn, for: prefs)\n}\n``. The completely undocumented intention ofsettingDidChange` was so that leave classes could add their own behaviours without subclassing.\nI've suggested a way of doing this below.. swift\nself.writeBool(control). Please use local variables.\n```\nlet leanplum = LeanplumIntegration.sharedInstance\nleanplum.setup(profile: profile)\nlet prefs = profile.prefs\n```\nThere are four instances of LeanplumIntegration.sharedInstance and four instance of getProfile(application).prefs in this short stanza alone.. Even if Carthage pulls these down, we don't need to link against them in the Build Phases.. Use fileprivate weak var profile: Profile?. Use private variable. private let log = Logger.browserLogger. Use private variable. private let log = Logger.browserLogger. Use private variable. private let log = Logger.browserLogger. Use private variable. private let log = Logger.browserLogger. Use the primitives rather than strings to represent true and false. \nIf the API doesn't support this, then comment to say that the stupid API doesn't support Bool.. swift\nfunc supportsScheme(_ scheme: String) -> Bool {\n   guard let url = URL(string: \"\\(scheme)://\") else {\n        return false\n   }\n   return UIApplication.shared.canOpenURL(url)\n}. swift\nuserAttributesDict[\"Focus Installed\"] = supportsScheme(\"firefox-focus\"). swift\nuserAttributesDict[\"Klar Installed\"] = supportsScheme(\"firefox-klar\"). I feel sure we have covered a lot of this ground in previous reviews and #2716 . The review comments there seem to be relevant here.. Nit: Use properties instead of Java style setters.\nswift\nvar enabled: Bool {\n    didSet: {\n          if enabled {\n                 start()\n          }\n    }\n}. Nit: use a lazy property.\nswift\nprivate lazy var settings: LeanplumSettings? = {\n        // \u2026 etc\n        return LeanplumSettings(environment: environment, appId: appId, key: key)\n}(). Caution: bugs hide in long lines.\nThe logic here is unclear. Suggest re-writing to be clearer, without the guard (you're returning either way).\nguard is neat because it eliminates some exceptional cases, but they can be difficult to read because they flip the control flow.\nWe're already in the LeanplumIntegration singleton, so we can just call the instance method.\nTrying to parse the logic here, I've written it as\nswift\nlet shouldShowFocusUI = getBoolVariableFromServer(key: \"shouldShowFocusUI\") ?? false\nlet otherBrowsers = supportsScheme(\"firefox-klar\") || supportsScheme(\"firefox-klar\")\nreturn shouldShowFocusUI && !otherBrowsers\nI'm still not sure I have the intent of shouldShowFocusUI(); you may want to check shouldShowFocusUI (the variable before you calculate otherBrowsers.. To get through this privateMode tracking problem, I'd suggest we have a pause/unpause metaphor, which is toggled when we're entering and leaving private browsing.\nWhen paused, events are just dropped and never given to Leanplum.. Renamed to userDidLogin.. Renamed to stateLabelsAllowed.. Added init to allow\nswift\nSyncStateMachine(prefs: prefs, allowingStates: SyncStateMachine.OptimisticStates)\nRemoved Bool flag. I'm not usually a fan of flags, not sure why I did this.. Used \nswift\npublic static let OptimisticStates: Set<SyncStateLabel>. :+1:. Added list of legal states, and added current state to the error message.. The scratchpad's global and keys are niled out and pickled.\nOn the next time around, we'll take the alternative branch, because we no longer have any cached global.\nAdded a comment to this effect. . :+1:. Can remove the createNewTab property as well?. This is supposed to be hardcoded. There's a lot of work to be done yet.. NSLog appears in the Console.app. \nWe can't see out logs when logging from the extension. (we can, but we want to be able to see both app and extension at the same time).\nThis is temporary code. It is currently tightly controlled so as not to be accessible from release.\n. Logic question: What happens when the second private tab is opened? There doesn't seem to be any check to see if the previous tab is private and this tab is not.\nIt's not clear to me how this works (if it does) and the tests don't show it either.\nNit: prefer (tab?.isPrivate ?? false) be broken out into a local variable if you're going to add (previous?.isPrivate ?? false) as well.. Nice.. Is exitingPrivateMode now unused?. This behaviour is not duplicated by your PR.. Moar tests!\nWhat happens when you add a second private tab? (manager.privateTabs.count should be 2 obv).\nWhat happens when you add a second normal tab?\nWhat happens when you toggle from the TabTrayController (or the equivalent?). Ah, answered my own question. No it's not unused.. > the previous tab is nil in a lot of cases. \nIs this true? I see at the top of this method:\nswift\n    func selectTab(_ tab: Tab?, previous: Tab? = nil) {\n        assert(Thread.isMainThread)\n        let previous = previous ?? selectedTab\nWe can get our desired behaviour by:\nswift\n         if !(tab?.isPrivate ?? false) {\n            willSwitchTabMode()\n        }\n. Nit: use tabManager.shouldClearPrivateTabs() instead of profile.prefs.boolForKey(\"settings.closePrivateTabs\") ?? false. YAAS!. nit: whitespace. I was seeing some problem with getting the URL from extension to the app, but I think this is fixed now.. It's only not safe when in extensions, which really don't want to be accessing logins.\nI thought about making logins optional, but it's a reasonably big change. We could also use a MockLogins??\nswift\n        guard let loginsDB = self.loginsDB else {\n            return MockLogins(files: FileAccessor(rootPath: \"disposable-extension\"))\n        }\n        return SQLiteLogins(db: loginsDB)\n(This feels ridiculous!). This is in the protocol. Suggest we change this everywhere in a followup bug.. Nit: Remove debugging.. Nit: Remove debugging.. swift\nclients.flatMap { $0.fxaDeviceId }. This block needs tidying. \nDo we need to notify explicitly after syncClients() has returned? If so, comment.\nAlso, there's a Deferred inside a Deferred, is there anyway to tidy this? . Is this necessary? Can't this just be a Success?. Nit: this can remain fileprivate, no?. Yes.. Happy with this code for this release, but fromDictionaryV1 should be tied directly to version being 1 or 2, rather than a monotonically increasing AccountSchemaVersion.. Nit: rewrite conditional without == true.. Nit: magic numbers. Nit: rewrite conditional without == true.\nYou're using this 3 times in this method, so will be worth making a local variable out of it.. Nit: magic numbers. Nit: rewrite conditional to avoid == true. Is there a chance Leanplum will not have started in time here? \nStarting Leanplum involves a network request which may not have returned in time.\nThis will initiate a call to Leanplum's servers to get the values\nof the variables used in your app.. FxALoginHelper assumes that the profile has been set and that the user has logged into the their FirefoxAccount.\nSecond, the APNS token we get back from Apple needs to be given to Leanplum's servers.\nCurrently, we're not storing this anywhere; I'm not sure if we can re-use the same token for both FxA and Leanplum.\nProbably the best thing for us to do here is set some FxALoginHelperDelegate methods.. :+1:. :+1:. Hmm. I separated disconnection out from this PR: this is a likely artifact of these being together at one point.. You've started factoring orange out of these cases.\nCan you factor out anything else?\ne.g. \n```swift\nlet color: UIColor\nlet string: NSString?\nswitch account.actionNeeded {\n    // set the string and color\n}\nif let string = string {\n    // do the range, attrs and res\n    return res\n}\nreturn nil\n``. I've posted the message on theDispatchQueue.main` in da8c236, rather than forcing the whole of the disconnect code to be run on the UI thread.\n. I don't understand why this is an optional.. nice. I don't know why username is an optional and password is not.. We need to either get rid of the SEL prefixes of the other selectors, or use it for this method.. Nice.. I'm ambivalent about using algebraic types here. \nBut standing ovation for using it to get rid of BVC.. Nit: use already localized Strings.swift string.\n(There will already be a localized string, which if not in Strings.swift should be moved there).. Nit: spelling.. Nit: use existing localized string.. Nit: use existing localized string.. I see what is happening here, and I'm not sure I like it. \nPutting the actual action with the menu item seems appealing to start with, but quickly becomes difficult when you want to perform the same action without going through the menu. e.g. findInPage, bookmark can be triggered from multiple places, and you want the identical code to be triggered for each. \nThis was part of the rationale of trying to get a redux pattern in place.. Nit: we already have localized strings for this. \nAside for less experienced readers: you should never concatenate localized strings.. Nit: we already have localized strings for this.. Unsure I understand this comment.. Yes, the action needs to be disassociated from where it's triggered.. Remove both of these lines, then you can just use the constructor you need for each type (you don't have to use the same one for all types).. This change isn't needed if you remove the constructor from the FirefoxAccountConfiguration.. This change isn't needed if you remove the constructor from the FirefoxAccountConfiguration.. This change isn't needed if you remove the constructor from the FirefoxAccountConfiguration.. This change isn't needed if you remove the constructor from the FirefoxAccountConfiguration.. This change isn't needed if you remove the constructor from the FirefoxAccountConfiguration.. Remove this constructor.. This change isn't needed if you remove the constructor from the Sync15Configuration.. This change isn't needed if you remove the constructor from the Sync15Configuration.. This change isn't needed if you remove the constructor from the Sync15Configuration.. Please don't change the DevelopmentTeam.. Please don't change the DevelopmentTeam.. You should probably be using a BoolSetting to toggle this on and off.\nChanging the prefs only on Set is a bit weird from a UX. Have a look at how Home Page settings work.. Can we move this further up: e.g. below ConnectSetting?. shouldSendToLP checks, but on the main thread. This is, perhaps, an unnecessary optimization.. shouldSendToLP checks, but on the main thread. This is, perhaps, an unnecessary optimization.. shouldSendToLP checks, but on the main thread. This is, perhaps, an unnecessary optimization.. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace\nswift\n{ fieldText in. Nit: use .isEmpty instead of == \"\". Swiftyness: Rewrite this as an if.. This is disgusting, but not your fault. No action required in this patch.. swift\noverride var hidden: Bool {\n    return !ShowDebugSettings || profile.hasAccount()\n}. Nit: whitespace. Nit: whitespace. Nit: Keep the trailing comma.. Nit: make this match the style of the others configurations please.. Do we need Leanplum for all releases?. Nit: whitespace. Nit: don't need parentheses around _.. nit: remove self.. I'm not sure I understand this PR.\nThis code runs just as the user successfully logs in to FxA. The changes appear to leave the FxALoginHelper in an inconsistent state?. Woah.. !!. YES!. Can the swizzled method see the original?\nswift\nif let tabWebView = superview?.superview as? TabWebView {\n    tabWebView.menuHelperFindInPage()\n}. Shouldn't this be a change in UIConstants?. I'm not sure I understand why this is now always false.. nit: whitespace.. Calling out to UIApplication.shared.windows.first?.backgroundColor seems\u2026 really hacky. Is there a better way? Happy if not, but suggest an XXX comment.. Generally prefer not naming colors in identifiers. \nAlso: lots of hex values in this section. Should we be putting them in a *UX class?. templateImage. Nice.. nit: whitespace.. Are we removing this because it's redundant? I guess we can bring it back if we add it as a feature switch. (depends on prefs).. Ok. I think I understand. \nHowever, I'm still not sure we want to do this just here:\n\nif the account has been verified, can we/should we register for push notifications yet?\nwhat happens when the user leaves the screen manually before verifying.. Did you mean to stop skipping these tests?. Nit: whitespace.. Nit: whitespace. nit: whitespace. Commit comment:  \n\n\nI'm not sure why this happens in a deinitializer, but it is causing a\u2026\n\u2026 crash. (it's being executed on the wrong thread).\n\nThis definitely needs to be resolved before this lands.\n1: 481698ffb1aded144239e5a88ed322feb801a552. Removed this commit.. @rnewman \nSo understand poking things into the scratchpad isn't the right approach. That hack was trying to pass the deviceRegistration.id to ClientsSynchronizer.getOurClientRecord(), so how do we achieve that now?\nI note that the authState passes to toReady is always a FirefoxAccountSyncAuthState. Wondering about allowing access to the account or deviceRegistration, so I can put the fxaDeviceId into the scratch pad in toReady.\nUnfortunately, more code has been written with the assumption that fxaDeviceId is in the scratchpad.\nAs to the rest of your list: \n\n[x]: Making sure the device registration is part of the account objects.\n[ ]: Having the Sync code detect, based on that, whether something material has changed about the account that would warrant a re-sync of e.g., clients. \u2014 I think this is NotificationFirefoxAccountDeviceRegistrationUpdated \u2014  or are you suggesting something in toReady as above?\n[ ]: Having the clients synchronizer decide if it needs to reupload the client record for that reason. \u2014 Is there any harm in uploading the client record everytime?\n[ ]: In the notification handler above, go through profile.syncManager to trigger a sync of clients. \u2014\u00a0ok.\n\n. > I thought there was some logic under the hood the hooked up the notifications and the account, despite account verification state.\nYes, there is, but it happens in that method you've just prematurely returned from:\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Helpers/FxALoginHelper.swift#L158. Nit: eliminate the need for a local variable SDWebImageManager.shared().saveImage(toCacge: image, for: url). Nit: use .continueInBackground instead of SDWebImageOptions.continueInBackground etc.. Nit: Don't need to use ImageDownloadState. Was this all dead code?. Nit: can we get rid of SDWebImageOptions?. :+1:. Nit: these lists: can we use or instead of lists? .lowPriority | .cacheMemoryOnly ?. Nit: with multiple closure args, I wonder if it's not actually clearer to keep the named argument and these within the parens.. Nit: remove SDWebImageOptions. Nit: naming. Would prefer mediaURLString or just urlString here.. Nit: naming. Prefer manager or webImageManager or imageManager. Nit: naming. Prefer manager or webImageManager or imageManager. \ud83d\udc4d \ud83d\udcaf \n. Ah, I think we're talking about two different things. \nI love the underscores.\nWhat I'm talking about is: \nswift\nobject.method(withProgress: { progress in }) { success in }\nversus\nswift\nobject.method(withProgress: { progress in }, andCompletion: { success in })\nWith method calls with two closures as parameters, I feel we should be a bit more careful with the last-closure-shorthand.. Nit: whitespace. Can we do better than a comment block? e.g. \nswift\n@available(*, deprecated, message: \"use only in testing code\")\nor put in the test case file instead?. :+1:. \ud83d\udc4d . \ud83d\udc4d . Moved to near where fxaDeviceId is dug out of prefs, below.. Added a migration and a comment here.. \ud83d\udc4d . Removed the value for the \"deviceRegistration\" key.. :+1:. Fixed all straight quotes to be RIGHT SINGLE QUOTATION MARK.. Is MOZ_FXA_LEANPLUM_AB_PUSH_TEST ever going to be true when MOZ_ENABLE_LEANPLUM is false? Remove MOZ_ENABLE_LEANPLUM test.. If you're going to not calling requestUserNotifications here, then when are we registering with Autopush (to make a push registration)?. Nit: whitespace. Previous behaviour was that this method was being called multiple times; and that the settings screen may be being displayed, but the \"Sync Now\" was either displayed as \"Sync Now\" as if the sync wasn't happening. \nThis was because the sync correctly, wasn't happening, but the FxA webview was being dismissed too early.\nThe delegate method is still being called multiple times, but the flags are being respected \u2013\u00a0i.e. the webview is only being dismissed once the account is verified.. Updated with comment.. Perhaps., however the very next thing we do here is display an unknown message, which causes us to send a stack trace.. :+1:. :+1:. From fiddling with the app.launch() and app.terminate(), it would appear that it's quite difficult to make an app last over more than one test without an effective re-install.\nSo, the CLEAR_PROFILE would appear effectively redundant.\nWe could make CLEAR_PROFILE more robust, but honestly, I'd take test integrity over test speed any day.\nAs to passing launchArguments as config data in the scheme: I'd rather this live with the code than with the launch configuration \u2014 developers are likely to run a single test in a different configuration. Either way, this will only make micro-seconds difference.\n. Personally, this should be part of our release checklist \u2014 to make sure the AppConstants are correct \u2014\u00a0than clutter the code up.. I think in the general case, where we differentially include options, I'd prefer to have a list of options which we append.\n```swift\nvar options = PhotonActionSheetItem\nlet nightModeItem = \u2026\noptions.append(nightModeItem)\nif #available(iOS11, *) {\n    let noImageModeItem = \u2026\n    options.append(noImageModeItem)\n}\nreturn options\n```\nFor this simple case, ok.. Is this related to this PR?. Nit: globalscope: can we have this has Pocket.moreStoriesURL?. Added https://bugzilla.mozilla.org/show_bug.cgi?id=1406165 as a followup bug.. Nit: whitespace.\nThere are lots of these; you've probably letting either your editor put them in, or your git front end not ignore them.. This probably deserves a comment that you're actually going to be opening a page and loading a URL.. Nit: extract this into a variable.. Isn't this the same as navigator.goto(URLBarOpen)?. Nit: I hate the space in selectOptionFromContextMenu (option so much.\n. self.waitUntilPageLoad(), surely.. This seems to work, though does it work in cases where: \n\nthe page isn't there\nthe domain isn't registered\nnetwork has been disconnected.. Do we need this anymore?. Good. \n\nI'm fairly sure we should be putting all navigation around the app into the FxScreenGraph. That is: if you're tapping on any buttons then you should be thinking this should go into the graph. \nThis is a good example of what to do.\n. Good! Personally, I'd use mozilla.com but I expect example.com loads faster.. Nit: naming. Use dropped camel case. Also: vowels are cheap nowadays, and autocomplete reliable. findInPageButton.. Also, please could you add a find in page graph node? Thanks/. :+1: yes I think you're right. \nSuperstition made me leave this in; but it's Apple's bug if they're break it. :). I don't know what this test does anymore. \nFun fact: I changed the way restart works because it's really difficult to restart the app without re-installing it.. I don't know what this does. A comment would help here if you can't clean it up.. Nit: Avoid string concatenation.\nswift\n\"https://\\(websiteUrl1)/en-US/\". This is exactly why we have ScreenGraph: to avoid this sort of code.\nnavigator.goto(Intro_FxASignIn) would be my suggestion.. Is this ready to be removed? Please remove if so.. Nit: use navigator.goto(URLBarOpen). Nit: remove comment if code is done.. Is this still true, now we're supressing the What's New page?. I'm not sure I like this. \nLooking at the graph it makes it extremely messy.\nWith the ScreenGraph in this current state, I'm not sure what the alternative is, but I think we should be prepared for some further work on this.\n. This comment is no longer true.. Nit: Use let. If we're moving to const we should just drop var entirely. . Nit: wait, what?. Please could you put this function outside of this one?. Nit: can we do with optionals and defaults here?. Ug. I hate this pattern. No change needed, I just hate every line of these constructors. Especially aDecoder.. I'm not sure what the right thing to do here: I don't really like the idea of an optional here where none was there before it, but understand that under some circumstances we'd have to throw away a PasscodePane.\nBut hang on, on L23, you immediate set the value. In that case, please replace this with var passcodePane: PasscodePane (non-optional) and change the code accordingly.. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Nit: whitespace. Ok; Could you do two things: in Xcode, got to Preferences --> Text Editing, and select the two options:\n\nAutomatically trim whitespace\nInclude whitespace-only lines\n\nSecond, and you might not need to do this now: go through each of the files in your this PR and find the trailing whitespace lines. This might be as easy as opening them and then saving them again. \nThe reason we like this is that these whitespace diffs just add noise to the patch.\nI hope this helps.. :+1:. Please add accessibilityIdentifier to any views that need them.. Please add accessibilityIdentifier to any views that need them.. Please add accessibilityIdentifier to any views that need them.. Please add accessibilityIdentifier to any views that need them.. Please add accessibilityIdentifier to any views that need them.. Nit: prefer log.error over print.. Shouldn't this be current()?\nShouldn't this be getNotificationSettings(). Shouldn't this be SentTabAddToReadingListActionTitle?. swift\nnotification.request.content.userInfo?[TabSendTitleKey]\nshould read: \nswift\nnotification.request.content.userInfo[TabSendTitleKey] . Shouldn't this be identifier?. Bug 1364420 is about adding categories to push notifications from sent tabs: sent tabs come via sync commands, and the push notification is essentially a sync tickle which catches the send tab sync command. \nThis change doesn't seem to add actions to the push notifications (see NotificationService and FxAPushMessageHandler), however, you may have identified a route to it. \n1: https://bugzilla.mozilla.org/show_bug.cgi?id=1364420. Nit: prefer just .enabled to UNNotificationSetting.enabled. Is this 1 second?\n\nplease use .seconds(1)\ncan we post the notification immediately? If the answer is no, please comment why.\n. Please could you open a followup bug to investigate possible use of UIApplicationOpenURLOptionUniversalLinksOnly . Not entirely sure why these tests are part of this PR.. Prefer: .alert to UIAlertControllerStyle.alert. Can we use camel casing for these, as we do with the rest of our NSLocalizableStrings? Shouldn't these be NSLocalizableStrings here too?. Nit: use camel casing. See other names in the default namespace.. I'm not sure NSLocalizedString works in the way. I'm not sure we're going to be using LeanPlum in any other local than en-US.. Prefer: .cancel to UIAlertControllerStyle.cancel. Same re: NSLocalizedString and omitting the class name when the compiler can infer types.. Interesting.. Why the change?. You should probably add a warning to future travellers that adding extra imports here may have deleterious effects on push notifications.. Wait, what? I'm not even sure why we're using Dispatch.main.async in the first place.. Yes, I agree.\n\nI'd like it to do that: kill the app and re-launch, however, terminate and launch have the effect of effectively re-installing the app.. \ud83d\udcaf . Am thinking about a project just for XCUIElement extensions.. :+1:. :+1:. :+1:. :+1:. :+1:. :+1:. :+1:. :+1:. :+1:\n. :+1:. fatalError if no valid state can be found.\n:+1:. :+1:. :+1:. :+1:. :+1:. :+1: removed method.. Renamed to springboardStart(). Followup bug for changing the tests relying on the old name. https://bugzilla.mozilla.org/show_bug.cgi?id=1414986 . \nAdded deprecation warning.. Hmm. Not sure I can think of a better name.. Yeah, I agree it's not the clearest of tests. 10 weeks ago?\nI didn't change the test \u2014 as the test wasn't failing \u2014 just moved it to a XCTAssertEqual so we could see the value when the test fails.. This is my only feedback for this PR.. Nit: You don't need waiForLoading: true.. You can replace: \nswift\n       navigator.goto(TabTray)\n       navigator.performAction(Action.TogglePrivateMode )\n       XCTAssertTrue(navigator.userState.isPrivate, \"User is private\")\nwith:\nswift\nnavigator.toggleOn(userState.isPrivate, Action.TogglePrivateMode). Consider putting this in the userState.\nswift\nclass FxUserState: UserState {\n   \u2026\n   let numTabs: Int = 0\n   \u2026\n}\n```swift\nmap.addScreenState(TabTray) { screenState in\n    \u2026\n    screenState.onEnter { userState in \n        userState.numTabs = app.collectionViews.cells.count\n    }\n\n\u2026\n    }\n``. Nit: remove defaulted argument (waitForLoading`). Use: \nswift\nnavigator.toggleOn(userState.isPrivate, Action.TogglePrivateMode). swift\nnavigator.toggleOff(userState.isPrivate, Action.TogglePrivateMode). Use\nswift\nlet numRegularTabs = userState.numTabs. swift\nnavigator.toggleOn(userState.isPrivate, Action.TogglePrivateMode). \nswift\nnavigator.toggleOff(userState.isPrivate, Action.TogglePrivateMode). swift\nnavigator.toggleOn(userState.isPrivate, Action.TogglePrivateMode). Use toggleOn and toggleOff.. Consider adding an action. (essentially, nowAt is an escape hatch when you can't use actions or screen states).. Use toggleOn.. Use toggleOff. Use toggleOn.. Nit: use dropCamelCase for formPostHelper.. I'd like to try and move all taps into actions now.. Do we have to use google for testing? Can we use mozilla.org, or example.com?. Should this use \nswift\nnavigator.toggleOff(userState.requestDesktopState, forAction: Action.ToggleRequestDesktopSite)\n. Nit: does this need to be an optional argument.\nSuggest: \nswift\nfunc setInterval(_ interval: String). Nit: naming: use table instead.. Excellent!. Nit: whitespace.. I'm not sure I understand this gesture. It's conditional on passcode != nil.\nI think I'd suggest a LockedLoginsSettings screen with a non-action gesture to LoginsSettings.\nActions probably should not be used for navigation on the whole, just changing the app state.\nFrom SettingsScreen, link to LockedLoginsSettings and LoginsSettings but with conditions about passcode != nil and passcode == nil respectively.\n. You don't need: navigator.goto(PasscodeSettings).. Should definitely go in to a back action in LoginsSettings. isTablet is available for you there.. This should definitely go into LoginSettings backAction.. This should transitionTo: LoginSettings shouldn't it?. You could also wrap this in a single gesture if something more dynamic is needed.. I'd like to come up with some standard for accessibilityId. Heck, even a good, guessable convention would suit me.. This is good hygiene, though not strictly necessary. The app will be re-installed for the next test.. Yeah, this is a bit verbose. Do we need to a) expose the enum to the tests, i.e. can it be fileprivate. b) can we move it off of FxUserState?. Tip: use \nswift\nnavigator.toggleOn(userState.trackingProtectionSetting == FxUserState.TrackingProtectionSetting.alwaysOn.rawValue, withAction: Action.ToggleTrackingProtectionSettingAlwaysOn)\nThis would make it tolerant to us changing the defaults in the future, but\u2026 considerably ugly in the present.. Use \nswift\nnavigator.toggleOff(userState.trackingProtectionPerTabEnabled, withAction: Action.ToggleTrackingProtectionPerTabEnabled). This could be replaced by already existing Strings.CloseTabTitle.. This line works because the fastest route to the loading a URL is chosen as LoadURLByTyping.\nThe problem is that the Paste & Go isn't available when there is no URL on the pasteboard before the menu is opened.\nSo: there are three places we can fix this:\n\nas you have done. This will work, until you make a test that is alphabetically before this one.\nAdd the opening of the LongPressURLBar menu to LoadByPasting, and move that action to BrowserTab. \nPut the URL into the pasteboard right before performing the action, in Navigator.openURL(). \n\n(3) is definitely the easiest (it's one line).\n2: https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/FxScreenGraph.swift#L609. :+1:. I've left this as is, as per @tecgirl 's decision.. :+1: \nI ummed and ahhed about using .destructive. \nReasons against: \"Close All Tabs\" isn't .destructive; now adding a third color to our menus: black, blue and red.. What? Why don't you use urlString instead of example.com?. swift\n        screenState.tap(table.cells[\"Logins\"], to: LoginsSettings, if: \"passcode == nil\")\n        screenState.tap(table.cells[\"Logins\"], to: LockedLoginsSettings, if: \"passcode != nil\"). I was thinking about two routes to get to LoginsSettings\nswift\n        screenState.tap(table.cells[\"Logins\"], to: LoginsSettings, if: \"passcode == nil\")\n        screenState.tap(table.cells[\"Logins\"], to: LockedLoginsSettings, if: \"passcode != nil\")\nThe LoginsSettings would be doing the actual work of managing logins (currently not a lot):\nswift\n        map.addScreenState(LoginsSettings) { screenState in\n                screenState.backAction = navigationControllerBackAction\n        }\nand the LockedLoginsSettings being the one that does the hard work of managing that lock screen\n```swift\n    map.addScreenState(LockedLoginsSettings) { screenState in\n        // Add the actions about typing in the passcode incorrectly\n        // so you can test error messages etc.\n        screenState.gesture(forAction: Action.LoginPasscodeTypeOnce) { userState in\n            typePasscode(userState.newPasscode)\n        }\n    // Add a gesture to get to the protected screen.\n    screenState.gesture(to: LoginsSettings) { userState in\n        typePasscode(userState.passcode)\n    }\n\n    // Add a back action.\n    screenState.backAction = navigationControllerBackAction\n}\n\n```\nI expect the LoginsSettings screen isn\u2019t the last place we\u2019re going to want to protect with a passcode, so you might think about isolating this into a function\n```swift\n    func makeLocked(_ destinationScreen: String, typingAction: String) {\n        // Add the actions about typing in the passcode incorrectly\n        // so you can test error messages etc.\n        screenState.gesture(forAction: typingAction) { userState in\n            typePasscode(userState.newPasscode)\n        }\n    // Add a gesture to get to the protected screen.\n    screenState.gesture(to: destinationScreen) { userState in\n        typePasscode(userState.passcode)\n    }\n}\n\nmap.addScreenState(LockedLoginsSettings) { screenState in\n    makeLocked(LoginsSettings, typingAction: Action.LoginsSettingsTypePasscode)\n\n    // Add a back action.\n    screenState.backAction = navigationControllerBackAction\n}\n\n```\nSo now, the happy case works without worrying about passcodes:\nswift\nnavigator.goto(LoginsSettings) // passcode is not set\nnavigator.performAction(Action.SetPasscode)\nnavigator.goto(LoginsSettings) // passcode is set\nBut we don't lose the granularity when we want to worry about them.\nswift\nnavigator.performAction(Action.SetPasscode)\nuserState.newPasscode = \"111112\" // the wrong passcode\nnavigator.performAction(Action.LoginsSettingsTypePasscode) \n// \u2026 test the error message here.\n. a. Hadn't thought of putting the predicate into the enum value itself. Not sure if I feel dirty doing that :O) I was only really talking about making the enum fileprivate.\nb. If it was private, it could go right next to the FxUserState. It wouldn't be exposed to the tests, (or anything outside of FxScreenGraph). Anything to make it less verbose.\n. Nit: don't think nowAt is needed here. If it is needed, it should probably go in setInterval.. Nit: not sure why nowAt is needed here.. Nit: nowAt is good for documentation here, but: use the constant, rather than the literal string.. Nit: a) use table instead. b) move it closer to where it's being used. . YES!. Nit: navigator.back() instead of tap().. Nit: this is no longer needed.. Nit: Use navigator.back() instead of tap().. Nit: No longer needed.. Nit: is this needed? By default, actions should return to the source screen state.. Nit: whitespace.. Nit: whitespace. Add\nswift\nscreenState.dismissOnUse = true. Replace with:\nswift\nscreenState.backAction = navigationControllerBackAction. IIRC with this change enums with no associated values will not be equal. e.g. .thisDeviceDisconnected != .thisDeviceDisconnected.\nIf the guard in L259-L261 goes, and you add cases for each pair of messages in the enum, then defaulting to false would be OK. \n. I'd add a third action: TogglePrivateModeFromTabTray.\nIn the screenStates:\n```swift\n// In the tab\nscreenState.tap(app.buttons[\"Private Mode\"], forAction: Action.TogglePrivateModeFromTabBar, Action.TogglePrivateMode, if: \"tablet == true\")\n// in the tab tray (with the relevant accessibilityIdentifier)\nscreenState.tap(app.buttons[\"Private Mode\"], forAction: Action.TogglePrivateModeFromTabTray, Action.TogglePrivateMode)\n```\nThen you can put the common logic to change the user state from an action on the map:\nswift\nmap.addScreenAction(Action.TogglePrivateBrowsing) { userState in \n     userState.isPrivate = !userState.isPrivate\n}\nNow the navigator will chose the fasted route on the iPad.. See the comment above, but use Action.CloseTabFromLongPressTabTrayMenu.. This needs to be an action here.\nswift\nscreenState.tap(app.tables[\"Context Menu\"].cells[\"action_remove\"], forAction: Action.CloseTabFromPageOptions, Action.CloseTab, tansitionTo: HomePanelsScreen). This needs to be an action here.\nswift\nscreenState.tap(app.tables[\"Context Menu\"].cells[\"action_remove\"], forAction: Action.CloseTabFromTabTrayLongPressMenu, Action.CloseTab, tansitionTo: HomePanelsScreen). The test should\na) open two new tabs\nb) check that the number of tabs open is 2.\nc) close a tab\nd) check that the number of tabs is 1.\nc) close a tab\nd) check that the number of tabs is 1.\nI'm not sure you need to open any URLs, just perform the Action.NewTab a couple of times, and Action.CloseTabFromPageOptionsMenu.\nYou should also put checkNumberOfTabsExpectedToBeOpen into its own method. Either on navigator or the test.\n``swift\nfunc checkNumberOfTabsExpectedToBeOpen(_ numTabs) {\n    navigator.goto(TabTray)\n    XCTAssertEqual(userState.numTabs, numTabs)\n}. Nit: usesupportedLocales.. I hate the way we detect if we're in private mode like this. Currently we have lots of methods that are creating closures and putting it on the main thread only to check a singleenabled` flag which is false.. 1. Why is this construction better than what went before it?\n\nThere seems to be duplication here, can we do better? e.g.:\n\nswift\nprivate func isAppInstalled(_ scheme: String) {\n    return URL(string: \"\\(scheme)://\").flatMap { UIApplication.shared.canOpenURL($0) } ?? false\n}\nWould simplify checkIfAppInstalled too.. Nit: The name of the method does not reflect either the comment or the body of the method.\n. There's a lot of duplication in this method; the logic is a bit strange too.. Nit: if x { return true } else { return false } ==> return x\nswift\nreturn self.profile?.prefs.stringForKey(PrefsKeys.KeyMailToOption) == \"mailto:\". Given we're going to need this later on, shouldn't we save this some place right now?\nWon't this simplify things in checkIfAppInstalled. Nit: So much self.profile?.prefs. Can we use a local variable after we've needed it more than once?. Does this do anything? Does NSLocalizedString work with non StaticStrings?. So I should be able to do\n```swift\n// These two lines are functionally equivalent.\nDispatchQueue.global().ensureMainThread { }\nDispatchQueue.main.ensureMainThread { }\n```\nThis seems\u2026 weird.. There are two problems here: \n\nCalling out to UIApplication.isInPrivateMode. Lots of things wrong here, not just forcing us on to the main thread is a terrible restriction on accessing and managing state.\nPutting a closure on the main thread just to terminate early in the enabled == false case.\n\nFor: \n1. Put isInPrivateMode on the application itself, make it a function, rename isPrivateModeActive().\n2. Have private method that executes a closure if and only if shouldSendToLP() e.g. \n```swift\nprivate func sendEvent(work: () -> Void) {\n    guard enabled && Leanplum.hasStarted() else { return }\n    let mainThreadWork = { \n        guard UIApplication.shared.isPrivateModeActive() else { return }\n        work()\n    }\nDispatchQueue.main.ensureMainThread(execute:  mainThreadWork)\n\n}\n``. I think I meantlet prefs = self.profile?.prefs` here. \nIf you're going to break this out into calculated properties, I'd go full bore setters as well, just to keep the getting and setting in the same place.\nWhether I'd go for properties or not would be determined by if I used the properties outside of this method.. OK. I get it.. YES.. Nit: \nswift\nlet prefs = self.profile.prefs. I'm not sure this makes line does anything if $0 == true.. It could be, but then it wouldn't be a TabEvent.\nIf we post it here with type Any we wouldn't be able to safely cast it to a Tab when we receive it.. Once we have a working graphical representation of the graph, we should look at the making all these Action.OpenNewTab* actions flow in to the same Action.OpenNewTab and it increment userState.numTabs.\nLand this as is now, and we can come back to it.. :+1:. Nit: \"EXPLAIN QUERY PLAN \\(sqlStr)\". You're right:\nwith ORDER BY siteID DESC, date DESC\n\u29bf EXPLAIN QUERY ---------------- \n\u29bf EXPLAIN: id: 0, order: 0, from: 0, details: SEARCH TABLE visits USING COVERING INDEX sqlite_autoindex_visits_1 (siteID=?)\n\u29bf EXPLAIN: id: 0, order: 0, from: 0, details: EXECUTE LIST SUBQUERY 1\nwith ORDER BY date DESC: \n\u29bf EXPLAIN QUERY ---------------- \n\u29bf EXPLAIN: id: 0, order: 0, from: 0, details: SEARCH TABLE visits USING COVERING INDEX sqlite_autoindex_visits_1 (siteID=?)\n\u29bf EXPLAIN: id: 0, order: 0, from: 0, details: EXECUTE LIST SUBQUERY 1\n\u29bf EXPLAIN: id: 0, order: 0, from: 0, details: USE TEMP B-TREE FOR ORDER BY. It's confusing enough to make it worth re-writing though.\nIt disappears when you put the check in a guard and move it to the top of the loop.. :+1:\nSince this is already landed on master, I've opened up another PR \u2014 #3531 for this work.. I think this should a) be discussed in the engineering meeting, b) added to our style guide.. \ud83d\udc4d . :+1:. :+1:. :+1:\n. I'm generally against over generalizing names: apply, perform, Action etc.\nI'm less against this if it's a filename and not a class name.. Seems a lot of things are keyed off debug_enabled.\nCan we get this in as a build setting/flag?. Nit: use accessibilityIdentifier instead of a localized text label.. Nit: use accessibilityIdentifier instead of a localized text label.. Nit: use accessibilityIdentifier instead of a localized text label.. This would be a good fit to add to the TabEventHandler protocol.. Given that this is just injecting javascript, can we use tab.injectUserScriptWith, and do away with this class altogether?. TODO: minify all these content scripts.. This is a significant change of meaning. Is this definitely the case?. This doesn't make sense (goto followed by a nowAt). You do this several times in this test: goto HomePanelsScreen then NewTabScreen. Why?. I think these should be named as SelectNewTabAsBlankPage or something to suggest that they're Settings actions.. Could we also \n``\nTabEvent.post(.didLoadFavicon(favicon, with: result.data), for: tab) // unsure of the exact syntax of.didLoadFavicon.. Shouldn't this method go inFaviconFetcherorFaviconManager.\n  . How do we know we haven't broken anything?. Good.. Yep.. Excellent. So much clearer.. Good.. Nit: unsure I like this or not.. Nit: why leaveButtonToasthere?. Nit: removeTabToolbarHelper?. Nit: removeHomePanelViewController?. Nit: removeReadingListPanel?. Nit: removeRecentlyClosedTabsPanelSiteTableViewController?. Nit: removeRemoteTabsTableViewController?. Nit: removeReaderModeStyleViewController?. Nit: removeReaderModeStyleViewController?. Nit: removeReaderModeStyleViewController?. Nit: removeReaderModeStyleViewController?. Nit: removeStageSyncServiceDebugSetting?. Nit: removeClearPrivateDataTableViewController?. Nit: removeSearchSettingsTableViewController?. Nit: removeSearchInputView`?. This sort of re-write, while welcome, should probably be in its own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. These code cleanups should probably be in their own PR.. Ug.. This code is cleaner than what went before, to be sure. \nswift\n// These exceptions can go away when we drop iOS 8 or when we start using a better mechanism for search\n// engine selection that is not based on language identifier.\nWhat happens when we drop iOS8? What's in iOS9?. Can we test this?. How do we know we're not shipping broken XML files to Indonesia or India?\nFor that matter, how do we know we're not shipping broken list.json? (smoke testing aside). \nAre these files actually changed, or are they simply mved? Did you git mv them?\n  . Ok. \nIs this really the best place to be doing this? Could you put a comment about why we're getting multiple URLs? \n  . Prefer using new TabEvents for this.. Using NotificationOnPageMetadataFetched should probably be deprecated in favour of TabEvents.. We should already be on main, so perhaps just assert that rather than dispatch another block.. You can post from any queue, the handler chooses which queue to be notified on. You've explicitly given queue: .main when registering TopTabsViewController below.\nAdditionally, I think you can replace upon with >>== to eliminate the if let _ = result.successValue.\nswift\nloadFaviconURL(faviconURL, forTab: tab) >>== { (favicon, data) in \n    TabEvent.post(.didLoadFavicon(favicon, with: data), for: tab)\n}\n. Does this have to be on .main?\nThe alternative would be start creating some generic NSOperationQueues in TabEventHandler for (say) .background, .network etc.. Nit: remove.. Nit: remove.. Nit: remove. Should this backgroundQueue be just for this handler, or should we use it as a common one for other handlers too?\nMy intuition is we should share them \u2014\u00a0i.e. make them live with in TabEventHandler.swift or TabEventHandlers.swift. I don't know, what do you think?. Nit: prefer a guard here.. Nit: isGIF.. This should probably all go in NavigationRouter no?\n(We should probably treatAppDelegate.swift as the next BVC!). Is \\(appScheme)://deep-link?url=/settings/mailto/ (trailing slash) expected to work?. Nit: use a singleton, rather than lots of static methods.. Nit: put these static methods in to a NavigationRouter.shared stateless singleton.\nThe entry point should be a handle(_ url: URL, with bvc: BrowserViewController).. Edit: shouldn't\nNo, let's not make the AppDelegate a 1000 line monstrosity.. Cool. Postel's Law applies here.. I'm ambivalent.\nThis isn't the thing holding up a review.\nI am unconvinced that this is the last thing that we need to do with Sen[dt]Tab. Perhaps we should just wait until that happens before moving this registerActions to a different place (perhaps FxALoginHelper.registerActions() ?).. This is the line that fixes this bug. See #1484.\nUsing didLoadPageMetadata allows us to use a rel link (so we're not handing off AMP or m. URLs).. There is a lot of duplication here. How can this be parameterized?\nSuggest you strive for\nswift\nuserState.fxaEmail = \"bad@email.com\"\nuserState.fxaPassword = \"password\"\nnavigator.performAction(Action.FxATypeEmail)\nnavigator.performAction(Action.FxATypePassword)\n```swift\nuserState.fxaEmail = \"valid@email.com\"\nuserState.fxaPassword = \"password\"\nnavigator.performAction(Action.FxATypeEmail)\nnavigator.performAction(Action.FxATypePassword)\nnavigator.performAction(Action.FxATapSignInButton)\n// short cut, which logs you in.\nnavigator.performAction(Action.FxAValidLogin)\n```\n. Where should this transition to?\nShouldn't this be just another screen state, rather than an action?. Nit: naming. type(text: String). Use\nswift\nXCTAssertEquals(observed, expected, message)\nThese give more helpful error messages than XCTAssertTrue.. \ud83d\udc4d \nMy suggestion above would be a good place to start.. Shouldn't this test be in testUIFromSettings?. What does this do? Could you leave a comment that explains this line?. I had suggested: \nswift\nfunc type(text: String) {}\nin line with Swift 4's naming conventions. This would mean callers type\nswift\ntype(text: \"\")\ninstead of \nswift\ntype(\"\"). I mention this test because it goes to FxASigninScreen which has the Create an account link. \nThis is a trivial thing, I'm not digging in my heals :-). For each of these actions, add FxA in the name somewhere.\nOtherwise, it could type in an email in whatever text box is available. When it actually means: goto a specific place in the app and then type into the email box.. Nit: whitespace. I still hate having all these static methods around, but can't articulate why :). Not sure we need babel-preset-es2015.\nThe babel-preset-env should be able to choose the correct presets.. Use mozilla/readability instead of the full path.. Most of these dependencies should be in devDependencies, instead of dependencies.. Put babel-loader in the a loaders section.\njs\n    module: {\n        loaders: [{\n            test: /\\.js$/,\n            loader: 'babel-loader',\n            exclude: [\n                /node_modules\\/babel-/m,\n                /node_modules\\/core-js\\//m,\n                /node_modules\\/regenerator-runtime\\//m\n            ]\n        }]\n    }\nThen put the babel-preset-env in .babelrc.\njs\n{\n  \"presets\": [\n    [\"env\", {\n      \"targets\": {\n        \"iOS\": \"10.0\"\n      }\n    }]\n  ],\n  \"plugins\": [\"transform-runtime\"]\n}\nThough, looking at babel-preset-env docs, I'm not sure \"env\" is the right string here.\n1: https://github.com/babel/babel/tree/master/packages/babel-preset-env. Even in webdev environments, it doesn't matter. The npm client only pulls down devDependencies for the top level module (the one you type npm install in). \nIt's about making it more readable for humans. . AFAIUI, babel-preset-env constructs the preset by matching babel's feature flags (in the form of babel-plugin-transform-es201*-*) to data from caniuse.com (via browserlist).\nbabel-preset-es2015 is a hardcoded arrangement of those transforms, i.e. anything babel-preset-es2015 can do, browser-preset-env can do.. Nit: magic string.. Nit: naming. suggest: recordSyncedClients or trackSyncedClients.. Nit: naming. \nI will forever read this as Toilet Paper Defaults. ;). Nit: break this into multiple lines.. Nit: put closure outside of the argument list.\ni.e.\nswift\n controller.addAction(UIAlertAction(title: title, style: .default) { _ in }. What happens here?\nIf NOOP or TODO, could you comment please? If it should be empty, isn't there a way to specify no action handler?. This pattern looks\u2026 weird. \nCasting to self to a PresentableVC and then passing it to presentSheetWith.\nOh, right you're in a protocol extension. Are there any instances when this fails? i.e. can the protocol extend PresentableVC?. Nit: names.\nSuggest: \n``swift\nstruct TrackingProtection {\n   struct keys {\n       static let enabledNormalBrowsing = \"\" \n       static let enabledPrivateBrowsing = \"\"\n   }\n   struct defaults {\n       static let enabledNormalBrowsing = false\n       static let enabledPrivateBrowsing = false\n   }\n}. Passprefs, notprofile.. Do this inNoImageModeDefaults`.\nswift\nlet Script = \"[{'trigger':{\u2026k'}}]\".replacingOccurrences(of: \"'\", with: \"\\\"\")\nso we never do it more than once.. .ContentBlockerUpdateNeeded is only posted by this object, and only observed by this object.\nWe can do without the NotificationCenter, just call: addActiveRulesToTab().. Nice!. This doesn't make sense. \nCould you comment this, to say why this should be called from viewDidDisappear.. This method isn't useful enough to be in StringExtensions. Remove as suggested above.. Aside: I really long for a more structured way of adding functionality which affects all tabs.\ne.g. NightMode, NoImageMode, ContentBlocking.. If I'm reading this right, none of these PhotonActionSheetItem are used in more than one then blocks.\nMove each of these then blocks into their own methods.\n. \ntab.isPrivate should be immutable, so I expect just returning should be enough here.\nswift\nguard !tab.isPrivate else {\n   return\n}\nSecond: we should be doing check about isWebPage && !isLocal before sending the didChangeURL or didLoadPageMetadata messages; if the page isn't a remote webpage, we should send a new type of message.\n. After discussion in slack, we don't know if this No Image Mode is the same as Reduced Data Mode.\nThis is the same as previous behaviour, so leaving it here.. This is the line that fixes the bug. The rest is just cleanup.. Ah, good point re: event.type.\nI had a look around what can emit focus and blur events. The standard seems a bit hazy, but this from quirksmode\n\nthe window itself.\na elements.\nanything with a tabindex element.\n\nAs I'm using this as a proxy for \"is the user editing text\", I think I still need to test for the node name, and contenteditable.\nI should probably test for attribute input[type=button] and input[type=submit] however.\n1: https://www.quirksmode.org/dom/events/blurfocus.html. Hmm.\nIf contenteditable=false or contenteditable=inherit does that still match?\nI've added an isButton function which checks the buttonness too.. This is called when the user has typed DOWN, then UP \u2014\u00a0i.e. focus should move back to the location bar.. We might change this value when we get we get to Bug 1433476.\n1: https://bugzilla.mozilla.org/show_bug.cgi?id=1433476. Calling this delegate here feels weird. How do we perform the same action a tap performs?. Calling this delegate here feels weird. tableView.selectRow does the highlighting.. This is called when the user has typed DOWN, then UP \u2014 i.e. focus should move back to the location bar.\nAlso tried: explicitly setting BVC or the location bar as first responder.. Nit: naming/capitalization. Nit: naming. Having spent a little while with UIKit protocols, I'm beginning to want to see can methods as should methods.. But I guess you want to fit in with this.. Do need these to be a IIFE? Didn't we decide that recently?. If the safe index extension checks for bounds, do you need tabIndex < viableTabs.count && !viableTabs.isEmpty anymore?. Nice renaming.. Can we tell if this an iPad in split screen?. Nit: naming. This isn't a url it's more of a sites or sitesList.. Nit: naming. \nEither don't use a class (so client code can use\nswift\nlet urls: [String] = top5000SitesList\ndirectly. Or: \nUse a static let in the class. \nswift\nclass SitesList {\n   static let top5000 = []\n}\nI think this second would be preferable \u2014 so you can add more properties and methods later.. Nit: your comment says 100, n is 2.. <DeviceID>, <AppGroupID> \u2014 does this work?. Having just pulled out FirefoxAccount for lockbox, commandsClient seems to me strange.\n. This seems clunky to include it in the protocol.. Ach, ok. Again, having just ripped marriedState() out, this looks weird; but I get what you're doing.. This function should be in a file & extension on its own. I have a feeling this function will grow in complexity.. We'll need to stash index for a later time. IIRC, this is an opaque pointer that we just give back to the server.. Nice.. I expect you need an all to process the results.\nswift\nall(devices.map { device in \n    return self.commandsClient.invoke()\n}). Nit: rename to reflect subject/object.\nswift\nfunc supportedBy(device: FxADevice) -> Bool. If we're in the app, and not the extension, we should have a command mechanism like TabEvents for exactly this purpose. If not, now is the perfect time :). I guess you're just moving the Keys/Payload stuffs from Sync to Account?. This is hitting the database a number of times. Suggest writing a more suitable query.. This loop and the nested ifs look messy.. Most of this method is general to most commands. Can we pull it out such that the general bits only need writing once. e.g.\n```swift\nfunc emit(command: Command, to clients: [RemoteClient]) {\n    let devices = \u2026\n    let capable = devices.filter { command.isDeviceCompatible($0) }\n    let ids = Set(capable.map { $0.id })\n    let incompatibleClients = clients.filter { !ids.contains($0.id) }\ncommand.emit(to: capable) >>== command.emitFallback(to: incompatibleClients)\n}\n```\nThis would be made much easier with async/await, of course.. I'm not sure we should have this here specifically; this function is deep in the weeds of sync coordination. \nSuggest, however that we poll for missing remote commands in applicationDidBecomeActive() if push has been enabled, and syncEverything() is not.. I suggest you'll get more milage/better performace out of a \nswift\nfunc getRemoteDevices() -> Deferred<Maybe<[RemoteDevice]>>\nmethod.. Do we know if there still be dragons?. We're only persisting state in very few cases.\nIn the cases we are persisting state, we should probably generate an immutable configuration from the prefs, rather than passing a mutable configuration.\nMinimally, the prefs constructor should not be part of the protocol.. For all these \"just keeping the same names as the desktop implementation\", perhaps we could wrap those choices up in a protocol?. \ud83d\udc4d +1:. My suspicion is that having this as an int is going to bite us eventually if the index is global. \nIf we're coercing it from a string, never using it a Comparable, and outputting as a string, I think I'd just store it as an opaque string.\nHaving it as a number type risks things which we don't need to risk: string encoding, int overflow etc.. YAAS!. Nit: turn this for loop into a flatMap.\n```swift\nprivate func handle(command: FxACommand) {\n    guard \u2026 else { return nil }\nswitch command.name {\ncase FxACommandSendTab.Name:\n    return self.sendTab.handle(\u2026)\ndefault: \n    return nil\n}\n\n}\nlet items = commands.flatMap { self.handle(command: $0) }\nreturn deferMaybe(items)\n.swift\nlet succeeded = results.filter { $0.success }.map { $0.device }\nlet failed = results.filter { !$0.success }.map { $0.device }\nreturn deferMaybe(FxACommandSendTabReport(succeeded: succeeded, failed: failed))\n``. I think if you get rid of the intermediateresult` variable, you can get rid of the type label in the closure. \ni.e. \n```swift \nreturn all(deferreds).bind { results in \n    \u2026\n    return deferMaybe(FxACommandSendTabReport(\u2026))\n}\n``. Nice.. Should this be different ifAppConstants.MOZ_FXA_MESSAGESisfalse?. Nit: usemap,filterandflatMap` to make these easier to understand.. Ok, YMMV. \nMy hunch is that you'll have easier to read code if you have a Deferred<Maybe<[\u2026]>> to unwrap instead of a [Deferred<Maybe<\u2026?>>].. It's a shame you didn't \n\nimplement stringify(), \nimplement stringValue() in terms of stringify()\ndeprecate stringValue()\nland this PR.\nrename all the call sites of stringValue() in a different PR.\nremove stringValue() in that PR.. These deleted lines are doing the lifting of all that you've added. \n\nRemoving L23 will do all that you want. (i.e. removing DocumentServices.js). Nit: Just delete L39 if you don't want to build DocumentService.js.. This language check should be in a different class, implementing a protocol, e.g. DocucumentAnalyser.\n. ```swift\nprotocol DocumentAnalyser {\n    var name: String { get }\n    func analyse(metadata: PageMetadata) -> T?\n}\n``. I'd prefer the idea of assembling a dictionary and then populating theDerivedMetadata: the idea is to makeDerivedMetadataandDocumentServices` be about analysing the document with multiple analysers, rather than just language.\nThis is the point of putting it in separate classes: so we can modularize the analysis.. Can we use DocumentAnalyser<NLLanguage> here? Looking at the API, I don't think we can.. Nit: typo: langaugeMetadata, but I think that the metadata (the DerivedMetadata) isn't just language.. This is the line that does most to fix the false positive rate.\nIf language detection is a categorization problem, using a metaphor of throwing pebbles into a buckets.\nDecreasing the number of languages is akin to using fewer, bigger buckets. You reduce the false positives by making you miss the wrong buckets. This superficially feels good, but breaks down when you have proper nouns, slang, short messages, or languages not supported by your detector.\nIncreasing the amount of text makes you better at throwing pebbles more accurately. You can hit smaller buckets if you're more accurate at throwing pebbles.\nSo, adding title to add more text sounds like it might work. However, there are plenty of proper nouns and trademarks in titles which may confuse the detector; so I'd be suspicious that this is the right text to add in the general case \u2014\u00a0I'm not sure how a selection of foreign language wikipedia pages would look, for example.\nHave we got a test set for the false positives using either NSLinguisticTagger or franc?\n. The analyser is deriving some metadata, not all of it.. So much neater. :+1:. I don't think wikipedia has any thing that the page-metadata-parser picks up for description, so anything using the title would prove problematic.\nhttps://en.wikipedia.org/wiki/Schadenfreude . :+1:. I think there're three separate things to be done with page metadata parser \u2014\u00a0\n\ndetect the language that the page says its in. Assumption: This is likely to fail because few pages declare the natural language of the next.\ndetect alternative languages the publisher has translated this page to.  Assumption: This is likely to fail because few publishers offer translations to their pages.\ndetect some representative paragraph of text from the page that is visible to the user (i.e. not description or title). This will always succeed.. \n",
    "tecgirl": "I believe I just overwrote all of that anyway, the right way, with pull 321. :-)\u00a0\n--\u00a0\nRobin Andersen\nSenior Mobile UX Designer, Firefox\nrobin@mozilla.com\u00a0| irc:tecgirl | \\m/\nOn April 7, 2015 at 2:53:15 PM, Brian Nicholson (notifications@github.com) wrote:\nI'll take a look to see if we can get this sorted out.\n\u2014\nReply to this email directly or view it on GitHub.\n. I was so excited! Sorry about the premature merge.\n. I didn't intend for my other commits to be added to this PR, not sure how to separate. I only want the assets updates here. \n. Thanks. I still don't know how (or why) it keeps adding this to my commits.  \ud83d\ude10\n. Share icon bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1173392\n. Device icon asset update bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1173411\n. Works/looks great and good call on a grey star > blue star to avoid the misconception that the status would be actionable in this view.  :+1:\n. Ellipsis animation looks good! \n. Yes, the Sync asset and label should line up with the asset and label above. \ud83d\udc4d Here it is on my 7. \n\n. I added the Sync and solid light grey Firefox logo assets to the bug. I reversed the color (grey on white) as 1) it looks better 2) I noticed weird snapping as the radius applied to the asset (have a video if anyone is curious). I'm also wondering if we should drop the \"Manage Account\" line as the asset and caret show that it's tappable. \n\n\n. It's looking great! Two things: 1) The text color is pure black on the Sync Now label. I can't find the dark grey color in the constants, but whatever color the rest of the headers is what it should be. 2) Can we animate the asset like we do on Desktop? Previously we thought about animating the elipsis and that never got in, but now that we have a proper asset it makes sense to add some feedback to it. Here's what it looks like on Desktop: http://c.tecgirl.com/mIox \nI can provide the blue version of the asset (since we're not using SVG so I don't think you can apply color with code).. I think it\u2019s good in both places.\nTl;dr\nI also want to mind the amount of items in that list but I think this is worth it. As far as discoverabilty of the LP options, once discovered is a totally time saver. Perhaps we could help spread the word about it. And, as a general good UX practice, particular redundancies are ftw. . It would be great if we could match the previous padding specs in order to give comfortable space between the asset and title, lessen the whitespace gap below the title, and have more padding on the copy. \n\n. Looking good! A couple notes: \nPurple on the Learn More text link and mask icon on the bottom bar should both be Purple 60.\nSystem Blue will be Blue 40, not 50 (to get ahead of the new theme work)\nPerhaps add the Ink palette now to support Dark Theme https://trello.com/c/qAvZgglm/136-dark-theme. \n. WFM\n. +1 for \"No logins found\" (why is this title case?)\nRe: sleroux's \u2014 Using 'Deleted' is redundant when using \"removed\". \nLocal:\nAre you sure?\nLogins will be permanently removed.\n[Cancel][Delete]\nSynced:\nAre you sure?\nLogins will be permanently removed from all connected devices.\n[Cancel][Delete]\n. ",
    "matthewpurcell": "Thanks for the feedback @thebnich . Following your suggestion, I changed the gesture / touch recognizer such that it's now attached only to the buttonContainerView in the HomePanelViewController so that it is no longer a catch-all approach.\nI implemented a new delegate callback method as part of the HomePanelViewControllerDelegate protocol called homePanelViewControllerHandleDismissKeyboard: which is implemented in the BrowserViewController to resign the URLBarView text field when called (as we have a reference to that view from the BrowserViewController class).\n. Thanks @thebnich for the feedback and advice. Wow, the solution is now much simpler compared with the first commit :)\nI originally didn't opt for endEditing since it's a fairly heavy-handed approach and I wasn't familiar enough with the codebase to know whether it would cause problems down the track (similar for the reasons behind originally making a reasonably general solution to this bug - tapping anything underneath the location bar, rather than just the home panel). However, this is a much better solution, particularly if it's being used successfully in other parts of the code.\n. Thanks for the feedback @st3fan and @darrinhenein . I have fixed the iPad crash by including and configuring the popoverPresentationController. Tested on iPhone and iPad and both appear to be working correctly.\n@thebnich Removed those extra parentheses too - thanks for picking them up :)\n. ",
    "sachin004": "@ncalexan Swipe to delete and highlighting  selected search engine are in my next TODO list. Value 10 was through trial and error I will to try t find out a way to deduce it from the available dimensions and fix the space issue. Could you assign me the Swipe to delete on bugzilla?\n. @ncalexan I think there is some issue with Add button in swift, instead we can just use unicode character like the settings icon or an image item. What do you suggest?\n. @thebnich Thank you for taking time reviewing it so quickly. I really appreciate it. I have made all the changes suggested by you, please take a look at it.\n. @thebnich let me know if I need to make any more changes or is this good to go?\n. ToolbarHeight has been moved to AppConstants. We need to update this reference.\n. Hi @ncalexan I am not using the highlight cell that you suggested because it will highlight the entire cell, I am just trying to add a marker to the cell saying that this is the search engine selected. In Chrome currently search engine is highlighted http://i.imgur.com/HM8WWcs.png?1 and in safari http://i.imgur.com/4Yml8u1.png?1 and with my changes firefox will look like this http://i.imgur.com/3fdQnjk.png?1 (I don't have the image required so I was using the stop image from assets.)\n. Before: https://www.evernote.com/shard/s221/sh/37c09bba-1bfb-4b61-9406-10521806d56f/9763c35121e08e899b82222e2d61a191 \nAfter: https://www.evernote.com/shard/s221/sh/f7f11398-2750-49bd-827d-bff5c5d15dc7/d83bdf15714efae68c3f9bc375c500f5\n. @st3fan by using NSDateFormatter.doesRelativeDateFormatting we can get only yesterday, today and tomorrow and remaining dates will be something like \"12/2/2015 12:22:22\".\n. @fluffyemily Do you have any design document for this? Could you explain a bit more about dynamic options? \n. @fluffyemily If static quick actions are already on master I can close this pull right? Sure I would like to more about dynamic actions.\n. Calculating status bar height dynamically instead of setting it to a value(20).\nReference http://stackoverflow.com/questions/12991935/how-to-programmatically-get-ios-status-bar-height\n. Value 10.0 which obtained through trial and error is not random it changes with the change in StatusBarHeight. Vertical height adjustment had to be done for both barButtomSystemItem and Image and not for unicode characters. Currently images are set to a random image(search) once assets for these two are loaded they will be changed.\n. Sorry about that missed the line of code during resolving merge conflicts.\n. ",
    "brandy2015": "I have meet the same error even after I put the framework into the project\n. ",
    "tommymchugh": "Definitely! Will add those right away.\n. @thebnich just added those things. It should look good now.\n. ",
    "rohanaurora": "@wesj Correct. Didn't even think about it or might have forgotten earlier. Too bad that, there are 8 warnings (dependency analysis etc.). But, I was able to build today. \n. ",
    "splewako": "Please reference bug numbers in commit messages in the future, thanks.\n. Thank you for landing this so fast.\n. https://bugzilla.mozilla.org/show_bug.cgi?id=1242626\n. Please reference bug numbers in commit messages in the future.\n. As a localizer I had no idea (and partially still do not) how the strings are used after reading their comments. :(\nAlso: shouldn't all new strings use something different than English text for id?\n. @varkor: reading https://github.com/splewako/mozilla-l10n-en/commit/7e6372c3e83eff91c784ddd2186208739ba01798 - aren't \"Logins\" and \"Private Browsing\" simply list items much more than \"List section title for when to use authentication for private browsing\" and \"List section title for whether to use authentication for private browsing\"? (double comments are also confusing)\n. I'm not 100% sure how exactly tools work but most localizations will miss that change probably.\nhttps://github.com/splewako/mozilla-l10n-en/commit/b28bda48ac94153b032a11591969c55a6bd3e25f. Please don't use word \"title\" to describe things (in string identifiers and notes) that are clearly not titles (even if some attribute is wrongly named that way).\nhttps://github.com/splewako/mozilla-l10n-en/commit/20c0fe822c4a94bca73cec46b91a6e94f3298c20. ",
    "ilhanadiyaman": "To test it on simulator and see the result, you can download Hardware IO tools for Xcode 6.3 and run Printer simulator.\n. I'll try to send an update today. Sorry for delay @st3fan.\n. I have used steps below to debug it on my phone. \n1. Go to member center and create a wildcard App ID. For example: com.fennec.*\n2. Create a new development provisioning profile for your wildcard app id with your test device's UDID included. Download and install it.\n3. Open Xcode project and switch to project settings.\n4. Under the Build settings find Code Signing Entitlements and delete Debug entitlement for Client, ShareTo and SendTo targets.\n5. Switch back to General tab, change bundle identifier to com.fennec.Fennec for Client, ShareTo and SendTo target. Make sure you choose proper Team for your app id.\n6. Build and run on your device.\n. @wesj I don't have AirPrint compatible printer either. Actually, according to the documentation, printInfo is unnecessary. UIKit assumes certain defaults. I have tried remove it locally and tracked the Printer Simulator logs. Only difference is made on jobName. I think JobName as a AbsoluteURL seems better If AirPrint compatible printer shows jobName.\n\n. ",
    "flodolo": "Side note: for this to work, if a string changes we need a new 'id' for the trans-unit, otherwise the script will copy over the existing translation, even if the string (source) changed.\n. Added locale mapping per bug 1160467, kept in a separate commit for now.\n. To be honest I don't know why are escaping them: double quote is used as a delimiter, I don't get why we need single quotes escaped. The only use of this script is to create .strings from .xliff.\nMy test worked fine with a string containing both, there's plenty of straight quotes used in English and I couldn't see anything breaking in my test.\nEventually we can leave the existing code for straight quotes and drop it later after asking Stefan.\n. It was flagged for review in Bugzilla, but I confess that I'm a bit confused when it comes to mixed GitHub+Bugzilla workflows.\n. Aren't you missing one instance?\n. Just realized that the bug referenced is not the correct one: 1179119 -> 1178119\n. > Main settings button: settings.clearprivatedata.title\n\nTitle for the CPD screen: settings.clearprivatedata.subsection.title\nButton to clear data: settings.clearprivatedata.clearbutton.label\n\nI'm not completely convinced about the first one, since it's not really a title. Maybe settings.clearprivatedata.sectionname?\nAlso, the comment for the second one:\nNavigation title in settings.\nMaybe\nTitle displayed in header of the setting panel\n. Thanks, looks great to me.\n. Added (previous circleci run was green)\nBug 1238118, 1238115  - Improve localization comments for First Run tour\n. \"title\" works if the string is actually used as a title, all the strings fixed in that PR were not title ;-)\nIn this case, \"Title displayed in the header of the panel\" works if the string is used as a title in the header.\nNo clue about the other strings without some UI wireframe or similar.\n. Amended to add Hungarian, and manually merged in https://github.com/mozilla/firefox-ios/commit/9e61745cb700f9930f8a69538d926f926acf17bb\n. CC @Delphine, since I'm not technically managing mobile anymore, but I'm still around, especially for search.\nOne possible explanation for the differences is that the sync script hasn't been run for a while?\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Assets/Search/scrape_plugins.py\nan: iOS doesn't have search settings because that locale is not localizing Fennec (it's doesn't even have a /mobile folder).\nar: why do you say that it doesn't have settings for Fennec? It has them\nhttps://transvision.mozfr.org/productization/?locale=ar&product=mobile\nWe're not shipping Arabic in the multi-locales build because we're broken for RTL languages\nhttp://hg.mozilla.org/releases/mozilla-release/raw-file/default/mobile/android/locales/maemo-locales\n. multilocales comes from maemo-locales, single locale builds come from all-locales.\nFor iOS you can look at shipping_locales.txt in a branch (that's the list of locales actually shipping in store, which is a subset of the active locales).\n. Forgot to add: we might have locales available in iOS but not in Fennec, since it's a very small project it's a good start for them (e.g. ses).\n. We'll try to fix this in a new PR.. r+ \ud83d\udc4d . Keeping a list of shipping_locales on master to make updates easier (they can be done directly via GitHub interface). Will keep it up to date when we update the latest branch.. cc @Delphine \n\nPart of the reason for this process is when Firefox for iOS was first being developed, the l10n team used SVN for storing their translations. \n\nThat's not the reason we have a svn export in the script. It was introduced after we moved to GitHub, not completely sure why. The comment seems to push against the idea of using a submodule too.\n\nSince then, they've moved to Github and have a release and development branch for in-progress locales.\n\nUhm, not really. We only have one repository and work against master, that's why we need to ensure strings are not removed between releases, if there's still the risk of shipping a dot release that needs them.\n\nand have the locales be referenced in Xcode using groups\n\nHow do you define shipping locales in this scenario? Would that process remain the same (shipping_locales.txt in root)?. There are testing failures but I think it's safe to assume they're unrelated. I'm going to merge this and #2918. @st3fan \nLooks like I'm stuck on merging this one.. Over night realization: we need to revert this before the next export, or make sure we don't port it over to the build-tools repo (#3093).\nupdate-xliff.py was created to update localizations in the export phase: it reads en-US, adds missing elements, auto-translate some of them.\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/scripts/update-xliff.py#L161-L168\nWith this change, during the next export, it will autotranslate those strings for all languages, export them to the repo, and stored until someone notices they're in English.\nWe should do that in xliff-cleanup.py instead.. See https://github.com/mozilla-mobile/firefox-ios-build-tools/pull/35. We usually keep master in sync with the latest branch to avoid confusion.\n@Delphine \nSince there's already a v10.x branch, you need two PRs.. Never mind, I missed #3411 because it was already merged.. Not sure if someone can merge this, overriding the buddybuild check, or rerun it.. @delphine is in charge of l10n for mobile products ;-). Alternative comment: Label used as an item in Settings. When touched it will open a dialog prompting the user to make sure they want to clear all of their private data..\n. Alternative comment: Used as a button label in the dialog to Clear private data dialog.\n. Since we're on it, can we update also this comment?\nTitle of the Clear private data dialog\n. This doesn't make sense: why are you switching from the list of locales that are translating Firefox for iOS to the list of locales with builds for Firefox desktop (and then scrap the searchplugins from the mobile folder used in Firefox for Android)?\n. nit (also next comment): English\n. What about using an array for readability?\n```\nINCOMPLETE_LOCALES=(\n    \"da\"\n    \"eo\"\n    \"es\"\n    \"gl\"\n    \"is\"\n    \"ko\"\n    \"lt\"\n    \"ru\"\n    \"sk\"\n    \"son\"\n    \"tl\"\n    \"uz\"\n    \"zh-CN\"\n    \"zh-TW\"\n)\nfor i in \"${!INCOMPLETE_LOCALES[@]}\"; do\n  rm -rf firefox-ios-l10n/${INCOMPLETE_LOCALES[$i]}\ndone\n``\n. zh-TW\n. In the comment: \"label\" or \"message\" is probably a better fit than \"title\":\n. Since the comment is already associated with the string, it doesn't need to explain what's clear from the string itself, while it's useful to explain the context: e.g. \"Message displayed in the crash dialog above the buttons used to select when sending reports\" or similar.\n. Based on the [image](https://bug1189902.bmoattachments.org/attachment.cgi?id=8662500), \"Used as a button label for crash dialog prompt\" for all four strings should work.\n. Based on the [image](https://bugzilla.mozilla.org/attachment.cgi?id=8662568):Will be displayed in Settings under 'Close Private Tabs'`\n. I would remove these 2 strings if they're not used. Translation needs to happen in context, having 2 unused strings in the codebase often leads to reusing them in unexpected ways.\n. At this point it would be even safer to have 3 separate strings: one for the menu item in settings, one for the title in the dialog displayed selecting this item, one for the button label.\nOne reason to separate them is that the available space is different between the two, and headers use a larger font, so you could use a shorter text for the title if needed.\n. Is this change wanted or needs an overlay?\n. tip is generally safe on mozilla-aurora, but for consistency you should use 'default' (don't try that on beta though, tip and default are two different beasts)\n. I would add that this string is used with SyncState.Partial.Title, in all strings.\nThe Bookmark sync component, used in the string SyncState.Partial.Title\n. Title for Sync status message... ?\n. The only alternative I can think of is Syncing has failed (to complete), with a reference to the action and not the feature. But I'm also fine with the current form if you decide to keep it.\n. The idea is to fix only comments, so it can eventually be ported to v5.x if we want. It's also not safe for me to touch more than the basic stuff in swift code ;-)\n. This comment is a bad copy and paste from the string above\n. Label, not title (also the following one).\n. This doesn't have a value, and in the XLIFF is exposed as 'AS.PageControl.Button', which doesn't make a lot of sense\n. ",
    "DomT4": ":+1: would love to know this as well. Also have a dev account and valid signing cert available, but Xcode hits errors as well.\n. ",
    "b-andris": "@thebnich yes. I had limited Internet access recently. I redid it in pull request #442.\n. ",
    "winkelsdorf": "May I ask why you deactived the long press gesture handling (browserToolbarDidLongPressBack)? There was no additional information given on Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1159373\nWas it related to accessing a private property (UIBarButtonItem's View) and getting rejected on the App Store?\nEdit: Nevermind, found that you were using a UIButton inside of UIBarButtonItem to circumvent that trick.\n. ",
    "toonetown": "@st3fan feedback given on bugzilla bug.\n. ",
    "dougt": "helpful script:\n     https://gist.github.com/dougt/5e1680a1281a2a08be6d\n. ",
    "varkor": "The https://github.com/mozilla/firefox-ios/blob/master/BUILDING.md document now contains information on how to build on an actual device.\n. It seems what you're suggesting is to actually build in a file manager into the browser? This would most likely be the only way to achieve what you're requesting. It's unlikely that this would be something worth the time it would take to develop \u2014 this seems like an edge feature.\nIf you have any further comments, the Bugzilla report is a good place to follow up!\n. There's now a bug tracking this: https://bugzilla.mozilla.org/show_bug.cgi?id=1291452, which will be a better way to keep track of gamepad support!\n. A bug to track this has been filed: https://bugzilla.mozilla.org/show_bug.cgi?id=1291456.\n. Closing this, as this pull request was marked as obsolete in the corresponding Bugzilla issue: https://bugzilla.mozilla.org/show_bug.cgi?id=1144712\n. This bug is now being tracked here: https://bugzilla.mozilla.org/show_bug.cgi?id=1291462\nFeel free to follow up with any more information.\n. This issue is currently being tracked here: https://bugzilla.mozilla.org/show_bug.cgi?id=1209052, so that's a better way to keep an eye on what's going on with this one!\n. I've refactored the code into a new function like you suggested. The diff is certainly a lot smaller this way (but possibly at the cost of a little unnecessary abstraction?). Is there anything else you would change?\n. Sorry, I made a mistake with the branches. I've recreated the pull request here: https://github.com/mozilla/firefox-ios/pull/1945\n. I think this is something people have been talking about doing for a while now, but no\u00f6ne's quite got round to it. I'm sure a pull request would be appreciated!\n. That is a nicer approach \u2014 I've modified the PR with your change!\n. All of our own internal code has no been migrated to Swift 3.0. Now, we just need to update our dependencies to Swift 3.0 versions.\nIt appears that a number of incompatibilities with Swift 3.0 in SQLite did not get caught by the migrator, or the compiler initially. It would be better if we could use an updated version once it is available.\n. The migration assistant does lots of the heavy lifting, but there are a couple of areas it stumbles with (some name collisions, certain places optionals aren't being handled in the best way, some random issues it didn't seem to pick up on). Also, the naming convention for methods has changed with Swift to favour explicit named first parameters over overly-descriptive method names, so there was quite a lot of refactoring too. There are a lot of methods, though, so there are probably a few that slipped through the net.\n. I've taken a look through the first few commits, and made some changes to hopefully make the method names more Swift 3.0-y. Could do with someone looking through at some change to make sure they all seem sensible, though.\n. Oh, that's very useful to know, thanks!\n. Yes, it seemed a bit messy to me too. Though private browsing mode is only relevant to a certain point up the hierarchy and possibly storing it in such an object would be okay, if only it was omnipresent. Under what conditions does BrowserViewController not have an associated TabTrayViewController?\n. I've done a bit of refactoring so there's less duplication of state concerning private mode \u2014 it's now held in TabManager instead, which seems a better fit. Does this seem like a better way to go?\nI've realised there's still one use case that's not yet protected by a passcode \u2014 opening the app from the background when it is already in private mode. This seems necessary before merging.\n. I've added the above changes now, too. A couple of the animations might need to be looked at, and I'm sure there's quite a bit of refactoring left to do, but I think it works better than before now.\n. As of this stage, it does not seem to be possible to use XCUITests for this, as both entry into our secure 4-digit passcode input and touch ID input are not supported. KIF also does not support touch ID. So the only possibility is to use KIF to just test out the support for passcode-protected private mode browsing.\n. Here are the tests I plan to implement, and which ones have already been completed:\n- [x] Switching to private mode from the tab tray\n- [x] Opening a private tab from the tab menu\n- [x] Opening a private tab from the tab tray menu\n- [x] Switching to private mode from top tabs\n- [x] Switching back and forth between private mode\n- [x] Opening a link in a private tab\nEach one tests both that not entering a passcode results in not transitioning to private mode, as well as that entering the correct passcode does transition to private mode.\nThese tests have been implemented, but some user interactions are bypassed by directly calling the methods, as they're not available to KIF (being initiated from outside the app), so they may not be 100% faithful:\n- [x] Opening a private tab from the Today view\n- [x] Opening a private tab from a 3D touch\nThe following tests would be ideal, but aren't really possible to achieve with KIF as far as I can tell:\n- [ ] Returning to private mode from the background\n. Made a mistake with fixing up merge conflicts, so the commit history is a little messy \u2014 sorry abou that! I'll be better-prepared next time.\nThe UI tests should all be passing now! Let me know if there's any others you can think of that it would be good to have before progressing!\n. Fixed those issues (I tried rebasing, but I was getting some merge conflicts which were looking quite nasty, so I fell back on merging one last time... next time...).\nEdit: I'll look into the top tab visual issue, but yeah \u2014 I don't think it's related to this one.\n. I've determined that the issues with the theme will be fixed when https://github.com/mozilla/firefox-ios/pull/2015 lands, which is currently just waiting on a different colour value from @tecgirl. Should hopefully be ready to go soon.\n. @splewako: Do you have some suggestions for how the strings could be better described (the ones you have figured out) \u2014\u00a0and which ones are still unclear? We should fix them up!\nSeparately: Note that we might be able to use deactivateAppForDuration to simulate some of the other conditions to test.\n. Oh, sorry! I added them in right at the start, and then forgot to update them as the interface changed. Both those problems should be fixed soon \u2014 but I'm going to open up a new PR when it's ready \u2014 I'll reference it here once it's up.\n. The new pull request has been opened up here: https://github.com/mozilla/firefox-ios/pull/2059\nAll the previous issues should have been addressed (both from this thread and from https://github.com/mozilla/firefox-ios/pull/2058).\n. Inverting can cause a lot of side-effects, as you say, but is this even necessary? The point of night mode is to provide less strain on the eyes, which can be achieved just by dimming the content:\ncss\nbody {\n    filter: brightness(50%) contrast(200%);\n}\nUpping the contrast can also help to ensure the content is still readable. Red light is supposed to help too, so we could always provide a slightly warmer overlay, if that would help.\nThis is a very non-destructive change, and would very rarely destructively interact with the web-content, unlike the methods other browser extensions seem to use. This also seems to produce more readable content (from the small amount of experimenting I've done), so it seems like a win-win scenario as compared to element transformations.\n. Sorry, somehow the code from two branches got mixed up, and this PR was missing half of the lines that were supposed to be there. I can't believe I didn't notice it! Sorry, it should all be fixed now!\n. The problem with opening up functionality such as search from Firefox via Siri is that SiriKit (at present) only supports a limited number of specific use cases (such as making payments, or ride-booking), none of which really overlap with Firefox use (photo search being the one possibly most relevant). It's hard to see what useful features could actually be integrated here without more capabilities added to SiriKit.\n. That's what I was tempted to do \u2014\u00a0but I thought it seemed like an usual thing to have done in the first place, that maybe there was a specific reason for it, and decided to try minimising the chance of introducing a regression. The rest of the functionality seems to work with the block, anyway.\n. Yeah, the behaviour definitely seems the same in the interrupted and non-interrupted scenarios with the if statement and without \u2014 I've taken it out.\n. I've fixed the prematurely-disappearing URL bar issue, as well as a couple of other ones I found. I couldn't reproduce the black gap issue though (the first issue you note) \u2014 I'm not sure if it's been fixed along with one of the others above. Would you be able to test it again to see if it still occurs for you?\n. I've committed a different way of tackling the problem \u2014 actually observing the animation and updating the URL bar view accordingly. It could do with some refactoring if this was the technique that was actually landed, but it demonstrates the technique for now.\nA dual animation approach did not seem feasible \u2014\u00a0this is the only other method I can see working effectively. Both are still a bit hacky, though, sadly.\n. Oh, really? That's pretty annoying... Maybe a good opportunity for a followup bug, to be cheeky...\nOh, I actually decided to implement it that way deliberately \u2014 I copied Safari's behaviour, which only brings them back once you try to scroll down once you are already at the bottom. If you think it would be better to bring them in immediately, then that method would be well-suited, yes! You think the behaviour should be changed, then?\n. I've committed a quick change to test out the different behaviour. Another alternative would be showing the toolbars upon reaching the bottom, rather than in an instant where the bottom is going to be reached, but generally scrolling happens so fast that there's probably not much difference between the two.\nI think I've occasionally noticed the white gap issue... it's a little annoying once you spot it.\n. What do you mean by not having the bars animate in? How would they appear in that case \u2014 just by suddenly appearing on-screen?\n. Yeah, you're right, if we do it this way, the patch becomes far simpler.\nThere are quite a few scroll-related issues that would be addressed by the other method (if it could be made to work), but that probably belongs in another patch anyway.\n. Nice catches. I've fixed those issues, and also one where the page title wasn't being updated when the page title was being changed.\n. Due to the issues with possibly not feeling like a native part of the user interface, and also because of an issue with overlapping floating headers, I've implemented a different approach here: https://github.com/mozilla/firefox-ios/pull/2063\n. For a data URI, the request.isPrivileged check resolves to true, which is why it's passing.\n. Oh, got it. That should be fixed now.\nGood point regarding the searching!\n(And I'm sure when I first tried using URLAllowedCharacterSet(), there was a problem with it escaping percent symbols, but it doesn't seem to be an issue upon retrying it, so I'm not sure what was going on there...)\nShould all be addressed now...\n. I've implemented the drag position tweak you suggested \u2014\u00a0you're right, I do think it works a little better this way.\n. The New Tab button colouring is a good point! It does look better in purple too.\nI've fixed the first two bugs you noticed, but I can't reproduce the third one. I'm not sure if this is just because it was fixed as a by-product of fixing the other two or not \u2014\u00a0does it still occur for you, and if so: does it happen specifically in certain circumstances?\nYeah, maybe the background tabs are too light now \u2014 I thought it was nice to differentiate the two modes, but it'd be better to see what works best from more users' perspectives. It'll be easy to remove that change, or adapt it, if need be.\n. Ah, got it! Fixed that one, too!\n. Note to self:\n- [ ] Tab indicator button should dim when there are popovers, in top tab mode.\n- [ ] Menu button popover triangle in private mode should be coloured correctly.\n. Oh, I misinterpreted what it was being used for! That makes sense \u2014 I'll take a different approach.\n. Is this a little closer to what you had in mind?\n. Oops. I've addressed that. Do you still think it'd be best just to use the original solution?\n. I've reverted the changes. If you think of a better way to restructure the resource MIME type handling, I'd be happy to try restructuring the code to make it feel a bit more cohesive.\n. That does seem like a more sensible location to put it!\n. This was fixed as part of a separate pull request: https://github.com/mozilla/firefox-ios/commit/ab314a630e04d5fb0e3b9d66c5334b0e026c8594\n. I think this was ready to go too! Merge away!\n. Right now, this is actually possible to do in some form with URLs of the form: firefox://?url=http://mozilla.org/, though as this isn't documented, it's probably not a safe behaviour to rely on as of now.\n. Is there a reason trailing_whitespace is disabled? As that's part of the style guide we describe under the \"Whitespace\" rules in readme, it seems like it would probably be a good idea to add it!\n. I can't reproduce the crash every time, which is making it more difficult to track down \u2014\u00a0but I have got behaviour which seems to cause a visual issue each time (which was also occurring the last time we had problems with reloadData(), and so seems to be directly related).\nOn iPad Air 2, open 7 tabs. Scroll all the way to the end (right), and start dragging the last tab. Drag it all the way to the left (sometimes, the crash occurs here, sometimes not). Without letting go, drag it back all the way to the right. The very last tab will be a duplicate of the one you're dragging.\nI've tried listening for calls to any of the data reloading methods, but none of them seem to be being called, so I don't have much of a lead so far.\n. Whoops, made a mistake with which branch I sent the PR from. The corrected PR can be found here: https://github.com/mozilla/firefox-ios/pull/2047\n. Here's an alternative approach, which makes it more explicit.\n. From what I could tell, Deferred was causing two issues:\n- Crashes in which, for example, a new tab was supposed to be opened, but had to check the privacy settings first, but the top tabs view would immediately try to update the collectionView, without the data source having been modified yet \u2014\u00a0because the privacy checks were passing through several main thread queues. (I managed to avoid it by wrapping the insertItemsAtIndexPath call in two dispatch_async calls, but that definitely wasn't the right way to go about it, and the completion blocks made everything simpler to reason about.)\n- Visual issues, because lots of things were being Deferred on the main thread, and so (it seemed) different parts of the UI were being updated on slightly different frames, which led to vertical-wipe effects, rather than all the theme changing at once.\nI think you're probably right about the issues \u2014\u00a0it might be best to roll this back and do some more extensive testing. The reason these bugs weren't caught by the UI tests was because I just thought to implement tests with changing the privacy mode, rather than actions that were indirectly affected by the changes (e.g. simply opening new tabs). These would probably have been caught by the top tabs UI tests, but they haven't been set up with CI yet, and I didn't think to run them myself. I'll do that once these bugs have been fixed, this time!\nI'll take a look at the other issues.\n. > Would you be able to reopen the PR and pull in these bug fixes on top of that branch?\nYep, I'll do that!\n. > - Launching the app after building the new branch on an iPad Air 2 simulator crashes it to crash when trying to add a tab from the top left add button while in normal mode.\nI'm having trouble reliably reproducing this one. I managed it twice, by resetting the simulator and trying to add a new tab, but now it's no longer working. It's a strange crash as well \u2014 there's an assertion in one of the private methods that's failing, but the datasource integrity seems to be intact...\nThe error is:\n*** Assertion failure in -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:]\n\n\nBackgrounding the app, reentering, and tapping 'Cancel' when the passcode prompt is displayed crashes the app.\n\n\nI can't reproduce this at all. Was this in the BVC or the tab tray?\nBelow are the issues I've encountered now since opening the new PR. Annoyingly, I can't reproduce all of them every time yet... Working on it.\n- [x] There is a delay in applying the theme with top tabs after creating a new private tab from the toolbar menu.\n- [x] There's an animation issue when transitioning to/from tab tray / BVC after hitting Cancel on the passcode view.\n- [x] There are various issues with falling back to passcode authentication.\n- [x] You can't enter a passcode after backgrounding the app whilst the passcode dialogue was being shown.\n- [x] Adding a new tab at the beginning, via the top tabs + button sometimes causes a crash.\n. I've fixed all the issues I could find. There was at some stage an issue with the styling of the home panel controller under very rare cases, but I can no longer reproduce it \u2014 so if it is still extent, it's very much an edge case (and can probably be fixed separately if it rears its head).\nCould you check to see if any of the issues are still happening for you? I think I fixed them all, but I had trouble reproducing a couple of them at one point.\nIt feels so close now...\n. This was a large amount of work, and it's disappointing that it couldn't be merged before the migration, but I don't have time to update something this large now, so unless someone else is willing to pick this up, the work will probably all be lost.. As far as I'm aware, this was still waiting on UI work, so unless there's been progress on that front, there's little point updating this to 3.0 for now.. All the issues you mentioned should now be addressed! Some minor changes to how horizontal centering was done too (it's so hard to get text to be pixel-perfect, but I think this is pretty close).\n. I noticed this too \u2014\u00a0I didn't change it earlier because I thought there might be some reason for it, but now the toolbar appears on both devices when rotated.\nI think I fixed the text centering issue, but it's moot now!\n. Yeah, that makes sense. I've added an isPrivileged argument. Now, if an invalid (e.g. reader mode) URL is attempted to be opened from the firefox:// URL scheme, it will simply open a blank tab. Is this acceptable, or do we want to warn the user that the URL they tried to load was faulty in some way?\n. Sorry for being out-of-the-loop completely with this \u2014 I was just wondering what the timeline for stabilising these features was? Are the features like tab re\u00f6rdering and the minified URL bar planned 7.x features? (I admit to having a slightly vested interest in a couple of them ;) ). Oh, good point \u2014\u00a0when I pulled the schemes outside of the function, I forgot the move part of the comment with them. I'll do that now.\n. It takes ~2.3 seconds on my machine. What sort of time is reasonable for a test like this (that's naturally expected to take longer than the average test)?\n. That would make sense to me. In that case, would we also want to change the actual settings menu item to something along the lines of Authentication instead of Passcode and Touch ID & Passcode?\n. This way we can pass state more easily around, in the closure itself, rather than either assigning temporary data to the delegate, or creating a new class to deal with each unique occasion we want to use authorisation. For classes that just use the passcode for a single action, it's not a problem, but I found it to be cumbersome to use delegates when there were multiple authorisation actions originating from the same object.\n. Mainly for ease of use in accessing that information from the child classes, which don't invalidate the data every time they access it. But I'll refactor it a bit.\n. Ah, that's a better method, thanks!\n. Okay \u2014 I've added a bug here: https://bugzilla.mozilla.org/show_bug.cgi?id=1283576\n. Just for stylistic reasons? Functionally, it shouldn't be any different, because the block can only be executed if self.settings is non-nil, right?\n. Oh, no \u2014 I changed that for a previous approach that didn't work so well, and must have forgotten it wasn't used any more!\n. Yeah, this was a gnarly issue. I spent quite a while trying to figure out the best way to get rid of the problem.\nThat is the graphical issue I mention, yes. The problem is that previously, the web content was linked by a constraint to the URL bar, and so when the URL bar animated away, the web content would maintain its relative offset to the URL bar, meaning the bar didn't lift off the web content, and the black bar did not appear.\nNow, the URL bar is independent of the content, with regards to its positioning. The problem is, that when the URL bar is lifted above the web content (for example, if you scroll up into the \"elastic\" region), when it animates away, because the web content does not maintain that relative offset, there is nothing behind the URL bar for a short period (while the scroll is bouncing back to an offset of 0), which causes the graphical issue.\nA timing based approach would be difficult to pull off. For the graphical issue to be resolved with that approach, we would want to move the URL bar only when the web content starts pushing it. This would not be immediate, and would be variable depending on the amount the user has scrolled up above the page \u2014 this means we would need to start the URL bar animation at a different time to the main animation. What's more, the animation is not linear, so in order for it to line up precisely, we would need to start the URL bar animation at a different time, with a different timing function that depended on how far the user had scrolled up (or, equivalent, the velocity of the bounce).\nThe reason the timing of the bar is not the same as the timing of the web content is that it is always scrolling a constant amount, whereas everything else is scrolling based on the offset \u2014 which is why a perfect animation would only start the animation of the URL bar at the instant that the contentOffset.y was exactly (negative) the height of the URL bar.\nMaybe I've overlooked something, but I spent quite a while trying to fix this in a neater way, and had trouble devising a solution that actually looked right... But did you mean something else when you suggested a velocity-based approach?\nN.B. I only notice the issue when a user scrolls above the webpage, and then releases the page after having scrolled down (but not enough to be fully back on the webpage).\n. The problem with having it as a computer property is that in only one of the three places that pattern appears, we can be certain it's the selected tab whose privacy we are checking \u2014 in others it's regarding a certain tab that's being interacted with, but might not actually be selected yet. We could make it a method, but it seems small enough that that might not worth it?\n. But doesn't snp_remakeConstraints remove all existing constraints? I don't want to remove the horizontal constraints, and I'd have to re-add them if I did it this way, wouldn't I?\n. It was because viewWillTransitionToSize would override the height constraint set by willTransitionToTraitCollection \u2014 but now that I look at it, the animation is so fast compared to the dismissal that you can't notice a difference anyway (maybe this isn't actually an issue at all \u2014\u00a0it's hard to tell).\n. She thinks it would be more consistent with existing patterns to stick with the current scheme: https://bugzilla.mozilla.org/show_bug.cgi?id=1256470#c7\n. operator_whitespace for the whitespace after brackets and control_statement for the unnecessary brackets should do the trick, when you come back to this!\n. Yeah, I was considering it and also thought the same thing.\n. Good point!\n. Edit: it turns out that the menu is re\u00f6pened too soon when it's in the completion handler due to the way split screen works. It could probably be dispatched within the completion handler, although that seems superfluous. Anywhere later in the method produces distorted menus too.\n. Yep, I thought this should probably be renamed too \u2014\u00a0that's a better one!\n. I'm not sure it was actually necessary \u2014 it was just transferred across when I was refactoring the constraint changes. It seems to work perfectly fine without those calls, so I'll remove them and see if we notice any issues.\n. Is this what you were thinking?\n. ",
    "fxios-buildasaur": "Result of integration 1\nIntegration took 10 minutes and 38 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 1\nIntegration took 2 minutes and 51 seconds.\n30 build errors: build-errors\n. Result of integration 2\nIntegration took 2 minutes and 51 seconds.\n30 build errors: build-errors\n. Result of integration 3\nIntegration took 5 minutes and 49 seconds.\n12 build errors: build-errors\n. Result of integration 4\nIntegration took 12 minutes and 28 seconds.\n8 build errors: build-errors\n. Result of integration 5\nIntegration took 10 minutes and 20 seconds.\n8 build errors: build-errors\n. Result of integration 6\nIntegration took 1 minute and 41 seconds.\n7 build errors: build-errors\n. Result of integration 7\nIntegration took 6 minutes and 2 seconds.\n9 build errors: build-errors\n. Result of integration 8\nIntegration took 5 minutes and 28 seconds.\n9 build errors: build-errors\n. Result of integration 9\nIntegration took 2 minutes and 0 second.\n2 build errors: build-errors\n. Result of integration 10\nIntegration took 1 minute and 5 seconds.\n1 build errors: build-errors\n. Result of integration 1\nIntegration took 2 minutes and 36 seconds.\n2 build errors: build-errors\n. Result of integration 3\nIntegration took 2 minutes and 29 seconds.\n2 build errors: build-errors\n. Result of integration 4\nIntegration took 6 minutes and 16 seconds.\n9 build errors: build-errors\n. Result of integration 5\nIntegration took 2 minutes and 9 seconds.\n2 build errors: build-errors\n. Result of integration 6\nIntegration took 1 minute and 55 seconds.\n2 build errors: build-errors\n. Result of integration 8\nIntegration took 58 seconds.\n1 build errors: build-errors\n. Result of integration 1\nIntegration took 10 minutes and 53 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 1\nIntegration took 11 minutes and 38 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 1\nIntegration took 11 minutes and 41 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 2\nIntegration took 10 minutes and 37 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 3\nIntegration took 10 minutes and 40 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 5\nIntegration took 10 minutes and 32 seconds.\nBuild failed 1 tests out of 124\n. Result of integration 1\nIntegration took 10 minutes and 1 second.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 3\nIntegration took 12 minutes and 57 seconds.\n5 build errors: build-errors\n. Result of integration 1\nIntegration took 11 minutes and 5 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 2\nIntegration took 13 minutes and 2 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 1\nIntegration took 10 minutes and 3 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 3\nIntegration took 10 minutes and 28 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 1\nIntegration took 10 minutes and 34 seconds.\nAll 124 tests passed, but please fix 13 warnings.\n. Result of integration 2\nIntegration took 13 minutes and 15 seconds.\nAll 125 tests passed, but please fix 14 warnings.\n. Result of integration 4\nIntegration took 11 minutes and 5 seconds.\nAll 125 tests passed, but please fix 14 warnings.\n. Result of integration 5\nIntegration took 13 minutes and 29 seconds.\nAll 125 tests passed, but please fix 14 warnings.\n. Result of integration 1\nIntegration took 13 minutes and 50 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 2\nIntegration took 11 minutes and 7 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 3\nIntegration took 11 minutes and 14 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 4\nIntegration took 14 minutes and 25 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 5\nIntegration took 9 minutes and 31 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 1\nIntegration took 18 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 12 minutes and 57 seconds.\nAll 124 tests passed, but please fix 14 warnings.\n. Result of integration 1\nIntegration took 16 minutes and 4 seconds.\n1 build errors: build-errors\n. Result of integration 1\nIntegration took 14 minutes and 20 seconds.\nAll 125 tests passed, but please fix 14 warnings.\n. Result of integration 1\nIntegration took 11 minutes and 13 seconds.\nBuild failed 1 tests out of 125\n. Result of integration 1\nIntegration took 14 minutes and 40 seconds.\nBuild failed 1 tests out of 126\n. Result of integration 2\nIntegration took 15 minutes and 22 seconds.\n1 build errors: build-errors\n. Result of integration 3\nIntegration took 14 minutes and 45 seconds.\nAll 126 tests passed, but please fix 13 warnings.\n. Result of integration 1\nIntegration took 15 minutes and 56 seconds.\nAll 126 tests passed, but please fix 13 warnings.\n. Result of integration 1\nIntegration took 2 minutes and 49 seconds.\n23 build errors: build-errors\n. Result of integration 2\nIntegration took 14 minutes and 3 seconds.\nAll 131 tests passed, but please fix 30 warnings.\n. Result of integration 1\nIntegration took 11 minutes and 36 seconds.\n4 build errors: build-errors\n. Result of integration 1\nIntegration took 13 minutes and 42 seconds.\n5 build errors: build-errors\n. Result of integration 1\nIntegration took 12 minutes and 3 seconds.\nAll 130 tests passed, but please fix 17 warnings.\n. Result of integration 2\nIntegration took 12 minutes and 34 seconds.\nAll 130 tests passed, but please fix 17 warnings.\n. Result of integration 1\nIntegration took 21 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 13 minutes and 14 seconds.\n16 build errors: build-errors\n. Result of integration 2\nIntegration took 12 minutes and 17 seconds.\n? build errors: internal-build-error\n. Result of integration 1\nIntegration took 3 minutes and 1 second.\n32 build errors: build-errors\n. Result of integration 2\nIntegration took 3 minutes and 19 seconds.\n32 build errors: build-errors\n. Result of integration 3\nIntegration took [NOT PROVIDED].\nBuild was manually canceled.\n. Result of integration 4\nIntegration took 3 minutes and 8 seconds.\n32 build errors: build-errors\n. Result of integration 5\nIntegration took 2 minutes and 58 seconds.\n32 build errors: build-errors\n. Result of integration 6\nIntegration took 11 minutes and 37 seconds.\n15 build errors: build-errors\n. Result of integration 3\nIntegration took [NOT PROVIDED].\nBuild was manually canceled.\n. Result of integration 7\nIntegration took 10 minutes and 40 seconds.\n8 build errors: build-errors\n. Result of integration 8\nIntegration took 11 minutes and 21 seconds.\n8 build errors: build-errors\n. Result of integration 10\nIntegration took 12 minutes and 42 seconds.\n8 build errors: build-errors\n. Result of integration 11\nIntegration took 13 minutes and 40 seconds.\nAll 130 tests passed, but please fix 30 warnings.\n. Result of integration 12\nIntegration took 12 minutes and 31 seconds.\nAll 130 tests passed, but please fix 30 warnings.\n. Result of integration 13\nIntegration took 5 minutes and 54 seconds.\n6 build errors: build-errors\n. Result of integration 14\nIntegration took 12 minutes and 13 seconds.\nBuild failed 1 tests out of 131\n. Result of integration 15\nIntegration took 12 minutes and 36 seconds.\nBuild failed 1 tests out of 131\n. Result of integration 16\nIntegration took 13 minutes and 34 seconds.\nBuild failed 1 tests out of 131\n. Result of integration 17\nIntegration took 11 minutes and 42 seconds.\nAll 131 tests passed, but please fix 30 warnings.\n. Result of integration 3\nIntegration took [NOT PROVIDED].\nBuild was manually canceled.\n. Result of integration 18\nIntegration took 2 minutes and 23 seconds.\n2 build errors: build-errors\n. Result of integration 19\nIntegration took 10 minutes and 40 seconds.\nAll 131 tests passed, but please fix 30 warnings.\n. Result of integration 1\nIntegration took 11 minutes and 37 seconds.\nAll 130 tests passed, but please fix 17 warnings.\n. Result of integration 1\nIntegration took 6 minutes and 2 seconds.\n2 build errors: build-errors\n. Result of integration 2\nIntegration took 6 minutes and 49 seconds.\n2 build errors: build-errors\n. Result of integration 1\nIntegration took 9 minutes and 29 seconds.\nAll 0 tests passed, but please fix 18 warnings.\n. Result of integration 1\nIntegration took 3 minutes and 27 seconds.\n2 build errors: build-errors\n. Result of integration 2\nIntegration took 10 minutes and 23 seconds.\nAll 136 tests passed, but please fix 28 warnings.\n. Result of integration 2\nIntegration took 10 minutes and 23 seconds.\nAll 136 tests passed, but please fix 28 warnings.\n. Result of integration 1\nIntegration took 10 minutes and 23 seconds.\n20 build errors: build-errors\n. Result of integration 1\nIntegration took 10 minutes and 52 seconds.\n16 build errors: build-errors\n. Result of integration 1\nIntegration took 4 minutes and 24 seconds.\n2 build errors: build-errors\n. Result of integration 1\nIntegration took 16 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 3 minutes and 35 seconds.\n2 build errors: build-errors\n. Result of integration 1\nIntegration took 1 minute and 4 seconds.\n? build errors: build-failed\n. Result of integration 1\nIntegration took 4 minutes and 11 seconds.\n1 build errors: build-errors\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 1 minute and 21 seconds.\n? build errors: build-failed\n. Result of integration 1\nIntegration took 1 minute and 22 seconds.\n? build errors: build-failed\n. Result of integration 1\nIntegration took 19 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 19 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 17 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 46 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 46 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 9 minutes and 18 seconds.\nAll 0 tests passed, but please fix 17 warnings.\n. Result of integration 1\nIntegration took 19 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 22 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 16 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 18 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 6 minutes and 0 second.\n2 build errors: build-errors\n. Result of integration 1\nIntegration took 17 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 17 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 17 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 20 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 16 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 21 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 9 minutes and 23 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 8 minutes and 17 seconds.\nAll 0 tests passed, but please fix 22 warnings.\n. Result of integration 1\nIntegration took 7 minutes and 13 seconds.\nAll 0 tests passed, but please fix 22 warnings.\n. Result of integration 1\nIntegration took 53 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 11 minutes and 42 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 8 minutes and 51 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 8 minutes and 12 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 7 minutes and 56 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 7 minutes and 58 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 18 seconds.\n? build errors: checkout-error\n. Result of integration 1\nIntegration took 7 minutes and 49 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. Result of integration 1\nIntegration took 10 minutes and 18 seconds.\nAll 0 tests passed, but please fix 21 warnings.\n. ",
    "ide": "Wild! I was not aware of that. If the deceleration rate seems related to the bug it could be worth later exploring other deceleration rates in between \"normal\" and \"fast\" to see if there's a sweet spot that makes scrolling feel better and doesn't have tiling bugs.\n. ",
    "fluffyemily": "we could, just as easily I guess, have 1 UITextField that we just move from\neditable to non-editable when the user taps on it. Would make future\nalignment issues cropping up irrelevant.\nOn 27 May 2015 at 16:49, wes johnston notifications@github.com wrote:\n\nHmm.. We originally were a bit... half-hazard when it came to consts like\nthis. Now we've been trying to pull them out into widget-specific\nUX-structs like this one:\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/URLBarView.swift#L10\nI think we should try to do that here and use the same (shared?) constants\nin both BrowserLocationView and URLBarView. i.e. I see some offset(8) calls\nin here:\nhttps://github.com/mozilla/firefox-ios/blob/master/Client/Frontend/Browser/BrowserLocationView.swift#L80\nthat I'm guessing are related to this problem? Overall, this transition\n(i.e. flipping between two completely different TextView/Labels is kinda\njanky anyway. Maybe we should file another bug to improve it more. I always\nwish there was just one textview for the whole thing...\nFor numbers used throughout the app, we've actually been putting things in\nhere:\nhttps://github.com/mozilla/firefox-ios/blob/master/Utils/AppConstants.swift\nI tried/thought about putting a consistent \"padding\" value in there at one\npoint (I think it is in there?) but I'm not sure its worth it or been\nsuccessful.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/506#issuecomment-105969627.\n. @wesj OK. I have finally sorted all the issues and updated the tests and ensured that no functionality is lost. Just a single BrowserLocationView that handles everything to do with browser location\n. Updated\n. Ah, must've missed that in the instructions. Sorry!\n\nOn 3 June 2015 at 00:48, Brian Nicholson notifications@github.com wrote:\n\nAfter merging the PR, the final step is to close the bug by marking it as RESOLVED\n-> FIXED; I can go ahead and do that now for bug 1163118\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1163118. Sorry for all of\nthe confusing processes!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/507#issuecomment-108133842.\n. Just a couple of small swiftifications but otherwise good stuff :)\n. oops, sorry. Pressed wrong button :worried: \n. This looks good, but I don't like the 57 changed files to change 1 line.\nCan you do:\n\n```git checkout master\ngit pull --rebase\ngit checkout jhugman/Bug1171459-HideAboutPages-HomeTiles\ngit rebase master\ngit push -f origin jhugman/Bug1171459-HideAboutPages-HomeTiles```\nAnd that should leave just your commit (hopefully)\n. @st3fan I've updated the code\n. rnewman: updated\n. This is a bit over complicated.\nWhen you cancel a edit in the location view, the textFieldDidEndEditing is called. This calls highlightDomain, which sets the text field text back to what it was before. However, if the URL is empty, it does not do anything, leaving the text the way it was.\nThere are 2 solutions:\n1. amend highlightDomain to set the text to nil if the URL is empty\nOR\n1. remove highlightDomain call from textFieldDidEndEditing, and then, in cancel(), after the check to see if the textField.text is empty, test whether or not we have a URL and call highlightDomain or set url to nil depending on the result.\nI suggest doing #2, because highlightDomain is called inside didSet for url, which means when we actually navigate to a new URL, highlightDomain is called twice, unneccessarily. This way, highlightDomain is only called once, when the URL is set, and on cancel the correct value is set in cancel()\nMake sense?\n. basically right. Just make that offset smaller and remove the offset when we're showing the readerModeButton as we're good to go.\n. @sleroux I've moved over to using viewWillTransitionToSize. \n. So, I've gone for the simplest solution first approach:\n1. add received commands to tab queue when received during sync in extension\n2. ensure that if extension used within the same app (i.e. within firefox & therefore applicationDidBecomeActive will not get called for a while) that the tab queue is executed when the extension is closed.\nIt may be worth, at some point in the future, especially if we want to do a lot of this sharing of info between extension and app, to look at using https://github.com/mutualmobile/MMWormhole or NSFileCoordinator's to share data.\n. @thebnich I've updated based on your suggestion\n. With this fix we only call storeChanges once on startup - for the tab that actually loads.\n. I think the issue with storeChanges() getting called too often overall and the fact that storeChanges() is pretty heavy in it's implementation (delete all tabs from the db, create them all again AND write tabs to disk) will all come under https://bugzilla.mozilla.org/show_bug.cgi?id=1187176 with this one being purely about slow startup performance\n. Re-raising on master after epic 2.0 mergefest\n. I can see how this happened - we used to save the result of alamofire.request in a variable that was unused. During the migration to 2.0 this got replaced by a _, which was then subsequently removed as it was thought that it was unnecessary. I guess it was necessary after all.\n. @rnewman: I've fixed up those small things and then added a post query for fetching bookmarks if required. I felt that reorganizing bookmarks into a whole new storage structure was best left for some deeper thinking and a more important issue....\n. when trying to run tests, I'm getting a build error on TestSQLiteBookmarks: testBookmarks() lns 25 & 38 \n. :+1:\n. I am mightily confused as to why it doesn't work for anyone else. Did you do a clean of the app before running? It works for me on all my devices:\niPhone 5S iOS9\niPod Touch iOS 8.4\niPhone 4S iOS 8.4\niPad 2 iOS 8.4\n. Yeah, I realised after I commented before that the URL changes that I made meant I was trying to create a file with a file:// URL which was not allowed. Have updated.\nAlso, have moved the control of display/hide of the OpenInView to BrowserViewController, inside a general webViewController toolbar as we discussed above.\n. Is this an issue worth raising a radar over? Clearly WKNavigation is not supposed to be nil otherwise Apple wouldn't have specified the WKNavigationDelegate method to force unwrap it, but under certain circumstances it is, and the documentation never states that it should be treated as an optional despite the fact it might be.\nI was only able to replicate this on my iOS 8.4 device, never on an iOS9 one so it might be a backward compatibility issue, but that's still a bug IMHO.\n. This still leaves the janky animation in iOS9 on tab removal for me.\nIt seems that iOS9 doesn't need to call to reloadCellsAtIndexPath at all as it does the reload automatically. We could simply add an iOS version check and only call reloadCellsAtIndexPath for <= iOS8.4, if that's not considered too hacky (which, considering the quality of the code solutions I have put forward already today, is highly likely)?\nif (floor(NSFoundationVersionNumber) <= NSFoundationVersionNumber_iOS_8_4)\n{\n    self.collectionView.reloadItemsAtIndexPaths(collectionView.indexPathsForVisibleItems())\n}\n. Hi @sachin004. I've just come across this patch as we start to look at adding QuickActions for Firefox for iOS. We're looking to do something slightly different to what you have done here (New Tab and New Private Tab but with dynamic options for the last 2 items). Did you want to look at bringing this patch into line with our planned design, or we can use your patch as a basis for our new work?\n. @sachin004 we actually just landed the static Quick Actions on master today. For dynamic Quick Actions, these are actions that will be added and removed according to the state of the app. They are described in the Apple 3D touch documenation here: https://developer.apple.com/library/prerelease/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html#//apple_ref/doc/uid/TP40016543-CH4-SW1\nWe are now starting to work on the dynamic actions. Maybe you'd like to implement one of them? How about this one? https://bugzilla.mozilla.org/show_bug.cgi?id=1227108? Links to the design can be found in the bug. \n. I would be happy to talk it through with you and what we are trying to do.\n. @sachin004 yup, you can close this request. If you want to talk more about what we are doing with dynamic actions, come talk to us on irc (irc.mozilla.com) in #mobile.\n. Seeing as we have a demo HTML page, maybe we should have a UITest for it as well?\n. I'm also getting a test failure: SyncTests -> DownloadTests -> testDownloadBatches -> lines 96, 114 & 116\n```\n  Assertions: XCTAssertEqual failed: (\"Optional(SyncTests.DownloadEndState.Complete)\") is not equal to (\"Optional(SyncTests.DownloadEndState.NoNewData)\") - \n  File: DownloadTests.swift:96\nAssertions: XCTAssertEqual failed: (\"Optional(SyncTests.DownloadEndState.Complete)\") is not equal to (\"Optional(SyncTests.DownloadEndState.NoNewData)\") - \n  File: DownloadTests.swift:114\nAssertions: XCTAssertEqual failed: (\"Optional(0)\") is not equal to (\"Optional(1)\") - \n  File: DownloadTests.swift:116\n```\n. So, I've made a few changes. The URL I am now passing in to the search term extractor is the original URL from the BackForwardListItem, if that URL is not an error page. This is the original URL that we submitted for the search. Therefore we can provide the search terms back to you even if you navigate to other URLs and then return to the search page, which I think is a nice feature. It also resolves the tricky wikipedia use case.\nThe only situation now where you won't get your search terms back is after a restore, on a wikipedia search. In this case, as the initial URL is lost, we will fail to extract your search terms from the resolved wikipedia URL as it is no longer really a search URL, but an actual wikipedia URL. \n. The overall implementation is good. Just need to be a bit more careful with force unwrapping things and localizing all the strings.\n. Fixing the try! for https://bugzilla.mozilla.org/show_bug.cgi?id=1223426 solved this without the withExtendedLifetime so I guess that was the problem all along\n. @rnewman Updated the setup script.\n. @sleroux for now, open up fastlane/Appfile and edit the apple_id to be your Apple ID. We're working on getting a shared AppleID for build purposes.\n. sleroux: Can you check what the Info.plist value is in the ViewLater target Build Settings?\n. @sleroux actually, can you email me the whole error trace?\n. OK, this seems to be an error caused when you run the build against a branch that has already been localized previously. Will take a look.\n. New version.\nPlease delete all previously created branches before executing this time.\nalso, please include extra command line arg: username:, so execute with\nfastlane aurora branch:fluffyemily/fastlane-integration build:<buildNumber> version:<versionNumber> username:<apple_id>\n. @sleroux When it fails, it usually outputs an error log. Could you send it to me please?\n. @sleroux Thanks for the logs. The reason this is failing is because of our carthage issues. If you could open the schemes and delete the Alamofire OSX, tvOS & watchOS schemes that should solve it. I thought I had submitted a patch to do that, but it doesn't seem to have propagated properly.\nIf we were using carthage correctly, it would only be installing the iOS library (which also causes other issues elsewhere). If you still get issues, you have to rename the product for alamofire OSX, tvOS and watchOS to something other than Alamofire. Sadly all the targets get built with the same name, so when we link it's pot luck whether we link to the iOS one or one of the others. Again, using carthage correctly would resolve these issues.\n. @st3fan @sleroux I've updated to use a forked version of Alamofire that doesn't have the OSX & watchOS schemas and targets and rebased against master. Please ensure you run ./checkout.sh on the fluffyemily/fastlane-integration branch before running again.\nI've also updated the branch: arg to base_branch and changed the name of the build branch to remove the invalid chars.\nFrom now on call like this:\nfastlane aurora base_branch:fluffyemily/fastlane-integration build:<buildNumber> version:<versionNumber> username:<apple_id>\n. @sleroux is the scripts/localise.sh directory present in your repo? It's here in the branch, so it's odd that it can't find it.\n. @sleroux if it is, that's new. It has always executed as if it was inside the fastlane dir not the root dir in the past.\nI've just created a while new clone and tested this, and it found the localise.sh script. Are you sure your fastlane-integration branch is properly up to date?\n. Ah, did you have an existing branch by any chance? If so, delete it first. It's possible that when it checks out that existing branch it will lose the fastlane changes.\n. I've made a couple of new changes.\nEach time you build, if you don't provide a branch: argument it will create a new branch, rather than using an existing branch for the same build/version combo. This will resolve the issues regarding new fastlane scripts failing when moving to an existing branch with an older version of fastlane\nAlso, if you don't provide a base_branch: argument, instead of defaulting to building a branch off master, it will build a branch off the current executing branch\nI have also added a localise: true argument. If this is present, the branch will be localised, otherwise it is not. This is so you can do a l10n or aurora build with localise:true to create a localised branch, then use the same localised branch with no localise arg to create a beta or release build (i.e. another build that is localised exactly the same way as a previous build).\nI have just discovered another fastlane action in their Advanced documentation: import_from_git. This allows you to specify a default fastlane implementation and then import that into your project during builds. I'm going to investigate whether this would enable us to have our fastlane implementation in another repository and therefore all branches would get the latest build tools regardless of when they were cut. Thoughts? \n. try\nfastlane aurora localise:true build:1 version:1.0.0 username:sleroux@mozilla.com\nwhile on the fluffyemily/fastlane-integration branch\n. also, check your project. Have you run ./checkout.sh and fetched the forked copy of Alamofire?\nYou should have a version of Alamofire that doesn't have any OSX or watchOS targets or schemes\n. @sleroux yay! Yeah, there is a command that causes the build to fail if the git repo isn't clean which I shall add as an extra precaution.\nGlad it finally worked for someone else!\n. @sleroux @st3fan I've updated this to move all the fastlane stuff to a new repo, found here: https://github.com/mozilla/firefox-ios-build-tools. \nIf you give me a +1 on this branch, I'll rebase the hell out of it (make it 1 commit) and merge it in and we can continue developing new build tools in the new repo.\nI'm guessing we'd want this on 1.x as well as master?\n. I am also seeing that. Looking at the device logs:\n```\norg.mozilla.ios.Fennec failed to scene-create after 18.62s (launch took 1.38s of total time limit 20.00s)\nElapsed total CPU time (seconds): 7.760 (user 7.760, system 0.000), 19% CPU \nElapsed application CPU time (seconds): 0.141, 0% CPU\nFiltered syslog:\nNone found\nThread 0 name:  Dispatch queue: com.apple.main-thread\nThread 0:\n0   libswiftCore.dylib              0x00000001016044fc 0x1014bc000 + 1344764\n1   Client                          0x00000001002a6ab8 BrowserViewController.browser(Browser, didCreateWebView : WKWebView) -> () (BrowserViewController.swift:1135)\n2   Client                          0x00000001002a77bc @objc BrowserViewController.browser(Browser, didCreateWebView : WKWebView) -> () (BrowserViewController.swift:0)\n3   Client                          0x000000010027491c partial apply + 64\n4   Client                          0x000000010027d184 thunk (Browser.swift:0)\n5   Client                          0x000000010027d1d0 thunk (Browser.swift:0)\n6   Client                          0x000000010027474c Browser.createWebview() -> () (Browser.swift:125)\n7   Client                          0x0000000100260e80 TabManager.configureTab(Browser, request : NSURLRequest?, flushToDisk : Bool, zombie : Bool) -> () (TabManager.swift:258)\n8   Client                          0x00000001002606f0 TabManager.(addTab in _932D52E6383C2B96DB066936B32B3140)(NSURLRequest?, configuration : WKWebViewConfiguration!, flushToDisk : Bool, zombie : Bool, isPrivate : Bool) -> Browser (TabManager.swift:235)\n9   Client                          0x000000010025f9c8 TabManager.addTab(NSURLRequest!, configuration : WKWebViewConfiguration!, isPrivate : Bool) -> Browser (TabManager.swift:182)\n10  Client                          0x000000010025fb0c TabManager.addTabAndSelect(NSURLRequest!, configuration : WKWebViewConfiguration!, isPrivate : Bool) -> Browser (TabManager.swift:187)\n11  Client                          0x000000010029f994 BrowserViewController.openURLInNewTab(NSURL?, isPrivate : Bool) -> () (BrowserViewController.swift:870)\n12  Client                          0x00000001001ce24c AppDelegate.handleShortCutItemType(ShortcutType, userData : [String : NSSecureCoding]?) -> () (AppDelegate.swift:353)\n13  Client                          0x00000001001d07a4 partial apply (AppDelegate.swift:0)\n14  Client                          0x000000010016d260 QuickActions.handleShortCutItem(UIApplicationShortcutItem, completionBlock : (type : ShortcutType, userData : [String : NSSecureCoding]?) -> ()) -> Bool (QuickActions.swift:42)\n15  Client                          0x00000001001cab8c AppDelegate.applicationDidBecomeActive(UIApplication) -> () (AppDelegate.swift:207)\n16  Client                          0x00000001001cae24 @objc AppDelegate.applicationDidBecomeActive(UIApplication) -> () (AppDelegate.swift:0)\n17  UIKit                           0x000000018a0c0a04 -[UIApplication _stopDeactivatingForReason:] + 1080\n18  UIKit                           0x000000018a2e017c -[UIApplication _runWithMainScene:transitionContext:completion:] + 2536\n19  UIKit                           0x000000018a2dcf50 -[UIApplication workspaceDidEndTransaction:] + 168\n20  FrontBoardServices              0x000000018ec0b7c4 -[FBSSerialQueue _performNext] + 184\n21  FrontBoardServices              0x000000018ec0bb44 -[FBSSerialQueue _performNextFromRunLoopSource] + 56\n22  CoreFoundation                  0x0000000184a5c544 CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION + 24\n23  CoreFoundation                  0x0000000184a5bfd8 __CFRunLoopDoSources0 + 540\n24  CoreFoundation                  0x0000000184a59cd8 __CFRunLoopRun + 724\n25  CoreFoundation                  0x0000000184988ca0 CFRunLoopRunSpecific + 384\n26  UIKit                           0x000000018a0a61c8 -[UIApplication _run] + 460\n27  UIKit                           0x000000018a0a0ffc UIApplicationMain + 204\n28  Client                          0x0000000100287b6c main (main.swift:22)\n29  libdyld.dylib                   0x000000019a7928b8 start + 4\n```\nWill look into it....\n. The problem is, we are creating the webView and attempting to insert it before the webViewContainer has been created (before viewDidLoad is called on BVC). Therefore it is hanging trying to insert a view into a force unwrapped UIView that does not yet exist. This sounds like it's going to be fun to fix :)\n. We're left with a problem with applying theme:\nSTR:\nAdd PB tab from QuickAction\nReturn to home screen\nAdd normal tab from QuickAction\nexpected: Normal theme has been completely applied\nactual: Normal theme has been applied except for TabsButton and BrowserLocationView background which are still PB themed.\nDo not yet have a fix for this....\n. Fixed a number of issues:\n1. Fixed crash when opening tab from cold\n         This needed to be done asynchronously otherwise BVC didn't actually exist when tab was created causing crash\n2. Fixed failure to apply UIAppearanceTheme\n         It seems that once you have applied UIAppearance values to a component, any changes made to those UIAppearance values will not be applied on those components until you remove and then re-add them to a view. Therefore I am forcibly applying UIAppearance themes when starting from a QuickAction.\n3. Fixed crash when adding new tab with different mode when tab tray open\n       Found a crasher whereby if you opened a tab in a different mode to the one currently in effect in the backgrounded app, while the app is in the TabTray then the collection view works out the incorrect number of cells and crashes when it doesn't match. Fixed by applying new theme just like a tap to the PB button when a collectionView already exists in the TabTray, rather than just updating the privateMode.\n4. Feedback from @tecgirl and now new tabs open with the URL bar as first responder.\n. I don't know why but my Xcode is having trouble seeing the SearchInputViewRefTests. It ran them once and declared that it couldn't find the reference images and now it won't find the test suite at all.\n. The NativeRefTests had a bunch of failures. I added the logs to a gist here:\nhttps://gist.github.com/fluffyemily/aed988b23b181f27682d\n. For editing are you going to create a new VC or just make this one editable? If making this one editable, how about making the UILabels for username and password non-editable UITextField's. Then for password you can set secureTextEntry = true to get the text obscuring for free (and using a custom font to get the right obscuring text). Then for edit all you have to do is make those text fields editable and away you go....\n. So, what this branch should have done (and does on my local version) is get rid of ClientUITests entirely and replace them with L10nSnapshotTests and MarketingSnapshotTests under a new group called Snapshot. Don't know why you are still seeing ClientUITests as that should not be present any more and the branch on firefox-ios-build-tools should reference MarketingSnapshotTests when you run fastlane marketing and L10nSnapshotTests when you run fastlane snapshotL10n\n. Can you check your version of fastlane/Snapfile and see what the scheme property is set to?\n. yeah, ignore the marketing snapshot tests for now. They are always\nbreaking. I'll fix those. I'll also fix the missing Client executable on\nthe marketing snapshot tests. This PR is far more about getting us to a\npoint where we can write l10n tests. I'll raise a new bug re: the failing\nmarketing tests.\nOn 25 January 2016 at 14:30, Stephan Leroux notifications@github.com\nwrote:\n\nNot sure if its just my copy but I tried doing the following after this\nwas merged in:\n1. Modifed fastlane/Fastlane to point to\n   fluffyemily/Bug-1205015-automated-l10n-screenshots\n2. Commited changes\n3. git clean -fx to clean out any previous Carthage/ stuff (similar to\n   re-cloning)\n4. `fastlane marketing'\nI get get the following error:\nThe scheme 'MarketingUITests' has nothing configured to build for Running\nand has no executable specified to Run. Edit the scheme to configure the\nRun action.\nI took a look at the schemes for the Marketing/L10N snapshots and they\ndon't seem to have an executable configured\nhttps://www.dropbox.com/s/q1e2esds6150kcy/Screenshot%202016-01-25%2009.16.53.png?dl=0&preview=Screenshot+2016-01-25+09.16.53.png/\n.\nAfter hooking up Client as the executable I was able to run the Marketing\nsnapshots but the snapshot tests failed for the default 'de', 'en-US',\n'it-IT' locales:\nTest Suite MarketingUITests.xctest started\nMarketingSnapshotTests\n\u2717 testTakeMarketingScreenshots, UI Testing Failure - No matches found for Button\nMarketingUITests.MarketingSnapshotTests\ntestTakeMarketingScreenshots, UI Testing Failure - No matches found for Button\n/Users/sleroux/development/firefox-ios/MarketingUITests/MarketingUITests.swift:61\n// go to synced tabs home screen\n    app.buttons.elementBoundByIndex(4).tap()\n    snapshot(\"03SyncedTabs\")\nExecuted 1 test, with 1 failure (0 unexpected) in 8.477 (8.480) seconds\nI didn't run the localize string so I could imagine the it-IT and de ones\nfailing but not sure why the en-US one would be.\nFor the L10N run through, I was able to run it right away since the\nexecutable was already configured but it only ran the example test so there\nwere no snapshots actually taken. Is this expected?\nL10nSnapshotTests\n[09:26:32]: \u25b8 \u2713 testExample (3.480 seconds)\n[09:26:32]: \u25b8      Executed 1 test, with 0 failures (0 unexpected) in 3.480 (3.483) seconds\n[09:26:32]: \u25b8\n[09:26:32]: Collecting screenshots...\n[09:26:33]: Found 0 screenshots...\nThe snapshots.html file did open afterwards though.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1391#issuecomment-174523434.\n. Can you please also update the build tools to reference the new schemes?\n. when running the l10n fastlane build against FirefoxBetaEnterprise I got the following failed output:\n\n```\nTouching ReadingList.framework.dSYM\n\u25b8 Building Client/SendTo [FirefoxBetaEnterprise]\n\u25b8 Check Dependencies\n\u274c  Code Sign error: No matching provisioning profiles found: None of the valid provisioning profiles allowed the specified entitlements: com.apple.security.application-groups, keychain-access-groups.\n\u25b8 Building Client/ViewLater [FirefoxBetaEnterprise]\n\u25b8 Check Dependencies\n\u274c  Code Sign error: No matching provisioning profiles found: None of the valid provisioning profiles allowed the specified entitlements: com.apple.security.application-groups, keychain-access-groups.\n\u25b8 Building Client/ShareTo [FirefoxBetaEnterprise]\n\u25b8 Check Dependencies\n\u274c  Code Sign error: No matching provisioning profiles found: None of the valid provisioning profiles allowed the specified entitlements: com.apple.security.application-groups, keychain-access-groups.\n```\nTo get this I linked your branch against the firefox-ios-build-tools branch fluffyemily/Bug-1247633-clean-up-after-build, started with a clean git repo and ran fastlane l10n localise:true username:<username>\nThis command runs fine against the fluffyemily/Bug-1247633-clean-up-after-build branch from master building FennecAurora\n. yup, it does\n. This is good but it only works with US English and no other locales (testing it in UK English first time didn't make You Tube appear, I had to change region). We need to make a decision as to which locales we would want YouTube to appear for and migrate these changes to all necessary.\nIt raises an issue with our search term detector as when You Tube redirects from desktop to mobile, it also opens a new page (so desktop -> mobile -> new page with results), which means our method of reverse engineering the search URL to get the terms doesn't work as the initial URL is further back than the current WKBackForwardItem. A bug should be raised for that when this lands.\n. The first time I run this I get an EXC_BAD_INSTRUCTION at line 405 in Browser.swift\n404>    func dequeueJavascriptAlertPrompt() -> JSAlertInfo? {\n405>        return alertQueue.removeFirst()\n406>    }\nand the message fatal error: can't remove first element from an empty collection\ncalled from line 534 in BVC\nif var queuedAlertInfo = tabManager.selectedTab?.dequeueJavascriptAlertPrompt()\n. Only thing I would say is, if we are doing an account sync and the current Login view is empty (i.e. first time we run the app and connect to sync) then this VC just tells me that I have no logins, even though it's possible that I do have logins but they just haven't synced over yet. Is there any way that in that circumstance we can continue showing the loading view until the sync is complete when we either show the synced logins or the no logins view? For a while during testing I thought that password sync was broken because it took so long for my passwords to appear on first start.\n. Open and fill works for both private and normal tabs. Great we have a test now for private tabs. Can we have one for normal tabs too please?\n. I kinda threw together a QuickActionsy version of this (minus all the privacy mode switching etc) to show how it would be done using launchOptions.\nhttps://github.com/mozilla/firefox-ios/pull/1499\n. StorageTests->TestSwiftData fails to build in writeDuringRead. \nValue of type 'SQLiteDBConnection' has no member 'executeQueryUnsafe'\n. I'm getting some test failures/crashes on this branch that I wasn't getting on master:\nFailure1:\nStorageTests->TestSQLLiteHistory->testHistoryLocalAndRemoteVisits\nSites contains \nXCTAssertEqual(siteL.guid!, sites[0]!.guid!) <<-- sites[0] is nil\n                    XCTAssertEqual(siteB.guid!, sites[1]!.guid!) <<-- sites[1] is nil\n                    XCTAssertEqual(siteR.guid!, sites[2]!.guid!) <<-- sites[2] is nil\nFailure 2:\nStorageTests->TestSQLLiteHistory->testTopSitesCache->checkTopSitesReturnsResults\nfunc checkTopSitesReturnsResults() -> Success {\n            return history.getTopSitesWithLimit(20) >>== { topSites in\n                XCTAssertEqual(topSites.count, 20) <<-- topSites.count == 0\n                XCTAssertEqual(topSites[0]!.guid, \"abc\\(5)def\") <<-- topSites[0] is nil\n                return succeed()\n            }\n        }\n. These test failures may just be me. I seem now to be unable to run anything in a simulator without getting that GCDWebserver bug.\nNope. Not just me. Can replicate\n. Oh, interesting. They passed for me on master. But, if that's the case then this PR has not affected test performance, so :+1:\nRetested on master and yes, also failing for me.\n. @st3fan No, it was designed to address a linking issue with client-bridging-header.h importing files from Carthage/Checkouts that may not exist. I just thought it might address other linking issues too.\n. @sleroux probably. would make sense. I'll update both the checkout and update scripts\n. @sleroux @st3fan just added updates to the update and checkout scripts to install 0.11 if not present (or carthage not installed)\n. Did you try doing a force clean before building? This error occurs when you are linking to and old version of Alamofire.\n. That's irritating. I was trying to account for the situation when, after log out, it only provides a password field and not the email field. Will take another look as obviously that prevented the first case (both email and password required) from working.\n. No, that works for me. Hmm.\n. As this requires carthage 0.15 now can we also update carthage.sh to check carthage version and force update to 0.15?\n. I did a bit of research and a lot of what I read seemed to suggest the only guaranteed way of scaling down an image nicely was to explictly resize it using CoreGraphics. I implemented a version that did this, but on comparing the results I couldn't really detect a difference in the quality of the outputs of the two solutions.  As the one you put forward here involved far less code and fewer nasty hacks trying to find out the desired image size once scaled then :+1: from me.\nYour solution:\n\nMy solution:\n\n. If we are going to have a convention for accessibility identifiers we need to document it somewhere as the accessibility identifiers I previously added for these tests do not match the ones you added here and we should attempt consistency.\n. I guess it can be closed if we no longer have an issue with SnapshotHelper being tied to the build tools rather than the current fastlane instance?\n. yeah, we will always return the title of the webView if present, so if a new title is loaded, this becomes our new title when we save our tabs, both for restoration and syncing purposes.\n. I hadn't thought about using a collection view for the page controller. That makes total sense. Thanks :)\n. @sleroux I've updated the paging code to use a UICollectionView and cleaned up the layout/init code for MenuView and MenuItemView. Wanna take another look?\n. @sleroux each cell of the collection view is a menu page. Each menu page contains a selection of menu items. We scroll between the pages. \nTo take a look at the case I am trying to solve with this design, change \nlet mvc = MenuViewController(withMenuConfig: MenuConfiguration.menuConfigurationForLocation(.TabTray), presentationStyle: .Modal)\nto\nlet mvc = MenuViewController(withMenuConfig: MenuConfiguration.menuConfigurationForLocation(.Browser), presentationStyle: .Modal)\nto see a case where we more than one page of menu items to display.\nWhen I tried to just add the menu items as a collection view, that pages horizontally, I ended up with 1 very long row of cell, with no wrapping within cells, or multiple rows that filled the top row first, and then the bottom, rather than the first page then the second. \nI then looked at having a collection view inside a collection view, with the internal collection view laying out the menu cells and the outer one dealing with the paging, but that became far too complicated very quicky.\nI then explored creating a custom layout that did the correct wrapping, but again the solution I left with here felt much simpler to understand overall.\nIf there is a simple way of getting a multi row, horizontally scrolling collection view, that lays out in the desired manner, that I missed, please let me know.\n. I don't know why but I'm getting this error when deploying to device using the Fennec scheme:\n2016-03-17 14:08:51.095 Client[1092:432919] *** Terminating app due to uncaught exception 'NSInvalidUnarchiveOperationException', reason: '*** -[NSKeyedUnarchiver decodeObjectForKey:]: cannot decode object of class (Client.AuthenticationKeychainInfo) for key (root); the class may be defined in source code or a library that is not linked'\n*** First throw call stack:\n(0x180b71900 0x1801dff80 0x1814d8f4c 0x1814d9104 0x1814a71c8 0x1814a6f90 0x1814a6124 0x101d133c4 0x1012bba58 0x10021a3a8 0x1002172d4 0x100214e1c 0x100214f6c 0x1858d9654 0x185b08130 0x185b0c4b8 0x185b095c0 0x182127790 0x182127b10 0x180b28efc 0x180b28990 0x180b26690 0x180a55680 0x1858d2580 0x1858ccd90 0x1002ee93c 0x1805f68b8)\nlibc++abi.dylib: terminating with uncaught exception of type NSException\n. @sleroux: yeah. Works fine on my simulator, only fails on device. Wondering if this is an upgrade issue on master that we need to consider. Deleting and reinstalling & trying again.\n. @sleroux on a fresh install it works just fine. Tabs can be deleted from preview with no crashes.\n. I agree that the usage of UIToolbar makes total sense. I was never sure why we went with recreating toolbars from scratch in BrowserToolbar, when UIToolbar gives us everything we need.\nAs far as the missing Private Mask when running in < iOS9 here, can we flip the add tab and private mask buttons? That way the bottom right is always filled and I think that will look better when the mask is missing than having the bottom right empty. Also, add new tab feels to me like the more frequent action and so bottom right makes sense as a location. Maybe @tecgirl has some research that shows otherwise though.\nIf we can move towards making a more generic, modular, injectable approach to describing the items that toolbars display, I feel having specific toolbar objects for each of the use cases (tabs tray, home panels, browser) is fine. \nThis looks good.\n. On iPad, according to https://mozilla.invisionapp.com/share/7Z647TWG4#/screens/136660653, the menu should be presented in modal always, rather than as a popover.\nSome changes may need to be made to the MenuView constraints in MenuViewController for this to ensure that the presented menu isn't too wide for the screen.\n. @sleroux as far as replacing the BrowserToolbar with something based on UIToolbar, I totally agree it's the way to go. The tricky thing will be doing it in such a way that, when in landscape/ipad we can still create a toolbar that can contain a URLBarView. I feel we can - it would have to be a UIBarButtonItem but I've stuck UITextField's in UIToolbars that way before and it's always worked out OK.\nStage 1, get all this working with the existing toolbars. Stage 2, rewrite toolbars to make them saner!\n. @jhugman am sorting the transition. And yes, pressing the menu button should dismiss the menu. That used to work. Will investigate why it is no longer working\n. @jhugman &@sleroux Updates made as per comments/bugs found.\nre: the menu shade. I'm going to totally revise the whole presentation animation thing at some point, so I'm not going to play around with that too much now. I'll almost certainly require some @sleroux animation guidance there.\n. closed in favour of https://github.com/mozilla/firefox-ios/pull/1675\n. naming things was never my strong point. Happy to rename anything to\nsomething more sensible.\nOn 7 April 2016 at 15:15, Stephan Leroux notifications@github.com wrote:\n\nThis is looking really good overall! I'm excited to see the 'state' lifted\nout of our classes and into structs. I think this will make it easier to\nreason about our app.\nQuestion: Currently I have set up the BrowserViewController to be the app\nstate delegate for the Tab and Home Panels. Should instead, Tab and home\npanels maintain a list of delegates that it then runs through and notifies,\nand the Menu is just one of those? I don't really know if I like this idea.\nIf we want to go that way, we are better off sending out an AppStateChanged\nnotification and allowing any components to register as observers\nI think for future-proofing I can see using a NSNotification to be the\nbetter option. This way we don't need to worry about linking disparate\ncomponents of the app together with a delegate. I also tend to avoid using\ndelegates for 1->N relationships since it can get unruly. As long as we're\ncareful about when and how we register/unregister the observers I think\nthis will give us the best flexibility.\nOne minor nit is just the naming of the concrete implementation of the\nMenuItem to FirefoxMenuItem. I really like the idea of lifting the protocol\nout to allow for mocking, etc but I think FirefoxMenuItem is also too\ngeneric of a name. Maybe something more specific such as PopoverMenuItem,\nChromeMenuItem? Not sure what makes sense there.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1688#issuecomment-206926170\n. The TabActions are called from elsewhere in the code - from\nTabTrayController. I don't want these to be purely menu specific. I want to\nbe able to call these whether or not the user is calling them from the\nmenu. Maybe one day we'll move the open tab stuff to the toolbar buttons,\nor invoke them from another, non BVC related context. And to have it behave\nin the same way and use the same code every time (currently we are rather\nmuddled in the different ways we open and select, or open and focus, or\nopen and switch privacy mode).\n\nBookmarking is another thing that we litter around the place using a bunch\nof different bits of code to do the same thing. That translates a lot\nbetter to this action paradigm than the open tabs do though, as it only\nrequires the current app state and the profile.\nDefinitely having a talk about this would be ace though.\nOn 7 April 2016 at 15:40, Stephan Leroux notifications@github.com wrote:\n\nI don't know if I'm sold on encapsulating logic inside Action, TabAction,\netc. It seems that the logic inside the action requires the dependencies to\nbe passed through to it. If we cut out the action all together and just\nhave a function inside BVC that performs the logic it would save us from\nhaving to pass these things around. I know the BVC doesn't need anymore\ncode but if the code being executed requires those dependencies and is not\nused outside the context of the BVC I don't think Action buys us much\nexcept for moving the code elsewhere. If we really wanted to move the logic\nout of BVC we can group up the 'actions' into a single MenuController\nobject and instantiate that inside the BVC to field the calls.\nI'd also like to see if we can leverage more of the Cocoa API for this\nsuch as using selectors. I think with the combination of addTarget and a\nselector we can get the same flexibility but with less, streamlined code.\nI'm actually thinking a lot about this for the revised URL toolbar I've\nbeen working on so I'm down for talking more at length about this.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1690#issuecomment-206935623\n. This is a good start. I'd like us to move away from explicitly mentioned button types eventually though, so it becomes easier to start making decisions on which buttons go where based on future requirements (i.e. replacing the share button with the home page button, adding the menu button etc).\n\nI'm not much of a fan of the name URLBarView_V2, but I can't really complain about other people's naming attempts when mine are so poor.\nI like the containers describing the buttons that should appear in each section of the toolbar, that feels like the right direction and having the location container re positioning, expanding and contracting according to the size of the other containers is exactly right. \nShould we place limits on some of those though? Is there a minimum acceptable location container width? Are there limits to the number of buttons we should display in each of the containers? For example, does it make sense to have 10 buttons on the left of the URL Bar, or 5 in the curve section (if we're going to make this more generic)? Should we have a hard limit that no more than 6 buttons appear in total in the bar? I know our designs will not call for it, but wondering how safety conscious the code needs to be....\n. Added follow up bugs to deal with some of the issues here. Doing them as follow ups so that we can get rid of the evil branch chain I've got going on here.\n- https://bugzilla.mozilla.org/show_bug.cgi?id=1264640\n- https://bugzilla.mozilla.org/show_bug.cgi?id=1264640\n. @jhugman just pushed the last change - the removal of a specific reference to FirefoxMenuConfiguration from MenuViewController.\n. I've clearly misunderstood what unowned does then. Will go back and read more about it...\n. @thebnich \n1. When I returned to resolve the unowned issue, I found that although the crash was still presenting, it was presenting in an entirely different way. That suggested that what I thought was the original cause was not the case. As this crash had a far more specific line number & cause (force unwrapping) it became easier to resolve.\n2. This database non-connection thing is an ongoing problem that Richard has tried to track down several times. It was due to this problem that he recently made some changes to SwiftData.swift to return a FailedSQLiteDBConnection whenever a SQLiteConnection fails to open rather than just crashing inside SwiftData as it used to do. I believe there have been several attempts to track this issue down (the closed DB connection one) with no success so far.\n. If you look carefully you will see that I have removed [unowned self] entirely from this fix. To wrap up any confusion I will change the title of this PR.\n. I rebased the whole thing to get rid of the commits that we don't want (first and last). It's just the fix to SQLiteBookmarksModel.swift now\n. Re: the naming, I've had @sleroux and @bnicholson both tell me not to\ninclude the product name in any of the object names, so Fx or Firefox are\nboth out. One day I'll come up with a naming convention where everyone is\nhappy!\nOn 18 April 2016 at 16:48, jhugman notifications@github.com wrote:\n\nThis looks pretty straightforward to me.\nYou've moved a bunch of files in to Menu and App specific directories, and\nsplit off MenuConfiguration into AppMenuConfiguration and\nMenuConfiguration. There are a couple of other instances of this pattern.\nThe only nit is a naming one: I can see that there is an AppState, and a\nAppMenuConfiguration. It feels like we're in danger of overloading the App\nprefix.\nSuggest FxAppState (Fx being the prefix) / FxAppMenuConfiguration (FxApp\nprefix).\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1722#issuecomment-211440387\n. @sleroux yeah, I was being an idiot. It's not like I hadn't already done that with RoundedToolbar.\nTake 2 is now available\n. I also found a bug. When focusing into the Current Home Page URL field, tapping to clear button does not clear the current URL.\n\nDid we decide against autocomplete, or is that coming later?\n. @sleroux so I realised when trying to get some test examples for @tecgirl that this didn't actually capture the failure case for syncing at all (when an error happen, we just stop syncing and don't display failed). I've now updated this, and ensured that we always set the correct state.\n. @sleroux I've also added the sync status message to the status bar.\n. I'd say, merge yours because the change in functionality means that I can't guarantee that the syncing... message will always be displayed and I will have to do something a little different in that case if the sync result is /Bad or .Stale \n. @sleroux forgot to ping you that I'd updated this as per your comments\n. darn it! Thanks :)\n. Overall, I like it. I do think having an AppState containing an enum that contains a struct is an abstraction too far and we can probably dispense with the enum. We would therefore have:\n```\nstruct AppState {\n    var ui: UIState\n}\nprotocol UIState {\n    var isPrivate: Bool { get }\n}\nstruct TabState: UIState {\n    internal var private(set) isPrivate: Bool\n    ....\n}\nAppState(ui: TabState())\n```\nWhat do you think?\n. @sleroux yeah, that seems to be working well. If you merge this then I'll rebase my branch and update it to work with this code.\n. Branch superceded by https://github.com/mozilla/firefox-ios/pull/1796\n. @flodolo I've updated according to your comments\n. I'm gonna add a feature flag for this and land it. Flag is there in case we decide it's not actually performant or stable enough and we can just disable it easily.\n. Hey @rawisa could you update this patch to no longer remove the files from ThirdParty SQLite.swift package? I'm guessing checking that part in was a mistake.\n. @sleroux I logged into my dropbox account and started clicking on random files. Also, try opening zip files from bugzilla bugs, that also works.\n. @sleroux @jhugman I've updated the code to present an alert asking for the users consent before presenting the share sheet. Also addressed some nits by removing the unused init(NSURL) and openInHelperForURL functions.\n. Thing is @jhugman is that not all the OpenInHelpers work the same. In the case of pdfs we need to provide a view that will open when requested and so that helper needs to be kept around until such time as it is called. The more recent open in's fit better with the style that you've stated above, but I don't think it would work in the case of the pdf open in helper.\nThe whole factory thing could definitely be improved though, and the init doesn't need to be in the protocol. It was there as I was hoping to be able to provide a default implementation, but that doesn't seem to work out so well. I'll see what I can do to address your points while ensuring that we keep the Open Pdf In functionality the same.\n. @jhugman best I could do for now.\n. A simpler solution may be to simply nil the text of notificationView when there is no message to display. This means that we still dismiss any messages that are currently presenting, whereas we might not if we remove the dismissal in the success case?\nguard let syncMessage = syncMessageForNotification(notification.object) else {\n            notificationView.titleLabel.text = nil\n            notificationView.titleLabel.attributedText = nil\n            return\n        }\n. conveniently, your patch for https://github.com/mozilla/firefox-ios/pull/1907 should resolve that issue\n. We should make sure that #1907 lands first, probably\n. awesome. I'll rebase and you can retest if you want. Otherwise, just r+ me ;)\n. A better solution for the home panel URL would be, I think.\nIn HomePanelViewController:\nenum HomePanelType: Int {\n    case TopSites = 0\n    case Bookmarks = 1\n    case History = 2\n    case ReadingList = 3\n    func localhostURL() -> NSURL {\n        return NSURL(string:\"#panel=\\(self.rawValue)\", relativeToURL: UIConstants.AboutHomePage)\n    }\n}\nRemove static func urlForHomePanelOfType(type: HomePanelType) -> NSURL? from HomePanelViewController\nAnd then update NewTabAccessors.url and BrowserViewController.openHomePanel to use the new localhostURL method.\n. Deleted last comment as it seems I did not have the latest version of the code \ud83d\ude0a \nAt least I know the test works....\n. This solution works well, however a simpler way of doing this could be to add a completion block to the dismiss call nullifying the variable:\ndisplayedPopoverController?.dismissViewControllerAnimated(true) {\n    self.displayedPopoverController = nil\n}\n. That is true. We should be in a loading state only if there is no other state at all - i.e. the app is still loading.\nIf we can check that the bug where this code was introduced (1281403) is still fixed, then this is all good.\n. There is a class called TestAppDelegate that currently gets used when we are running tests. I can't help thinking that moving the resetApplication function and the code that calls it to this app delegate, keeping out of production code, would be safer and cleaner.\n. @farhanpatel yeah, I like @bkmunar's fetching of bookmark status from SQL for highlights, but this still doesn't cover the case of bookmarked Default Suggested Sites which are hardcoded by region and don't check for bookmark status anywhere. I was trying to think of a way of doing that as we created the Default Suggested Sites, but couldn't reconcile the async nature of the bookmark status fetch with the fact that we might be accessing the property before the check has completed.. So, it appears that the changes for adding is_bookmarked to the Highlights fetching SQL is still present, it was just the checks for bookmark status in ActivityPanel that got lost. @sleroux I confirmed that @thebnich's patch was accepted & present into the main repo before doing this move. The changes to JSON.swift make things so much cleaner. But it does mean I will have to revisit my Account migration to reflect these changes. Worth it though, I think.. It is possible it got moved around during the move to the new Range rather\nthan NSRangeMake\nOn 3 February 2017 at 14:26, Stephan Leroux notifications@github.com\nwrote:\n\n@sleroux approved this pull request.\nShould be fine. I'm just confused as to how/why it was like this in the\nfirst place.\n\nIn Account/FxAClient10.swift\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2373#pullrequestreview-20021529\n:\n\n@@ -181,7 +181,7 @@ open class FxAClient10 {\n         }\n\n     let ciphertext = data.subdata(in: Range(uncheckedBounds: (lower: 0 * KeyLength, upper:  2 * KeyLength)))\n\n\nlet MAC = data.subdata(in: Range(uncheckedBounds: (lower: 2 * KeyLength, upper: 1 * KeyLength)))\nlet MAC = data.subdata(in: Range(uncheckedBounds: (lower: 1 * KeyLength, upper: 2 * KeyLength)))\n\nI wonder how this worked at all? Seems really weird to have the lower be\nhigher than the upper in the first place...\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2373#pullrequestreview-20021529,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMB1uMRg0ttgHxFdYvFGsOd_DmDjFLS_ks5rYzkcgaJpZM4L2Tlf\n.\n. @sveinhal That is a good point. \n\nMany of these extensions were written early enough in Swift's history that there were not equivalent functions available as standard on String. \nWe are looking to do a code and dependency audit after the successful migration to Swift 3.0 and we will include our extensions in that audit to ensure that we are using the most appropriate code on the project.. That's a really good thing idea. I'll do that.\nOn Thu, 9 Feb 2017 at 14:18, Stephan Leroux notifications@github.com\nwrote:\n\n@sleroux approved this pull request.\nWow that sucks that it doesn't work only in the case of migrating from\nSwift 2 -> 3 for the first time. Do we want to create an extension on\nNSCoder to do this for us for Int/Bool? I can see us using this in other\nplaces where we decode/encode like the passcode stuff.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2403#pullrequestreview-21017297,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMB1uHiLRzNsf9Cdk8a_sQpmnpFOCpvuks5rayBAgaJpZM4L8LHx\n.\n. Just a thought - might the icons included here be a prime candidate for getting on-demand resources set up for FxiOS? https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/On_Demand_Resources_Guide/. Nope, you're right. As long as the variable in InfoPlist.strings is called CGBundleDisplayName it still works. Have rectified. OK. I will make the changes as a follow up bug.\n\nSorry, didn't realise you wanted this today!\nOn 9 March 2017 at 20:09, Farhan Patel notifications@github.com wrote:\n\nThese are just some style changes. Not really that important. I'd rather\nhave this in the beta going out today than to wait for this minor change.\nSo I'm going to merge it in \ud83d\ude04\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2506#issuecomment-285466452,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AMB1uAC_KXNm7eILHj7XEI5oxF_0_qg6ks5rkFxmgaJpZM4MYM76\n.\n. My first thought was that we should be presenting the share menu as the only popover and from the cell that instigated it. So, if I long press on the 3rd top site, then press \"share\" from the popover, we dismiss the popover and then display the share menu from the middle bottom of the 3rd top site cell. This could be done with something probably a little more elegantly done than this in the share closure inside ActivityStreamPanel:contextMenuForSite (the nested UICollectionView doesn't make for easy access to the selected view, but probably a helper function could be made) :\n\n```\n            if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiom.pad),\n                let popoverController = controller.popoverPresentationController {\n                let asCellIndex = IndexPath(item: 0, section: section.rawValue)\n                let siteCellIndex = IndexPath(item: index, section: 0)\n                let asCell = self.collectionView?.cellForItem(at: asCellIndex) as! ASHorizontalScrollCell\n                let siteCell = asCell.collectionView.cellForItem(at: siteCellIndex)\n                let attributes = asCell.collectionView.layoutAttributesForItem(at: siteCellIndex)\n                let cellRect = attributes?.frame ?? CGRect.zero\n                let cellFrameInSuperview = self.collectionView?.convert(cellRect, to: self.collectionView) ?? CGRect.zero\n            popoverController.sourceView = siteCell\n            popoverController.sourceRect = CGRect(origin: CGPoint(x: cellFrameInSuperview.size.width/2, y: cellFrameInSuperview.height), size: .zero)\n            popoverController.permittedArrowDirections = [.up, .down]\n        }\n\n```\nThis doesn't rotate well (the rotated popover is presented from the wrong place) but a solution could probably be found.\nI can certainly see a situation where I might want to share a site from top sites or activity stream and forcing the user to open the site and wait for it to load before doing so would be annoying. Removing the share from this menu feels a little like throwing the baby out with the bathwater.. Don't know where the original 5 came from - was hard-coded in there - but the increase was to align it to the Label in BrowserLocationView. I tested on several different devices and the offset of 10 for placement of the text aligns exactly with the placement of the constraints on the BrowserLocationView Label. \n. But, I don't really want to have to duplicate this line\nSDWebImageDownloader.sharedDownloader().setValue(firefoxUA, forHTTPHeaderField: \"User-Agent\")\nwhich is why I did it in a var that either gets set inside the userAgent block \n. Totes missed that. Oops. Thanks.\n. cough - I think the fingers do that without me even thinking.....\n. It's basically an optimisation. If the header has no value then we don't include a label and the view has 1 less thing to render.  Although this works better with header reuse rather than with 1 time header creation and I realised that I am not using header reuse.\nHowever, on reflection, this is a bit of a swift/obj-c confusion. In Obj-C you would check to see if the underlying var _titleLabel exists. By referencing _titleLabel rather than self.titleLabel you check for the existence of the var without invoking the lazy initialiser. Therefore you can add the subview if and only if it has been created by being reference outside of the view (using titleLabel.text). This is a pattern that I habitually used a lot in Obj-C ensuring that no more views that are required are created or added. \nIn  Swift I am unsure how to achieve the same effect. By referencing titleLabel to check of it's existence you create it and therefore defeat the purpose of using a lazy initialiser here.\nI shall update to extend UITableViewHeaderFooterView and use section header reuse in viewForHeaderInSection which is better and remove the lazy init, just calling titleLabel.sizeToFit in layoutSubviews\n. what is bizarre is I did not make these changes. Not sure how they got in!\n. You're better off using if let here rather than checking for != nil\nif let query = url.query {\n  ...\n}\nthen you won't need to force unwrap query everywhere else you use it inside the if block\n. same here. Nest this inside an if let index = query.unescape().rangeOfString(\"=\") {...} as index is an optional at this point and may well be nil.\n. There were some comments in the code that said \n// TODO: set additionalActions to bookmark or add to reading list.\nSo I just did that seeing as I was there. Happy to remove it though.\n. So, I didn't remove these actions, but I have ensured that the tab is opened and then added to bookmarks/reading list, so you are not just looking at FF with an old view, but at the tab you've just added.\n. There is now an AboutUtils struct with a isAboutHome(url: NSURL) method that could probably be used here\n. The problem we have here is that the order in which longPress: and textFieldShouldBeginEditing are called can change. Sometimes textFieldShouldBeginEditing will get called before we have started handling the longPress gesture, and sometimes the long press gesture ends before textFieldShouldBeginEditing is called, one resulting in the text field becoming editable when the action menu is displayed, the other resulting in only the text field becoming editable and no action menu being displayed. \nwe need shouldRecognizeSimultaneouslyWithGestureRecognizer as otherwise the UILongPressGestureRecognizer that be default exists on the text field (for copy/paste etc) will be the only gesture recognizer that gets called and our one won't, ensuring that the long press functionality will never get called\nBecause we never get notified when the default UITextFieldDelegate gesture recognizers are fired, we have no way of cancelling them if we have detected OUR gesture recognizer, which means the only method we have of preventing editing is to know that we have a gesture we need to handle.\nThe only way I found to handle this was to make a note when we realise we need to handle the gesture, use that to determine if we should start editing the text field and only dismiss the state once we know for sure that all the required things have been finished, which made me want to know when we were done with the action view controller.\nI guess we could change that to change the long press status flag once we have handled the textFieldShouldBeginEditing, but then there is no way of know for sure that the gesture recognizer has been called yet.\nOther solution would be to return to having 2 views on this, one clear UIView that sits over the top of the UITextField that handles the long press and tap gesture and explicitly calls firstResponder on the text field and hides itself (and remembers to reshow itself when the text field dismisses first responder. Maybe a better approach state wise, What do you think?\n. I think this should be an else if otherwise you'll just overwrite what we've just done\n. By placing the border layer on top of the edit text field you are basically preventing any touch interactions occuring on the text field. Try pressing the clear text field button, or performing any text editing actions (long press, move cursor, highlight) and you'll notice that they are all disabled.\nInstead, take a look at the constraints and how we are setting then in updateConstraints(). You can see that when we set the trailing constraint for the text field we set it to be equal to the container, so that they line up. But the container has rounded corners and the text field doesn't, and the border is 1px wide. \nHow might that affect the visual display for the border?\nHow might we be able to use our constraints to fix this (take a look at how the other constraints are being set)?\nNot giving you too much info cos I think you can solve this one by yourself.\n. we don't really need the offset here as butting up against the readerMode button is OK and won't affect border rendering.\n. nit: Do we need a whole 8px space here, or should we use -(locationContentInset / 2) like we do with the readerModeButton?\n. I had no idea you could do that.....\n. there shouldn't be as the profile has no knowledge of the TabManager, but this is probably sensible anyway.\n. Do you mean here that if, when we sync, there are commands queued to execute on our client then those commands might not be executed?\n. Interestingly, this is already happening.\nWhen we invoke the extension, the first thing it does is perform a client sync to get the latest clients to choose from. We lose any sent commands at this point. Even if we weren't syncing immediately on send tab we'd still be having this problem. Good catch :smile_cat: \n. Oops, yes\n. We have some code on creating a new tab that says \"If there is a modal view controller in front of me, don't pop the tab tray when adding a new tab\". This is to prevent a situation where the tab tray animation doesn't occur because the tab tray controller is in the background leaving the newly created tab with dodgy UI. \nWhen executed on an iPad, however, the Tab Tray Controller is still active as the modal is a form factor type, which means that the tab tray is \"popped\" and the home tab is automatically selected. Without this check then the test will always fail when executed on an iPad as there will be no \"home\" tab tray collection view cell to tap on.\n. Yeah. I used it because I wanted to make clear that this is part of the test that I wanted to execute after every test, rather than about getting each test back to a good state for the next test.\n. Mostly because if there was a problem within ClearPrivateData itself leaving the test in a weird state (tearDown sometimes doesn't happen correctly after an error), then all other ClearPrivateData tests will fail. This is ensuring that within this test suite then whatever state each tests ends in, all subsequent tests will operate successfully.\n. you'd have thought so, right? But apparently not and we crash here. I've only seen it on the iPad during testing, but there is a bug raised for it here:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1190871\nIt's possible that the changes I have made in https://github.com/mozilla/firefox-ios/pull/864 will resolve this too by preventing the data and the TabTray CollectionView getting out of sync on rotation in the first place, but I don't see how a check here can harm us.\n. any reason why this can't be make.left.right.top.bottom.equalTo(self.view)?\nor even make.edges.equalTo(self.view)\n. same here\n. we also set the selected tab to -1 when we delete the current selected tab\nOn 14 August 2015 at 16:30, Stephan Leroux notifications@github.com wrote:\n\nIn Client/Frontend/Browser/BrowserTrayAnimators.swift\nhttps://github.com/mozilla/firefox-ios/pull/931#discussion_r37087734:\n\n@@ -103,7 +103,10 @@ private extension BrowserToTrayAnimator {\n// Force subview layout on the collection view so we can calculate the correct end frame for the animation\n     tabTray.view.layoutSubviews()\n-        tabTray.collectionView.scrollToItemAtIndexPath(NSIndexPath(forItem: bvc.tabManager.selectedIndex, inSection: 0), atScrollPosition: .CenteredVertically, animated: false)\n-        // don't select anything if the selected index == -1 as that is the non-select value\n-        if bvc.tabManager.selectedIndex >= 0 {\n\nAh I guess this could happen since we temporarily select -1 when closing\nthe last tab right?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/931/files#r37087734.\n. The problem with that is that it defeats the point of having those values.\nWe need to be able to explicitly set them otherwise we use the wrong\nheight/width when we rotate (which was the cause of this bug in the first\nplace).\n\nI'll have a look to see if I can come up with a solution that solves both\ncases.\nOn 14 August 2015 at 18:42, Stephan Leroux notifications@github.com wrote:\n\nIn Client/Frontend/Home/TopSitesPanel.swift\nhttps://github.com/mozilla/firefox-ios/pull/932#discussion_r37100102:\n\n```\n }\nprivate var thumbnailCols = 2\n private var thumbnailCount: Int {\n     return thumbnailRows * thumbnailCols\n }\n```\n-    private var width: CGFloat { return self.collectionView?.frame.width ?? 0 }\n  +\n-    private lazy var width: CGFloat = { return self.collectionView?.frame.width ?? 0 }()\n  +\n-    private lazy var height: CGFloat? = {\n-        return self.collectionView?.frame.height\n-        }()\n\nAh I think I know the problem with the extra row at the bottom. It looks\nlike viewDidLoad calls height/width and at that point the collectionView's\nframe hasn't been updated by autolayout yet so it reports a height of 667\nwhich will result in 5 rows. Since these are lazy, height/width will only\nevaluate once and cache that result. Instead of being lazy, these should be\ncomputed properties so we don't cache the height/width values\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/932/files#r37100102.\n. Should this be handled by the tabManager rather than the TabTrayController? I feel it is the managers job to ensure it has the right number of tabs rather than the controllers..\n. do we want to be force unwrapping the collectionView at this point? I know it should be there but it feels a little risky.\n. This was one of those \"Let's stick this in to get it compiling and we can figure out how it should work later. It's super hard to know the effect of any change you make when you can't run any code for another 4 days :)\n. I was only keeping the mozilla fork until the patch has been accepted. It\nwas last night so we can go back to the original now.\n\nOn 27 August 2015 at 17:39, Stephan Leroux notifications@github.com wrote:\n\nIn Cartfile.resolved\nhttps://github.com/mozilla/firefox-ios/pull/966#discussion_r38116928:\n\n@@ -1,13 +1,13 @@\n-github \"Alamofire/Alamofire\" \"9faceeafaa675ec0a4e2c8001a641157844b9973\"\n-github \"norio-nomura/Base32\" \"v0.3.0\"\n-github \"wesj/Deferred\" \"ef8e95954196c815aff79f0b4471219ab2885692\"\n+github \"Alamofire/Alamofire\" \"2f94c11bb039bd7e3e43b925e20c8e536c9be757\"\n+github \"mozilla/Base32\" \"d2136486487a77336ae18b1bd2f9a3f689ec44e5\"\n\nDo we want to use mozilla as the owner of these forks? I feel like if we\nmake mozilla the owner it makes it seem that we're going to be maintaining\nour own fork instead of temporarily using a fork for swift 2.0 changes.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/966/files#r38116928.\n. There are now 2 ways to check for nil optionals:\n1. the good old if let\n2. guard let a = statement else { do something; return }\n\nthe thing with guard is that nothing after the guard statement will be\nexecuted in the else case, so if you have shared code for both cases after\nthe check for optional then you still should use if let\nthe _ is because we are not using the result of the if let in the\nconditional block, in which case we should not create a proper variable for\nit.\nOn 27 August 2015 at 17:51, Stephan Leroux notifications@github.com wrote:\n\nIn Client/Frontend/Browser/Browser.swift\nhttps://github.com/mozilla/firefox-ios/pull/966#discussion_r38118180:\n\n@@ -327,7 +327,7 @@ private class HelperManager: NSObject, WKScriptMessageHandler {\n     }\nfunc addHelper(helper: BrowserHelper, name: String) {\n-        if let existingHelper = helpers[name] {\n-        if let _ = helpers[name] {\n\nQuestion: Is this the preferred way now to check if a optional is not nil?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/966/files#r38118180.\n. This is the kind of shit introduced by the migration tool. I hate\nautogenerated code.\n\nOn 27 August 2015 at 18:55, Stephan Leroux notifications@github.com wrote:\n\nIn Client/Frontend/Reader/ReaderModeCache.swift\nhttps://github.com/mozilla/firefox-ios/pull/966#discussion_r38125258:\n\n}\n     }\n }\n-    func contains(url: NSURL, error: NSErrorPointer) -> Bool {\n-        if let cacheDirectoryPath = cacheDirectoryForURL(url) {\n-            let contentFilePath = cacheDirectoryPath.stringByAppendingPathComponent(\"content.json\")\n-            return NSFileManager.defaultManager().fileExistsAtPath(contentFilePath)\n-    func contains(url: NSURL) throws {\n-        let error: NSError! = NSError(domain: \"Migrator\", code: 0, userInfo: nil)\n\nAlso just noticed, when using error domains, they are usually in a reverse\nurl format. So likee this one could be\ncom.mozilla.readermodecache.migrator. Might also make sense to create a\nenum with various error codes so it's easy to track what the errors mean\nwhen we throw them.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/966/files#r38125258.\n. Ooh, whole new thing I was unaware of. Nice!\n. Really, I think that this should be in a background thread rather than running on the main thread:\nlet priority = DISPATCH_QUEUE_PRIORITY_BACKGROUND\ndispatch_async(dispatch_get_global_queue(priority, 0)) {\n     self.profile?.shutdown()\n         application.endBackgroundTask(taskId)\n}\notherwise the task we are running is not in the background and won't be governed by the UIBackgroundTaskIdentifier\n. So, I started out with something like @thebnich's solution, then moved to this one, then couldn't decide which was best and so added the question in the top. On, say, the instagram login page, the mutation observer gets called 6 times, one one of those times does a form get injected. This means that we are doing 6 DOM searches for the form tag (I found that simply searching the added nodes doesn't consistently find the FORM element) over 2 executions of the findLogins. But this might be different in other webpages. \n\nI'll move to searching for the FORM element though.\n. I found that adding subtree: true made no difference to the addedNodes list provided. Unless the FORM is the root node, then no form is found whether subtree is present or not\n. The decision was mostly based on the fact that BrowserViewController is already over 2000 lines long and confusing as hell and I wanted to not add to it. I felt that keeping things self contained with all responsibility for creation, display and action within one helper would make it easier to maintain in future rather than losing it all in the vastness of BVC.\nHowever, the toolbar solution works just as well. Will explore that and see where it goes.\nTo be honest, I just hadn't tried the tab tray when testing so didn't even think about it. Stupid really.\n. I remember reading something somewhere that forEach has very poor performance in comparison to map or a regular for loop and shouldn't be used, but I can't actually find that article now....\n. Getting an EXC_BAD_INSTRUCTION here when executing tests. records1 has 0 elements.\n. test failure:(Optional( \"root_____\")) is not equal to (Optional(\"places\"))\n. @rnewman: I'm having a problem with traversal of the folder hierarchy in navigation after rebasing this on your bookmarking code.\nWhile profile.bookmarks.modelForFolder(BookmarkRoots.MobileFolderGUID).upon(onModelFetched) provides me with the correct model from MergedSQLiteBookmarks (treating mobile___ as root), the modelFactory that is returned for that model is a SQLiteBookmarkMirrorStorage, rather than a MergedSQLiteBookmarks. This mean that when I traverse back up the folder structure and fetch root again, it fetches the root from SQLiteBookmarkMirrorStorage which is empty. \nAny pointer on how this can be resolved, while retaining the correct SQLiteBookmarkMirrorStorage functionality?\n. This string already exists in the code.\n. Gah! Every goddamn time!\n. actually a guard would be better here if we're going to be all swift 2.0-y\nguard let (offset, since) = self.nextFetchParameters else { return (nil, max(self.lastModified, self.baseTimestamp)) }\nreturn (offset, since)\n. @sleroux: I've now added background handler, and testing it on Very Bad Network using the Link Conditioner, we end up in a situation whereby we have a URL copied into the clipboard until the image has downloaded. But we provide no indication to let the user know that the image download has been successful, and so it is pot luck whether what you paste is the image or the link.\nSafari seems to grab it's images from cache as even with link conditioner on, there is no time lag between pressing copy on an image and the image being added to the pasteboard. \nSafari has access to the offline cache, which is a private API and therefore something we can't use ourselves.\nChrome does not provide a Copy Image option.\nThe only way I can know how to achieve that is to use JavaScript to draw the image to a Canvas and then somehow getting that canvas image back out of the JS and into swift to add to the clipboard. Is that even a sensible thing to do?\nAlternatively, we can maybe send a notification to the user to let them know that the image has been copied to clipboard, or do the copying synchronously with some kind of progress bar. I can't quite tell which solution would be more annoying for the user, they are all pretty crap.\nAny other ideas?\n. OK. I'll keep what we have here. Currently under good network conditions the copy feels instantaneous as by the time you've navigated to another app and pressed paste then the image has downloaded.\nUnder bad network conditions with large files, you'll end up pasting a link. This is better than nothing and what we have currently. We can revisit the JS option if we feel that we need an instantaneous solution.\n. Although, what happens if, after the image has downloaded, we end up overwriting something else the user has added to pasteboard since the original copy?\nMaybe we should check that the string in clipboard is the url that we are expecting, and only add the downloaded image if they match.\n. nit: I don't like naming something that might not be a UILabel (i.e. it could be a UIButton as with the sync card) label. Maybe detailView or something?\nAlso, I think the function itself should be addViewsToIntroView or equivalent as we are not necessarily adding just labels.\n. in fact, these two lines could be wrapped up into one single guard\n. nit: I prefer to have the second conditional in brackets. Makes it easier to read and much clearer.\n&& (self.profile.prefs.boolForKey(\"saveLogins\") ?? true)\n. nit: there's a lot of duplicated code between all of the UISwitch based settings. Worth creating a subclass for SwitchSetting and then extending for SaveLoginSettings, PopupBlockingSettings, ClosePrivateTabs, SendCrashReportsSetting & UseCompactTabLayoutSetting?\n. Also, maybe introduce some naming consistency here. Either all NameSettings, all NameSetting or all Name.\nI know this is cleaning up other peoples code, but it just niggles, you know?\n. Unfortunately the placeholder inside the search URL renders it invalid as a URL and therefore you cannot create an NSURLComponents or NSURL directly from the template.\nI guess I could replace our placeholder with another one that is unlikely to rock up and test for that.......\n. I'm not entirely sure either, but it worked. It seems to ensure that the GCDWebServer stuck around long enough that it was still present when beginBackgroundTaskWithExpirationHandler is executed later. \nIt was a little bit of a fix in the dark - the proper solution was to ensure that the self used in teh beginBackgroundTaskWithExpirationHandler block was a strong reference using the  __weak typeof(self) weakself = self;... pattern, but I didn't want to fork GCDWebServer for that purpose. The function that calls the backgrounding method is executed after listening for the ApplicationDidEnterForeground notification and is therefore not kicked off by us, so there was no way of ensuring in our code that the webserver was always present.\nAs the notification was set during start, forcing the server to stick around seemed like something to try, and it worked.\nHappy to see if I can find some other way of doing this.\n. Sorry, that log statement shouldn't be there. Will remove.\n. No, but there is an error there. We are returning when there is no launchedShortcutItem and never executing the  self.profile?.syncManager.applicationDidBecomeActive() & self.browserViewController.loadQueuedTabs(), which means that running iOS9 we will never execute these lines unless we have opened by a shortcut. I'll turn the guard into an if let. I think we want to execute these lines regardless, for now. If we need to prevent passthrough later we can amend, but right now I can't think of a reason why we would.\n. I spent all morning developing my git refactor/rebase skills. They may not be perfect just yet... ;)\n. There is no need to have a private var and a public one, you can just create the singleton instance with\nstatic var sharedInstance = HandoffManager()\n. nit: I would prefer not to have an empty else statement here. Either add a log statement or remove the else and leave a comment above the if statement\n. nit: would be nicer as a guard rather than an if let\n. yeah, leftover from some other work I was doing with carthage. Will revert.\n. Ah of course. The function lives well beyond the potential life of the tab. Nice catch!\n. nit: this would be nicer in a block not capped by a comment about using desktop user agent as it doesn't. Maybe move it above the comment?\n. return? maybe I'm reading this wrong, but wouldn't continue be better so we can keep iterating the links we've found?\n. I'm reading it wrong. Missed that we were in a function rather than a loop. Ignore my idiocy.\n. But if subviews is an ordered array (which it is, not a set), then for x in self inside find would iterate in order 0...n where 0 is the first element added, i.e. at the bottom of the stack. Your way would find the last item added to the stack which would be the most recently added item, no?\nhttps://developer.apple.com/library/ios/documentation/UIKit/Reference/UIView_Class/index.html#//apple_ref/occ/instp/UIView/subviews\n. This should be if item == .UsernameItem {\n. I tried to understand how, given this bug, your newly added test still passed (logically it shouldn't as it should return false to canPerformAction). Turns out this delegate method is never being called during menu presentation.\nI've tried to figure out why, but can't. It should be called immediately after shouldShowMenuForRowAtIndexPath. I can only think it's because you are doing stuff in the Notification observers for UIMenuControllerWillShowMenuNotification, although one would imagine that this notification wouldn't get fired at all if canPerformAction returns false. \nEither way, we should either correct this implementation on the offchance that the delegate method gets called in the future and the menu doesn't open (prefered), or we should replace this implementation with one that simply returns true.\n. Ahh, it all makes sense now. Didn't spot this here.\n. An easier fix might well have been just to remove the where clause from the guard statement, and then the same effect would be achieved with far fewer code changes, but this works just as well :)\nI prefer the removal of the where clause though as it ensures that the animation block won't get called when there is no popovercontroller which is just slightly more efficient, whereas with your solution it will get called and then execute nothing inside the animation as the popover controller is not present.\n. The perils of copy and paste programming. Sure :)\nOn 22 February 2016 at 14:59, Stephan Leroux notifications@github.com\nwrote:\n\nIn Client/Extensions/UIAlertControllerExtensions.swift\nhttps://github.com/mozilla/firefox-ios/pull/1555#discussion_r53635476:\n\n\nlet alert = UIAlertController(\ntitle: NSLocalizedString(\"Clear Private Data\", tableName: \"ClearPrivateDataConfirm\", comment: \"Title of the confirmation dialog shown when a user tries to clear private data.\"),\nmessage: NSLocalizedString(\"This action will clear all of your private data. It cannot be undone.\", tableName: \"ClearPrivateDataConfirm\", comment: \"Description of the confirmation dialog shown when a user tries to clear their private data.\"),\npreferredStyle: UIAlertControllerStyle.Alert\n)\n  +\nlet noOption = UIAlertAction(\ntitle: NSLocalizedString(\"Cancel\", tableName: \"ClearPrivateDataConfirm\", comment: \"The cancel button when confirming clear private data.\"),\nstyle: UIAlertActionStyle.Cancel,\nhandler: nil\n)\n  +\nlet okayOption = UIAlertAction(\ntitle: NSLocalizedString(\"Clear\", tableName: \"ClearPrivateDataConfirm\", comment: \"The button that clears private data.\"),\nstyle: UIAlertActionStyle.Destructive,\nhandler: {_ in okayCallback() }\n\n\nNit: Could you just pass in okayCallback instead of wrapping it in a\nclosure?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1555/files#r53635476.\n. referencing siteUri here causes a crash. There is no siteUri in the row columnNames. Changing this to feedUri seems to work.\n. It is also possible that the solution is to add siteUri to the list of fetched properties when querying bookmarks and their children (i.e. so they are there when this factory is executed)\n. woah. I totally didn't see that there! awesome :)\n. You'll now need to add import MobileCoreServices to the top here. So sorry for taking so long to get round to this.\n. needs import MobileCoreServices\n. turns out you do not need to turn the NSData into image. If you set the NSData directly with the gif key into the pasteboard then it pastes as animated.\n\n```\n        let isGIF = UIImage.dataIsGIF(data)\n    // Setting pasteboard.items allows us to set multiple representations for the same item.\n    items = [[\n        kUTTypeURL as String: url,\n        imageTypeKey(isGIF): data\n    ]]\n\n```\n. I still struggle to spell American sometimes.\n. When I added this in my sample project using just iOS9, adding the custom views to a UIButton subclass caused the button not to display, whereas subclassing the UIControl did work. Just turned the UIControl into a UIButton here and everything layed out just fine, so I guess I was doing something wrong on the sample menu project. Updating.\n. So, I updated the constraints here to:\n```\n        customImageView.snp_makeConstraints { make in\n            make.centerX.equalTo(self)\n            make.top.equalTo(self).offset(2 * padding)\n        }\n    customTitleLabel.snp_makeConstraints { make in\n        make.top.greaterThanOrEqualTo(customImageView.snp_bottom).offset(padding/2)\n        make.centerX.equalTo(self)\n        make.left.equalTo(self).offset(padding)\n        make.right.equalTo(self).offset(-padding)\n        make.bottom.greaterThanOrEqualTo(self).offset(-padding)\n    }\n\n```\nThe result of which was a good alignment, however, the single line rows need to be aligned centrally between the image and the bottom of the view, so it appears in the center of the 2 line text rather than at the bottom. Not really sure how to achieve that here (that was kind what all the fancy division was all about). Any ideas?\nHow it was:\n\nNow:\n\n. that'll probably be through a rebase against master that I didn't push from\nthe parent branch. Let me fix that.\nOn 23 March 2016 at 18:04, Stephan Leroux notifications@github.com wrote:\n\nIn Client.xcodeproj/project.xcworkspace/xcshareddata/Client.xcscmblueprint\nhttps://github.com/mozilla/firefox-ios/pull/1620#discussion_r57207949:\n\n@@ -23,6 +25,11 @@\n   \"DVTSourceControlWorkspaceBlueprintRelativePathToProjectKey\" : \"Client.xcodeproj\",\n   \"DVTSourceControlWorkspaceBlueprintRemoteRepositoriesKey\" : [\n     {\n-      \"DVTSourceControlWorkspaceBlueprintRemoteRepositoryURLKey\" : \"https:\\/\\/github.com\\/fluffyemily\\/firefox-menu-experiments.git\",\n-      \"DVTSourceControlWorkspaceBlueprintRemoteRepositorySystemKey\" : \"com.apple.dt.Xcode.sourcecontrol.Git\",\n-      \"DVTSourceControlWorkspaceBlueprintRemoteRepositoryIdentifierKey\" : \"17D28135537A0534CA3953E850B2215BF7F6515F\"\n-    },\n-    {\n     \"DVTSourceControlWorkspaceBlueprintRemoteRepositoryURLKey\" : \"github.com:mozilla\\/firefox-ios.git\",\n     \"DVTSourceControlWorkspaceBlueprintRemoteRepositorySystemKey\" : \"com.apple.dt.Xcode.sourcecontrol.Git\",\n\nNot sure where these changes came from\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/pull/1620/files/d472ac87098126fd4eebbcc56e73b5b91eeb762d#r57207949\n. missed this whenconverting a UIView into a CollectionViewCell. Doh!\n. every time :disappointed: \n. nit: Is there a reason why these are 2 separate guard statements and not all wrapped in one, seeing as they both just return nil? I guess there is a little extra clarity here, but it feels a tad redundant.\n\nAlso, I know this was not added in this patch, but when you notice something....\n. I think it might also be handy here to do an XCTAssertNotNil on Record<CleartextPayloadJSON>.fromEnvelope(EnvelopeJSON(emptyPayload), payloadFactory: clearFactory) before the XCTAssertFalse here, otherwise if it does return nil (for some reason) it will crash the tests, which isn't brilliant.\nDitto for those below that also force unwrap\n. nittiest nit of all nits: it's not its :stuck_out_tongue_winking_eye: \n. These are temporary until we have created the AppState, at which time they will be refined to be less cumbersome.\n. I agree. In a later branch (to be PR'd soon) this will go away.\n. I made this change because things didn't compile without it, but I think I committed it accidentally.\n. :100: for this whole commit\n. Do we need all 3 of these or can we use defaults to reduce these (we need to the last declaration, and it looks like we might need the first, but adding a default of 0 to bookmarksLimit could allow us to get rid of the middle one)?\n. can we remove commented code please?\n. we can combine this into one statement\nguard let components = NSURLComponents(URL: url, resolvingAgainstBaseURL: false) where components.scheme != \"firefox\" && components.scheme != \"firefox-x-callback\" else { return false }\n. this is where I miss NSString which has a boolValue method. I guess you could convert to NSString and then compare there. I couldn't test it as I couldn't get this to build under Xcode 7.3 (stupid compiler meltdown, nothing to do with your code)\nisPrivate = NSString(item.value).boolValue()\n. much cleaner, nice\n. don't know if I like this being an extension on UIButton as a base class seeing as it only affects UIButton's that are on a toolbar (same with the toolbar specific global extsions on UIImage below). Wondering if a helper class rather than an extension might be a nicer way to go here, or create a ToolbarButton subclass and then add the extensions to that (or when UIButton is of that subtype).\n. If the configuration doesn't determine what the menu configuration should be, what should? Serious question.\n. How would you have it instead. It's either an enum, or it's a struct. It's an enum as that was how we discussed with @rnewman it should be  - totally immutable describing a snapshot in time of state. We could make this a struct instead, containing a location (tab, home panels, tab tray) like we had before, but my memory of that conversation was that it shouldn't be that way.\nAlso, if we don't remember the state and use it within the menu to determine the configuration/display options, how should we use it? Split out the information within the app state into vars within the menu and then query those? Have the MenuConfiguration remember the app state and just return the right info (so instead of calling iconForState() you just call icon() and the configuration knows what to return because it understands the app state?) Some other way?\n. the thing I love about iOS programming is the elegant API :neutral_face: \n. nit: this if let with no else would be nicer as guard I think\n. nit: again I'd prefer a guard here.\n. if you're making things equal to the same value as another thing, you don't have to be quite so explicit, so\nmake.top.left.equalTo(buttonContainer) will have the same effect as both of these lines\n. can this 88 be defined in the TodayUX struct please?\n. this will call the completion handler twice. Is that right?\nAlso, are these comments still valid as we explicitly set the result as NCUpdateResult.NewData and never any of the other options?\n. you do not need to override hitTest on a button\n. Not sure why you are overiding hitTest on the UIView. As long as userInteractionEnabled = true on the view it should work just fine.\n. In the commit comments I mention that I an unsure whether or not we care about this commit.     e5886e9 fixes the actual crash, but cef4cb2 is there because when we go into the background we update the URLBar, which is kinda unecessary. e5886e9 solves the crash part. This was just belt and braces as it is only when we call updateURLBarDisplayURL when we go into background that I observed the crash.\n. Is it worth putting this in the Menu table along with the other menu strings? \n. Not sure I like having an an extension on UIColor here for just this one property, it seems to go against the conventions we have been using for colour definitions everywhere else. I actually like the idea of having UIColor extensions to define colours, but dislike inconsistency more.\nAlso, if this is the same toolbar tint colour as used elsewhere in the app (the browser toolbar, menu etc) then we should update those elements to use the same function to ensure that if we change the toolbar tint for a privacy mode we change it for everything that uses it.\nAlso, this only returns the toolbarTintColor for non-private mode, so the name should either reflect that or the function should take an isPrivate arg to determine the right toolbar tint colour. \n. using a hex colour here makes it hard to tell if this is defining a colour that is the same as other values already defined. I think we might need to raise a separate issue about colour constants and come up with some coding conventions for defining them, as colours are starting to get confusing.\n. why not use the toolbarTintColor as defined in the last commit?\n. seeing as the toolbar is always along the bottom of the screen, never at the top, do we ever want to display the menu as popover, even in iPad/Landscape?\n. super glad it was this easy to perform the animation from the tab tray :smile: \n. this should not be neccessary and the fact that it is shows up a bug in the menu code - it should display up to numberOfMenuItemsPerRowForAppState correctly, not leave space for the 4th when only 3 items are present. I've raised a bug and submitted a PR for this here https://bugzilla.mozilla.org/show_bug.cgi?id=1267581\n. nit: if we're going to tidy, can this be alphabetical (i.e. search comes before settings)?\n. MPL (although I expect this will be resolved in a later commit)\n. if we're returning false regardless of whether or not the guard succeeds, why do we need the guard?\n. nit: \nmight be nicer as headerView.showTopBorder = (section != 0)\n. In the case of this, yes. There are 3 states.\n1. The BVC is the top most view controller, in which case we dismiss nothing\n2. The Tabs tray is open, in which case that is the top most view controller and we must dismiss it to get to BVC\n3. The settings panel is open, in which case that is the presentedViewController, which we dismiss before checking whether or not the topmost view controller is BVC. If not, we are in situation 2.\nAs yet, there is not a situation where the topmost view controller is more than 1 step away from BVC, or where there are more than 1 presentedViewControllers at a time.\n. no. I shall remove it.\n. If we're importing the framework through Carthage we shouldn't need it in ThirdParty too.\n. Just re-read the comments about not being able to use Carthage so ignore this\n. Should the comment state that the string will be truncated if it is over a certain character length as we cannot wrap on the status bar? Not that I think this string will ever be long enough, but it might be a thought for later strings that we might want to make explicit here in the first strings.\n. Yup, I was going to add that. Please add ] as goForward.\n. I'm not sure if Open Location is the right wording here. I'd suggest something more like Search or Enter Address which is the placeholder for the Location Text Field.\n. I think I would prefer this to be defined in a constant somewhere.\n. We should remove this.\n. I think we need to change the tab trays implmentation of this method as we dismiss between landscape and portrait and we shouldn't on an iphone 6. This works as expected on the iPad (i.e. it doesn't dismiss).\nI think all that needs to happen is that the dismissViewControllerAnimated implmentation in TabTrayController should always return no.\n. not sure what the point of assigning this to another variable is. Are you trying to make it explicit that the menuPagingView is a collectionView for clarity?\n. There is a lot of duplicated code here between didLongPressItemAtIndexPath and didSelectItemAtIndexPath around the highlighting of images etc. Can we maybe factor out the shared code into a separate function?\nI'm most concerned about the fact that you are not checking for the presence of a selected icon as we are in didSelectItemAtIndexPath (thinking about the menu being a generic implementation)\n. Hmm, much simpler. Must've been crazy when I wrote this!\n. Hmm, that should not be happening. I'll take a look.\n. @sleroux : yes, there is a bug in menu whereby we are not checking that the number of menu items is 0 before we try and use it in a division, but the main problem seems to be that the test is trying to perform actions before a page has loaded. In fact, it seems as if the page never actually loads, so we are in a Loading state rather than on a webpage or a home panel. I think that needs to be addressed - I'm sure it never used to behave like that on these tests.\n. Quickest way round this for now is to change line 101 of AppMenuConfiguration inside menuItemsForAppState to\ncase .HomePanels, .Loading:\n. https://github.com/mozilla/firefox-ios/pull/1792\n. Not sure if I can answer that question until we know what the URL is.\n. When text wraps, this constraint is ignored. To test, force syncStatus to be \nSyncState.Stale(message: String(format:Strings.FirefoxSyncPartialTitle, Strings.localizedStringForSyncComponent(\"bookmarks\") ?? \"\"))\n Not sure why this is happening yet\n. if we never mutate this string it doesn't need to be a NSMutableAttributedString\n. ditto with the NSMutableAttributedString\n. Not sure what retaining this enum gives us now. Can we not just make UIState a protocol and make TabState, HomePanelState and TabTrayState implement it?\n. it feels like each delegate should register with the main store for updates, not with each component, so the store notifies a state change. I know that is a bit more Fluxy than Reduxy but might fits the current 'in between architectures' model a little better.\n. can you file a followup bug whereby anything at all outside of profile that wants to access profile.prefs does so through the AppStateStore?\n. not sure if I understand why we are making a reference to getPrefs here as a variable. For me it doesn't add any clarity to the usage of it here. HomePageAccessors could simply inherit from Accessors and that would serve the same purpose (or am I thinking too OO here?)\n. this could be combined into one clause:\nguard let urlString = (prefs.stringForKey(HomePageConstants.HomePageURLPrefKey) ?? getDefaultHomePageString(prefs)) else {\n    return nil\n}\n. I would prefer for the AppState to be the only thing used here to determine menu items. The idea being dependency injection allowing for easy testability of code and mocking etc. I'd rather have a isChinaRegion or equivalent flag as the thing that is tested than have another object defined outside of our injected dependencies to query.\nI realise that I totally didn't spot that for the other home page stuff, but ditto for hasHomePage()\n. NotificationFirefoxAccountChanged also gets fired when we remove an FxAAccount. In this case it doesn't indicate a first time sync. We should check that and behave accordingly\n. In my case, when we are displaying the result of the sync for 4 seconds, I'm not sure this will work. Would I have to dismiss the syncing... message, causing it to animate away, and then animate it back in with the new message for 4 seconds?\n. wrt\n3. As I mentioned in comments in your PR, I'm not sure that the timer case fits my use case here - I'm updating an existing message and dismissing it after 4 seconds, not redisplaying a new message, however with you patch it feels like I can no longer guarantee that a message will already be displayed when the sync result comes in, so I will have to rethink this anyway.\n1. We can't attach the syncDisplayResult as NSNotification only allows us to attach an object. I thought about only attaching the message, but then I lose the information about whether the message is .Bad or .Stale for colouring. I'll try and look at ways of wrapping that enum value as an object to pass instead.\n. If only. It actually complains that syncMessage isn't guaranteed to be initialized if I don't always provide it with a value, even if that value is nil. I think it's a result of it being a let rather than a var. Swift still has some annoying oddities. \n. I love that it is this easy to make the menu so dynamic :)\n. doh! Got most of them, must've missed these ones\n. The menu cell just grows and grows to fit the text. This was resolved in a previous bug and is what highlighted the need for this issue\n. I agree about the lock. This was taken out accidentally somewhere along the lines.\nAs for beginSyncing, onStartSyncing was created and this code was moved here in response to another review comment some time ago from @sleroux who felt beginSyncing was the wrong place for it. I'm going to leave it like this.\n. The adding of the sync lock to the onStartSyncing and onFinishSyncing observer methods hopefully address this.\n. nit: in a very personal sense of hating very nested if statements, how about something like:\nif #available(iOS 9, *) {\n        guard finished && self.privateTabsAreEmpty() else { return }\n        self.emptyPrivateTabsView.hidden = false\n}\n?\n. I'm wondering whether urlTypes.first?[\"CFBundleURLSchemes\"] would be safer, just in case there is nothing at index 0\n. Yes, as ViewAllBookmarks also has columns called url and title and unless you specify TableHistory the SQL errors\n. if this is no longer called as a selector from anywhere (which I don't think it is) then we can remove the @objc decorator.\n. we seem to have .Command UIKeyInputRightArrow and .Command UIKeyInputLeftArrow meaning 2 separate things here, Go Forward/Back and Next/Previous Tab. \n. would be worth testing, but if we are removing the webView we no longer need to hide the scroll view in order to enable scrollToTop, so this line can be deleted\n. We could also then remove lines 1947 - 1949 below where we unhide the webview if it is hidden.\n. Nit: If there is a chance that we would be using these Accessors outside of Browser, then I think I would prefer to have an 'Accessors' folder where all accessors could be found. Kinda like Extensions, or Widgets or Utils. Might make navigation easier.\n. Yeah, you're right. We used to only have the URL one, then I created the response one for the general open in case. Once I then moved all of the others over to also use the response initialiser I probably should have just dumped the old url one as it was no longer needed. Probably the same with the file type check too, as the response will always have the MIMEType.\n. There are enums for these now, for ease of reference and ensuring that all home panels refer to the same thing. I created them for menu\nenum:\n https://github.com/mozilla/firefox-ios/blob/ebde8f60379c3bd338c3e0153d7f7d6ef7df8073/Client/Frontend/Home/HomePanelViewController.swift#L50\nusage example:\nhttps://github.com/mozilla/firefox-ios/blob/f2386f93b7e7ed1026c24d935683f6b1470274dc/Client/Frontend/Browser/BrowserViewController.swift#L1330\n. \"NewTabPrefKey\" should be a constant in PrefKeys.\n. Ditto for \"HomePage\" being a constant in PrefsDefaults\n. Why? appDelegate is already the stateDelegate\nWhat I've done with this test is remove the integration tests aspect entirely. So this test unit tests the implementation of the delegate method we have in AppDelegate.swift. It tests that it correctly calls the save method for tabs on the DB, which has its own unit test to ensure that tabs actually save. The subsequent tests test whether or not storeChanges calls whatever stateDelegate is set. Between the 3 the test the entire use case.\n. I am kinda concerned about the removal of the displayURL check due to this comment in the original commit of the displyURL check\nhttps://github.com/mozilla/firefox-ios/commit/915fa84da25d63b4be574c7604636a2600bf6e37\nBetter detect whether or not we are displaying home panels by checking the displayURL of the  selected tab rather than whether or not there is a home panel controller. this is because a timing issue sometimes meant that the home panel controller from a previous tab was still hanging around when requesting a menu from a new tab with a URL, therefore displaying the wrong URL\ntrying to find the STR for this to see if it's still a problem....\n. when we receive NotificationDynamicFontChanged we will want to re-render regardless of whether the cached sites have changed. I think you need to move this one case to a separate option that doesn't do the check.\n. nit: my gut is telling me that func areTopSitesDirty(withLimit limit: Int) -> Deferred<Maybe<Bool>> would be a slightly Swiftier name.\n. how about we move the second guard statement into a where clause on the first?\nguard let displayedPopoverController = self.displayedPopoverController where displayedPopoverController.isViewLoaded() && displayedPopoverController.view.window != nil else {\n    return self.displayedPopoverController = nil\n}\n. I would prefer a more descriptive variable name here, rather than x. Perhaps shouldSelect or canBeSelected or something?\nalso could be made terser like this\nreturn menuItemDelegate?.menuView(self, shouldSelectItemAtIndexPath: indexPath) ?? false\n. .Loading is indicating that the app is in a loading state (i.e. has just been opened and state is being restored) and that there is no formal UI state (tab, home page, tab tray) yet determined. It should only be used when there is no other state available. If it would aid understanding, then maybe this could be renamed as .Restoring. It has nothing to do with the loading of a specific URL.\nYes, isPrivate should be a property that is outside of any UI element, but that needs serious rethinking of the way that we deal with privacy in the app. This was all work that was going to be done in the future, but who knows when it will be looked at now.\n. I am a little concerned that this will cause relayoutMenuAndSetSize to get called more than once at times and that will affect performance, but as I cannot figure out how to deploy to iOS10 right now I can't test it to support or disprove the concern.\n. OK, I've managed to test now. Yes, this causes the layout code for MenuView to get called up to 4 times every time the menu is displayed. \nI achieved the same effect (correct menu display) on iOS10 & iOS9 by moving this :\n```\n    if presentationStyle == .Popover {\n        self.preferredContentSize = CGSizeMake(view.bounds.size.width, menuView.bounds.size.height)\n    }\n\n```\nto viewDidAppear rather than viewWillLayoutSubviews, which I think may be a less invasive fix.\n. This should be UIControlState.normal not UIControlState() as should the others below. The return before the fetch bookmark status call prevents the context menu being called twice, but I'll move it to make that clearer.. yeah, I missed that. Good spot. Thanks :). basicHistoryColumnFactory which is used when we fetch Top Sites from the DB, and also used when we fetch anything from history explicitly uses the designated initialiser and a bookmarked value from the DB. The only usage of this convenience initialiser is not in anything used by the ActivityStreamPanel. The DefaultSuggestedSites which is the case that we are trying to catch with the nil check passes nil into the designated initializer: SuggestedSites.swift line 22\nsuper.init(url: data.url, title: data.title, bookmarked: nil). I'd say allocatedSizeOfDirectory(atURL url: NSURL, ...). This could simply be Data rather than NSMutableData. hmacSha256(withKey key: Data) -> Data. This can be guard var result = Data(capacity: (cString.count - 1) / 2) and then there is no need for the cast to Data at the end of the function. we could make this \nvar result = String()\nresult.reserveCapacity(count * 2)\nbut I'm not sure if that gives us anything overall except not using an Obj-C type and removing the need to convert to a String at the end. if let data = Data(count: length) then there is no need for the (NSData(data: data as Data) as Data) confusion below. FileManagerExtensionsErrorCodes?. you should be able to return itemURL here, or have I missed something?. nit: getAllocatedSizeOfDirectory(atURL url: URL, ...). Can this take an Any instead of an AnyObject to prevent all the casting to AnyObject we do below?. apparently, according to StackOverflow anyway, the way to do this in Swift 3.0 is\ndata.copyBytes(to: &header, count: 3 * MemoryLayout<UInt8>.size). nit: I know context should always exist, but should we wrap this in a guard or if var instead of force unwrapping?. nit: templateImage(named name: String). This shit makes me so glad you did this and not me!. nit fileLogger(withName name: String). nit: I'm pretty sure that Swift 3.0 style guide recommends lowerCamelCase constants https://github.com/raywenderlich/swift-style-guide#constants. Can we refer to DateFormatter without the explicit call to Foundation? If not, perhaps importing Foundation at the top is required?. nit url(forTopic topic: String). This could be Any instead of AnyObject. no need to create NSString here. Can use String(contentsOf: nsurl, encoding: enc) instead. no need to cast to URL? here. The result of init(string:) is already optional. Just a thought. Is it worth us typealiasing this?\ntypealias JSONObject = [String: Any]\nThis would make all references here to be very explicit, and if we have this problem again in a future migration, all we have to do is change the typealias definition to fix it.. [String: Any]?. [String: Any]. This would remove the need for all the casts below. nit [String: Any]. nit: [String: Any]. This can simple be self.prefs.objectForKey(\"recentlyClosedTabs\") as? Data. no need to prefix with Foundation.. ditto with Foundation.. no need to cast to URL. we don't need the and here, we could use\nguard let item = item, error == nil, item.isShareable. Does highlightLink need to take NSString or can we convert this to String?. Yes, it does. Leaving it be. This should be the catch of a do{}catch{} block on try Data(contentsOf: URL(fileURLWithPath: file)). at least one of these is nil. This is guaranteed to crash!. do not need to cast (same below). no point in casting, just create a Date() straight off. can be UUID. is this supposed to be commented out?. we now have a helper enum for this - URLRequest.Method.post.rawValue. It strikes me as more Swifty to parse a UInt64 directly than to use an NSNumber to add to an Any in order to convert a UInt64 into a Double.\nI went through this several times. If the obj is a UInt64, a Timestamp, then the value doesn't get bound. Then, when the statement is executed, an error is thrown becuase last_modified is a nil object. To be honest, I have no idea how this ever worked, if a previous version also passed in a UInt64.. Damnit. I can no longer replicate the missing version situation so I can't go back to look at it. Do we have any startup crashes for iOS that are sync related? If so, this could be it.. decodeInt(forKey:) does return a guaranteed Int32. As long as we safely convert it to the expected Int this should work. I'll make that change. color(forImage image: UIImage, andURL..... setFavicon(forSite site: Site, ... ) perhaps?. this feels like a very long initialiser. How about you make a function fileprivate func getDefaultIcons() and then call this inside the intialiser?. please can we strip leading and trailing whitespace from the name and template vars before comparison?. These are not needed, can these changes please be removed.. And for all following. Third Party. No, interestingly that is not how you do indexes on an attached table. You add the attached DB as a reference on the index name, and refer to the table directly. Odd huh? . nit: remove new line. It would be great to add a comment here as to why the IDPayload is invalid.. if the envelope is valid, why are we calling it an invalidEnvelope?. just checking the isArray() function in JSONExtensions.swift (and all the other is... functions), these also don't check for nil, just for type. Is that the behaviour we want here, or should we add a nil check there too?. Are there any other parts that could be null that we need to check? What if clients is null rather than a dictionary (again thinking of the lack of a null check in isDictionary()? . ",
    "radazzouz": "Addressed! Sorry my bad. I was testing with the current beta version of 1Password and not the App Store version.\n. Please do not merge until 1Password 5.5 comes out :wink: \n. Hi @jpvasquez and @st3fan ,\nThanks for the suggestion :+1: \nThe 1Password extension is a generic extension (not limited to findLoginForURLString:), therefore its Bundle ID does not contain the .find-login-action. substring.\norg.appextension.find-login-action is the item provider's type identifier (see line 516 of OnePasswordExtension.m) and it is not meant to be used as a password manager's extension's bundle ID. Unless the extension in question only supports the Use Case #1: Native App Login capability of the App Extension API.\nPlease note that the capability I added in this PR, does not use the Use Case #1: Native App Login , (a.k.a org.appextension.find-login-action) at all . Instead, it uses the Use Case #4: Web View Filling Support which uses org.appextension.fill-browser-action as the item provider's type identifier.\nHope that this helps :-)\nBest,\n. Hi @jpvasquez ,\n\nInstead of self , you could put extensionItem directly in the activityItems array. If you do that, then you won't need to check for the bundle-id, i.e., you won't need to implement the UIActivityItemSource protocol.\n\nIf we do not do the bundle identifier check (isPasswordManagerActivityType) at all, there is a high risk of breaking other potential Action Extensions. In an attempt to be good citizens to activities, we believe that the safest way is to preserve the current implementation specific to password managers and allow other Action Extensions to use the activity view controller\u2019s completionWithItemHandler.\n\nSince other activities do not return actionable data (if any at all) to the completionWithItemHandler callback.\n\nThis is a presumption that we should not make. We don\u2019t know what other activities the Firefox team will want to add to this activity view controller. We could also have other activities (Action Extensions) which are not explicitly added in the code to the activity view controller. For example a translator Action Extension similar to the one demoed by Apple during WWDC 2014.\nThe entire purpose of the isPasswordManagerActivityType function is to limit web view filling to password managers which support Use Case #4: Web View Filling Support. Other action extension should not perform fillReturnedItems.\nThe original intent of the local function, isPasswordManagerActivityType, was to limit fillReturnedItems to extensions that conform to the Web View Filling Support capability of the App Extension API. Other password managers were meant to update it (isPasswordManagerActivityType) with their bundle identifier in subsequent PRs as they add support on their end, as seen below:\nswift\n    private func isPasswordManagerActivityType(activityType: String?) -> Bool {\n        var isOnePassword = OnePasswordExtension.sharedExtension().isOnePasswordExtensionActivityType(activityType)\n        var isPasswordManager = (activityType == \"bundle.identifier.for.another.password.manager\")\n        return isOnePassword || isPasswordManager\n    }\n@st3fan, is there any reason why we shouldn\u2019t go on with this approach?\nBased on the above, do you think that the labels of the PR are accurate? This PR does not require any further changes, as far as I am aware of. In my opinion it can be merged in its current state as soon as 1Password 5.5 hits the shelves.\nThank you :smile:\n. @jpvasquez, findLoginForURLString: does indeed return a dictionary to the host app and so does the 1Password capability that I am integrating here. The difference is that in the case of findLoginForURLString: we return a dictionary with the credentials (username and password) and for this capability we return a dictionary with a fill script which we inject (Javascript) into the given web view emulating the Safari capability (Credit Card and Identity filling too). Basically, this capability has nothing to do with findLoginForURLString:.\nMake sure that you take a look at the definition of fillReturnedItems: and executeFillScript:.\nHope that this helps :wink:\nBest,\n. Hello @jpvasquez,\n\n\nThere's no reason to delay sending the org.appextension.fill-browser-action payload, which is created using the call to createExtensionItemForWebView() . You can put it directly in activityItems array you'll pass to the activity sheet, thereby eliminating the need to implement UIActivityItemSource altogether.\n\n\nWe did try to implement something similar to your suggestions in the past and the results were unsuccessful:\nAdding \"org.appextension.fill-browser-action\u201d to the activityItems array caused some share activities/extensions disappear from the share sheet. See issue #141\nThat is why we are using the UIActivityItemSource protocol and the current implementation. We also took the time to create a gist about adding the 1Password Extension to a custom UIActivityViewController.\nThe proposed implementation  for FireFox uses that gist as a guideline. The gist comes with Swift and Objective-C sample apps. I\u2019d be awesome if you could modify those sample apps and \u201cconvince\u201d me of a better solution ;-)\n\n\nWhen an extension send you data back (OnePasswords, pwSafe's, or any other type of extension you may support in the future), you can inspect the returned data to process it correctly.\n\n\nThat is exactly what we are already doing in fillReturnedItems:. The thing is that if the completed activity item is not a password manager, we want to give it the chance to inspect the returnedItems array too. That is why we should explicitly check it\u2019s a password manager (isPasswordManagerActivityType:). As I mentioned in one of my previous replies: Once, we merge this PR, each password manager which conforms to 1Password App Extension API, more specifically \"org.appextension.fill-browser-action\u201d, will have to add its extension bundle Identifier in isPasswordManagerActivityType:. It\u2019s a one-liner PR for each password manager. Does this sound unreasonable?\nHope that this helps :-)\n. @jpvasquez :+1: \n. The pleasure was mine @jhugman :+1: \n. @st3fan @jhugman, the App Extension API supports Carthage on the add-framework-support. Which is being kept in sync with master. We strongly recommend that you point to its latest commit, 8afe2fad841c0439c4db6f8e2ac4d4c7e1e7a4bd (the merge commit right after the 1.6.4) or to the 1.6.4 tag itself.\n. We should probably log something here.\n. ",
    "jpvasquez": "Pwsafe is also generic, supporting all ext points offered by the one password sdk, including both ones to fill a web view. \nThe thing with the bundle id is because Chrome\nchecks for it that way. Without a bundle-ID like this, it won't send the required payload to the extension, except for one-password's, whose bundle-I'd has been hard-coded and grandfathered by Google's developers.\n. Edit: activity type IS the bundle-id.\n~~I just reviewed the pull request. The code is correct, but the comments and strings are not. The activity type is not a bundle identifier, the activity type is an activity identifier. As far as\nI can foresee, the current code should work with all one-password-sdk compatible pw managers. That couple of lines mentioning the bundle id of other password managers isn't needed, unless you wish to support other types of password managers extensions. In that case, you won't be looking for bundle identifiers, but for activity Ids instead.~~\n. @radazzouz \n\nIf we do not do the bundle identifier check (isPasswordManagerActivityType) at all, there is a high risk of breaking other potential Action Extensions. In an attempt to be good citizens to activities,\n\nNot really. The extension has to ask for a specific data type before fetching whatever has been put in the extension item. Like this:\nSwift\n          if(itemProvider.hasItemConformingToTypeIdentifier(kUTTypeAppExtensionFindLoginAction))\n          {\n            self.loadAppDataFromExtensionHost(itemProvider, mode: .FindLogin, typeIdentifier: kUTTypeAppExtensionFindLoginAction)\n            return\n          }\n          else if(itemProvider.hasItemConformingToTypeIdentifier(kUTTypeAppExtensionChangePasswordAction))\n          {\n            self.loadAppDataFromExtensionHost(itemProvider, mode: .ChangePassword, typeIdentifier: kUTTypeAppExtensionChangePasswordAction)\n            return\n          }\n          else if(itemProvider.hasItemConformingToTypeIdentifier(kUTTypeAppExtensionSaveLoginAction))\n          {\n            self.loadAppDataFromExtensionHost(itemProvider, mode: .SaveLogin, typeIdentifier: kUTTypeAppExtensionSaveLoginAction)\n            return\n          }\n          else if(itemProvider.hasItemConformingToTypeIdentifier(kUTTypeAppExtensionFillWebViewAction))\n          {\n            self.loadAppDataFromExtensionHost(itemProvider, mode: .FillWebView, typeIdentifier: kUTTypeAppExtensionFillWebViewAction)\n            return\n          }\n          else if(itemProvider.hasItemConformingToTypeIdentifier(kUTTypeAppExtensionFillBrowserAction))\n          {\n            self.loadAppDataFromExtensionHost(itemProvider, mode: .FillWebView, typeIdentifier: kUTTypeAppExtensionFillBrowserAction)\n            return\n          }\nThe idea behind the UIActivityItemSource protocol used to supply the extension data afterwards is to avoid a eventual high processing cost to fetch or convert data. For example, if you need to extract all the webpage text for translation (see below). This protocol is not meant for the host app to find out what the extension wants. This is done via the types you send to the action sheet.\n\n\nSince other activities do not return actionable data (if any at all) to the completionWithItemHandler callback.\n\nThis is a presumption that we should not make. We don\u2019t know what other activities the Firefox team will want to add to this activity view controller. We could also have other activities (Action Extensions) which are not explicitly added in the code to the activity view controller. For example a translator Action Extension similar to the one demoed by Apple during WWDC 2014.\n1. The returned data type's is plist, which is really generic. But you can check the contents to see if it's a dictionary and if it contains the keys you need\n2. The translation extension will not work in Firefox. Safari has a unique capability to inject a javascript file from the action into the page and run it before and after the extension is invoked. This is not a capability third-party browsers can use. If you want a translation extension, you'll have to explicitly extract the data to be translated yourself, send it to the extension and then replace the extension results into the web view.\n. @radazzouz, findLoginForURLString: is part of the host app, because it's part of the SDK you embed in it. The dictionary it returns comes from the extension, which can be OnePassword or otherwise (pwSafe, for instance, works with it).\n\nIn the case of filling web views, the extension also returns a dictionary to the host app, which then extracts a small JSON and integrates with a  hard-coded javascript (OPWebViewFillScript) to fill the items. And pwSafe's extension also works in this mode.\nIn any case, my point is still valid: \n1. There's no reason to delay sending the org.appextension.fill-browser-action payload, which is created using the call to createExtensionItemForWebView() . You can put it directly in activityItems array you'll pass to the activity sheet, thereby eliminating the need to implement UIActivityItemSource altogether.\n2. When an extension send you data back (OnePasswords, pwSafe's, or any other type of extension you may support in the future), you can inspect the returned data to process it correctly. For instance, for the password filling script, this is the structure returned:\n``` swift\n// Web Fill Script Keys\nlet AppExtensionWebViewPageFillScript = \"fillScript\"\n// construct jsonString according to what the One Password SDK expects\nlet result = [\n        AppExtensionWebViewPageFillScript : jsonString!\n      ]\nlet itemProvider = NSItemProvider(item: result, typeIdentifier: kUTTypePropertyList as? String)\nlet extensionItem = NSExtensionItem()\nextensionItem.attachments = [itemProvider]\nif let extensionContext = self.extensionContext  {\n  // This send the results back to the host app\n   extensionContext.completeRequestReturningItems(extensionItems, completionHandler: nil)\n}\n```\nIf you make these changes, Firefox will be able to work, out-of-the-box with any password manager which makes itself compliant with OnePassword's model, which includes pwSafe. I don't see what's to gain from needing to white-list passwords managers one by one, when they all present the same interface for browsers and other apps. \nThat's the whole idea behind extensions: neither the extension nor the host app need to know one another. For instance, the iCab browser already does that. Since it supported OnePassword's extension model the way I'm describing, when I released pwSafe's extension, it just worked, without any need to modify iCab or pwSafe's extension. The same goes for many other apps which fill web forms, such as Tweetbot, which uses it to loging to Twitter.\nRecaping: pwSafe's extension, apart from its bundle-id, is indistinguishable from OnePasswords from the host app perspective. They have the same capabilities and behave according to the same interface. Implementing the changes I suggest, you'll be able to support pwSafe and any other password manager which adheres to the same rules defined by Agile Bits (that was their declared intention).\nThe only reason why pwSafe's extension has that find-login-action in its bundle-id is because Google Chrome was already in the wild with that odd requirement, leaving me the choice to either wait for them to fix their app or change pwSafe's extension bundle-id immediately allowing my users who use Chrome to enjoy pwSafe's extension. pwSafe's extension is not limited to this action, it does everything that OnePassword's  does. As a matter of fact, its first version did not have that string in its bundle-id, and it worked with everything but Chrome.\nIf I failed to convince you or if I couldn't make myself clear enough, I would love to chat or talk with about this. I can even share my screen with you over Skype and show what happens from both sides (host and extension) using the sample apps and pwSafe's extension. Please write me to jorge at app77 dot com so that we can setup a time.\nCheers,\n. @radazzouz I can also send you a promo-code of pwSafe and guide you through testing the setup I described, if you prefer. In that case, I can fork your repository and issue a pull-request against you. Just let me know.\nCheers,\n. @radazzouz and I just talked to one another directly and reached a common ground. \nDue to that iOS bug @radazzouz describes on his last comment above, my proposed changes wouldn't work. \nNevertheless, we decided to use \"password\" as a substring to be searched for in the activity extension bundle-id, avoiding the need to white-list password managers one by one, thus allowing developers to make their extensions compliant with Firefox (and other apps which use the SDK code), without the need to contact every known host app developer manually.\nThe commit above (https://github.com/radazzouz/firefox-ios/commit/b167894df84fd74f88d7974193fb9f8175f8883c) implements this.\nCase closed, as far as I am concerned.\n. ",
    "xusader": "@xusader    Update SearchSettingsTableViewController\n. https://github.com/mozilla/firefox-ios/commit/115bbaf7a88c2f2e93545d5503cd9bcd3ce5d126\nUpdate SearchSettingsTableViewController \n. Thanx!!!\n\nAm 16.06.2015 um 17:39 schrieb Stefan Arentz notifications@github.com:\nMerged #513.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "ghost": "@st3fan \nHere a bug report from user\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1172287\nThe app iCab mobile (third party app) is really nice in app store. Have many many functions. Can you copy the idea from third party app?\n. Since iOS Firefox uses WKWebView, it reports as its user agent as Safari. \nFixed thusly:\n< iOS 9 : NSUserDefaults.standardUserDefaults().registerDefaults([\"UserAgent\": \"Your user agent\"])\n\">= iOS 9: f #available(iOS 9.0, *) {\n    webView.userAgentString = \"Your user agent\"\n}\"\n. Did you disable the cookies on Firefox?\n. ",
    "jaredStef": "I was on IRC and it was mentioned that the iOS and Firefox teams would both have to work together in order to get this to work \n. There was no set date. You can ask on irc.mozilla.org on the #mobile channel. There may be an open big on bugzilla \n. Yes! I was at yearbook camp and just got home. I will most likely be done tomorrow. \n. I have squashed my commits\n. @thebnich Any reason why the PR is taking so long? \n. Not sure why this was commited\n. ",
    "bkmunar": "lttm\n. lttm\n. wip\n. lttm\n. lttm\n. lttm\n. Ahhhhh ok I see, I was super confused as to why I couldn't find a better way to do this in the first place haha thanks for clarifying!!\n. MUUUCHHH better patch, thanks for the suggestion! <3\n. lttm\n. better?\n. ugh @thebnich u always catch me\n. Yeah I saw this too, gonna try and fix it (or consult you if idk what it is haha)\n. I think i just rebased it(?)\n. \n. Fixed everything you asked for mah deer bnicholz, lemme know when to mergeth\n. doneziez\n. ok, check this now Bnicholz\n. got it, thanks!\n. you can make a final check if you'd like! @sleroux \n. done w/ nitz\n. updated! @rnewman \n. @rnewman lemme know how it looks!\n. thanks!!\n. did some refactoring @thebnich \n. @sleroux I updated the code with your revision comments and made some constraints for titleLabels to be priorityLow() so that there's no conflicting constraints when we're updating the constraint of the value prop. lemme know how it looks!\n. 1. dupes will be fixed in next patch, https://bugzilla.mozilla.org/show_bug.cgi?id=1249068\n2. Will investigate\n3. will talk to Robin\n@sleroux \n. @thebnich @tecgirl ready for final review!!!\n. @thebnich \n. ready 4 u\n. Also, sleroux, I think the the gray screen is the product of the whole iPad 2 not being able to light itself up correctly... like that one bug a million years ago where everything seemed gray\n. cause on the iPad Air 2, the color is fine.. idk what we want to do about this. maybe just change the color to white? idk question for @tecgirl \n. @sleroux We do want to support hiding items for highlights per Bryan Bell's request to add a \"dismiss\" option for the context menu. Also, idk to me I feel like Top Sites algo is the same b/c my desktop top sites seem to be my phone top sites\n. Ready for rereview! But Idk why the changes aren't hiding your guys' comments :( @sleroux \n. Any updates on this?\n. @sleroux  that's already included in a previous patch, i think it works already right?\n. @sleroux ready for you again\n. @sleroux ready for u again\n. looks good!!. This is looking good so far, but preliminary things first:\n1. Could you squash your commits together into one commit? That'd be cooolsies\n2. @tecgirl I feel like we need icons for Open in New tab and Open in Private tab dont you think? it looks kind of weird if 4 of the items have icons and two don't, etc. (maybe use the + and the private mask, respectively?). up for review again when you get back @sleroux . @sleroux back to you! We're going with the most recently visited for now as per Barbara's request -- will file another bug to change if there is a more definite product decision. I'm keeping the DispatchAsync.after... related code because some functions rely on that function (e.g. toasts for Open in New Tab, etc.). It doesn't work, the toast doesn't get shown in the private mode tab tray. Maybe you can merge your change in and then include the part where I change the TabTrayController code. it does!!!. I didn't fix the separator line and gray area since I think we need more UX discussion on that (this design transferred over from the old one and now since we have iPads I'm not sure what we're going to do with it yet). Also the little white part not being shaded in when you tap on a highlight is part of the asset for that image, I can file a bug for it but I don't think it's urgent to fix right now in this PR.. can't use it -- it's closed source. we're blocked on them right now so this is a temporary fix that stefan did a while back so i can at least do some work on leanplum.. Sorry @farhanpatel i didn't flag you for review did i? I thought stefan was supposed to take a look at it. Just kidding! @farhanpatel susheel just got back to me about you taking the review instead :). ITS A MIRACLE!!!! thanks @farhanpatel . There, should be all done!. yeah.... it was pretty tough trying to find a handle to whether the app was in private mode or not in things like LoginsHelper, AppSettingsOptions, BookmarksPanel, etc. things that didn't have a direct link to BVC... so please enlighten me on a better way to get this done!. @sleroux ready 4 u. @st3fan @Sdaswani review time. @Sdaswani @st3fan for you to review!. @st3fan back to you. @st3fan back to you @Sdaswani . finished\n. finished\n. finished\n. finished\n. finished\n. donez\n. i did this but idk what this does, explain it to me when you get back from your disappearance\n. I think it just got moved to another row? (i don't think I did this), but if you open up the hidden lines there's a duplicate of it right under the UISUpportednterfaceOrientations stuff\n. yeahhh this got kind of convoluted when i tried to do the way you proposed!\n. I shall!! thanks for all your help !!!\n. i think xcode did it? or something? i think it's a duplicate that it got rid of?\n. it does! just checked\n. fixed\n. fixed\n. made the separate button class for it and included the function there\n. included the function in the custom button class\n. fixed\n. this is checking to see if the app can be called back from firefox; I already open the tab before the backToAppURL check\n. fixed -- yeah this is why i needed feedback haha i wasn't sure how to follow the coding paradigm, but now it's really clear to me, thanks!\n. fixed\n. took it out\n. fixed -- yeah this is why i needed feedback haha i wasn't sure how to follow the coding paradigm, but now it's really clear to me, thanks!\n. the indexes are based on the type of URL we're constructing (aka with just opening the URL or with the callback button), not sure if there is a better way of handling it? I'll add the verbose commenting explaining the URL formats if we don't find another way\n. yay\n. I found the bug being that somehow, one of the tab's accessibilityLabel is not \"hidden\" (aka is swiped off the tabs page) so the break down function is waiting for the absence of view with that accessibilityLabel and since that view is not absent, the test fails. I'm by passing this by just manually destroying the tab it's complaining about and carrying on as is by calling the break down function (resetToAboutHome)... I'm not too sure why the view is not being considered as absent since we swipe the tab off the screen...\n. becuz it's in da function\n. Same bug, this just allows the user to tap the account row (e.g. brymunar@gmail.com) to go back to the login page just in case something funky comes up and they need to do something (they changed their password, etc. not really familiar on the specifics, but this is to provide a way out of some sync issues that might occur--look to tecgirl for more answers, I think she's the once that wanted this action to be implemented w/ Sync button)\n. What this does is keep the background constant so that weird things don't pop up during the interstitial (i think). I confirmed by taking out these comments and random highlights from the page behind the interstitial would flash before the interstitial was done animating.\n. ahhh I see, so maybe we'd rather it be white or something?\n. I'm not sure... but it seems like we don't need it; so I am taking it out.\n. This was in the previous class, will consult robin/darrin about the confusion (keep it red or change it to firefox orange)\n. done\n. remake undoes everything and remakes while update keeps everything and updates a certain constraint (i believe)\n. because i set it initially and never change it, since we did remake, we had to always set it again? is that why?\n. this is so the line doesn't extend past the alertController (setting the line to the width of the controller is apparently too big?? what)\n. omg the smiley why\n. omg rofl oops idk what my brain did there @__@\n. I think this won't open the what's new page for users upgrading from 1.4 to 2.1 because LatestAppVersionProfileKey will be nil. Probably want to do a nil check as well to show the page. There are three cases we'll find: a user just installed the app in which we do not show What's New, a user upgraded it from 2.0 so they already have the pref set, and a user who upgraded from a version less than 2.0 so they do not have the pref set.\n. You just need to include case 3, case 1 is already handled earlier in AppDelegate and case 2 is what you have here!\n. Also, jk, i think that line will return nil which is great\n. o ya this was for the appending suggested sites solution versus replacement so we don't need it anymore\n. We need to override them or else the parent class' prepareForReuse will be used and we don't want that!\n. Not private b/c favicon fetcher uses the dimensions from TwoLineTableViewCell\n. oops forgot to do this heh\n. I just named them after what tecgirl named them shrug I guess that's what we wanted to go with - \"Recently Closed\"\n. shouldn't it be \"http://www.mozilla.com\" ?\n. I'm assuming it just truncates the text - but they're just 1 - 2 words (e.g. Bookmarked, Open Tab, Visited, Reading List) so hopefully nothing would get chopped off(?) Would ping Bryan Bell for more info if that were to happen\n. Can't you just return the Int(ceil(Double(.... line?\n. *Given that we'll have at least 1 item there? If not, then it looks good to me\n. Tested it without these constraints and I think we need them - the layout gets super wonky without them!\n. got it\n. Highlight Empty State?\n. if this function is that short, you don't need to make one? Unless you want that formality\n. you can bring this outside the makeConstraints closure and label titleLabelInsets, idk it just looks cleaner to leave it out of there - or you can just put the Insets object directly\n. remove\n. I think it's \"action_close\" since the image isn't showing up in the context menu for the Remove action. Maybe you can change the asset file for that or change the strings pointing to the file!. I'd also set bounces to be false since it looks kind of weird that the header cell can be dragged down!. Make a UX struct and add these hardcoded values and access them like so: ActionTableViewControllerUX.height + actions.count.... etc.. You can look at any of the Home Panel classes for references to these structs. I think what you said about the old TopSitePanel going away is correct. No need to spend time on something that's just going to go away. But I'd ask someone else for a second opinion just in case.. Why not just do this in the first switch statement and then add them later? For example, just populate something like an var extraActions = [] and then update that and append it to actions later?. ...forURLAtIndexPath may be more concise?. Yeah looking at it now, it makes more sense to name it removeHistoryForURLAtIndexPath. maybe viewWillTransitionToSize would be a better fit? Because then you can directly check stuff like  if UIDevice.current.orientation.isLandscape {... instead of having the more complicated conditional. This looks like it's only for the TopSites stuff, I think there's already an image property stored somewhere in the cell... I'm not sure but I would ask @farhanpatel since he's been working more closely with it recently. But if there's no way to just get the image/it isn't stored anywhere per cell, then this is fine.. Better than that, can't we just use addTabAndSelect()?. Oh ok cool. put into the struct?. what is the +20 for?. Yes I need help with this, let's do this in a separate branch or something. Contact me about this!. woops forgot to transfer that over!\n. wait, i did transfer it over! it's in leanplum integration... should i separate it? might be redundant. it's not, but that's how the events are triggered... maybe i should just take it back out of LeanplumIntegration?. There is a tab tray on ipad. So yes this works. @Sdaswani . For the setEnabled() function, it doesn't seem like disabling it by passing false will do anything (it will just bypass the check). This is related to how we can't shut it off during the app right? I can put the user attribute code before that line, but I guess this is a separate question aka I don't think it matters where I put that line of code because setEnabled won't stop the Leanplum server if we pass false; I'm assuming ideally that this function would shut Leanplum off as it's supposed to? Otherwise, it doesn't matter where the line of code goes. If the assert passes, then it's fine--this code shouldn't execute if we're not on the main thread anyway.. This is a question or @sleroux -- I think he said something about this code isn't really needed anymore since some work that he did is not used anymore? Plus, if we don't have this ensured then deeplinks can't work. Unfortunately it relies on a lot of vars already in AppDelegate to push the controllers, assign certain delegates to VCs so it's convenient to just leave it there, I can make a bug to place it somewhere else if we really want to.. I just carried over from the previous switch statements -- I think it acts as an empty block. woopz. name these variables more concisely please!. just using a different function that does the same thing. yes it does; but it's cleaner code since the rest of the app uses track() so might as well use it here. Also, per stefan's request. ",
    "czechboy0": "@thebnich Ping me if you guys need any help with Buildasaur! AFAIK no changes should be necessary for Xcode 6.4 (and a completely new version will be needed for Xcode 7).\n. ",
    "Velociround": "Xcode Version 6.4 (6E35b)\nApple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)\nTarget: x86_64-apple-darwin14.4.0\nThread model: posix\n. ",
    "reza-ryte-club": "Try installing Carthage.pkg from https://github.com/Carthage/Carthage/releases \nThen go to your firefox source directory from terminal.\nGive the following command:\n./checkout.sh\nafter installing necessary dependencies open the Client.xcodeproj file from finder with XCode.\nThen in order to build Command+B\nYou can run then with Command+R.\n. Thanks.\n. ",
    "pbernery": "Same issue here.\nWhere does the sqlite3.c file dependency comes from? The Sqlite Cipher project does not seem to contain any sqlite3.c file nor does the firefox for iOS repository.\nBy the way, but this is more related to Carthage, I had to manually fetch dependencies as Carthage segfaults on my machine with the Firefox for iOS Cartfile.\n. I managed to make it compile: I first opened the sqlcipher Xcode project, built the sqlcipher target then reopened the Firefox for iOS project and it passed.\nIt seems to be a build dependency failure of Xcode.\n. I forgot to mention that I used the latest sqlcipher project for that. However, the default configuration seems to not be good for Firefox. I got back to the version delivered with Firefox. I had to build the sqlcipher dependency (amalgamation) manually. In a Terminal, in the ThirdParty/sqlcipher directory, type:\nshell\n./configure --enable-tempstore=yes --with-crypto-lib=commoncrypto CFLAGS=\"-DSQLITE_HAS_CODEC -DSQLITE_TEMP_STORE=2\"\nmake sqlite3.c\nThe command is taken from the amalgamation target Run Script build phase of the sqlcipher Xcode project.\n. Indeed.\nI did not know if you would prefer to use explicit parameters or use this default parameter feature.\nNoted for a future patch.\n. I changed this to simplify the code. Using the sourceView superview always works.\n. I added some //MARK: - comments to ease navigation in the code. There is a lot of code in BrowserViewController and even though it is splitted in several extensions, it it hard to navigate from one extension to another with the Xcode jump bar without these marks.\n. Indeed\n. You're right. I'll change this rapidly.\n. displayedPopoverController could indeed be a weak reference and this would work. However we also need the updateDisplayedPopoverProperties reference and this one cannot be weak as BrowserViewController is the owner of this property and no other object as a reference to it. \nI don't think about another way of doing this. If you do, let me know :)\n. I just thought that I still need to keep a reference to displayedPopoverControlleras I dismiss it then need redisplay it after the rotation/size changes.\nSo I'll keep this as it is. \n. Damned, you're right. I can't get use to this notation :).\n. ",
    "ackratos": "Close this pull request for the bug has been marked as duplicated.\n.  Sorry for wrong parent commit. I will close this pull request.\n. @rnewman @sleroux Thank you for your kind recommendation. I will check the condition mentioned by @sleroux \n. To @rnewman \nI think I have found the root cause of this problem. It because when we remove the last tab. TabManagerDelegate will add the \"initial guide tab\", but it doesn't select that tab. So the first fix works only when assign 0 to _selectedIndex. But we both believe that -1 is the right initial value of _selectedIndex.\nTo @sleroux \nWhen the TabTrayViewController showed, the \"count\" property of tabmanager is 1. It's right and because of the tab manager delegate will add a tab after remove the last tab. It was this call caused the collectionViewController fail.\nIn a nutshell, it was the lack of selectTab() after addTab() caused this bug.\n. ",
    "kar1m": "Alright, I added the constant.\n. Bug was fixed.\n. I still need tabsNetworkActivity because didStartProvisionalNavigation gets called twice, plus the user can click links even if the page didn't finish loading, so I need to keep track of each tab's network activity. I think removing the WKWebView instance for each tab the user closes should fix the memory leak.\n. Yes I need to take that into account, the delegate methods are not called after closing the tab. But for this I need to keep the network state of each tab (active/inactive) in memory so I can know if I need to decrement the counter after closing a tab.\n. I can change it to > 0 but I think == 1 is enough because we want to enable the spinner when the counter goes from 0 to 1.\n. I force unwrapped the tab's webView property, because I assumed that when closing a tab, the webView has already been created. It worked fine during my tests. Correct me if I'm wrong.\n. It's not true indeed, I corrected the code. Thanks for the clarification.\n. Here are 2 screenshots for the same link: first is with 3 dots and the second with an ellipsis.\n\n\n. I basically want a shared instance of BluetoothKeyboardManager in the app, which will have a weak reference to all its delegates. There are 2 ways of doing that that I know:\n1. Create and store the instance in the appDelegate and retrieve it from UIApplication.sharedApplication().delegate, which is what I'm doing.\n2. Use a singleton\n. ",
    "allenngn": "Hey, I folded down the patch and wrote some tests. It passed. Is this okay now?\n. Figured it out. Upstream master was updated a lot before my pull request could be looked at, making a lot of build errors\n. Hey just redid it. Is that better?\n. I'm sorry, I'm not sure what \"s/Url/URL\" means. Is that a directory?\n. Ahh yes, the search and replace function. Sorry I didn't realize that was the context for that line. Gee, I really wish Xcode had a vim mode for the text editor. Would make navigating these long files so much easier\n. ",
    "ryanolsonx": "check out https://github.com/mozilla/firefox-ios/blob/master/BUILDING.md and make sure that you follow all of the steps outlined in the section \"Run on a Device\"\n. ",
    "taher-mosbah": "I messed up this pull request, I'm making two separate ones for each bug.\n. ",
    "facekapow": "Ok, thanks anyway.\n. Checked back on this, saw it was finally upgraded to Swift 2.0 and Xcode 7!\n. ",
    "Johennes": "@rnewman Thanks for the comments. I'll work your suggestions in. I probably won't manage to do so before the weekend though. Hope that's ok.\n. I rebased the commit and switched to using profile.hasSyncableAccount() which seems to work as expected. I also made a minor adjustment to when the refresh control's animation is ended (see my comment before this one).\n. So the idea would be to match either the whole filter string or a combination of it's individual words minus duplicates and substrings? I will try to get that in and then take a shot at getting the SQL query plan and compiling some performance data.\n. I got the suggested changes in. The algorithm for dropping duplicates and substrings is not very sophisticated but I think it should do for a basic test given that the concerns were about SQL (not Swift) performance.\n. I finally got around to investigating the performance. This is an example of the resulting select statement for the search string \"firefox is my favorite browser\" without splitting (as in master)\nsql\nSELECT historyID, url, title, guid, domain_id, domain, localVisitDate, remoteVisitDate, localVisitCount, remoteVisitCount, iconID, iconURL, iconDate, iconType, iconWidth\nFROM (\n  SELECT historyID, url, title, guid, domain_id, domain, max(localVisitDate) AS localVisitDate, max(remoteVisitDate) AS remoteVisitDate, sum(localVisitCount) AS localVisitCount, sum(remoteVisitCount) AS remoteVisitCount\n  FROM (\n    SELECT history.id AS historyID, history.url AS url, title, guid, domain_id, domain, COALESCE(max(case visits.is_local when 1 then visits.date else 0 end), 0) AS localVisitDate, COALESCE(max(case visits.is_local when 0 then visits.date else 0 end), 0) AS remoteVisitDate, COALESCE(sum(visits.is_local), 0) AS localVisitCount, COALESCE(sum(case visits.is_local when 1 then 0 else 1 end), 0) AS remoteVisitCount\n    FROM history INNER JOIN domains ON domains.id = history.domain_id INNER JOIN visits ON visits.siteID = history.id \n    WHERE ((history.url LIKE \"%firefox is my favorite browser%\") OR (history.title LIKE \"%firefox is my favorite browser%\"))\n    GROUP BY historyID)\n  WHERE ((localVisitCount + remoteVisitCount) > 0)\n  GROUP BY historyID\n  ORDER BY (localVisitCount * (5 + localVisitCount)) * max(1, 100 * 225 / (((1440319682374770 - (localVisitDate)) / 86400000000.0) * ((1440319682374770 - (localVisitDate)) / 86400000000.0) + 225)) + remoteVisitCount * max(1, 100 * 225 / (((1440319682374794 - (remoteVisitDate)) / 86400000000.0) * ((1440319682374794 - (remoteVisitDate)) / 86400000000.0) + 225)) DESC  LIMIT 100 )\nLEFT OUTER JOIN view_history_id_favicon ON historyID = view_history_id_favicon.id\nand with splitting (as in this pull request)\nsql\nSELECT historyID, url, title, guid, domain_id, domain, localVisitDate, remoteVisitDate, localVisitCount, remoteVisitCount, iconID, iconURL, iconDate, iconType, iconWidth \nFROM (\n  SELECT historyID, url, title, guid, domain_id, domain, max(localVisitDate) AS localVisitDate, max(remoteVisitDate) AS remoteVisitDate, sum(localVisitCount) AS localVisitCount, sum(remoteVisitCount) AS remoteVisitCount\n  FROM (\n    SELECT history.id AS historyID, history.url AS url, title, guid, domain_id, domain, COALESCE(max(case visits.is_local when 1 then visits.date else 0 end), 0) AS localVisitDate, COALESCE(max(case visits.is_local when 0 then visits.date else 0 end), 0) AS remoteVisitDate, COALESCE(sum(visits.is_local), 0) AS localVisitCount, COALESCE(sum(case visits.is_local when 1 then 0 else 1 end), 0) AS remoteVisitCount\n    FROM history INNER JOIN domains ON domains.id = history.domain_id INNER JOIN visits ON visits.siteID = history.id \n    WHERE (((history.url LIKE \"%firefox is my favorite browser%\") OR (history.title LIKE \"%firefox is my favorite browser%\"))\n          OR ((history.url LIKE \"%firefox%\") OR (history.title LIKE \"%firefox%\"))\n          AND ((history.url LIKE \"%is%\") OR (history.title LIKE \"%is%\"))\n          AND ((history.url LIKE \"%my%\") OR (history.title LIKE \"%my%\"))\n          AND ((history.url LIKE \"%favorite%\") OR (history.title LIKE \"%favorite%\"))\n          AND ((history.url LIKE \"%browser%\") OR (history.title LIKE \"%browser%\")))\n    GROUP BY historyID)\n  WHERE ((localVisitCount + remoteVisitCount) > 0)\n  GROUP BY historyID\n  ORDER BY (localVisitCount * (5 + localVisitCount)) * max(1, 100 * 225 / (((1440319482893215 - (localVisitDate)) / 86400000000.0) * ((1440319482893215 - (localVisitDate)) / 86400000000.0) + 225)) + remoteVisitCount * max(1, 100 * 225 / (((1440319482893270 - (remoteVisitDate)) / 86400000000.0) * ((1440319482893270 - (remoteVisitDate)) / 86400000000.0) + 225)) DESC  LIMIT 100 )\nLEFT OUTER JOIN view_history_id_favicon ON historyID = view_history_id_favicon.id\nThe SQLite query plan for both is identical and looks like this\n2|0|0|SCAN TABLE history\n2|1|1|SEARCH TABLE domains USING INTEGER PRIMARY KEY (rowid=?)\n2|2|2|SEARCH TABLE visits USING COVERING INDEX idx_visits_siteID_is_local_date (siteID=?)\n1|0|0|SCAN SUBQUERY 2\n1|0|0|USE TEMP B-TREE FOR GROUP BY\n1|0|0|USE TEMP B-TREE FOR ORDER BY\n4|0|0|SCAN TABLE favicon_sites USING COVERING INDEX sqlite_autoindex_favicon_sites_1\n4|1|1|SEARCH TABLE favicons USING INTEGER PRIMARY KEY (rowid=?)\n3|0|0|SCAN TABLE history USING COVERING INDEX sqlite_autoindex_history_2\n3|1|1|SEARCH SUBQUERY 4 USING AUTOMATIC COVERING INDEX (siteID=?)\n0|0|0|SCAN SUBQUERY 1\n0|1|1|SEARCH SUBQUERY 3 USING AUTOMATIC COVERING INDEX (id=?)\nThe select that is matching against the search string has the ID 2 and appears at the very top. It results in a single full table scan of the history table.\nI also measured the query time using the command line interface of SQLite. The unsplit version averages around 17ms whereas the split version takes about 21ms. This is of course a unique example but it, nevertheless, gives some hints about the impact we'd have to expect.\n. Concerning the pathological case, I was about to propose to order the split filter words by their length but it actually seems that this doesn't make much of a difference. Comparing the average of 20 runs of\nsql\nWHERE (((history.url LIKE \"%a www%\") OR (history.title LIKE \"%a www%\")) OR\n       ((history.url LIKE \"%a%\") OR (history.title LIKE \"%a%\")) AND\n       ((history.url LIKE \"%www%\") OR (history.title LIKE \"%www%\")))\nagainst\nsql\nWHERE (((history.url LIKE \"%a www%\") OR (history.title LIKE \"%a www%\")) OR\n       ((history.url LIKE \"%www%\") OR (history.title LIKE \"%www%\")) AND\n       ((history.url LIKE \"%a%\") OR (history.title LIKE \"%a%\")))\nresults in a query time difference of merely about 1ms (total query time about 55ms) for me. This also stays true when I use a more specific second word like in \"a sophisticated\".\nWould it be an option to omit short words (e.g. <= 3 characters) from the split part of the where clause? In this case, \"a www\" would result in just\nsql\nWHERE (((history.url LIKE \"%a www%\") OR (history.title LIKE \"%a www%\")))\nwhich is the current unsplit form.\nI totally agree about the tests. I just wanted to nail down the logic (and whether or not to move forward) first before investing into them.\n. I'm gonna rebase this on master and try to get some basic tests going within the next days.\n. I've been thinking that by removing short/noise words (which makes the query more specific) we would also reduce the number of results but you're probably right - especially since I'm not sure whether this would work out in different languages.\nI'll have to break my promise of updating the PR within the next days. I'll probably do it on the weekend, sorry.\n. I finally rebased the commit on master and migrated it to the latest Swift syntax. I also did some refactoring and added unit tests. I was unable to actually test the Client scheme, however. There are syntax errors in some test files and even after fixing them, tests would always crash with an unexpected nil during unwrapping. I verified that my tests succeed with a separate sample project.\n. Any further thoughts on this? Anything I should change or improve?\n. Awesome! :)\n. It seems like the swift-2.0 branch of Alamofire was merged and deleted upstream which means that the Cartfile currently points to an invalid reference.\n. @sleroux / @st3fan: Let me know in case you indeed decide to land this and I'll rebase it.\n. One thing I noticed while testing is that some sites redirect mobile user agents to dedicated subdomains like for instance m.facebook.com. Reloading that particular URL with a desktop user agent brings up a different but still mobile-targeted page instead of the expected desktop site. We could strip the m. prefix but I wasn't sure if that wouldn't be too much magic.\n. Using the backForwardList for acquiring the initial URL seems to work. Great tip! I didn't know that we have the redirect history at our fingertips.\nI also incorporated the other changes you suggested (user agent calculation and user agent reset on navigation). During testing in the simulator I - once in a while - see cases in which the long-press reload does not load the desktop site. It could be that the user agent resetting in didCommitNavigation undoes the spoofing too early in some case. I'll have to test this more thoroughly to be sure, though.\n. I found some time for further testing and it seems that my initial suspicion was a bit hasty. Resetting the agent in didCommitNavigation does appear to be fine. The real problem was that WKWebView's loadRequest method has some sort of internal caching logic and does not always perform actual network requests when the URL to load is identical to the current URL. I verified this by monitoring my network traffic while running the app in the simulator. To overcome this, I switched to calling reload when the URL is not changed due to redirects and it appears to work as expected now.\nOne more thing I noticed about redirects and m. subdomains: Using the initial URL works great when you entered the desktop URL (like facebook.com) and were then redirected to a mobile subdomain (like m.facebook.com). However, once you are on the mobile subdomain and start navigating to different pages on that domain there is no redirection anymore. Hence, when you long-tap the reload button to request the desktop site, we cannot determine any initial URL. I'm not sure if we can (and should) work around this, however.\n. Yes, sorry, I forgot to mention that I also tried the cachePolicy parameter but to no avail. I just double checked this and for whatever reason it appears to only happen on stackoverflow.com. When I load that page and long-tap reload, I usually end up with the mobile site instead of the expected desktop site and there are no observable network requests during the reload. Only when I repeatedly long-tap reload, I ultimately see a network request and the page reloads with the desktop appearance. This seems to happen regardless of what I specify for the cache policy (or the timeout interval) and is also independent of whether I reset the user agent in didCommitNavigation or not.\nThe fact that there is no actual network request when using loadRequest could mean that WKWebView handles the caching autonomously either on top of the standard URL content cache or in its own cache. I wasn't able to dig up any documentation on this behavior, however, and it's very confusing that it only seems to happen on one particular site.\nI made a change to use the \"cache-policy initializer\" of NSURLRequest when the initial URL is different from the current URL. Shall I keep it like this or shall I use loadRequest in all cases?\nPS: Fully agree on the m. subdomains. :)\n. I added the action sheet UI as requested by Darrin on bugzilla.\n. One more thing I just came to think about is how do we want the normal reload tap to work when the current page was loaded with the desktop UA? Currently it will reload the page with the default mobile UA. Would it maybe be better to instead reload with the UA of the last navigation so that the user is not kicked back to the mobile presentation?\n. Thanks for the suggestions. I worked everything in. Short summary:\n- Deleted placeholder strings from UIConstants\n- Removed the defaults parameter from desktopUserAgent. I wasn't sure if you also wanted me to remove the argument from defaultUserAgent. I think it would make sense but wanted to check back with you first. In any case, I chose to not use a static variable for the defaults because both methods are called rather infrequently.\n- Turned lastCustomUserAgent string into a boolean desktopSite. I could not perform the toggling in didSet, however, because that led to an infinite loop. In didFinishNavigation we need to remember whether the desktop site was requested or not (for the toggling). When we set desktopSite here and have the toggling in didSet, that'll lead to another reload and we start over.\nIn addition, I added two basic UI tests.\n. Ok, it's done. :)\nSince the defaults argument in defaultUserAgent is needed in ClientTests.swift, I kept it around but made it optional with a nil default value. When the method is called without an argument, it'll load NSUserDefaults(suiteName: AppInfo.sharedContainerIdentifier())! then. I also updated the users of defaultUserAgent - the UserAgent class itself and the AppDelegate.\n. @thebnich Yes, you're absolutely right. The tests use the very same defaults as the app so there is really no need to keep them injectable. Sorry, I missed that.\nI dropped the defaults argument from all methods in UserAgent now and instead set up a static variable. I guess it's ok to keep the defaults around like that. NSUserDefaultsPrefs, for instance, seems to do the same (but on an instance level).\n. Thanks for letting me have it in the first place although it was on your roadmap. This was a great experience! :)\n. @rnewman: I updated the PR with the small fixes you suggested.\nI actually thought about using the link title for further hints as well. I didn't do it (yet) because it's not straightforward to get the actual content of the <a> element that was tapped. I managed to do that by injecting Javascript into the web view but I'm not sure if that would be the best option (currently asking for other opinions on Stackoverflow.\nI think once we have the link title it wouldn't be too hard to use it for deciding whether to use the national or the international number format. We could basically parse the title just like the number. I can look further into this in case that would be appreciated.\nAlso, I think this PR is still blocked by https://github.com/mozilla/firefox-ios/pull/1208. I cannot run the update.sh script because of the outdated Alamofire reference.\n. @rnewman I had to rebase on master again. This time, luckily, it was merely a project file conflict. Cartfile.resolved is also updated properly now.\nAny further thoughts on using the link text for hints about whether or not to display the country code? The only option I found for getting the link text is by injecting Javascript into the webview (see here). Do you think that would be an acceptable approach?\n. Oh noes. Sorry, I didn't mean to rush this. Take your time. I can always rebase. :)\nI reported 1228732 on bugzilla for using the link text for further hints.\n. @sleroux I rebased the PR on master. Could you check again?\n. I decided to do away with the suggestionsAreVisible method because it only works reliably when suggestions are not visible. If suggestions are expected to be visible, waitForViewWithAccessibilityHint has to be called for a robust test. The latter can, however, not be used when suggestions are expected to be absent because it'll terminate the test if the waiting times out. As a result, it appeared to be too easy to misuse the suggestionsAreVisible method which is why I decided to inline it in the appropriate cases.\n. I think that technically the greaterThanOrEqualTo and lessThanOrEqualTo constraints are required. When the view is initialized with a zero size, the left and right space constraints will break due to their non-required priority. That's what we want to not impose a minimum size on the view that would conflict with the initial zero size and result in the warning on the console. However, when these constraints break, it also means that the label's x position is no longer determined, unless we add any kind of fallback constraints.\nSo that's the theory. Practically, however, I could not see any issue on the console when omitting the greaterThanOrEqualTo and lessThanOrEqualTo fallback constraints. I thought that it'll still be safer to add them but if you think they're superfluous or throw up too many questions, I can remove them. Just let me know.\nOther than that, I updated the PR and replaced the 999 literal with priorityHigh. I guess the 750 is still high enough for our purposes.\n. @thebnich Anything else I should change? Shall I rather remove the greaterThanOrEqualTo / lessThanOrEqualTo fallback constraints.\n. Hm, it's, unfortunately, not the project file but a conflict in code. Looks like there was a simultaneous attempt to extract the activity controller creation. I'll have to look into it.\n. @rnewman I rebased the PR on master. I had to move things around a bit but the code itself is more or less unchanged.\n. @rnewman All done. Thanks for keeping a close eye on my changes. :)\n. Rebased on latest master again.\n. @sleroux Should be fine again now.\n. @sleroux: Xcode keeps generating changes in Client.xcscmblueprint every time I build. I always reset them in git but it seems I forgot to do it on one of the rebases. Apologies. I backed the file out of my commit now.\nBy the way, there is a bit of controversy whether or not this file should be version controlled at all. See for instance this Stackoverflow post and the links therein. It's even contained in GitHub's default .gitignore file (see here).\n. Loading localhost brings up an error page but it's still enough to verify that the UA is reset in the test. Thanks for the hint. I also removed the comment.\n. While at it, I took the chance to simplify the existing RDS/RMS tests in NavigationTests.swift a bit by extracting common steps into utility methods. All of the existing tests are functionally unchanged beyond this refactoring. Only the test case testBackForwardNavigationRestoresMobileOrDesktopSite is new.\n. @fluffyemily: All done, thanks for reviewing. :)\n. You're right. Oh my, what a stupid mistake, sorry.\n. I made links from the reader panel open in new tabs. All others open in the current tab.\n. Unfortunately, Swift doesn't allow default parameters in protocol methods so I had to adapt all callers of this method.\n. I had to add this to get back from the home panel to the browser after opening a link in a new tab.\n. This will reset the spoofed user agent whenever a new URL is entered manually or a link is selected from the home panel.\n. This should probably be changed to something else but I wasn't sure to what.\n. It feels a bit weird to strip the FxiOS section here because it is added in defaultUserAgent which is called before. Would it be worth to extract a private method with the common parts of defaultUserAgent and desktopUserAgent? If so, I think we'd also have to adapt the caching.\n. I chose the standard timeout of NSURLRequest which, according to the docs, is 60 seconds.\n. I'm not fully satisfied with this state variable being managed outside of the Browser class. The latter would need to intercept the WKNavigationDelegate methods in order to manage the variable on its own but that appeared to be overly complicated to me.\n. I moved the actual user agent setting and reloading to the Browser class since the BrowserViewController class is already quite large and this logic could be considered internal to the Browser.\n. Again, I'm not 100% satisfied with this new method but couldn't find a better way. The WKNavigationDelegate methods only include the web view but not the tab. We do, however, need the tab in order to store the last user agent override for the action sheet toggling. This cannot be stored on the web view itself without subclassing it.\n. This is weird and I don't really have an explanation for why only using an autorelease pool makes the weak reference turn nil. There must be an autoreleased reference flying around somewhere but I could not see it. Another (less probable) explanation is that this is a bug in ARC. The official docs state\n\n[...] ARC automatically sets a weak reference to nil when the instance that it refers to is deallocated. [...] you will never end up with a reference to an invalid instance that no longer exists.\n. The window's root view controller was changed to a UINavigationController which was not reflected in the tests up to now.\n. Shoot, I forgot about iPad. Thanks for the reminder. I fixed it.\n. I just realized that this functionality already exists with the subscript operator and removed this method.\n. Yes, that sounds reasonable. I made the change.\n. I did this as a local extension for now. I guess ideally this should be either put into a global extension or even contributed upstream.\n. Nevermind. I just realized that there is already an extension of KIFUITestActor in Global.swift. I moved the method there.\n. Sorry, I am a bit confused. Which webView do you mean? There is no such variable in testAboutHomeDisposed.\n\nI did some more digging and I believe this could be a bug with KIF. Weak variables do not seem to be cleared automatically when deriving from KIFTestCase unless one uses an explicit autorelease pool (see my bug report: https://github.com/kif-framework/KIF/issues/739).\nIn fact, I found that it's enough to wrap the following line into an autorelease pool to make the test pass.\nautoreleasepool {\n    tester().clearTextFromAndThenEnterTextIntoCurrentFirstResponder(\"\\(url)\\n\")\n}\nThis is in line with the suspicion above since entering an URL will kick off the loading and dismiss and nillify the home panel view controller. So this is where apparently we need to add an explicit autorelease pool in order to propagate the nillification.\n. This seems to be a result of Xcode automatically cleaning up the project file.\n. More automatic project file clean-up.\n. More automatic project file clean-up.\n. I put this into its own class because the BrowserViewController class is already quite large.\n. Ha, sorry, I already had it corrected and then apparently copied the typo over again when resolving the conflicts during rebasing.\n. Sorry, I made the same mistake on the other PR. I think Xcode stripped out the leading blanks during copy/paste and I failed to realize that.\n. Not sure if this is acceptable since it loads an external site. I couldn't find any better way to navigate to a different host, however.\n. ",
    "revolter": "I think it fixed it. But now, a short question, how to run it on device? Do you provide some development provisioning profiles?\n. ",
    "atulagrwl": "Updated Pull request as per review comments. I am not able to remove label 'needs changes' from the Pull request.\n. Fixes for PR https://github.com/mozilla/firefox-ios/pull/859\n. Used same strategy as used in FaviconFetcher.\n. Made the changes suggested. I didn't know sync client could run headless.\n. @rnewman, Thanks. I will be more careful next time.\n. This makes perfect sense. I thought of only removing www and http/https but we should also remove subdomains and this will be good way to remove it.\n. As per bug https://bugzilla.mozilla.org/1189844, don't we have to change the URL bar to show only domain and subsequent folders?\nAs per my understanding TopSitesPanel, this is the code for showing all websites cells when user clicks on button which shows all websites.\n. Thanks for clarification. Working on submitting patch as per review.\n. ",
    "rafaelstz": "I discart this and create new correct.\n. ",
    "dhanvi": "As this bug needs more work around I will be closing this PR\n. ",
    "beaufortfrancois": "From what I understood, WKWebView does not prevent UA to inject JS scripts. Therefore it should be able to implement a Gamepad library in Firefox for iOS.\ncc @jyaif who might be interested.\n. ",
    "jyaif": "Like @beaufortfrancois said, you can inject \"user scripts\" before the pages are loaded. With those scripts you can, for instance, define navigator.getGamepads so that it returns an empty array.\nOnce gamepads are connected to the iOS device, swift code would execute javascript in the WKWebview so that getGamepads return up to date data.\n. https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\nThis API is available in most desktop browsers and a couple mobile browsers.\nOn Sunday, 1 May 2016, Stefan Arentz notifications@github.com wrote:\n\n@jyaif https://github.com/jyaif Where are these Gamepad APIs\ndocumented? Is this something common in other browsers?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly or view it on GitHub\nhttps://github.com/mozilla/firefox-ios/issues/952#issuecomment-216000136\n\n\nJean-Fran\u00e7ois Geyelin\n. ",
    "knorrium": "I just noticed I didn't create a ticket for this PR, I'll do that in the morning.\n. ",
    "ngn999": "I need 1password, too.\n. ",
    "ariefbayu": "oh, Firefox version 1.1 (1107)\n. ",
    "vladikoff": "@ncalexan Sorry I just randomly saw this because I was not @ mentioned properly. We will check this out.\ncc @shane-tomlinson\n. @ncalexan r?\n. The URLs were adjusted here: https://github.com/mozilla/firefox-ios/commit/6ed848cc4897257ea296e2d21b4aaa6c0ba0a222 but the comment remained \n. ping @ncalexan @rnewman \n. > Sorry, I get lots of GitHub spam so don't always see my @ mentions. Ship it.\nAh no worries, you'll have to merge this though I cannot do it.\n. Cannot reproduce this bug, can probably close this...\n. Yay! good work @jhugman . @st3fan could we merge this?. @vbudhram seems like there is a conflict now :(?. Does this code work when Firefox iOS is open? We had trouble seeing \"Sent tabs\" pages open. Only the notification arrived when Firefox iOS was minimized. I think the notification was just blank in our testing. How can we say that a tab arrived or something like that? (not sure if we have access to the info about which tab really arrived). this is weird, fixing.... ",
    "shane-tomlinson": "This is still a problem on Firefox 5 for iOS w/ an iPad 2. Not sure whether this is a regression or not.\n. ",
    "raindev": "In what version of the app is it planned to be released to AppStore?\n. ",
    "farhanpatel": "I'm closing this because this is very old now. Also because this is landing in Activity Stream itself which will replace the home panels. \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . if the back button is pressed quick enough then the page is cached. . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . TopSites appear when you tap the URL bar. I don't think we plan on adding a specific bar for favourites. As stek29 suggested. Space is limited so we have to make choices \ud83d\ude22 \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . No problem. Just happened to be at the computer as you were commenting :smile: \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Hey this issue was fixed a few days ago. Can you update your branch and try again? It should work \ud83d\ude04 \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . thanks a lot! I've been trying to follow the styling in the project. I'll give the style guide a look.\n. No worries. Thank you for the amazingly detailed review. I promise to have less nit errors next time \ud83d\ude04 \n. I've squashed it into 5 beautiful commits. Sorry I didnt do this earlier must of been a real pain to review. \n. LGTM  \ud83d\udc4d \n. This is pretty cool. Have a look at all the rules here \nhttps://github.com/realm/SwiftLint/tree/master/Source/SwiftLintFramework/Rules\n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . LGTM \ud83d\udc4d  The tests are awesome too!\nDo the commits need the bug number as well? \n. Great Work! And thank you for a perfect commit \ud83d\ude04 \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . http://i.giphy.com/L9kwXOK00OJGM.gif\n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . woo! Thats an impressive number of changes. I'm curious, was the migrator tool helpful? Or did you have to manually convert things?\n. Dependencies that still need to migrate to 3.0\n- [x]  Sqlite.swift\n- [x] Alamofire\n- [x] SnapKit\n- [x] OnePassword\n- [x] XCGLogger\n- [x] SwiftKeychainWrapper\n- [x] Deffered\n. Simple! I like it \ud83d\udc4d \n. Looks good \ud83d\udc4d \n. njpark has been taking things from this branch and working on pushing the changes to master. I'm going to close this for now :). Clarity in the ReadMe is always awesome \ud83d\udc4d  :shipit: \n. @thebnich @lemonYLX Make sure to keep an eye on the build status. Travis runs our linter and catches a few linting errors. @lemonYLX if you click on the X near your commit you'll see the errors that caused your build to fail. Please make sure to pay attention to this and fix it when it comes up :)\n. LGTM \n. I left the wrong license in the BaseTestCase if you could fix that it would be much appreciated :)\n. Make sure to squash before merge \ud83d\ude04 \n. I've double checked all the changes. They can be categorized into 3 different kinds\n1.  Remove semicolons\n2. Add/Remove white space. \n3. Add/Remove new lines\n. I've only turned on a limited number of rules. But there are some really good ones that will help us keep the quality of the project high. For example there are many rules that check for deprecated usages of swift. So for example CGRectZero is removed in favor of CGRect.rectZero. With swiftlint we can enable rules like this and make sure migrations are easier. \n. @varkor Xcode does a good job of removing trailing whitespaces but it doesnt in comments. So lots of comments in the project have trailing spaces. I disabled the rule for now to avoid noise in this PR. \n. The issue was that the TopsitesCell needs to be scrollable and I couldnt have it scroll independently of the ActivityStreamPanel any other way \ud83d\ude22  I opted for a full on UIcollectionview instead of a scrollview because I will probably end up using most of the methods from the UICollectionViewDelegate anyways. And using just a scrollview would mean I'd have to do layout by myself. UIcollectionview also has support for paging built in.\n. The design has changed slightly. \n\nASVerticalScrollCell\nThis represents the cell with the UICollectionView inside of it. There are some interesting issues here that need figuring out. \n- There needs to be paging of the Topsites.\n- The spacing of the cell needs to be uniform. When scrolling, a small part of a cell from the previous page should not appear.  (Illustrated here http://stackoverflow.com/a/20156486 )\nThis is a bit trickier than it looks. There is a pagingEnabled property on UICollectionview but it doesnt quite get me the full way. It wont scroll a full page. For example in the picture above if there were a total of 7 items. When I scrolled I would see BBC on the second page. I think I can get around this by getting rid of all spacing between the cells and then adding the white space in the TopSiteCell itself. This will make sure I dont get partial cells between pages. And if I do some calculation for how many cells it takes to fill a single page and create empty cells for the ones missing I can always get a full page scroll. \nThis will involve some convoluted height/width math to figure out proper spacing of everything. \nIf anyone has any suggestions on how I can do this in a less hacky way let me know!\n. I've Got the ASVerticalScrollCell working the way I wanted. You can see it here \nhttps://github.com/mozilla/firefox-ios/tree/farhan-bryan-topsites\n. bahaha. Of course it should be named ASHorizontalScrollCell. \ud83d\ude06 \nI thought about using UIStackView but then I thought that I'd have to do even more hacks to get that working. There is some layout calculations that I do manually but besides that I think the UIcollectionview works well. \nI agree on separate layouts for iPad/iPhone. I didnt know sticky headers were so hard. I'll switch it to a tableview for now. And decide if UICollectionview works later. \nThere will be a lot of refactoring related to delegates/datasources. I'll keep testability in mind when I decide how to approach this. \n. I updated the CI config files as well. I removed Circle because we dont use it anymore. And switched travis to run swiftlint. It should return an error if there is a linting error in the code. \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . @sleroux Should be ready to go! \nI dont think the keyboard should be hidden when scrolling AS. Imagine these cases\nOpen new tab  -> Tap url bar -> (you decide to search through AS.)  ->you dont find what you are looking for. -> now you gotta tap the url again to type\nAlthough I'll leave it to bbell to decide once he gets to play with it. \n. I cleaned up the naming a bit. Renamed ASHorizontalScrollCellSource to ASHorizontalScrollCellManager I didnt want to split it up into delegate/datasource because combined its only 60 lines and not that complicated. \nAlso renamed ASHorizontalDelegate to ASHorizontalLayoutDelegate to signify that its really just a few helper methods used by the layout. \nWhen I get to phase two I'll reevaluate the naming. According to the mocks there are places I can reuse ASHorizontalScrollCellManager. I'll refactor and make it more generic at that time. \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Simple enough \ud83d\udc4d \n. If you have some more information about the crash. Please submit a bug report on Bugzilla. https://bugzilla.mozilla.org/enter_bug.cgi?op_sys=iOS&product=Firefox%20for%20iOS&rep_platform=All\nAlso if you could find the crash log for this bug that would be awesome. No one on the team has a jailbroken device so the more information you can provide the easier this will be to fix \ud83d\ude04\n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . The project isn't updated yet for xcode8. We have a few more things left in our swift 2.3 branch that we need to fix. https://github.com/mozilla/firefox-ios/pull/1942\n. This is fixed now. The project compiles with swift 2.3 and should work. Make sure to delete your existing Carthage folder before building again. \nI'll close this issue for now. If the issue does come up again feel free to reopen. \ud83d\ude04 \n. I'll leave TopSiteItem in for now. In the next PR related to default SuggestedTopsites I'll look into moving back to Site and creating a new protocol.\n. Are you planning to add support for Hiding items from Highlights? Similar to how TopSites work. \n. The reason I added new images instead of reusing the old ones is because I didn't want to handle any edge cases related to the default sites. With the UIImageColor library, I didn't want to pass the color to the cell. I wanted it to figure out the colors like it does for every other favicon. And I wanted the favicons to be square like every other favicon so I recreated them to work more in line with other favicons. \n. I'll make a new bug for the page control accessibility issues. \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Just to have it here in Github. Flod suggested we leave it where it is. I kinda agree for cases where your region might be different than your language. For example, my Japanese friend might have his phones language set to Japanese but his region set to Canada. He should see Amazon.ca \n. I really like it. You should think about how ASPanel would use this class. Looking at the existing UIAlertController for reference is a good idea. For example it would be cool if it worked like this \n```\nlet header = SiteHeaderView(withSite:site) //This way we can customize it to our liking. Replacing this with different headers. \nBMAlertController* alert = [BMAlertController alertControllerWithHeaderView:header];\nBlurTableViewAction* action1 = [BlurTableViewAction actionWithTitle:@\"delete\" image:\"del_image\"\n   handler:^(UIAlertAction * action) {\n self.profile.history.removeHistoryForURL(self.site.url)\n}];\n[alert addAction:action1];\n[self presentViewController:alert animated:YES completion:nil];\n```\nSorry for the objc. \n. Hi! Thanks for this PR. \n@bkmunar is working on a context menu that will build out this menu for the recent items below the topsites. The work you did here would be great because he isn't building out the ability to open in a new tab yet. Once he finishes the menu you can use that instead. You can follow the progress of that in the bug I linked above. \nBut I'd suggest design wise that you try to do the following. \n- Try to move all changes in the TopSiteCell into ASPanel. For example I have the self.topSitesManager.presentActionMenuHandler. You could rework this so that all the menu creation and presentation happens in ASPanel instead. We can reuse the logic @bkmunar is making that way!\n- Look at how the tabManager is used in the MenuViewController. That might give you ideas on how to structure tabManager. (That would be a good place to look. I'm not sure if the menu is doing anything different though!)\n\nYou can still reuse a lot of this work once @bkmunar merges his new context menu for the recent items. We'll need to get the new menu working with the TopSites portion too. \nI'm sorry we had not closed this bug earlier. This is one of the select bugs that has become outdated by the new ActivityStreamPanel. If you want to look at work related to the ActivityStreamPanel you can follow it here https://bugzilla.mozilla.org/show_bug.cgi?id=1288121\n. They aren't the same \ud83d\ude04  The one in Topsites is a square favicon while the one in the menu is the same favicon but without the correct background color making it look circular. The favicon may be the same but backgrounds arent matching. You can look at how the background colors are set in the Topsites to get an idea of how this would work for the context menu.\n. Because sleroux reverted the ASPing (Onyx) changes. Could you please remove the references to it in your PR. Sorry for the extra work!\n. As for the BB logs. I'll have to look into it. There are still a few more issues I need to work out with BuddyBuild. I'll ask the BB team how we can fix this for you. \nFor now... I'll let you know if something is wrong in the CI. This time, there isn't anything wrong it's just another unrelated error.\n. Closing because new PR opened. \nhttps://github.com/mozilla-mobile/firefox-ios/pull/2177\n. No longer an issue. The Bug is closed. So. There is caching involved. It should update the stats eventually.\n. \n\n\n\n\n          :white_check_mark: Good on 'ya.\n      \n\n\n\n\n:white_check_mark:\nHello, this worked\n\n\n:white_check_mark:\nBug 1293468 - Add Danger to help verify PRs. Disable Travis.\n\n\n:white_check_mark:\nTesting danger WIP\n\n\n\nSwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActionOverlayTableViewController.swift | 20 | Colons should be next to the identifier when specifying a type. |\n| ActivityStreamTest.swift | 21 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. From running the debugger it looks like the viewDidLayoutSubviews in bvc is calling \nself.appDidUpdateState(getCurrentAppState())\nThe viewDidLayoutSubviews in the MenuViewController isn't called here until after the reloadData on the Menu. \n. Whats odd about Github is that when you left a review it doesn't count it as comments. So when I look at the list of PR's It doesnt show the comment bubble on the right. So I thought you had just forgotten about it. Weird \ud83d\ude15 \n. Will do. As for the AppDelegate changes I'll get to those once I integrate the SDK. Which is next on my list for BB related things to do. \n. @thebnich Should be good for one more look over. I think you need to approve the changes again according to Github. \n. I would also suggest that we put all Onyx related files in their own folder seperate from the frontend code. As we add more and more metrics it would be nice to have all of them in one area. Moving the OnyxTelemetry.swift into that folder would also be a good idea. \n. The Readme is already pretty long. I'd like to avoid adding any more content to it unless we absolutely have to. If you think this is very important to have in the readme please feel free to reopen it.\n. The 1AM review! Thanks Brian. \n. We can add @mauryat 's branch to buddybuild. That should have CI run for it.\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| MailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. |\n| ActionViewController.swift | 50 | Lines should not have trailing semicolons. |\n\n  Generated by :no_entry_sign: danger\n\n. we got the green light. Lets do this!\n. Looks great! Although because the documentation is outdated. Even if it works in xcode 7 (which I'm not sure it does) I'd remove any references to 7 just in case something breaks in the future. The team only uses xcode 8. \n. Awesome. Thanks for updating this. It really helps contributors when they can build for device easily. \n. Hmm I see the Danger error you were getting. Your fork should work fine with Danger. I'll ask the BB folks whats going on. \n. Hi @Bunn I see you've requested etoop to review this PR. She's busy with another project at the moment. So I've given this a quick review and merged it in! \nThanks for fixing this bug! If you'd like something bigger to work on next hit me up on IRC (@farhan on #mobile) and I might be able to recommend something \ud83d\ude04 \n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| TabTrayController.swift | 267 | Colons should be next to the identifier when specifying a type. |\n| ClearPrivateDataTests.swift | 56 | There should be no space before and one after any comma. |\n| Global.swift | 328 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. What you could do is. Instead of passing in the existing Imageview. Make a new one. Something like\nlet newImageView = UIImageView()\nnewImageView.image = topSiteItemCell.imageView.image\nnewImageView.backgroundColor = topSiteItemCell.imageView.backgroundColor\nThat should give you the Imageview that you can then pass into the contextmenu. It'll have the correct background color as well. \nOR \nif there are issues with constraints with you replacing the image view in the contextMenu. Simply pass in both the UIImage and the color. Possibly in a small struct like \nstruct imageInfo {\n    let image: UIImage\n    let bgColor: UIColor\n}\nCreate that struct and fill in the values for that image and pass it to the context menu. \nYea, This is kinda dumb imo. But short of fetching and recalculating background colors again, this is the simplest thing I could think of.\nAlso, why is this a new PR? This should have been in the existing PR. I'll close the old one now. But its best to keep a single PR just so that everything is on one page :) \n. presentActionMenuHandler on line 191 isn't used anymore. Could you please remove that.\n. Yea, as the UI team reviews this they can add icons in. I didn't wanna keep delaying this PR so I merged it in. Thanks for all your help! \ud83d\udcaf \n. Yup. That'll be required too. \n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ClearPrivateDataTests.swift | 56 | There should be no space before and one after any comma. |\n| Global.swift | 328 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ClearPrivateDataTests.swift | 56 | There should be no space before and one after any comma. |\n| Global.swift | 328 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ClearPrivateDataTests.swift | 56 | There should be no space before and one after any comma. |\n| Global.swift | 328 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| MailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. |\n| ActionViewController.swift | 50 | Lines should not have trailing semicolons. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ClearPrivateDataTests.swift | 56 | There should be no space before and one after any comma. |\n| Global.swift | 328 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. Merged a rebased version.. I don't think we need to support compact/expanded. We can get the spacing between the copied link button and the new tab button simply by changing the widgetStackView.spacing number. For example. Here it is with a spacing of 12. \n\nIsn't this all we really want?\n. resolved https://github.com/mozilla-mobile/firefox-ios/commit/47703eb25c99389197b291d431543b3abce14c87. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActionViewController.swift | 50 | Lines should not have trailing semicolons. |\n\n  Generated by :no_entry_sign: danger\n\n. LGTM \ud83c\udf2e \n. This seems to be referencing an incorrect bug ID. And also it has commits from 2015. I don't know what is going on. \nPlease read the contributor guidelines https://github.com/mozilla-mobile/firefox-ios#contributor-guidelines and feel free to reopen this with the correct info.\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| MailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. |\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActionViewController.swift | 50 | Lines should not have trailing semicolons. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActivityStreamPanel.swift | 429 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| MailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. |\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActionViewController.swift | 50 | Lines should not have trailing semicolons. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActivityStreamPanel.swift | 429 | There should be no space before and one after any comma. |\n\n  Generated by :no_entry_sign: danger\n\n. ### SwiftLint found issues\nWarnings\n| File | Line | Reason |\n| --- | --- | --- |\n| MailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. |\n| MailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. |\nErrors\n| File | Line | Reason |\n| --- | --- | --- |\n| ActionViewController.swift | 50 | Lines should not have trailing semicolons. |\n\n  Generated by :no_entry_sign: danger\n\n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Yea I thought about those solutions. But they seemed more complicated. I'll go with this fix. \n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Shit. Yea you are right this is very dumb. Can't believe I didn't notice this. Sorry, Only issue with this fix is that when a reload is called from outside of viewDidLoad a tableview refresh is not done. For example in hideURLFromTopSites it calls reloadTopSites which expects to reload the table. \nMaybe instead we make a loadTopsites which does what the currentreloadTopSites does and then wrap the deffered reload of the tableview in a new method called reloadTopSites. That way when we want to call both we can call loadTopsites->loadHighlights -> 'reloadData. While for other cases we can just callreloadTopSiteswhich callsloadTopsites->reloadData?\n. LGTM \ud83d\udc4d \n.extractDomainNamewas pretty shitty you are right. I've made a new method calledhostSLDwhich returns only the second level domain of a url. It uses the built in extensions on NSURL. \n. So this I think is a good compromise for now. The bugs related to BFList and reader mode urls is covered in this bug here. https://bugzilla.mozilla.org/show_bug.cgi?id=1321019\n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Yea it's because of this bug https://bugzilla.mozilla.org/show_bug.cgi?id=1317380 the time between calls to systemUptime will sometimes be 1 or 2 seconds apart. When the passcode setting is set to \"Immediate\" the checkisLocked` returns true even right after a validation. \nThis fix really just sets people who already have an existing setting of 0. To the new default of 2.\n. Where is the SDK itself though? Should that not be added in with this commit as well? Right now as it stands this build would break CI correct? . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nActionViewController.swift | 50 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: danger\n\n. Awesome! Nice to see more tests move to XCUITests. . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nActionViewController.swift | 50 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: danger\n\n. I dont think we should merge this right away. The context menu right now is contained in the Activity Stream panel which is behind a feature flag. If we decide to not ship AS in 7.0. Backing all this code out will be a bit difficult. \nIf you want to merge this in now. Make sure to add the menu to the old TopSitesPanel.\nAlso @bryanbell worked on the UI for context menu so he should be able to give you the icons.\n. It'll happen if your base branch has these issues. I think this issue might have slipped in from a previous PR. . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nCustomSearchViewController.swift | 26 | Opening braces should be preceded by a single space and on the same line as the declaration. \nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. closing. Moving back to the original PR. . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. If you see my automated comment about the linting errors could you please fix those as well. . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. awesome! I've written some tests for AboutUtils while you were working on your patch. Could you move these to their new home please \nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/Utils/AboutUtilsTests.swift. I think the diffs get too long so Github hides the large changes. here are the tests \nhttps://github.com/mozilla-mobile/firefox-ios/pull/2283/files#diff-243a379cdf591164cfcb4e5dec67acf2. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nBaseTestCase.swift | 51 | Colons should be next to the identifier when specifying a type. \nHomePageSettingsTest.swift | 29 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingsUITests.swift | 27 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 28 | There should be no space before and one after any comma. \nHomePageSettingsTest.swift | 54 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. Don't forget the tests \ud83d\ude0f  There is already a TestSQLiteHistoryRecommendations.swift where you can add tests to. . I think a good starting for a blacklist would be using the installed SearchEngines. You'll also get the user's local variation of Google as well :) . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. I dont know when the changes to FxAContentViewController where made. But If you could fix those nits that would be awesome. . Also that sqlite.playground in the sqlite project. It likes to complain sometimes during compile time. Can we remove that too?. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. Looks good. Will we need to change anything on BuddyBuild?. I think while you are working on these changes can you add the flag to silent the simulator when debugging please \ud83d\ude4f . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . This is not possible due to WKWebview restrictions. . Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nEarlGrey.swift | 72 | Colons should be next to the identifier when specifying a type. \nEarlGrey.swift | 78 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchSettingsTableViewController.swift | 110 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSettingsTableViewController.swift | 554 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1130 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. I'm going to try writing some tests for this. \ud83d\ude03  wish me luck \ud83d\ude06 . I mentioned this in triage. But just for history's sake. \nselectTab wouldn't be called again because selectTab makes sure that the previous tab doesn't equal the currently selected tab before it tries to do anything. . @sleroux I've added tests that cover some of the tricky bits of tabmanger. The tests also serve as some basic documentation on what is expected from TabManger. So hopefully this will help in the future.. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. neat. My only concern is that are we arent adding the Framework to the non-test targets correct? So when we build for Production EarlGrey wont be included right?\nI just messed around with Kif yesterday. And one of the issues I found with is is that it failed silently when I was running a test. How does EarlGrey handle a failure if It can't find an element?. Dont think this applies anymore.. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \nScreenGraph.swift | 53 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. Awesome. Only small nit I can suggest is that maybe it makes sense to move the ASPingEevent stuff that's at the bottom of ActivityStreamPanel into its own file if we plan on using it outside of the ASPanel such as in bookmarks/history etc. But I think we can do that when we add telemetry to those panels. \nAwesome tests too :) \nI'll add the JSONSchema migration to the current swift 3 doc we have. So we don't forget to do it \ud83d\ude04 . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPasscodeViews.swift | 57 | Colons should be next to the identifier when specifying a type. \nPasscodeViews.swift | 66 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 20 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 33 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 148 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 185 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 1206 | Colons should be next to the identifier when specifying a type. \nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nTabLocationView.swift | 317 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 9 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 22 | Colons should be next to the identifier when specifying a type. \nTabTrayController.swift | 437 | Colons should be next to the identifier when specifying a type. \nThirdPartySearchAlerts.swift | 13 | Colons should be next to the identifier when specifying a type. \nTopTabsLayout.swift | 34 | Colons should be next to the identifier when specifying a type. \nActivityStreamTopSitesCell.swift | 312 | Colons should be next to the identifier when specifying a type. \nHomePanelViewController.swift | 204 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 73 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 481 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 232 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 236 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 240 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 87 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 95 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 99 | Colons should be next to the identifier when specifying a type. \nFindInPageActivity.swift | 14 | Colons should be next to the identifier when specifying a type. \nFindInPageActivity.swift | 18 | Colons should be next to the identifier when specifying a type. \nRequestDesktopSiteActivity.swift | 16 | Colons should be next to the identifier when specifying a type. \nRequestDesktopSiteActivity.swift | 22 | Colons should be next to the identifier when specifying a type. \nTitleActivityItemProvider.swift | 21 | Colons should be next to the identifier when specifying a type. \nInsetButton.swift | 10 | Colons should be next to the identifier when specifying a type. \nPagingMenuItemCollectionViewLayout.swift | 17 | Colons should be next to the identifier when specifying a type. \nBrowserDB.swift | 12 | Colons should be next to the identifier when specifying a type. \nBrowserDB.swift | 25 | Colons should be next to the identifier when specifying a type. \nFaviconsTable.swift | 8 | Colons should be next to the identifier when specifying a type. \nFaviconsTable.swift | 21 | Colons should be next to the identifier when specifying a type. \nTestFaviconsTable.swift | 11 | Colons should be next to the identifier when specifying a type. \nTestFaviconsTable.swift | 24 | Colons should be next to the identifier when specifying a type. \nAuthenticationKeychainInfo.swift | 9 | Colons should be next to the identifier when specifying a type. \nNSURLExtensions.swift | 8 | Colons should be next to the identifier when specifying a type. \nNSURLExtensions.swift | 21 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 1147 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nProfile.swift | 1188 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nMocking.swift | 31 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \nScreenGraph.swift | 53 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. Haha. There is some weirdness going on here. Bryan already had a patch for this. But then he reverted it a commit later in this PR? I don't think by purpose either, at least it doesn't mention anything in the PR.  @bkmunar . Haha. So according to IRC. Bryan doesn't know what happened \ud83d\ude04 \nI kind of liked the way @bkmunar did it though. Getting the bookmark status from the SQL query instead of each time the item is pressed. Although his patch is missing support for TopSites which yours does have. \nsidenote: Any thoughts on how we can abstract this logic to a different class/file. Being able to open the context menu with these items will have to be done from other panels (bookmarks/history) as well. we have a PR for this https://github.com/mozilla-mobile/firefox-ios/pull/2268 But there's a lot of duplicated code. I remember you worked on the Menu. Is there something we can do similar here?\n. Also if you have any suggestions on how to refactor this code (and have time to share your thoughts between the swift 3 stuff) let me know. I know it aint too old but I'm already itching to refactor it haha.   . Ah alright. makes sense. . \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \nScreenGraph.swift | 53 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 18 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 23 | Opening braces should be preceded by a single space and on the same line as the declaration. \nScreenGraph.swift | 53 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: danger\n\n. I was following what Desktop does. It usually moves to the right once you close a tab.. There doesnt seem to be an issue here. . Thats fine. A test for this is kinda tricky I understand. So Anything is better than nothing.. Looks like ReadingListClient is not used anywhere. This is probably what st3fan was talking about. We could probably remove this. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 1112 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nProfile.swift | 1153 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 12 | Colons should be next to the identifier when specifying a type. \nBrowserDB.swift | 25 | Colons should be next to the identifier when specifying a type. \nFaviconsTable.swift | 8 | Colons should be next to the identifier when specifying a type. \nFaviconsTable.swift | 21 | Colons should be next to the identifier when specifying a type. \nSyncCommandsTable.swift | 22 | Colons should be next to the identifier when specifying a type. \nSyncCommandsTable.swift | 46 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nCursor.swift | 41 | Opening braces should be preceded by a single space and on the same line as the declaration. \nCursor.swift | 42 | Lines should not have trailing semicolons. \nSQLiteBookmarksModel.swift | 731 | There should be no space before and one after any comma. \nSQLiteBookmarksSyncing.swift | 85 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 352 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 554 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 931 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 976 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 997 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 1018 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 1043 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 1061 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteBookmarksSyncing.swift | 274 | There should be no space before and one after any comma. \nSQLiteBookmarksSyncing.swift | 274 | There should be no space before and one after any comma. \nSQLiteBookmarksSyncing.swift | 314 | There should be no space before and one after any comma. \nSQLiteBookmarksSyncing.swift | 314 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 1070 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteHistory.swift | 1092 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSQLiteHistory.swift | 202 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 227 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 227 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 227 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 444 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 540 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 774 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 779 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 786 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 791 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 805 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 805 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 838 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 838 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 927 | There should be no space before and one after any comma. \nSQLiteHistory.swift | 987 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 233 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 251 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 296 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 296 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 297 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 297 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 302 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 303 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 374 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 375 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 376 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 377 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 820 | There should be no space before and one after any comma. \nSQLiteLogins.swift | 820 | There should be no space before and one after any comma. \nSQLiteMetadata.swift | 38 | There should be no space before and one after any comma. \nSQLiteMetadata.swift | 38 | There should be no space before and one after any comma. \nSQLiteMetadata.swift | 38 | There should be no space before and one after any comma. \nSQLiteMetadata.swift | 38 | There should be no space before and one after any comma. \nSQLiteMetadata.swift | 39 | There should be no space before and one after any comma. \nSQLiteQueue.swift | 23 | There should be no space before and one after any comma. \nSyncCommandsTable.swift | 22 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. This has been rebased into the swift-3 branch. Hey @Bunn Thanks for the PR. This is very useful feature! And one thats been lacking for a while. Do you think it would be simplier to use the existing Toast UI we already have. Similar to what is done in this PR? https://github.com/mozilla-mobile/firefox-ios/pull/2358 . I think it makes sense to extend the existing ButtonToast. As long as the API for the simple use cases doesn't get complicated (use default values, multiple init methods etc) It would be great to have an extensible Toast class inside the browser which we could use where ever we need it. . Also on the team we use Snapkit. To make things consistent can you please use Snapkit for the constraints.  \nTo avoid the animation issue. You can hide the toast before you animate away from the tab. That way avoiding the issue. Or you can create a parameter (that defaults to the window) to specify which view to show the Toast on.. Thanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04 . You can check if the Top Tabs is visible by checking if toptabsController exists or not. . I've refactored for swift 3 in the above PR. Closing this one. . I've rebased the changes into the swift-3 branch. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMailProviders.swift | 45 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 61 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 78 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 93 | Colons should be next to the identifier when specifying a type. \nMailProviders.swift | 100 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nActionViewController.swift | 51 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: danger\n\n. We've merged a rebased branch. lets keep this branch alive for history . \nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 256 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 61 | Function body should span 40 lines or less excluding comments and whitespace: currently spans 68 lines \nAppDelegate.swift | 515 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 33 | Line should be 100 characters or less: currently 110 characters \nAppDelegate.swift | 41 | Line should be 100 characters or less: currently 128 characters \nAppDelegate.swift | 61 | Line should be 100 characters or less: currently 128 characters \nAppDelegate.swift | 93 | Line should be 100 characters or less: currently 125 characters \nAppDelegate.swift | 99 | Line should be 100 characters or less: currently 122 characters \nAppDelegate.swift | 100 | Line should be 100 characters or less: currently 149 characters \nAppDelegate.swift | 102 | Line should be 100 characters or less: currently 127 characters \nAppDelegate.swift | 105 | Line should be 100 characters or less: currently 137 characters \nAppDelegate.swift | 115 | Line should be 100 characters or less: currently 106 characters \nAppDelegate.swift | 124 | Line should be 100 characters or less: currently 105 characters \nAppDelegate.swift | 139 | Line should be 100 characters or less: currently 161 characters \nAppDelegate.swift | 142 | Line should be 100 characters or less: currently 131 characters \nAppDelegate.swift | 146 | Line should be 100 characters or less: currently 148 characters \nAppDelegate.swift | 151 | Line should be 100 characters or less: currently 123 characters \nAppDelegate.swift | 160 | Line should be 100 characters or less: currently 107 characters \nAppDelegate.swift | 170 | Line should be 100 characters or less: currently 106 characters \nAppDelegate.swift | 171 | Line should be 100 characters or less: currently 102 characters \nAppDelegate.swift | 172 | Line should be 100 characters or less: currently 105 characters \nAppDelegate.swift | 213 | Line should be 100 characters or less: currently 128 characters \nAppDelegate.swift | 223 | Line should be 100 characters or less: currently 111 characters \nAppDelegate.swift | 240 | Line should be 100 characters or less: currently 119 characters \nAppDelegate.swift | 252 | Line should be 100 characters or less: currently 129 characters \nAppDelegate.swift | 257 | Line should be 100 characters or less: currently 114 characters \nAppDelegate.swift | 259 | Line should be 100 characters or less: currently 102 characters \nAppDelegate.swift | 274 | Line should be 100 characters or less: currently 126 characters \nAppDelegate.swift | 324 | Line should be 100 characters or less: currently 113 characters \nAppDelegate.swift | 330 | Line should be 100 characters or less: currently 128 characters \nAppDelegate.swift | 331 | Line should be 100 characters or less: currently 198 characters \nAppDelegate.swift | 359 | Line should be 100 characters or less: currently 103 characters \nAppDelegate.swift | 363 | Line should be 100 characters or less: currently 123 characters \nAppDelegate.swift | 364 | Line should be 100 characters or less: currently 120 characters \nAppDelegate.swift | 366 | Line should be 100 characters or less: currently 134 characters \nAppDelegate.swift | 379 | Line should be 100 characters or less: currently 106 characters \nAppDelegate.swift | 380 | Line should be 100 characters or less: currently 138 characters \nAppDelegate.swift | 429 | Line should be 100 characters or less: currently 108 characters \nAppDelegate.swift | 430 | Line should be 100 characters or less: currently 112 characters \nAppDelegate.swift | 444 | Line should be 100 characters or less: currently 109 characters \nAppDelegate.swift | 466 | Line should be 100 characters or less: currently 101 characters \nAppDelegate.swift | 501 | Line should be 100 characters or less: currently 101 characters \nAppDelegate.swift | 507 | Line should be 100 characters or less: currently 102 characters \nAppDelegate.swift | 511 | Line should be 100 characters or less: currently 185 characters \nAppDelegate.swift | 533 | Line should be 100 characters or less: currently 113 characters \nAppDelegate.swift | 538 | Line should be 100 characters or less: currently 121 characters \nAppDelegate.swift | 541 | Line should be 100 characters or less: currently 117 characters \nAppDelegate.swift | 548 | Line should be 100 characters or less: currently 126 characters \nAppDelegate.swift | 557 | Line should be 100 characters or less: currently 121 characters \nAppDelegate.swift | 558 | Line should be 100 characters or less: currently 132 characters \nAppDelegate.swift | 562 | Line should be 100 characters or less: currently 146 characters \nAppDelegate.swift | 566 | Line should be 100 characters or less: currently 126 characters \nAppDelegate.swift | 570 | Line should be 100 characters or less: currently 153 characters \nAppDelegate.swift | 589 | Line should be 100 characters or less: currently 152 characters \nAppDelegate.swift | 594 | Line should be 100 characters or less: currently 176 characters \nAppDelegate.swift | 602 | Line should be 100 characters or less: currently 178 characters \nAppDelegate.swift | 607 | Line should be 100 characters or less: currently 153 characters \nAppDelegate.swift | 608 | Line should be 100 characters or less: currently 144 characters \nAppDelegate.swift | 638 | Line should be 100 characters or less: currently 124 characters \nAppDelegate.swift | 645 | Line should be 100 characters or less: currently 139 characters \nAppDelegate.swift | 154 | Lines should not have trailing whitespace. \nAppDelegate.swift | 218 | Lines should not have trailing whitespace. \nAppDelegate.swift | 275 | Lines should not have trailing whitespace. \nAppDelegate.swift | 284 | Lines should not have trailing whitespace. \nAppDelegate.swift | 294 | Lines should not have trailing whitespace. \nAppDelegate.swift | 304 | Lines should not have trailing whitespace. \nAppDelegate.swift | 313 | Lines should not have trailing whitespace. \nAppDelegate.swift | 429 | Lines should not have trailing whitespace. \nAppDelegate.swift | 21 | Type body should span 200 lines or less excluding comments and whitespace: currently spans 323 lines \nAppDelegate.swift | 252 | Function should have complexity 10 or less: currently complexity equals 11 \nAppDelegate.swift | 661 | File should contain 400 lines or less: currently contains 661 \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 33 | Force casts should be avoided. \nAppDelegate.swift | 17 | Variable name should start with a lowercase character: 'LatestAppVersionProfileKey' \nAppDelegate.swift | 18 | Variable name should start with a lowercase character: 'AllowThirdPartyKeyboardsKey' \nAppDelegate.swift | 19 | Variable name should start with a lowercase character: 'InitialPingSentKey' \nAppDelegate.swift | 655 | Variable name should only contain alphanumeric characters: 'access_code' \n\n  Generated by :no_entry_sign: danger\n\n. \nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPasscodeViews.swift | 57 | Colons should be next to the identifier when specifying a type. \nPasscodeViews.swift | 66 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 22 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 35 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 150 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 188 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 1212 | Colons should be next to the identifier when specifying a type. \nTabLocationView.swift | 317 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 9 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 22 | Colons should be next to the identifier when specifying a type. \nTabTrayController.swift | 437 | Colons should be next to the identifier when specifying a type. \nThirdPartySearchAlerts.swift | 13 | Colons should be next to the identifier when specifying a type. \nTopTabsLayout.swift | 34 | Colons should be next to the identifier when specifying a type. \nActivityStreamTopSitesCell.swift | 313 | Colons should be next to the identifier when specifying a type. \nHomePanelViewController.swift | 204 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 73 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 481 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 232 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 236 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 240 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 87 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 95 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 99 | Colons should be next to the identifier when specifying a type. \nFindInPageActivity.swift | 14 | Colons should be next to the identifier when specifying a type. \nFindInPageActivity.swift | 18 | Colons should be next to the identifier when specifying a type. \nRequestDesktopSiteActivity.swift | 16 | Colons should be next to the identifier when specifying a type. \nRequestDesktopSiteActivity.swift | 22 | Colons should be next to the identifier when specifying a type. \nInsetButton.swift | 10 | Colons should be next to the identifier when specifying a type. \nPagingMenuItemCollectionViewLayout.swift | 17 | Colons should be next to the identifier when specifying a type. \nFilledPageControl.swift | 128 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabToolbar.swift | 13 | Opening braces should be preceded by a single space and on the same line as the declaration. \nUIImageColors.swift | 212 | Opening braces should be preceded by a single space and on the same line as the declaration. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestFaviconsTable.swift | 11 | Colons should be next to the identifier when specifying a type. \nTestFaviconsTable.swift | 24 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nKeyBundle.swift | 190 | There should be no space before and one after any comma. \nTopSitesTests.swift | 99 | There should be no space before and one after any comma. \nTopSitesTests.swift | 100 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. makes sense. kinda silly that the newlines are in there haha. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopSitesTests.swift | 99 | There should be no space before and one after any comma. \nTopSitesTests.swift | 100 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPasscodeViews.swift | 57 | Colons should be next to the identifier when specifying a type. \nPasscodeViews.swift | 66 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 22 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 35 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 150 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 188 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 1212 | Colons should be next to the identifier when specifying a type. \nTabLocationView.swift | 317 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 9 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 22 | Colons should be next to the identifier when specifying a type. \nTabTrayController.swift | 437 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 73 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 481 | Colons should be next to the identifier when specifying a type. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPasscodeViews.swift | 57 | Colons should be next to the identifier when specifying a type. \nPasscodeViews.swift | 66 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 22 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 35 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 150 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 188 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 1212 | Colons should be next to the identifier when specifying a type. \nTabLocationView.swift | 317 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 9 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 22 | Colons should be next to the identifier when specifying a type. \nTabTrayController.swift | 437 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 73 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 481 | Colons should be next to the identifier when specifying a type. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nKeyBundle.swift | 190 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPasscodeViews.swift | 57 | Colons should be next to the identifier when specifying a type. \nPasscodeViews.swift | 66 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 22 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 35 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 150 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 188 | Colons should be next to the identifier when specifying a type. \nBrowserViewController.swift | 1212 | Colons should be next to the identifier when specifying a type. \nTabLocationView.swift | 317 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 9 | Colons should be next to the identifier when specifying a type. \nTabScrollController.swift | 22 | Colons should be next to the identifier when specifying a type. \nTabTrayController.swift | 437 | Colons should be next to the identifier when specifying a type. \nThirdPartySearchAlerts.swift | 13 | Colons should be next to the identifier when specifying a type. \nTopTabsLayout.swift | 34 | Colons should be next to the identifier when specifying a type. \nActivityStreamTopSitesCell.swift | 313 | Colons should be next to the identifier when specifying a type. \nHomePanelViewController.swift | 204 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 73 | Colons should be next to the identifier when specifying a type. \nTopSitesPanel.swift | 481 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 232 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 236 | Colons should be next to the identifier when specifying a type. \nIntroViewController.swift | 240 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 87 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 95 | Colons should be next to the identifier when specifying a type. \nNotificationRootViewController.swift | 99 | Colons should be next to the identifier when specifying a type. \nFindInPageActivity.swift | 14 | Colons should be next to the identifier when specifying a type. \nFindInPageActivity.swift | 18 | Colons should be next to the identifier when specifying a type. \nRequestDesktopSiteActivity.swift | 16 | Colons should be next to the identifier when specifying a type. \nRequestDesktopSiteActivity.swift | 22 | Colons should be next to the identifier when specifying a type. \nInsetButton.swift | 10 | Colons should be next to the identifier when specifying a type. \nPagingMenuItemCollectionViewLayout.swift | 17 | Colons should be next to the identifier when specifying a type. \nTestFaviconsTable.swift | 11 | Colons should be next to the identifier when specifying a type. \nTestFaviconsTable.swift | 24 | Colons should be next to the identifier when specifying a type. \nFilledPageControl.swift | 128 | Colons should be next to the identifier when specifying a type. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabToolbar.swift | 13 | Opening braces should be preceded by a single space and on the same line as the declaration. \nKeyBundle.swift | 190 | There should be no space before and one after any comma. \nUIImageColors.swift | 212 | Opening braces should be preceded by a single space and on the same line as the declaration. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nTopSitesTests.swift | 99 | There should be no space before and one after any comma. \nTopSitesTests.swift | 100 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. I'm going to merge this in now and deal with the possible session restore migration bug once its easier to test between versions (via buddybuild). here is the bug tracking this https://bugzilla.mozilla.org/show_bug.cgi?id=1337907. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPushCrypto.swift | 13 | Lines should not have trailing semicolons. \nPushCrypto.swift | 14 | Lines should not have trailing semicolons. \nPushCrypto.swift | 15 | Lines should not have trailing semicolons. \nPushCrypto.swift | 16 | Lines should not have trailing semicolons. \nPushCrypto.swift | 400 | Lines should not have trailing semicolons. \nPushCrypto.swift | 402 | Lines should not have trailing semicolons. \nPushCrypto.swift | 739 | Lines should not have trailing semicolons. \nPushCrypto.swift | 741 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. I think using numberOfItems(inSection section: Int) was incorrect here because that returns the current state of the UICollectionView not the actual number of items there should be. . I'm trying to understand why I did this but it feels like so long ago! I think there was an issue with one of the edges in the inset not setting correctly. Can you try splitting up the edge constraints and see if that fixes it? Or apply the priority to only one edge? We don't seem to be using priority anywhere else on this tableview I don't understand why this happens. . Also make sure when you merge it in that the commit has the bug number please. So its easier to find later. . Thanks for being so patient with me \ud83d\ude04  We've been really worried about how large BVC has been getting so that's why a lot of my refactor requests are about removing code from BVC. I can't wait for this to land. Thanks for getting to the requests so quickly . Sorry to be even more pedantic. but the return in the guard statements should be on a new line. (I just couldn't figure out multiline code comments in github so I did it one line) . Looks like you're right \ud83d\ude04  It's fine the way it is then. . I've enabled CI for your PR. But you'll need to add another commit in order to trigger it. A rebase should trigger it. The CI will check for any small nits and run the tests. After that we should be good. . Yea a fetch of upstream would be better. Thanks! The CI should run and leave a pass/fail. Awesome. If you can fix the lint errors. Should be good after that \ud83d\udc4d . looks like it failed to download the gem. working now. I'm going to merge this in. Thanks again for being super helpful getting this PR done. If you are up for it have a look at this small bug https://bugzilla.mozilla.org/show_bug.cgi?id=1341243\nit's related to the SimpleToast and a similar bug also happens with the copy URL bar. . It is a lot of icons. But they are all very small. uncompressed its 1mb. and once they are packaged for the IPA they'll be much smaller as most of them are just white icons. I want to avoid adding more complexity to this for 8.0. Maybe we can do this later if it becomes a problem.. I didn't request for review in each bug. But I'll add an attachment and close them all once I merge this. . Have you looked at the FxScreenGraph as a way of handling the navigation in this test? @npark-mozilla would this be a viable case for using it?. I suggested a small refactor. Lots of force casts there. Smart idea removing them all \ud83d\udc4d . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsLayout.swift | 85 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSnapshotHelper.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. I think we can ignore the error about the missing header comment. The fastlane/ folder is part of the excluded files in swiftlint so the error wont show up once this is merged. . There seems to be some failing tests related to withReadableConnection in SyncCommandsTests. This was happening because showHomePanelController is called multiple times to render the home screen \nThat bothers me so much! I haven't had a chance to look into it. If you are up for it I would totally appreciate it if you could look into it.. How does your fix work with the patch here? https://github.com/mozilla-mobile/firefox-ios/pull/2471. Can you try this fix. https://github.com/mozilla-mobile/firefox-ios/pull/2480 It should work for your case as well I think. \nIf the duration isnt long enough this way. You could add the duration to the ButtonToast as a variable. That way when using the show(Toast) method it'll use the duration set originally and we wouldnt need to pass around the duration. Only if it was an issue. Otherwise its fine. . Thanks for filing this issue. We are having a hard time understanding this issue. \nWhat is a real world use case for a feature like this?. We merged a separate. If this PR is still relevant. Feel free to rebase and reopen.. @bhavnapanchal if you can find an example of this issue on an actual site this is something we can work to fix. At the moment I don't think this is something we need. . This patch has landed in another PR. If aaron's advice doesnt work. Feel free to reopen this \ud83d\ude04 . Yes you'll need a clean folder. Also if you are in China someone else mentioned that the firewall blocks one of the dependencies from installing. . Can you try this PR and see if it works for your case https://github.com/mozilla-mobile/firefox-ios/pull/2480. ah okay. Yea, I see that you removed it your previous PR. thats why. I'll undo your change in my PR and merge it in. \ud83d\udc4d . Can you see if this also fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1342109. Hmm. I'll have to go get a BT keyboard to test this on an actual device. Not seeing anything weird in simulator. . lol took me a while to remove that muscle memory. You can install swiftlint on your local machine too to see these comments. brew install swiftlint and then just swiftlint in the project.. Also do you need to do this in the other Highlight cell too? . Awesome. \ud83d\udcaf . These are just some style changes. Not really that important. I'd rather have this in the beta going out today than to wait for this minor change. So I'm going to merge it in \ud83d\ude04 . I'm guessing you just converted a Kif Test to Earlgrey correct?. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 76 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 115 | Limit vertical whitespace to a single empty line. Currently 3. \nActivityStreamPanel.swift | 236 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 276 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 296 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamTopSitesCell.swift | 239 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. There are issues with the second row of TopSites getting cut off. But I'll Fix that in a separate PR. . I'm going to leave the linting errors in until we merge into master. Most of them are near code that is commented out while we transition. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBookmarksSynchronizer.swift | 155 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. Was this based off an old branch? BuddyBuild seems to not be able to find the scheme this branch was compiled with. If so could you please rebase this off master. . Dupe of #2517 . There are changes to the way we handle searchEngines that will most likely not require these changes anymore.. We already have this in a similar form under the Licenses which you can find in settings. It first contains the License for Firefox itself and then for any third parties we use. It also contains links to their github pages. Isn't our Licenses page the same or am I missing something?. Here is the existing License page \nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Assets/About/Licenses.html. Hey Alessio, \nI've confirmed with Emily this is something we already have and don't need a separate page for it. We do have some libraries that might be missing from that page. You are welcome to create a Bug and file a PR for those missing libraries! \nI (and Emily) apologize that you spent time on this feature and that we wont be able to use it \ud83d\ude22 . This PR has gotten stale. Please feel free to reopen if you would still like this merged in.. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabManager.swift | 698 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 431 | Force casts should be avoided. \nAppSettingsOptions.swift | 432 | Force casts should be avoided. \nAppSettingsOptions.swift | 510 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \nGlobal.swift | 136 | Force casts should be avoided. \nGlobal.swift | 156 | Force casts should be avoided. \nGlobal.swift | 187 | Force casts should be avoided. \nGlobal.swift | 197 | Force casts should be avoided. \nGlobal.swift | 240 | Force casts should be avoided. \nGlobal.swift | 363 | Force casts should be avoided. \nGlobal.swift | 439 | Force casts should be avoided. \nGlobal.swift | 447 | Force casts should be avoided. \nGlobal.swift | 200 | Force tries should be avoided. \nGlobal.swift | 419 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 1148 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nProfile.swift | 1189 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPushDecrypt.swift | 27 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nPushDecrypt.swift | 50 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nPushDecryptTests.swift | 8 | Limit vertical whitespace to a single empty line. Currently 2. \nPushDecryptTests.swift | 26 | Types should be nested at most 1 level deep \nPushDecryptTests.swift | 60 | Types should be nested at most 1 level deep \n\n  Generated by :no_entry_sign: Danger\n\n. This is an Empty PR.. This isnt happening anymore. closing.. Sorry for taking so long to get to this. As Brian said, This is very tricky and fragile code. So with that said thanks for tackling this!\nThere are issues with deleting chars. The autocomplete should disappear as soon as you delete a character even if a valid autocomplete exists.\nYou can fix this by adding canAutocomplete = false  to deleteBackward() and retesting. \nFrom my tests this does seem to work. If you can add that in and rebase. I'll merge it \ud83d\udc4d . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nActivityStreamPanel.swift | 234 | Force casts should be avoided. \nActivityStreamPanel.swift | 264 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 494 | Force casts should be avoided. \nReaderPanel.swift | 383 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nTopSitesPanel.swift | 201 | Force casts should be avoided. \nTopSitesPanel.swift | 211 | Force casts should be avoided. \nTopSitesPanel.swift | 690 | Force casts should be avoided. \nTopSitesPanel.swift | 726 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 155 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 162 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 285 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 520 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: Danger\n\n. @sleroux Yea lets do it. macOS is itching to update xcode. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nButtonToast.swift | 176 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nButtonToast.swift | 212 | Explicitly calling .init() should be avoided. \nButtonToast.swift | 206 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchEngines.swift | 167 | Force tries should be avoided. \nSearchEngines.swift | 239 | Force tries should be avoided. \nSearchEnginesTests.swift | 76 | where clauses are preferred over a single if inside a for. \nSearchTests.swift | 134 | Force casts should be avoided. \nSearchEnginesJSON.swift | 39 | where clauses are preferred over a single if inside a for. \n\n  Generated by :no_entry_sign: Danger\n\n. I cherry picked steph's changes just so I can try getting a build to install on device. I'll remove it before I merge . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 1113 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nProfile.swift | 1154 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. We've added this functionality. . @bkmunar have you looked at adding leanplum via carthage? \nhttps://github.com/Leanplum/Leanplum-iOS-SDK\nIt'll keep the changes to the project smaller :). Sorry for taking so long to get to this.\n2 overall things you should look at. \n- There are a lot of whitespace changes which makes it hard to track whats going on in your PR. Please make sure you remove all of them. I think there might be a setting in your IDE that is doing this? If the whitespace is actually wrong in all these places, its better to make a separate PR for it instead of doing it here. \n- You could use an enum for the events/state strings instead. It'll make sure a typo doesnt mess up your events. Look at how Steph did it here. https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Frontend/Home/ActivityStreamPanel.swift#L615. Also. Wait for Danger to finish. In case there are any lints I missed. . Just the last 2 nits. and you should be good!. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 508 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 1115 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nProfile.swift | 1156 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSwiftData.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. Just the extra space in Telemetry.swift\nI think you can ignore the SwiftData error. Its only because you touched the file.. This was related to some 7.x testing. closing.. This one is odd. It could be because iOS 10 is transitioning to the new Push API so not much love has been given to the older API. \nAlso looks like application:didFailToRegisterForRemoteNotificationsWithError is only called on more serious failures like bad certs. When a user disallows APN it still calls didRegister. Hi Iain! Sorry for taking so long to get to this. \nI tested this out on my device and found that the delay was a bit longer than I would have liked. \nThe unfortunate part is that the autocomplete for the URL and the search results happen in the same query. So slowing one down slows the other one down too. The autocomplete for the URL should be fast and the 0.1 debounce for that part creates a much more snappy experience. \nLooking at user feedback in both the App Store and our internal tools we arent really seeing this as a problem right now so I think we wont land this.\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabManagerTests.swift | 383 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 143 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 150 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 186 | Prefer != nil over let _ = \nBrowserDB.swift | 208 | Prefer != nil over let _ = \nBrowserDB.swift | 210 | Prefer != nil over let _ = \nBrowserDB.swift | 286 | Prefer != nil over let _ = \nBrowserDB.swift | 351 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserDB.swift | 358 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabManager.swift | 717 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 422 | Prefer != nil over let _ = \nTabManager.swift | 152 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 164 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 527 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 779 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 84 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxALoginStateMachine.swift | 54 | Force casts should be avoided. \nFxALoginStateMachine.swift | 69 | Force casts should be avoided. \nFxALoginStateMachine.swift | 85 | Force casts should be avoided. \nFxALoginStateMachine.swift | 125 | Force casts should be avoided. \nFxAContentViewController.swift | 206 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nNotificationRootViewController.swift | 153 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1009 | Prefer != nil over let _ = \nBrowserViewController.swift | 1440 | Prefer != nil over let _ = \nBrowserViewController.swift | 1733 | Prefer != nil over let _ = \nBrowserViewController.swift | 1988 | Prefer != nil over let _ = \nBrowserViewController.swift | 2489 | Prefer != nil over let _ = \nBrowserViewController.swift | 3250 | Prefer != nil over let _ = \nBrowserViewController.swift | 1900 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1071 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1088 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2931 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabManager.swift | 725 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 423 | Prefer != nil over let _ = \nTabManager.swift | 153 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 165 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 535 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 787 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 620 | Prefer != nil over let _ = \nTabTrayController.swift | 860 | where clauses are preferred over a single if inside a for. \nTabTrayController.swift | 639 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 685 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 723 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 1121 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTopTabsViewController.swift | 469 | Limit vertical whitespace to a single empty line. Currently 2. \nAppSettingsTableViewController.swift | 14 | Initializing an optional variable with nil is redundant. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 825 | Force casts should be avoided. \nSQLiteHistory.swift | 868 | Force casts should be avoided. \nSQLiteHistory.swift | 873 | Force casts should be avoided. \nSQLiteHistory.swift | 971 | Force casts should be avoided. \nSQLiteHistory.swift | 1015 | Force casts should be avoided. \nSQLiteHistory.swift | 1017 | Force casts should be avoided. \nSQLiteHistory.swift | 1018 | Force casts should be avoided. \nSQLiteHistory.swift | 1019 | Force casts should be avoided. \nSQLiteHistory.swift | 1029 | Force casts should be avoided. \nSQLiteHistory.swift | 177 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 245 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 708 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 758 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 759 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 139 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 146 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nTestAppDelegate.swift | 86 | Force tries should be avoided. \nAppSettingsOptions.swift | 431 | Force casts should be avoided. \nAppSettingsOptions.swift | 432 | Force casts should be avoided. \nAppSettingsOptions.swift | 508 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 135 | Force casts should be avoided. \nClientTests.swift | 27 | Force casts should be avoided. \nClientTests.swift | 41 | Force casts should be avoided. \nProfile.swift | 433 | Force casts should be avoided. \nProfile.swift | 84 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nAppInfo.swift | 9 | Force casts should be avoided. \nAppInfo.swift | 13 | Force casts should be avoided. \nAppInfo.swift | 17 | Force casts should be avoided. \nAppInfo.swift | 42 | Force casts should be avoided. \nKeychainWrapperExtensions.swift | 11 | Force casts should be avoided. \nSystemUtils.swift | 61 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nUserAgent.swift | 77 | Force tries should be avoided. \nUserAgent.swift | 110 | Force tries should be avoided. \nUserAgent.swift | 118 | Force tries should be avoided. \nTelemetry.swift | 45 | Force casts should be avoided. \nTelemetry.swift | 46 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 143 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 150 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nLeanplumIntegration.swift | 72 | Else and catch should be on the same line, one space after the previous declaration. \nAppSettingsOptions.swift | 431 | Force casts should be avoided. \nAppSettingsOptions.swift | 432 | Force casts should be avoided. \nAppSettingsOptions.swift | 508 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabManager.swift | 719 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 152 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 164 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 529 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 781 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientTests.swift | 27 | Force casts should be avoided. \nClientTests.swift | 41 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 233 | Force casts should be avoided. \nActivityStreamPanel.swift | 263 | Force casts should be avoided. \nActivityStreamPanel.swift | 335 | Force casts should be avoided. \nActivityStreamPanel.swift | 344 | Force casts should be avoided. \nActivityStreamPanel.swift | 350 | Force casts should be avoided. \nActivityStreamPanel.swift | 481 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistoryRecommendations.swift | 62 | Force casts should be avoided. \nTestSQLiteHistoryRecommendations.swift | 105 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 233 | Force casts should be avoided. \nActivityStreamPanel.swift | 263 | Force casts should be avoided. \nActivityStreamPanel.swift | 335 | Force casts should be avoided. \nActivityStreamPanel.swift | 344 | Force casts should be avoided. \nActivityStreamPanel.swift | 350 | Force casts should be avoided. \nActivityStreamPanel.swift | 481 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 143 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 150 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nActivityStreamPanel.swift | 233 | Force casts should be avoided. \nActivityStreamPanel.swift | 263 | Force casts should be avoided. \nActivityStreamPanel.swift | 335 | Force casts should be avoided. \nActivityStreamPanel.swift | 344 | Force casts should be avoided. \nActivityStreamPanel.swift | 350 | Force casts should be avoided. \nActivityStreamPanel.swift | 481 | Force casts should be avoided. \nHomePanelViewController.swift | 235 | where clauses are preferred over a single if inside a for. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestLogins.swift | 736 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestLogins.swift | 738 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 143 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 150 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppSettingsOptions.swift | 431 | Force casts should be avoided. \nAppSettingsOptions.swift | 432 | Force casts should be avoided. \nAppSettingsOptions.swift | 510 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 143 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 150 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 936 | Force casts should be avoided. \nBrowserViewController.swift | 1930 | Force casts should be avoided. \nBrowserViewController.swift | 1934 | Force casts should be avoided. \nBrowserViewController.swift | 1891 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1071 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1088 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2904 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nLoginsHelper.swift | 98 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 693 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 152 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 164 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 503 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 755 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 476 | Force casts should be avoided. \nTabTrayController.swift | 771 | Force casts should be avoided. \nTabTrayController.swift | 804 | Force casts should be avoided. \nTabTrayController.swift | 870 | Force casts should be avoided. \nTabTrayController.swift | 851 | where clauses are preferred over a single if inside a for. \nTabTrayController.swift | 633 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 679 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 714 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 1112 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBookmarksPanel.swift | 399 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nAppSettingsOptions.swift | 431 | Force casts should be avoided. \nAppSettingsOptions.swift | 432 | Force casts should be avoided. \nAppSettingsOptions.swift | 510 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Also a simple test around the FxA options would be great. Something as simple as test testing the url that is generated. If you wrote a function like FxAURLWithOptions(queryOptions)->URL you could easily test the different types of urls that are generated by the query. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 139 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 146 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 937 | Force casts should be avoided. \nBrowserViewController.swift | 1986 | Force casts should be avoided. \nBrowserViewController.swift | 1990 | Force casts should be avoided. \nFxAContentViewController.swift | 218 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 824 | Force casts should be avoided. \nSQLiteHistory.swift | 867 | Force casts should be avoided. \nSQLiteHistory.swift | 872 | Force casts should be avoided. \nSQLiteHistory.swift | 970 | Force casts should be avoided. \nSQLiteHistory.swift | 1014 | Force casts should be avoided. \nSQLiteHistory.swift | 1016 | Force casts should be avoided. \nSQLiteHistory.swift | 1017 | Force casts should be avoided. \nSQLiteHistory.swift | 1018 | Force casts should be avoided. \nSQLiteHistory.swift | 1028 | Force casts should be avoided. \nSQLiteHistory.swift | 177 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 245 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 707 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 757 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 758 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSQLiteHistory.swift | 1499 | Force casts should be avoided. \nTestSQLiteHistory.swift | 1499 | Force casts should be avoided. \nTestSQLiteHistory.swift | 974 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 824 | Force casts should be avoided. \nSQLiteHistory.swift | 867 | Force casts should be avoided. \nSQLiteHistory.swift | 872 | Force casts should be avoided. \nSQLiteHistory.swift | 970 | Force casts should be avoided. \nSQLiteHistory.swift | 990 | Force casts should be avoided. \nSQLiteHistory.swift | 991 | Force casts should be avoided. \nSQLiteHistory.swift | 992 | Force casts should be avoided. \nSQLiteHistory.swift | 993 | Force casts should be avoided. \nSQLiteHistory.swift | 1034 | Force casts should be avoided. \nSQLiteHistory.swift | 1036 | Force casts should be avoided. \nSQLiteHistory.swift | 1012 | Limit vertical whitespace to a single empty line. Currently 2. \nSQLiteHistory.swift | 177 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 245 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 707 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 757 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 758 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 234 | Force casts should be avoided. \nActivityStreamPanel.swift | 264 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 487 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 136 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 143 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 944 | Force casts should be avoided. \nBrowserViewController.swift | 1938 | Force casts should be avoided. \nBrowserViewController.swift | 1942 | Force casts should be avoided. \nBrowserViewController.swift | 1899 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1079 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1096 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2912 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 233 | Force casts should be avoided. \nActivityStreamPanel.swift | 263 | Force casts should be avoided. \nActivityStreamPanel.swift | 335 | Force casts should be avoided. \nActivityStreamPanel.swift | 344 | Force casts should be avoided. \nActivityStreamPanel.swift | 350 | Force casts should be avoided. \nActivityStreamPanel.swift | 481 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 146 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 153 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nSentryIntegration.swift | 5 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nResetTests.swift | 15 | Force casts should be avoided. \nResetTests.swift | 19 | Force casts should be avoided. \nRemoteTabsTable.swift | 68 | Force casts should be avoided. \nRemoteTabsTable.swift | 69 | Force casts should be avoided. \nRemoteTabsTable.swift | 168 | Force casts should be avoided. \nRemoteTabsTable.swift | 169 | Force casts should be avoided. \nRemoteTabsTable.swift | 119 | Force tries should be avoided. \nRemoteTabsTable.swift | 125 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nResetTests.swift | 15 | Force casts should be avoided. \nResetTests.swift | 19 | Force casts should be avoided. \nProfile.swift | 433 | Force casts should be avoided. \nProfile.swift | 84 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nRemoteTabsTable.swift | 68 | Force casts should be avoided. \nRemoteTabsTable.swift | 69 | Force casts should be avoided. \nRemoteTabsTable.swift | 170 | Force casts should be avoided. \nRemoteTabsTable.swift | 171 | Force casts should be avoided. \nRemoteTabsTable.swift | 121 | Force tries should be avoided. \nRemoteTabsTable.swift | 127 | Force tries should be avoided. \nSQLiteBookmarksSyncing.swift | 203 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 204 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 658 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 784 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 835 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 890 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 890 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 894 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 895 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 909 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 232 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 429 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1018 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1042 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1065 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1083 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1109 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1132 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1157 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 182 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 20 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 27 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 44 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 58 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 74 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 114 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 122 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 275 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 276 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 288 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 289 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 306 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 368 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 369 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBookmarksSynchronizer.swift | 93 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nBookmarksSynchronizer.swift | 130 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nClientsSynchronizer.swift | 127 | Initializing an optional variable with nil is redundant. \nClientsSynchronizer.swift | 366 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 361 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nTestBookmarksRepairRequestor.swift | 361 | where clauses are preferred over a single if inside a for. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nBookmarksRepairRequestor.swift | 447 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSentryIntegration.swift | 5 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 932 | Force casts should be avoided. \nBrowserViewController.swift | 1926 | Force casts should be avoided. \nBrowserViewController.swift | 1930 | Force casts should be avoided. \nBrowserViewController.swift | 1887 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1067 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1084 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2900 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nAppSettingsOptions.swift | 441 | Force casts should be avoided. \nAppSettingsOptions.swift | 442 | Force casts should be avoided. \nAppSettingsOptions.swift | 518 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 136 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 480 | Force casts should be avoided. \nAppSettingsOptions.swift | 481 | Force casts should be avoided. \nAppSettingsOptions.swift | 557 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 137 | Force casts should be avoided. \nSettingsTableViewController.swift | 521 | Force casts should be avoided. \nSettingsTableViewController.swift | 538 | Force casts should be avoided. \nSettingsTableViewController.swift | 109 | where clauses are preferred over a single if inside a for. \nSettingsTableViewController.swift | 119 | where clauses are preferred over a single if inside a for. \nSettingsTableViewController.swift | 382 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSettingsTableViewController.swift | 388 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nFeatureSwitchTests.swift | 89 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 139 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 146 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nAppSettingsOptions.swift | 480 | Force casts should be avoided. \nAppSettingsOptions.swift | 481 | Force casts should be avoided. \nAppSettingsOptions.swift | 557 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistoryRecommendations.swift | 71 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. getHighlights only fetches highlights+metadata from the cached table. In the cached table we only store 8 highlights so this would just reorder the cached highlights. We need to rewrite the computeHighlightsQuery so that we order sites with more metadata before we cut the list down to 8 and store in the cache. \nYou'll need to join on the metadata table in  computeHighlightsQuery which we arent anymore. We already filter out sites with no title so ranking with that isnt super helpful. Also I would prefer media_url over icon_url as media_url provides a richer highlight. While icon_url is just the favicon. \nYou could also rank on url and title length. Which wont work as intended all the time but its a useful signal. \n. we merged an alternative PR . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 995 | Prefer != nil over let _ = \nBrowserViewController.swift | 1414 | Prefer != nil over let _ = \nBrowserViewController.swift | 1701 | Prefer != nil over let _ = \nBrowserViewController.swift | 1956 | Prefer != nil over let _ = \nBrowserViewController.swift | 2440 | Prefer != nil over let _ = \nBrowserViewController.swift | 3215 | Prefer != nil over let _ = \nBrowserViewController.swift | 1868 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1057 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1074 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2882 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nAppSettingsOptions.swift | 175 | Prefer != nil over let _ = \nAppSettingsOptions.swift | 352 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 142 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 149 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 1003 | Prefer != nil over let _ = \nBrowserViewController.swift | 1424 | Prefer != nil over let _ = \nBrowserViewController.swift | 1714 | Prefer != nil over let _ = \nBrowserViewController.swift | 1969 | Prefer != nil over let _ = \nBrowserViewController.swift | 2457 | Prefer != nil over let _ = \nBrowserViewController.swift | 3232 | Prefer != nil over let _ = \nBrowserViewController.swift | 1881 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1065 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1082 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2899 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nLoginsHelper.swift | 98 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 726 | When the index is not used, .enumerated() can be removed. \nTabManager.swift | 422 | Prefer != nil over let _ = \nTabManager.swift | 152 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 164 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 535 | where clauses are preferred over a single if inside a for. \nTabManager.swift | 788 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 620 | Prefer != nil over let _ = \nTabTrayController.swift | 855 | where clauses are preferred over a single if inside a for. \nTabTrayController.swift | 639 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 683 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 718 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTabTrayController.swift | 1116 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBookmarksPanel.swift | 392 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nAppSettingsOptions.swift | 175 | Prefer != nil over let _ = \nAppSettingsOptions.swift | 352 | Prefer != nil over let _ = \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistoryRecommendations.swift | 71 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nFxADeviceRegistration.swift | 167 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nState.swift | 418 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nState.swift | 436 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nClientsSynchronizer.swift | 338 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 234 | Force casts should be avoided. \nActivityStreamPanel.swift | 264 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 494 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. I don't remember ever seeing this in undo. I'm guessing that this has never worked but was harder to find because as soon as you move around you'd end up saving the tabs. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 433 | Force casts should be avoided. \nProfile.swift | 84 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nResetTests.swift | 15 | Force casts should be avoided. \nResetTests.swift | 19 | Force casts should be avoided. \nRemoteTabsTable.swift | 68 | Force casts should be avoided. \nRemoteTabsTable.swift | 69 | Force casts should be avoided. \nRemoteTabsTable.swift | 170 | Force casts should be avoided. \nRemoteTabsTable.swift | 171 | Force casts should be avoided. \nRemoteTabsTable.swift | 121 | Force tries should be avoided. \nRemoteTabsTable.swift | 127 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 433 | Force casts should be avoided. \nProfile.swift | 84 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 203 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 204 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 658 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 784 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 835 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 890 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 890 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 894 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 895 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 909 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 232 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 429 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1018 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1042 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1065 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1083 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1109 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1132 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1157 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 182 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 20 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 27 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 44 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 58 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 74 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 114 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 122 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 275 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 276 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 288 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 289 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 306 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 368 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteRemoteClientsAndTabs.swift | 369 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBookmarksSynchronizer.swift | 129 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nClientsSynchronizer.swift | 127 | Initializing an optional variable with nil is redundant. \nClientsSynchronizer.swift | 367 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 433 | Force casts should be avoided. \nProfile.swift | 84 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBatchingClient.swift | 227 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nStorageClient.swift | 552 | Force casts should be avoided. \nStorageClient.swift | 689 | Force casts should be avoided. \nStorageClient.swift | 535 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nStorageClient.swift | 690 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nStorageClient.swift | 727 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nStorageClient.swift | 784 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 937 | Force casts should be avoided. \nBrowserViewController.swift | 1988 | Force casts should be avoided. \nBrowserViewController.swift | 1992 | Force casts should be avoided. \nBrowserViewController.swift | 1949 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1072 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1089 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2921 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. There is a NavigationTest.swift mentioned that doesnt seem to be in this PR. \nAlso people can use the pushState to forge history with this I think. Look at the comment here \nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Frontend/Browser/BrowserViewController.swift#L953\nI think the same comment would apply here no?\nIt's these small edge case security issues with the user scripts that makes me so hesitant to use them. \ud83d\ude22 . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 234 | Force casts should be avoided. \nActivityStreamPanel.swift | 264 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 495 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActionOverlayTableViewController.swift | 154 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 161 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteBookmarksSyncing.swift | 203 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 204 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 654 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 780 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 826 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 879 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 885 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 886 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 900 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 232 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 429 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1009 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1033 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1056 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1074 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1100 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1123 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteBookmarksSyncing.swift | 1148 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSyncTelemetry.swift | 95 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClearPrivateDataTests.swift | 180 | Force casts should be avoided. \nClearPrivateDataTests.swift | 213 | Force casts should be avoided. \nClearPrivateDataTests.swift | 241 | Force casts should be avoided. \nGlobal.swift | 136 | Force casts should be avoided. \nGlobal.swift | 156 | Force casts should be avoided. \nGlobal.swift | 187 | Force casts should be avoided. \nGlobal.swift | 197 | Force casts should be avoided. \nGlobal.swift | 240 | Force casts should be avoided. \nGlobal.swift | 363 | Force casts should be avoided. \nGlobal.swift | 439 | Force casts should be avoided. \nGlobal.swift | 447 | Force casts should be avoided. \nGlobal.swift | 200 | Force tries should be avoided. \nGlobal.swift | 419 | Force tries should be avoided. \nLoginManagerTests.swift | 54 | Force casts should be avoided. \nLoginManagerTests.swift | 80 | Force casts should be avoided. \nLoginManagerTests.swift | 87 | Force casts should be avoided. \nLoginManagerTests.swift | 100 | Force casts should be avoided. \nLoginManagerTests.swift | 114 | Force casts should be avoided. \nLoginManagerTests.swift | 126 | Force casts should be avoided. \nLoginManagerTests.swift | 165 | Force casts should be avoided. \nLoginManagerTests.swift | 166 | Force casts should be avoided. \nLoginManagerTests.swift | 178 | Force casts should be avoided. \nLoginManagerTests.swift | 186 | Force casts should be avoided. \nLoginManagerTests.swift | 208 | Force casts should be avoided. \nLoginManagerTests.swift | 209 | Force casts should be avoided. \nLoginManagerTests.swift | 241 | Force casts should be avoided. \nLoginManagerTests.swift | 242 | Force casts should be avoided. \nLoginManagerTests.swift | 273 | Force casts should be avoided. \nLoginManagerTests.swift | 274 | Force casts should be avoided. \nLoginManagerTests.swift | 298 | Force casts should be avoided. \nLoginManagerTests.swift | 299 | Force casts should be avoided. \nLoginManagerTests.swift | 329 | Force casts should be avoided. \nLoginManagerTests.swift | 416 | Force casts should be avoided. \nLoginManagerTests.swift | 473 | Force casts should be avoided. \nLoginManagerTests.swift | 581 | Force casts should be avoided. \nLoginManagerTests.swift | 587 | Force casts should be avoided. \nLoginManagerTests.swift | 595 | Force casts should be avoided. \nLoginManagerTests.swift | 616 | Force casts should be avoided. \nLoginManagerTests.swift | 627 | Force casts should be avoided. \nLoginManagerTests.swift | 628 | Force casts should be avoided. \nLoginManagerTests.swift | 642 | Force casts should be avoided. \nLoginManagerTests.swift | 643 | Force casts should be avoided. \nLoginManagerTests.swift | 670 | Force casts should be avoided. \nLoginManagerTests.swift | 675 | Force casts should be avoided. \nLoginManagerTests.swift | 682 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Hmm these swiftlint errors are getting annoying. I might turn off force cast. What do you think?. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 933 | Force casts should be avoided. \nBrowserViewController.swift | 1991 | Force casts should be avoided. \nBrowserViewController.swift | 1995 | Force casts should be avoided. \nBrowserViewController.swift | 1952 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1077 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1094 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2924 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. I think this is the alternative PR. we merged in the other one . So I'll close this one.. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 937 | Force casts should be avoided. \nBrowserViewController.swift | 2002 | Force casts should be avoided. \nBrowserViewController.swift | 2006 | Force casts should be avoided. \nQRCodeViewController.swift | 57 | Force casts should be avoided. \nQRCodeViewController.swift | 220 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Gosh. I dont know how to use bugzilla haha. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 937 | Force casts should be avoided. \nBrowserViewController.swift | 1931 | Force casts should be avoided. \nBrowserViewController.swift | 1935 | Force casts should be avoided. \nBrowserViewController.swift | 1892 | where clauses are preferred over a single if inside a for. \nBrowserViewController.swift | 1072 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 1089 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nBrowserViewController.swift | 2905 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 37 | Force casts should be avoided. \nAppDelegate.swift | 139 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 146 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppSettingsOptions.swift | 480 | Force casts should be avoided. \nAppSettingsOptions.swift | 481 | Force casts should be avoided. \nAppSettingsOptions.swift | 557 | Force casts should be avoided. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \nProfile.swift | 433 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 202 | Force casts should be avoided. \nAppDelegate.swift | 211 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 244 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 226 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 141 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 148 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nBrowserViewController.swift | 937 | Force casts should be avoided. \nBrowserViewController.swift | 1986 | Force casts should be avoided. \nBrowserViewController.swift | 1990 | Force casts should be avoided. \nLocalRequestHelper.swift | 16 | Force casts should be avoided. \nTabTrayController.swift | 476 | Force casts should be avoided. \nTabTrayController.swift | 771 | Force casts should be avoided. \nTabTrayController.swift | 804 | Force casts should be avoided. \nTabTrayController.swift | 868 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nLoginDetailViewController.swift | 181 | Force casts should be avoided. \nLoginDetailViewController.swift | 200 | Force casts should be avoided. \nLoginDetailViewController.swift | 256 | Force casts should be avoided. \nLoginDetailViewController.swift | 326 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 207 | Force casts should be avoided. \nSettingsTableViewController.swift | 517 | Force casts should be avoided. \nSettingsTableViewController.swift | 534 | Force casts should be avoided. \nProfile.swift | 433 | Force casts should be avoided. \nKeyboardHelper.swift | 18 | Force casts should be avoided. \nBrowserDB.swift | 43 | Force tries should be avoided. \nBrowserDB.swift | 89 | Force tries should be avoided. \nSQLiteBookmarksSyncing.swift | 203 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 204 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 654 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 780 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 826 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 879 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 885 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 886 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 900 | Force casts should be avoided. \nSQLiteHistory.swift | 824 | Force casts should be avoided. \nSQLiteHistory.swift | 867 | Force casts should be avoided. \nSQLiteHistory.swift | 872 | Force casts should be avoided. \nSQLiteHistory.swift | 970 | Force casts should be avoided. \nSQLiteHistory.swift | 990 | Force casts should be avoided. \nSQLiteHistory.swift | 991 | Force casts should be avoided. \nSQLiteHistory.swift | 992 | Force casts should be avoided. \nSQLiteHistory.swift | 993 | Force casts should be avoided. \nSQLiteHistory.swift | 1033 | Force casts should be avoided. \nSQLiteHistory.swift | 1035 | Force casts should be avoided. \nSQLiteLogins.swift | 131 | Force casts should be avoided. \nSQLiteLogins.swift | 146 | Force casts should be avoided. \nSQLiteLogins.swift | 188 | Force casts should be avoided. \nSQLiteLogins.swift | 911 | Force casts should be avoided. \nSQLiteQueue.swift | 28 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 182 | Force casts should be avoided. \nStorageClient.swift | 528 | Force casts should be avoided. \nStorageClient.swift | 665 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 234 | Force casts should be avoided. \nActivityStreamPanel.swift | 264 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 500 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Instead of providing an undo. We now allow you to pin a topsite. if you accidentally remove a site from your topsites. You can find it in history and add it back as a pin. \n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistoryRecommendations.swift | 71 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestSwiftData.swift | 32 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 38 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 40 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 41 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 115 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 24 | Force tries should be avoided. \nTestSwiftData.swift | 33 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 938 | Force casts should be avoided. \nBrowserViewController.swift | 1998 | Force casts should be avoided. \nBrowserViewController.swift | 2002 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 235 | Force casts should be avoided. \nActivityStreamPanel.swift | 265 | Force casts should be avoided. \nActivityStreamPanel.swift | 337 | Force casts should be avoided. \nActivityStreamPanel.swift | 346 | Force casts should be avoided. \nActivityStreamPanel.swift | 352 | Force casts should be avoided. \nActivityStreamPanel.swift | 496 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 80 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 165 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 172 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 93 | Limit vertical whitespace to a single empty line. Currently 3. \n\n  Generated by :no_entry_sign: Danger\n\n. @sleroux I've left a comment where I applied my fix. I havent merged this in because @bryanbell still wants to make some changes. Until I get the \ud83d\udc4d from him I'll keep this open. (I think there are some new new icons \ud83d\ude04 ). \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAContentViewController.swift | 218 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamTopSitesCell.swift | 250 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 498 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchSettingsTableViewController.swift | 208 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Thank you for this PR! And so sorry for taking so long to get to it. \nThere is a much simpler thing you can do I think. Simply call self.tableview.reloadData() in ViewWillAppear. thanks \ud83d\ude04  @kaar3k If you are looking for a new bug. This one seems along the same lines\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1344767\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2017 | Force casts should be avoided. \nBrowserViewController.swift | 2021 | Force casts should be avoided. \nAppInfo.swift | 9 | Force casts should be avoided. \nAppInfo.swift | 13 | Force casts should be avoided. \nAppInfo.swift | 17 | Force casts should be avoided. \nAppInfo.swift | 42 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 805 | Force casts should be avoided. \nSQLiteHistory.swift | 848 | Force casts should be avoided. \nSQLiteHistory.swift | 853 | Force casts should be avoided. \nSQLiteHistory.swift | 951 | Force casts should be avoided. \nSQLiteHistory.swift | 971 | Force casts should be avoided. \nSQLiteHistory.swift | 972 | Force casts should be avoided. \nSQLiteHistory.swift | 973 | Force casts should be avoided. \nSQLiteHistory.swift | 974 | Force casts should be avoided. \nSQLiteHistory.swift | 1014 | Force casts should be avoided. \nSQLiteHistory.swift | 1016 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDeferredTests.swift | 97 | Limit vertical whitespace to a single empty line. Currently 2. \nDeferredTests.swift | 75 | Types should be nested at most 1 level deep \nDeferredTests.swift | 101 | Types should be nested at most 1 level deep \nDeferredTests.swift | 105 | Types should be nested at most 1 level deep \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPrefs.swift | 175 | Force casts should be avoided. \nTestBookmarksRepairRequestor.swift | 368 | Force casts should be avoided. \nTestBookmarksRepairRequestor.swift | 395 | Force casts should be avoided. \nTestBookmarksRepairRequestor.swift | 82 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 93 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 205 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 270 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 283 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 331 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 337 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nEvents.swift | 74 | Force casts should be avoided. \nEvents.swift | 76 | Force casts should be avoided. \nEvents.swift | 77 | Force casts should be avoided. \nEvents.swift | 78 | Force casts should be avoided. \nEvents.swift | 79 | Force casts should be avoided. \nEvents.swift | 14 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nMenuPresentationAnimator.swift | 30 | Force casts should be avoided. \nMenuPresentationAnimator.swift | 32 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAPushMessageTest.swift | 29 | Force casts should be avoided. \nFxAPushMessageTest.swift | 30 | Force casts should be avoided. \nFxAPushMessageTest.swift | 31 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamTopSitesCell.swift | 250 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 506 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nTabTrayController.swift | 476 | Force casts should be avoided. \nTabTrayController.swift | 769 | Force casts should be avoided. \nTabTrayController.swift | 802 | Force casts should be avoided. \nTabTrayController.swift | 866 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 480 | Force casts should be avoided. \nAppSettingsOptions.swift | 481 | Force casts should be avoided. \nAppSettingsOptions.swift | 557 | Force casts should be avoided. \nAppSettingsOptions.swift | 574 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 288 | Force tries should be avoided. \nAppSettingsOptions.swift | 292 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nStorageClient.swift | 552 | Force casts should be avoided. \nStorageClient.swift | 689 | Force casts should be avoided. \nDownloadTests.swift | 72 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 202 | Force casts should be avoided. \nAppDelegate.swift | 211 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 244 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 226 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 141 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 148 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nTabTrayController.swift | 477 | Force casts should be avoided. \nTabTrayController.swift | 770 | Force casts should be avoided. \nTabTrayController.swift | 803 | Force casts should be avoided. \nTabTrayController.swift | 867 | Force casts should be avoided. \nActivityStreamPanel.swift | 234 | Force casts should be avoided. \nActivityStreamPanel.swift | 264 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 495 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 202 | Force casts should be avoided. \nAppDelegate.swift | 211 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 244 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 226 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 141 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 148 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nProfile.swift | 437 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 482 | Force casts should be avoided. \nAppSettingsOptions.swift | 483 | Force casts should be avoided. \nAppSettingsOptions.swift | 559 | Force casts should be avoided. \nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 290 | Force tries should be avoided. \nAppSettingsOptions.swift | 294 | Force tries should be avoided. \nFxAContentViewController.swift | 131 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFxAContentViewController.swift | 220 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. marked as wont fix. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 202 | Force casts should be avoided. \nAppDelegate.swift | 211 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 244 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 226 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 141 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 148 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nQRCodeViewController.swift | 58 | Force casts should be avoided. \nQRCodeViewController.swift | 221 | Force casts should be avoided. \nTabTrayController.swift | 476 | Force casts should be avoided. \nTabTrayController.swift | 769 | Force casts should be avoided. \nTabTrayController.swift | 802 | Force casts should be avoided. \nTabTrayController.swift | 866 | Force casts should be avoided. \nTopTabsViewController.swift | 285 | Force casts should be avoided. \nAppMenuConfiguration.swift | 307 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 235 | Force casts should be avoided. \nActivityStreamPanel.swift | 265 | Force casts should be avoided. \nActivityStreamPanel.swift | 337 | Force casts should be avoided. \nActivityStreamPanel.swift | 346 | Force casts should be avoided. \nActivityStreamPanel.swift | 352 | Force casts should be avoided. \nActivityStreamPanel.swift | 505 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \nBrowserTable.swift | 702 | Force casts should be avoided. \nSQLiteHistory.swift | 829 | Force casts should be avoided. \nSQLiteHistory.swift | 872 | Force casts should be avoided. \nSQLiteHistory.swift | 877 | Force casts should be avoided. \nSQLiteHistory.swift | 975 | Force casts should be avoided. \nSQLiteHistory.swift | 995 | Force casts should be avoided. \nSQLiteHistory.swift | 996 | Force casts should be avoided. \nSQLiteHistory.swift | 997 | Force casts should be avoided. \nSQLiteHistory.swift | 998 | Force casts should be avoided. \nSQLiteHistory.swift | 1038 | Force casts should be avoided. \nSQLiteHistory.swift | 1040 | Force casts should be avoided. \nSQLiteHistory.swift | 149 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 1588 | Force casts should be avoided. \nTestSQLiteHistory.swift | 1588 | Force casts should be avoided. \nTestSQLiteHistory.swift | 1456 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 974 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 805 | Force casts should be avoided. \nSQLiteHistory.swift | 848 | Force casts should be avoided. \nSQLiteHistory.swift | 853 | Force casts should be avoided. \nSQLiteHistory.swift | 951 | Force casts should be avoided. \nSQLiteHistory.swift | 971 | Force casts should be avoided. \nSQLiteHistory.swift | 972 | Force casts should be avoided. \nSQLiteHistory.swift | 973 | Force casts should be avoided. \nSQLiteHistory.swift | 974 | Force casts should be avoided. \nSQLiteHistory.swift | 1014 | Force casts should be avoided. \nSQLiteHistory.swift | 1016 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nActivityStreamPanel.swift | 235 | Force casts should be avoided. \nActivityStreamPanel.swift | 265 | Force casts should be avoided. \nActivityStreamPanel.swift | 337 | Force casts should be avoided. \nActivityStreamPanel.swift | 346 | Force casts should be avoided. \nActivityStreamPanel.swift | 352 | Force casts should be avoided. \nActivityStreamPanel.swift | 504 | Force casts should be avoided. \nReaderPanel.swift | 383 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nTopSitesPanel.swift | 201 | Force casts should be avoided. \nTopSitesPanel.swift | 211 | Force casts should be avoided. \nTopSitesPanel.swift | 690 | Force casts should be avoided. \nTopSitesPanel.swift | 726 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 81 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 164 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 171 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. No we usually have a rebase merge approach for the project. So all commits are folded into one when merging. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 205 | Force casts should be avoided. \nAppDelegate.swift | 214 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 247 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 207 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 229 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 438 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 144 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 151 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 202 | Force casts should be avoided. \nAppDelegate.swift | 211 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 244 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 226 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 428 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 141 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 148 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nTabTrayController.swift | 477 | Force casts should be avoided. \nTabTrayController.swift | 770 | Force casts should be avoided. \nTabTrayController.swift | 803 | Force casts should be avoided. \nTabTrayController.swift | 867 | Force casts should be avoided. \nTabTrayController.swift | 473 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nActivityStreamPanel.swift | 235 | Force casts should be avoided. \nActivityStreamPanel.swift | 265 | Force casts should be avoided. \nActivityStreamPanel.swift | 337 | Force casts should be avoided. \nActivityStreamPanel.swift | 346 | Force casts should be avoided. \nActivityStreamPanel.swift | 352 | Force casts should be avoided. \nActivityStreamPanel.swift | 504 | Force casts should be avoided. \nActivityStreamPanel.swift | 588 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nActivityStreamPanel.swift | 235 | Force casts should be avoided. \nActivityStreamPanel.swift | 265 | Force casts should be avoided. \nActivityStreamPanel.swift | 337 | Force casts should be avoided. \nActivityStreamPanel.swift | 346 | Force casts should be avoided. \nActivityStreamPanel.swift | 352 | Force casts should be avoided. \nActivityStreamPanel.swift | 505 | Force casts should be avoided. \nReaderPanel.swift | 371 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nTopSitesPanel.swift | 215 | Force casts should be avoided. \nTopSitesPanel.swift | 225 | Force casts should be avoided. \nTopSitesPanel.swift | 726 | Force casts should be avoided. \nTopSitesPanel.swift | 762 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 80 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 165 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 172 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 93 | Limit vertical whitespace to a single empty line. Currently 3. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nUIImageColors.swift | 159 | Force casts should be avoided. \nUIImageColors.swift | 159 | Force casts should be avoided. \nUIImageColors.swift | 204 | Force casts should be avoided. \nUIImageColors.swift | 211 | Force casts should be avoided. \nUIImageColors.swift | 240 | Force casts should be avoided. \nUIImageColors.swift | 1 | Files should have consistent header comments. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 36 | There should be no space before and one after any comma. \nUIImageColors.swift | 196 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 965 | Force casts should be avoided. \nBrowserViewController.swift | 2128 | Force casts should be avoided. \nBrowserViewController.swift | 2132 | Force casts should be avoided. \nPrefs.swift | 177 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nActivityStreamPanel.swift | 235 | Force casts should be avoided. \nActivityStreamPanel.swift | 265 | Force casts should be avoided. \nActivityStreamPanel.swift | 337 | Force casts should be avoided. \nActivityStreamPanel.swift | 346 | Force casts should be avoided. \nActivityStreamPanel.swift | 352 | Force casts should be avoided. \nActivityStreamPanel.swift | 504 | Force casts should be avoided. \nReaderPanel.swift | 383 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nTopSitesPanel.swift | 201 | Force casts should be avoided. \nTopSitesPanel.swift | 211 | Force casts should be avoided. \nTopSitesPanel.swift | 690 | Force casts should be avoided. \nTopSitesPanel.swift | 726 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 81 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 164 | Force casts should be avoided. \nActionOverlayTableViewController.swift | 171 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 259 | Force casts should be avoided. \nActivityStreamPanel.swift | 269 | Force casts should be avoided. \nActivityStreamPanel.swift | 302 | Force casts should be avoided. \nActivityStreamPanel.swift | 389 | Force casts should be avoided. \nActivityStreamPanel.swift | 398 | Force casts should be avoided. \nActivityStreamPanel.swift | 405 | Force casts should be avoided. \nActivityStreamPanel.swift | 411 | Force casts should be avoided. \nActivityStreamPanel.swift | 575 | Force casts should be avoided. \nActivityStreamTests.swift | 99 | Force casts should be avoided. \nActivityStreamTests.swift | 112 | Force casts should be avoided. \nActivityStreamTests.swift | 129 | Force casts should be avoided. \nActivityStreamTests.swift | 142 | Force casts should be avoided. \nActivityStreamTests.swift | 148 | Force casts should be avoided. \nActivityStreamTests.swift | 178 | Force casts should be avoided. \nActivityStreamTests.swift | 209 | Force casts should be avoided. \nSQLiteHistoryRecommendations.swift | 71 | Force casts should be avoided. \nTestSQLiteHistoryRecommendations.swift | 105 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistoryRecommendations.swift | 71 | Force casts should be avoided. \nTestSQLiteMetadata.swift | 109 | Force casts should be avoided. \nTestSQLiteMetadata.swift | 110 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 205 | Force casts should be avoided. \nAppDelegate.swift | 214 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 247 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 207 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 229 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 438 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 144 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 151 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 205 | Force casts should be avoided. \nAppDelegate.swift | 214 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 247 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 207 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 229 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 431 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 144 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 151 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserDB.swift | 42 | Force tries should be avoided. \nBrowserDB.swift | 88 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 259 | Force casts should be avoided. \nActivityStreamPanel.swift | 269 | Force casts should be avoided. \nActivityStreamPanel.swift | 302 | Force casts should be avoided. \nActivityStreamPanel.swift | 389 | Force casts should be avoided. \nActivityStreamPanel.swift | 398 | Force casts should be avoided. \nActivityStreamPanel.swift | 405 | Force casts should be avoided. \nActivityStreamPanel.swift | 411 | Force casts should be avoided. \nActivityStreamPanel.swift | 581 | Force casts should be avoided. \nActivityStreamPanel.swift | 672 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nActivityStreamTopSitesCell.swift | 256 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 512 | Force casts should be avoided. \nBrowserTable.swift | 703 | Force casts should be avoided. \nSQLiteHistory.swift | 838 | Force casts should be avoided. \nSQLiteHistory.swift | 881 | Force casts should be avoided. \nSQLiteHistory.swift | 886 | Force casts should be avoided. \nSQLiteHistory.swift | 984 | Force casts should be avoided. \nSQLiteHistory.swift | 1004 | Force casts should be avoided. \nSQLiteHistory.swift | 1005 | Force casts should be avoided. \nSQLiteHistory.swift | 1006 | Force casts should be avoided. \nSQLiteHistory.swift | 1007 | Force casts should be avoided. \nSQLiteHistory.swift | 1047 | Force casts should be avoided. \nSQLiteHistory.swift | 1049 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Something like \nclass PrivilegedRequest: NSMutableURLRequest {\n    override init(url URL: URL, cachePolicy: NSURLRequest.CachePolicy, timeoutInterval: TimeInterval) {\n        //rewrite reader mode urls here\n        let parsedURL: URL\n        if URL.isSyncedReaderModeURL, let readerUrl = URL.decodeReaderModeURL, let newURL = readerUrl.encodeReaderModeURL(WebServer.sharedInstance.baseReaderModeURL()) {\n            parsedURL = newURL\n        } else {\n            parsedURL = URL\n        }\n        super.init(url: parsedURL, cachePolicy: cachePolicy, timeoutInterval: timeoutInterval)\n        setPrivileged()\n    }\nThis should work. You can type in a url in the url bar with about:reader?url=blah and it works! \nIf you do go this route this is opening up PrivilegedRequest to more than it was meant to do. So I would try to structure this for future growth. I can see us using this for all sorts of custom urls. \n\nTry to separate out the parsing of urls into a private method in PrivilegedRequest. \nLots of tests \ud83d\ude09 \nA couple lines of documentation on what and why we are doing this. . PrivilegedRequest is to prevent internal URLs from being accessible manually via javascript or clicking a link on the page. https://bugzilla.mozilla.org/show_bug.cgi?id=1263627\n\nI agree that PrivilegedRequest is a weird place to put this. Your approach fits better with how currently handle reader mode urls.. You can simplify this a lot by just trying to convert the url into a reader mode url and returning nil if you cant. \nSomething like\n // If the url is a reader mode url, create a privlidged request and load on our internal webserver reader mode renderer\nif let url = request.url, let syncedURL = url.decodedReaderModeURL {\n  let readerModeRequest = PrivilegedRequest(url: localReaderModeURL) as URLRequest\n  return webView.load(readerModeRequest)\n}\nreturn webView.load(request)\ndecodedReaderModeURL will simply return nil if it isnt a readermode url. Also for any additons to NSURLExtensions please make sure to write a few tests. There are samples in SharedTests/NSURLExtensionTests. Very confused about the build failing. No one else's builds are failing. weird. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 482 | Force casts should be avoided. \nAppSettingsOptions.swift | 483 | Force casts should be avoided. \nAppSettingsOptions.swift | 559 | Force casts should be avoided. \nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 290 | Force tries should be avoided. \nAppSettingsOptions.swift | 294 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. For Tab restoration you can add an event here, we'll have more information in this try/catch \nhttps://github.com/mozilla-mobile/firefox-ios/blob/0a9f77dc0d9049e66d6668a28026bf54db5a07e4/Client/Frontend/Browser/TabManager.swift#L694\nThere is also one for restoring Tabmanager:773. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \nBrowserDB.swift | 42 | Force tries should be avoided. \nBrowserDB.swift | 88 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 256 | Force casts should be avoided. \nActivityStreamPanel.swift | 266 | Force casts should be avoided. \nActivityStreamPanel.swift | 294 | Force casts should be avoided. \nActivityStreamPanel.swift | 375 | Force casts should be avoided. \nActivityStreamPanel.swift | 384 | Force casts should be avoided. \nActivityStreamPanel.swift | 390 | Force casts should be avoided. \nActivityStreamPanel.swift | 550 | Force casts should be avoided. \nActivityStreamPanel.swift | 637 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 941 | Force casts should be avoided. \nBrowserViewController.swift | 2022 | Force casts should be avoided. \nBrowserViewController.swift | 2026 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 389 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nTopSitesPanel.swift | 202 | Force casts should be avoided. \nTopSitesPanel.swift | 212 | Force casts should be avoided. \nTopSitesPanel.swift | 691 | Force casts should be avoided. \nTopSitesPanel.swift | 727 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 477 | Force casts should be avoided. \nTabTrayController.swift | 770 | Force casts should be avoided. \nTabTrayController.swift | 803 | Force casts should be avoided. \nTabTrayController.swift | 867 | Force casts should be avoided. \nTabTrayController.swift | 473 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 438 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppInfo.swift | 9 | Force casts should be avoided. \nAppInfo.swift | 13 | Force casts should be avoided. \nAppInfo.swift | 17 | Force casts should be avoided. \nAppInfo.swift | 42 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 87 | Initializing an optional variable with nil is redundant. \nConnection.swift | 450 | Limit vertical whitespace to a single empty line. Currently 4. \nConnection.swift | 71 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 301 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 693 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 1 | Files should have consistent header comments. \nStatement.swift | 36 | Initializing an optional variable with nil is redundant. \nStatement.swift | 189 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nStatement.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \nStatement.swift | 1 | Files should have consistent header comments. \nHelpers.swift | 1 | Files should have consistent header comments. \nConnectionTests.swift | 346 | Limit vertical whitespace to a single empty line. Currently 2. \nConnectionTests.swift | 12 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 347 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 1 | Files should have consistent header comments. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 436 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 614 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 737 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnectionTests.swift | 364 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 444 | Force casts should be avoided. \nHistorySynchronizerTests.swift | 243 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppInfo.swift | 9 | Force casts should be avoided. \nAppInfo.swift | 13 | Force casts should be avoided. \nAppInfo.swift | 17 | Force casts should be avoided. \nAppInfo.swift | 54 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. wowzers didnt know there was this much code we didnt need. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 202 | Force casts should be avoided. \nAppDelegate.swift | 211 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 244 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 226 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 141 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 148 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nNightModeTests.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nNoImageTests.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. Thanks for the explanation! . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 295 | Force casts should be avoided. \nActivityStreamPanel.swift | 305 | Force casts should be avoided. \nActivityStreamPanel.swift | 333 | Force casts should be avoided. \nActivityStreamPanel.swift | 414 | Force casts should be avoided. \nActivityStreamPanel.swift | 423 | Force casts should be avoided. \nActivityStreamPanel.swift | 429 | Force casts should be avoided. \nActivityStreamPanel.swift | 589 | Force casts should be avoided. \nActivityStreamPanel.swift | 676 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nActivityStreamTopSitesCell.swift | 262 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 528 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestBookmarksRepairRequestor.swift | 82 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 93 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 205 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 270 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 283 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 331 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 337 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 444 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 685 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Its just asset changes. Merging. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 39 | Force casts should be avoided. \nAppDelegate.swift | 206 | Force casts should be avoided. \nAppDelegate.swift | 215 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 248 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 208 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 230 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 439 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 145 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 152 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nTestAppDelegate.swift | 77 | Force tries should be avoided. \nProfileTest.swift | 25 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nProfile.swift | 411 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 38 | Force casts should be avoided. \nAppDelegate.swift | 205 | Force casts should be avoided. \nAppDelegate.swift | 214 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 247 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 774 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 207 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 229 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 438 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 144 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 151 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. Sorry for the long delay. This is wonderfully succinct. If you could write a few tests for this that would make it even better. There should be an ArrayExtensionsTests.swift where you can write a few tests.\nThank you \ud83d\ude04 \n . Awesome @bereket6725 , I look forward to the bug on Bugzilla \ud83d\ude04  - If you think it might be a security issue you can check the security flag when creating the bug. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 838 | Force casts should be avoided. \nSQLiteHistory.swift | 881 | Force casts should be avoided. \nSQLiteHistory.swift | 886 | Force casts should be avoided. \nSQLiteHistory.swift | 984 | Force casts should be avoided. \nSQLiteHistory.swift | 1004 | Force casts should be avoided. \nSQLiteHistory.swift | 1005 | Force casts should be avoided. \nSQLiteHistory.swift | 1006 | Force casts should be avoided. \nSQLiteHistory.swift | 1007 | Force casts should be avoided. \nSQLiteHistory.swift | 1047 | Force casts should be avoided. \nSQLiteHistory.swift | 1049 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. Closing stale PR. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClipBoardTests.swift | 41 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nCompactModeUITests.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 676 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 686 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. Doesnt look like codeCov ran on this PR. Might be working :). \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 217 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 250 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 778 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 210 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 232 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 441 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 147 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 154 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSyncTelemetryTests.swift | 50 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSyncTelemetryTests.swift | 75 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSyncTelemetryTests.swift | 110 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nHistorySynchronizerTests.swift | 243 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 217 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 250 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 778 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 210 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 232 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 441 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 147 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 154 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteRemoteClientsAndTabs.swift | 172 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 148 | Limit vertical whitespace to a single empty line. Currently 4. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 217 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 250 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 776 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 210 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 232 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 429 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 147 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 154 | When registing for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 689 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 689 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 688 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. It'll re-run for any files touched. There might be a few errors that come up unrelated to your changes you can usually ignore them. But still look at the section just in case there is something you can fix. . Looks good. I dont understand how a default site is caching its bookmark status but this does fix the issue. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1474 | Arguments can be omitted when matching enums with associated types if they are not used. \nBrowserViewController.swift | 1476 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. Woo! Thanks for looking at the tests.\nCurious about LoginManagerTests.swift do all the tests pass?\nit looks like there are both EarlGrey and Kif tests in this file. @npark-mozilla can confirm but we are trying to make sure all new tests are written in EarlGrey. Does it make sense to re-write these tests in EarlGrey? . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 688 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. About Spotlighthelper, The last I remember querying the entire body was causing redraws which could be hurting the performance of the page. You can run safari web inspector to see this.\n Does passing the entire body even make sense? What if we just passed title/description from the document head . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1474 | Arguments can be omitted when matching enums with associated types if they are not used. \nBrowserViewController.swift | 1476 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. I think custom app urls are less common. Its mainly spammy sites which redirect you to the app store that we want to prevent. . Great! Thanks for moving the stuff out of BVC. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1474 | Arguments can be omitted when matching enums with associated types if they are not used. \nBrowserViewController.swift | 1476 | Arguments can be omitted when matching enums with associated types if they are not used. \nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 587 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \nPhotonActionSheet.swift | 343 | Limit vertical whitespace to a single empty line. Currently 2. \nPhotonActionSheetProtocol.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. Darn! Turns out I'm using a feature of swift 4 (which I have turned on in xcode9) \nSorry about the breaking build I'll fix that.. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 147 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 154 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \nProfile.swift | 775 | Prefer () -> over Void ->. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 218 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 251 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 792 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 211 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 233 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 430 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 148 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 155 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. NSUserActivity is being used exclusively now for Handoff... we're not depending on it to do the quasi-Spotlight indexing anymore\nThis fixes our issue because for some reason the last NSUserActivity wasn't getting cleared out with the Spotlight index. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 139 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 143 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 377 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 424 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 470 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 551 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 139 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 143 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 377 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 424 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 470 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 551 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 778 | Prefer () -> over Void ->. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 774 | Prefer () -> over Void ->. \nTestFaviconsTable.swift | 18 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 36 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 58 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 78 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSQLiteHistory.swift | 1444 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 970 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestTableTable.swift | 102 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientTests.swift | 27 | Force casts should be avoided. \nClientTests.swift | 41 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAutocompleteTextField.swift | 185 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 76 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nCompactModeUITests.swift | 1 | Files should have consistent header comments. \nFxScreenGraph.swift | 273 | Else and catch should be on the same line, one space after the previous declaration. \nFxScreenGraph.swift | 284 | Else and catch should be on the same line, one space after the previous declaration. \nFxScreenGraph.swift | 326 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nBaseTestCase.swift | 76 | Opening braces should be preceded by a single space and on the same line as the declaration. \nFxScreenGraph.swift | 326 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAContentViewController.swift | 132 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFxAContentViewController.swift | 146 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 227 | Force casts should be avoided. \nAppDelegate.swift | 236 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 269 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nAppDelegate.swift | 814 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 229 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 251 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 448 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 166 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 173 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserViewController.swift | 964 | Force casts should be avoided. \nBrowserViewController.swift | 2045 | Force casts should be avoided. \nBrowserViewController.swift | 2049 | Force casts should be avoided. \nBrowserViewController.swift | 1484 | Arguments can be omitted when matching enums with associated types if they are not used. \nBrowserViewController.swift | 1486 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 167 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 174 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nActivityStreamPanel.swift | 688 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nProfile.swift | 756 | Prefer () -> over Void ->. \nTestSQLiteHistory.swift | 1444 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 970 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. I'm happy with how this is now. But I really need to write some more tests. There is some code I can delete in SQLHistory related to topsites but I want to wait until I remove the old TopsitesPanel. (I'll be able to remove a lot more once that happens)\nWhile we are here (not for this PR but maybe in a followup). Is there a way we can not invalidate topsites so frequently? Imagine a user with 1k+ visits. Their topsites probably dont change much but we recalculate every single time they visit a new page. Does something like Invalidate after a percentage of new visits have happened. For example, invalidate after visits increases by 2.5% so for someone with 1k visits that would be after 25 visits. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteLogins.swift | 955 | Limit vertical whitespace to a single empty line. Currently 2. \nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 139 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 143 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 377 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 424 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 470 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 551 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAContentViewController.swift | 132 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFxAContentViewController.swift | 148 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 776 | Prefer () -> over Void ->. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSyncUITests.swift | 31 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSyncUITests.swift | 31 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. This seems a bit weird I dont think we should need to do this in order to focus. We should instead try to figure out what is removing focus and stop that from happening.\nWhen opening a newtab we call popToBVC sometimes. This calls leaveOverlayMode which will resign first responder. \nThere is probably some method that is being called to setup/clear the state that is resigningFirstResponder when a new tab is created. . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAPushMessageHandler.swift | 221 | Arguments can be omitted when matching enums with associated types if they are not used. \nFxAPushMessageHandler.swift | 223 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 167 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 174 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nTabTrayController.swift | 473 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nActivityStreamPanel.swift | 688 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \nFxAContentViewController.swift | 132 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFxAContentViewController.swift | 146 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nProfileTest.swift | 25 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nProfile.swift | 774 | Prefer () -> over Void ->. \nSQLiteLogins.swift | 955 | Limit vertical whitespace to a single empty line. Currently 2. \nSQLiteRemoteClientsAndTabs.swift | 148 | Limit vertical whitespace to a single empty line. Currently 4. \nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 139 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 143 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 377 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 424 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 470 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 551 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSyncTelemetryTests.swift | 50 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSyncTelemetryTests.swift | 75 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSyncTelemetryTests.swift | 110 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 18 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 36 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 58 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestFaviconsTable.swift | 78 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSQLiteHistory.swift | 1444 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 970 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestTableTable.swift | 102 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nHistorySynchronizer.swift | 278 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 121 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 123 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 125 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 127 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 129 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 131 | Arguments can be omitted when matching enums with associated types if they are not used. \nHistorySynchronizerTests.swift | 243 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nConnection.swift | 87 | Initializing an optional variable with nil is redundant. \nConnection.swift | 450 | Limit vertical whitespace to a single empty line. Currently 4. \nConnection.swift | 71 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 301 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 693 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 1 | Files should have consistent header comments. \nStatement.swift | 36 | Initializing an optional variable with nil is redundant. \nStatement.swift | 189 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nStatement.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \nStatement.swift | 1 | Files should have consistent header comments. \nHelpers.swift | 1 | Files should have consistent header comments. \nConnectionTests.swift | 346 | Limit vertical whitespace to a single empty line. Currently 2. \nConnectionTests.swift | 12 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 347 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 1 | Files should have consistent header comments. \nNightModeTests.swift | 1 | Files should have consistent header comments. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 436 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 614 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 737 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnectionTests.swift | 364 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 87 | Initializing an optional variable with nil is redundant. \nConnection.swift | 450 | Limit vertical whitespace to a single empty line. Currently 4. \nConnection.swift | 71 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 301 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 693 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 1 | Files should have consistent header comments. \nStatement.swift | 36 | Initializing an optional variable with nil is redundant. \nStatement.swift | 189 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nStatement.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \nStatement.swift | 1 | Files should have consistent header comments. \nHelpers.swift | 1 | Files should have consistent header comments. \nConnectionTests.swift | 346 | Limit vertical whitespace to a single empty line. Currently 2. \nConnectionTests.swift | 12 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 347 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 1 | Files should have consistent header comments. \nContentBlockerHelper.swift | 1 | Files should have consistent header comments. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 436 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 614 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 737 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnectionTests.swift | 364 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 167 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 174 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 774 | Prefer () -> over Void ->. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 5 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 965 | Force casts should be avoided. \nBrowserViewController.swift | 2047 | Force casts should be avoided. \nBrowserViewController.swift | 2051 | Force casts should be avoided. \nBrowserViewController.swift | 1487 | Arguments can be omitted when matching enums with associated types if they are not used. \nBrowserViewController.swift | 1489 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 1219 | Types should be nested at most 1 level deep \nSynchronizer.swift | 130 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 132 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 134 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 136 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 138 | Arguments can be omitted when matching enums with associated types if they are not used. \nSynchronizer.swift | 140 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 749 | Prefer () -> over Void ->. \nBrowserDB.swift | 199 | Explicitly calling .init() should be avoided. \nSQLiteLogins.swift | 852 | Limit vertical whitespace to a single empty line. Currently 2. \nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 139 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 143 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 430 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 476 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 557 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSQLiteHistory.swift | 1437 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 961 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 32 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 38 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 39 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 113 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAPushMessageHandler.swift | 237 | Arguments can be omitted when matching enums with associated types if they are not used. \nFxAPushMessageHandler.swift | 239 | Arguments can be omitted when matching enums with associated types if they are not used. \nAppDelegate.swift | 161 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 168 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nProfile.swift | 754 | Prefer () -> over Void ->. \nTestBookmarksRepairRequestor.swift | 82 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 93 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 205 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 270 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 283 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 331 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestBookmarksRepairRequestor.swift | 337 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxAPushMessageHandler.swift | 237 | Arguments can be omitted when matching enums with associated types if they are not used. \nFxAPushMessageHandler.swift | 239 | Arguments can be omitted when matching enums with associated types if they are not used. \nAppDelegate.swift | 161 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 168 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 87 | Initializing an optional variable with nil is redundant. \nConnection.swift | 450 | Limit vertical whitespace to a single empty line. Currently 4. \nConnection.swift | 71 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 301 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 693 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 438 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 743 | Closure parameters should be on the same line as opening brace. \nConnection.swift | 1 | Files should have consistent header comments. \nStatement.swift | 36 | Initializing an optional variable with nil is redundant. \nStatement.swift | 189 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nStatement.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \nStatement.swift | 1 | Files should have consistent header comments. \nHelpers.swift | 1 | Files should have consistent header comments. \nConnectionTests.swift | 346 | Limit vertical whitespace to a single empty line. Currently 2. \nConnectionTests.swift | 12 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 347 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nConnectionTests.swift | 1 | Files should have consistent header comments. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nConnection.swift | 436 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 614 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnection.swift | 737 | Opening braces should be preceded by a single space and on the same line as the declaration. \nConnectionTests.swift | 364 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 586 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 255 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 716 | Limit vertical whitespace to a single empty line. Currently 2. \nAppSettingsOptions.swift | 74 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 576 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestSQLiteHistory.swift | 1438 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 962 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 161 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 168 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nTabTrayController.swift | 471 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppSettingsOptions.swift | 705 | Limit vertical whitespace to a single empty line. Currently 2. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSnapshotHelper.swift | 1 | Files should have consistent header comments. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 210 | Types should be nested at most 1 level deep \nFirefoxAccount.swift | 219 | Types should be nested at most 1 level deep \nAppSettingsOptions.swift | 230 | Arguments can be omitted when matching enums with associated types if they are not used. \nFxAContentViewController.swift | 136 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFxAContentViewController.swift | 152 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 191 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 208 | Explicitly calling .init() should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 208 | Explicitly calling .init() should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 715 | Limit vertical whitespace to a single empty line. Currently 2. \nAppSettingsOptions.swift | 187 | Arguments can be omitted when matching enums with associated types if they are not used. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 164 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 171 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nBrowserTrayAnimators.swift | 164 | Limit vertical whitespace to a single empty line. Currently 3. \nTabTrayController.swift | 441 | Limit vertical whitespace to a single empty line. Currently 2. \nTabTrayController.swift | 430 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nURLBarView.swift | 175 | Limit vertical whitespace to a single empty line. Currently 2. \nURLBarView.swift | 711 | Limit vertical whitespace to a single empty line. Currently 2. \nURLBarView.swift | 798 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabToolbar.swift | 79 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. Yea, The home button is still accessible via the menu. (It only shows up when you have a home page set up) It is an extra tap though. \nWe've been able to simplify the menus a lot by turning the share icon into a page options menu. . For review, It'll be easier to look at just this commit\nThe rest should just be image metadata changes and code removal.. havent run any tests. (Things will be pretty broken!)\nregarding appState, I've ripped it out in one of these PRs. This PR is sort of the base for all the other changes I've made. I dont wanna make too many changes unless I end up in rebase hell. I'll make sure all your comments have relevant bugs so nothing slips through the cracks. \nHere is all the follow up work\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1399253\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1393301\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1399250. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 139 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 143 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 430 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 476 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 557 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 161 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \nAppDelegate.swift | 168 | When registering for a notification using a block, the opaque observer that is returned should be stored so it can be removed later. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerSettingsTest.swift | 74 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. Congrats! Now you are thinking with ~~Portals~~ Deferreds.\nI'm gonna mention this again if you are up for it. I think that wrapping the lower level api would make this a lot easier to understand. It would clean up the higher level methods turning it into something like this \nfunc addRules() -> Success {\n    return walk(rules) { rule in\n        return self.lookupContentRuleList(forIdentifier: rule).bind { item in\n            guard let ruleList = item.successValue else { \n                return deferMaybe(WKContentRuleListError.notFound) \n             }\n            self.addToTab(contentRuleList: ruleList)\n            return succeed()\n        }\n    }\n}\nwalk takes in an array and then for each item in the array runs your deferred method. Although if you want to bubble up the error. You might want to use accumulate or all.\nIt'll also make your tests simpler \ud83d\ude04 . \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteLogins.swift | 851 | Limit vertical whitespace to a single empty line. Currently 2. \nSwiftData.swift | 1 | Files should have consistent header comments. \nSwiftData.swift | 162 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 166 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 535 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSwiftData.swift | 581 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestDeferredSqlite.swift | 28 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestLogins.swift | 736 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestLogins.swift | 738 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSQLiteHistory.swift | 1434 | Limit vertical whitespace to a single empty line. Currently 2. \nTestSQLiteHistory.swift | 960 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nTestSwiftData.swift | 101 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 471 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 1154 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. In the future if we don't want to tie this to specific languages. Instead of checking the locale Identifier check locale.regioncode instead. . based on stefan's comments on Bugzilla. This is not something we can land and support. . There are some really simple tests for TabManger in ClientTests/TabManagerTests I think adding an example of the expected behavior will go a long way to make sure this doesn't break silently in the future \u2618\ufe0f . makes sense. I was expecting the title to only be one line. I'll fix this.. Looks like this isnt needed anymore. closing. Looks good!. @jhugman I removed some obvious code paths related to local notifications used in ios9, if there are more could you please update this PR. . The tests dont seem to be compiling. is this because of this PR?. Sorry! \ud83d\ude1e  I dont think that pattern got realized fully. A lot of the AppState that was left outside of the menu was just an abstraction over prefs. It didnt look like it was needed. The static methods for NoImageMode and NightMode could easily take in a Profile.prefs instead of a Appstate.prefs. \nI think an issue we have with refactors like this is that they arent followed through by everyone. So different people implement different patterns within the app. I think Private browsing mode themeing is another example. The Theme/applytheme pattern we have in URLBar and BVC is great but parts of the app like HomePanels and BackForwardList dont use it. . I've made sure to force a layout before changing the home panel underline so other parts of the UI dont animate alongside the animation that we want to happen. This fixes both issues you had James. . The reason why I wanted to do this for old code is that it makes it harder to enable rules. \nOne thing to note is that the rule is mostly being applied to lines with no text on them. So in the git blame this should only change the empty lines leaving the lines with code intact. For example \nI agree this is annoying though. We have this issue with the swift 3 migration. You can get around this by finding the parent of the swift3 migration commit and doing a git blame on that instead. Its annoying but its not like the history is lost just harder to get to.. Its not really that high value but it was super easy to do. And something thats been coming up in my PRs quiet a  bit. \nGoing through the disabled swiftlint rules and turning them on one by one is fun. They've got some interesting rules . 1) I think this is fine. The goal of highlighting the tab is to let people know which tab they came from. Imagine if you have 10 tabs open, you go to the tabs tray and scroll around a bit. You'll probably forget which tab you were on. With the highlight that becomes clear. However if you delete that tab then any tab is fair game and I think its okay that no tab is highlighted. \n2) I've fixed that. rebased into master. we'll be approaching this in the new year. For now lets close this PR and we can look at it again next year. . The issue I mentioned also happens if you scroll back up to the top of imgur and try scrolling back down again. Even though the content is loaded it appears to still trigger the URLbar. They must be doing something weird. Curious if this will hurt other sites too.\nAlso our behavior is slightly different than chrome and focus. \nIn Focus, Tapping the iPhone statusbar brings back the UI but doesnt scroll the page to the top. Tapping the status bar again scrolls the page to the top\nIn Chrome, Dragging even slightly animates the urlbar back in while in Firefox you have to flick it up with the right velocity.\nI really like Chrome's behavior of showing the urlbar as you scroll up without having to \"flick up\". But I think matching either Focus/Chrome exactly would be great. . Theres an Alpha and a blur being applied. I'll land this and give the UX team a chance to test it out and suggest any improvements. . Thats the plan! I think we could realign all the HomePanels at once. Bryan is at the AS work week I'llm bother him when he gets back.. Rebased, so we can run the tests in en_US. Wow! Thank you for this PR. You went above and beyond I actually think you can make this simpler. \nYou don't need to add the ability to remove a pinned site. Someone would remove a pinned site from the top sites page. Pinning a site again is also part of the UI, it lets you move it to the front. (until we let users rearrange topsites, this is the only way \ud83d\ude06 )\nThis will keep the code simpler, We wont need to do a db query before showing the menu. \nBut when adding an actual pinned site. We should try to fetch the actual Site object. You can do that using SQLhistory.getSitesForURLs if you pass it a single url should be able to get site object and use that to get the guid. (I think you need to do this so you don't end up with dupes)\n. Unfortunately no \ud83d\ude22. I can add some more info to the bug. This is the same behavior we have in history and bookmarks. . No I dont think there is a bug for that. We would have to first build the ability to rearrange topsites before we did that though. . There are also debug statements in TabManager, HistoryPanel, BookmarksPanel could we also remove those?. tbh, and a lot of the debug statements in AppDelegate, we could probably get rid of those. At least the ones that always happen like log.debug(\"Making window key and visible\u2026\"), log.debug(\"Triggering log roll.\") \nWe could keep the start/finish. but everything inbetween seems useless imo. @joeyg There a few things we need to fix looking at the UI a bit more closely. \n- The color of the bar should be #0a84ff (should apply to all toasts)\n- The height of the bar should be the same as the bottom bar (should apply to all toasts)\n- The toast shouldnt cover the bottom toolbar. It should appear above the toolbar. \nSorry this wasnt in the bug! We've been working on this pretty fluidly between the UX team and ourselves so a lot of stuff is being worked on. \nps: Thank you so so much for picking up these features. If you want more things to work on let me know what kind of things you are interested and I can recommend some features/issues. Looks like there might have been a regression from your patch. Do you have a chance to look at them @joeyg \nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1406894\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1406916. Yea there sure is. What is your email?. I think this is probably addressed somewhere else. Closing this.. I opted to make this into one PR in order to not have to request 4 different reviewers. . This looks great. One thing I would suggest is testing on an Ipad sized device. We show those toasts differently and changing constraints can break one or the other.. Another solid PR! Thanks @joeyg! if you are looking for something else to pick up this one would be great \ud83d\ude4f   https://bugzilla.mozilla.org/show_bug.cgi?id=1407455\n. @joeyg This thing is like whack-a-mole sometimes \ud83d\ude22 \nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1409014\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1408985\nI think what you want to do is make sure that before \"leaving\" the browser window any existing toasts are dismissed. That should fix this issue. Another option is to look at how we do the \"close all tabs\" toast. When in the tab tray try using the trash icon to close all tabs. A toast appears that lets you undo the action. This toast used to have similar issues. . Tried it on my ipad works really good! \ud83d\udc4d . This is great! I hope this can land in 10.x. Thank you. This is wonderful \ud83e\udd47 . Sorry this broke. I ran this locally and it was working fine. \ud83d\ude1e \nThe reason I added NoImageButtonIdentifier was to remove some duplication. You can remove that variable now if we arent using it anymore.. Thanks for this PR! this works well. Hopefully this is the last one \ud83e\udd1e . I've enabled CI for your PRs so I'll let the CI finish and then we can merge this in \ud83d\udc4d . hey @q2r5 Sorry for the delay with this PR. The UIColor changes look good to me. But I think @jhugman would be the best person to double check the changes to UILocalNotification. I've pinged him to have a look \ud83d\ude04 . @q2r5 sorry for the delay but James is on PTO. He will be back next week. Sorry for the delay. One way you could write tests (to test PanelDataObservers only and not the underlying queries) is to observe the didInvalidateDataSources call in MockDataObserverDelegate\nYou'll need to change the didInvalidateDataSources signature a bit. How about didInvalidateData(source highlightsRefreshed: Bool, and topsitesRefreshed: Bool) \nThis will return true/false for each activity source. You could call it by doing a refreshIfNeeded(false,false) and check that didInvalidateData comes back true for highlights if its  past the cache date. \nThen you could update the pref outside of PanelDataObservers and see if topsitesRefreshed comes back true/false\nI think changing the signature of didInvalidateData is fine. I think we would need to update what bool is passed back to the delegate. \n. Thanks again for going above and beyond! \ud83e\udd47 \n. Sorry about the double PR. \ud83d\ude1e \nBut we landed https://github.com/mozilla-mobile/firefox-ios/commit/d4d49ba3a779fe7460437b07cd3b22841126a5fb\nNext time we'll make sure that we assign the bug before we start so this doesnt happen again. \n. hi @kusumotoa This bug is actually already being worked on here https://github.com/mozilla-mobile/firefox-ios/pull/3317\nThe contributor was working on the meta bug. https://bugzilla.mozilla.org/show_bug.cgi?id=1397934\nSorry about having you do this work \ud83d\ude22 \nIf you would like to pick something else up let me know, I can suggest a few \ud83d\ude04 . Thank you for this quick patch! this was quiet the eyesore before. \nI'll make sure this lands in v10. \n. This is great! thank you \ud83d\ude04 . Hey @kesun421 This looks great and should work in theory. But I think there is one thing missing from this. \nThe WKwebview wont load the epub file (we never navigate to an epub url) and so we need to show some sort of UI letting the user save the epub file. Unlike a PDF file where we can show the actual PDF and add a button to save the file in iBooks. ePub files dont work like that. \ud83d\ude22 \nSafari for example shows a screen with the name of the epub file and a link to save the file in ibooks. Chrome does something similar. \nSorry, I should have noticed this earlier but I didnt test the feature on my device until now. \n. @kesun421 is it alright if you could please close this PR until its ready again. That way when it shows up again I'll know its ready for review \ud83d\ude04 . If I'm not mistaken I think with your patch the separator still appears but is no longer above the active tab. It's hard to see but still there.  This is a lot better than what we have. But I think we can just fix this completely by making the Header/Footer appear underneath the tab.\n\nWhat I was trying to do is have the separator (HeaderFooter) appear underneath the active tab so that the seperator wont show. \n. The problem with this layout code is that I'm using weird shadow hacks on the active tab to make its shadow appear outside of its bounds. I think we just redid this to use a separate UIView instead of modifying the shadow layer it should work. . The \"header\" is the separator line\nI want the separator to appear underneath the tab. In order for that to happen its zIndex(-2) must be smaller than the cells zIndex(10). I was setting these properties in the custom layout but they were never applying correctly. Sometimes when the HeaderSeparator was being reused the new zIndex would not be applied. Adding the applyLayoutAttributes method makes sure that any custom layout attributes get a chance to be applied to the cell. . @mkaply What do you think about this PR. . Hi @jhonatasrm thank you for this great patch \ud83d\ude04 \n. We solved this mystery and it turns out it wasnt the compiler! Just bad data in Sentry. . Oh no. It looks like the merge messed up your branch. . Sorry for taking so long to land these! Its been a pleasure reviewing your PRs. If you feel like picking up something new and are not quiet sure on the details feel free to needInfo me in Bugzilla \ud83d\ude04 . This is a great refactor but could we please start with a smaller PR so it is easier to land. \ud83d\ude05 \nIf we split it up based on folder(framework) that would work great.\nWe could start with all the changes in shared/ and then work on Frontend/ . I think doing patches based on the folders might be the easiest. You could make a new PR that includes only the changes from shared/ and another one for all the changes from Frontend/. \nOnce we get those 2 in. We can decide how to split the rest up. But following the same thing for the rest. Like a PR for Accounts/ and the rest for tests.. As part of the swift 4 migration. I'm looking at this patch and picking up things that are worth fixing. Type inference is great but I dont think we want to make strict guidelines about it.\nI'll close this patch. And slowly make the changes on master. . Thanks for picking up so many of these. I've added https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Extensions/SnapKitExtensions.swift which should make this a lot cleaner for you\nInstead of always having the if(available) thing you can just do make.leading.equalTo(self.safeArea) so much better isnt it? \ud83d\ude04 \n. Haha. I kinda cheated \ud83d\ude04 I added it after you opened this PR. Do you think you could also update the other parts that you already landed to use this new view.safeArea in this PR please? \ud83d\ude03 . Hey @ColdGrub1384 thank you for this wonderful new feature. Something that has sorely been missing! \nThere are a lot of files that are touched in this PR that are not part of your changes. Probably changes you made while trying to get the app to build. If you could please clean up the PR so only the changes in OpenInHelper.swift and Strings.swift show up that would be awesome.\nI recommend that you make a new branch with only the changes we need. That way you can still keep your changes around to help you build to device. If you need help with this let me know! . Thanks for the PR. There are a few issues that make this hard to ship. \nThe problem with doing downloads this way is that trying to do downloads that require auth or cookies will fail because the network stack of our app and the WKWebView is different. You can see the outlined issue here https://bugs.webkit.org/show_bug.cgi?id=158801#c4\nI know that having the feature at all would be better than not having it. But users might not understand why it works on one site and not another. We have to be careful that we don't add a feature that we cannot later fix. \ud83d\ude22 . We decided to implement this feature and land it in our next version. A part of it has already landed. And the rest is landing here https://github.com/mozilla-mobile/firefox-ios/pull/3869\n. Dont think we can move it. We are going to start using LP to setup the Onboarding flow and that needs to be done ASAP. \nLP itself does fire off into a separate thread to do all its setup. (You'll notice that the responseHandler for the start method is async closure. . I think your change is correct. But I dont think this was causing anything to break. Dont think we had any XCUITests that depends on this behavior . Feel free to add more changes from Shared/ to this PR. I can review and land that set. . I like it! I think our idea of looping through delegates in TabManger is weird and this is a great start to fixing that. The thing with TabManger is that consumers expect the events to happen on the main  thread and that is made explicit by looking at TabManager.swift.   \nIt would be great if we could decide which thread these notifications will be posted to so we can avoid double calls to DispatchQueue.main \ud83d\ude1b. NC automatically posts to the current thread so its not usually a problem but for example we want to avoidDispatchMain(TabEvent.post(.didGainFocus, for: tab) and then on the other side a consumer doing DispatchMain(onTabFocusupdateUI()) just to be safe. \nApple has this pretty old guide on how to make sure Notifications are always delivered on a particular thread https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Notifications/Articles/Threading.html\n. Thank you! this kinda dead code always just slips away. If you find anymore feel free to file a PR \ud83d\ude04 . I've updated the version numbers. One tricky thing I think you forgot that I am also struggling with in Leanplum is disabling the telemetry in Private Browsing. Reading this PR if you enter into reader mode in PBM this would fire an event.. Closing. I have a new PR with a cleaned up SearchEnginesJSON. What do you think about not loading Favicons in the background like we do in MetadataParserHelper.loadFaviconURL and instead just alerting the tab and having it load the favicon on demand. \nThe img that is loaded in loadFaviconURL isnt actually used! and UIImageView.setIcon already calls sd_setImage which will check the SDWebImageCache so really  removing loadFaviconURL should just work! \ud83d\ude04 \nThe benefit of this is we get to remove code and we are deferring the loading of favicons until they are about to be used instead of when metadataParsing is finished. So for example on an iPhone we would load no favicons until you go to the TabsTray! . Thanks for this patch @jhonatasrm . I'm having a hard time scrolling the Top sites when in landscape mode. Are you noticing this?\nThe moreButton in ASHeaderView also needs to respect the safeArea. (It only shows up when Pocket stories show sup.). You can mess with the code to force it to show up in highlights to test. \nThe title text in a Highlight cell should also respect the safe area\n\nThis is a really tricky fix, Thank you x100 for taking this! \ud83d\ude04 \n. This PR hasnt been updated in over a month. I am going to close it. Feel free to reopen once the review comments have been addressed \ud83d\ude04 . @justindarc you mentioned the website is trying to open a link to Google Maps in a new tab without passing along any referrer info Can we not set it in createWebViewWith. The WKNavigationAction contains info about the request opening the new window.. Also is this similar to https://github.com/mozilla-mobile/firefox-ios/issues/2481 ?. Done and landed in https://github.com/mozilla-mobile/firefox-ios/pull/3556. Thank you for spending your holidays cleaning up our code! \ud83d\ude04 This is a wonderful improvement. . @adamnemecek Your PR is setup to run in the CI. You might not be able to see the log but the pass/fail should help. . I'm closing this PR due to inactivity.. This is awesome but still too big to land on its own. Could you please separate out the whitespace changes into a single PR. Im not sure if you are swiftlint autocorrect to make some of these changes but it works pretty well for whitespace changes. . I've created a new branch for you at https://github.com/mozilla-mobile/firefox-ios/tree/adamschanges\nyou can take that branch and open a PR with that. Once you do feel free to close this PR! This has only your code changes without whitespace! I dont know how my git-fu worked tbh \ud83d\ude04 \nWe can do a later PR with only the whitespace changes. We've been thinking about doing this for a while but now is better than never!\n  . No worries. Thanks for taking the time. Sorry for taking so long to land this stuff. We can go through your fork and make sure it lands. \nThanks for doing the hard work! Hopefully we'll see you back soon \ud83d\ude04 . I've also made some changes to the text spacing on the slides. here is an iPhone X for example\n- The title and description text now space out equally. \n- The description text no longer has custom spacing (this fixes some issues with text being cut off when the text is too long.)\nLet me know what you think @tecgirl I can mess with the spacing some more if you like.   \nBefore\n\nafter\n\n. I dont think the save login prompt should show max width on the iPad. The lessthanorEqual constraints were there explicitly to stop that. For example have a look at the screenshots in https://bugzilla.mozilla.org/show_bug.cgi?id=1394437 the app store prompt doesnt go edge to edge on an iPhone 8+. \nI think we can also get a properly sized findInpage bar by changing its constraints to \nmake.width.lessThanOrEqualTo(self.view.snp.width)\nmake.width.greaterThanOrEqualTo(SnackBarUX.MaxWidth)\nThis wont make the findInPageBar go edge to edge on an iPad but I dont think we want to do that either. \n. Okay. That makes sense. I thought when you said \"correct max width\" you meant max width of the device. . cookieAcceptPolicy should let you set the configuration for the cookies. If you'd like to access the cookies look for the cookieStore.. @mkaply just gotta fix the forced unwrap and then we should be good to go!. @q2r5 Thanks for another great PR! if you'd like to pick up the switches PR please let me know as it was the next thing I was going to pick up \ud83d\ude05  https://bugzilla.mozilla.org/show_bug.cgi?id=1434005. Thank you for this patch. Our iPhone X support isn't quiet fully there thanks for picking up this bug. \nAfter looking at the screenshots I think we want the background color to be uniform from edge to edge. So the background View should go into the safeArea. \n. closing this PR due to inactivity . This is the best way to stop annoying crashes inside the TopTabs but the problem I found with this is that it doesn't cover every case \ud83d\ude22 . And you end up playing whack-a-mole with trying to make sure no user interactions happen during animations. I think at one point we were disabling user Interactions on an entire ViewController during animations to stop crashes. \nThe main thing that disabling buttons like this doesn't prevent is keyboard interactions. You can for example\n1. have 3 tabs open\n2. start dragging on 1\n3. press cmd+w on the keyboard (you might need to remap this key in the simulator to test this)\n4. crash \ud83d\ude2d \nThe diff pattern in this collectionView was the only way I could find that could handle multiple different types of changes to the collection without crashing. I think if we added the drag apis to this model we could enable dragging without having to disable buttons/keyboards. \nI think it would work like this \n1. At the start of the drag (not sure exactly which API call this would be) take a snapshot of the old tabs \nself.oldTabs = self.oldTabs ?? tabStore \n2. Once the drag is done. Call performTabUpdates()\n3.  update func updateTabsFrom(_ oldTabs: [Tab]?, to newTabs: [Tab]l) to handle moving. This is where the magic happens. we can handle adds/deletes/moves holistically. If the tab we moved ended up being deleted then we can cancel the move animation and only do the delete. \nIf you'd like to read up more about this strategy check out https://medium.com/flawless-app-stories/a-better-way-to-update-uicollectionview-data-in-swift-with-diff-framework-924db158db86\n. CI doesnt seem to have run on this build. Can you try pushing the branch up again and see if that makes a difference?. We should go back to the original approach. . The original approach is a one time thing. Once the whitelist rule is added to the list there is nothing to do.  With this new approach every time we go between a whitelisted page to a non whitelisted page we'd have to load/unload lists. Imagine if a user had whitelisted reddit. every time they tapped on an external link they'd load all the lists into the tab. every time they went back all the rules would be added back in. \ncode wise we are adding more state to the tracking protection code. I think now that we know why our original approach doesnt work there is no reason to add extra state. \n. I think to simplify this. It might be easier to never change the focus from the AutocompleteTextField. Instead just pass the up/down keypress from the textfield down to the SearchViewController. That way you dont have to worry about show/hiding the keyboard. \nWhere this gets tricky is handling the search suggestions. Because they are shown horizontally, tapping left/right to switch between them wouldnt work because on the textfield that would move your cursor. I think this is why safari/chrome/firefox desktop show autocomplete suggestions as a list instead of the way we do.\n. I'm getting a pretty bad crash that happens when there are no urls in the searchsuggestions tableview. \n1. Type until there are no url suggestions \n2. press up/down on the keyboard\n3. crashes \ud83d\ude22 \nI think in the optimal case I dont think we should move focus away from the keyboard. I think this should work exactly like Desktop. For example. if you want to go to reddit.com/r/ios and you already have reddit.com in your history. \nyou should be able to type re, arrow down to reddit.com and then press right array to get to the end of the url where you can continue typing /r/ios\nright now. if you want to continue typing for any reason you have to arrow up all the way to the urlbar.. Thanks for the PR @ericawright I'm not sure about checking in photon-colors.swift I know node is part of our build process but it isnt a hard dependency. If we make this change it'll force everyone to run npm install in order to build the project.\nI want to talk to the team and see how they feel about this. Otherwise this patch looks great! thanks for taking the time \ud83d\ude04 . Hi Erica. I've been thinking about if we want to use npm vs bringing the file in directly. I think having the file in the repo would be better. It'll allow us to track changes to colors better and make it much more of a conscious decision.\nI think it also makes it easy for contributors. We do use npm to build some js files. But we dont have a hard dependency. We have prebuilt ones already in the repo. . This is great. Merged. Support for this has landed in webkit. Not sure when this will ship though. Probably ios13 https://bugs.webkit.org/show_bug.cgi?id=190017. The button size is suppose to be 32px. And go to the edge. I think we will need a new 18px asset so that we can get this right. I'll ask bbell for an icon.. Thanks for the patch @Delphine! So exciting to have the new RTL locales.. A quick question though. There is no concern now that we will be calling addObserver multiple times for the same notifications? Should we move the addObserver calls in viewDidAppear into viewDidLoad?. traitCollectionDidChange still calls updateViewConstraints() when the size class changes.. Thanks for the PR! This is a really interesting patch. Lets land it and see how this works on Nightly and beta. . Closing this PR due to inactivity. Please feel free to reopen.. Thanks for this PR! You're right this makes everything much more readable.. @garvankeeley The UX struct is also missing some constants that are referenced . @q2r5 It looks like the bug you linked mentions that applying this fix will still cause crashes on iOS 10 devices. They have a workaround listed here https://bugs.swift.org/browse/SR-7240?focusedCommentId=33771&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-33771\nIs this still something we need to add?. Okay sounds good! Thanks for finding this. \ud83d\ude04 . I tried that. Didn't work \ud83d\ude22 \n. Hey @ericawright thanks for another patch \ud83d\ude04 \nI talked to Bryan Bell about this and here is the behavior we want\n1. go to the parent of this tab\n2. if not go to the last selected tab\n3. if not go to the previous one in the list\nIt looks like we are half there. We just need step 1. I think changing lastExecutedTime to be updated on tab selection makes a lot of sense. It should also address Richard's comment There is a selectTab() in TabManager which should be a good place to update lastExecutedTime. @rnewman What do you think of \n- Go to the tab on the left when it has the same parent as the tab being deleted\n- if the tab on the right has the same parent as the one being deleted go to the tab on the right\n- if the tab on the left is the parent of the deleted tab go to the tab on the left\n- Otherwise always go to the tab on the right\nparent here means a site that is opened as a popup or by using \"open in background\". @ericawright I think what Richard recommended at the end is a simple way to go. The last 2 bullet points should already be implemented. . Thanks Erica! \ud83d\udcaf for updating the tests \ud83d\ude04 . The way this is implemented is correct and works well. But what I would recommend instead is to use the previous tab from the didSelectedTabChange method. Either by moving this into the method\nswift\nif let webView = previous?.webView else { \n  webView.evaluateJavaScript(\"__firefox__.findDone()\", completionHandler: nil)\n}\nor by passing in an optional param like this \nupdateFindInPageVisibility(visible: Bool, tab: Tab? = nil)\nAnd then later \nswift\nlet tab = tab ?? tabManager.selectedTab\nguard let webView = tab.webView else { return }\nwebView.evaluateJavaScript(\"__firefox__.findDone()\", completionHandler: nil)\n. Thanks for the patch. This is great!. Thanks for another patch @ericawright. I also cant seem to find a bug for this. Could you please make one. Thank you for the patch @is2ei I've landed it. It wont make it into 12.0 because we have already exported strings for localization.. Love this. Happy we can remove the Open-In view never liked how it was implemented. . I like the alternative approach better. Closing. Hi @sleroux Its been a while! \nWe are totally looking into this. It would be great if you could download the models in Firefox for viewing later too. . @ornithocoder Thank you for the patch \ud83d\udc9c. Sorry this wasnt landed earlier. If you can fix the merge conflicts I can land this today. . Thank you @adamnemecek . We'll also enable this rule in swiftlint now to make sure we catch any new violations . Thank you for the PR!. We don't have a convention for naming tests. I would go with trying to write tests in a similar fashion to what is already in the file. The tests you are mentioning could have been written before a refactor of the tabsManager. \nAs for refactoring tabManager. That sounds like a great idea! The tabmanager is well tested which makes it easy to refactor. \nThank you for all your PRs! I've added your fork to buddybuild so your build will now compile. Feel free to push up an empty commit in order to have this build run in the CI. We'll uplift the one that is merged to master. closing this one. . Sorry for the delay! Merged \ud83d\ude04 . We could probably get rid of TabsToDisplay that I think is just a computed variable that references tabManager. The reason TabDisplayManager manages its own tabStore is to avoid changes happening to the data store while the collectionview is displaying the tabs. TabManager is basically a global and its hard to prevent it from mutating when we dont want it to. . I think this patch is good right now. I did notice a few issues with closing tabs on the iPad though. \nWhen closing a tab that is not selected on the iPad it causes the selected tab to change. . Hey @stancdam I think the bugs I mentioned might have been introduced in your last TabManager patch. We could file another bug for it if you like and land this one as is. . This looks really good Meera! I'm still going through it but one thing I noticed \n- remove a website via the search\n- press cancel\n- the website still appears in the list \nIt looks like the website data is not refreshed after leaving a search. Another large change I would recommend is using an enum based approach to configure the UITableview. Have a look at ActivityStreamPanel.swift to see how that tableview is configured. It makes it super easy to define the Tableview in the enum and then later avoid if indexpath.section == 1 style code. \nI would suggest switching the new tableviews to this pattern. If you are up for it you could also do this to the ClearPrivateDataTableViewController.swift. Thank you for another patch \ud83d\ude04 . This patch looks good. But I think this code was recently refactored so might not be easy to land in v13.x. Could you also uplift it to v13.x and make sure its applied correctly. . I think we can get away with removing a few of the calls to applyTheme if we are worried about the cost. \nWe could remove the call to applyTheme in viewdidLoad. We will have to make sure we setup the collectionview background color however. So we'll have to call collectionView?.backgroundColor = UIColor.theme.browser.background from viewDidLoad\nViewWillAppear is called pretty regularly. we can change the reloadAll call there to be a applyTheme that would force a reload of color as well. . Hey @mrachamallu If I'm not mistaken we already report what user's have as their default newtab setting in the core telemetry ping. Would we still need this?. continuing meera's work here https://github.com/mozilla-mobile/firefox-ios/pull/4234. Hi varun, Thank you for the patch but unfortunately patches like this are not accepted. A patch should have a substantial change in order for it to be accepted. Simply renaming variables is not enough. \nThanks for taking the time to file this PR. If you would like to make larger changes I recommend looking in Bugzilla and finding the bugs labeled \"good-first-bug\". Not seeing a crash anymore when spamming tab actions. However when opening a new tab the toptabs tray doesnt move to focus the selected tab. You can see this when you open more tabs than can fit on the screen. . The tab focus doesnt seem to be always working. If you spam the add tab button on iPad it doesnt end up selecting the last tab once all the new tabs are added. . Thanks for the great PR! \ud83d\ude04. Thanks for the detailed reports @isabelrios I've filed the relevant Bugs. As for the testClearRecentlyClosedHistory and testRecentlyClosedOptionAvailable tests. This will be the new behavior. . This is a great patch @jhugman what an awesome surprise \ud83d\ude04 . Looks good. But tests arent compiling . I've updated the PR, separated the analyzer part from the DocumentServices part. \nI agree that providing more text to the analyzers would produce better results but I also think that reducing the number of languages we match against also reduces false positives for those languages (of course, because we no longer detect them). Most of the false positives we saw via feedback were for these smaller languages. \n. I've been trying to find examples of this in different parts of iOS and I think this is what we want to go for. \n\nThe background should go to the edge and the searchbar should be up to the safe area. If we do this we don't need to use custom insets like this. \nThe searchbarHolder constraints are correct. But the searchbar and the roundedsearchBar constraints can be simplified. \nIf we make the roundedSearchBarHolder trailing/leading conform to the insets the rest should be pretty automatic \nroundedSearchBarHolder.snp.remakeConstraints { make in\n     make.top.equalTo(searchBarHolder).offset(15)\n     make.leading.equalTo(view.safeArea.leading).offset(10) // we can just make the nested view conform to the safe area\n     make.trailing.equalTo(view.safeArea.trailing).offset(-10)\n     make.bottom.equalTo(searchBarHolder).offset(-10)\n}\nand\nsearchBar.snp.remakeConstraints { make in\n    make.edges.equalTo(roundedSearchBarHolder).inset(UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10))\n} \n. Looks great! did you want to remove the LeanPlum feature flag?. Thank you for your PR. I'm not sure I understand the change here. If you'd like to open a PR make sure to follow the guidelines here https://github.com/mozilla-mobile/firefox-ios#creating-a-pull-request. Thanks for the PR. You hit the nail on the head with the NSLocalizedStrings. Could you please move them into Strings.swift. . This is awesome. can't wait to have our tests run in parallel. Garvan just added that in his last PR. Can we wait for him to get back to us on why. I'm worried that removing this might introduce a new regression to Logins. . Looks good. you can rebase against master to have this build pass. Looks good\n. Not quite sure if this is how defer should be used.\n. Made sense not to create a parse tree for the entire page when we only need the head. Lazy loading should help with that. \n. I don't really have an example of a page with this behaviour. If you can link me to one I can confirm that this works. \n. I went with a functional approach using flatmap. I dont know if this is okay for styling within the project. But it made sense to map the different images to an array of Favicons.\n. Here I sort the Favicons based on the types. This is equivalent to the \"bestType\" the old code kept track of. \n. I only return one Icon in the end. I'm not sure if this is okay. But it made sense to only return the best Image. \n. The object that is returned from performSelector on the webContentView is from objc land (Unmanaged) and as such I need to takeUnretainedValue in order to access the object. Not quite sure if there is a way around this but this was the only way I was able to access the inputView.\n. Yea this is all looking into the private WKContentView headers. I'll add some documentation and link to the header file so its clear what I'm referencing. \n. I think this is related to the change I made with the engineId. I'll look into this.\n. nice. Did not know that. \n. Hmm. This could go both ways. I actually think its simpler to do this in JS here. Reason being its only 2 lines and I'll have to add more logic in swift to be able to do it as reliably.\nI'll have to write logic to pick an icon from the multiple available icons and I'll also have to handle the condition of when the favicons have not loaded yet and the array returned is empty.\nI dont really think that the added complexity here is worth being DRY. But I'll leave this up to you. I'm okay with doing it any way \ud83d\ude03 \n. neat. I didn't know that.  I'll try this tomorrow. \nif this is only available in iOS9 how would I handle the iOS8 case?\n. yea it would be the same label for the accessibility label. I was trying to think of other things to compare but that was the safest I could come up with. But because we use a customView on the button the title is never shown.\nAlthough adding things to the inputAssistant is supported we dont actually control it. So weird issues of buttons getting cut off or crashes happen in certain cases. \n. I'll try that\n. I wouldn't want to crash the browser just because we couldn't find the webview to add a searchButton. I think its better if the feature just silently failed. \n. don't forget to remove the print statement :)\n. If the default case is to return .Good. Should we handle the happy case here explicitly? If not we could remove the .Complete case.\n. I'm assuming .Partial is a partial sync. In that case it looks like we are still returning the same message NotStartedTitle \n. By removing the .NotStarted case wont the browser just default to Good even when the sync has failed. You mentioned that the SyncOfflineTitle was wrong. But in the case of the sync not starting for various other reasons the NotStartedTitle would still be helpful instead of making them think sync succeeded. \n. Yea good point. A partial sync for a user who only enabled bookmarks sync is still a complete sync in their point of view. Best to just show complete in that case\n. nit: This should be tabbed\n. what is this used for?\n. This was a case where spaces were added to make things cleaner in the editor by allowing things to align. I'm usually not a fan of these. \n. A similar thing was done here. Code here was split into new lines to make them more readable. \n. There probably are rules. I've just turned many of them off for now. \n. I'm going to leave this and fix it in another PR. \n. I'm using UIImageColors here. It extracts dominant colors form images. Works pretty great. But need to handle edge cases better\n. I've moved configuration of the cell into its own function. What do you think of this approach compared to customizing the cell in cellForRowAtIndexPath?\n. Instead of letting external classes mess with headerView. I created a headerTitle that will update the headerView's title\n. I created function handlers to help observe changes to the collectionview which can update pagecontrol. This way I dont expose pageControl outside of its class. I wish there were properties I could observe directly on collectionview without having to make the cell a delegate. But couldnt find any. Thoughts on this approach compared to just exposing pagecontrol?\n. By keeping track of the traits I can make sure that the right amount of topsites appear for all view sizes.\n. I saw this enum configuration in an Apple sample project. Works pretty well for static table settings.\n. So simple \ud83d\udc4d \n. This is one of my least favorite hacks. there was no way I could think of to relayout the tableview without adding this reference \ud83d\ude22\n. Instead of passing a homepanel refrence to topsites. I pass closure like this. \n. this stuff is copy pasted from old topsites. \n. I was just following how topsites does it. But looking at the options on VisitType. Bookmark works the best. \nhttps://github.com/mozilla/firefox-ios/blob/0642d2c967c85812b5918a5d7598a707cad70cdd/Client/Frontend/Home/TopSitesPanel.swift#L354\n. We dont need this to be generic yet. But later (based on the mocks) there are places where I think we can reuse ASHorizontalScrollCell. I'll make it generic then. \n. Yea you are exactly right. But short of hard coding in default heights for each different device type we are stuck in the same boat as the previous TopSites. \nWe need to guess a height in the VC. If we want a well educated guess we need to use view properties defined at lower level such as the size of each item / the spacing and the number of items per row. But at this point we are basically doing the view calculations the layout performs. That is what we did in the old Topsites and it got hairy having all the view layout code in the VC. I dont know how else we could get the tableview to dictate the height short of hardcoding in specific heights for devices. \n. for some reason. didSet doesnt update the label correctly. dunno why :(\n. Here is the new way CellHeights are calculated for topSites. It work better and I dont need to keep reloading tableview anymore \ud83d\udc4d  Let me know what you think\n. When the screen width is 320 I do want to invalidate layout. \nSometimes the bounds of the collectionview becomes 100,75 or something very tiny. It usually happens when the orientation changes with the topsites not on screen. In those cases I dont want to invlidate the existing layout. I'll add a comment to explain what is going on here. \n. Okay I see what you mean. I can clean this up a bit more. \n. It just truncates and adds the ... \nBased on the mocks.\n. Because we fetch more topsites than we actually need. The fetching ASPanel doesnt know exactly how many items to fetch.\nTherefore when displaying we might have more items than we should display. In that case we return a smaller amount. I'll add a comment for this. \n. No thats just my bad. I've been deleting stuff and then not removing the space :(\n. Looks like there is a rule for this in swiftlint \ud83d\ude00\nhttps://github.com/realm/SwiftLint/issues/548 \nWe have about 115 violations. Not bad actually. I'll enable this sometime soon.\n. I cant customize the UIPagecontrol the way I want based on the mocks. The built in one only allows you to change the color. In the mocks you'll notice that the pagecontrol has a hollow center when not selected which is different than UIPageControl\n. Not quite sure I understand this. The handlers are here because ASHoriziontalSource is the data source for the topsites. I didnt want to pass the homePanelDelegate to it. \nIf you mean why arent the clousures in the ASHorizontalScrollDelegate thats because it is the layout delegate and is only responsible for layout stuff. I'll rename it to ASHorizontalScrollLayoutDelegate\n. This only exists in ios10 https://developer.apple.com/reference/uikit/uiedgeinsets/1771772-zero\n. I've removed this. It has weird issues with items going missing when switching orientations. Now I just always get 12 items which makes sure that there are enough items for each orientation. \n. You could return 0. Doesnt matter I dont think. the real issue is when itemsPerPage is 0 it tries to divide by 0. \n. its because sometimes numberOfPages is called before the layout of the collectionview has even started. \n.  I'm working on adding the default SuggestedSites now and instead of having to handle two different models all the way down to the view layer like the old topsites I can convert both suggestedSites and Sites into TopSiteItems and compare them that way. I'll have to make very minimal changes to the view layer and it won't need to know anything about suggestedSites. \nsidenote: I was really hoping to just take the asset name of a SuggestedSite icon and set it to the faviconURL and have SDWebImage load it. I'd have to make 0 changes that way. SDWebImage does support loading files locally. But sadly not from xcassets \ud83d\ude22 \n. I don't think I'd be able to use retina assets though \ud83d\ude1e  I'd have to manage which asset I need myself. \n. I originally wanted the color of the default sites to be in the image itself. But bbell convinced it shouldn't be. So now I check if it's a suggestedSite. If it is I look for the color info from the object itself.  The new images I added are color but I'll be replacing them with white ones as soon as I get the new defaults from bbell. \n. Ah, That makes sense. I'll switch these to use accessibilityIdentifier instead\n. I add the accessibilityValue. This is the user-facing string that indicates an individual top site icon. \n. hmm it seems like with the new GH review. Outdated comments aren't collapsed. Probably better to use the new review process instead. \n. I will write tests for these!\n. This is only called twice. Once on deletion and once when Topsites are fetched. Fetching it from prefs every time does have the advantage of not having to worry about syncing changes. \n. I need a way of getting all of the TopSiteCells. Because the labels are based on the url its harder to query them. By setting the identifier to be Topsite I can easily do \"cellsWithID(TopSite)\" and get all the cells.\n. tbh. This actually makes it look worse imo. Because the icons arent getting as large as they did in the old TopSites. I think we should just remove this.\n. I like to make sure everything is private so you know when a property might be edited outside of its view.\n. Having the siteImage isnt required once I removed the rasterization code.\n. Any idea where a better home for this might be?\n. It's the simplest way I could think of getting a consistent color for a url. \n. Ah very smart! I was worried that this would interfere with the TopSite long press. I'd use the Section enum here instead though instead of just \"1\"\n. You could probably make this private. \n. I really like this \ud83d\udc4d \n. Have you thought about just using a UItableview header here instead? It's called a header here but it is actually just a cell. If you changed it, You could avoid having to configure it here like this.\n. I see you reused SimpleHighlightCell. You could stiil do that. But abstract out SimpleHighlightCell into a SimpleHighlightView and have both SimpleHighlightCell and the Header reuse the view.\n. You have this class here. But the Other TableViewCell is in its own file. I'd put them all in one file. Also it would be great if this had a more descriptive name. Because it functions very similar to UIAlertController. Some variation of that would make it clear to everyone what it did. I don't think calling it tableview here matters as the implementation of the table is completely abstracted away to someone using this class. \n. Because it might not always be you creating this menu. It's possible someone gives you a imageString for an image that doesnt exist. Will this crash if that happens?\n. Should be in the UX struct\n. You did define a UX.LabelColor as the same color above. Should these colors always be the same? If so This should also be UX.LabelColor\n. You should try to abstract away all properties from this class not related to showing a menu. The BlurTableViewAction's blocks should contain the information needed to perform actions\n. These actions should be defined outside of the menu. In ASPanel instead. That way we can easily reuse the menu in cases where we want to show a similar menu.\n. Cool! I've never used this before haha. \n. Meaning you can create these blocks in ASPanel instead. \n. The changes here looks funky.  But what happen was that I had not removed the licence for SWTableViewCell so I removed that with SWXMLHash. Then added Fuzi\n. Curious. Doesnt the return here mean that this would have exited out of the loop without returning any icons? If so how was this working? \n. Dont we need the ((tabManager.selectedTab?.canGoForward ?? false || tabManager.selectedTab?.canGoBack ?? false)) logic still?\n. Should we enable it in nightly?\n. Haha of course. That's a silly mistake!\n. Doesn't look like this is quite the case. At least for the issue here. Not sure about the PrivateMode toggling. This seems to be related to the MenuPresentationAnimator which is responsible for transitioning the current view to the one with the menu. \n. After some more digging. It looks very similar to the case outlined here \nhttp://stackoverflow.com/questions/24338700/from-view-controller-disappears-using-uiviewcontrollercontexttransitioning#answer-24589312\nThis issue seems to say ios8. But we have this issue in ios9. The issue is fixed in ios10 however. \n. Okay. Nvm its not exactly the same issue as in the link above. But it is related to the Transition.\n. We've removed ios8 already :) \n. Curious why you changed this? Does this not just make it redundant?\n. This is getting a bit long. You could simplify the number of if statements by replacing the first one with a guard. \n `guard longPressGestureRecognizer.state == .Began else {\n            return\n  }\n. You could possibly move the calculation of which topsite cell was tapped into presentContextMenuForTopSites \n. This should be using Strings.swift for the localized strings. There is already a section for AS. You can add your strings in there. \nsidenote: Looks like Bryan created another place for his Activity Stream strings in Strings.swift. Could you move these 2 next to each other and add your strings there as well. \n. There are some linting rules that should find nits like this. If you install swiftlint. You should be able to see them. I'll add your fork to BuddyBuild so CI runs it.\n. it looks like the topSites array in ActivityStreamPanel is only used here. I know I added it. But looks like we dont really need it if I'm not mistaken. You could probably just use self.topsitesManager.content instead\n. And If you could remove ActivityStreamPanel.topsites that would be great\n. Because the list of actions is just an array. You could probably avoid this by instead creating a variable array for the actions and then adding/removing items from that based on the cell that was tapped. You would avoid having to declare ActionOverlayTableViewController twice like this. \n. This should be a localized string. Define the string in Strings.swift and then add it here. \n. Thank you for writing tests! This is how it should always be \ud83d\udcaf \n. Actually. You should be able to avoid this. If you look at deleteItemAtIndexPath you can see that it is calling self.deleteItemHandler?(contentItem.tileURL) Which is a handler defined on ActivityStreamPanel called self.hideURLFromTopSites(url) You should be able to just call that directly if I'm not mistaken. Then you wouldn't need to use a reference to the collectionview!\n. If you don't want this to be a user-facing accessibility string. Use accessibilityIdentifier instead.\n. server URL should probably be a static up top\n. Although this is cleaner. I think our style requires the return statement to be separated out into new lines. \n. Much cleaner! thank you \ud83d\udc4d \n. Thanks for cleaning this up too! \ud83d\udc4d \n. Although, (This is my fault, sorry) some of the strings have \"AS.(blah)\" while others are \"ActivityStream.(blah)\". Lets rewrite this so they are all ActivityStream.(blah)\"\n. All the extra space like this needs to be removed please!\n. Make sure to have a max of 1 new line between code.\n. Please remove the extra space.\n. Remove this new line. Comments can be right above functions.\n. This should be named something else instead of CustomSearchEngineForm. CustomSearchViewController works.\n. Please Remove these changes when you submit the actual PR \ud83d\udc4d \n. I know sometimes xcode does this. But to keep commits clean don't checkin these files when only one line has changed.\n. You are using deffered partially here. You also need to make faviconFor return a deffered result. So that when the favicon is fetched your code knows when its availible. Look for other places where this favicon fetcher was used for examples\n. There are simpler ways of doing this \ud83d\ude04 \n. You dont need to show an alert here. You can just add the search engine when the user taps add. But show an error if it fails.\n. ASOnyxPing references need to be removed. The ASPing commit was reverted so this doesn't need to be in the code. \n. There are a lot of extra spaces like this. Could you remove them please \ud83d\ude04 \n. You dont need to make these \"handlers\" or closures. You can just pass the image/color itself to the ContextMenu. \n. There is no need to use closures here. You can simply just pass the image/color directly to ActionOverlayTableViewController\n. Is there a reason why you needed to make a new siteImageBackground? if you look at siteImageView in SimpleHighlightCell it works perfectly fine without having to use a separate view for a background color \n. Please remove extra space like this\n. So instead of defining these as closures that return an image. You can just make it siteImage and make it a UIImage. same goes with backgroundColor. Just make it private var siteBackgroundColor: UIColor?\n.  If this was in a tableview with 100s of these in a table there might be an issue. But in this case I think you are okay \ud83d\ude04 \n. Thats a problem in the tableviewcell. Selecting it shouldn't cause the background color to disappear. Still using closures here is not a good idea. \n. You are right! these are fine then\n. you are right. nice catch \n. you are right! thats much simplier. Thanks\n. roundNum lets me round a number to a certain precision. round(0.89999) returns 1. But I'd like to keep the numbers after the decimal. \nThere is actually a mistake here. This is actually keeping 5 numbers after the decimal. I actually only need 2-3. Sometimes the before/after zoomScale will be 0.8974646/0.8967656 which are basically the same thing. \n. Apologies. Combining a fix for .ca TLD's and the actual bug is making things confusing. \nThis change here is the actual bug. locationView.url.host will exist every time a valid URL is used in the url bar. So that line to check for a host locationView.url?.host is clobbering whatever is returned from urlBarDisplayTextForURL.\nurlBarDisplayTextForURL is responsible for parsing out the search term. What this method does is either return the search term OR the full url. So it's better to compare that than getting locationView.url \n. I couldn't think of a better name \ud83d\ude22 \n. Yea dunno. I'll remove these changes. \n. I wanted to keep a consistent style. And this way if we want to add anything later its already structured correctly. \n. yea that makes sense. I'll change it.. you can skip the [String: String] here . . Same as above \ud83d\ude04 . For something like this it might be simpler to use a struct. You'll be able to use dot notation and better type checking.. I think it'll be simpler if you just make a new method instead of using the existing LaunchFromURL. That way you dont need to check for a valid fxaParams here. . I know this loop/switch is already here. But using url.getQuery() will return a dictionary and prevent you from having to loop through results like this. . if you create your own LaunchFxAWithURL you can create your own FxAStruct \ud83d\ude04 . It doesn't show the full error page. It parses out the actual URL later in cellForRowAtIndexPath I can't edit BFItems.\nThere was a bug in the past to remove home panels from appearing in the BFList. I agree with reader mode urls they should appear in the history. But they should have some different icon/style to show they are reader mode urls. I'll open a new bug for this issue. . You can pass nll to the completionHandler to avoid declaring it.. you can use a guard statement here instead guard let name = className, let val = value else { return }. We usually prefer guard but tbh in this case I think either is fine. Make sure to add a space between the ) and {. A guard statement here would work better  guard let view = params.view else {\nreturn\n}. Yea it should be fine \ud83d\udc4d You've declared the launch params as optional so it shouldn't crash. They are allowed to be nil. can you please add spaces between the parans. Please remove this change. Are the UItests going to run in the CI as well? I thought most didnt work well?. You can just do let currentURL = here. The force unwrap is crashing here. I'll have to look into this a bit more.. Compiler was barfing here. I split everything up.. Moved this test with the rest of the URL tests. Ah I see what's going on. Yea the optional is required here. . You should write a small method that makes tapping these keys easier. \nsomething like tapKeys(arr: [String]). Please use the moz licence . You can try setting an explicit port like we do here. https://github.com/mozilla-mobile/firefox-ios/blob/ff1e0b9a37099c67027618ce58cc5365a1e79d5d/Client/Application/WebServer.swift#L35. I'll change it to simply drop the entire path. But keep everything else.\nWe have a few simple UI tests that test Top Sites. But they just go to home pages. So they don't have this issue. . Can you try to fix this without adding a reference to the browserviewcontroller? Coupling things like this will probably make understanding the relationship between these 2 classes more difficult as time passes and more code is added. \nTry looking at how a home panel is loaded inside BVC. Maybe you can add logic there to select the urlbar when no homepanel is provided. . 1. I agree. I just wasn't sure if there was any behavior that required for it to be called in viewwillappear. For example some kind of reuse somewhere. So to be safe I just added it to viewDidLoad.\n2. yup it is most likely related to that. Another way to get around this is to simply manually call viewwillAppear when we create the Panel. This approach is probably the simplest \n3. Dunno. This is the reason why I didn't move everything out of viewWillAppear. . It was added in this PR here https://github.com/mozilla-mobile/firefox-ios/pull/2193/commits/6144265d02fe20684afd1af23bca0892fd349004 @sleroux any thoughts why?\n. Good idea. Will do. . Thats pretty cool!. I'm not too sure about Deffered and how it works. But we are already running this closure on the main queue (L:410) do we need to do it again here?. There is no else block here. So I think this might present the context menu twice.. Is it cool if we move these to ThirdParty/EarlGreyTests or UITests/EarlGreyTests. Too many top level folders lol. . when you create a Site. It always has bookmarked set to false. But unless bookmared is set to nil the ASPanel wont check the bookmark status?. The indentation should match the rest of the lines. nit: Remove the extra tabs please :). But when undoing tabs we do use restoreTabs to do it. So in that case undoing tabs is the same as restoring tabs. The only reason I have to set isRestoring here is because undoing tabs also deletes any existing tabs and reselects a new tab. \nSo what ends up happening is some of the animations dont happen (isRestoring is true) but then the removeTab on L:452 happens and I try animating that change. But now we are on a bad state and we crash \ud83d\ude22 \nBy wrapping everything in a restoring state and calling didFinishRestore at the end I can safely reload without crashing. Hopefully \ud83e\udd1e . spelling is my kryptonite lol. I can get by on the web but in code \ud83d\ude2d . Hmm this one is from an NSNotification which can be called from a different thread. Usually notifications happen on the same thread as the ones they were initiated from. So made sense here to use the main queue. Don't want animations happening outside of the main thread. . I'll leave a comment in the code\n. The diffs are between arrays of tabs and I do use the state of the current tabs to calculate the diff. So I don't think I can easily overload - . Sometimes tabA is nil which means if I do it this way I have to unwrap the bool. That makes things messier than I like. . woops. I dont know what we wanna do with cases like this. Should we rename it correctly or just aim to get it work for now. directoryEnumeratorForURL(_ url: URL) could be directoryEnumerator(forURL url: URL). could be allocatedSizeOfDirectory(at url: URL) . localizedStringForSync(component name: String). So these are fileprivate (accessible within the file) but then also open? (accessible but not overridible from anywhere) \nThis is not quite right is it?. The localized strings should be in Strings.swift. . Maybe its just github. But the indentation looks wrong here.. Yea this was a startup crash for me. I thought you fixed it by using decodeInt(forKey:) . hmm. I'll test it a bit more. But thats exactly the crash I was getting. Moving it outside of TabManager is what fixed it.. Ah so this happens in the migration. That'll be hard to fix. . Doing this here will reload the view much more than is required. Every time you switch pages it reloads the table. This creates more animations than it should. . Gotta remove the extra whitespace. I moved this up here because otherwise the tab that is added at line 742 never gets events triggered preventing TopTabs from animating it. . Have a look at how toasts are used on browserviewController:2166 and browserviewController:2193 can you use that method instead of setting up your Toast here? . All localized strings should go in Strings.swift. I don't think this will be wiped when a user clears their history will it? This is adding some complexity to this feature. What if you just store this in memory so if a user switches apps the toast doesnt keep reappearing. But it'll reappear after a while if the app restarts. Or if we just lower how long the toast appears maybe we can just show it every time. . I like how the notifications are handled here. It keeps BVC cleaner \ud83d\udc4d . I would prefer in memory just so it is simpler. It isn't a huge security concern because the URL isn't actually exposed to the user unless its already in their clipboard. . Alright last one! if you make BVC delegate conform to the SettingsDelegate (which it already does. I know its a bad name) then you can create this toast in the ClipboardBarDisplayHandler.swift and avoid having to have this code here. Then shouldDisplayClipboardBar would just return a toast and all BVC would have to do is display it :) . both delegate and settingDelegate are the same object. I think you can do \nvar delegate: (ClipboardBarDisplayHandlerDelegate & SettingsDelegate)? I'm not 100% sure but something like that should work. . You should try to use guard where you can. it'll avoid having to indent too much code. Try \nguard let absoluteString = UIPasteboard.general.copiedURL?.absoluteString, shouldDisplayBar() else {  return }. We can prolly make this a bit swifty 3.0  shouldDisplay(clipboardBar bar: ButtonToast) . could also use guard here. guard let url = URL(string: absoluteString), buttonPressed else {. Wasnt sure if this was the best place for this. What do you think?. \"buddybuilding\" I like that \ud83d\udc4d  \"How do you guys do your Ci?\" \"I've got a buddy.. he builds it.\". Probably don't need the inset(0) here. how about \nguard let snapshot = menuView.snapshotView(afterScreenUpdates: presenting) else {\n            transitionContext.completeTransition(true)\n             return\n    }\n    menuViewSnapshot = snapshot\n    if presenting {\n            menuViewSnapshot.frame = minimisedFrame\n            menuViewSnapshot.alpha = 0\n            menuView.backgroundColor = menuView.backgroundColor?.withAlphaComponent(0.0)\n            menuView.addSubview(menuViewSnapshot)\n    } else {\n            menuViewSnapshot.frame = menuView.frame\n            container.insertSubview(menuViewSnapshot, aboveSubview: menuView)\n            menuView.isHidden = true\n   }\n. you avoid an extra guard lol \ud83e\udd37\u200d\u2642\ufe0f . No. Unfortunately, this bug isn't just about calling reloadData before the view is created. It's more about other parts of the app that might add tabs after the TopTabs is created but before its displayed. For example the new tab that is created on first run. . I guess I should have used a better title :(. You still gotta keep the description label text Visited But just remove the timestamp itself. . Please make sure these changes arent merged in. . lockoutInterval is nil here. . Once decoded. decodedAuthInfo.lockOutInterval would have been 0 before this patch. This test. Tests all the params. Making sure they are encoded/decoded properly \ud83d\udc4d . derp. of course. . You can use the method that lets you pass the site in. That should work instead of you having to use this method. . Use weak self here. We've had a crash related to this before.\nAlso the CGSize(32,32) should be a UX static var.. You shouldnt need to center it in the closure. You can do this outside . you dont need this. Can't we avoid all the checks here? \nIf selectTab doesnt exist then the filter at the bottom will just return all the private tabs. Thats fine, we still need to remove them. \nIf selectTab isnt in privateTabs thats also okay. We still need to remove all the private tabs. \n. You could just a check here to check if selectTab is private and if it is. delete it and avoid having to check above. . For the title. it appears under the icon now. I'll move this into a struct. This is probably my least favorite change. I create an extra TopSiteCell in order to do height calculations. . Sadly no. Because the color calculations also happen in a different thread sometimes the cell could be reused after the imageLoad but before the color operation calls the completionBlock.. Type checking can take a while when the type of an array is not specified. https://thatthinginswift.com/debug-long-compile-times-swift/\nThis is actually a pretty big problem in our sql queries some of which take upwards of 500ms to compile. Swift 3 was suppose to fix this but doesnt look like much changed. . Shouldnt the ReadingList panel be added to the Screengraph so its easier to navigate to it. The way I understand the ScreenGraph library is that new parts of the app are added to it. I havent actually used the library so I might be mistaken. If it makes sense to add the readinglist pane to the Screengraph please do.. nvm. That's exactly what is happening. New question. Why do we have to first go to the NewTabscreen cant we go straight to the readinglist?. This should be the default license . Is it possible to batch these events? I know its not that many events. But if the API supports sending batched events this seems like a simple case where we can use it. . To avoid duplicating eventPing creation. Why dont we move the basic data we use in each ping (app version/build) etc into the actual sendPing method. If we cant do this (because looks like PingCenter isnt linked to Shared) maybe create a base ping in AS itself. . Awesome \ud83d\ude04 . After my changes to the query. The zeroth site no longer appears as the first one. I dont think this is technically wrong (it appears second now). Both site5 and site0 should have exactly the same frecency score so technically they should be interchangeable? . I think this would be really rare in the real world. And if a site is tied I dont think showing them in a different order would be \"incorrect\" . nvm. There actually isn't a tie here. If you look at how we create fake history. https://github.com/mozilla-mobile/firefox-ios/blob/e83a50d86cfff646ba84155da629ba6d1907bb6e/StorageTests/TestSQLiteHistory.swift#L1461 We use the site number to advance the history timestamp for each site. So every site will have a unique timestamp. . we do. I didnt add this. This was initially in the restoretabs() in TabManager section but I didn't want that behavior there as the test would never restore tabs. So I moved it up into BVC in order to keep the behaviour for tests that need it. . Yea. Thats what I was trying to understand. How could NSKeyedArchiver actually crash? The one you pointed me to was a weird dealloc case. That seems like something that could be caused by our try/catch hack? How often did that crash happen?. max(title) and max(url) will select the url from that domain that has the largest url/title. . now should be thirtyminsago but for testing left it now I'll change this. . Hmm okay. max(title) doesn't seem like what I meant. max(length(title)) works better.. This is the actual fix for this bug. . The ThreadGaurd caught this. Decided to update this in the same PR. . The dispatch async made it so this wasnt called in the right order. . make sure you remove those changes. . Don't think this change should be here as well. . you are already passing in the profile to LeanPlum.This could probably move there. \n. You could also move this into the setup() function just to simplify.. Did you make these whitespace changes on purpose? If not best to remove unnecessary changes. . static constant instead of just the number  \ud83d\ude43. same goes for all the numbers in this class. . Same thing goes with all the space changes here. . All the spaces make it hard to see your changes. \u2639\ufe0f. This could also move into the LeanplumIntegration instead. . Yea, you are right its not a huge deal.  But I usually try to keep logic isolated. The file TabManager is related to managing tabs. So logic concerning LeanPlum feels like it belongs more in LeanPlumIntegration than in TabManger. \nAlso think of the following case. There might be other places where you want to show a focus alert/toast. You\u2019ll also need to check if focus is installed there as well. Instead of having to write this line again you can just do \nLeanPlumIntegration.sharedInstance.shouldShowFocusInfo() . anyone sounds fine to me \ud83d\udc4d . I think this is not exactly related to Leanplum. Are you sure this should be removed?. Is this related to leanplum though? wasnt this code here before leanplum?. Yea you should take it out. If we remove leanplum we want to make sure we dont accidently remove this as well . BVC is already pretty huge. Is it possible to add this into FxAVC instead?. this should be a guard statement instead. Something like. \nguard fxaOptions.query != nil else {\nThis also applies in other places. Gaurd statements are preferred. . You should construct this url similar to how you construct a string on line 2940 for the URL(). Don't need the semicolons. Usually the CI would tell you this. But looks like it never ran for your PR. I'll look into it :). Is it possible to skip this loop? can you instead just do query['service'] instead? . The url on the VC should really be private (thats a different matter) But better to do this in the initialization or via another public method so we can test this.  . FxAQuery seems to be nil in every use case. Do we actually use it? . If there is a crash in TabManger.tabsToRestore() which is the method that does the NSUnarchiving wouldn't that cause the app to crash even before we display the restoreTabsAlert? . Its a style thing. But its better to pass fxaOptions as an init variable than assign properties to a VC like this.. You can build the string without using +  use \\(queryParams) &... . Ah yes. good point. If you arent passing in params ever. You can probably remove _ fxaOptions: FxALaunchParams? = nil. this should be a more expressive function name (and lowercase) something like createFxAURLWith(fxaOptions, and Profile:. Because fxaOptions is set in init you can probably also set the URL at that point too. ViewdidLoad is usually for UI related things. . I dont think allowing disabling of AS will be a good idea. After this feature is released to a general audience we'll be stripping out the old Topsites panel and its not something we want to continue to support. If someone disables it and then in a later update has it reenabled once we strip out the old panel they'll be angry. If someone doesnt like AS we should be recommending them to change their default first panel rather than go back to the old panel. . I see what you mean. The switch is about giving users the choice to remove themselves from testing rather than removing the feature permanently.  And as long as we arent recommending regular users go to this debug option to disable the feature (which we dont) then I think its fine having the toggle. . reloading all the items is something I tried very hard to avoid in TopTabs. Is there another way of figuring out which tab might have been selected previously without having to resort to reloading all visible?. We've stopped using the SEL prefix I think. Does it make sense here to remove it?. A comment why this exists would be helpful for the future. . A comment here would also be helpful.. No, Sadly the UIVisualEffectView isnt very customizable. I cant change the blur radius for a softer blur. UIBlurView has these properties but they are private \ud83d\ude20 \nI'll fix the rotation issues. . Yea. The blue felt a bit too strong. I'll double check with Bryan if he's cool with the other places where this has changed. . > Does this exercise the bug because TestClass won't be deinited if one of its methods is alive as a thunk?\nYea the expectation would not be filled before this fix.\n\nIf so, weak self in aSimpleFunction would make this test pass if the bug were still present, right?  \n\nYou cant make aSimpleFunction use a weak self. We could wrap the function in a closure that uses a weak self. But I tried that, Doesnt work \ud83d\ude22 \n\nIs there a way to write a test that really exercises the leak? \n\nThe test should exercise the leak. When you nil the class you wait for the deinit call to happen in the test case. If you mean is there a way to make the leak happen with the fix applied. I dont know how I would do that. \n\nyou also need a little test for what happens if one of the thunks returns failure.\n\nI'll add that \ud83d\ude04 \nThanks for taking time out of your holiday. Really appreciate it!. This should fix the rotation issues. Dismissing the menu when a rotation happens. . Is there a reason why we have these NSLogs? We could probably use our regular logs.. Is this suppose to be hard coded?. the previous tab is nil in a lot of cases. Most of the time when we call selectTab we never pass anything through. \n So using it to check if the previous tab was a private tab doesnt work the way you want. Instead as long as the tab we are switching to is not private we can be sure that removing any private tabs would be okay.  If we are switching from one normal tab to the other then thats totally fine if we remove any private tabs (there shouldnt be any). . Good catch! I think switching via tabtray is one of the only places where a new tab isnt selected when exiting. . More tests are always good! The tabManager tests are pretty simple so I'll write a few more. . Didnt notice that line. My bad. But I still think that we dont really need to check the previous tab to be sure when to delete the private tabs. Move the strings into Strings.swift. Same with these please :). You can still pin a site again if its pinned. Thats how you can move a pinned site to the front of the list if you want to change the order. \nIf you want to remove a pinned site its the same as just removing a regular topsite.. Is this safe? Or should we just return nil in some cases?. should be lower case url. If its a big change. Best to leave it. Works for me. . can you do a completion?(nil) here instead and not have to check if its nil?. Is this how you can log a crash before the app fully crashes? . For this specific error is there not anything else you would like to log? Or will that be in another PR?. A PinnedSite exists in order to tell regular topsites apart from Pinned ones in the view layer.. I swear I dont know why I do this. . guards can be combined like guard let tab = tab, let webview = webview else { You could probably combine these into 2 guards (dont want them to be too long either). Yea. It actually doesnt look bad if you animate it. If you do the animations inside that coordinator block it'll merge the animations together and look fine. . You could add an assert here if you think it makes sense. You can catch and report the crash from TabManger instead. You'll be able to track what caused the crash too. . Yup this is the internal version of a reader mode url. Does it make sense to merge in the syncedReadermodeURL check into this?. Should we keep these print statements?. UIDeviceOrientation is different than the actual orientation of the user interface.\nhttps://developer.apple.com/documentation/uikit/uidevice/1620053-orientation\nFrom what I understand. Sometimes the orientation can be faceUp/faceDown while the UI is actually in portrait. This becomes hard to detect. Using the statusbar orientation ensures that the orientation of our view matches the status bar which is always in the correct orientation. . because we no longer show an entire section of bookmarks we can go back to simply showing 1 or 2. \nThe reason we needed to show an entire row before was because we didnt want empty spaces in the section.  . Could you also add a test for urls with their own encoded properties like \nabout:reader?url=http://example.com?blah=watt&url=thiscouldhappentooiguess\n. This should be on the same line so its clear its a parameter to a method. . hmm. You could probably just replace all these checks with self.absoluteString.startsWith('about:reader?url=). Does it make sense to keep switching to every tab in the \"receivedURLs\" list? Why not just switch directly to the last one. Fewer animations that way. . This will be more expensive if we have to query the entire document. . Beautiful \ud83d\ude02 . I think it would be better if we removed this from BVC to keep this method more readable. \nIf you added a static func to TimedSnackBar to create the bar and then simply use it in this method. \nsomething like\nlet snackbar = TimedSnackBar.createAppStoreBar(url, tab)\ntab.addsnackbar(snackbar). I've been using xcode9. my bad. I'll redo this for xcode8. on iOS, safari and chrome do not add a trailing slash.. if let activity = self.activity, activity.webpageURL == url. Same thing as above. . calling super.text will force the UIControlEvents.editingChanged event to be fired. . Invalidating here and then again in HomePanelViewController is redundant. . a blank date for lastInvalidation will force a refresh the first time its loaded (at launch). Invalidating topsites is now explicit. AS will flip the flag if topsites needs to be invalidated. This prevents needless topsite invalidations.. Panaldataobservers was already observing these.. oops. } should be on a new line. tbh. I dont know. I'm trying to follow the same style of code as we do for Topsites/Highlights. . webServerBase is then used when performing the api queries.. Is this something that will make a big difference? I dont mind if this isnt always exactly right. Using uptime is no fun, having to handle the case where the device has just booted and the uptime is too small is no fun. We had a bunch of bugs in the Password checking because of this . We dont use underscores anywhere else in the file. We should change this to keep things consistent . I see it used in the FxA/Push strings. I guess this is fine either way then. . Is this TODO still relevant?. For users who are on 9 shouldnt we just not show the extra slide? That way we dont have to show them an error?\nThis is probably irrelevant if this feature is landing in 9.0 though because iOS9 wouldnt be supported.. These changes should be removed. I think you can avoid creating a sting for the enum. It'll default the string to the name of the enum.. You are already setting this in the init. You can either avoid setting the defaults here or resetting them below. Can you remove the print and add the string to the assert. Could you use Deferred here to avoid the nested statements?. Is there a reason this is an AnyObject?. Why does this return a closure. Can it not just return false?. This method name should be a bit more descriptive . Why are you setting userdefaults directly here? Shouldnt these be set via prefs?. ah yes. Because the class isnt availible in ios10. I think if you add a comment here about why we can remember to remove it later. . If the network is slow. Then this will prevent topsites/history from loading. This should be done outside of this accumulate. . If you only fetch the needed amount of stories from the API, If you are in portrait you would see 3, Once you rotate there are 4. But you've only loaded 3 so there would be an empty spot. Instead always load the max which is 4 and you can avoid doing the math here. . Instead here, return the number of items for a row. instead of the total count. (as long as pocket stories isnt empty). actually. Sorry you can just do a assert(self.rulestore != nil, \"WKContentRuleListStore unavailable.\"). Both enabledPref and StringPref can just be computed values instead of methods. \nAnd you could rename them to enabledState and blockingStrength. you need to call completion here. . Yea makes sense. Rulestore would probably only fail if there was something catastrophically wrong . There isnt always a longpressGesture on newer devices there is a ForceTouchGesture instead (or both). \nI dont think its required. Instead we decide if we would like to fail our gesture in gestureRecognizerShouldBegin which works well. . I think you can just move this outside of this method. You can then pass in the rules array as a parameter.. Looking at the definition of ruleStore I dont think it can be nil. default is Self!. The error is passed into this method. But then nothing is done with it besides having it displayed. Do that here instead. \nSame with checking if the rule is nil. You could also do it here. . No real need to return true/false here. You can edit this method signature to not include optionals. . I think a Deferred> makes more sense. This is also known as a \"Success\" inside the app. And when you want to return an error you can just pass an error to Maybe.. remove the print. Using XCAssertEqual would be better? You should also add a message in case of a failure.. In tests you dont need to use closures like this. You can use blocker.addActiveRulesToTab().value and this will block until the result is returned. \ud83d\ude04 . You just want to make sure these rules were applied successfully. Does it make sense to return true/false here instead? . Not sure. I'll double check what happens if you have english as your langauge and german as your region. . if your language is set to english and region is set to Germany your identifier is en_DE. . I need a spell checker for my comments \ud83d\ude22 . The whole vc is pretty wonky. But it works!. With the power vested in me I merge this Protocol into 1 function! \ud83d\udd7a . The settings will only be reported if both have been set. You can probably split this up. . shouldSendToLP already checks the enabled bool. Do you still need to check it here again?. shouldSendToLP already checks the enabled bool. Do you still need to check it here again?. same as above. These changes should be removed?. if you do this, anytime you try hiding something from topsites or highlights it wont refresh. . runAsync already performs the query in the Background SwiftData thread do we also need to do this here? All we are doing is moving the creation of the query to a BG thread. I also dont want want to expose this to a consumer of PanelDataObserver. This is something that PDO should worry about . I dont think you'll need the pendingCacheUpdate bool anymore. It was used to prevent flickering of Topsites if the panel was loading while the cache was being invalidated. I think you can rename it and use it to block the first reloadAll.. I dont think we need to do this. To keep things consistent with the rest of the core ping. Only send the option if it has changed. . This UI component no longer themes with private mode. I need to strip this out completely. I've just set it to false until I do that. . I've created a separate bug for this. https://bugzilla.mozilla.org/show_bug.cgi?id=1393301. Yea it is. I tried a few different ways. I could get the window from the AppDelegate, But thats really the same thing. \nThe other way of fixing this is adding a view underneath the statusbar that matches the VC. Not sure how to do that though. . I've created a separate bug for this. https://bugzilla.mozilla.org/show_bug.cgi?id=1393301. I removed it because its redundant. AppState was just adding an abstraction I dont think we needed anymore.. Not a bad idea. I think I can add names to this though. I'll do that instead. The green lock that appears next to the URL. . My editor is somewhere adding these lines. hmm.. good find!. The nested array acts as sections that is correct. Its kind of a weird way of doing it. But the lists are pretty small.. Cant add names. I created a new typealias to Bool. I think we should leave this in the simulator. Sometimes we only test things in simulator and forget that the app might behave/look differently on device. Having them be identical would avoid any confusion down the road. \nQR scanner crashes the simulator but we leave it in there because otherwise we have to write code on how the UI should look when its not there.. Not used anymore.. hmm. Odd is swiftlint not running. It would have pointed this out.. I'm leaving color consolidation till the end. There is a separate bug to track this. Just because it'll give me a better understanding of what colors are used where and then I can represent them in UIConstants correctly. . I know we only call setBrightness with animated=true but just to be safe I think you probably want to cancelAllOperations outside of the animated block. . Going to leave this in to keep things consistent. This class could use some cleanup once we are done. . Dont forget to remove this. I think having this and all the locale logic in the PocketFeedAPI class would be better. \nASPanel is starting to get pretty big. I think this breaks the tests. For tests, I run a fake api endpoint that returns pocket stories without an API key. This is also why I let you provide your endPoint\n. I think the difference between my pattern in yours is that I just return an empty array slightly later. I dont think there is any significant processing that happens before that. So if the API decides to return nil at the last step after its created a url, calculated the locale, checked a pref I think its okay. \nThe thing I was trying to go for from the ASPanel frontend perspective was that the error handling would only happen in one place. Instead of checking if the pocketAPI is nil or that localIdentifier is okay I create the Deferred and if any of those cases occur I just handle the empty array there (granted, I should handle the errors better).  . Good point. I have some follow up work here too. We shouldnt show the section title if there are no pocket stories!. self will be the end of me . a lot of these are all over the place right now. My plan is to fix this in the great color fixup. curious why you decided to switch it to print?. I know profile.favicons and profile.history is the same thing but reading this code it feels weird that this is profile.favicons. History makes a bit more sense here. \"Oh this is fetching a site from history\"\n. This should never fail, but lets not force unwrap. You could add this to the guard above. . could this be a guard with the above statement on line170? We are 4 blocks deep here. Trying to think of a way to reduce it by 1. Normally we use uponQueue if we later need to do some sort of UI work. In this case I think you an avoid using .main here and above. pinToTopsites should be before setHomePage.. curious about the syntax here if case let site?? = results[0], this looks like it would still crash if 0 was out of bounds. you could do a let site = results.first instead. This pattern of simply attaching the metadata to the tab is exactly how favicons work. I think you would be able to create and attach the favicon to tab.favicons here and it would work. . No, but based on the bugID this was a temporary fix. I dont think we need this anymore.. we still update the non-animation related properties (countlabel) so in the case where we dont call the block inside completed I think we would be okay. We would have the newTabsButton which is a dupe of the tabsbutton on the screen and the actual button would be invisible. . ah. I see whats going on. Result is a cursor thats why this looks so funky. This should be result.asArray()?.first. Sorry about that! didnt realize what was going on.\n. If you make the above change. You shouldnt need to do this.. I'm using bindQueue here to chain a deferred. So accumulate returns a deferred which instead of returning that deferred to the caller it returns the deferred inside the block. Confusing.\nBut here is the method signature of the closure in bindQueue\n@escaping (T) -> Deferred.Deferred<U>\nvs \nuponQueue\n@escaping (T) -> ()\n. invalidating highlights will fetch and cache the highlights. I wanted to avoid doing unnecessary sql. . This is actually the same pattern we use everywhere in settings. To be consistent I'll keep it like this. because showPocket will be false if it is nil so if a user hasnt set a pref we still want to make an effort to show them pocket stories (we still need to check their locale).\nI agree this is weirdly complicated. . This clarifies and fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1403906\n. much clearer now that handled is renamed.. I would combine both guard statements into one. . haha. This is up to you as it is just a style thing. But all these loops are just begging to be turned into a functional style. something like \nreturn tab?.webView?.scrollView.subviews.flatMap({ $0.gestureRecognizers }).reduce([], { $0 + $1 }).first(where: { $0.description.contains(descriptionFragment) })\nwould work pretty cool. But it is just a style thing. So I dont mind either. \n. launchFxAFromDeeplinkURL pops open a VC. and presentIntroViewController also pops up a VC. You don't seem to be stopping the controlflow?\nI think you need a return after the self.launchFxAFromDeeplinkURL. Just landed this today. You wont need to do this anymore. \nhttps://github.com/mozilla-mobile/firefox-ios/commit/c17db926ecb38c82658845ebcce68494da1ede0d. I think can actually move the entire presentSendToDevice into PhotonActionSheetProtocol. You dont need to create and pass this closure in. \n. all the code in the BVC can move here \ud83d\ude04 \npresentableVC is actually the BVC. so you can simply do presentableVC.present \nyou need to double check if presentableVC conforms to the delegate protocols used by the two VCs \nguard let bvc = presentableVC as? InstructionsViewControllerDelegate & ClientPickerViewControllerDelegate else {\n                return\n            }. Do you think it makes sense to add some comments on the thinking behind this and other parts of the code?\nI think the problem with these hacks is that when they inevitably break in the next iOS version \ud83d\ude1b  we forget what the heck we were thinking!. The thing with using toolbarHeight like this is that other parts of the app that show toolbars (like readermode/findinpage) use this height as well) In those cases we don't need the bottom insets. \nI think we should rename this to BottomToolbarHeight and make sure its only used for this specific case. . Even the class Toolbar is used somewhere else where it is not on the bottom of the screen. \nI think what we want to do here is instead build the insets into TabToolbar which is a specific subclass of the Toolbar which appears only at the bottom of the screen. And then also build the safeInsets for TrayToolbar. That way the insets don't mess with anything else.  . this should be ClientPickerViewControllerDelegate ?. Yea makes sense. Lets put a return here so a ClientPickerViewController is not also created. . This feature has a new string so it wont be able to land in 10. We'll need to add it behind a feature flag. This should be pretty simple. \nWe create a new entry in AppConstants.swift and set the feature disabled in beta/release and then here you can just do \n```\n        var middleActions = [copyURL, findInPageAction, toggleDesktopSite, pinToTopSites]\n        if MOZ_SENDTAB_IN_PAGE_ACTIONS {\n            middleActions.append(sendToDevice)\n        }\n    return [topActions, middleActions, [share]]\n\n. We might be able to rework a few strings to have this land in 10. I'll have to talk to Stefan about this. . In order to avoid having Sentry create multiple messages for the same error. Do you think it makes sense to keep the message the same and add the failure message to the `extra` object. like this\n`SentryIntegration.shared.send(message: \"Failed to simple sync bookmarks: \" , tag: \"BookmarksSyncing\", severity: .error, extra: [\"engineError\": message])`. This is setting the last refresh to simply be Jan1,1970 + 20mins if I'm not mistaken. The test still works but I think this might throw someone off if they read the test. I'm not sure how this works. Setting the key to simply be `60*1000*10` would never make `(Date.now() - lastInvalidationTime > invalidationTime)` false.\n`Date.now() - 60*1000*10` is always going to be greater than ` OneMinuteInMilliseconds * 15`. these are lowercase. But before they were uppercase. This might create some dupes?. didInvalidateDataSources/willInvalidate don't need `forceHighlights` `forceTopSites` We can just replace them with the new params.. This is great! Thank you for going above and beyond with writing the tests! \ud83d\ude04 . Curious if you think the timing issues you were having with the old tests could happen here again?. I think splitting these queries up into their own variable will help the readability. Hmm. I see what you mean. My bad, I see what I was trying to do here \ud83d\ude06 . I feel that the `didInvalidateDataSources` method is way too long. How about \n`func didInvalidateDataSources(refresh forced: Bool, highlightsRefreshed: Bool, topSitesRefreshed: Bool)`\nwhere forced is simply `forceHighlights || forceTopSites`. Remember to dump the error into `description` \ud83d\ude09  This will help prevent too many messages in the Sentry console.. you can skip the nil params for a cleaner look \ud83d\ude0e \n`.info` is the default. you can also skip that.. I think this will add too much padding on an iPhone X. What do you think? Im not sure if it'll look bad on the iPhone X though. . imo. I think this should be wrapped in a main thread rather than the caller of the notification. For example, if someone else posts `NotificationPrivateDataClearedHistory` they might forget to call it on the main thread. What do you think?. curious why we cant use `bindQueue(.main)`.bindQueue calls `self.uponQueue(queue)` and then calls uponQueue on the passed in closure. I think that should work. Yea. I think we try our best to be super strict about this. And XCode usually catches us on this as well. . we should make sure that `removeRefreshControl` works correctly. Right now it is doing \n`        self.refreshControl?.removeFromSuperview()`\nit probably needs to also do\n`self.table.refreshControl = nil`. No the issue with wechat was the same as Notes. Sending `public.url` now to everything but password managers fixes wechat too. . Firefox is iOS10.3 and above. I dont _think_ you should need to do this?. No force unwraping please :). you can do a `if passLibrary.containsPass(pass), let passURL = pass.passURL {`. I think we can just call this `OpenFileInHelper`, or `ShareFileHelper`. I think we could write a method in `MimeType` that returns an extension based on the type. Something like \n`filename.append(MimeType(mimeType).extension)`. We could write a computed value in the enum like \n      var extension: String {\n            switch self {\n            case .PDF:\n                 return \u201cpdf\u201d\n            case .EPUP:\n                 return \"epub\"\n            }\n       }\n``. I think we should be able to doMimeType(response.mimeType) != nilto see if it is a supported Mimetype. I didn't realize extension was protected. Of course it is! I think we should just use fileExtension or something instead to avoid the backticks. I think this needs to be.pdf` same with epub. There are a couple of things we could do here to make this even more perfect. \n\nCreate a static var for the iBooks URL so it is clear that we aren't force unwrapping something dangerous. Something like static var AppleiBooksURL = URL(string: \"itms-books:\")! \nSimply do a let MIME = MimeType(rawValue: response.mimeType ?? \"\") this will either fail to create a MimeType object or succeed and continue. \n. Instead of mimeType being a String just pass in the MimeType we created \ud83d\ude04 . Then down here we wont need to create another MimeType again!. I think we could simplify this all into something like \nswift \nlet filename: String\nif suggestedFilename.asURL?.pathExtension == nil {\n    filename = suggestedFilename + mimeType.fileExtension\n} else {\n    filename = suggestedFilename\n}\nfilepath = documentDirectory.appendingPathComponent(filename)\n\nwhat do you think? We can avoid the var this way.. Thanks for fixing the logs people usually forget this!. when restoring tabs on launch do we also need to call this method for each tab?. Rewrote the SnackBar API here. Made it follow UIAlertView more. This avoids all the nesting . Same here. Just creating the Snackbar like you would a UIAlertView. And moved the strings to Strings.swift. Toolbar was used to show the StackView buttons and the TabToolbar. Both have so little to do with each other that most people think that Toolbar is only used in TabToolbar. \nDecided to get rid of Toolbar completely and have Snackbar use stackviews instead. . I love this \ud83d\ude04 . This was just hanging around \ud83e\udd37\u200d\u2642\ufe0f . I decided to cleanup TabToolbar a lot. \n- Remove SEL\n- Cleanup allocations\n- Move the line drawing from Toolbar into TabToolbar. could we move these into Strings.swift \ud83d\ude04 . I find in a case like this, multi lines makes it kind of hard to follow. It looks like let qrCodeDelegate = self.qrCodeDelegate is inside the guard's else statement to me. . Could also dismiss here. . comparing the header offset to topScrollHeight might be better. For example the height of the toptoolbar on the iPad is larger than TopToolbarHeight because it also includes the toptabs bar. . I think this could be isShownFromScratch or showingFromScratch?\nI also think isShownFromHidden or showingFromHidden works better in line with UIView terminology . Do you think adding a a (why?) here would be helpful? Explaining that we update these insets in order to avoid jank when loading a new url while the toolbars are hidden?. I wish we could. But UIStackView is used only for arranging views. A UIstackview for example cannot have a backgroundColor or other views (like the separator) that are not in the stack.. I'm of the opinion that this shouldnt be in the page options menu. We've got to be careful about what we add here because we will start scrolling on smaller devices.. I think it'd be simpler for l10n to reuse the string so we can land this for 10.3. I think the style for this should be .destructive because this is a delete action. I don't think we need to do this for the toolbar. The background of the toolbar should go from edge to edge.\nUsing make.left.right.equalTo(view) here should be okay. \n. This might make it harder to reason in what order the TabManager delegate methods are called. As long as we correctly deallocate a webview do we need to do this?. curious why this was moved into viewDidLoad. Separate methods usually help with readability. . You could probably just do if selectedTab?.webView?.matches(webView) ?? false. Moving this onto one line is probably okay. . I think you could just declare a weak var weaktab = tab here and use that inside the block. That should fix the issue?\n. Then inside the block just unwrap the tab in the guard statement.. The reason why the tab is being retained is because of the nested function (loadImageCompleted). The function is retaining a reference to tab. Instead of using tab directly inside this nested function we use a weak one. Tab will no longer be retained. \nI think there are a few ways you could fix this\n1. keep loadImageCompleted where it is but create a weak ref to tab so it does not up the retain count\n2. dont make loadImageCompleted a nested function.. Kinda like this. It should work. \n```\nweak var tabweak = tab\nfunc loadImageCompleted(_ img: UIImage?, _ url: URL?) {\nguard let img = img, let myTab = tabweak, let urlString = url?.absoluteString else {\n    deferred.fill(Maybe(failure: FaviconError()))\n    return\n}\n\nlet fav = Favicon(url: urlString, date: Date(), type: icon.type)\nfav.width = Int(img.size.width)\nfav.height = Int(img.size.height)\n\nif !myTab.isPrivate {....\n\n``. Best to probably just move this into one line. . Love it!. Did you mean to doUIPasteboard.general.stringshere?UIPasteboard.general.stringis just aString. Flatmapping it would result in an array ofcharactersno?. I love this \ud83d\ude04 . Oh nvm. This is SO COOL! I didnt know you could do this. Love it!. woops. I'll remove this.. Can you please try it without this change. I think it should work fine.. If you could please update this PR to also useview.safeAreathat would be awesome!. This isnt an issue. We were calling this before in a similar manner. All the issues of people complaining about the performance of this API are from iOS9. I dont think that would work if the flag has not yet been set. The key would be nil and this would return false. This works but I dont know if it is anymore clearer(self.profile?.prefs.stringForKey(PrefsKeys.KeyMailToOption) ?? \"mailto:\") == \"mailto:\". I think a lot of how this code treats nils is important and because of how swift lets you simplify nil checking the code looks over verbose. But the nil checking and the order is critical \ud83d\ude1e . This should be 11 now \ud83d\ude05  we are pretty bad at this haha.. Only supports 10 and 11 \ud83d\ude04 . this is a great idea! TabManger could use this. . Apple [mentions](https://developer.apple.com/documentation/foundation/notificationcenter/1414169-default) that if our app plans to use the notification center a lot we should make our own channel instead of usingdefault. Any ideas how we might fix this? We have a lot of ways to enter/exit private mode which makes this really tricky to check . I dont think there is a cost to calling this. I think its okay to just leave it.. Not sure either. I think that setting this attribute would show LP that someone turned off and then turned back on telemetry  (which could be useful). for brevity this might work betterprivate let KVOs: [KVOConstants] = [.estimatedProgress, .loading, .canGoBack, .canGoForward, .URL, .title]. We usually have these on the same line unless the line is getting too long. . For brevity we could simplify this to .estimatedProgress. This is causing the build to fail. I dont think usingswizzledMenuHelperFindInPagehere will work. The accessibilityIdentifier here should not change. We have aself.view.safeAreaextension that should work better than doing this I think. It'll allow you to set the constraints without checking for iOS11. Its declared inSnapkitextensions.swift`. woops. My bad. This commit is so annoyingly large that I didnt see this \ud83d\ude22 . I picked up this patch from mkaply, according to him. These were just moved\n  . Apple changed Locale Identifiers . The good thing about this setup vs the old one is. The XML files are all shared between countries. So if we test the global xml file in a test for en_CA then the XML file should also work in India.\nAs for List.json, Hopefully we arent merging patches to master without CI \ud83d\ude04 . I think its fine in this PR. The PR itself is not adding the force unwraps. But if we do want to change it we should do it in a different PR. This one is really only about using type inference. . Same with this one. Im hesitant to try to change the behavior here. . I think this is a case where using flatmap is a lot clearer (and more swifty) then what we were doing before. It might be a bit weird at first but I think in places like URLExtensions it has helped clean up a lot of the code.  \nreturn normalizedHost.flatMap { $0 + self.path } \ninstead of \nif let normalizedHost = self.normalizedHost {\n    return normalizedHost + self.path\n}\nreturn nil. No. dont think so. But it shouldnt matter. . Ah. The only place these deep links are used are by the LP folks. They have it well documented and don\u2019t include the trailing slash. But I think supporting them isn\u2019t a bad idea. I\u2019ll add support and create some tests for it. . Good idea. I\u2019ll move it in there. I think you meant \u201cwe shouldnt treat appdelegate as the next bvc right?\u201d. Curious. I would think static methods would be better. There aren\u2019t any resources we are creating/destroying with these static methods. I usually only like to use singletons in cases where we need to allocate a bunch of memory or hold a db connection and don\u2019t want it to be created/destroyed every time. . You can try the new constraints here.. We were doing something similar before and at first its pretty odd why it exists. But when you mess around with it you realize very quickly why its there. The intro slides become impossible to scroll right away. . This is created but not used anywhere I can see?. You can just make isLPEnabled public.. to simplify this you could do a self.useFxAPrePush = useFxAPrePush?.boolValue() ?? false. This is a good idea. We weren't using the string in lastReplacement anyways. And mostly using it as a bool. I think we might not need lastReplacement or wasDeleteTyped actually!. . 3rd party keyboards do weird things here. Sometimes it is called. Other times it isnt. shouldChangeCharactersIn is called before the changes actually happen. I think it might be better to defer this work until after the text has been commited in 'textDidChange. I think right here is where we want to make the change.textDidChangeis called reliably after the change happens.lastReplacement` is all that is stopping the autocomplete from running on deletion. \n. setAutocompleteSuggestion is called by the searchDelegate when a new search term arrives. As long as we dont call notifyTextChanged unnecessarily I dont think we should need this.. I think using the webViewContainerToolbar here is a bit misleading. webViewContainerToolbar doesnt actually repersent the main toolbars. (sorry the name is confusing.) instead I would try to use toolbarState == .collapsed instead. \nif toolbarState == .collapsed {   \n  showToolbars()\n  webViewContainerToolbar?.isHidden = false\n  return false\n} . We usually try to avoid force escapes. Even if there should always be a value. . I think this should use a simpler if/else statement now that there are 2 options. Nested guards can be a bit confusing to follow.. To make this more swifty we can change this to configure(with title: String). The configureWithSite should also probably change. TBH though all the function names in this file are not very swifty.  I think its fine if you leave this as is.. We need to make sure on reuse (which is very unlikely to happen) that the disclosure indicator is removed. If we add disclosureIndicator.removeFromSuperview() to prepareforReuse we can avoid the disclosureIndicator from showing up on the wrong cells. I think we should rename this header to PhotonActionSheetSiteHeaderView now that there are 2 header views.. I think this worked okay when there was only 1 expression. But the nested (self.title != nil) makes this a bit harder to follow. I think we should just use standard if statements here now.. same thing goes here imo.. Thinking ahead \ud83d\ude09  I like it!. a default of .none here could be helpful.. I think we can avoid this By doing.\nlet toolsAction = PhotonActionSheetItem(title: Strings.AppMenuToolsTitleString, iconString: \"menu-Tools\", accessory: .Disclosure) { _ in\nself.presentSheetWith(title: \"Tools\", actions: [[findInPageAction, toggleDesktopSite, pinToTopSites]], on: presentableVC, from: buttonView)\n}\ninside getTabActions removing it from BVC.\n. You also updated the tests. Awesome!. even though the backgroundView was created in the line above this. We usually try to avoid force unwrapping. layoutSubviews can be called many times during the lifecycle of a view. Setting up constraints in layoutsubview is usually not a good idea. Is there a reason why we need to do this here?. We should try to set the constraints correctly in the switch statement above instead of remaking the constraints here again. \nIf the constraints are remade here all the constraints set above are never applied. \n. If we remove .textAlignment here the default will be .natural. I thought we needed this for when the app is launching via a deep link. But turns out you dont. the system will call application(_ application: UIApplication, open url: URL even if the app is launching.. Have a look at Snapkitextensions.swift there is an extension we use to make this simplier  \ud83d\ude04 . I think if this was just changed to something generic like [Set<AnyObject>] this would work fine with TopTabMoveChange. I think you can dismiss a modal action sheet via self.presentedViewController which is a built in property of the VC.. All of these panels inherit from SiteTableViewController if you are up for it. I think you can simplify this by building the implementation directly onto SiteTableViewController. . - The HomePanelContextMenu protocol already has a getSiteDetails(for: indexPath) which you can use to fetch the site from every panel in a generic way. \n- If itemsForBeginning is implemented on the SiteTableViewController all you need to do is \nlet panelVC = self as? HomePanelContextMenu, let site = panelVC.getSiteDetails(for: indexPath). The animation still happens with performBatchUpdates the UIView.animate(withDuration: is used to speed up the animation a bit. If its messing with the move lets just get rid of it and do \nself.collectionView.performBatchUpdates(updateBlock) { _ in\n  onComplete()\n}. This was a style choice on my part. I found it makes it easier to follow when each if statement only has one menuItem inside. If there isnt a performance cost of creating menu Items and not using them I think its more clearer to keep them outside of the if,else blocks. . I'll file a bug for this. NighMode and NoImadeMode do have static methods that fit a similar pattern. But ContentBlocker does not use a similar pattern. . Yea. It looks like that. But prefsChanged is a static method! So other classes call ContentBlockerHelper.prefsChanged() to get all the content blocker prefs to change. TBH the ContentBlockerHelper class mixes too many global responsibilities (parsing/creating block lists) with the tab responsibilities (enabling/disabling for each tab). It makes it pretty hard to follow what is going on. This should be separated but I couldnt in this PR. . No. And PresentableVC is just a nicer, stricter way of saying BVC \ud83d\ude06 \n. I like to keep the same pattern so when we do decide to add something later we follow it.  . Yea. I was going to file a bug for this. There will be 2 now though. One for each browsing mode. . without thinking I chose the baseDomain as the thing to whitelist. Does this make sense? This would whitelist all of google.com if you were on images.google.com. This would have been caught by CI. But there shouldnt be a space between ContentBlockerHelper and the colon. Should this be called didChangeContentBlocking or didFinish to be more generic?. I'm not a fan of this. reaching into the UIApplication to pullout tabmanager feels very much an abuse of globals. Is there another way we can approach this?. stats change pretty frequently. Can we check the old stats and only alert when stats go from 0 to >1 and >1 to 0?. vars should be at the top of the file . force unwrapping \ud83d\ude22 . This variable is called isInstalling but it is also checking if the site is whitelisted. we should separate this so its clear whats happening here. . we should be using guards for things like this. . This is awesome that we dont have to do this anymore. . Not sure. if we need an icon state for this. I'll double check with bbell. I've changed how this event is fired. The name tabDidChangeContentBlockerStatus fits better now.. I dont think we need any of the changes in TabManager anymore right? . The variable here is called parentDomain but the entire url is sent. Is this correct?. This is probably a bad time. But I dont think its overkill to separate all these static methods from the Tab specfic content blocking code. I find it pretty hard to follow sometimes what is happening because of all the static methods. There's a lot of functions used by performHeavyOneTimeInit that aren't used anywhere else. Separating this into its own class would allow us to simply initialize this at launch once and not have to worry about static bool flags like we do now. . missed a print. should this still be unless-domain?. Im getting a flipped layout without RTL enabled. Is the layout here correct?. if the completion closure has a default of nil you'll be able to avoid having to include it as a parameter later.  . should this class be @available(iOS 11.0, *)?. these should be gaurds . guards make sure we dont fall through. If we accidentally remove the return the compiler will warn us.. is this comment still relevant here?. should be guard. Actually I dont think it'll be that much work to refactor the heavyinit to be called from didFinishLaunching. If we make that change we dont need to track state like this anymore. . explicit [NSRegularExpression]? type here is not required. . Is there a reason why this is a class and not just a struct?. I dont think we need to map here in order to create the list. . Does using url.baseDomain not make sense. That is how we fetch a base domain in other parts of the app. . could all the methods below clear/add/delete be written in a didSet closure for domainSet instead?. fixes https://bugzilla.mozilla.org/show_bug.cgi?id=1443882. It  doesnt seem like any of the load/clear/add methods seem to be guarding against any sort of bad data. So we could just allow setting/getting of domainSet. Then other classes would simply doContentBlocker.WhitelistedDomains.domainSet.add which would trigger didSet where we could then update the regex. . I really didnt want to add a onChange closure to every pref so instead I trigger the refresh event on viewDidDisappear. This will have some false positives but I think its fine.. I think either one is fine. Both should be called.. I dont think this is used anywhere.. Would this be a good place to use the new multi-line strings that we have in swift 3?\nhttps://useyourloaf.com/blog/updating-strings-for-swift-4/ (guide is just updated to swift 4. I think multline strings were swift 3). I'll add a new popover case to this enum to make it more clear.. ViewdidLayoutSubviews is called a lot and I dont want to be recreating all the constraints every time its called . The new popover case in the enum should fix this.. referencing self self.createStatusText()is not allowed anymore in the init method. (It should never have been. This was a bug) . Swizziling has changed in swift 4. Both trailing and right are being used here. To make sure RTL works correctly. Could we use trailing here instead?\nmake.centerY.equalTo(self)\nmake.trailing.equalTo(self.safeArea.trailing). This should still work. Are you mixing up (history)_ with [history]_?. The commit hashes are used in the Cartfile.resolved. I dont think you can because the type is not defined when first creating the dictonary. I think you could avoid the type if we did let attributes:[NSAttributedStringKey: Any] = [.font: digitFont]. . Yup. Will do. [history] captures the history variable inside the block. and the _ was the empty parameter  for the closure that isnt required anymore.  . there usually isnt a comma. Just fixed some warnings. xcode9 seems to add these changes whenever I open the assets. Not sure why. Instead of keeping a ref to all the gestures. We could pass in a selector to makeActionRow of the function that should be called when tapped. . I know it might be a big change now. But using stackviews all the way down will simplify how many constraints you need to specify. Especially because a lot of these constraints are fixed numbers. Constants might not work well in LTR or with l10n if the text needs to extend to 2 lines. . default value in both cases is fill. we can omit these.. It might be simpler to keep a reference to the PageInfoRow instead of keeping a ref to all the actions and separators. This has the added benefit of also removing the whitespace view while animating.. I think both the label and the checkmark need a bold font. The font also looks a bit heavier in the mock. The color of the icons and text should be #2a2a2e Photon.Grey80. Setting up constraints for the separators and actionsRows can happen in makeSeparator and makeActionRow because their constraints dont depend on their superview . If the stackview is setup in line here. we could use UIStackview(arrangedSubviews: rows) for initialization and avoid this here. . Using leading and trailing instead of using left right is recommended for LTR support. make in should be on the above line.. I wonder if UIFont.systemFont(ofSize: 18, weight: UIFont.Weight.heavy) looks heavier than bold?. If completion isnt being used we can use the simpler \n```\nUIView.animate(withDuration: UX.doneDialogAnimationDuration) {\n}\n. To keep this swifty. we could do\nself.stackView.arrangedSubviews\n   .filter { self.viewsShownDuringDoneAnimation.contains($0) == false }\n   .forEach { $0.removeFromSuperview() }\n. Reading the file top to bottom. I think it helps having the `viewDidLoad` method right after the variable declarations. . I think it would be better if we passed in the necessary vars to the func instead of reaching into the appdelegate for this.. should we be setting the Firefox UserAgent here?. we can just always call `statusIcon.removeFromSuperview()` to avoid having to have 2 nested if statements here.. Should we remove these prints later?. I dont think its a bad idea. The passbook helper is also getting a ref to bvc via `UIApplication.shared.keyWindow?.rootViewController?` . I know this is just a todo. but I think it'll be a better fall back if when firefox fails to parse a url we simply try searching. So `firefox://open-url?url=mytext` would do the search. Right now I think we would just fail silently . at this point. it might be simplier to do. `[\"http\", \"https\", \"data\", \"blob\", \"file\"].contains(url.scheme)`. the empty cases can all be combined. `case .FileDidDownload, .PrivateDataClearedHistory:` . we only need `make in` here. We should be able to skip the void. We have a safe access array we can use. `return downloadedFiles[safe: indexPath.row]`. Do we need to worry about case sensitivity at all?. `return MimeType.OctetStream`. I think splitting this into 2 lines might be better. Not sure what we do when lines get this long. (looks long on github at least \ud83d\ude05. we call reloaddata which does `updateEmptyPanelState` do we still need to do this there? could we not set it up correctly in `updateEmptyPanelState`. print statements wont show up in logs. Should we just remove them? If we want to show this in logs we can use xcglogger. To make this safer. In swift we can swift\nelse if let parentTab = tab.parent, let parentIndex = tabs.index(of: parentTab)  {\n  _selectedIndex =  parentIndex\n}\n``\n. If viewController is nil this just wont work. Do you think its better if VC was required?. This could befor download in downloads where !download.isComplete {. should VC beweakhere? Not that it matters I think. BVC is around forever anyways. . Instead of always doing this async it might be better to useensureMainThread {instead. Not sure if it makes a difference though. . Perfect \ud83d\ude04 . I know this is just following the same pattern used above in thepinToTopSites` closure. But I think we can clean both up now. \nLets move this guard statement into one line\n. Lets not create this here. We can just pass url.absoluteString to the line below. We want to avoid using .value This blocks until the query completes. In this case its not a big deal. But I think we can do better. . The double optional on site is weird here. But this works too \nlet site = val.successValue?.asArray().first?.flatMap({ $0 }) . We can instead use bind to have getSitesForURLs return another deferred via removeFromPinnedTopSites like this \n``` swift\nsql.getSitesForURLs([string]).bind { val -> Success in\n    guard let site = val.successValue else {\n        return succeed()\n    }\nreturn self.profile.history.removeFromPinnedTopSites(site)\n\n}.uponQueue(.main) { _ in }\n```\n. Can we move this string into Strings.swift?. That was a sneak force unwrap. Didn't even notice it. . Not 100% true. When you go to the downloads section via the browser menu it happens in the current tab. So for example you could be \n1. Browsing a website\n2. open the menu and go to downloads\n3. tap a download \nYou'll have a session history that might be worth retrieving. I also forgot this in the last PR. But another place we show urls is the backforward list (long press back or forward). We'll have to display just the filename there. . Im not sure if moving strings after an export will break localization. Best to ask @st3fan . To be safe. (I cant find this in the documentation right now) But you want to do the actual deletion inside the animation block. . If you do not make the insertion, deletion, and selection calls inside this block, table attributes such as row count might become invalid.\nhttps://developer.apple.com/documentation/uikit/uitableview/1614908-beginupdates. We should avoid force unwraps. If the clientGUID is nil this would crash. We should make sure we still fall back to what we were using before. something like. let id  = scratchpadPrefs.stringForKey(\"clientGUID\") ?? DeviceInfo.clientIdentifier(self.prefs). I reuse the title from the .pocket case. view.title = Section(Section.pocket.rawValue).title Its probably simpler to just dupe the string here actually. . make sure to commit the actual strings when writing XCUITests. removing all of this is awesome. But we can go even further! I dont think webViewContainerToolbar is used at all anymore.. There are also hacks in TabScrollController that could be cleaned up. Like the PDF check we do . This is removed and not added back in. Is this alright?. remove the prints if we are done with them. much nicer  \ud83d\ude04 . When there are pocket videos we do not need a pocket header.. When there are no pocket videos we do not need header space.. if our new method works. lets just remove this. Not sure why we need to remember that we force crashed?  I dont think we should do this just because QA wants to test crash loops. The screenshot you have attached here is the statusIcon not disclosureIndicator. Are you sure you meant disclosureIndicator? \nTo fix the compressed statusIcon we can do statusIcon.setContentCompressionResistancePriority(.required, for: .horizontal). Yup. I like this a lot better . this is storing a strong reference to a webview. Looking at how we clear this webview I dont think it'll be an issue but just wanted to double check.. Awesome!. I think you need to set an estimated row height instead of a fixed row height. Instead try editing the constraints. This will probably not allow the menu to get larger for 2 line titles . I think you want to edit these lines \nswift\n        let padding = PhotonActionSheetCell.Padding\n        let topPadding = PhotonActionSheetCell.HorizontalPadding\n        stackView.snp.makeConstraints { make in\n            make.edges.equalTo(contentView).inset(UIEdgeInsets(top: topPadding, left: padding, bottom: topPadding, right: padding))\n        }\nediting the top/bottom padding here would shrink the cell.. If this only runs in debug I dont think we'll ever report this to Sentry. Sentry doesnt have API keys in debug. \n. hmm. I think you're right its an extra safety guard. Should the entire presentEmailComposerWithLogs be deleted?. We should move this into its own method just to keep the appDelegate more readable. . probably better to move this into its own method to keep delegate cleaner. we aren't using UIColor.lightText anymore?. When you run carthage it might update this file but we should make sure that the changes are not commited in git. unless we are consciously updating the dependencies. Could you please remove changes to this file? . Woohoo! thanks for fixing these strings. adding a default value here will simplify cases where bold is not needed. bold: Bool = false . thanks for fixing my spelling mistake \ud83d\ude05. remove the commented out part please. spacing between the symbols. UIConstants.SnackbarButtonHeight - 2 * UIConstants.DefaultPadding. How is this handled in older iOS versions? If we dont need to do anything for those we can remove the else statement. We can just remove the comments here. No need to leave this in. All this was simply moved from the top to the bottom of the file.. I think there is too much logic being put into this configure method now. I think its a perfect time to refactor this. \nCreating a new type for the different image styles will help clean up the logic \npublic enum PhotonActionSheetCellImageType {\n    case ProfileImage\n    case TabsButton\n    case Image\n}\nThis could be added to PhotonActionSheetItem as iconType. We can have .Image be the default type.\nFurther I think creating a configureAccessory and configureImage will help split up this logic. This menu started out so simple and its grown so much that its becoming hard to read.\n. This is a great idea of moving it into TabManager. However I think we should track which tab was last selected. If a user switches to private mode and then switches back it should go to the same tab they were on. . Every Settings VC inherits from SettingsTableViewController. Which makes it easier to create settings tables like this. I think the main thing it does well is prevent if/else code in cellforItem and didSelectCell. Is there a reason why we arent using SettingsTableViewController here?. I think it would be better if we didnt reach into the AppDelegate like this. How about firing off a notification and having BVC listen for it. . If this was a simple static string I would. But we use the appVersion and locale to build this URL. I think it makes sense to just leave it here.. visibleCells is an array of cells on the collectionview. and then this map just looks for the indexpath of those cells. Dont see this crashing.. Don't forget to remove the print statements. Not sure if there should be a _ to make it func autocompletePasteAndGo(_ autocompleteTextField: AutocompleteTextField). @objc should not have a space. The CI menitoned that there shouldnt be a space between AutocompleteTextField and the :. HomePage shouldnt be an option if it can't be set. . I think this can just be openBlankNewTab(focusLocationField: false, isPrivate: tab.isPrivate). The property on UIViewController is previewActionItems. Not previewActions I'm not sure how this ever worked. But it must have. The initial commit on this file uses previewActions \ud83e\udd37\u200d\u2642\ufe0f . We should be able to just add the tabButton to the view hierarchy without having to turn it into an image. Similar to how the syncButton works.. The default type for iconType should be image as I think we use that the most.. if profile is set in init. I dont think this needs to be !. we have a helper UIImage.templateImageNamed(\"emptySync\") . The problem is probably that we are calling openBlankNewTab which will also load the home panels. . If instead, We could modify submitSearchText and create a new searchURLForText. This would return a new URL and could then be used in openURLInNewTab(URL.... call. tabDisplayManager.reloadData() instead. We dont want people to call removeTab() anymore. Should it be removed?. Thanks for removing this! This was done in the old Obj-C style and was never updated!. Much simpler to understand!. can we safely unwrap tabs[0] here in a more swift like manner?. Commenting this line out is what caused this regression. NSKeyedUnarchiver for a long time has had decodingFailurePolicy which I think we set. I think its safe to remove this try catch. missed a print statement. This try catch can also be removed. We havent seen a crash here in a long time. Use the simpler tabManager.addTab(flushToDisk: false, zombie: true, isPrivate: savedTab.isPrivate). Instead of having everything in the loop here. Can the configuring of a new tab be a  method onSavedTab\nsavedTab.configureSavedTabUsing(tab). This doesnt need to be a force unwrap I think. . Can we make store private? \nI see some parts of the app referencing  isRestoring. we could make that a computed property on tabManager for those cases. . Im not sure we use this kind of style anywhere. To be more consistent we should have it on the same line. (I think there are a few places where this happens). We shouldnt need this assert. Should be a localized string. Please add the string to Strings.swift. should be an else if. The NSlocalizedStrings should be in Strings.swift. This entire block is very similar to getAllWebsiteData can we just call getAllWebsiteData() here?. We dont really need a TabTrayController. On the iPad we were actually creating a TabTray and destroying it every time we created a new tab. I think initial we had the assumption that the TabTray is always around (hence the force unwrap on the property) but there is no need to always have a TabTray around.. Strings need to be moved into Strings.swift and then referenced here. . needs a localized string in Strings.swift. what happens in ios10?. These buttons need localized strings in Strings.swift. Needs a localized string. Move the method outside of the didSelectRowAt it'll make it cleaner to understand. Nice \ud83d\ude04 . Moving this method outside of didSelectRowAt will clean this up nicely. it moved up a line. Hard to see without looking at the line numbers. We are disabling drag and drop in the release right now. so defaulting to false. if we set it to true we would end up turning it on for more people than we would want.. NSKeyedArchiver(forWritingWith: tabStateData) is deprecated. I think this is a perfect time to update this.  Here is a quick stackoverflow guide on how to move to the newer format https://stackoverflow.com/questions/51372551/how-to-replace-nskeyedarchivers-initializer-initforwritingwith-in-ios-12-to. we need isRestoring here otherwise the delegates (TabDisplayManager) will get too many notifications of new tabs. Its best for the TabDisplayManager to be notified after all the tabs have been added once. I agree using the isRestoring flag here is kinda lame. Maybe add a notify property to addTab instead. . can this be simpler? Above we do asyncAfter(deadline: .now() + .milliseconds(100)) . This needs to be  self.tabManager.removeTabAndUpdateSelectedIndex(tab),\notherwise this patch is great!\n. If I'm not mistaken, the for loop here is not the same as the reduce on the left. Here we'll find the first tab that meets our condition and exit the loop. But what if there is another tab that is more recent later in the list? wouldn't we want that instead? . Didn't think that people would find it useful in search. But lets add it in anyways some might. This won\u2019t handle the case where the search result returns no tabs . why not just do self.dataStore = tabsToDisplay. This will probably be called more times than it should. Should we check if operations is empty before calling?. Ah. Didnt notice that. fair enough. this can be dropped now as we are ios 11+. Are the tests self contained? If so moving them into the same folder as the content blocking source would make sense.. willAddTab and willRemoveTab were only being used by TabDisplayManager. We can remove them completely. Also make sure to remove any tests that use them. my JS fu is a bit weak. But why the change here?. Sadly no. NLLanguage is only available ios12+. I see how this can be a problem. I'll add new metadata information about the language to PMP. That will be the best way to do this. . I'll push a new version of PMP once you have the chance to review . I think this would be simpler if therefreshControl check was moved into addRefreshControl() then you could simple do something like profile.hasSyncableAccount() ? addRefreshControl() : removeRefreshControl(). Then just do a guard check here before creating the control. (inherit)  is missing here. Is this on purpose?. The current default behaviour is to open the tab in the background and show the ButtonToast. Can this be ?? false instead. . The default value here should be changed here as well.. I'm pretty sure this is a valid change but for the sake of this PR can you please remove the changes to this file. . Needs to be a localized string. remove print. To Avoid confusion later we should rename the syncAndRecentlyClosed section. Maybe something like historyButtons or historyAccessories. Naming is hard \ud83d\ude22 . A enum here similar to the one used for the sections would be clearer. Instead of having to reference individual rows. I'm of the opinion of not using default unless that is the behavior we actually want. When the cases are written explicitly we'll get a compiler error when we add new cases. . These should be given a table. like the string above. HistoryPanel.ClearHistoryMenuTitle makes it easier for l10n if I'm not mistaken. . I cant make out what this method does by looking at the method name. Can this be made more descriptive? \nmaybe, setStyle(enabled: Bool, forButton: cell: UITableViewCell). This isnt a method that runs once (like the name setup implies). Can this be a bit more descriptive? Maybe replaceWebViewLongPress or something.. Can we add a \nswift\nguard self.gestureRecognizerWithDescriptionFragment(\"ContextMenuHelper\") == nil else {\n return\n}\nTo prevent this from running when we already have our gesture recognizer hooked up.. I think you can do a groupedSites.isEmpty instead of looking at the actual cells. Similar to how we setup the empty state.. Wouldn't an invalid dict object be handled by LoginRecord itself? Do we need to check these fields ourselves? . an isEmpty check is preferred instead of checking count == 0. Is this from Justin's patch. Was it merged on to your branch rather than rebased?. a good idea. but for now its best to leave this here because its pretty late in the l10n cycle.. I hacked this change into the last string export. So this should be okay \ud83d\ude09 . These colors arent 100% I think leaving them here for now is fine. I havent gotten dark theme colors for these buttons yet.. ",
    "tylerlacroix": "@sleroux I looked over this patch and I'm not sure I can integrate this code because it looks like my patch overlaps this code.  The bookmark table code has changed since this was written, and the UI is pretty much done in my patch.\n. Thanks Steph! I added the deinit, optional unwrapping, and I added a layoutIfNeeded() call to fix the animation because the PasscodePane is a UIView so it doesn't have viewDidAppear or viewWillDisappear.\n\n. Thanks Steph!  I added the changes and added RTL \n\n. Okay, it should be rebased :)\n. It should be good for a second pass.  I rebased to master to fix the string errors and checked the multi-line toast and it will fit the label like so:\n\n. It should be rebased now\n. Hehehe git conflicts :P okay it should be rebased!\n. Yeah, it was crashing every time I put my device to sleep in the login screen. Is it the \"NSConcreteNotification unrecognized...\" crash you're seeing?\n. Yeah that crash was a weird one, it looked like when it was calling loadLogins(query: String? = nil) it tries to pass an NSNotification in the parameter as a String and crashes.  Should be fixed in this patch though :) \n. Okay, I removed it :)\n. Okay, it should be ready for a second look. I'll fix the BlurWrapper stuff once I get it sorted out :)\n. Actually, I was thinking it might be better to change topTabsViewController to an optional and only initiate it if it's iPad? What do you think?\n. What do you think of that? I think an optional would help reduce memory for iPhones because it wouldn't have to initiate it unless it's on an iPad.\n. This change reduces the total app memory of an iPad with 20 tabs from 301 MB -> 147.6 MB\n. Some screenshots of top tabs in action! \n\n\n\n. I'll look into that UI bug!\n. Whoops, sorry, it looks like when I refactored the tabsButton into the TabTrayButtonExtensions I removed the addTaget.  My bad, the tab button should work now.\n. LGTM\n. What I found is that the reason why it crashes is when the toptabsviewcontroller has the wrong style (isPrivate) is will load the wrong tabs.  So say the toptabsviewcontroller has the normal style, but the selected tab is private, it loads the normal tabs in the collection view, then when the new tab button is pressed, it will call the insertItemsAtIndexPaths to tell the collection view that one more cell is added, but when it creates the tab, it will add it with the same isPrivate as the selected tab. So it crashes because it thought an extra cell was added to the dataSource but it wasn't because it's loading the wrong style. \n. This should also be good for another look! :)\n. Okay it should be rebased! :)\n. Thanks Steph! This should be good for a second look over :)\n. Thank you Steph for looking it over! I'll go through the corrections and add the other test cases! :)\n. I added the 4 other test cases, and fixed some nits, it should be good for a second pass :)\n. Okay thanks!  I made the last nit fix, it should be good to merge! :)\n. Okay thanks! Should be good for a second look! :)\n. When the .Loading is returned, it provides no details about the state of the UI. The isPrivate will default to false even when in private mode. Correct me if I'm wrong but I believe .Loading should only be a last resort. :)\n. fluffyemily: Thanks! Yeah, I can confirm that bug 1281403 is still fixed :)\n. Looking good, I love the purple background on the private mode button. However I have a few thoughts.\n- The background in normal mode is very light. I would check with tecgirl but it no longer matches the doc https://docs.google.com/document/d/1fSkzdh-gqmsP0RPRmA1J8N95znt-7Rn9msCYY5rQWpg/edit (I personally prefer the darker background in the doc)\n- Since both the tab number and private mode buttons are purple in private mode, it may be worth changing the plus too. (Maybe not)\nAlso a few little bugs\n1. When closing the last tab in normal mode, the private mode button flashes purple.\n2. When switching to private for the first time there is a silver outline on the tab when switching to private mode for the first time.\n3. There is a squared block when creating a new tab.\n[1]\n\n[2] \n\n[3] \n\n. @varkor This is looking amazing! Great job! Yep it looks like the 2 bugs are fixed. :)  As for the last one, it seems like it happens when I switch in and out of private then open a new tab\n\n. @varkor Perfect! Thanks, I can confirm all the bugs are fixed! LTGM! :)\n. From my investigation, it looks like when the new tabs are opened quickly, a new tab can be created before the animation is completed.  This can cause a \"floating\" HomePanelViewController [1], because it sets self.homePanelController to nil after the animation, but the self.homePanelController may no longer be the correct homePanel.\n[1]\n\n. Hey @varkor do you have steps to reproduce the \"Occasional crashes due to index == -1 issues\"?\n. The reason why I added the gesture to the parent, and why I added the view/view controller directly was to preserve the ability to use the menu UI with the long back list showing, for example if a user holds the back button, then taps the back button. I think presenting the view controller would lose this, but I can fix it if that's not the desired behavior :)\n. Oh I see what you mean. From the mock-ups it looked like it slid from behind the menu, maybe I'm mistaken.\n. Oh, smart!\n. I think this layoutIfNeeded is needed for the animation because it's creating the constraints and then animating the height in the same call.  Otherwise it seems to animate from the origin (0,0,0,0) to open, and ignore the \"snp_makeConstraints\".\n. Okay!\n. Should I add \".Label\" to them all since they are all labels?\n. Okay thanks!\n. This call is needed because the cells draw the connecting lines in the drawRect but sometimes if the cell is reused it won't redraw the correct line (whether it should connect up, down or both ways).\n. This I also found strange, but it seems the transitioningDelegate is only a weak property, so the transitioningDelegate property is immediately set to nil if the object is not held. I saw this in MenuViewController so I thought I should keep the style of holding transitioning delegates the same.\n. Yeah, this is needed, the OverCurrentContext style doesn't dismiss when touched outside automatically.\n. Oh true! I'll fix that :)\n. I tried using takePendingScreenshot but it didn't work. The only issue with takePendingScreenshot is that it calls the takeScreenshot which then calls \"drawViewHierarchyInRect\", and that method can only take a screenshot of views that are currently being rendered on the screen.  So if we add a new tab in the background, it's not being rendered so the screenshot will be white until we click on the tab (and the view is rendered).  What this does is just adds the views just long enough to render and take a screen shot, then remove it.\n. Okay! I'll test removing those lines! :)\n. Oh true! I didn't think of that, I'll fix it :)\n. That makes sense! Where should I add the extension? TabsTray, TopTabs, or in a new file?\n. My bad!  I moved the \"tab.favicons.append(fav)\" up because I thought we were going to add it anyways, but I didn't realize we check if it's empty.  I'll move it back down and make the async call the last method.\n. Thank you so much for helping me with this deferred stuff! It can be quite confusing at times.\n. I renamed it and separated the top tabs layout into a new file, does that make more sense or should I split up the VC file further? :)\n. Okay, so I should remove this and add the string to the TopTabsViewController file?\n. Okay, I can just use the string from AppMenuConfiguration.NewTabTitleString\n. I did initially try that, but the problem is then it will show the home button because the .hidden of homePageButton is the inverse of the .hidden for shareButton\n\n. Since the collectionView.reloadData() is also called in viewDidAppear, it might be better to delete second reloadData() in viewDidAppear to reduce the extra reloading.\n. You can also move the scrollToCurrentTab here too (after the reloadData). :)\n. Yeah, sorry, I should have said why I changed that. The displayURL is nil until the tab is fully loaded, so it will show \"New Tab\" for a few seconds until the webpage is loaded. But the webView.URL is available immediately so it will show the URL in the tab title until it loads then it's replaced with the title of the webpage.\n. Yeah, true, I think I need to rename this to make more sense.  Would topTabsDidTogglePrivateMode make more sense? :)\n. I think \"tab\" was a poor choice for a parameter name, I think \"cachedTab\" would make more sense?  So I check if there's a cached tab passed is the function, if not then I select the most recent normal/private tab to select.\n. I'll look into those cases! :)\n. So the reason I initially used the 0 duration animation block was because the collectionview must be fully finished loading before scrollRectToVisible can be called. But I looked into it further and scrollToItemAtIndexPath can be called directly after reloadData() so I switched it to that :)\n. if the normal tab mode (with a bunch of tabs) was scrolled all the way to the right and then say private mode has 2 tabs, the scrollRectToVisible would look really odd like: \n\nBut switching it to scrollToItemAtIndexPath also fixed this issue so I removed it :)\n. ",
    "rfk": "\ndoes \"13 13 44\" seem like a reasonable alternative to \"131 344\" to you?\n\nyes, \"XX XX XX\" is a pretty reasonable presentation for that sort of number \n. > should it be coming from the server as a string instead of a number?\nI agree, this is a server bug, it should be coming back as a string.\n. Yep, server-side fix is the right approach here I think.. The issuer value you're specifying here, ultimately winds up in the \"iss\" field of the assertion payload here:\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/FxA/FxA/JSONWebTokenUtils.m#L69\nI don't think there's any component of the system that looks for such \"iss\" field in the assertion.  Whatever value you specify here is going to be completely ignored, and I'd recommend removing it entirely to reduce potential future confusion.\n(We do have a lot of things that check the \"iss\" field on the underlying certificate, but that's set by the server when it signs your public key and the client has no control over it.). For context, you can see the logic for non-sync-related keys here: https://github.com/mozilla/fxa-crypto-relier/blob/master/src/deriver/ScopedKeys.js#L32. s/CCHmacAlgorithm/CCAlgorithm/ as well, IIUC.. ",
    "zixun": "+1 +1 +1 +1\n. ",
    "utopianism": "\ud83d\udc31 +1\nthough i had a foreign account.\n. ",
    "stormhouse": "up\n. ",
    "garvankeeley": "Perhaps this is no longer happening and can be closed?\n. Will do. Currently it searches for an unused port.\n. No longer getting this.\n. No longer getting this, closing\n. Great tip Stefan! These are the top bad guys:\n```\n60237.7ms Client/Frontend/Browser/TabTrayController.swift:723:10    @objc dynamic func accessibilityScrollStatusForScrollView(scrollView: UIScrollView) -> String?\n55905.3ms Client/Frontend/Browser/TabTrayController.swift:723:10    @objc dynamic func accessibilityScrollStatusForScrollView(scrollView: UIScrollView) -> String?\n7178.8ms Storage/SQL/SQLiteLogins.swift:392:18  private func cloneMirrorToOverlay(whereClause whereClause: String?, args: Args?) -> Deferred>\n6186.3ms Storage/SQL/SQLiteLogins.swift:392:18  private func cloneMirrorToOverlay(whereClause whereClause: String?, args: Args?) -> Deferred>\n4249.7ms     Storage/SQL/BrowserTable.swift:521:10  func drop(db: SQLiteDBConnection) -> Bool\n3190.9ms Storage/SQL/BrowserTable.swift:521:10  func drop(db: SQLiteDBConnection) -> Bool\n1004.4ms     Sync/Synchronizers/LoginsSynchronizer.swift:28:6   func makeLoginRecord(login: Login) -> Record\n```\n. Just noticed comment you will be changing SQLiteLogins, I can remove that one\n. Is there any plans for more work on this? What was the problem with the PR?\n. Perhaps someone from the project can comment, but I think for a big action like this, there needs to be a bugzilla bug instead of github-only. \nIf you look at https://github.com/brave/browser-ios/tree/master/Client/Frontend/Browser/BrowserViewController I did the BVC split there, but the codebase is diverged from this one. \nThese are the categories I followed:\nBrowserViewController+BrowserDelegate.swift   \n    BrowserViewController+ContextMenuHelperDelegate.swift \n    BrowserViewController+FindInPage.swift \n    BrowserViewController+KeyCommands.swift \n    BrowserViewController+ReaderModeDelegate.swift\n    BrowserViewController+TabManagerDelegate.swift \n    BrowserViewController+ToolbarAndUrlbarDelegate.swift \n    BrowserViewController+WKNavigationDelegate.swift \n    BrowserViewController+WKUIDelegate.swift\nYes to splitting up commits because that (nearly) always makes reviews easier (when I don't it is because I am too lazy to do the extra work required for that).\n. Can confirm the performance of this on iPhone 5C makes it difficult to use on various sites.. This comment explains how Chrome iOS does this much better, and the code is open-source:\nhttps://github.com/brave/browser-ios/issues/421#issuecomment-319779423\n. Filed: https://bugzilla.mozilla.org/show_bug.cgi?id=1386797. I think we close bugs here once they are filed in bugzilla, so closing. Ping for our team to follow-up on this, it is months old, we should take action. Ha! Thanks, Brave is on an old fork of fx iOS, but I thought that particular code was up-to-date, I guess not.. Ping for team to take some action on this as it has been sitting here for months. I am not familiar with this issue myself to take action.. Ping to our team to take action if someone is familiar with this issue.\nI see zero issue with landing this, it is just an added if let = which looks to me. . This PR is quite old we should take some action. What bug is this fixing? . Thanks for the info! seems like a win to have this fixed.\n(edit: I should just check the bugzilla bugs, I glazed over that). We should take some action on this PR, has been sitting.\nBug is https://bugzilla.mozilla.org/show_bug.cgi?id=1346582. thanks, i'll assign it to myself. I applied this test in this patch XCUITests/HomePageUITest.swift to master, in order to see the current bug, however the tests pass, suggesting this was fixed on master. Can you confirm this fixed already on master?. Closing as per the comment here that this is no longer happening:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1343629#c4. Seems to be ok now, closing.. This PR has been sitting we should take some action on it. I don't know enough about our search engine loader to understand the context of the first comment. I would need a description like 'the current code does XXX and is suboptimal because of YYY, and the patch is better because ZZZ'. Or if someone on the team who knows this area of the code could move this forward that would be even better.. There isn't anything we can do here. The JS engine is completely in Apple's domain. . Thanks for the fix!. @AniOSDeveloper and @BinBear can you paste the output of running ./bootstrap.sh ?\n(I am looking for the output of the carthage build). This is very very cool. We are working on hide images again soon because of new ios 11 APIs https://bugzilla.mozilla.org/show_bug.cgi?id=1392295. . Ping to take action, thanks!. i see this error when update signing happens\n\n. Nice! I think this is ready to land. @farhanpatel the swiftlint I assume isn't actually manually added by you and is automated?\nI didn't touch line 688, what is recommended for lint errors on lines not touched by the patch?. Thanks, good to know. First patch landing, thanks for the review!. I updated the UI test case for this, I'll need to ensure that gets run. The UITests are passing: https://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5970db59da3e440001a8c6ca#tests\n. https://www.w3.org/2005/10/howto-favicon\nsites  often ignore w3c guidelines, but it appears to specify within HEAD tags . Agreed, lets go with this. @farhanpatel r?. Instead of a snackbar static func 'create...' that returns a snackbar, I did it as a static 'show..' function as it internally has the 'hide/show on the tab' logic.. BTW, I'll fix that swiftlint error reported above. A change to pull some extensions out of BVC just landed on master which will cause merge conflicts, sorry about the hassle. Maybe it is pre-vacation paranoia, but I am double-checking the UITests I touched this week are reliably passing, the full run is green locally so to remind myself all is well:\n\n. Closing PR as it is linked from the github issue so we can get to it from there.. @npark-mozilla can you close if not needed in the open PR list?. Up to you, an extra PR in the list is not a big deal, I am just pinging all these open PRs for people to close them if they can. If the list is small we can audit it at a glance for things we are failing to address (we have some contrib PRs that seem to fall-through-the-cracks).  Fetching EarlGrey\nA shell task (/usr/bin/env git fetch --prune --quiet https://google/EarlGrey refs/tags/:refs/tags/ +refs/heads/:refs/heads/* (launched in /Users/gkeeley/Library/Caches/org.carthage.CarthageKit/dependencies/EarlGrey)) failed with exit code 128:\nfatal: unable to access 'https://google/EarlGrey/': Could not resolve host: google\n. @st3fan can be closed?. This is getting old, can we take action?. +1, if there are some candidate methods to look at, we should do that first instead of hacking this in. Nice! I would see no focus set unless delayed async, maybe the UI code that was stealing focus has been changed/removed.? It would even better if we could figure out how to automate the test for this so if it gets fixed it doesn't get broken accidentally.. Removing the set focus delay might break https://bugzilla.mozilla.org/show_bug.cgi?id=1345887. @farhanpatel  Can you look at that test crash? Is in image-related code. Can you put those manual test above into the automated tests?\nI can make time today/tomorrow to do that if you prefer. lgtm! \n/me TIL about plistbuddy command :). closing to cleanup PR list please re-open if you need it. Can this be closed and re-opened if needed?. @st3fan I can't land this because the 'squash and merge' doesn't enable, I am below some level of permissions I think. Can I have the required access to click that button without status checks completing?. Oops, just got reviewed! Sorry, I was browsing the PR list and assumed this was old, then saw the button disabled, and well, I should just eat my dinner...\n. I just came across this code, the event .userSharedWebpage is not correct here. This event is 'user tapped Action/Share button', we have lots of functions in there (show desktop site, find in page, fill password, etc). thanks! good idea and code looks good, let me check if anything else is needed on this before landing (I am looking at the QR code feature for the first time now).\nI don't know if there is any issue with the camera menu item always showing. Do you know when the app asks for camera permission? Perhaps if the user has said no to camera, and we show the option in the menu that could be a problem? . I gather we can only have 4 items in that menu, I'll ping UX to see what they have planned for that menu. Here is what it looks like (thanks Stefan!)\n\n. I got a crash on simulator (I don't have a 3d touch device to try this out). QR Code is guarded from showing in the app hamburger menu using a boolean hasVideoCaptureDevice. Not sure yet if we need extra guards here. Edit: this is as-designed in the code, if it is an annoyance for automated testing then we can file a follow-up issue.\n```\n1  0x000000010b971767 in closure #1 in QRCodeViewController.captureDevice.getter at /Users/garv/code/firefox-ios/Client/Frontend/Browser/QRCodeViewController.swift:31\n2  0x000000010b9651cf in QRCodeViewController.captureDevice.getter at /Users/garv/code/firefox-ios/Client/Frontend/Browser/QRCodeViewController.swift:32\n3  0x000000010b9668dd in QRCodeViewController.viewDidLoad() at /Users/garv/code/firefox-ios/Client/Frontend/Browser/QRCodeViewController.swift:65\n``. needs r+ on github too. Can you try:carthage bootstrap --platform ios`\nThat will run carthage again, maybe that package will download next time. \nI'll look at improving the bootstrap.sh script.. bootstrap.sh is updated on master so you can re-run the script (vs. only allowing the user to run the carthage step once)\nfixed by 7677121. Closing, if you are still stuck please re-open and I'll help out.\nI think it was a network error running the bootstrap script, which we had set to skip a required step on re-run. Now re-run should work. Looks like a networking error, were you able to try again later?. iPhone SE screenshot of settings (The horizontal line above Block Lists shouldn't be there, will remove it)\n\n. I failed to mentioned a key point about content blocker init(), there are 2 cases:\n1. cold boot: at the end of the init it notifies any tabs if they should reload\n2. subsequent new tabs created: installing the content blocker is async (as required by underlying API), but is assumed to happen near-synchronously as it is just a key-value lookup, and by the time a load request begins the content blocker is installed. \nI could install a bunch of notifications to ensure that if the content blocker is not installed by the time loading starts a reload is triggered, but I don't want to complicate the code if this scenario is near-impossible. As part of my follow-up perf testing bug I filed I'll confirm this is nearly sync performance-wise (it is in simulator when I checked, but that is a poor place to check this)..  Sorry, the completed+=1 was me being too lazy to use a DispatchGroup, I'll check with you about Deferred vs. completion block syntax and see what changes are needed\u2026. Here is the follow up for more Deferred work: https://bugzilla.mozilla.org/show_bug.cgi?id=1391794. @farhan I force-pushed the nits into the 'review updates' patch. (I think that makes all the comments related to those collapse so you can see them addressed). Thanks for your deep-dive on this patch BTW!. I see no screenshot for the top-level settings screen, and I don't see it added in this bug. Footer fits text:\n\n. 2x length pseudolanguage test:\n\n. regular view on 5s:\n\n. iPad Pro:\n\n. LGTM, the xcode project changes are too hard to really understand the implications, they all look safe to me.. Me: don't forget to uplift to 9.x. Closing for now, as the work is being split up, QA is doing front-end tests for this (yay!), as SimplePageServer is working well to verify blocking. I'll fill in the remaining white-box stuff.\n. @npark-mozilla excuse the drive-by review, I got excited to see this :), I am not 100% confident with my XCUITest skillz so please double-check my review as these are the trickiest tests IMO.. @npark-mozilla you pinged me about testing the rules are applied. Just mentioning I am putting together some methods, and deciding on the easiest way.. We could do something like this: http://garvankeeley.github.io/web/tracking-protection-test.html\nThis loads a stable blocking rule (both because the rule is unlikely to change, and the resource we load -the favicon- is likely to always be available).\nThe source for this page does:\nwindow.onload = () => {\n            testImage('http://ymail.com/favicon.ico');\n }\nAnd testImage function will show an alert if the image doesn't load. I assumed an alert is an easy to thing to check for in the UITest, if not, we can have some other action happen.. BTW, I am working on the test cases for this. Targeting EOD tomorrow for getting the PR up for those.. Closing , this is in fact ALL iOS 11 table views have this bug. Big sad clown face.. Thanks for the review. Curious for future, the term 'higher order setting', what is that? I find enum args to functions my fav readability tweak, is it that? . > \n\nIt's tempting to follow the syllogism: if we remove force-unwraps, then we don't get crashes; if we don't get crashes, then things are good, ergo we should eliminate all force-unwraps!\n\nCode can be bad in many ways without crashing. The idea is not to push the onus of finding bad code onto the user. Swift has a debateably-wonderful property of keeping crash rates to a minimum that we can take greater advantage of, albeit at the cost of the app misbehaving. It is up to the developers to find bugs, make code defensive, build the test cases against regressions.. Running the patch I see these cut off horizontally (I didn't check without the patch, I just was running this to check)\n\n\n. On new tab on 5c the profiler is no longer showing DB work on the main thread*** when I press new tab, is now instant, previously there was a noticeable delay.\n* when viewing for heavy paths; it is all UIView and collection view work on the main thread now, which is fine.. We will need a follow-up bug, now the AS home panel is blank for 5 seconds on first show. Which I prefer to locking up the app for 5 seconds.. @jhugman I intended only to return public.url for non-pw-manager case, and accidentally found that password manager extensions kept working. Any suggestions as to what I should look into for this?. Landing as band-aid fix. 1Password won't show using this, we will work on that next.. Thanks Justin, you are 100% right: https://developer.apple.com/documentation/uikit/uiactivityitemsource/1620453-activityviewcontroller?changes=latest_minor\nAnd yet Xcode will refuse to agree (signature mismatch).\nI rebased this on top of our dropped-9.0 patch, and still I get a compiler warning that the function signature doesn't match the SDK.\nAs you suggested elsewhere, we have a minversion on some build setting too low. I'll dig around for that.. \n. \n. Almost done, need SupportUtils.URLForTopic(\"sync-status-ios\"). \n\n. Works for me:\n\n. Need to find out if more work is needed here before requesting review.. I'll use settings \ud83d\udc4d . Decided to do a bigger patch for this along with upgrade of Telemetry lib. I rely heavily on the blame view as a newbie on the project, so I am concerned this complicates that unecessarily. Agreed we should avoid extra spaces in patches, disagree that we should be concerned about it in old code though.. I wish we could combine this with a higher value cleanup, not sure what would be offhand.\nIs old whitespace a problem if we have that feature to only lint the diffs?\nEdit: I commented before actually looking at the diffs ;), nearly all of these changes aren't going to really impact the default blame view in Xcode (mostly blank line, or single line changes rather than entire blocks of code).  tldr: didn't like at first glance, changed mind, lgtm!. This looks cool. Yay to no more compact tab setting.\n1) In the tab tray, when I delete a tab, the selected tab isn't highlighted?\n2) more minor UI nit: in the tab tray, when I create a tab, two tabs are briefly highlighted.. We could land and do follow up patches, I'll finish code-level review now.... changing this to not automatically reload when toggled, patch arriving in a few mins.... @justindarc PR updated, added test case also.. Code looks ok, the logic is odd-looking because the underlying progress code is non standard (but looks awesome!), and we are fixing the progress bar to report a value a bit more like a standard progress bar and we can update this again when that happens. For now, we just need our tests to run \ud83d\udc4d . My thumb thanks you :). This site has a favicon: https://daringfireball.net/favicon.ico. FYI, the 'compiled' query in the failing case looks like this:\n`SUBQUERY ( extensionItems, , SUBQUERY ( , , ANY  UTI-CONFORMS-TO \"public.url\").@count == 1 ).@count == 1`\nThose empty parameters look like the problem.\nI found an older Client.app in the build folder, and it looks like this is what a working compiled PlugIns/<extension>/Info.plist would have:\nSUBQUERY ( extensionItems, $extensionItem, SUBQUERY ( $extensionItem.attachments, $attachment, ANY $attachment.registeredTypeIdentifiers UTI-CONFORMS-TO \"public.url\").@count > 0 ).@count == 1\nThe former instance is Xcode 9 release, the latter I believe was compiled on Xcode 9 GM, which leads me to believe there was a change between GM and release.. @st3fan can we land on master and ask QA to run through this extensively?\nedit: just now saw your comment to land and then QA it, sgtm.. > This works a lot better than before but on http://m.imgur.com/gallery I'm noticing the urlbar disappear/reappear as the site loads new content.\nI am on master ATM without the changes, imgur looks pretty broken, the inifinite scroll loader happens on a very short swipe and the toolbars keep appearing and disappearing. I think this is a separate bug (specifically related to our KVO for contentSize in the scroll controller).\n\nI really like Chrome's behavior of showing the urlbar as you scroll up without having to \"flick up\". But I think matching either Focus/Chrome exactly would be great.\n\nIf that is what we want, please file as a separate bug, it isn't related to this and should get more UX review as there seems to have been a lot of work (based on the number of iterations in the history of this file) put into getting the current behaviour. \nI agree with that suggestion, I prefer simpler show/hide behaviour for the toolbar as a user.\n. I want to keep OHHTTPStubs, I am on a dev branch just trying to get BB to pass, once it does, I'll add it back in.. Is there enough here we can land for 9.x? I am going to start building up the stand-alone test for this (agreed OHHTTPStubs is great for this).. Landing, next follow up (to add back defaultnewtab measurement) is here:\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1405079. r+, sorry for the pedanticness, my eye is 100% less twitchy reading it now :). iOS 10: screenshot:\n\n. Agreed on above points, I'll take the others you mentioned out also.. Good to know we can't just check iPad vs. iPhone in these UI cases. . It was just based on a guess that something might not work, 100% of the time I have tried to do something based on that cancel flag in the animation completion block it hasn\u2019t worked quite right me. I will count this as 101% now ;).\n\nOn Oct 10, 2017, at 2:54 PM, Farhan Patel notifications@github.com wrote:\n@garvankeeley https://github.com/garvankeeley You were right about canceled animations. I had accounted for making sure the icon looked right after a canceled animation but forgot about what would happen after you tapped it. \ud83e\udd26\u200d\u2642\ufe0f\n\n\n. merging on master and uplifting to v10.x for next beta. I think this is a great idea. I already use iOS night shift, so the current night mode didn't seem like it offered much over that feature.\nI am seeing images inverted though, is this ok?\n\n. Is nytimes main page, I'll look at those images and see what they are. <div class=\"video-promo-small-container\" style=\"background-image: url('https://static01.nyt.com/images/2017/10/18/movies/18weinstien-paltrow/18weinstien-paltrow-filmstrip.jpg');\">\nYeah, background image. These are on video preview images.. Can we remove entirely?\ndeinit { NotificationCenter.default.removeObserver(self,... is no longer needed. This is automatic on deinit as of iOS 9.\nhttps://developer.apple.com/documentation/foundation/notificationcenter/1413994-removeobserver. Not sure, I am trying to find out why that bug is marked as a security issue (and thus locked for viewing). In the meantime, I just noticed a merge conflict, can you resolve that and update the patch?. I updated the PR title for that new bug you filed.. we have a large beta population now, I think this is a good approach. Oops, I clicked the github issue button on the BB feedback, closing. Updated PR to use description arg, looks ok now?. \n. @farhanpatel ready for review again, thanks!. Can you r+ in bugzilla, and I'll file a follow up bug for the more general solution by monitoring constraint change?. Crash due to recursive locking at this line\n https://github.com/mozilla-mobile/firefox-ios/blob/a7bed48a3ce4b9332e44c740021d11ba6d13d331/Account/FirefoxAccount.swift#L397. Closing my PR to hot-potato this bug over to Farhan, he will have a better solution in fewer iterations than my bull-in-china-shop explorations in this area of the code. Can you attach a screenshot? (I am not sure what constitutes the 'header' visually in the tab cell). Screenshots on iPhone 5:\nLong press to show option to disable\n\nFollowed by another long press to enable. If you look behind the cancel button a FedEx ad is showing:\n\n. Need auto screenshots for this!. I changed the screenshots tests to do:\n```\n    func test13ReloadButtonContextMenu() {\n        // TP on for first screenshots\n        navigator.goto(TrackingProtectionSettings)\n        app.tables.staticTexts[\"Always On\"].tap()\n        navigator.goto(BrowserTab)\n    navigator.openURL(loremIpsumURL)\n    navigator.toggleOff(userState.requestDesktopSite, withAction: Action.ToggleRequestDesktopSite)\n    navigator.goto(ReloadLongPressMenu)\n    snapshot(\"13ContextMenuReloadButton-01\")\n    navigator.toggleOn(userState.requestDesktopSite, withAction: Action.ToggleRequestDesktopSite)\n    navigator.goto(ReloadLongPressMenu)\n    snapshot(\"13ContextMenuReloadButton-02\", waitForLoadingIndicator: false)\n\n    // TP off for screenshot\n    app.sheets.buttons[\"Reload Without Tracking Protection\"].tap()\n    navigator.goto(ReloadLongPressMenu) // HELP! this doesn't re-show the menu\n    snapshot(\"13ContextMenuReloadButton-03\", waitForLoadingIndicator: false)\n}\n\n```\n@jhugman the line that fails is the final navigator.goto(ReloadLongPressMenu), no idea why it won't show the menu.\nI assume I am breaking the graph by doing app action rather than navigator action and the position in the graph has changed.. Landing, tests will follow in https://bugzilla.mozilla.org/show_bug.cgi?id=1417659\nThe testing patch is turning out to be substantial.. This is a better place for toolbar show, and should land, but it doesn't fix the reported bug (the toolbar show is still happening the instant a link is clicked and moves the page down so the tapped link moves).\nPossible fixes:\n- adjusting the content offset y, subtracting the height of the toolbar, at the same time the toolbar shows. Thus keeping the link in the same position on the screen. \n- detect first render of webview for new document, at that point show the toolbar. This would be the most robust because messing with scrollview offsets could trigger other bugs. Detecting this is problematic AFAIK.\nCan I r+ and we keep the bug open?. Current jumpiness: \n\n. Fixed: \n\n. Unless there is a decent amount of testing time for 10.2 (I think it might go out quickly) I think this should be 10.3. @cpeterso we use bugzilla, I recommend filing there for traction on this issue.. Thanks for review, hopefully I get to do more screengraph stuff to keep this knowledge fresh.\nI think I addressed all comments in last push (could you take a look quickly?), I just need to clarify https://github.com/mozilla-mobile/firefox-ios/pull/3461#discussion_r151767646. Thanks for feedback! I'll churn on this idea some more on my branch. I am going to try pull out a few things into separate PRs. I have a different minimal patch as suggested, closing this one. Closing as this was mostly to demonstrate this API. looks much better, I like the 'ensureMainThread' bits and the added structs to namespace the string constants . What is the startup cost of this code? It all sits on app finish launch, but seems like it could be delayed if there is a cost.. @farhanpatel any idea if this fixes something :) . I don't want to change that as I think WKWebView opacity has an effect on the scrolling render behaviour, when I turned on the .lightGray (aside: the current bg color is not .lightGray) with the changed opacity, in normal browsing the screen flashing during scrolling was more frequent.. Updated. Nice side-effect is that anyone who tries to change the webview bgcolor will see it is in use for night mode. \nAlthough I suspect that applying a non-default bgcolor introduces a bit of scroll flashing in non-night mode, I should mention I think it is no worse in night mode in my testing (perhaps there is similarity in the effect of setting the night mode CSS bg color and the the wkwebview.bgcolor, but their effect is not additive).. Basically a lot of this patch can get dumped, the cancellation logic is useful, but any of the checks for 'isCancelled' are just added noise in the patch, and contribute little or nothing. \nNext up to look at in terms of what is blocking main, is the Cursor fulfillment.\nSo if a db query is active, the Cursor can't fill on the main thread and blocks typing.\nAs I mentioned elsewhere, image scaling shows up very heavily in my profiling, and removing that (just adding an immediate return from the image scale function) makes typing smoother on my devices.. @rnewman I am researching the effects of this patch today (and the history as to why the DB code was patched like this).. Superseded by https://github.com/mozilla-mobile/firefox-ios/pull/3524. Carthage is required to build, see the README section on building the code.. >want to avoidDispatchMain(TabEvent.post(.didGainFocus, for: tab) and then on the other side a consumer doing DispatchMain(onTabFocusupdateUI()) just to be safe.\nAgreed, but no need for threading considerations in this code. Off-main code is responsible for switching to main before calling other code; yes to DispatchQueue.main(SomeEventNotification) no to the other side having DispatchQueue.main dispatch (or needing assert(is main)).\nI assume at some point we had some off-main code accidentally calling client code as there is still assert(is main) around the place. Not a bad idea have some of that to ensure we catch accidental off-main code early. Although, I am not sure how we would be off-main unexpectedly. \nThings that might be off-main in client code: \n- DB callbacks, which should use uponQueue(.main)\n- Networking callbacks, which should be wrapped in DispatchQueue.main  (or use config on networking API to specify callback is on main thread)\n- anything else?. > receiver-chooses-thread-queue\nNot sure why this app would need it (i.e. it is UIKit-intensive), is there a use case you have in mind?. /me tears of joy for less DB noise in system trace. @rnewman r? on update https://github.com/mozilla-mobile/firefox-ios/pull/3524/commits/5044b4ecdd5488ec94d6a8c3d43895da81f6161b. Am rolling the PR https://github.com/mozilla-mobile/firefox-ios/pull/3525 into this one.. Thanks for this!\nThe Cartfile.resolved will need:\ngithub \"AgileBits/onepassword-app-extension\"  bcc4cc97fed9a6e73fa204f2e61138e353cb3ef7\nThis is is the SHA of the most recent commit on that branch (.resolved file is for reproducibility of builds).\n. I did some cleanup on 14d61a0. \nIs that clearer (less concept leakage) with a proper protocol?\nI changed the error state handling in SearchLoader and removed that confusing fallback call.\nI didn't want to get into too many changes on the search loader, it seemed like added risk when the bug is in the DB layer. For frecency access I want an interface that makes it clear to the developer that there are perf (and scope) considerations (either keep OptimizedFrecency around for repeated queries, or use it once for a standalone query).\nI am still looking over your comments, it is concerning that what I thought was a simple interface (i.e. if I want frecency, I call profile.history.getOptimizedFrecency()) is not coming across as such.. The last 2 commits are for the following changes:\nRename function to: getSites(whereURLContains:...), whereURLContains is non default param, thus the function will be unambiguous to the reader in all usages that it is for frecency with string filtering.\nCreate enum to encapsulate arguments to frecency to avoid conflicting args that can create bad SQL. The function is specialized to only 2 use cases, those uses should be unambiguous. Other usages are not safe and are barred.\nFix tests to be explicit as to whether they are testing frecency query for url filter or for top sites (the only 2 use cases for the function).. @rnewman addressed changes, and left comments where otherwise,\nt? thanks. 1) Yup, SearchLoader now set to nil when leaving search mode\n2) Follow-up filed: https://bugzilla.mozilla.org/show_bug.cgi?id=1431823\n3) I'll add notes to the bug to make sure QA hits that case\nThanks for the review, we might get this into a beta as early as today, and hopefully start getting immediate feedback from users.. To the reporters, please indicate if you have followed the advice above in https://github.com/mozilla-mobile/firefox-ios/issues/3559#issuecomment-359638438\nThis project will not build without following the build instructions.. BB error: value of type 'String' has no member 'endsWith' Shared/Extensions/NSURLExtensions.swift\nOdd, as we have a String.endsWith extension.. I pushed up a change for that build error, once this is green, I'll hit the merge button on this.. is now available on master. Oh wow, I missed a ton of .characters calls, new PR coming now.... Verified layout change with device rotation works ok.. > I dont think the save login prompt should show max width on the iPad.\nIt doesn't, what are you seeing?\n\nthe app store prompt doesnt go edge to edge on an iPhone 8+.\n\nDid it for you when you tried the patch?\n. Login prompt correct width with the patch:\n\n. iPhone 8+ correct size:\n\n. hmm, I think the animation looks odd now. I'll file a follow up, not sure it is my change exactly.. @justindarc PR updated . Note: I am pro force-unwrapping in testing-only setup code, so I am ignoring that sentry warning.\nIf it creates a hassle, I can workaround them.. BB error is false: Compile Error: /tmp/sandbox/workspace/Client/Frontend/Settings/AppSettingsOptions.swift:[820,71] binary operator '==' cannot be applied to operands of type 'LABiometryType' and '_'. Closing PR because I think these changes are already on master, please re-open if I am misunderstanding. Turning on UITests for this branch, fingers crossed..... I am going to be devious and land this without verifying the UITests are green on BB (they are locally!). We need this landed ASAP because we are actively building on top of this. Anyway, we will be doing more work on the TP tests this week AFAIK.. @farhanpatel is this cleaner: https://github.com/mozilla-mobile/firefox-ios/pull/3692/commits/4b00a7fa96ec4651e6314e721029323c424c4e17. Yeah, I suspected the rule wasn't right, but already had started looking at page load notifications for this and it looked a lot cleaner. That said, cleaner is in the eye of the beholder, so it would be good to decide if we want to keep this approach or go back to modify+reload content blocker lists. . This approach is so simple though: on page load check isWhitelisted(url) and turn on/off TP.\nI don't understand the benefit of the other approach (modify the 4 JSON files, reload, etc.). Is there a benefit to that approach I am not seeing?. Vaild points for sure, I think this could be argued either way, but clarity to the reader is paramount so I am switching back. \nLast thoughts on the matter:\n- that whitelisting this way behaved exactly like disabling (either through prefs or long-press reload), rather than whitelist being a special case of disabling, and theoretically could have different bugs. \n- assume content blocking has some perf hit (since Apple insists 32-bit devices are too slow to do it), it seemed better to not install the content blocker.\n- debugging by using our own whitelist on/off logic is much easier (just log or breakpoint the isWhitelisted() on page load). \nPlease note that the boolean check to see if TP is installed for a tab is still required:\nhttps://github.com/mozilla-mobile/firefox-ios/pull/3692/files#diff-43b4ed98af576b639d39b89f04cf389aR164\nAlthough the setup function that uses it (setupTabTrackingProtection(forUrl url: URL?)) no longer needs an URL argument and doesn't need to check isWhitelisted. \nThat function is called from various places (one-time init, prefs change, long-press change (other places in future?)) and needs that boolean guard.\n. Are the remaining changes: \n- change class to struct\n- change if () { return } to guard\nAnything else?. >800ms goes to 400ms with cnn.com (correcting my earlier post was probably loading a different site)\n\n. We don't offer that functionality. Change with this PR is the foreground screencap:\n\n. I am still trying to get through XCUITests run locally without failures. Some tests fail for reasons unrelated to this patch I think. Not sure, just trying to run and re-run to find actual broken tests by this change.. charging up the 5c to try this out.... InstructionsViewController.swift was moved so the build is failing for other extensions, will fix.. With long labels:\n\n. @farhanpatel ping for reviewing with latest changes.\n(i see i have 2 swift lint things to fix). @isabelrios FYI this would be another good test case to have when you have time, thanks!. I'll add a brew install rome step, thanks for mentioning that. 3 bugs in one, thanks for the fixes! If you can make those changes I'll get it landed right away.. I'll follow up the nits in https://bugzilla.mozilla.org/show_bug.cgi?id=1460864. No prob, the 12.0 release is coming soon so I wanted to get these in.. I think this will work ok (but BB's 'scheme' setup is a bit opaque to me). Because Rome is still guarded with a flag, I'll go ahead and land this and we will see how it works.. PR updated with new coolness!. Can you add tab.webView?.configuration.userContentController.removeAllUserScripts() here? I think it will fix the retain problem.. \n. In an sqlcipher encrypted file called logins.db. \n. Updated the PR to handle non-English quotation marks for displaying the selected text.. Instead of adding files at root dir, could it be SyncIntegrationTests/[jenkins|python|etc]. 9 test failures https://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5af9bcad67891f00012e17ca#tests\nThey don't look related to this patch though. \n. Updated PR, good suggestion as the code is cleaner using horizontal compression resistance .required.. I am going to handle this by sharing icons between Client and ShareTo projects.. I am not concerned about space. Code and assets should not be duplicated, it is only duplicated currently because of limitations of Xcode asset sharing. Sharing assets in Xcode requires reorganizing the existing assets into a Shared.xcassets and moving them out of their existing structure (I don't know if devs will know to look in Shared.xcassets for a few icons in future so I avoided this).. I renamed the asset sub-folders to make things clearer:\n\n. Hmm, my quick Slack poll on this tells me I should at try an alternate patch with Shared.xcassets -that is the \"Xcode-way\". Maybe that way will be preferred.. Looks like this in the project, note the assets are checked off on the right for both targets.\n\n. Was an interesting experiment, but is overkill, simpler PR coming that just cleans up the Tab dealloc. With shrinkage:\n\n. Screenshots attached for app menu and page actions menu on iPhone SE. updating screenshot.... \n. Interesting, agreed blur effects can sometimes impact performance. Do you have a profile that shows an impact from this? There is a lot of heavy DB code in the table views that is our critical path CPU-wise, and IIRC we do lots of on-demand image resizing (which I see on CPU profile, not GPU) which is a heavyweight rendering operation. Changing this alpha might not make a measurable impact on CPU perf, maybe it saves some power demand on the GPU though. Some of the apple docs on rendering perf are based on older GPUs, or for code to support older GPU (typically 32-bit devices), 64-bit devices all have GPUs that can handle blur quite well.. Yes, contributors don't get build status reports, so patches need to be verified locally. I'll get this landed now.. This PR wasn't intended to change the existing behaviour, but I agree with your comments that I left top tabs in an incomplete state. The following PR https://github.com/mozilla-mobile/firefox-ios/pull/3995 implements the new private mode style, and completes the top tabs refactor. \nI'd like to land this PR at the same time I land 3995, so I can just tell QA to hammer on the new private mode and also look out for any styling regressions.\n. \n. Farhan, I feel guilt dumping these big PRs on you. Should I split this thing up? Maybe I could split the strings.swift changes out for quick landing.. Tests failed on the FaviconFetcher, which should be unrelated to the PR. Re-running the tests on BB now, should pass on second try.. There should be a TestFlight build this week with Dark Theme \u00a0\ud83d\udd76 . No need to fix linter errors outside of the changes in this PR. Thanks for the review Stefan. I addressed all the swift code changes requested. I did not address the proj changes or the scripting changes requested.\nEDIT: I added the check for master-only to the BB post build script.. Closing, these should be added here:\nhttps://github.com/FirefoxUX/photon-colors. Seems to have caused https://bugzilla.mozilla.org/show_bug.cgi?id=1484296. Top sites (and pinning) is more of a UX question (i.e. tangent to this PR), and UX research data would answer that (which I would hope we have, but am not personally aware of). \nI would think pinning is an edge-case feature (i.e. low single-digit percent usage). . ~On simulator with a test DB with 200K visit, 60K history, the old query takes 6 seconds, the new one takes 0.0005 seconds (1/2 ms). The test db is just my local data duplicated a few times. The displayed top sites look highly accurate.~\nDuh, this is obviously an incorrect timing, a single mysql read op is 0.5ms. The code change means the perf timer needs to go in a different place, will report correct timings when I get them.. old query: 1000 rows returned in 5432ms from: SELECT ...\nnew query: 1000 rows returned in 2661ms from: SELECT ...\nExplain query plan shows a FTS is removed. For posterity, queries (using a 1000 item limit) are:\nOLD\nSELECT\n    history.id AS historyID, history.url, title, guid, domain_id, domain,\n    coalesce(max(CASE visits.is_local WHEN 1 THEN visits.date ELSE 0 END), 0) AS localVisitDate,\n    coalesce(max(CASE visits.is_local WHEN 0 THEN visits.date ELSE 0 END), 0) AS remoteVisitDate,\n    coalesce(count(visits.is_local), 0) AS visitCount\n    , iconID, iconURL, iconDate, iconType, iconWidth\nFROM history\n    INNER JOIN domains ON domains.id = history.domain_id\n    INNER JOIN visits ON visits.siteID = history.id\n    LEFT OUTER JOIN view_history_id_favicon ON view_history_id_favicon.id = history.id\nWHERE (history.is_deleted = 0)\nGROUP BY history.id\nHAVING count(visits.is_local) > 0\nORDER BY max(localVisitDate, remoteVisitDate) DESC\nLIMIT 1000\nNEW\nSELECT\n    history.id AS historyID, history.url, title, guid, domain_id, domain,\n    coalesce(max(CASE visits.is_local WHEN 1 THEN visits.date ELSE 0 END), 0) AS localVisitDate,\n    coalesce(max(CASE visits.is_local WHEN 0 THEN visits.date ELSE 0 END), 0) AS remoteVisitDate,\n    coalesce(count(visits.is_local), 0) AS visitCount\n    , iconID, iconURL, iconDate, iconType, iconWidth\nFROM history\n    INNER JOIN (\n        SELECT siteID, max(date) AS latestVisitDate\n        FROM visits\n        GROUP BY siteID\n        ORDER BY latestVisitDate DESC\n        LIMIT 1000\n        OFFSET 0\n    ) AS latestVisits ON\n        latestVisits.siteID = history.id\n    INNER JOIN domains ON domains.id = history.domain_id\n    INNER JOIN visits ON visits.siteID = history.id\n    LEFT OUTER JOIN view_history_id_favicon ON view_history_id_favicon.id = history.id\nWHERE (history.is_deleted = 0)\nGROUP BY history.id. nit: also note the swiftlint warning about the colon. ~Seems to have caused https://bugzilla.mozilla.org/show_bug.cgi?id=1484296~ edit : wrong PR. It is a good improvement, but if the PR sits too long it will be hard to merge as the code continues to change. I am willing to help to get this landed.. I'll pull this branch locally and poke around with it today and see if I can find any missing bits to add. Good luck with the app!. When looking at this patch, I saw the bug with the tab bar selection on iPad being incorrect. However, switching back to master, I was seeing this bug: https://github.com/mozilla-mobile/firefox-ios/pull/4170. When I fixed that bug, and applied your patch, I see no further problems.\nWhen reading this code over I saw a few areas for further improvements and started working on a further refactor. The areas I noticed were: main-thread I/O, isRestoring flag being toggled and checked in a difficult-to-follow manner, the TabManager calling to AppDelegate during writes. This PR will make cleaning up those areas much easier.\n. No prob! I can take a look too. @farhanpatel this is ready to land. I am trying to look over the tests now to see if we have enough that would test this. I would like if we had one that definitively tested concurrent access. One way is to do a long write call and multiple quick reads, and do validation of data integrity, and validate access is in-fact concurrent (in case some other mechanism is serializing calls).. Crashed on startup when I applied the patch:\n```\n0  0x0000000107931001 in objc_exception_throw ()\n1  0x0000000108a0b472 in +[NSException raise:format:arguments:] ()\n2  0x00000001073d4652 in -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] ()\n3  0x000000010aa54a51 in -[UICollectionView _endItemAnimationsWithInvalidationContext:tentativelyForReordering:animator:] ()\n4  0x000000010aa50554 in -[UICollectionView _updateRowsAtIndexPaths:updateAction:updates:] ()\n5  0x000000010aa5069f in -[UICollectionView reloadItemsAtIndexPaths:] ()\n6  0x0000000103c9044a in ActivityStreamPanel.applyTheme() at /Users/gkeeley/code/firefox-ios/Client/Frontend/Home/ActivityStreamPanel.swift:154\n7  0x0000000103c90a35 in protocol witness for Themeable.applyTheme() in conformance ActivityStreamPanel ()\n8  0x0000000103cbc077 in apply #1 (_:) in HomePanelViewController.applyTheme() at /Users/gkeeley/code/firefox-ios/Client/Frontend/Home/HomePanelViewController.swift:296\n9  0x0000000103cbc0f5 in closure #1 in HomePanelViewController.applyTheme() at /Users/gkeeley/code/firefox-ios/Client/Frontend/Home/HomePanelViewController.swift:301\n10 0x0000000103b55cb9 in thunk for @callee_guaranteed (@owned UIViewController) -> (@error @owned Error) ()\n11 0x0000000103cbc28b in partial apply for thunk for @callee_guaranteed (@owned UIViewController) -> (@error @owned Error) ()\n12 0x000000010cd2b4ef in specialized Sequence.forEach(_:) ()\n13 0x000000010cc533ed in Sequence.forEach(_:) ()\n14 0x000000010cb316f0 in Sequence.forEach(_:) ()\n15 0x0000000103cbb775 in HomePanelViewController.applyTheme() at /Users/gkeeley/code/firefox-ios/Client/Frontend/Home/HomePanelViewController.swift:300\n16 0x0000000103e14d50 in BrowserViewController.showHomePanelController(inline:) at /Users/gkeeley/code/firefox-ios/Client/Frontend/Browser/BrowserViewController.swift:707\n``. In addition to this change I am going to look at why this being called so many times and get that fixed.. On iPhone 5c I seeaccumulate([self.getHighlights, self.getTopSites]).uponQueue(.main) { _ incalled 2x each time the panel is shown, taking 2-3 seconds in runtime. \nWith the fix, I seeaccumulatecalled once, and half the runtime cost.. Follow up bug is https://bugzilla.mozilla.org/show_bug.cgi?id=1488416 for investigating applyTheme() redundant calls.. The work here is ongoing, I'll go ahead and land this so it can be tested in builds and we can come with the next list of items that were missed.. The first commit is the actual change. The second commit is to alphabetize the list of tests.. Thanks for the detailed links! I followed them and converted those to the new method.\nCan you review again?. This isn't working reliably for me. Sometimes the tap registers, other times it doesn't.. rebased, waiting for tests\n. Can we add to the bottom ofbuddybuild_postclone.sh` (this will skip all tests in Fennec)\n```\nThis scheme is used for Nimbledroid only, tests are not needed (this is the only way to skip tests in BB)\nsed -i '' 's/skipped = \"NO\"/skipped = \"YES\"/g' Client.xcodeproj/xcshareddata/xcschemes/Fennec.xcscheme\n```. > So, we want the tests enabled in the schema but not running? Sorry I'm missing the point of this...:(\nI want the developer scheme (Fennec) to have all the tests available for running without modifying the scheme or having to switch schemes (and of course, enterprise schemes are confusing because they require special provisioning).\nHowever, on BB we don't want any of the tests to run for Fennec, because that build is only for uploading to nimbledroid. Unfortunately it seems that BB errors out if all tests are shut off (which is very strange).. Note that tab reordering is being disabled for 14: https://github.com/mozilla-mobile/firefox-ios/pull/4273. fixed by  #4323 . Instead, this also works:\nOn line 438 after\nUIView.animate(withDuration: TopTabsUX.AnimationSpeed, animations: {\n            self.collectionView.reloadData()\nadd this to load cells that aren't visible\nvar indexPaths = [IndexPath]()\nfor i in 0..<self.collectionView.numberOfItems(inSection: 0) {\n  indexPaths.append(IndexPath(item: i, section: 0))\n}\nself.collectionView.reloadItems(at: indexPaths)\n. \ud83d\udc4d to more files in subfolders . Now looks like:\n\nThis is the color I had from an earlier UX prototype. I am not sure this is the exact color they want, but it will do for this release as it is pretty close.. @farhanpatel is this comment useful https://github.com/mozilla-mobile/firefox-ios/pull/4323/commits/b4743eed12f0b7fd42a20d99eebab18d82114327 ?. @farhanpatel can you try again? The last commit seems to fix it for me. Here is a demo where 25 tabs are added quickly https://bug1499058.bmoattachments.org/attachment.cgi?id=9020046. Oopsy, I changed the tab focus behaviour when the selected tab isn't in view. Fixing.... testTabsIndex needs to be updated to reflect this change, updating now, then landing. marking as WIP until further investigation is complete. Replaced by https://github.com/mozilla-mobile/firefox-ios/pull/4342. Closing while I explore better approaches. Until we decide if we are landing this, or instead changing to iOS 11+ URL scheme handlers, I'll mark this WIP.. Turns out this is still needed until GCDWebServer is fully removed.. @isabelrios I copied your test and modified it to more closely match the case I worried about, what do you think:\n```\n    func cellIsSelectedTab(index: Int, url: String, title: String) {\n        XCTAssertEqual(app.collectionViews[\"Top Tabs View\"].cells.element(boundBy: index).label, title)\n        waitForValueContains(app.textFields[\"url\"], value: url)\n    }\nfunc testTopSitesScrollToVisible() {\n        if skipPlatform { return }\n    // This first cell gets closed during the test\n    navigator.openURL(urlValueLong)\n\n    // Create enough tabs that tabs bar needs to scroll\n    for _ in 0..<6 {\n        navigator.createNewTab()\n    }\n\n    // This is the selected tab for the duration of this test\n    navigator.openNewURL(urlString: urlValueLongExample)\n\n    waitUntilPageLoad()\n\n    // This is the index of the last visible cell, it doesn't change during the test\n    let lastCell = app.collectionViews[\"Top Tabs View\"].cells.count - 1\n\n    cellIsSelectedTab(index: lastCell, url: urlValueLongExample, title: urlLabelExample)\n\n    // Scroll to first tab and delete it, swipe twice to ensure we are fully scrolled.\n    app.collectionViews[\"Top Tabs View\"].cells.element(boundBy: lastCell).swipeRight()\n    app.collectionViews[\"Top Tabs View\"].cells.element(boundBy: lastCell).swipeRight()\n    app.collectionViews[\"Top Tabs View\"].cells[urlLabel].buttons.element(boundBy: 0).tap()\n    // Confirm the view did not scroll to the selected cell\n    XCTAssertEqual(app.collectionViews[\"Top Tabs View\"].cells.element(boundBy: lastCell).label, \"home\")\n    // Confirm the url bar still has selected cell value\n    waitForValueContains(app.textFields[\"url\"], value: urlValueLongExample)\n}\n\n```. I think that test is enough, because I think those actions are the most likely to break if someone changes the code. . ... and I broke a test, fixing.... I like this idea. However, we get complaints about the sluggish feel to the context menu, and takeScreenshot on older iPads is a very heavy operation. I wonder if it could happen after the action. Or, we have an async takeScreenshot method IIRC.\n(p.s. sorry we were slow getting to this PR, I'll take a look today at it more closely). Thanks for looking at the tests on BB! As for the auth window bug, that will remain until we migrate the tests to WKURLScheme from GCDWebServer, which hopefully will happen in a few weeks.. Yay: green on BB! Not yay: have to rebase again on master.. Oops, is 100% more buildy now.. Thanks for fixing!. \n\n. \n. Added a follow up: https://bugzilla.mozilla.org/show_bug.cgi?id=1515954\nTo better isolate the favicon URL matching and add tests for that.. \n. \n. > Looks great! did you want to remove the LeanPlum feature flag?\nAfter this release yes. I filed a bug to remove it https://bugzilla.mozilla.org/show_bug.cgi?id=1519511. \n. \n. \n. The follow up bug https://bugzilla.mozilla.org/show_bug.cgi?id=1523389 describes how the domain whitelisting is broken, as revealed by these tests.. Can I close this, as these changes will land in #4501 ?. @isabelrios could you trigger PR this for XCUITests? I want to make sure I didn't break them. Updated to fix the key image size.. It is logins.db in the application group directory. There is new logins code coming in a beta release that may fix the problem, 2-3 weeks I think. . Thanks for reverting that change. That code was based on a stackoverflow tip for viewWillAppear-like behaviour for UIViews, which would be handy for setup of the view (in this case a call to applyTheme()). It WFM in the case I used it and I thought \"great!\", without realizing it could have a bad side effect. In my PR to finish the login detail view I'll take a different approach.. \n. I'll mark this as WIP for now. We don't need to land it right away, and I want to see if this is a useful basis for the next round of work which is Swift 4.x compat.. @justindarc can you look at this change\nhttps://github.com/mozilla-mobile/firefox-ios/pull/4571/commits/32387756cb418215341ea0ad5854ab9f2321b023\nEDIT: don't look, removed it :). Orientation change layout doesn't look right, and the title colors aren't adapting to dark mode:\n\n. \n. \n. \n. Landing right away to test it out (I am too lazy to apply the patch :) ). Nice catch that this was async without a wait!. I assume we can close this one?. This is the call stack for CALayer setBounds, which seems to support the validity of this approach\n\n. No rush to land, I want to test this some more. But so far it is unbreakable.. Will update with that.... If this is only for key command handling, it could go into that extension. is this change needed?. This delay is ugly I realize :(. But a simple .async() doesn't work, I assume I am either fighting something else setting the first responder, or simply that multiple loops of the main event loop is required for the UI state to be ready to accept a call setting the first responder.. Spelling 'Response'. Consider: findCachedResponse(forRequest: ). I'm not sure if recommended swift func naming is to end in 'For' or if that goes with an arg, or if it should be left out in the case of multiple args for which it is 'for'.. Elsewhere we use SwiftyJSON, is there a particular JSON lib usage we follow ?\nNSDictionary to array casting (particularly on main thread) has been a perf problem for me in apps. I haven't used SwiftyJSON but I was planning to read the code to see if they maintain the JSON as an NSDictionary.\nOk, I see later in the patch this is bounded to small list size, so I think this is a non-issue here.. Comments for discussion (no changes requested), maybe best to chat off-PR as these are topics that aren't tied to this code:\nWhy do we return Maybe here? Is bubbling up a failure code through the stack required? \nAs a newbie to this code it seems like we don't have special error handling (it is just a generic error message), could it just be Deferred< optional array of PocketStory>, and nil is a failure.\nApologies for the newbie viewpoint but it seems both simpler and more useful to log the error at the point of failure (and be descriptive like 'failed to cast', 'bad http response') and then return nil/empty result. . Is there a func on webServer that gets this? Like webServer.host or something. Very cool.. Date.now() is double seconds and MaxCacheAge is in milliseconds I think. comment should be 1 hour in millis. maybe type it as MaxCacheAge: TimeInterval so that seconds is implicit in the type. does the new EarlGrey require moving the newline to its own line like this?. I understand the test before this change (i think), whereby the Share button is pressed then the Share/Action menu is cancelled. Am too lazy to look on an iPad, why is Share tapped a second time here (and no cancel needed for the queued JS prompt to show).. Better wording would be 'refresh the collection view' . Can you comment what this code is doing? I think it is trying to tap a cell in the top sites collection view by name. Curious how this works, if the url is 'facebook.com' the displayed becomes 'facebook com' (no dot), but doesn't the TLD part (.com) also need to be removed?. Prefer: return UIDevice.current.userInterfaceIdiom == .pad. nit: later in the code return error == nil is used, could just do that here too for consistency. ok, and I now see it is a replaceText first, then a typeText, I didn't notice that before. if you are updating anyway, please add that as a comment, thanks. suggest: if thing == nil { }. \ud83d\udc4d  I would do the same to follow an existing style --and is orthogonal topic to the work on this bug. This doesn't fetch correctly. Yup, forgot to push -f some additional changes. Yup, I was copying the format of the existing test above it. \nI would also make parentName and description nil, since I see the constructor allows that.\nThe parentID of 'places' I don't understand what that is about, I'll ping you in channel.\n. It should be removed entirely, no? (this is not longer a 'special case' line of code). Change the base removeItemWithGUID to not return nil? Seems like that will touch more code than I would like. How about just:\noverride open func removeItemWithGUID(_ guid: GUID) -> BookmarkFolder? {\n        let newMain = main.removeItemWithGUID(guid) ?? main\n        let newAppend = append.removeItemWithGUID(guid) ?? append\n        return ConcatenatedBookmarkFolder(main: newMain, append: newAppend)\n    }. +1 is my style when i am paying better attention. +1 switching to append, doing that. Confused, is this an actual code standard we follow? I ask because it seems non-standard, but I am not well-versed on Swift coding standards.. (any style is fine by me, I can adapt). I assume this is for replacing BookmarkMirrorItem.folder usage? TestBookmarkTreeMerging is a lot of code, and it looks quite similar to what is here already. My concern is that we will begin a new iteration of this patch based on fixing old code. My recommendation is to give me some code verbatim that I can drop in to replace the old test code and skip a review iteration.\n. I think this is what you are looking for:\n```\n  let bufferDate = Date.now()\n        let changedBufferRecords = [\n            BookmarkMirrorItem.folder(BookmarkRoots.ToolbarFolderGUID, modified: bufferDate, hasDupe: false, parentID: BookmarkRoots.RootGUID, parentName: nil, title: \"Bookmarks Toolbar\", description: nil, children: [\"aaa\", \"bbb\"]),\n            BookmarkMirrorItem.bookmark(\"aaa\", modified: Date.now(), hasDupe: false, parentID: BookmarkRoots.ToolbarFolderGUID, parentName: nil, title: \"AAA\", description: nil, URI: \"http://getfirefox.com\", tags: \"[]\", keyword: nil),\n            BookmarkMirrorItem.livemark(\"bbb\", modified: Date.now(), hasDupe: false, parentID: BookmarkRoots.ToolbarFolderGUID, parentName: nil, title: \"Some Livemark\", description: nil, feedURI: \"https://people-mozilla.org/~npark\", siteURI: \"https://people-mozilla.org/~npark\") ]\n    XCTAssert(bookmarks.applyRecords(changedBufferRecords).value.isSuccess)\n\n``. I see not it isn't needed as TestBookmarks.swift already tests for this.\nCorrection: it tests without verifying the UITableView is updated, I'll see where to add that. +1 to the helper . Could do this on next line also: \"is_multi_region_domain\": \"true\". ingetDefaultIcons()could build the list ofmultiRegionDomainsusing the \"is_multi_region_domain\" property. I think, to be ultra-clear above this line should be:if i == 0 return self.bufferFactory`\nThe zero-index case works regardless sincei is less than the pivot; the requested change is a readability nit. nit: maybe DisplatchTime.now() + delay instead?\n. nit: I prefer the compact syntax of:\nDispatchQueue.main.asyncAfter(deadline: .now() + duration) {\n   self.dismiss(false)\n}\n. I  could (should?) have split up the PR, this part is the only new code, the rest is just refactoring this test code for reuse.. @st3fan I see a string change, will follow up with you on l10n needs. Currently I am trying to replace this with  attributed text's boundingRect(with: frameSize\u2026. Do we use the global prefs for non-shared prefs? This pref is private to this piece of code.. I could, I prefer standard Swift completion syntax to Deferred. I am still head scratching as to why we choose to use it TBH.. all calls on WKContentRuleListStore (i.e. ruleStore) are async, and this code calls into that to delete the stored rules (and thus this func also async+completion block style). I was stumped on this one. I can't do available macro on stored properties, yet I need a prop here for ownership of the content blocker. I didn't want a block of setter/getter code wrapped in available macros, but I could do that. Ugh, i hate that one!. It will, I didn't know if this would make it clearer it also gets used as pref storage option, and if someone needed to rename the enum they could do so independently of the stored pref value. I see elsewhere in the code we don't do this, so I'll remove the explicit string. The suggestion you made elsewhere to delay the tab restoration instead to wait for this code to complete is a good idea.. have time to switch this over before next beta, will switch it over and i'll get more practice with deferredness. Intended, as I am not sure exactly what to do with the fact that Apple has made the init of the rule store failable, and there is no doc as to in what case this would be nil. In the case the ruleStore is nil, this code is designed to no-op and avoid crashing. Thoughts?. WKContentRuleListStore unavailability is unknown as to when/why this happens, in the release build case, I want to return and no-op any further work. . On further thought the code no-ops anywhere the ruleList is nil, should I just do the assert() as you suggested ?. There is a stray bracket at the start of the message. I think we only want to print the error case, not the success. . thanks will do!. Functions like this are changed to the much clearer: \nfunc makeFolder(guid: GUID, parentID: GUID, title: String, children: [GUID]) -> BookmarkMirrorItem {. Is this a new step we added in the build here?. we don't need these tests anymore?. These tests being white-box should be able to use Strings.SomeReaderModeString. But, this particular string is not exposed that way; in future (for me also to find out, because i have run into this) we should find out if localized strings should always be in the Strings.swift file (and then can use the variable here instead of literal).. return \"mailto:\" == self.profile?.prefs.stringForKey(PrefsKeys.KeyMailToOption) ?? \"mailto:\"\nor\nif let option = blah { \n return option == \"mailto:\" \n} \nreturn true\n. s/buton/button. do we capitalize these (so far i just followed prevailing style in the existing file i was in)?. s/refrence/reference/. I am surprised we didn't have this constraint before (I didn't read the rest of the layout code, I would have thought the bottom of that label would already be glued to the top of the view below it). . Agreed 100x. This is how the original code is, I'll take another look and see if I can cleanup this code a bit.. The code is trying to indicate that if a username is set, then a password is expected. I don't find that too clear myself.\nI think either both should be optional, or both should be non-optional and empty string means not set. Any preference? Either one results in a cascade of code changes.\nHaving just typed those suggestions, I am thinking now that leaving it is the best option until someone is doing more refactoring in there.. This was failable, did it change maybe? That is handy if I don't need to treat it as optional.. Nice catch! i can cleanup that optional rulestore stuff, API for initialization is now:\n@available(iOS 11.0, *)\nopen class WKContentRuleListStore : NSObject {\n    open class func `default`() -> Self!\n    public convenience init!(url: URL!)\n.... This would look odd I think, it is an internal utility function (an anonymous func almost) as it has the job of filling the Deferred for addActiveRulesToTab() \u2013the 'oddness' would be the added parameter of passing in the deferred to fill.. +1, it was used differently in an older patch. Is there a preferred syntax for printing errors at the source of error?. .value doesn't work in these test cases, it hangs and doesn't continue, is this expected to work? I can look again where it was sticking.. So far all(deferreds) within addActiveRulesToTab() never executes using .value in the test case. I'll try it outside of test and see if .value works there.. Hold on, it locks up outside of test also. Hmm.. ```\n func doThing() -> Deferred {\n            let result = Deferred()\n        let rules = [1,2,3]\n        let deferreds: [Deferred<Void>] = rules.map { value in\n            let result = Deferred<Void>()\n            DispatchQueue.main.async {\n                result.fill(())\n            }\n            return result\n        }\n\n        all(deferreds).uponQueue(.main) { list in\n            result.fill(()) // never called in .value case\n        }\n\n        return result\n    }\n\n``. Are you sure .value works as you expect? It locks up in that above block of code.\ndoThing() <--- ok\ndoThing().value <--- blocks. AMaybeis clearer to anError?is difficult to see why. Can you explain?\n(This block is internal to the function and only concerns itself with Error -or no error). Unstage. nit:== falseto!app. BTW, this block is cool, I didn't know an easy way to get XCUITest to see table view rows that were offscreen. nit:let appSettingsTableView =`. Are these comments needed?. oops! \ud83d\udc4d. Any real-world perf impact here is hard to imagine (but we have the tools to proof it if needed). We want to remove all forced-unwraps from the codebase and avoid crashes or future developer cycles wasted examining forced-unwrap code when doing crash examination.\nWhat may be impossible code path now -in regards to a crash with a forced unwrap- can be made impossible always, even if a refactoring error is made in future that breaks the assumption in the code.\nThese casts in particular are ultra-low impact casts (even non-built-in Swift objects which have O(n) for n=number of parents in hierarchy would just be a few extra ops). (My beef is our JSON lib array and dict casts which are O(n) on the size of the data).\n. nit: prefer tab1 over t1, because this code relates to time, where t1 could be a time variable name.. DispatchQueue.global().async is all I have ever needed for general off-main work, not clear on the named queue usage here, I like letting the OS decided what off-main thread to use. @st3fan was this accidental commit?. i am in one of those hellish states where xcode suddenly won't run on my device \"iPhone has denied the launch request\", for like an hour now. I am just grasping at straws here.. to clarify: this is not the problem, i just noticed it when looking for other problems. unstage. unstage. unstage. unstage. Idea for future: I wonder if this adds a lot of time to tests, we might be able to speed up tests by doing:\nstatic func tearDown() {  /* do heavy cleanup after all tests in this file ran rather than after each test */}\nThis isn't related to this file, I am just mentioning because at some point it would be nice to look at speeding up the tests.. nit, arg name could be clearer as func visitTrackingSite(shouldBlockImage: Bool). nit: Wait for the Settings. nit to use trailing closure syntax:\nlet menuAppeared = GREYCondition(name: \"Wait the for the Settings dialog to appear\") { () -> Bool in\n// do stuff\n}\n(can also leave out the () -> Bool in as closures that take no input args are allowed to skip that line and the return type is treated as implicit). That creates a warning that the signature doesn't match the SDK. I am going to rebase this on the 9.0 removal patch and see if the warning goes away.. Agreed, I updated the PR. @st3fan is this string ok to use for 9.0??. Confirmed ok for now. We need to verify L10N screenshots for this.. We need make sure this gets QA verified. Note to self to set flag in bug for that. nit: use self for init and closures . is let needed here? Could just assign to the member . nits: self. and maybe this assignment not needed?. nit: self.. We should consider an enum in the project for TabPrivacy.private/.public. \nI had to dig a bit to see what this bool was for.. nits: selfs. Hmm, are these sections in the action sheet? I expected a non-nested array. nit: self. hold the phone, the local tabTrayController variable seems to be needed. I was curious because I saw the old code did this also, and changed it locally, and pushViewController crashes. /me what is going on here?. I don't see how to do this in EarlGrey. Very easy to do in KIF of course.. Agreed, but this is a quirk, didSet won't combine with available. didSet doesn't change the type of the property to computed, and only computed props -being functions- can be wrapped in available.. oops, good catch!. The sheer number of unused named return params increased my cognitive load when updating the PR, so this seemed lower-noise when going through this code. I am not sure what the preferred style is. . Either dead or deeply resting. No one called it that I could find.. call it readerModeAvailableOrActive maybe?\nGiven there is a state available for reader mode, I would have expected readerModeAvailable to correlate to that only.. Oh ok, I hadn't thought about that one. I see your point, it does look weird with the other closure as a named param.\nI have (yet) another update to this patch because of how we compare UIImages in testing is failing, so I'll change these to a named param.. (url, tab, view, _) would make it clearer this last param is deliberately ignored. nit: no self. nit: no self. nit: no self. Did you want to leave this in?. center would be even better to ensure we have 1:1 pixel-to-point ratio and catch incorrectly sized source images (correct being source image dimensions matches size on screen exactly). Should this go in Strings.swift? I am not clear on the distinction as to when we don't use it. \nBuggy L10N automation on Xcode pre-8 used to require a global string file as a work-around, I assume we don't have that problem.. nit: newlines. Consider putting the hex values into UIConstants. My assumption is that helps ensure color consistency across views by encouraging color definition reuse.. nit: no self. nit: I think this func should take an array (looks like varargs currently) and then re-use the button array from line 245. Side note: if this was called BottomToolbar I would find this code so much easier to read.. nit: no self. So much self in the old code! I am now glad you didn't go and change existing usages and kept the diff to a minimum. I'll stick to self nits on lines that are added.. nit: self. nit: self. I don't think this max should go here (and the two others below) because updateTabCount is open to anyone to call it, yet only this function knows how to safely call it. I assume the count label display code is common? If so that would be a better place to assert a min display value of 1.. We might want to state for our guidelines that single line guard with empty returns are ok.\nI believe it is not explicit in our guidelines: https://www.raywenderlich.com/148830/swift-style-guide-updated-for-swift-3, quote:\nFormatting guard statements was also an item of some discussion. Should they be one-liners or always span multiple lines? How should you indent multiple let bindings and conditions? How should the else clause be indented?\nIn the end, we decided to not make a specific rule about it, and leave it to the discretion of the author. Perhaps a universal standard will emerge. . That available usage is great, I'll go with that.\nIndeed it could go in the file it is used in (I removed the usage of this type of comparison in Storage tests), but I want this very discoverable, because someone could end up doing this incorrectly and costing themselves cycles -like me :).. Agreed we should use an apostrophe type here, but I think this is the character: \u02bc  (should be a curly apostrophe pasted there). I used 'MODIFIED LETTER APOSTROPHE' (unicode U+02BC) from OS X character palette, but I have no idea if that is the correct one to use.\n . \ud83d\udc4d (I confirmed em dash with spaces on either side matches the style guide). @justindarc I'll ask you about hooking these up. I wonder if we can add some now, or do we wait?. Ok I thought it had to be like this to appear in the root correctly telemetryConfig.defaultNewTabExperience. ~~~I am not sure we have approval to measure those yet, so the first iteration can just be core ping stuff.~~~ Edit, sorry, I see what you mean we can still grab these 2 items since we had them in there before.. upon() closure is off-main. How do I see what table that schema maps to?\nThe table default.mobile_clients_v2 has columns\ndefault_new_tab_experience default_mail_client\n. Can I leave these out for first landing?. Also leave out for first landing?. Good point, @st3fan I want to drop sending default_new_tab_experience and default_mail_client. We can add them back in 10. Are they being used right now? If they can't be dropped, we have more work to do to figure out what the story is behind those, for instance they aren't in the schema mentioned above.. nit: comment on why this needs to bypass the self.setProgress(). nit: self. Confirmed default_mail_client is used, so that is precondition of a proper landing of this code.. nit: self, self, no self. nit: caps. A constant would be good here (I see we do this in a few places) -even though I have written collection views a few times, zIndex seems odd since one doesn't typically need to use this. Then we can comment on it in a single location.. Thanks for checking this, yes will add it. thanks, will use way that in future. I removed XCGLogger dependency for the class. XCGLogger is overkill except for sync and share debugging IMO.. log.info (vs. plain print) is handy in one regard that it prints a timestamp.. As long as the properties in this if-statement are properly set at some point. The complete=false case is when animation is cancelled/interrupted, there is no way for me to see from this code that the interruption will be due to another code path that does set these properties correctly.\nI am happy enough to give syntax-ok approval though, as UI code like this is inherently difficult to review, and I suspect needs real-world testing to really validate.. looks like you considered this so sgtm!. nit: self. I actually have to expand the github view when I see this to confirm the code is not in a closure.. nit: self. nit: self. Interesting :)! Did not know of this method.. accidentally reformatted this code block (indentation is now correct though), no changes made here. I pulled these two conditions out of the if-statement to name them as to what they do.. Although not mentioned in the bug description, this animation has the same problem as show.. On a PDF doc, if one partially hides/shows the toolbar and lifts their finger, it will snap to completion instead of animating to completion. I think it looks fine to do this, it is very unlikely to be noticed.. Should there be a return here? . The var looks fine to me being a run-time constant (vs a compile-time let constant).. Yeah the exact tag name is the one to use.. The consequence (and likelihood) of misunderstanding what a Sentry log message does is too low to warrant a check outside of a regular code review.. +1 to the the other checks you added which I think could catch some legit probs. Not sure, I'll drop in a screenshot. on the X:\n\n. Safari iPhone X: \n\n. A func calling other Client code (i.e another func non-private to caller) off-main upon completion of work I think  is a highly exceptional case or a coding error. Client is written entirely as main-thread code: no mutex'd memory access, no thread guards on on UIKit calls. \nI would hope we would be super-strict about enforcing containment of off-main thread calls to the minimum subset of code necessary. . I'll switch that,  agreed ( that here return bindQueue(.main) is equivalent to uponQueue(.main) { fill deferred }; return deferred). I recall not finding any use of bind() in the Client module so I thought upon/uponQueue was the prevailing style. . Do we need a follow up bug filed for \"Wechat share extension\" ? . This backgrounds and foregrounds the app IIUC, but restart to me implies app kill and boot.. new code is soo nice!. /me c'mon Apple. there is no better function signature they could have come up with to get element by index?. this will be great to have for the top level settings screen. I already broke this screen's l10n once by accident.. this url (or string) should be a constant?. Same comment as before regarding restart vs background/foreground app. aside: I need to find out how we monitor this to indicate perf ok/bad. XCTAssert(tabcount > 0 && tabcount == newTabcount)\nSince if there is an error in getting the value it will be 0 and this will detect that.\n. I couldn't see why this header/footer logic is needed, I can put it back if it is.. Could be lack of coffee -and this comment is not related to your changes-  but I am having trouble seeing what this test does. I like that calendar.date(byAdding: .day, value: -7 * 5 syntax you used above,  maybe that, plus a constant thrown in for overTwoMonthsAgo might help me. Reading it again to see what is the intention of the test.... ok no prob, good to know I wasn't the only one headscratching on this test. I like the idea of having long-press to \"Reload with TP\" even if TP is off in the app settings.\nFor this patch I didn't do that. I am filing a follow up bug to propose that.. thanks, filed for follow up https://bugzilla.mozilla.org/show_bug.cgi?id=1409090#c10. thanks, I was stumped for a good name for this. Yeah, the more comments/explanation in this file the better. . Nice catch!. IMO this should be  defined as a constant like Strings.trackingProtectionAccessibilityId.onLabel, otherwise this string gets repeated in 3 places, 1) Strings.swift, 2) here, 3) when used in tests.\nBut there is no precedent in the code for defining accessibility constants like that.\nThen tests would be able to include Strings.swift, and use constants for accessibility identifiers.. Maybe a better way? NSPredicates trip me up (in this case due to the use of Enum) and this is what I end up with. . In order for the screengraph to change the Settings, I needed proper  accessibilityIdentifier set on the options (I wasn't aware when I landed this a while ago of the implications of not doing that, now I know, do it the first time).. could it be TabToolbar: UIStackView. Nice-to-have: s/TabToolbar/TabBottomToolbar/ for more readability IMHO.. return not needed. Do you mean a) FxUserState gets a member let trackingProtectionOnCondition = \"the predicate string\"? Makes sense to encapsulate it there and make the enum private yeah.\nAnd for b) I don't know where else it would go (only userstate seems to be the place to put it).. I mention this at end of https://github.com/mozilla-mobile/firefox-ios/pull/3479#issue-275516570, that is part of an experimental commit to let the webview count drop to zero. Much nicer making the enum fileprivate at top-level, updating and then landing, thanks!. Tab has strongly been captured by this point, I'm not clear on your suggestion.. Maybe @rnewman has come across this (pondered the enforced weak ownership of Tab) as he was talking about a more abstract interface to Tab list that would avoid shared ownership. I think that would be a bigger change though.. Cool I'll try something like that, I thought this looked more minimal in terms of changes, but now I see the patch isn't minimal compared to making funcs into closures with weak captures.. canOpenURL has perf implications, use closure form. This line had no effect. \nWKWebView.isOpaque must be changed from true (default) to false for this property to have an effect.. Good catch on the shared mutable inProgress, shouldn't this line be changed to:\nDispatchQueue.main.async {\n self.inProgress = nil\n}. Was there to allow someone to change webview bg color in future in some other code without knowing about this bgcolor change in night mode. Not sure it is needed though.. ok, updated in commit 1325c2a . The original code appears wrong in regards to cancel/inProgress:\ninProgress.upon {\n   inProgress = nil // basically allowing for function re-entry (and multiple live DB ops for the same purpose)\n    // now the func does more DB work, even though another DB op for the same purpose can start due to inProgress = nil line above\n}\nMy patch fixes this behaviour (I believe):\ninProgress.upon {\n    DispatchQueue.main.async {  // pseudocode, these are 2 separate main.async calls in the patch (doesn't matter)\n        inProgress = nil \n        if there was a result {\n           self.urlBar.setAutocompleteSuggestion()\n        }\n   }\n}\nGiven the above, I see no multiple DB ops as you mention in your comment. . I only want to fix the main thread disk I/O in this patch.\nPerformance-wise I'd rather do as little changes as possible unless I spend more time on this code. I'd want to get a chunk of time allocated to do that rather than semi-drive-by patching that I am doing now. . > Whenever we get a set, we'll kick off a new DB operation\nThe top of the function has this which is cancelling the previous DB operation. No?\nif let inProgress = inProgress {\n                 inProgress.cancel()\n                 self.inProgress = nil\n}. I don't like this block actually. For correctness we should have:\nvar isCancelled = false\n    DispatchQueue.main.sync() { isCancelled = <the logic I have here to check >}\nor an func isCancelled() -> Success which does the same as the above 2 lines but with .async, and the rest of this function is in the upon() block for that.. This should also check isCancelled (as above):\nvar isCancelled = false\n    DispatchQueue.main.sync() { isCancelled = <the logic I have here to check >}. This cast never succeeds. Which breaks my patch of course.. IIRC  .rawValue for String enum is the label name, is specifying string needed?. I notice a lot of _ for first args; I don't have a reference to an official guideline, but I notice this is used less in recent swift (except for objc conformance and for first arg of delegate functions). Could this be generic?\nprotocol NotificationEvent {\n func notification(for object: Any) -> Notification {\n   return Notification(name: label.name, object: object, userInfo: [\"payload\": self])\n  }\n  /// Use this method to post notifications to any concerned listeners.\n  static func post(event: NotificationEvent, for object: Any) {\n    NotificationCenter.default.post(event.notification(for: object))\n  }\n}. Could it be more generic:\nextension NotificationEventHandler {\n  func register(forEvents events: EventLabel...) -> NotificationObservers {\n        let center = NotificationCenter.default\n        return events.map { event in\n            center.addObserver(forName: event.name, object: nil) { notification in\n                guard let event = notification.userInfo?[\"payload\"] as? NotificationEvent else {\n                        return\n                }\n                event.handle(notification.object, with: self)\n            }\n        }\n    }. On further thought, no advantage to that. \nThe PR code allows typecasting to happen here rather than event.handle().. Ha! Yeah, I read about sync running on main thread unexpectedly when you mentioned it before. I would only ever use sync in extreme cases (typically low level), like how we use it in DB layer. Anyhow, there is no reason here not to '.main.async {' in all cases and remove the if. There is almost never a rationale for if isMain { do this } else { do this } in front-end code except if one needed to band-aid some odd case. . Never gets hit in my testing.. Never gets hit in my testing.. Never gets hit in my testing.. my mistake, the version num can go here also instead of SHA. Good thinking to wrap this!!. nit 'self'. Or func fetchBookmarkStatus(for url: String) -> Deferred<Bool> if we are avoiding completion blocks (I like it as-is because I am a bit old-school, but IIUC seems like we are emphasizing the Deferred way in our code).. @rnewman checking all these things, and adding a test case.\nThis patch went a bit sideways at first, am closing the PR because I did a cleaner PR on a new branch. . Checking... valid concern there.... This is wrong. I need concurrent queue (non-serial) behaviour, neither sync nor async will get me that.. assertionFailure. @rnewman why were you suggesting I put this on the DispatchQueue? I don't want serial queue behavior. This line should be removed methinks. (To my understanding, you had suggested .sync, but sync/async doesn't matter, it shouldn't be on the queue).. Being a serial queue I am not sure it can race.\nWhich reminds me of a code cleanup item, we should rename sharedConnectionQueue to serialConnectionQueue, seems clearer that way.. Right, there is none. \n. Agreed, same concerns here.. @rnewman This is super annoying that AnyObject is needed here, am open to better workaround suggestions.. @rnewman added suspending, for the full scope of this function.. This can be v1.0.8 instead of a SHA. Can you double-check this one? I was expecting the extras to have [\"read\": true/false] because it would be clearer than a message with tap | readingListItem | true/false. Or would this be .readingListReadStatusButton as the object?. Constants should be used where possible:\nforKey: ContentBlocker.PrefKeyEnabledState, withDefaultValue: ContentBlocker.EnabledState.onInPrivateBrowsing.rawValue\nforKey: ContentBlocker.PrefKeyStrength, withDefaultValue: ContentBlockerBlockingStrength.basic.rawValue\n. unstage this part?. nit: double space might trigger lint warning. We have no Shared/GeneralUtils for small, isolated utilties. And rather than create more files, I repurposed this file, so AssertionUtils became GeneralUtils.. Is there a reason to do this? I find build flags to be more difficult to use than setting the value of a bool, in that they have to be set in the project settings GUI (or changing the flag in the xcconfig). (i.e. go to target -> Compiler - Custom Flags -> Other Swift flags, remember syntax which is -Dflagname and not -Dflagname=1)\n(and is unlike the build setting for C preprocessor flags in the project settings GUI, whereby the -D is left out) . Check if if introView != $0 { alpha = 0 } is needed here\n  . Check SELDynamicFontChanged and DynamicFontChanged are both needed. cool subscript!\n  . Nit: minor risk? perhaps the button could get nested in a future commit and the person not realize point(inside:with) will fail\n. Is this to generate random bytes? Is there a more explicit way to do this swift I wonder.\nedit: nvm, it is just a salt, don't need much entropy for that. Looks repeated in each case, consider pulling them out of the case body (if possible). FROM \\(ViewAwesomebarBookmarks) -> Yes to that one.\nCREATE IF NOT EXISTS -> To create a new dataset I drop the table (line 119), then create a new table (line 120), can you clarify this suggestion?\n. In debug, verify that the temp table has been generated. If the table doesn't exist (i.e. the select fails), log an error.\ngetSitesByFrecencyWithHistoryLimit(..., usePregeneratedTempTable: Bool) is tightly coupled with createTempTablesForFrecencyQuery() in that if usePregeneratedTempTable: true is used then createTempTablesForFrecencyQuery() must have preceded this call.\nASIDE: I don't like this coupling, but seems acceptable in this case given it is specialized to this use and I don't have a better idea.. > If you, or another developer in the next couple of years, gets anything wrong, CREATE TEMP TABLE will return an error if the table already exists.\nThat is correct. The requirement of this part of the code was that the table must be dropped and then created with fresh data, and it would be easy to track down the error in someone went and changed this logic.\n(Maintainability/understandability is a risk area of this patch; agreed clarity needs to be better here. Just walk me through what would make the most sense.)\n\nI haven't traced the logic, but I expect that will cause something user-facing to break.\n\nIn debug it will report a bunch of errors to the log and then not display autocompletions (but that behaviour is intended in terms of the error state). Hopefully the dev notices their change broke the code (assuming they don't have a test case for their change).\n\nUsing CREATE TEMP TABLE IF NOT EXISTS means that prior existence isn't a problem, and because the table definition will only change on upgrade, and temp tables don't persist across restarts, this is totally safe.\n\nI am confused about this prior existence concern, that would be an exceptional error case in code \u2013the DB is broken.\nThe code essentially does: 'DROP TABLE FOO; CREATE TEMP TABLE FOO', \u2013is my code not doing that? And if it is correctly a consecutive drop+create, is your suggestion still needed? \n\nAdditionally, consider using DELETE FROM (AwesomebarBookmarksTempTable) instead of actually dropping the table. DROP TABLE literally does exactly that then removes the table from the database schema, so you can save a step by not bothering.\n\nConfused, isn't DROP is far more performant than DELETE?. And yeah, it just returns 0 rows safely. Oopsy.. My most misspelled word I think.. Good point, I'll try that.. > IMO the underlying requirement is: by the time we run the first query, the table exists and contains up-to-date data.\nAgreed.\n\nThere are several ways of doing that, ranging in efficiency from best to worst:\n   Keep the table accurate as we go. No work is done now. / Incrementally update the data somehow, here and now.\n\nASIDE: My preferred approaches of course but the scope of changes required makes it impractical :(.\n\nThe reason I suggest not dropping the table and using IF NOT EXISTS is twofold:\n   It's more efficient.\n\nBut DELETE is O(n) and DROP is O(1) , there are no FK constraints on the temp table.\nDROP is always maximally efficient, as if no FK is O(1), otherwise O(n). \nI feel like I have a learning op here, because I reject patches for using DELETE over DROP :).\n\nIf other code changes to rely on the existence of your materialized view, and the lifecycle gets more complex than you anticipated, then drop + recreate might allow the introduction of user-facing bugs.\n\nI don't mind making your suggested change, as the behaviour of the non-db-error state of the code is unchanged. \nBear with me if you don't mind while I grasp the concerns, because it seems that the  suggested changes don't change the frecency query error behaviour either. \nFor the problem of the the frecency query being called without the temp table, we want to:\n- reduce the probability of this happening\n- reduce the impact when it does happen\nThis PR minimizes probability by assert() in non-release builds. \nAnd in release the query will fail \u2013bookmark and history completions will not show. This is my preferred level of user impact. If the probability is acceptably low (the code has reasonable defence), then I wouldn't want to mask the bug any further (not that I am sure how we would mask it further, I suppose showing old data, but we aren't discussing doing that).\nThe suggested changes regarding DELETE and 'CREATE IF NOT EXISTS':\n- In the case of a DB error where the temp table failed to 'DROP IF EXISTS and then CREATE': I don't think you are arguing that the change would handle a bad DB state better or reduce the chance of a DB error, which I mention to clarify your argument. \n- In the case of a code or lifecycle change introducing an error (which can only be createTempTablesForFrecencyQuery() not called prior), the suggested changes don't guard this -the creational syntax we are discussing for createTempTablesForFrecencyQuery() has no effect.\n. Thanks for that info, I'll change the DROP to the DELETE as suggested.. Agreed BTW to your suggested syntax change for greater clarity.. The above compute functions are just moved verbatim out of the history class.. This code was moved from history, and the includeFavicon param removed.. Should add a comment on this function.. Oops, need to remove this line. Sorry (many) tests are broken (I had a note somewhere above).. Nice catch, it is an accidental logic change.\nHmm, not sure about the '2 chars is the min title length' logic in that code \u2013I doubt we know for sure that 1 character makes for an invalid title in all languages.\nCan I keep this change?. Yes, I'll search for more usages I missed.. I like the \"string\".len syntax for clarity/safety. Right, I should have removed that entirely, will do. A cool swift way to get a string as an array. A better name yeah. But I don't understand the distinction between Frecent and Frecency. Can I just use the latter? (I wouldn't think to search the code for the word Frecent for instance). Apologies, this and the next comment: my level of sloppiness is really bad near the end of this PR cycle.. (me hangs head). . Agreed, I won't keep this.. @jhugman ping to decide on this. changing sqlite_master to sqlite_temp_master should have been in the previous commit. \nThat is the place to look for temp tables. This test fails, and the test itself makes no sense to me what it is trying to do, making it hard to fix.\nIt appears to expect frecency to coalesce on domain, which it doesn't. This looks like if should be a top sites query and not frecency because later it removes from top sites, and re-queries frecency expecting it to change.\n@rnewman help!. Prior to my commit, history.getSitesByFrecencyWithHistoryLimit() will abort (complains about a missing history.is_deleted) if a bookmark limit is set to non-zero and no url filter passed in.\nNew code has the same bug.. I would also need to re-introduce the 'side-effect' that depending on which overload one calls, the function behaves very differently. Not a big of fan of that, although if I am feeling desperate that may be the simplest approach. \nMy first thought on this is to try and clean up the bitrot, and that this test may be testing a use-case that is never called by the app, essentially doing nothing more than verifying this side-effect of a particular overload. . FrecencyQueryGenerationParams would be a clearer name. The query was computed in the pre-PR code no?. Fixed order.\nNot agreeing about tuple of params though, in this case I don't think the added variable setter abstraction here will reduce cognitive load reading this complex function, as referring to this block seems easiest to read and refer back to while reading the func.. Changed, not sure why this comment isn't collapsing, I better check this got pushed up. optional nit, I prefer: \nlet scripts = [(\"AllFramesAtDocumentStart\", .atDocumentStart), ...]\nscripts.forEach { (name, whenInjected) in \n  do stuff\n}. nit: indent looks off. Can we assert the glob() starts with firefox.js ?. np, ideally we would have a \"not the PR's fault\" tag/acronym for review comments. Can be very different streams of thought for me depending on that.. Is this an exact duplicate? Can this file go in 'UserScripts/' so it is shared? \nThen in this shared file we could comment as to why it is injected twice (because of PDFs not injecting at doc start). When the rules change, the lists need to be removed, re-added, and the notification sent for all tabs to re-install the active blocking rules.. Whitelisted domains go at the end of a rule set.. Never hurts to log more errors, I'll add that. will do. This is the simplest way I know of to expose an instance to the test framework, but it is a runtime check that isn't compiled out. \nPreprocessor flags would work for us because we have different build schemes for test, thus it is easy to have a -D UNDER_TEST and have #if UNDER_TEST. I'll mention in next eng meeting it might be useful for future to do this.. @boek this token gets injected into every script. . @boek this func requires the security token. SECURITY_TOKEN injection in the closure scope of the IIFE. Disable stats JS at first opportunity.. Changes from focus: I added the enable/disable block, and moved the postload js injection into a window.addEventListener(load). Double check if sentence should have a period (\".. on this page.\"). Double-check \"Block online trackers\" needs a period or not, thanks. As above check for period. Should 'trackers' have a cap? Or blocked be l/c. CopyAdress missing a 'd'. Yeah, not copy-pasted anymore, might as well change this message name and remove the comment, will do. Will do. Both classes keep a list of whitelistedDomains? Should only be one list no?. Oops, this was in the original code, looks like it is due to the separation of Focus code vs 'our code'. This seemed like a useful distinction when the Focus stats code was added, but I don't think it is anymore -we ended up with various modifications to integrate with our code.. oops, didn't mean to leave this on, but in retrospect, it is good to have it. Do you know is this just adding these files to the project, or adding them to a target? \n. nit: remove added empty newlines. Prefer: toggleTrackingProtectionMode(forPrefs:, isPrivate:)\nor inPrefs:. Either naming emphasizes that pref state is set vs per-tab state.. Better to maximize clarity that it is a Pref state change not a userEnable per-tab state change: \nsetTrackingProtectionMode(enabled:, forPrefs:, isPrivate:)\nAnd also to clarify that is is setting state for a specific current private/not-private mode.\n. prefer: isTrackingProtectionActive(_ tabManager: tabManager)\n(prefs is unused BTW)\nConsider adding a comment to explain that it checks the pref setting for the current privacy state and the per-tab setting. Helps the future reader with the considerations involved in what is a seemingly simple check.. Correct, we need subdomain ignored so that a page loads all the resources correctly, so the most-generalized domain we can use is best. \nRelated note: \nI am not convinced this working correctly for 3rd-party resources, but this PR implements whitelisting as intended based on my understanding. I am filing a follow up bug for this (still analyzing the problem to describe the bug).\nWe need the 3rd party loads to match that the parent domain is 'baseDomain', and also get ignored by the blocker. . TIL guard available -> very cool!. nit: newlines. Prefer: .didFinishNavigation. This won't work (not that I am aware of anyway). didFinish is for the main frame, web app frameworks hit this spot very quickly, then content is loaded async. I am skeptical we will find a tab event (or multiple events) to tie the icon to, I think the notifications will have to originate from the content blocking classes to reflect state changes reliably.\nHave the setter for the TPPageStats send a notification that stats changes (and pass the stats)?. instead: NoBlockedURLs  . If we have a Whitelisted icon state, do we also need a TurnedOffForTab for the per-tab setting?. didFinishNavigation, but as mentioned, am very concerned it will work. TabManager.shared ? I have awlays thought: it is a singleton, why can't I access it like one. Re-entrancy guard is needed, I should have caught this earlier. Alternative is to wrap the init code up into a class of its own, but seems like overkill. This is my boilerplate re-entrancy guard syntax, not sure if we have a specific style I should follow.. You were right, once the old whitelisting is removed, this function can be called minimally, no more isInstalled state needed as it isn't a concern anymore.. This is great, we need to land this and I'll rebase my patch on top of this code to use this event.. yeah I can remove it, it was a cleanup item, without it TabManagerNavDelegate has no access to the tabManager and has to go through the app delegate (which is used in old code in decidePolicyFor navigationResponse).. Correct, will rename to mainDocumentUrl for clarity. Whitelisting is performed based on the main frame domain.. Does using url.baseDomain not make sense. -> I was asked to match desktop, thus host (subdomain + domain). \nASIDE: I believe baseDomain should actually be called etldPlusOne to match desktop terminology but that is kinda ugly now that I read it.\n. Can you explain how?. Yeah, half the code has static scope and the other half per-tab, and could be re-organized around that, and now with TP moving from a rarely-used feature to highly-used, it has a role in the normal launch flow.\nI think this should be a follow up bug, I have other feature branches based off of this code I would like to finish before getting to that.. Yes unless-domain is correct, that is how the Focus code is written.. guard !RunOnce.hasRun else { return } is clearer? Confused.. If you find it clearer to create an immutable calculated prop I'll add it to the patch:\n```\nclass WhitelistedDomains {\n    private var _domainSet = Set() {\n        didSet {\n            domainRegex = domainSet.flatMap { wildcardContentBlockerDomainToRegex(domain: \"*\" + $0) }\n        }\n    }\nvar domainSet: Set<String> {\n    return _domainSet\n}\n\nprivate(set) var domainRegex = [NSRegularExpression]()\n\nfunc load(_ list: [String]) {\n    _domainSet = Set(list)\n}\n\nfunc clear() {\n    _domainSet = Set<String>()\n}\n\nfunc add(_ domain: String) {\n    var set = domainSet\n    set.insert(domain)\n    _domainSet = set\n}\n\nfunc delete(_ domain: String) {\n    var set = domainSet\n    set.remove(domain)\n    _domainSet = set\n}\n\n}\n. Please double-check I am using this correctly. just a rename cleanup here. nit spelling: suppress. spelling nit again with `supressPopover` and `shouldSupress`. nit: remove commented code. nit: not animation in this case; the bulk of our front-end code is not thread-safe. nit: selfs. Made convenience functions so that if someone needs to overrride setUp() and customize it without calling super.setUp(), they can easily call setUpApp() and/or setUpScreenGraph() as-needed in their overrride.. should this be removed?. remove `callback`?. does this need to return anything? (asking because of the `return false` above). there is `return false` above, should this return something also?. PresentationStyle options should be not have a `bottom` as it can be anchored from top or bottom. . Can we organize the contraints code into a single cohesive block? Because this is a 'make' and not a 'remake' it is very difficult to follow code that does additive constraints like this.. This check is in a few places in the code, can this be a getter that explains why a bottom popover has particular conditions over other combinations.. Oops, I didn't merge master into this branch, on master, 500 is the highest number in the UI.\nI'll rebase this on master and re-run the XCUITest for this PR and it should go green.. Actually BB will do the merge-to-master when running tests, and two unrelated ones failed:\nhttps://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5abaaf088fa911000112dbd8#tests\nRunning again anyway to see if I get a green build so that the Merge button on github becomes active.. I don't understand this line. For brevity, consider removing this line.. I have never done this, and it is a good idea. Maybe there should be a tiny bit more info about what to do here without too much hand-holding.. This terminology is confusing. Is it asking is the string user-facing?. We might have a link for exactly how to do this.. AFAIK, communicating the above items is ad-hoc, would be nice if said exactly how we would like this done.. I saw intermittent failures locally without adding this.. We need to wait until the history list has rows, not for it to exist. The rows are created async.. fix space. remove this line. BTW, the old value of 0.66 is too dark, I chose a value that appeared closer to the system's behaviour.. change to `self.extensionContext?` to avoid warnings. I grabbed this color from the screenshot from UX. headsmack! of course, fixing.. interesting, let me try quickly and see if it looks like a big change.. The trailing whitespace is needed for the animation or the pageInfo label moves. Even setting pageInfo label constraint to `greaterthan(the height)` as it is now doesn't ensure this label doesn't move during the animation. I'll add a comment to the code to mention that.. That said, it should be fixable, trying.... @st3fan skip this step if you want read-only. It uses the existing dialog that pops up to say the selected thing can't be shared. Which hopefully we can get rid of ASAP and implement text searching in the follow up.. The change above this line is just fixing indentation (lines 71-84).. I snuck in a fix for landscape mode. iOS automatically shrinks navigation bars by 10px in compact, I wasn't handling this properly before.. oops, this was never needed, I was experimenting with this function in my previous patch to see what effect it has, the answer is none.. I assume we have another bug here with keyboardAppearance? \nMove this code to the above if-statement to avoid force unwrap:\n         if let tab = selectedTab {\n             TabEvent.post(.didGainFocus, for: tab)\n             UITextField.appearance().keyboardAppearance = tab.isPrivate ? .dark : .light\n         }\n. nit: `} else {` is the style we use. However, this section of code has a lot of braces and I would find this more readable:\n let shouldFocusLocationField = NewTabAccessors.getNewTabPage(self.profile.prefs) == .blankPage\n self.openBlankNewTab(focusLocationField: shouldFocusLocationField, isPrivate: false)\n. Why was this needed? `topViewController` isn't the BrowserViewController?. What is this fixing?. These nested ummutable data structures make this code read a bit weird. \nOn line 88, the ` var pingEvents = outputDict[\"events\"]` grabs a mutable copy of the events. Then pingEvents gets appended to, then assigned back to  outputDict[\"events\"].\nThat is, `outputDict[\"events\"].append(..)` won't compile due to immutability. I can assign to it however.. Or not! I am pulling the branch and re-checking, and append does compile, hmm, let me try this again.... would be nice to change this block to\nif let imageView = cell.imageView {\n}\nit would get rid of a force unwrap on line 52. Can you change the `if finished` block to this to grab the BVC :\n if finished, request == nil, NewTabAccessors.getNewTabPage(self.profile.prefs) == .blankPage,\n    let appDelegate = UIApplication.shared.delegate as? AppDelegate,\n    let bvc = appDelegate.browserViewController {\n    DispatchQueue.main.asyncAfter(deadline: .now() + 0.6) {\n        bvc.urlBar.tabLocationViewDidTapLocation(bvc.urlBar.locationView)\n    }\n}\n. That bug doesn't seem to mention this so I added a bug https://bugzilla.mozilla.org/show_bug.cgi?id=1458903. getShareItem() was previously in the ShareViewController and is now moved up the hierarchy as the InitialViewController needs to set the height based on the type of share data.. Cool unicode open/close quotes. Need to consider non-English quotes though, will investigate what to use here. Most languages that use << >> quotes seem to tolerate English quotation marks also (French,Spanish), but likely some languages are stricter.. Adds fuzzy logic to see if selection is URL-like and has a TLD, if so treat it as an URL (which provides more options in the share dialog). A scheme is inserted if missing.. ASIDE: I am digging the non-snp way lately (because I can prototype stackview layout in Interface Builder using stackview properties and layoutMargins, and then when manually coded it will match IB behaviour closely):\nstackview.layoutMargins = UIEdgeInsets(top: , left: , bottom: , right: )\nstackview.isLayoutMarginsRelativeArrangement = true\n``\nDoesn't really apply to PhotonActionSheet as it doesn't need prototyping in IB at this stage.. The line above already sets the size to 40. nit: accidental CR maybe?. Code style is to avoid force unwraps, use:if let id = scratchpadPrefs.stringForKey(\"clientGUID\") {}orguard let id = scratchpadPrefs.stringForKey(\"clientGUID\") else { return }`\nOptionally, nil case handling can be roughly\n} else { Sentry.shared.sendWithStacktrace(message: \"a thing that should never be nil, is nil!\", ...)\nThe linter will catch these cases also.. This is a workaround. The navigator tries to long-press the tabs button and create a new tab, but instead 'New Private Tab' gets pressed incorrectly by the test runner. This method ensures the new tab is created and the app is on the home screen.. @jhugman I used a navigation to the home screen (using createNewTab) to avoid screengraph having to long-press the tabs button and selecting 'New Tab'. The bug is that 'New Private Tab' (in the long-press Tabs context menu) gets tapped by the test runner incorrectly.. This ensures the string never truncates. I am seeing another bug with the disclosure icon shrinking in width. This fixes it.. I didn't include a screenshot for this case. I'll try compression resistance .required, as long as the intrinsic size is correctly set to the icon width automatically when the icon is loaded it should work.. Is there any reason to add webView?.removeFromSuperview() here as an additional safety guard? Obviously it would be a fallback in case it wasn't removed. I couldn't think of a reason to add it.. ok this code is already somewhat defensive in nature, so an added line of defence makes sense here. changed to an assert(), developers can yell at me to remove it if there is false positives.. This is the critical fix. Add the URL to the receivedURLs list, which is safely processed later. The rest of the code is changing the receivedURLs list to be accessible here.. Does let button = TabsButton() work, or is clone needed? . The original code used sd_setImage so I see it got re-used. That is for downloading images, we can look into why it is being used here. . The code following this to copy the UIView to a UIImage looks correct to me, it should work but I think you mentioned it doesn't. . (The code does say iconURL, so I guess that isn't a file URI, but I am at a loss to recall what we would be downloading at this point in the code). I think having an image in-hand (the tabImage and then calling sd_setImage to download an image for iconURL is confusing, likely isn't working as expected.. Try not to use implicit unwrapped optional (or force unwraps in other places). We do this on member vars in some UIViewController code because Apple made it a de-facto standard to do implicit unwrapped optionals for the objects instantiated in viewDidLoad(). Even in that case we are trying to get out of that habit, because as the class complexity grows, the risk that code calls an implicitly unwrapped optional prior to initialization increases. . will do, any appdelegate use makes me feel icky. This is not the correct color. There is no way to specify an exact color with the iOS blur effect, so I am not sure what we plan for this. Their blur algorithm has low color preservation.. Why?. unrelated cleanup item: warning about using weak in protocol. Aside: removed annoying warning about no weak allowed in protocols. Oops! I am removing the ! members, fixing..... Please add a comment why this delay is here: \" Profiler.end triggers a screenshot, and a delay is needed here to capture the correct screen (otherwise the screen prior to this step completing is captured).\". unstage. Nit: remove this line. Cleanup item: remove need for var profile:Profile!\nI can't help myself! I must fix this when I touch existing code. . The above block of changes is just code cleanup.. We shouldn't touch this file directly, it is nimbledroid's.. We should decide on a convention, either wrapping Profiler calls in #if, or keep the conditional contained in Profiler. I prefer the latter.. This whole block can go in Profiler as a startupCompleted() function, and conditionally as @st3fan mentioned.. If delaying the Profiler.end is a common patter, then that function could have an optional 2nd argument for a delay time.. It prints useful profiling info as the app runs. I thought this would be useful for developers (maybe not so useful from Beta audience thought).. It is intended to be used with a known initialization point, not on-demand. Arguably this is a weak distinction as to why one would use .shared. singleton vs. using a required setup() call. . Good catch, we should only do this on master for sure. We can check with @npark-mozilla for the approximate upload time. I just found this works instead of a reloadData()\nif let rows = tableView.indexPathsForVisibleRows {\n            tableView.reloadRows(at: rows, with: .none)\n}. usesuper.applyTheme(), the base class handles live updates (if you want to confirm, change the display theme while the panel is open). Wishlist: empty panel state code commonized, then we can be sure the different panels have the same layout for this state.. nit: sites.flatMap { will avoid having let site = site. I would think this would be if not.... request a constant for millisToSeconds (if possible a note that sync provides times in millis, but maybe that is documented somewhere already), and convert to seconds before casting to TimeInterval (TimeInterval implies seconds-only according to its docs).. let sectionSyncAndRecentlyClosed = 0\nor \nenum Section: Int {\n case syncAndRecentlyClosed\n ...\n}. If using the enum  Sections code style, then that enum can have a static let count = 5.\nActivityStreamPanel line 159 has the example I followed for this style.. Move DateGroupedTableData to its own file?. recommend to encapsulate in enum Section ... \n```\nenum Section: Int {\n case a\n case b \nvar title: String? {\n            switch self {\n            case .a: return Strings.AAA\n            case .b: return Strings.BBB\n            }\n        }\n}. maybe this whole function will just beif Section(section).siteCountFor(groupedSites: groupedSites) < 1 return nil, or is that too odd?\nenum Section ...\nfunc siteCountFor(groupedSites: groupedSites): Int {\n  // if self is not a site section return zero\n}. Please ensure 100 matches the offset for the other empty panel states. nevermind, i was thinking the closure arg of flatMap was non-optional, and it isn't.. EDIT: nvm, I am sure you didn't change this code, and it is just moved . nit: `shouldLoadCell` or `shouldLoad(indexPath: IndexPath)`, isLoadingCell confused me as I thought this was a check to see if something was in a 'loading' state.. Should this be Int64 ?. [cleanup] Rather than two variants of close function (only one of which is ever called externally), there should be one unambiguous close function.. Hence the bug :).. nit: newline. I acknowledge this should be parameterized (not just a single formatted string). I am doing this quickly for this specific case for now, and because I have no idea if this even works yet ;).. G90A10 is the same color as the current one, G50.withAlpha(0.3). I changed this to use the former. This allows the color theme to control the alpha also.. This is the same as before. The grey 50 had an alpha applied that made it equivalent to this color.. can we do `= nil` and then later in the SQL`\\(bookmarksWhereClause ?? \"\")` ?. thanks, updated it. I believe I handled all these cases though. The` isRestoring` flag is passed along with the delegate notification, and TabDisplayManager has a new function `shouldAnimate(isRestoring)` that guards animations. \nTabDisplayManager has `tabManagerDidRestoreTabs` which then gets called when restoration is complete.. I noticed that too, I tried to leave code verbatim where I could to keep patch size down. Will change that.. Will do, out with the old in with the new. This doesn't crash: if let collectionView = self.collectionView, collectionView.numberOfSections > 0, collectionView.numberOfItems(inSection: 0) > 0 {```\nWe should probably get a super-review from @farhanpatel. I am not sure why  indexPathsForVisibleItems would be invalid when first shown at startup.. We can't change it yet. That deprecation happens in iOS 12 SDK. The constructor in that article doesn't exist on our SDK at all.. TIL: collectionView.reloadData() == collectionView.reloadItems(at: collectionView.indexPathsForVisibleItems)\nThey are equivalent according to\nhttps://developer.apple.com/documentation/uikit/uicollectionview/1618078-reloaddata\nreloadItems is for updating part of the visible screen. explicitly specifying a .serial or .concurrent would help clarity. I assume this is .serial, because I know our individual DB queues are serial.. not sure this is needed, see below. OperationQueue.current?.underlyingQueue.suspend() should work instead of storing a variable for this. no early return here if the db is closed?. Oh I recall that now, I think I make this same comment every time anyone touches this code. Odd API!. teeny nit: considerdeferred.connection = connection here (I expected it here, and had to look back for it in the earlier 2 spots). is now  TabManager(profile: profile, .... I think I should block only \"firefox://open?\" urls. We also have \"firefox://fxa?\" urls and \"firefox://deep-link?\" urls. These might end up in emails that the user views in-browser.. Cool, will leave as-is, more restrictive is good in this case. Direct modification of _selectedIndex is risky. Anyway, just this line is the fix, the rest of the code is a cleanup for readability. In this case, the HOF obscured the flow of the function, but that is an opinion of course. At minimum, the cleanup could be to have a guard precondition at the top and remove the if-statement complexity.. The original code is only making a boolean decision on whether any tab is more recent than the parent (which was difficult to decipher from the syntax).\nHence I addedparentTabIsMostRecentUsed, and this loop early-exits if that is found to be false. Ideas welcome on how that would be made most clear to the reader. . let expectation = self.expectation(description: \"waiting for db result\"). above this line add expectation.fulfill(). waitForExpectations(timeout: 10, handler: nil). Sounds good. Modifying the scheme to run XCUITests is an extra step I was hoping to avoid, but we'll have to go with this approach.. Fix 1: make sure to clear the archive if there are no tabs to serialize.. Fix 2: put the work on a serial queue. The previous concurrent queue has no guarantee of order of work, two preserveTabs in quick succession could have resulted in the first call happening second.\nImprovement: Guard the rate that preserveTabs can be called. . layoutSubviews seemed like a reliable place to pick up the current tint color, I couldn't find a better candidate.. This is how the code was originally (I had moved the IsRunningTest to bypass the whole function).. minor cleanup, change to calculated var.. Key part of this patch was to remove the added state management of this variable. (Note also this was non-weak). This is the cause of the bug. This variable is not maintained correctly, I didn't dig into why very deeply as the code clearly didn't need it, and we should not be introducing more state into TabManager as it already has complex state management, and specific functions only should be called to modify that state (an example would be: don't modify selectedIndex directly, only call selectTab()). Likely the non-weak state contributed to the bug reported. Even without 'close all private tabs' enabled I had switching tab modes break using this button, it would stop reporting private and public modes correctly.. This will pick the most recent tab based on lastExecutedTime from normal or private. The nice thing is this will work after an app restart also.. I commonized the code for picking the most recent tab that was in selectParentTab(). . nit: I added this cleanup item. Thanks for checking. Maybe in future this could be a nil instead, I would like to see less state vars in here. There is a new utility function to get the most recent tab for a given mode, so maintaining previous tab can be removed also.. Slightly lower the alpha, I think this is  a closer match to the intended color.. nit: no else clause needed. nit: no else clause needed. tableView.allowsSelectionDuringEditing = true. cell.selectionStyle = .none. No one called notify: false, but that isn't the only reason I removed it.  It is confusing API design to have the TabManager optionally call delegates, it should always call the delegates but pass along the requisite info so that they decide if they want to take action. . This is the fix, the rest is just refactoring to ensure (and clarify) that the finish block is always hit.. This code should only call back with a color, not the URL passed in which is never mutated.. oops, didn't mean to commit this. todo: put this in the right place. TODO: To handle the concern of lots of operations happening at once and piling up (I not sure how this could happen, but in case it does) \nif operations.count > 5, just clear the operation queue and reloadData(). Maybe isAnimating should be called performingChainedOperations since it is only for checking if this function is running.. Technically, the code is never called with a list of private tabs, but it is clearer to keep that support.. This is the bug. This gets called after async op. Async op happening here. Assigning to a WeakList<>? IIRC there was no overload for that, I could add one if needed. This does suggest the reader that this isn't just a normal array so I didn't mind that.. nit; in case we want to quickly change loading (maybe for debugging, or sentry logging):\nfileprivate func loadJS(_ name: String) -> String { ... } \nlet WindowProxyJS = loadJS(\"WindowProxy\")\nlet BrowserEventJS = loadJS(\"BrowserEventJS\"). +1 to commenting these placeholders, makes it much easier to read. Agreed I could format this better. This recursive function is intended to follow standard recursive termination style of: \nfunc recurse() {\n  if conditionToExit { return }\n  doWork()\n  recurse()\n}\nLet me make that clearer.... (patching now...). As a method of loading an app-local resource into the webview, I like the simplicity of having the WKURLSchemeHandler load the CSS and inject it.. Lazy nit: The CSS injection barfs on apostrophes in comments. I should do better.. The final case here is that the URL is internal and has no 'url=' query param, we don't show these.. I don't see why we distinguished certain types of internal pages from others (that is localUtility pages vs local pages). I suspect this is a legacy thing. Any internal page should not have a progress bar.. Less confusing to always fire this, and moving it here makes the check on line 1110 simpler.\nI didn't think the comments were informative enough to keep them \u2013it is evident that this is a reasonable spot to fire this and the async callback to the helper is 'known behaviour' also.. Cleanup only. Above code is essentially unchanged, I just changed it to a guard precondition.. The changes to didRestoreSession are a cleanup item. Stop using a notification. The clipboardbar is directly accessible from BVC and it requires a single function call to replace this notification code which is in a few places.. We use these constants everywhere.. This function is used when returning a webpage with the custom scheme, and we want to theme the background. It turns the UIColor into a hex string for html use.. Ugh, request.isPrivileged won't work here. A session restore can push an error page onto the history stack, so we just get a request that came directly from the webview. I'll file a follow-up bug to deal with this.. The bulk of this file is just porting over from the old system, and is unchanged (the diff isn't helpful). I will make notes on the changes.. This line was changed, but only to use the new redirection method.. I added this block to inject the css into the html. This class is unchanged, except for minor syntax changes.. Also unchanged.. Previously this hooked into a notification; when I updated session restore code I saw this notification wasn't needed, we have a direct way, which is to call clipboardBarDisplayHandler?.didRestoreSession(). maybe should be called migration? I have it also healing malformed nested internal urls, I wonder if GCDWebServer was silently handling these. I need to investigate this further if I can repro this case again.. Good point, I'll remove these, there are ~10 related to this code.. There are a few shared utility calls so I left it here. But you are right this should be made to work stand-alone. If you don't mind I'll leave it for future when I hear more about the plans (and potential need) to share this code.. @justindarc this is the code that catches internal:// CSS files and loads them.. nit: A better comment 'Change to https:// and try download them or try to load the resource from the app bundle'.. Hmm, I don't like this code, we should list the exact resource one can load here, rather than an aribitrary resource.. Less code is good! will remove.... return needed for this block?. maybe check if tab.consecutiveCrashes is unchanged before setting to zero?. nit: func finishOnChanged() { <common code> } above this line, then in onChanged \nself.currentChoice = ...\nfinishOnChanged(). nit: ReaderModeButtonWidth (or ReaderModeHitAreaWidth), unless I misunderstand and this is the size of the icon in the button. The original conditional was too difficult to grok, I had to make this more verbose for my sanity.. nit: in retrospect, there are a lot of these stand-alone 'isInternalScheme' checks, maybe one added URL extension function for isInternalScheme is good to have just for these cases.. Sorry, was for reader mode experimentation, will clean this up now. It was. I have a theory as to why. Because the error page mechanism was in place and then re-used to do session restore handling, and that grew to a much larger body of code.. I commonized all this code into a webview.replaceLocation() that makes all the usages safe. I think I removed that constant; maybe have to use URL(string: AboutHomeHandler.path). Sorry, I messed up those URLs, I fixed them up and re-pushed now.. accounts. Methinks this function is no longer returning SLD-only. I would think our test cases would fail with this change.\nOr, to make this change do:\npublic var hostSLDAndNormalizedSubdomain (sigh, the verbose naming convention for stripping www|m subdomain is PITA, I am at a loss for another naming).\nand change let baseDomain in this function to normalizedHost.\n. Update please.. More descriptive naming I prefer, but this is specialized so ok with me. \nMy fantasy is that when we push Shared to a dedicated repo, we get collaboration from other users as to how to improve the naming conventions in this file to avoid ambiguity. I forgot to ask Santa for this.. oops. Agreed, I put the follow up bugs in the description: https://github.com/mozilla-mobile/firefox-ios/pull/4458#issue-243024490. Ensure plenty of lines for translation (beyond 4 full lines the font will shrink).. There aren't handy UISwitch size constants I could use here, these size values are arbitrarily larger than the switch.. This will run 1000x, how long does it take? Preferred to keep perf measurements in the 100ms range to keep test suites running quickly.. Nice! This reveals whitelisting is broken due to the conversion of the domain fragment to a regex. (\"e.com\" should only whitelist the \"e\" host.). If you can update it that will be better as it won't look like a there is a bug in the code.\nI am going to keep that follow-up bug filed, and explain more of my thinking, which is the code should be more defensive to handle unexpected domain inputs and not create wildcard regexs that could match a domain fragment.. A <50ms test SGTM, thanks for clarifyling!. I added more info to the followup bug https://bugzilla.mozilla.org/show_bug.cgi?id=1523389#c1. Consider instead only calling the asyncAfter hook if the if let nativeLongPressRecognizer = fails. Although I am not convinced that is any more reliable that this method.. Will do!. Also will do!. nit: remove this. nit: consider guard ... else { log and return nil } instead. +1 to _ = for  indicating this is an async op and it is intentional to let it run without needing to wait for a result. (Rather than making the result ignorable, I am not a big fan of that in most cases). Could have been a deferred, but it seemed simpler in this case as a completion block.. There is Strings.LoginsAndPasswordsTitle, ~however, the accessibility label should have stayed the same as it is set here:\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Frontend/Settings/AppSettingsOptions.swift#L757~. Edit: sorry my comment is wrong, that link is for the Settings button accessibility label. Maybe that should be updated too, not sure.. I fear only Unicode and Dates :), please double-check the spec so time is as-expected (i.e. isn't a time interval from now or something odd). Perhaps: oauthKeyID(for scope: enum type); an enum instead of String. delegate is not used. When the megazord arrives, this will be init(queue, path, key), that is the queue will be created globally and passed in to each component so that they use the same queue.. nit: guard preferred here. Optional, for some reason I am nerd for this forEach syntax\n[(shmBaseFilename, \"-shm\"),(walBaseFilename, \"-wal\")].forEach { (file, extension) in\n  let dbPath = databaseContainingDirURL.appendingPathComponent(file).path\n    if FileManager.default.fileExists(atPath: dbPath) {\n                    log.debug(\"\\(file) exists.\")\n                    try FileManager.default.moveItem(atPath: dbPath, toPath: \"\\(bakDatabasePath)\\(extension)\")\n                }\n}. nit (optional): I think just _ = works. if let here to avoid the ! ?. There is a constant for this: AboutHomeHandler.path, but you would still need to add a slash at the beginning of the path. oops, need to remove this. This is necessary to show/hide the settings buttons when in search mode. They are hidden by setting the row height to zero.. This comment is wrong. One header is shown at the start of the first logins section.. nit: add a comment that this is the title header, \"Logins List\", on the first logins section. Previously, applyTheme was happening in init, but to enable the use of properties that can be set after init we want applyTheme to happen in viewWillAppear (or similar). This is a UIView equivalent to viewWillAppear, except it doesn't keep getting called when the view is hidden and shown, which is fine because we don't use applyTheme() like that anyway.. The filter is no longer case-sensitive. I think this was an oversight in the old code.. i did a rebase, not sure how this appeared, crazy!. I fixed up the rebase on the patch, is ok now.. oops, we always have one section at least, to show the settings rows.. The changes here are all cosmetic, related to smoothly re-displaying the hidden settings cells.\nThe hiding of the cells looks ok to me, but re-showing is ugly unless the cells are faded in.. This was an oversight in my previous PR. Oops, should have a reuse id for a table view like this with lots of rows.. Without setting isHidden, the row doesn't fully disappear sometimes. I thought just setting the row height to zero would be enough, but that isn't the case.. The crash was due to trying to delete section number 0, rather than starting from section 1. Nope, just minor compat changes.. The existing NSLocalizedString was here, so I followed suit. Perhaps all the NSLocalizedStrings in this file should be pulled out for consistency.. For the login details view, which has date modified and created, we want the date formatted with a 'medium' style which uses a 3-letter month, instead of a fully numeric mm/dd/yyyy 'short' style. \nAlso, the UX spec wants the time shown for the modification date but not the creation date, which is easy to achieve by adding the timeStyle param.. Like so:\n\n. Probably is ok to not be themeable, but perhaps should be a Photon color?. append this case to the above case, IIUC, they are the same. nit: spacing on operators. Also comment on what div 4 plus 10 is (or perhaps there is a constant that the 4 is related to?). nit: newline. nit: i think 2 newlines triggers lint warning. nit: spacing on operators. nit: remove?. Should this be a themable color?. view.title set color to a UIColor.theme.somecolor ?. teeny nit: on / I think swift lint will complain about lack of space around math operators. \ud83d\udc4d to this block being here if needed.. I updated the naming of that and the boolean used, to be clearer.. This will never get called, all URLs here must be a internalUrl.isSessionRestore type. I think we just remove the tabManager.storeChanges(), I don't know why it is needed here at all.. nvm, this catches the history push nav cases that don't call webview.didFinish (which normally is where storeChanges() is called from). Can you add a comment?. \"3 sites, with 4 visits per site\". Checking if this tab is selected is not necessary, and probably better not to check that in case the tab is de-selected but we still need to install the gesture handler.. ",
    "LeoNatan": "For anyone interested in a private API solution (for custom builds), there is a _userContentExtensionsEnabled property on WKWebView, which enables use of system content blockers. Use setValue:forKey: API to set it to true.\n. ",
    "laeryn": "I second this\n. ",
    "Districtfine": "I'd like to see this feature as well, even putting a tabs option in the hamburger menu at the bottom would be a godsend. ",
    "teddybradford": "This would make browsing so much easier and faster, especially for people with large phones.. ",
    "yatli": "+1, not having bottom tab bottom makes it impossible for me to switch tabs with one hand.. ",
    "StefanoCecere": "this is solved in Firefox iOS 10 (beta today), right? can we close this issue?. QUESTION: are these GitHub issues useful? or should we use Bugzilla? to duplicate things is not good, right?. :+1: thank you Aaron! \nit's a so basic feature that i was going mad about not making it work!\n. seems will be included in next release! https://github.com/mozilla/firefox-ios/commit/ae949e63eb9f8d6fa302527131f0284246a3036c\n. ",
    "egogo-nl": "I would also like to see this feature added.\n. Are there any updates on this? I would really like to use this feature.\n. ",
    "acaranta": "bump .... That would really be a enhancement ....\n. ",
    "deruli79": "Agree. This is really the main feature for me to leave Safari behind...\n. ",
    "dprandzioch": "Has there been any progress on this topic? I'd really love to see this feature as FF would be the only browser to support self-hosted sync across all necessary devices.\n. I'm not that experienced in iOS development although I did some work in own apps already. If there's something I can help you with, please let me know.\n. Just a question, is this already in the released version in the App Store? Could not find the option.. Would also be really interested where to find it, but sadly there\u2019s no reaction for over 4 months now... . This is imo related to #3150 which is about using a self-hosted tokenserver without having to have a set up a full FxA stack that's only barely documented.. @rainforest1155 @r-sherwood Did you make any progress in setting this up? I'm also running a custom sync server but it seems like there's currently no chance to use this on iOS if you don't run a own fxa stack, which is sad because there's no usable documentation for mere mortals on how to set this up. :-/. @r-sherwood / @rainforest1155 Is it only about this small code change? Then maybe someone who's deeper into that topic can open a pull request, if this does not destroy any existing functionality.. Is there any way we can push this forward? I'd really like to see this feature but it's now unresolved for more than a one year and without much traction. If I can help anyhow, please let me know. Sadly, I don't have enough of an overview over this codebase to open a PR on my own.. This would be really great to have.. ",
    "schrorg": "Unfortunately I will not have the time for it during the next weeks (summer vacation, lots of other work to do...).\nI will definitely keep this in mind because I still need this feature personally.\n. ",
    "mehdicopter": "Any improvements on this feature ?\nI'm also interested to point to my self-hosted ffsync server.\nThanks.\n. ",
    "kwitaszczyk": "+1. ",
    "iron77": "I would love to see this feature being implemented as well. Shall we put a bounty on it? Any specific service you guys would recommend for this?. OK, I just started it out at Bountysource. Feel free to contribute! :)\n. @schrorg Would you consider renaming the issue topic to include \"(Bounty)\" in the front, so it would be more noticeable for anybody who just looks at the list of issues?\n@mrjovanovic Now you have a chance :).\n@ All other guys, if it's something you want to see being done soon, I'd suggest to drop few bucks on it as well :). \nAlso, I wonder if there's a good place to advertise the issue once the bounty gets big enough? Maybe Mozilla iOS IRC?. @hb2708 thanks for your interest.\nI might not be fully aware of how this iOS app works under the hood, but from the user perspective, I can tell you which configuration options we need there to be present.\nBringing desktop Firefox as an example, to run own Firefox Sync server, you go to about:config and set up some options pointing to where your server is. As per https://mozilla-services.readthedocs.io/en/latest/howtos/run-fxa.html and some of my testing, the options are:\n\nidentity.fxaccounts.auth.uri\nidentity.fxaccounts.remote.force_auth.uri\nidentity.fxaccounts.remote.oauth.uri\nidentity.fxaccounts.remote.profile.uri\nidentity.fxaccounts.remote.signin.uri\nidentity.fxaccounts.remote.signup.uri\nidentity.fxaccounts.remote.webchannel.uri\nidentity.fxaccounts.settings.uri\nidentity.sync.tokenserver.uri\n\nI'd expect iOS app (both iPhone and iPad) to also give you some way, somewhere in UI, to set these options to custom values. \nFor the record, it was about a year since I last digged in that documentation, so in case I missed any option which might also be required these days, I'd appreciate the comment.. @hb2708 I can try to explain it as easy as possible. Just so I better understand where to start, can you tell me:\n1. Did you ever used Firefox Sync:\n   - Mozilla hosted? (default)\n   - Self-hosted?\n2. If none of the above, do you have a basic understanding of what Firefox Sync is?\nSorry if questions above sound a bit stupid, I want to be fully sure we're both on the same page :)\n. @joeyg I believe this is it! Looking forward to test it at my iDevices once it lands the App Store.. Hi guys,\nFirst, great thanks for moving this issue forward!\nNot sure if this is a good place but perhaps I'll try to ask: I now have installed Firefox 9.1 on my iOS 11 and I am wondering if custom FxA servers configuration have already been pushed into production, as I cannot find it anywhere in the settings? \nAnd if it is in production - is it possible that I do not see it because I never used Firefox Sync on this iOS device, so I don't have access \"Account Settings\" menu, instead having just a \"Log in to Firefox\" on the top of the Settings menu in iOS Firefox? Do I need to create a dummy Firefox sync account in official servers first to be passed in there and be able to change servers later?\nAnd also, it seems like our Bountysource pot have not been claimed yet. @vbudhram, do I understand correctly you're the one mainly responsible for making it happen? :). @ctsrc @dprandzioch Yeah, I couldn't find it as well. It's little tricky, but fortunately it is deployed :)\n\nFor Firefox for iOS version 9.0 or later:\n        Go to Settings.\n        Tap on the Version number 5 times.\n        Tap on \u201cAdvance Account Settings\u201d\n        Enter your content-server URL\n        Toggle \u201cUse Custom Account Service\u201d to on.\n\nAs per: https://mozilla-services.readthedocs.io/en/latest/howtos/run-fxa.html. @Findus23 AFAIK, you're correct. I'm trying to work out an Ansible playbook that deploys all the microservices to a working FxA Account Server + Syncserver setup. If succeeded, I'm looking to share it at github so someone more knowledged can improve it further :). There are few already there but they don't work with latest FxA repos.. ",
    "mrjovanovic": "+1 Would chip in on the bounty as well.. ",
    "dsabanin": "+1 I joined in. . ",
    "m8mble": "I've filed bug 1344536 for this. Starting to work on it.... ",
    "hb2708": "Hello All.\n@schrorg @iron77 \nTo Cut the story short we all want the option to change the \nSync15Configuration  -> tokenServerEndpointURL  URL From the UI front.\nPlease Correct me if i am wrong.\nWould Love to start working on the same. If any one have not yet started.. @m8mble  @schrorg  @iron77  Thanks but I am not aware of it on desktop.\nBut i can surely make it possible on iPhone and iPad apps.\nIf any can explain is some easy manner i would be grateful.\n@cdubz So it means it's implemented or yet to be implemented?. ",
    "cdubz": "Note that 1344536 has been closed and marked as a duplicate of 1204411. @st3fan, please remove the needs bug label.. Still yet to be implemented and doesn't appear to have any traction in Bugzilla. I was just noting the updated bug number there.. ",
    "cwm77": "Hi,\nthe only setting which needs to be changed to be editable is the analogous option to identity.sync.tokenserver.uri. In all other OSes (MacOS,WIN,Linux,Android) it was seemingly implemented at a easy way, only in iOS it seems not to be hassle-free. FF at this OS has obviously not as much in common with the other Implementations. A bing thank you in advance to the people who are in charge of this!. By default, Firefox will use Mozilla\u2019s hosted accounts server at https://accounts.firefox.com. This configuration will work well for most use-cases, including for those who want to self-host a storage server.\n\"The #3088 doesn't permit this.\" Unfortunately, this is true.\nhttp://moz-services-docs.readthedocs.io/en/latest/fxa/index.html. And just another push. iOS is the only OS missing this feature within Firefox. Mac OS, Linux, Windows and Android has it since years.. ",
    "rgschi-tgm": "Giving this another bump since I just upgraded to iOS10 from 7 to get Firefox on my iP. Now this missing function disappoints me a bit. \nIt cannot be in any way too hard to code, seems like a couple of lines only.\nThe problem I see would be getting this code into a release. Are the maintainers willing to accept \"foreign\" code?. ",
    "joeyg": "Is this issue resolved now that https://github.com/mozilla-mobile/firefox-ios/pull/3088 has been merged or is additional functionality that needs to be added?. @garvankeeley Thanks for taking a look at the PR!\nI believe the user is presented with the permission when the QR Scanner. We can make the option more dynamic and only show it if the user has a camera and has not explicitly said no camera permission. Let me know if that is a use case we want to support.. @jhugman - Re:Testing - That's correct, you have to sync a Livemark from desktop to test this feature. I had planned to add subscribing to a Livemark from mobile in a separate PR but maybe that is too confusing. . @st3fan - Thanks for taking a look at the PR and I understand the product concerns. This PR comes from a desire to improve the app's subscription functionality and there are certainly numerous ways to do that. Do you know if this is an area that the Mozilla Product Team is interested in discussing? Hopefully a single vision can be implemented across desktop and mobile apps.. Updated PR to include Icons from @tecgirl. Thanks!. Screenshot of PR with latest icons: \n\n. @rnewman Here is a screencast of the functionality for removing folders. In it I navigate to the inner folder, delete the outer folder, pull to refresh and then navigate back out. http://g.recordit.co/DpOHtfwrGQ.gif\nIt seems like a reasonable experience to me but let me know if the user experience should be something else.. @jhugman Let me know if you need some additional changes to this PR.. @rnewman I added a Kif test for this feature but let me know if it XCUITest is preferred. . Oops! Sorry for the ping. @jhugman - thanks for the clarification on the tests. I\u2019ll make sure to make them XCUITests in the future. . @farhanpatel Ahh ok. Is there sole docs about the expected behavior somewhere? I had expected pin to top to turn into a remove button. I\u2019ll fix up the PR and add some tests early next week. @faranpatel got it! I can update the pull request to match history and bookmarks. Are there bugs filed for the additional functionality to remove pinned sites from the browser action menu? It would be a good feature for a future release. . @farhanpatel Thanks for the feedback! I've updated the code an added an XCUITest.. @farhanpatel Updated PR based on the UI instructions above. Let me know if I didn't interpret them correctly. Here is an updated screencast: http://recordit.co/WDBUH5INK2. Thanks @farhantatel!. Ah i'll fix that.. @farhanpatel pull request for the display fixes is #3276. Is there a daily or beta build distribution list I could be added to or is all testing done off local builds?. joe.gasiorek@gmail.com. @jhugman sorry about the changes to NoImageTests I wrote the PR while those were not passing. Merge master in so that is no longer in the changest.. Ah good call. will test that. . UPDATE: This should be resolved now by the latest commit.\n@farhanpatel The SimpleToast seemed to work fine in iPad when it came from the action menu but it does not behave well when you add a search engine. Not entirely sure why this toast exists as the new search engine is listed first in the list but here is a screenshot:\n\nI'll work on trying to fix that up unless we want to drop that use of the toast.. @farhanpatel Sorry about all of these issues. I'll try and take a look. Good catch! Do you have any guidance k. The best way to write tests for this feature?. @farhanpatel I tried to write the test without modifying the signature. Let me know if you think this is a worthwhile test or if it should be done another way.. @farhanpatel sorry about that latest diff. There was certainly some async test stuff going on there with stuff passing when it shouldn't have. I updated the signature like you suggested and the test now checks to see if the data was refreshed.. Is there an appropriate Long press menu option?. Is there a standard error view in the app?. @rnewman I tested deleting the folder that is selected and all that is displayed is the Header linking to the parent folder. I have not yet tested deleting the parent folder of the current folder - I can take a look that when I have some time.. This results in Cannot use optional chaining on non-optional value of type '[Site?]'. I think I changed this to an optional because the passcodePane value is set after super.init is called. This was because authenticationInfo is needed to initialize passcodePane and is setup in the super class. I'll look into restructuring it without the optional. agreed.. hmmm yeah i'll look into that and figure out what is going on.. Not really async but just a poorly written test. The test was originally looking for didInvalidateCount to be zero to verify it hadn't been called. This was also true before it was called. oops :). I think if we change forceHighlights to highlightsRefreshed that will cause additional calls to ActivityStreamPanel.reloadAll because there are cases where highlightsRefreshed is true but forceHighlights is false. \nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Frontend/Home/ActivityStreamPanel.swift#L611. Sounds good. I'll update the PR with that change.. ",
    "stek29": "+\n. But mobile screen is pretty small, and adding more bars would be strange solution.\nI'm sure that adding button near tabs or long tap on star would be better.\n. ",
    "etiennesegonzac": "@sleroux saw your comment a bit too late, did https://github.com/mozilla/firefox-ios/pull/1304/files#diff-4b55209fd9d15aff4987f5bd3aa91e20R58\nlooking at the static footer instead\n. @sleroux new version with the rename and setting the footer on the tableView itself.\nAlso fixed the same issue in the Search Settings (spotted it while doing the renaming).\nLeft the prepareForReuse in but should be safe to remove now, let me know!\n. on it\n. ",
    "chardis": "@st3fan \nHi, Stefan,\nI have modifed the code for your comments. Please review again.\nThanks.\n. Sure, I agree. Where can I initialize the value of pref? \n. Ok. Now could I use NSLocale.currentLocale() instead?\n. OK, I will use ChinaSyncServiceSetting instead of accountServiceSetting\n. OK, I will use useChinaSyncService instead of accountService\n. Taobao.com is the most popular website in China, and they use the class UIButton to display their content. If we change the background-color on UIButton, the content will be covered. UIButton is just used in taobao's website, so we set a special rule on it.\nBecause the website is different between China and outside China, I need go back to Beijing to reply the detail for you.\n. About line 751, we will file a new bug to fix it, how do you feel about it?\n. ",
    "aterribili": ":+1: \n. ",
    "gavinsharp": "I messed this up, let me try again.\n. Relevant #mobile chatlog: http://logs.glob.uno/?c=mobile#c548157\n. Good catch on the tel: issue, that was a regrettable oversight on my part! I fixed that bug.\nI don't think there is a good way to \"tell the content JS\" in this context, since they are just trying to launch a URL. But let me see if I can play around with this more.\n. ",
    "TETRA2000": "I updated my PR.\nThank you for your detailed explanation !!\n. @st3fan @fluffyemily Thank you very much for your review!!\nI fixed the patch. And also fixed the previous commit message.\nAfter you confirm this, I'll squash these two commits.\n. @sleroux\nThanks to your review, codes in this patch became far more beautiful than before!!\n- I fixed this patch according to your review.\n- I also changed the HandoffManager.swift's position in alphabet order.\ndiff after your review\nhttps://github.com/TETRA2000/firefox-ios/commit/2063883b1f74ecc0ab9c9efa4bcc291d82a122c4\nThank you!!\n. @sleroux \nThank you very much for your testing!!\nI agree with adding validation for http/https.\nSoon I\u2019ll update my patch.\nThanks for pointing out these problems.\nThey will really helpful for me to improve the patch.\nI\u2019ll confirm and fix soon.\nI've already succeed to ran this app on my device.\n(Screenshots of my test scenario are also taken with a real device. I used QuickTime.)\n. @sleroux \nI updated my patch to validate passed URL.\n\nI also noticed that in the scenarios you described above regarding stopping Handoff when in the Tab tray that Handoff still appears. I ran the build on device, opened a new tab and went back into the tab tray and was still able to open using Handoff on desktop.\n\nI think this is a timing issue.\nAfter returned to tab menu, it will take a few seconds to disappear app icon in task tray.\n\nLastly, after opening the tab using Handoff on desktop the app becomes unresponsive. I have a feeling that these issues might only be occurring on device and not on the simulator. Are you able to run the app in the device? It can be challenging at the moment with how our configuration works but I can assist in getting that to work if you need help debugging.\n\nI tried to reproduce this issue but I couldn't.\nPlease give me more information.\nDesktop browser name, iPhone model type, OS version, URLs, etc...\nThank you!!\n. I rebased my patch with latest master.\n. @sleroux Thank you for your information!!\nWhile I'm checking new changes of Spotlight/3D Touch, I found that these changes already enabled Handoff. But there is some problems like, \n- Clicking the Handoff icon after I opened preference page in my device, pref page crashes.\n- Clicking the Handoff icon while using incognito tab, tab crashes.(And sends wrong link.)\n- The Handoff icon still appears when I opened blank tab.\nI also confirmed these problems on release version.\nI'm finding solution for these issues.\n. @sleroux Thank you very much!!\nIt's more beautiful and readable.\nI also changed other similar codes.\nShould I combine these two commits into one ?\n. @sleroux\nI considered this operation.\nSteps\n- 1. View a web page. (not blank tab)\n- 2. Press the tab switch button. (on the right top)\n  - 2-a. Press the config button.\n  - 2-b. Press the Incognito Mode button.\nI think handoff should stop in the following situation. \nThis code is intended to stop this.\n2.\nUser may not understand which page in the tab list was sent\n2-a.\nSending a link while showing the config page isn't intended.\n2-b.\nUsers may misunderstand that link of incognito page was sent.\n\n2\n\n2a\n\n2b\n\n. ",
    "m-beau": "Hey,\nI'm bringing this issue back up - this could definitely be done on the Ipad iOS version of firefox.\nIn particular, it is pretty annoying to need to click on 4 buttons (star icon>Desktop Bookmarks>Bookmarks Toolbar> list of bookmarks) to access the bookmarks present on your firefox desktop's toolbar when you surf in firefox iOS. Having a dedicated toolbar pulling up these toolbar bookmarks like on the dektop app would be a major step forward.. ",
    "fedemengo": "\nHey,\nI'm bringing this issue back up - this could definitely be done on the Ipad iOS version of firefox.\nIn particular, it is pretty annoying to need to click on 4 buttons (star icon>Desktop Bookmarks>Bookmarks Toolbar> list of bookmarks) to access the bookmarks present on your firefox desktop's toolbar when you surf in firefox iOS. Having a dedicated toolbar pulling up these toolbar bookmarks like on the dektop app would be a major step forward.\n\nSame opinion here. Do you think this is something you might consider in the iPad version?. ",
    "Profitsarts": "the only reason I never got back into Firefox from Safari is that. Getting to favs is really annoying frustrating and is too far to get there.\nThere's another thing I'd love to get, obviously, iCloud tabs, but maybe that is Apple's own tech locked up.\nAnyone knows extensions alternative?. ",
    "mystic123": "Well. I don\u2019t know. This is my first pull request ever.\n\nOn 21 Jan 2016, at 21:18, Aaron Train notifications@github.com wrote:\nThanks for the PR. Does this need product team decision?\n\u2014\nReply to this email directly or view it on GitHub https://github.com/mozilla/firefox-ios/pull/1457#issuecomment-173696103.\n. \n",
    "egirsova": "+1 I'm getting the same issue with a fresh clone of the project as well.\n*** Checking out Alamofire at \"2.0.2\"\n*** Checking out Base32 at \"d2136486487a77336ae18b1bd2f9a3f689ec44e5\"\n*** Checking out Deferred at \"2.0.1\"\n*** Checking out GCDWebServer at \"3.3.2\"\n*** Checking out google-breakpad-ios at \"da0576e03efe9e921f8ed08126d99c7fe6f75e8d\"\n*** Checking out ios_sdk at \"v4.5.0\"\n*** Checking out KIF at \"v3.3.2\"\n*** Checking out onepassword-extension at \"22d595de49f6f2ccd18d0087ef80a4b0c9311c13\"\n*** Checking out readability at \"7be3ccb57e9f16bc8ce70257e762b3b6ee8961ed\"\n*** Checking out SDWebImage at \"3.7.4\"\n*** Checking out SnapKit at \"0.18.0\"\n*** Checking out SwiftKeychainWrapper at \"e3805fbdef595151f299b2b8c1b89760fc711395\"\n*** Checking out SWXMLHash at \"2.1.0\"\n*** Checking out XCGLogger at \"Version_3.2\"\n*** xcodebuild output can be found in /var/folders/cb/769nmrzx4b34rmh8c7m9f3dc0000gp/T/carthage-xcodebuild.r3aTYZ.log\n*** Building scheme \"Alamofire iOS\" in Alamofire.xcworkspace\n*** Building scheme \"Base32-iOS\" in Base32.xcodeproj\n*** Building scheme \"Deferred\" in Deferred.xcodeproj\n*** Building scheme \"GCDWebServers (iOS)\" in GCDWebServer.xcodeproj\n*** Building scheme \"Breakpad\" in Breakpad.xcodeproj\n*** Building scheme \"AdjustSdk\" in Adjust.xcodeproj\n*** Building scheme \"KIFFramework\" in Testable.xcworkspace\n*** Building scheme \"OnePasswordExtension\" in 1Password Extension Demos.xcworkspace\n*** Building scheme \"WebImage\" in SDWebImage.xcworkspace\n*** Building scheme \"SnapKit iOS\" in SnapKit.xcworkspace\n*** Building scheme \"SwiftKeychainWrapper\" in SwiftKeychainWrapper.xcodeproj\n*** Building scheme \"SWXMLHash iOS\" in SWXMLHash.xcworkspace\n*** Building scheme \"XCGLogger (iOS)\" in XCGLogger.xcodeproj\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:138:3: warning: 'CFURLCreateDataAndPropertiesFromResource' is deprecated: first deprecated in iOS 7.0 - For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:147:6: warning: 'CFPropertyListCreateFromXMLData' is deprecated: first deprecated in iOS 8.0 - Use CFPropertyListCreateWithData instead. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:138:3: warning: 'CFURLCreateDataAndPropertiesFromResource' is deprecated: first deprecated in iOS 7.0 - For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:147:6: warning: 'CFPropertyListCreateFromXMLData' is deprecated: first deprecated in iOS 8.0 - Use CFPropertyListCreateWithData instead. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:138:3: warning: 'CFURLCreateDataAndPropertiesFromResource' is deprecated: first deprecated in iOS 7.0 - For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:147:6: warning: 'CFPropertyListCreateFromXMLData' is deprecated: first deprecated in iOS 8.0 - Use CFPropertyListCreateWithData instead. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:138:3: warning: 'CFURLCreateDataAndPropertiesFromResource' is deprecated: first deprecated in iOS 7.0 - For resource data, use the CFReadStream API. For file resource properties, use CFURLCopyResourcePropertiesForKeys. [-Wdeprecated-declarations]\n/Users/Liza/Documents/_Work/_Programming/_ProgrammingProjects/firefox-ios/firefox-ios/Carthage/Checkouts/google-breakpad-ios/src/client/mac/handler/minidump_generator.cc:147:6: warning: 'CFPropertyListCreateFromXMLData' is deprecated: first deprecated in iOS 8.0 - Use CFPropertyListCreateWithData instead. [-Wdeprecated-declarations]\nld: warning: directory not found for option '-F/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/Developer/Library/Frameworks'\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Frameworks/XCTest.framework/XCTest\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos/libswiftXCTest.dylib\nld: warning: directory not found for option '-F/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.2.sdk/Developer/Library/Frameworks'\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Frameworks/XCTest.framework/XCTest\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphoneos/libswiftXCTest.dylib\nld: warning: directory not found for option '-F/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/Developer/Library/Frameworks'\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Frameworks/XCTest.framework/XCTest\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator/libswiftXCTest.dylib\nld: warning: directory not found for option '-F/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.2.sdk/Developer/Library/Frameworks'\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/Library/Frameworks/XCTest.framework/XCTest\nld: warning: linking against dylib not safe for use in application extensions: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/iphonesimulator/libswiftXCTest.dylib\n. @rikola, are you getting a \"no such module\" error on building in Xcode? Because I was having the same issue but was just able to fix it. I'm not exactly sure what specific step ended up helping, but here is what I did:\n1. Delete the newly cloned repository\n2. Update/re-download Xcode developer tools.\n3. Run the following command in terminal to see what iOS simulators are available:\nshell\n   xcrun simctl list\n4. Delete the ones that say \"not available\". They are typically located in Library->Developer->CoreSimulator->Profiles->Runtimes. You can always re-download them in Xcode.\n5. Download the 9.1 simulator in Xcode (Preferences->Downloads). I decided to try this because of the ld: warning: directory not found for option error.\n6. Change simulator permissions by running: \nshell\n   sudo chown :wheel /Library/Developer/CoreSimulator/Profiles/Runtimes/iOS\\ *.simruntime/Contents/Resources/RuntimeRoot/usr/lib/dyld_sim\n(I found this tip here)\n7. Do a clean clone of the repo again following the commands as stated in the firefox-ios README.\n8. Then execute the following commands while still in the repo root directory (where the README is located):\nshell\n   carthage update --platform iOS\n   carthage build --platform ios --no-skip-current\n   carthage bootstrap --platform ios --no-use-binaries\n   carthage build --platform ios\n9. Open Client.xcodeproj in Xcode and build.\nNote: I still got the same warnings when running checkout.sh, but my cloned repo was now able to build correctly.\n. @st3fan Thanks for pointing that out. That was actually a typo; I meant to write download the 9.1 simulator in Xcode. For some reason I didn't have that installed.\n. ",
    "preemeijer": "Hello,\nI will close this issue because there's already a issue lodged here: https://bugzilla.mozilla.org/show_bug.cgi?id=1237477 and the support response: https://support.mozilla.org/en-US/questions/1105641\nKind regards, Paul\n. ",
    "irew": "@st3fan @jhugman going to revisit this, will close for now.\n. @st3fan it didn't, will try to tackle this one this week.\n. This PR doesn\u2019t actually fix the issue.\nWe do plan to work on it, but just have not had the time yet.\nOn 5 Jul 2016, at 18:55, Garvan Keeley notifications@github.com<mailto:notifications@github.com> wrote:\nIs there any plans for more work on this? What was the problem with the PR?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/mozilla/firefox-ios/pull/1640#issuecomment-230536807, or mute the threadhttps://github.com/notifications/unsubscribe/AILlGUytR1qfn9U2v5-wMtLetD6ixVnVks5qSoyLgaJpZM4HzKv7.\n\nThis email has been scanned by the Symantec Email Security.cloud service.\n\n\nThis email has been scanned by the Symantec Email Security.cloud service.\n\n. ",
    "cvan": "@sleroux I've addressed feedback; thanks for the review!\n. > I tried to turn off the Autoplay setting when navigating to m.youtube.com but when I select a video it still autoplays. Is this intended for YouTube?\nsorry, it works. but you have to close the tab. and open a new tab for YouTube again.\nthis is because the webview options are set when creating a new tab. do you know where I should be setting this instead?\nalso, my apologies. I haven't had a chance to create some unit tests.\n. no worries - thanks for the update!. @MoMitch, nice work! it's been a while since I was hacking and testing the Firefox for iOS source. what are the steps to locally test this on device?\n. Since these WebKit changes, like Safari, Firefox for iOS inline-video playback now works fine (without this patch). \ud83d\udc4d\n\nPicture in Picture is a bit rarer and I haven't found a source to test, but this should allow developers the option in firefox-ios if needed.\n\nAm I correct in assuming this patch exists now for only enabling Picture-in-Picture? (If so, that seems reasonable to me; I'm just curious.)\n. > @cvan I found that same article and had a read through when starting this patch, from testing inline videos I think the patch is still required.\n\nWhile iOS has now allowed the inline playback functionality this still needs to be set here as to honor the playInline video tag, as of right now videos can play inline however on click they will go to fullscreen, this patch ensures that videos can play inline from the start which is the current intended iOS behaviour.\n\nAh, I totally forgot. My test cases had the attributes on the <video> elements: \nhtml\n<video playsinline webkit-playsinline src=\"video.mp4\"></video>\nSo, you're right. Yeah, it'd be good to get this patch merged then. Thanks for the clarification \ud83d\udc4d . this description is the same as the one for the pref for autoplay in Firefox for Android\n. yes, that's correct\n. yeah, I didn't mention it in the bug; I should have. oh, good call about the iOS 9 deprecation.\n. great, thanks - I didn't know about that\n. actually, mediaPlaybackRequiresUserAction and allowsInlineMediaPlayback are different properties - both have been available since iOS 4.\nrequiresUserActionForMediaPlayback is the property that replaced mediaPlaybackRequiresUserAction in iOS 9.0.\nthese names are so long and confusing, heh. anyway, fixing. thanks!\n. unrelated change but I was originally in the file and the newline at EOF should be added anyway. let me know if you want me to remove this change though.\n. ",
    "tiagomartinho": "I filled the bug and linked it to this PR. I was not able to set @thebnich as reviewer thought, it said you haven't logged into the platform for 60 days. Thank you!\n. ",
    "XjSv": "No, I did not. I checked again and the issue seems to have been fixed. \n. ",
    "zaabalonso": "true it works on 3.0 was broken on the previous version. We can close the issue :+1: \n. ",
    "AllLuckly": "hello\uff01There has been the following:\nA shell task failed with exit code 128:\nfatal: unable to access 'https://chromium.googlesource.com/webm/libwebp/': Failed to connect to chromium.googlesource.com port 443: Operation timed out\nHow to solve\uff1f\n. ",
    "aaronraimist": "This is the same error as  #1662. Also I believe you run ./bootstrap.sh now instead of ./checkout.sh.\n. ",
    "yayang": "using ./checkout.sh still meet the same problem.\n. ",
    "chrisdeeming": "@st3fan you may want to consider special casing javascript: too. I'm not sure if that internally falls back to about:blank, but it certainly could be a way of achieving a similar effect as using about:blank or a blank or missing src attribute.\n. ",
    "jcjones": "I've completed a crypto / spec review of this code; several nits, only a couple non-nitty things. I should probably take another look after any rework from the iOS review though.\n. nit: This seems like it should be called something else as it also clean up after \"sign\".\n. Nit: It'd probably be valuable for debugging to be able to log that error someplace, but I don't know how the logging works in firefox-ios.\n. Should we zeroize privBytes when it falls out of scope here?\n. Similar to the above, should we zeroize privB64 and privBytes on our way out?\n. OpenSSL Documentation defines this buf as being at least 256 bytes long.\nIf you want to use the shorter buffer, please use ERR_error_string_n\n. Nit: It's sort of weird that this verifySignature doesn't check sigECDSA2, but it's NBD.\n. Nit: If there is any cert parsing code handy, it'd be good to assert parsability, but that could be a follow-up.\n. ",
    "jacobwhite": "Should I fix the strings in the other alert while I'm at it?\n. Shouldn't it be built against v7.x?. Here's the pull request against master: https://github.com/mozilla-mobile/firefox-ios/pull/2517. Do I need to make a new pull request? Or is this good?. @sleroux I'll take a look.\nDo we need a new bug for the tests or would I add them here?. Thanks. I'm planning to look at it this weekend. \n\nOn Apr 6, 2017, at 7:36 AM, Stephan Leroux notifications@github.com wrote:\nJust a heads up - If you're looking into adding tests for this, I've recently pushed up some new tests along with additional ways of mocking:\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/ClientTests/ActivityStreamTests.swift\nIf you have any questions about how to approach it feel free to ask!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. That sounds good to me. I've never actually written a test, so it might take some time before I can get that done.\nOn Apr 12, 2017, at 9:11 AM, Stephan Leroux notifications@github.com wrote:\n@jacobwhite We're hoping to land this patch soonish if possible. If you want, would it make sense to split up the tests portion of the work into a new PR? I'm fine with landing this one as is and have the tests be follow up work.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Can I do that by changing the base here?\n\n. \n. This pr doesn't have anything to do with line 520.. I'm not sure if I fixed it or made things worse :/ \n\n. If you want I could try the same.\nOn Apr 27, 2017, at 6:08 AM, Stephan Leroux notifications@github.com wrote:\nNo worries - I'm not sure what happened on this branch either with regards to the merging. I'll cherry pick the commits you made onto a new one and merge that in. Thanks for all the work on getting this PR ready to go!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Thanks! Sorry I didn't get that finished. Had some stuff come up and didn't have time.. Yeah for sure. . I think I got it.\nOn May 3, 2017, at 6:05 AM, Stephan Leroux notifications@github.com wrote:\nInterested in picking up https://bugzilla.mozilla.org/show_bug.cgi?id=1359865 https://bugzilla.mozilla.org/show_bug.cgi?id=1359865?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/mozilla-mobile/firefox-ios/pull/2582#issuecomment-298904859, or mute the thread https://github.com/notifications/unsubscribe-auth/ABnbTGbQpV7B9j_GMfyyknlpcsNsM_Wxks5r2HucgaJpZM4Mwrwg.\n\n\n. Sorry I didn\u2019t get back to you on these. I got busy. . How soon?\n. Firefox desktop uses \"Select Location Bar\"\n. That makes sense. Thanks.. I don't remember now why it wasn't working. But this fixed it.. Bug 1421718 - Swap default keyboard appearance to dark in Private Browsing mode.\nWhen the checkbox is disabled, the tableview is reloaded without the accessory view, and the text is re-wrapped because the content view takes the whole width of the cell.\nThis fix makes hides the checkbox by making it match the background color, avoiding re-wrapping the label text.\n. ",
    "mauryat": "@sleroux, yes I did rebase master into my branch also. I didn't know that I could force push my branch! I deleted the remote branch and pushed my local again to remote. I'll try force pushing next time :) \n. Hi Brian,\nHow do I update the pull request? If I add another commit on top of this, I think you might ask me to squash those into one :) But, if I squash it locally, I'll have to force update this branch. I'm not sure if that will disturb the prior PR comments?? I could delete the branch and make a fresh push, but that will also cause us to lose the prior PR comments. Any suggestions?\n. @thebnich , the PR is now updated. Github didn't send a notification of update, I guess, since I had squelched the commits on my local (and that seems to have preserved the date/time of the prior commit). Either way, the PR is updated.\n. @thebnich , please look at https://github.com/mozilla/firefox-ios/pull/1961 instead of this one. I had a github username change and that was causing some commit related problems. So, the new PR should take care of it.\n. Continuing at https://github.com/mozilla/firefox-ios/pull/1984\n. :) \n. Continued in https://github.com/mozilla/firefox-ios/pull/1973\n. @thebnich : Continuation of https://github.com/mozilla/firefox-ios/pull/1869/\n. review ping\n. review ping\n. @thebnich , needinfo ping!\n. @thebnich merged with latest master to avoid merge conflicts.\n. @varkor , this is a great update! Had been stuck on getting to run on a device for a long time and then almost gave up :) \n. @farhanpatel , review ping!\n. I was also wondering if it was possible to do a KVO type property change observing. Not sure if that will impact performance and also not sure how elegant that would be.\n. @sleroux, rebased. Thanks @farhanpatel for the feedback! \ud83d\ude04 ~~I'll create a bug to \"allow contextual press on top-sites in ASPanel\" and close the existing bug.~~ And like you suggested, will ~~incorporate those changes into the new bug and then~~ wait for the new context menu before proceeding further.\n. review request: @farhanpatel , I've incorporated the changes you suggested.\n. @farhanpatel, thanks for your patience in reviewing all the changes \ud83d\ude04 Swift has been a learning experience so hopefully I'd need less assistance down the line.\n. Could you give me an example of inconsistent favicons? The reddit favicon actually looks the same in both the ASPanel and the Context Menu.\nTop Site Tile\nContext Menu\nThe only difference is that the entire square tile is filled with orange.\n. Farhan, I also don't seem to have access to view the Buddybuild result. Could you give me access if that's possible?\n. Oh, I wasn't totally sure why I created one \ud83d\ude04 , but did it because you had suggested it:\n\nThis might be a bit more work. And probably best if you fix the other issues. And then open a new PR to fix the default top sites icons in the menu. \n\nI figured may be you suggested because there was enough work that it could be cleaned up in a new PR.\nAnyway, should we keep both of them until the work on both is complete? And then close the PR.\n. ~~@thebnich, is there a test firefox sync account I can use in the XCUI test case that I'm writing?~~ Sorry, never mind this. Figured I create a bookmark programmatically and then run the UI test.\n. @thebnich, looks like these haven't been \"merged\" yet. Just wanted to check if there was anything else to be done.. @thebnich, I'm not able to merge the PR even after it's approved. I guess there's a restriction for contributors?. Hi @artella-coding ! Thanks for the feature request. That does sound like a good feature. Would you be able to file a new bug on Bugzilla?\nAll new bugs/requests are filed there so that they can be verified, triaged and then worked on. (https://github.com/mozilla-mobile/firefox-ios#getting-involved)\n. @artella-coding, thank you \ud83d\ude03 As per the update on the bug, I think someone from the Mozilla QA team already verified it.\n. @artella-coding, I'm a contributor (don't work at Mozilla) \ud83d\ude04. However, from what I see on the Bugzilla page, it looks like it's planned for version 7.0 with medium priority. . Thanks @farhanpatel , removed references to Xcode 7.\n. @farhanpatel, I'm having trouble \"passing the entire Imageview from the topSite/highlight cell into the context menu\". You had suggested this to fix the issues: default top sites icon and inconsistent favicons.\nI got topSiteItemCell.imageView and passed it into the context menu. That way, in ActionOverlayTableViewController.configureWithSite(site:favicon:), I could do something like:\nif let suggestedSite = site as? SuggestedSite {\n            self.siteImageView = favicon // where favicon is the ImageView passed from context menu\n            }\n      }\nIt resulted in a blank image. Essentially, I guess the problem lies in the assumption that I can simply reuse the existing UImageView. So, I tried extracting the image (self.siteImage = favicon.image), but that resulted in a blank outline image the way we store in xcassets. I also tried adding suggestedSite.background color, but the constraints are way off. Would I have to redo the constraints here or is it possible to simply use the existing UIImageView?\nBeen on this a couple of days. Any suggestions?\n. @farhanpatel: review ping\nI didn't use a struct nor recreated a UIImageView because a table cell select was causing the background color to disappear. So, the only way was to delay getting the background color and image until actually needed.  Hence, the closures.\n\nBecause sleroux reverted the ASPing (Onyx) changes. Could you please remove the references to it in your PR. Sorry for the extra work!\n\nSince sleroux re-commited the ASPing (Onyx) changes, I didn't remove references to it.\n. You must have had quite a few to catch up on, so thanks for your quick review \ud83d\ude04 \n. Sorry, I thought I had removed it before. Removed it now.\n. Farhan, what do we do about the icons for various actions? For instance, the action \"Bookmark\" in the Context Menu uses this icon. We need to add similar icons for the new actions introduced (new tab, new private tab, remove, etc). Is the UX team going to automatically take care of it, or should I create a bug for that?\n. Hi @CodeLiar, I'm a contributor myself. Could you share the error you see when you run the project?\nIt should run with Xcode 8. Though I haven't tried running on Xcode 8.1, I think it should be fine. The project uses Swift 2.3 at the moment. But, you wouldn't have to specify it as it is already configured in the project files that you get from a git clone of the project.. @farhanpatel, this above comment keeps getting generated though I haven't touched those files. It also happened before on a different issue recently. \ud83d\ude15 . @bkmunar,\nI just kept the multiple commits (instead of squashing them) because I have a discarded approach in an older commit. It'll help in case I have to make changes :) So, I'll squash them if it looks ok. Or, while you merge them, I think it gives you an option to squash them!. @farhanpatel, I updated my branch with the swift 3.0 migration changes. Can you reopen this PR? Hopefully it'll update itself with the latest commit from my branch once it is reopened. Looks like I don't have the privileges to reopen PRs.. \ud83d\ude04 \nThough @farhanpatel, this test will never really be tested in the true sense for the current BB configurations. It would need to be run on a iPhone SE simulator. Currently, BB seems to be running tests on iPhone 6.. @garvankeeley, I have been working on this PR lately. The logins list is being re-fetched from the database for every search. So, the fix is to filter from the already queried logins. Let me know if you have any questions.. @sleroux, could you merge this if it looks alright?. @sleroux, I removed references to Xcode 7. I guess that was creating unnecessary confusion. Apple enabled free developer accounts from Xcode 7 onwards. But, since we use Xcode 8, we don't need to talk about Xcode 7 anymore.. @garvankeeley, this is ready for merge. Just waiting on a review.. @farhanpatel thanks for taking care of the rebase! \ud83d\ude03 . @farhanpatel is it possible to add the individual commits?. Is there a better way of writing this guard statement?\n- looks like commas are allowed only if there are multiple let statements\n- can't put the let statement within parenthesis\n- I'm not happy with the guard statement below because there where clause is not related to the primary let statement\nguard let progress = change?[NSKeyValueChangeNewKey] as? Float\n  where (webView == tabManager.selectedTab?.webView) else {\n         break\n      }\n\n. Would it have been ok had we scoped it within in the extension itself?\n. includeDataURIs: false results in a compiler error: \"Argument passed to call that takes no arguments\". Looks like the function no longer takes arguments. \nI assume includeDataURIs: false makes us exclude reader mode pages which are probably stored locally as data-uris. Is that correct? How come we still display the actual http url in the address bar though?\n. This continues to result in the error Cannot convert call result type 'Deferred<Maybe<Cursor<_>>>' to expected type 'Deferred<Maybe<_>>'\nI'm not sure why this is happening, possibly $0[0] can be accessed only when the status is a .Success. But, how does the compiler correlate these?\nSo, how about we go with: \n```\n            >>== { guard $0.status == .Success  else { return deferMaybe(false) }\n                return deferMaybe($0[0] ?? false)\n        }\n``\n. Also, what does $0[0] actually refer to? I'm assuming it's the first column of the current row pointed to by the cursor. If that is so, what does a boolean value of a column indicate?\n. **Limitation:**\nIf we scroll up and let it decelerate until theWebViewControllerToolbar` appears, during the \"deceleration time\", a blank space could appear in the place of the toolbar. But, this is just super momentary almost invisible to the eye.\n. Problem:\nIf we zoom slightly by double-tapping on a non-text area. Then, scroll down just enough to hide the webviewcontainertoolbar toolbar and a little further. Now double-tap on the non-text area again. A blank block appears in place of the toolbar. \nAs an example, go to this url: https://education.github.com/git-cheat-sheet-education.pdf\n1. While at the top of the page, double-click on the green area (header of the sheet). It zooms \"very\" slighly.\n2. Now, scroll down until the WebViewController Toolbar just about disappears and slightly further.\n3. Double click on the green area again. The behavior that I see is: The content offset gets set to zero (I mean, the page goes back to its root position). And I see a blank block in place of the toolbar.\n. I've noticed that this line sometimes gets hit twice (even though I haven't re-edited and re-submitted the text). Haven't been able to reproduce that again.\n. @rnewman I fixed this. Though, it would help to understand why this is better. Is it because we don't care about the concept of keyword searching in the BookmarksModel context?\n. @rnewman I wish I could avoid downcasting and instead, declare something like:\npublic var modelFactory: protocol>, KeywordSearchSource>\nIs that possible?\n. @rnewman fixed this. Btw, what are the mirror tables for?\n. Great thank you! Any other feedback on the code? Or, is it good to go?\n. I had trouble getting the collection view underlying the top sites section. This was essential for the \"Remove\" action. So, I made the ASHorizontalScrollCell.collectionView property ~~private~~ public.\n. This was just a silly error!\n. I'm combining the context menu logic for top sites and highlights because we now need the indexpath parameter for both.\n. @farhanpatel, although it is O(1) in our case, append() still needs to traverse the array and do additional memory allocation. So, isn't using a variable length array an overhead? \nOr, is it negligible?\n. Sure, this worked! But, I still had to keep the ASHorizontalScrollCell.collectionView property public because that's the only way to get the indexPath for cells within the collection view. Let me know if you have any suggestions here.\n. @farhanpatel , are you referring to this rule?\n. @thebnich, I thought it was the other way round. Since accessibility labels use localized strings, accessibility identifiers would enable testers run UI tests for bundles with languages other than English. Let me know if my understanding is incorrect.\n. Is this the swiftlint you suggested I install? \n. Farhan, I see these ASOnyxPing references in the latest version of the code. Looks like sleroux re-committed these.\n. I thought that setting a UIImageView frame size to 32 px was optimal performance-wise than manually rescaling the UIImage to 32 px. Hence, I embedded the UIImageView (of size 32 px) in a UIView (siteImageBackground). drawInRect (as used in SimpleHighlightCell) seems a costly affair. Let me know your thoughts on this.\n. A table cell select (in the Highlights section of the table) is causing the background color to disappear. So, the only way was to delay getting the background color and image until actually needed.  Hence, the closures. Let me know what you think.\n. Sure that makes sense\n. ok \ud83d\ude04 \n. @sleroux, can you help me with the database migration? I think we need to add an ALTER TABLE command to add the new column to the migration script.\n. @thebnich, I was told that Mozilla devs use a linting tool for swift. Which one is it? There seem to be quite a few such tools available. I tried SwiftLint, but it seems to be running only a small subset of the rules. Also, these rules are based on Github's style guide and firefox uses a different one.. @thebnich : Yes, at this point we need to replace %s in URL with the query. However, the problem is when the query contains whitespace. This should get replaced as %20.\nI used the OpenSearchEngine.searchURLForQuery() function because it was already doing something similar (like percent encoding of unallowed characters). If there are characters (not just whitespace) that need to be percent encoded, either in the URL or in the query, they'll be handled here.. @thebnich, removed those 2 lines. Also updated the order in which the parsing of the text happens. If it's a URL, I felt it would make sense to submit it immediately. Rather than wait for keyword lookup.. @bkmunar, I had a hard time managing the favicon sizes of both the old TopSitesPanel and the new ASPanel at the same time. So, I used the AppConstant to resolve it for the time being. There's one side-effect. The favicons are not being restricted to a size in one approach. See these screenshots.\nHistory favicon when using TopSitesPanel\nHistory favicon when using ASPanel\nI figured it wasn't worth spending time on that yet because if ASPanel is released, the old TopSitePanel will go away. But, releasing a bigger favicon in v7 and then a smaller favicon in v8 might not look elegant. So, do you have any advice on this?. @bkmunar, I'm sorry I didn't understand this approach. Did you mean something like this?\n```\nvar dismissHighlightAction, deleteFromHistoryAction, removeTopSiteAction: ActionOverlayTableViewAction\nswitch Section(indexPath.section) {\ncase .Highlights:\n    // ...\n    extraActions = [dismissHighlightAction, deleteFromHistoryAction]\ncase .TopSites:\n    // ...\n    extraActions = [removeTopSiteAction]\n    // ...\n}\ndismissHighlightAction = ActionOverlayTableViewAction(//..)\n// ...\nactions.appendContentsOf([bookmarkAction, shareAction])\nactions.appendContentsOf(extraActions)\n```\nThis approach doesn't work because the compiler needs the actions to be initialized before adding them in the switch statement.. Actually, this conditional is a suggested code snippet in the Apple documentation. https://developer.apple.com/reference/uikit/uitraitenvironment/1623516-traitcollectiondidchange\nAlso, since the same function (updateViewConstraints()) is called regardless of whether it is landscape or portrait, I think traitCollectionDidChange is a good fit. Let me know if you think otherwise.. @bkmunar, yes the ideal approach would have been to just return the imageView.image and UIColor references. But, there are 2 scenarios for ThumbnailCells: TopSites and default Suggested TopSites. For the former case, the UIColor for background reference doesn't exist. It is a UIImage for background. And, for the latter case, the backgroundImage property is not used. Instead, a UIColor is applied directly to the image's background property. The imagePadding is also not applied to this case.\nSo, instead of duplicating the scenario specific logic, or encapsulating into a function that could anyway turn out to not be necessary if the TopSitePanel goes away, I figured I leave it at this.\n@farhanpatel, any suggestions on handling this? The main side-effect here is described in this comment.. ",
    "LiuDeng": "Thank you i will try~\n. @sleroux Hope you can rewrite the TabTrayViewController . The collectionview is so hard to use when have only one or two cells for we have to move finger so far to swipe to dimiss\u3002 Look at Safari , UC Internation\uff0cChrome\u3002 Their tab Tray are all design for easy to use even just one or two cells.. i have open one . https://github.com/mozilla-mobile/firefox-ios/issues/2248. @farhanpatel Hope you can rewrite the TabTrayViewController . The collectionview is so hard to use when have only one or two cells for we have to move finger so far to swipe to dimiss\u3002 Look at Safari , UC Internation\uff0cChrome\u3002 Their tab Tray are all design for easy to use even just one or two cells. TabTrayController collection view layout is very very hard to use now no matter use compact or not. When I have just one or two tab  cell in collection view , i have to move  my finger from bottom to FAR top to swipe close the tab especially on 5.5 inch iPhone\u3002Hope you can implement a new usable TabTrayController like Safari or Chrome IOS or UC browser\u3002\nThank you for your great job~\nBest Wishes~\n. nono. absolute not. My main point is i do not want to move my finger so far or use another hand to to this. Like most Asia people \uff0c my hand is not big as yours\uff0c but the screen is same as yours\u3002When use 4.7 inc or 5.5 inc iphone\uff0cwe can impossible to close the first two tab on the top use just single hand. Sorry for my poor English and slow type speed\u3002I once to try to write one like UC https://itunes.apple.com/us/app/uc-browser-fast-browsing-powerful/id1048518592?mt=8 It has the best user experience of the tab tray\u3002But i fail \uff0c it is too hard  for me to implement that\u3002Really hope you can download and see\u3002\nThe Chrome is good , Safari's tab  is not good but have a good point for also have full size so can easy to close.\nI have used firefox for so long time  and really hope firfox ios can fix this\u3002\nThank you so much for your great contribution~\nBest Wishes\uff01~. No matter UC or Chrome like is great\u3002 Even Safari style is acceptable~. Yes it is\u3002 as you mention i suddenly find uc one is really same as android app switch\u3002\nThank you so much~\uff01. @ionicc do not give user too much choice  , them will feel uncomfortable for when they choose one they lose others\u3002Just give user what is really best.. ",
    "mcomella": "\nSending a ping on each background allows us to include the usage interval for that session.\n\nHow do you handle the case that the ping could not be uploaded to the server?\nedit: It looks like you store the usage data in a preference and remove it if the upload is successful. However, this could cause you to double-count if the server got and stored the ping but was unable to notify the client (e.g. the final ACK packets are lost). Since you don't think you successfully uploaded, you'd try to upload these sessions again. Are you okay with that?\nAn alternative would be to only attempt to upload the session data once (i.e. you can only guarantee the server receives the data at most once or at least once but not exactly once).\nfwiw, on Android, we use sequence numbers to uniquely identify a ping and its data. To do this, when we create a ping for upload, we immediately store it to disk and when we try to upload, we try to upload all of the pings stored on disk. We keep a running tally for measurements stored on disk and reset them when a new ping is created (e.g. session usage data & search counts). \n\nSending a ping on the first run (or more specifically, first run with this patch applied) gives us a soon-as-possible data point that we can use to uniquely identify a user (so they'll at least be on the map after a crash-then-uninstall scenario).\n\nThis seems reasonable.\n\nOther than the initial launch, I can't think of a reason we'd want to send pings on app startup/foreground, but happy to hear any arguments.\n\nI assume iOS allows you to run (potentially long-running) code in the background on app closed without getting interrupted? We wouldn't want the app close blocked on network access or the app killed while we're doing network access.\n. > Other than the initial launch, I can't think of a reason we'd want to send pings on app startup/foreground, but happy to hear any arguments.\nIf we're really getting into the nitty gritty, here are some more ideas:\n- When the app is opened, we'll very likely activate the radio (we're a browser after all) making it efficient to activate the radio to upload this. However, when the app is closing, the radio may not have been used for a while and may not be used for a while afterwards so we're causing the radio to use a lot of energy that could have been avoided.\n- How does the OS handle device shutdown? If the app is open and someone requests shutdown, will you have enough time to upload?\n. > This sends an array of usage times with the core ping. A single usage time is defined as the time, in seconds, the application has been in the foreground.\nDid you check with Georg about this? In the previous meeting, we discussed how we wanted to handle this field and we decided to change this into two separate fields, see how it felt, and iterate if necessary:\n- session time in seconds (aggregate)\n- number of sessions\n. nit: foregroundTime makes me think \"time in the foreground\", i.e. elapsed. I'd call it timeWhenForegrounded or something.\n. It's a little unfortunate these version numbers aren't aligning with the android implementation but perhaps that's to be expected \u2013 we should probably have iOS-specific docs. I'd talk to Georg.\n. This could grow to take up a large amount of space if we're never successful at uploading. This could be important in the case that the telemetry servers get shut down or something.\n. I assume this takes into account DST?\n. I'd explain why you don't try to send when you don't have connectivity \u2013 i.e. because it resets your measurements & increments seq, e.g. like your comment on this PR.\n. Would we want to record this event even if the url guard fails?\n. This is the comment I'd move to the spot in the first commit \u2013 I feel it's better there because that's the code that, if changed, would change this behavior.\n. These are as they were depicted in the Android variable names, i.e. ACTIONBAR, LIST_ITEM, & SUGGESTION. I just called Enum.name() or whatever.\n. It looks like you return an event in order to pass it into Telemetry to get a reference to prefs (as opposed to just recording the event here). Is there a simpler way to do this? It seems to be a lot of indirection between many files (i.e. 3 methods where ideally one could suffice).\n. nit: This is more like a SearchTelemetryEventFactory. fwiw, nalexander once yelled at me for using Factory (granted, in Java) in the name of a class full of factory methods, as opposed to the proper factory design pattern. ymmv.\n. Interesting! I wasn't aware we overrode the toString method to return these values. (fwiw, it's wasteful when you already have the name in Enum.name() but I suppose those values are much less obnoxious!)\nCarry on \u2013 I'll fix that in Java.\n. fwiw, to test that on Android, I made the timezoneOffset getter into a utility function & added tests for it (as opposed to changing some values in code or the system settings & testing that it acted as expected). It can help make things better documented & less likely to regress in the future.\n. (Sorry, I updated this comment and you may have missed it)\nI like how it encapsulates the appropriate code in their relevant places but it's lot harder to follow than just a call-through (e.g. using an IDE, if I'm looking into Telemetry.recordEvent or whatever, I see event.record, have to step back out of the function to jump to the declaration of the type SearchEvent, find the record method in that class (and have a good time trying to get back to Telemetry.recordEvent if I need it again). On the other hand, call throughs are linear. If you have first class functions, you can still keep the code concise (but slightly less navigable) by declaring an enum -> function mapping).\n. I assume record & reset can never be called concurrently (given that I don't see synchronization code)?\n. What are these used for? I don't see them used anywhere.\nAlso, I assume this line should be PrefKeyUsageCount.\n. ",
    "khendry": "Sure thing.\nOn Feb 13, 2017, 6:04 PM -0500, Farhan Patel notifications@github.com, wrote:\n\nThanks for this PR! We just finished a major migration to swift 3.0 making merging in most patches pretty difficult. If you feel like this patch is still important please feel free to update your PR to swift 3 and reopen this PR \ud83d\ude04\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "skyylex": "Hello @garvankeeley, @varkor.\nI want to help with this task, however, I think not only splitting, but also refactoring would be nice to apply. My question is how it would be better to organize such process? I don't think it's good idea to perform work as a single transaction. From my experience it's better (if possible) to use atomic changes with small controllable impact to the related source code. Please share your thoughts.. @shree007 I think here we need to split question into 2 parts:\n1) How to proxy WebKit, the browser core\n2) How to proxy everything else related to additional functionality\nLet's start from 2), if we speaking about NSURLSession it's possible to use built-in support:\n\nThe URLSession class natively supports the data, file, ftp, http, and https URL schemes, with transparent support for proxy servers and SOCKS gateways, as configured in the user\u2019s system preferences.\nhttps://developer.apple.com/reference/foundation/urlsession\n\nYou can configure session.configuration.connectionProxyDictionary with proper dictionary and that's it (link).\nSocket-based (GCDAsyncSocket) connections have also proxy support using for example: ProxyKit.\n2) The main problem I see that the basic web-engine - WKWebView has no own configs to control proxy settings, and generally only system preferences level can provide opportunity to forward WKWebView connections through proxy. And even if you find a place to override with your own logic it's a private API and it will be most probably rejected at review phase.\nhttp://stackoverflow.com/questions/41068675/http-proxy-support-with-wkwebview\n@st3fan is that what you mean?. I've recently found Capability in the Xcode project -> Target -> Capabilities called \"Personal VPN\" \nHere is the link to the related framework:  https://developer.apple.com/reference/networkextension\nAnd also I found another interesting thread about VPN: https://forums.developer.apple.com/thread/45636\nApple Engineer confirms that using VPN for single app is possible.. ",
    "bytegh": "Hey, guys:\nso I we start to use this PR in my project(migrated to swift3.0 already). Or I still need to wait? \nthanks! this is a amazing library :) \n. ",
    "skreutzberger": "Why don\u2019t you guys switch to SwiftyBeaver for logging on debug and release? \nBesides being more easier-to-use, feature-rich, more actively developed with a much larger, more active userbase, it is also supporting the latest Swift 3 GM. This week the swift3 branch will be even merged into master and will become the new standard.\nDisclaimer:  I am the author \ud83d\ude2c\n. ",
    "rajmohangoaugment": "is the swift 3.0 is in progress or not happening anytime soon ? I would prefer to wait if its happening since i may avoid duplication of conversion work.. ",
    "lemonYLX": "what other approaches have we?\nWe got information from some popular browsers in China include QQ browser, uc browser and baidu browser. They also changed the javascript and looked like ours.\nWe have tried to do night mode with filters, but the issue is the filter will change the background-image, and make some dark page to bright.\nAbout CSSOM, we have no idea how to do, and we don't think it will be better than now.\nare there any good night mode extensions or addons out there? How do they do it?\nThere are no extensions on firefox for android, just some extensions on desktop browser.\nWe have tested Night Mode Eye Guard, Night Mode Pro and Simple Night Mode, they look very similar, and feel ours is better.\n@jhugman \n. Yes, you are right. This is another way to implement night mode, and the code should be\nhtml {\nfilter: brightness(50%) contrast(200%);\n}\nIn fact, we discussed that before we designed night mode, at that time we felt better to modify the background of elements. Now I have no strong tendency to how to do it. If most people agree with this, I will change the code as soon as possiable.\n@jhugman @varkor\n. @farhanpatel \nBrian Nicholson have fixed the lint errors.\n. update pull request. @bhavnapanchal \nI have tested this case.\nIf url is invalid, browser will open url in new tab, then prompt users that \u201cFirefox cannot open the page because it has an invalid address\u201d\nThere is another issue I met during the test:\n\"QR Code\" button should displayed when New Tab is a blank page.\nWhat do you think\uff1f. @bhavnapanchal \nRegarding \n\nMy personal opinion is that it suppose to be perform search operation on google or other search engine when QR code is not valid URL.\n\nI totally agree with you, and I have updated my PR.\nIf url is invalid, ff will perform search operation on search engine.\nAnd,\nI have added \"QR Code\"button in the menu when New Tab is a blank page.\nPlease help me review it.  Thank you.. @bhavnapanchal \n\nBut i could not check it with my device as there are some error while running 'sh ./bootstrap.sh'\n\nI am so sorry to hear that. You can try \nremove any local copies of your Carthage dependencies by removing the Carthage folder and\nCartfile.resolved file from the project's root directory. Afterwards, re-run the ./bootstrap.sh command to checkout fresh copies of the Swift 3 dependencies.\nBut I am not sure that can help you.\nRegarding\n\nI was worried that you stop self.captureSession.stopRunning() in viewWillDisappear but did not start it on viewWillAppear.\n\nAccording to my test, there is no another issue. If you have any questions, please contact me. \nRegards\nLinxiu Yang.  QR Code Scanner.  QR Code Scanner. Hi\uff0cjhugman, I am totally agree with you for this patch.\nBut here is another reason to use the name as following:\nBecause we hope the browser can provide both no image mode and night mode, and  UserScript.swift imports the two scripts to webview as one source, so we think the   UserScript.js can be a file to manage all the scripts like these features, so We push noImageMode and nightMode scripts in this file and named UserScript.js. \nWhat do you think about it? If you still think NoImageModeHelper.js is better, I can change the name, and try to modify UserScript.swift to import scripts from different files, thanks for your review.\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. I quite agree with you, but I have no idea about how to improve it, could you give me some suggestions?\n. We have added a dark style CSS in night mode to change the background color of all elements to black. But in this case some content will be converd if the background color is changed from transparent to dark style.\nAnd we have also tried to do this with another way, We have changed the background color of body to black and the others to transparent. But in this way some pop windows will be overlap with other layers.\nSo finally we decided to add this function to filter the transparent elements, and apply dark style CSS just to the elements which background color are not transparent. \n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. I've made some revisions. I would like to know if you have any suggestions.\n. I've changed punycode to extension on String.\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Fixed.\n. Lost \u2018/foo\u2019 is a bug, i changed to string.stringByReplacingOccurrencesOfString(host, withString: host.utf8HostToAscii()). \nFor puny code string use NSURLComponents(string: string) will  return nil, can\u2019t get the host. So we just manually analyze it.\n. On line 36 I must use punycodedURL(\"http://(escaped!)\").\nI have changed this code according to your suggestion.\nDo you have any other suggestion?\n. I totally agree with you.\nAnd I have changed this code according to your suggestion.\n. Fixed. \n. I have moved isChinaEdition into the Profile protocol, and provided a dummy implementation in MockProfile.\nWhat do you think of this change?\n. Fixed.\n. I want to test this case, and this case can only build on iPhone or iPad, but I found that I was deleted form the apple developer group.\nSo could you help to add lyang@mozilla.com to the apple developer group and test group?. I think there are some problems.\nFirstly, AVCaptureMetadataOutputObjectsDelegatewill call when a capture metadata output object receives relevant metadata objects.\nhence, we need used AVCaptureDeviceInput to capture data from an AVCaptureDevice object.\nAVCaptureDevice.defaultDevice(withMediaType: AVMediaTypeVideo)\nBut AVMediaTypeVideo can only build on iPhone / iPad.\nIn brief, I need use physical device to test this case.\nIf you have any idea, please tell me. Thanks.. ",
    "Bear-TheWolf312": "I'd like to see this too but the problem is Apple won't even queue the app for review until a public release of iOS 10 is made.\nEdit: I hate autocorrect.\n. Ah,  I wasn't aware of that. \n. I'll close this for now, and if it changes can you please update this?\n. ",
    "CodeforEvolution": "I was thinking this could be a branch that could be merged when the time comes, though you do have a good point otherwise.\n. ",
    "HellGL": "Hi I have the same problem that Firefox 5.3 crashes if I sync. However up to yesterday everything was fine but yesterday I had to restore my iPhone from a backup and reinstalled Firefox. Since then I have the problems. I think (not 100% sure) I did the update to 5.3 already before.\nI did some tests with a fresh sync account and the first sync works but firefox crashes when I select sync again. After that it crashes as soon as I select \"Sync now\". As I am on a jailbroken device I have full access to all the logs. \nFirefox_Logs.zip If you need more data just let me know. \n. Probably yes, but I am not sure where to find it. Could you give me a hint?. ",
    "arking7": "not sure if it's OK to paste the crash report here\n`Incident Identifier: F16A27B9-5F4E-42EE-9800-7A804DDB2132\nCrashReporter Key:   61b552a58d0a77e1206bab43c9baf1c2e84c1682\nHardware Model:      iPhone7,1\nProcess:             Client [8590]\nPath:                /private/var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Client\nIdentifier:          org.mozilla.ios.Firefox\nVersion:             2 (6.0)\nCode Type:           ARM-64 (Native)\nParent Process:      launchd [1]\nDate/Time:           2017-02-02 21:16:29.29 +0800\nLaunch Time:         2017-02-02 21:16:20.20 +0800\nOS Version:          iOS 9.3.3 (13G34)\nReport Version:      105\nException Type:  EXC_CRASH (SIGTRAP)\nException Codes: 0x0000000000000000, 0x0000000000000000\nException Note:  EXC_CORPSE_NOTIFY\nTriggered by Thread:  0\nFiltered syslog:\nNone found\nGlobal Trace Buffer (reverse chronological seconds):\n0.551746     CFNetwork                  0x00000001825b98e0 TCP Conn 0x14f0b8440 SSL Handshake DONE\n1.250270     CFNetwork                  0x00000001825b97f0 TCP Conn 0x14f0b8440 starting SSL negotiation\n1.385119     CFNetwork                  0x000000018265be7c TCP Conn 0x14f0b8440 complete. fd: 15, err: 0\n1.386862     CFNetwork                  0x000000018265d3a8 TCP Conn 0x14f0b8440 event 1. err: 0\n1.404292     CFNetwork                  0x000000018265d480 TCP Conn 0x14f0b8440 started\n1.664720     CFNetwork                  0x00000001825b98e0 TCP Conn 0x14f14a340 SSL Handshake DONE\n2.340700     CFNetwork                  0x00000001825b97f0 TCP Conn 0x14f14a340 starting SSL negotiation\n2.513674     CFNetwork                  0x000000018265be7c TCP Conn 0x14f14a340 complete. fd: 15, err: 0\n2.515207     CFNetwork                  0x000000018265d3a8 TCP Conn 0x14f14a340 event 1. err: 0\n2.519251     CFNetwork                  0x000000018265d480 TCP Conn 0x14f14a340 started\nThread 0 name:  Dispatch queue: com.apple.main-thread\nThread 0 Crashed:\n0   libsystem_kernel.dylib          0x0000000181b54fd8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x0000000181b54e54 mach_msg + 72\n2   CoreFoundation                  0x0000000181f8cc60 __CFRunLoopServiceMachPort + 196\n3   CoreFoundation                  0x0000000181f8a964 __CFRunLoopRun + 1032\n4   CoreFoundation                  0x0000000181eb4c50 CFRunLoopRunSpecific + 384\n5   GraphicsServices                0x000000018379c088 GSEventRunModal + 180\n6   UIKit                           0x000000018719e088 UIApplicationMain + 204\n7   Client                          0x000000010006032c 0x100058000 + 33580\n8   libdyld.dylib                   0x0000000181a528b8 start + 4\nThread 1:\n0   libsystem_kernel.dylib          0x0000000181b70b48 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181c39530 _pthread_wqthread + 1284\n2   libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 2 name:  Dispatch queue: com.apple.libdispatch-manager\nThread 2:\n0   libsystem_kernel.dylib          0x0000000181b714d8 kevent_qos + 8\n1   libdispatch.dylib               0x0000000181a347d8 _dispatch_mgr_invoke + 232\n2   libdispatch.dylib               0x0000000181a23648 _dispatch_source_invoke + 0\nThread 3:\n0   libsystem_kernel.dylib          0x0000000181b70b48 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181c39530 _pthread_wqthread + 1284\n2   libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 4:\n0   libsystem_kernel.dylib          0x0000000181b70b48 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181c39530 _pthread_wqthread + 1284\n2   libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 5:\n0   libsystem_kernel.dylib          0x0000000181b70b48 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181c39530 _pthread_wqthread + 1284\n2   libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 6:\n0   libsystem_kernel.dylib          0x0000000181b70b48 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181c39530 _pthread_wqthread + 1284\n2   libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 7 name:  AXSpeech\nThread 7:\n0   libsystem_kernel.dylib          0x0000000181b54fd8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x0000000181b54e54 mach_msg + 72\n2   CoreFoundation                  0x0000000181f8cc60 CFRunLoopServiceMachPort + 196\n3   CoreFoundation                  0x0000000181f8a964 __CFRunLoopRun + 1032\n4   CoreFoundation                  0x0000000181eb4c50 CFRunLoopRunSpecific + 384\n5   Foundation                      0x00000001828c4cfc -[NSRunLoop(NSRunLoop) runMode:beforeDate:] + 308\n6   libAXSpeechManager.dylib        0x000000018b722630 -[AXSpeechThread main] + 232\n7   Foundation                      0x00000001829abe4c __NSThread__start + 1000\n8   libsystem_pthread.dylib         0x0000000181c3bb28 _pthread_body + 156\n9   libsystem_pthread.dylib         0x0000000181c3ba8c _pthread_body + 0\n10  libsystem_pthread.dylib         0x0000000181c39028 thread_start + 4\nThread 8 name:  AVAudioSession Notify Thread\nThread 8:\n0   libsystem_kernel.dylib          0x0000000181b54fd8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x0000000181b54e54 mach_msg + 72\n2   CoreFoundation                  0x0000000181f8cc60 __CFRunLoopServiceMachPort + 196\n3   CoreFoundation                  0x0000000181f8a964 __CFRunLoopRun + 1032\n4   CoreFoundation                  0x0000000181eb4c50 CFRunLoopRunSpecific + 384\n5   libAVFAudio.dylib               0x000000018862d9e0 GenericRunLoopThread::Entry(void) + 164\n6   libAVFAudio.dylib               0x000000018860275c CAPThread::Entry(CAPThread) + 84\n7   libsystem_pthread.dylib         0x0000000181c3bb28 _pthread_body + 156\n8   libsystem_pthread.dylib         0x0000000181c3ba8c _pthread_body + 0\n9   libsystem_pthread.dylib         0x0000000181c39028 thread_start + 4\nThread 9:\n0   libsystem_kernel.dylib          0x0000000181b6ff24 __psynch_cvwait + 8\n1   libsystem_pthread.dylib         0x0000000181c3ace8 _pthread_cond_wait + 648\n2   libc++.1.dylib                  0x00000001815c74dc std::__1::condition_variable::__do_timed_wait(std::__1::unique_lock&, std::__1::chrono::time_point > >) + 140\n3   JavaScriptCore                  0x0000000185bd8d3c std::__1::cv_status std::__1::condition_variable::wait_until > >(std::__1::unique_lock&, std::__1::chrono::time_point > > const&) + 136\n4   JavaScriptCore                  0x0000000185bd8c00 std::__1::cv_status std::__1::condition_variable_any::wait_until, std::__1::chrono::steady_clock, std::__1::chrono::duration > >(std::__1::unique_lock&, std::__1::chrono::time_point > > const&) + 124\n5   JavaScriptCore                  0x0000000185bd8b3c bmalloc::AsyncTask::entryPoint() + 192\n6   JavaScriptCore                  0x0000000185bd8a70 bmalloc::AsyncTask::pthreadEntryPoint(void*) + 12\n7   libsystem_pthread.dylib         0x0000000181c3bb28 _pthread_body + 156\n8   libsystem_pthread.dylib         0x0000000181c3ba8c _pthread_body + 0\n9   libsystem_pthread.dylib         0x0000000181c39028 thread_start + 4\nThread 10 name:  com.apple.NSURLConnectionLoader\nThread 10:\n0   libsystem_kernel.dylib          0x0000000181b54fd8 mach_msg_trap + 8\n1   libsystem_kernel.dylib          0x0000000181b54e54 mach_msg + 72\n2   CoreFoundation                  0x0000000181f8cc60 CFRunLoopServiceMachPort + 196\n3   CoreFoundation                  0x0000000181f8a964 __CFRunLoopRun + 1032\n4   CoreFoundation                  0x0000000181eb4c50 CFRunLoopRunSpecific + 384\n5   CFNetwork                       0x0000000182635bcc +[NSURLConnection(Loader) _resourceLoadLoop:] + 412\n6   Foundation                      0x00000001829abe4c __NSThread__start + 1000\n7   libsystem_pthread.dylib         0x0000000181c3bb28 _pthread_body + 156\n8   libsystem_pthread.dylib         0x0000000181c3ba8c _pthread_body + 0\n9   libsystem_pthread.dylib         0x0000000181c39028 thread_start + 4\nThread 11 name:  com.apple.CFSocket.private\nThread 11:\n0   libsystem_kernel.dylib          0x0000000181b70344 __select + 8\n1   CoreFoundation                  0x0000000181f931c8 __CFSocketManager + 648\n2   libsystem_pthread.dylib         0x0000000181c3bb28 _pthread_body + 156\n3   libsystem_pthread.dylib         0x0000000181c3ba8c _pthread_body + 0\n4   libsystem_pthread.dylib         0x0000000181c39028 thread_start + 4\nThread 12:\n0   libsystem_kernel.dylib          0x0000000181b70b48 __workq_kernreturn + 8\n1   libsystem_pthread.dylib         0x0000000181c39530 _pthread_wqthread + 1284\n2   libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 13 name:  Dispatch queue: com.mozilla.sync.collectionclient\nThread 13:\n0   libsystem_kernel.dylib          0x0000000181b6f7ec __kill + 8\n1   libsystem_platform.dylib        0x0000000181c3594c _sigtramp + 68\n2   Shared                          0x0000000100be0a34 0x100b88000 + 363060\n3   Sync                            0x00000001011f3ebc 0x101178000 + 507580\n4   Sync                            0x0000000101280074 0x101178000 + 1081460\n5   Sync                            0x00000001011df45c 0x101178000 + 423004\n6   Sync                            0x00000001011f3124 0x101178000 + 504100\n7   Sync                            0x00000001011f34e4 0x101178000 + 505060\n8   Sync                            0x00000001011e4298 0x101178000 + 443032\n9   Sync                            0x00000001011dc958 0x101178000 + 411992\n10  Sync                            0x00000001011f2428 0x101178000 + 500776\n11  Sync                            0x00000001011cb1b8 0x101178000 + 340408\n12  Sync                            0x00000001011f2520 0x101178000 + 501024\n13  Sync                            0x000000010128bcb0 0x101178000 + 1129648\n14  Alamofire                       0x000000010071461c 0x1006f0000 + 149020\n15  libdispatch.dylib               0x0000000181a214bc _dispatch_call_block_and_release + 24\n16  libdispatch.dylib               0x0000000181a2147c _dispatch_client_callout + 16\n17  libdispatch.dylib               0x0000000181a2d4c0 _dispatch_queue_drain + 864\n18  libdispatch.dylib               0x0000000181a24f80 _dispatch_queue_invoke + 464\n19  libdispatch.dylib               0x0000000181a2f390 _dispatch_root_queue_drain + 728\n20  libdispatch.dylib               0x0000000181a2f0b0 _dispatch_worker_thread3 + 112\n21  libsystem_pthread.dylib         0x0000000181c39470 _pthread_wqthread + 1092\n22  libsystem_pthread.dylib         0x0000000181c39020 start_wqthread + 4\nThread 0 crashed with ARM Thread State (64-bit):\n    x0: 0x0000000010004005   x1: 0x0000000007000806   x2: 0x0000000000000000   x3: 0x0000000000000c00\n    x4: 0x0000000000001d03   x5: 0x00000000ffffffff   x6: 0x0000000000000000   x7: 0x00000000000000d0\n    x8: 0x00000000fffffbbf   x9: 0x0000000007000000  x10: 0x0000000007000100  x11: 0x00000000fff0bdc0\n   x12: 0x0000000000000001  x13: 0x00025e0000025f03  x14: 0x0000000000000000  x15: 0x00025f0000025f00\n   x16: 0xffffffffffffffe1  x17: 0x0000000000000000  x18: 0x0000000000000000  x19: 0x0000000000000000\n   x20: 0x00000000ffffffff  x21: 0x0000000000001d03  x22: 0x0000000000000c00  x23: 0x000000016fda6d18\n   x24: 0x0000000007000806  x25: 0x0000000000000000  x26: 0x0000000007000806  x27: 0x0000000000000c00\n   x28: 0x0000000000000001  fp: 0x000000016fda6c20   lr: 0x0000000181b54e54\n    sp: 0x000000016fda6bd0   pc: 0x0000000181b54fd8 cpsr: 0x60000000\nBinary Images:\n0x100058000 - 0x100407fff Client arm64  <5106f92b58b736ef85a474145cb31af0> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Client\n0x10053c000 - 0x10053ffff MobileSubstrate.dylib arm64  <3134cfb2f722310ea2c742ae4dc131ab> /Library/MobileSubstrate/MobileSubstrate.dylib\n0x100564000 - 0x10056bfff WebMetadataKit arm64  <386b430c71d630c8b139da28ac4530c1> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/WebMetadataKit.framework/WebMetadataKit\n0x10057c000 - 0x10058ffff OnyxClient arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/OnyxClient.framework/OnyxClient\n0x1005b8000 - 0x10066ffff libPhoneNumber arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libPhoneNumber.framework/libPhoneNumber\n0x1006e4000 - 0x1006e7fff tsProtePass.dylib arm64   /usr/lib/tsProtePass.dylib\n0x1006f0000 - 0x100757fff Alamofire arm64  <35b2f3dcc5323132ab9d5833dfc2fbcf> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Alamofire.framework/Alamofire\n0x10085c000 - 0x10087ffff WebImage arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/WebImage.framework/WebImage\n0x1008c0000 - 0x1008e7fff Fuzi arm64  <533126866bbf3355b7eb5d1a8c2ba440> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Fuzi.framework/Fuzi\n0x100950000 - 0x100973fff SnapKit arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/SnapKit.framework/SnapKit\n0x1009d4000 - 0x1009fffff GCDWebServers arm64  <17fb24b5aeb839bf95d24cc1c804c20e> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/GCDWebServers.framework/GCDWebServers\n0x100a4c000 - 0x100a5ffff OnePasswordExtension arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/OnePasswordExtension.framework/OnePasswordExtension\n0x100a74000 - 0x100a7bfff LocalIAPStore.dylib arm64  <0950f68dd54537cdbe18a89df320b09a> /Library/MobileSubstrate/DynamicLibraries/LocalIAPStore.dylib\n0x100a88000 - 0x100aa7fff XCGLogger arm64  <12bf128c8e133ab993885046ab63cc2b> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/XCGLogger.framework/XCGLogger\n0x100b0c000 - 0x100b3ffff AdjustSdk arm64  <0e0b97541b333483b2154b224370d4a8> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/AdjustSdk.framework/AdjustSdk\n0x100b88000 - 0x100c0bfff Shared arm64  <255310d84fc231348568fb7ed17a6aa9> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Shared.framework/Shared\n0x100c94000 - 0x100e6bfff Storage arm64  <79433b0560a3314e9fc047cade0ce506> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Storage.framework/Storage\n0x100f80000 - 0x100fbffff Account arm64  <75482f7a06743794ace4eb8025c176ea> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Account.framework/Account\n0x10100c000 - 0x101023fff ReadingList arm64  <02c14275f63338bf8caf58d6eef89465> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/ReadingList.framework/ReadingList\n0x101050000 - 0x101107fff FxA arm64  <32225ccb3c9e3c4d881bb7b3274905da> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/FxA.framework/FxA\n0x101178000 - 0x10129bfff Sync arm64  <38cea511cc1b328f82a27608e0523804> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Sync.framework/Sync\n0x1013a4000 - 0x1013b3fff Deferred arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/Deferred.framework/Deferred\n0x1013e4000 - 0x1013f7fff SwiftKeychainWrapper arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/SwiftKeychainWrapper.framework/SwiftKeychainWrapper\n0x101424000 - 0x10142bfff libswiftAVFoundation.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftAVFoundation.dylib\n0x101438000 - 0x10143ffff libswiftContacts.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftContacts.dylib\n0x101458000 - 0x10165bfff libswiftCore.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftCore.dylib\n0x101898000 - 0x1018a3fff libswiftCoreAudio.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftCoreAudio.dylib\n0x1018c4000 - 0x1018cffff libswiftCoreGraphics.dylib arm64  <8fb152233ea83c1a9f2f81412e7bb774> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftCoreGraphics.dylib\n0x1018e8000 - 0x1018effff libswiftCoreImage.dylib arm64  <047a610dbaff39d8bbeebfa1eccdfd3b> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftCoreImage.dylib\n0x101908000 - 0x10190ffff libswiftCoreLocation.dylib arm64  <6f6b228a7ac0349cb06e93d7d4f5deda> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftCoreLocation.dylib\n0x101924000 - 0x10192bfff libswiftCoreMedia.dylib arm64  <771762b19b3b3712bafddbae65bd3087> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftCoreMedia.dylib\n0x101938000 - 0x10193ffff libswiftDarwin.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftDarwin.dylib\n0x10195c000 - 0x101963fff libswiftDispatch.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftDispatch.dylib\n0x101974000 - 0x1019affff libswiftFoundation.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftFoundation.dylib\n0x101a08000 - 0x101a0ffff libswiftLocalAuthentication.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftLocalAuthentication.dylib\n0x101a24000 - 0x101a2bfff libswiftObjectiveC.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftObjectiveC.dylib\n0x101a48000 - 0x101a4ffff libswiftPassKit.dylib arm64  <35fb821137343c9285309698466d98c0> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftPassKit.dylib\n0x101a74000 - 0x101a7ffff libswiftUIKit.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftUIKit.dylib\n0x101aa0000 - 0x101aa7fff libswiftWebKit.dylib arm64   /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/libswiftWebKit.dylib\n0x101abc000 - 0x101b57fff SQLite arm64  <3d53f6b14f5b3e239c33122c6dc67df0> /var/containers/Bundle/Application/03B8A1B6-1866-4647-BDCE-A84F3BEE8BBD/Client.app/Frameworks/SQLite.framework/SQLite\n0x101dfc000 - 0x101dfffff SubstrateLoader.dylib arm64  <54645dc0321231d88a022fd67a793278> /Library/Frameworks/CydiaSubstrate.framework/Libraries/SubstrateLoader.dylib\n0x101e28000 - 0x101e3ffff CydiaSubstrate arm64   /Library/Frameworks/CydiaSubstrate.framework/CydiaSubstrate\n0x101e88000 - 0x101e9ffff tsProtector.dylib arm64   /Library/MobileSubstrate/DynamicLibraries/tsProtector.dylib\n0x103d08000 - 0x103e0bfff MacinTalk arm64  <0ac8eb84529335d09c98caa51218aa5a> /System/Library/TTSPlugins/MacinTalk.speechbundle/MacinTalk\n0x103e78000 - 0x1040fffff TTSSpeechBundle arm64   /System/Library/TTSPlugins/TTSSpeechBundle.speechbundle/TTSSpeechBundle\n0x120058000 - 0x120087fff dyld arm64   /usr/lib/dyld\n0x1815bc000 - 0x1815bdfff libSystem.B.dylib arm64  <5bb501a091dc3a22a5544d34a4312de1> /usr/lib/libSystem.B.dylib\n0x1815c0000 - 0x181612fff libc++.1.dylib arm64  <9ec0d9dcf728349582c26a7da72f0364> /usr/lib/libc++.1.dylib\n0x181614000 - 0x181633fff libc++abi.dylib arm64   /usr/lib/libc++abi.dylib\n0x181634000 - 0x1819a0fff libobjc.A.dylib arm64  <939f392022903f2da2858e676e4191ef> /usr/lib/libobjc.A.dylib\n0x1819a4000 - 0x1819a8fff libcache.dylib arm64  <43424f4c7252330ca92c1a865da896e1> /usr/lib/system/libcache.dylib\n0x1819ac000 - 0x1819b7fff libcommonCrypto.dylib arm64   /usr/lib/system/libcommonCrypto.dylib\n0x1819b8000 - 0x1819bbfff libcompiler_rt.dylib arm64   /usr/lib/system/libcompiler_rt.dylib\n0x1819bc000 - 0x1819c3fff libcopyfile.dylib arm64  <1c1678aa36073b42b4406c6dbb06e9f0> /usr/lib/system/libcopyfile.dylib\n0x1819c4000 - 0x181a1ffff libcorecrypto.dylib arm64   /usr/lib/system/libcorecrypto.dylib\n0x181a20000 - 0x181a4efff libdispatch.dylib arm64  <65568801b7463adeb6e20dc25d14d801> /usr/lib/system/libdispatch.dylib\n0x181a50000 - 0x181a52fff libdyld.dylib arm64  <69ea263c8ab93db49b98a24fbd6eb392> /usr/lib/system/libdyld.dylib\n0x181a54000 - 0x181a54fff liblaunch.dylib arm64   /usr/lib/system/liblaunch.dylib\n0x181a58000 - 0x181a5cfff libmacho.dylib arm64  <1f37b179ad26307192b3b763ba5f816a> /usr/lib/system/libmacho.dylib\n0x181a60000 - 0x181a61fff libremovefile.dylib arm64  <267c6cbaf2193309bd8a191fad38cc79> /usr/lib/system/libremovefile.dylib\n0x181a64000 - 0x181a7afff libsystem_asl.dylib arm64   /usr/lib/system/libsystem_asl.dylib\n0x181a7c000 - 0x181a7dfff libsystem_blocks.dylib arm64  <8bbf799e57f93ed1be24cf2ce6c221a3> /usr/lib/system/libsystem_blocks.dylib\n0x181a80000 - 0x181afffff libsystem_c.dylib arm64   /usr/lib/system/libsystem_c.dylib\n0x181b00000 - 0x181b03fff libsystem_configuration.dylib arm64   /usr/lib/system/libsystem_configuration.dylib\n0x181b04000 - 0x181b07fff libsystem_containermanager.dylib arm64  <504648cfa43d3668b9678b74e33697f2> /usr/lib/system/libsystem_containermanager.dylib\n0x181b08000 - 0x181b09fff libsystem_coreservices.dylib arm64  <8f94549c633036aa99efb0f067031a05> /usr/lib/system/libsystem_coreservices.dylib\n0x181b0c000 - 0x181b22fff libsystem_coretls.dylib arm64  <498e424eb31f3d5cb49523cec07f339d> /usr/lib/system/libsystem_coretls.dylib\n0x181b24000 - 0x181b2cfff libsystem_dnssd.dylib arm64  <573c3639fde83e87885bfe02c057538d> /usr/lib/system/libsystem_dnssd.dylib\n0x181b30000 - 0x181b52fff libsystem_info.dylib arm64  <932df5ba705a3b6d948c5dcff196ea6b> /usr/lib/system/libsystem_info.dylib\n0x181b54000 - 0x181b75fff libsystem_kernel.dylib arm64  <18bda76f38f93376900d6dab355c191f> /usr/lib/system/libsystem_kernel.dylib\n0x181b78000 - 0x181b94fff libsystem_m.dylib arm64   /usr/lib/system/libsystem_m.dylib\n0x181b98000 - 0x181bb1fff libsystem_malloc.dylib arm64   /usr/lib/system/libsystem_malloc.dylib\n0x181bb4000 - 0x181c17fff libsystem_network.dylib arm64   /usr/lib/system/libsystem_network.dylib\n0x181c18000 - 0x181c21fff libsystem_networkextension.dylib arm64   /usr/lib/system/libsystem_networkextension.dylib\n0x181c24000 - 0x181c2efff libsystem_notify.dylib arm64   /usr/lib/system/libsystem_notify.dylib\n0x181c30000 - 0x181c35fff libsystem_platform.dylib arm64  <4386956061113d7a9e415e543b1243bc> /usr/lib/system/libsystem_platform.dylib\n0x181c38000 - 0x181c40fff libsystem_pthread.dylib arm64  <73c5c182a73d38a3b0a3a1f496289278> /usr/lib/system/libsystem_pthread.dylib\n0x181c44000 - 0x181c46fff libsystem_sandbox.dylib arm64  <1188d6b10703327cb5d72a5623200c30> /usr/lib/system/libsystem_sandbox.dylib\n0x181c48000 - 0x181c58fff libsystem_trace.dylib arm64   /usr/lib/system/libsystem_trace.dylib\n0x181c5c000 - 0x181c61fff libunwind.dylib arm64   /usr/lib/system/libunwind.dylib\n0x181c64000 - 0x181c64fff libvminterpose.dylib arm64  <630bf4c89edf3935b7afe56abdb5caad> /usr/lib/system/libvminterpose.dylib\n0x181c68000 - 0x181c8dfff libxpc.dylib arm64   /usr/lib/system/libxpc.dylib\n0x181c90000 - 0x181e95fff libicucore.A.dylib arm64   /usr/lib/libicucore.A.dylib\n0x181e98000 - 0x181ea9fff libz.1.dylib arm64  <8fcb56adfdc13e9593582266b1e4ac18> /usr/lib/libz.1.dylib\n0x181eac000 - 0x18222cfff CoreFoundation arm64  <182fd72b7fdf330b8dbf70db93af6b63> /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation\n0x182230000 - 0x182240fff libbsm.0.dylib arm64   /usr/lib/libbsm.0.dylib\n0x182244000 - 0x182244fff libenergytrace.dylib arm64   /usr/lib/libenergytrace.dylib\n0x182248000 - 0x1822b9fff IOKit arm64  <0864d9c20424332d8979a4f548848c16> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit\n0x1822bc000 - 0x1822dcfff libMobileGestalt.dylib arm64  <9cc485a12c323768a6b6e88d973bd44e> /usr/lib/libMobileGestalt.dylib\n0x1822e0000 - 0x1823cafff libxml2.2.dylib arm64   /usr/lib/libxml2.2.dylib\n0x1823cc000 - 0x18243efff Security arm64  <4c7468d385513e4db673ec80c318ee20> /System/Library/Frameworks/Security.framework/Security\n0x182440000 - 0x182499fff SystemConfiguration arm64  <92717250c7393c44878d137773604d46> /System/Library/Frameworks/SystemConfiguration.framework/SystemConfiguration\n0x18249c000 - 0x182584fff libsqlite3.dylib arm64   /usr/lib/libsqlite3.dylib\n0x182588000 - 0x18281cfff CFNetwork arm64   /System/Library/Frameworks/CFNetwork.framework/CFNetwork\n0x182820000 - 0x18282dfff libbz2.1.0.dylib arm64  <8ebfd413e3fd3889b546857fcf554b6f> /usr/lib/libbz2.1.0.dylib\n0x182830000 - 0x182849fff liblzma.5.dylib arm64  <68bb861dc8bd3547b5ace073ed504b14> /usr/lib/liblzma.5.dylib\n0x18284c000 - 0x182866fff libCRFSuite.dylib arm64  <1a2c1f709f213faf81fd2223b719c899> /usr/lib/libCRFSuite.dylib\n0x182868000 - 0x182892fff libarchive.2.dylib arm64   /usr/lib/libarchive.2.dylib\n0x182894000 - 0x1828b2fff libextension.dylib arm64  <8a88fb35fee03a36ae138e676b9a0e9f> /usr/lib/libextension.dylib\n0x1828b4000 - 0x1828b5fff liblangid.dylib arm64   /usr/lib/liblangid.dylib\n0x1828b8000 - 0x182b26fff Foundation arm64  <7cf4edf781cb30438b812ded8716cd95> /System/Library/Frameworks/Foundation.framework/Foundation\n0x182b28000 - 0x182bd3fff libBLAS.dylib arm64  <097b7e769a3439ad8fdb3abb0edc9daf> /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/libBLAS.dylib\n0x182bd4000 - 0x182f39fff libLAPACK.dylib arm64  <566419f65c9338599694a04da8e20fbf> /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/libLAPACK.dylib\n0x182f3c000 - 0x1831a1fff vImage arm64  <789df1b35e183397803583a25feff3c7> /System/Library/Frameworks/Accelerate.framework/Frameworks/vImage.framework/vImage\n0x1831a4000 - 0x1831c6fff libvMisc.dylib arm64  <3c655ae6f62035bbba069387c490efbb> /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/libvMisc.dylib\n0x1831c8000 - 0x1831dbfff libLinearAlgebra.dylib arm64  <94d099e954d638e39ef1773639ef61af> /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/libLinearAlgebra.dylib\n0x1831dc000 - 0x1831ebfff libSparseBLAS.dylib arm64  <80ca4fb770613c76b2449daf05c6dc25> /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/libSparseBLAS.dylib\n0x1831ec000 - 0x183258fff libvDSP.dylib arm64   /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/libvDSP.dylib\n0x18325c000 - 0x18325cfff vecLib arm64  <546ad53c3a4a36709fdf6e50b76b2ec9> /System/Library/Frameworks/Accelerate.framework/Frameworks/vecLib.framework/vecLib\n0x183260000 - 0x183260fff Accelerate arm64   /System/Library/Frameworks/Accelerate.framework/Accelerate\n0x183264000 - 0x18378ffff CoreGraphics arm64   /System/Library/Frameworks/CoreGraphics.framework/CoreGraphics\n0x183790000 - 0x1837a4fff GraphicsServices arm64   /System/Library/PrivateFrameworks/GraphicsServices.framework/GraphicsServices\n0x1837a8000 - 0x1837f0fff AppSupport arm64  <1469530c1aa03d2486d678bed8482764> /System/Library/PrivateFrameworks/AppSupport.framework/AppSupport\n0x1837f4000 - 0x1838c7fff MobileCoreServices arm64  <2096d560a53b3fd28ff0a7f46e3ba060> /System/Library/Frameworks/MobileCoreServices.framework/MobileCoreServices\n0x1838c8000 - 0x183917fff BaseBoard arm64   /System/Library/PrivateFrameworks/BaseBoard.framework/BaseBoard\n0x183918000 - 0x183923fff AssertionServices arm64  <48c978bd14553765b4a7f1cee1b14c83> /System/Library/PrivateFrameworks/AssertionServices.framework/AssertionServices\n0x183924000 - 0x183948fff BackBoardServices arm64  <207836d8c1833eeab468f622f4d0f366> /System/Library/PrivateFrameworks/BackBoardServices.framework/BackBoardServices\n0x18394c000 - 0x18394ffff MobileSystemServices arm64  <6d85ae92680935bbb51db96c7a021118> /System/Library/PrivateFrameworks/MobileSystemServices.framework/MobileSystemServices\n0x183950000 - 0x183985fff FrontBoardServices arm64   /System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices\n0x183988000 - 0x183992fff UserNotificationServices arm64  <74d3e76dff833048b39ae8e0ceb44140> /System/Library/PrivateFrameworks/UserNotificationServices.framework/UserNotificationServices\n0x183994000 - 0x1839c0fff SpringBoardServices arm64  <6535787e172939d0b8abfe852a185b3d> /System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices\n0x1839c4000 - 0x1839d5fff MobileKeyBag arm64  <169edc8949693d349807056d1e316f2a> /System/Library/PrivateFrameworks/MobileKeyBag.framework/MobileKeyBag\n0x1839d8000 - 0x1839defff IOSurface arm64   /System/Library/PrivateFrameworks/IOSurface.framework/IOSurface\n0x1839e0000 - 0x1839ecfff liblockdown.dylib arm64  <36e1e9187c193410a5f7cf46e3dc7afe> /usr/lib/liblockdown.dylib\n0x1839f0000 - 0x183a02fff CrashReporterSupport arm64  <3b4a2b63b2a9334fa8019a4152d3aa49> /System/Library/PrivateFrameworks/CrashReporterSupport.framework/CrashReporterSupport\n0x183a04000 - 0x183a06fff IOSurfaceAccelerator arm64  <65789d64b5f937e987c6f27125a38100> /System/Library/PrivateFrameworks/IOSurfaceAccelerator.framework/IOSurfaceAccelerator\n0x183a08000 - 0x183a49fff AppleJPEG arm64  <8b25b915b426335f8d9112a8c7e29e46> /System/Library/PrivateFrameworks/AppleJPEG.framework/AppleJPEG\n0x183a4c000 - 0x183d6ffff ImageIO arm64  <985b712758c43d62a2104d9e708fb2e9> /System/Library/Frameworks/ImageIO.framework/ImageIO\n0x183d70000 - 0x183d74fff TCC arm64  <09fcccda721f35c3936e68acf3d216a4> /System/Library/PrivateFrameworks/TCC.framework/TCC\n0x183d78000 - 0x183d7dfff AggregateDictionary arm64  <51bcd4b61f3739eb85fdcc4a037e3696> /System/Library/PrivateFrameworks/AggregateDictionary.framework/AggregateDictionary\n0x183d80000 - 0x183d8dfff PowerLog arm64   /System/Library/PrivateFrameworks/PowerLog.framework/PowerLog\n0x183d90000 - 0x183df2fff libTelephonyUtilDynamic.dylib arm64  <59e0bc898f27370d8e4961910f891b3b> /usr/lib/libTelephonyUtilDynamic.dylib\n0x183df4000 - 0x183e06fff CommonUtilities arm64  <194ea4f46bf537029d10e4ce8b28ca5f> /System/Library/PrivateFrameworks/CommonUtilities.framework/CommonUtilities\n0x183e08000 - 0x183e1ffff libcompression.dylib arm64   /usr/lib/libcompression.dylib\n0x183e20000 - 0x18406afff CoreData arm64   /System/Library/Frameworks/CoreData.framework/CoreData\n0x18406c000 - 0x184070fff libCoreVMClient.dylib arm64  <69b5ba7317d532b898c3ffb5574bb883> /System/Library/Frameworks/OpenGLES.framework/libCoreVMClient.dylib\n0x184074000 - 0x184078fff IOAccelerator arm64  <8763c48f6ea73eae887a414462ffe098> /System/Library/PrivateFrameworks/IOAccelerator.framework/IOAccelerator\n0x18407c000 - 0x18407dfff libCVMSPluginSupport.dylib arm64   /System/Library/Frameworks/OpenGLES.framework/libCVMSPluginSupport.dylib\n0x184080000 - 0x184083fff libCoreFSCache.dylib arm64   /System/Library/Frameworks/OpenGLES.framework/libCoreFSCache.dylib\n0x184084000 - 0x1840cafff libGLImage.dylib arm64   /System/Library/Frameworks/OpenGLES.framework/libGLImage.dylib\n0x1840cc000 - 0x1840d6fff libGFXShared.dylib arm64   /System/Library/Frameworks/OpenGLES.framework/libGFXShared.dylib\n0x1840d8000 - 0x1840dffff IOMobileFramebuffer arm64   /System/Library/PrivateFrameworks/IOMobileFramebuffer.framework/IOMobileFramebuffer\n0x1840e0000 - 0x1840e0fff libmetal_timestamp.dylib arm64   /System/Library/PrivateFrameworks/GPUCompiler.framework/libmetal_timestamp.dylib\n0x1840e4000 - 0x18412afff Metal arm64  <95ce1f8a4d483d11aa49533e2ae2a568> /System/Library/Frameworks/Metal.framework/Metal\n0x18412c000 - 0x184136fff OpenGLES arm64  <7c7a0c5191f53f518e994638139ca1df> /System/Library/Frameworks/OpenGLES.framework/OpenGLES\n0x184138000 - 0x18415afff CoreVideo arm64  <31ef8b764af3301ea5e7267fcae838cb> /System/Library/Frameworks/CoreVideo.framework/CoreVideo\n0x18415c000 - 0x18415efff OAuth arm64  <0f1ae5abcad13b4b948193a2405c61b4> /System/Library/PrivateFrameworks/OAuth.framework/OAuth\n0x184168000 - 0x18419ffff Accounts arm64  <1cf893c2c3c03137acb576d5a7fc2cee> /System/Library/Frameworks/Accounts.framework/Accounts\n0x1841a0000 - 0x184292fff libiconv.2.dylib arm64  <1c378c57054a32a6b2eed4e3cbb3a2b7> /usr/lib/libiconv.2.dylib\n0x184294000 - 0x18434dfff CoreAudio arm64  <25687ef4b3c4389f828006882b280db4> /System/Library/Frameworks/CoreAudio.framework/CoreAudio\n0x184350000 - 0x184353fff UserFS arm64  <693602c29c64370aab1a77544ddc7e5a> /System/Library/PrivateFrameworks/UserFS.framework/UserFS\n0x184354000 - 0x184442fff CoreMedia arm64   /System/Library/Frameworks/CoreMedia.framework/CoreMedia\n0x184444000 - 0x18444cfff libcupolicy.dylib arm64  <056df1f0f2893ad08b9c7fbed9271c6f> /usr/lib/libcupolicy.dylib\n0x184450000 - 0x1844c2fff CoreTelephony arm64   /System/Library/Frameworks/CoreTelephony.framework/CoreTelephony\n0x1844c4000 - 0x1845a4fff libFontParser.dylib arm64  <7ab9c32919d731969bc2a75b3f03aa17> /System/Library/PrivateFrameworks/FontServices.framework/libFontParser.dylib\n0x1845a8000 - 0x18462afff VideoToolbox arm64  <96c874d7271f3ec18a39b6de15ef6384> /System/Library/Frameworks/VideoToolbox.framework/VideoToolbox\n0x18462c000 - 0x18462cfff FontServices arm64  <39a3005cf101328f94f3a412cfa04fae> /System/Library/PrivateFrameworks/FontServices.framework/FontServices\n0x184630000 - 0x184753fff CoreText arm64  <688f036ee040335aaf44f555b7b98ace> /System/Library/Frameworks/CoreText.framework/CoreText\n0x184754000 - 0x184765fff ProtocolBuffer arm64  <4d1a9d53f37b3b448cbc62ede839532f> /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer\n0x184768000 - 0x18478ffff PersistentConnection arm64  <57092c3dc97437f9a14b61cae9e60e88> /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection\n0x184790000 - 0x184795fff DataMigration arm64   /System/Library/PrivateFrameworks/DataMigration.framework/DataMigration\n0x184798000 - 0x184ab1fff AudioToolbox arm64  <3acc644e69ff3aedae6e3af12f13c58c> /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox\n0x184ab4000 - 0x184c62fff QuartzCore arm64   /System/Library/Frameworks/QuartzCore.framework/QuartzCore\n0x184c64000 - 0x184c6afff Netrb arm64   /System/Library/PrivateFrameworks/Netrb.framework/Netrb\n0x184c6c000 - 0x184c7dfff libcmph.dylib arm64   /usr/lib/libcmph.dylib\n0x184c80000 - 0x184c9dfff libmis.dylib arm64  <19a3fb5270713311900b8723341c9649> /usr/lib/libmis.dylib\n0x184ca0000 - 0x184d20fff LanguageModeling arm64  <25b1d85465f531118bbcd9b3afcb4151> /System/Library/PrivateFrameworks/LanguageModeling.framework/LanguageModeling\n0x184d24000 - 0x184e01fff ManagedConfiguration arm64  <6829ea88182532c69d9eb79c0d5d8ab8> /System/Library/PrivateFrameworks/ManagedConfiguration.framework/ManagedConfiguration\n0x184e04000 - 0x184e1bfff libmarisa.dylib arm64  <72aff9de7b7a3d0f8d24b2f2e33599b1> /usr/lib/libmarisa.dylib\n0x184e1c000 - 0x184ee3fff ProofReader arm64   /System/Library/PrivateFrameworks/ProofReader.framework/ProofReader\n0x184ee4000 - 0x184eeafff MediaAccessibility arm64   /System/Library/Frameworks/MediaAccessibility.framework/MediaAccessibility\n0x184eec000 - 0x184efbfff MobileAsset arm64  <4f36adf36909306e8cdda53f431aec5e> /System/Library/PrivateFrameworks/MobileAsset.framework/MobileAsset\n0x184efc000 - 0x184f5dfff ColorSync arm64  <7a7f1de762e734a1b0185bbcf4c5805d> /System/Library/PrivateFrameworks/ColorSync.framework/ColorSync\n0x184f60000 - 0x184fabfff MetalPerformanceShaders arm64  <7530c46bdba43048b3780b308d1e0349> /System/Library/Frameworks/MetalPerformanceShaders.framework/MetalPerformanceShaders\n0x184fac000 - 0x1853d8fff FaceCore arm64  <9fe0da65d44f3e58872fa11c1d79a801> /System/Library/PrivateFrameworks/FaceCore.framework/FaceCore\n0x1853dc000 - 0x185457fff Quagga arm64  <872de61a4b163a57b1e5df76124b9013> /System/Library/PrivateFrameworks/Quagga.framework/Quagga\n0x185458000 - 0x185602fff CoreImage arm64   /System/Library/Frameworks/CoreImage.framework/CoreImage\n0x185604000 - 0x185636fff TextInput arm64  <475a479564123e0aafd3f578a8ad861a> /System/Library/PrivateFrameworks/TextInput.framework/TextInput\n0x185638000 - 0x185645fff libAccessibility.dylib arm64  <767e55a612343e498e13731d796f2f9f> /usr/lib/libAccessibility.dylib\n0x185648000 - 0x185651fff MobileInstallation arm64   /System/Library/PrivateFrameworks/MobileInstallation.framework/MobileInstallation\n0x185654000 - 0x185c35fff JavaScriptCore arm64  <7b9d576bd0b0397aa02c5215ff3b128b> /System/Library/Frameworks/JavaScriptCore.framework/JavaScriptCore\n0x185c38000 - 0x185e28fff StoreServices arm64  <1d049fdac44435b5bc226bd646743eef> /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices\n0x185e2c000 - 0x186e04fff WebCore arm64   /System/Library/PrivateFrameworks/WebCore.framework/WebCore\n0x186e08000 - 0x186e31fff libxslt.1.dylib arm64  <6553a930d8933aa0b054d0ebd966c83a> /usr/lib/libxslt.1.dylib\n0x186e34000 - 0x186f0ffff WebKitLegacy arm64  <6bf2496789113045a9c472f536802b90> /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy\n0x186f10000 - 0x186fc8fff CoreUI arm64  <1fd04759197f312ab80538caca1dd94e> /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI\n0x186fcc000 - 0x186ff1fff DictionaryServices arm64  <03b326076ce4388099fb7442bcbcbd3b> /System/Library/PrivateFrameworks/DictionaryServices.framework/DictionaryServices\n0x186ff4000 - 0x186ff4fff HangTracer arm64  <2989b93ed68939929f8898e8d586bdc2> /System/Library/PrivateFrameworks/HangTracer.framework/HangTracer\n0x186ff8000 - 0x187046fff PhysicsKit arm64   /System/Library/PrivateFrameworks/PhysicsKit.framework/PhysicsKit\n0x187048000 - 0x18711efff UIFoundation arm64   /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation\n0x187120000 - 0x187d4afff UIKit arm64   /System/Library/Frameworks/UIKit.framework/UIKit\n0x187d4c000 - 0x187d6dfff CoreBluetooth arm64  <6d465f745c9f3d40994aa5c5dfb8bd47> /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth\n0x187d70000 - 0x187d95fff DataAccessExpress arm64   /System/Library/PrivateFrameworks/DataAccessExpress.framework/DataAccessExpress\n0x187d98000 - 0x187db1fff NetworkStatistics arm64  <5e417d9061873b19b049ad6121fa503f> /System/Library/PrivateFrameworks/NetworkStatistics.framework/NetworkStatistics\n0x187db4000 - 0x187e2ffff AddressBook arm64   /System/Library/Frameworks/AddressBook.framework/AddressBook\n0x187e30000 - 0x187f3dfff CoreMotion arm64  <84fc4640c3f6324988e607818fd7c81e> /System/Library/Frameworks/CoreMotion.framework/CoreMotion\n0x187f40000 - 0x187f4ffff CacheDelete arm64  <0cd7d27acecb36cd896af0ecbce96841> /System/Library/PrivateFrameworks/CacheDelete.framework/CacheDelete\n0x187f50000 - 0x187f5dfff CoreAUC arm64  <49032794e9663a38870ae3825f822ff9> /System/Library/PrivateFrameworks/CoreAUC.framework/CoreAUC\n0x187f60000 - 0x18837dfff MediaToolbox arm64  <63c82682825d390e9fc5306f1e0ef3d9> /System/Library/Frameworks/MediaToolbox.framework/MediaToolbox\n0x188380000 - 0x188501fff Celestial arm64  <3e18c23e80013d3585844d78cc463503> /System/Library/PrivateFrameworks/Celestial.framework/Celestial\n0x188504000 - 0x188510fff IntlPreferences arm64  <26be9c8bb13f380cb1c3b6b817802f17> /System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences\n0x188514000 - 0x188516fff CoreDuetDebugLogging arm64   /System/Library/PrivateFrameworks/CoreDuetDebugLogging.framework/CoreDuetDebugLogging\n0x188518000 - 0x18852dfff CoreDuetDaemonProtocol arm64  <12eeb031ac203a6bb7794b5bab52671a> /System/Library/PrivateFrameworks/CoreDuetDaemonProtocol.framework/CoreDuetDaemonProtocol\n0x188530000 - 0x1885e3fff CoreDuet arm64  <227bd93065bc38dbafff0c3774d180ff> /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet\n0x1885e4000 - 0x1885e5fff BTLEAudioController arm64  <02b9ff17791e3118a8607eb323b8501a> /System/Library/PrivateFrameworks/BTLEAudioController.framework/BTLEAudioController\n0x1885e8000 - 0x188660fff libAVFAudio.dylib arm64  <6085404284a933f29311bda931a38e43> /System/Library/Frameworks/AVFoundation.framework/libAVFAudio.dylib\n0x188664000 - 0x1887e4fff AVFoundation arm64  <6dddb40fbe9c39dc82bae11fb54fafaa> /System/Library/Frameworks/AVFoundation.framework/AVFoundation\n0x1887e8000 - 0x188819fff libtidy.A.dylib arm64  <62273117ae1833b6b0fbc5374ac00955> /usr/lib/libtidy.A.dylib\n0x18881c000 - 0x18888dfff IMFoundation arm64   /System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation\n0x188890000 - 0x188d1bfff GeoServices arm64   /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices\n0x188d1c000 - 0x188d1dfff DiagnosticLogCollection arm64  <23c742c1baa03399bd005d2330fe2272> /System/Library/PrivateFrameworks/DiagnosticLogCollection.framework/DiagnosticLogCollection\n0x188d20000 - 0x188d21fff Marco arm64  <78085fa90dd73982acd80b9b4f074efa> /System/Library/PrivateFrameworks/Marco.framework/Marco\n0x188d24000 - 0x188d8dfff CoreLocation arm64  <9339dae59c4834b69ad70baaef9d5488> /System/Library/Frameworks/CoreLocation.framework/CoreLocation\n0x188d90000 - 0x188d95fff ConstantClasses arm64   /System/Library/PrivateFrameworks/ConstantClasses.framework/ConstantClasses\n0x188d98000 - 0x188da3fff libChineseTokenizer.dylib arm64  <12cb857d186b341f9ad1c8ee75095ee5> /usr/lib/libChineseTokenizer.dylib\n0x188da4000 - 0x189003fff libmecabra.dylib arm64   /usr/lib/libmecabra.dylib\n0x189004000 - 0x189037fff IDSFoundation arm64  <63f4b86771bf3c97bcc739adab9ba183> /System/Library/PrivateFrameworks/IDSFoundation.framework/IDSFoundation\n0x189038000 - 0x1890b4fff IDS arm64   /System/Library/PrivateFrameworks/IDS.framework/IDS\n0x1890b8000 - 0x1890d3fff MediaServices arm64   /System/Library/PrivateFrameworks/MediaServices.framework/MediaServices\n0x1890d4000 - 0x1890f8fff AuthKit arm64   /System/Library/PrivateFrameworks/AuthKit.framework/AuthKit\n0x1890fc000 - 0x189101fff libheimdal-asn1.dylib arm64  <2cdbd8d18d663aafb7fbb18c2235f1c6> /usr/lib/libheimdal-asn1.dylib\n0x189104000 - 0x189196fff MediaRemote arm64  <55291d9da59b36468c3c29ace13e2c82> /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote\n0x189198000 - 0x1892c9fff MobileSpotlightIndex arm64   /System/Library/PrivateFrameworks/MobileSpotlightIndex.framework/MobileSpotlightIndex\n0x1892cc000 - 0x1892e7fff PlugInKit arm64  <84c62dcf044f3ddbbb66629ff757016d> /System/Library/PrivateFrameworks/PlugInKit.framework/PlugInKit\n0x1892e8000 - 0x189310fff ProtectedCloudStorage arm64   /System/Library/PrivateFrameworks/ProtectedCloudStorage.framework/ProtectedCloudStorage\n0x189314000 - 0x18932ffff libresolv.9.dylib arm64  <0062ade5d59d35ecbb8bf9c15b88d6f8> /usr/lib/libresolv.9.dylib\n0x189330000 - 0x189345fff ApplePushService arm64  <1d6fc72f497e3abbbc13e9f0528c4bf1> /System/Library/PrivateFrameworks/ApplePushService.framework/ApplePushService\n0x189348000 - 0x189370fff ContactsFoundation arm64  <5b56325e99d43df0875893f3629cf775> /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation\n0x189374000 - 0x189378fff ParsecSubscriptionServiceSupport arm64   /System/Library/PrivateFrameworks/ParsecSubscriptionServiceSupport.framework/ParsecSubscriptionServiceSupport\n0x18937c000 - 0x189404fff Contacts arm64   /System/Library/Frameworks/Contacts.framework/Contacts\n0x189408000 - 0x189443fff CoreSpotlight arm64  <4fc7c966e5a03e14bc6d2bd4bb757934> /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight\n0x189444000 - 0x189463fff vCard arm64  <8139df6f04d830f39ef345d53ffb6466> /System/Library/PrivateFrameworks/vCard.framework/vCard\n0x189464000 - 0x189488fff VoiceServices arm64  <144c9634ff96328a9352e50b95d41de6> /System/Library/PrivateFrameworks/VoiceServices.framework/VoiceServices\n0x18948c000 - 0x1894d2fff SAObjects arm64   /System/Library/PrivateFrameworks/SAObjects.framework/SAObjects\n0x1894d4000 - 0x1894d6fff CommonAuth arm64  <38dc2b74c43034c5902810188fe4cc8c> /System/Library/PrivateFrameworks/CommonAuth.framework/CommonAuth\n0x1894d8000 - 0x189545fff Heimdal arm64  <70f45556567c3167af7cc67723c0c37b> /System/Library/PrivateFrameworks/Heimdal.framework/Heimdal\n0x189548000 - 0x189571fff GSS arm64  <03e9cbf8ff0c3f2594f933f040f57bb4> /System/Library/Frameworks/GSS.framework/GSS\n0x189580000 - 0x1895d7fff AssistantServices arm64  <773c3d0701ab3f4bad7b6cd61c9f24d2> /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices\n0x1895d8000 - 0x1895e1fff FMCoreLite arm64  <9c24f373ca553da0aae4e1601f5d4131> /System/Library/PrivateFrameworks/FMCoreLite.framework/FMCoreLite\n0x1895e4000 - 0x1895e7fff MessageSupport arm64  <3f0b005a0f2f3e11be2e3de6019bb0d2> /System/Library/PrivateFrameworks/MessageSupport.framework/MessageSupport\n0x1895e8000 - 0x18962ffff MIME arm64  <0afac5bbb15c3d78a8d210f32b7cf762> /System/Library/PrivateFrameworks/MIME.framework/MIME\n0x189630000 - 0x189636fff AOSNotification arm64  <02d1059c4f77377f91574b51b6fd1e56> /System/Library/PrivateFrameworks/AOSNotification.framework/AOSNotification\n0x189638000 - 0x18969dfff AccountsDaemon arm64   /System/Library/PrivateFrameworks/AccountsDaemon.framework/AccountsDaemon\n0x1896a0000 - 0x1896bafff AppleIDSSOAuthentication arm64   /System/Library/PrivateFrameworks/AppleIDSSOAuthentication.framework/AppleIDSSOAuthentication\n0x1896bc000 - 0x1896cbfff MailServices arm64  <3e4e96a3897b3ad98ef2ab8565b5dfa7> /System/Library/PrivateFrameworks/MailServices.framework/MailServices\n0x1896cc000 - 0x189728fff AppleAccount arm64  <6abcea21b5863d0abe482ff62c0e25fc> /System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount\n0x18972c000 - 0x189730fff CommunicationsFilter arm64  <529acb9e5bed3635a3d63112484bf115> /System/Library/PrivateFrameworks/CommunicationsFilter.framework/CommunicationsFilter\n0x189734000 - 0x189758fff ChunkingLibrary arm64  <5ad8b7937ec334709934a8ad10ab8012> /System/Library/PrivateFrameworks/ChunkingLibrary.framework/ChunkingLibrary\n0x18975c000 - 0x189766fff CaptiveNetwork arm64  <9c19a9fb40b930098b60496851683f6d> /System/Library/PrivateFrameworks/CaptiveNetwork.framework/CaptiveNetwork\n0x189768000 - 0x18978efff EAP8021X arm64   /System/Library/PrivateFrameworks/EAP8021X.framework/EAP8021X\n0x189790000 - 0x189795fff AssetCacheServices arm64  <048dcff988ef32a38008bf337d776629> /System/Library/PrivateFrameworks/AssetCacheServices.framework/AssetCacheServices\n0x189798000 - 0x18980dfff MMCS arm64  <5aefee3454823fc2800803ddd4db1b84> /System/Library/PrivateFrameworks/MMCS.framework/MMCS\n0x189810000 - 0x189822fff MobileWiFi arm64   /System/Library/PrivateFrameworks/MobileWiFi.framework/MobileWiFi\n0x189824000 - 0x189865fff ContentIndex arm64   /System/Library/PrivateFrameworks/ContentIndex.framework/ContentIndex\n0x189868000 - 0x189870fff MobileIcons arm64  <077159249f6c3bcebb1217dd27a87e8a> /System/Library/PrivateFrameworks/MobileIcons.framework/MobileIcons\n0x189874000 - 0x189880fff MobileBluetooth arm64  <09cc2d3dcc003a5aa796e05406dfe8a6> /System/Library/PrivateFrameworks/MobileBluetooth.framework/MobileBluetooth\n0x189884000 - 0x1898bcfff NanoRegistry arm64  <52fb492288d4357c801cb2222861f549> /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry\n0x1898c0000 - 0x1898c7fff BluetoothManager arm64  <1d6811f5c6ba3f42b5279502c90ed632> /System/Library/PrivateFrameworks/BluetoothManager.framework/BluetoothManager\n0x1898c8000 - 0x1898f8fff Bom arm64  <774d3a8c549537bfae570bb88c6ae221> /System/Library/PrivateFrameworks/Bom.framework/Bom\n0x1898fc000 - 0x189902fff CertUI arm64   /System/Library/PrivateFrameworks/CertUI.framework/CertUI\n0x189904000 - 0x189938fff FTServices arm64  <2f9cac51e8233f8abf76332b2408b5e7> /System/Library/PrivateFrameworks/FTServices.framework/FTServices\n0x18993c000 - 0x189997fff CoreDAV arm64   /System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV\n0x189998000 - 0x1899a1fff BaseBoardUI arm64  <3786d8e147593bd5b5a93165e25c29e6> /System/Library/PrivateFrameworks/BaseBoardUI.framework/BaseBoardUI\n0x1899a4000 - 0x1899b5fff UserManagement arm64  <1d49514ccc853a8f8ad3fdec01ad4766> /System/Library/PrivateFrameworks/UserManagement.framework/UserManagement\n0x1899b8000 - 0x189a83fff CorePDF arm64  <5a2aee277ba63cf4a29b20292a94e614> /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF\n0x189a84000 - 0x189ab9fff iCalendar arm64  <7b77a3fa3223346cb37b38a63710e8b2> /System/Library/PrivateFrameworks/iCalendar.framework/iCalendar\n0x189abc000 - 0x189ac4fff libtzupdate.dylib arm64  <9fcf1d5743c33e7693532e9edbf9a294> /usr/lib/libtzupdate.dylib\n0x189ac8000 - 0x189b14fff CalendarFoundation arm64  <43adb429bf073220a41de36f2bf9795e> /System/Library/PrivateFrameworks/CalendarFoundation.framework/CalendarFoundation\n0x189b18000 - 0x189b1efff IncomingCallFilter arm64   /System/Library/PrivateFrameworks/IncomingCallFilter.framework/IncomingCallFilter\n0x189b20000 - 0x189c02fff Preferences arm64  <4254479c9d32364c86589cca97274aca> /System/Library/PrivateFrameworks/Preferences.framework/Preferences\n0x189c04000 - 0x189c89fff CalendarDatabase arm64  <1ed133ea9106366eaf60d17657030960> /System/Library/PrivateFrameworks/CalendarDatabase.framework/CalendarDatabase\n0x189c8c000 - 0x189cc2fff CalendarDaemon arm64   /System/Library/PrivateFrameworks/CalendarDaemon.framework/CalendarDaemon\n0x189cc4000 - 0x189d56fff EventKit arm64  <6b8725dec175318fa7d92186f20a23e0> /System/Library/Frameworks/EventKit.framework/EventKit\n0x189d58000 - 0x18a03dfff WebKit arm64  <30d0ac8dc2263a139ca5f109b5871037> /System/Library/Frameworks/WebKit.framework/WebKit\n0x18a040000 - 0x18a076fff WebBookmarks arm64  <74bdb4a84d6f3f44aed2eb45e443bdef> /System/Library/PrivateFrameworks/WebBookmarks.framework/WebBookmarks\n0x18a078000 - 0x18a17afff ContactsUI arm64   /System/Library/Frameworks/ContactsUI.framework/ContactsUI\n0x18a17c000 - 0x18a55dfff ModelIO arm64  <9ce2a0abac573badb6bac9cf2c6bfdbb> /System/Library/Frameworks/ModelIO.framework/ModelIO\n0x18a560000 - 0x18a566fff DAAPKit arm64  <87e48b7832d23d5181cae92b86ba8db7> /System/Library/PrivateFrameworks/DAAPKit.framework/DAAPKit\n0x18a568000 - 0x18a5e6fff CoreSymbolication arm64  <19811191ce553bdf9fe2a7add475285d> /System/Library/PrivateFrameworks/CoreSymbolication.framework/CoreSymbolication\n0x18a5e8000 - 0x18a64bfff TelephonyUtilities arm64   /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities\n0x18a64c000 - 0x18a67afff GLKit arm64  <7b348b1148193b90878c60bc46d6abe6> /System/Library/Frameworks/GLKit.framework/GLKit\n0x18a67c000 - 0x18a8ccfff MusicLibrary arm64  <422dbfc175f33cc48b8d01930dfc6dc3> /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary\n0x18a8d0000 - 0x18a910fff Notes arm64  <8294e82858123421b9708190c870b78e> /System/Library/PrivateFrameworks/Notes.framework/Notes\n0x18a914000 - 0x18a9eafff AddressBookUI arm64  <0d022f7b6eac3e4fa32bd247ddedebb8> /System/Library/Frameworks/AddressBookUI.framework/AddressBookUI\n0x18a9ec000 - 0x18aaa5fff CloudKit arm64  <5a0898b0056f3aa8bb9a6f5e84185c9a> /System/Library/Frameworks/CloudKit.framework/CloudKit\n0x18aaa8000 - 0x18aaeefff iTunesStore arm64   /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore\n0x18aaf0000 - 0x18aaf6fff CloudPhotoServices arm64   /System/Library/PrivateFrameworks/CloudPhotoServices.framework/CloudPhotoServices\n0x18aaf8000 - 0x18abd6fff CloudPhotoLibrary arm64   /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary\n0x18abd8000 - 0x18ac28fff DataAccess arm64  <050cac9b39e23897afcc62f92fb3c365> /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess\n0x18ac2c000 - 0x18ac51fff AssetsLibraryServices arm64  <95e063176764337495fab184d2cdc6be> /System/Library/PrivateFrameworks/AssetsLibraryServices.framework/AssetsLibraryServices\n0x18ac54000 - 0x18acf1fff HomeSharing arm64  <3a275dea8c3d3ec8af36f220e62b3654> /System/Library/PrivateFrameworks/HomeSharing.framework/HomeSharing\n0x18acf4000 - 0x18ad21fff ACTFramework arm64  <148246d53b103ced8d9153e7ac0f7cc4> /System/Library/PrivateFrameworks/ACTFramework.framework/ACTFramework\n0x18ad24000 - 0x18ad2ffff DCIMServices arm64   /System/Library/PrivateFrameworks/DCIMServices.framework/DCIMServices\n0x18ad30000 - 0x18ae5cfff CoreMediaStream arm64  <78d4e1723350363ea044c7ecb28eaacb> /System/Library/PrivateFrameworks/CoreMediaStream.framework/CoreMediaStream\n0x18ae60000 - 0x18ae77fff PhotosFormats arm64  <4f1480ae641f35e8b43a77469a30be67> /System/Library/PrivateFrameworks/PhotosFormats.framework/PhotosFormats\n0x18ae78000 - 0x18ae7ffff XPCKit arm64   /System/Library/PrivateFrameworks/XPCKit.framework/XPCKit\n0x18ae80000 - 0x18b0f9fff MediaPlayer arm64  <3eec1ad746da343686485bcdde78c415> /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer\n0x18b0fc000 - 0x18b1e4fff CameraKit arm64  <94253a49d5553f4583d5bf83e90e30b4> /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit\n0x18b1e8000 - 0x18b1effff CoreTime arm64   /System/Library/PrivateFrameworks/CoreTime.framework/CoreTime\n0x18b1f0000 - 0x18b20bfff MediaStream arm64  <685fea53e4533d44b5d2e0a4f63404cf> /System/Library/PrivateFrameworks/MediaStream.framework/MediaStream\n0x18b20c000 - 0x18b54afff PhotoLibraryServices arm64   /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices\n0x18b54c000 - 0x18b582fff PrototypeTools arm64  <6cfae20cd6b33580b866c61118851fd9> /System/Library/PrivateFrameworks/PrototypeTools.framework/PrototypeTools\n0x18b5f4000 - 0x18b617fff ScreenReaderCore arm64  <96379f32dbca34b296e6d4b6ffa06bbf> /System/Library/PrivateFrameworks/ScreenReaderCore.framework/ScreenReaderCore\n0x18b618000 - 0x18b697fff BulletinBoard arm64   /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard\n0x18b698000 - 0x18b698fff MobileObliteration arm64  <1925bbd546ea33f2b67b3b9f07a174fe> /System/Library/PrivateFrameworks/MobileObliteration.framework/MobileObliteration\n0x18b69c000 - 0x18b6b4fff TextToSpeech arm64   /System/Library/PrivateFrameworks/TextToSpeech.framework/TextToSpeech\n0x18b6b8000 - 0x18b715fff SpringBoardFoundation arm64  <4dfdb2efe9f43c7c9c10a2243eeb0b34> /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation\n0x18b718000 - 0x18b71afff libAXSafeCategoryBundle.dylib arm64   /usr/lib/libAXSafeCategoryBundle.dylib\n0x18b71c000 - 0x18b724fff libAXSpeechManager.dylib arm64   /usr/lib/libAXSpeechManager.dylib\n0x18b728000 - 0x18b7aafff AccessibilityUtilities arm64  <34de5b6776a634b7ba61e2e9fd6e7be0> /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities\n0x18b7ac000 - 0x18b8ccfff Message arm64  <9081fd823a9936eaad2147151a5e9ca9> /System/Library/PrivateFrameworks/Message.framework/Message\n0x18b8ec000 - 0x18b931fff TelephonyUI arm64  <7575a0f23e913adeb005d26c372c6e57> /System/Library/PrivateFrameworks/TelephonyUI.framework/TelephonyUI\n0x18b934000 - 0x18b954fff ToneLibrary arm64   /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary\n0x18b9d0000 - 0x18b9dbfff NotificationsUI arm64   /System/Library/PrivateFrameworks/NotificationsUI.framework/NotificationsUI\n0x18b9dc000 - 0x18b9e1fff ProgressUI arm64  <6eb91cfd91b8315f9287a9ac931b0689> /System/Library/PrivateFrameworks/ProgressUI.framework/ProgressUI\n0x18bc68000 - 0x18bc9cfff SpringBoardUIServices arm64   /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices\n0x18bcd4000 - 0x18bd91fff Photos arm64   /System/Library/Frameworks/Photos.framework/Photos\n0x18bd94000 - 0x18bdc4fff AXRuntime arm64  <2d625992b13a3e14b91aec4be2c437b8> /System/Library/PrivateFrameworks/AXRuntime.framework/AXRuntime\n0x18bdec000 - 0x18be3afff RemoteUI arm64  <2477159bf6fd3db4a9cb5a9e8dd0fcf2> /System/Library/PrivateFrameworks/RemoteUI.framework/RemoteUI\n0x18be3c000 - 0x18be54fff GenerationalStorage arm64  <4480109728263983957dcc8a897cef54> /System/Library/PrivateFrameworks/GenerationalStorage.framework/GenerationalStorage\n0x18be58000 - 0x18be63fff CoreRecents arm64   /System/Library/PrivateFrameworks/CoreRecents.framework/CoreRecents\n0x18be68000 - 0x18be6efff AccessibilityUIUtilities arm64   /System/Library/PrivateFrameworks/Accessibility.framework/Frameworks/AccessibilityUIUtilities.framework/AccessibilityUIUtilities\n0x18bf28000 - 0x18bf43fff SpringBoardUI arm64  <9937ac5f485b3ceeaa30d37e75075373> /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI\n0x18bf44000 - 0x18c5a2fff VectorKit arm64  <96526ae78f843c1f81e408a35625a541> /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit\n0x18c5a4000 - 0x18c735fff MapKit arm64  <46807e7621a03234a634436879ad6b59> /System/Library/Frameworks/MapKit.framework/MapKit\n0x18c754000 - 0x18c756fff FTClientServices arm64  <4bffd1a289bc3cc4926c400cb813bf33> /System/Library/PrivateFrameworks/FTClientServices.framework/FTClientServices\n0x18c758000 - 0x18c766fff QuickLookThumbnailing arm64  <78f45a609e163e91bde4d4e762d2b58d> /System/Library/PrivateFrameworks/QuickLookThumbnailing.framework/QuickLookThumbnailing\n0x18c828000 - 0x18c82ffff AXMediaUtilities arm64  <1706235d64a535b8b045cb50c7b5629a> /System/Library/PrivateFrameworks/Accessibility.framework/Frameworks/AXMediaUtilities.framework/AXMediaUtilities\n0x18c830000 - 0x18c884fff QuickLook arm64  <1ba1acc9f25132fb9bb303f3a4d5558e> /System/Library/Frameworks/QuickLook.framework/QuickLook\n0x18c888000 - 0x18c8cdfff UIAccessibility arm64  <5cec4bed09733be9b38d4e1d6263d64f> /System/Library/PrivateFrameworks/UIAccessibility.framework/UIAccessibility\n0x18c8d0000 - 0x18c906fff ContactsAutocomplete arm64   /System/Library/PrivateFrameworks/ContactsAutocomplete.framework/ContactsAutocomplete\n0x18c908000 - 0x18c916fff NanoPreferencesSync arm64   /System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync\n0x18c918000 - 0x18c9f4fff MessageUI arm64  <4102eb0943623581872e2cae088900c9> /System/Library/Frameworks/MessageUI.framework/MessageUI\n0x18cd18000 - 0x18cd18fff AdSupport arm64   /System/Library/Frameworks/AdSupport.framework/AdSupport\n0x18cd1c000 - 0x18cd36fff StoreKit arm64   /System/Library/Frameworks/StoreKit.framework/StoreKit\n0x18cdd8000 - 0x18cdf0fff SharedUtils arm64  <630caa69325938db893656de12e8cfc1> /System/Library/Frameworks/LocalAuthentication.framework/Support/SharedUtils.framework/SharedUtils\n0x18d0d0000 - 0x18d0dbfff LocalAuthentication arm64   /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication\n0x18d2e8000 - 0x18d35dfff CoreRecognition arm64   /System/Library/PrivateFrameworks/CoreRecognition.framework/CoreRecognition\n0x18d360000 - 0x18d36efff FindMyDevice arm64  <0954ec54cbb53b60ab73be95aaa2db27> /System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice\n0x18d384000 - 0x18d3acfff Pegasus arm64  <7b0e31b4d0ad348db506838df0ad13d5> /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus\n0x18d468000 - 0x18d4b1fff AVKit arm64  <7ef0e8c16cab36979a80028c7e3fe283> /System/Library/Frameworks/AVKit.framework/AVKit\n0x18d4b4000 - 0x18d4bafff AITTarget arm64  <5d91357362c43244979438b4de2ae52f> /System/Library/PrivateFrameworks/AITTarget.framework/AITTarget\n0x18d578000 - 0x18d757fff SafariShared arm64  <6bddf19f6aec360e81d81762ad6f65d0> /System/Library/PrivateFrameworks/SafariShared.framework/SafariShared\n0x18df28000 - 0x18df64fff WebUI arm64  <73f84ea778e831e08c13e6f4efec9111> /System/Library/PrivateFrameworks/WebUI.framework/WebUI\n0x18e3c8000 - 0x18e43efff SafariServices arm64  <4991f6075c363be0861fbb8f268e71e6> /System/Library/Frameworks/SafariServices.framework/SafariServices\n0x18e688000 - 0x18e6d7fff WatchKit arm64   /System/Library/Frameworks/WatchKit.framework/WatchKit\n0x18e910000 - 0x18e916fff iAdServices arm64  <714e2abbd560361db3c81e4123d753a6> /System/Library/PrivateFrameworks/iAdServices.framework/iAdServices\n0x18ea88000 - 0x18eac1fff iAd arm64  <08ccdfe2b5473eb0b6c371e00409b9fe> /System/Library/Frameworks/iAd.framework/iAd\n0x18fccc000 - 0x18fcd4fff AccessibilityUI arm64  <66a61854b11d33439a7bd1da61a357ef> /System/Library/PrivateFrameworks/Accessibility.framework/Frameworks/AccessibilityUI.framework/AccessibilityUI\n0x19015c000 - 0x190165fff NanoGlanceSettings arm64   /System/Library/PrivateFrameworks/NanoGlanceSettings.framework/NanoGlanceSettings\n0x190168000 - 0x1901a0fff PBBridgeSupport arm64   /System/Library/PrivateFrameworks/PBBridgeSupport.framework/PBBridgeSupport\n0x1901a4000 - 0x190271fff PassKitCore arm64  <839b9750a78f30729f9e1e775b1f0b81> /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore\n0x1903c0000 - 0x1903cbfff BridgePreferences arm64   /System/Library/PrivateFrameworks/BridgePreferences.framework/BridgePreferences\n0x190e48000 - 0x190ea1fff CoreBrightness arm64   /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness\n0x1914a0000 - 0x1914a4fff ZoomServices arm64  <7d03fde7f79734dbaca9eb2e49009e84> /System/Library/PrivateFrameworks/Accessibility.framework/Frameworks/ZoomServices.framework/ZoomServices\n0x191d10000 - 0x191d61fff libstdc++.6.dylib arm64   /usr/lib/libstdc++.6.dylib\n0x1936dc000 - 0x1936e0fff AXSpeechImplementation arm64  <5284aaaf974f3bee83ff0199f72ccb3d> /System/Library/AccessibilityBundles/AXSpeechImplementation.bundle/AXSpeechImplementation\n0x1936e4000 - 0x1936edfff AccessibilitySettingsLoader arm64  <95c4039167ab3471a2804e751adca057> /System/Library/AccessibilityBundles/AccessibilitySettingsLoader.bundle/AccessibilitySettingsLoader\n0x19378c000 - 0x193795fff QuickSpeak arm64  <6f64da21f56e32178ff8374db59b7ea8> /System/Library/AccessibilityBundles/QuickSpeak.bundle/QuickSpeak\n0x19395c000 - 0x193b33fff RawCamera arm64  <4c63ccfe546b32f7a2e65ca97fafca60> /System/Library/CoreServices/RawCamera.bundle/RawCamera\n0x193c2c000 - 0x193c3efff libCGInterfaces.dylib arm64   /System/Library/Frameworks/Accelerate.framework/Frameworks/vImage.framework/Libraries/libCGInterfaces.dylib\n0x1949d4000 - 0x194af3fff PassKit arm64   /System/Library/Frameworks/PassKit.framework/PassKit\n0x1950c4000 - 0x1950cefff AppConduit arm64  <048024a9396132179bd28fc0bb7f3dee> /System/Library/PrivateFrameworks/AppConduit.framework/AppConduit\n0x1958dc000 - 0x195901fff CoreServicesInternal arm64   /System/Library/PrivateFrameworks/CoreServicesInternal.framework/CoreServicesInternal\n0x195c24000 - 0x195c2ffff libGSFontCache.dylib arm64   /System/Library/PrivateFrameworks/FontServices.framework/libGSFontCache.dylib\n0x197410000 - 0x19743dfff SafariSafeBrowsing arm64  <9563be8f369f36b9be7a93e06c8ea1ad> /System/Library/PrivateFrameworks/SafariSafeBrowsing.framework/SafariSafeBrowsing\n0x1990d8000 - 0x1990e1fff libMobileGestaltExtensions.dylib arm64  <246fbccd8eba307880f48cea3c348c24> /usr/lib/libMobileGestaltExtensions.dylib\n`. ",
    "lycaste": "ithink i found the problem\nxcodebuild -version\nXcode 8.0\nBuild version 8S201h\n. ",
    "Sunitadaffodil": "I am also facing the same issue. Please suggest me the way to overcome this issue asap.\n. ",
    "squelart": "Sorry if there's anything wrong in whatever I'm doing here, I'm a complete newbie: I don't know Swift, nor \"pull request\" (I was surprised this one happened, I thought I was working in my private repo!)\n. I wanted to keep it at the end of the list, i.e. even after the platform-dependent \"Use Compact Tabs\".\nBut I see that it would actually make sense to keep it together with the always-present other general settings. So I'll move the line up as requested. Thank you for the suggestion.\n. Very strange, I'm 100% certain I had done the work to prevent hiding the toolbars!\nI must have missed something when transferring my WIP into my newly-created repo. \ud83d\ude22 \n. ",
    "iosbin": "me too.\n. ",
    "lucas1993ch": "me too.\n. ",
    "ServusJon": "Having the same problem with xcode 8 :-(\n. ",
    "knighthb": "This problem is still comes to me , I both tried with xcode8 and xcode7 followed by your instruction, but it doesn't work\n. ",
    "lizuba": "I have the same problem too and I have run sh ./bootstrap.sh\n. ",
    "Hanwp": "I tried run sh ./bootstrap.sh\nbogon:firefox-ios xxx$ sh ./bootstrap.sh \n./bootstrap.sh: line 32: carthage: command not found\ncp: Carthage/Cartfile.resolved: No such file or directory\n. me too, \nbogon:firefox-ios xxx$ sh ./bootstrap.sh \n./bootstrap.sh: line 32: carthage: command not found\ncp: Carthage/Cartfile.resolved: No such file or directory\n. bogon:firefox-ios hw$ sh ./bootstrap.sh \n*** Checking out Alamofire at \"3.5.0\"\n*** Checking out Deferred at \"7d3d3230133db71544e60dfa7fa3d095361398db\"\n*** Checking out Fuzi at \"0.4.0\"\n*** Checking out GCDWebServer at \"3.3.2\"\n*** Checking out ios_sdk at \"v4.10.2\"\n*** Checking out KIF at \"v3.5.1\"\n*** Checking out libPhoneNumber-iOS at \"0.8.11\"\n*** Checking out onepassword-extension at \"d99f5d7a4c7328f8e3a8d1e7aff455d1072e0c19\"\n*** Checking out onyx_ios at \"0.0.5\"\n*** Checking out readability at \"ac878bf7c15b47d67e7b947584ca108398dd48a4\"\n*** Checking out SDWebImage at \"3.7.4\"\nA shell task (/usr/bin/env git clone --quiet https://chromium.googlesource.com/webm/libwebpbogon:firefox-ios hw$\nI executed the sh ./bootstrap.sh but the error still exists\n. @welkiner I already used proxy. \ud83d\ude1f\ud83d\ude1f\ud83d\ude1fAnd I can visit  \"googlesource.com\" in Safari Or Chrome.. @welkiner  I was wrong. Just now, I connected VPN, then executed thesh ./bootstrap.sh, finally I get it. Thank you. And I want say fuck GFW!. ",
    "mkaply": "Note that the list.json file will eventually come from Fennec, but I thought getting iOS working standalone was a good start.\nWe will also be able to move all the default.txt contents into this file as well eliminating those.\n. It looks like iOS has more search locales than Fennec does. I'll update list.json to include those.\n. > How is that possible? The iOS search locales come directly from Android (list pulled from here). If anything, Android should have more since there are locale codes that may not be supported on iOS.\nI looked at release instead of Aurora. So I'll fix that.\n. ETA for Android is in the next few weeks hopefully, but I have no plan to put this in before Android is done. I really just wanted to make sure I could do the right thing on Firefox iOS plus I wanted to get up to speed on my Swift.\nSo this will probably sit for a bit.\n. > How is that possible? The iOS search locales come directly from Android (list pulled from here). If anything, Android should have more since there are locale codes that may not be supported on iOS.\nNow I'm extra confused. That list doesn't match what is in firefox-ios or what is in the aurora for mobile.\nRight of the bat, Firefox iOS doesn't have an \"an\" locale and neither Firefox iOS nor Fennec Aurora have \"ast\". Fennec Aurora doesn't have \"ar\" but Firefox iOS does.\nAny idea why there is such divergence?\n. So part of the problem then is that I was looking at the multi build so Arabic wasn't there.\nSo I guess what I need is the list of official supported locales for Fennec and iOS. Is that the list you posted?\n. Oh and you might wonder why I didn't move the engines instead of deleting and readding. That seemed like a lot of work with no really gain, since history doesn't need to be maintained.. It's not really about the code being better it's that we moved Fennec and Desktop to use list.json (as well as Focus). Firefox iOS needs to move to using list.json or it won't be able to get search engine updates from Fennec.\nI'll see if I can unbitrot things.. This looks good to me. It's not a tracking issue, just an output.. This patch looks larger than it is. The primary change is the moving of the search engines into one central directory.\nThe primary changes are:\nNew swift file for parsing list.json.\nChanges to searchEngine to get information about search from that file.. @farhanpatel Need you to review. See https://bugzilla.mozilla.org/show_bug.cgi?id=1434195. That's a good question. I'm not sure. If we for some reason have en-US with a default and then en with a US specific value, I think we'd want to take that. \nI think we actually want to break when we get a non default match...\nThen the last thing we would take would be the last default we found. I think.\n. I'm fine with that, but preferredLanguages should always have at least one value.. ",
    "humanreadable": "Hi Brian, \nI need your merged codebase for firefox-ios. I've tried to merge your commits into firefox-ios codebase but got a lot of build errors. Can you share your merged wrapper code with me if possible?\nThanks.. ",
    "artella-coding": "@mauryat I filed a new bug at https://bugzilla.mozilla.org/show_bug.cgi?id=1309018\n. @mauryat : Has no one looked at this bug yet (https://bugzilla.mozilla.org/show_bug.cgi?id=1309018) ?. ",
    "JoelTheWriter": "Thanks @sleroux. Updated. I'm not sure I quite have the hang of squashing commits yet\u2014let me know if there's anything additional I should do here.\n. ",
    "ryanfeeley": "@rnewman I still don't get iOS device names on tabs received on desktop. Is this the issue?. @rnewman Probably one of the things I should be doing is improving my dogfooding experience by deleting my FxA once is a while and recreating the set-up with a different email.. @jhugman Did you use desktop as a starting point? I am seeing some mismatch.\nhttps://hg.mozilla.org/mozilla-central/file/default/browser/locales/en-US/chrome/browser/accounts.properties. ",
    "npark-mozilla": "Changes made:\n- Setup has dismissFirstRunUI() from BrowserUtils.\n- Setup opens a new tab when URL needs to be entered.\n- Teardown has resetToAboutHome() that kills all tabs and puts the to tab view\n- Teardown clears all browsing data via clearPrivateData() when needed\n- All font size tests are disabled since in iOS10, the hack that we were using no longer works.\n- tests that use deactivateAppForDuration() method in LoginManagerTests is disabled, since  https://github.com/kif-framework/KIF/issues/707\n- When disabling tests, commenting out was used instead of disabling them in XCode- the latter will still run the test, but just ignore the results.\n. Thanks! probably next quarter or so I should really think about doing some mass migration to XCUITest.  Hopefully it'd be easier when Swift 3 migration happens beforehand.. @farhanpatel made fixes as well as the lint fixes. It looks like the lint notifications are only sent once, so I based my fix on the log messages.. @farhanpatel it's fixed, let me know when it would be a good time to merge (just to be safe, I can avoid the release deadline periods in case anything goes wrong). @farhanpatel uploaded is just a one-line check, but more examples are here: https://github.com/google/EarlGrey/blob/master/Demo/EarlGreyExample/EarlGreyExampleSwiftTests/EarlGreyExampleSwiftTests.swift\nyou can also create a custom matcher like:https://github.com/google/EarlGrey/blob/master/docs/examples.md . So when I was running it on xcode IDE, the earl grey log pinpoints which element were failed to show up (or whether there are multiple element match) so I used that to debug my tests, I didn't see kif generating the same level of detail on its log.   \nThe UITest only builds on Nightly scheme, and UITest is the one that copies the framework, so I believe EarlGrey won't be added to the production environment.  I'm new to xcode as well, so we should keep an eye on it though.. @farhanpatel r?. @farhanpatel r?. I fixed the syntax for swift 3, and since it's r+ed, I'll merge them now against the swift 3 migration branch.. aha, you can add paths that way too, thought it's allowed only within screengraph.  Then i don't have to set URL separately now, will do, thanks!. Thanks! now waiting for the swift 3 migration to complete before rebase/checking this in. So I think there might be a real issue with the web Authentication username/password dialog that pops up.  When  UITests/AuthenticationTests.swift is running, and when enterCredentials is ran for the third time, the test crashes with below error.  I thought it was EarlGrey issue, but using KIFTest, I also run into the same error when entercredential dialog appears for the third time.\nfor layoutConstraint in layoutConstraints {\n                let existingLayoutConstraint = existingLayoutConstraints.first { $0 == layoutConstraint }\n                guard let updateLayoutConstraint = existingLayoutConstraint else {\n                    fatalError(\"Updated constraint could not find existing matching constraint to update: \\(layoutConstraint)\")\n                }\nfatal error: Updated constraint could not find existing matching constraint to update: : file /Users/mozilla/GitRepo/firefox-ios/Carthage/Checkouts/SnapKit/Source/Constraint.swift, line 265\n@farhanpatel does anything ring a bell for you?  the dialog actually looks different than before as well.. Now I remember what I forgot to tell Isabel- yes, there is this screengraph method for navigating pages easily. @isabelrios I'll let you know more about it . r+. so with the project file team ID revert and removing the debug call, the test looks good otherwise, the test runs consistently when running locally.. Let's remove the old test file in UITests folder as well. Also, I was looking at the buddybuild's intermittent failure above, and https://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/58c6cbd396dad5010023da06/test/57257735-0246-4bdd-9751-2e1d5fa6665c/ee9d8c99-4f1d-4b5b-b014-161d2175a51a#tests shows that it was looking for the Password field in the Settings menu, when at the time the Settings menu was just responding to the touch, probably because of the timing issue here (https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/FxScreenGraph.swift#L93). \nSo it looks like we need some kind of waiting call on here (https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/ScreenGraph.swift#L215) or other UI actions as well, to make sure the element is visible, and if not wait for a few seconds or so. But we can't do waitForExistence like https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/BaseTestCase.swift#L38, because FxScreenGraph does not inherit from XCTestcase.  \nReal Update\n@jhugman , Ahh I got it now. it checks for the existence. Hmm, I wonder whether checking for isEnabled will fix the intermittent issue. since it is possible to exist and not show up yet, in which case it'll just bypass the expectations and not be able to click the element. will try it out.\n@isabelrios , could you modify the waitForElement of ScreenGraphNode extension to following?  For me it always passes either way on buddybuild, but this probably won't hurt to try:\n```\nfileprivate func waitForElement(_ element: XCUIElement, withTest xcTest: XCTestCase, handler: @escaping XCWaitCompletionHandler) {\n        if element.isEnabled && element.exists {\n            return\n        }\n        // TODO I'm not satisfied that this is working as expected.\n        xcTest.expectation(for: enabledPredicate,\n                                       evaluatedWith: element, handler: nil)\n        xcTest.expectation(for: existsPredicate,\n                           evaluatedWith: element, handler: nil)\n    xcTest.waitForExpectations(timeout: 5, handler: handler)\n}\n\n```\nWe should also change the waitForExistence in BaseTestCase.swift to check for the enabled state.. @isabelrios ah right, if we enhance Navigator with those methods mentioned above, we could reuse it in other scripts as well. Probably a worthwhile thing to do.. yes I did, and eliminated the use of JSON.. Yup that's fine to me.. @farhanpatel Hmm, my comment got hidden. I added this header to enable sending the app to the background in XCUITests, like I did in https://github.com/mozilla-mobile/firefox-ios/pull/2566/files#diff-30cb5c0e8f9990cd480c6e4d3be1af8dR104 This enables to grab XCUIApplication object for a non-target apps, like springboard.  Also I added the header now, could you re-review?. Hmm, having bb issues, contacted them to sort it out.. Closing this PR and opening a new one due to BB issue. waiting for https://github.com/mozilla-mobile/firefox-ios/pull/2608 to land, then I can add more tests. @isabelrios r+ looks good to me, it doesn't contain any sensitive tokens, and we can always revert it back. @isabelrios  I'm guessing the drop in coverage shown in codecov report is because this was run in nightly, while the master is in fennec scheme I guess?. @farhanpatel yeah I was about to mention it, since force cast is kinda unavoidable in ui tests, that'd be great. @ugarlapati looks good, but you have to change the commit message for this pull request.  It should be \"Bug 1373779 - XCUITestCase Nightmode Test For On And Off\" It's on PR title, but it's not on the commit message. Right now the commit message just says \"Nightmode Test\". @ugarlapati looks good, you have to also squash the commits, and the commit message should be \"Bug 1373753 - XCUITestCase NoImageTests for Show and hide images\". @ugarlapati looks good, let's squash this to a single commit. Also, let's update the code according to the SwiftLint result above.. @farhanpatel Actually, not all of the stuffs can be converted to EarlGrey- there are a few cases where it doesn't apply very well. (1. The code gets too long 2. EarlGrey cannot see some of the elements, like elements inside webview and whatnot) It would be great to just use one testing framework, but for now, we can leave things as is, and investigate this more throughly. @jessicajiang Ah, I actually forgot about one major part in Screengraph.  For the tests that use FxScreenGraph (https://github.com/mozilla-mobile/firefox-ios/wiki/FxScreenGraph-and-XCUITest), the onboarding screen handling is done here: https://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/FxScreenGraph.swift#L74\nSo we need to add one more change to above code.  something like this would work:\n```\n\n let startBrowsingButton = app.buttons[\"Start Browsing\"]\n     let firstRunUI = app.scrollViews[\"IntroViewController.scrollView\"]\n     map.createScene(FirstRun) { scene in\n         scene.gesture(to: NewTabScreen) {\n             firstRunUI.swipeLeft()\n             if startBrowsingButton.exists {\n                 startBrowsingButton.tap()\n             }\n\n```\n\nI'm not sure what does the code below // Add the intro screens comment do, but I don't think it is used during the startup, jhugman would know more about it.. it's waiting on bb run that seems to be no longer applicable, and I can vouch that this PR is good, can we override the github check and merge the code?. @garvankeeley actually I was going to merge it after the xcode9 migration is done, but perhaps I should close it now and reopen?\n. @farhanpatel could you also merge this one as well? thanks!. Closing since  Bug 1378470 - XCUIipadtestcase has the change. @farhanpatel Hi farhan, I sent a question to BB regarding the crashes seen on their ipad setup. Other than that, I think we can merge this to master and see what happens. it's stuck on waiting for BB status so needs your help merging it, thanks!. this is now moved to https://github.com/mozilla-mobile/firefox-ios/pull/3141. @ugarlapati  This needs to be rebased with latest master. @farhanpatel could you force push this test please? stuck again :<. @ugarlapati The bookmarkingTests and ClipBoardTests are failing in BB - could you take a look?. @jhugman could you take a look at Fxscreengraph.swift for review? I think it's mostly working, and the remaining work is to convert the existing test scripts.  If there's something that needs to be fixed, I think it's best we find out early though.. @jhugman this is the logical progression of FxScreenGraph, and can't wait to try it out when it's implemented.  Looks great!\nFirst, a fairly simple question regarding the existing FxScreenGraph:\n- just want to double check the noop() method - if transition from A to B is noop(), this means that the state remains in A unless asked to go to B, right?\nNow for above proposal:\n- about ScreenAction, proposal says we can concatenate a series of ScreenActions to change state.   So can we say \"go from State A to B, by using ScreenAction 1 and 2 and 3... and n\" or \"go from State A to B, and first action has to be ScreenAction 1, but it's up to you after that?\"  This will clear up the ambiguities and unintentional UI actions.  Also, it would be nice if we can set dismissOnUse() as part of UserState.  There may be cases where going back is possible, but really you shouldn't.\n\n\nCan map.addScreenState() take parameters in addition to the ScreenState name? for example, if  map.createScene(BrowserTab) can somehow take URL parameters via lazy loading of some sort, and do things like navigator.goto(BrowserTab, \"www.mozilla.com\"), then it would make things a lot easy and not assume there is a hardcoded URL.\n\n\nthis is more of a nice to have, but one of the issues while debugging test with fxscreengraph was that you can't always step through the navigation, since the graph is drawn initially.  It would be nice if we have a separate class that contains the error strings, and we can reference them on fxscreengraph in various places where code might fail.\n\n\ncan predicates and screenactions be visualized in the graph converter tool?\n. > If a screen state A has a noop to another state B (or action), then you can goto(A) without going to B. If you ask to goto(B) from A then nothing visible will happen on screen.\n\n\nWhat if you are in B, and you say goto(A)?  would it know that A = B when noop() is specified in A only? (or should I specifiy noop(A) in B's state description as well?\nI just realized that regarding screenaction, my confusion came from this declaration in map.addScreenState(BrowserTab) example above:\nscreenState.gesture(forAction: Action.LoadURLByTyping, Action.LoadURL)\nSo this means \"following set of actions defines Action.LoadURLByTyping, and it leads to Action.LoadURL action\" right?  If so, it would make it more clear if we have to: parameter between, like old Objective-c, like (maybe this syntax is deprecated now): \nscreenState.gesture(forAction: Action.LoadURLByTyping, to: Action.LoadURL)\n\nCan you give me some examples where this might be useful?\n\nNow that I have better understanding of what screenaction does, no, this won't be necessary.\n\n\nAlso, it would be nice if we can set dismissOnUse() as part of UserState. There may be cases >>where going back is possible, but really you shouldn't.\n\nCan you give me some examples where this might be useful? If this is never advisable, then should you just not wire it together like that?\n\nI was thinking about case where Screengraph decides going back is the optimal path, for example,\nA -> B -> C.\nI want to go to E.\nScreengraph decides that C -> B -> E is faster than C -> D1 -> D2 -> D3 ->E\nBut going back to B will change state.\nBut you're right, I guess in this case, it's simpler to outline the paths to E, rather than having additional logic inside screengraph.\nFor the error strings, I was thinking about something even simpler, like, If I'm in State A, and want to go to B using action C, it should give me error messages when action C fails for whatever reason, and the error message should output the exact UI action that failed, like \"could not go to State B because ui action x failed, last successful UI action was y\" without adding error checks directly into state definitions. BUT in past weeks, I noticed this is already implemented for the most part. It would be nice if it had more details, like last successful action, (but this is not absolutely needed). >> Should it be to, implementing, as, alias?\nI guess 'to' would be straightforward?\n\n\nI'm still a bit confused. Could you give me concrete examples from your use with FxScreenGraph and Firefox for iOS.\n\n\nOh, I was just saying that I got the rationale and we don't need to do anything here.\n\n\nI can report a lot to the console. It's especially easy to report to NSLog or standard out.\nWhat details would you like?\n\n\nIt would help if it lists the current state that it is in now, last successful UI action, and the intended destination state (maybe this one is already shown in the error log)\n. @ugarlapati looks good, only thing that's missing is that  testBookmarkPanelBufferOnly() is disabled in the Fennec_Enterprise_UITest scheme. could you enable it and squash commits?. @jhugman would this pr include improved logging or clear method naming as we discussed it in the wiki thread? or would that be a separate PR?. Log shows AuthenticationTest passed. @isabelrios ah you're right! I pasted the code before pushing it to fix the var assignment failure, and copied the same code.  Thanks!. It's well contained, and looks good to me, as longs as concerns from Isabel are addressed.. okay, squash is in order. :) I'll do that. Hmm, those linting issues are outside of our change - should we still fix them?. yes we have those same lines in the Fennec-XCUITest scheme file, so it's not a problem.. hmm, it's disabled (to execute the test) in the FirefoxNightly, above means that it will still build- I had to disable it in the explorer view to remove this. Yup, this is a very rough copy, will need to do some polishing tomorrow. I put a comment regarding the bug i found - can i still submit when the test is failing? (Assuming the bug is valid). @farhanpatel I copied the SimplePageServer class from Global.swift to BaseTestCase.swift, and followed the GCDWebServer's instruction to copy the Carthage framework, but the server does not seem to be created. (the webServer.port is always set to 0, webServer.running is set to true, and I don't see any error messages) I was wondering whether you can help me out figuring what I have missed? Seems like GCDWebServer doesn't like running on xcuitest, or i have missed including some libraries, but since I don't get any error msg, hard to find what I have done wrong.. Swift (and gameplaykit) novice question here: in case if those elements like firstRunUI doesn't exist, does it throw an exception, or does it silently fail? (same for other tap() calls without checks) \nIf it does silently fail, it would be nice if there is a blanket throw call or checker methods that we can use, but I guess we don't need it right away- we can add that feature later.  (same comment for tap() and other interactionmethods for ScreenGraphNode)\nEDIT: wait, if ui interaction fails, then XCUITest's log will say the tap has failed, so not much of an issue here even if we don't check; currently with xcode it appears that at the top level it doesn't highlight the line that caused the test faliure, but not sure whether that can be fixed by adding checks. . ah, it was a dead file that i failed to notice, will remove it. ah, i think it's probably my xcode using tab instead of space for indentation, I'll fix this.. @jhugman debugger is telling me that the inside of {} is skipped when I call it from the script- is there a scope issue?  can't seem to figure out why (I'm new to swift as well)\nBelow workaround feels like cheating, but it seems to work well:\nswift\nextension Navigator {\n    func openNewURL(urlString: String) {\n        self.goto(NewTabScreen)\n        let app = map.app\n        app.textFields[\"url\"].tap()\n        app.textFields[\"address\"].typeText(urlString + \"\\r\")\n        self.nowAt(BrowserTab)\n    }\n}. instead of using this method, you could do \n navigator.openNewURL(urlString: \"foobar\") to do the same, but the dismissFirstUI() method in setup() should be removed since screengraph will close the first UI automatically if you use goto().  navigator.openNewURL(urlString: url2) can also be used for urls. here I think the test can be simplified by using  navigator.openNewURL(urlString: \"foo\") instead of 3 lines above. same here. so you don't need this goto statement if you're using openNewURL() method, because within the method, it already does goto(NewTabscreen).  this would apply to a number of below tests as well.. Other than this, and reverting the Dev Team ID, I think it's all good. I guess this can be removed?. It's probably something to do with screengraph is always set to find the shortest path I suppose.  My guess is that the state that AuthenticationTest was in before calling enablePassword may be closer to where it went, rather than the NewTabMenu scene.  Also, The error on FxScreenGraph.swift says 'Cannot find \"SettingsMenuItem\" cell'.  perhaps the name of the settings menu is different when you're in tab list view. Turns out 2) was the main issue. and using gesture seems to fix this. How about if you do a waitForExistence call on Switch button? (waitforExistence(app.buttons[\"Switch\"])) I think this reacts a bit faster, since it doesn't wait until the screen is idle.\nOR, alternatively, you don't need sleep(2) at all, since it'll wait until the screen becomes idle, then try to tap UI to go to Taptray.. remove whitespace. Just to clarify, you mean below, right?\n\nBut it does NOT work..I also tried with gesture with same result :( It works though if I add that to BrowserTapMenu, and start the test going first to an url...\nDon't really understand why it does not work adding it to NewTabMenu...:S. actually, I might have missed the prior conversation on this topic, but tapping 'close all tabs' to go to NewTabScreen in fxscreengraph is kinda odd, because it doesn't hint that all existing tabs will be removed.  It is one way to go to a new tab screen among other methods for sure, but I think the script is much more readable if the closeAllTabs() contains explicit action to close all tabs. This way the reader would know where the tabs are being closed- I prefer the way it is now. . if waitForExistence doesn't work, try removing that line altogether (i.e., no tapping 'Switch', no waits) technically it should still work. IMHO, current way is better, since at the script level that we know it created a new tab. I guess the name \"NewTabScreen\" is kinda misleading for the state since we didn't really create a new tab.  You could rename the existing node as TabScreen for clarity, (but don't create another NewTabScreen, since there is no essential 'state' difference between any tab and a newly created tab.  the 'new tab' best refers to the action of creating a new tab, not its end state.\n\nYeah, and I doubt you can create multiple edges to the same destination node... hence you cannot define another tap to action to an already defined node I believe.  (I could be wrong). just for cosmetic reason, maybe we can use swift dictionary? Like:\nvar URL:[String:String] = [\"name\":\"www.mozilla.org\", \"label\":\"Internet...\", \"value\":\"mozilla.org\"]\nthen call it by URL[name]\nThat or using struct like \nstruct URL {\n   var name: String\n   var label: String\n   var value: String\n}. how about if we move this two lines inside enterWebPageAsHomepage() method? that way it would be better encapsulated.. @farhanpatel Ah, I added this header to enable sending the app to the background in XCUITests, like I did in https://github.com/mozilla-mobile/firefox-ios/pull/2566/files#diff-30cb5c0e8f9990cd480c6e4d3be1af8dR104 This enables to grab XCUIApplication object for a non-target apps, like springboard.  You're right about the header, I'll update that. 'Engine' small typo. Hmm, they injected the mutiple subdomain example in the UITests, then, how about we enable the UITest with only this one enabled? so the test will be like:\n```\ntester().tapView(withAccessibilityIdentifier: \"url\")\nlet textField = tester().waitForView(withAccessibilityLabel: \"Address and Search\") as! UITextField\n// Ensure that the scheme is included in the autocompletion.\n        tester().enterText(intoCurrentFirstResponder: \"https\")\n        BrowserUtils.ensureAutocompletionResult(tester(), textField: textField, prefix: \"https\", completion: \"://foo.bar.baz.org/\")\n        tester().clearTextFromFirstResponder()\n     // Multiple subdomains.\n     tester().enterText(intoCurrentFirstResponder: \"f\")\n     BrowserUtils.ensureAutocompletionResult(tester(), textField: textField, prefix: \"f\", completion: \"oo.bar.baz.org/\")\n     BrowserUtils.ensureAutocompletionResult(tester(), textField: textField, prefix: \"ba\", completion: \"r.baz.org/\")\n     tester().enterText(intoCurrentFirstResponder: \"z\")\n     BrowserUtils.ensureAutocompletionResult(tester(), textField: textField, prefix: \"baz\", completion: \".org/\")\n\n```. would it work if we put waitforExistence for the help text?. Here, we should wait until the settings screen is fully drawn.\nWe have to wait until 'Use Compact Tabs' is visible.\nwaitforExistence(app.webViews.staticTexts[\"Use Compact Tabs\"]). Here we should wait until \"Show Tour\" is visible by waitforExistence() call. we can leave the existing empty lines, because they separate between different steps, making it easier to read.  Same for below deletion of empty lines . WaitforExistence already does wait, so no need for this call. Since we're not using this method if we delete line 30, let's remove this method.. you should delete empty spaces from here, there should be only one empty line after the last bracket. The header for new test cases should be always the same.  You should use the following:\n/ This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. /. remove one line of empty space here. It should have the header as:\n/ This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. /. remove this empty line. remove this empty line. @ugarlapati remove this empty space. @ugarlapati remove empty line. No need to change this, it was not failing on buddybuild. nit: remove whitespace. this comment can go above the actual method declaration. this comment can go above the actual method declaration. this comment can go above the actual method declaration. this comment can go above the actual method declaration\nso for this section, it could just look like:\nnavigator.openURL(urlString: url)\ncheckUrl()\ncopyUrl()\ncheckCopiedUrl()\nrestart(app). nit: remove whitespace. remove whitespace. @ugarlapati are we using this extension?. let's simplify this, like\nenterAndOpenUrl(url: urls[i])\nfor i in 1..<urls.count {\n               openNewTab()\n            enterAndOpenUrl(url: urls[i])\n        }\nEasier to understand this way. I think we should use Screengraph here, like navigator.goto(SettingsScreen). also use screengraph here, like navigator.goto(). Screengraph should be used here as well. this method can be replaced by something like navigator.goto(NewTabScreen). this should be reverted as well. I made changes as below, and it seems to run reliabily.\n/ This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. /\nimport XCTest\nclass CompactModeUITests: BaseTestCase {\nvar navigator: Navigator!\nvar app: XCUIApplication!\n\noverride func setUp() {\n    super.setUp()\n    app = XCUIApplication()\n    navigator = createScreenGraph(app).navigator(self)\n}\n\noverride func tearDown() {\n    navigator = nil\n    app = nil\n    super.tearDown()\n}\n\n//Set the compact mode to OFF in settings screen\nprivate func compactModeOff() {\n    //let app = XCUIApplication()\n    // app.buttons[\"TabTrayController.menuButton\"].tap()\n    // app.collectionViews.cells[\"SettingsMenuItem\"].tap()\n    navigator.goto(SettingsScreen)\n    app.tables[\"AppSettingsTableViewController.tableView\"]\n        .switches[\"Use Compact Tabs\"].tap()\n    navigator.goto(TabTray)\n    //app.navigationBars[\"Settings\"].buttons[\"AppSettingsTableViewController.navigationItem.leftBarButtonItem\"].tap()\n}\n\n//Set the compact mode to ON in settings screen\nprivate func compactModeOn() {\n    //app.buttons[\"TabTrayController.menuButton\"].tap()\n    //app.collectionViews.cells[\"SettingsMenuItem\"].tap()\n    navigator.goto(SettingsScreen)\n    app.tables[\"AppSettingsTableViewController.tableView\"].switches[\"Use Compact Tabs\"].tap()\n    navigator.goto(TabTray)\n    //app.navigationBars[\"Settings\"].buttons[\"AppSettingsTableViewController.navigationItem.leftBarButtonItem\"].tap()\n}\n\n/*\n//Opens a new tab\nprivate func openNewTab() {\n    app.buttons[\"URLBarView.tabsButton\"].tap()\n    app.buttons[\"TabTrayController.addTabButton\"].tap()\n    app.collectionViews.cells[\"TopSitesCell\"].collectionViews.containing(.cell, identifier:\"TopSite\").element.tap()\n}\n*/\n/*\n//Enters the url in the browser tab\nprivate func enterAndOpenUrl(url: String) {\n    app.textFields[\"url\"].tap()\n    waitforExistence(app.textFields[\"address\"])\n    app.textFields[\"address\"].typeText(url)\n    app.buttons[\"Go\"].tap()\n}\n*/\nfunc testCompactModeUI() {\n    //Dsimiss intro screen\n    dismissFirstRunUI()\n\n    //Creating array of 6 urls\n    let urls: [String] = [\n        \"www.google.com\",\n        \"www.facebook.com\",\n        \"www.youtube.com\",\n        \"www.amazon.com\",\n        \"www.twitter.com\",\n        \"www.yahoo.com\"\n    ]\n\n    //Open the array of urls in 6 different tabs\n    //enterAndOpenUrl(url: urls[0])\n    loadWebPage(urls[0])\n    for i in 1..<urls.count {\n        //openNewTab()\n        navigator.createNewTab()\n        loadWebPage(urls[i])\n    }\n\n    //Navigate to tabs tray\n    navigator.goto(TabTray)\n\n    //Wait until the cells show up\n    //CollectionView visible cells count should be 6\n    let exists = NSPredicate(format: \"countForHittables > 1\")\n    expectation(for: exists, evaluatedWith: app.collectionViews.cells, handler: nil)\n    waitForExpectations(timeout: 10, handler: nil)\n    XCTAssertTrue(app.collectionViews.cells.countForHittables == 6)\n\n    compactModeOff()\n\n    //CollectionView visible cells count should be less than or equal to 4\n    XCTAssertTrue(app.collectionViews.cells.countForHittables <= 4)\n\n    compactModeOn()\n\n    //CollectionView visible cells count should be 6\n    XCTAssertTrue(app.collectionViews.cells.countForHittables == 6)\n}\n\n}\nextension XCUIElementQuery {\n    var countForHittables: UInt {\n        return UInt(allElementsBoundByIndex.filter { $0.isHittable }.count)\n    }\n}\n. these IDs should be reverted. these IDs should be reverted. these IDs should be reverted. you can just do if isiPad() { .\nLet's change all if statements with iPad() as above. Looks like it fails here, because at this time there are exactly 8 elements (in case of iphone 6).  maybe we need to add more.. @ugarlapati so I created this method to handle ipad/iphone detection, so you won't need to do it in the test script. this way, screengraph can keep track of the states correctly on ipad.. this should be simplified as line 290. this can be simplified as if !isiPad() {. same as line 283. same as line 131. For me the test is failing here on iPad.  It cannot find app.textFields[\"url\"] on ipad..  if !isiPad() {. this if statement can be removed as well.  navigator.goto(TabTray) should be able to handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. remove space. remove space. Let's use www.example.com and \"Example Domain\" label instead, since they would change less.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. !isiPad() . this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. this if statement can be removed as well. fxscreengraph can handle this.. let's not use sleep().  instead, wait for the element you are asserting, like waitforNoExistence(app.scrollViews.otherElements.buttons[\"developer.mozilla.org search\"]). So what happens occasionally on ipad is that after certain key combo, it cannot find the key element and fails to type.  Way to work around this was to use replaceText() instead of typing it.. Oh, it's because there is no cancel button on ipad, simplest way to get rid of the menu was to tap it again. will do. so this happens only with ip addresses.  For example if we go to 127.0.0.1, in the topsitepanel, it shows up as \"127 0 0\" which is odd, I think I filed a bug for it, but it's buried somewhere deep in bugzilla.. you are right. will do. In case of facebook.com, it just shows 'facebook'. you could use waitforNoExistence() in XCUITests/Utils/BaseTestCase.swift. same here, waitForNoExistence() could be used. I thought about this, but since master is only running on iOS 11, let's remove this kind of if statement, and only put the waitforExistence call that works on iOS 11.. what's this method?. yes, those were actually in XCUITests for a while, but I realized that they haven't been deleted.. Agreed, I wonder whether we can raise a bug for issues like this.. hmm, i didn't modify this ... all I did was to disable all other builds in Fennec_Enterprise_UITests\nEDIT: oh wait, it was there (line 35 of master) initially. it got slided down because I disabled build for other packages that I don't need in Fennec_Enterprise_UITests. comment please. comment here as well. comment here as well. ah, they are autogenerated by Xcode I believe. add comment to describe what the test does. comment on why are we checking this. comment why are we checking this. I think this is std thing xcode 9 adds now for all schemes when modified. will look into it, I think some tests actually require cleanup between tests in the same file. yeah no tests are skipped (above shows that I removed the skipped designation for some reason) - not sure why it set it as a diff though. . this is good enough, we can create expectations in earl grey, but it'll get pretty long. did this work? if so we should close the bug. Actually, I think it would be better to create a scene in Fxscreengraph for this menu list, then we can do things like navigator.goto(sharemenu) to open the menu list. let's discuss this tomorrow.. @jhugman I am no expert on this, just curious, what if we add those parameters in the Test section of the scheme rather than killing the app and restarting it?would it save more time?\n\n. Sounds good. instead of this, you can do navigator.goto(PageOptionsMenu), . instead of this, you can do navigator.nowAt(BrowserTab). use navigator.goto(SettingsScreen). use navigator.goto(HomePageSettings). use navigator.goto(PageOptionsMenu). and do navigator.nowAt(BrowserTab). do navigator.goto(HomePanel_History). do navigator.goto(HomePanel_History). hmm, navigator.goto(SettingsScreen) should work- could you tell me what problem you run into? I'll fix FxScreenGraph. hmm, navigator.goto(PrivateBrowserTab) should work. navigator.goto(SearchSettings) should work. same here, use screengraph. use screengraph. use screengraph. I don't think XCTWaiter().wait (or waitForExpectations) polls - in my experience it exits immediately when the expectation is satisfied, so we won't lose time if we remove this if clause.  what do you think?. Oh trust me, I don't like this either - only if each node has a state where it can be marked private/non-private ... wait, I think that's your proposal is about \ud83d\udc4d . this is only when welcome screen is not suppressed - in that case, after the welcome screen the what's new page is still visible, so this logic is still correct.. I believe this is still needed for iPad testing.  If not, we'll remove it on a separate PR where we deal with iPad failures.. Yes, but the test will fail anyways (for a good reason) when external site is unavailable for any of the above reasons, so I believe it's a reasonable way to wait. \nHaving said that, I'd like to create a separate future PR for replacing use of waitUntilPageLoad() with loadWebPage() method in the future, when we work on the FxScreenGraph revision.. ah, i was looking for it and 'nclude whitespace-only lines' wasn't checked. also I 'swiftlint autocorrect' ed to fix the whitespaces. Hmm, actully \"Client.FxAContentView\" is acc.id, of the header view, and since they're reusing them, I'm not sure how to add acc.id to the buttons themselves.  I'll look a bit more into this.. For the context menu, I think I can use self.iconString of PhotonActionSheetItem.  I'm a bit wary of creating an acc. id. element and populating them artificially.\nEDIT: hmm, it's visible on \"capture view hierarchy\" but it's not detected by xcuitest.  I remember Farhan had to expose it somewhere to make it visible.  I'll create a separate Bug to handle this.. Hmm, just realized \"Require Passcode\" and \"Enter Passcode\" are identifiers.. nit: extra cr. +1, we probably don't need to access external URL for this test, as we can create multiple empty tabs.. I suppose there is no accessibility Identifier for the Undo button?. this is for debugging only correct?. I was thinking, perhaps it's better to specify valid/invalid input texts at the script level, rather than having it defined in the Fxscreengraph? I think that would make the tests more readable, and easy to modify in the future.  Looking at this script, it seems unclear what exactly is the syntax that's considered to be valid/invalid, which should be clear at the script level.. Let's put a quick comment on why the \"Book of Mozilla\" cell should appear, that'll help people to better understand the test.. par => part\nAlso, is the reason that \"Book of mozilla\" is shown in the closed tab list is because we opened it in fxscreengraph during the init?  IF so, we should mention that. . Ah right, I know we didn't explicitly mention this in our other XCUITests, but I think this is a good place to start adding a comment saying that.  Readers might wonder just reading from the script \"how did this site ended up in our history?\". in case when the text is not rendered, this repeat call will not exit, right? So maybe we should put a limit on how many times it swipes, (5 ~10 should be enough?). how about if we just create one method, checkTabsOrder(bool: before) and do\nif (before)\n...do before check\nelse\n... do after check\nthis would be easy to read and reduce duplicated code?. can we put the URL as a constant and reuse?  It's being used 3 times, so might be worth it. looks good, but also we should check whether we can fix the timing issue that's happening when we go to HomePanelsScreen directly.. simple typo - 'previous' :). same here. perhaps it could be used in the future if this takes a parameter and download x number of files?. yes, that would be more useful in the long run.. yup this looks good to me. Curious, is this affecting the test that comes after this? We don't do anything after below sync operation, what's the purpose of this sync again?\nIs there something that we check on desktop?. In fennec scheme all XCUITests/UITests are disabled by default. only the ones that will run on nimbledroid are enabled.. let's do that and uncomment master branch check before we merge.  Nimbledroid people are making fixes on their side, and we probably need to send in a few builds.. should this line be deleted?. do we need to keep the commented out code?. I guess hardcode of the coordinate is only option in this case?  if so, i guess it's okay, I wonder whether this would work for all tablets.  IF not, we should mention in comment which devices this should run under. same comment as before, if this doesn't work on all devices, we should mention the devices that can run the test. @isabelrios sounds good, having an acc. id. would be a way to go in the long run, let's use this solution for now.. perhaps we can move this echo before install, and let echo on for the cargo install command so any error msg can be shown?. ",
    "Bunn": "@sleroux Thanks for the review. I thought about doing that but the output would be a little bit different from the current scenario.\nFor example: Doing the way you suggested (Which I agree is the best) the fade out animation on the table view cell would start at the same moment the user tapped the cell. Meaning the user would see the cell animating to the deselected state.\ni.e:\nTap\nSee select cell animation\nSee deselect animation while the next screen is animating.\nI did the other way because I didn't want to do that since all other cells are always selected until the user get back to that tableView.\ni.e\nTap\nSee select cell animation\nSee next screen animation.\nIt's a minor difference but I didn't wanted to change that behavior.  Should I do another PR with your suggestion and close this one?\nThanks again for your input :)\n. @farhanpatel good question, I wasn't aware of this component, I'll take a look to see if it's easier to use \"ButtonToast\" since it's already there, thanks for the feedback \ud83d\udc4d . @farhanpatel Using the \"ButtonToast\" will require some changes on this component, so I'd like your opinion before doing anything:\n\nButtonToast does not accept a subtitle, this will need to be added.\nButtonToast always handles the tap gesture and removes itself from the hierarchy with an animation, which might lead to some situations like this:\n(There are 2 videos here, toastAnimation is the situation using the ButtonToast, barAnimation is the current state of this PR)\nArchive.zip\n\nI'm not sure how to solve this using ButtonToast without changing it a considerable amount since ButtonToast tries to handle itself automatically, it conflicts with some other situations like the one from the attached video.\nMaybe it could have a protocol that could override the animations and the parent view could do whatever is best for this scenario. \nThanks.. @farhanpatel I removed the ClipboardBar in favor of the ButtonToast and removed it from the superview in special cases to avoid animation conflicts like you suggested on IRC.\n. @farhanpatel changes submitted. Thanks for the feedback. \ud83d\udc4d . No problem :) \nAll your comments made a lot of sense to me. It's my pleasure \ud83d\udc4d . @farhanpatel it was on a new line before, but I looked at the code and found that the pattern is on the same line. Personally I prefer the new line approach as you said, but I wanted to make it consistent with the project.\n\n. @farhanpatel you mean a rebase on my branch just to create a different commit hash or should I fetch upstream and do a rebase master  with a force push on my branch? I think the latter, but I'm just double checking :). @farhanpatel not sure what happened here, buddybuild log has this\nFetching gem metadata from https://rubygems.org/..\n Retrying fetcher due to error (2/4): Bundler::HTTPError Could not reach host index.rubygems.org. Check your network connection and try again..\n Fetching version metadata from https://rubygems.org/\n Could not find gem 'danger' in any of the gem sources listed in your Gemfile.. @farhanpatel sure thing, you can assign it to me :). @farhanpatel \nThat bothers me so much! I haven't had a chance to look into it. If you are up for it I would totally appreciate it if you could look into it.\nSure, I can take a look. I already took a quick look, but it does seems to be a pretty big \"rabbit hole\", which makes me think this is out of the scope of this PR, because more things will need to be changed and I'm not sure how easy it will be.\nHow does your fix work with the patch here?\nFrom the looks of it, it's unrelated because my fix was to prevent the situation that only happened when the app first launched. But I'll give it a try and see how it goes.\nEdit: I just tested, everything works fine. But I did find an issue with that patch on the iPad, the bar doesn't appear anymore when closing all tabs (Not related to my changes, I tested only from master and the same thing happened). @farhanpatel do you want me to comment this on the patch https://github.com/mozilla-mobile/firefox-ios/pull/2471 or open a Bugzilla ticket?\n. @farhanpatel I've checked it on both iPad and iPhone my PR + https://github.com/mozilla-mobile/firefox-ios/pull/2480  and everything seems to be working fine\nIf the duration isnt long enough this way. You could add the duration to the ButtonToast as a variable\nI didn't see any issues with the duration. But I can change the duration to a ButtonToast variable instead of a method argument if you want. Should I do it on this PR?\nthanks. @farhanpatel yeah, everything looks fine on both iPhone and iPad for the closed tabs bar, and the clipboard bar on this PR + https://github.com/mozilla-mobile/firefox-ios/pull/2480. @farhanpatel oh, sorry, I didn't notice that https://github.com/mozilla-mobile/firefox-ios/pull/2480 made this PR unnecessary. I thought you wanted me to test this PR +  https://github.com/mozilla-mobile/firefox-ios/pull/2480 to make sure they would work fine together \ud83d\ude06 \nBut yeah, this PR is not necessary once https://github.com/mozilla-mobile/firefox-ios/pull/2480 is merged.. @farhanpatel Good point, I forgot to look into some other areas where the same constant was being used. I've made a fix as you suggested to use a new property specifically for the bottom bar.\nHere are the screenshots of places I noticed that are using the ToolbarHeight property and now have the correct size.\nFind in page + Normal View\n\nFind in page + Reader View\n\nNormal View\n\nRead View\n\nTabs\n\n. it's done with a UserDefaults because of the answer I had here: https://bugzilla.mozilla.org/show_bug.cgi?id=1228087#c12\nI would think that we only show the link once. On next launch, if the link is still in the clipboard we would just ignore it since the user most likely already saw the option to navigate to it anyways.\nSince we removed the preference I do think that displaying it every time the same URL the app is closed and then opened can get frustrating. A lot of people (including myself) have the bad habit of force closing apps instead of just tapping the home button.\nBut you're right about the history thing, it's a privacy problem the way it's currently implemented.\nI do not have a strong opinion about any approach,  I can do it in-memory or wipe it during history cleaning. Which one do you prefer?. I was referring to the fact that the URL would be saved on the UserDefault which can be retrieved from /Library/Preferences/xyz.plist even if the history was cleared. Maybe I'm being too paranoid haha :) but ok, I'll change it to the in memory solution. Thanks for the feedback \ud83d\udc4d . Done. I'm passing SettingsDelegate reference to ClipboardBarDisplayHandler and now it can handle everything there and call the delegate that's already implemented :)\nAlso, I noticed that the show method didn't have a way to send the toast duration, so I added the option to send it as a parameter, with a default. whoops \ud83d\ude2c . Hmm, on a second thought, it's probably not a good idea to have a var on a UIConstants file right?\nIt kinda is constant in a way that it will not change during the app lifetime (unless the insets are manually changed somewhere else), but doesn't feel right to have a var here, in the other hand, having a separated file and/or struct to have just this attribute might be overkill.\n. ",
    "thePsguy": "The title field for the custom search engine must also be there, right?\n. @farhanpatel, the activity indicator appears while the favicon is loaded, and the addSearchEngine function has been refactored into 3 functions.\nAlso, a separate error has been created in case the title is empty, or the url invalid.\nIs there something I could do regarding this conflict in project.pbxproj?\n. @sleroux Fixed all the above issues and nits in this commit\n@farhanpatel  Included your commit along with the updated UI and the fixed SwiftLint issues one as well on my earlier PR #2191 . This works now, but now, when a favicon is found, it is downloaded by the SDWebImageManager before self.profile.searchEngines.addSearchEngine is passed the image and other details.\nThis causes a period of gap between when the user taps 'Save', and when the success alert is shown. Should an activity indicator be shown while the image downloads?\n. An alert is only shown when adding the engine fails after tapping Save. This is how it was implemented in BrowserViewController.\nEdit: My bad, missed that alert. Removed that error. (y)\n. @farhanpatel\n. ",
    "devKrishnan": "Was this approved by Apple. One developer in stackoverflow refers that the app was automatically rejected when she took this approach.http://stackoverflow.com/a/39812056/189006\n. ",
    "JohnJGL": "That's because you haven't install carthage\n. ",
    "ihaodi": "/Users/XXXX/Documents/Mine_Workspace/firefox-ios/Utils/AsyncReducer.swift:6:8: No such module 'Deferred'\n. ",
    "welkiner": "@Hanwp the domain \"googlesource.com\" was blocked by GFW,you should use proxy.\ud83d\ude02. @Hanwp  proxy for Terminal\uff0cnot for browser. ",
    "ionicc": "I think the setting of tabs in a 3d format such as the google chrome will be a better option but the tab management system right now Is also good in its own sense. It gives a much better overview of the contents of the page and it gives the user a much better UX.. ",
    "shree007": "@sleroux Sir, instead of 2 column and multiple rows,  one column may be nice  in tabTrayViewController. . @sleroux  Yeah got that. thanks . \nSir\nPlease see this issue I filed it.    https://github.com/mozilla-mobile/firefox-ios/issues/2425. I think it should be automatically sign out  without going settings whenever we use incognito,\nI have following point ,it's my own opinion it is not necessary that you will agree.\n1. when people use private tab they know that nothing is going to store(trackers, logins details etc.).\n Most of the people come to use mobile Mozilla  Firefox after Desktop Browser Experience, habitually they know that Private tabs means nothing is going to store.But in First experience of Mozilla Firefox iOS They will have to know first \"Go into Firefox's settings and enable \"close tabs after leaving Private Mode\".\" \nIs it good from User experience ? . Okay Sir. I'll try my best to fix it in case of Mozilla Firefox iOS, If I can.\nThanks Sir. @Yury Thank you sir you showed me a hope i'll try to implement according\n yours suggested links.\nOn Fri, Apr 7, 2017 at 9:46 PM, Yury Lapitsky notifications@github.com\nwrote:\n\nI've recently found Capability in the Xcode project -> Target ->\nCapabilities called \"Personal VPN\"\nHere is the link: https://developer.apple.com/reference/networkextension\nAnd also I found another interesting thread about VPN:\nhttps://forums.developer.apple.com/thread/45636\nApple Engineer confirms that using VPN for single app is possible.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/issues/2504#issuecomment-292581308,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AM3_LZdZwNnIiXOQDJYTpNSjrBxTR9TOks5rtmFxgaJpZM4MXsfB\n.\n. \n",
    "vbudhram": "@farhanpatel A little new to Swift, but I think I got your changes in. Does this look correct? r?. @farhanpatel Thanks for feedback, made changes.. @farhanpatel I think this is ready for a review when you get a chance.. @sleroux This was PR I was mentioning, linked with https://bugzilla.mozilla.org/show_bug.cgi?id=1237407. Thanks!. @farhanpatel Thanks for the review, updated per your request. The only question/issue I had is how to best test the new function FxAURLWithOptions? I thought about pulling it into the AccountsTest but it would require me adding alot of view controllers as compile sources in the test. Is there a better way for me to test this?. @farhanpatel Thanks for helping me push this through. Made updates you recommended, mind another r?. This was given an r+ via https://bugzilla.mozilla.org/show_bug.cgi?id=1345508#a12700439_568938, merging after test pass.. @farhanpatel Since you have looked at my other Adjust patches mind an r?. @st3fan Updated per your feedback, r?. from st3fan: merge and tag for 8.3.. @rnewman Updated per feedback and also added new graphics from @tecgirl. I think this is ready for another review!\nUpdated UI from feedback:\n\n\n. @rnewman @tecgirl Added updated images and updated based on your comments, mind another r?. @tecgirl Updated row color and added animation. @rnewman accidently squashed changes but relevant animation code is here, mind an r?\n\n. @st3fan Is it suffice for the feature flag for this to be debug mode option?. @jhugman Thanks review, I updated per comments. Mind another r?\nUpdated screens:\n\n. @jhugman Updated! r?. ~~@jhugman Mind another r?~~\nScratch that for now, tested against prod and did not work as expected, checking it out.. Turns out that an unrelated fix in https://github.com/mozilla/fxa-content-server/pull/5492 which merged in train-96 (in stage) correctly allow FxAContentViewController to be reloaded from FxiOS settings. This explains why I was experiencing https://github.com/mozilla-mobile/firefox-ios/pull/3135#discussion_r141716321 locally.\nFxA train-96 will be going out by end of week and I can verify that this bug has been fixed without any iOS code changes.. Closing this PR because it was fixed by https://github.com/mozilla/fxa-content-server/pull/5492. Verified this using FxA train 96.. @jhugman Updated so that it doesn't show downstate when pressed, thanks for review!. @jhugman Was able to reproduce error, updated to correctly fix this issue! r?. @jhugman Added some more comments and descriptions. Mind an r?. @jhugman From Leanplum support, I added a custom message template to get hooks into what a user picked on the dialog. It was a little more complicated than I expected but does work as we talked about. This campaign is enabled for only in the dev account. When you get a spare moment, wouldn't mind going over it.. @st3fan mind an r?. @farhanpatel mind an r?. Approved in https://bugzilla.mozilla.org/show_bug.cgi?id=1404089. @farhanpatel Conflicts resolved! Mind giving this an r? I used dev credentials from here.\nTo test, simply start app with dev keys and log into FxA. You should see Leanplum push dialog. After this merges, I would like to pull out the custom template and variable setup into own files.. @st3fan Made update you requested, mind another r?. Hey @st3fan, It doesn't appear so. I opened the following deep links in safari and got the following results. These seem to be correct.\n\nfirefox://?fxa=signin&email=test@email.com\n\nLaunches FxiOS, opens the FxA Content View Controller and prefills email.\n\nfirefox://?fxa=signin\n\nLaunches FxiOS, opens the FxA Content View Controller\n\nfirefox://\n\nLaunches FxiOS. Variable name was misleading, it was actually building out the query strings to append onto the final signin URL. Updated name to reflect that it is query params and not url.. Yea it is only used when launching FxA viewcontroller via a deep link. Looks like I can declare a default value which would allow me to remove these statements.. There once call that uses these params still.. Couldn't find any concrete Apple documentation, but can confirm this flag gets set when associated domains capabilities gets enabled.. Yea, based on their documentation they recommend the deep_link query parameter to send via the universal link. I will update the comment to reference this.. Yup! These are correct for test/production Adjust trackers.. When testing this against ios-push2, got this error while the settings page was up and I disconnected from another client.\n2017-08-15 13:40:42.881 [Info] [PushClient.swift:156] send(request:) > DELETE https://updates.push.services.mozilla.com/v1/apns/fennec/registration/05412ef0eddb4438aac45cdc392cd035\n2017-08-15 13:40:42.920280-0400 Client[2582:697319] This application is modifying the autolayout engine from a background thread after the engine was accessed from the main thread. This can lead to engine corruption and weird crashes.\n Stack:(\n    0   CoreFoundation                      0x0000000182ceeff8 <redacted> + 148\n    1   libobjc.A.dylib                     0x0000000181750538 objc_exception_throw + 56\n    2   CoreFoundation                      0x0000000182ceef28 <redacted> + 0\n    3   Foundation                          0x00000001838e1378 <redacted> + 128\n    4   Foundation                          0x0000000183729a38 <redacted> + 36\n    5   UIKit                               0x0000000188e1c3b0 <redacted> + 816\n    6   UIKit                               0x0000000189115ed0 <redacted> + 172\n    7   UIKit                               0x0000000188e1b434 <redacted> + 512\n    8   UIKit                               0x0000000188ff791c <redacted> + 220\n    9   UIKit                               0x0000000188f993c8 <redacted> + 512\n    10  UIKit                               0x0000000189154eec <redacted> + 116\n    11  UIKit                               0x000000018915b7fc <redacted> + 188\n    12  CoreFoundation                      0x0000000182bdde34 <redacted> + 132\n    13  CoreFoundation                      0x0000000182bddd30 <redacted> + 312\n    14  UIKit                               0x0000000188eff7ec <redacted> + 1432\n    15  Client                              0x00000001002f71a8 _TFC6Client27SettingsTableViewController26SELfirefoxAccountDidChangefT_T_ + 176\n    16  Client                              0x00000001002f71f4 _TToFC6Client27SettingsTableViewController26SELfirefoxAccountDidChangefT_T_ + 40. Sounds good I'll update. My original logic was that I didn't want to introduce view objects in the model class.. I took this from https://github.com/mozilla-mobile/firefox-ios/blob/02467f8015e5936425dfc7355c290f94c56ea57a/Account/FxAState.swift#L325, but I will confirm what we should use as an issuer.. Refactored this to use SDWebImageManager which cleaned up the code a lot.. Is it suffice if the makeRequest helper function below uses AlamoFire?. Look's like I was mistaken, it is only used for sessions that don't have an associated device, which this does. Ref: https://github.com/mozilla/fxa-content-server/issues/3933.. Sorry should have mentioned I removed isContentServer.. This is worked as part of https://github.com/mozilla/fxa-oauth-server/issues/473. Tried several different ways to not use expectations, but all tests failed because of unfulfilled expectations. Ex.\nlet response = client.login(\u2026) >>== { login in\n    client.getProfile(withSessionToken: login.value.sessionToken\u2026)\n}.value.successValue\nXCTAssertNotNil(response.uid)\nPerhaps I am missing something? However, I did cleanup these tests to make them easier to follow.. Added SDWebImageLowPriority, but looks like SDWebImageScaleDownLargeImages is not available for 3.7. Also, took a glance at the 4.0 migration guide and seems like they changed a lot which could make this big enough to be its own issue?. I don't believe this is something to be worried about, but added a 100ms delay to posting notification after image has been downloaded.. Cleaned up some of the loose expectations and the tests pass correctly when using\nwithVerifiedAccount { emailUTF8, quickStretchedPW in\n// Empty in here, this was previously failing when using expectations. \n        }\nHowever, if I use \nwithVerifiedAccount { emailUTF8, quickStretchedPW in\n            let stageConfiguration = StageFirefoxAccountConfiguration()\n            let client = FxAClient10(authEndpoint: stageConfiguration.authEndpointURL, oauthEndpoint: stageConfiguration.oauthEndpointURL, profileEndpoint: stageConfiguration.profileEndpointURL)\n            let response = client.login(emailUTF8, quickStretchedPW: quickStretchedPW, getKeys: true) >>== { login in\n                client.getProfile(withSessionToken: login.sessionToken as NSData)\n            }.value.successValue\n            XCTAssertNotNil(response?.uid)\n        }\nI get the following error.\n\nIf I remove the .value.successValue, the test fails the assert at the bottom. I am using a valid signedInUser.json (verified account). The code  appears to matchup with the examples you linked. Is there something very different with how FxA tests work? I also noticed they are skipped in BuddyBuild.. Strange, didn't realize that changed, will revert.. This would reset upon next launch, so the avatar would have another chance to load.. It appears to run the completion callback on dispatch_main_sync_safe for cached and downloaded images, 1, 2, 3.\nConsidering this and your earlier comment, remove it altogether?. From https://github.com/mozilla-mobile/firefox-ios/pull/3071#discussion_r135601692, this appeared to let the expectations complete and pass tests. Not sure if this was the correct way to clean up these.. Tested this with several clients and it performed well when receiving the notifications.. ~~That sounds good @rfk. I'll add some documentation stating that.~~\nTurns out that there is another function that doesn't require an issuer. Will update to that.. @rnewman I tried updating this to use UIView.transition and switching depending on the animation state and the experience definitely not as smooth as the current one. I also played around with some other animation techniques but was getting diminishing returns on the time spent. That said, would the current animation be good enough to merge and get feedback then iterate?. Sorry about that, updated comment. Using self.loginDidFail() was causing the content view controller to be automatically dismissed. Not having it allows the view to appear and waits for the account to be verified.. > if the account has been verified, can we/should we register for push notifications yet?\nWhen testing, the user gets presented with the notification permission modal as soon as they have a successful login (regardless if account has been confirmed or not). I thought there was some logic under the hood the hooked up the notifications and the account, despite account verification state.\n\nwhat happens when the user leaves the screen manually before verifying.\n\nIf they leave screen, they can go back by clicking the account indicator. Which would give them an option to resend verification emails etc.. Just to give a little background, this was added so that the avatar/display name would get updated after the user navigates from FxA webview settings page (they could have changed it). Where might be a better place to put this?. @st3fan I am not familiar with what step Leanplum gets turned on, does it make sense to enable for these channels?. Looking through the code, calling readyForSyncing seemed like the correct thing to do. From my tests, the account transitions back to settings and starts syncing. Leanplum then shows the pre-push dialog where the user can choose to enable or disabled push notifications.\n@jhugman Do you see anything inherently wrong with doing this?. @jhugman From our previous conversation, we wanted to move the logic that does this into  the FxAContentViewController. After digging more into it, it turns out that this was not really needed in either case. The FxA webview correctly sends the appropriate login messages and handles when the account is unverified.\nFor unverified accounts and logins, it shows the correct screen and setup push notifications if permission wasn't already granted.\nAlso, removing this logic fixes the current issue because it allows the user to navigate back and forth from FxiOS settings and FxAContentViewController.. It shouldn't be the case, but this was added to guard against the possibility of a bad configuration.. I think this might be ok? I was trying to follow how their example was, but can remove if not necessary. . ",
    "KeithPiTsui": "I guess your issue was about network problem, like being blocked or so. Because some inside framework need to connect google server.. ",
    "m13026178198": "executing bootstrap.sh. If it does not work and  you live in china ,please try to use VPN.. ",
    "CodeLiar": "Thanks very much! Those errors disappeared now. And I don't know why. Now I need to take against   the GFW. @mauryat. ",
    "Matrosskin": "@farhanpatel What was the reason for closing the issue?. Sorry for late answer and thank you @justindarc for reaction! I also have not STR, only saw reports about error. We still have a few error reports 5 days ago but as I believe it just require some time to deliver fix to users. So I going to close the issue at the moment.. ",
    "jhonny111s": "@farhanpatel i am agree with @Matrosskin  why close the issue?\ni have same problem and look like a problem with header  http-equiv=\"X-UA-Compatible\". with firefox ios 8.2\n<!DOCTYPE html>\n<html>\n<head><title>title </title><meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content {snip} .... ",
    "jaynetics": "@farhanpatel JFYI this is still occurring\n\n. ",
    "carolinesalib": "I got the same problem on rollbar with firefox ios 11.1 and 10.6. Both ocorres in iOS 11.3.. ",
    "skulden13": "I got the same issues from Firefox-iOS 10.6 in iOS 11.3.. ",
    "piotrd": "Same here for Firefox 11.1 in iOS 11.3. ",
    "willydee": "Also happened here on Firefox 12.1 on iOS 11.2.6. Please reopen the issue.. ",
    "davidjpfeiffer": "Same here for Firefox on iOS 11.4.1. ",
    "heubergen": "Decline. Not possible due to Apple's Restrictions.. If you could commit and invite me to the ff test builds I could test it as the original reporter of thr bugzilla ticket :). Not sure if you @justindarc are a mozilla employee or not. If yes someone in the iOS team could help you with this. Otherwise we need to wait for some else. ",
    "huayu0723": "I'll try to commit a new PR asap.. ",
    "garrettr": "Quick note to clarify Chrome iOS's behavior. @trufae said\n\nChrome: disables the option when the page is large\n\nwhich was also my initial assumption\u2014if you visit the test URL in Chrome iOS, the \"Find in Page\" option is greyed out in the menu. However, while I was reviewing the Chrome iOS source, I noticed that the option is disabled not because the page is large, but because Chrome iOS does not consider a plain text page (e.g. a response with Content-Type: text/plain) to be searchable.. ",
    "Delphine": "Nope - we've never heard any pain points from localizers at this point. Seems like the feedback loop works well for them. Screenshots have been essential and very helpful for this.. Ah ok - I believe we used to do that each time with @flodolo, but maybe I'm mistaken. We can wait for him to chime in, this wouldn't be urgent anyways.\nWhen I look at the current shipping_locales on master it's missing a bunch of locales, but maybe you're getting them from somewhere else?. @st3fan: So, I guess we should update this list on master with the latest locales right?. I think this is fine, can't think of anything else. thanks. CC @st3fan (can't add you as reviewer). CC @st3fan (can't add you as reviewer). @farhanpatel Why did you close this one? It's for v12, and the other one was for master (both need to be udpated). Oh nevermind! didn't see the note in the other PR ;) . CC @st3fan to review this. ",
    "MercuryXIII": "As any normal browser that supports Private Browsing, You need to close your session afterwards. In this case, to have it automatically done, Go into Firefox's settings and enable \"close tabs after leaving Private Mode\".. You're acting like Firefox is the only iPhone web browser to do this. Both Safari and Chrome do the same thing! And On A Desktop Browser, You close the private window(s), just like how you would close your private tabs on iOS.. While I agree it should tell you you can't install add-ons on Firefox for iOS, this is a AMO issue, not a Firefox issue . I'd love to see this added to the code in future Fennec for iOS releases. I'd just tell users that they need an app that can open these files if they don't have one. For instance, if I download a .zip in Safari, it tells me I can open it an app that I got from the app store.. When can we expect this to hit TestFlight builds? Looking forward to dark mode \ud83d\udda4. @garvankeeley sweet! . I meant easy on the eyes. ",
    "ncloudioj": "@sleroux Awesome!\nStaging test looks good so far. Will light it up in prod shortly.. @sleroux We didn't anonymize those numbers (counts of bookmarks and history) on the desk-top side as A-S is currently running under the Test Pilot. Though we'll need to revisit the data collection policy when landing A-S to M-C. . ",
    "isabelrios": "Hi @npark-mozilla! Please r? , as commented this are the new tests, appart from the things you see, there are a few others to comment after you have a look at it. Thanks!. Thanks for your comments @jhugman, will work on them. @jhugman, @npark-mozilla, latest version of the tests using the latest modifications in FxScreenGraph. Please r? Thanks!. @jhugman no, there is not a bug for this, should I open one? If so I can do it...Thanks!. @npark-mozilla Please r? Thanks!. There is a test failing, not related to the ones implemented here, seems an intermittent failure since it worked previously. Will open a bug to investigate these intermittent failures that appear sometimes.. As a summary, in this PR:\n- I ran the build a few more times before modifying the waitforElement in ScreenGraph and the test in this test suite that failed at the beginning is not failing anymore.\n- Anyway, as there are some intermittents in ThirdPartyTest, ActivityStreamTest and AuthenticationTest sometimes, I modified the waitforElement to check if that would avoid some of those intermittent\n- Finally, the FxScreenGraph is not modified here. The test script seems more understandable this way.. Thanks for your review and comments!\n- Methods added to Navigator so those can be used in future scripts or if the old tests are refactored at some point\n- WaitforElement not changed finally, lets see if other solutions fix the intermittent in those suites since as jhugman commented that is not used there\n- Removed that old comment\n- Squashed commits\nLets see if everything is green :). @npark-mozilla I got the r+ from your side on the bug for this PR. But just wanted to comment and check that is ok too to add also these changes in order to be able to land this PR:\n-Deactivate UnitTests LivePushClientTests in Nightly, already disabled in Fennec which make the build to timeout\n-Comment the three tests in ThirdPartySearchTests that fails due to bug 1349154. Once it is solved they can be uncommented\nThanks!. Closing this PR, no work ongoing here. Each intermittent issue is investigated. If some general issues appear again, the work on this PR will be re-started. @jhugman sorry for the mess with the comments and so, let me try to summarize latest changes according to your comments so I hope it is easier for you to check:\n- I've removed the sign up page references from FxScreenGraph. So third option taken.\n- I'm using enum but as commented, have to call it using a longer way, other way I get an error you can see in the commet above\n- I had to define the accessibility ID for \"Show Tour\" in  Client/Frontend/Settings/AppSettingsOptions.swift, so that I can use it in FxScreenGraph , is it correct that way?\nThank you again for your time reviewing this! . @jhugman latest changes you suggested are done. Please let me know what do you think about them! Thanks!. Closing this PR since the change has been added in PR . @npark-mozilla Please r? . The three tests faling are the known ones, if the PR looks good I will run it changing the scheme to Fennec so it can be merged, because the tests fixed in this PR seem to be working fine.. I just checked that these tests run on Nightly successfully. The build fails due to the 3 unit tests that we already know and two other XCUITests for which there is a PR to fix them. \nI am running finally the build on Fennec so it is green and we can merge. \nPlease r? @npark-mozilla, thanks!. @npark-mozilla I need to understand those numbers, it could be that or also that codecov checks all files, including the test ones and we are adding more lines here.. @npark-mozilla Please, when you have sometime r? after adding the disabled TopSites UI tests to this Test Suite too. \nThanks!. Failures due to known issues not related to the ones in this PR. Closing this PR as there are issues with the schemes required and the ones running, they do not match. A new one will be open to make these changes. @jhugman hi, I did some changes in order to try to fix the PR with your comments, could you please take a look at it again?\nThanks!!. Both UI and XCUITests run ok on this branch. My two cents adding another check to this PR. Checked with the time and seems to be safe to land. . Closing this PR since this test has not failed lately. Closing this PR, the test is being fixed in PR 3651. Thanks @jhugman for the review! This was a first approach to check I understood what you had in mind and looks like I did not get all it right. Let me try to explain:\n\nIIRC, the test was to populate multiple databases with (for example) 10, 100, 200, 500, 1000 sites. I don't see how this is working here.\n\nYes, that is right, as said, this was a first approach, I used the n variable, to check if I was doing it right. I will improve it and make the test works as you suggest.\nAlso, not sure if you know about this folder where we keep several DBs We can mention that so users can use them too.\n\nI can't quite see the mechanism of how to collect the populated database between runs or in the same tests.\n\nThis is all explained in the wiki, Automated UI Tests\nI'm not sure if we really want that in the test. It's doable using a script that saves the DB in a desired path, but since the test is meant to be launched as per user needs (it will be disabled) I thought it was enough with knowing where the DB is.\n\nI see plenty of duplicated domains in the list. Filtering the list to ensure only one google.com.* is represented may help speed the database.\n\nOh I can work on that to remove the duplicates domains.\n\nWas there a plan to follow the first link as well, to provide alternative method of populating the database?\n\nSorry, not sure I got this, you mean to start populating the DB not from the first link?\n\nShould this PR also have the result databases in them?\n\nAgain, I thought the idea was to launch the test when user wants a particular DB, not sure if we should include all DBs in a repo folder. We already have 2 DBs (one bookmark, 5000 History items) and a new one with 1000 Bookmarks (PR to land soon)) and we may add more for tests so that they use DBs instead of loading web pages. \nWe could always point to the folder where they are stored. But if you think is better to add some examples of DBs in the repo (10, 100, 200....we have to decide how many DBs) it is easy to do.\nThanks again and sorry for the misunderstandings\n. > Why not put the test-fixtures databases in git.\nSo far there are already three DBs, 1 bookmark, 1000 bookmarks and 4000 history entries. We can add more there. My concern is that each DB is > 1.5 MB, having a lot will increase the project size when cloning to build and so (not sure if the impact will be very high). I will ask and comment on the next team meeting to see if that is fine and everybody agrees, does that sound good?\nThanks!\n. Out of date PR, is the work is going to be continued, we can use this PR but it can be closed in the meantime.... I will run the tests on that branch too to check the failures. There should not be too many intermittents...let's see the results...Thanks!. Adding @npark-mozilla so that he takes a look at this PR before merging. Thanks!. The failures are due to intermittents already managed in other PRs pending to land. In case any of the intermittents fail more often now, I will open a follow up to fix it. Thanks for this PR to add the accIDs. Closing this PR since those tests are not failing lately.... Ok, once that is fine this could be merged. @garvankeeley before landing this, could you please take a look at the launch argument code addition? I checked that the device's name is only changed when that argument is set, but want to be sure that I do not miss any detail that could break the code...Thanks!. Also, using this PR to disable tests that should not run under the SyncIntegration schema. The fix is not needed, since PR landed this seems to be fixed. Thanks for this PR @mrachamallu !!! This is a great start! You added nicely the new screens and actions to the Screengraph which is very useful :)\nThere are a few things to be addressed though. Please feel free to ping me if you have questions or doubts about what I commented.\nIn addition to this test I have a few more in mind that could be added to this test suite I guess you were waiting for the first review and then added them, if not let me know and we can talk about more scenarios to cover.\nThanks!. There are files changed in this PR that should not be, there have been many changes in the menu too. So let's close this PR and create a new one for implementing the tests from the scratch.\nThanks @mrachamallu for all the work here!. As commented in the bug I think this is a good idea as long as we have all the tests running for each device :) \nIn addition to the Drag&Drop tests, these are other tests that only run for one device:\nOnly iPad\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/PrivateBrowsingTest.swift#L143\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/PrivateBrowsingTest.swift#L197\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/PrivateBrowsingTest.swift#L216\nOnly iPhone\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/TopTabsTest.swift#L79\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/TopTabsTest.swift#L85\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/TopTabsTest.swift#L113\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/TopTabsTest.swift#L152\nI will take a deeper look, but I think these are all. There has to be 194 tests running for iPad and 178 for iPhone. There are more tests (34 more, in case the number don't match) that are disabled both in XCUITest and XCUITest_iPad schemas because they are part of the Smoketest.\n. Thanks! \nSorry but I forgot this one:\nOnly for iPhone:\nhttps://github.com/mozilla-mobile/firefox-ios/blob/master/XCUITests/TopTabsTest.swift#L285 (master)\nAlso, as commented on Slack, the Fennec_Enterprise_XCUITests_iPad schema should be removed and leave only one Fennec_Enterprise_XCUITests\nOnce these changes are done I will run the tests locally for both devices and if they look good, I'm fine with this :)\nIn the meantime I will confirm with BB that our scheduled build will not be affected by this change.. Wow that's amazing if we can reduce the time that much! . This would be the list of enabled tests now. Take into account that under the disabled ones we currently have, Drag&Drop, SaveLogins due to issues with the feature or with the tests, and other tests disabled for changes in the feature or intermittents bugs.\n\n. > Can we add to the bottom of buddybuild_postclone.sh (this will skip all tests in Fennec)\n\n```\nThis scheme is used for Nimbledroid only, tests are not needed (this is the only way to skip tests in BB)\nsed -i '' 's/skipped = \"NO\"/skipped = \"YES\"/g' Client.xcodeproj/xcshareddata/xcschemes/Fennec.xcscheme\n```\n\nI have tried that but then the build fails to build...see BB error log: \nhttps://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5b9f721f1f3be5000198761c\nSo, we want the tests enabled in the schema but not running? Sorry I'm missing the point of this...:(. So @garvankeeley , this is the firs bunch of changes in test to use local served pages. Asking for your r? to check mainly that part, @npark-mozilla will review the more tests related stuff.\nI have started by changing example.com and mozilla.org (the most used) in some tests where I could do it. In the future I think we could change more sites and in more tests if the limitations stated above are fixed.. Closing this without merging because once an issue with the sims was fixed in the local machine where Jenkins is, the issue seems to be fixed.. And also in master, so @SimonBasca let's disable the tests affected so that they don't false fail before merging. Thanks!. Oh sorry, I was confused by the title of the PR, is not about all the DragAndDrop but the Tabs re-arrange in TabTray...if that is still off in master and v14.x, then I guess we can close this PR without merging because we can't enable any test....@SimonBasca I'm really sorry about this, my mistake :(. Or well @SimonBasca, we can use this PR to just fix the Drag&Drop test: testTryDragAndDropBookmarkToURLBar\n. Closing this PR, work done in: https://github.com/mozilla-mobile/firefox-ios/pull/4285. Closing since BB does not support this feature yet. @SimonBasca there are some files missing so that I can see the test file when going to your branch...see for example this PR, the  Client.xcodeproj/project.pbxproj, in that file you have to see your new file created that contains the tests otherwise it is not added to the project.\n. This is going on the right direction! great job! Just a few more comments, sorry for not realizing about some of them before. Once they are fixed and BB green this will be ready.\nThanks!. @garvankeeley Oh I see what you meant now...closing the first tab but without being there, just close it but the selected tab is still at the end...yeah, that was not implemented in the tests I created so I agree to add that test, also it looks much nicer so I will copy the style and re-write the other tests if it still make sense to have all of them or do you think with yours is enough?. @SimonBasca thanks for creating this new test! It looks good, just a few small comments to fix but otherwise looking good. It runs locally for me, let's see the results on BB and when comments are fixed, this will be ready to land! :). Closing this PR since this is going to be fixed in PR #4362. Let me share here the issues found and still open so that they can be fixed here or in follow up PRs (I can open bugzilla bugs if you want) but so that we don't forgot:\n\n[ ] Downlodas toast button\n[ ] Sing in to sync button and Create an account link in History Panel -> Synced devices do not work. Failing test: testTapSignInShowsFxAFromRemoteTabPanel\n\nRelated to the implementation that remembers the latest panel visited, I think there are two new issues: \n- [ ] When going to History Recently closed panel once, next time we go back to History, this panel will be shown, this is different from current behaviour where the general History panel is shown instead. These tests are failing due to that: testClearRecentlyClosedHistory and testRecentlyClosedOptionAvailable\n- [ ] I think that related to the previous one: Reading List Panel is not updated. If you open Reading List once, then go to a web page, add to reading list and go back to Reading List panel, the item is not shown. It necessary to go to another panel and back to Reading List to see it. Failing tests: testAddToReadingListPrivateMode and testAddToReadingListFromPageOptionsMenu\n. @SimonBasca The test passed on BB, please rebase the commits and ready to land! Thanks!. @SimonBasca this looks perfect! a new test added to the smoketest! :). @SimonBasca Looks like the changes in the other PR #4373 appear here too. You should remove them from here (undoing what you did in that PR) or we close the previous PR and land only this one (changing the title so that we don't forget it adds two tests to smoketest). I would go for first option, but as you prefer...Thanks!. @SimonBasca looks like the test fails (intermittent...:() so I would suggest (after checking the logs) to add waitForTabsButton() after line #12 to make the test more robust. @SimonBasca, Once you rebase the 2 commits this is ready to land! thanks!. @garvankeeley Thanks for running the XCUITest to check the tests :)! I have run them on BB and they look fine (the failures are known not related to this PR). There are issues though with the UITests. I run them locally both individually and as part of the whole test suite and they work, but not on BB I will investigate why but just to let you know in case you know the reason :)\nAlso, should this PR fix the issue with the Authentication Server login window? I have run the tests in parallel and it still appears...should something be modified in WebPagesForTestingor this is not the PR for that (sorry in that case :)). @farhanpatel I have been working on the xcuitest for this in a different PR but with these changes and realized that selecting 3 or 4 rows does not work for me, maximum number of top sites shown is as if you select 2 rows...is something you already know for a follow up PR or should be working here? Thanks!. @farhanpatel Asking for your r? since Stefan is on holidays. This PR is to fix the path issue we have in Bitrise the entitlements file can't be found. the system tries to find it at /Users/vagrant/git/Users/vagrant/git/Client/Entitlements/FennecApplication.entitlements. Removing the r? until everything works fine there. Too many changes in this PR in the schemes and so to have the tests running on Bitrise, so this PR will be open for a little bit more in case we need to do some more testing, but the official one to cover this change is PR #4487 . Closing this PR because the changes already landed on master on PR #4487 . This looks fine now, all tests are passing: https://dashboard.buddybuild.com/apps/57bf25c0f096bc01001e21e0/build/5c1a861ae52056000167a87e\nThanks!. > That is so weird, I wonder if something is up with the text editor I'm using because it looks normal there but weird on Github. I will edit the file through XCode and make sure it is correct there :O\n@kglazko with latest changes the file is shown correctly \\o/ Thanks for fixing that! :). @farhanpatel Please, let me know your view on the changes done here. The build works on bitrise and also the tests. If not now, when it is less risky we could merge in master to start running the tests there. Thanks!. @farhanpatel Added the two missing $inherit please let me know about the rest of changes if they look good to you, thanks!. As agreed during the triage, once the build was green it could be merged. Build is green for being built and running the tests so merging.\nThanks!. We are going to close this PR for now. Tests are very unstable when running on parallel. We have tried different approaches to try to fix the failures, mostly looks like timing issues, but looks like something of the feature itself not being mature enough as per comments seen We will try to enable this again with the new xcode beta version just released if tests work better.. Hopefully with this PR #4512  that install Rust environment in Jenkins SyncIntegration tests will pass. @SimonBasca Tests are green, once this is squashed could be merged. Thanks! . Looking good now, once BB is green and the commits are squashed, ready to land...Thanks!. This PR looks good to me. I would like to have @farhanpatel confirmation though to be sure we are adding the IDs correctly. Let's ask for his review before landing...\nThanks!. @kglazko Hey, please besides the comments take into account that this file should not be modified: Client/Assets/MainFrameAtDocumentStart.js\nThanks!!. Hi @linacambridge! thanks for this PR, unfortunately it does seem to fix the issue :( I can reproduce the same issue we were having before...TPSError: [phase phase1] RunNextTestAction failed - Error: ASSERTION FAILED! password not found\nLet me know if you want these logs or if there is something else I could try...Thanks!. @farhanpatel Asking for your review due to the changes in app code for the IDs, I had to separate the cases or they share the same ID and if I don't set any, they take the pocketTitleand the test keeps failing due to several matches. If this solution does not look good to you, let me know how I could modify it please. Thanks!. That option does not work for this test, the url has not to be open, it is needed just to write in the search bar to see if the prompt to enable suggestions is shown. If the url is open directly, this cannot be checked. This is similar, I tried just to write in the search bar and copy the text without going to the url, it is not needed. Just checking that I can write, copy and later paste. I need to investigate why but if I do that, the test only works for the first search engine, then then for the other fails... Same than above :(. Got them working, the solution was to add nowAt().... Those lines were because once I opened an URL after selecting a search engine, I was not able to go to settings unless I went back, so that I was on NewTabScreen, or going to BrowserMenu2. I have changed the method to use the second option so that settings can be open again. \nAnyway I will try to get that extension method or the screen node in case it is helpful for the future :)\n. This was for the first time entering in search settings to check the default engine, since it is only the first time and then the value changes depening on the search engine used adding this to changeSearchEngine makes the test fails. I have created another easy test just to check this part. Thanks @jhugman! Yes, you are right about the name of the function. I have been doing some tests on your branch with that new scene and these search tests seems to be working using it. Once it is merged, I will do the proper changes.. Yes, I will be careful with that and change it back to its previous value. Yes, forgot to remove it, sorry.. I saw in BB that AuthenticationTest failed and locally with the changes in FxScreenGraph failed too. Adding this line here the tests work.\nNot very clear to me why adding the NewPrivateTab to TabTray scene makes these tests to fail. It's that cannot go directly to Settings because instead of trying to opening it from the new tab, it tries to open it from TabTrayMenu. Need to understand why.... Yes, it makes more sense with the name you suggest. Will do the changes and see how it works. Thanks!. As No-Jun commented that is solved with gesture instead of tap. Would that be a correct solution? Thanks!.  Changed. Changed. No, it's been removed. In fact with the new parameter in navigator.openURL, I could remove a few navigator.nowAt, since it already said where we are. Added the new scene PrivateBrowserTab and the new parameter to navigator.openURL and navigator.openNewURL. . Instead of using private: Bool = false, since, as I understand is that you are browsing in private mode, I've changed the parameter name to regularBrowsing, otherwise it's confusing to me if private is set to false, but we are actually browsing in private mode. Did I get it right? does it make sense for you @jhugman? Please let me know otherwise :) . As commented below, if regularBrowsing is false, we are browsing in private mode, and so we are redirected to the correct scenes, would that be ok according to your comment @jhugman?. Ok, I left those methods as they were :) and updated the tests so they work.\nWe can modify the methods in the future and make a refactor of the tests.\nThanks @jhugman!. Hey @jhugman! One question...I tried to add this to FxScreenGraph, to NewTapMenu scene\nswift\n    map.createScene(NewTabMenu) { scene in\n         .....\n         scene.tap(app.collectionViews.cells[\"NewTabMenuItem\"], to: NewTabScreen)\n         ......\n    }\nBut it does work..I also tried with gesture with same result :( It works though if I add that to BrowserTapMenu, and start the test going first to an url...\nDon't really understand why it does not work adding it to NewTapMenu...:S \nAny clue? \nIf the second solution it's ok for you, I can include it in BrowserTapMenu and do it that way...Thanks!. Could it be due to the next line also goes to the same place?\n\nscene.tap(app.buttons[\"Close Menu\"], to: NewTabScreen)\n\nJust tried commenting it and then it works...so, not sure if it is better to keep the tap on + to add a tab from NewTabMenu in the test or add it to the BrowserTapMenu because I guess that removing the close action is not an option :) . I also tried to add this to TabTrayMenu scene:\nswift\nscene.tap(app.collectionViews.cells[\"CloseAllTabsMenuItem\"], to: NewTabScreen)\nand leave the method:\nswift\ncloseAllTabs() {\n    navigator.goto(TabTrayMenu)\n    navigator.goto(NewTabScreen)\n}\nBut seems there is a problem with the timing...it only works if I add there, between the two navigator calls, a sleep(2) or waitforExistence(app.collectionViews.cells[\"CloseAllTabsMenuItem\"])\nSo, not sure if it is worthy to add that to the FxScreenGraph\u2026 or if there is another way to solve that timing issue...what do you think @jhugman?\nThanks!!. I know adding sleep is not the best solution, but since the Switch button appears for a few seconds could cause false failures. The test was failed but it was possible to see the button, it was just timing issue not to be able to tap on it. If there is not delay between opening new tap and going to check the content of each tab, there is no time the second one is loaded, that is why adding this time here could make the test more stable. But if there is a better solution, please let me know :)!. Ah yeah, it does NOT work, sorry for the mistake. Yes, reading the test is clearer the way it is now. There were not previous converstaions :) just was asking what would it be better :) Thanks!. The thing here is that the Switch button is in a banner that last for a few seconds, not sure if wait for that element will make the test always consistent, because if the timing is not good, if we wait once it has appeared and dissapeared, then the test will fail...\nWill try that anyway and see if the test passes. Locally it does not fail, but running in bb it was not able to tap on the button, although looking at the screenshots logs, the button was there.... After removing NavigationTets.swift (the UITests) there was a compilation error here in Global.swift. Is it possible to replace it by antoher class in the same repo? In terms of the tests it does not affect, it was changed by BrowserTests and the build compiled and tests passed, but I do not really understand the purpose of its use here and how it works so maybe I am missing something. Could you please help me understand how it works and whether we can replace it? @sleroux or @thebnich, Thanks!!. Thanks @sleroux!. Nice! I think this could be very useful for the tests. These actions are used frequently, better to have this common way to use them. I had to go through these screens in the PR for Navigation Tests, and looking at the new scene here I am wondering a few things...\n-Would it be possible to call it also from Settings Screen, from Show Tour? That option, Start tour, goes through this intro. I tried but got an error that cannot route from SettingsScreen to Intro.Organize. Just to know if that could be used in more scenarios not only when the first launch happens\n-And once we get to the last screen, not sure if it would make sense to add the scene.tap(SingInToFirefox, to: FxSync). So that can be used also in other tests\n. Yup, makes sense will change it. Thanks!. Ah I see, that makes totally sense. I have been looking at the code and looks like that button does not have acc.Id. Maybe I am wrong but have not seen it, in these logs I see the acc.Id for startBrowsingButton but not for Sing in: \n\nButton 0x608000366fc0: traits: 8589934593, {{47.5, 462.0}, {280.0, 46.0}}, label: 'Sign in to Firefox'\nButton 0x608000367a40: traits: 8589934593, {{0.0, 611.0}, {375.0, 56.0}}, identifier: 'IntroViewController.startBrowsingButton', label: 'Start Browsing').\n\nI have tried to add this:\n\nsignInButton.accessibilityIdentifier = \"IntroViewController.signInButton\"\n\nBelow this line https://github.com/mozilla-mobile/firefox-ios/blob/a15ada2e49fefbce30bd912fd8495606c1efb9f4/Client/Frontend/Intro/IntroViewController.swift#L165 in a similar way that acc.Id is defined for startBrowsingButton some lines above \nThe test passes that way, but not sure whether that is the solution, sorry for my ignorance on this, would need your input here @jhugman, thanks!\n. Yeah, actually I had the same doubt when implementing the test...If tapping on Cancel takes you to a different place depending on from where you got to FxSyncLogin maybe it is not possible to add it to FxScreenGraph as a general action...\n@jhugman, you said three options, but there are only two, what is the third one ;) ? I do not really know which one would be the best, and if you do not like any of the approaches, maybe it is better to keep that as part of the test not the FxScreenGraph? . I cannot find it either :/ I guess it should be defined here @jhugman? :\nhttps://github.com/mozilla-mobile/firefox-ios/blob/0fe9935790ce5bf606b3a0e35084608734f6cc3e/Client/Frontend/Settings/AppSettingsOptions.swift. I will try to change it to be an enum. Thanks!. Would it be enough with adding here this line (or with another name not necessarily \"ShowTour\"):\n\noverride var accessibilityIdentifier: String? { return \"ShowTour\" }\n\nAnd using that in FxScreenGraph as:\n\nscene.tap(table.cells[\"ShowTour\"], to: Intro_Organize)\n\nOr is it also necessary to change something here to have the same string when calling NSLocalizedString? \nThanks @jhugman!\n. I have been working on this, but sorry I am not sure I got what you have in mind...is it to avoid using this locators in the test? \nIf so, I got to create an enum:\nswift\nenum BrowserMenuChoice: String {\n    case Desktop = \"RequestDesktopMenuItem\"\n    case Mobile = \"RequestMobileMenuItem\"\n}\nBut still need a method to tap on one or the other option in FxScreenGraph similar to changeBrowserView, the difference is how it is called from the test:\nswift\nnavigator.changeBrowserView(view: BrowserMenuChoice.Desktop.rawValue)\nIf that is not the purpose of enum I am a bit lost on how to improve it :) , the other options I have tried I do not see how they simplify the current changeBrowserView in FxScreenGraph so that it can be removed in favour of enum without adding calls like goto(BrowserTabMenu) in the test itself. \nSorry for asking so much :persevere: @jhugman \n. That makes sense. Moving those lines. Thanks!. Being in the readerView I have found three ways to go to the readingList:\n-Tapping back twice on the readerView once the website has been added to the list\n-Opening a new tab and go to the readerList view (the one implemented)\n-On readerView, tapping on Browser Settings and there on ReaderList option, which opens a newTab too\nNot sure which one is the more direct or the best one, or maybe I am missing another way to do it. Do you have any preference on which one to use @farhanpatel? Thanks!. Fixed, thanks!. @npark-mozilla, this is the only case I have not been able to convert (left it in the UITest file), would need a test site using multiple subdomains like https://foo.bar.baz.org/dingbat, but have not found a similar example to test yet.. Yeah, sounds good. I tried several times and the UI test works fine. Will update the PR. Thanks!. Hi @farhanpatel, you approved this PR, but with a question, sorry for asking again but did not want to merge without addressing it. Please let me know according to above comment what do you think is better from your point of view in case you prefer a different implementation. Thanks!. For some reason on BB when loading yahoo.com and the tab tray view is open, instead of showing Yahoo, it sometime shows Yahoo! and so the test fail. This does not happen locally. Changing to a more stable web site in terms of what we expect it to show. . As far as I have seen in my tests it does not make a difference, just loading the settings view the Help element exists so it is always true. Even if you put that line before scrolling. I tried with .isEnabled and .isHittable but it does not make a difference either. The first one is always true if the element is reached and the other does not work. Locally I do not need that sleep, but lets see if having it in bb makes this test more stable at least till finding a better solution (I have not find any other yet :(). Thanks! I think that would be the safer so far. I just commited new changes removing the sign up page references from FxScreenGraph. I'm not sure if I am doing something wrong here...\nIf I do: \n\nnavigator.changeBrowserView(view: .desktop)\n\nI get an error: Type \u2018String\u2019 has no member \u2018desktop'\nThe only way I can pass it is by calling it this way: \n\nnavigator.changeBrowserView(view: BrowserMenuChoice.desktop.rawValue). @jhugman Do you know why that error happens? would it be correct to use the long call: \nnavigator.changeBrowserView(view: BrowserMenuChoice.desktop.rawValue). @jhugman is this ShowTour well defined here and that way?. Thanks, changed!. Hope this is better now. Are the names better for this and for the enum :)? \n\nAlso, there are two options here becasue the BrowserTabMenu has two pages. I think there are pros and cons on both, and maybe more than the ones I say here. What do you think would be the best option @jhugman ? \n1. The one implemented, only one selectOptionFromBrowserTabMenu, with an if to check it the option selected is in the first or second tab. Pros: the code is not duplicated for BrowserTabMenu2. Cons: Need the sleep there, otherwise there is a timing issue and when checking if the element exists happens before it is there so the tests fail\n2. Create a second selectOptionFromBrowserTabMenu2(view: selectMenuOption2). Pros: We would not need the sleep. Cons: more code to duplicate the selectOptionFromBrowserTabMenu and create another enum for the options in BrowserTabMenu2.\nThanks!. Ignoring the coverage for sqlite3.c file is not shown which was annoying being showed in all pr as the coverage decreases there. Also, with this all the folders containing the tests are ignored for the code coverage results. That is more similar to the way bb shows the coverage results.\n@st3fan do you prefer to keep these files so that they count for the coverage or better to ignore them as in this PR. Results could be seen here\nPlese let me know other files you would like to ignore/show if any. Thanks!. Thanks for the tips! and for the names suggested, changes done.  Hope the final ones are good to you:\nbrowserPerformAction and for the enum, the same, BrowserPerformAction.\n. I followed what you suggested about option 1.\nHope that looks better now.. Could be that there is a typo here, instead of 'remoteTabsButton' I think is 'removeTabsButton'\n. Small thing...the comment above should be updated..\n\n// Closes all Tabs from the option in TabTrayMenu\n\nSince TabTrayMenu is going to dissapear...in case you want to leave already updated in this PR. If this check is for iPad, should not it be \"URLBarView.tabsButton\"? . Same comment as above.... \ud83d\udc4d Added numTabs to UserState. I had to find a place with desktop and mobile views and with components easy to identify in order to assert when each view was shown. \nIt does not work with mozilla.org or example.com, either with amazon.com or nytimes.com that have the desktop/mobie view, but not an element there to identify the view. \ud83d\udc4d Sounds good, will try to change it. I am afraid in this case it is not possible because we are changing to desktop from the website, using an element there, not from the menu options given. I added the action into the FxScreenGraph:\n screenState.gesture(forAction: Action.AcceptClearPrivateData) { userState in\n            app.tables.cells[\"ClearPrivateData\"].tap()\n            app.alerts.buttons[\"OK\"].tap()\n        }\nAnd the clearData function looks like:\nprivate func clearData() {\n        navigator.performAction(Action.AcceptClearPrivateData)\n        navigator.goto(NewTabScreen)\n}. When the passcode is changed using the ChangePasscode option in Passcode For Loggings screen, it returns there, so it should be to: PasscodeSettings. The idea behind creating it is that I need to go to LoginSettings when the passcode is set or not. And when it is set, I should be able to enter the correct passcode (this is easy using onEnter) or a wrong one (this is easy too with onEnter but only the first time), if being in that Enter Passcode screen (from Logins option) I did not know how to do it. \nSo I tried a solution similar to SetPasscodeTypeOnce thinking that both were similar, but I may have misunderstood the SetPasscodeTypeOnce...\n@jhugman would you have any suggestion about how to implement that? Thanks!\nThat is for example for test: testWrongPasscodeDisplaysAttemptsAndMaxError()\n. \ud83d\udc4d I have added it there. Would it be fine if I define a enterpasscode funcion like the typepasscode but in navigator so that I can do:\n<navigator.goto(LockedLoginsSettings)>\n<navigator.enterPasscode(\"111111\")>\nand so select the different passcode that I want instead of doing it defining actions?\n. Sorry! just changed it, leave that to try and forgot to change. This does not seem to work on iPad, will open a bug for this and the other cases seen on these tests where that \u00b4navigator.back()\u00b4 does not work. Hi @jhugman thanks for your comments! I'm trying to apply them but there are some errors...\n\n// In the tab\nscreenState.tap(app.buttons[\"Private Mode\"], forAction: Action.TogglePrivateModeFromTabBar, Action.TogglePrivateMode, if: \"tablet == true\")\n// in the tab tray (with the relevant accessibilityIdentifier)\nscreenState.tap(app.buttons[\"Private Mode\"], forAction: Action.TogglePrivateModeFromTabTray, Action.TogglePrivateMode) \n\nI can't use the same action in different screenStates, for example in TabTray or NewTabScreen, there is an error about the action defined before and that has to be unique:\nAction TogglePrivateModeTabBar is defined elsewhere, but should be unique\nAlso, in order to use the common logic to change the user state, I get an error: \nAmbiguous reference to member 'addScreenAction(_:transitionTo:file:line:recorder:)'\nLooks like I need the transitionTo, but in this case, I just want to change the userState don't need to change the current screen\nPlease let me know if I misunderstood the changes you requested...or they are those but we need to fix somehow those issues. Thanks!. In order to get a fix I thought about having a common func. Would that be a correct solution? \nfunc makePrivateModeAvailableTabBar() {\nscreenState.tap(app.buttons[\"Private Mode\"], forAction: Action.TogglePrivateModeTabBar, if: \"tablet == true\") { userState in\n            userState.isPrivate = !userState.isPrivate\n        }}\n. Yup, that was my first attempt, but was not sure because the app state does not change, so I did that way without action. I will change it as thought initially. We need to open an URL otherwise the Page Options menu is not accesible. I can open a few tabs without going to an URL, but one has to be a website.... \ud83d\udc4d Agree, will change the name. These accessibilityIdentifier are not defined. Will try to create them. You are right, I removed that line. I needed to open a new tab to check that the setting selected was working that's whay I did it that way. Just realized I can change those two lines with: navigator.performAction(Action.OpenNewTabFromTabTray)\nI will update the tests.\nThanks. You're right, no acc.Id for that toast button. Yes, sorry forgot to remove.... Sure, I will add it. Thanks!. Well, this is not an option in the Setting list. The idea of this test is to check that from the FxSignin Screen is possible to create a FxAccount. I added it here because it is where we are checking the FxSignin screen, but I can move it to the other test suite if that sounds better for you. \ud83d\udc4d . Oh I see, thanks for the suggestion, the tests are clearer now and there is not such duplication in FxScreenGraph.. So, if user and password are ok, this should transition to FxSignedin Screen. \nBut here we are only testing error cases and cannot have an E2E test yet to reach to that screen, that's why I did not add the transitionTo that screen. Added a comment in the test explaining what it does and tried to better articulate the comments above too. Hope it is clearer now.\nThanks!. We open that site whenever we call navigator.goto(BrowserTab) which is how the tests start, it is not opened directly in fxscreengraph during the init.. Yeah, PR updated coming with first comment fixed and giving more info: // This is part of the info the user will see in recent closed tabs once the default visited website (https://www.mozilla.org/en-US/book/) is closed\nAnd also before the first navigator.goto(BrowserTab)of each test I have added // Open default website.\nWould that be better? . @npark-mozilla , You were right, sorry did not take that into account. I made a fix for that, please let me know your thinking about it. Thanks!. Yeah, agreed. Oh I see, okay, sorry for the misunderstanding. Yeah, sorry I should have done that before...will change it!. This looks good! Will be helpful in the future. The test is failing for me here. After typing \"Book\" it finds 1/14000, then it quickly changes to 1/3000 and finally to 1/2000. If we wait for  \"1/2000\" instead of  \"1/500+\" the test works for both iPhone and iPad sim. . Oh I see, yeah, now with latest master on this branch I can si that number. If BB is green, then great! Those two failures are known intermittents, there is a fix for the first one at least ready to land.. Can we try with waitforExistence(app.tables[\"History List\"]) ? instead of the sleep. If that does not work to avoid the intermittents then lets use the sleep but like the last resource.. The solution is that or add wait for elements and nowAt so that we are sure we are on the HomePanelScreen, thought this solution looks better and it will be more consistent. We would need this also in ScreenGraphTest Test suite for TestUserState class\n. No, that does not work directly. So far, I was not able to get that while running the test for each environment so that I indicated what has to be modified before running the tests. I keep looking into this.. Instead of changing the set up for all the tests, it may can be set in the test suite itself, like for the FirstRunTests. This may need to be added to the Fennec_Enterpise_XCUITests_iPad schema too so that the test run successfully on iPad too (or disable the test for that schema). We may need to create a different XCUITest schema for the sync tests and have the tests enabled only there, otherwise this test is going to fail whenever we launch the XCUITests build on BB. And, if we disable it in our schemas to avoid the failure, then it fails when it is launched with pipenv run pytest. Since the ID has been added, this needs to be changed to use grey_accessibilityID instead of grey_accessibilityLabel. So @npark-mozilla you mean to modify the private func downloadFile(fileName: testFileName) function to something like:\nprivate func downloadFileXtimes(fileName: String, numberOfDownloads: Int)?. \ud83d\udc4d \n. @npark-mozilla Please let me know your view on this, if this is now more similar to what you commented. Thanks!. Thanks! done in PR https://github.com/mozilla-mobile/firefox-ios/pull/3967, will rebase and update this test before landing. So we had an issue before that could not see the change on desktop and we were asked if we were sure that there was a sync after the name was changed so that it was reflected on desktop, that is why I added this. But to be honest, not sure if changing the name using LaunchArg makes this unnecessary since the name is the same from the beginning and once there is a sync before, should be enough.... Oh sorry, that was a copy/paste error :( will fix right away\nStrange, Jenkins is green, but I did not go to the results to check that it was actually working. Will do once I fix this.. \ud83d\udc4d . @davehunt I run those commands but do not see any difference on Pipfile.lock\nI have pipenv 2018.7.1 which I think is the latest. Ah sorry forgot you mentioned it, just added it. \ud83d\udc4d . I can still see that line after re-creating the Pipfile.lock but some hashes have changed, @davehunt is it still wrong? \nThanks!. No idea why it is still shown :( but agree, does not seem to affect the tests, they are green in this PR. Thanks! enjoy your PTO!. Nit: This has to be updated on L#88 too, the test is failing checking the previous website. . Has this been removed for some reason? There are some tests using the this server here.... Thanks for adding the acc. Id! :). Nit: Remove this debug line. Is this used? If I'm not wrong, I think it can be removed. Please change this header as it is defined in other tests\n. After this line it would be good to check that the first time we go to the menu the table is empty, there are no entries. You can use something like:\nXCTAssertEqual(app.tables.cells.count, 0)\nSee example here. Since this test is called: checkDataManagementSettingsByDefault, I would not expect to clear the data here, just to check the settings and then clear the data in another test where you previously generate some data to remove. Does it make sense to you? . Also, I would add some checks to assure that the options shown are correct. For example, that there is the Show More option, the Edit button and so. As you know there are different schemas for the tests. This test should be enable only in Fennec_Enterprise_XCUITests and Fennec_Enterprise_XCUITests_iPad. So please, disable it from the other XCUITests schemas (Integration and Smoketest). @garvankeeley So, with this we skip the XCUITests when building on BB, but we still run the unit tests...would that be a valid approach? it takes less than 30 minutes to run those...And going to Fennec schema -> Edit -> Test -> mark XCUITests, the enabled XCUITests are available to run.... ah yes, now (well since a while ago) there is no option to close a tab from the Page Options menu, although it was not used before it did not matter, but now, the test tries to close the tab following that route as the fastest and so some tests fail due to that. I will remove the line.. Nit: remove space. It would be good to have a few comments to explain what the tests does, for example, above this line:\n// Opening three tabs by tapping on '+' button. And here, another comment: // Remove one tab by tapping on 'x' button. Not sure if we need this line...that buttons is always there, can you check if removing it the test passes? Thanks!. Same as comment above about removing this line.... Before this line I think is necessary to add if skipPlatform { return } so that it only runs on iPad. ah okay, then leave it there :). @npark-mozilla that is part of the original test. Tapping on pagecontrol button, removing the topsite on second screen and going back to first screen to check that the page control button does not appear.  I commented it out with the idea of uncomment it once tapping on the button gives stable results. But I guess that we can remove it and implement that part again when it works.. Use app.buttons[...] instead of XCUIApplication(). Use app.buttons[...] instead of XCUIApplication(). After typing a matching result, I would try also a non matching one, typeText(\"foo\") or something. Add here a comment that this is a workaround for the intermittent issue that the search field is not shown. . Since it is almost done, lets try to add the accessibility identifier for Website Data menu, see here\nAdd that line, and then modify this line as:\nscreenState.tap(app.cells[\"WebsiteData\"], to: WebsiteDataSettings). Okay, you can add a waitforExistence there. Sorry I did not tell you before, but it would be better if app.tables.cells.count is a variable, for example:\nlet expectedWebsiteDataEntries = app.tables.cells.count\nNot only here, but in all places it is used.. This line is not needed since this tap is included in the previous action. Just realized that there is an ID for Show More: ShowMoreWebsiteData Also, that tap could be an action:\nscreenState.gesture(forAction: Action.ShowMoreWebsiteDataEntries) { userState in\n            app.tables.cells[\"ShowMoreWebsiteData\"].tap()\n        }. Here you could also use an ID: app.tables.cells[\"ClearAllWebsiteData\"]\nAs a rule of thumb, use IDs whenever is possible. If there is not ID, and is difficult to add it, then use label as you did.. As said below, you could use an ID app.tables.cells[\"ClearAllWebsiteData\"]. Oh I see...but yes, it will work and the test will be clearer without that line.... Naming: variable name should start with lower case letter. Also, I would pick a more descriptive name, this is too general.\nFor example, websitesList or websitesToBeOpen.... I guess you got that long and not really easy to read element by recording the test...please try to write it as it is shown but avoiding the blue highlighting the text:\napp.buttons[\"HomePanels.TopSites\"] and same for the pageOptionButton, that way the code will look cleaner in the repo.... Nit: extra space. This pageActionMenuButton could be defined after line 106 and so used in that waitfor in L107 as a variable.... After latest changes on master this has to be renamed to waitForExistence. Same here, rename: waitForExistence. Looking at the results in BB you may need to add here a timeout...\nwaitForExistence(pageActionMenuButton, timeout: 5). @davehunt, there is this issue when running pipenv check: \n36546: requests <=2.19.1 resolved (2.19.1 installed)!\n12:32:17 The Requests package before 2.19.1 sends an HTTP Authorization header to an http URI upon receiving a same-hostname https-to-http redirect, which makes it easier for remote attackers to discover credentials by sniffing the network.\nI had to change the Jenkins file as we did in the past but with this vulnerability  sh 'pipenv check -i 36546\u2019 to have the tests working.\nWould that be fine? Any other way to avoid this issue? Thanks!\n. > You can do this by running pipenv update on the command line\nOh sorry, I forgot that. I can try to fix this in this PR doing what you suggest. Thanks!. @SimonBasca If I'm not wrong...you should not see changes in these lines according to master. Otherwise they are going to take effect and so the testWebSiteDataEnterFirstTime() test will be disabled again.... If this PR is about the searTabs test only that part should be modified.... I would also add here the waitUntilPageLoadto start waiting for the element once the page is completely shown.. @npark-mozilla There is another way...recording the test it gives the button as:\napp.children(matching: .window).element(boundBy: 0).children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .other).element(boundBy: 0).children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .other).element.children(matching: .button).element\nbut I think we will have the same issue accross sims. \nWe could use the coordinates with the comment as you suggest and in the meantime ask for an ID or label for that button to make this easier if you agree. @npark-mozilla in this case I could not find a better way to do it. We could go ahead with this solution with a comment about sims and in the meantime open a bug asking for an id or label for that element. @SimonBasca This test is still failing for me locally, same error as in BB...It looks like that after swiping up the app and tapping on the hiddenStatusbarElementthe toolbar menu is not shown.. Trying to debug would like to know which element is this...could you add a comment to make that easier to understand? Thanks!. @npark-mozilla Found this one line solution to add the identifier for this case, better than the coordinates approach, right?\n@farhanpatel would this acc.ID addition be fine for you too?\nThanks!. Looks like there is an extra space although when editing the file it showed the same alignment...will modify it. Yes, they had that prefix...I was trying with other prefix just in case they did not add the extra route we see...but no idea if that's possible...I will try with absolute path instead too.\nThanks!. With this change the test ErrorExploit fails. It should not open two tabs, but the assertion shows that two tabs are open instead of only one. @st3fan, with this $(inherited) change I passed the error we were having, now there are issues with the Codesigns [Failed to find Codesign Groups](https://app.bitrise.io/build/f179616a38e26400)\nInvestigating.... I think we should not change anything here.... Since the whole History test suite has been removed from here, I can see all these tests enabled in the Smoketest schema. Please disable all except for the created tests. Thanks!. Indentation does not look good...extra space here and no space in some lines below, could you please check that? Thanks!. Nit: extra line. When tapping on 'Select' those options are shown and also an arrow > with more options, that should be checked too, is there where the Paste&Go option is in this case and when Selecting All.\nAlso, take into account that the options are different for iPad in each case. I would confirm if that's the case and if not open a bug but anyway the test needs to be modified or it will fail when running on iPad device. The test appears enabled on the Smoketest schema, please disable it from there. It should only run in the regular one. Thanks!. The test is failing for me locally, I had to add here a waitForExistence(app.menuItems[\"Select All\"], timeout: 3) as well as waitUntilPageLoad()on L#353. Looks like it passed on BB but I think these checks will prevent intermittent failures\n. Nit: Commenting the comment, extra slashes :). Nit: remove commented line. Isn't this action doing this tap? \nWhenever it is possible using the FxScreenGraph is better. If some actions in this menu are missing this PR is a good moment to add them :) . I would add an action enableTraslationFeatureFromSetting or whatever name you think is good for this in the FxScreenGraph TranslationSettings screen. If I understand this test correctly, I would name it something like disabling the translation feature...for me is confusing the current title, but just my opinion. Calling the test here makes the test to be running forever...There has to be another way to check the clipboard and continue the test according to that without calling the test itself.... There is an existing function iPad() which checks this. So this can be changed as:\nif iPad() {. If I'm not wrong, the clipboard is empty when starting the test, so what is inside this if is never going to be checked. \nMy approach to the test would be a little bit simpler to save some steps:\n- Long press and check the options (for iPhone and iPad)\n- Long press copy text and check the options (Now Paste and Paste&Go should be shown)(for iPhone and iPad)\n. I guess this line is not needed, is it?. Similarly to the action to translate you could create one for don't translate, does it make sense?. I would also add an action for selecting the different options in the TranslationSetting screen\nAlso, please check if Bing has an id to use better than its String or use the app.tables.element(boundBy: x), where x is the order in the list (0,1,2...). Whenever is possible is better to use ids or elements identifiers not based on the string since that could change. Add a comment to say selecting Bing if that's not clear using its id or order in the table. . I think you can use the action defined for this: navigator.performAction(Action.SelectTranslateThisPage). So, something is not working because the test is executed forever and it has to be defined to run only once and pass or fail. Instead of calling the test itself, I would try to group what you want to execute in a different private function and call it from the test if the pasteboard is empty or not and so that function does what you want. But calling the test from itself could cause some issues.... mm not on purpose, let me check if I missed that one.... Indentation is not looking well...please see attached image...Not only here but all along the tests there are incorrect indentation...\n\n. Sorry about that, I missed this one and another too, I fixed that. Although for some reason builds were not affected and were built and run the tests successfully on both CI tools..... I think this is not necessary, you don't have to pin the top sites so they appear, only by visiting each webpage should be enough and that's they way they should appear. Instead of going to each website we can use a pre-loaded Data Base with all those pages appearing in the Top Sites list. See for example this test suite . For each test the corresponding data base is loaded with the data needed. It will be a good approach for this test, we have all the top sites there and depending on the number of rows selected, they are shown or not. \nThe data base for ipad could be used for iPhone, but I'm not sure if you need more top sites for the test on iPad sim (there are more top sites per row...)\nThese are the existing DBs in the repo. You can download and see the data of each one. There is also this folder with more DBs The number indicate the number of visited websites. If non of those is useful for you, you can create a new one following the steps described in the wiki Hope that helps! Let me know if you have questions/doubts. Not sure if we could add an action for this in the HomeSettings Screen  Also next line could be included as part of the back action and so the test would be more readable...otherwise is difficult to know that that line (below line) does. Nit: Use app instead of XCUIApplication. This function will need to add the checks for iPad, the number of Top Sites per row is different than on iPhone. With the DDBB implementation, this is not needed anymore or is it? . I would move this as part of the set up as it is done in the other tests. Nit: remove commented line. I think we can do this in a better way so that there is not code duplication. We are doing the same 4 times, just changing one small thing. We could create a userState and modify the number of rows selected before each Action.SelectTopSitesRows. For example userState.numTopSites in the test it would be something like:\nuserState.numTopSitesRows = 1\nnavigator.performAction(Action.SelectTopSitesRows)\nAnd in the screengraph:\nscreenState.gesture(forAction: Action.SelectTopSitesRows) { userState in \n           app.tables.cells[\"TopSitesRows\"].tap() \n           select(rows: userState.numTopSitesRows)\n            app.navigationBars.element(boundBy: 0).buttons.element(boundBy: 0).tap()\n        }\nWhere  select(rows: userState.numTopSitesRows)should be something like:\nfunc select(rows: Int) {\n        app.staticTexts[String(rows)].tap()\n    }\nThis way we have to create only one Action.SelectTopSitesRows.\nHope this makes sense, please let me know otherwise :). There is an example about a similar implementation in the Authentication tests. Please do this as part of the set up as in this example otherwise you need to launch the app and terminate it as you are doing but that implies launching the app twice for a single test.. I'm sorry I did not realize about this before...but why don't use directly if iPad() add the code for that and after and then a simple else...\nif iPad() {\n....\n} else {\n....\n}\nThat's how we have been doing the different actions if iPad or not. Not sure if it is better or not, but looks simplier.... The hidden extra line ;) sorry I just saw it...I need to be fresh in the morning to discover this :). I think we could add here and XCTAssertFalse(app.tables.cells.staticTexts[\"Google\"].exists) to be sure it has been removed.... I think we can do this in a simplier way but need to think about it...so far it is kind of confusing...could you try a different approach?. Please add some comments like // data will not be removed since it is older than today or yesterday.... Comment about creating a recent history.... And comment about removing recent history...the older is not removed but the just created is.... I guess this should not be removed.... Same here...removed by changes in the code...but not related to this PR. I've seen there is an id for this option, identifier: 'HistoryPanel.clearHistory' Please use it instead of the label.\nIn FxScreenGraph lets try to use ids whenever it is possible. This is a long label to be included in the ScreenGraph :( I have checked and can't not find easily how to add an id. We could add a bug for asking that and in the meantime use something like:\napp.sheets.buttons[\"Today\"]\nWith a comment to know where it is tapping...wdyt?. This action is pretty similar to the previous one, there is a lot of code duplication...Why don't we create an action to show the clear recent history menu and then in the test a function to select the option...for example...\nprivate func tapOnClearRecentHistoryOption(optionSelected: String) {\n        app.sheets.buttons[optionSelected].tap()\n    }\nand the test would be something like...\nnavigator.performAction(Action.ClearLastHourHistory)\n  tapOnClearRecentHistoryOption(optionSelected: \"Today\")\nDoes this make sense?. Let's see if you agree with this solution...Create only one array:\nlet oldHistoryEntries: [String] = [\"Internet for people, not profit \u2014 Mozilla\", \"Twitter\", \"Home - YouTube\"]\nAnd go through it like this:\nfor entry in oldHistoryEntries {\nXCTAssertTrue(app.tables.cells.staticTexts[entry].exists)\n}\nI think that may simplify the test since you were using allWebpages string only to create after it the allHistoryEntries, right? \nPlease correct me if I'm wrong or if you think there is a better way to do it...\nThanks!\n. This action could be removed from the FxScreenGraph and also if there is an screen or more code related . Open the file where those lines are and add them in the same line. Then be sure they have the same indentation (check it with git diff). \ud83d\udc4d . This could be removed then, right?. And this too.... I have been checking how to add ids for this elements so that we better use ids instead of labels (we should try that whenever elements are added to the ScreenGraph) and looks easy, would you mind to do it in this PR? \nJust go to this file and add each id like FirefoxHome for this case in this line instead of nil in: accessibilityIdentifier: nil\nAnd the same for the rest, Blank Page, Bookmarks, History. For custom url looks like there is an id already HomePageSetting\nLet me know if you have any questions about that.\n. I can't find where was the previous id...have you changed it here directly?\nThis id has to be changed in the UITests too or we might have failures there.... @garvankeeley Hi! I tried to set and id for this string instead of using label here but could not fine where to do the modification. This is the button to go back to Logins & Passwords list from a login entry detail screen. Could you please point me to the correct place to do it? as long as that does not imply big changes...Thanks!. Yeah, that's for the Logins button in Settings. Not sure if its name should be changed...although the string changed since we were using the id tests were not affected (only UI Tests needs the modification) ...I will try to find the other button to add its id...let me know if you can remember any other place where it could be added...thanks!. That's the same file as the link I pasted above, it is for the UI Tests, you should change it there to so that there are no failures in the UI Test suite...\nI was asking because it looks like you are changing the id directly in the test, if it has not been modified in any other file and I didn't know that was doable :). I think there is no need to create a new screenState...we already have this one to go to Logins...\n-When there is no password set\n-When there is password set\nWe use a different option to get there but the menu is the same. Looks like there is an id for this, \"key\" not sure why that's the id...not very meaningful...if it is not very difficult we could try to change it to something more related to the option.... Let's try to ad an id for Enter Search Mode...I'm afraid this view may change and so the test will fail soon...I have been looking at the code and I think it can be added after this line as view.accessibilityIdentifier = \"enterSearchMode\" (or the name you want :) ). The test looks great, I have been thinking if it would be worthy adding another test to access the logins list when there is passcode set as in this test...wdyt? . This is kind of confusing as it is now...what about using:\nnavigator.performAction(Action.SelectHomeAsCustomURL)\nenterWebPageAsHomepage(text: websiteUrl1)\nThen the following line is not needed.... We should try to go back to Settings screen using the graph, this is not very readable in a test...\nIf we are in HomeSettings screen and a back action is defined, we would need to just use navigator.goto(SettingsScreen) \nI tried to do that that way and for some reason that back action does not work, we may have to define a new one or find the cause why it does work, but that should be the way.... Same comment as above. And same here. Please disable this test from the Smoketest schema. I think this line is not needed...as the typeText is done correctly in the previous one.... In this case it looks like it works doing a navigator.goto(SettingsScreen) so you could remove this line and line 99 and just do this to go to Settings panel. Same comment as above. Same comment as in the other PR about the back actions to be handled by the graph. Not sure if it would be a good idea open a new tab here and check that the history page is shown, then change and be sure that it is updated with the new setting for home.... Same as before. And also same comment as before, if we should check that the blank page actually open before selecting FF as new tab...that first part may be already covered in other tests...so as you prefer and the way the test is cleaner and more stable.... Nit: remove debug line. This is not used, the passcode taken is 11111 the default one in FxScreenGraph, with that is enough, no need to add a new one I guess. Nit: remove debug line. There should be IDs for these elements, for example for usernameField but somehow, they are not shown...could you please check why? . Nit: remove commented line. Nit: remove debug line. As commented above there seems to be IDs for the elements in the Logins Detail View although they are not shown, once that is clarified, we could check that the elements are there with the IDs, and the content of each one as you are doing.. Right, I have checked this and looks like although the ID for the image is there, see code here, it is not displayed, worth checking with devs why.... Oh wait...I can see that ids again...\nImage, 0x6000025be3c0, {{-33.0, 333.5}, {22.0, 22.0}}, identifier: 'loginUnselected'.... This line and above can be enabled, the only part that does not work is the assertion with loginSelected/loginUnselected I would also add a comment with the reason behind having the line commented like due to bug ... this is not working.... If I'm not wrong this is working...at least is working with the UI tests...that No Logins found screen is shown. This part is working on latest master, the No logins foundmessage is shown. What we need to change is the assertion above because now the logins list contains two cells, with the options to Save Logins and Show In Application menu when the list is empty, so instead of 0 we need to equal to 2.... Nit: remove this commented line. ",
    "bhavnapanchal": "Hi, I explain same thing here too.\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=1350833#c9\nLet me know if you need more information.. @pvgoran \nWill you please comment same thing here,  on my pull-request as they closed it because they could not find real world example for it.\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2484\n. As I explain in my previous finding also, the root cause of this issue is we have this variable \"SchemesAllowedToOpenAsPopups\" which behaving as a gatekeeper.\nreference link\nIt choose which URL scheme will going to open in popup window and which not.\nI have debug firefox and chrome code and find out that this type of logic is only happen here and I don't know why.\nWKWebView have delegate which call when some page want to open popups.\u2028as a browser you have to create new WKWebView instance and return it to that delegate.\nbut what firefox do is, for certain url sheme it return WKWebView instance and for other it just return null.\u2028\nSchemesAllowedToOpenAsPopups = [\"http\", \"https\", \"javascript\", \"data\", \"about\"]\nnote in the case when it return null javascript object does not have control over newly created window which is expectable as firefox does not giving it.\nBEST SOLUTION WILL BE\nremove SchemesAllowedToOpenAsPopups usage and find out why firefox had it because it is look like a very bad patch.\n. @lemonYLX \nRegarding\n\nIf url is invalid, browser will open url in new tab, then prompt users that \u201cFirefox cannot open the page because it has an invalid address\u201d\n\nSo finally you able to build it \ud83d\udc4d .\nIt sounds good that it is not crashing.\nMy personal opinion is that it suppose to be perform search operation on google or other search engine when QR code is not valid URL.\nOR\nIn QR code screen it suppose to be pop-up message that this is invalid url you want to search with this text.\nBenefit of this approach is that if text contain some adults string it will not open in big screen. \nRegarding\n\nThere is another issue I met during the test:\n\"QR Code\" button should displayed when New Tab is a blank page.\nWhat do you think\uff1f\n\nWell I think this is nice case of user experience where user can read QR code and open web-page. But I am not sure about UI implementation for that how it looks.\nOR\nWe can add it in option menu so that user can open QR code reader whenever she/he wants.\nBenefits for above approach is you do not have to compromise stander UI of blank page\nand user do not have to open blank page to open QR code reader.\nI am also a swift developer and let me know if you need any help in building above things\nand let me know your comments too. . @lemonYLX \nThanks lemon,\nNow code looks fine, But i could not check it with my device as there are some error while running 'sh ./bootstrap.sh'\n'Build Failed\n    Task failed with exit code 65:\n    /usr/bin/xcrun xcodebuild -workspace /Users/jageen.shukla/Documents/JageenGit/firefox-ios/Carthage/Checkouts/Alamofire/Alamofire.xcworkspace -scheme \"Alamofire iOS\" -configuration Release -derivedDataPath /Users/jageen.shukla/Library/Caches/org.carthage.CarthageKit/DerivedData/Alamofire/2.0.2 -sdk iphoneos ONLY_ACTIVE_ARCH=NO BITCODE_GENERATION_MODE=bitcode CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES clean build'\nI review your code and it looks, clean to go just one case I was worried that you stop self.captureSession.stopRunning() in viewWillDisappear but did not start it on viewWillAppear.\nI just check code I am not sure about the case. sorry if I pointed out irrelevant issue.\nRegards\nBhavna.. @farhanpatel @garvankeeley \nIf you visit #2481 person named \"pvgoran\" mentioned real world issue happening with their site.\nhttps://www.prideofmaui.com/turtlesnorkel/#booknow\nIf you want more example, I have to search each payment/booking related sites.\nIf it is look like patch not a solution, I also look this in that way but main root cause of this problem is the logic of allowing limited url schema to open new window.\nIf possible can I contact that person who wrote that code to know more about it ?. @pvgoran thanks for comment\nas per the current code valid urls schemas are\n[\"http\", \"https\", \"javascript\", \"data\"].\nPlease try with https://yourdomain/..\nIf still not working then it is defiantly not related to this issue. . Nice piece of code, I am just wonder what if url is invalid\nin that case application might crash. \nwill you please test it for that and let me know\nelse all looks nicely structured and maintained, can't wait to see this feature in latest build. . Well you can test it by replacing\nlet url = NSURL(string: metaData.stringValue)\nwith \nlet url = NSURL(string:\"someInvalidURLString\")\n. ",
    "pvgoran": "We at A3H.org (Activities & Attractions Association of Hawaii) just encountered this issue, in a very real-world use case. We host a real-time booking system which works in conjunction with companies' (third-party) web sites. The customer access the company's web site which has a form for booking a trip. When the customer clicks the submit button, the Javascript code that we supplied opens a blank popup window, which is then filled using document.write() with some <script> elements which reference our (A3H's) website. The website checks if the trip is available, and returns the Javascript that either continues the booking process, or tells the customer that booking is not possible.\nhttps://www.prideofmaui.com/turtlesnorkel/#booknow (the booking form at the right) is an example. With Firefox on IOS, it doesn't work. In all other Firefox versions that I tried, everything is fine. Moreover, Safari and Chrome on IOS also work file; Google Browser on IOS doesn't seem to work, though.. @Elias-Serneels Does your code work in Google App on IOS, by the way?. @farhanpatel @bhavnapanchal https://www.prideofmaui.com/turtlesnorkel/#booknow is not actually my site, it's a third-party site that uses our code and our site as an online booking service. It was just an example, our booking system (www.hawaiifun.org) is used by quite a few third-party sites in this way, and all of them are susceptible to this problem. In particular, we received quite vocal complaints from the owners of https://www.skysthelimitballooning.com/MultipleProdForm.html about our code not working on their site in Firefox IOS.\nThat being said, I'm not sure this patch alone will fix our problem. Looks like something prevents access from Javascript to window objects created by window.open(), even if the URL uses a whitelisted scheme (I tried the URL of /).. Well, \"/\" should resolve to \"http://currentdomain/\" or \"https://currentdomain/\", so I'm pretty sure that an absolute URL (with the same domain as the origin page) would behave the same way as \"/\". I can't try it myself, since I don't have an IOS device, and have to rely on other people doing testing.\n\nIf still not working then it is defiantly not related to this issue.\n\nI'd argue that the issue might be the same, but the solution would be definitely different.\nDid you check that adding \"about\" to the whitelist resolves your issue?\n. @farhanpatel Where?... ",
    "jgreibus": "We have situation when we need check if window with window name exsists.\nIf it exists we add some additional information to window otherwise we create window with this new information.\n`let winName = \"win-name\",\n    win = window.open(\"\", winName),\n    message = 'Message content';\nif(win.customObject){\n    win.customObject.showMessage(message);\n} else {\n    win = window.open(\"index.html?message=${message}\", \"_blank\");\n    win.name = winName;\n}`. ",
    "Elias-Serneels": "We have a similar situation in which we open a blank window and afterwards set the location of that window like this:\nlet someWindow = window.open('');\n// some async code to get the uri\n// in callback:\nsomeWindow.location= \"https://someWebsite.url\";\nThis works on all browsers except for firefox on iOS.\nWe open an empty window first because it's not possible/allowed to open a window in an async callback.\nThe only way for us to get around this is to get the uris needed to open the window before the user clicks on a button/link which is not feasible for our use case.. @pvgoran I just tested and no it doesn't. Here is a codepen to demonstrate the issue: https://codepen.io/anon/pen/bLrPQq\nedit: The codepen seems to affect the issue so it's best to try it out for yourselves.. ",
    "MikeRKaplan": "We have this issue also. Our web site is a web enabled application that is password protected.\nCustomers can view PDFs but not via direct links - we don't want the PDFs available via a simple URL that anyone could use. Instead we open a blank window. In the first window we submit a POST request to our server and set the target of the response to the new, blank window. This works correctly in most browsers, including FireFox in Windows but it does not work in FireFox on an iPad. It does work correctly in Safari on an iPad.. ",
    "orklann": "Please try below before you build the Xcode project:\ncd firefox-ios\nsh ./bootstrap.sh\n. If you still encounter any build failure, try run below after running sh ./bootstrap.sh in the repo root directory:\ncarthage build --platform ios. ",
    "TandyTian": "It doesn't work\u3002must need convert to swift 3 \uff1f . ",
    "mitulmarsonia": "I have same issue. i have try your given above solution but does not work.. ",
    "rayray": "Happy to help. \ud83d\ude04 . ",
    "justindarc": "Haha.. Clearly, I've been writing JS for too long \ud83d\ude02. @heubergen I'm not sure how to do that? I've just landed this patch and it is on master now though.. @heubergen I am, but I'm still new on the mobile team. Perhaps @sleroux can help explain.. @farhanpatel good catch. I don't know how the project file got all screwed up, but I'll fix it.\nAlso, let me write a test case to double check that this doesn't create any issues with pushState. I don't think it would because I don't believe you can't change origins with pushState, but we should definitely check it to be certain.. @farhanpatel be sure to fix ClientTests/ActivityStreamTests.swift before landing.. For reference, here's the old query that runs for the History panel:\nsql\nSELECT\n  historyID, url, title, guid, domain_id, domain, localVisitDate, remoteVisitDate, visitCount,\n  iconID, iconURL, iconDate, iconType, iconWidth\nFROM (\n  SELECT\n    historyID, url, title, guid, domain_id, domain, visitCount,\n    max(localVisitDate) AS localVisitDate,\n    max(remoteVisitDate) AS remoteVisitDate\n  FROM (\n    SELECT\n      history.id AS historyID, history.url AS url, title, guid, domain_id, domain,\n      COALESCE(max(case visits.is_local when 1 then visits.date else 0 end), 0) AS localVisitDate,\n      COALESCE(max(case visits.is_local when 0 then visits.date else 0 end), 0) AS remoteVisitDate,\n      COALESCE(count(visits.is_local), 0) AS visitCount\n    FROM\n      history\n        INNER JOIN domains ON\n          domains.id = history.domain_id\n        INNER JOIN visits ON\n          visits.siteID = history.id\n    WHERE (history.is_deleted = 0)\n    GROUP BY historyID\n  )\n  WHERE (visitCount > 0)\n  GROUP BY historyID\n  ORDER BY max(localVisitDate, remoteVisitDate) DESC\n  LIMIT 100\n) LEFT OUTER JOIN view_history_id_favicon ON historyID = view_history_id_favicon.id\nAnd here's the new query this PR runs for the History panel:\nsql\nSELECT\n  history.id AS historyID, history.url, title, guid, domain_id, domain,\n  COALESCE(max(case visits.is_local when 1 then visits.date else 0 end), 0) AS localVisitDate,\n  COALESCE(max(case visits.is_local when 0 then visits.date else 0 end), 0) AS remoteVisitDate,\n  COALESCE(count(visits.is_local), 0) AS visitCount,\n  iconID, iconURL, iconDate, iconType, iconWidth\nFROM\n  history\n    INNER JOIN domains ON domains.id = history.domain_id\n    INNER JOIN visits ON visits.siteID = history.id\n    LEFT OUTER JOIN view_history_id_favicon ON view_history_id_favicon.id = history.id\nWHERE\n  (history.is_deleted = 0)\nGROUP BY historyID\nHAVING count(visits.is_local) > 0\nORDER BY max(localVisitDate, remoteVisitDate) DESC\nLIMIT 100. @st3fan So, apparently this is an issue with Angular+autofill on desktop browsers as well. There are workarounds in Angular to fix it, so I'm not entirely sure that this is something we should do. More information here: https://stackoverflow.com/questions/14965968/angularjs-browser-autofill-workaround-by-using-a-directive . Generally, more-specific CSS selectors are actually more expensive than less-specific ones because CSS selectors work from right-to-left. As far as SpotlightHelper goes, its not actually fetching the entire body there either. Its just finding the <title> tag without specifying that it must also be within <head>. Also, the code doesn\u2019t execute until the \u2018load\u2019 event fires too, so the <body> is already available at that point when this runs.\nIts a very common misconception that CSS works left-to-right. This is why the foo < bar selector has never existed and probably never will.\nhttps://csswizardry.com/2011/09/writing-efficient-css-selectors/. Yeah. Also, I'm pretty sure the <title> tag is supposed to go in <head> according to the standards... but I digress :-). Nope. Marked the bug as WONTFIX after we killed the metadata DB.. I suspect some sites are doing something like this:\nwindow.addEventListener('click', function(event) {\n    if (event.target.tagName === 'A') {\n        window.location.href = event.target.href;\n        // -or- do some fancy AJAX navigation here\n        event.preventDefault();\n    }\n});\nPreviously, we would've only stopped navigation for a regular <a href=\"...\"></a> that did not have any JS event listeners doing anything like that. So, now this code now attaches a click handler to the element with the useCapture argument set to true so we should get the event first and have the opportunity to kill it in our own click handler. Afterwards, we clean up our own click handler so it doesn't linger around on the page.\nThis patch also stops using a do/while loop that traverses event.target all the way to the root element using element = element.parentElement in favor of a single call to event.target.closest('a').. Just saw your commit to try and remove OHHTTPStubs to solve a BB failure. That's weird if that's the cause, but the original reason I had included that in telemetry-ios to begin with was that I was going to try to use it to form some simple unit tests around checking that the HTTP POST request body matches what is expected. I still think we should try and do that, but I'm open to other suggestions as to possible approaches. We could probably also achieve the same effect using GCDWebServer too.. I think we need to have a better understanding of whether or not Stefan or Maria use those fields for any sort of metrics before we decide to land this in its current state. I don't have a problem with it because I know we're still iterating, but let's make sure this doesn't mess up any current reporting.. Haha... I\u2019m not particularly worried, just that when I originally asked the Sentry guys about this, it seemed as though they hadn\u2019t tried it yet, but assumed that it should be fine. I believe since then, several others have commented on my forum post stating that they\u2019ve had success with it. The only issue I can think of offhand is that Sentry sends an HTTP request and I hope that it gets fired off in a timely manner. Might just be worth checking that we are correctly receiving the messages on the Sentry server with your patch.. I've been running with this patch applied for about a week now with no discernible issues. I just took your suggestion and added a sleep(3) inside withConnection in SwiftData and the app also seemed to behave as normal. All consumers of Storage expect a Deferred<Maybe<T>>, and so since we have now pushed the Deferred logic all the way down into SwiftData, this change should have minimal negative effects. We'd like to put this in Beta as soon as possible to see if anything unexpected comes up from it.. sigh.. i wonder if those are background-images?. also.. i dunno what website this is, but the actual hue of the colors in those images should still be correct.. just inverted brightness.. it still looks weird though. Let's uppercase the enum values so they match what's already in Sentry.. I've created a JSBin that calls window.open() to point to a page with window.close() for testing:\nhttp://output.jsbin.com/zomadaf\n. Here's some screenshots with this patch applied:\n\n\n. Compared to what it looks like currently on master:\n\n\n. Oh, right because you removed textField.keyboardType = .URL, so .URL is no longer the default value. I still think the changes I requested would make this code easier to follow. CustomSearchEngineTextView is not used anywhere else in the app except for these two text inputs, so it makes more sense to me to allow the resulting text input to be completely configurable from the init() directly as opposed to having to reach in to the CustomSearchEngineTextView after initialization and overriding its configuration.. @garvankeeley hmm.. in that case, maybe we should set it back to nil in setNightMode when turning night mode off?. Thanks for catching that. It should be easy to make all our telemetry calls conditional based on PBM. I'll look into implementing this.. A couple of notes:\n* The following 4 files under Client/Assets are compiled output that don't need reviewed: \n  - AllFramesAtDocumentEnd.js\n  - AllFramesAtDocumentStart.js\n  - MainFrameAtDocumentEnd.js\n  - MainFrameAtDocumentStart.js\nAlso, all JS files that were previously in Client/Assets have been moved to Client/Frontend/UserContent/UserScripts. These files really shouldn't need much in terms of review, but I did go through them to apply consistent style/formatting in a few places.. This PR addresses the following edge cases:\n- Prevent switching to/from Private Browsing Mode while dragging a tab\n- Prevent tapping \"+\" to open a new tab while dragging a tab\n- Prevent tapping tabs tray icon while dragging a tab\n- While dragging a \"Home panels\" tab, a top site can now be tapped and the page can load in the tab being dragged without crashing\n- While dragging a tab, a link can be long-pressed and opened into a new tab without crashing. @farhanpatel I'm ok with landing this as-is if you are... but we should aim to do the TopTabs/TabTray refactor for v11.1 then.. Closing this in favor of a more comprehensive fix (i.e. flattening favicons). @boek FYI. @evgeniyd we filed a follow-up to add new test cases for this here: https://bugzilla.mozilla.org/show_bug.cgi?id=1451433. Apparently, our Content-Security-Policy in reader mode doesn't allow for inline <style>. Instead of adding 'unsafe-inline', this patch adds the sha256-base64 hash for the <style> used.. I don't see any steps to reproduce the error. Can someone provide them here? Thanks!. @Matrosskin opened a bug in Bugzilla to track a fix: https://bugzilla.mozilla.org/show_bug.cgi?id=1523354\nIf you can provide STR, that would be great to verify a fix. Thanks!. PR #4500 . \n@Delphine here is what the strings in question look like in-action.\nOn the left, we have \"25.2MB/100.4MB\"... iOS formats the file sizes for us, so the string is really just two placeholders with a \"/\" between them. This PR defines the two placeholders as being ordered so they can be swapped if necessary.\nOn the right, we have \"1 of 3 files\" followed by the \"25.2MB/100.4MB\" string. Since the \"1\" never changes in \"1 of 3 files\", we already have a string defined for that which uses a single placeholder for the total number of files. With that being said, the only other localizable part here is the order in which we place those two strings side by side. In this case, I've done yet another string with two ordered placeholders, but with a single \" \" (space) between them. This should allow for the order to be swapped from \"1 of 3 files 25.2MB/100.4MB\" to \"25.2MB/100.4MB 1 of 3 files\" where each \"half\" of that string is also a separate localizable part.\nPlease let me know if I've missed anything here that should also be taken into consideration. Thanks!. We should probably ship an updated beta as soon as this lands too. Sorry :-/. \n. BTW, we definitely don't want to prompt if we crashed at any point in the last run. It is overkill and may actually lead to users accidentally destroying all their tabs.. No problem. This is still just very preliminary first steps anyway.. I also made sure this now handles <link> tags (stylesheets) and the Fetch API.. @eoger is that ok though? Without this, my toggles seem to flip randomly on their own between syncs.. Closing this PR. The issue seems to have been with my FxA account and toggling all the engines off and on again on desktop seems to have worked the issue out. \u00af_(\u30c4)_/\u00af. @rnewman this is ready for another look. I changed the query that gathers old history to simply order on local_modified/server_modified so we don't need to join to visits and do a GROUP BY. It definitely performs noticeably faster than my old query. Since we always keep those timestamps current, this seems like a reasonable way to gather the oldest history items. Let me know if that's an acceptable way to do this.. Closing this. Its nearly impossible to flatten favicons without extensive refactoring.. Also, as discussed today, since users can now \"pin\" items to their top sites to customize them, it shouldn't be nearly as important that we consider the entire data set when running this query anymore.. Ah, good idea... I'll modify this to do a UNION with a sample of recent sites too.. Thanks for the feedback as always, @rnewman \ud83d\udc4d. NOTE: Because this is essentially a complete rewrite of the HistoryPanel, it may be easier to review the patched HistoryPanel.swift as a whole rather than looking at the diff.. This isn't ready for review yet. I'd like to add infinite scrolling to this first.. I've changed my mind. Let's review this and land it on its own and implement infinite scrolling in another bug.. To install a WebExtension using this PR:\n\n\nCreate a \"WebExtensions\" folder under Fennec/Firefox in the iOS Files app:\n\n\n\nCopy a content script-based WebExtension into the \"WebExtensions\" folder:\n\n\n\nEnjoy :-)\n\n. Testing with WebExtensions found here:\n\n\nhttps://github.com/mdn/webextensions-examples. Browser Actions now (partially) working:\n\n\n. Nevermind. I can't.. For reference, the purpose of this PR is to implement \"Step 2\" as outlined in this document: https://docs.google.com/document/d/1vU1NMmi9rV3suFdmn4fYLligWQ4mrm1Wmy3zwqpNBkU/edit\nFormat the sync key into a 'k' and 'kid' in like you'd find in a JWK. Yeah, that's fine. I didn't notice any regression in the logins table view, but I'm not clear what that code was added for.. Hmm.. I don't know if it's possible since jsonObj is a somewhat hard-coded dictionary above. But I suppose it's possible? I can throw together a follow-up patch.. Also, to answer your question about how this fixes the regression, the string interpolation was resulting in \"Optional({...})\" which was being interpreted in JavaScript as a call to a non-existent Optional() function. But, you're right... if for some reason this returns nil, we may be in trouble. I don't think that can happen, but we should probably add ?? \"\" (or something similar) before we uplift this.. nit: I think this made more sense the way it was as a UInt so you wouldn't have to cast in Profile.swift. This moves the computation outside of the assertion as was recommended here: https://bugs.swift.org/browse/SR-4308. @rnewman would there be any harm in just switching this code to use fatalError() regardless of the optimizations used?. \ud83d\udc4d. nit: Can't we just set these equal to Int64.max / 1000 and Double(Int64.max / 1000) respectively?. @st3fan did you mean to change the DevelopmentTeam?. Actually... nevermind.. for some reason Double(Int64.max / 1000) evaluates to 9223372036854776 in Swift playground.. Err... I thought it was a rounding thing, but it turns out that Double(9223372036854775) hard-coded also evaluates to 9223372036854776 in a Swift playground. D'oh.. just realized that's a Swift Playground anomaly... Its actually setting it properly. Ohhh cool! I was wondering about this the other day as to whether or not you can specify that a return value can be optionally discarded. Nice! I might use this in the Telemetry library :-). Are there any other reasons this delegate method might get called besides device rotation that we should be concerned about?. Shouldn't this be / 1000000?\nhttps://www.google.com/search?q=1ms+to+ns. Shouldn't this be?:\ndo {\n            let data = try JSONSerialization.data(withJSONObject: toArray(), options: [])\n            return data\n        } catch let error {\n            print(\"Error pickling Event: \\(error)\")\n            return Data()\n        }. Shouldn't this also be surrounded with a do/catch?. It looks like we were previously using center not origin?. Disregard. I just saw your comment on this PR that this animation is slightly different :-). @rnewman The original query was doing this too except with a WHERE (visitCount > 0) in the outer-most SELECT. I'll look into all your feedback further when I get a chance, but in my dataset, I was getting the exact same results with my new query. I took the limit off the queries and output the results to CSV and did a diff -u old.txt new.txt, so I know I'm getting the exact same result with 12,224 rows which seems like a decently-large dataset.\nAlso, I ran the EXPLAIN QUERY PLAN on both queries and the new query only does 3 \"scans\" as opposed to the old query which does 5. To benchmark the query, I ran .timer on in sqlite and the new query was slightly faster. But, to be fair, the old query wasn't as slow for me as it was for you. So, I'd be curious to know how this patch performs with your data.. Of course. This was more of a \"WIP\" branch for the time being :-). Wouldn't this be 5 days?. This should probably be Section.bookmarks.numberOfItemsForRow() for better readability or in case more sections are added down the road.. There's a lot more I want to log in this method in general. Just want to get this landed for now.. Yes. This is why I made a second method called sendSync() because most cases you wouldn't want to block on it.. Can probably just do let isPinnedSite = true to make this more declarative since the main reason for this class is to distinguish between it and a top site.. nit: did you mean to add 2 lines of whitespace?. Since we're not doing anything after this, do we even need it?. Since we're rotating, should this actually be animated?. numberOfItemsPerRowForSizeClsssIpad -> numberOfItemsPerRowForSizeClassIpad (s -> a). lanscape -> landscape. Just curious as to why you are changing the way we detect the orientation here.. This seems confusing that the 2 is hard-coded without explanation. If we don't need the value for Section.highlights.numberOfItemsForRow() anymore, then maybe just add a comment explaining why.. nit: leading space. Remove print()'s before landing. Wouldn't this always be true? Also, the comment above this line needs updated to reflect the new logic.. Does it matter that our status bar is sometimes hidden though?. Does this remove the entire directory? If so and that's what we want, maybe throw a little comment here explaining that.. This works, but would it be more \"swifty\" as a lazy getter? . We don't want the staging server for release, do we?. nit: do we need to specify weight: UIFontWeightRegular here? we don't in the regular ones above. Is [\"url\"] guaranteed?. nit: maybe a better name would be updateSchema() or something along those lines?. extremely minor nit: related to my other comment below, maybe a more accurate name for this would be skipSchemaUpdate?. I wonder if we should provide the default \"0.0\" value here instead of having to specify it as the fallback everywhere else?. When I try to compile this, I get Value of type 'String' has no member 'removeLast'. Do we need to actually do this to fix this patch since we're already removing the trailing slash from prePathURL? Most browsers, including Firefox Desktop, add the trailing slash when autocompleting domains.. I don't know much about this, but doesn't textDidChange() need to be called anymore?. Yes, I spoke with Richard about this yesterday. _close_v2 always returns \"OK\" even if the DB couldn't close immediately. By doing a normal _close first, we can actually see if anything is preventing the DB from closing, log it, then do _close_v2.. The message does specify close_v2 already :-). It should give us localizedDescription. We can probably also log the code just in case.. We're already catching these inside closeCustomConnection() for more detail.. I wonder if we should use NSUserDefaultsPrefs(prefix: \"sentry\") for consistency? I guess internally it calls UserDefaults(suiteName: AppInfo.sharedContainerIdentifier) anyway so it probably doesn't matter.. Same here.. should we use NSUserDefaultsPrefs instead?. We're still relying on it (via Sentry) to let us know if there's a pending crash report (meaning we crashed during the last run). The only difference is now we're also using cleanlyBackgrounded to ignore any pending crash reports if the crash happened after the app went to the background.. I can't speak for Stefan, but I think this is because if we can't get appDelegate, something is seriously wrong.. Let's log this out to Sentry too.. I don't see where you're adding anything to the AppDelegate to check for this key?. Would it be reasonable to invoke fatalError() in that case?. Er.. nevermind.. I'm gonna assume that we probably shouldn't because we'd effectively be put in a state where the app is stuck in an infinite startup crash loop.. No, because user_version will always be 0 for older versions. We're simply using this as a cue as to whether or not this is a brand new empty database or not. If its not, we want to call schema.update() instead of schema.create().. How about instead I break out the detection of whether or not we need to migrate in a separate function? That would clarify everything a bit better, I think.. I hadn't considered breaking blame here. However, as someone who has recently stepped into this code, this was extremely unclear having this schema exist inside of another source file. IMO, since this file is relatively short (~100 lines), I feel the pros outweigh the cons here.. \ud83d\udc4d . Yeah.. as we discussed before, I plan on going back through here and filling in the gaps in the schema upgrade testing soon. I probably will just capture DB's and add them in as fixtures because it might be cleaner and more representative of real-world code execution.. It would also override existing values which is why I named it that. It doesn't matter much to me though.. Hmm.. ok... I tested this in simulator by opening a BEGIN EXCLUSIVE on the DB using sqlite3 in Terminal prior to launching the app when a schema upgrade is needed. This resulted in a LOCK error which then moved the DB, copied it back and continued with upgrading the schema correctly. If it's a FULL error, it should result in a fatalError() as before (although I agree we can probably try clearing up caches or something and retry). I wasn't clear on the distinction between BUSY and LOCK, but if you say there's a chance at corrupting things, then I guess I'll go back to the drawing board on this.\nThe good news though, is that I don't believe we'll even hit this code path hardly at all now. If no schema upgrade is needed, this code never executes anymore (unlike before).. This comment block may need updated. Based on Vijay's comment above, should we maybe invoke this from another thread?. nit: deleteClient(guid: GUID) might be a more accurate way to describe this similar to how you have getClient(guid: GUID) above (to distinguish between guid vs fxaDeviceId. IS -> = (I believe IS is usually reserved for checking for NULL). IS -> = (I believe IS is usually reserved for checking for NULL). self.tabs.name -> TableTabs. self.clients.name -> TableClients. clients.factory! -> SQLiteRemoteClientsAndTabs.remoteClientFactory. clients.factory! -> SQLiteRemoteClientsAndTabs.remoteClientFactory. It looks like this gets executed on the main thread:\nhttps://github.com/Leanplum/Leanplum-iOS-SDK/blob/master/Leanplum-SDK/Classes/Leanplum.m#L733-L740\nI think this should be ok. We're getting the profile, but we're not explicitly fetching anything from the DB, just prefs. I do agree that we should check .shouldSendToLP() around this though.. Don't we still need to check for otherGestureRecognizer is UILongPressGestureRecognizer?. Ok, yeah. You've convinced me :-)\nI'll see if I can rework this patch a bit to just let SwiftData run the schema preparation when it is first needed instead.. \ud83d\udc4d . This is also used internally in BrowserSchema for getting through the intermediate migrations prior to PRAGMA user_version.. Because its part of the Schema protocol.. Yes. It is called from ConcreteSQLiteDBConnection just the same as create and update.. You're right that this probably doesn't need to go in an async call, but I don't see where this would belong in PanelDataObserver?. Just added window here to add clarity to the code. This is effectively a non-change.. Just added window here to add clarity to the code. This is effectively a non-change.. Instead of a do/while loop, we can use the \"new\" closest() DOM API which is available as of iOS 9. This method will search up the tree from the given element for the specified CSS selector. If the original target element matches the CSS selector itself, then it simply returns the original element and stops traversal of the tree immediately. Our previous code was essentially an implementation of this exact behavior, but it was very inefficient because it continued traversing the tree all the way to the root element even after it had found a match.. I should also note that the reason this is needed in the first place is because event.target may not itself be an <a href=\"...\"></a> element when clicking a link. As an example:\n<a href=\"/some/link\">\n  <div>\n    <span>Click me!</span>\n  </div>\n</a>\nWith the above HTML, clicking on the link will likely send the <span> element as the event.target. So, we always need to traverse from event.target up the tree until we find an <a>...</a> (if one exists).. This method definition has changed (note the ? for UIActivityType):\nfunc activityViewController(_ activityViewController: UIActivityViewController, itemForActivityType activityType: UIActivityType?) -> Any?\nAlso note that we will still need to check if activityType is nil.. nit: we're not inside a block here, so self isn't needed. nit: no self needed if not in a block. nit: no self needed if not in a block. This will remove more than just https://, it would also remove http://, right? If so, how will the user know they're on a secure site?. This will replace all occurrences. What if the URL contains something like https://example.com/login?redirect=https://xyz.com/home?. nit: whitespace. nit: whitespace. Let's not reload. AFAIK, we don't follow this pattern anywhere else. It might be more \"swifty\" to do something like:\n```\nvar noImageMode: Bool {\n  didSet {\n    if noImageMode == oldValue {\n      return\n    }\nlet helper = (contentBlocker as! ContentBlockerHelper)\nhelper.noImageMode(enabled: noImageMode)\n\n}\n}\n``.let enabled = !isActivated(profile.prefs). Wouldn't this be a no-op? I would think it should be settingnoImageModeto the value ofenabled?. Ugh. That sucks. In that case, what you have should be fine. Maybe leave a comment above explaining why this pattern needed to be used.. Is there anything else we might need here inFxADeviceRegistrationin the future?. nit: i think the style guide calls for this going on a new line (but i know we do this elsewhere too). I don't understand how this fixes the issue. Wouldn't the previous way just *always* call this instead of conditionally checkingflags.verified`?. Yes, you can add these types of measurements here. For reference, here's how Focus inits telemetry-ios:\nhttps://github.com/mozilla-mobile/focus-ios/blob/master/Blockzilla/AppDelegate.swift#L23-L59. Wouldn't these just be:\ntelemetryConfig.measureUserDefaultsSetting(forKey: NewTabAccessors.PrefKey, withDefaultValue: profile.prefs.stringForKey(NewTabAccessors.PrefKey))\ntelemetryConfig.measureUserDefaultsSetting(forKey: PrefsKeys.KeyMailToOption, withDefaultValue: profile.prefs.stringForKey(PrefsKeys.KeyMailToOption))\n???. Note that UserDefaults will get re-captured at the time we queue the ping to be sent. The only thing we're doing when calling measureUserDefaultsSetting() is letting telemetry-ios know that \"these are the UserDefaults keys we're interested in\" and supplying them with default values (in case the UserDefaults haven't been inited yet). D'oh.. wait.. looks like UserDefaults aren't measured in the CorePing currently... that can change though.\nIn telemetry-ios, any measured UserDefaults values appear under \"settings\": { ... } in the FocusEventPing. I'm not sure how we were ever sending those to be honest.. look at the schema: https://github.com/mozilla-services/mozilla-pipeline-schemas/blob/master/schemas/telemetry/core/core.7.schema.json\n. Ah ok. Maybe we should include your explanation in a comment? . Its ok by me since I don't think we're relying on that data right now for anything. We should probably ask @st3fan though. I checked all the places that call unescape() and they all seem to fallback to a non-optional value, so I think this is ok.. nit: NotificationService (n -> N). should we include the stacktrace here too since we're catching an error?. Do we actually want to succeed() here?. can's this just be if !showPocket {?. nit: space between // and If. Wouldn't we still want to invalidate if they're turned off?. Can we pass profile as part of the constructor?. I think we intend on uplifting this to v9.x, so we can't use let there (support began with iOS 10) :-/\nhttps://caniuse.com/#feat=let. haha.. i knew you were gonna say this.. ok. Maybe drop in a comment here explaining why we don't animate if we're showing a PDF just so we don't accidentally regress on this in the future.\nIt would be nice if we could just have a different animation in this case that doesn't interfere with the heights. Like just fade in place. Still though, getting rid of the flicker is more important than an animation. We can always revisit this later as a visual polish thing.. Good call. I'll post a link to the WebKit code here.. Huh. That's weird. I wonder why this was there since tab is already passed in?. Should this go in Shared/Extensions/StringExtensions.swift instead?. Let's just make them uppercase.. nit: remove //true && true. nit: let extra = [\"filename\": filename]. nit: \"Attempting to update schema.\". nit: unnecessary string interpolation for \"\\(error.localizedDescription)\". Change to: description: \"Attempting to move '\\(baseFilename)' for schema '\\(self.schema.name)'\". Change to: description: \"DB file '\\(baseFilename)'. \\(error.localizedDescription)\". Change to description: \"DB file '\\(baseFilename)'. \\(error.localizedDescription)\". Change to: Sentry.shared.sendWithStacktrace(message: \"Unable to close database.\", tag: SentryTag.swiftData, severity: .error, description: \"SQLite status: \\(status)\"). Change to: Sentry.shared.sendWithStacktrace(message: \"Unable to close_v2 database.\", tag: SentryTag.swiftData, severity: .error, description: \"SQLite status: \\(status)\"). Change to description: \"DB file '\\(filename)'. \\(error.localizedDescription)\". Change to description: \"DB file '\\(filename)'. \\(error.localizedDescription)\". did you verify if this is the proper syntax? (i.e. starting with the \"v\"). This is mainly just uncertainty on my part as to when the kill timer starts. This is to ensure we get through this on the main thread as quickly as possible.. hm.. likely an oversight.. i copied in the non-alamofire HTTP request code from telemetry-ios. You mean for non-private tabs? No. It should already be getting invoked on launch for private tabs though.. nit: \"not\" -> \"no\". Remove these if they're not needed.. Remove.. Is this callback block needed? If so, can we change the API to make it optional or provide a {} \"NOOP\" default argument?. Why is this override method needed?. This doesn't seem like an accurate description for the method name.. I'm not a fan of abbreviated properties. destinationNodeName?. Can we do without the ! here? I came across a crasher last week caused by a similar declaration.. if let firstNodeName = actions[0]?. nit: spacing around +. nit: r -> recorder. This seems bad, no? We check if current is nil above, then force unwrap it anyway?. Combine both guard let statements. nit: \"NOP\" -> \"NOOP\". nit: \"NOP\" -> \"NOOP\". nit: self isn't needed here. nit: self isn't needed here. what's this comment?. ???. nit: self isn't needed here. Thank you!! I was looking for a generic version of this the other day. We should probably do a follow-up to clean up any dupes here.. ???. No, _rsa is a private property on this class.. Is it more Swifty to not check for lastReplacement != nil like:\nif let _ = lastReplacement, isAtEnd, markedTextRange == nil {. Can probably shorthand these enum values (i.e. category: .action, method: .appSettingChange, etc.). Oh wait, they're not enums, are they?. Nevermind... back to bed \ud83e\udd12. Is this really necessary? How could this value ever get changed to a non-nil if we're not setting it ourselves?. This seems to have a bit of a code smell to it since it seems to cover up potential regressions from bad code in the future. I'd remove it.. Maybe just set this to .black here so that in setNightMode() you only need to toggle opacity.. Do we need args? Can't we just pass nil?. Is this ok to remove? I thought it was necessary to make this a sync operation on the queue to prevent races?. Ahhh.. you're right. I'm not sure how else to hook it then. We can try doing it from the actual extension code, but we haven't tested telemetry-ios in that environment yet.. I changed this because I wanted to use the extras to help describe how we marked the item as read/unread since there's more than one way to do this.. I couldn't do this here easily without a bunch of conditional code since ContentBlocker is not defined flatMap on a string? this seems weird. I'm probably the biggest UIKit n00b on the team but, can we avoid the !'s here?. We should probably avoid the ! here since we already have a fail check below.. nit: [UIUserInterfaceSizeClass : Int] (whitespace around :). flatMap on String? bothers me. is this added whitespace intentional?. !. Isn't there still another use of characters here?. This looks like a change in logic?. This again looks like a change in logic. Its weird logic to begin with though so, I'm not sure if we should keep it.. I almost wonder if we shouldn't just hard-code 7 here?. How does this work?. Yeah. This logic makes no sense to me. Let's just keep what you have.. Disregard this comment. Let's keep your new logic.. I was just about to do this change, but indicating whether or not the script is for the main frame only is not defined as part of the WKUserScriptInjectionTime enum. In that case, it might be clearer to leave this as-is.. Good idea.. That's a good point about avoiding AMP/mobile. We can file a new bug to add that back in if this patch does actually work. There were some edge cases in the old implementation though, so we probably need a combination of didChangeURL and didLoadPageMetadata. One particular issue is that if you start at the TopSites home panel, visit a page, then tap \"Back\" to return to the TopSites home panel, we continued to handoff the page we visited. IMO, we should set the Handoff URL on didChangeURL, and then update it to use a rel link on didLoadPageMetadata.. Locale.preferredLanguages.first ?? locale.identifier. This still needs to be here since babel-preset-env will select the correct presets, but it still needs the correct presets to be installed. In our case, es2015 gets selected for iOS 10.. For a front-end JS project, yes. In our case, we're using NPM exclusively in the dev environment so it shouldn't really matter. But, I agree that it might make sense though to split these deps up so we can clearly see which ones we're including in our user scripts.. I effectively did the same thing you suggested here, except rolled the .babelrc stuff into the webpack.config. The syntax seems to have evolved here over time (like most JS tooling). What I used comes from the latest docs as far as I can tell.. Should this be a guard that logs to Sentry if it can't get the dir? I know that probably shouldn't ever happen, but maybe it can?. Is there a less-intrusive way of doing this? Although, I'm guessing the compiler probably optimizes this to a NOOP. Actually, we should maybe pull this bit of code out that gets the whitelist file into a private helper function on this class so we can re-use it in both places.. Should definitely be more efficient than de-serializing/serializing the JSON, but it feels a little fragile. Looks like whitelistJSON() always returns a leading , unless ContentBlockerHelper.whitelistedDomains is empty. I suppose that's ok as long as there is at least one rule to begin with.. nit: maybe clarify in this comment that you mean that the page's window and document are not available yet. nit: I would've maybe called this injectionTime instead of position since that's what WKUserScript calls it. var -> const. Is this still the case?. nit: if we've made other changes to this JS, we don't necessarily need to keep the message handler name (not that it really matters much). if (originalOpen) { should suffice. Same as above. Note, if we explicitly want to check for \"not null\", we should at least use !== null. if (!originalOpen) { or if (originalOpen === null) {. Same as above.. A couple things here:\n1. I'd like to see if we can just hijack HTMLScriptElement.prototype.src like we do for Image above?\n2. Does hijacking Image.prototype.src above actually work for appending <img>s to the DOM in all cases? i.e.: var img = document.createElement('img'); img.src = '/foo.jpg'; document.body.appendChild(img);\n3. If we do actually have to use a MutationObserver for <script> elements, we need to at least check for the existence of src before calling postMessage(). For instance, I think it's possible to append a <script> to the DOM that has inline JS.. You can test those cases with this JSBin: http://output.jsbin.com/rahizoq. will \"\\t\" work instead of \"\\u{8}\"?. I actually don't think we should check this. These images are used to improve AS and I don't think should have any correlation to whether or not \"no image mode\" is enabled for web content. We had no choice but to tie the two together before.. No, we still need to call tab.userActivity?.resignCurrent() otherwise the old activity will continue advertising.. To clarify, I'm referring to when you switch between private/normal mode. Yes, isPrivate should be immutable, but we can only have one activity at a time. If we don't resign the current when you enter private mode, then the last normal tab you viewed will continue advertising.. Probably, but we're only using it to check if all sets are empty, so this seemed a little clearer.. Shouldn't this also be true now?. Any difference between doing this and just lazy var disclosureLabel = UILabel() since you're not doing anything else during init?. Do we want to measure the two new prefs?. Is this comment still correct?. I'm actually thinking about just closing this PR and focusing on fixing the root favicons issue. We'd likely see more of a perf bump from that than anything we can do to this query directly.. You shouldn't need to have this function to create the function for the event listener because the event that gets passed in already knows its type. I'm also not sure that we even need to filter just <input>/<textarea> or [contenteditable] elements since the focus/blur events shouldn't emit for anything that can't accept keyboard focus. You can just do:\nfunction eventHandler(event) {\n  const eventType = event.type;\n  const elementType = event.target.nodeName;\n  webkit.messageHandlers.focusHelper.postMessage({\n    eventType, elementType\n  });\n}\nThen, down below, you can just add these to document directly instead of document.body:\n[\"focus\", \"blur\"].forEach((eventType) => {\n  document.addEventListener(eventType, eventHandler, options);\n});. One slight nit is that the indentation seems to be messed up in this file (which would've happened if you tried editing in Xcode, hah). Since it is understood that the entire file is wrapped in a closure, that first-level of indentation can just be eliminated.. Ah, right... tabindex... so yeah, just keep that bit to filter on input,textarea,[contenteditable]... actually, you could probably just do: event.target.matches('input,textarea,[contenteditable]'). nit: its probably slightly more inclusive (safer) to just attach this directly to document. Browser rendering engines are very forgiving of out-of-spec HTML and it might be possible for a <textarea> outside of the <body> tag to get rendered.. nodeName is definitely always capitalized, but I'm not sure about type. To be safe, you might want to check against element.type.toUpperCase().. It also can't hurt to check for [type=\"file\"], although when those are focused on iOS, the user is likely browsing the photo library.. Why does it matter whether or not the selected tab is private? Can we just remove that check?. Ah, that's right... Webpack wraps all of these anyway.. Move this outside the loop.. Should we use viewWillDisappear instead?. I don't think eventType exists in this context. Also, event names should always come in lowercase, so the transform to upper shouldn't be needed.. parseInt(el.getAttribute(\"tabindex\"), 10). We explicitly look for === false, so, its not necessary.. You need to stub this out in MockProfile to fix the tests.. We don't actually open the DB or do anything with the schema until RL is first accessed :-). I didn't know that. It seems weird to have them combined in one log, but if you think its best, I can revert this.. I'm in complete agreement. Should I do it in this PR?. Yes. In cases where we embed one bit of SQL within another, to avoid a trailing -- comment from early-terminating another part of SQL.. Ah, ok. I wasn't aware that lower-case functions were part of a styling convention. I'll go through and fix these.. Yes. See also why I put SQL comments on the previous line.. Good catch. I forgot to revert this before pushing.. Use the commit hash here instead of \"master\". Ditto.. Is there any way to shorten that to just .font since the initializer is expecting a [NSAttributedStringKey : Any]?. I'm glad to see this naming convention go away \ud83d\udc4d . Can these all be abbreviated to just .defaultLow too?. Oh nice! They fixed it!. how was that working?. what is [history]_ going to do?. Oh ok. I wasn't sure either by just looking at it if the compiler could infer that based on the type definition of the attributes argument.. I've seen _ as an empty argument for a closure, but shouldn't there have been a comma? i.e. [history], _?. This is the only OpenIn helper that needs it though and we don't invoke it directly. Do you have any ideas how you would do this aside from changing all OpenIn helpers to take a bvc instance as a constructor arg?. Doesn't seem necessary. Since we're hijacking the URLRequest from the WKNavigationDelegate, it already has all the necessary headers (including User-Agent) set correctly.. I copied this from one of the other panels. I think the purpose for this is to drop and re-create the view. updateEmptyPanelState() will not do that if it already exists.. Oooo... is that new?. Isn't this going to overwrite existing events? Should probably be appending to outputDict[\"events\"] array instead of replacing it.. D'oh... yeah you're right. My bad.. This is following suit with the rest of the strings in this file :-/. Ahhh, you're right. This is gonna be a little tricky to solve then. We might need to add a window.__firefox__ API for pushing the file:// URL onto the history stack from SessionRestore.html. This currently fails because we can't push a file:// URL onto the history stack from our http://localhost session restore page.. no title?. Do we want to add some other params here to indicate to telemetry/LP that the Pocket story clicked is a \"video\"?. Yes, I believe so. We shouldn't hit a case anymore where we can't show content in the webview without prompting to download.. Well, the \"force crash\" is really only ever used by QA for testing this AFAIK. When the Sentry built-in force crash was working, it used to trigger our crashedLastLaunch workflow IIRC.. nit: indentation looks off here. \ud83d\udc4d . I know it was like this before, but I wonder if we should extract this out somewhere like a string. Maybe not though.. There's no reasonable chance of this failing, is there?. Should this be guard indexPaths.count > 0 else { return ... }? potato/potatoe. wow... weird!. Done.. Yep. Done.. I would normally agree, but I tried to keep the naming conventions as close as possible to what's in the desktop implementation so that it is easier to reference/check things.. As with much of this PR, this distinction was made to match the desktop implementation to make it easier to cross-reference for correctness.. In what way? We're accepting Prefs as part of the initializer now so that we can persist some state.. Hm... you're probably right. But in most cases, we're only ever getting one RemoteDevice at a time (or at most a small handful).. No idea. I simply moved this code wholesale.. Yep. Essentially, I've moved all the crypto stuff from Sync to Account for two reasons. One, Sync essentially requires Account anyway, so it makes no difference from a Sync standpoint. Two, eventually Sync will not be required in NotificationService for send tab to work once support for old clients is dropped. At that point, NotificationService will only need to link to the Account framework which will have everything we need without having to import anything else.. This is a legit integer in the JSON. We can use .int64 here though.. Yes, good catch.. make.height.equalTo(SearchBarHeight)?. nit: whitespace. are you suggesting adding a WHERE visits.date < ? where ? is something like today - 1-year?. No difference in the query plan between rowid and *. I changed it to rowid anyway.. Thank you. I knew there was a way to do this, but I couldn't remember what it was.. Is it ok to not fallback to instantiating a new TabTrayController here?. weird, it doesn't look like anything changed here. should we default to true? not all users will get LP.. should use normalTabs instead?. I agree this sucks because of lack of clarity. However, there's no such .serial value here. The empty DispatchQueue.Attributes value is the way to specify \"serial\":\nhttps://developer.apple.com/documentation/dispatch/dispatchqueue/attributes. Ah, good call. I didn't know you could do this.. No, because if it is closed, we need to return a FailedSQLiteDBConnection. . I don't think these would or should end up in emails.. This isn't needed to enable button taps.. \ud83d\udc4d. I wonder if we should only compare the guid and the name here? I don't know if it is possible for the modified to change with any regularity. If so, this patch might not help prevent the problem. Really, if the guid values are all the same and so are the name values, then we really probably don't need to refresh the table view.\nOther minor nit: It would be nice if we could rename the clients argument in this function to updatedClients to help disambiguate a little better.\nfileprivate func updateClients(_ updatedClients: [RemoteClient], endRefreshing: Bool)\n. This method should probably be renamed, no?. move %insert_css% into a <style type=\"text/css\"> in the <head> to prevent FOUC and just inject the CSS directly. move %insert_css% into a <style type=\"text/css\"> in the <head> to prevent FOUC and just inject the CSS directly. This looks like the logic has changed slightly. Would it be safer to just keep the old impl and replace .isLocal with .isInternalScheme?. This is an expensive operation though. I believe that's why it was behind that complex bit of logic before to avoid invoking it excessively.. \ud83d\udc4d. I think we also need to handle url.scheme == \"about\" for things like about:blank.. Yes. If this is a temporary thing to migrate old localhost:6571 URLs to internal: URLs, let's call it migrate. The word sanitize means something different with regard to URLs.. I like that you DRYed this up a bit \ud83d\udc4d. nit: I would rather see this as a multi-line string with some proper HTML with a real doctype, <head>, etc.. Would it be cleaner to  put these pairs in an [Int32 : String] dictionary?. You can probably remove this now, right?. I just saw your comment below saying this file is mostly unchanged, so nevermind. But, perhaps we should follow-up to clean this file up a bit? I see a few other things below that look a little \"ehh\" too.. Yes, definitely. We should explicitly whitelist the resources that are loadable.. I don't understand what's going on here? How can we simply go from internal:// to https:// since there's no hostname? Also, what are we expecting that would need this?. nit: Add the doctype, push <head>, <script>, and their closing tags onto newlines.. nit: I wonder if it makes sense to hang these off of URL somehow?. nit: shorten isInternalScheme to simply isInternal?. It wasn't being used. The constructor's definition above is function MetadataWrapper() {... which takes no args.. I don't think because we still want to attach our event listener in case the same Image instance gets reused again to try and load another image (by re-setting the src property).. \ud83d\udc4d. its too bad there's not a way to only check for this and do this once... its pretty lightweight though so i guess its no harm. I believe for this to be considered \"valid\", you at least need to have an empty <body></body> in there too.. nit: I actually kinda preferred hanging this check off of URL versus having to invoke InternalURL.isValid(). I think my initial comment around this was to just shorten it to .isInternal.. We should probably run a pass on page.absoluteString that replaces ' with \\\\' just in case there's a URL that breaks out of the JS single-quotes.. nit: != -> !==. Same comment here about ensuring the URL is safe to wrap in JS single-quotes.. Again, make sure the string is safe.. Maybe I'm just noticing this, but this doesn't look right. Was the old \"session restore\" URL really \"errors/error.html\"?!. Still would like to see this.. nit: delete this. Although this will fix the issue with the colors, this search bar will still appear very different from the one in Data Management. That's ok though for now I think. We should maybe file a follow-up to make this consistent.. Good idea \ud83d\udc4d. It would be nice if this method wasn't hanging off of TabManager, but its fine for now.. Hmm... I think there was a reason we did it this way in the History panel though... something to do with catching an edge case where the panel was visible and you disconnected your account. I'll take another look before landing though.. This is just a convenience method that calls RSAKeyPair.generate() for you instead of having to pass it in.. This is the real change here that lets us pass different scopes.. Changed this to call the convenience method instead.. yeah, we still need to currently as there's a bug in the library I'm waiting to be fixed. Same.. haha.. No, this is good because we're creating this time interval ourselves using expires.timeIntervalSince1970.. It is used in several places including inside syncEverything(why:). \ud83d\udc4d. \ud83d\udc4d. I thought this too, but it seems to be required by the compiler now.. I was going to, but the old code did this too. It really should never fail and if it does, we'll at least be able to see it in crash reports.. this looks like a major release bump... any breaking changes?. I don't know how comfortable I am with bumping SwiftyJSON. We've had major headaches from this in the past.. Suggested title: \"Simulate slow database connection\". ",
    "internalG": "Will firefox-ios have a build-in proxy settings like foxyproxy desktop? It seems icab mobile had made it done in its app and not affect the system settings. It's a could technically.. ",
    "alessiobrozzi1": "I implemented the requested changes. I looked up on how to add a feature flag around my changes and tried following this guide, however I can't seem to locate the specified file FeatureFlags.xcconfig in the project. Should I follow another guide?\nThanks. Hi Emily, just wondering if I should contact the Mozilla UX team to take a look at thirdparty.html... Moreover, I added a sample paragraph to thirdparty.html of third-party attribution for one of the libraries Firefox uses.. Hi Farhan,\nIt\u2019s true that the License page contains third-party attribution, however it\u2019s good practice to have a separate page for third-party attributions since they\u2019re more accessible this way and this is how the most popular apps on the App Store do (Google Chrome/Maps, Amazon, Youtube, Spotify, Facebook etc.. See attached).\nThis is just some info in case you might consider reopening the bug.\n\n\n\n\n\n\n. ",
    "pocmo": "... and this should actually be an issue in the Focus for iOS repository. Sorry for the noise!. ",
    "jvehent": "Is there a test to verify the entropy of the data generated by these two functions?. Wasn't the original issue caused by assert being disabled in optimized builds? If so, this test would be disabled should optimized build be used again.. I'm not sure how other clients do it (@rnewman might know), but I imagine being 100% certain the quality test happens is important.. ",
    "kitcambridge": "Thanks for doing the integration and enduring the API changes, James! The Swift wrapper looks so nice to use. \ud83c\udf89 I've asked :jcj for a security review of ecec (web-push-libs/ecec#20); there might be some follow-up work to ecec, but it should be backward-compatible.. I was surprised this didn't require an explicit cast; I removed it based on these two FAQ entries. But clang warns me if I forget to include stdlib.h, anyway. Is it more idiomatic to include the cast?. I can change these to return an error code instead, but I'd also like to consider your suggestion of moving the header parser to Swift. Crypto-Key and Encryption are deprecated as it is; the final ECE scheme will use the binary header.. Good catch, I think this should be <=. payload is the complete encrypted message, with the header block and ciphertext. The ciphertext can't be empty, so we may as well fail here because ece_webpush_aes128gcm_decrypt will also fail.. EVP_CIPHER_block_size(EVP_aes_128_gcm()) == 1, so this seems like it's accurate. I added a comment about this in tip-of-tree ecec. Do you think it's worth assert-ing that, or allocating the extra byte so it's visibly safe?. So I should fail if padLen == SIZE_MAX, right? (Or SIZE_MAX - padLen == 0).. Good idea, thanks! I see the two overloads return ciphertext as Data or a String, so I'm not sure if it's worth adding a type for the tuple, but I factored out encryptionHeader and cryptoKeyHeader into their own struct.. Nice, I didn't know about the .ascii shorthand. IIUC, Base64 should only ever be (7-bit) ASCII, but I can change it to .utf8 if you'd like.. ",
    "codecov-io": "Codecov Report\n\nMerging #2563 into master will decrease coverage by 8.46%.\nThe diff coverage is 0%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Widgets/AutocompleteTextField.swift | 0% <0%> (-63.34%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89.22%) | :arrow_down: |\n| ... and 152 more | |\n. # Codecov Report\n\nMerging #2565 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2565      +/-\n==========================================\n+ Coverage    54.3%   54.33%   +0.02%   \n==========================================\n  Files         479      479            \n  Lines       97747    97744       -3   \n==========================================\n+ Hits        53082    53109      +27   \n+ Misses      44665    44635      -30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ClientTests/TestHistory.swift | 99.3% <100%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.65% <0%> (+0.05%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.44% <0%> (+0.72%) | :arrow_up: |\n| Telemetry/Telemetry.swift | 35% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d9cb39...d73d7e5. Read the comment docs.\n. # Codecov Report\nMerging #2567 into master will decrease coverage by 8.54%.\nThe diff coverage is 11.82%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2567      +/-\n==========================================\n- Coverage    63.3%   54.76%   -8.55%   \n==========================================\n  Files         521      486      -35   \n  Lines      103640    99316    -4324   \n==========================================\n- Hits        65612    54391   -11221   \n- Misses      38028    44925    +6897\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Strings.swift | 22.22% <\u00f8> (\u00f8) | :arrow_up: |\n| ...end/Widgets/ActionOverlayTableViewController.swift | 3.33% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Widgets/TwoLineCell.swift | 0% <0%> (-58.58%) | :arrow_down: |\n| Client/Frontend/Widgets/ThumbnailCell.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/RemoteTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/TopSitesPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (-62.91%) | :arrow_down: |\n| Client/Frontend/Home/ReaderPanel.swift | 0% <0%> (-80.8%) | :arrow_down: |\n| Client/Frontend/Home/RecentlyClosedTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.18% <0%> (-26.88%) | :arrow_down: |\n| ... and 164 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a0172bf...41c108f. Read the comment docs.\n. # Codecov Report\nMerging #2572 into master will decrease coverage by 8.93%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2572      +/-\n=========================================\n- Coverage   62.84%   53.9%   -8.94%   \n=========================================\n  Files         512     476      -36   \n  Lines      101750   97370    -4380   \n=========================================\n- Hits        63940   52483   -11457   \n- Misses      37810   44887    +7077\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| PushTests/LivePushClientTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| Client/Telemetry/CorePing.swift | 0% <0%> (-90.15%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ... and 158 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6c1e026...5df423d. Read the comment docs.\n. # Codecov Report\nMerging #2580 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2580      +/-\n==========================================\n- Coverage   54.82%   54.81%   -0.02%   \n==========================================\n  Files         486      486            \n  Lines       99667    99671       +4   \n==========================================\n- Hits        54643    54634       -9   \n- Misses      45024    45037      +13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/TopTabsViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (-0.02%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5518094...b3b1579. Read the comment docs.\n. # Codecov Report\nMerging #2598 into master will decrease coverage by 0.42%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2598      +/-\n==========================================\n- Coverage   54.36%   53.93%   -0.43%   \n==========================================\n  Files         479      480       +1   \n  Lines       97695    97726      +31   \n==========================================\n- Hits        53108    52711     -397   \n- Misses      44587    45015     +428\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 42.52% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.5% <0%> (-31.25%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| Shared/DeviceInfo.swift | 73.21% <0%> (-14.29%) | :arrow_down: |\n| Shared/Logger.swift | 43.9% <0%> (-9.76%) | :arrow_down: |\n| Shared/SystemUtils.swift | 58.82% <0%> (-5.89%) | :arrow_down: |\n| Providers/NSUserDefaultsPrefs.swift | 71.42% <0%> (-5.72%) | :arrow_down: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 96ace6c...fcac67d. Read the comment docs.\n. # Codecov Report\nMerging #2606 into master will decrease coverage by 0.1%.\nThe diff coverage is 14.75%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2606      +/-\n==========================================\n- Coverage    54.3%   54.19%   -0.11%   \n==========================================\n  Files         476      477       +1   \n  Lines       97372    97548     +176   \n==========================================\n- Hits        52875    52867       -8   \n- Misses      44497    44681     +184\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/SimpleToast.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.81% <0%> (-0.12%) | :arrow_down: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabManager.swift | 48.34% <0%> (-1.66%) | :arrow_down: |\n| Client/Frontend/Browser/LoginsHelper.swift | 6.5% <0%> (-0.08%) | :arrow_down: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/ButtonToast.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabTrayController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 44.87% <100%> (+0.68%) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | 20% <20%> (\u00f8) | |\n| ... and 6 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec47141...cf540eb. Read the comment docs.\n. # Codecov Report\nMerging #2607 into master will increase coverage by 0.33%.\nThe diff coverage is 10.96%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2607      +/-\n=========================================\n+ Coverage   53.97%   54.3%   +0.33%   \n=========================================\n  Files         476     476            \n  Lines       97239   97369     +130   \n=========================================\n+ Hits        52482   52877     +395   \n+ Misses      44757   44492     -265\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Telemetry/CorePing.swift | 83.09% <\u00f8> (\u00f8) | |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.14% <\u00f8> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.93% <\u00f8> (+0.62%) | :arrow_up: |\n| Client/Telemetry/ActivityStreamTopics.swift | 100% <\u00f8> (\u00f8) | |\n| ClientTests/ActivityStreamTests.swift | 96.72% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/SearchViewController.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| ClientTests/PingCentreTests.swift | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Telemetry/ClientTelemetry.swift | 28.12% <\u00f8> (\u00f8) | |\n| Sync/BookmarkTelemetryPing.swift | 46.34% <\u00f8> (\u00f8) | |\n| Providers/Profile.swift | 33.74% <0%> (+1.42%) | :arrow_up: |\n| ... and 26 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 9b55d0f...8d8ef03. Read the comment docs.\n. # Codecov Report\nMerging #2641 into master will increase coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2641      +/-\n==========================================\n+ Coverage    54.3%   54.31%   +<.01%   \n==========================================\n  Files         479      479            \n  Lines       97747    97745       -2   \n==========================================\n+ Hits        53082    53090       +8   \n+ Misses      44665    44655      -10\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Account/FirefoxAccount.swift | 27.45% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Helpers/FxALoginHelper.swift | 6.25% <0%> (+0.09%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.59% <0%> (-0.01%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+0.51%) | :arrow_up: |\n| Telemetry/Telemetry.swift | 35% <0%> (+1.25%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d9cb39...ccf34a2. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@141e476). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2649   +/-\n=========================================\n  Coverage          ?   54.31%         \n=========================================\n  Files             ?      474         \n  Lines             ?    97118         \n  Branches          ?        0         \n=========================================\n  Hits              ?    52745         \n  Misses            ?    44373         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 141e476...d1adc1f. Read the comment docs.\n. # Codecov Report\nMerging #2652 into master will increase coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2652      +/-\n==========================================\n+ Coverage   54.37%   54.37%   +<.01%   \n==========================================\n  Files         476      476            \n  Lines       97218    97239      +21   \n==========================================\n+ Hits        52858    52873      +15   \n- Misses      44360    44366       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| PushTests/LivePushClientTests.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 87.69% <0%> (-1.03%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.65% <0%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 72f84fd...38afb17. Read the comment docs.\n. # Codecov Report\nMerging #2654 into master will increase coverage by 0.08%.\nThe diff coverage is 89.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2654      +/-\n==========================================\n+ Coverage   54.27%   54.36%   +0.08%   \n==========================================\n  Files         476      478       +2   \n  Lines       97370    97504     +134   \n==========================================\n+ Hits        52846    53005     +159   \n+ Misses      44524    44499      -25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Providers/Profile.swift | 34.84% <\u00f8> (+1.1%) | :arrow_up: |\n| Storage/History.swift | 66.66% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/HomePanelViewController.swift | 58.45% <100%> (+0.61%) | :arrow_up: |\n| ClientTests/PanelDataObserversTests.swift | 100% <100%> (\u00f8) | |\n| Client/Application/AppDelegate.swift | 44.53% <100%> (+0.34%) | :arrow_up: |\n| ClientTests/MockProfile.swift | 31.08% <100%> (+7.2%) | :arrow_up: |\n| ClientTests/ActivityStreamTests.swift | 94.08% <40%> (-2.64%) | :arrow_down: |\n| Storage/SQL/BrowserTable.swift | 73.9% <66.66%> (-0.09%) | :arrow_down: |\n| ... and 13 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update adbbd03...0bb035f. Read the comment docs.\n. # Codecov Report\nMerging #2657 into master will decrease coverage by 8.24%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2657      +/-\n==========================================\n- Coverage   62.68%   54.44%   -8.25%   \n==========================================\n  Files         512      476      -36   \n  Lines      101502    97218    -4284   \n==========================================\n- Hits        63628    52930   -10698   \n- Misses      37874    44288    +6414\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| Client/Frontend/Browser/ReaderModeBarView.swift | 0% <0%> (-88.75%) | :arrow_down: |\n| ... and 148 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f1164c...24416a1. Read the comment docs.\n. # Codecov Report\nMerging #2658 into master will decrease coverage by 8.28%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2658      +/-\n=========================================\n- Coverage   62.68%   54.4%   -8.29%   \n=========================================\n  Files         512     476      -36   \n  Lines      101502   97218    -4284   \n=========================================\n- Hits        63628   52887   -10741   \n- Misses      37874   44331    +6457\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| Client/Frontend/Browser/ReaderModeBarView.swift | 0% <0%> (-88.75%) | :arrow_down: |\n| ... and 149 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f1164c...14cbcfb. Read the comment docs.\n. # Codecov Report\nMerging #2659 into master will decrease coverage by 8.24%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2659      +/-\n==========================================\n- Coverage   62.68%   54.44%   -8.25%   \n==========================================\n  Files         512      476      -36   \n  Lines      101502    97218    -4284   \n==========================================\n- Hits        63628    52929   -10699   \n- Misses      37874    44289    +6415\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| Client/Frontend/Browser/ReaderModeBarView.swift | 0% <0%> (-88.75%) | :arrow_down: |\n| ... and 150 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4f1164c...ab8e487. Read the comment docs.\n. # Codecov Report\nMerging #2662 into master will decrease coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2662      +/-\n=========================================\n- Coverage    54.3%   54.3%   -0.01%   \n=========================================\n  Files         476     476            \n  Lines       97372   97370       -2   \n=========================================\n- Hits        52875   52873       -2   \n  Misses      44497   44497\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...Notifications/NotificationRootViewController.swift | 28.37% <0%> (+0.26%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 95.58% <0%> (-1.48%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.65% <0%> (-0.01%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ec47141...5f8a1eb. Read the comment docs.\n. # Codecov Report\nMerging #2664 into master will increase coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2664      +/-\n=========================================\n+ Coverage   54.27%   54.3%   +0.03%   \n=========================================\n  Files         476     476            \n  Lines       97370   97370            \n=========================================\n+ Hits        52846   52876      +30   \n+ Misses      44524   44494      -30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.67% <0%> (+0.08%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+1.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update adbbd03...c9caa4e. Read the comment docs.\n. # Codecov Report\nMerging #2665 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2665      +/-\n==========================================\n+ Coverage   54.27%   54.29%   +0.01%   \n==========================================\n  Files         476      476            \n  Lines       97370    97370            \n==========================================\n+ Hits        52846    52865      +19   \n+ Misses      44524    44505      -19\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.64% <0%> (+0.05%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+1.02%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.05% <0%> (+1.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update adbbd03...56f1f9f. Read the comment docs.\n. # Codecov Report\nMerging #2666 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2666      +/-\n==========================================\n+ Coverage    54.3%   54.33%   +0.03%   \n==========================================\n  Files         479      479            \n  Lines       97681    97681            \n==========================================\n+ Hits        53042    53076      +34   \n+ Misses      44639    44605      -34\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 45.21% <100%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.66% <0%> (+0.06%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+1.02%) | :arrow_up: |\n| Client/Application/TestAppDelegate.swift | 22.22% <0%> (+3.17%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 87cf561...1fea013. Read the comment docs.\n. # Codecov Report\nMerging #2667 into master will increase coverage by 0.06%.\nThe diff coverage is 94%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2667      +/-\n==========================================\n+ Coverage   54.33%   54.39%   +0.06%   \n==========================================\n  Files         479      478       -1   \n  Lines       97681    97546     -135   \n==========================================\n- Hits        53073    53064       -9   \n+ Misses      44608    44482     -126\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteMetadata.swift | 88% <50%> (\u00f8) | :arrow_up: |\n| Storage/SQL/BrowserTable.swift | 73.92% <75%> (+0.01%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 44.53% <0%> (-0.68%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.59% <0%> (-0.08%) | :arrow_down: |\n| Storage/SQL/SQLiteHistory.swift | 71.98% <0%> (-0.04%) | :arrow_down: |\n| Client/Frontend/Browser/TabTrayController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/ButtonToast.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32f24fb...51290b4. Read the comment docs.\n. # Codecov Report\nMerging #2668 into master will increase coverage by <.01%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2668      +/-\n==========================================\n+ Coverage   54.33%   54.33%   +<.01%   \n==========================================\n  Files         479      479            \n  Lines       97681    97685       +4   \n==========================================\n+ Hits        53073    53080       +7   \n+ Misses      44608    44605       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/BrowserDB.swift | 81.62% <80%> (+0.52%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| Client/Application/TestAppDelegate.swift | 19.04% <0%> (-3.18%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.68% <0%> (+0.02%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 89.23% <0%> (+1.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32f24fb...1804805. Read the comment docs.\n. # Codecov Report\nMerging #2669 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2669      +/-\n==========================================\n+ Coverage   54.33%   54.33%   +<.01%   \n==========================================\n  Files         479      479            \n  Lines       97681    97678       -3   \n==========================================\n  Hits        53073    53073            \n+ Misses      44608    44605       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabManager.swift | 48.57% <\u00f8> (+0.22%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 87.17% <0%> (-1.03%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.66% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 32f24fb...d039b82. Read the comment docs.\n. # Codecov Report\nMerging #2670 into master will decrease coverage by 8.56%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2670      +/-\n=========================================\n- Coverage   62.86%   54.3%   -8.57%   \n=========================================\n  Files         515     479      -36   \n  Lines      102088   97684    -4404   \n=========================================\n- Hits        64180   53048   -11132   \n- Misses      37908   44636    +6728\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 5.47% <66.66%> (-14.53%) | :arrow_down: |\n| PushTests/LivePushClientTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ... and 158 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d9c3ccb...70099a2. Read the comment docs.\n. # Codecov Report\nMerging #2672 into master will decrease coverage by 0.04%.\nThe diff coverage is 6%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2672      +/-\n==========================================\n- Coverage   54.27%   54.23%   -0.05%   \n==========================================\n  Files         479      479            \n  Lines       97679    97722      +43   \n==========================================\n- Hits        53019    53002      -17   \n- Misses      44660    44720      +60\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...t/Frontend/Settings/FxAContentViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Account/FxAPushMessageHandler.swift | 19.35% <0%> (-0.22%) | :arrow_down: |\n| Client/Helpers/FxALoginHelper.swift | 5.22% <0%> (-1.03%) | :arrow_down: |\n| Account/FxALoginStateMachine.swift | 75% <100%> (+0.59%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.55% <0%> (-0.04%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+0.51%) | :arrow_up: |\n| Telemetry/Telemetry.swift | 35% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a4d2f1c...72dac01. Read the comment docs.\n. # Codecov Report\nMerging #2674 into master will decrease coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2674      +/-\n==========================================\n- Coverage   54.33%   54.32%   -0.02%   \n==========================================\n  Files         479      479            \n  Lines       97727    97685      -42   \n==========================================\n- Hits        53104    53070      -34   \n+ Misses      44623    44615       -8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/BrowserDB.swift | 81.62% <0%> (-0.91%) | :arrow_down: |\n| Client/Frontend/Browser/TabManager.swift | 48.34% <0%> (-0.23%) | :arrow_down: |\n| Storage/SQL/BrowserTable.swift | 73.9% <0%> (-0.02%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.64% <0%> (-0.01%) | :arrow_down: |\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 100% <0%> (\u00f8) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | 20% <0%> (+14.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f9d3c9...f3166db. Read the comment docs.\n. # Codecov Report\nMerging #2675 into master will decrease coverage by 0.02%.\nThe diff coverage is 92.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2675      +/-\n==========================================\n- Coverage   54.33%   54.31%   -0.03%   \n==========================================\n  Files         479      479            \n  Lines       97727    97686      -41   \n==========================================\n- Hits        53104    53058      -46   \n- Misses      44623    44628       +5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...Notifications/NotificationRootViewController.swift | 39.35% <92.3%> (+0.28%) | :arrow_up: |\n| Storage/SQL/BrowserDB.swift | 81.62% <0%> (-0.91%) | :arrow_down: |\n| Client/Frontend/Browser/TabManager.swift | 48.34% <0%> (-0.23%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.61% <0%> (-0.04%) | :arrow_down: |\n| Storage/SQL/BrowserTable.swift | 73.9% <0%> (-0.02%) | :arrow_down: |\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (\u00f8) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | 20% <0%> (+14.52%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7f9d3c9...d5a23ef. Read the comment docs.\n. # Codecov Report\nMerging #2678 into master will decrease coverage by 26.08%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #2678       +/-\n===========================================\n- Coverage   63.25%   37.17%   -26.09%   \n===========================================\n  Files         513      357      -156   \n  Lines      101911    39658    -62253   \n===========================================\n- Hits        64462    14741    -49721   \n+ Misses      37449    24917    -12532\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| Client/Frontend/Browser/ReaderModeBarView.swift | 0% <0%> (-88.75%) | :arrow_down: |\n| ... and 269 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 822ee0d...d8e38ef. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1b1acf8). Click here to learn what that means.\nThe diff coverage is 43.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2679   +/-\n=========================================\n  Coverage          ?   29.57%         \n=========================================\n  Files             ?      389         \n  Lines             ?    86114         \n  Branches          ?        0         \n=========================================\n  Hits              ?    25471         \n  Misses            ?    60643         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Telemetry/PingCentre.swift | 0% <\u00f8> (\u00f8) | |\n| Shared/UserAgent.swift | 74.71% <\u00f8> (\u00f8) | |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | |\n| Client/Application/main.swift | 80% <0%> (\u00f8) | |\n| Client/Application/TestAppDelegate.swift | 22.22% <0%> (\u00f8) | |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (\u00f8) | |\n| Providers/NSUserDefaultsPrefs.swift | 71.42% <100%> (\u00f8) | |\n| Shared/Extensions/KeychainWrapperExtensions.swift | 100% <100%> (\u00f8) | |\n| Providers/Profile.swift | 16.51% <100%> (\u00f8) | |\n| Shared/SystemUtils.swift | 27.27% <100%> (\u00f8) | |\n| ... and 3 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1b1acf8...3b7a2b8. Read the comment docs.\n. # Codecov Report\nMerging #2681 into master will decrease coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2681      +/-\n==========================================\n- Coverage   54.36%   54.35%   -0.01%   \n==========================================\n  Files         479      479            \n  Lines       97695    97728      +33   \n==========================================\n+ Hits        53108    53121      +13   \n- Misses      44587    44607      +20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 5.47% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/ButtonToast.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabManager.swift | 48.42% <0%> (-0.16%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.67% <0%> (+0.02%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+0.51%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.05% <0%> (+1.47%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 96ace6c...cb3ba17. Read the comment docs.\n. # Codecov Report\nMerging #2684 into master will decrease coverage by 8.39%.\nThe diff coverage is 28.57%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2684      +/-\n==========================================\n- Coverage   62.72%   54.33%    -8.4%   \n==========================================\n  Files         514      479      -35   \n  Lines      102137    97747    -4390   \n==========================================\n- Hits        64063    53107   -10956   \n- Misses      38074    44640    +6566\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ClientTests/ActivityStreamTests.swift | 94.08% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.72% <16.66%> (-0.73%) | :arrow_down: |\n| PushTests/LivePushClientTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ... and 161 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5549dc9...8e1ccf0. Read the comment docs.\n. # Codecov Report\nMerging #2685 into master will decrease coverage by 32.78%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #2685       +/-\n===========================================\n- Coverage   62.72%   29.94%   -32.79%   \n===========================================\n  Files         514      390      -124   \n  Lines      102137    86412    -15725   \n===========================================\n- Hits        64063    25872    -38191   \n- Misses      38074    60540    +22466\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 87.5% <100%> (-12.5%) | :arrow_down: |\n| FxA/FxA/include/openssl/rsa.h | 0% <0%> (-100%) | :arrow_down: |\n| Client/Frontend/Menu/AppMenuToolbarItem.swift | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/obj_mac.h | 0% <0%> (-100%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 0% <0%> (-100%) | :arrow_down: |\n| ...ient/Frontend/Widgets/Menu/MenuConfiguration.swift | 0% <0%> (-100%) | :arrow_down: |\n| Shared/Extensions/NSCharacterSetExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| ReadingList/ReadingListUtils.swift | 0% <0%> (-100%) | :arrow_down: |\n| Shared/Extensions/DictionaryExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/sha.h | 0% <0%> (-100%) | :arrow_down: |\n| ... and 385 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5549dc9...b3da090. Read the comment docs.\n. # Codecov Report\nMerging #2686 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2686      +/-\n=========================================\n- Coverage    54.3%   54.3%   -0.01%   \n=========================================\n  Files         479     479            \n  Lines       97747   97742       -5   \n=========================================\n- Hits        53082   53078       -4   \n+ Misses      44665   44664       -1\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.44% <100%> (+0.72%) | :arrow_up: |\n| Shared/DeviceInfo.swift | 82.14% <0%> (-5.36%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 86.15% <0%> (-2.06%) | :arrow_down: |\n| Providers/Profile.swift | 37.2% <0%> (-0.45%) | :arrow_down: |\n| Client/Application/AppDelegate.swift | 44.91% <0%> (-0.41%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.59% <0%> (-0.01%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 35% <0%> (+1.25%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 8d9cb39...75a4342. Read the comment docs.\n. # Codecov Report\nMerging #2687 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2687      +/-\n=========================================\n+ Coverage    54.3%   54.3%   +<.01%   \n=========================================\n  Files         479     479            \n  Lines       97681   97684       +3   \n=========================================\n+ Hits        53043   53049       +6   \n+ Misses      44638   44635       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ClientTests/MockProfile.swift | 30.66% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/PanelDataObservers.swift | 92.3% <100%> (+0.64%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.72% <100%> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.04% <100%> (+0.03%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 45.32% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/HomePanelViewController.swift | 58.45% <100%> (\u00f8) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-0.52%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.65% <0%> (-0.02%) | :arrow_down: |\n| Providers/Profile.swift | 37.64% <0%> (+0.29%) | :arrow_up: |\n| Telemetry/Telemetry.swift | 42.5% <0%> (+8.75%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update b30d56a...0c6a926. Read the comment docs.\n. # Codecov Report\nMerging #2688 into master will increase coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2688      +/-\n==========================================\n+ Coverage    54.3%   54.31%   +0.01%   \n==========================================\n  Files         479      479            \n  Lines       97680    97679       -1   \n==========================================\n+ Hits        53041    53052      +11   \n+ Misses      44639    44627      -12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| StorageTests/TestLogins.swift | 88.04% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.66% <0%> (+0.01%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+1.02%) | :arrow_up: |\n| Telemetry/Telemetry.swift | 35% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b6f772...793a6b6. Read the comment docs.\n. # Codecov Report\nMerging #2690 into master will increase coverage by 0.1%.\nThe diff coverage is 66.66%.\n\n\n```diff\n@@           Coverage Diff            @@\nmaster   #2690     +/-\n========================================\n+ Coverage    54.3%   54.4%   +0.1%   \n========================================\n  Files         479     478      -1   \n  Lines       97680   97457    -223   \n========================================\n- Hits        53048   53025     -23   \n+ Misses      44632   44432    -200\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/SimpleToast.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/LoginsHelper.swift | 6.58% <\u00f8> (+0.07%) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabManager.swift | 50% <\u00f8> (+1.57%) | :arrow_up: |\n| Client/Frontend/Browser/TabTrayController.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 44.53% <\u00f8> (-0.79%) | :arrow_down: |\n| Client/Frontend/Browser/ButtonToast.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.93% <0%> (+0.11%) | :arrow_up: |\n| Shared/Extensions/UIColorExtensions.swift | 100% <100%> (+50%) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6b6f772...874c2b6. Read the comment docs.\n. # Codecov Report\nMerging #2692 into master will decrease coverage by 24.39%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2692      +/-\n==========================================\n- Coverage   54.25%   29.86%   -24.4%   \n==========================================\n  Files         479      390      -89   \n  Lines       97682    86417   -11265   \n==========================================\n- Hits        53002    25806   -27196   \n- Misses      44680    60611   +15931\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistory.swift | 17.24% <100%> (-54.77%) | :arrow_down: |\n| Shared/PhoneNumberFormatter.swift | 0% <0%> (-100%) | :arrow_down: |\n| ReadingList/ReadingListClientMetadata.swift | 0% <0%> (-100%) | :arrow_down: |\n| Shared/Extensions/NSCharacterSetExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/kdf.h | 0% <0%> (-100%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/obj_mac.h | 0% <0%> (-100%) | :arrow_down: |\n| ...ient/Frontend/Widgets/Menu/MenuConfiguration.swift | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/rsa.h | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/sha.h | 0% <0%> (-100%) | :arrow_down: |\n| ... and 276 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 210b930...7b6244d. Read the comment docs.\n. # Codecov Report\nMerging #2693 into master will decrease coverage by 0.15%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2693      +/-\n==========================================\n- Coverage    54.4%   54.24%   -0.16%   \n==========================================\n  Files         478      479       +1   \n  Lines       97459    97667     +208   \n==========================================\n- Hits        53019    52981      -38   \n- Misses      44440    44686     +246\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistory.swift | 71.49% <100%> (-0.52%) | :arrow_down: |\n| Shared/Extensions/UIColorExtensions.swift | 50% <0%> (-50%) | :arrow_down: |\n| Shared/DeviceInfo.swift | 82.14% <0%> (-5.36%) | :arrow_down: |\n| Client/Frontend/Browser/TabManager.swift | 48.42% <0%> (-1.58%) | :arrow_down: |\n| Providers/Profile.swift | 37.2% <0%> (-0.45%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.81% <0%> (-0.12%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.54% <0%> (-0.11%) | :arrow_down: |\n| Client/Frontend/Browser/LoginsHelper.swift | 6.5% <0%> (-0.08%) | :arrow_down: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/ButtonToast.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4933b41...f5a8d5c. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1b1acf8). Click here to learn what that means.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2694   +/-\n=========================================\n  Coverage          ?   29.93%         \n=========================================\n  Files             ?      390         \n  Lines             ?    86210         \n  Branches          ?        0         \n=========================================\n  Hits              ?    25805         \n  Misses            ?    60405         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/PanelDataObservers.swift | 71.42% <100%> (\u00f8) | |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 42.24% <41.66%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1b1acf8...2b33a49. Read the comment docs.\n. # Codecov Report\nMerging #2695 into master will decrease coverage by <.01%.\nThe diff coverage is 20%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2695      +/-\n==========================================\n- Coverage   54.81%   54.81%   -0.01%   \n==========================================\n  Files         478      478            \n  Lines       97536    97541       +5   \n==========================================\n- Hits        53468    53465       -3   \n- Misses      44068    44076       +8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Account/FirefoxAccountConfiguration.swift | 33.33% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Helpers/FxALoginHelper.swift | 6.06% <0%> (-0.05%) | :arrow_down: |\n| PushTests/LivePushClientTests.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Push/PushConfiguration.swift | 16.66% <14.28%> (-8.34%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.72% <0%> (-0.02%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.95% <0%> (+0.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update aabc798...2783802. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@1b9bfcd). Click here to learn what that means.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2696   +/-\n=========================================\n  Coverage          ?   54.41%         \n=========================================\n  Files             ?      478         \n  Lines             ?    97501         \n  Branches          ?        0         \n=========================================\n  Hits              ?    53059         \n  Misses            ?    44442         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 44.25% <\u00f8> (\u00f8) | |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.96% <33.33%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1b9bfcd...d6fc3d7. Read the comment docs.\n. # Codecov Report\nMerging #2697 into master will decrease coverage by 8.81%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2697      +/-\n==========================================\n- Coverage   63.25%   54.44%   -8.82%   \n==========================================\n  Files         513      478      -35   \n  Lines      101911    97509    -4402   \n==========================================\n- Hits        64462    53086   -11376   \n- Misses      37449    44423    +6974\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.86% <\u00f8> (+0.14%) | :arrow_up: |\n| PushTests/LivePushClientTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.04%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ... and 153 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 822ee0d...84e6a1f. Read the comment docs.\n. # Codecov Report\nMerging #2698 into master will decrease coverage by 33.32%.\nThe diff coverage is 63.15%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #2698       +/-\n===========================================\n- Coverage   63.25%   29.93%   -33.33%   \n===========================================\n  Files         513      390      -123   \n  Lines      101911    86214    -15697   \n===========================================\n- Hits        64462    25805    -38657   \n- Misses      37449    60409    +22960\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 44.05% <100%> (-7.29%) | :arrow_down: |\n| Client/Application/SentryIntegration.swift | 56.25% <56.25%> (\u00f8) | |\n| Shared/Extensions/DictionaryExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| ReadingList/ReadingListUtils.swift | 0% <0%> (-100%) | :arrow_down: |\n| Shared/Extensions/OptionalExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| ...tensions/NSMutableAttributedStringExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 0% <0%> (-100%) | :arrow_down: |\n| Client/Frontend/Menu/AppMenuToolbarItem.swift | 0% <0%> (-100%) | :arrow_down: |\n| ReadingList/ReadingListClientMetadata.swift | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/obj_mac.h | 0% <0%> (-100%) | :arrow_down: |\n| ... and 387 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 822ee0d...d408c9f. Read the comment docs.\n. # Codecov Report\nMerging #2701 into master will increase coverage by <.01%.\nThe diff coverage is 41.3%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2701      +/-\n==========================================\n+ Coverage   54.77%   54.78%   +<.01%   \n==========================================\n  Files         478      478            \n  Lines       97435    97457      +22   \n==========================================\n+ Hits        53373    53393      +20   \n- Misses      44062    44064       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ClientTests/ResetTests.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| StorageTests/SyncCommandsTests.swift | 96.51% <100%> (\u00f8) | :arrow_up: |\n| StorageTests/TestSQLiteRemoteClientsAndTabs.swift | 78.94% <100%> (\u00f8) | :arrow_up: |\n| Storage/Clients.swift | 61.11% <28.57%> (+1.11%) | :arrow_up: |\n| Storage/SQL/RemoteTabsTable.swift | 72% <32%> (-10.7%) | :arrow_down: |\n| Providers/Profile.swift | 37.35% <0%> (-0.3%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.72% <0%> (+0.01%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+1.53%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d43c368...99cbefb. Read the comment docs.\n. # Codecov Report\nMerging #2702 into master will decrease coverage by 24.52%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #2702       +/-\n===========================================\n- Coverage   54.39%   29.86%   -24.53%   \n===========================================\n  Files         479      391       -88   \n  Lines       97527    86600    -10927   \n===========================================\n- Hits        53049    25866    -27183   \n- Misses      44478    60734    +16256\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/Bookmarks/Bookmarks.swift | 0% <\u00f8> (-76.41%) | :arrow_down: |\n| Storage/Clients.swift | 0% <\u00f8> (-60%) | :arrow_down: |\n| Storage/RemoteTabs.swift | 0% <\u00f8> (-45.24%) | :arrow_down: |\n| Sync/Synchronizers/Synchronizer.swift | 0% <0%> (-22.86%) | :arrow_down: |\n| Sync/Synchronizers/ClientsSynchronizer.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Providers/Profile.swift | 16.81% <0%> (-20.84%) | :arrow_down: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 0% <0%> (-72.72%) | :arrow_down: |\n| ...hronizers/Bookmarks/BookmarksRepairRequestor.swift | 0% <0%> (\u00f8) | |\n| Storage/SQL/SQLiteRemoteClientsAndTabs.swift | 8.92% <0%> (-69.12%) | :arrow_down: |\n| ...ynchronizers/Bookmarks/BookmarksSynchronizer.swift | 0% <0%> (-63.21%) | :arrow_down: |\n| ... and 285 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7708bba...afab209. Read the comment docs.\n. # Codecov Report\nMerging #2703 into master will decrease coverage by 0.14%.\nThe diff coverage is 35%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2703      +/-\n==========================================\n- Coverage   54.39%   54.25%   -0.15%   \n==========================================\n  Files         479      479            \n  Lines       97527    97698     +171   \n==========================================\n- Hits        53049    53002      -47   \n- Misses      44478    44696     +218\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 12.22% <28.57%> (\u00f8) | |\n| Client/Frontend/Intro/IntroViewController.swift | 65.14% <38.46%> (-1.41%) | :arrow_down: |\n| Shared/Extensions/UIColorExtensions.swift | 50% <0%> (-50%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| Client/Frontend/Browser/TabManager.swift | 48.42% <0%> (-1.58%) | :arrow_down: |\n| Client/Frontend/Home/PanelDataObservers.swift | 91.66% <0%> (-1.2%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-1.03%) | :arrow_down: |\n| Providers/Profile.swift | 37.2% <0%> (-0.45%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.72% <0%> (-0.23%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.81% <0%> (-0.16%) | :arrow_down: |\n| ... and 14 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7708bba...fdf5f4e. Read the comment docs.\n. # Codecov Report\nMerging #2706 into master will increase coverage by 0.03%.\nThe diff coverage is 40%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2706      +/-\n==========================================\n+ Coverage   54.77%   54.81%   +0.03%   \n==========================================\n  Files         478      478            \n  Lines       97435    97440       +5   \n==========================================\n+ Hits        53373    53414      +41   \n+ Misses      44062    44026      -36\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../Frontend/Browser/ClipboardBarDisplayHandler.swift | 17.5% <40%> (+3.21%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.78% <0%> (+0.06%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+1.53%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d43c368...1df2503. Read the comment docs.\n. # Codecov Report\nMerging #2709 into master will increase coverage by 2.93%.\nThe diff coverage is 47.05%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2709      +/-\n==========================================\n+ Coverage   51.89%   54.83%   +2.93%   \n==========================================\n  Files         478      478            \n  Lines       97553    97599      +46   \n==========================================\n+ Hits        50626    53516    +2890   \n+ Misses      46927    44083    -2844\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...rontend/Settings/SettingsTableViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| SharedTests/FeatureSwitchTests.swift | 96.62% <100%> (+0.62%) | :arrow_up: |\n| Shared/FeatureSwitch.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (-0.52%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.06% <0%> (-0.38%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (+0.06%) | :arrow_up: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 72.71% <0%> (+0.24%) | :arrow_up: |\n| ... and 73 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update df12991...f0a96cb. Read the comment docs.\n. # Codecov Report\nMerging #2717 into master will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2717      +/-\n==========================================\n- Coverage   54.88%   54.83%   -0.05%   \n==========================================\n  Files         478      478            \n  Lines       97434    97443       +9   \n==========================================\n- Hits        53475    53433      -42   \n- Misses      43959    44010      +51\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Shared/Extensions/NSCoderExtensions.swift | 75% <0%> (-25%) | :arrow_down: |\n| ...lient/Extensions/UIAlertControllerExtensions.swift | 0% <0%> (-17.19%) | :arrow_down: |\n| Client/Frontend/Browser/SessionData.swift | 52.38% <0%> (-14.29%) | :arrow_down: |\n| Client/Frontend/Browser/TabManager.swift | 50% <0%> (-2.45%) | :arrow_down: |\n| StorageTests/TestSwiftData.swift | 95.58% <0%> (-1.48%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.06% <0%> (-0.54%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 90.76% <0%> (+2.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b7ea50...02b3fed. Read the comment docs.\n. # Codecov Report\nMerging #2718 into master will decrease coverage by 0.1%.\nThe diff coverage is 36.36%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2718      +/-\n==========================================\n- Coverage   54.88%   54.77%   -0.11%   \n==========================================\n  Files         478      478            \n  Lines       97434    97455      +21   \n==========================================\n- Hits        53475    53381      -94   \n- Misses      43959    44074     +115\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Account/FxADeviceRegistration.swift | 3.66% <0%> (-0.22%) | :arrow_down: |\n| Client/Helpers/FxALoginHelper.swift | 6.1% <0%> (-0.15%) | :arrow_down: |\n| Sync/Synchronizers/ClientsSynchronizer.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Sync/State.swift | 85.91% <80%> (-0.22%) | :arrow_down: |\n| Shared/Extensions/NSCoderExtensions.swift | 75% <0%> (-25%) | :arrow_down: |\n| ...lient/Extensions/UIAlertControllerExtensions.swift | 0% <0%> (-17.19%) | :arrow_down: |\n| Client/Frontend/Browser/SessionData.swift | 52.38% <0%> (-14.29%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| Client/Frontend/Browser/TabManager.swift | 50% <0%> (-2.45%) | :arrow_down: |\n| StorageTests/TestSwiftData.swift | 95.58% <0%> (-1.48%) | :arrow_down: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5b7ea50...86e1846. Read the comment docs.\n. # Codecov Report\nMerging #2719 into master will decrease coverage by 0.35%.\nThe diff coverage is 93.54%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2719      +/-\n==========================================\n- Coverage   54.79%   54.43%   -0.36%   \n==========================================\n  Files         478      478            \n  Lines       97463    97504      +41   \n==========================================\n- Hits        53405    53078     -327   \n- Misses      44058    44426     +368\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.52% <100%> (+0.43%) | :arrow_up: |\n| ClientTests/ActivityStreamTests.swift | 94.17% <100%> (+0.09%) | :arrow_up: |\n| ClientTests/PingCentreTests.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Telemetry/PingCentre.swift | 76.19% <88.57%> (+5.87%) | :arrow_up: |\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.7% <0%> (-36.49%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 53f2a23...a3c0a95. Read the comment docs.\n. # Codecov Report\nMerging #2721 into master will increase coverage by 0.08%.\nThe diff coverage is 78.89%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/ecec/include/ece/keys.h | 100% <\u00f8> (\u00f8) | :arrow_up: |\n| Push/PushRegistration.swift | 47.82% <100%> (+0.76%) | :arrow_up: |\n| ThirdParty/ecec/src/trailer.c | 100% <100%> (\u00f8) | |\n| PushTests/PushCryptoTests.swift | 84.53% <71.42%> (-2.9%) | :arrow_down: |\n| ThirdParty/ecec/src/encrypt.c | 68% <72.66%> (+0.63%) | :arrow_up: |\n| ThirdParty/ecec/src/params.c | 80.11% <78.72%> (-0.02%) | :arrow_down: |\n| ThirdParty/ecec/include/ece.h | 38.23% <80%> (+6.09%) | :arrow_up: |\n| ThirdParty/ecec/src/decrypt.c | 70.07% <80.86%> (-0.76%) | :arrow_down: |\n| Push/PushCrypto.swift | 85.83% <81.81%> (-5.6%) | :arrow_down: |\n| ThirdParty/ecec/src/base64url.c | 72.89% <82.14%> (+9.65%) | :arrow_up: |\n| ... and 6 more | |\n. # Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@cfd03e0). Click here to learn what that means.\nThe diff coverage is 2.43%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2722   +/-\n=========================================\n  Coverage          ?   54.77%         \n=========================================\n  Files             ?      478         \n  Lines             ?    97481         \n  Branches          ?        0         \n=========================================\n  Hits              ?    53396         \n  Misses            ?    44085         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Providers/Profile.swift | 37.53% <0%> (\u00f8) | |\n| Sync/SyncTelemetry.swift | 17.35% <0%> (\u00f8) | |\n| AccountTests/TokenServerClientTests.swift | 47.36% <0%> (\u00f8) | |\n| Account/TokenServerClient.swift | 8.73% <0%> (\u00f8) | |\n| AccountTests/LiveAccountTest.swift | 13.69% <0%> (\u00f8) | |\n| SyncTests/MetaGlobalTests.swift | 91.68% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cfd03e0...783b52f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@cfd03e0). Click here to learn what that means.\nThe diff coverage is 43.18%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2723   +/-\n=========================================\n  Coverage          ?   54.78%         \n=========================================\n  Files             ?      478         \n  Lines             ?    97484         \n  Branches          ?        0         \n=========================================\n  Hits              ?    53409         \n  Misses            ?    44075         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| StorageTests/TestSQLiteRemoteClientsAndTabs.swift | 78.94% <100%> (\u00f8) | |\n| StorageTests/SyncCommandsTests.swift | 96.51% <100%> (\u00f8) | |\n| ClientTests/ResetTests.swift | 100% <100%> (\u00f8) | |\n| Storage/Clients.swift | 61.11% <28.57%> (\u00f8) | |\n| Storage/SQL/RemoteTabsTable.swift | 73.17% <34.78%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cfd03e0...29a8168. Read the comment docs.\n. # Codecov Report\nMerging #2724 into master will increase coverage by 0.2%.\nThe diff coverage is 79.03%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2724     +/-\n=========================================\n+ Coverage   54.79%   54.99%   +0.2%   \n=========================================\n  Files         478      480      +2   \n  Lines       97484    98166    +682   \n=========================================\n+ Hits        53415    53986    +571   \n- Misses      44069    44180    +111\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/Bookmarks/Bookmarks.swift | 76.4% <\u00f8> (\u00f8) | :arrow_up: |\n| Storage/RemoteTabs.swift | 45.23% <\u00f8> (\u00f8) | :arrow_up: |\n| Storage/Clients.swift | 61.11% <\u00f8> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 70.7% <0%> (-2.01%) | :arrow_down: |\n| Sync/Synchronizers/ClientsSynchronizer.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Providers/Profile.swift | 37.64% <0%> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteRemoteClientsAndTabs.swift | 74.25% <0%> (-3.79%) | :arrow_down: |\n| StorageTests/TestSQLiteRemoteClientsAndTabs.swift | 77.14% <0%> (-1.81%) | :arrow_down: |\n| ...ynchronizers/Bookmarks/BookmarksSynchronizer.swift | 60.9% <0%> (-2.3%) | :arrow_down: |\n| SyncTests/MetaGlobalTests.swift | 91.7% <100%> (+0.01%) | :arrow_up: |\n| ... and 9 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 33a6e68...d14c530. Read the comment docs.\n. # Codecov Report\nMerging #2730 into master will increase coverage by 0.05%.\nThe diff coverage is 49.23%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2730      +/-\n==========================================\n+ Coverage   54.87%   54.92%   +0.05%   \n==========================================\n  Files         480      481       +1   \n  Lines       98426    98455      +29   \n==========================================\n+ Hits        54007    54075      +68   \n+ Misses      44419    44380      -39\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.2% <43.13%> (+0.11%) | :arrow_up: |\n| Client/Frontend/Browser/HistoryStateHelper.swift | 71.42% <71.42%> (\u00f8) | |\n| ThirdParty/sqlcipher/sqlite3.c | 62.78% <0%> (+0.11%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+1.02%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3100d28...1140df0. Read the comment docs.\n. # Codecov Report\nMerging #2737 into master will increase coverage by 0.36%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2737      +/-\n==========================================\n+ Coverage   54.47%   54.83%   +0.36%   \n==========================================\n  Files         482      483       +1   \n  Lines       98525    98709     +184   \n==========================================\n+ Hits        53668    54124     +456   \n+ Misses      44857    44585     -272\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.15% <0%> (+0.5%) | :arrow_up: |\n| Client/Frontend/Browser/QRCodeViewController.swift | 0% <0%> (\u00f8) | |\n| Client/Frontend/Menu/AppMenuConfiguration.swift | 65.24% <0%> (-3.35%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.78% <0%> (+0.05%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 95.77% <0%> (+0.7%) | :arrow_up: |\n| Providers/Profile.swift | 32.64% <0%> (+1.32%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 87.69% <0%> (+1.53%) | :arrow_up: |\n| ... and 12 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19e2316...69ac8f2. Read the comment docs.\n. # Codecov Report\nMerging #2741 into master will decrease coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2741      +/-\n=========================================\n- Coverage    54.9%   54.9%   -0.01%   \n=========================================\n  Files         480     480            \n  Lines       98425   98425            \n=========================================\n- Hits        54040   54036       -4   \n- Misses      44385   44389       +4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Telemetry/PingCentre.swift | 77.27% <100%> (-4.55%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.52% <0%> (-0.43%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f75916c...1543052. Read the comment docs.\n. # Codecov Report\nMerging #2742 into master will decrease coverage by 8.44%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2742      +/-\n==========================================\n- Coverage   63.41%   54.97%   -8.45%   \n==========================================\n  Files         515      480      -35   \n  Lines      102826    98418    -4408   \n==========================================\n- Hits        65208    54103   -11105   \n- Misses      37618    44315    +6697\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| Client/Frontend/Browser/ReaderModeBarView.swift | 0% <0%> (-88.75%) | :arrow_down: |\n| ... and 154 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1de3883...ad14583. Read the comment docs.\n. # Codecov Report\nMerging #2744 into master will decrease coverage by 8.51%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2744      +/-\n=========================================\n- Coverage   63.41%   54.9%   -8.52%   \n=========================================\n  Files         515     480      -35   \n  Lines      102826   98426    -4400   \n=========================================\n- Hits        65208   54036   -11172   \n- Misses      37618   44390    +6772\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.09% <50%> (-26.33%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| ... and 147 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1de3883...e8e0cf9. Read the comment docs.\n. # Codecov Report\nMerging #2746 into master will decrease coverage by <.01%.\nThe diff coverage is 20%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2746      +/-\n==========================================\n- Coverage   54.87%   54.86%   -0.01%   \n==========================================\n  Files         480      480            \n  Lines       98426    98430       +4   \n==========================================\n- Hits        54007    54002       -5   \n- Misses      44419    44428       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/FindInPageBar.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/URLBarView.swift | 39.63% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+1.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 3100d28...e8dc2bd. Read the comment docs.\n. # Codecov Report\nMerging #2747 into master will decrease coverage by 0.11%.\nThe diff coverage is 14.11%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2747      +/-\n==========================================\n- Coverage   54.84%   54.73%   -0.12%   \n==========================================\n  Files         483      483            \n  Lines       98719    98796      +77   \n==========================================\n- Hits        54142    54072      -70   \n- Misses      44577    44724     +147\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabManager.swift | 49.75% <0%> (-0.17%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.1% <0%> (-0.99%) | :arrow_down: |\n| Client/Application/AppDelegate.swift | 40.61% <16.66%> (-3.72%) | :arrow_down: |\n| ...Notifications/NotificationRootViewController.swift | 0% <0%> (-39.36%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (-0.01%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.29% <0%> (+0.2%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+1.53%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39ee047...c1d1cb9. Read the comment docs.\n. # Codecov Report\nMerging #2750 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2750      +/-\n=========================================\n+ Coverage   54.89%   54.9%   +0.01%   \n=========================================\n  Files         481     481            \n  Lines       98454   98463       +9   \n=========================================\n+ Hits        54048   54065      +17   \n+ Misses      44406   44398       -8\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (+0.01%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 89.23% <0%> (+0.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6bfef43...669c7b4. Read the comment docs.\n. # Codecov Report\nMerging #2751 into master will increase coverage by 2.91%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2751      +/-\n==========================================\n+ Coverage   52.01%   54.92%   +2.91%   \n==========================================\n  Files         481      481            \n  Lines       98442    98448       +6   \n==========================================\n+ Hits        51207    54075    +2868   \n+ Misses      47235    44373    -2862\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| StorageTests/TestSwiftData.swift | 95.77% <100%> (+0.18%) | :arrow_up: |\n| Storage/SQL/BrowserTable.swift | 73.02% <0%> (-0.9%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.21% <0%> (-0.38%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.77% <0%> (+0.04%) | :arrow_up: |\n| ThirdParty/ecec/src/params.c | 80.13% <0%> (+0.32%) | :arrow_up: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 71.48% <0%> (+0.6%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.22% <0%> (+1.21%) | :arrow_up: |\n| Sync/Synchronizers/Bookmarks/Merging.swift | 79.48% <0%> (+1.28%) | :arrow_up: |\n| Storage/Clients.swift | 61.11% <0%> (+2.77%) | :arrow_up: |\n| Push/PushRegistration.swift | 47.05% <0%> (+2.94%) | :arrow_up: |\n| ... and 68 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bcd93f1...19fb79a. Read the comment docs.\n. # Codecov Report\nMerging #2752 into master will increase coverage by 0.39%.\nThe diff coverage is 10%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2752      +/-\n==========================================\n+ Coverage    54.5%   54.89%   +0.39%   \n==========================================\n  Files         481      481            \n  Lines       98463    98473      +10   \n==========================================\n+ Hits        53668    54060     +392   \n+ Misses      44795    44413     -382\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.14% <10%> (+0.54%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-1.03%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (\u00f8) | :arrow_up: |\n| Providers/Profile.swift | 32.64% <0%> (+1.32%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 44.6% <0%> (+4.14%) | :arrow_up: |\n| Client/Helpers/DynamicFontHelper.swift | 32.89% <0%> (+5.26%) | :arrow_up: |\n| Shared/DeviceInfo.swift | 76.78% <0%> (+8.92%) | :arrow_up: |\n| Shared/Logger.swift | 53.65% <0%> (+9.75%) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 0c6ca4a...b3a6182. Read the comment docs.\n. # Codecov Report\nMerging #2753 into master will decrease coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2753      +/-\n==========================================\n- Coverage    54.8%   54.79%   -0.01%   \n==========================================\n  Files         486      486            \n  Lines       99310    99327      +17   \n==========================================\n+ Hits        54428    54429       +1   \n- Misses      44882    44898      +16\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../Frontend/Widgets/ActionOverlayTableViewCell.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.87% <0%> (-0.14%) | :arrow_down: |\n| ...end/Widgets/ActionOverlayTableViewController.swift | 3.03% <0%> (-0.31%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+0.51%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68581ba...37a949c. Read the comment docs.\n. # Codecov Report\nMerging #2754 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2754      +/-\n=========================================\n- Coverage   54.91%   54.9%   -0.01%   \n=========================================\n  Files         481     481            \n  Lines       98505   98505            \n=========================================\n- Hits        54092   54089       -3   \n- Misses      44413   44416       +3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-0.52%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.78% <0%> (-0.01%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 67.09% <0%> (+0.42%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update bbe4956...bfa8048. Read the comment docs.\n. # Codecov Report\nMerging #2757 into master will increase coverage by 0.45%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2757      +/-\n==========================================\n+ Coverage   54.47%   54.92%   +0.45%   \n==========================================\n  Files         482      482            \n  Lines       98525    98525            \n==========================================\n+ Hits        53668    54115     +447   \n+ Misses      44857    44410     -447\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (+0.01%) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.27% <0%> (+0.62%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 95.77% <0%> (+0.7%) | :arrow_up: |\n| Providers/Profile.swift | 32.64% <0%> (+1.32%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+2.05%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 44.32% <0%> (+4.12%) | :arrow_up: |\n| Storage/SQL/SQLiteLogins.swift | 64.97% <0%> (+4.81%) | :arrow_up: |\n| Client/Helpers/DynamicFontHelper.swift | 32.89% <0%> (+5.26%) | :arrow_up: |\n| Shared/DeviceInfo.swift | 76.78% <0%> (+8.92%) | :arrow_up: |\n| Shared/Logger.swift | 53.65% <0%> (+9.75%) | :arrow_up: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 19e2316...604b60a. Read the comment docs.\n. # Codecov Report\nMerging #2760 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2760      +/-\n==========================================\n- Coverage   54.83%   54.81%   -0.02%   \n==========================================\n  Files         488      483       -5   \n  Lines      100535    98720    -1815   \n==========================================\n- Hits        55131    54118    -1013   \n+ Misses      45404    44602     -802\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...d/Settings/SearchSettingsTableViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Shared/SystemUtils.swift | 48.48% <0%> (-15.16%) | :arrow_down: |\n| Account/FxAPushMessageHandler.swift | 19.35% <0%> (-14.32%) | :arrow_down: |\n| ThirdParty/ecec/src/base64url.c | 63.23% <0%> (-9.66%) | :arrow_down: |\n| Shared/Extensions/JSONExtensions.swift | 80.76% <0%> (-7.7%) | :arrow_down: |\n| Storage/Site.swift | 71.87% <0%> (-6.92%) | :arrow_down: |\n| Client/Frontend/Home/HomePanelViewController.swift | 58.73% <0%> (-6.75%) | :arrow_down: |\n| ThirdParty/ecec/include/ece.h | 32.14% <0%> (-6.1%) | :arrow_down: |\n| ClientTests/MockProfile.swift | 30.66% <0%> (-4.4%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ... and 109 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e47b137...17a5f95. Read the comment docs.\n. # Codecov Report\nMerging #2762 into master will decrease coverage by 8.46%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2762      +/-\n==========================================\n- Coverage   63.31%   54.84%   -8.47%   \n==========================================\n  Files         518      483      -35   \n  Lines      103098    98719    -4379   \n==========================================\n- Hits        65277    54143   -11134   \n- Misses      37821    44576    +6755\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89%) | :arrow_down: |\n| Client/Frontend/Browser/ReaderModeBarView.swift | 0% <0%> (-88.75%) | :arrow_down: |\n| ... and 149 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39ee047...e5b50c2. Read the comment docs.\n. # Codecov Report\nMerging #2763 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2763      +/-\n==========================================\n+ Coverage   54.77%   54.78%   +<.01%   \n==========================================\n  Files         484      483       -1   \n  Lines       98831    98702     -129   \n==========================================\n- Hits        54134    54072      -62   \n+ Misses      44697    44630      -67\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistory.swift | 72.01% <100%> (-0.22%) | :arrow_down: |\n| Storage/SQL/SQLiteHistoryFactories.swift | 81.63% <0%> (-6.13%) | :arrow_down: |\n| Client/Application/AppDelegate.swift | 44.32% <0%> (-1.02%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.68% <0%> (-0.06%) | :arrow_down: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | | |\n| Client/Frontend/Browser/LoginsHelper.swift | 6.58% <0%> (+0.07%) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.08% <0%> (+0.1%) | :arrow_up: |\n| Sync/Record.swift | 82.85% <0%> (+0.5%) | :arrow_up: |\n| ... and 2 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2ee7745...5495b72. Read the comment docs.\n. # Codecov Report\nMerging #2766 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2766      +/-\n==========================================\n- Coverage   54.84%   54.81%   -0.04%   \n==========================================\n  Files         483      483            \n  Lines       98719    98719            \n==========================================\n- Hits        54142    54112      -30   \n- Misses      44577    44607      +30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (-0.08%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 39ee047...71edb3f. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@77ec350). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2768   +/-\n=========================================\n  Coverage          ?   54.78%         \n=========================================\n  Files             ?      483         \n  Lines             ?    98718         \n  Branches          ?        0         \n=========================================\n  Hits              ?    54081         \n  Misses            ?    44637         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Helpers/SpotlightHelper.swift | 58.57% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 77ec350...d3f9c7a. Read the comment docs.\n. # Codecov Report\nMerging #2770 into master will decrease coverage by 0.43%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2770      +/-\n==========================================\n- Coverage   54.77%   54.33%   -0.44%   \n==========================================\n  Files         484      483       -1   \n  Lines       98920    98722     -198   \n==========================================\n- Hits        54180    53640     -540   \n- Misses      44740    45082     +342\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.7% <0%> (-36.49%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| Providers/NSUserDefaultsPrefs.swift | 61.42% <0%> (-15.72%) | :arrow_down: |\n| Shared/Logger.swift | 43.9% <0%> (-9.76%) | :arrow_down: |\n| Shared/DeviceInfo.swift | 67.85% <0%> (-8.93%) | :arrow_down: |\n| ... and 22 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e54bc9b...6c8c0ca. Read the comment docs.\n. # Codecov Report\nMerging #2771 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2771      +/-\n==========================================\n+ Coverage   54.75%   54.77%   +0.02%   \n==========================================\n  Files         484      484            \n  Lines       98826    98826            \n==========================================\n+ Hits        54113    54136      +23   \n+ Misses      44713    44690      -23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-0.52%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (+0.05%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2f1b9f0...62e7816. Read the comment docs.\n. # Codecov Report\nMerging #2776 into master will increase coverage by 0.03%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2776      +/-\n==========================================\n+ Coverage   54.75%   54.78%   +0.03%   \n==========================================\n  Files         484      484            \n  Lines       98882    98883       +1   \n==========================================\n+ Hits        54142    54175      +33   \n+ Misses      44740    44708      -32\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ClientTests/FxAPushMessageTest.swift | 96.87% <100%> (+0.04%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.68% <0%> (-0.06%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 87.69% <0%> (+0.51%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.22% <0%> (+0.73%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n| ClientTests/MockProfile.swift | 33.33% <0%> (+5.33%) | :arrow_up: |\n| Client/Utils/FaviconFetcher.swift | 87.62% <0%> (+5.67%) | :arrow_up: |\n| Shared/Extensions/JSONExtensions.swift | 88.46% <0%> (+7.69%) | :arrow_up: |\n| ClientTests/TestFavicons.swift | 50% <0%> (+10.71%) | :arrow_up: |\n| Storage/Site.swift | 71.87% <0%> (+12.5%) | :arrow_up: |\n| ... and 1 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 349d262...ee357d5. Read the comment docs.\n. # Codecov Report\nMerging #2777 into master will increase coverage by 0.06%.\nThe diff coverage is 57.14%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2777      +/-\n==========================================\n+ Coverage   54.75%   54.81%   +0.06%   \n==========================================\n  Files         484      484            \n  Lines       98882    98875       -7   \n==========================================\n+ Hits        54142    54202      +60   \n+ Misses      44740    44673      -67\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ent/Frontend/Home/ActivityStreamTopSitesCell.swift | 76.69% <57.14%> (-0.62%) | :arrow_down: |\n| Client/Frontend/Browser/FaviconManager.swift | 64.28% <0%> (-2.78%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (+0.06%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.22% <0%> (+0.73%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 66.66% <0%> (+1.65%) | :arrow_up: |\n| ClientTests/MockProfile.swift | 30.66% <0%> (+2.66%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n| Client/Utils/FaviconFetcher.swift | 87.62% <0%> (+5.67%) | :arrow_up: |\n| ClientTests/TestFavicons.swift | 50% <0%> (+10.71%) | :arrow_up: |\n| Storage/Site.swift | 71.87% <0%> (+12.5%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 349d262...cf3d613. Read the comment docs.\n. # Codecov Report\nMerging #2778 into master will increase coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2778      +/-\n==========================================\n+ Coverage   54.77%   54.79%   +0.02%   \n==========================================\n  Files         484      484            \n  Lines       98920    98922       +2   \n==========================================\n+ Hits        54180    54205      +25   \n+ Misses      44740    44717      -23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 15.29% <\u00f8> (\u00f8) | :arrow_up: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.22% <0%> (-0.25%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (+0.06%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e54bc9b...8ee1fb8. Read the comment docs.\n. # Codecov Report\nMerging #2779 into master will decrease coverage by 8.46%.\nThe diff coverage is 95.74%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2779      +/-\n==========================================\n- Coverage    63.3%   54.84%   -8.47%   \n==========================================\n  Files         521      486      -35   \n  Lines      103640    99300    -4340   \n==========================================\n- Hits        65612    54459   -11153   \n- Misses      38028    44841    +6813\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.23% <\u00f8> (-26.84%) | :arrow_down: |\n| Client/Frontend/Browser/TabTrayController.swift | 0% <0%> (-64.42%) | :arrow_down: |\n| ClientTests/TabManagerTests.swift | 95.5% <100%> (+0.67%) | :arrow_up: |\n| Client/Frontend/Browser/TabManager.swift | 52.41% <100%> (-3.87%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-94.83%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ... and 153 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a0172bf...7075b98. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@5dac68e). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2780   +/-\n=========================================\n  Coverage          ?   54.75%         \n=========================================\n  Files             ?      484         \n  Lines             ?    98909         \n  Branches          ?        0         \n=========================================\n  Hits              ?    54154         \n  Misses            ?    44755         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 14.77% <0%> (\u00f8) | |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5dac68e...384c5e2. Read the comment docs.\n. # Codecov Report\nMerging #2782 into master will decrease coverage by 0.05%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2782      +/-\n==========================================\n- Coverage   54.91%   54.86%   -0.06%   \n==========================================\n  Files         486      486            \n  Lines       99183    99195      +12   \n==========================================\n- Hits        54470    54422      -48   \n- Misses      44713    44773      +60\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SyncTests/DownloadTests.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sync/Synchronizers/Downloader.swift | 86.45% <100%> (+1.24%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-0.52%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.67% <0%> (-0.13%) | :arrow_down: |\n| SyncTests/MockSyncServer.swift | 75.54% <0%> (+1.25%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d8581c8...b0eacbb. Read the comment docs.\n. # Codecov Report\nMerging #2783 into master will decrease coverage by 0.38%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2783      +/-\n==========================================\n- Coverage    54.8%   54.42%   -0.39%   \n==========================================\n  Files         486      486            \n  Lines       99310    99319       +9   \n==========================================\n- Hits        54428    54053     -375   \n- Misses      44882    45266     +384\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabTrayController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.56% <0%> (-0.63%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 10.86% <0%> (-3.74%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.15% <0%> (+0.14%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 36.93% <0%> (-4.16%) | :arrow_down: |\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.7% <0%> (-36.49%) | :arrow_down: |\n| ... and 13 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68581ba...32ed1c3. Read the comment docs.\n. # Codecov Report\nMerging #2784 into master will decrease coverage by <.01%.\nThe diff coverage is 14.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2784      +/-\n==========================================\n- Coverage   54.84%   54.84%   -0.01%   \n==========================================\n  Files         486      486            \n  Lines       99606    99643      +37   \n==========================================\n+ Hits        54631    54645      +14   \n- Misses      44975    44998      +23\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Helpers/FxALoginHelper.swift | 4.37% <0%> (+0.02%) | :arrow_up: |\n| Account/FxAPushMessageHandler.swift | 33.67% <0%> (-1.82%) | :arrow_down: |\n| Shared/Extensions/NSURLExtensions.swift | 90.31% <100%> (\u00f8) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 39.07% <3.03%> (-1.66%) | :arrow_down: |\n| Providers/Profile.swift | 32.89% <37.5%> (+0.39%) | :arrow_up: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.8% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2aea6f0...914c6eb. Read the comment docs.\n. # Codecov Report\nMerging #2787 into master will increase coverage by 0.05%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2787      +/-\n==========================================\n+ Coverage   54.79%   54.84%   +0.05%   \n==========================================\n  Files         486      486            \n  Lines       99305    99310       +5   \n==========================================\n+ Hits        54411    54470      +59   \n+ Misses      44894    44840      -54\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...t/Frontend/Settings/FxAContentViewController.swift | 16.55% <0%> (-0.23%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 14.6% <0%> (-0.17%) | :arrow_down: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.82% <0%> (+0.12%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.42% <0%> (+0.41%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d4123f4...e5e7d1c. Read the comment docs.\n. # Codecov Report\nMerging #2788 into v8.x will increase coverage by 24.86%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nv8.x    #2788       +/-\n===========================================\n+ Coverage   29.89%   54.75%   +24.86%   \n===========================================\n  Files         393      483       +90   \n  Lines       87061    98802    +11741   \n===========================================\n+ Hits        26028    54103    +28075   \n+ Misses      61033    44699    -16334\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 15.29% <0%> (-32.95%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-21.34%) | :arrow_down: |\n| SyncTests/RecordTests.swift | 96.36% <0%> (\u00f8) | |\n| ReadingListTests/ReadingListStorageTestCase.swift | 89.7% <0%> (\u00f8) | |\n| ClientTests/TestHashExtensions.swift | 100% <0%> (\u00f8) | |\n| SyncTests/TabsPayloadTests.swift | 100% <0%> (\u00f8) | |\n| FxA/FxATests/FxATests.m | 100% <0%> (\u00f8) | |\n| StorageTests/MockFiles.swift | 100% <0%> (\u00f8) | |\n| ClientTests/TestHistory.swift | 99.3% <0%> (\u00f8) | |\n| ClientTests/ProfileTest.swift | 100% <0%> (\u00f8) | |\n| ... and 277 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update cd7c8fd...a635d11. Read the comment docs.\n. # Codecov Report\nMerging #2790 into master will decrease coverage by 8.5%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2790      +/-\n=========================================\n- Coverage    63.3%   54.8%   -8.51%   \n=========================================\n  Files         521     486      -35   \n  Lines      103640   99261    -4379   \n=========================================\n- Hits        65612   54396   -11216   \n- Misses      38028   44865    +6837\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-94.83%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89.22%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ... and 152 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a0172bf...7af1ed9. Read the comment docs.\n. # Codecov Report\nMerging #2791 into master will increase coverage by <.01%.\nThe diff coverage is 50%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2791      +/-\n=========================================\n+ Coverage    54.8%   54.8%   +<.01%   \n=========================================\n  Files         486     486            \n  Lines       99300   99305       +5   \n=========================================\n+ Hits        54420   54427       +7   \n+ Misses      44880   44878       -2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.19% <0%> (-0.05%) | :arrow_down: |\n| Client/Application/SentryIntegration.swift | 52.17% <55.55%> (+2.17%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.01% <0%> (-0.42%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (-0.02%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (+2.05%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4905c47...95c0ea3. Read the comment docs.\n. # Codecov Report\nMerging #2792 into master will increase coverage by 0.01%.\nThe diff coverage is 25%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2792      +/-\n==========================================\n+ Coverage   54.82%   54.84%   +0.01%   \n==========================================\n  Files         486      486            \n  Lines       99465    99468       +3   \n==========================================\n+ Hits        54535    54551      +16   \n+ Misses      44930    44917      -13\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 40.72% <0%> (-0.22%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 14.13% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (-0.52%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (+0.05%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4538e6d...c83b87e. Read the comment docs.\n. # Codecov Report\nMerging #2793 into master will increase coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2793      +/-\n==========================================\n+ Coverage    54.8%   54.81%   +0.01%   \n==========================================\n  Files         486      486            \n  Lines       99300    99301       +1   \n==========================================\n+ Hits        54420    54433      +13   \n+ Misses      44880    44868      -12\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ynchronizers/Bookmarks/BookmarksSynchronizer.swift | 59.55% <0%> (-0.27%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.01% <0%> (-0.42%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.76% <0%> (+0.01%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+2.56%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4905c47...dc7e331. Read the comment docs.\n. # Codecov Report\nMerging #2794 into master will increase coverage by 0.03%.\nThe diff coverage is 81.7%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2794      +/-\n==========================================\n+ Coverage    54.8%   54.84%   +0.03%   \n==========================================\n  Files         486      486            \n  Lines       99310    99305       -5   \n==========================================\n+ Hits        54428    54462      +34   \n+ Misses      44882    44843      -39\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabTrayController.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Strings.swift | 22.22% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/QRCodeViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.19% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/TopTabsViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabToolbar.swift | 74.35% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Menu/AppMenuConfiguration.swift | 65.24% <76%> (\u00f8) | :arrow_up: |\n| ClientTests/MenuTests.swift | 97.28% <92.15%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/AppSettingsOptions.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.2% <0%> (\u00f8) | :arrow_up: |\n| ... and 4 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 68581ba...0d8952e. Read the comment docs.\n. # Codecov Report\nMerging #2796 into master will decrease coverage by <.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2796      +/-\n=========================================\n- Coverage   54.81%   54.8%   -0.01%   \n=========================================\n  Files         486     486            \n  Lines       99340   99348       +8   \n=========================================\n+ Hits        54450   54452       +2   \n- Misses      44890   44896       +6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Extensions/SendTo/ClientPickerViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 87.17% <0%> (-1.03%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.78% <0%> (-0.02%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 1b4a247...f9ca2bf. Read the comment docs.\n. # Codecov Report\nMerging #2797 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2797      +/-\n==========================================\n+ Coverage   54.79%   54.82%   +0.02%   \n==========================================\n  Files         486      486            \n  Lines       99341    99340       -1   \n==========================================\n+ Hits        54433    54462      +29   \n+ Misses      44908    44878      -30\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistory.swift | 71.98% <100%> (\u00f8) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 95.77% <0%> (-1.41%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.8% <0%> (+0.06%) | :arrow_up: |\n| ...ynchronizers/Bookmarks/BookmarksSynchronizer.swift | 59.82% <0%> (+0.26%) | :arrow_up: |\n| Storage/SQL/SQLiteHistoryFactories.swift | 87.75% <0%> (+6.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5726fea...fcc40f3. Read the comment docs.\n. # Codecov Report\nMerging #2798 into master will increase coverage by 0.02%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2798      +/-\n==========================================\n+ Coverage   54.82%   54.85%   +0.02%   \n==========================================\n  Files         486      486            \n  Lines       99465    99466       +1   \n==========================================\n+ Hits        54535    54561      +26   \n+ Misses      44930    44905      -25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 15.05% <100%> (+0.92%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (+0.05%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4538e6d...563a570. Read the comment docs.\n. # Codecov Report\nMerging #2799 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2799      +/-\n==========================================\n+ Coverage   54.78%   54.79%   +<.01%   \n==========================================\n  Files         486      486            \n  Lines       99307    99341      +34   \n==========================================\n+ Hits        54405    54430      +25   \n- Misses      44902    44911       +9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| StorageTests/TestSwiftData.swift | 95.77% <0%> (-1.41%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (-0.01%) | :arrow_down: |\n| Extensions/SendTo/ClientPickerViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 71.98% <0%> (+0.27%) | :arrow_up: |\n| Storage/SQL/SQLiteHistoryFactories.swift | 87.75% <0%> (+6.12%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6ed1b40...dbea4f4. Read the comment docs.\n. # Codecov Report\nMerging #2801 into master will decrease coverage by 54.81%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\nmaster    #2801       +/-\n===========================================\n- Coverage   54.81%       0%   -54.82%   \n===========================================\n  Files         486      520       +34   \n  Lines       99725   104084     +4359   \n===========================================\n- Hits        54665        0    -54665   \n- Misses      45060   104084    +59024\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| XCUITests/SettingsTest.swift | 0% <0%> (\u00f8) | |\n| ClientTests/RelativeDatesTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Client/Utils/Try.m | 0% <0%> (-100%) | :arrow_down: |\n| SharedTests/PhoneNumberFormatterTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| ClientTests/ResetTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| SharedTests/SupportUtilsTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Shared/Extensions/KeychainWrapperExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| ...sts/NSMutableAttributedStringExtensionsTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Storage/SQL/SQLiteHistoryRecommendations.swift | 0% <0%> (-100%) | :arrow_down: |\n| FxA/FxA/include/openssl/kdf.h | 0% <0%> (-100%) | :arrow_down: |\n| ... and 367 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f017857...1b95709. Read the comment docs.\n. # Codecov Report\nMerging #2802 into master will decrease coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2802      +/-\n==========================================\n- Coverage    54.8%   54.78%   -0.02%   \n==========================================\n  Files         486      486            \n  Lines       99735    99737       +2   \n==========================================\n- Hits        54656    54638      -18   \n- Misses      45079    45099      +20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 39.05% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (-0.07%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 20fc0cd...ff25a5c. Read the comment docs.\n. # Codecov Report\nMerging #2803 into master will increase coverage by 2.31%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2803      +/-\n=========================================\n+ Coverage   52.49%   54.8%   +2.31%   \n=========================================\n  Files         521     486      -35   \n  Lines      103897   99515    -4382   \n=========================================\n  Hits        54543   54543            \n+ Misses      49354   44972    -4382\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 15.55% <\u00f8> (+0.5%) | :arrow_up: |\n| Client/Frontend/Browser/TabTrayController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 40.72% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.8% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.17% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (\u00f8) | :arrow_up: |\n| UITests/ClearPrivateDataTests.swift | | |\n| UITests/ToolbarTests.swift | | |\n| XCUITests/ToolbarTest.swift | | |\n| XCUITests/HomePageSettingsUITest.swift | | |\n| ... and 31 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41cac22...ed2586b. Read the comment docs.\n. # Codecov Report\nMerging #2805 into master will increase coverage by 2.98%.\nThe diff coverage is 76.59%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2805      +/-\n==========================================\n+ Coverage   51.84%   54.82%   +2.98%   \n==========================================\n  Files         486      486            \n  Lines       99469    99459      -10   \n==========================================\n+ Hits        51566    54526    +2960   \n+ Misses      47903    44933    -2970\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Extensions/UIImageViewExtensions.swift | 33.33% <57.14%> (+0.47%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 85% <80%> (-2.18%) | :arrow_down: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.17% <0%> (-0.37%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.76% <0%> (+0.07%) | :arrow_up: |\n| ThirdParty/ecec/src/params.c | 80.13% <0%> (+0.32%) | :arrow_up: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 71.48% <0%> (+0.6%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.24% <0%> (+1.22%) | :arrow_up: |\n| Sync/Synchronizers/Bookmarks/Merging.swift | 78.48% <0%> (+1.26%) | :arrow_up: |\n| Storage/Clients.swift | 61.11% <0%> (+2.77%) | :arrow_up: |\n| ... and 71 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6b2f81...e77cfba. Read the comment docs.\n. # Codecov Report\nMerging #2806 into master will decrease coverage by 0.17%.\nThe diff coverage is 6.45%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2806      +/-\n==========================================\n- Coverage   54.93%   54.75%   -0.18%   \n==========================================\n  Files         486      486            \n  Lines       99622    99555      -67   \n==========================================\n- Hits        54724    54510     -214   \n- Misses      44898    45045     +147\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Shared/Prefs.swift | 82.35% <\u00f8> (\u00f8) | :arrow_up: |\n| ClientTests/MenuTests.swift | 97.28% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/NoImageModeHelper.swift | 86.66% <100%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.34% <3.33%> (-0.84%) | :arrow_down: |\n| Client/Frontend/Home/HomePanelViewController.swift | 58.73% <0%> (-6.75%) | :arrow_down: |\n| ThirdParty/UIImageColors.swift | 86.15% <0%> (-4.11%) | :arrow_down: |\n| StorageTests/TestSwiftData.swift | 95.77% <0%> (-1.41%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 63.91% <0%> (-0.62%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.68% <0%> (-0.27%) | :arrow_down: |\n| ... and 15 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update c411b49...3e7d39f. Read the comment docs.\n. # Codecov Report\nMerging #2807 into master will increase coverage by 2.54%.\nThe diff coverage is 11.47%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2807      +/-\n==========================================\n+ Coverage   51.84%   54.38%   +2.54%   \n==========================================\n  Files         486      486            \n  Lines       99469    99518      +49   \n==========================================\n+ Hits        51566    54124    +2558   \n+ Misses      47903    45394    -2509\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ThumbnailCell.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Strings.swift | 22.22% <\u00f8> (+22.22%) | :arrow_up: |\n| ...end/Widgets/ActionOverlayTableViewController.swift | 3.03% <\u00f8> (+3.03%) | :arrow_up: |\n| Client/Frontend/Home/RemoteTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/TopSitesPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/RecentlyClosedTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Widgets/TwoLineCell.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.56% <0%> (-0.99%) | :arrow_down: |\n| Client/Frontend/Home/ReaderPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ... and 93 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6b2f81...7279f6d. Read the comment docs.\n. # Codecov Report\nMerging #2808 into master will increase coverage by 3.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2808      +/-\n==========================================\n+ Coverage   51.84%   54.85%   +3.01%   \n==========================================\n  Files         486      486            \n  Lines       99469    99469            \n==========================================\n+ Hits        51566    54565    +2999   \n+ Misses      47903    44904    -2999\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Strings.swift | 22.22% <\u00f8> (+22.22%) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.17% <0%> (-0.37%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.8% <0%> (+0.11%) | :arrow_up: |\n| ThirdParty/ecec/src/params.c | 80.13% <0%> (+0.32%) | :arrow_up: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 71.48% <0%> (+0.6%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.24% <0%> (+1.22%) | :arrow_up: |\n| Sync/Synchronizers/Bookmarks/Merging.swift | 78.48% <0%> (+1.26%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n| ThirdParty/UIImageColors.swift | 88.71% <0%> (+1.53%) | :arrow_up: |\n| Storage/Clients.swift | 61.11% <0%> (+2.77%) | :arrow_up: |\n| ... and 71 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6b2f81...5a87dc0. Read the comment docs.\n. # Codecov Report\nMerging #2809 into master will increase coverage by 3%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2809     +/-\n=========================================\n+ Coverage   51.84%   54.84%     +3%   \n=========================================\n  Files         486      486           \n  Lines       99469    99467      -2   \n=========================================\n+ Hits        51566    54555   +2989   \n+ Misses      47903    44912   -2991\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.16% <0%> (-0.38%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (+0.1%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 40.94% <0%> (+0.21%) | :arrow_up: |\n| ThirdParty/ecec/src/params.c | 80.13% <0%> (+0.32%) | :arrow_up: |\n| Storage/SQL/SQLiteBookmarksSyncing.swift | 71.48% <0%> (+0.6%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.24% <0%> (+1.22%) | :arrow_up: |\n| Sync/Synchronizers/Bookmarks/Merging.swift | 78.48% <0%> (+1.26%) | :arrow_up: |\n| ... and 74 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f6b2f81...fab31f7. Read the comment docs.\n. # Codecov Report\nMerging #2811 into master will decrease coverage by 0.4%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2811      +/-\n==========================================\n- Coverage   54.83%   54.43%   -0.41%   \n==========================================\n  Files         486      486            \n  Lines       99516    99518       +2   \n==========================================\n- Hits        54571    54172     -399   \n- Misses      44945    45346     +401\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.7% <0%> (-36.49%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| Providers/NSUserDefaultsPrefs.swift | 61.42% <0%> (-15.72%) | :arrow_down: |\n| Shared/Logger.swift | 43.9% <0%> (-9.76%) | :arrow_down: |\n| Shared/DeviceInfo.swift | 67.85% <0%> (-8.93%) | :arrow_down: |\n| Client/Helpers/DynamicFontHelper.swift | 26.25% <0%> (-5%) | :arrow_down: |\n| ... and 7 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a095ad3...7574729. Read the comment docs.\n. # Codecov Report\nMerging #2812 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2812      +/-\n==========================================\n+ Coverage   54.83%   54.84%   +0.01%   \n==========================================\n  Files         486      486            \n  Lines       99516    99466      -50   \n==========================================\n- Hits        54571    54554      -17   \n+ Misses      44945    44912      -33\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Shared/Extensions/NSURLExtensions.swift | 90.31% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/HomePanelViewController.swift | 58.73% <0%> (-6.75%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 63.91% <0%> (-0.89%) | :arrow_down: |\n| Client/Frontend/Home/RecentlyClosedTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Strings.swift | 22.22% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/RemoteTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...end/Widgets/ActionOverlayTableViewController.swift | 3.03% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ... and 8 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update a095ad3...63e2534. Read the comment docs.\n. # Codecov Report\nMerging #2814 into master will increase coverage by <.01%.\nThe diff coverage is 80%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2814      +/-\n==========================================\n+ Coverage   54.78%   54.78%   +<.01%   \n==========================================\n  Files         486      486            \n  Lines       99748    99754       +6   \n==========================================\n+ Hits        54643    54649       +6   \n  Misses      45105    45105\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Shared/DeviceInfo.swift | 80.35% <100%> (+3.57%) | :arrow_up: |\n| Shared/SentryIntegration.swift | 11.76% <75%> (-13.77%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (-0.01%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.1% <0%> (+0.04%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e20b46e...61d75c2. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@94ba721). Click here to learn what that means.\nThe diff coverage is 33.33%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2816   +/-\n=========================================\n  Coverage          ?   54.82%         \n=========================================\n  Files             ?      486         \n  Lines             ?    99669         \n  Branches          ?        0         \n=========================================\n  Hits              ?    54640         \n  Misses            ?    45029         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 39.37% <100%> (\u00f8) | |\n| Storage/SQL/BrowserDB.swift | 82.03% <25%> (\u00f8) | |\n| Shared/SentryIntegration.swift | 25.53% <25.53%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 94ba721...c619845. Read the comment docs.\n. # Codecov Report\nMerging #2817 into v8.x will increase coverage by 24.87%.\nThe diff coverage is 100%.\n\n\n```diff\n@@             Coverage Diff             @@\nv8.x    #2817       +/-\n===========================================\n+ Coverage   29.84%   54.71%   +24.87%   \n===========================================\n  Files         393      483       +90   \n  Lines       87205    99061    +11856   \n===========================================\n+ Hits        26027    54204    +28177   \n+ Misses      61178    44857    -16321\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 15.73% <100%> (-30.87%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-18.67%) | :arrow_down: |\n| StorageTests/CertTests.swift | 100% <0%> (\u00f8) | |\n| SyncTests/StorageClientTests.swift | 97.5% <0%> (\u00f8) | |\n| ClientTests/ProfileTest.swift | 100% <0%> (\u00f8) | |\n| AccountTests/FxALoginStateMachineTests.swift | 97.95% <0%> (\u00f8) | |\n| StorageTests/MockFiles.swift | 100% <0%> (\u00f8) | |\n| StorageTests/TestDeferredSqlite.swift | 78.94% <0%> (\u00f8) | |\n| ClientTests/ResetTests.swift | 100% <0%> (\u00f8) | |\n| ... and 277 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update ccbd103...0486468. Read the comment docs.\n. # Codecov Report\nMerging #2818 into master will decrease coverage by 0.03%.\nThe diff coverage is 41.26%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2818      +/-\n==========================================\n- Coverage   54.84%   54.81%   -0.04%   \n==========================================\n  Files         486      486            \n  Lines       99606    99661      +55   \n==========================================\n- Hits        54631    54629       -2   \n- Misses      44975    45032      +57\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/HistoryPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Storage/Site.swift | 78.78% <100%> (+0.66%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 63.14% <30%> (-1.38%) | :arrow_down: |\n| ...ent/Frontend/Home/ActivityStreamTopSitesCell.swift | 76.38% <60%> (-0.31%) | :arrow_down: |\n| Storage/SQL/BrowserTable.swift | 73.02% <75%> (+0.02%) | :arrow_up: |\n| Storage/SQL/SQLiteHistory.swift | 72.27% <80%> (+0.02%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (-0.06%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 2aea6f0...536c5d5. Read the comment docs.\n. # Codecov Report\nMerging #2820 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2820      +/-\n==========================================\n- Coverage   54.82%   54.82%   -0.01%   \n==========================================\n  Files         486      486            \n  Lines       99667    99669       +2   \n==========================================\n  Hits        54643    54643            \n- Misses      45024    45026       +2\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 15.55% <\u00f8> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (-0.02%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.88% <0%> (+0.35%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5518094...1832c51. Read the comment docs.\n. # Codecov Report\nMerging #2822 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2822      +/-\n==========================================\n+ Coverage   54.82%   54.83%   +<.01%   \n==========================================\n  Files         486      486            \n  Lines       99667    99669       +2   \n==========================================\n+ Hits        54643    54651       +8   \n+ Misses      45024    45018       -6\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Push/PushConfiguration.swift | 16.66% <\u00f8> (\u00f8) | :arrow_up: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.81% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.88% <0%> (+0.35%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5518094...61ac090. Read the comment docs.\n. # Codecov Report\nMerging #2823 into master will increase coverage by <.01%.\nThe diff coverage is 53.84%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2823      +/-\n==========================================\n+ Coverage   54.82%   54.83%   +<.01%   \n==========================================\n  Files         486      486            \n  Lines       99667    99665       -2   \n==========================================\n+ Hits        54643    54650       +7   \n+ Misses      45024    45015       -9\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabManager.swift | 52.24% <0%> (-0.17%) | :arrow_down: |\n| Shared/SentryIntegration.swift | 60.52% <100%> (+34.99%) | :arrow_up: |\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.22% <100%> (+0.04%) | :arrow_up: |\n| Storage/SQL/BrowserDB.swift | 81.3% <33.33%> (-0.74%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.8% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 5518094...eb1e771. Read the comment docs.\n. # Codecov Report\nMerging #2824 into master will decrease coverage by 0.41%.\nThe diff coverage is 60%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2824      +/-\n==========================================\n- Coverage   54.81%   54.39%   -0.42%   \n==========================================\n  Files         486      486            \n  Lines       99725    99701      -24   \n==========================================\n- Hits        54665    54236     -429   \n- Misses      45060    45465     +405\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Strings.swift | 22.22% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.67% <60%> (+1.52%) | :arrow_up: |\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.7% <0%> (-36.49%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| Providers/NSUserDefaultsPrefs.swift | 61.42% <0%> (-15.72%) | :arrow_down: |\n| Shared/Logger.swift | 43.9% <0%> (-9.76%) | :arrow_down: |\n| ... and 8 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f017857...e0dc0f8. Read the comment docs.\n. # Codecov Report\nMerging #2826 into master will increase coverage by <.01%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2826      +/-\n==========================================\n+ Coverage   54.81%   54.81%   +<.01%   \n==========================================\n  Files         486      486            \n  Lines       99725    99727       +2   \n==========================================\n+ Hits        54665    54670       +5   \n+ Misses      45060    45057       -3\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.17% <100%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.8% <0%> (-0.01%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| Client/Frontend/Widgets/TabsButton.swift | 80.41% <0%> (+3.49%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f017857...3d9a540. Read the comment docs.\n. # Codecov Report\nMerging #2827 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2827      +/-\n==========================================\n- Coverage   54.81%   54.77%   -0.04%   \n==========================================\n  Files         486      486            \n  Lines       99725    99737      +12   \n==========================================\n- Hits        54665    54633      -32   \n- Misses      45060    45104      +44\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.06% <0%> (-0.12%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (-0.07%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 63.49% <0%> (+0.34%) | :arrow_up: |\n| StorageTests/TestSwiftData.swift | 97.18% <0%> (+1.4%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f017857...98feed1. Read the comment docs.\n. # Codecov Report\nMerging #2829 into master will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2829      +/-\n==========================================\n- Coverage   54.81%   54.79%   -0.03%   \n==========================================\n  Files         486      486            \n  Lines       99725    99727       +2   \n==========================================\n- Hits        54665    54645      -20   \n- Misses      45060    45082      +22\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabTrayController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.76% <0%> (-0.06%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f017857...c66a4c4. Read the comment docs.\n. # Codecov Report\nMerging #2831 into master will decrease coverage by 0.02%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2831      +/-\n==========================================\n- Coverage    54.8%   54.78%   -0.03%   \n==========================================\n  Files         486      486            \n  Lines       99725    99728       +3   \n==========================================\n- Hits        54656    54635      -21   \n- Misses      45069    45093      +24\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Providers/Profile.swift | 32.84% <0%> (-0.05%) | :arrow_down: |\n| StorageTests/TestSwiftData.swift | 95.77% <0%> (-1.41%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (-0.06%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f68d741...e5ae214. Read the comment docs.\n. # Codecov Report\nMerging #2832 into v8.x will decrease coverage by 0.49%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nv8.x    #2832     +/-\n=========================================\n- Coverage   54.81%   54.31%   -0.5%   \n=========================================\n  Files         484      484           \n  Lines       99333    99333           \n=========================================\n- Hits        54448    53954    -494   \n- Misses      44885    45379    +494\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 12.35% <0%> (-37.08%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 4.05% <0%> (-36.49%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-24.01%) | :arrow_down: |\n| Providers/NSUserDefaultsPrefs.swift | 61.42% <0%> (-15.72%) | :arrow_down: |\n| Shared/SystemUtils.swift | 48.48% <0%> (-15.16%) | :arrow_down: |\n| ... and 10 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update d213b83...44b382b. Read the comment docs.\n. # Codecov Report\nMerging #2833 into master will increase coverage by 0.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2833      +/-\n==========================================\n+ Coverage    54.8%   54.81%   +0.01%   \n==========================================\n  Files         486      486            \n  Lines       99725    99727       +2   \n==========================================\n+ Hits        54656    54669      +13   \n+ Misses      45069    45058      -11\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.8% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f68d741...3b6f64d. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@7339b6a). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster    #2842   +/-\n=========================================\n  Coverage          ?   54.82%         \n=========================================\n  Files             ?      486         \n  Lines             ?    99737         \n  Branches          ?        0         \n=========================================\n  Hits              ?    54683         \n  Misses            ?    45054         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/LeanplumIntegration.swift | 22.5% <\u00f8> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 7339b6a...b533697. Read the comment docs.\n. # Codecov Report\nMerging #2843 into master will increase coverage by <.01%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2843      +/-\n==========================================\n+ Coverage   54.78%   54.78%   +<.01%   \n==========================================\n  Files         486      486            \n  Lines       99748    99750       +2   \n==========================================\n+ Hits        54643    54649       +6   \n+ Misses      45105    45101       -4\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.03% <0%> (+0.36%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e20b46e...6742caf. Read the comment docs.\n. # Codecov Report\nMerging #2844 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster   #2844      +/-\n=========================================\n+ Coverage   54.78%   54.8%   +0.02%   \n=========================================\n  Files         486     486            \n  Lines       99748   99750       +2   \n=========================================\n+ Hits        54643   54670      +27   \n+ Misses      45105   45080      -25\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.77% <0%> (+0.03%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 65.03% <0%> (+0.36%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update e20b46e...8296880. Read the comment docs.\n. # Codecov Report\nMerging #2845 into master will increase coverage by 0.01%.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2845      +/-\n==========================================\n+ Coverage   54.82%   54.83%   +0.01%   \n==========================================\n  Files         487      486       -1   \n  Lines      100451    99478     -973   \n==========================================\n- Hits        55070    54552     -518   \n+ Misses      45381    44926     -455\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 40.1% <0%> (+2.73%) | :arrow_up: |\n| Shared/SystemUtils.swift | 48.48% <0%> (-15.16%) | :arrow_down: |\n| ThirdParty/ecec/src/base64url.c | 63.23% <0%> (-9.66%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 15.05% <0%> (-8.03%) | :arrow_down: |\n| Shared/AppInfo.swift | 63.63% <0%> (-6.96%) | :arrow_down: |\n| Storage/Site.swift | 71.87% <0%> (-6.92%) | :arrow_down: |\n| Client/Frontend/Home/HomePanelViewController.swift | 58.73% <0%> (-6.75%) | :arrow_down: |\n| ThirdParty/ecec/include/ece.h | 32.14% <0%> (-6.1%) | :arrow_down: |\n| Shared/DeviceInfo.swift | 76.78% <0%> (-3.58%) | :arrow_down: |\n| Client/Frontend/Widgets/TabsButton.swift | 76.92% <0%> (-3.5%) | :arrow_down: |\n| ... and 60 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 41feaef...081bc7a. Read the comment docs.\n. # Codecov Report\nMerging #2846 into master will decrease coverage by 8.43%.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89.22%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ... and 149 more | |\n. # Codecov Report\n\nMerging #2847 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #2849 into master will decrease coverage by 0.03%.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster    #2849      +/-\n==========================================\n- Coverage   54.81%   54.78%   -0.04%   \n==========================================\n  Files         486      486            \n  Lines       99753    99727      -26   \n==========================================\n- Hits        54683    54637      -46   \n- Misses      45070    45090      +20\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Shared/SystemUtils.swift | 48.48% <0%> (-15.16%) | :arrow_down: |\n| Shared/AppInfo.swift | 63.63% <0%> (-11.37%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 15.55% <0%> (-7.53%) | :arrow_down: |\n| Client/Frontend/Widgets/TabsButton.swift | 76.92% <0%> (-3.5%) | :arrow_down: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 63.14% <0%> (-1.89%) | :arrow_down: |\n| ClientTests/ActivityStreamTests.swift | 93.26% <0%> (-1.04%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (-0.07%) | :arrow_down: |\n| Client/Frontend/Home/HistoryPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Sync/Synchronizers/ClientsSynchronizer.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ... and 11 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4d0635f...c2f594c. Read the comment docs.\n. # Codecov Report\nMerging #2850 into master will decrease coverage by 0.02%.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.69% <0%> (-0.06%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #2852 into master will decrease coverage by 8.48%.\nThe diff coverage is 37.73%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Account/FirefoxAccount.swift | 25.92% <0%> (-1.53%) | :arrow_down: |\n| Sync/Synchronizers/ClientsSynchronizer.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Providers/Profile.swift | 33.63% <0%> (-5.56%) | :arrow_down: |\n| Account/FxAClient10.swift | 9.6% <0%> (-1.22%) | :arrow_down: |\n| StorageTests/SyncCommandsTests.swift | 96.51% <100%> (\u00f8) | :arrow_up: |\n| TestBookmarksRepairRequestor.swift | 93.36% <100%> (\u00f8) | :arrow_up: |\n| ClientTests/ResetTests.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| StorageTests/TestSQLiteRemoteClientsAndTabs.swift | 77.14% <100%> (\u00f8) | :arrow_up: |\n| Storage/SQL/RemoteTabsTable.swift | 69.62% <50%> (-4.36%) | :arrow_down: |\n| Storage/Clients.swift | 64.1% <83.33%> (+2.99%) | :arrow_up: |\n| ... and 162 more | |\n. # Codecov Report\n\nMerging #2855 into master will decrease coverage by 8.42%.\nThe diff coverage is 0%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Strings.swift | 22.22% <\u00f8> (\u00f8) | :arrow_up: |\n| Providers/Profile.swift | 32.6% <0%> (-4.79%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ... and 154 more | |\n. # Codecov Report\n\nMerging #2856 into master will increase coverage by <.01%.\nThe diff coverage is 0%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/HistoryPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ...Frontend/Widgets/ActivityStreamHighlightCell.swift | 23.23% <0%> (-0.73%) | :arrow_down: |\n| Client/Frontend/Home/BookmarksPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/RecentlyClosedTabsPanel.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/SearchViewController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.74% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n. # Codecov Report\n\nMerging #2858 into master will increase coverage by 0.02%.\nThe diff coverage is 25%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ClientTests/ProfileTest.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 37.61% <11.42%> (-1.44%) | :arrow_down: |\n| Client/Application/TestAppDelegate.swift | 25% <50%> (+2.77%) | :arrow_up: |\n| Providers/Profile.swift | 33.83% <83.33%> (+1.22%) | :arrow_up: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.77% <0%> (+0.03%) | :arrow_up: |\n| Client/Frontend/Browser/TabScrollController.swift | 15.5% <0%> (+4.27%) | :arrow_up: |\n. # Codecov Report\n\nMerging #2859 into master will decrease coverage by 6.15%.\nThe diff coverage is 0%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 38.92% <0%> (-5.85%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89.22%) | :arrow_down: |\n| ... and 153 more | |\n. # Codecov Report\n\nMerging #2861 into master will decrease coverage by 0.3%.\nThe diff coverage is 0%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...ontend/Settings/SettingsNavigationController.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Telemetry/CorePing.swift | 0% <0%> (-83.1%) | :arrow_down: |\n| Client/Frontend/Intro/IntroViewController.swift | 0% <0%> (-66.55%) | :arrow_down: |\n| ThirdParty/Reachability.swift | 0% <0%> (-40.39%) | :arrow_down: |\n| Shared/UserAgent.swift | 44.82% <0%> (-39.09%) | :arrow_down: |\n| Telemetry/Telemetry.swift | 2.7% <0%> (-36.49%) | :arrow_down: |\n| Client/Telemetry/ClientTelemetry.swift | 0% <0%> (-28.13%) | :arrow_down: |\n| Providers/NSUserDefaultsPrefs.swift | 61.42% <0%> (-15.72%) | :arrow_down: |\n| Shared/Logger.swift | 43.9% <0%> (-9.76%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 14.1% <0%> (-8.98%) | :arrow_down: |\n| ... and 45 more | |\n. # Codecov Report\n\nMerging #2862 into master will decrease coverage by 8.43%.\nThe diff coverage is 90.9%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/Bookmarks/Trees.swift | 73.4% <0%> (-0.79%) | :arrow_down: |\n| ...c/Synchronizers/Bookmarks/ThreeWayTreeMerger.swift | 75.42% <100%> (\u00f8) | :arrow_up: |\n| Shared/Extensions/ArrayExtensions.swift | 94.11% <100%> (-5.89%) | :arrow_down: |\n| SharedTests/ArrayExtensionTests.swift | 100% <100%> (\u00f8) | :arrow_up: |\n| Sync/Info.swift | 91.66% <100%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ... and 157 more | |\n. # Codecov Report\n\nMerging #2863 into master will increase coverage by 0.09%.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Storage/SQL/SQLiteHistory.swift | 72.27% <100%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.73% <0%> (-0.02%) | :arrow_down: |\n| XCUITests/BookmarkingTests.swift | | |\n| UITests/BookmarksPanelTests.swift | | |\n| XCUITests/AuthenticationTest.swift | | |\n| XCUITests/ScreenGraph.swift | | |\n| XCUITests/NoImageTests.swift | | |\n| UITests/DomainAutocompleteTests.swift | | |\n| XCUITests/NightModeTests.swift | | |\n| UITests/LoginManagerTests.swift | | |\n| ... and 31 more | |\n. # Codecov Report\n\nMerging #2865 into master will decrease coverage by 8.41%.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89.22%) | :arrow_down: |\n| ...end/Login Management/LoginListViewController.swift | 0% <0%> (-89.05%) | :arrow_down: |\n| ... and 150 more | |\n. # Codecov Report\n\nMerging #2869 into master will increase coverage by 0.02%.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| SyncTests/TestBookmarkModel.swift | 85.25% <0%> (-0.65%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.85% <0%> (+0.04%) | :arrow_up: |\n. # Codecov Report\n\nMerging #2870 into master will decrease coverage by 52.5%.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| XCUITests/CompactModeUITests.swift | 100% <100%> (\u00f8) | |\n| ClientTests/PrefsTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| ClientTests/PanelDataObserversTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| Shared/Extensions/DictionaryExtensions.swift | 0% <0%> (-100%) | :arrow_down: |\n| ReadingList/ReadingListClientMetadata.swift | 0% <0%> (-100%) | :arrow_down: |\n| StorageTests/TestSQLiteMetadata.swift | 0% <0%> (-100%) | :arrow_down: |\n| ReadingList/ReadingListUtils.swift | 0% <0%> (-100%) | :arrow_down: |\n| ClientTests/UIPasteboardExtensionsTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| StorageTests/CertTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| ClientTests/ResetTests.swift | 0% <0%> (-100%) | :arrow_down: |\n| ... and 372 more | |\n. # Codecov Report\n\nMerging #2877 into master will decrease coverage by 7.22%.\nThe diff coverage is 33.33%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Account/FirefoxAccount.swift | 27.45% <\u00f8> (\u00f8) | :arrow_up: |\n| Shared/Extensions/KeychainWrapperExtensions.swift | 24.24% <10.71%> (-75.76%) | :arrow_down: |\n| Shared/KeychainCache.swift | 78.12% <100%> (+1.45%) | :arrow_up: |\n| Sync/State.swift | 85.9% <100%> (\u00f8) | :arrow_up: |\n| Providers/Profile.swift | 34.34% <66.66%> (-3.33%) | :arrow_down: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ... and 133 more | |\n. # Codecov Report\n\nMerging #2878 into master will decrease coverage by 0.02%.\nThe diff coverage is 50%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../Frontend/Widgets/ActionOverlayTableViewCell.swift | 0% <\u00f8> (\u00f8) | :arrow_up: |\n| ...end/Widgets/ActionOverlayTableViewController.swift | 3.03% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.27% <\u00f8> (\u00f8) | :arrow_up: |\n| ...ent/Frontend/Home/ActivityStreamTopSitesCell.swift | 74.55% <\u00f8> (\u00f8) | :arrow_up: |\n| ...Frontend/Widgets/ActivityStreamHighlightCell.swift | 23.23% <\u00f8> (\u00f8) | :arrow_up: |\n| Client/Helpers/DynamicFontHelper.swift | 28.26% <50%> (-2.99%) | :arrow_down: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.75% <0%> (-0.05%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n. # Codecov Report\n\nMerging #2879 into master will decrease coverage by 8.42%.\nThe diff coverage is 70.58%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.42% <70.58%> (+0.14%) | :arrow_up: |\n| Client/Frontend/Widgets/ToggleButton.swift | 0% <0%> (-97.27%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (-94.89%) | :arrow_down: |\n| Client/Frontend/Widgets/SearchInputView.swift | 0% <0%> (-93.75%) | :arrow_down: |\n| ...tend/Settings/AppSettingsTableViewController.swift | 0% <0%> (-91.61%) | :arrow_down: |\n| ...enu/Items/PagingMenuItemCollectionViewLayout.swift | 0% <0%> (-91.38%) | :arrow_down: |\n| ...ent/Frontend/Widgets/Menu/Items/MenuItemView.swift | 0% <0%> (-90.75%) | :arrow_down: |\n| ...lient/Frontend/Menu/MenuPresentationAnimator.swift | 0% <0%> (-90%) | :arrow_down: |\n| .../Frontend/Settings/LoginDetailViewController.swift | 0% <0%> (-89.74%) | :arrow_down: |\n| ...Settings/ClearPrivateDataTableViewController.swift | 0% <0%> (-89.22%) | :arrow_down: |\n| ... and 152 more | |\n. # Codecov Report\n\nMerging #2880 into master will increase coverage by 0.01%.\nThe diff coverage is 100%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...Frontend/Widgets/ActivityStreamHighlightCell.swift | 17.39% <100%> (-5.85%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.81% <0%> (+0.02%) | :arrow_up: |\n| Client/Frontend/Home/ActivityStreamPanel.swift | 64.62% <0%> (+0.35%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n. # Codecov Report\n\nMerging #2882 into master will decrease coverage by <.01%.\nThe diff coverage is n/a.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.79% <0%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #2883 into master will decrease coverage by 0.03%.\nThe diff coverage is 0%.\n\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Application/AppDelegate.swift | 37.67% <0%> (+0.17%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.7% <0%> (-0.1%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n. # Codecov Report\n\nMerging #2890 into v8.x will decrease coverage by 0.04%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nv8.x    #2890      +/-\n==========================================\n- Coverage   54.84%   54.79%   -0.05%   \n==========================================\n  Files         485      485            \n  Lines      100027   100035       +8   \n==========================================\n- Hits        54859    54818      -41   \n- Misses      45168    45217      +49\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Account/FirefoxAccount.swift | 27.27% <100%> (+1.34%) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | 23.37% <0%> (-37.67%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-24.01%) | :arrow_down: |\n| Client/Frontend/Browser/TabScrollController.swift | 11.22% <0%> (-4.28%) | :arrow_down: |\n| Client/Frontend/Browser/OpenSearch.swift | 70.45% <0%> (-1.14%) | :arrow_down: |\n| ThirdParty/ecec/include/ece/keys.h | 100% <0%> (\u00f8) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.82% <0%> (+0.01%) | :arrow_up: |\n| SyncTests/TestBookmarkModel.swift | 85.89% <0%> (+0.64%) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 6ea6f88...afaa3e8. Read the comment docs.\n. # Codecov Report\nMerging #2988 into v8.x will increase coverage by 24.8%.\nThe diff coverage is 71.42%.\n\n\n```diff\n@@            Coverage Diff             @@\nv8.x    #2988      +/-\n==========================================\n+ Coverage   29.74%   54.54%   +24.8%   \n==========================================\n  Files         394      485      +91   \n  Lines       88257   100177   +11920   \n==========================================\n+ Hits        26254    54645   +28391   \n+ Misses      62003    45532   -16471\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 27.93% <66.66%> (+0.23%) | :arrow_up: |\n| Client/Application/AppDelegate.swift | 39.07% <72.22%> (+2.73%) | :arrow_up: |\n| Client/Frontend/Widgets/ThumbnailCell.swift | 0% <0%> (-79.37%) | :arrow_down: |\n| Client/Frontend/Home/TopSitesPanel.swift | 0% <0%> (-52.84%) | :arrow_down: |\n| Shared/AssertionUtils.swift | 0% <0%> (-50%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 23.37% <0%> (-33.77%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-18.67%) | :arrow_down: |\n| Client/Helpers/DynamicFontHelper.swift | 28.26% <0%> (-6.53%) | :arrow_down: |\n| SyncTests/StorageClientTests.swift | 97.5% <0%> (\u00f8) | |\n| StorageTests/CertTests.swift | 100% <0%> (\u00f8) | |\n| ... and 287 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 16fe4ad...9ae9dc0. Read the comment docs.\n. # Codecov Report\nMerging #3031 into v8.x will increase coverage by 25.41%.\nThe diff coverage is 67.64%.\n\n\n```diff\n@@             Coverage Diff             @@\nv8.x    #3031       +/-\n===========================================\n+ Coverage   29.48%   54.89%   +25.41%   \n===========================================\n  Files         391      482       +91   \n  Lines       87455    99339    +11884   \n===========================================\n+ Hits        25789    54537    +28748   \n+ Misses      61666    44802    -16864\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.56% <40%> (+0.86%) | :arrow_up: |\n| Client/Frontend/Intro/IntroViewController.swift | 63.15% <69.07%> (-3.15%) | :arrow_down: |\n| Client/Application/LeanplumIntegration.swift | 17.82% <0%> (-39.61%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-18.67%) | :arrow_down: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/Clearables.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/OldStrings.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ClientTests/ClientTests.swift | 98.33% <0%> (\u00f8) | |\n| StorageTests/TestSQLiteMetadata.swift | 100% <0%> (\u00f8) | |\n| ClientTests/PrefsTests.swift | 100% <0%> (\u00f8) | |\n| ... and 283 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update dd5849d...fdc99ea. Read the comment docs.\n. # Codecov Report\nMerging #3049 into st3fan/Bug1389355StayInTheKnow will decrease coverage by 0.04%.\nThe diff coverage is 5.55%.\n\n\n```diff\n@@                        Coverage Diff                         @@\nst3fan/Bug1389355StayInTheKnow    #3049      +/-\n==================================================================\n- Coverage                           54.89%   54.85%   -0.05%   \n==================================================================\n  Files                                 482      482            \n  Lines                               99339    99374      +35   \n==================================================================\n- Hits                                54537    54514      -23   \n- Misses                              44802    44860      +58\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...lient/Frontend/Browser/BrowserViewController.swift | 28.49% <0%> (-0.07%) | :arrow_down: |\n| Client/Helpers/FxALoginHelper.swift | 4.93% <6.66%> (+0.29%) | :arrow_up: |\n| ThirdParty/sqlcipher/sqlite3.c | 62.25% <0%> (-0.06%) | :arrow_down: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update fdc99ea...ef211de. Read the comment docs.\n. # Codecov Report\nMerging #3063 into v8.x will increase coverage by 25.57%.\nThe diff coverage is 6.66%.\n\n\n```diff\n@@             Coverage Diff             @@\nv8.x    #3063       +/-\n===========================================\n+ Coverage   29.28%   54.85%   +25.57%   \n===========================================\n  Files         391      482       +91   \n  Lines       87455    99313    +11858   \n===========================================\n+ Hits        25607    54479    +28872   \n+ Misses      61848    44834    -17014\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Helpers/FxALoginHelper.swift | 4.93% <6.66%> (+0.29%) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | 17.82% <0%> (-39.61%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-18.67%) | :arrow_down: |\n| Client/Frontend/Settings/Clearables.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/OldStrings.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| StorageTests/CertTests.swift | 100% <0%> (\u00f8) | |\n| SharedTests/FeatureSwitchTests.swift | 96.62% <0%> (\u00f8) | |\n| StorageTests/TestSQLiteHistory.swift | 97.18% <0%> (\u00f8) | |\n| ClientTests/MockProfile.swift | 34.21% <0%> (\u00f8) | |\n| ... and 287 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 4da1ee1...0881b1f. Read the comment docs.\n. # Codecov Report\nMerging #3072 into v8.x will increase coverage by 25.31%.\nThe diff coverage is 0%.\n\n\n```diff\n@@             Coverage Diff             @@\nv8.x    #3072       +/-\n===========================================\n+ Coverage   29.55%   54.86%   +25.31%   \n===========================================\n  Files         391      482       +91   \n  Lines       87484    99313    +11829   \n===========================================\n+ Hits        25855    54490    +28635   \n+ Misses      61629    44823    -16806\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| Client/Helpers/FxALoginHelper.swift | 4.93% <0%> (\u00f8) | :arrow_up: |\n| Client/Application/LeanplumIntegration.swift | 17.82% <0%> (-39.61%) | :arrow_down: |\n| Client/Application/AdjustIntegration.swift | 18.66% <0%> (-18.67%) | :arrow_down: |\n| Client/Frontend/OldStrings.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/Clearables.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| SyncTests/MockSyncServer.swift | 74.29% <0%> (\u00f8) | |\n| FxA/FxATests/FxATests.m | 100% <0%> (\u00f8) | |\n| SyncTests/StateTests.swift | 95.34% <0%> (\u00f8) | |\n| ClientTests/AuthenticatorTests.swift | 90.74% <0%> (\u00f8) | |\n| ... and 281 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f857653...bb48176. Read the comment docs.\n. # Codecov Report\nMerging #3130 into v8.x will increase coverage by 25.51%.\nThe diff coverage is n/a.\n\n\n```diff\n@@             Coverage Diff             @@\nv8.x    #3130       +/-\n===========================================\n+ Coverage   29.64%   55.16%   +25.51%   \n===========================================\n  Files         391      482       +91   \n  Lines       87518    99347    +11829   \n===========================================\n+ Hits        25949    54801    +28852   \n+ Misses      61569    44546    -17023\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| ...tensions/NSMutableAttributedStringExtensions.swift | 66.66% <0%> (-33.34%) | :arrow_down: |\n| Client/Frontend/Browser/TabLocationView.swift | 38.4% <0%> (-7.98%) | :arrow_down: |\n| Client/Frontend/OldStrings.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Settings/Clearables.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| Client/Frontend/Browser/BrowserTrayAnimators.swift | 0% <0%> (\u00f8) | :arrow_up: |\n| ClientTests/TestBookmarks.swift | 82.6% <0%> (\u00f8) | |\n| StoragePerfTests/StoragePerfTests.swift | 100% <0%> (\u00f8) | |\n| StorageTests/SyncTelemetryTests.swift | 97.64% <0%> (\u00f8) | |\n| AccountTests/HawkHelperTests.swift | 100% <0%> (\u00f8) | |\n| PushTests/LivePushClientTests.swift | 100% <0%> (\u00f8) | |\n| ... and 291 more | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 92507e7...51172e8. Read the comment docs.\n. \n",
    "alessiobrozzi": "Thanks for the comments and advice! I implemented the suggested changes. Hi Stephan, do you think the implemented changes are good?. No worries, I moved the Mozilla start page string to the Strings.swift file. Are the changes good?. Just git rebased, does it look good to go?. It seems that that line was indented 3 spaces, while the rest of the document to 4. Would you still like me to remove the additional space?. I added the return here, however this means avoiding scaling the icon.. Is that correct? Or were you thinking of placing the return statement somewhere else?. ",
    "yonglam": "It's swift 3 now. Make sure you build Fennec target. . ",
    "KelCodesStuff": "I build the Fennec target and I got the same errors when converting to Swift 3. \nI also get an error on this line\n log.error(\"Failed to create/update the scheme table. Aborting.\") fatalError(). ",
    "focusspan": "I skipped the converting to Swift 3 syntax dialog and just built the Fennec target, that worked.. ",
    "MoMitch": "Thanks, the functionality should be enabled now so any enabled site:\nAn inline site, video use to play in fullscreen and will now play inline as intended: https://9to5mac.com/2016/06/15/ios-10-inline-video-playback-safari/\nAirplay functionality should be available on any youtube video etc.\nPicture in Picture is a bit rarer and I haven't found a source to test, but this should allow developers the option in firefox-ios if needed.\n. @cvan I found that same article and had a read through when starting this patch, from testing inline videos I think the patch is still required.\nWhile iOS has now allowed the inline playback functionality this still needs to be set here as to honor the playInline video tag, as of right now videos can play inline however on click they will go to fullscreen, this patch ensures that videos can play inline from the start which is the current intended iOS behaviour.. ",
    "Sdaswani": "@farhanpatel we have to use an open source SDK, a beta version of which you can find here: https://bugzilla.mozilla.org/show_bug.cgi?id=1353795\nAny advice on importing it via Carthage or Cocoapods? I haven't had a chance to dig in and see how we can swap out the closed source version and put this one in.. @farhanpatel I agree the whitespace changes make it very difficult to review this easily. @bkmunar I think you said it was part of @st3fan patch for the initial LP inclusion but if you can remove them it would be best.. @bkmunar and @sleroux  , where should we actually set the LEANPLUM_KEY_PRODUCTION?. Thanks @sleroux - @bkmunar says he set them up in BB already.. Thanks for the +2 @sleroux . @st3fan mentioned the feature flag but we can just revert this revert when we are ready, or cherry pick the changes in. . LGTM, please merge.. I'm cc'ing @st3fan here as this is something we have to ship in 8.0 and want to get this thoughts on what @sleroux last posted.. @sleroux created this bug for the UITest https://bugzilla.mozilla.org/show_bug.cgi?id=1371031. Sorry @AaronMT - that is what this code change should do : once the setting is flipped, it's flipped, not other interaction required. @bkmunar has tested and confirmed this but there should definitely be a test case for it during 8.0 stabilization.. I was also concerned about the crash but I saw the explicit construction just above so didn't worry about it. But I agree it doesn't hurt to be defensive though we may want to log or assert as if it does crash something really bad will probably happen soon (out of memory?).. Duh I mean we can assert it's not nil because it really should never be unless the app has run out of memory.. Let's just call it 'First Run'.. Let's just call it 'Second Run'.. Do we need this change?. Let's be consistent with naming the events - Normal english, but all words capitalized. So 'Open New Tab' instead.. Remove this whitespace?. Let's follow all upper case with LP events - so 'Open Telephone Link'.. Let's make it 'Open Mailto Link'. Let's make it 'Download Media - Saved Image'. Let's make it 'Save Login and Password'. Let's make it \"Close Private Tabs When Leaving Private Browsing\". Let's make it \"Interact With Search URL Area\". Why are you confining the URL here to this URL? It should be set in the template dictionary?. I don't think we need these String, right? Everything comes from LP so we don't need to localize anything?. Stefan, since the events are consumed by Product/Marketing, in the past I've recommended human readable names. The important thing is that we are consistent and we advertise a 'legend' to Product/Marketing (so that is why an enum would help, as @farhanpatel suggested), so if you feel strongly about no spaces, please let us know.. Not sure why it should move to the LeanplumIntegration @farhanpatel ? I think that should serve as a wrapper for the LP SDK only, so not sure why this logic (which concerns the use of LP) should move there? I don't think it will used by other users of LeanplumIntegration so no benefit putting it there. Overall though, not a huge deal. :). No, I don't believe - more of the whitespace changes.\n. OK, separation of concerns noted :) . I would then suggest we put it in a third, new place, as whether focus is installed or not can be of general concern to a range of parties, including MMA. Maybe in a class in the Shared directory?. https://bugzilla.mozilla.org/show_bug.cgi?id=1359643. Do this before the openURL as that may take you away from application so LP may not track it at all ;) .. Why is this override needed? I don't see any LP tracking in here?. @sleroux said that option disallowed us from downloading binaries via Carthage, so I removed it.. Note @sleroux that we asked them for the binaries and they prefer we use them rather than compile. They are currently working out the situation with Fennec Android to allow Taipei team to compile from source though. So if we want to compile from source we probably can - let me know.. Yes we can. But weirdly even though the Cartfile only pulls in the LP framework, Carthage still downloads the two other frameworks.. @jhugman unfortunately there is no LeanPlum.stop - I checked with them. @st3fan flipping off Send Anonymous Usage Data does indeed disable all further calls to LeanPlum in the current run. But LeanPlum is technically still running until the next cold-boot (since there is no stop).. @bkmunar should be quick to fix.. @bkmunar should be quick to fix.. @jhugman fair point. @bkmunar make start() fileprivate, and then in the AppDelegate, just call LeanplumIntegration.setEnabled(true).. @bkmunar should be quick to fix.. @bkmunar should be quick to fix.. Fair enough @jhugman - I'm meeting with Legal / Privacy to address this concern already, and note that product will make the ultimate decision on this. As we discussed, we are only tracking telemetry, and nothing about the contents of your private session.. @bkmunar should be quick to fix.. Sorry @jhugman - isn't @bkmunar just doing what the Adjust initialization is doing right above?. Yes, the reason is we don't compile LP, but we just import the binary, and the --no-use-binaries option specifically disallows importing the binary. This was a fix suggested by @sleroux .. @bkmunar should be quick to fix.. That is a great point @jhugman - if we send down a bad url from LP's dashboard, we shouldn't show the toast if the user can't even act on it. Of course we would test this so it shouldn't be a practical concern, but James is right to prevent it technically.. @bkmunar cc @st3fan this used the IDFA, right? we need to use the IDFV.. @bkmunar cc @st3fan we need to use the IDFV here to setDeviceID.. Done.. From Leanplum, about a month back:\n\"We do not have a hard limit for event names, but they can become difficult to read and work with when they get very long. \nI tested with this event name and had no issues: \nadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdfadfssdfsdf\"\nI am using standard english here as the audience for consuming them is the marketing team.. @bkmunar will fix this up later - no rush though: https://bugzilla.mozilla.org/show_bug.cgi?id=1367963. On the first point - sorry, I guess I was getting cute with guard ;) .\nOn the second point, I completely agree - I was thought it was weird and now I see a better way.. @bkmunar will work on this for 9.0: https://bugzilla.mozilla.org/show_bug.cgi?id=1367966, or maybe an 8.x. Sure.. I think your first concern is a minor, so I'll punt on it for now. But your second point is right - when @bkmunar refactored this per @jhugman review, he got the logic flipped (it happens :) ).. Ah, I just added a ! to flip the logic to be correct. Let me know if this is a must.. Noted: https://bugzilla.mozilla.org/show_bug.cgi?id=1367968. Removing it and will have @bkmunar fix: https://bugzilla.mozilla.org/show_bug.cgi?id=1367969. Changed to Save Image.. Removed, but where do I put them now? Buddybuild? Leanplum isn't initializing correctly any longer.\n2017-05-25 22:36:28.490 Client[27449:1001765] Leanplum: Error: [Leanplum setAppId:withDevelopmentKey:] Empty appId parameter provided.. @st3fan just a reminder here - I took out the API keys so where can I put them now?. You should pin this to a version, i.e., 2.0.0.. What are these comments for? What is being disabled here?. Since we require being on the main thread per the asserts, should the routeURL call be explicitly placed on the main thread?. Do this before you enable or disable it, as if you disable it, it may not get to Leanplum. Please test this too.. Yes, in the future we will be making setEnabled shut off LeanPlum immediately: https://bugzilla.mozilla.org/show_bug.cgi?id=1353820. If we aren't on the main thread, what happens? Does the App crash?. OK, will defer to @sleroux on this.. @bkmunar please fix this before merging.. I prefer removing the comments and adding a comment with reference to a bugzilla, but at least add a comment as @sleroux suggests.. Agree we should refactor this into somewhere else but not sure LeanplumIntegration is a great place. If you don't find it another home, once again create a bug and include a reference to it in a comment.. I agree - the delegate is likely called on the main thread. I'm happy to keep the assert and we will just find out if our assumption is wrong during testing hopefully. I don't see anything in the docs on what thread it is called on!. Change the Info to: \"Source: External App or Extension\". Change the Info to: \"Source: Menu\". Change the Info to: \"Source: Long Press Context Menu\". Change the Info to: \"Source: Tab Tray\". Change the Info to: \"Source: Activity Stream Long Press Context Menu\". Yes please make a bug so we don't forget about it.. This should not be checked in.. This variable isn't used? Please remove.. Is this a fix for something that was missing?. Oops I meant the hardcoded app id and keys down below @sleroux .. Don't check this in. cc @sleroux . Don't check this in. cc @sleroux . Yes, this was my oversight - it's why I had @bkmunar fake a map with a string 'Source: Something'. @bkmunar please go back and change this to a map instead of a info string.. Yes, this is in the wrong place - it should be in the UserAttributeKeyName enum.. Sorry, it's a heading - will fix.. I have been told it's the same, so I did copy it wholesale, but I'll generate the same for iOS and put it in here.. Will Do.. Oopsie!. It is indeed the same for iOS and Android, which I confirmed after I captured the contents.. Yeah it's iOS.. Yeah it's iPhone :) .. Not sure, but iOS also has 'detect' as the region as we strip it out.. The change was made since profile.hasAccount() is not necessarily true even though the user just signed in (since verification may be required). So now we check in two places to see if the user is truly logged in. Sign out is handled in another file and I've validated that works already.. Why did you get rid of getting the raw value?. But does that different function use the raw value?. ok cool.. I think you should this be 'as! Number', as Leanplum has told me it needs to be sent as a number for > comparisons to work. Here are the LP docs: https://www.leanplum.com/docs/ios/users#user-attributes. A check against the enabled locales makes sense. Maybe expose https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Application/LeanplumIntegration.swift#L90 in a public method and then use it both internally and externally?. So should we have both? . ",
    "johnnynanjiang": "For your reference\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=721859. ",
    "dalroy44": "Issue still persist on iOS 10 Firefox 7.5 iPad\n1. Open the minimal reproducer http://plnkr.co/edit/f7xYjRksoZLPK5SVtKng?p=preview\nClicking on Download button will give message of invalid address.. ",
    "eoger": "Thanks for the feedback, commit amended.. I don't really know how to react regarding that failing build, I don't think my changes triggered it... Anyway this is ready for merge.. It is already at the tip actually. Closing because buddybuild is dumb. Added tests. Reopening this in a different PR since buddybuild fails.. Ready for review!. Looks all right to me \ud83d\udc4d. We should also probably add some telemetry tests (check if we record the events) for the BookmarksRepairRequestor.\nSee the desktop tests.. PR updated, thanks.. Merging blocked on bug 1396923.. @rnewman In endSingleBatch(), in batched mode, is this okay if I return the first POST (not the commit=true one) response? Or is lastModified going to be wrong, and I should instead return succeeded from the first POST response and the lastModified from the commiting one?. Fixed the problem in https://github.com/mozilla-mobile/firefox-ios/pull/2912#issuecomment-317284199, this is ready for another review round. Added more tests, thanks!. @rnewman Thanks a lot for your mentorship Richard, I really appreciated it.\nCould you merge the PR by the way? (I can't). Done! Thanks.. Yep, done. - Comments addressed\n- Clear pending bookmarks deletions on sync disconnection\n- Tests added. > The next part is to implement removeByGUID for the factory such that it adds to pending_deletions.\nCheck out SQLiteBookmarks#markBufferBookmarkAsDeleted :) . PR updated.. Updated, thank you for the review!. Updated, thanks!. I don't really know this part of code. This is more a rubber stamp than anything, so I'll trust you with these changes.. Sounds good \ud83d\udc4d . @rnewman f?. Added merge logic. Thanks for the review Justin.\nLanding this once the server changes are deployed in production.. This is not ready yet. This is ready for review now, I implemented this differently than the first time using prefs.\nIt should be easier to handle the CWTS page with prefs.. Thanks @rnewman,\nI amended my patch by adding a enginesEnablements prop to Scratchpad.. I amended my patch and also added a patch that handles the Choose What to Sync FxA Screen (bug #1139038). \ud83d\udc4d . Done, thank you. @rnewman Feel free to assign more people for review if needed.. Thank you @rnewman, FxA now owns the deviceName prop. I felt really bad about that getDeviceName hack. We don't have a clientName pref anymore, hence the commit p2 that splits StringSetting in two classes.. Thank you for the review!. Oops I got used so much to rnewman reviewing my iOS patches that I put his nickname in r= instead of yours Nick, very sorry about that :(. I'll hold on reviewing this until @rfk API changes proposal is adopted. I think this would more or less overwrite any change to meta/global that any other client would have made since our last sync.. Can you confirm that if another device changes enabled engines we don't overwrite their choice?. This field can be removed, it's not used anymore on FxA\n. Nit: in other calls you're using self.recordTelemetry, let's be consistent here :). Should this method belong here? I could be used in other modules later no?. Nitpick: if we could replace my \"IMPLEMENT ME\" deviceID by something less alarming :). I don't think this is true, we also return .completed when there's no new data. We do need an updated children field, which was why I introduced the clone method earlier in my PR. I think this is fine though.. I think this is fine, if we turn on proper merging we will never read the PendingBookmarksDeletions table anyway.. Fails the tests, let's keep it like this.. Ah yes that's actually a good idea\nEDIT: there is a problem with this approach, it might hide new errors. In that case enabledStateChanged will be false if we disable the engine which sounds wrong.. Note: If the settings views wrote directly to Scratchpad.PrefEnginesEnablements, we wouldn't have to do any of this.\nHowever I don't think it's a good idea for external actors to write directly into scratchpad prefs.. The tap-tap story is not great in my opinion, I believe we should start syncing (disablements AND enablements) after the user leaves the screen. This will avoid a lot of headaches and UI/sync races.. I started with that, then switched back to a single dictionary because of implementations reasons that are not there anymore.\nI wouldn't mind switching back, but I believe this is probably good enough.. We use them here: https://github.com/mozilla-mobile/firefox-ios/pull/3355/files#diff-7a45ce0d70d55bdf297fcacd47e4e874R1124\nBecause both the scratchpad and the enabled/disabled in engineConfiguration are protected.. This shows the FxA login page, I think this is a decent fallback for now.. Thanks, I added https://github.com/mozilla-mobile/firefox-ios/pull/3491/files#diff-e7993812e8ded083c5d2b13f1f46dc18R295 which does the same as Android.. I introduced a SettingValuePersister protocol in https://github.com/mozilla-mobile/firefox-ios/pull/3491/files#diff-6209ecb7e871159425f66f16eed90d7dR254. kid = kRT + kXCS only applies to kSync, maybe throw on scope != oldsync somewhere in this function. ",
    "HotWordland": "me too. ",
    "loyep": "me too. ",
    "mengtian-li": "\ndownloading Alamofire.framework binary due to the error:\n    \"API rate limit exceeded for 107.178.195.217. (But here's the good news: Authenticated requests get a higher rate limit. Check out the documentation for more details.)\"\n\ncan someone help me :(. ",
    "imesong": "xcrun swift -version\n---->\nApple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)\nTarget: x86_64-apple-macosx10.9. ",
    "jonnycoder": "I'm finding that the build for the scheme/target DeferredMac in dependency sleroux/Deferred as specified in the cartfile is broken, this doesn't seem to be truly compatible with Swift 3.\nNOTE:\n** I had to do the same for libPhoneNumber-iOS for the watchOS scheme, Sentry-Krash this is getting tedious, Mozilla team any comments?\nHere's what fixes it for me:\n- clone git@github.com:sleroux/Deferred.git in /firefox-ios/Carthage/Checkouts\n- checkout the Swift3.0 branch\n- open Deferred.xcodeproj in /firefox-ios/Carthage/Checkouts/Deferred\n- Remove schemes/targets for DeferredMac (including tests)\n- run 'carthage build' in /firefox-ios\nAll dependencies now build frameworks into /firefox-ios/Carthage/Build/iOS\n. @BDogs I am up and running, it took some wrenching on the dependencies to get them to compile under swift 3.0, see my post above.  I suspect the Mozilla team have a custom CI/CD that compiles projects under multiple versions of the Swift runtime.\nGet in touch if you like.. ",
    "BDogs": "How can deal with this, seek for help. ",
    "arisun": "Command failed due to signal: Segmentation fault: 11 on Storage framework.\nUnable to build. seek for help.\nLog\nCompileSwift normal x86_64 /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistory.swift\n    cd /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios\n    \"/Volumes/Macintosh HD/Xcode_8.2.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift\" -frontend -c \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/History.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksModel.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/MockLogins.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Logins.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteLogins.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistoryRecommendations.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Sharing.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteRemoteClientsAndTabs.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/GenericTable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksSyncing.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Clients.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksResetting.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Syncable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/RecentlyClosedTabs.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/RemoteTabsTable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/ExtensionUtils.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SyncQueue.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/Trees.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Metadata.swift\" -primary-file \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistory.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteQueue.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SyncCommandsTable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/CompletionOps.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/Bookmarks.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/DefaultSuggestedSites.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Visit.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SchemaTable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/DiskImageStore.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/PageMetadata.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/FileAccessor.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksHelpers.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/FaviconsTable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteMetadata.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/CertStore.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/BookmarksModel.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Site.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SuggestedSites.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistoryFactories.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Queue.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/BrowserTable.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/BrowserDB.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/CachingItemSource.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/RemoteTabs.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Favicons.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksBase.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/DeferredDBOperation.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/ThirdParty/SwiftData.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Cursor.swift\" \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/DatabaseError.swift\" -target x86_64-apple-ios9.0 -enable-objc-interop -sdk \"/Volumes/Macintosh HD/Xcode_8.2.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.2.sdk\" -I /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Fennec-iphonesimulator -I \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/modules\" -F /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Fennec-iphonesimulator -F \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Carthage/Build/iOS\" -F /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Release-iphonesimulator -application-extension -enable-testing -g -import-objc-header \"/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Storage-Bridging-Header.h\" -module-cache-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/ModuleCache -D MOZ_CHANNEL_FENNEC -serialize-debugging-options -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-generated-files.hmap -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-own-target-headers.hmap -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-project-headers.hmap -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Fennec-iphonesimulator/include -Xcc -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Xcc \"-I/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios\" -Xcc \"-I/Volumes/Macintosh HD/Xcode_8.2.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.2.sdk/usr/include/libxml2\" -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Release-iphonesimulator/include -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/DerivedSources/x86_64 -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/DerivedSources -Xcc -DDEBUG=1 -Xcc \"-working-directory/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios\" -emit-module-doc-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory~partial.swiftdoc -Onone -module-name Storage -emit-module-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory~partial.swiftmodule -serialize-diagnostics-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.dia -emit-dependencies-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.d -emit-reference-dependencies-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.swiftdeps -o /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.o\n0  swift                    0x00000001119fd3ad PrintStackTraceSignalHandler(void) + 45\n1  swift                    0x00000001119fcb56 SignalHandler(int) + 790\n2  libsystem_platform.dylib 0x0000000113a4d52a _sigtramp + 26\n3  swift                    0x000000010eff57ca swift::Lowering::TypeLowering const swift::CanTypeVisitor<(anonymous namespace)::LowerType, swift::Lowering::TypeLowering const>::visit<>(swift::CanType) + 2042\n4  swift                    0x000000010ebe0ca3 (anonymous namespace)::ArgEmitter::emitExpanded(swift::Lowering::ArgumentSource&&, swift::Lowering::AbstractionPattern) + 2131\n5  swift                    0x000000010ebdde29 (anonymous namespace)::ArgEmitter::emit(swift::Lowering::ArgumentSource&&, swift::Lowering::AbstractionPattern) + 249\n6  swift                    0x000000010ebdd407 (anonymous namespace)::CallSite::emit(swift::Lowering::SILGenFunction&, swift::Lowering::AbstractionPattern, (anonymous namespace)::ParamLowering&, llvm::SmallVectorImpl&, llvm::SmallVectorImpl >&, llvm::Optional const&, swift::ImportAsMemberStatus const&) && + 519\n7  swift                    0x000000010ebda09b (anonymous namespace)::CallEmission::apply(swift::Lowering::SGFContext) + 5339\n8  swift                    0x000000010ec298c5 swift::ASTVisitor<(anonymous namespace)::RValueEmitter, swift::Lowering::RValue, void, void, void, void, void, swift::Lowering::SGFContext>::visit(swift::Expr, swift::Lowering::SGFContext) + 117\n9  swift                    0x000000010ebb48a4 swift::Lowering::ArgumentSource::getAsSingleValue(swift::Lowering::SILGenFunction&, swift::Lowering::SGFContext) && + 388\n10 swift                    0x000000010ebde532 (anonymous namespace)::ArgEmitter::emit(swift::Lowering::ArgumentSource&&, swift::Lowering::AbstractionPattern) + 2050\n11 swift                    0x000000010ebdd407 (anonymous namespace)::CallSite::emit(swift::Lowering::SILGenFunction&, swift::Lowering::AbstractionPattern, (anonymous namespace)::ParamLowering&, llvm::SmallVectorImpl&, llvm::SmallVectorImpl >&, llvm::Optional const&, swift::ImportAsMemberStatus const&) && + 519\n12 swift                    0x000000010ebda09b (anonymous namespace)::CallEmission::apply(swift::Lowering::SGFContext) + 5339\n13 swift                    0x000000010ec298c5 swift::ASTVisitor<(anonymous namespace)::RValueEmitter, swift::Lowering::RValue, void, void, void, void, void, swift::Lowering::SGFContext>::visit(swift::Expr, swift::Lowering::SGFContext) + 117\n14 swift                    0x000000010ebb48a4 swift::Lowering::ArgumentSource::getAsSingleValue(swift::Lowering::SILGenFunction&, swift::Lowering::SGFContext) && + 388\n15 swift                    0x000000010ebde532 (anonymous namespace)::ArgEmitter::emit(swift::Lowering::ArgumentSource&&, swift::Lowering::AbstractionPattern) + 2050\n16 swift                    0x000000010ebe0557 (anonymous namespace)::ArgEmitter::emitExpanded(swift::Lowering::ArgumentSource&&, swift::Lowering::AbstractionPattern) + 263\n17 swift                    0x000000010ebdde29 (anonymous namespace)::ArgEmitter::emit(swift::Lowering::ArgumentSource&&, swift::Lowering::AbstractionPattern) + 249\n18 swift                    0x000000010ebdd407 (anonymous namespace)::CallSite::emit(swift::Lowering::SILGenFunction&, swift::Lowering::AbstractionPattern, (anonymous namespace)::ParamLowering&, llvm::SmallVectorImpl&, llvm::SmallVectorImpl >&, llvm::Optional const&, swift::ImportAsMemberStatus const&) && + 519\n19 swift                    0x000000010ebda09b (anonymous namespace)::CallEmission::apply(swift::Lowering::SGFContext) + 5339\n20 swift                    0x000000010ec298c5 swift::ASTVisitor<(anonymous namespace)::RValueEmitter, swift::Lowering::RValue, void, void, void, void, void, swift::Lowering::SGFContext>::visit(swift::Expr, swift::Lowering::SGFContext) + 117\n21 swift                    0x000000010ec89faa swift::Lowering::SILGenFunction::emitReturnExpr(swift::SILLocation, swift::Expr) + 506\n22 swift                    0x000000010ec867d7 swift::ASTVisitor<(anonymous namespace)::StmtEmitter, void, void, void, void, void, void>::visit(swift::Stmt) + 183\n23 swift                    0x000000010ec876d6 swift::ASTVisitor<(anonymous namespace)::StmtEmitter, void, void, void, void, void, void>::visit(swift::Stmt) + 4022\n24 swift                    0x000000010ec47e1a swift::Lowering::SILGenFunction::emitFunction(swift::FuncDecl) + 314\n25 swift                    0x000000010ebc4055 swift::Lowering::SILGenModule::emitFunction(swift::FuncDecl)::$_1::operator()(swift::SILFunction) const + 1877\n26 swift                    0x000000010ebc2c02 swift::Lowering::SILGenModule::emitFunction(swift::FuncDecl) + 626\n27 swift                    0x000000010ec8f717 swift::Lowering::SILGenModule::visitExtensionDecl(swift::ExtensionDecl) + 535\n28 swift                    0x000000010ebcf99b swift::Lowering::SILGenModule::emitSourceFile(swift::SourceFile, unsigned int) + 1835\n29 swift                    0x000000010ebd162d swift::SILModule::constructSIL(swift::ModuleDecl, swift::SILOptions&, swift::FileUnit, llvm::Optional, bool, bool) + 1629\n30 swift                    0x000000010ea09e86 performCompile(swift::CompilerInstance&, swift::CompilerInvocation&, llvm::ArrayRef, int&, swift::FrontendObserver) + 19510\n31 swift                    0x000000010ea032b3 swift::performFrontend(llvm::ArrayRef, char const, void, swift::FrontendObserver*) + 17859\n32 swift                    0x000000010e9bf5cf main + 8239\n33 libdyld.dylib            0x00000001137175ad start + 1\nStack dump:\n0.  Program arguments: /Volumes/Macintosh HD/Xcode_8.2.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -frontend -c /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/History.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksModel.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/MockLogins.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Logins.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteLogins.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistoryRecommendations.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Sharing.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteRemoteClientsAndTabs.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/GenericTable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksSyncing.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Clients.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksResetting.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Syncable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/RecentlyClosedTabs.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/RemoteTabsTable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/ExtensionUtils.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SyncQueue.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/Trees.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Metadata.swift -primary-file /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistory.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteQueue.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SyncCommandsTable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/CompletionOps.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/Bookmarks.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/DefaultSuggestedSites.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Visit.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SchemaTable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/DiskImageStore.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/PageMetadata.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/FileAccessor.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksHelpers.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/FaviconsTable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteMetadata.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/CertStore.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/BookmarksModel.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Site.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SuggestedSites.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistoryFactories.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Queue.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/BrowserTable.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/BrowserDB.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Bookmarks/CachingItemSource.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/RemoteTabs.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Favicons.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteBookmarksBase.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/DeferredDBOperation.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/ThirdParty/SwiftData.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Cursor.swift /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/DatabaseError.swift -target x86_64-apple-ios9.0 -enable-objc-interop -sdk /Volumes/Macintosh HD/Xcode_8.2.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.2.sdk -I /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Fennec-iphonesimulator -I /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/modules -F /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Fennec-iphonesimulator -F /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Carthage/Build/iOS -F /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Release-iphonesimulator -application-extension -enable-testing -g -import-objc-header /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/Storage-Bridging-Header.h -module-cache-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/ModuleCache -D MOZ_CHANNEL_FENNEC -serialize-debugging-options -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/swift-overrides.hmap -Xcc -iquote -Xcc /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-generated-files.hmap -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-own-target-headers.hmap -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-all-non-framework-target-headers.hmap -Xcc -ivfsoverlay -Xcc /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/all-product-headers.yaml -Xcc -iquote -Xcc /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Storage-project-headers.hmap -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Fennec-iphonesimulator/include -Xcc -I/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include -Xcc -I/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios -Xcc -I/Volumes/Macintosh HD/Xcode_8.2.1.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator10.2.sdk/usr/include/libxml2 -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Products/Release-iphonesimulator/include -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/DerivedSources/x86_64 -Xcc -I/Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/DerivedSources -Xcc -DDEBUG=1 -Xcc -working-directory/Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios -emit-module-doc-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory~partial.swiftdoc -Onone -module-name Storage -emit-module-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory~partial.swiftmodule -serialize-diagnostics-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.dia -emit-dependencies-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.d -emit-reference-dependencies-path /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.swiftdeps -o /Users/arindam_ghosh/Library/Developer/Xcode/DerivedData/Client-fuincicvhstxnegccbqllounrsln/Build/Intermediates/Client.build/Fennec-iphonesimulator/Storage.build/Objects-normal/x86_64/SQLiteHistory.o \n1.  While emitting SIL for 'removeFromPinnedTopSites' at /Volumes/Macintosh HD/open_source_projects/firefox/firefox-ios/Storage/SQL/SQLiteHistory.swift:139:12\n======\n. ",
    "AniOSDeveloper": "Same issure here, i can see the document of Alamofire exists at firefox-ios/Carthage/Checkouts/Alamofire,  any ideas?\n\n. @garvankeeley \nThis is the output after running sh ./bootstrap.sh\n Checking out SwiftRouter at \"2.0.0\"\n Checking out readability at \"ccc8e9bf4c5400814d9b7a3ea83c21540da4c76f\"\n Checking out GCDWebServer at \"3.3.2\"\n Checking out SwiftKeychainWrapper at \"3.0.1\"\n Downloading Leanplum-iOS-SDK.framework binary at \"Leanplum iOS SDK 2.0.1\"\n Checking out JSONSchema.swift at \"1c052b83baa8c497e12cde6a8afca0f54574612f\"\n Checking out libPhoneNumber-iOS at \"0.9.2\"\n Checking out onepassword-extension at \"a614e290396346e3cb69e4951656eb8033390f8c\"\n Downloading EarlGrey.framework binary at \"EarlGrey 1.9.0\"\n Checking out EarlGrey at \"1.9.0\"\n Checking out Fuzi at \"1.0.1\"\n Checking out SDWebImage at \"3.7.4\"\n Downloading sentry-cocoa.framework binary at \"3.2.1\"\n Checking out Deferred at \"35b8927c1b94ce074e10793c57e1f80d0e2227fa\"\n Checking out SnapKit at \"3.1.2\"\n Downloading ios_sdk.framework binary at \"CPU family and min iOS version\"\n Checking out SwiftyJSON at \"3.1.4\"\n Checking out Alamofire at \"4.3.0\"\n Checking out KIF at \"v3.5.1\"\n Checking out XCGLogger at \"Version_4.0.0\"\nA shell task (/usr/bin/env git clone --quiet https://chromium.googlesource.com/webcomputerNameMacBook-Pro:firefox-ios computerName$ \nBy the way,  there are 56 errors  in the latest version, I have no idea to fix the issues to make it run.\n\n. ",
    "BinBear": "me too. \nXcode Version 8.3.3\nOpen Client.xcodeproj in Xcode.\nBuild the Fennec scheme in Xcode.\nNo such module 'Alamofire'\n. ",
    "kaar3k": "Oh my bad!. Thats absolutely right :) . Added tableview.reloadData on viewWillAppear updated the  Pull Request. Thank you very much @farhanpatel . Thank you very much for accepting the Merge request @farhanpatel  \ud83d\ude04..  Sure I will pickup 1344767.. ",
    "grigoryk": "That seems a bit more hacky to me than the current approach. The surface area of putting this into PrivilegedRequest directly seems much broader and much less isolated. We'll be needlessly running these checks on a lot of page loads, etc.\nAnother thing I noticed is that PrivilegedRequest is not used when user clicks in a URL (as I wouldn't expect it to be), and I think I do want to support use case of clicking about:reader?url... urls. Going with your suggested approach, that would mean putting in place additional \"overwrite points\".\nAs a sidenote, can you explain to me why we're wrapping arbitrary typed URLs in PrivilegedRequest? Reading its class comment, that seems to go against its spirit.. In order to avoid touching webView's navigation stack - I don't want about:reader URLs to be present there at all - I moved the request substitution logic to Tab.\n@farhanpatel do you mind taking another look?. This now has a funny side-effect of re-wrapping a localhost:port/reader-mode urls into reader-mode urls if they're typed in manually. I don't think I care about that though.. Maybe, but I don't think it buys much.. ",
    "bereket6725": "Thanks farhanpatel!!! It was my pleasure, Im glad I was of use, even for something small :) . . No Worries! And yeah, that sounds great, happy to help any way I can  \ud83d\udc4d  \ud83d\ude03  . sorry for the styling issue, let met know I missed anything this time. Thanks!!! :) . Awesome! There is something else thats a bit more far-reaching I'd like to get cracking on in the firefox iOS app that I think needs some serious attention. I'd like to share it with you guys first and put it on Bugzilla too. Any feedback would be great :) . Thanks @farhanpatel,  Will do! Actually, Its about how NotifcationCenter is handled in the app (I think its a bit problematic) and wanted to overhaul it. Hopefully you guys like the read  :) . ",
    "Colemalban": "@rnewman  Thanks for the feedback! When those changes are made, should I resubmit the pull request on Bugzilla for review? . Hi @rnewman . Work/other things ramped up quite a bit over the summer and this slipped from my mind. Does this still need finishing/ has someone else taken care of it? Things have slowed down so I was hoping to make time to contribute to projects again and would be happy to finish up anything. Thanks!. ",
    "asbhat": "Oops I see now that @Colemalban already submitted a PR (https://github.com/mozilla-mobile/firefox-ios/pull/2863) for the non-migration version of the fix. Fair enough, thanks for the reply! . ",
    "ugarlapati": "Yeah, using this extension to identify the visible cells count.\nOn Thu, Jun 29, 2017 at 3:12 PM, No-Jun Park notifications@github.com\nwrote:\n\n@npark-mozilla commented on this pull request.\nIn XCUITests/CompactModeUITests.swift\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2870#discussion_r124925097\n:\n\n\n//CollectionView visible cells count should be 6\nXCTAssertTrue(app.collectionViews.cells.countForHittables == 6)\n+\ncompactModeOff()\n+\n//CollectionView visible cells count should be less than or equal to 4\nXCTAssertTrue(app.collectionViews.cells.countForHittables <= 4)\n+\ncompactModeOn()\n+\n//CollectionView visible cells count should be 6\nXCTAssertTrue(app.collectionViews.cells.countForHittables == 6)\n}\n+}\n+\n+extension XCUIElementQuery {\n\n\n@ugarlapati https://github.com/ugarlapati are we using this extension?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2870#pullrequestreview-47265496,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AbwWdfxsXYcXkddNRx0gEB-yJ0TM7xTDks5sJCFXgaJpZM4OJvpE\n.\n. Thanks.\n\nOn Fri, Jul 28, 2017 at 7:32 AM, No-Jun Park notifications@github.com\nwrote:\n\n@npark-mozilla approved this pull request.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/pull/2985#pullrequestreview-52947121,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AbwWddTYdMwIeOhZy2wOb2Oovblw7f_lks5sSfEXgaJpZM4OlzzV\n.\n. navigator.goto(TabTray) method is not working in the above test case for iPad.. For iPad its failing if use the fxscreengraph methods.. For iPad its failing if use the fxscreengraph methods.. For iPad its failing if use the fxscreengraph methods.. For iPad its failing if use the fxscreengraph methods.. For iPad its failing if use the fxscreengraph methods.. \n",
    "ExE-Boss": "Extensions sadly aren\u2019t supposed yet and probably won\u2019t be for some time.\nHere\u2019s a link to a Reddit post where I discussed this with a Mozilla employee.. AMO tells you that you can\u2019t install add-ons when viewing the mobile site and the desktop site.\nThe thing is that the desktop site has a \u201cDownload Anyway\u201d button that allows you to download incompatible add-ons.\nWhen you press that button, Firefox for iOS shouldn\u2019t display the standard \u201cCan\u2019t Download Files\u201d notification, and should instead show a \u201cCan\u2019t Install Extensions\u201d notification.. Closing this, as Firefox for iOS can now download files, including files of the application/x-xpinstall type.. Firefox for iOS can\u2019t support MSE unless Apple adds it to Safari for iOS, because Firefox for iOS is currently only a WebKit WebView with a custom UI and Firefox Accounts synchronisation functionality, same with every other iOS browser because of Apple\u2019s App Store policies on web browsers, which have to be at most as good as Safari or inferior, which they enforce by waiting a few versions before allowing third party browsers access to functionality that Safari had access to for years (for example: content blocking/Tracking Protection), of course, the older, slower version of WebKit from iOS 6 that third party browsers can also use has content blocking APIs, which is how Firefox Focus was implemented before iOS 11.. That isn\u2019t currently implemented and I don\u2019t know if Apple would allow it, but if you have a Mac (costs a lot of money) and Xcode with the Apple Software Developer License (costs 100$ a year), you can do remote debugging using Safari.. > When it will be supported?\nWhenever the overlords at Apple decide to make that feature available to 3rd party browsers.\nAlso, HTML5test reports WebRTC 1.0 as supported on Firefox 12.0 for iOS 11.4.. Any idea why the build status isn\u2019t being reported?. ",
    "vincentpun": "@garvankeeley What problems did you experience before you used DispatchQueue? I tried moving the body out of the DispatchQueue and the location field could be focused just fine.. ",
    "MrChens": "I meet the same issues.\ncarthage bootstrap --platform ios\n Skipped installing GCDWebServer.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57d325d0 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/swisspol/GCDWebServer/releases/tags/3.3.2?, NSErrorFailingURLKey=https://api.github.com/repos/swisspol/GCDWebServer/releases/tags/3.3.2?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out GCDWebServer at \"3.3.2\"\n Skipped installing SwiftKeychainWrapper.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57d31bf0 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/jrendel/SwiftKeychainWrapper/releases/tags/3.0.1?, NSErrorFailingURLKey=https://api.github.com/repos/jrendel/SwiftKeychainWrapper/releases/tags/3.0.1?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out SwiftKeychainWrapper at \"3.0.1\"\n Skipped installing readability.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57d39960 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/mozilla/readability/releases/tags/ccc8e9bf4c5400814d9b7a3ea83c21540da4c76f?, NSErrorFailingURLKey=https://api.github.com/repos/mozilla/readability/releases/tags/ccc8e9bf4c5400814d9b7a3ea83c21540da4c76f?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out readability at \"ccc8e9bf4c5400814d9b7a3ea83c21540da4c76f\"\n Skipped installing JSONSchema.swift.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57d2db10 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/farhanpatel/JSONSchema.swift/releases/tags/1c052b83baa8c497e12cde6a8afca0f54574612f?, NSErrorFailingURLKey=https://api.github.com/repos/farhanpatel/JSONSchema.swift/releases/tags/1c052b83baa8c497e12cde6a8afca0f54574612f?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out JSONSchema.swift at \"1c052b83baa8c497e12cde6a8afca0f54574612f\"\n Skipped installing Fuzi.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57f81680 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/cezheng/Fuzi/releases/tags/1.0.1?, NSErrorFailingURLKey=https://api.github.com/repos/cezheng/Fuzi/releases/tags/1.0.1?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out Fuzi at \"1.0.1\"\n Skipped installing onepassword-extension.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57f3da10 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/AgileBits/onepassword-extension/releases/tags/a614e290396346e3cb69e4951656eb8033390f8c?, NSErrorFailingURLKey=https://api.github.com/repos/AgileBits/onepassword-extension/releases/tags/a614e290396346e3cb69e4951656eb8033390f8c?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out onepassword-extension at \"a614e290396346e3cb69e4951656eb8033390f8c\"\n Skipped installing EarlGrey.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57f527c0 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/google/EarlGrey/releases/tags/1.11.0?, NSErrorFailingURLKey=https://api.github.com/repos/google/EarlGrey/releases/tags/1.11.0?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n Checking out EarlGrey at \"1.11.0\"\n Cloning EarlGrey\n Skipped installing SDWebImage.framework binary due to the error:\n    \"GitHub API request failed: networkError(Error Domain=NSURLErrorDomain Code=-1001 \"The request timed out.\" UserInfo={NSUnderlyingError=0x7f9f57f7e160 {Error Domain=kCFErrorDomainCFNetwork Code=-1001 \"(null)\" UserInfo={_kCFStreamErrorCodeKey=-2102, _kCFStreamErrorDomainKey=4}}, NSErrorFailingURLStringKey=https://api.github.com/repos/rs/SDWebImage/releases/tags/3.7.4?, NSErrorFailingURLKey=https://api.github.com/repos/rs/SDWebImage/releases/tags/3.7.4?, _kCFStreamErrorDomainKey=4, _kCFStreamErrorCodeKey=-2102, NSLocalizedDescription=The request timed out.})\"\n*** Checking out SDWebImage at \"3.7.4\"\nA shell task (/usr/bin/env git clone --quiet https://chromium.googlesource.com/webm/libwebpMrChenss-MacBook-Pro:firefox-ios\nhope help.. ",
    "chscherrer": "@jhreis pity your code didn't manage the latest release 10.0. Can't wait getting the possibility to define my own sync servers..... ",
    "yhager": "Can this be used with a private sync server, but still using accounts.firefox.com for the account management and auth? I have this setup for my desktop firefox, but not sure how to apply this to ios. I tried creating a fxa-client-configuration file with the same auth, oauth and profile servers as the default, and changed the tokenserver to mine. I serve that file from my own web server, but firefox still tries to /signin my web server (the one I specified in the advanced account screen). . ",
    "ctsrc": "I can\u2019t find this option either. Is it available yet? Where do I find it?. ",
    "Findus23": "@iron77 \nAm I correct that this only works when one is also using a custom account server?\nSo it isn't possible to use the firefox account service and just use a custom sync server (so just identity.sync.tokenserver.uri in the desktop and android version). ",
    "raphaelyancey": "Can't find the option in debug mode on Firefox 11.0 (9935) on iPad, is it gone ?\nOtherwise, would love to see split fields to specify custom FxA and/or syncserver endpoints, as other said, because ones is most likely to run its own syncserver only instead of the whole FxA + syncserver stack.. ",
    "godfuture": "Will there be an option to simply use a custom token syncserver? \nThe current menu for FxA custom server could be adjusted to split it in both auth and sync server URI. Then more use cases will be possible.. ",
    "iXo": "This is not the same as #3088, as #3088 needs someone to have a full fxa + sync server stack runnning.\nBut when about:config is available (like on firefox desktop), we can only override the identity.sync.tokenserver.uri setting.\nThis will us too still use firefox global fxa server, with custom sync server.\nThe #3088 doesn't permit this.. @rainforest1155 I tried the very same trick without luck. To bad it would have been quite a easy way to bypass this problem.. ",
    "r-sherwood": "@rainforest1155 great idea. Unfortunately it's not working, cause the code uses the url.absoulteString of the provided auth server dialog instead of the (faked) JSON post. \nself.profile.prefs.setString(url.absoluteString, forKey: PrefsKeys.KeyCustomSyncWeb)\nIt might work, if they update the code to use  and strip the PrefsKeys.KeyCustomSyncWeb url from the generated JSON (fake) post like: \nself.profile.prefs.setString(json[\"auth_server_base_url\"] as! String, forKey: PrefsKeys.KeyCustomSyncWeb)\n\"/auth\" needs to be removed from \"auth_server_base_url\" to use it as PrefsKeys.KeyCustomSyncWeb url.\nWould like to see an option to  just use a sync server too.. ",
    "Ringelnatz": "Any news on this? What could be done to help in this case?. ",
    "drixter": "Do we have some update? it's quite strange issue that iOS version of Firefox not properly parse fxa-client-configuration file. Anyone on development side, should I/we raise a bug for it?\nAs far of not correct implementation of assumptions.\nAs far JSON data from .well-known/fxa-client-configuration should be properly read, but it doesn't,\nForcing setup like:\n{\"auth_server_base_url\":\"https://api.accounts.firefox.com\", \"oauth_server_base_url\":\"https://oauth.accounts.firefox.com\", \"profile_server_base_url\":\"https://profile.accounts.firefox.com\", \n\"sync_tokenserver_base_url\":\"https://fido.e-utp.net/ffsync\"}\nForwarding browser to login using fido.e-utp.net/singin which is not correct. So browser should only use in this example a another token server, not the whole FxA stuff.\nThis what the most people need and this is expected as requested PR should work.\nThanks,. ",
    "ChrisShire": "This would be so brilliant if this was done. It seems that it's impossible to self host bookmarks etc easily across mobile and desktop browsers, and this addition to the iOS version of Firefox would change that situation and be a big deal for the more privacy-conscious! Fingers crossed.. ",
    "arm0nic": "I would like to fully move my browsing environment to Firefox, only this missing feature is holding me back. Would be great seeing it implemented soon \ud83d\ude4c\ud83c\udffb\ud83d\ude0a. ",
    "cristiangauma": "It would be awesome to be able to sync iOS Firefox App with my selfhosted sync server. Hope the devs develop it sooner than later :)!!. Fingers crossed!!. ",
    "Snake16547": "True words here! Push.... ",
    "mklettner": "Yet another push. . ",
    "bryanbell": "\nMockup . Looks great! . Closing tabs shouldn't be an option in the Page Action Menu. . This is a good and useful feature, but the UI is in the wrong place. Can you place this feature in a new subsection of General called Tabs? \n\n. ",
    "Raidersvalle13": "Firefox slow update and crashes on my computer . ",
    "sposmen": "@AaronMT we have the same issue... any suggested workaround? Is there another related issues in the roadmap?. ",
    "jdolle": "Same issue on ios and also through instagram on ios, so I think it's a bug with a dependency.. ",
    "mozillamobilebot": "\n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 188 | Force casts should be avoided. \nBrowserViewController.swift | 863 | Force casts should be avoided. \nBrowserViewController.swift | 1723 | Force casts should be avoided. \nBrowserViewController.swift | 1727 | Force casts should be avoided. \nQRCodeViewController.swift | 59 | Force casts should be avoided. \nQRCodeViewController.swift | 221 | Force casts should be avoided. \nTabTrayController.swift | 425 | Force casts should be avoided. \nTabTrayController.swift | 628 | Force casts should be avoided. \nTabTrayController.swift | 661 | Force casts should be avoided. \nTabTrayController.swift | 735 | Force casts should be avoided. \nActivityStreamPanel.swift | 297 | Force casts should be avoided. \nActivityStreamPanel.swift | 312 | Force casts should be avoided. \nActivityStreamPanel.swift | 340 | Force casts should be avoided. \nActivityStreamPanel.swift | 434 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 450 | Force casts should be avoided. \nActivityStreamPanel.swift | 456 | Force casts should be avoided. \nActivityStreamPanel.swift | 681 | Force casts should be avoided. \nRemoteTabsPanel.swift | 164 | Force casts should be avoided. \nRemoteTabsPanel.swift | 205 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 37 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 42 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 43 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 44 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 45 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 140 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 142 | Force casts should be avoided. \nFxAContentViewController.swift | 240 | Force tries should be avoided. \nTitleActivityItemProvider.swift | 31 | Force casts should be avoided. \nPhotonActionSheet.swift | 184 | Force casts should be avoided. \nPhotonActionSheet.swift | 274 | Force casts should be avoided. \nPhotonActionSheet.swift | 290 | Force casts should be avoided. \nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \nPrefs.swift | 188 | Force casts should be avoided. \nUserAgent.swift | 80 | Force tries should be avoided. \nUserAgent.swift | 113 | Force tries should be avoided. \nUserAgent.swift | 121 | Force tries should be avoided. \nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \nSQLiteLogins.swift | 27 | Force casts should be avoided. \nSQLiteLogins.swift | 42 | Force casts should be avoided. \nSQLiteLogins.swift | 84 | Force casts should be avoided. \nSQLiteLogins.swift | 807 | Force casts should be avoided. \nStorageClient.swift | 552 | Force casts should be avoided. \nStorageClient.swift | 695 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 200 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 306 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAdvanceAccountSettingViewController.swift | 146 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSettingsTableViewController.swift | 552 | Force casts should be avoided. \nSettingsTableViewController.swift | 572 | Force casts should be avoided. \nPhotonActionSheet.swift | 194 | Force casts should be avoided. \nPhotonActionSheet.swift | 284 | Force casts should be avoided. \nPhotonActionSheet.swift | 300 | Force casts should be avoided. \nL10nPermissionStringsSnapshotTests.swift | 26 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 160 | Opening braces should be preceded by a single space and on the same line as the declaration. \nL10nPermissionStringsSnapshotTests.swift | 10 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 863 | Force casts should be avoided. \nBrowserViewController.swift | 1743 | Force casts should be avoided. \nBrowserViewController.swift | 1747 | Force casts should be avoided. \nQRCodeViewController.swift | 59 | Force casts should be avoided. \nQRCodeViewController.swift | 221 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 863 | Force casts should be avoided. \nBrowserViewController.swift | 1743 | Force casts should be avoided. \nBrowserViewController.swift | 1747 | Force casts should be avoided. \nTabTrayController.swift | 425 | Force casts should be avoided. \nTabTrayController.swift | 628 | Force casts should be avoided. \nTabTrayController.swift | 661 | Force casts should be avoided. \nTabTrayController.swift | 735 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 183 | Force casts should be avoided. \nPhotonActionSheet.swift | 273 | Force casts should be avoided. \nPhotonActionSheet.swift | 289 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 297 | Force casts should be avoided. \nActivityStreamPanel.swift | 312 | Force casts should be avoided. \nActivityStreamPanel.swift | 340 | Force casts should be avoided. \nActivityStreamPanel.swift | 434 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 450 | Force casts should be avoided. \nActivityStreamPanel.swift | 456 | Force casts should be avoided. \nActivityStreamPanel.swift | 681 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 188 | Force casts should be avoided. \nPhotonActionSheet.swift | 278 | Force casts should be avoided. \nPhotonActionSheet.swift | 294 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 833 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 297 | Force casts should be avoided. \nActivityStreamPanel.swift | 312 | Force casts should be avoided. \nActivityStreamPanel.swift | 340 | Force casts should be avoided. \nActivityStreamPanel.swift | 434 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 450 | Force casts should be avoided. \nActivityStreamPanel.swift | 456 | Force casts should be avoided. \nActivityStreamPanel.swift | 681 | Force casts should be avoided. \nPrefs.swift | 189 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 367 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchEngines.swift | 148 | Force tries should be avoided. \nSearchViewController.swift | 536 | Force casts should be avoided. \nSearchViewController.swift | 562 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 863 | Force casts should be avoided. \nBrowserViewController.swift | 1743 | Force casts should be avoided. \nBrowserViewController.swift | 1747 | Force casts should be avoided. \nBrowserViewController.swift | 2972 | Explicitly calling .init() should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 620 | Force casts should be avoided. \nAppSettingsOptions.swift | 621 | Force casts should be avoided. \nAppSettingsOptions.swift | 697 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 145 | Force casts should be avoided. \nProfile.swift | 400 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 628 | Force casts should be avoided. \nAppSettingsOptions.swift | 629 | Force casts should be avoided. \nAppSettingsOptions.swift | 705 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 188 | Force casts should be avoided. \nBrowserViewController.swift | 855 | Force casts should be avoided. \nBrowserViewController.swift | 1735 | Force casts should be avoided. \nBrowserViewController.swift | 1739 | Force casts should be avoided. \nAppSettingsOptions.swift | 620 | Force casts should be avoided. \nAppSettingsOptions.swift | 621 | Force casts should be avoided. \nAppSettingsOptions.swift | 697 | Force casts should be avoided. \nNotificationService.swift | 232 | Force casts should be avoided. \nBrowserSchema.swift | 833 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 188 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 855 | Force casts should be avoided. \nBrowserViewController.swift | 1735 | Force casts should be avoided. \nBrowserViewController.swift | 1739 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSettingsTableViewController.swift | 550 | Force casts should be avoided. \nSettingsTableViewController.swift | 570 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 3:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 3:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 10:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 8:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 0:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: undefined method positive? for 3:Fixnum\n```\n #  from Dangerfile:2\n #  -------------------------------------------\n #  # Lint files with Swiftlint. Check .swiftlint.yml for config\n\nswiftlint.lint_files\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginDetailViewController.swift | 179 | Force casts should be avoided. \nLoginDetailViewController.swift | 198 | Force casts should be avoided. \nLoginDetailViewController.swift | 304 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 855 | Force casts should be avoided. \nBrowserViewController.swift | 1725 | Force casts should be avoided. \nBrowserViewController.swift | 1729 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 144 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginDetailViewController.swift | 182 | Force casts should be avoided. \nLoginDetailViewController.swift | 201 | Force casts should be avoided. \nLoginDetailViewController.swift | 307 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFaviconFetcher.swift | 303 | Force tries should be avoided. \nNotificationService.swift | 229 | Force casts should be avoided. \nProfile.swift | 400 | Force casts should be avoided. \nStorageClient.swift | 555 | Force casts should be avoided. \nStorageClient.swift | 698 | Force casts should be avoided. \nSyncTelemetry.swift | 44 | Force casts should be avoided. \nSyncTelemetry.swift | 45 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginDetailViewController.swift | 182 | Force casts should be avoided. \nLoginDetailViewController.swift | 201 | Force casts should be avoided. \nLoginDetailViewController.swift | 307 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 188 | Force casts should be avoided. \nNotificationService.swift | 229 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 193 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 184 | Force casts should be avoided. \nBrowserViewController.swift | 855 | Force casts should be avoided. \nBrowserViewController.swift | 1725 | Force casts should be avoided. \nBrowserViewController.swift | 1729 | Force casts should be avoided. \nQRCodeViewController.swift | 59 | Force casts should be avoided. \nQRCodeViewController.swift | 221 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 273 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 539 | Force casts should be avoided. \nFxALoginHelper.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 860 | Force casts should be avoided. \nBrowserViewController.swift | 1741 | Force casts should be avoided. \nBrowserViewController.swift | 1745 | Force casts should be avoided. \nBrowserViewController.swift | 2889 | Limit vertical whitespace to a single empty line. Currently 3. \nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nTabTrayController.swift | 422 | Force casts should be avoided. \nTabTrayController.swift | 625 | Force casts should be avoided. \nTabTrayController.swift | 658 | Force casts should be avoided. \nTabTrayController.swift | 732 | Force casts should be avoided. \nTopTabsViewController.swift | 281 | Force casts should be avoided. \nTopTabsViewController.swift | 324 | Force casts should be avoided. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 538 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 200 | Force casts should be avoided. \nAppSettingsOptions.swift | 620 | Force casts should be avoided. \nAppSettingsOptions.swift | 621 | Force casts should be avoided. \nAppSettingsOptions.swift | 697 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \nLoginDetailViewController.swift | 182 | Force casts should be avoided. \nLoginDetailViewController.swift | 201 | Force casts should be avoided. \nLoginDetailViewController.swift | 307 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 565 | Force casts should be avoided. \nSettingsTableViewController.swift | 585 | Force casts should be avoided. \nPhotonActionSheet.swift | 193 | Force casts should be avoided. \nPhotonActionSheet.swift | 283 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 159 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 855 | Force casts should be avoided. \nBrowserViewController.swift | 1736 | Force casts should be avoided. \nBrowserViewController.swift | 1740 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 855 | Force casts should be avoided. \nBrowserViewController.swift | 1725 | Force casts should be avoided. \nBrowserViewController.swift | 1729 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 852 | Force casts should be avoided. \nLeanPlum checklist\n\n\n[ ] I have updated the MMA.md doc\n\n\n[ ] I have gone through the data privacy review\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 860 | Force casts should be avoided. \nBrowserViewController.swift | 1749 | Force casts should be avoided. \nBrowserViewController.swift | 1753 | Force casts should be avoided. \nBrowserViewController.swift | 2904 | Limit vertical whitespace to a single empty line. Currently 3. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 860 | Force casts should be avoided. \nBrowserViewController.swift | 1730 | Force casts should be avoided. \nBrowserViewController.swift | 1734 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 184 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  3 Markdowns\n\nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSwipeAnimator.swift | 152 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteBookmarksModel.swift | 404 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 418 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 450 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 601 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 602 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 615 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 626 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 634 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 635 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 650 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 698 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 699 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 793 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 14 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 15 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 16 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 860 | Force casts should be avoided. \nBrowserViewController.swift | 1730 | Force casts should be avoided. \nBrowserViewController.swift | 1734 | Force casts should be avoided. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 642 | Force casts should be avoided. \nAppSettingsOptions.swift | 643 | Force casts should be avoided. \nAppSettingsOptions.swift | 719 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 146 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 35 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPrefs.swift | 177 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 860 | Force casts should be avoided. \nBrowserViewController.swift | 1746 | Force casts should be avoided. \nBrowserViewController.swift | 1750 | Force casts should be avoided. \nBrowserViewController.swift | 2894 | Limit vertical whitespace to a single empty line. Currently 3. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 833 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  3 Markdowns\n\nSentry check list\n\n\n[x] I understand that only .fatal events will be reported on release\n\n\n[x] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 21 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 140 | Force casts should be avoided. \nSettingsTableViewController.swift | 593 | Force casts should be avoided. \nSettingsTableViewController.swift | 613 | Force casts should be avoided. \nProfile.swift | 400 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 400 | Force casts should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSQLiteHistory.swift | 907 | Force casts should be avoided. \nSQLiteHistory.swift | 908 | Force casts should be avoided. \nSQLiteHistory.swift | 1004 | Force casts should be avoided. \nSQLiteHistory.swift | 1006 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nBrowserViewController.swift | 852 | Force casts should be avoided. \nTabTrayController.swift | 424 | Force casts should be avoided. \nTabTrayController.swift | 627 | Force casts should be avoided. \nTabTrayController.swift | 660 | Force casts should be avoided. \nTabTrayController.swift | 734 | Force casts should be avoided. \nTopTabsViewController.swift | 281 | Force casts should be avoided. \nTopTabsViewController.swift | 324 | Force casts should be avoided. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nAppSettingsOptions.swift | 619 | Force casts should be avoided. \nAppSettingsOptions.swift | 620 | Force casts should be avoided. \nAppSettingsOptions.swift | 696 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \nFxAContentViewController.swift | 236 | Force tries should be avoided. \nDispatchQueueExtensions.swift | 7 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchViewController.swift | 537 | Force casts should be avoided. \nSearchViewController.swift | 563 | Force casts should be avoided. \nBrowserDB.swift | 26 | Force tries should be avoided. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 852 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSQLiteHistory.swift | 946 | Force casts should be avoided. \nSQLiteHistory.swift | 948 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \nFindInPageHelper.swift | 36 | Force casts should be avoided. \nLocalRequestHelper.swift | 16 | Force casts should be avoided. \nSessionRestoreHelper.swift | 26 | Force casts should be avoided. \nTab.swift | 64 | Initializing an optional variable with nil is redundant. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nBrowserViewController.swift | 834 | Force casts should be avoided. \nSearchViewController.swift | 533 | Force casts should be avoided. \nSearchViewController.swift | 559 | Force casts should be avoided. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 566 | Force casts should be avoided. \nSettingsTableViewController.swift | 586 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 184 | Force casts should be avoided. \nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 26 | Force tries should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSQLiteHistory.swift | 956 | Force casts should be avoided. \nSQLiteHistory.swift | 958 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 34 | Force tries should be avoided. \nBrowserDB.swift | 26 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 620 | Force casts should be avoided. \nAppSettingsOptions.swift | 621 | Force casts should be avoided. \nAppSettingsOptions.swift | 697 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 26 | Force tries should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSyncTelemetry.swift | 44 | Force casts should be avoided. \nSyncTelemetry.swift | 45 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSQLiteLogins.swift | 27 | Force casts should be avoided. \nSQLiteLogins.swift | 42 | Force casts should be avoided. \nSQLiteLogins.swift | 84 | Force casts should be avoided. \nSQLiteLogins.swift | 807 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \nTopTabsViewController.swift | 274 | Force casts should be avoided. \nTopTabsViewController.swift | 317 | Force casts should be avoided. \nFaviconFetcher.swift | 275 | Force tries should be avoided. \nBrowserSchema.swift | 830 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 404 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 418 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 450 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 598 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 599 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 612 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 623 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 631 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 632 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 647 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 695 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 696 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 790 | Force casts should be avoided. \nSQLiteHistory.swift | 735 | Force casts should be avoided. \nSQLiteHistory.swift | 778 | Force casts should be avoided. \nSQLiteHistory.swift | 783 | Force casts should be avoided. \nSQLiteHistory.swift | 881 | Force casts should be avoided. \nSQLiteHistory.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 14 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 15 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 16 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nBrowserViewController.swift | 834 | Force casts should be avoided. \nTabTrayController.swift | 424 | Force casts should be avoided. \nTabTrayController.swift | 627 | Force casts should be avoided. \nTabTrayController.swift | 660 | Force casts should be avoided. \nTabTrayController.swift | 734 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 189 | Force casts should be avoided. \nBrowserViewController.swift | 861 | Force casts should be avoided. \nBrowserViewController.swift | 1727 | Force casts should be avoided. \nBrowserViewController.swift | 1731 | Force casts should be avoided. \nTabTrayController.swift | 422 | Force casts should be avoided. \nTabTrayController.swift | 625 | Force casts should be avoided. \nTabTrayController.swift | 658 | Force casts should be avoided. \nTabTrayController.swift | 732 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nBrowserSchema.swift | 831 | Force casts should be avoided. \nSQLiteHistory.swift | 734 | Force casts should be avoided. \nSQLiteHistory.swift | 777 | Force casts should be avoided. \nSQLiteHistory.swift | 782 | Force casts should be avoided. \nSQLiteHistory.swift | 880 | Force casts should be avoided. \nSQLiteHistory.swift | 901 | Force casts should be avoided. \nSQLiteHistory.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 225 | Limit vertical whitespace to a single empty line. Currently 2. \nSQLiteHistory.swift | 157 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSQLiteHistory.swift | 178 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchEngines.swift | 148 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 834 | Force casts should be avoided. \nFindInPageHelper.swift | 36 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 34 | Force tries should be avoided. \nSearchViewController.swift | 533 | Force casts should be avoided. \nSearchViewController.swift | 559 | Force casts should be avoided. \nSwipeAnimator.swift | 152 | Force casts should be avoided. \nTabTrayController.swift | 424 | Force casts should be avoided. \nTabTrayController.swift | 627 | Force casts should be avoided. \nTabTrayController.swift | 660 | Force casts should be avoided. \nTabTrayController.swift | 734 | Force casts should be avoided. \nTopTabsViewController.swift | 281 | Force casts should be avoided. \nTopTabsViewController.swift | 324 | Force casts should be avoided. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 538 | Force casts should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 200 | Force casts should be avoided. \nLoginListViewController.swift | 464 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \nFxAContentViewController.swift | 236 | Force tries should be avoided. \nLoginDetailViewController.swift | 182 | Force casts should be avoided. \nLoginDetailViewController.swift | 201 | Force casts should be avoided. \nLoginDetailViewController.swift | 307 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 593 | Force casts should be avoided. \nSettingsTableViewController.swift | 613 | Force casts should be avoided. \nPhotonActionSheet.swift | 193 | Force casts should be avoided. \nPhotonActionSheet.swift | 283 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nFaviconFetcher.swift | 303 | Force tries should be avoided. \nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \nProfile.swift | 400 | Force casts should be avoided. \nKeyboardHelper.swift | 18 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 159 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  3 Errors: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          3 Errors\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nFxALoginStateMachine.swift | 54 | Force casts should be avoided. \nFxALoginStateMachine.swift | 69 | Force casts should be avoided. \nFxALoginStateMachine.swift | 85 | Force casts should be avoided. \nFxALoginStateMachine.swift | 125 | Force casts should be avoided. \nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nTestAppDelegate.swift | 80 | Force tries should be avoided. \nUIViewExtensions.swift | 54 | Force casts should be avoided. \nSensitiveViewController.swift | 31 | An object should only remove itself as an observer in deinit. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 833 | Force casts should be avoided. \nFindInPageHelper.swift | 36 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nSearchEngines.swift | 148 | Force tries should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 34 | Force tries should be avoided. \nSearchViewController.swift | 533 | Force casts should be avoided. \nSearchViewController.swift | 559 | Force casts should be avoided. \nSwipeAnimator.swift | 152 | Force casts should be avoided. \nTabTrayController.swift | 423 | Force casts should be avoided. \nTabTrayController.swift | 626 | Force casts should be avoided. \nTabTrayController.swift | 659 | Force casts should be avoided. \nTabTrayController.swift | 733 | Force casts should be avoided. \nTopTabsViewController.swift | 280 | Force casts should be avoided. \nTopTabsViewController.swift | 323 | Force casts should be avoided. \nContentBlockerHelper.swift | 9 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 538 | Force casts should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 200 | Force casts should be avoided. \nIntroViewController.swift | 236 | An object should only remove itself as an observer in deinit. \nLoginListViewController.swift | 459 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 145 | Force casts should be avoided. \nAppSettingsOptions.swift | 592 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 669 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \nFxAContentViewController.swift | 235 | Force tries should be avoided. \nLoginDetailViewController.swift | 180 | Force casts should be avoided. \nLoginDetailViewController.swift | 199 | Force casts should be avoided. \nLoginDetailViewController.swift | 305 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 590 | Force casts should be avoided. \nSettingsTableViewController.swift | 610 | Force casts should be avoided. \nSettingsTableViewController.swift | 532 | An object should only remove itself as an observer in deinit. \nPhotonActionSheet.swift | 193 | Force casts should be avoided. \nPhotonActionSheet.swift | 283 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nFxALoginHelper.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFaviconFetcher.swift | 303 | Force tries should be avoided. \nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \nProfile.swift | 397 | Force casts should be avoided. \nUIImageExtensions.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nKeyboardHelper.swift | 17 | Force casts should be avoided. \nNotificationConstants.swift | 33 | Limit vertical whitespace to a single empty line. Currently 2. \nPrefs.swift | 177 | Force casts should be avoided. \nUserAgent.swift | 80 | Force tries should be avoided. \nUserAgent.swift | 113 | Force tries should be avoided. \nUserAgent.swift | 121 | Force tries should be avoided. \nDiskImageStore.swift | 38 | Force casts should be avoided. \nDiskImageStore.swift | 31 | Force tries should be avoided. \nBrowserDB.swift | 24 | Force tries should be avoided. \nBrowserSchema.swift | 833 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 404 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 418 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 450 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 601 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 602 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 615 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 626 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 634 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 635 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 650 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 698 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 699 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 793 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSQLiteLogins.swift | 27 | Force casts should be avoided. \nSQLiteLogins.swift | 42 | Force casts should be avoided. \nSQLiteLogins.swift | 84 | Force casts should be avoided. \nSQLiteLogins.swift | 807 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 200 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 306 | Force casts should be avoided. \nClientPayload.swift | 44 | Force casts should be avoided. \nKeyBundle.swift | 231 | Limit vertical whitespace to a single empty line. Currently 2. \nKeyBundle.swift | 315 | Limit vertical whitespace to a single empty line. Currently 2. \nKeysPayload.swift | 46 | Force casts should be avoided. \nStorageClient.swift | 555 | Force casts should be avoided. \nStorageClient.swift | 698 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 159 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  3 Errors: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          3 Errors\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nFxALoginStateMachine.swift | 54 | Force casts should be avoided. \nFxALoginStateMachine.swift | 69 | Force casts should be avoided. \nFxALoginStateMachine.swift | 85 | Force casts should be avoided. \nFxALoginStateMachine.swift | 125 | Force casts should be avoided. \nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nTestAppDelegate.swift | 80 | Force tries should be avoided. \nUIViewExtensions.swift | 54 | Force casts should be avoided. \nSensitiveViewController.swift | 31 | An object should only remove itself as an observer in deinit. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 833 | Force casts should be avoided. \nFindInPageHelper.swift | 36 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nSearchEngines.swift | 148 | Force tries should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 34 | Force tries should be avoided. \nSearchViewController.swift | 533 | Force casts should be avoided. \nSearchViewController.swift | 559 | Force casts should be avoided. \nSwipeAnimator.swift | 152 | Force casts should be avoided. \nTabTrayController.swift | 423 | Force casts should be avoided. \nTabTrayController.swift | 626 | Force casts should be avoided. \nTabTrayController.swift | 659 | Force casts should be avoided. \nTabTrayController.swift | 733 | Force casts should be avoided. \nTopTabsViewController.swift | 280 | Force casts should be avoided. \nTopTabsViewController.swift | 323 | Force casts should be avoided. \nContentBlockerHelper.swift | 9 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 538 | Force casts should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 200 | Force casts should be avoided. \nIntroViewController.swift | 236 | An object should only remove itself as an observer in deinit. \nLoginListViewController.swift | 459 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 145 | Force casts should be avoided. \nAppSettingsOptions.swift | 592 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 669 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \nFxAContentViewController.swift | 235 | Force tries should be avoided. \nLoginDetailViewController.swift | 180 | Force casts should be avoided. \nLoginDetailViewController.swift | 199 | Force casts should be avoided. \nLoginDetailViewController.swift | 305 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 590 | Force casts should be avoided. \nSettingsTableViewController.swift | 610 | Force casts should be avoided. \nSettingsTableViewController.swift | 532 | An object should only remove itself as an observer in deinit. \nPhotonActionSheet.swift | 193 | Force casts should be avoided. \nPhotonActionSheet.swift | 283 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nFxALoginHelper.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFaviconFetcher.swift | 303 | Force tries should be avoided. \nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \nProfile.swift | 397 | Force casts should be avoided. \nUIImageExtensions.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nKeyboardHelper.swift | 17 | Force casts should be avoided. \nNotificationConstants.swift | 33 | Limit vertical whitespace to a single empty line. Currently 2. \nPrefs.swift | 177 | Force casts should be avoided. \nUserAgent.swift | 80 | Force tries should be avoided. \nUserAgent.swift | 113 | Force tries should be avoided. \nUserAgent.swift | 121 | Force tries should be avoided. \nDiskImageStore.swift | 38 | Force casts should be avoided. \nDiskImageStore.swift | 31 | Force tries should be avoided. \nBrowserDB.swift | 24 | Force tries should be avoided. \nBrowserSchema.swift | 833 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 404 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 418 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 450 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 601 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 602 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 615 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 626 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 634 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 635 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 650 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 698 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 699 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 793 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSQLiteLogins.swift | 27 | Force casts should be avoided. \nSQLiteLogins.swift | 42 | Force casts should be avoided. \nSQLiteLogins.swift | 84 | Force casts should be avoided. \nSQLiteLogins.swift | 807 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 200 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 306 | Force casts should be avoided. \nClientPayload.swift | 44 | Force casts should be avoided. \nKeyBundle.swift | 231 | Limit vertical whitespace to a single empty line. Currently 2. \nKeyBundle.swift | 315 | Limit vertical whitespace to a single empty line. Currently 2. \nKeysPayload.swift | 46 | Force casts should be avoided. \nStorageClient.swift | 555 | Force casts should be avoided. \nStorageClient.swift | 698 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 159 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nFxALoginStateMachine.swift | 54 | Force casts should be avoided. \nFxALoginStateMachine.swift | 69 | Force casts should be avoided. \nFxALoginStateMachine.swift | 85 | Force casts should be avoided. \nFxALoginStateMachine.swift | 125 | Force casts should be avoided. \nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 185 | Force casts should be avoided. \nTestAppDelegate.swift | 80 | Force tries should be avoided. \nUIViewExtensions.swift | 54 | Force casts should be avoided. \nSensitiveViewController.swift | 31 | An object should only remove itself as an observer in deinit. \nBrowserViewController.swift | 834 | Force casts should be avoided. \nFindInPageHelper.swift | 36 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 34 | Force tries should be avoided. \nSearchViewController.swift | 533 | Force casts should be avoided. \nSearchViewController.swift | 559 | Force casts should be avoided. \nSwipeAnimator.swift | 152 | Force casts should be avoided. \nTabTrayController.swift | 423 | Force casts should be avoided. \nTabTrayController.swift | 626 | Force casts should be avoided. \nTabTrayController.swift | 659 | Force casts should be avoided. \nTabTrayController.swift | 733 | Force casts should be avoided. \nContentBlockerHelper.swift | 9 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 439 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 677 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 538 | Force casts should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 200 | Force casts should be avoided. \nIntroViewController.swift | 236 | An object should only remove itself as an observer in deinit. \nLoginListViewController.swift | 459 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 145 | Force casts should be avoided. \nAppSettingsOptions.swift | 592 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 669 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 163 | Force casts should be avoided. \nFxAContentViewController.swift | 235 | Force tries should be avoided. \nLoginDetailViewController.swift | 180 | Force casts should be avoided. \nLoginDetailViewController.swift | 199 | Force casts should be avoided. \nLoginDetailViewController.swift | 305 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 590 | Force casts should be avoided. \nSettingsTableViewController.swift | 610 | Force casts should be avoided. \nSettingsTableViewController.swift | 532 | An object should only remove itself as an observer in deinit. \nPhotonActionSheet.swift | 193 | Force casts should be avoided. \nPhotonActionSheet.swift | 283 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nFxALoginHelper.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFaviconFetcher.swift | 274 | Force tries should be avoided. \nClientPickerViewController.swift | 101 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 111 | Force casts should be avoided. \nProfile.swift | 397 | Force casts should be avoided. \nUIImageExtensions.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nKeyboardHelper.swift | 17 | Force casts should be avoided. \nNotificationConstants.swift | 33 | Limit vertical whitespace to a single empty line. Currently 2. \nPrefs.swift | 177 | Force casts should be avoided. \nDiskImageStore.swift | 38 | Force casts should be avoided. \nDiskImageStore.swift | 31 | Force tries should be avoided. \nBrowserDB.swift | 24 | Force tries should be avoided. \nSQLiteHistory.swift | 735 | Force casts should be avoided. \nSQLiteHistory.swift | 778 | Force casts should be avoided. \nSQLiteHistory.swift | 783 | Force casts should be avoided. \nSQLiteHistory.swift | 881 | Force casts should be avoided. \nSQLiteHistory.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteLogins.swift | 27 | Force casts should be avoided. \nSQLiteLogins.swift | 42 | Force casts should be avoided. \nSQLiteLogins.swift | 84 | Force casts should be avoided. \nSQLiteLogins.swift | 807 | Force casts should be avoided. \nKeyBundle.swift | 227 | Limit vertical whitespace to a single empty line. Currently 2. \nKeyBundle.swift | 311 | Limit vertical whitespace to a single empty line. Currently 2. \nStorageClient.swift | 555 | Force casts should be avoided. \nStorageClient.swift | 698 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 159 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  3 Markdowns\n\nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 80 | Force tries should be avoided. \nBrowserViewController.swift | 834 | Force casts should be avoided. \nIntroViewController.swift | 144 | Limit vertical whitespace to a single empty line. Currently 2. \nArrayExtensions.swift | 72 | Limit vertical whitespace to a single empty line. Currently 2. \nPrefs.swift | 178 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxALoginStateMachine.swift | 54 | Force casts should be avoided. \nFxALoginStateMachine.swift | 69 | Force casts should be avoided. \nFxALoginStateMachine.swift | 85 | Force casts should be avoided. \nFxALoginStateMachine.swift | 125 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 34 | Force tries should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nLoginListViewController.swift | 464 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nPhotonActionSheet.swift | 193 | Force casts should be avoided. \nPhotonActionSheet.swift | 283 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nFaviconFetcher.swift | 303 | Force tries should be avoided. \nUserAgent.swift | 80 | Force tries should be avoided. \nUserAgent.swift | 113 | Force tries should be avoided. \nUserAgent.swift | 121 | Force tries should be avoided. \nSQLiteHistory.swift | 736 | Force casts should be avoided. \nSQLiteHistory.swift | 779 | Force casts should be avoided. \nSQLiteHistory.swift | 784 | Force casts should be avoided. \nSQLiteHistory.swift | 882 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 906 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 74 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 76 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 77 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 78 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 79 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 14 | Force tries should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 159 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nProfile.swift | 379 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \nFindInPageHelper.swift | 31 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 834 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 404 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 418 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 450 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 598 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 599 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 612 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 623 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 631 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 632 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 647 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 695 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 696 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 790 | Force casts should be avoided. \nSQLiteHistory.swift | 735 | Force casts should be avoided. \nSQLiteHistory.swift | 778 | Force casts should be avoided. \nSQLiteHistory.swift | 783 | Force casts should be avoided. \nSQLiteHistory.swift | 881 | Force casts should be avoided. \nSQLiteHistory.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteHistory.swift | 905 | Force casts should be avoided. \nSQLiteHistory.swift | 225 | Limit vertical whitespace to a single empty line. Currently 2. \nSQLiteHistory.swift | 157 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSQLiteHistory.swift | 178 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 834 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 278 | Force casts should be avoided. \nTopTabsViewController.swift | 321 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 279 | Force casts should be avoided. \nTopTabsViewController.swift | 322 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerHelper.swift | 9 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 350 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 279 | Force casts should be avoided. \nTopTabsViewController.swift | 322 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nContentBlockerHelper.swift | 9 | Limit vertical whitespace to a single empty line. Currently 2. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nIntroViewController.swift | 127 | Limit vertical whitespace to a single empty line. Currently 3. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 205 | Force casts should be avoided. \nPhotonActionSheet.swift | 309 | Force casts should be avoided. \nPhotonActionSheet.swift | 324 | Force casts should be avoided. \nPhotonActionSheet.swift | 329 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 171 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchEngines.swift | 148 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 843 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 148 | Force casts should be avoided. \nPrefs.swift | 179 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 351 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 280 | Force casts should be avoided. \nTopTabsViewController.swift | 323 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 33 | Force tries should be avoided. \nTestAppDelegate.swift | 91 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 34 | Force tries should be avoided. \nTestAppDelegate.swift | 92 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nPrefs.swift | 178 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nPhotonActionSheet.swift | 220 | Force casts should be avoided. \nPhotonActionSheet.swift | 280 | Force casts should be avoided. \nPhotonActionSheet.swift | 295 | Force casts should be avoided. \nPhotonActionSheet.swift | 300 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 200 | Force casts should be avoided. \nAppSettingsOptions.swift | 592 | Force casts should be avoided. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 669 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 430 | Force casts should be avoided. \nTabTrayController.swift | 651 | Force casts should be avoided. \nTabTrayController.swift | 684 | Force casts should be avoided. \nTabTrayController.swift | 758 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 362 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 280 | Force casts should be avoided. \nTopTabsViewController.swift | 323 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nPhotonActionSheet.swift | 210 | Force casts should be avoided. \nPhotonActionSheet.swift | 270 | Force casts should be avoided. \nPhotonActionSheet.swift | 284 | Force casts should be avoided. \nPhotonActionSheet.swift | 289 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerSettingViewController.swift | 93 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 34 | Force tries should be avoided. \nTestAppDelegate.swift | 96 | Force tries should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nPrefs.swift | 179 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 368 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 366 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 14 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 15 | Force casts should be avoided. \nSQLiteHistoryFactories.swift | 16 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 430 | Force casts should be avoided. \nTabTrayController.swift | 657 | Force casts should be avoided. \nTabTrayController.swift | 690 | Force casts should be avoided. \nTabTrayController.swift | 764 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 848 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 436 | Force casts should be avoided. \nTabTrayController.swift | 669 | Force casts should be avoided. \nTabTrayController.swift | 702 | Force casts should be avoided. \nTabTrayController.swift | 777 | Force casts should be avoided. \nTabTrayController.swift | 817 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 754 | Force casts should be avoided. \nSQLiteHistory.swift | 797 | Force casts should be avoided. \nSQLiteHistory.swift | 802 | Force casts should be avoided. \nSQLiteHistory.swift | 900 | Force casts should be avoided. \nSQLiteHistory.swift | 921 | Force casts should be avoided. \nSQLiteHistory.swift | 922 | Force casts should be avoided. \nSQLiteHistory.swift | 923 | Force casts should be avoided. \nSQLiteHistory.swift | 924 | Force casts should be avoided. \nSQLiteHistory.swift | 225 | Limit vertical whitespace to a single empty line. Currently 2. \nSQLiteHistory.swift | 157 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSQLiteHistory.swift | 178 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerHelper.swift | 44 | Limit vertical whitespace to a single empty line. Currently 2. \nContentBlockerHelper.swift | 52 | Limit vertical whitespace to a single empty line. Currently 2. \nPhotonActionSheet.swift | 210 | Force casts should be avoided. \nPhotonActionSheet.swift | 271 | Force casts should be avoided. \nPhotonActionSheet.swift | 285 | Force casts should be avoided. \nPhotonActionSheet.swift | 290 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerHelper.swift | 116 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerHelper.swift | 44 | Limit vertical whitespace to a single empty line. Currently 2. \nContentBlockerHelper.swift | 52 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerHelper.swift | 116 | Opening braces should be preceded by a single space and on the same line as the declaration. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabLocationView.swift | 191 | Swift constructors are preferred over legacy convenience functions. \nContentBlockerHelper.swift | 52 | Limit vertical whitespace to a single empty line. Currently 2. \nContentBlockerHelper.swift | 60 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerHelper.swift | 146 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTrackingProtectionPageStats.swift | 165 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 430 | Force casts should be avoided. \nTabTrayController.swift | 657 | Force casts should be avoided. \nTabTrayController.swift | 690 | Force casts should be avoided. \nTabTrayController.swift | 764 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 395 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 313 | Force casts should be avoided. \nTopTabsViewController.swift | 356 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 426 | Force casts should be avoided. \nTabTrayController.swift | 653 | Force casts should be avoided. \nTabTrayController.swift | 686 | Force casts should be avoided. \nTabTrayController.swift | 760 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 537 | Force casts should be avoided. \nSearchViewController.swift | 563 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 308 | Force casts should be avoided. \nActivityStreamPanel.swift | 336 | Force casts should be avoided. \nActivityStreamPanel.swift | 430 | Force casts should be avoided. \nActivityStreamPanel.swift | 440 | Force casts should be avoided. \nActivityStreamPanel.swift | 447 | Force casts should be avoided. \nActivityStreamPanel.swift | 453 | Force casts should be avoided. \nActivityStreamPanel.swift | 678 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 568 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 301 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 400 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 318 | Force casts should be avoided. \nTopTabsViewController.swift | 361 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \nSearchViewController.swift | 608 | Force casts should be avoided. \nSearchViewController.swift | 634 | Force casts should be avoided. \nSearchViewController.swift | 455 | if,for,while,do statements shouldn't wrap their conditionals in parentheses. \nSearchViewController.swift | 426 | Explicitly calling .init() should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginListViewController.swift | 459 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 844 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 432 | Force casts should be avoided. \nTabTrayController.swift | 665 | Force casts should be avoided. \nTabTrayController.swift | 698 | Force casts should be avoided. \nTabTrayController.swift | 773 | Force casts should be avoided. \nTabTrayController.swift | 813 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nContentBlockerSettingViewController.swift | 99 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTrackingProtectionPageStats.swift | 201 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTrackingProtectionPageStats.swift | 185 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClearPrivateDataTableViewController.swift | 167 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTrackingProtectionPageStats.swift | 220 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTrackingProtectionPageStats.swift | 213 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. \nActivityStreamPanel.swift | 304 | Force casts should be avoided. \nActivityStreamPanel.swift | 332 | Force casts should be avoided. \nActivityStreamPanel.swift | 426 | Force casts should be avoided. \nActivityStreamPanel.swift | 436 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 449 | Force casts should be avoided. \nActivityStreamPanel.swift | 674 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 844 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 432 | Force casts should be avoided. \nTabTrayController.swift | 665 | Force casts should be avoided. \nTabTrayController.swift | 698 | Force casts should be avoided. \nTabTrayController.swift | 773 | Force casts should be avoided. \nTabTrayController.swift | 813 | Limit vertical whitespace to a single empty line. Currently 2. \nTopTabsViewController.swift | 402 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \nReaderPanel.swift | 366 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTrackingProtectionPageStats.swift | 214 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  3 Markdowns\n\nSentry check list\n\n\n[x] I understand that only .fatal events will be reported on release\n\n\n[x] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 210 | Force casts should be avoided. \nPhotonActionSheet.swift | 282 | Force casts should be avoided. \nPhotonActionSheet.swift | 296 | Force casts should be avoided. \nPhotonActionSheet.swift | 301 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClearPrivateDataTableViewController.swift | 165 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 843 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 431 | Force casts should be avoided. \nTabTrayController.swift | 664 | Force casts should be avoided. \nTabTrayController.swift | 697 | Force casts should be avoided. \nTabTrayController.swift | 772 | Force casts should be avoided. \nTabTrayController.swift | 812 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClearPrivateDataTableViewController.swift | 173 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \nTopTabsViewController.swift | 402 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 210 | Force casts should be avoided. \nPhotonActionSheet.swift | 282 | Force casts should be avoided. \nPhotonActionSheet.swift | 296 | Force casts should be avoided. \nPhotonActionSheet.swift | 301 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSettingsTableViewController.swift | 595 | Force casts should be avoided. \nSettingsTableViewController.swift | 615 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 201 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nAppDelegate.swift | 40 | Force casts should be avoided. \nUIViewExtensions.swift | 54 | Force casts should be avoided. \nSensitiveViewController.swift | 31 | An object should only remove itself as an observer in deinit. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 841 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nSearchEngines.swift | 148 | Force tries should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nSearchViewController.swift | 609 | Force casts should be avoided. \nSearchViewController.swift | 635 | Force casts should be avoided. \nTabTrayController.swift | 432 | Force casts should be avoided. \nTabTrayController.swift | 670 | Force casts should be avoided. \nTabTrayController.swift | 703 | Force casts should be avoided. \nTabTrayController.swift | 778 | Force casts should be avoided. \nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \nActivityStreamPanel.swift | 289 | Force casts should be avoided. \nActivityStreamPanel.swift | 304 | Force casts should be avoided. \nActivityStreamPanel.swift | 332 | Force casts should be avoided. \nActivityStreamPanel.swift | 426 | Force casts should be avoided. \nActivityStreamPanel.swift | 436 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 449 | Force casts should be avoided. \nActivityStreamPanel.swift | 674 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 568 | Force casts should be avoided. \nReaderPanel.swift | 365 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 201 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 145 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 171 | Force casts should be avoided. \nLoginDetailViewController.swift | 180 | Force casts should be avoided. \nLoginDetailViewController.swift | 199 | Force casts should be avoided. \nLoginDetailViewController.swift | 305 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 593 | Force casts should be avoided. \nSettingsTableViewController.swift | 613 | Force casts should be avoided. \nPhotonActionSheet.swift | 204 | Force casts should be avoided. \nPhotonActionSheet.swift | 276 | Force casts should be avoided. \nPhotonActionSheet.swift | 290 | Force casts should be avoided. \nPhotonActionSheet.swift | 295 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nFaviconFetcher.swift | 274 | Force tries should be avoided. \nNotificationService.swift | 229 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 105 | Force casts should be avoided. \nClientPickerViewController.swift | 113 | Force casts should be avoided. \nProfile.swift | 377 | Force casts should be avoided. \nKeyboardHelper.swift | 17 | Force casts should be avoided. \nUserAgent.swift | 80 | Force tries should be avoided. \nUserAgent.swift | 113 | Force tries should be avoided. \nUserAgent.swift | 121 | Force tries should be avoided. \nSQLiteBookmarksSyncing.swift | 193 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 194 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 828 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 881 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 883 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 887 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 888 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 734 | Force casts should be avoided. \nSQLiteHistory.swift | 777 | Force casts should be avoided. \nSQLiteHistory.swift | 782 | Force casts should be avoided. \nSQLiteHistory.swift | 880 | Force casts should be avoided. \nSQLiteHistory.swift | 901 | Force casts should be avoided. \nSQLiteHistory.swift | 902 | Force casts should be avoided. \nSQLiteHistory.swift | 903 | Force casts should be avoided. \nSQLiteHistory.swift | 904 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 196 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 302 | Force casts should be avoided. \nStorageClient.swift | 556 | Force casts should be avoided. \nStorageClient.swift | 699 | Force casts should be avoided. \nTabsPayload.swift | 141 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 366 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \nTabTrayController.swift | 849 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 432 | Force casts should be avoided. \nTabTrayController.swift | 670 | Force casts should be avoided. \nTabTrayController.swift | 703 | Force casts should be avoided. \nTabTrayController.swift | 778 | Force casts should be avoided. \nTabTrayController.swift | 818 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \nTopTabsViewController.swift | 402 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 842 | Force casts should be avoided. \nTabTrayController.swift | 850 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 433 | Force casts should be avoided. \nTabTrayController.swift | 671 | Force casts should be avoided. \nTabTrayController.swift | 704 | Force casts should be avoided. \nTabTrayController.swift | 779 | Force casts should be avoided. \nTabTrayController.swift | 819 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 850 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 433 | Force casts should be avoided. \nTabTrayController.swift | 671 | Force casts should be avoided. \nTabTrayController.swift | 704 | Force casts should be avoided. \nTabTrayController.swift | 779 | Force casts should be avoided. \nTabTrayController.swift | 819 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 223 | Force casts should be avoided. \nPhotonActionSheet.swift | 295 | Force casts should be avoided. \nPhotonActionSheet.swift | 309 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 205 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientPickerViewController.swift | 102 | Force casts should be avoided. \nClientPickerViewController.swift | 104 | Force casts should be avoided. \nClientPickerViewController.swift | 112 | Force casts should be avoided. \nProfile.swift | 380 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 196 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 302 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nBrowserViewController.swift | 841 | Force casts should be avoided. \nTabTrayController.swift | 849 | Else and catch should be on the same line, one space after the previous declaration. \nTabTrayController.swift | 432 | Force casts should be avoided. \nTabTrayController.swift | 670 | Force casts should be avoided. \nTabTrayController.swift | 703 | Force casts should be avoided. \nTabTrayController.swift | 778 | Force casts should be avoided. \nTabTrayController.swift | 818 | Limit vertical whitespace to a single empty line. Currently 2. \nReaderPanel.swift | 365 | Force casts should be avoided. \nProfile.swift | 377 | Force casts should be avoided. \nBrowserDB.swift | 24 | Force tries should be avoided. \nSQLiteReadingList.swift | 112 | Force casts should be avoided. \nSQLiteReadingList.swift | 114 | Force casts should be avoided. \nSQLiteReadingList.swift | 115 | Force casts should be avoided. \nSQLiteReadingList.swift | 116 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 204 | Force casts should be avoided. \nPhotonActionSheet.swift | 276 | Force casts should be avoided. \nPhotonActionSheet.swift | 290 | Force casts should be avoided. \nPhotonActionSheet.swift | 295 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 842 | Force casts should be avoided. \nTopTabsViewController.swift | 402 | Else and catch should be on the same line, one space after the previous declaration. \nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 301 | if,for,while,do,catch statements shouldn't wrap their conditionals or arguments in parentheses. \nActivityStreamTopSitesCell.swift | 505 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 568 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 201 | Force casts should be avoided. \nSettingsTableViewController.swift | 595 | Force casts should be avoided. \nSettingsTableViewController.swift | 615 | Force casts should be avoided. \nPhotonActionSheet.swift | 210 | Force casts should be avoided. \nPhotonActionSheet.swift | 282 | Force casts should be avoided. \nPhotonActionSheet.swift | 296 | Force casts should be avoided. \nPhotonActionSheet.swift | 301 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nUnifiedTelemetry.swift | 47 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 49 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 49 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 131 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 135 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nUnifiedTelemetry.swift | 47 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 49 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 49 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 131 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 135 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 35 | Force casts should be avoided. \nTestAppDelegate.swift | 37 | Force tries should be avoided. \nTestAppDelegate.swift | 40 | Force tries should be avoided. \nTestAppDelegate.swift | 102 | Force tries should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 36 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 898 | Force casts should be avoided. \nSQLiteBookmarksBase.swift | 58 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 409 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 422 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 452 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 598 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 599 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 612 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 623 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 631 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 632 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 647 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 695 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 696 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 793 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 204 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 205 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 668 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 848 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 904 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 906 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 906 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 910 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 911 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 925 | Force casts should be avoided. \nSQLiteHistory.swift | 157 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSQLiteHistory.swift | 183 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \nSQLiteHistory.swift | 781 | Force casts should be avoided. \nSQLiteHistory.swift | 824 | Force casts should be avoided. \nSQLiteHistory.swift | 829 | Force casts should be avoided. \nSQLiteHistory.swift | 935 | Force casts should be avoided. \nSQLiteHistory.swift | 957 | Force casts should be avoided. \nSQLiteHistory.swift | 958 | Force casts should be avoided. \nSQLiteHistory.swift | 959 | Force casts should be avoided. \nSQLiteHistory.swift | 960 | Force casts should be avoided. \nSQLiteHistory.swift | 233 | Limit vertical whitespace to a single empty line. Currently 2. \nSQLiteLogins.swift | 27 | Force casts should be avoided. \nSQLiteLogins.swift | 42 | Force casts should be avoided. \nSQLiteLogins.swift | 84 | Force casts should be avoided. \nSQLiteLogins.swift | 834 | Force casts should be avoided. \nSQLiteQueue.swift | 25 | Force casts should be avoided. \nSQLiteReadingList.swift | 112 | Force casts should be avoided. \nSQLiteReadingList.swift | 114 | Force casts should be avoided. \nSQLiteReadingList.swift | 115 | Force casts should be avoided. \nSQLiteReadingList.swift | 116 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 196 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 302 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 401 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 382 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 207 | Force casts should be avoided. \nPhotonActionSheet.swift | 279 | Force casts should be avoided. \nPhotonActionSheet.swift | 293 | Force casts should be avoided. \nPhotonActionSheet.swift | 298 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 401 | Prefer -> Void over -> (). \nProfile.swift | 382 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 841 | Force casts should be avoided. \nSearchViewController.swift | 609 | Force casts should be avoided. \nSearchViewController.swift | 635 | Force casts should be avoided. \nTabTrayController.swift | 432 | Force casts should be avoided. \nTabTrayController.swift | 670 | Force casts should be avoided. \nTabTrayController.swift | 703 | Force casts should be avoided. \nTabTrayController.swift | 778 | Force casts should be avoided. \nActivityStreamPanel.swift | 289 | Force casts should be avoided. \nActivityStreamPanel.swift | 304 | Force casts should be avoided. \nActivityStreamPanel.swift | 332 | Force casts should be avoided. \nActivityStreamPanel.swift | 426 | Force casts should be avoided. \nActivityStreamPanel.swift | 436 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 449 | Force casts should be avoided. \nActivityStreamPanel.swift | 674 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 272 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 568 | Force casts should be avoided. \nReaderPanel.swift | 365 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 201 | Force casts should be avoided. \nLoginListViewController.swift | 459 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 171 | Force casts should be avoided. \nSettingsTableViewController.swift | 593 | Force casts should be avoided. \nSettingsTableViewController.swift | 613 | Force casts should be avoided. \nPhotonActionSheet.swift | 207 | Force casts should be avoided. \nPhotonActionSheet.swift | 279 | Force casts should be avoided. \nPhotonActionSheet.swift | 293 | Force casts should be avoided. \nPhotonActionSheet.swift | 298 | Force casts should be avoided. \nTabsButton.swift | 154 | Force casts should be avoided. \nFaviconFetcher.swift | 274 | Force tries should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 105 | Force casts should be avoided. \nClientPickerViewController.swift | 113 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 841 | Force casts should be avoided. \nAppSettingsOptions.swift | 596 | Force casts should be avoided. \nAppSettingsOptions.swift | 597 | Force casts should be avoided. \nAppSettingsOptions.swift | 673 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 401 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 114 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 849 | Force casts should be avoided. \nPhotonActionSheet.swift | 216 | Force casts should be avoided. \nPhotonActionSheet.swift | 288 | Force casts should be avoided. \nPhotonActionSheet.swift | 302 | Force casts should be avoided. \nPhotonActionSheet.swift | 307 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 401 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 114 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 849 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 434 | Force casts should be avoided. \nTabTrayController.swift | 675 | Force casts should be avoided. \nTabTrayController.swift | 708 | Force casts should be avoided. \nTabTrayController.swift | 783 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 405 | Prefer -> Void over -> (). \nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 256 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 434 | Force casts should be avoided. \nTabTrayController.swift | 675 | Force casts should be avoided. \nTabTrayController.swift | 708 | Force casts should be avoided. \nTabTrayController.swift | 783 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 389 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nPrefs.swift | 181 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 114 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 849 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFaviconFetcher.swift | 274 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 114 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 849 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 114 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 849 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 850 | Force casts should be avoided. \nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 434 | Force casts should be avoided. \nTabTrayController.swift | 674 | Force casts should be avoided. \nTabTrayController.swift | 707 | Force casts should be avoided. \nTabTrayController.swift | 782 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 851 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 420 | Prefer -> Void over -> (). \nSQLiteHistory.swift | 790 | Force casts should be avoided. \nSQLiteHistory.swift | 833 | Force casts should be avoided. \nSQLiteHistory.swift | 838 | Force casts should be avoided. \nSQLiteHistory.swift | 944 | Force casts should be avoided. \nSQLiteHistory.swift | 966 | Force casts should be avoided. \nSQLiteHistory.swift | 967 | Force casts should be avoided. \nSQLiteHistory.swift | 968 | Force casts should be avoided. \nSQLiteHistory.swift | 969 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 256 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 172 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 854 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 853 | Force casts should be avoided. \nBrowserViewController.swift | 393 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 289 | Force casts should be avoided. \nActivityStreamPanel.swift | 304 | Force casts should be avoided. \nActivityStreamPanel.swift | 332 | Force casts should be avoided. \nActivityStreamPanel.swift | 426 | Force casts should be avoided. \nActivityStreamPanel.swift | 436 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 449 | Force casts should be avoided. \nActivityStreamPanel.swift | 674 | Force casts should be avoided. \nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 20 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 133 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 409 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 422 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 452 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 598 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 599 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 612 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 623 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 631 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 632 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 647 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 695 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 696 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 793 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 120 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 854 | Force casts should be avoided. \nBrowserViewController.swift | 394 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. \nActivityStreamPanel.swift | 304 | Force casts should be avoided. \nActivityStreamPanel.swift | 332 | Force casts should be avoided. \nActivityStreamPanel.swift | 426 | Force casts should be avoided. \nActivityStreamPanel.swift | 436 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 449 | Force casts should be avoided. \nActivityStreamPanel.swift | 674 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 268 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 120 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 854 | Force casts should be avoided. \nBrowserViewController.swift | 394 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 254 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 120 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 854 | Force casts should be avoided. \nBrowserViewController.swift | 394 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 120 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 854 | Force casts should be avoided. \nBrowserViewController.swift | 394 | Limit vertical whitespace to a single empty line. Currently 2. \nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 268 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 421 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 52 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 110 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 341 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 281 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 227 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 424 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 389 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 120 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 853 | Force casts should be avoided. \nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 434 | Force casts should be avoided. \nTabTrayController.swift | 674 | Force casts should be avoided. \nTabTrayController.swift | 707 | Force casts should be avoided. \nTabTrayController.swift | 782 | Force casts should be avoided. \nTopTabsViewController.swift | 320 | Force casts should be avoided. \nTopTabsViewController.swift | 363 | Force casts should be avoided. \nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 317 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 443 | Force casts should be avoided. \nActivityStreamPanel.swift | 453 | Force casts should be avoided. \nActivityStreamPanel.swift | 460 | Force casts should be avoided. \nActivityStreamPanel.swift | 467 | Force casts should be avoided. \nActivityStreamPanel.swift | 473 | Force casts should be avoided. \nActivityStreamPanel.swift | 711 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 444 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 116 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 120 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 853 | Force casts should be avoided. \nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 434 | Force casts should be avoided. \nTabTrayController.swift | 672 | Force casts should be avoided. \nTabTrayController.swift | 705 | Force casts should be avoided. \nTabTrayController.swift | 780 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 844 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 462 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 844 | Force casts should be avoided. \nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 844 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 317 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 445 | Force casts should be avoided. \nActivityStreamPanel.swift | 455 | Force casts should be avoided. \nActivityStreamPanel.swift | 462 | Force casts should be avoided. \nActivityStreamPanel.swift | 469 | Force casts should be avoided. \nActivityStreamPanel.swift | 475 | Force casts should be avoided. \nActivityStreamPanel.swift | 713 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 227 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 227 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 227 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 227 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 844 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 845 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 254 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 317 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 456 | Force casts should be avoided. \nActivityStreamPanel.swift | 463 | Force casts should be avoided. \nActivityStreamPanel.swift | 470 | Force casts should be avoided. \nActivityStreamPanel.swift | 476 | Force casts should be avoided. \nActivityStreamPanel.swift | 714 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 293 | Force casts should be avoided. \nActivityStreamPanel.swift | 317 | Force casts should be avoided. \nActivityStreamPanel.swift | 345 | Force casts should be avoided. \nActivityStreamPanel.swift | 446 | Force casts should be avoided. \nActivityStreamPanel.swift | 456 | Force casts should be avoided. \nActivityStreamPanel.swift | 463 | Force casts should be avoided. \nActivityStreamPanel.swift | 470 | Force casts should be avoided. \nActivityStreamPanel.swift | 476 | Force casts should be avoided. \nActivityStreamPanel.swift | 714 | Force casts should be avoided. \nDownloadsPanel.swift | 52 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 110 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 341 | Force casts should be avoided. \nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 105 | Force casts should be avoided. \nClientPickerViewController.swift | 113 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 281 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 845 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 176 | Limit vertical whitespace to a single empty line. Currently 2. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 133 | Force casts should be avoided. \nNotificationService.swift | 160 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nNotificationService.swift | 256 | Force casts should be avoided. \nProfile.swift | 388 | Force casts should be avoided. \nProfile.swift | 912 | Fallthroughs can only be used if the case contains at least one other statement. \nPrefs.swift | 183 | Force casts should be avoided. \nBrowserSchema.swift | 958 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 23 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 36 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 38 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 45 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 46 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 219 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 325 | Force casts should be avoided. \nBookmarkPayload.swift | 80 | Fallthroughs can only be used if the case contains at least one other statement. \nKeysPayload.swift | 47 | Force casts should be avoided. \nStorageClient.swift | 556 | Force casts should be avoided. \nStorageClient.swift | 699 | Force casts should be avoided. \nSyncTelemetry.swift | 44 | Force casts should be avoided. \nSyncTelemetry.swift | 45 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nAppSettingsOptions.swift | 528 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 254 | Limit vertical whitespace to a single empty line. Currently 2. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 222 | Force casts should be avoided. \nBrowserViewController.swift | 115 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nBrowserViewController.swift | 119 | Initializing an optional variable with nil is redundant. \nBrowserViewController.swift | 845 | Force casts should be avoided. \nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTopTabsViewController.swift | 324 | Force casts should be avoided. \nTopTabsViewController.swift | 367 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 463 | Prefer -> Void over -> (). \nBrowserDB.swift | 24 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 227 | Force casts should be avoided. \nPhotonActionSheet.swift | 299 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 232 | Force casts should be avoided. \nPhotonActionSheet.swift | 304 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \nPhotonActionSheet.swift | 324 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTopTabsViewController.swift | 31 | Limit vertical whitespace to a single empty line. Currently 2. \nTabDisplayManager.swift | 86 | Force casts should be avoided. \nTabDisplayManager.swift | 96 | Force casts should be avoided. \nTabDisplayManager.swift | 234 | Limit vertical whitespace to a single empty line. Currently 3. \nTabDisplayManager.swift | 449 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 254 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 240 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 254 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 389 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDeviceInfo.swift | 33 | if,for,while,do,catch statements shouldn't wrap their conditionals or arguments in parentheses. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nSearchViewController.swift | 609 | Force casts should be avoided. \nSearchViewController.swift | 635 | Force casts should be avoided. \nTabTrayController.swift | 445 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTopTabsViewController.swift | 31 | Limit vertical whitespace to a single empty line. Currently 2. \nActivityStreamPanel.swift | 292 | Force casts should be avoided. \nActivityStreamPanel.swift | 316 | Force casts should be avoided. \nActivityStreamPanel.swift | 344 | Force casts should be avoided. \nActivityStreamPanel.swift | 445 | Force casts should be avoided. \nActivityStreamPanel.swift | 455 | Force casts should be avoided. \nActivityStreamPanel.swift | 462 | Force casts should be avoided. \nActivityStreamPanel.swift | 469 | Force casts should be avoided. \nActivityStreamPanel.swift | 475 | Force casts should be avoided. \nActivityStreamPanel.swift | 713 | Force casts should be avoided. \nDownloadsPanel.swift | 52 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 110 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 341 | Force casts should be avoided. \nReaderPanel.swift | 365 | Force casts should be avoided. \nRemoteTabsPanel.swift | 159 | Force casts should be avoided. \nRemoteTabsPanel.swift | 201 | Force casts should be avoided. \nLoginListViewController.swift | 459 | Force casts should be avoided. \nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 172 | Force casts should be avoided. \nLoginDetailViewController.swift | 180 | Force casts should be avoided. \nLoginDetailViewController.swift | 199 | Force casts should be avoided. \nLoginDetailViewController.swift | 305 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 585 | Force casts should be avoided. \nSettingsTableViewController.swift | 605 | Force casts should be avoided. \nPhotonActionSheet.swift | 232 | Force casts should be avoided. \nPhotonActionSheet.swift | 304 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \nPhotonActionSheet.swift | 324 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 462 | Prefer -> Void over -> (). \nTabsButton.swift | 154 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 281 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 121 | Force casts should be avoided. \nTabDisplayManager.swift | 17 | Limit vertical whitespace to a single empty line. Currently 2. \nTabDisplayManager.swift | 242 | Limit vertical whitespace to a single empty line. Currently 3. \nTabDisplayManager.swift | 470 | Limit vertical whitespace to a single empty line. Currently 2. \nTabTrayController.swift | 189 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 49 | Limit vertical whitespace to a single empty line. Currently 2. \nTabTrayController.swift | 645 | Limit vertical whitespace to a single empty line. Currently 2. \nTopTabsViewController.swift | 31 | Limit vertical whitespace to a single empty line. Currently 2. \nTopTabsViewController.swift | 38 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nPhotonActionSheet.swift | 232 | Force casts should be avoided. \nPhotonActionSheet.swift | 304 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \nPhotonActionSheet.swift | 324 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 406 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTopTabsViewController.swift | 31 | Limit vertical whitespace to a single empty line. Currently 2. \nSettingsTableViewController.swift | 597 | Force casts should be avoided. \nSettingsTableViewController.swift | 617 | Force casts should be avoided. \nTabsButton.swift | 162 | Force casts should be avoided. \nTabsButton.swift | 18 | Explicitly calling .init() should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  4 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nAppDelegate.swift | 239 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 253 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1940 | Limit vertical whitespace to a single empty line. Currently 2. \nOpenWithSettingsViewController.swift | 84 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 85 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 85 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 86 | Force casts should be avoided. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nTabDisplayManager.swift | 133 | Force casts should be avoided. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 133 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 205 | Force casts should be avoided. \nPhotonActionSheet.swift | 242 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 329 | Force casts should be avoided. \nPhotonActionSheet.swift | 334 | Force casts should be avoided. \nTabsButton.swift | 147 | Force casts should be avoided. \nUnifiedTelemetry.swift | 62 | Limit vertical whitespace to a single empty line. Currently 2. \nNotificationService.swift | 160 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nNotificationService.swift | 256 | Force casts should be avoided. \nProfile.swift | 388 | Force casts should be avoided. \nProfile.swift | 912 | Fallthroughs can only be used if the case contains at least one other statement. \nPrefs.swift | 183 | Force casts should be avoided. \nBrowserSchema.swift | 979 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 23 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 36 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 38 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 45 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 46 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 219 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 325 | Force casts should be avoided. \nBookmarkPayload.swift | 80 | Fallthroughs can only be used if the case contains at least one other statement. \nKeysPayload.swift | 47 | Force casts should be avoided. \nStorageClient.swift | 556 | Force casts should be avoided. \nStorageClient.swift | 699 | Force casts should be avoided. \nSyncTelemetry.swift | 44 | Force casts should be avoided. \nSyncTelemetry.swift | 45 | Force casts should be avoided. \nWebsiteDataManagementViewController.swift | 179 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebsiteDataManagementViewController.swift | 179 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nAppSettingsOptions.swift | 528 | Lines should not have trailing semicolons. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nOpenWithSettingsViewController.swift | 89 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 90 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 91 | Force casts should be avoided. \nAdvanceAccountSettingViewController.swift | 145 | Force casts should be avoided. \nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 132 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 172 | Force casts should be avoided. \nLoginDetailViewController.swift | 180 | Force casts should be avoided. \nLoginDetailViewController.swift | 199 | Force casts should be avoided. \nLoginDetailViewController.swift | 305 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 212 | Force casts should be avoided. \nSettingsTableViewController.swift | 595 | Force casts should be avoided. \nSettingsTableViewController.swift | 616 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 188 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nOpenWithSettingsViewController.swift | 84 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 85 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 85 | Force casts should be avoided. \nOpenWithSettingsViewController.swift | 86 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 271 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 567 | Force casts should be avoided. \nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 109 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 340 | Force casts should be avoided. \nReaderPanel.swift | 362 | Force casts should be avoided. \nClearPrivateDataTableViewController.swift | 170 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 204 | Force casts should be avoided. \nSettingsTableViewController.swift | 606 | Force casts should be avoided. \nSettingsTableViewController.swift | 627 | Force casts should be avoided. \nPhotonActionSheet.swift | 232 | Force casts should be avoided. \nPhotonActionSheet.swift | 304 | Force casts should be avoided. \nPhotonActionSheet.swift | 319 | Force casts should be avoided. \nPhotonActionSheet.swift | 324 | Force casts should be avoided. \nTabsButton.swift | 160 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 280 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 186 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nTabTrayController.swift | 460 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabsButton.swift | 147 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 609 | Force casts should be avoided. \nSearchViewController.swift | 635 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 323 | Force casts should be avoided. \nActivityStreamPanel.swift | 351 | Force casts should be avoided. \nActivityStreamPanel.swift | 452 | Force casts should be avoided. \nActivityStreamPanel.swift | 462 | Force casts should be avoided. \nActivityStreamPanel.swift | 469 | Force casts should be avoided. \nActivityStreamPanel.swift | 476 | Force casts should be avoided. \nActivityStreamPanel.swift | 482 | Force casts should be avoided. \nActivityStreamPanel.swift | 720 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 275 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 571 | Force casts should be avoided. \nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 109 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 341 | Force casts should be avoided. \nReaderPanel.swift | 364 | Force casts should be avoided. \nRemoteTabsPanel.swift | 153 | Force casts should be avoided. \nRemoteTabsPanel.swift | 195 | Force casts should be avoided. \nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nSettingsTableViewController.swift | 606 | Force casts should be avoided. \nSettingsTableViewController.swift | 627 | Force casts should be avoided. \nPhotonActionSheet.swift | 238 | Force casts should be avoided. \nPhotonActionSheet.swift | 310 | Force casts should be avoided. \nPhotonActionSheet.swift | 325 | Force casts should be avoided. \nPhotonActionSheet.swift | 330 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 281 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 954 | Force casts should be avoided. \nSQLiteHistory.swift | 951 | Force casts should be avoided. \nSQLiteHistory.swift | 994 | Force casts should be avoided. \nSQLiteHistory.swift | 999 | Force casts should be avoided. \nSQLiteHistory.swift | 1105 | Force casts should be avoided. \nSQLiteHistory.swift | 1127 | Force casts should be avoided. \nSQLiteHistory.swift | 1128 | Force casts should be avoided. \nSQLiteHistory.swift | 1129 | Force casts should be avoided. \nSQLiteHistory.swift | 1130 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 126 | Force casts should be avoided. \nTabTrayController.swift | 225 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 957 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 239 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 253 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1890 | Limit vertical whitespace to a single empty line. Currently 2. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 952 | Force casts should be avoided. \nSQLiteHistory.swift | 995 | Force casts should be avoided. \nSQLiteHistory.swift | 1000 | Force casts should be avoided. \nSQLiteHistory.swift | 1106 | Force casts should be avoided. \nSQLiteHistory.swift | 1128 | Force casts should be avoided. \nSQLiteHistory.swift | 1129 | Force casts should be avoided. \nSQLiteHistory.swift | 1130 | Force casts should be avoided. \nSQLiteHistory.swift | 1131 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nRemoteTabsPanel.swift | 155 | Force casts should be avoided. \nRemoteTabsPanel.swift | 197 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 230 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 226 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 603 | Force casts should be avoided. \nSearchViewController.swift | 629 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 231 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 231 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClearPrivateDataTableViewController.swift | 171 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 127 | Force casts should be avoided. \nTabTrayController.swift | 231 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nStoragePerfTests.swift | 73 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 231 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 944 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 189 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 190 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 653 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 833 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 889 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 891 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 891 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 895 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 896 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 910 | Force casts should be avoided. \nSQLiteBookmarksSyncing.swift | 234 | Fallthroughs can only be used if the case contains at least one other statement. \nSQLiteHistory.swift | 916 | Force casts should be avoided. \nSQLiteHistory.swift | 959 | Force casts should be avoided. \nSQLiteHistory.swift | 964 | Force casts should be avoided. \nSQLiteHistory.swift | 1070 | Force casts should be avoided. \nSQLiteHistory.swift | 1092 | Force casts should be avoided. \nSQLiteHistory.swift | 1093 | Force casts should be avoided. \nSQLiteHistory.swift | 1094 | Force casts should be avoided. \nSQLiteHistory.swift | 1095 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 235 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSettingsTableViewController.swift | 605 | Force casts should be avoided. \nSettingsTableViewController.swift | 626 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 603 | Force casts should be avoided. \nSearchViewController.swift | 629 | Force casts should be avoided. \nDownloadsPanel.swift | 51 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 109 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 341 | Force casts should be avoided. \nRemoteTabsPanel.swift | 155 | Force casts should be avoided. \nRemoteTabsPanel.swift | 198 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 281 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 582 | Force casts should be avoided. \nAppSettingsOptions.swift | 583 | Force casts should be avoided. \nAppSettingsOptions.swift | 659 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 132 | Force casts should be avoided. \nProfile.swift | 388 | Force casts should be avoided. \nProfile.swift | 868 | Fallthroughs can only be used if the case contains at least one other statement. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 243 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 247 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 168 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 235 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1038 | Force casts should be avoided. \nSQLiteHistory.swift | 1081 | Force casts should be avoided. \nSQLiteHistory.swift | 1086 | Force casts should be avoided. \nSQLiteHistory.swift | 1192 | Force casts should be avoided. \nSQLiteHistory.swift | 1214 | Force casts should be avoided. \nSQLiteHistory.swift | 1215 | Force casts should be avoided. \nSQLiteHistory.swift | 1216 | Force casts should be avoided. \nSQLiteHistory.swift | 1217 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1063 | Force casts should be avoided. \nSQLiteHistory.swift | 1106 | Force casts should be avoided. \nSQLiteHistory.swift | 1111 | Force casts should be avoided. \nSQLiteHistory.swift | 1217 | Force casts should be avoided. \nSQLiteHistory.swift | 1239 | Force casts should be avoided. \nSQLiteHistory.swift | 1240 | Force casts should be avoided. \nSQLiteHistory.swift | 1241 | Force casts should be avoided. \nSQLiteHistory.swift | 1242 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 127 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 54 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 280 | Force casts should be avoided. \nDateGroupedTableData.swift | 14 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nSearchViewController.swift | 603 | Force casts should be avoided. \nSearchViewController.swift | 629 | Force casts should be avoided. \nSwipeAnimator.swift | 152 | Force casts should be avoided. \nReaderPanel.swift | 364 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 132 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 204 | Force casts should be avoided. \nFaviconFetcher.swift | 274 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 467 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  3 Markdowns\n\nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nWebsiteDataManagementViewController.swift | 179 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebsiteDataManagementViewController.swift | 179 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 528 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1063 | Force casts should be avoided. \nSQLiteHistory.swift | 1106 | Force casts should be avoided. \nSQLiteHistory.swift | 1111 | Force casts should be avoided. \nSQLiteHistory.swift | 1217 | Force casts should be avoided. \nSQLiteHistory.swift | 1239 | Force casts should be avoided. \nSQLiteHistory.swift | 1240 | Force casts should be avoided. \nSQLiteHistory.swift | 1241 | Force casts should be avoided. \nSQLiteHistory.swift | 1242 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 127 | Force casts should be avoided. \nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteRemoteClientsAndTabs.swift | 21 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 22 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 33 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 34 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 196 | Force casts should be avoided. \nSQLiteRemoteClientsAndTabs.swift | 302 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 603 | Force casts should be avoided. \nSearchViewController.swift | 629 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nUnifiedTelemetry.swift | 62 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 609 | Force casts should be avoided. \nSearchViewController.swift | 635 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 388 | Force casts should be avoided. \nProfile.swift | 868 | Fallthroughs can only be used if the case contains at least one other statement. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 174 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 127 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 176 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 176 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nWebsiteDataManagementViewController.swift | 184 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebsiteDataManagementViewController.swift | 184 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nUnifiedTelemetry.swift | 62 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 134 | Force casts should be avoided. \nUnifiedTelemetry.swift | 62 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 134 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1885 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserSchema.swift | 979 | Force casts should be avoided. \nSQLiteHistory.swift | 1056 | Force casts should be avoided. \nSQLiteHistory.swift | 1099 | Force casts should be avoided. \nSQLiteHistory.swift | 1104 | Force casts should be avoided. \nSQLiteHistory.swift | 1210 | Force casts should be avoided. \nSQLiteHistory.swift | 1232 | Force casts should be avoided. \nSQLiteHistory.swift | 1233 | Force casts should be avoided. \nSQLiteHistory.swift | 1234 | Force casts should be avoided. \nSQLiteHistory.swift | 1235 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 238 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 252 | Limit vertical whitespace to a single empty line. Currently 2. \nTestAppDelegate.swift | 37 | Force casts should be avoided. \nTestAppDelegate.swift | 39 | Force tries should be avoided. \nTestAppDelegate.swift | 42 | Force tries should be avoided. \nTestAppDelegate.swift | 104 | Force tries should be avoided. \nBrowserViewController.swift | 1885 | Limit vertical whitespace to a single empty line. Currently 2. \nTabDisplayManager.swift | 133 | Force casts should be avoided. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nTestAppDelegate.swift | 38 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1057 | Force casts should be avoided. \nSQLiteHistory.swift | 1100 | Force casts should be avoided. \nSQLiteHistory.swift | 1105 | Force casts should be avoided. \nSQLiteHistory.swift | 1211 | Force casts should be avoided. \nSQLiteHistory.swift | 1233 | Force casts should be avoided. \nSQLiteHistory.swift | 1234 | Force casts should be avoided. \nSQLiteHistory.swift | 1235 | Force casts should be avoided. \nSQLiteHistory.swift | 1236 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nBrowserDB.swift | 24 | Force tries should be avoided. \nSQLiteHistory.swift | 1076 | Force casts should be avoided. \nSQLiteHistory.swift | 1119 | Force casts should be avoided. \nSQLiteHistory.swift | 1124 | Force casts should be avoided. \nSQLiteHistory.swift | 1230 | Force casts should be avoided. \nSQLiteHistory.swift | 1252 | Force casts should be avoided. \nSQLiteHistory.swift | 1253 | Force casts should be avoided. \nSQLiteHistory.swift | 1254 | Force casts should be avoided. \nSQLiteHistory.swift | 1255 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 301 | Force casts should be avoided. \nActivityStreamPanel.swift | 325 | Force casts should be avoided. \nActivityStreamPanel.swift | 353 | Force casts should be avoided. \nActivityStreamPanel.swift | 454 | Force casts should be avoided. \nActivityStreamPanel.swift | 464 | Force casts should be avoided. \nActivityStreamPanel.swift | 471 | Force casts should be avoided. \nActivityStreamPanel.swift | 478 | Force casts should be avoided. \nActivityStreamPanel.swift | 484 | Force casts should be avoided. \nActivityStreamPanel.swift | 722 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nUnifiedTelemetry.swift | 62 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1076 | Force casts should be avoided. \nSQLiteHistory.swift | 1119 | Force casts should be avoided. \nSQLiteHistory.swift | 1124 | Force casts should be avoided. \nSQLiteHistory.swift | 1230 | Force casts should be avoided. \nSQLiteHistory.swift | 1252 | Force casts should be avoided. \nSQLiteHistory.swift | 1253 | Force casts should be avoided. \nSQLiteHistory.swift | 1254 | Force casts should be avoided. \nSQLiteHistory.swift | 1255 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nWebsiteDataManagementViewController.swift | 181 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebsiteDataManagementViewController.swift | 181 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nCredentialProviderViewController.swift | 125 | if,for,while,do,catch statements shouldn't wrap their conditionals or arguments in parentheses. \nCredentialProviderViewController.swift | 129 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nCredentialProviderViewController.swift | 2 | Header comments should be consistent with project patterns. \nCredentialProviderViewController.swift | 81 | Force casts should be avoided. \nCredentialProviderViewController.swift | 83 | Force casts should be avoided. \nCredentialProviderViewController.swift | 106 | Limit vertical whitespace to a single empty line. Currently 2. \nCredentialProviderViewController.swift | 133 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 239 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 253 | Limit vertical whitespace to a single empty line. Currently 2. \nTestAppDelegate.swift | 35 | Force casts should be avoided. \nTestAppDelegate.swift | 37 | Force tries should be avoided. \nTestAppDelegate.swift | 40 | Force tries should be avoided. \nTestAppDelegate.swift | 102 | Force tries should be avoided. \nBrowserViewController.swift | 1940 | Limit vertical whitespace to a single empty line. Currently 2. \nTabDisplayManager.swift | 133 | Force casts should be avoided. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nTestAppDelegate.swift | 36 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 238 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 252 | Limit vertical whitespace to a single empty line. Currently 2. \nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 137 | Force casts should be avoided. \nSiriSettingsViewController.swift | 50 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nAppSettingsOptions.swift | 528 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 242 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 329 | Force casts should be avoided. \nPhotonActionSheet.swift | 334 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 467 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPrefs.swift | 183 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamTopSitesCell.swift | 275 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 571 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nCredentialProviderViewController.swift | 125 | if,for,while,do,catch statements shouldn't wrap their conditionals or arguments in parentheses. \nCredentialProviderViewController.swift | 129 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nCredentialProviderViewController.swift | 2 | Header comments should be consistent with project patterns. \nCredentialProviderViewController.swift | 81 | Force casts should be avoided. \nCredentialProviderViewController.swift | 83 | Force casts should be avoided. \nCredentialProviderViewController.swift | 106 | Limit vertical whitespace to a single empty line. Currently 2. \nCredentialProviderViewController.swift | 133 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nStrings.swift | 610 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nStoragePerfTests.swift | 56 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nCredentialProviderViewController.swift | 151 | if,for,while,do,catch statements shouldn't wrap their conditionals or arguments in parentheses. \nCredentialProviderViewController.swift | 155 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nCredentialProviderViewController.swift | 2 | Header comments should be consistent with project patterns. \nCredentialProviderViewController.swift | 101 | Force casts should be avoided. \nCredentialProviderViewController.swift | 103 | Force casts should be avoided. \nCredentialProviderViewController.swift | 126 | Limit vertical whitespace to a single empty line. Currently 2. \nCredentialProviderViewController.swift | 159 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 593 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 670 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 205 | Force casts should be avoided. \nPhotonActionSheet.swift | 242 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 329 | Force casts should be avoided. \nPhotonActionSheet.swift | 334 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 528 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 388 | Force casts should be avoided. \nProfile.swift | 912 | Fallthroughs can only be used if the case contains at least one other statement. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1936 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginsHelper.swift | 63 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nLoginsHelper.swift | 70 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nLoginsHelper.swift | 93 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nLoginsHelper.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nLoginsHelper.swift | 260 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFaviconFetcher.swift | 274 | Force tries should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 127 | Force casts should be avoided. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  3 Markdowns\n\nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1919 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1923 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1923 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 105 | Force casts should be avoided. \nClientPickerViewController.swift | 113 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nStrings.swift | 612 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1921 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginListViewController.swift | 460 | Force casts should be avoided. \nLoginListViewController.swift | 602 | Limit vertical whitespace to a single empty line. Currently 2. \nLoginListViewController.swift | 372 | Property setter access level shouldn't be explicit if it's the same as the variable access level. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1923 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamTopSitesCell.swift | 275 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 571 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 105 | Force casts should be avoided. \nClientPickerViewController.swift | 113 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 250 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 254 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginListViewController.swift | 459 | Force casts should be avoided. \nLoginListViewController.swift | 601 | Limit vertical whitespace to a single empty line. Currently 2. \nLoginListViewController.swift | 371 | Property setter access level shouldn't be explicit if it's the same as the variable access level. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1401 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1925 | Limit vertical whitespace to a single empty line. Currently 2. \nTabDisplayManager.swift | 58 | Initializing an optional variable with nil is redundant. \nTabDisplayManager.swift | 185 | Force casts should be avoided. \nTabTrayController.swift | 247 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 251 | Swift constructors are preferred over legacy convenience functions. \nTopTabsViewController.swift | 101 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 390 | There should be no space before and one after any comma. \nTabTrayController.swift | 662 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 118 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 509 | Prefer -> Void over -> (). \nProfile.swift | 920 | Fallthroughs can only be used if the case contains at least one other statement. \nProfile.swift | 396 | Force casts should be avoided. \nWebExtensionAlarmsAPI.swift | 23 | Explicitly calling .init() should be avoided. \nWebExtensionBrowserActionAPI.swift | 33 | Explicitly calling .init() should be avoided. \nWebExtensionBrowserSettingsAPI.swift | 19 | Explicitly calling .init() should be avoided. \nWebExtensionClipboardAPI.swift | 19 | Explicitly calling .init() should be avoided. \nWebExtensionCommandsAPI.swift | 21 | Explicitly calling .init() should be avoided. \nWebExtensionContentScriptsAPI.swift | 19 | Explicitly calling .init() should be avoided. \nWebExtensionCookiesAPI.swift | 231 | Explicitly calling .init() should be avoided. \nWebExtensionCookiesAPI.swift | 9 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionCookiesAPI.swift | 14 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionCookiesAPI.swift | 24 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionCookiesAPI.swift | 128 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionCookiesAPI.swift | 156 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionCookiesAPI.swift | 204 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionDNSAPI.swift | 19 | Explicitly calling .init() should be avoided. \nWebExtensionDownloadsAPI.swift | 32 | Explicitly calling .init() should be avoided. \nWebExtensionExtensionAPI.swift | 26 | Explicitly calling .init() should be avoided. \nWebExtensionFindAPI.swift | 21 | Explicitly calling .init() should be avoided. \nWebExtensionI18nAPI.swift | 22 | Explicitly calling .init() should be avoided. \nWebExtensionIdentityAPI.swift | 20 | Explicitly calling .init() should be avoided. \nWebExtensionIdleAPI.swift | 20 | Explicitly calling .init() should be avoided. \nWebExtensionManagementAPI.swift | 27 | Explicitly calling .init() should be avoided. \nWebExtensionNotificationsAPI.swift | 30 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionNotificationsAPI.swift | 57 | Explicitly calling .init() should be avoided. \nWebExtensionPageActionAPI.swift | 27 | Explicitly calling .init() should be avoided. \nWebExtensionPermissionsAPI.swift | 22 | Explicitly calling .init() should be avoided. \nWebExtensionPrivacyAPI.swift | 19 | Explicitly calling .init() should be avoided. \nWebExtensionProxyAPI.swift | 20 | Explicitly calling .init() should be avoided. \nWebExtensionRuntimeAPI.swift | 48 | Explicitly calling .init() should be avoided. \nWebExtensionRuntimeAPI.swift | 31 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionRuntimeAPI.swift | 36 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionSearchAPI.swift | 20 | Explicitly calling .init() should be avoided. \nWebExtensionSidebarActionAPI.swift | 26 | Explicitly calling .init() should be avoided. \nWebExtensionStorageAPI.swift | 23 | Explicitly calling .init() should be avoided. \nWebExtensionTabsAPI.swift | 204 | Explicitly calling .init() should be avoided. \nWebExtensionTabsAPI.swift | 11 | Force tries should be avoided. \nWebExtensionTabsAPI.swift | 86 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionTabsAPI.swift | 127 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionTabsAPI.swift | 160 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionTabsAPI.swift | 184 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionThemeAPI.swift | 21 | Explicitly calling .init() should be avoided. \nWebExtensionTopSitesAPI.swift | 19 | Explicitly calling .init() should be avoided. \nWebExtensionWebNavigationAPI.swift | 20 | Explicitly calling .init() should be avoided. \nWebExtensionWebRequestAPI.swift | 21 | Explicitly calling .init() should be avoided. \nWebExtensionWindowsAPI.swift | 114 | Explicitly calling .init() should be avoided. \nWebExtensionWindowsAPI.swift | 9 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionWindowsAPI.swift | 19 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionWindowsAPI.swift | 64 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtension.swift | 16 | Force tries should be avoided. \nWebExtension.swift | 21 | Force tries should be avoided. \nWebExtensionAPI.swift | 24 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionAPI.swift | 88 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionAPI.swift | 96 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionAPI.swift | 102 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionAction.swift | 71 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nWebExtensionActionWebViewController.swift | 63 | Force casts should be avoided. \nWebExtensionActionWebViewController.swift | 12 | Force tries should be avoided. \nWebExtensionBackgroundProcess.swift | 12 | Force tries should be avoided. \nWebExtensionHelper.swift | 26 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nWebExtension.swift | 255 | Lines should not have trailing semicolons. \nWebExtension.swift | 286 | Lines should not have trailing semicolons. \nWebExtensionAPI.swift | 52 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 591 | Force casts should be avoided. \nAppSettingsOptions.swift | 592 | Force casts should be avoided. \nAppSettingsOptions.swift | 668 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 526 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabDisplayManager.swift | 133 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 242 | Force casts should be avoided. \nPhotonActionSheet.swift | 314 | Force casts should be avoided. \nPhotonActionSheet.swift | 329 | Force casts should be avoided. \nPhotonActionSheet.swift | 334 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 305 | Force casts should be avoided. \nActivityStreamPanel.swift | 329 | Force casts should be avoided. \nActivityStreamPanel.swift | 357 | Force casts should be avoided. \nActivityStreamPanel.swift | 458 | Force casts should be avoided. \nActivityStreamPanel.swift | 468 | Force casts should be avoided. \nActivityStreamPanel.swift | 475 | Force casts should be avoided. \nActivityStreamPanel.swift | 482 | Force casts should be avoided. \nActivityStreamPanel.swift | 488 | Force casts should be avoided. \nActivityStreamPanel.swift | 726 | Force casts should be avoided. \nActivityStreamPanel.swift | 144 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1401 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1925 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1902 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1923 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTopTabsViewController.swift | 101 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 251 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 255 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchSettingsTableViewController.swift | 204 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1401 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1925 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1406 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1930 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 41 | Force casts should be avoided. \nAppDelegate.swift | 236 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 119 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 250 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 75 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserViewController.swift | 1402 | Limit vertical whitespace to a single empty line. Currently 2. \nBrowserViewController.swift | 1926 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 589 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 488 | Force casts should be avoided. \nStoragePerfTests.swift | 56 | Prefer _ = foo() over let _ = foo() when discarding a result from a function. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 180 | Initializing an optional variable with nil is redundant. \nFxADeviceRegistration.swift | 57 | Force casts should be avoided. \nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 118 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nTopTabsViewController.swift | 101 | Limit vertical whitespace to a single empty line. Currently 2. \nReaderPanel.swift | 361 | Force casts should be avoided. \nAppSettingsOptions.swift | 591 | Force casts should be avoided. \nAppSettingsOptions.swift | 592 | Force casts should be avoided. \nAppSettingsOptions.swift | 668 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 135 | Force casts should be avoided. \nPhotonActionSheet.swift | 238 | Force casts should be avoided. \nPhotonActionSheet.swift | 310 | Force casts should be avoided. \nPhotonActionSheet.swift | 325 | Force casts should be avoided. \nPhotonActionSheet.swift | 330 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 500 | Initializing an optional variable with nil is redundant. \nPhotonActionSheetProtocol.swift | 465 | Prefer -> Void over -> (). \nAppInfo.swift | 23 | Force casts should be avoided. \nAppInfo.swift | 27 | Force casts should be avoided. \nAppInfo.swift | 31 | Force casts should be avoided. \nAppInfo.swift | 68 | Force casts should be avoided. \nAppInfo.swift | 84 | Force casts should be avoided. \nDeviceInfo.swift | 33 | if, for, guard, switch, while, and catch statements shouldn't unnecessarily wrap their conditionals or arguments in parentheses. \nUserAgent.swift | 36 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nUserAgent.swift | 37 | Function parameters should be aligned vertically if they're in multiple lines in a declaration. \nUserAgent.swift | 80 | Force tries should be avoided. \nUserAgent.swift | 113 | Force tries should be avoided. \nUserAgent.swift | 121 | Force tries should be avoided. \nLogins.swift | 314 | Initializing an optional variable with nil is redundant. \nBrowserDB.swift | 24 | Force tries should be avoided. \nStorageClient.swift | 556 | Force casts should be avoided. \nStorageClient.swift | 699 | Force casts should be avoided. \nClientsSynchronizer.swift | 341 | Initializing an optional variable with nil is redundant. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nAppSettingsOptions.swift | 526 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nClientPickerViewController.swift | 103 | Force casts should be avoided. \nClientPickerViewController.swift | 105 | Force casts should be avoided. \nClientPickerViewController.swift | 113 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nStrings.swift | 617 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 460 | Prefer -> Void over -> (). \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 589 | Force casts should be avoided. \nDownloadsPanel.swift | 54 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 279 | Force casts should be avoided. \nReaderPanel.swift | 361 | Force casts should be avoided. \nRemoteTabsPanel.swift | 155 | Force casts should be avoided. \nRemoteTabsPanel.swift | 198 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 135 | Force casts should be avoided. \nSearchSettingsTableViewController.swift | 204 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 495 | Initializing an optional variable with nil is redundant. \nPhotonActionSheetProtocol.swift | 460 | Prefer -> Void over -> (). \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nStrings.swift | 618 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nOpenInHelper.swift | 124 | Initializing an optional variable with nil is redundant. \nDownloadContentScript.swift | 27 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 118 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nOpenInHelper.swift | 117 | Initializing an optional variable with nil is redundant. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 134 | Force casts should be avoided. \nSettingsTableViewController.swift | 298 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \nStrings.swift | 603 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 391 | Force casts should be avoided. \nProfile.swift | 915 | Fallthroughs can only be used if the case contains at least one other statement. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 495 | Initializing an optional variable with nil is redundant. \nPhotonActionSheetProtocol.swift | 460 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 460 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAppDelegate.swift | 118 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 40 | Force casts should be avoided. \nBackForwardListViewController.swift | 93 | Force casts should be avoided. \nBackForwardListViewController.swift | 237 | Force casts should be avoided. \nLocalRequestHelper.swift | 17 | Force casts should be avoided. \nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \nHomePanelViewController.swift | 39 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nURLExtensions.swift | 489 | Initializing an optional variable with nil is redundant. \nErrorPageHelper.swift | 342 | Limit vertical whitespace to a single empty line. Currently 3. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \nBackForwardListViewController.swift | 125 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \nStrings.swift | 625 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTabTrayController.swift | 248 | Swift constructors are preferred over legacy convenience functions. \nTabTrayController.swift | 252 | Swift constructors are preferred over legacy convenience functions. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 589 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 461 | Prefer -> Void over -> (). \nUnifiedTelemetry.swift | 62 | Limit vertical whitespace to a single empty line. Currently 2. \nPrefs.swift | 187 | Force casts should be avoided. \nPrefs.swift | 22 | Limit vertical whitespace to a single empty line. Currently 2. \nHomePageSettingViewController.swift | 8 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \nHomePageSettingViewController.swift | 133 | There should be no space before and one after any comma. \nHomePageSettingViewController.swift | 133 | There should be no space before and one after any comma. \nHomePageSettingViewController.swift | 133 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingViewController.swift | 8 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePageSettingViewController.swift | 133 | There should be no space before and one after any comma. \nHomePageSettingViewController.swift | 133 | There should be no space before and one after any comma. \nHomePageSettingViewController.swift | 133 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 356 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 592 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 448 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 54 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nDownloadsPanel.swift | 282 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nUnifiedTelemetry.swift | 71 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 589 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nDocumentServicesHelper.swift | 19 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 471 | Prefer -> Void over -> (). \nPrefs.swift | 188 | Force casts should be avoided. \nPrefs.swift | 23 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteBookmarksModel.swift | 414 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 427 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 457 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 603 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 604 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 617 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 628 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 636 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 637 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 652 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 700 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 701 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 798 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 679 | Fallthroughs can only be used if the case contains at least one other statement. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nHomePanelViewController.swift | 39 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nPhotonActionSheetProtocol.swift | 458 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nURLExtensions.swift | 496 | Initializing an optional variable with nil is redundant. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nURLExtensions.swift | 502 | Initializing an optional variable with nil is redundant. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nErrorPageHelper.swift | 341 | Limit vertical whitespace to a single empty line. Currently 3. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 251 | Force casts should be avoided. \nPhotonActionSheet.swift | 323 | Force casts should be avoided. \nPhotonActionSheet.swift | 338 | Force casts should be avoided. \nPhotonActionSheet.swift | 343 | Force casts should be avoided. \nPhotonActionSheetProtocol.swift | 457 | Prefer -> Void over -> (). \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 592 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 246 | Force casts should be avoided. \nPhotonActionSheet.swift | 318 | Force casts should be avoided. \nPhotonActionSheet.swift | 333 | Force casts should be avoided. \nPhotonActionSheet.swift | 338 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 118 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 251 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 237 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 447 | Limit vertical whitespace to a single empty line. Currently 3. \nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 596 | Force casts should be avoided. \nActivityStreamTopSitesCell.swift | 448 | Force casts should be avoided. \nFaviconFetcher.swift | 138 | Initializing an optional variable with nil is redundant. \nFaviconFetcher.swift | 275 | Force tries should be avoided. \nURLExtensions.swift | 503 | Initializing an optional variable with nil is redundant. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteBookmarksModel.swift | 409 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 422 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 452 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 598 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 599 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 612 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 623 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 631 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 632 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 647 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 695 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 696 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 793 | Force casts should be avoided. \nSQLiteBookmarksModel.swift | 674 | Fallthroughs can only be used if the case contains at least one other statement. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSettingsTableViewController.swift | 298 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginListViewController.swift | 463 | Force casts should be avoided. \nLoginListViewController.swift | 604 | Limit vertical whitespace to a single empty line. Currently 2. \nLoginListViewController.swift | 375 | Property setter access level shouldn't be explicit if it's the same as the variable access level. \nLoginDetailViewController.swift | 197 | Force casts should be avoided. \nLoginDetailViewController.swift | 303 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSwipeAnimator.swift | 158 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 597 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 331 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nRemoteTabsPanel.swift | 155 | Force casts should be avoided. \nRemoteTabsPanel.swift | 198 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 287 | Force casts should be avoided. \nActivityStreamPanel.swift | 299 | Force casts should be avoided. \nActivityStreamPanel.swift | 320 | Force casts should be avoided. \nActivityStreamPanel.swift | 403 | Force casts should be avoided. \nActivityStreamPanel.swift | 412 | Force casts should be avoided. \nActivityStreamPanel.swift | 598 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheet.swift | 246 | Force casts should be avoided. \nPhotonActionSheet.swift | 318 | Force casts should be avoided. \nPhotonActionSheet.swift | 333 | Force casts should be avoided. \nPhotonActionSheet.swift | 338 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 46 | Force casts should be avoided. \nTestAppDelegate.swift | 48 | Force tries should be avoided. \nTestAppDelegate.swift | 51 | Force tries should be avoided. \nTestAppDelegate.swift | 113 | Force tries should be avoided. \nAppInfo.swift | 23 | Force casts should be avoided. \nAppInfo.swift | 27 | Force casts should be avoided. \nAppInfo.swift | 31 | Force casts should be avoided. \nAppInfo.swift | 68 | Force casts should be avoided. \nAppInfo.swift | 84 | Force casts should be avoided. \nURLExtensions.swift | 503 | Initializing an optional variable with nil is redundant. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nTestAppDelegate.swift | 47 | Opening braces should be preceded by a single space and on the same line as the declaration. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1093 | Force casts should be avoided. \nSQLiteHistory.swift | 1136 | Force casts should be avoided. \nSQLiteHistory.swift | 1141 | Force casts should be avoided. \nSQLiteHistory.swift | 1247 | Force casts should be avoided. \nSQLiteHistory.swift | 1269 | Force casts should be avoided. \nSQLiteHistory.swift | 1270 | Force casts should be avoided. \nSQLiteHistory.swift | 1271 | Force casts should be avoided. \nSQLiteHistory.swift | 1272 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nSettingsTableViewController.swift | 301 | Limit vertical whitespace to a single empty line. Currently 2. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \nStrings.swift | 625 | There should be no space before and one after any comma. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 180 | Initializing an optional variable with nil is redundant. \nFxALoginStateMachine.swift | 55 | Force casts should be avoided. \nFxALoginStateMachine.swift | 70 | Force casts should be avoided. \nFxALoginStateMachine.swift | 86 | Force casts should be avoided. \nFxALoginStateMachine.swift | 126 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  4 Markdowns\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 181 | Initializing an optional variable with nil is redundant. \nFxAClient10.swift | 82 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nFxAClient10.swift | 92 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nAuthenticator.swift | 62 | Initializing an optional variable with nil is redundant. \nLoginsHelper.swift | 63 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nLoginsHelper.swift | 73 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nLoginListViewController.swift | 427 | Property setter access level shouldn't be explicit if it's the same as the variable access level. \nLoginListViewController.swift | 515 | Force casts should be avoided. \nLoginListViewController.swift | 656 | Limit vertical whitespace to a single empty line. Currently 2. \nLoginDetailViewController.swift | 197 | Force casts should be avoided. \nLoginDetailViewController.swift | 303 | Force casts should be avoided. \nProfile.swift | 388 | Force casts should be avoided. \nProfile.swift | 908 | Fallthroughs can only be used if the case contains at least one other statement. \nBrowserDB.swift | 24 | Force tries should be avoided. \nKeychainStore.swift | 21 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nKeychainStore.swift | 41 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSentry check list\n\n\n[ ] I understand that only .fatal events will be reported on release\n\n\n[ ] The message param contains a string that will not create multiple events\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 118 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 249 | Limit vertical whitespace to a single empty line. Currently 2. \nAppDelegate.swift | 40 | Force casts should be avoided. \nAppDelegate.swift | 235 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. \nSearchLoader.swift | 12 | Force tries should be avoided. \nSearchLoader.swift | 37 | Force tries should be avoided. \nActivityStreamPanel.swift | 279 | Force casts should be avoided. \nActivityStreamPanel.swift | 291 | Force casts should be avoided. \nActivityStreamPanel.swift | 312 | Force casts should be avoided. \nActivityStreamPanel.swift | 395 | Force casts should be avoided. \nActivityStreamPanel.swift | 404 | Force casts should be avoided. \nActivityStreamPanel.swift | 568 | Force casts should be avoided. \nActivityStreamTopics.swift | 1 | Header comments should be consistent with project patterns. \nSyncTelemetryEvents.swift | 13 | Force tries should be avoided. \nSyncTelemetryEvents.swift | 73 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 75 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 76 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 77 | Force casts should be avoided. \nSyncTelemetryEvents.swift | 78 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 74 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSensitiveViewController.swift | 31 | An object should only remove itself as an observer in deinit. \nLoginListViewController.swift | 656 | Limit vertical whitespace to a single empty line. Currently 2. \nLoginListViewController.swift | 427 | Property setter access level shouldn't be explicit if it's the same as the variable access level. \nLoginListViewController.swift | 515 | Force casts should be avoided. \nAppSettingsOptions.swift | 594 | Force casts should be avoided. \nAppSettingsOptions.swift | 595 | Force casts should be avoided. \nAppSettingsOptions.swift | 671 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. \nAppSettingsTableViewController.swift | 139 | Force casts should be avoided. \nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginListViewController.swift | 512 | Force casts should be avoided. \nLoginListViewController.swift | 424 | Property setter access level shouldn't be explicit if it's the same as the variable access level. \nLoginListViewController.swift | 653 | Limit vertical whitespace to a single empty line. Currently 2. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nDanger has errored\n[!] Invalid Dangerfile file: invalid byte sequence in UTF-8\n```\n #  from Dangerfile:10\n #  -------------------------------------------\n #  # Run swiftlint\n\nswiftlint.lint_files\n #\n #  -------------------------------------------\n```\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 908 | Fallthroughs can only be used if the case contains at least one other statement. \nProfile.swift | 388 | Force casts should be avoided. \n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginListViewController.swift | 443 | Property setter access level shouldn't be explicit if it's the same as the variable access level. (redundant_set_access_control)\nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. (force_cast)\nAppSettingsTableViewController.swift | 137 | Force casts should be avoided. (force_cast)\nLoginDetailViewController.swift | 53 | Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nLoginDetailViewController.swift | 286 | Force casts should be avoided. (force_cast)\nPhotonActionSheetProtocol.swift | 450 | Prefer -> Void over -> (). (void_return)\nPrefs.swift | 189 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nURLExtensions.swift | 503 | Initializing an optional variable with nil is redundant. (redundant_optional_initialization)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPhotonActionSheetProtocol.swift | 450 | Prefer -> Void over -> (). (void_return)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 594 | Force casts should be avoided. (force_cast)\nAppSettingsOptions.swift | 595 | Force casts should be avoided. (force_cast)\nAppSettingsOptions.swift | 671 | Force casts should be avoided. (force_cast)\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. (trailing_semicolon)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nReaderPanel.swift | 335 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nLoginDetailViewController.swift | 287 | Force casts should be avoided. (force_cast)\nLoginDetailViewController.swift | 53 | Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 181 | Initializing an optional variable with nil is redundant. (redundant_optional_initialization)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nPushClient.swift | 175 | Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nBookmarkPayload.swift | 80 | Fallthroughs can only be used if the case contains at least one other statement. (no_fallthrough_only)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  1 Warning: NSLocalizedString should only ...\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Warning\n      \n\n\n\n\n:warning:\nNSLocalizedString should only be added to Strings.swift\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  0 Markdowns\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSearchViewController.swift | 604 | Force casts should be avoided. (force_cast)\nSearchViewController.swift | 630 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 415 | Force casts should be avoided. (force_cast)\nProfile.swift | 935 | Fallthroughs can only be used if the case contains at least one other statement. (no_fallthrough_only)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  1 Error: No new force try! or as!\n  0 Warnings\n  0 Messages\n  1 Markdown\n\n\n\n\n\n\n          1 Error\n      \n\n\n\n\n:no_entry_sign:\nNo new force try! or as!\n\n\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 308 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 329 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 422 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 433 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 442 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 606 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nDownloadsPanel.swift | 283 | Force casts should be avoided. (force_cast)\nDownloadsPanel.swift | 54 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 181 | Initializing an optional variable with nil is redundant. (redundant_optional_initialization)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 315 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 336 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 429 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 440 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 449 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 613 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 308 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 329 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 422 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 433 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 442 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 603 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 119 | Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nAppDelegate.swift | 250 | Limit vertical whitespace to a single empty line. Currently 2. (vertical_whitespace)\nAppDelegate.swift | 236 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nAppDelegate.swift | 41 | Force casts should be avoided. (force_cast)\nClientPickerViewController.swift | 103 | Force casts should be avoided. (force_cast)\nClientPickerViewController.swift | 105 | Force casts should be avoided. (force_cast)\nClientPickerViewController.swift | 113 | Force casts should be avoided. (force_cast)\nNotificationService.swift | 160 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nNotificationService.swift | 256 | Force casts should be avoided. (force_cast)\nProfile.swift | 420 | Force casts should be avoided. (force_cast)\nProfile.swift | 940 | Fallthroughs can only be used if the case contains at least one other statement. (no_fallthrough_only)\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppDelegate.swift | 75 | Lines should not have trailing semicolons. (trailing_semicolon)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nProfile.swift | 425 | Force casts should be avoided. (force_cast)\nProfile.swift | 945 | Fallthroughs can only be used if the case contains at least one other statement. (no_fallthrough_only)\nBrowserDB.swift | 24 | Force tries should be avoided. (force_try)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 604 | Force casts should be avoided. (force_cast)\nAppSettingsOptions.swift | 605 | Force casts should be avoided. (force_cast)\nAppSettingsOptions.swift | 681 | Force casts should be avoided. (force_cast)\nAppSettingsTableViewController.swift | 18 | Force casts should be avoided. (force_cast)\nAppSettingsTableViewController.swift | 138 | Force casts should be avoided. (force_cast)\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. (trailing_semicolon)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 604 | Force casts should be avoided. (force_cast)\nAppSettingsOptions.swift | 605 | Force casts should be avoided. (force_cast)\nAppSettingsOptions.swift | 681 | Force casts should be avoided. (force_cast)\nErrors\nFile | Line | Reason |\n| --- | ----- | ----- |\nAppSettingsOptions.swift | 529 | Lines should not have trailing semicolons. (trailing_semicolon)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 1093 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1136 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1141 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1247 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1269 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1270 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1271 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1272 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nBrowserDB.swift | 24 | Force tries should be avoided. (force_try)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 308 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 329 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 422 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 433 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 442 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 603 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 855 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 898 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 903 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1009 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1031 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1032 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1033 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1034 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 308 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 329 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 422 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 433 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 442 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 603 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 331 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nFirefoxAccount.swift | 181 | Initializing an optional variable with nil is redundant. (redundant_optional_initialization)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nActivityStreamPanel.swift | 289 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 315 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 336 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 429 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 441 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 450 | Force casts should be avoided. (force_cast)\nActivityStreamPanel.swift | 611 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nSQLiteHistory.swift | 863 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 906 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 911 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1017 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1039 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1040 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1041 | Force casts should be avoided. (force_cast)\nSQLiteHistory.swift | 1042 | Force casts should be avoided. (force_cast)\n\n  Generated by :no_entry_sign: Danger\n\n. \n  0 Errors\n  0 Warnings\n  0 Messages\n  1 Markdown\n\nSwiftLint found issues\nWarnings\nFile | Line | Reason |\n| --- | ----- | ----- |\nFirefoxAccount.swift | 331 | Colons should be next to the identifier when specifying a type and next to the key in dictionary literals. (colon)\nFirefoxAccount.swift | 181 | Initializing an optional variable with nil is redundant. (redundant_optional_initialization)\n\n  Generated by :no_entry_sign: Danger\n\n. ",
    "peiying2": "Let me put in the request by filing a bug.  The devs are busy prepping for the Quantum related pages so it won't happen right away.  . ",
    "april": "@st3fan, is this particular key important or relevant or anything?. ",
    "q2r5": "@farhanpatel Updated to implement the requested changes.  r?. @farhanpatel Changes implemented. Looking good now?. Local notifications were tested using AppSyncDelegate.displaySentTab, bypassing the foreground check. The resulting notification had actions on force touch.. This is the first workaround mentioned in https://bugs.swift.org/browse/SR-7240?focusedCommentId=33769&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-33769 since we don't need to support devices older than iOS 9.0.\nThough I'm not seeing any mentions in the comments about either of the workarounds causing further crashes.. ",
    "kusumotoa": "I will try with 'init' and 'viewdidload'. Sorry \"You are not authorized to access bug 1410974.\"....\nWhat should I do?. Thank you very much. \ud83d\ude47 \nI can resolve conflicts!!. https://bugzilla.mozilla.org/show_bug.cgi?id=1410986\n\u2191\u2191\u2191\nI can submit again.. Thank you, you've been so helpful. \uff01\uff01\uff01\uff01\uff01 \ud83d\ude47\u200d\u2640\ufe0f . hi @farhanpatel Thank you for letting me know.\nIf there's anything else I'll PR you again.. ",
    "kesun421": "@farhanpatel - thanks for the review!  I made changes as requested.  Get SchWIFTY!!!\n\n. @farhanpatel - that sucks!  I should have ran it, sigh, what a newbie mistake.  I'll try to tackle this again next week, thanks for the heads up!. Thanks for pointing that out.  Please review again.. ",
    "thomcc": "@justindarc In slack it was indicated you would be a good person to review this? I'd like to clear these out of my bugzilla queue, they've been there for quite some time.... @justindarc In slack it was indicated you would be a good person to review this? I'd like to clear these out of my bugzilla queue, they've been there for quite some time.... ",
    "cpeterso": "Fennec hides the address bar when scrolling in the normal page view, so it's surprising that it does not hide the reader mode toolbar when scrolling. Reader mode is supposed to be about removing all UI distractions. :). oops! Thanks. I have now filed bug 1442857 for this issue.. ",
    "alyssais": "\nWith your patch right now, I believe titleField technically still is a UIKeyboardType.URL.\n\nDon't think so?\n\n(lldb) p titleField.textField.keyboardType\n  (UIKeyboardType) $R0 = default\n\nStill want me to make those changes? I'm not sure it makes sense to automatically set autocapitalizationType based on keyboardType because nothing about a CustomSearchEngineTextView being the default keyboard type implies that words should necessarily be capitalized, as far as I can see\u2026. Okay, I'll have a look at making that happen.. @justindarc how does that look? Sorry for the delay!. Wasn't sure if there's a better way to do this. I couldn't find one.. ",
    "locness3": "It's normal, the night mode make white black and black white and it's the same for all colors.. Yes, but it would need color detection. ",
    "Abemarkar23": "its not supposed to be like that, dark mode needs to have all dark uiviews, so dark websites under dark mode should stay as is. Color detection isn\u2019t really that hard, you just need to find a threshold color like (127,127,127), of it is below then U know that it is already a dark color and not to change it . ",
    "jhonatasrm": "Sorry @farhanpatel .. I think now is ok.. This is awesome @farhanpatel  .. I did not see that extension before, thank you so much for mentoring me.\n. Yes, of course! Thanks for remember.  \ud83d\ude03 . Hi there,\nThese small changes make the following modifications.\nHere before:\n\nand after:\n\nCan you send me what you see ?\n. Hello, \nThat's true, thanks for your feedback @farhanpatel. I'm working on it and need to make some more changes I haven't seen before.\nThank you for your feedback too @evgeniyd.. ",
    "adamnemecek": "what's the easiest way of splitting it up at this point?. Ok, sounds good. Can you post in this thread when you are done?\n. De nada. There's more where that came from. . That is actually very hard at this point. It's all just either ws or syntax, no logic.. Ok, so I wont have time to work on this for another while and the cross integrations are always a huge pain in the ass. Thanks for the branch, but I have to get back to my real shit, idk when i'll work on this next.\nI'm sorry to be dropping this on you, every time I try to change a little bit, I start changing more and then end up with a big ball. \nBut reading the change commit by commit is very doable. Like you are just pattern matching changes within the single commits. Most of the commits have very few \"types\" of changes.. This was a bug right?. So are we comparing just the type or also the associated values?. super sorry about that. should be good now.. Those where I just remove (_:) were done with a search and replace. I will remove the class names in the next PR. This one was getting a little bloated. . It probably should but if you could make an exception this one time, I would be really grateful. I've had this code for the last months and I would just kind of want to merge it in so that I can proceed with the rest. . Need to call super.. Pls dont look at this commit anymore. There's a branch that Farhan made for me. https://github.com/mozilla-mobile/firefox-ios/tree/adamschanges I think that you guys should look at the changes sooner rather than later cause there's a lot of them, I like to think generally for the better, and they are just gonna get stale.. This change is actually wrong. Or like I just found it strange but kinda wish I left it the way it is as it seems to be too much of a distraction from the rest.. ",
    "ColdGrub1384": "Ok, tomorrow I will clean the PR . @farhanpatel I cleaned all. ",
    "digoreis": "G'Day guys! What's the status about this feature? \ud83d\ude04 . ",
    "davidolen": "Thanks!. Thanks! Hope this can be added in some day.. ",
    "sandeepyadavkec": "I am also facing this issue, has anyone found an alternative?. ",
    "rleaplaza": "The issue is for both web browsers, firefox and chrome, in my case, windows.. ",
    "LevineKwok": "I got the same issue as u.. ",
    "JeromeTW": "+1. ",
    "HornMichaelS": "Did you follow all of the instructions in Building the Code, including installing carthage and running the bootstrap script?. This is my first pull request to the project, so apologies if I've gotten anything wrong!\nI saw on the checklist that the unit tests and ui tests should be updated, however I could not find any tests for the original functionality. Should I have added new tests before submitting the request?. Oh, I hadn't seen that flag but that does make more sense. I'll submit those changes and have a look at updating the tests within a day \ud83d\udc4d Thanks for welcoming me, and taking the time to give suggestions!. ",
    "mkjfeng01": "same issue. ",
    "evgeniyd": "Also, look through the bootstrap.sh's output and make sure there is no errors during the setup. . [Offtop Question]: when running locally, I see ~40 failed tests. Is this expected?. @stevemoser apparently on my iPhone, there are many apps that iOS decides to open a URL with. Ironically, none of them has a real support to open this scheme(s)...\nDo you know, is it possible to manually choose an appropriate app? . I took a look at the fix and the bug was still there.. @jhonatasrm I can confirm that in landscape orientations it looks as \"after\" screenshot in your previous comment. \nPreviously I looked at portrait orientation, where the bar still has a layout issue described in the bug 1413705:\n\nDo you plan to fix it? Otherwise, I can take a look (seeking for a bug to start out with).\nAlso, I do not know, is this \"by design\", but search bar's elements look slightly offset with navigation bar's button:\n\n. I'd like to point out that existed tests around this functionality successes, even without the fix. Probably, we need to add the test that fails.. ",
    "tomhutchi": "\nAlso, look through the bootstrap.sh's output and make sure there is no errors during the setup.\n\nPlease note if your Xcode Command Line Tools are not setup correctly then bootstrap.sh will not pull in the dependencies such as SwiftyJSON correctly. This can get mangled if you have multiple versions of Xcode installed.. ",
    "chuckSaldana": "@farhanpatel please re-review.. Got it, now the code looks cleaner.\n  . ",
    "made2k": "I was playing around with that looking at if third party cookies are accepted and from what I found was no, they are not. I attempted to allow them by setting the value for cookieAcceptPolicy on the configurations process pool but that didn't change anything. \nYou can see here https://github.com/WebKit/webkit/blob/c637754ee7dfca6142e441d2040026903fee0c1f/Source/WebKit/UIProcess/API/Cocoa/WKProcessPool.mm#L200 the value I was attempting to set. One thing to note, is I have block third party cookies set in Settings->Safari so maybe that sets the value for WKWebView.. ",
    "ksvenee": "I would like to restrict the use of the Firefox browser on my iPad solely to myself.\nWould appreciate your help to do so. :). ",
    "ericawright": "okay, thanks @farhanpatel, if using npm isn't an option, we can always just copy-paste the file in and remember to update it once in a while.. I see, okay, the NPM dependency has been removed and the file is copied in instead.. @farhanpatel any further thoughts on this?. I'm not sure what you mean by the system blue? It seems like this is something I haven't changed yet, since all the blue50 I changed are smaller components. @farhanpatel I wanted to make sure I didn't inadvertently break something by changing ReaderPanel.swift line 379, from .normal to .default. This was done to get the built-in red color for the remove button which is used in the bookmark and history panels. \nAlso, can I ask you for a general review?\n@tecgirl What do you think of the change of this red?\n\nso it matches this:\n\nAlso, I believe I have changed all the colors I can to photon equivalents - can you give it all a look-over for me?\n. thanks, I changed the name. Thanks, for the advice! \ncurrently then, \n1. it will go to the parent tab\n2. if no parent it will go to the  last tab \"navigated\"\n3. it will go to the next on the list.\nThe only thing I'm uncertain about is the \"navigated\" part. If you view a tab it does not trigger lastExecutedTime to update. lastExecutedTime only gets updated if the tab loads, or navigates to a new page. This is not the exact same thing as simply visiting a tab. I believe it may cause behavior that seems erratic. \nI could change it so that lastExecutedTime gets updated when a tab becomes selected instead?. Okay, so more similar to desktop then. So we count lastExecutedTime only in the case where the tab is the parent, otherwise ignore it and select the tab to the right (left if there is none).\nWill update shortly.\n. yeah, I like it, thanks!. DeviceInfo.clientIdentifier(self.prefs) did essentially nothing at all, it may as well have been a \"\". I think it's a little misleading to have it as the fallback.. ",
    "alexzhaobin": "I have same issue after upgrade XCode to Version 9.3 (9E145).. ",
    "anatoliykant": "They fixed this error.\nThanks, mozila team!\n. You need to download this repository again.. ",
    "ytx0574": "How did you fix with this error?. i know how to fix this error.  thank u. ",
    "NjeriNjoroge": "Hi can I look into this?. ",
    "happymark01": "Hi . ",
    "stevemoser": "@evgeniyd No, when two apps register for the same scheme then the behavior is undefined.. You are correct. Fixed. ",
    "LarsChen": "change Fuzi  version to \"2.0.2\",Fuzi remove wrapping libxml2 modulemap for Xcode 9.3 in this version!. ",
    "victorylau": "@LarsChen Thanks!  it works for me!. ",
    "Jageen": "It might be stored in keychain instead of json file.\nare you familiar with iOS development ?. ",
    "Thuta13": "Thank you. It solved my problem too.. ",
    "cyberfunk": "garvankeeley Do you have any tips on manually migrating passwords from desktop to iOS. FireFox will not sync passwords to iOS that have previously been deleted even if you restore them manually on desktop. Something to do with timestamps associated with the deletion of the passwords and sync on iOS. I need to update my iOS passwords manually. Desktop shows over 200 passwords iOS shows none. Re-syncing, disconnecting and deleting and then re-installing the iOS app do not solve my issue.. Hello. On desktop FireFox for Mac logins are stored in key4.db and logins.json in the profile folder. Can you tell me the location of these files in iOS? I'm navigating with Filza and have looked through the Application folder but cannot figure out where these logins are stored. I need to update my iOS FireFox logins manually because FireFox will not sync previously deleted passwords that have been restored to desktop in iOS. I hope I explained my issue clearly.. Thanks I realized logins.db is not editable and key4.db and logins.json cannot be integrated/migrated over from desktop. In the end I used a combination of the ancient FF 43 desktop extension passwords-exporter available here at GitHub and the newer ffpass desktop python extension also available here at GitHub. It was touch and go but at long last everything is up and running again. Would love to see native password import and export on the iOS side in the future.. ",
    "FredyC": "This feels so unprofessional from @farhanpatel to close obviously repeated issue without any explanation. It is still happening almost two years later and nobody even attempts to fix it?\nI am going to ping some contributors here to hopefully get an answer.\n@justindarc @isabelrios @garvankeeley . Thank you @justindarc for such a prompt reaction and a fix. It felt really weird that it's being ignored like this. I do not have STR, I just saw a Sentry report once for our app, but it's great this is out the field.. ",
    "davehunt": "\nInstead of adding files at root dir, could it be SyncIntegrationTests/[jenkins|python|etc]\n\nWe can do that. I would still recommend the Jenkinsfile being in the root, as it sounds like we might be experimenting with using Jenkins to run the UI test suite. By default Jenkins looks for Jenkinsfile in the root of the repository (this can be changed).. I've moved the Python files to SyncIntegrationTests directory. I looked into moving XCUITests/IntegrationTests.swift too, so we can keep everything together, but I hit some issues with the project structure that I didn't fully comprehend. I think this might be worthwhile investigating when we add more tests, but probably isn't a blocker at this time. I've left the Jenkinsfile in the root, as I believe this may prove useful for running various tests within Jenkins on a per branch/pull basis in the future, and not just the sync integration tests.. Closed/reopened to trigger BuildBot.. I can do that, I just thought this one would be a reasonable default. Do we want any UI tests using production sync?. This is what I did originally, but I thought perhaps it was excessive. I can look into making this change, however I'm PTO until Tuesday. Feel free to push followup commits to my branch if you want to get to this before then.. We could put lines 52-59 into a signIntoFirefoxAccounts method, to reduce duplication from the existing test.. Nit: Indentation for Python files should be 4 spaces.. As mentioned on the other pull request, I think we should put this into a separate method to reduce duplication.. Here's another opportunity to reduce duplicate, with a waitForInitialSync method or similar. Also, I think we should try to be consistent with the timeout.. This has the same name as the previous test. I'm suprised it's not complaining about that?. Typo: Sign. This suggests you're using an old version of pipenv. Could you update and run pipenv update again? If you installed using Homebrew you can run brew update && brew upgrade.. Could you add a comment mentioning https://github.com/pyupio/safety-db/issues/2272. hmm.. I wonder why it's not clearing this section. could you try removing this file and recreating it with pipenv lock?. This section still shouldn't be present, but I don't think it will cause any issues so I've approved the pull request. I'm on PTO for a week from tomorrow.. There's no need to make this a multi-line string as it's still just a single command.. We should update the requests package. It's failing because the version we're using has a security issue. You can do this by running pipenv update on the command line. All packages will be updated and a new Pipfile.lock will be generated. It's important to test it locally though. Alternatively, I believe you can update just requests by doing pipenv update requests. I usually let dependency management tools take care of this, such as Dependabot. If you'd like to set this up for the repository I'm happy to help.. You can leave this in for now, but remember to remove it once you've updated requests.. ",
    "msztech": "@farhanpatel Mind if I work on this and PR? ;-). ",
    "Jc692488": "Fix issues. ",
    "ornithocoder": "Hi @farhanpatel! Sure, no problem! Thanks :-). ",
    "cd-utd": "Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1488476. Link removed with PR #4302.. ",
    "stancdam": "I am so happy that you liked my changes and its not a problem if I had to wait a little :)\nNot sure about two different arrays, need to think about it but a flag could be a nice idea. I will investigate this soon because in the meantime I have started to extract part of the TabManager which is responsible for restoring tabs. Implementation of this functionality is already in extension and it looks like a natural evolution to extract this code to it own class.. I am not sure if any more action is needed here from my side to get this merged? \nI see some problems in buddybuild but it seems to be not related to my changes, am I correct?\nEdit: After rebase it seems to be ok now. I have read code inside TabDisplayManager and in few more places like TabTrayController and I see some kind of duplication for storage of Tabs, I mean:\nif let tab = tabDisplayManager.tabStore[safe: index] {\n            tabManager.selectTab(tab)\n            dismissTabTray()\n}\nWe are storing the visible Tabs in TabManager and also in TabDisplayManager in two different instance variables like tabStore and tabToDisplay which point more or less to the same place anyway. I think it also need some work, storing almost the same data in different place is never a good sign.\nWhat you guys think about this? . Ok I get it now :) should I fix something here or everything is alright?. Ok let me check that and I will get back to you . Sorry for the delay but I was focused to get my first app released in the App Store :D\nAnyway, I see there are some problems with remove and selection visible on iPad, to be honest I did not check this implementation earlier on iPad so I definitely need to review that one more time. Hm.. I am able only to test this in simulator because i dont have an iPad so I am not sure if its a simulator fault or not, so please correct me if I am wrong. \nOf course I have found some bugs but same bugs are visible event without my changes. \n@farhanpatel can you please verify if the bug which you found exist without my changes?\nAnyway, there are the problems which I noticed (everything tested on iPad simulator):\n 1st issue:\n-- in tabManager (4 or more tabs) we've got selected one before last tab and after remove of 1st tab we will have two selected tabs\n 2nd problem\n-- same scenario as earlier, but at the end after removal we select last tab - result is that in TopTabs is nothing selected\n* 3rd issue\n-- in tabManager (3tabs, last one selected), remove first tab and then select new first tab - result is that in TopTabs we've got two selected tabs\nEdit:\n@garvankeeley Do you got any updates? And app landed after first review, thanks!!\n. Ouch, now I feel guilty :( I will do my best to fix all the issues before my holidays but I have limited time so please do not hate me if I will not resolve all the issues right now. :see_no_evil: . Hey guys! So it took some time but I am finally back, i will take a look if there are still some bugs which I described earlier :). Hmm.. I am not sure about this correction at this point, I need a little more time to consider few more options . So this was the reason of the crash:\n```\nCould not compute initial update value after shadow updates. Update:  index path before update ( {length = 2, path = 0 - 4}) index path after update ( {length = 2, path = 0 - 0}) action (move), Self: <_UIDataSourceUpdateMap: 0x604000c6c7c0 intialSnapshot = [_UIDataSourceSnapshotter - 0x604000824d40:(0:5)]; finalSnapshot = [_UIDataSourceSnapshotter - 0x604000a34840:(0:5)]; updates = (\n\"<UICollectionViewUpdateItem: 0x604000c4ddd0> index path before update (<NSIndexPath: 0xc000000000800016> {length = 2, path = 0 - 4}) index path after update (<NSIndexPath: 0xc000000000000016> {length = 2, path = 0 - 0}) action (move)\"\n\n)>, newBaseMap: <_UIDataSourceUpdateMap: 0x604000a6e100 intialSnapshot = [_UIDataSourceSnapshotter - 0x604000824d40:(0:5)]; finalSnapshot = [_UIDataSourceSnapshotter - 0x600000c3a920:(0:5)]; updates = (\n\"<UICollectionViewUpdateItem: 0x60400084e2e0> index path before update (<NSIndexPath: 0xc000000000800016> {length = 2, path = 0 - 4}) index path after update ((null)) action (delete)\",\n\n\"<UICollectionViewUpdateItem: 0x60400084bf10> index path before update (<NSIndexPath: 0xc000000000000016> {length = 2, path = 0 - 0}) index path after update ((null)) action (delete)\",\n\n\"<UICollectionViewUpdateItem: 0x604000a4c060> index path before update ((null)) index path after update (<NSIndexPath: 0xc000000000000016> {length = 2, path = 0 - 0}) action (insert)\",\n\n\"<UICollectionViewUpdateItem: 0x60400144e100> index path before update ((null)) index path after update (<NSIndexPath: 0xc000000000800016> {length = 2, path = 0 - 4}) action (insert)\"\n\n)>\n```\nTherefore I decided to add reloadData when we end dragSession. It prevents from incorrect behaviour of the collectionView in scenario when we interrupt dragNdrop with Home button.. I wonder if this is necessary? Do we really need to check tabs.remove(at: removalIndex) ?. ",
    "mrachamallu": "Thanks for the comments, Farhan\n-I had implemented a function to reload data after pressing cancel on search and the websites I delete disappear from the list, not sure why it's not working for you, but I'll look into it again\n-I changed WebsiteDataManagementViewController.swift to enum style. It looks a little different than ActivityStreamPanel.swift, but if it's all good, then I'll change the other two tableviews to this style as well. Without this if statement, all 4 corners are rounded. I don't think there's a straightforward way to round specified corners in earlier iOS versions. I took out the else statement for now.. should work like that now.. Both ways don't seem to give the expected result. fixed. I had tried that initially and left it commented. The icon still doesn't show up so maybe I am missing something I don't know about. updated the else statement so searchController is added to the titleView. Hm, I don't recall changing anything here, should i change it back?. yes it does!. ",
    "varun989": "@garvankeeley Hi there! How should we proceed with this PR?\u201d. @garvankeeley I increased the tappable area for pagecontrol and also updated Bugzilla. Please suggest if I need to do anything else.. @garvankeeley @justindarc is there anything else that needs to be done here?. ",
    "SimonBasca": "Closing this pull request without merging as reordering tabs is being disabled for 14.x . . > @SimonBasca there are some files missing so that I can see the test file when going to your branch...see for example this PR, the Client.xcodeproj/project.pbxproj, in that file you have to see your new file created that contains the tests otherwise it is not added to the project.\nI am seeing the DataManagementTests in the Client.xcodeproj/project.pbxproj if I open the file(maybe i didn't push correctly), however I am not seeing the DataManagementTests in the Fennec_Enterprise_XCUITests and the Fennec_Enterprise_XCUITests_Integration schema. Should I add them there? . The test failed when I run  them for the first time without this line. Adding that line prevented them from failing. I think the tests were failing because of the animation that occurs after closing a tab.. It will be required to add a waiter here, I got intermittent failures after i did the commit :(. . I added that line because I didn't know how to clear the search field. So after navigator.performAction(Action.TapOnFilterWebsites) in the search bar there  is \"google\" typed. After app.searchFields[\"Filter Sites\"].tap() the \"google\" text is selected and when doing app.typeText(\"foo\") the \"google' text is cleared and the new search term is typed \"foo\". \nIf app.searchFields[\"Filter Sites\"].tap() is removed it will just type \"googlefoo\" which I guess would also be good as we are testing for a non-existing search term. . My logic for adding the waiter here it that before the page was loaded the app.buttons[\"TabLocationView.pageOptionsButton\"] was added to the pageActionMenuButton variable and when it hit the waitForExistence(pageActionMenuButton, timeout: 5) it might have had a different value and cause the test to fail because the element was not found. Not sure if this makes sens but for me the tests do not fail locally. . The hiddenStatusbarElement is the same as the statusbarElement \"app.statusBars.children(matching: .other).element.children(matching: .other).element(boundBy: 0)\" but when it is hidden. I just used the hiddenStatusbarElement variable to be easier to follow the test. . Left over from the previous work. Will remove it.\ud83d\udc4d . I think these were removed when I deleted the \"class HomePageUITest: BaseTestCase\" from the Project Navigator. Not sure how this can be reverted.. yup, SGTM.. ",
    "iCroupsTW": "Well done. Thank you for whatever you have done . Good . * Acknowledging takes time \n Understanding comes from forgiveness \n Listening your trusted mentor \n Believing in your faith\n Following your own heart\n* Loving the way you are\nSorry for these irrelevant responses. But it comes from my heart.\n. ",
    "a2sheppy": "Firefox for iOS is using the standard WebKit API build right into the phone's OS. The engine is already available; see Apple's documentation.\nHopefully one day we will be allowed to bring Gecko to iOS. But that day has not come.. ",
    "lhkzhl": "error log:\n```\ncurl: (56) LibreSSL SSL_read: SSL_ERROR_SYSCALL, errno 54\nerr_str\nCommand /bin/sh failed with exit code 1\n ARCHIVE FAILED \nThe following build commands failed:\n    PhaseScriptExecution Setup\\ EarlGrey\\ Script /Users/hailong/Library/Caches/org.carthage.CarthageKit/DerivedData/10.1_10B61/EarlGrey/ce90f3ffabfb9cfcda73bcbcdd8844c47fede04e/Build/Intermediates.noindex/ArchiveIntermediates/EarlGrey/IntermediateBuildFilesPath/EarlGrey.build/Release-iphoneos/EarlGrey.build/Script-FDC5EEA01CAEEFC2006C5174.sh\n```. ",
    "stevelyc": "Rebuild, come on, there will be good things to appear. ",
    "Grey-Bit": "Hitting the same problem on the freshly cloned repo + just installed Xcode 10.1. ",
    "metalshell": "metalshell.mc@gmail.com\nOn Wed, Jan 9, 2019, 3:41 PM Farhan <notifications@github.com wrote:\n\n\nYou can view, comment on, or merge this pull request online at:\nhttps://github.com/mozilla-mobile/firefox-ios/pull/4462\nCommit Summary\n\nBug 1513942 - Followup, fix tests.\n\nFile Changes\n\nM ClientTests/DefaultSearchPrefsTests.swift\n   https://github.com/mozilla-mobile/firefox-ios/pull/4462/files#diff-0\n   (18)\n\nPatch Links:\n\nhttps://github.com/mozilla-mobile/firefox-ios/pull/4462.patch\nhttps://github.com/mozilla-mobile/firefox-ios/pull/4462.diff\n\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/mozilla-mobile/firefox-ios/pull/4462, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AIYWWTPCcufC3y3L3RtuBeuDKY9qHM1rks5vBlb0gaJpZM4Z4LiX\n.\n. \n",
    "kglazko": "Implemented changes after talking to you and No-Jun, will re-submit R request pending BuddyBuild :). It should only run once, right? Because it will copy something to pasteboard and then at the next pass of the function this will never execute. So if there is already something in the pasteboard, it will not execute- and if there's nothing in the pasteboard, it will only execute once. That's my intent at least xD. The clipboard isn't always empty. It depends what tests would run before. The logic for what's in the pasteboard is dependent on how iOS handles its own pasteboard- we don't control it. So if a test before copy/pasted on the same sim- or on the same device- without a full system reset to clear the keyboard- we will encounter things in the keyboard. And there are two different UI flows for keyboard empty or not.. Thank you! That is so weird, I wonder if something is up with the text editor I'm using because it looks normal there but weird on Github. I will edit the file through XCode and make sure it is correct there :O. Yes I will remove references to both SelectHomeAsBlankPage :) I will leave for NewTab since it applies to new tab.. I have done this in the latest commit. I am also home to replace the ID 'HomePageSetting' with a more descriptive ID- 'HomePageSetting' doesn't seem to represent setting a Custom URL for Home or Tab very well. This may require some troubleshooting on my part to make sure nothing breaks as I have renamed it. So far, nothing has seemed to break.. There's only one other place where I was able to find something relating to HomePageSetting (not including titles of HomeSettingPageController/HomePageSetting tests or functions called homePageSetting) and it is a string in global.swift called \"HomePageSettingTextField\"- it looks to be a separate definition not depending on \"HomePageSetting\" ID. I will link it here: https://github.com/mozilla-mobile/firefox-ios/blob/master/UITests/Global.swift @farhanpatel . Right? I was weirded out when it worked too.. but I just pushed a commit for changing Global.swift and we can see if it passes the test!. ",
    "blewjy": "Sure @bryanbell! Will work on that now. \nFor a new subsection of settings, will I have to add all the label strings in the Strings.swift file as NSLocalizedString? Anything else that has to be done or just adding them into the file would suffice? Not too familiar with localization... hope you can help me out a little, thanks!. I have made the UI changes, please take a look :). Thank you for your guidance, @farhanpatel! I have updated the PR accordingly :). @farhanpatel Made the requested changes, hope this helps!. Hey @farhanpatel, could you help to take a look at this PR?. Looking for anyone to help take a look at this PR!\nIt seems that the build is failing due to the change in package-lock.json... . Done!. Done!. I'm not very sure how this file got changed... It does not appear in my xcode project as well. I manually revert the changes directly on GitHub anyway.. ",
    "RobertPieta": "\nCan I close this, as these changes will land in #4501 ?\n\nSounds good to me!. In the json files containing the rules the whitelist exceptions are stored as *e.com which wildcardContentBlockerDomainToRegex will turn into \\\\.e\\\\.com. I think that's what you want. I can update the test to use *e.com to better match the actual files.. Avg 0.003, though I think the cumulative start-to-finish test case (including setup, load, test,  teardown) takes 1.2s on my machine. Setting the loop to 0..<1 runs start-to-finish 1.15s but the avg is 0.000.. Updated!. ",
    "JsonPipe": "I agree. Tracking Protection on iOS as well as Desktop is not a good user experience. Brave actually does this well. I wish Firefox would take notice. . ",
    "linacambridge": "\nThis won't interfere with syncing logins via the Rust component, correct?\n\nCorrect.. ",
    "rhysforyou": "This message will be shown the first time the application itself requests location access. Ideally we'd want the user to allow the application to access their location, and then have  some other UI (handled by the app) that deals with a specific site asking for location permissions. If we phrased the initial message as 'this site would like your location', and the user did not grant permission, that would bar all other sites from using their location and could create confusion.\n. ",
    "leibovic": "@st3fan I started trying to split out the content styles into a shared file while working on bug 1117258, but after talking with UX, I decided to hold off on that, since there are still some differences that they want between Android/desktop. However, in the long run, I would ideally like to have something shared for the article text, since those styles should be similar.\n. ",
    "ikesyo": "0.17.0 is released 2 days ago, and the repo is renamed / transferred to SnapKit/SnapKit.\n. ",
    "mozmark": "open in a popup window?\n. ",
    "evilpie": "Typo: \"for this change wto take effect\"\n. ",
    "shivbaijal": "Good suggestion, Svein. I've updated the branch accordingly.\n. Thanks! I have now removed the super.selected line.\n. ",
    "aelawson": "Not sure if I handled this properly.\n. ",
    "nirgin": "@sleroux agreed, changed :). ",
    "franziskuskiefer": "The compiler should complain when you remove the cast.. This will lead to invalid header, which might be confusing (it's out of memory).. What exactly is payload here? Do we care about payloadLen > ECE_AES128GCM_HEADER_LENGTH + keyIdLen (if that's all data we would want to read here)?. You should make sure that\n rs != 0 (that would be fatal later when you divide by rs)\n* ciphertextLen has a valid value.. Checking != 1 for all of the openssl function is probably safer (who knows what they might return in a new version).. Record must have space for inl + cipher_block_size - 1. I can't easily check that that's the case. So I guess some check at some point would be good.. We have OpenSSL 1.1? I'm impressed ;). If rs = ECE_AES128GCM_MIN_RS, then dataPerBlock =  ECE_AES128GCM_MIN_RS - ECE_AES128GCM_MIN_RS + 1 = 1. So numRecords = dataLen + 1, which can overflow.. This can certainly overflow size_t.. As you noted in https://github.com/web-push-libs/ecec/issues/20 the result can overflow. But not only that, intermediate values (as described above) can do as well.. padLen + 1 might overflow and thus creates undefined behaviour in the following if (it might return NULL or not).. I like to include the cast to make things more explicit. But thinking about it again I don't think it's actually necessary.. An assert would probably be good just to be sure for tests.. Yep, both is fine.. ",
    "liuche": "@bkmunar Wait, don't you need to start using this \"mailtoIsDefault\" UserAttributeKeyName below? It looks like you're still using the same \"alternateMailClient\" key name.. Nit: This looks like a dangling fragment, maybe it should be formatted as a header?. Are these the same between Android and iOS? This looks copied wholesale, so if it's the same, that's fine, but can you verify that these are actually being sent on iOS? If the documentation is wrong, that's not great.. Nit: this should probably be iOS or something, not Android. Please make sure it's an actual string, not just \"iOS is the platform name\". Nit: Google Pixel. Is this reference to Play Services?. Nit: format these json events as code. Login Manager isn't something that's present on iOS, and isn't listed in the Events doc.. Nit: One thing I noticed here is that the messages in the events [1] aren't of the same format. The other messages are of the form E_Saved_Bookmark whereas this Telephone event (and Login Manager) is not underscore-separated. \n[1] https://github.com/mozilla-mobile/firefox-ios/blob/master/Client/Application/LeanplumIntegration.swift#L21\n. Is this our API token? Not sure how to remove this from history but please remove that from this commit!. Let's not make this too complicated - the only thing that differs between each event here is the event name, so that's sufficient to put here, which will make it easier for future changes to be added (in that you'll just need to add the event name, not the full ping).\nI am a tiny bit confused here, but can you confirm: the fields listed in this ping are already covered in the section above, the part prefaced by \"sends the following information about the start of a new session with the Leanplum backend\", is that correct? There are some differences (e.g. this ping is less than what is described above) but if the above-parameters are correct, then we can just document those above, and not need the duplication here. Why are some fields missing here, but included in the section above? If they're not actually being sent, can we just remove those fields from the section above?. Looking at the campaigns listed here, I realize that they're the Android campaigns - there are fewer for iOS.\nHowever, since we have the documentation by Jean and Nevin on the wiki already, let's just remove this whole section and link to that wiki page instead, saying something like \"The current messages are documented on our Leanplum Contextual Hints wiki page\" linking to https://wiki.mozilla.org/Leanplum_Contextual_Hints . That way, this part won't get out of date because there will be a single place to track it.. Great, thank you so much for this link! That definitely makes it clear where these probes actually live in the code. I'd actually just link to the filename itself (rather than the specific line).. One nit: I'd make this a header! Messages are an important section, so let's give it some kind of section header (doesn't need to be top level, whatever level seems appropriate).. Thanks for adding this to the MMA.md doc too! :D. ",
    "cnevinc": "maybe in should point to ios code?. ",
    "boek": "Did you mean change here?. ",
    "bwinton": "Do we not have an Ink90A80? If so we should use that, if not, we should talk to the DSG team about adding one\u2026. This should really be a Photon colour, but they don't seem to have black. Perhaps you can open an issue requesting it\u2026 \ud83d\ude42. Because (as I understand it) we would like to use black because it looks nice, and we would like to have the colours we're using in the Design System.. ",
    "oliviabrown9": "It might be better to check on userActivity.activityType. You won't have to cast it, and it won't be optional. . I would consider making this entire class @/available iOS 12. It will prevent you having to check within and will prevent it from ever being created when unnecessary. Just a bit safer.  . See above comment about @ available for class. It also looks like you're switching between making some of the Siri classes available with iOS 12 and others having checks inside. Unless there is a reason for this that I'm not picking up on, I'd recommend keeping it consistent. . If you switch on activityType in AppDelegate, userInfo should become unnecessary. . Curious why you don't want users to be able to search for this activity. Not an issue - just wondering \ud83d\ude0a. Not sure how Firefox handles unnecessary pbxproj changes, but the majority of these changes seem to be accidental Xcode changes that could be uncommitted if you try to keep a clean pbxproj.. Nit: whitespace. Nit: whitespace. "
}