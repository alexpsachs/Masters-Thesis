{
    "buzzedword": "Don't forget to add the git hook, publish against your master to ping the plugin repo and publish. If there's an issue publishing, you'll see it here: http://plugins.jquery.com/error.log\nIf you aren't listed in here, then you haven't published against the plugin repo.\n. Next version bump, make sure you increment the manifest on the same commit that you tag when it's pushed up, otherwise you throw an error. Plugin repo will not reflect changes on a retroactively updated tag-- only version bumps adjust it. Weird, I know. But that's why it hasn't updated yet.\n. ",
    "maccman": "Cool, got it setup. Should be pushed next time we have a version bump (soon).\n. Ah, will do. Thanks!\nOn Mon, Feb 11, 2013 at 8:44 AM, Daniel Garcia notifications@github.comwrote:\n\nNext version bump, make sure you increment the manifest on the same commit\nthat you tag when it's pushed up, otherwise you throw an error. Plugin repo\nwill not reflect changes on a retroactively updated tag-- only version\nbumps adjust it. Weird, I know. But that's why it hasn't updated yet.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/stripe/jquery.payment/pull/2#issuecomment-13389134.\n\n\nAlex MacCaw\n+12147175129\n@maccman\nhttp://alexmaccaw.com\n. This isn't correct - the test is to make sure that if letters are provided the card type is null - I'll fix the test name though.\nThanks!\n. Will this highlight the syntax in GitHub?\n. Yes, this is by design - we don't restrict copy/paste.\n. Yes, this is by design - we don't restrict copy/paste.\n. dup #11 \n. Dup #11 \n. It's important to mention that this is formatting, not validation. I'm kinda of the opinion that if users want to delete the slash, we should let them. I did go down the route of detecting what was in the selected text, then canceling the keydown event if a slash was in there, but that's quite the rabbit hole when it comes to cross browser compatibility.\n. I agree, that text is too ambiguous and seems like we are solving this problem. Sorry about that, I'll get it fixed.\nI'm interested to get some feedback though on whether or not you think we should solve this.\n. Can you enter more than 4 digits here?\nhttp://stripe.github.com/jquery.payment/example/\n. Agreed. I'll get on this.\n. Yeah that would be awesome - not sure how to do it cleanly without two inputs though (which I'd like to avoid). Open to suggestions.\n. Closing for now, but this would be good to do in the future.\n. Ah thanks, was wondering about that. Does the pull request look good?\n. I'm still bearish on formatting pasted content. Like what are you going to do if they paste non numbers, or if they paste more numbers than the cc limit - truncate the content? \nI feel that formatting is only really useful if you are typing in groups of digits by hand. Happy to be convinced otherwise though.\n. Fixed\n. Well, clearly the instance methods need to directly on the jQuery object to be called in the right context. However, the static methods could be namespaced (perhaps with 'payment'). Feel free to open a pull request :)\n. Fair enough, that's a good point. I'll get on that when I've a sec.\n. How does that branch look to you?\n. I'll leave this up to a pull request.\n. I can't reproduce this. What browser are you using?\n. @bradbeattie @radar - sorry for that. All fixed now.\n. Does this happen in the latest Chrome on Android? We're having problems replicating it.\n. Closing until we have some more information to replicate.\n. Interesting - can you try the example in the branch above?\n. Working now? https://github.com/stripe/jquery.payment/tree/alex-android-cursor\nI've applied the fix mentioned in that commit.\n. Awesome. Any chance you could use CoffeeScript?\n. Perhaps, but you could make the same argument for spaces between card numbers - some payments processors don't support them. I think we should do the best thing for the user here (a space in my opinion is more clear) than the processors. After all, people can just switch to Stripe ;)\nThanks - appreciate the ticket, but closing for now.\n. According to wikipedia, '30' isn't a valid bin number for JCP. Is this not the case? http://en.wikipedia.org/wiki/Bank_card_number\n. Closing for now.\n. Thanks for this! Closing for now, I think the /\\d/ is a bit more clear what's going on (although we could DRY things up by moving it into a isInt function or something.\n. Also maybe call it 'input'? Closing until it's implemented in CS.\nThanks!\n. Thanks for the pull request, but I'm going to keep it the old way as it's a bit more readable (imo).\n. Thanks! We are discussing this internally - will get back to you.\n. Yeah, we've decided to merge the tests and change the README, but keep the old behavior. Any chance you could re-submit a pull request?\n. Interesting - yes, this could be super useful. How about we have a restrictFloat method?\n. I decided to merge all visas under 'visa' - is there a reason you'd want to differentiate between the two?\n. Could you make the change in CoffeeScript?\nOn Wed, Mar 27, 2013 at 8:59 AM, Tino Wittig notifications@github.comwrote:\n\nFor example: Maestro is a Debit Card from Mastercard.\nVisaElectron is a Debit Card from Visa.\nI think, if you return Maestro as Debit Card, you should return also\nVisaElectron as Debit Card.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/stripe/jquery.payment/pull/42#issuecomment-15532248\n.\n\n\nAlex MacCaw\n+12147175129\n@maccman\nhttp://alexmaccaw.com\n. Thanks, but I'm not sure npm is appropriate for jQuery.payment considering that it's for server-side code. Perhaps Bower would be better?\n. ",
    "devsoftweb": "The test right above it: \"that is not numbers should return null\" seems to test the condition where you have supplied it with numbers. There is no test for valid numbers but not matching a known type\n. ",
    "KenanY": "Yes, you can see it in action here.\n. ",
    "jnettome": "Bind the focus or key limit reached is an option?It can trigger the format function.\nSounds awkward?\n. I'm also discussing it on https://github.com/stripe/jquery.payment/issues/9.\nI think that my suggestion could fix this issue too.\n. ",
    "markcipolla": "\n- Chrome 24.0.1312.57 on Mac OSX 10.8.2\n. ",
    "smackfu": "This also means that going back to the field after entering some text (which selects the whole field), causes the validations to not be applied.\n. ",
    "fform": "This quote from the Strip blog\n\"\"\"\nIt turns out that rolling your own code that restricts and formats input is particularly tricky in JavaScript. You have to cater for lots of edge cases such as users pasting text, selecting and replacing numbers, as well as the different ways credit card numbers are formatted.\n\"\"\"\n(https://stripe.com/blog/jquery-payment)\nMakes me think that Stripe is suggesting they are attempting to handle this very problem.\nIt's fine if that's not the case, but it should be stated one way or the other. \n. I agree with @andyfleming here.\nWhy not have your lib do this? If you are offering a drop-in validator/formatter, shouldn't it make sure the value is valid no matter what the user does on purpose/accident?\n. ",
    "andyfleming": "@maccman \u2014 I think accounting for \"edge cases\" is one of the main reasons to provide / build an open-source library like this. It prevents others from having to reinvent the wheel for cases like credit card formatting.\nPayment formatting and the issues surrounding it are definitely a great place for Stripe to be involved, IMO :smiley:.\n. You can tell if they paste in a credit card number that simply isn't spaced though, right?\n. This was one of the first things I noticed as well, looking at the source.\nThat branch looks good.\n. ",
    "jamesreggio": "Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Hello @kulte, I'm working to merge or close stale PRs and issues on this repo.\nWe fixed the cake test issue you encountered back in January. If you would like to make your branch ready to merge (again\u2014sorry), we can review it and get it merged.\n. I'm going to close this as being out of scope.\nrestrictNumeric is a convenience function, but the main value of jquery.payment is for the collection of credit-card payment details. Currency formatting introduces a completely different set of challenges.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Fixed in c673b07.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Tags have been cleaned up, as well as the third-party package manifests.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. I don't believe $.trim was ever supposed to throw exceptions, as evidenced by the test suite: https://github.com/jquery/jquery/blob/39b76064d9400295a383291ab6e821e259b67832/test/unit/core.js#L251-271\nAny chance you remember the version of jQuery at fault? If so, feel free to reopen.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Superseded by #105.\n. Agreed, duplicate of #78, which has a preferred implementation.\n. Thank you for the contribution, @emirotin.\nWould you mind rebasing your branch against master and adding tests? After that, I'd be happy to merge these changes.\n. My only other concern is that these may be triggered multiple times, especially due to the reFormat functions. Let me think about how to best resolve that problem.\n. jquery.payment doesn't keep track of the underlying number, though it should be fairly simple to strip extra formatting using a regex:\njavascript\n$input.val().replace(/\\D/g, '')\n. Thanks :thumbsup:\n. Fixed in 4140e7f2e2359b0f28899cb1a7e8d3118b4d6542.\n. We'll need more information to debug. Please reopen if this is still an issue for you.\n. Duplicate of #73.\n. Sorry, this issue lack enough information for us to help out. Please reopen if you can clarify your problem.\n. #38 will probably address this need.\n. Fixed in #116.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Sorry, $.payment.validateCardMonthExpiry is not a feature of jquery.payment.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Thank you for this recommendation. I implemented it (with tests and documentation) in c16dd65e5aa3e2c23504267cba072b3abb7cdacd.\n. It was a jQuery plugin manifest, but it was horribly borked (like a lot of things in this repo).\nEverything should be good now, including a version bump to 1.0.3. I'll merge if you agree, then I'll tag and push an update to npm, Bower, and the jQuery Plugin library.\n...and then we should be in a good state to tackle other PRs and issues :)\n. You can achieve this with the maxlength property on input elements.\nSearch this page for maxlength to read more.\n. Addressed in #38.\n. I don't believe this issue still exists. Feel free to re-open (and provide a clear repro) if you disagree.\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. I'm sorry about the delay on this, @framp, and I appreciate your contribution.\nI'm afraid I'm not going to be able to merge it for philosophical reasons. jquery.payment is designed to be used on credit card forms, which\u2014by nature\u2014collect sensitive data. If we were to allow AJAX calls within the module, we'd be one typo away from posting sensitive payment account data to an untrusted third party.\nThe code you wrote looks great, and I really appreciate the tests, too. I highly recommend that you publish your feature as a separate jQuery plugin, which can be used by people who would like the functionality and are willing to carefully review the code for potential information leaks.\n. Addressed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. Fixed in #102 and available in v1.1.0.\nhttps://github.com/stripe/jquery.payment/releases/tag/v1.1.0\n. @christianblais, do you intend to resubmit this? We'd be happy to take the fix.\n. Thanks for the fix. Let me know about the one comment I left on the diff and we can get this merged later today.\n. Oh, forgot to ask earlier, but could you please run a build and commit the updated build output files.\nAlso: the Travis CI integration seems broken because tests are in fact not passing. To fix the issue you're currently experiencing, I'd reimplement the statement as one of the following:\n``` coffeescript\noninput = 'input' if 'oninput' of window.document.createElement('input')\n...or...\noninput = 'input' if $('').get().oninput?\n```\n. Thank you for the contributions!\n. Thanks for handling.\n. This is fascinating. To the best of our knowledge, no credit cards begin with the number 0. If the customer didn't insist it was a Visa, I'd postulate that it was an ATM card.\nCould you confirm that the full number, inclusive of the 0, is 16 digits in length? I have a slight hunch that the 0 is a leading 17th digit, and that the number without the 0 would work just fine.\nIf the customer is comfortable with sharing the first six digits (known as the card's BIN\u2014bank identification number), you could look it up with a tool like http://www.binlist.net to see if it's a known BIN.\n. @mdominiak, feel free to reopen this issue if you receive an update from your customer.\n. Review? @metcalf @michaelvillar\n. Also addresses #11 #24.\n. Supersedes #43, though not perfectly.\n. Also #56. Phew.\n. Or maybe you could review, @SlexAxton, since you're technically to blame for nearly everything in this repo :P\n. Thanks for the contribution. I'll handle the failing build.\n. @SebastianTroc, I'd be happy to accept a pull request for this feature, but it's not a priority for us to support Zepto.\n. Have you confirmed that everything else is compatible with Zepto?\n. This didn't work out of the box, but I went ahead and made the necessary changes in cad8bf765246e381dce14f75f580d441a93cfb63 (as well as added some test coverage).\n. There's definitely a couple issues at play here, as @jonahx identified, and this was introduced in v1.1.0.\nThe issue where the first digit group can contain five digits is certainly wrong and I will fix it. However, the repositioning of the cursor to the end of the input is somewhat of a design decision, motivated by a desire to support autocomplete tools like LastPass and 1Password.\nI'll look into both sometime this week and follow-up. Thanks for the report.\n. So, I think I unintentionally fixed the first problem, where the new digit was being grouped with the first group instead of being pushed into the second group. The problem with the cursor moving to the end is ongoing, but I'm going to track it with the more concisely-worded issue #121.\n. I'm afraid this PR only addresses the case where all the accounts on a particular card network are exclusively debit or credit. This works for networks like Maestro and Dankort, but it falls short for the two most popular networks\u2014Visa and MasterCard\u2014which carry both debit and credit cards.\nA more complete implementation would use a database of Bank Identification Numbers (BINs) to determine the account type. @framp did a nice implementation of this in #95, but I was unable to merge it because it introduces AJAX calls into the library, which is too much of a hazard for a library that collects highly sensitive payment information.\nAs I said on #95, I think the best thing would be to isolate the BIN lookup into a separate, complementary jQuery plugin. Perhaps somebody on this PR would be willing to take the lead on that\u2014we'd be happy to link to it if you do.\nIf you still think that a naieve, per-network designation of account type would be useful, I'd consider proceeding if you add a third unknown type and return it for all networks that carry both types of cards (which, I believe, are most of the networks listed in the 'Credit' category in the code).\n. I'm not an expert on the eccentricities of debit card networks (and it's difficult to find an authoritative reference), but I can tell you that issue number is the same thing as CVC/CSC for certain card networks (like Visa), and issue/start dates are not required by all debit brands.\nMost of these fields are collected to run enhanced verification of the card against the network, and the fields supported vary by both payment gateway and card network. Given the complexities, I don't think much is gained by attempting to generalize with a credit/debit kind field. It's probably better for you to maintain a data structure keyed off of the type field that enumerates the fields that you need to collect for your specific payment processor.\n. Thanks for the beneficial discussion.\n. Thanks for the report.\nI believe this was fixed in c1f05ec24ebbc5211a7bb232933413450b1788c1 and confirmed with b2ccf32baf1fe8c8886d1d7382b002c6a3386a16. This fix is available in v1.1.0, which is available for demo here where I'm unable to repro the bug.\nPlease try upgrading and reopen if you're still having issues.\n. Sorry about that, @KillaPL\u2014I had forgotten to npm publish the last couple versions.\nThey've all been published now.\n. Hmm, this also appears to be happily fixed.\n. I was unable to repro with a Galaxy S5 on Android 4.4 (KitKat) with Chrome Mobile 35.\nCould you confirm that you are using the 1.1.0 release?\nIf the issue persists, reopen and let me know precisely which Android OS and Chrome version you are using.\n. Sorry\u2014I cannot repro using Chrome Mobile 36 on a Galaxy Note 3, either. That's the only testing configuration I have available with Chrome Mobile 36.\nFeel free to submit a PR if you can resolve the bug yourself.\n. I'll need some more details in order to help. To start:\n- Which version of jQuery.payment are you using? If you don't know, try reproing on http://stripe.github.io/jquery.payment/example, which is the latest version.\n- Which version of iOS are you using? Is it an iPhone or iPad? Physical or simulator?\n- Which browser are you using? Safari, Chrome, or a UIWebView inside of another app?\nI'm going to close this until I hear back.\n. Ah. Good to know.\n. Are you sure you're using the latest version of jQuery.payment?\nI tested using 1Password on the example page and had no issue.\nIf you've confirmed the issue exists on the latest version, please provide the following details:\n- Which browser and OS are you using?\n- Which version of 1Password?\nA screencast of the problem would also be helpful.\n. AMEX is tricky. They've issued cards (e.g., prepaid gift cards) that omit the four-digit CSC but accept the three-digit CID on the back for payment validation. (Both are generally valid to the gateway, from what I understand.)\nIt's difficult to find conclusive proof of this online, though Shopify seems to confirm it here and a Google image search for prepaid AMEX cards will show a number with no four-digit code on the front.\nAs a result, I'm going to leave this unmerged.\n. Thanks for the contribution.\nIt looks like the code between formatSpace and formatForwardSlash is identical, save for the character conditional. Could you modify the existing function to check for slash or space, and give it a better name?\n. Small nit, but could you rename the slash local variable to char?\n. Thanks for the contribution. I'll merge when tests are green.\nFixes #74.\n. Ah, fair enough. Working on this codebase is always an archeological adventure.\n. Thanks for the contribution (and sorry about the delay).\nThe use of @payment('restrictNumeric') on the expiry and CVC fields was causing problems, so I fixed it here: b6bfd404901cf6bfe9cb5683b318f7e0e7ea074d.\n. Thanks for the contribution.\nI've left a couple of small comments, but it looks great. Please @mention me when you've addressed them.\n. Looks great. Thanks again :beers: \n. I agree with @SlexAxton that links to Gists would be preferable.\n. Closing due to lack of activity.\n. Apologies for the delay.\nAn undocumented method already exists for this purpose: $.payment.formatCardNumber. I don't expect its interface to change (since it's already been exposed publicly), so I'd say it's safe for you to use.\n. Glad to hear it.\n. As of v1.2.0, you can add card types to the $.payment.cards array.\n. This is necessary for certain Android browsers, which don't take kindly to intercepting and redirecting key* events. It's most certainly sub-optimal, but removing it will require a re-architecting the entire plugin. \n. Instead of adding a new card type for cards with limited global market share, I've added the ability to extend the $.payment.cards array programmatically. Take a look at the documentation in the README and let me know if this fails to meet your needs.\n. @williamsjj, you'll have to clarify which numbers are being refused. Everything that I've spot-checked seems to work just fine.\n. If I go here and enter the 4242 card, it validates.\nIn my browser REPL:\njavascript\n$.payment.validateCardNumber('4242424242424242')\n// => true\n$.payment.validateCardNumber('4242 4242 4242 4242')\n// => true\nEverything is working as expected for me.\nCould you clarify?\n. Sorry about the delay, but I'm not able to reproduce this problem. Could you provide a precise Android OS + Firefox version to help me track this down?\n. (I should note that everything appears to work correctly on Android 4.4.2 with the latest Firefox\u201435, at this time.)\n. I'm not able to reproduce this issue in the latest OSX Chrome, and the paste event doesn't appear to receive special handling in the code. Let me know which browser and version of the plugin you're using, and I'd be happy to investigate.\n. Thanks for proposing this change. It is indeed what we do on Checkout, and a better practice than pattern.\n. Yep, some of their pre-paid cards had a three digit CVC.\n. Thanks for the recommendation. This is a duplicate of #137, which was a little more thorough in its changes, so I'm going to merge the other PR. I appreciate you opening this.\n. The library does not modify the autocomplete attribute; setting it to cc-number (or anything else) is just provided in the README as guidance/best practice.\n. :+1: \n. Seems reasonable to me. Thanks :+1: \n. I'm sorry, but RTL support will cruft-ify this a little more than we can handle, especially given the difficulty in automating tests.\n. I'm sorry about the delay, but there are a couple of problems with this PR:\n- It removes the call to update the input value for the 'blacklisted' events. The purpose of the reFormat... series of methods is to support mobile devices that do properly emit key(down|up) events by performing a complete reformat of the input upon upon every (change|input) event. (It also serves to handle paste events.)\n- It doesn't address the reFormatNumeric case, which is probably just an oversight.\nPlease @mention me when you push a fix to address these two concerns.\n. @narkeeso, thanks for the help here, too!\n. jquery.payment is built for human input, which happens one keystroke at a time. It's not amenable to testing systems unless they emulate this character-by-character input.\nI don't know the specifics of Capybara/RSpec's automation, but try calling fill_in for each number individually and see if that solves your problem.\nIf not, let me know and I'll reopen this issue.\n. Ah, I see the problem now. I'll reopen to track and try to get a fix out soon.\n. That said, you may want to chance your test to use a semi-valid credit card, like 4242424242424242. (This is a Visa card that passes the Luhn check.) We don't have any formatters for cards that begin with the 1234 pattern, so you wouldn't actually see any whitespace inserted.\n. Thank you, @wagner!\n. In our experience at Stripe and the experience of other contributors (#137), the use of pattern hasn't reliably called up the touch-tone keyboard on mobile phones. Furthermore, auto-formatting a credit card field with this pattern causes the field to become invalid (in the HTML5 form validation scheme) because the formatter adds spaces. (This necessitates a novalidate attribute, which is unfortunate.)\nI'm a huge proponent of semantic markup, but I think this is a place where practicality has to trump semantics. Using type=\"tel\" has the intended effect of calling up an easier, number-centric keyboard, and though it implies a telephone number is the value of the input element, it doesn't carry any validation rules or strong opinions on the formatting of the value.\nI'd be happy to discuss further, but I'm going to close this for the time being.\n. We recommend autocomplete=\"off\" because the best-practices for credit cards (as issued by industry regulators, like the PCI council) discourage storing the CCV/CSC. The idea is that requiring users to manually enter it helps to confirm possession of the physical card.\n. The spec seems to indicate that autocomplete=\"off\" should work, though I'd expect certain third-party tools will ignore it. Could you be specific?\n. Could you explain what was happening before this change?\nSpecifically, what is the value of value? I can't think of a set of inputs where this change would affect the return value of the function.\n. Makes sense to me. Sorry for the delay.\n. Apologies; fixed in 2c2f99b897b1d724b0b5d2353fe3d45eac917121.\n. Sorry, formatting invalid cards with an arbitrary schema (e.g., one space every four digits) is not in the scope of this library.\n. Sorry, I don't believe this is necessary.\n. It's like saying that the name of the repo is the name of the NPM package (which is also the name of the Bower package and the name of the jQuery plugin). Other than that, it's just instructing (without context) on how to run the most common npm command, which is also not really the purpose of the README.\n. Thanks for the contribution.\n. @rovermicrover, thank you for this.\nThis solution is not perfect cross-platform, but it certainly helps the 80% case.\nBecause this is difficult to test, I'm going to update the minor version for this (so people have some sense that it may regress them).\n. I'm not seeing issues, per se, but I can tell you that selectionStart is only supported beginning in IE9.\nhttp://help.dottoro.com/ljtfkhio.php\n. I wouldn't prioritize < IE9. The cursor-jumping issue is a nuisance, but not a blocker, so it's fine to not fix it for older versions of IE. In fact, I would recommend against fixing it, since it would likely just add another layer of scar tissue to this library.\n. I'd be happy to review this today if you'd like for me to do so.\nOn Tuesday, August 4, 2015, Matt DuVall notifications@github.com wrote:\n\nQuestion: Will we need to update any of the methods for reformat.*?\nOverall, if you tested by feel free to merge. I will merge this in the\nmorning and deploy.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/pull/172#issuecomment-127503201\n.\n. Very interesting. I didn't realize that full-width chars were being input and then swallowed by the complicated logic. This works (and is an improvement) for WebKit and IE, and I suggest you merge it.\n\nThe field is still non-operational in Firefox without either input=\"tel\" or ime-mode: 'disable' on the element. Unfortunately, Firefox neither allows you to cancel the IME from opening (which should be possible during the compositionstart event, but isn't), and it will not restore the system-level IME to its original state when ime-mode: 'disable' is used, which is highly annoying.\nI modified the Stripe Checkout codebase to use ime-mode: 'disable' last Friday, which makes this workable (but inconvenient) in Firefox. Perhaps a better fix would be to use type=\"tel\" for desktop browsers and sidestep the problem entirely.\n. This change is okay with me. (All of the MasterCards in the 50 binrange became Maestro cards over time.) However, you need to make the modification to the CoffeeScript file under the src directory and then regenerate the lib using cake build.\n. LGTM.\n(I'm no longer a maintainer, so a Stripe employee will have to merge this.)\nOn Wednesday, August 5, 2015, Akash Manohar notifications@github.com\nwrote:\n\n@jamesreggio https://github.com/jamesreggio Interesting to know the\nbrand conversion on a specific set of cards.\nUpdated the range in the coffee source and ran cake build but since I had\nalready made the change manually it didn't change anything else.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/pull/173#issuecomment-127970599\n.\n. Used to. Just left last week.\n. I'm curious why you feel it is acceptable to drop support for Zepto.\n. Yep, this is a persistent problem in mobile Firefox (which I assume you are\nusing). The setTimeout calls were actually designed to 'fix' the cursor\npositioning by re-writing the value of the field after a fixed delay.\n(Certain browsers reposition the cursor to the end of the value when it is\nprogrammatically changed.)\n\nThe problem is endemic to this library, and I don't think it can be\ndefinitively resolved without a total rewrite. I can suggest two\nworkarounds for you, though:\n- increase the delay in the setTimeout calls until the problem resolves\n  (something in the range of 100-300ms should suit, but will regress the\n  experience of your other users)\n- disable jQuery.payment on the troublesome browsers (this is not something\n  we were comfortable baking into the library since it requires user-agent\n  matching)\nHope this helps.\nOn Friday, December 18, 2015, Chad Boyd notifications@github.com wrote:\n\nSpoke too soon [image: :disappointed:] It did seem to help it not happen\nas often, but I'm still getting the cursor ending up in the wrong place,\neven after commenting those lines.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/issues/197#issuecomment-165914609\n.\n. No worries.\n\nI'm working on a (long-awaited, fabled) replacement, so I'll ping this\nissue again when it's ready.\nOn Sat, Dec 19, 2015 at 5:53 PM, Chad Boyd notifications@github.com wrote:\n\nThanks, James. I opted to take the latter approach and disable it based on\nAndroid version. Wish I could support formatting on all mobile browsers,\nbut I was just having too much trouble. It's not just this library, btw. I\ntried several other formatting libraries out there, and none of them worked\nproperly. Thanks for your reply!\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/issues/197#issuecomment-166032315\n.\n. :+1: \n. Could you explain this scenario, since I don't see it represented in the previous implementation? After two digits of input, shouldn't val have a / separator and always fail to match?\n. Ah, I see. Thanks for the enhancement.\n. I'm not convinced that this condition should ever be reached.\n\nThe check for e.ctrlKey on Line 247 should return true before control ever reaches this statement.\n. Actually, it already works for me on both Windows and Mac OS. I don't think there's an issue here.\n. Why are you allowing whitespace (\\s) with this regex?\nAlso, you could simplify like this:\ncoffeescript\nvalue = $target.val()\nvalue = '' unless /^\\d*$/.test(value)\n$target.val(value)\n. Could you put this above the script tags?\n. While we're gussying things up, could you put this after the Submit button?\n. Sentence case here, to be consistent.\n(i.e., Restrict numeric)\n. Coming soon: https://www.npmjs.com/package/shibari-card\n. This is too heavy a hammer. If you want to test that the string begins with a pattern, you should use str.indexOf(pattern) === 0 instead.\n. Well, look at you Mr Smartypants.\nOn Thursday, September 24, 2015, Alex Sexton notifications@github.com\nwrote:\n\nIn src/jquery.payment.coffee\nhttps://github.com/stripe/jquery.payment/pull/181#discussion_r40337604:\n\n@@ -104,7 +111,10 @@ $.payment.cards = cards = [\ncardFromNumber = (num) ->\n   num = (num + '').replace(/\\D/g, '')\n-  return card for card in cards when card.pattern.test(num)\n-  for card in cards\n-    for pattern in card.patterns\n-      r = new RegExp(\"^#{pattern}\")\n-      return card if r.exec(num)?\n\nI assume jdalton did his homework here:\nhttps://github.com/lodash/lodash/blob/master/lodash.js#L10854-L10858\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/pull/181/files#r40337604.\n. UNSUBSCTIBE\n. \n",
    "lukemiles": "I can't reproduce this bug either. \nreturn val.length < 4;\nwould break American Express cards too, so it would have to be <= 4\n. ",
    "SamHasler": "One dead end: I tried adding the placeholder back doing something like input:after{content: 'M/YY'} but apparently input:after doesn't work (at least on chrome 24)\n. Sorry for not getting back sooner. That's probably ok as it says in the fourth bullet point here: http://en.wikipedia.org/wiki/Maestro_(debit_card)#Acceptance_and_availability says the Laser/Maestro cards were being phased out from October 2012. \n. ",
    "dstarh": "agree with @andyfleming why not take all whitespace out of the pasted content and if thats a valid number format it\n. ",
    "steve-nester-uk": "Also agree.\nI've submitted a pull request with commits which address this (https://github.com/stripe/jquery.payment/pull/25).\n. Never used CoffeeScript, but I'll give it a try...\n. I've updated the script with a couple more commits - js is now generated from CoffeeScript, uses regex for adding the space.\n. It would be nice to have only one method, however that is quite a lot of refactoring.  I've updated the formatFullCardNumber method to support Amex too.\n. Refactoring of formatCardNumber method complete.\n. ",
    "ericelliott": "Well, no, they don't have to be directly on the jQuery object. In fact, the jQuery plugin authoring docs explicitly state, \"Under no circumstance should a single plugin ever claim more than one namespace in the jQuery.fn object.\"\nhttp://docs.jquery.com/Plugins/Authoring#Namespacing\n. Big improvement. Bonus: Now when you start typing $.payment., we get to see the list of payment methods neatly organized.\n. ",
    "bradbeattie": "Hrm. I can't reproduce it on http://stripe.github.com/jquery.payment/example/ either, only in my implementation. There must be some conflicting JavaScript. Sorry, my bad. :)\n. Played around. Reproduced but only when the maxlength attribute is omitted from the input field. Note that the cc-number field doesn't require a maxlength attribute, nor does cc-exp.\n. ",
    "radar": "Ah, there we go! Thought I had gone crazy. Thanks Alex and thanks Brad!\nOn 09/02/2013, at 13:42, Alex MacCaw notifications@github.com wrote:\n\n@bradbeattie @radar - sorry for that. All fixed now.\n\u2014\nReply to this email directly or view it on GitHub..\n. \n",
    "RoryStolzenberg": "Doesn't seem to do anything on ICS.\nThis setSelectionRange problem seems to be the same as this bug, solved (but only on Android < 3.0) by the setTimeout workaround mentioned.\n. Doesn't work on Froyo either.\n. ",
    "phuphighter": "The setTimeout doesn't seem to fix it on Android 4.0.3.\n. ",
    "pc": "This still won't work with AmEx cards. (Not all cards are 16 digits long, and AmEx groups are XXXX XXXXX XXXX.) It also duplicates the logic in formatCardNumber. I'd just factor out the main formatting code in formatCardNumber so that it can be called via either that event handler, or on a complete number, with your addition here. (Does that make sense?)\n. Sorry, this is still way too flaky to merge, and would require changing two places every time we support a new card type.\n. Maybe want it to be restrictDecimal.\n. It probably makes more sense to test for digits and whitespace, and then ensure that the whitespace-stripped version is valid (to account for spaces in the number, trailing newlines, etc). Also, it shouldn't use a hard-coded 16 (AmEx etc.); it should probably test with validateCardNumber.\n. ",
    "sonnymai": "This is a bug with android chrome,  input[type=\"number\"] input[type=\"tel\"] and maybe some others don't trigger key events on backspace\nhttps://code.google.com/p/chromium/issues/detail?id=229292\n. ",
    "taf2": "So, this is a test card i got from authorize.net... checking with them to see whether they are correct or if the test card is just wrong... \n. sorry this was incorrect on my part this is handled correctly.\n. That makes sense but in recent browsers autocomplete=off does not work.\nOn Friday, April 3, 2015, James Reggio notifications@github.com wrote:\n\nWe recommend autocomplete=\"off\" because the best-practices for credit\ncards (as issued by industry regulators, like the PCI council) discourage\nstoring the CCV/CSC. The idea is that requiring users to manually enter it\nhelps to confirm possession of the physical card.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/issues/154#issuecomment-89397962\n.\n\n\nTodd Fisher\nTel: +1 (410) 394-9424 | Toll Free: +1 (800) 577-1872\ntodd@calltrackingmetrics.com | calltrackingmetrics.com\n. @jamesreggio - chrome and I believe safari both ignore autocomplete=\"off\" e.g. blink and webkit. \n. ",
    "akre54": "Hrrm. After running it a couple more times, it looks like the difference is statistically insignificant in Chrome (Canary is reporting the exact same numbers), but faster in Firefox, Safari, and Opera. Interesting numbers.\n(btw thanks for this awesome project!)\n. ",
    "Fishrock123": "Should be done in CoffeeScript & compiled....\n. It appears you should be using inputmode=\"numeric\" and not type=\"number\".\ntype=\"number\" will probably cause your input to be resolved as a floating point number, which is most certainly not what you want.\nhttps://developer.mozilla.org/en-US/docs/Web/HTML/Element/Input\n. type=\"tel\" appears to work, and brings up the full-size number-pad on my phone. This might be a better option.\nhttp://jsfiddle.net/8zXkX/4/\n. What's up with the double spaces before the \"if\"'s and the \"unless\"?\n. ",
    "angelcustodio": "Cool! I was waiting for this :)\n. ",
    "chrisvanpatten": "Awesome! This would be very useful.\n. ",
    "kulte": "@maccman what are your thoughts here?\n. Not sure what the status on this is, but FWIW this has been running safely in production on stacksocial.com for over a month now.\n. @SlexAxton How is cake test supposed to work without a window which I believe jQuery depends on? I could put JSDom in, watch the tests pass, and then take it out, but that seems super silly :/.\n. That's okay, but one of two things should happen. Either the line $.payment.validateCardCVC('123', 'amex'); //=> false should be removed from the README or the code should be changed. I'd be happy to do a PR for you either way if you let me know what you end up deciding!\nAlso you were writing no tests for this feature at all, and I added a bunch of them in this PR. If you want more time to decide on the digit count issue but would like to merge the tests (which I think are a good idea to have) I can rollback to 87d674d.\nI think at least writing tests for everything that the README claims is a good idea to ensure the library does everything it advertises. \n. Yea give me about 30 minutes.\n. @maccman that should do it!\n. @letitia The transformative feedback you seek is, for obvious reasons I might add, sought from Alex no doubt, but my two cents would be that if you wrote a test/tests against your PR, it would require less work on the set of eyes reviewing your code. \n. ",
    "fsainz": "+1 for this!\n. ",
    "kevinwmerritt": "Thanks. I also have a need for this. +1 to merge.\n. ",
    "francesco-carrella": "+1\nUsability guidelines advices to keeps it separate.\nIs the plugin development stuck?\n. After reading the code I'm totally agree with SlexAxton. Maybe the globals \"card expiry\" verification method should use the individuals month & year validation methods and add only its specific and non-common validation checks.\nI hope that you guys will find a way to figure it out and merge it asap. I still available for any test and/or any coding.\nThank you!\n. ",
    "SlexAxton": "Hi! There was some shifting around on project maintainers, and it looks like I'll be picking this one up.\nCan you get this mergeable with the current code (So you still maintain credit)?\nMy only reaction is that we have methods for all the 'parts', and for the 'whole', but we don't use the 'parts' to make up the whole. It seems like perhaps there would be more code, and perhaps more confusing code if we were to try to piece the individual validations together (regex are kind of hard to piece together). But I just wanted to get a gut-check from you that you still think that it's better to keep them all separate.\nThanks!\n. Seems good. Thanks!\n. looks good.\n. Thanks for bumping this @thbar and thanks for the examples @mbejda !\nI'd love for information like this to be easier for everyone to find, but it's hard to merge stuff like this when we don't have anyone who knows these frameworks well, internally (they get out of date and we can't test the changes). Additionally, I'd guess we'd have to start putting a lot more frameworks into the readme (everyone's favorite some-way-bound m-v-* microlib module framework system).\nAs a halfway point, how would you guys feel about a section called \"Framework Integrations\" that just links out to a personal repo or a gist that you're willing to keep up to date?\nIf that sounds agreeable, I'm happy to take that pull request.\nThanks!\n. If I added a namespace to all the jQuery.on calls, it'd allow us to just off the whole namespace at once.\nhttps://github.com/stripe/jquery.payment/blob/master/src/jquery.payment.coffee#L341-L370\nWould you rather that we add a complementary unbind method for each of the 4 methods that do binding, or would it be enough to just document the namespace we use?\njs\n$('elem').off('.payment');\n. Thanks!\n. It's tough to add UMD to a project without like 20 major version releases, because you end up trapped in bad keyword assumptions across the web (if ('define' in window)...).\nI don't know if we could responsibly release backwards compatible update to support your use case and also use AMD right away. Because of this, I'd rather touch as little as possible, but allow jQuery \"setting/overriding\" without picking a module format pattern.\nSWEAR TO ME\nFeel free to argue.\n. Lol. :ship: \n. Seems good. Won't actually be that helpful for another 10 years when cards expire in 2030, but seems fine to check against.\n. :ship:\n. This felt more like a combinatorics and regex quiz, but it feels fine. I agree with @jamesreggio in getting rid of an unnecessary regex for startsWith.\n. Looks good.\n:sheep: \n. Looks good. Thought this update would be grosser. Good work. Merge at will.\n. Thanks. You're totally right. I don't think we want to use the oldest possible jQuery in the example file. If we were to change it, I'd rather put it on the most recent version, in case someone decides to copy it.\n. Nah, latest 1.x is the right move. Thanks!\n. str.substr(0, pattern.length) === pattern gets you the most points\n. I assume jdalton did his homework here: https://github.com/lodash/lodash/blob/master/lodash.js#L10854-L10858\n. Mr Rangio, that kind langauge will not be toleraited.\n. ",
    "rmm5t": ":-1: The beauty of the library is that an expiration date can be combined into a single field. \n\nUsability guidelines advices to keeps it separate.\n\nCould someone provide a link that conveys these guidelines? I'm not sure I buy it. Here's an article that touches on the subject:\nhttp://baymard.com/blog/how-to-format-expiration-date-fields\nBased on what this article discusses, I would conclude that a single field is the best for usability because it exactly matches what is embossed on people's credit cards.\nMy vote is to not bloat the library with more expiry date formatters.\n. @espen This pull-request includes two formatters for the year alone. Good usability guidelines would suggest that it shouldn't matter if a person enters a 2-digit year or 4-digit year. It's our job as good designers/developers to accept either input and figure it out. The same goes for the unnecessary separation of a month and year field, IMO.\n\nthe article does not mention a single input field at all. \n\nThat's true, but the point is that the expiration input should match what's printed our our credit cards as close as possible. jquery.payment didn't exist when the article was written, and I'd argue that the article's recommendation to still use dropdowns is flawed in today's world of mobile phones. Each mobile device handles dropdowns differently, and I know Andriod users who cringe when a form has a dropdown. I've derailed a bit here. The article's conclusions aren't perfect, but I think the underlying basis for the discussion (closely matching the embossed plastic) is on solid foundation.\n\nI really don't see how parsing expiry date as two fields is bloat. \n\nThis pull request adds ~120 lines of javascript to the library, ~40 lines of explanation to the README, and ~100 lines of tests. Code is a liability, because it must be maintained, and I don't see a benefit to any of it in this scenario. That's close to a 20% boost in code for a feature (collecting expiration dates) that the library already handles quite well.\nMy impression is that those who want this feature are working under misguided requirements. I'm happy to be proven wrong. If someone has some usability study results that shows two fields for expiration dates is better than the behavior that jquery.payment already gives us, I'd be very interested in reading that.\n. @mikemaccana See this discussion on the Stripe API mailing list:\nhttps://groups.google.com/a/lists.stripe.com/forum/#!searchin/api-discuss/data-stripe$3Dexp/api-discuss/_t1Z4Fy5xdI/SoG-fJeyhdAJ\nI think the correct approach is to lobby Stripe.js to add support for a combined data-stripe=\"exp\" option so the complete Stripe.js form handler can be used along side jquery.payment defaults.\n. I came here to report the same issue, so :+1:, but I think this might be heavily related and/or a dupe of #108.\n. @jamesreggio No problem. Changes made. Pull-request updated.\n. ",
    "espen": "I really don't see how parsing expiry date as two fields is bloat. Also the article does not mention a single input field at all. And as two input fields is pretty much the norm then it is something that I would expect this library to handle. So it is something that is useful for many people and I don't think this generic library should force a certain style in the implementation.\n. Perhaps I misunderstood discussion in #160 but I don't see any changes relating to this issue?\nI'm still a bit confused with the title of this project: \"A general purpose library for building credit card forms, validating inputs and formatting numbers.\" when this PR is closed because it doesn't follow the practice of stripe.js. I understand the needs of Stripe with this project but as most other credit card forms are using two expiry fields I find it 'opinionated' to put it mildly by not including support for two fields. Sorry if this comes out as passive-aggresive I'm just honestly a bit confused by the goal of the project. I use this in production and for it's a very nice helper lib and it's not very problematic with the lack of formatting for two expiry fields but it would be an improvement if it was there.\nbtw would love to see some studies that shows that a single field is better. One problem I see with Stripe checkout is that when a value is entered the placeholder is removed thus the user is unable to see what format is required.\n. ",
    "jme783": "What's the status on this? Will this be merged into master?\n. ",
    "mikemaccana": "FYI Stripe docs expect custom payment forms to have two inputs with data-stripe=\"exp-year\" and data-stripe=\"exp-month\". See https://stripe.com/docs/tutorials/forms.\nI'd love an update too. \n. I'd have thought UMDs been around long enough a lot of the edge cases are known, but allowing jQuery as an optional argument for npm/browserify/commonjs seems legit. Will have a play and see what I can do...\n. Ah, with the IIFE (which is I guess is there for <script> tag users) looks like there's no way to provide an optional arg specifying a custom jQuery to extend :. Maybe wait for the next major-numbered release (so you can break compat) and add a UMD?\nPS. I did notice SWEAR TO ME and lol, but at the time could not think of anything witty to say in response so pretended I didn't see it as I did not want to enter into some kind of humour-based arms race.\n. ",
    "montogeek": "Please merge this. As @mikemaccana said, even Stripe recommends to have two different inputs for expiration date.\n. PR are welcome :)\n. Why not?\n. It's ok. Thanks! :)\n. ",
    "tomsommer": "+1\n. +1\n. This is fixed in #170 \n. It's working as intended, according to #163\n. ",
    "robincwillis": "+1\n. ",
    "jenanwise": "Hey folks! Sorry for the lack of response here. It's not yet properly documented, but as you can see in the discussion in #160, Stripe.js now supports the combined month + day expiry.\nWe'd like to keep the api surface of jquery.payment as constrained as possible, so I'm going to close this PR. If you can do so, we do think a combined date month + day is the way to go (Stripe Checkout uses such a combined input).\n. @slorber jQuery.payment is for frontend development, and it is currently available in NPM.\n. @emirotin Sorry for the exceptionally long delay here! These changes seem reasonable, and I agree that I think we're okay with redundant event triggers, given the existing design of the library. Can you fix the conflicts and remove the unrelated changes?\n. Closing for lack of activity. Please recreate with the above changes if this is still useful to you.\n. @bassrock or @judgej Can you create a minimal reproduction test case with jsfiddle?\n. :grin: Thanks!\n. Thanks @bassrock and @judgej. It looks like you were using https://raw.githubusercontent.com/stripe/jquery.payment/master/lib/jquery.payment.min.js in that fiddle, which doesn't work, because github doesn't want you to use it as a CDN and doesn't set content type properly.You can use something like rawgit to get a fiddle-friendly url like https://rawgit.com/stripe/jquery.payment/v1.3.0/lib/jquery.payment.js.\nYou're correct that we don't format already-present values -- the api only listens for changes. If you want to format an input with an existing value, you can just add .trigger('change') on, e.g. $('.cc-number').payment('formatCardNumber').trigger('change');.\nSee this updated fiddle.\nHope that helps!\n. If this still an issue, I'd be happy to review a pull request that namespaces the jQuery.on calls!\n. I don't think we want a bare .off(), and this isn't any better than calling .off() directly yourself.\n. Hi there! Sorry for the very late reply.\nThe 'change' event is a tricky beast and not something that we want to manually trigger. Browsers don't agree on what it really means, and as far as I know it always only triggers after a commit-like action on an input field (blurring, submitting, etc), so we definitely don't want to trigger it synthetically on .val() updates. I'm not familiar with Ember and I'm not sure why it would only be listening for raw 'change' events.\nI'm going to close this. If you are still having trouble, please feel free to re-open, but please provide a jsfiddle link to a minimal reproduction, as well as information about which browsers and operating systems are affected.\n. We're going to close this for now. We're looking into ways to make jquery.payment's logic work without a jquery dependency.\n. @jondavidjohn, I sincerely apologize for the lack of clarity here! You've clearly done a lot of solid work, and payform looks fantastic.\nHowever, we've come to believe that jquery.payment has more fundamental issues than its jquery dependency. Currently it handles card brand lookup, cross-browser event handling, caret positioning, card number pretty printing, input masking, etc. Entangling these things makes maintenance difficult and forces us to compromise on the quality and testability of each of the individual components. As such, I'm hesitant to merge large changes back into this library until we've thought about how to break it into manageable modules.\n. Hi there! We definitely agree that jquery.payment is far too coupled, and separating these pieces is the right approach for new libraries. It looks like you've made some great progress on that front. jquery.payment itself will likely remain as-is for the time being, however.\n. Sorry for the late reply!\nI believe this is actually an issue with browsers disagreeing (and possibly jquery itself). Here is a jsfiddle that demonstrates the issue: using $(input).val(newVal) will kill change events in Safari and Chrome under some circumstances, but not in Firefox. You can find more discussion about browsers disagreeing about 'change' events here. Since 'change' is so non-standard, I recommend binding on other events as well (just like jquery.payment itself does).\n. @fishermand46 e.currentTarget is the node for which the handler was attached, not a nested node. For inputs, there probably shouldn't be a difference, but it's not the kind of thing subtle thing we'd like to change at this point if we can avoid it. Can you give a minimal js fiddle example of how this breaks with $.proxy?\n. Closing for lack of activity. Please recreate with more details if this is still an issue!\n. This definitely stinks! Unfortunately, I don't see a way to fix it without breaking more-critical behavior in other browsers. The issue is this: pasting triggers our reformat* handlers, which set the value asynchronously, but in Firefox (version 40), changes to an input field that are triggered asynchronously are not grouped into a single event in the undo buffer. We could make the handler synchronous, but that breaks cursor position and pasting itself (not just undo) in some mobile browsers (e.g. old Android Browser). Since pasting is more critical than paste-undo, we can't do that. Note that paste-undo is also non-functional in most IE versions.\n. validateCardExpiry is for validating user inputs, hence strings. I agree that the README is not as clear as it could be about input types, but the examples are clear.\n$.trim also expects string inputs but all versions I've seen auto convert, so .e.g $.trim(2016) returns \"2016\". There are even tests for this behavior in both jquery and zepto.\nWhat version were you using that actually showed this behavior?\n. @mduvall :+1: \n. Thanks! I'm going to close this as a duplicate of #129.\n. Do you know the card brand (Visa, Mastercard, etc.), issuer identification number, card length, and browser that this is happening in?\n. Please re-open or create a new bug if you're able to find that information. Thanks!\n. Hi @nir100! Thanks for the patch. If you look in the repo, you'll notice that we actually build this file from .coffee files. Sorry that we don't have a contributing instructions yet.\nI've made a similar fix in #187. Closing this one.\n. Hi @HZ-labs. Thanks for the patch! This looks almost correct, but we actually want to keep the leading zero. I've made that fix in #187. Also, for future reference, please make sure to make pull requests in a single commit and for a single topic. Thanks!\n. \n. @kexline4710 Do you have a reference or actual customer with a working-in-2016 Maestro card that uses 6304? The only reference I can find it is to Braintree's fake card documentation.\n. Closing for lack of activity. Please recreate with more details if this is still an issue!\n. @citrus Unfortunately, zip codes are out of scope for this project.\n. :beers:!\n. Sounds like this was addressed.\n. @macgregordennis Can you get the first few numbers in the card? See here for how we match.\n. Closing for lack of activity. Please recreate with more details if this is still an issue!\n. Hi @barvian. My inclination is to not add support for UMD. The javascript module ecosystem is quite broad and rapidly changing, and we'd like to keep maintenance minimal where possible. E.g., it looks like the blessed way to write jquery plugins in umd has changed quite recently.\nIn general, we're also much less likely to accepts PRs without an accompanying written description, motivation, and references.\n. Sounds like this was resolved!\n. You can use a third party host like https://rawgit.com/ if you like. Most folks bundle jquery.payment with their own code.\n. number is for floating point numbers. We recommend using tel, as per the README.\n. @hoverlover To follow up -- thanks for the report! Going to close as \"can't fix without breaking everything else\" :cry: And I'll let James ping this thread when his magic new library is available :grin:\n. Hi @mattLummus. The spacing between each group depends on the card type. If you enter 42424, you'll see the grouping remain. 12345 isn't a known prefix so it reverts to ungrouped.\n. Thanks for reporting. Confirmed that this is an issue.\n. @optimizamx Still looks like an issue to me. \n. Should be fixed in master. I'll try and cut a release later this week.\n. Hi there! Please use issues for identifying bugs. We're not planning on building new jquery-based validation libraries, but I'm sure if you built it, someone would use it!\n. Hi there! Please use issues for identifying bugs. Thanks!\n. 12345 doesn't match any known credit card formats, so jquery.payment doesn't know how to format it. Try 4242 4242 4242 4242 for a valid fake Visa, for example. You can see some additional fake cards here: https://stripe.com/docs/testing\n. Hi @Nirazul! You're absolutely right that this should have been a breaking change. Apologies for that. I'll fix the README.\n. Thanks!\n. Hi @scottcarlton. Icons for what? jquery.payment doesn't ship with any icons. Can you please link to a jsfiddle reproducing your issue?\n. No particular reason! We'll bundle up a release soon. Sorry for the delay!\n. I just cut 1.3.3. Hope that works for you!\n. This library requires jQuery, and tests for window.jQuery or window.Zepto or window.$.\n. Hi there @aanders77! If you've profiled a specific bottleneck and have a specific recommendation, we're all ears, but it's not otherwise a high priority for us.\n. Hi there! You can use this library with jquery or zepto, but one or the other is required. We can't endorse other libraries that we don't control for security/safety reasons, although I'm sure you'll find other libraries that fit the tools you're working with. Good luck!\n. Hi there @typeoneerror. We're not adding new features to jquery.payment at this time. Please see the project status and contributing guidelines for details.\n. Hi @dcarral. Travis is passing on master. It looks like you have some typos in your PR.\nThis falls under \"updating credit card BINs\", so yes we'd happily take with a working patch!\n. Code LGTM and I confirmed the build. Thanks for the solid PR! I'll cut a minor release to go with this.\n. Fixed with #222 / #223.\n. @dcarral We actually had regexes before and it was a pain to maintain. I think if you just limit to 3-digit suffixes it should be cleaner. None of the prefixes except 506 conflict with other prefixes, and that one can be 4-digits.\n. I squashed your commits and shortened the list in #223. I also cut a release. Thanks for contributing!\n. @danielmedina This change looks good, but I'll take care of incrementing versions separately. Can you make this PR just 1 commit w/o the version changes? Thanks!\n. @danielmedina If you use git rebase you can change your branch locally and then git push --force to cleanup this PR. Please let me know when you do!\n. Yup! Merged it.\n. @sidwyn Unfortunately, I don't have that particular device/browser combination available for testing. Can you (1) create a minimal jsfiddle reproducing the problem and (2) help identify exactly what is failing? I'm not sure why that particular combination would have trouble. Thanks!\n. Closing due to lack of info. Please reopen with more details if the problem persists!\n. Sure, thanks!\n. HI there @MladenJanjetovic. We aren't taking feature requests at this time. Please see the README, the Contributing Guidelines, and the issue template for details.\n. Which version of windows phone? In what way are they not working? Do you have a jsfiddle reproducing the error? Please provide more details. Thank you!\n. Hi @webhive. jquery.payment only knows how to format known BINs/IINs. 1111 etc do not match any actual cards.\n. Hi there @paulozoom. As noted in the readme and contributing guidelines, we're not currently accepting feature requests.\nWith respect to your particular question: I'm not sure what's missing? jquery.payment helps you format display values and spits out structured data. Whether the customer sees \"MM / YYYY\" vs \"MM/YYYY\" shouldn't affect how it gets sent to your payment provider:\n$.payment.cardExpiryVal('03 / 2025'); //=> {month: 3, year: 2025}\n. @paulozoom Probably not, sorry. I suspect it would add a bit of extra complexity on top of a mountain. Please see the readme for details! I think Braintree's integration is actually a better place to ask for looser inputs -- jquery.payment is opinionated about how things should be formatted, and we'd rather not add knobs to that.\n. Seems reasonable. Thanks!\n. As far as I can tell, this Chrome's \"Automatic credit card filling is disabled...\" popover fighting with our change handlers (which are definitely a lot slower than they should/could be). You'll only see that popup when using http instead of https, which won't matter for production environments, because you should only ever use https for production environments. It also only seems to lose entries when typing really fast (i.e. trying to break the form).\nIf you think this is something more specific or buggy, please let me know with more details! Specific problematic lines of code, and ideally video of the issue, would be great. Thank you!\n. jquery.payment works with anything that looks like a credit card. Debit cards use a card number, just like credit cards, so that will work. Routing and account number (for bank transfers) are not part of this library.\n. Hi there. Thanks for writing, but we are not accepting new feature requests at this time. Please see the README, the contributing guidelines, and the issue template for details. Thank you!\n. Hi there @SerikK. You can use custom cards with 19 digits. Your pattern is being masked by another pattern (they are selected in order). You want to use more-specific patterns and use unshift rather than push.\n. Hi @willisplummer! I don't know anything about bower, but bower info jquery.payments shows 1.4.3 released and that's our latest version. Are you sure this isn't a cacheing issue on your end? Can you produce a diff of what's in bower vs what's in npm?\n. Ah, looks like bower picks up tags automatically and the last tag was pointing at the wrong commit. Fixed by releasing v1.4.4. Thanks for reporting!\n. Hi there @Fogush. jquery.payment doesn't know how to format unknown numbers. 0000 etc are not real card numbers. You can see some similar old closed issues.\n. @Fogush Triggering a change() is your best bet.\n. Hi @willisplummer. Thanks for filing! You're right that these were false positives. I think rather than adding more strict Visa Electron ranges, we're just going to remove Visa Electron entirely. See #244 for details.\n. I've released 2.0.0 which solves this, as per #244.\n. There are a few different uses of client-side BIN->brand detection:\n- showing users a logo to confirm that the merchant recognizes their card\n- formatting the card number (e.g. amex vs visa)\n- restricting usage to a subset of card brands / other validation\nBecause perfect BIN data is not really publicly accessible, we have to balance the above needs with the cost of maintaining lossy mappings.\nYou are correct that Maestro is a sub-brand of Mastercard, but unlike Visa Electron, it:\n- has different length requirements than mastercard\n- has significantly different branding\n- has not had any recent significant BIN prefix clashes\nIn a perfect world, we'd have a 0kb magic map from BIN to brand+sub-brands, but that's obviously not feasible. So, we have to make tradeoffs, and for this case I'd rather err on including Visa Electron in Visa.\nIf detecting Visa Electron on the client is particularly important to you, and you have actionable BIN ranges, you should definitely extend $.payment.cards on your client!\nI'm not sure I understand the 3dsecure comment. 3dsecure capabalities should probably be done at the server at the time of tokenization / whatever else your payment processor is doing, rather than being looked up statically on the client (again, due to lossy mappings).\n. Hi @danielmedina!\nThose are a lot of bin patterns! Can you please go to into more detail about specific bins that are being misidentified?\nAs you know, we need a tradeoff between lookup time + library maintenance vs exhaustiveness of the bins. I'm hesitant to merge in such a large set of bins, especially as none of the other cards seem to need it.\n. @danielmedina You aren't forced to do anything! :) $.payment.cards is public and documented. You can always update it, replace it, whatever:\njs\n// on init\n$.payment.cards.forEach((card) => {\n  if (card.type == 'elo') {\n    card.type.patterns = [ // whatever you want here\n    ];\n  }\n});\nWe added it originally because it's a legit card brand that a user wanted. I agree that a reasonable solution would be to remove it. I will consider the tradeoffs there.\n. I'm going to close this in favor of #248.\nGiven the status of the project, we're not going to maintain additional optional pattern lists. You're welcome to publish yours though! :)\n. Hi @nilssolanki! Can you help track down what's happening for us? Unfortunately, I don't have a MS Edge Mobile device handy, and I can't reproduce on desktop.\n. You can try \"printing\" to the document. Something like this:\n``` js\n// create a are on the page to write text\nvar printArea = document.createElement('div');\ndocument.body.appendChild(printArea);\n// later in some part of the code that you would normally console.log\nvar text = document.createElement('p');\ntext.textContent = ' foo bar'\nprintArea.appendChild(text);\n```\nI should note that if this is really only happening on Lumia 550s (or MS Edge mobile in general), we may not be able to fix it. The event system / input handling is fairly complex and fragile (hence the notes at the top of the README), and MS Edge mobile traffic is likely a very small percentage of live traffic.\n. Hi @nilssolanki. I'm going to close as not-reproducible due to lack of activity. Please re-open with more info if you have further information!\n. @shaunstripe Good catch! Done.\n. Not a hack at all. It's in the readme :) https://github.com/stripe/jquery.payment#mobile-recommendations\n. Done. Thanks!\n. ",
    "jpantarotto": "I realize that jquery.payment is now deprecated but another use case for separated validation of expiration fields came up for me recently.  Safari does not properly autofill CC info for the combined field and needed separate inputs in order to populate for saved CC's.. ",
    "msaforrian": "In terms of clarity, restrictInt and restrictFloat would be the clearest (to me). \n. should also add tht I'd be glad to take this on and submit a patch. \n. ",
    "avelis": "From understanding @matthewforr requirements (use case) it would appear you are requesting a restrictAmount ,validateAmount and possibly a formatAmount API enhancement. It could get a little unwieldy considering currency formatting amounts with international support.\n. ",
    "Richenglish": "Definitely a need for some validation on an amount field. It would save a lot of time rolling our own.\nrestrictAmount could restrict to numbers and decimals,\nvalidateAmount could check if float numbers with max 2 dec places. And greater than .50, which is min amount for stripe. \nCurrency formatting should be ok, unless the min amount is different in diff countries, \n. So I started working on this function, but it's still flawed. It allows 44.44.4\nrestrictAmount = function(e) {\n  var input;\n  if (e.metaKey || e.ctrlKey) {\n    return true;\n  }  \n  if (e.which === 32) {\n    return false;\n  }\n  if (e.which === 0) {\n    return true;\n  } \n  if (e.which === 190) {\n    return true;\n  }\n  if (e.which < 33) {\n    return true;\n  }\n  input = String.fromCharCode(e.which);\n  return !!/[\\d{1,4}(\\.\\d{1,2})]/.test(input); \n};\n. ",
    "tino-wittig": "For example: Maestro is a Debit Card from Mastercard. \nVisaElectron is a Debit Card from Visa.\nI think, if you return Maestro as Debit Card, you should  return also VisaElectron  as Debit Card.\n. ",
    "axsuul": "Make sure you also update the README\n. ",
    "elliotf": "I've not used Bower yet, so I can't say.\nnpm has been able to satisfy my client-side and server-side requirements so far.\n. ",
    "slorber": "@maccman \n\nWe\u2019ve written a general purpose library called jQuery.payment to help with client-side input validation and formatting card numbers.\n\nhttps://stripe.com/docs/custom-form\nI don't really understand. Is this lib for server or client side use?\nAlso as of 2016 someone may want to use this lib with CommonJS / Browserify / Webpack iinstead of a jquery plugin\n. ",
    "byterussian": "Hi,\nFor security reasons... autocomplete off for CVC field means that to complete form you are in possess of credit card because have to look for security code. If all fields are with autocomplete anyone that has access on your pc/smartphone could buy with your CC.\n. ",
    "noelrocha": "It looks like  doesn't accept the spaces. Anyone with a good solution?\n. ",
    "firecall": "Workaround: Use a jQuery masking plugin, or if using bootstrap, the JASNY extensions have a masking plugin. \n. ",
    "edlebert": "This is a huge issue.  Not only does the formatting not work, for some reason it adds a space to the beginning of the CVC field when you focus on it for the first time.\n. This is related to a chromium bug where the keycode is always zero for keyup/keydown events.  But that bug has been open for over a year, soooo... I don't know if/when chromium will ever fix it.\n. This appears to be the related chromium issue: https://code.google.com/p/chromium/issues/detail?id=118639\n. ",
    "SeanLS": "The following lines need to be updated (add input as event type for android support Lines 367 to 390):\n$.payment.fn.formatCardCVC = function() {\n    this.payment('restrictNumeric');\n    this.on('keypress input', restrictCVC);\n    return this;\n  };\n$.payment.fn.formatCardExpiry = function() {\n    this.payment('restrictNumeric');\n    this.on('keypress input', restrictExpiry);\n    this.on('keypress input', formatExpiry);\n    this.on('keypress input', formatForwardSlash);\n    this.on('keypress input', formatForwardExpiry);\n    this.on('keydown input', formatBackExpiry);\n    return this;\n  };\n$.payment.fn.formatCardNumber = function() {\n    this.payment('restrictNumeric');\n    this.on('keypress input', restrictCardNumber);\n    this.on('keypress input', formatCardNumber);\n    this.on('keydown input', formatBackCardNumber);\n    this.on('keyup input', setCardType);\n    this.on('paste input', reFormatCardNumber);\n    return this;\n  };\n$.payment.fn.restrictNumeric = function() {\n    this.on('keypress input', restrictNumeric);\n    return this;\n  };\n. @david-crespo Thanks.\n. ",
    "kyleconroy": "Fixed via #88\n. @sunnystas Thanks for the contribution. jquery.payment is written in Coffeescript. You've edited the compiled lib/jquery.payment.js file. Please make your change in the src/jquery.payment.coffee. Once that happens, we can properly review the change.\n. Superseded by #92 \n. @jamesreggio just updated the library to v0.1.3. The latest changes are now available.\n. @toolmantim Thanks! No one likes those pesky mixed content warnings. \n. Sorry @titanous, but #86 beat you to the punch. Thanks again for the fix. \n. r? @SlexAxton \n. What was the payment.jquery.json file even for? \nYou should bump the version number in bower.json so users with get the most recent version of the library.\n. :ship: \n. Thanks for the fix!\n. ",
    "philfreo": "The code on those CDNs is the old-style format, but you're using the new-style format from the examples in master.\nhttp://jsfiddle.net/DDw6A/2/\n. ",
    "jimaek": "Its hard to keep track of the versions without any version tags anywhere in the file. Someone should definitely add them.\n. An official minified file would be awesome too. I will enable auto-updates now https://github.com/jsdelivr/jsdelivr#auto-updating for the unminified file.\n. Just so you know http://www.jsdelivr.com/#!jquery.payment\nOur bot keeps your project auto-updated. Just tag a version in Github and it will pick it up :)\n. ",
    "kspearrin": "I see. I agree with @jimaek . So what is the version in master? v1.0.2 wip?\n. ",
    "odhyan": "These are Union Pay numbers and do not follow Luhn's algo. Closing the issue.\n. ",
    "tim-peterson": "@Fishrock123 Thanks for the tip this is good to know. Unfortunately, inputmode=\"numeric\" is not respected by mobile webkit browsers. I just tried it. Looks like a patch for type=\"number\" is still in order?\n. This appears to be a webkit vs firefox issue a type=\"number\" and formatCardNumber works fine on firefox but not on desktop and mobile chrome or safari.\n. ",
    "riot-act": "+1 If a user tabs into a field that's already filled, they're unable to edit any values. They have to first delete the values in the field, then begin typing.\n. ",
    "JohnONolan": "Just spent a [very very] long time debugging this. It's extremely frustrating that the jquery.payment demo is running an old version of the plugin, but listing the current version at the top of the file. So it looks like this is not an issue with the plugin - but it actually is.\nThe 1-line fix proposed by @rodovich seems absolutely ideal - really hope it gets merged.\n. +1, please, please merge this\n. ",
    "niemyjski": "Is anyone else having issues with jquery 2.0 and this lib?\n. ",
    "david-crespo": "@SeanLS you've made the changes to the JS, not to the CoffeeScript. I might update this with the right change.\n. ",
    "cjoudrey": "This might fix #97.\n. Might want to add a test to https://github.com/stripe/jquery.payment/blob/91382366ae95d283db7ddf7e70212902e41a18b5/test/index.coffee#L240-L268?\n. @pixilink can you reproduce the bug with this branch: https://github.com/stripe/jquery.payment/pull/99?\nThanks!\n. re: https://code.google.com/p/android/issues/detail?id=68284\n. @byroot will probably take a stab at this tomorrow.\n. @jamesreggio any thoughts on this?\n. @christianblais I think you want to commit the .coffee version not the .js.\n. Can you update the README.md to include this new method.\n. @jamesreggio any thoughts about this?\n. Maybe also add an example of why this is useful?\n\nThis can be used for toggling additional fields that may be required for debit cards.\n\nMight be overkill. #dunnolol\n. ",
    "acatton": "This would also be fixed by #78 \n. ",
    "emirotin": "Rebase \u2014\u00a0done\nTests \u2014\u00a0done\n. I don't see a big problem with it actually.\nOn Friday, July 18, 2014, James Reggio notifications@github.com wrote:\n\nMy only other concern is that these may be triggered multiple times,\nespecially due to the reFormat functions. Let me think about how to best\nresolve that problem.\n\nReply to this email directly or view it on GitHub\nhttps://github.com/stripe/jquery.payment/pull/64#issuecomment-49383926.\n. \n",
    "hlascelles": "We definitely need this functionality. We have the same (similar?) problem as @emirotin. When the user pastes values into the field, no bound jquery change listeners are triggered, so I suspect most MVC frameworks will never receive the update in the model. Knockout.js for sure, and probably others.\n. ",
    "briancollins": "The 3 digit \"CVC\" on the back of many American Express cards also passes the CVC check (in addition to the 4-digit one on the front). You can try it yourself by creating a customer in live mode and looking at the result of the check. \n. ",
    "barrymcgee": "Ahh - didn't realise that. Thanks for the clarification @briancollins\n. ",
    "chrisdrackett": "so I'm running into this too. I have the following input:\n<input class=\"expire-date\" id=\"id_expire_date\" maxlength=\"7\" placeholder=\"Expiration Date (MM/YY)\" type=\"tel\">\nand then my js includes:\n$('#id_expire_date').payment('formatCardExpiry');\nSo far everything works as expected. The field formats correctly, etc. Next I try and setup submitting the form. I have the following within an empty form.submit:\n$('#id_expire_date').payment('cardExpirtVal')\nwhen I submit the form (regardless of the value in this field) I get the error referenced above. I'm going to attempt further debugging.\n. Time to stop coding for the day! Thanks :)\n. ",
    "patrickgordon": "@chrisdrackett you got a typo:\n$('#id_expire_date').payment('cardExpirtVal') \nto\n$('#id_expire_date').payment('cardExpiryVal')\n. :+1: thanks for the solution @wagner. Works like a charm! \n. ",
    "ajlai": "bump\n. ",
    "toolmantim": ":ice_cream:\n. ",
    "CostaC": "I've been using Jquery to modify the maxlength attribute but I just thought it would be cleaner to have it in the restrictNumeric since it's already attaching handlers.\n(I wanted this to be able to dynamically set a max length for CVC field depending on the card type.)\n. ",
    "stephen776": "+1 for this!\nThere is a pull request with this functionality but it has not been merged yet.\n. ",
    "framp": "Thanks for the reply!\n. ",
    "christianblais": "Wait, test is sketchy. The which field is manually set.\n. I think we'll need to try another approach, such as formatting the expiry field on change instead of on keydown or keypress. The problem is, right now, the formatExpiry function uses event.which to get the char code, and I don't think it works with the input event.\nAnd as I don't have an Android phone at hand, it gets difficult to test.\n. ping @jamesreggio\n. There isn't a :facepalm: emoticon big enough for this...\n. Thanks!\n. Instead of a debit flag, what would you think of a type flag, that could either return debit or credit. We would then avoid the need for a isDebitCard. Thoughts?\n. Also, could you add in your description a potential use case for such a flag?\n. Well, type was a poorly named flag in my example as it already exist, but you get the idea. My only problem with this implementation is, I guess, what is a non-debit card? Do we assume that a non-debit card is a credit card? If not, does this mean that we also need a isCreditCard method?\n. What about kind?\n. I like this. You should ping someone from stripe to get a full review and a merge. As said earlier, I'd add a use case in this PR description just to enlighten them as to when and why this could be useful.\n. It's alright with me. Thanks a lot @jamesreggio.\n. ",
    "byroot": "\ncould you please run a build and commit the updated build output files.\n\nI tried but I'm not super used to the grunt toolchain, and it's failing:\n```\n$ cake build\nevents.js:72\n        throw er; // Unhandled 'error' event\n              ^\nError: spawn ENOENT\n  at errnoException (child_process.js:1000:11)\n  at Process.ChildProcess._handle.onexit (child_process.js:791:34)\n```\nI can't figure out why.\n\nthe Travis CI integration seems broken because tests are in fact not passing\n\nIndeed -_-. I prefixed document with window. I guess the test suite is using a fake DOM?\n. Oh I found out why, thx to @davidcornu. I'll submit the compiled version.\n. @jamesreggio That's it, I compiled the coffee, and fixed the test suite.\n@davidcornu is taking a stab at improving the cakefile, so it make the build fail on travis if tests don't pass.\n. :+1: cc @jamesreggio \n. No, previously you were able using backspace to type 013 without /. I'll see if I can do a screencast of that.\n. Here you go:\n\nMight not be 100% related to the android bug, but we found it when testing that change, so we fixed it anyway.\n. ",
    "mdominiak": "Thanks @jamesreggio\nI've reached out to the customer inquiring for additional information based on your insightful comments. As far as the card type, the customer had already confirmed that it was Visa.\n. Unfortunately I haven't heard back from the customer yet. Thanks!\n. ",
    "metcalf": "This looks good to me.\nSorry for the belated review!\n. @sjelfull much better news than that! It closed automatically when I merged a fix for this problem into Stripe.js. You can now pass an exp parameter to createToken with a single expiration string. It will handle spaces, dashes, dots and slashes as a separator and handle both year-first and month-first locales. Note that in order to handle both locales, it assumes you'll only pass values with a year after 2012. Otherwise we can't distinguish between \"11 / 12\" being \"Nov 2012\" or \"Dec 2011\". In practice this should be a non-issue since dates before today will error anyway.\n. @LeleDev: You can now pass the single string as the first argument to validateExpiry. Sorry for the lack of documentation -- still thinking through the best place to document this additional behavior.\n. ",
    "SebastianTroc": "It works for me with Zepto in my project.\n. ",
    "jonahx": "I wonder if your specific example is happening because 1 is an invalid first digit, because if you try it with:\n4321| 6789\nand type 3 you get:\n4321 3678 9|\nwhich has still has the cursor jump problem you mentioned, but not the 5-in-a-row.\nA similar, perhaps more serious problem, occurs when you attempt to edit a digit of an already typed group, which is a common use case springing from typos.  For example:\n4321 6789|\n\"oh crap, that 3 was supposed to be a second 4,\" so I put my cursor back:\n43|21 6789\nand hit delete:\n4216 789|\n\"wait, what just happened?\"  i'm confused for a moment, and then maybe figure out i have to replace my cursor again:\n4|216 789\nand finally I can correct my mistake by typing the second 4:\n4421 6789|\nIf I happened to have mistyped 2 or more digits in a row, this is going to get frustrating and I may as well just start over....\n. @jamesreggio, thanks for the reply.  I don't think supporting lastpass et al should require the cursor repositioning, at least it hasn't in my own experience.  i think we can have our cake and eat it too here.\n. Thank you, that did it\nAlso, just FYI: I had grabbed my version from cdnjs, assuming it would be current, but it was 1.01 or something like that.\n. ",
    "volmer": "In this context type means the card brand. In any case, we should only retrieve the card info through the public API so we'll need a new function for that anyway, right?\n. Your point makes sense. So what about having a  function attribute and a cardFunction to get that value? I don't like the name, but as far as I know credit and debit are called card \"functions\". I've never been good at names anyway, so suggestions are welcome.\n. Done :point_up: \n. The whole point of this PR is to achieve a way to toggle some extra fields required by debit cards (issue number, start month and year). Although I'm sure this is true for Maestro, your comment made me wonder if those fields are not required by all debit card brands. Maybe kind: debit is misleading for this use case. Should we try another approach for this? Maybe by adding a different attribute?\n. Thanks, @jamesreggio, it makes sense. @christianblais @cjoudrey any other thoughts?\n. Since I'm here, why not? :smile: \n. ",
    "facundofarias": "Perhaps you can use http://www.jsdelivr.com/!?\nNow they have a automatic mechanism to discover new releases. \n. ",
    "lstrzebinczyk": "Is it at least possible to make npm see the lates version? My application uses card.js, which uses jquery.payment. There was a bug in jquery.payment, which is already fixed, but I cant even contribute in any way to make this changes go all the way to my app.\nI've found time, learned what npm is, how it works and how to use it to update card.js and this is what I received:\nnpm ERR! notarget No compatible version found: jquery.payment@'>=1.1.3-0 <1.2.0-0'\nnpm ERR! notarget Valid install targets:\nnpm ERR! notarget [\"1.0.2\",\"0.0.1\",\"1.0.3\",\"1.0.2\"]\nIt's really frustrating : |\n. Woah, that was fast. Thanks a lot, I'll keep bumping card.js people then: ].\nSorry for the little rant, I'm new in this game.\n. Awesome! Thanks a lot: )\n. ",
    "wadewilliams": "Thanks for the reply. I am using Android 4.4.2 and chrome 36. I am testing using the demo on github pages. \n. ",
    "mtomov": "Hello,\nWe are experiencing the same issue with  Samsung Galaxy S5 Mini and a Galaxy S6. \n@wadewilliams have you found a workaround ?\nThanks!\n. Actually, the fix is to follow the recommendations and use type: tel\nhttps://github.com/stripe/jquery.payment#mobile-recommendations\n. ",
    "withinboredom": "Hi Sorry,\nLatest version (not master): 1.1.0\nAffected iOS: Simulator, iPad, iPhone (all up to date)\nBrowser: Safari\nSince original filing, android has the same issue, except the character limit is 4.\nAffected Version of Android: Nexus 5 (4.4.4)\nBrowser: Chrome\nWindows Phone working great, all desktop browsers we've run have worked as well.\nTested: Chrome on windows and mac so far.\n. This turned out to be setting the payment field to type=\"number\" ... as soon as a space was inserted, the field was cleared.\n. ",
    "tyrantkhan": "from what I understand that cvc refers to the 4 digit code on the front? maybe i'm mistaken?\nPer the wiki: http://en.wikipedia.org/wiki/Card_security_code\nAmerican Express cards have a four-digit code printed on the front side of the card above the number.\n. excellent point re gift cards, i do in fact recall seeing a giftcard setup without the CSC. Thanks.\n. sure can, i'll get up an updated pull request later today!\nOn Wed, Aug 13, 2014 at 3:25 PM, James Reggio notifications@github.com\nwrote:\n\nntribution.\nIt looks like the code\n. (ok i'm definitely done committing now haha)\n. good catch, done.\n. holding off on this for now im seeing an issue.\n. this regex was based off of the one in restrictNumeric(), I'm thinking it has to do with credit cards , since they should accept space?\n. @jamesreggio were you still interested in going forward with this PR? \n. ah cool, thanks for sorting it out :) (and for this lovely tool)\n. \n",
    "judgej": "I am finding it is also not formatting it. Are you finding that too, or would that be a different issue?\n. That's a blast from the past! I'll try and dig out what I was working on. I can't remember if we carried on with this or use an alternative gateway.\n. Hmm, coming back to me. We are using it on a site with OmniPay (Authorize.Net and SagePay), but not the stripe payment gateway. It is just used to make the CC entry a little more friendly and to cut down on front-end errors.\nIn the dev environment, I was setting the CC number in the form to a test card so I did not need to keep entering it by hand. The CC number was displaying, but without any formatting; the numbers were not grouped into sets of four digits and the date was formatted strangely.\nI've just gone back into the dev system, and in the year past, PHP has been updated by a few versions, which as thrown some other errors in that I need to fix first. If I get this working, I'll post some details, but from what I remember it was as simple as populating the credit card number field in the form when it is first delivered to the browser.\n. Great example. Same applies to the date (cc-exp) if set something like value=\"0606\"\n. ",
    "bassrock": "Yea so basically its if the input field has a value assigned to it on page load. will look to do a quick js fiddle\n. Alright here is an example based on the sample. Basically there is a preset value and it is not formatting the preset value.\nhttps://jsfiddle.net/k561btds/\n. ",
    "jondavidjohn": "I have forked this plugin to make it easier to consume via npm, node, and browserify without the jQuery dependency.  I have fixed this issue in that fork.\nIf you're interested in the fix, it was with this commit.  Specifically saving the cursor's position and resetting post-format.\nThis was affecting all of the fields actually, not just the card number.\n. I've forked jQuery.payment to remove the jQuery dependency and target more platforms like browserify / CommonJS / node.\nhttps://github.com/jondavidjohn/payform\nHad a conversation going to roll this back upstream at https://github.com/jondavidjohn/payform/issues/1 but it seems to have stalled.\n. @jenanwise Just in case I need to say it again, I've done a lot of work in that regard on jondavidjohn/payform and I'd be happy to pass it back to stripe... (see full discussion in jondavidjohn/payform#1)\n. ",
    "narkeeso": "I started with @jondavidjohn's fix but found when tabbing it would trigger the change event and cause the focus to go back to the previous input. Tested in all major browsers so far.\n. @domi55 Sorry for delayed response, I haven't had time to address the concerns mentioned above but haven't ran into the issues mentioned in practice.\n. Awesome, glad I could help :)\n. ",
    "thbar": "@mbejda thanks for sharing, this is useful. If this doesn't get included into the readme, maybe worth including in the examples at least.\n. @SlexAxton as a regular KnockOut user, I wouldn't expect you to test the bindings! Just a mention of the tested version alongside with the code would be good enough (people are usually tweaking the bindings or similar usually anyway), as well as a note at the top to indicate that the integrations may be out of date, provided by users etc.\nMaybe having a framework integrations section with the full code will make it easier for someone to update a broken integration via a PR? Otherwise links to gist will work too, maybe a bit harder to update over the long run!\n. ",
    "JamoCA": "I tried the method and it works perfectly.  Thanks!\n$.payment.formatCardNumber('4444333322221111')\nreturns\n4444 3333 2222 1111\n. ",
    "keithchu": "+1 \u2013 can we get an update on this issue?\n. @jamesreggio I just did a test and it looks like every character is registering as a separate keypress, so that doesn't seem to be the issue. Additionally, this has only popped up as a problem after https://github.com/stripe/jquery.payment/commit/3dc241e9188407042026c6d39ee74480504c3715 was merged. Manually reverting that change causes RSpec to function as expected with fill_in.\n. Thanks, @jamesreggio!\n. That worked. Thanks!\n. ",
    "andrewshatnyy": "For it!\n. Added destroy method here https://github.com/stripe/jquery.payment/pull/130.\nAnswering your question: I prefer to .off() actual event with it's handler. This way if you bound anything else to element for instance 'keyup' you don't lose the functionality after $('element').payment('destroy');\nBut for now I think .off() would be just fine.\n. @NickPresta, any way I can help with merge conflicts?\n. Have you tried custom logic for this type of validation? \nIf you in test mode use Stripe's validation like so: Stripe.card.validateCardNumber('card-number')\nStripe docs\n. ",
    "JackCA": ":+1: ?\n. ",
    "nickpresta": "Any other comments on this (other than resolving merge conflicts)? Would be nice to get some version of this in?\n. ",
    "ErwanLent": "+1 Issue still persists.\n. ",
    "williamsjj": "4242 4242 4242 4242\nOn Nov 3, 2014, at 13:52, \"James Reggio\" notifications@github.com<mailto:notifications@github.com> wrote:\n@williamsjjhttps://github.com/williamsjj, you'll have to clarify which numbers are being refused. Everything that I've spot-checked seems to work just fine.\n\nReply to this email directly or view it on GitHubhttps://github.com/stripe/jquery.payment/issues/133#issuecomment-61555866.\n!SIG:5457f93138956817112103!\n. ",
    "milesmatthias": "@jamesreggio I'm able to reproduce this on an iPhone (latest iOS) in Safari and a Samsung G6 (Android 5) in Chrome. This seems to be a mobile only issue as it doesn't happen on my latest Chrome, OS X either.\nedit: if you type in a value, cut it, and paste it, it works. if you copy from somewhere else (like stripe.com/testing) and then paste into the field (initially, without having typed anything into the field) then the paste event fires, but not the change event.\nedit: testing with the card number field, but I think this is the case on any of the fields.\n. The change event on mobile (having nothing to do with this plugin) has been a documented issue apparently. What was causing this issue for me is the setTimeout setting the value on the next tick.\nWe listen to the change event to bind the input's value to a model. When I listen to the paste event instead, I have to do a setTimeout for at least 1ms in order to actually get the value of the input. I'll send a PR for the README to add a note for people who are doing data binding like this too.\n. Forking this repo produces an older/different version of this repo, so I'm not able to submit a PR like usual, but here's some text for you to append to the Mobile recommendations section in the README:\n\nWe also recommend you verify your data binding works when pasting values if you're using AJAX. Due to the events that mobile inputs fire, we set the value of an input on the next clock tick with a setTimeout. This means that if you also bind to the change or paste events to bind the value to a model, the value you get won't be filled in yet. For those reasons, we recommend getting the values of the inputs when the user submits the form if you're using AJAX:\n``` js\n$form.on(\"submit\", function(e) {\n  e.preventDefault();\nvar cardnum = $(\"#card-num-input\").val(),\n      cardexp = $(\"#card-exp-input\").val(),\n      cardcvc = $(\"#card-cvc-input\").val();\n// do stuff.\nreturn false;\n});\n```\n. \n",
    "adamdunkley": "@jamesreggio Cool, no worries :)\n. ",
    "WebTerminator": "In other words will the card number be remembered or does the library removes it somehow even if autocomplete is not set to off but to cc-number?\n. Thank you\n. ",
    "nilssolanki": "Could you please accept this pull request?\n. Hi Jenan, thank you for the quick response. Yes, I can try, although I don't have a desktop windows machine at hand, so my debugging capabilities will be limited. Unfortunately, this bug doesn't show up in the desktop simulator, we had to buy a device to reproduce it :)\nDo you have any good ideas on how to debug in a situation like this?\n. ",
    "holic": ":+1: \n. ",
    "gpbmike": "For the love of all that is holy accept this PR.\n. ",
    "nirazul": "+1\n. ",
    "domi55": "+1\n. @narkeeso what do you think about the concerns mentioned by @jamesreggio \n. @jamesreggio what do you think?\n. How about an UATP example?\n{\n  type: 'uatp',\n  patterns: [1],\n  format: /(\\d{1,4})(\\d{1,5})?(\\d{1,6})?/,\n  length: [15],\n  cvcLength: [0],\n  luhn: true\n }\nhttps://en.wikipedia.org/wiki/Bank_card_number\n. ",
    "wagner": "@keithchu you can try Capybara's native.send_keys instead of fill_in:\nruby\n'4242424242424242'.split('').each { |c| find_field('card_number').native.send_keys(c) }\nI'm using Selenium and it works like a charm.\n. ",
    "iainbeeston": "This only seems to work in selenium... what about other solutions? (PhantomJS, SlimerJS?, CapybaraWebkit?)\n. ",
    "tonymarklove": "I managed to get it to work with CapybaraWebkit by setting the value with a jQuery script executed on the page:\nruby\ndef client_set_value(selector, value)\n  script = \"$('#{selector}').val('#{value}');\"\n  page.driver.browser.execute_script(script)\nend\n. ",
    "criticerz": "Thanks for sharing that @tonymarklove! @wagner for some reason, your solution kept writing the numbers out of order :( \n. ",
    "eliotsykes": "In case you need a solution that has no jQuery dependency and works with Capybara field locators:\n```rb\n  # Usage examples:\n  # fill_in_stripe_field 'Credit card', with: '4242424242424242'\n  # fill_in_with_force 'CVC', with: 123\n  def fill_in_with_force(locator, with:)\n    field_id = find_field(locator)[:id]\n    page.execute_script \"document.getElementById('#{field_id}').value = '#{with}';\"\n  end\nalias_method :fill_in_stripe_field, :fill_in_with_force\n```\nSource: https://github.com/eliotsykes/rails-testing-toolbox/blob/master/stripe_helper.rb. ",
    "hamstu": "@jamesreggio Ah, no worries James! Thanks for the response. Understood and agreed.\n. ",
    "bendrucker": "If you're using Browserify, give browserify-shim a spin.\n. ",
    "rockfield": "@SlexAxton \nhave the same problem using it as jQuery plugin. I can't use $ for jQuery so there is defined Prototype.\ncoffee script generator gives us the following code:\nhttps://github.com/stripe/jquery.payment/blob/master/lib/jquery.payment.js\nIt's not hard to provide jQuery as a local variable:\njavascript\n// Generated by CoffeeScript 1.7.1\n(function($) {\n/// . . .\n}).call(this, jQuery);\nI'd fork it and provide pull request but I don't know coffee yet.\n. ",
    "pilou": "+1 on making this AMD compatible.\njQuery dependency is not an issue for me, after all this is a jquery plugin.\nNeither and issue the lack of the module format, but $.payment could be returned.\nAn AMD dependency could be set, so loading with requirejs wont need a shim.\nCreating a 'paralell' release like @jondavidjohn did, seems like the worst option, because resolved issues here can only be fully manually cherry picked to his realease. And I think it wont be happening, as its not happening since February.\nRemoving dependencies, and publish and independent module, AND a pquery plugin based on the independent module is a nice to have.\n. ",
    "rsj": "what happened for me is that 1password would paste in \"8 2016\" -- stickit would pick up that value and then it would get parsed as {month: 82016, year: NaN }, which jquery.payment would then correctly say was invalid.\n. ",
    "bogdanzurac": "No input whatsoever?\n. ",
    "mduvall": "Hi @bogdanzurac,\nSorry about the late response here. I have opened a fix for this issue here: https://github.com/stripe/jquery.payment/pull/180.\n. Fixed by https://github.com/stripe/jquery.payment/pull/181\n. LGTM :+1: \n. LGTM :+1: \n. Question: Will we need to update any of the methods for reformat.*? \nOverall, if you tested by feel free to merge. I will merge this in the morning and deploy.\n. @jamesreggio !!! Yeah, that would be awesome\n. Great, sounds good, will merge and cut a patch release.\n. Cool thanks @HashNuke and @jamesreggio! Will merge and cut 1.3.2.\n. Looks good, thank you for this change @reefdog. :dizzy: \n. ; :fire: \n. It'll help us with the case that somebody enters 15| and instead of construing that as the month it'll be split into 01 / 5|, merging in :white_flower: \n. Good catch! Looks right to me.\n\n. :+1: Nice!\n. \ud83d\udcaf \n. \ud83c\udf4d \ud83c\udf4e \ud83c\udf4f \ud83d\ude80 \ud83c\udf67 \ud83d\udea2 \n. \ud83d\udea2 :shipit: \u2693 \ud83d\ude80 \ud83d\udce6!\n. Oh goodness. :see_no_evil: \n. Will assume this is 0-9 full width, thanks for adding!\n. \n. ",
    "jscheel": "Reproducible: http://output.jsbin.com/yujefiqari/1\n. Looks like reFormatCardNumber rewrites the input during the input event, but outside the initial event loop, which in some what kills the change event. Been testing for a bit, but browserstack is killing me with it's slowness.\n. same with reFormatNumeric\n. ",
    "Saidbek": "having the same issue with IE11\n. ",
    "indextwo": "Having tried your fiddle, it looks like binding solely to the change event doesn't work in Firefox 40 either. Although it's a mildly different issue, in my own script I'm binding to input change focusin paste, which works for the most part except when spaces are automatically inserted between the numbers (which should come under change, as far as I'm aware) - it waits until I add another number, and then suddenly adds the last number of the set before the space, the space, and then the next number. I can't figure out how fix it.\nUpdate:\nIt looks like the change event is prevented from bubbling due to e.preventDefault() in the function formatCardNumber - specifically around lines 242 & 247. I commented these out and it didn't seem to have any adverse effects (based on my very limited tests).\nIf it's necessary to prevent bubbling of default events (and really, it shouldn't be), my suggestion would be, to trigger custom events; i.e. $target.trigger('formattedcardnumber') - that way we can listen for the custom events and not be scuppered by issues like this.\n. ",
    "adaddeo": "We are still seeing this issue on IE11. @jenanwise good call on the multiple bindings, however we are still seeing this lack of events even when binding to 'input' and 'paste' as well as 'change'. As @indextwo pointed out the e.preventDefault() is preventing bubbling in IE11. We followed his fix and the issue was resolved.. ",
    "jordanlev": "I just found https://github.com/stripe/jquery.payment#paymentcardexpiryvalstring-and-fnpaymentcardexpiryval , which seems to explain how to extract month and year from a single field. So I guess that's how you do it... but would be really nice if the docs and examples mentioned this since it seems like integrating with stripe.js would be the number 1 primary use case.\n. ",
    "tomfbiz": "I agree that this is confusing. Do you expect us to not use the payment('formatCardExpiry') when using stripe.js?\nOr do you expect us to not use the data-stripe= when using jquery.payment?\nIs this an oversight, or just an extra feature that's for non-stripe users?\nAn example using both of the libraries would be very useful.\n. ",
    "pdr": ":+1:  I'm also confused by this! Having stripe.js handle this correctly would be great.\n. ",
    "LeleDev": "+1 please fix this\n. Still waiting for a fix...\n. Is the validator for this field type still missing?\n. ",
    "fferraris": ":+1: \n. ",
    "raphaelcosta": ":+1: \n. ",
    "judetucker": ":+1: \n. ",
    "sjelfull": "@metcalf does you closing this without comment mean you disagree?\n. That is supergreat! Thanks for fixing it. Adds to the developer bliss I personally feel working with Stripe!\n. ",
    "NitroBAY": "Totaly true. Doc reads to create 2 field expiration input. I hope you'll fix that, you had built a good framework but so many ppl lost so many time on that ... It gave a bad feeling. At least you should change the doc if you don't want to change this library.\n. ",
    "websiteduck": "I had the same problem and was able to wrap /lib/jquery.payment.js in the way that you said:\n```\n( function( $ ){\n...\n}(jQuery));\n```\n. ",
    "frankcortes": "In previous versions of this library, the $ variable was local and it used as value the reference of the current jQuery. What happened? It resolved the problem. Nevertheless, @websiteduck's proposal could be cleaner.\n. ",
    "shpandian": "perfect! Thank you!\n. ",
    "lukefrake": "I have rolled back to version 1.1.4 which seems to not have this bug in. \nFYI @jamesreggio \n. Further digging, I think this started on this commit by @jamesreggio \nStill unsure if this is a feature or a bug though, so will wait on clarification but then I don't mind making a pull request if it's a bug.\n. Sorry @luongvanphuc I didn't see your second issue. Yeah thats exactly my problem!\nI'll close this issue as it's a duplicate of yours.\n. ",
    "luongvanphuc": "Is that also my concern at https://github.com/stripe/jquery.payment/issues/163 ? If yes, I've been waiting for a fix.\n. ",
    "HashNuke": "@lukefrake IMHO there's no proper way to space-out credit card numbers (so spacing out invalid ones is another problem). The length of card numbers can be anywhere from 12 to 19. https://en.wikipedia.org/wiki/Bank_card_number\n. I see test card numbers for Maestro like 5000000000000611 on securetrading.com and a few other sites. Not sure if the 5000 range has to be considered for real Maestro cards.\n. @jamesreggio Interesting to know the brand conversion on a specific set of cards.\nUpdated the range in the coffee source and ran cake build but since I had already made the change manually it didn't change anything else.\n. @jamesreggio Thank you for the update. I actually thought you worked there :)\n. @jamesreggio All the best for whatever you are upto next ~! :+1: \n. Thank you @jamesreggio & @mduvall ~!\n. ",
    "rovermicrover": "Added a commit that fixes a few related issues. \nNot all inputs support the property 'selectionStart', so added a try catch for them on finding cursor position.\nIf someone filled out one input very quickly, tabbed to the next the update cursor event could fire after they where to the next input, which means they would focus back to the pervious input. So, added a check to make sure before cursor set that $target is focused. \n. What platforms are you seeing issues on? I am still actively working on related issues on our application.\n. Ah, our IE9 support strategy is that if it works it only works by accident, so anything pre IE9 was far from my mind. So, I was working from that perspective. I can review everything and submit new commits based on keeping wider browser support in mind. What IE versions are supported, and are opera, opera-mini, and android stock browsers all supported?\n. ",
    "karlatkinson": "Any update on this?\n. ",
    "daniel-stripe": "Thank you, @jamesreggio! The Firefox situation isn't great but if the IME not restoring is the tradeoff, we're not in a bad position at all. The type=\"tel\" on desktop is an interesting hack.\n. Yup! The last half of the second byte corresponds to the numeral, if you want a quick way of identifying it. '\\uff14' == '\uff14'\n. ",
    "CodeBend": "blind, did not see other error\n. ",
    "reefdog": "Woot!\n. ",
    "joshkel": "Makes sense. Thank you for the follow-up and explanation.\n. ",
    "polymetis": "Just to expand on this. I recently had a mastercard fail the luhn test but is in fact a valid card. I tested this with another algorithm for a luhn test and it failed there as well.\nI don't think that is a problem with the code but it possible some credit card companies are moving away from that type of validation (it is a very new and quite shiny mastercard in the 51 series)\n. ",
    "VishnuSees": "Invalid cards are reported to be valid if jquery mobile is used. \n. ",
    "citrus": "@jenanwise Right on, thanks for the quick feedback! :beers: \n. ",
    "brianlukoff": "I'm seeing the same issue on the latest version of desktop Safari.\n. ",
    "birdy247": "Brian, I just debugged my code and can see that I had a syntax error.  It read\n$('input[name=cardExpiry').payment('formatCardExpiry');\nI fixed that and it works on the desktop safari.  Untested on iPhone yet!\n. ",
    "vkrovi": "this still seems to be an issue wth iPhone safari\n. ",
    "richardcornish": "@hardlynoticable I think you might be mixing up a few concepts.\nThe name attribute on <input>s is removed to prevent submission of sensitive data to the server. From the Stripe docs:\n\nNote how input fields representing sensitive card data (number, CVC, expiration month and year) do not have a \"name\" attribute. This prevents them from hitting your server when the form is submitted.\n\nThe value attribute would be for editing credit cards that already exists that you want your user to change.\nThe data-stripe attribute on <input>s is added to custom forms when you want a custom form but don't want to manually manage the submission of the object containing the data. They are simply HTML5 convenience attributes. My guess for the different ways of doing it is that people have preferences when it comes to selecting months and years via <input> or <select>.\nWith data-stripe attributes in HTML:\nStripe.card.createToken($form, stripeResponseHandler);\nWithout data-stripe attributes in HTML:\nStripe.card.createToken({\n  number: $('.card-number').val(),\n  cvc: $('.card-cvc').val(),\n  exp_month: $('.card-expiry-month').val(),\n  exp_year: $('.card-expiry-year').val()\n}, stripeResponseHandler);\nYou can make a custom form with or without data-stripe attributes and with or without jquery.payment, although you really should use jquery.payment, that's why it's there for custom forms without the Stripe Connect look and feel. Personally I like to have a little more control with two <select>s, so I go without data-stripe attributes.\n. ",
    "hardlynoticable": "You are correct; I did mix up the concepts.  When the form data is being sent to the server via ajaj nothing gets posted(putted, deleted, etc) except purposefully.  \nIf I'd thought about it for a second or two before I asked my question I would have realized that the data-stripe attribute is only important to people who are doing an html form submit.\n. ",
    "tchalvak": "Does this occur if one or more leading spaces are present?\n. It's easily testable, try it out on your form I the same browser!\nI just recommend testing that because that's the first thing the reported behavior implies to me.  If a form field has a max length but does not trim leading and trailing whitespace, and a customer copies in a space before the card number, I would expect them to become limited to 15 visible credit card digits (+1 invisible space) and not be able to see why.\nWorth a quick try.\n. ",
    "macgregordennis": "I'm not sure. I can ask the customer if this information is needed.\n. ",
    "barvian": "Not acceptable per s\u00e9, I just didn't know how to make it compatible with UMD factory methods.\n. Zepto support back in \"global\" environments.\n. ",
    "jdpedrie": "Try something like this:\n``` js\nvar expirationDate = '10 / 2018';\nvar matches = expirationDate.match(/([0-9]{2}) \\/ ([0-9]{4})/);\nStripe.card.createToken({\n      number: cardNumber,\n      cvc: cvcCode,\n      exp_month: matches[1],\n      exp_year: matches[2]\n}, stripeResponseHandler);\n```\nIn a real world situation, you'd probably pull expirationDate, number and cvcCode from the form using jQuery.\n. ",
    "nimasdj": "@jdpedrie Thanks for trying to help but as about var expirationDate what can I use to get it from form assuming I am using the same example form of this repository?\n. Beside question above: Instead of regexp match you suggested, how can I use this method to explode and assign them to year and month https://github.com/stripe/jquery.payment#paymentcardexpiryvalstring-and-fnpaymentcardexpiryval ?\n. Thanks.\n. ",
    "fstutzman": "It is unnecessary to explode the MM/YY field into separate elements.  Stripe.js supports passing expiration data as a single field:\nhttps://stripe.com/docs/stripe.js#passing-exp-dates\nHope this helps!\n. ",
    "xt0rted": "This is also hosted on cdnjs\n. ",
    "hoverlover": "I think I've narrowed it down to these two lines.\nSeems the delays of the two setTimeout calls are colliding somehow, causing the cursor to be positioned before the formatting takes place.  If I remove those timeouts everything seems to work fine no matter how fast I type.\nCan someone tell me why those setTimeout calls are even needed?  It's not obvious to me.\n. Spoke too soon :disappointed: It did seem to help it not happen as often, but I'm still getting the cursor ending up in the wrong place, even after commenting those lines.\n. Thanks, James.  I opted to take the latter approach and disable it based on Android version.  Wish I could support formatting on all mobile browsers, but I was just having too much trouble.  It's not just this library, btw. I tried several other formatting libraries out there, and none of them worked properly.  Thanks for your reply!\n. ",
    "mattLummus": "@jenanwise That makes sense however I did not see this in the documentation. Thanks for the quick response!\n. ",
    "optimizamx": "Apparently this bug was fixed, but the jquery.payment version didn't changed?\n. @jenanwise you are correct!\nWe were using the jquery.payment version that comes with the latest Woocommerce version (2.5.2) and it had the exact same problem, and then we replaced it with this version and now what it does is this:\n4444, then left, then 1234\nExpected: 44441234\nActual: 44413424\n. ",
    "lfarmer": "Hi,\nWe are experiencing similar issues...  during testing of card payments we have encountered the following:\n1. Enter card number: 5569 5100 0000 3698, with other card details\n2. Submit, expecting LUHN check failure\n3. Edit card number to valid number 5569 5112 3456 3698\nIssue arises when editing the card number and deleting the invalid digits 000000.  Whilst typing 123456, formatter seems to shift the cursor back after entering no. 3 in the above combination.\nThis results in having the following credit card number\n5569 5112 4563 3698, which fails LUHN check\n. ",
    "awendt": "Any idea when/if this is going to be fixed? \n. ",
    "alexweissman": "Umm, alright, you're welcome.  Have you considered enabling a wiki for user-generated content, then?\n. ",
    "courthead": "Ah, I was thinking that even if the user makes a mistake (resulting in the number being invalid), it'd be nice to still format the numbers in some common way, like groups of four separated by spaces (e.g. 1234 5678 9012 3456).\n. ",
    "dcarral": "Actually, @courthead suggestion (4-digit groups instead of ungrouped by default) makes sense. It would be great if this behavior could be configurable. \n@jenanwise: Would you guys be interested in adding something in that line?\n. Closing PR because of failing Travis build. \nDear maintainers, @jenanwise @dotch & co: I'd like to ask 2 questions:\n1. Do you know why the Travis build is failing? (even without adding new test cases) Could it be a version incompatibility problem?\n2. Is \"support for new credit card brand\" considered a new feature? \nIf answer to # 1 is 'yes' and to # 2 'no', I'd be able to properly re-open the PR. Otherwise, I'd stick to using the fork ;)\nThanks in advance for both your time and the information... and of course for all the effort you've put into the library ;)\n. Thanks @jenanwise! \ud83d\udc4d \n. @jenanwise Due to the nature of Elo IIN ranges, I'm afraid of the impact on performance provoked by the huge list of substrings to check against.\nHow do you guys see it?\nIs substituting the current substring comparison with a regex test something that you'd be happy about? I could work on that. \n. @jenanwise Makes sense ;) \nI've just pushed an updated IIN list trying to keep a fair balance between simplification and correctness. Maintaining some of them in the full-digit form should help for future updates to other credit card types' IINs.\n. ",
    "olivierbellone": "Copy that. I updated the example to use version 1.12.1. (Or I can just not update the example if you'd prefer!)\n. ",
    "lombo": "Sorry guys! Opened the PR to your repo instead of our fork\n. ",
    "jbrooksuk": "If you're using Browserify this doesn't work though, but you can mimic it by doing:\njs\nvar $ = require('jquery');\nwindow.jQuery = $;\n. ",
    "dotch": "LGTM\n. LGTM\n. :+1:\nCode looks good! And thanks for the detailed explanation.\n. ",
    "danielmedina": "You can ignore the increment version part. I didn't know that whill appear on pull request. \nSorry about my delay. Github didn't warn me about your answer.\n. Use the other pull request... I can't do what you sugest. \nhttps://github.com/stripe/jquery.payment/pull/230\n. The other pull request have the things you want?\n. I checked with Elo's operations here in Brazil about some complaints with some BINs not recognized and they sent me that list with all the BINs used by them. I'm pretty sure that this list increased in size, but with this update there will be no more mistakes about card's brands.\nI really think that remove this brand from your library is a reasonable solution. Doing this, only applications that really use this brand will import these rules. By the way, we was doing this untill you insert elo patterns in your library. After that i was forced to use your patterns.\nWhy don't you put this rule in your library like a extension that we can use or not?\n. You can put these patterns in a file apart on your library too. I think this will be a win-win situation. Your library will be more complete and who don't need to use it simply don't load it.\n. ",
    "ptulsyan10": "Works fine on your Demo Url...there might be some issue issue with my local clone...\n. ",
    "paulozoom": "The simplest implementation of the Braintree SDK reads the value of card fields on input and gets a payment nonce all by itself. There's a more low-level implementation which I'll switch to, though.\nQuestion: would you accept a PR where an option for the MM/YY separator was a configurable option?\n\nOn 15 Jun 2016, at 19:16, Jenan Wise notifications@github.com wrote:\nClosed #232.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "jtnotat": "Also having this issue, customer's Visa (4514) being misidentified as Elo.\n. ",
    "amanuni": "This problem is happens with me also guys please look into that and rectify it.\n. ",
    "usamamashkoor": "Thanks \n. ",
    "SerikK": "Thanks @jenanwise , Worked like a charm.\n. ",
    "willisplummer": "Hi @jenanwise! I just cleared bower's cache and downloaded 1.4.3 to a new repo. Package.json reflects that the version number is 1.4.3 but /lib and /src don't reflect the changes in (the latest PR)[https://github.com/stripe/jquery.payment/commit/717257c5a75fd4d51dea110ae38d8cf35867402f]. \nHere's what I got locally \u2014 is it possible that a new version was published to bower but somehow the latest changes weren't included?\n. thanks for fixing \ud83d\udc4d \n. Hey @jenanwise, I'm not sure that it makes sense to remove support for Visa Electron. Maestro is a sub-Mastercard in the same sense that Electron is sub-Visa, and in both cases, there are specific requirements about processing transactions on these cards (via 3d secure), so there's value in being able to distinguish them from the rest of their parent ranges.\nmore info on Maestro here: http://www.maestrocard.com/uk/\nmore info on 3d secure here: https://support.stripe.com/questions/does-stripe-support-3d-secure-verified-by-visa-mastercard-securecode\n. ",
    "gh-stripe": "Hi @virtapoika,\nThis space is used for bugs reports about jquery.payments, a library helping the implementation of payment forms. If you want an answer about a specific Checkout integration question you should send an email to our support:\nhttps://support.stripe.com/email\nI'll close this issue for now.\n. ",
    "virtapoika": "Thanks!\n\nguillaumehenriot notifications@github.com kirjoitti 30.8.2016 kello 13.20:\nHi @virtapoika https://github.com/virtapoika,\nThis space is used for bugs reports about jquery.payments, a library helping the implementation of payment forms. If you want an answer about a specific Checkout integration question you should send an email to our support:\nhttps://support.stripe.com/email https://support.stripe.com/email\nI'll close this issue for now.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub https://github.com/stripe/jquery.payment/issues/245#issuecomment-243396954, or mute the thread https://github.com/notifications/unsubscribe-auth/AF5TeiL263FT8_nUtlSOisvx5438CLI4ks5qlAP5gaJpZM4JwQWQ.\n. \n",
    "shaun-stripe": "Could you update the README to remove mentions of Elo and elo?\n. LGTM\n. Hi @adamwathan, thanks for reporting, but we can't support any changes to the input event system right now.\n. Unable to reproduce.\nI'm on Chome Version 54.0.2840.71 (64-bit) on OS X 10.11.6.  This is what I see when inputting your example expiry in the jsfiddle.  The field is highlighted in green:\n\n. Thanks for reporting, but we're only fixing critical bugs right now for this project.\n. Thanks for reporting.  I'm not sure what's causing this-- any fewer or more digits will cause the valid check to fail.  We can only handle critical bugs right now for this project, so we have to close.\n. ",
    "simoncpu": "Never mind, it turns out that typing invalid first few numbers, regardless of Chrome version, causes this problem.\nTest data: 1111111111111111\n. ",
    "netplus": "Just following this up - the same thing happens in the expiry field. For anyone else facing this problem we've found a terrible hack which works: detecting the user agent then changing the field type to tel.\nEdit ---\nLooks like the hack isn't so terrible? It's what Stripe themselves are doing if you look at the docs. Is this the official fix?\n. ",
    "duanewilson": "FYI - Seems to also work fine in Safari Version 10.0.1 (12602.2.14.0.7) Mac OS X 10.12.1\n\n. ",
    "mikemand": "How odd. It appears to be working now. Thank you for working the voodoo and correcting the problem. \ud83d\ude04 \n. ",
    "jenan-stripe": "It's correct behavior. Visas can be from 13 to 16 digits long: https://github.com/stripe/jquery.payment/blob/f0e303b3769e9bbbc22ca2eb4a3e97f64745ab33/src/jquery.payment.coffee#L43\n. Hi there -- sorry, but we're not adding new features at this time. Please see the project status in the readme.. Hi there -- sorry, but we're not adding new features at this time. Please see the project status in the readme.. Hi @Paxa -- we're not adding new features at this time, and unless there is a specific bug we're fixing, I'd rather not update these deps. Thanks!. Hi @coliff -- this is just an example page. I don't think there's a particular need to bump these deps. Thanks though!. There shouldn't be any interaction between the cvc and card fields. It looks like this might be an integration issue. If it's still a problem, can you please re-open with a minimal jsfiddle or equivalent?. Hi @kobim -- we're not adding new features at this time.. Hi @nikhil-toobler -- please see https://github.com/stripe/jquery.payment/issues/117#issuecomment-172288186. Hi @davidmerrique -- this is a reasonable change, as discussed in #129, but we're not adding new features at this time. Sorry!. Hi @cle61 -- thanks for submitting, but we don't need this.. Hi there -- sorry, but we're not adding new features at this time. Please see the project status in the readme. If you need to accept this card type, you can extend $.payment.cards. See here.. Hi @calemyers723 -- can you please write in to support@stripe.com?. Hi there -- sorry, but we're not adding new features at this time. Please see the project status in the readme. If you need to accept this card type, you can extend $.payment.cards. See here.. Hi there -- sorry, but we're not adding new features at this time. Please see the project status in the readme. If you need to accept this card type, you can extend $.payment.cards. See here.. Hi there -- sorry, but we're not adding new features at this time. Please see the project status in the readme. If you need to accept this card type, you can extend $.payment.cards. See here.. Hi @justqyx -- jquery.payment already supports this: https://github.com/stripe/jquery.payment/blob/f0e303b3769e9bbbc22ca2eb4a3e97f64745ab33/src/jquery.payment.coffee#L49-L52. As mentioned above, only known/valid formats are formatted.. Hi @developer-vtnetzwelt. We don't provide support for woocommerce here. You'll have to contact them.\nI do know that Samsung keyboards have issues with Chrome.. Hello! This repository is deprecated. Please see the readme. I was also unable to reproduce the error here: http://stripe.github.io/jquery.payment/example/. ",
    "Paxa": "Also would be nice to have access to cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlashAndSpace, hasTextSelected, luhnCheck, reFormatCVC, reFormatCardNumber, reFormatExpiry, reFormatNumeric, replaceFullWidthChars, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, safeVal, setCardType from outside.\nI never understand what is benefited to make plugin not customizable by making variable hidden. Ok, thank you for fast response!. ",
    "justqyx": "Thanks.. ",
    "arthurgouveia": "It will only add the spaces if the number is valid.. ",
    "developer-vtnetzwelt": "We are using Woocommerce in our website, but we are facing strange issue when typing Credit card information.\nThe problem when that option is either present or not present, manual entry of card details is difficult. The numbers will randomly populate and enter in random card details and makes it very hard to amend or delete/edit numbers \nOnly on certain devices/browsers and keyboards does the error appear.\nPlease note: on some devices a 'scan new card' option will appear, that feature is fine and works well \nWe need to find  a fix so that whenever manually entering card details nothing is automatically populated and a user just has to enter in their details\nPlease note: this is currently a repeatable error on my phone. My Samsung mobile model is - Samsung Galaxy S7. SM-G930F, Android version is 7.0, Samsung keyboard is version 1.5.47, Broswer: Google Chrome\nPlease note: If I change my keyboard from the default Samsung Keyboard to GBoard then the problem does not occur and I can enter in details fine . ",
    "jayeb": "We should rewrite this to make it a little more readable, and make sure it handles e.metaKey for Mac as well.\n. Ah, I missed that. In that case, any idea why ctrl+v pasting is not working?\n. "
}